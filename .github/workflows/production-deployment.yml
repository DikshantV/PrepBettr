# ===================================================
# PrepBettr Production Deployment Pipeline
# Blue-Green Deployment with Azure App Service Slots
# ===================================================

name: Production Deployment - Blue-Green

on:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'prod'
        type: choice
        options:
          - staging
          - prod
      skip_tests:
        description: 'Skip test suite (emergency only)'
        required: false
        default: false
        type: boolean
      rollback_deployment:
        description: 'Rollback to previous deployment'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.x'
  AZURE_RESOURCE_GROUP: PrepBettr_group
  APP_NAME: PrepBettr
  STAGING_SLOT: staging
  
jobs:
  # ===== PRE-DEPLOYMENT VALIDATION =====
  
  pre_deployment_checks:
    name: Pre-Deployment Validation
    runs-on: ubuntu-latest
    if: github.event.inputs.rollback_deployment != 'true'
    
    outputs:
      can_deploy: ${{ steps.validation.outputs.can_deploy }}
      baseline_snapshot: ${{ steps.baseline.outputs.snapshot_id }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check system health
        id: health_check
        run: |
          echo "üè• Checking production system health..."
          
          # Check production slot health
          PROD_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.APP_NAME }}.azurewebsites.net/api/health)
          
          # Check staging slot health  
          STAGING_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.APP_NAME }}-staging.azurewebsites.net/api/health)
          
          echo "Production health: $PROD_HEALTH"
          echo "Staging health: $STAGING_HEALTH"
          
          if [ "$PROD_HEALTH" != "200" ]; then
            echo "‚ùå Production system unhealthy - cannot proceed with deployment"
            exit 1
          fi

      - name: Create baseline snapshot
        id: baseline
        run: |
          echo "üì∏ Creating baseline snapshot..."
          SNAPSHOT_ID="baseline_$(date +%Y%m%d_%H%M%S)_$(git rev-parse --short HEAD)"
          
          # Create Cosmos DB snapshot (using CLI)
          az cosmosdb sql container create-continuous-backup \
            --account-name prepbettr-cosmosdb \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --database-name prepbettr \
            --container-name snapshots \
            --partition-key-path "/snapshotId" \
            --backup-retention-in-hours 168
          
          # Store snapshot metadata
          echo "snapshot_id=$SNAPSHOT_ID" >> $GITHUB_OUTPUT
          echo "Baseline snapshot created: $SNAPSHOT_ID"

      - name: Pre-deployment validation
        id: validation
        run: |
          echo "‚úÖ All pre-deployment checks passed"
          echo "can_deploy=true" >> $GITHUB_OUTPUT

  # ===== BUILD AND TEST =====
  
  build_and_test:
    name: Build & Test Application  
    runs-on: ubuntu-latest
    needs: pre_deployment_checks
    if: github.event.inputs.rollback_deployment != 'true'
    
    outputs:
      build_artifact: ${{ steps.package.outputs.artifact_name }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --production=false
          npm audit --audit-level=moderate

      - name: Run type checking
        run: npm run type-check

      - name: Run linting
        run: npm run lint

      - name: Run unit tests
        if: github.event.inputs.skip_tests != 'true'
        run: |
          npm run test:coverage
          echo "Unit test coverage:" 
          cat coverage/lcov-report/index.html | grep -o "Functions.*%" | head -1
        env:
          CI: true

      - name: Build production application
        run: |
          echo "üèóÔ∏è Building production application..."
          npm run build:azure
          
          # Verify build artifacts
          if [ ! -d ".next" ]; then
            echo "‚ùå Build failed - .next directory not found"
            exit 1
          fi
          
          echo "‚úÖ Build completed successfully"

      - name: Package application
        id: package
        run: |
          ARTIFACT_NAME="prepbettr-build-$(date +%Y%m%d-%H%M%S).zip"
          
          # Create deployment package
          zip -r "$ARTIFACT_NAME" \
            .next/ \
            public/ \
            package.json \
            package-lock.json \
            next.config.js \
            --exclude="node_modules/*" \
            --exclude=".env*" \
            --exclude="*.log"
          
          echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
          echo "Deployment package created: $ARTIFACT_NAME"

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.artifact_name }}
          path: ${{ steps.package.outputs.artifact_name }}
          retention-days: 7

  # ===== DEPLOY TO STAGING SLOT =====
  
  deploy_to_staging:
    name: Deploy to Staging Slot
    runs-on: ubuntu-latest
    needs: [pre_deployment_checks, build_and_test]
    if: github.event.inputs.rollback_deployment != 'true'
    environment: staging-slot
    
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build_and_test.outputs.build_artifact }}

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to staging slot
        run: |
          echo "üöÄ Deploying to staging slot..."
          
          # Deploy using zip deployment
          az webapp deployment source config-zip \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.APP_NAME }} \
            --slot ${{ env.STAGING_SLOT }} \
            --src ${{ needs.build_and_test.outputs.build_artifact }}

      - name: Wait for staging deployment
        run: |
          echo "‚è≥ Waiting for staging deployment to complete..."
          
          # Wait up to 10 minutes for deployment
          timeout=600
          interval=30
          elapsed=0
          
          while [ $elapsed -lt $timeout ]; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.APP_NAME }}-staging.azurewebsites.net/api/health)
            
            if [ "$STATUS" = "200" ]; then
              echo "‚úÖ Staging deployment successful"
              break
            fi
            
            echo "Waiting for staging slot... (${elapsed}s/${timeout}s)"
            sleep $interval
            elapsed=$((elapsed + interval))
          done
          
          if [ $elapsed -ge $timeout ]; then
            echo "‚ùå Staging deployment timeout"
            exit 1
          fi

      - name: Update staging configuration
        run: |
          echo "‚öôÔ∏è Updating staging slot configuration..."
          
          # Update app settings for staging
          az webapp config appsettings set \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.APP_NAME }} \
            --slot ${{ env.STAGING_SLOT }} \
            --settings \
              DEPLOYMENT_ID="${{ github.run_id }}" \
              DEPLOYMENT_SHA="${{ github.sha }}" \
              DEPLOYED_AT="$(date -u +%Y-%m-%dT%H:%M:%SZ)"

  # ===== STAGING VALIDATION =====
  
  validate_staging:
    name: Validate Staging Deployment
    runs-on: ubuntu-latest
    needs: [deploy_to_staging]
    if: github.event.inputs.rollback_deployment != 'true'
    
    outputs:
      validation_passed: ${{ steps.tests.outputs.all_passed }}
      performance_baseline: ${{ steps.performance.outputs.baseline }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install test dependencies
        run: npm ci

      - name: Run smoke tests
        id: smoke_tests
        run: |
          echo "üî• Running smoke tests against staging..."
          
          export PLAYWRIGHT_BASE_URL="https://${{ env.APP_NAME }}-staging.azurewebsites.net"
          
          npm run test:e2e -- --grep="@smoke" --timeout=60000
          
          echo "‚úÖ Smoke tests passed"

      - name: Run integration tests
        if: github.event.inputs.skip_tests != 'true'
        run: |
          echo "üîó Running integration tests..."
          
          export PLAYWRIGHT_BASE_URL="https://${{ env.APP_NAME }}-staging.azurewebsites.net"
          
          npm run test:e2e -- --grep="@integration" --timeout=120000

      - name: Security audit
        run: |
          echo "üîí Running security audit..."
          
          # Check SSL certificate
          echo "Checking SSL certificate..."
          curl -s -I "https://${{ env.APP_NAME }}-staging.azurewebsites.net" | grep -i "strict-transport-security"
          
          # Check security headers
          SECURITY_HEADERS=$(curl -s -I "https://${{ env.APP_NAME }}-staging.azurewebsites.net" | grep -E "(X-Frame-Options|X-Content-Type-Options|X-XSS-Protection)")
          echo "Security headers: $SECURITY_HEADERS"

      - name: Performance benchmarking
        id: performance
        run: |
          echo "‚ö° Running performance benchmarks..."
          
          # Install k6
          curl https://github.com/grafana/k6/releases/download/v0.45.0/k6-v0.45.0-linux-amd64.tar.gz -L | tar xvz --strip-components 1
          
          # Run performance tests
          export BASE_URL="https://${{ env.APP_NAME }}-staging.azurewebsites.net"
          ./k6 run --vus 5 --duration 2m tests/load/performance-validation.js --out json=performance-results.json
          
          # Extract key metrics
          P95_LATENCY=$(cat performance-results.json | jq '.metrics.http_req_duration.values["p(95)"]' | tail -1)
          ERROR_RATE=$(cat performance-results.json | jq '.metrics.http_req_failed.values.rate' | tail -1)
          
          echo "P95 Latency: ${P95_LATENCY}ms"
          echo "Error Rate: ${ERROR_RATE}%"
          
          # Set performance baseline
          echo "baseline={\"p95_latency\":$P95_LATENCY,\"error_rate\":$ERROR_RATE}" >> $GITHUB_OUTPUT
          
          # Validate against thresholds
          if (( $(echo "$P95_LATENCY > 2000" | bc -l) )); then
            echo "‚ùå Performance degradation detected - P95 latency too high"
            exit 1
          fi
          
          if (( $(echo "$ERROR_RATE > 0.05" | bc -l) )); then
            echo "‚ùå High error rate detected"
            exit 1
          fi
          
          echo "‚úÖ Performance benchmarks passed"

      - name: Data integrity validation
        run: |
          echo "üóÑÔ∏è Validating data integrity..."
          
          # Run data validation script
          node -e "
            const https = require('https');
            const stagingUrl = 'https://${{ env.APP_NAME }}-staging.azurewebsites.net/api/health/cosmos';
            
            https.get(stagingUrl, (res) => {
              let data = '';
              res.on('data', (chunk) => data += chunk);
              res.on('end', () => {
                const health = JSON.parse(data);
                if (!health.healthy) {
                  console.error('‚ùå Cosmos DB health check failed');
                  process.exit(1);
                }
                console.log('‚úÖ Data integrity validation passed');
              });
            }).on('error', (err) => {
              console.error('‚ùå Health check request failed:', err);
              process.exit(1);
            });
          "

      - name: Set validation status
        id: tests
        run: |
          echo "all_passed=true" >> $GITHUB_OUTPUT
          echo "‚úÖ All staging validation tests passed"

  # ===== PRODUCTION SLOT SWAP =====
  
  production_slot_swap:
    name: Swap to Production
    runs-on: ubuntu-latest
    needs: [validate_staging]
    if: github.event.inputs.rollback_deployment != 'true'
    environment: production
    
    outputs:
      swap_completed: ${{ steps.swap.outputs.completed }}
      swap_timestamp: ${{ steps.swap.outputs.timestamp }}
      previous_deployment_id: ${{ steps.swap.outputs.previous_id }}
      
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Pre-swap validation
        run: |
          echo "üîç Pre-swap validation..."
          
          # Verify staging slot is healthy
          STAGING_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.APP_NAME }}-staging.azurewebsites.net/api/health)
          
          if [ "$STAGING_HEALTH" != "200" ]; then
            echo "‚ùå Staging slot is not healthy - aborting swap"
            exit 1
          fi
          
          echo "‚úÖ Staging slot is healthy, proceeding with swap"

      - name: Get current production deployment
        id: current_deployment
        run: |
          # Get current production deployment ID
          CURRENT_ID=$(az webapp config appsettings list \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.APP_NAME }} \
            --query "[?name=='DEPLOYMENT_ID'].value | [0]" -o tsv)
          
          echo "current_deployment_id=$CURRENT_ID" >> $GITHUB_OUTPUT
          echo "Current production deployment: $CURRENT_ID"

      - name: Execute slot swap
        id: swap
        run: |
          echo "üîÑ Initiating slot swap..."
          SWAP_TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          
          # Perform the slot swap
          az webapp deployment slot swap \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.APP_NAME }} \
            --slot ${{ env.STAGING_SLOT }} \
            --target-slot production \
            --preserve-vnet
          
          echo "completed=true" >> $GITHUB_OUTPUT
          echo "timestamp=$SWAP_TIMESTAMP" >> $GITHUB_OUTPUT
          echo "previous_id=${{ steps.current_deployment.outputs.current_deployment_id }}" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Slot swap completed at $SWAP_TIMESTAMP"

      - name: Wait for swap completion
        run: |
          echo "‚è≥ Waiting for slot swap to complete..."
          
          # Wait for production to be healthy with new deployment
          timeout=300
          interval=15
          elapsed=0
          
          while [ $elapsed -lt $timeout ]; do
            # Check if new deployment is live in production
            PROD_DEPLOYMENT=$(az webapp config appsettings list \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --name ${{ env.APP_NAME }} \
              --query "[?name=='DEPLOYMENT_ID'].value | [0]" -o tsv)
            
            PROD_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.APP_NAME }}.azurewebsites.net/api/health)
            
            if [ "$PROD_DEPLOYMENT" = "${{ github.run_id }}" ] && [ "$PROD_HEALTH" = "200" ]; then
              echo "‚úÖ Slot swap verified successfully"
              break
            fi
            
            echo "Verifying swap completion... (${elapsed}s/${timeout}s)"
            sleep $interval
            elapsed=$((elapsed + interval))
          done
          
          if [ $elapsed -ge $timeout ]; then
            echo "‚ùå Slot swap verification timeout - may need manual intervention"
            exit 1
          fi

  # ===== POST-DEPLOYMENT VALIDATION =====
  
  post_deployment_validation:
    name: Post-Deployment Validation
    runs-on: ubuntu-latest
    needs: [production_slot_swap]
    if: github.event.inputs.rollback_deployment != 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Production health validation
        run: |
          echo "üè• Validating production health..."
          
          # Comprehensive health check
          ENDPOINTS=(
            "/api/health"
            "/api/health/redis" 
            "/api/health/cosmos"
            "/api/health/azure"
          )
          
          for endpoint in "${ENDPOINTS[@]}"; do
            echo "Checking $endpoint..."
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://${{ env.APP_NAME }}.azurewebsites.net$endpoint")
            
            if [ "$STATUS" != "200" ]; then
              echo "‚ùå Health check failed for $endpoint (HTTP $STATUS)"
              exit 1
            fi
          done
          
          echo "‚úÖ All health checks passed"

      - name: End-to-end validation
        run: |
          echo "üîó Running end-to-end validation..."
          
          export PLAYWRIGHT_BASE_URL="https://${{ env.APP_NAME }}.azurewebsites.net"
          
          # Run critical path tests
          npm run test:e2e -- --grep="@critical" --timeout=120000
          
          echo "‚úÖ End-to-end validation completed"

      - name: Performance validation
        run: |
          echo "‚ö° Validating production performance..."
          
          # Quick performance check
          START_TIME=$(date +%s%N | cut -b1-13)
          STATUS=$(curl -s -o /dev/null -w "%{http_code};%{time_total}" "https://${{ env.APP_NAME }}.azurewebsites.net/api/health")
          END_TIME=$(date +%s%N | cut -b1-13)
          
          HTTP_CODE=$(echo $STATUS | cut -d';' -f1)
          RESPONSE_TIME=$(echo $STATUS | cut -d';' -f2)
          
          echo "Response time: ${RESPONSE_TIME}s"
          
          # Validate response time
          if (( $(echo "$RESPONSE_TIME > 2.0" | bc -l) )); then
            echo "‚ö†Ô∏è Response time high but within acceptable range"
          else
            echo "‚úÖ Response time within acceptable range"
          fi

  # ===== ROLLBACK PROCEDURES =====
  
  rollback_deployment:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() || github.event.inputs.rollback_deployment == 'true'
    needs: [production_slot_swap]
    environment: production-rollback
    
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Execute rollback
        run: |
          echo "üîÑ Executing deployment rollback..."
          
          # Swap back to previous deployment
          az webapp deployment slot swap \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.APP_NAME }} \
            --slot production \
            --target-slot ${{ env.STAGING_SLOT }} \
            --preserve-vnet
          
          echo "‚úÖ Rollback completed"

      - name: Verify rollback
        run: |
          echo "üîç Verifying rollback..."
          
          # Wait for rollback to complete
          sleep 60
          
          # Check production health
          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.APP_NAME }}.azurewebsites.net/api/health)
          
          if [ "$HEALTH_STATUS" = "200" ]; then
            echo "‚úÖ Rollback verified - production is healthy"
          else
            echo "‚ùå Rollback verification failed - manual intervention required"
            exit 1
          fi

      - name: Notify rollback
        run: |
          echo "üì¢ Sending rollback notification..."
          # This would typically integrate with Slack, Teams, or PagerDuty
          echo "Deployment rollback completed for ${{ env.APP_NAME }}"

  # ===== MONITORING ACTIVATION =====
  
  activate_monitoring:
    name: Activate Production Monitoring
    runs-on: ubuntu-latest
    needs: [post_deployment_validation]
    if: success() && github.event.inputs.rollback_deployment != 'true'
    
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Update monitoring configuration
        run: |
          echo "üìä Activating production monitoring..."
          
          # Enable Application Insights alerts
          az monitor alert-rule create \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name "prepbettr-high-error-rate" \
            --condition "Failed requests > 10 over 5 minutes" \
            --description "High error rate detected"

      - name: Create deployment notification
        run: |
          echo "üì¢ Creating deployment notification..."
          
          # Post deployment summary
          cat << EOF > deployment-summary.md
          # üöÄ Deployment Summary
          
          **Environment**: Production  
          **Deployment ID**: ${{ github.run_id }}  
          **Git SHA**: ${{ github.sha }}  
          **Deployed At**: $(date -u +%Y-%m-%dT%H:%M:%SZ)  
          **Deployed By**: ${{ github.actor }}
          
          ## ‚úÖ Validation Results
          - ‚úÖ Smoke tests passed
          - ‚úÖ Integration tests passed  
          - ‚úÖ Performance benchmarks met
          - ‚úÖ Security audit passed
          - ‚úÖ Health checks passed
          
          ## üîó Links
          - [Production](https://${{ env.APP_NAME }}.azurewebsites.net)
          - [Health Check](https://${{ env.APP_NAME }}.azurewebsites.net/api/health)
          - [Azure Portal](https://portal.azure.com/#@/resource/subscriptions/your-subscription/resourceGroups/${{ env.AZURE_RESOURCE_GROUP }}/providers/Microsoft.Web/sites/${{ env.APP_NAME }})
          EOF

      - name: Upload deployment summary
        uses: actions/upload-artifact@v4
        with:
          name: deployment-summary
          path: deployment-summary.md

  # ===== NOTIFICATION =====
  
  notify_completion:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [post_deployment_validation, activate_monitoring]
    if: always() && github.event.inputs.rollback_deployment != 'true'
    
    steps:
      - name: Send success notification
        if: success()
        run: |
          echo "‚úÖ Deployment completed successfully!"
          echo "Production URL: https://${{ env.APP_NAME }}.azurewebsites.net"
          echo "Deployment ID: ${{ github.run_id }}"
          
      - name: Send failure notification  
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          echo "Check logs and consider rollback if needed"
          echo "Rollback URL: ${{ github.server_url }}/${{ github.repository }}/actions/workflows/production-deployment.yml"
