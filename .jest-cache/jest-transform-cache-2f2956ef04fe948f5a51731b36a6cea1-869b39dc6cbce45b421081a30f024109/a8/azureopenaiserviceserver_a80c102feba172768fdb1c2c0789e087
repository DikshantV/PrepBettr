e1a0f49970078153ee72e791c5578b19
"use strict";

/* istanbul ignore next */
function cov_25q5mvesoh() {
  var path = "/Users/dikshantvashistha/PrepBettr/azure/lib/services/azure-openai-service-server.ts";
  var hash = "2821fcc89aba1fc6724ad8fcf86c64cd068684c9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/azure/lib/services/azure-openai-service-server.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 77
        }
      },
      "4": {
        start: {
          line: 7,
          column: 28
        },
        end: {
          line: 7,
          column: 87
        }
      },
      "5": {
        start: {
          line: 8,
          column: 23
        },
        end: {
          line: 8,
          column: 49
        }
      },
      "6": {
        start: {
          line: 9,
          column: 26
        },
        end: {
          line: 9,
          column: 64
        }
      },
      "7": {
        start: {
          line: 10,
          column: 29
        },
        end: {
          line: 10,
          column: 70
        }
      },
      "8": {
        start: {
          line: 11,
          column: 15
        },
        end: {
          line: 11,
          column: 47
        }
      },
      "9": {
        start: {
          line: 12,
          column: 28
        },
        end: {
          line: 12,
          column: 68
        }
      },
      "10": {
        start: {
          line: 13,
          column: 17
        },
        end: {
          line: 13,
          column: 40
        }
      },
      "11": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 27
        }
      },
      "12": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 35
        }
      },
      "13": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 40
        }
      },
      "14": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "15": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 25,
          column: 10
        }
      },
      "16": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 33,
          column: 10
        }
      },
      "17": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 29
        }
      },
      "18": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 35
        }
      },
      "19": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "20": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 77
        }
      },
      "21": {
        start: {
          line: 43,
          column: 28
        },
        end: {
          line: 43,
          column: 73
        }
      },
      "22": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 53,
          column: 13
        }
      },
      "23": {
        start: {
          line: 45,
          column: 16
        },
        end: {
          line: 45,
          column: 74
        }
      },
      "24": {
        start: {
          line: 46,
          column: 30
        },
        end: {
          line: 46,
          column: 256
        }
      },
      "25": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 51,
          column: 19
        }
      },
      "26": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 52,
          column: 29
        }
      },
      "27": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 74
        }
      },
      "28": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 37
        }
      },
      "29": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 65
        }
      },
      "30": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 38
        }
      },
      "31": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 89
        }
      },
      "32": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 24
        }
      },
      "33": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 95
        }
      },
      "34": {
        start: {
          line: 64,
          column: 36
        },
        end: {
          line: 64,
          column: 136
        }
      },
      "35": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 69,
          column: 15
        }
      },
      "36": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 25
        }
      },
      "37": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 58
        }
      },
      "38": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 87,
          column: 526
        }
      },
      "39": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 88,
          column: 76
        }
      },
      "40": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 118,
          column: 9
        }
      },
      "41": {
        start: {
          line: 96,
          column: 33
        },
        end: {
          line: 96,
          column: 113
        }
      },
      "42": {
        start: {
          line: 97,
          column: 29
        },
        end: {
          line: 97,
          column: 88
        }
      },
      "43": {
        start: {
          line: 99,
          column: 28
        },
        end: {
          line: 112,
          column: 13
        }
      },
      "44": {
        start: {
          line: 107,
          column: 114
        },
        end: {
          line: 107,
          column: 122
        }
      },
      "45": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 88
        }
      },
      "46": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 102
        }
      },
      "47": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 51
        }
      },
      "48": {
        start: {
          line: 124,
          column: 55
        },
        end: {
          line: 124,
          column: 76
        }
      },
      "49": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 132,
          column: 21
        }
      },
      "50": {
        start: {
          line: 138,
          column: 25
        },
        end: {
          line: 138,
          column: 46
        }
      },
      "51": {
        start: {
          line: 139,
          column: 60
        },
        end: {
          line: 139,
          column: 81
        }
      },
      "52": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 162,
          column: 9
        }
      },
      "53": {
        start: {
          line: 142,
          column: 16
        },
        end: {
          line: 147,
          column: 18
        }
      },
      "54": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 154,
          column: 18
        }
      },
      "55": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 161,
          column: 18
        }
      },
      "56": {
        start: {
          line: 168,
          column: 71
        },
        end: {
          line: 168,
          column: 92
        }
      },
      "57": {
        start: {
          line: 169,
          column: 92
        },
        end: {
          line: 169,
          column: 113
        }
      },
      "58": {
        start: {
          line: 170,
          column: 27
        },
        end: {
          line: 170,
          column: 107
        }
      },
      "59": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 171,
          column: 47
        }
      },
      "60": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 172,
          column: 59
        }
      },
      "61": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 173,
          column: 55
        }
      },
      "62": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 174,
          column: 70
        }
      },
      "63": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 175,
          column: 57
        }
      },
      "64": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 176,
          column: 50
        }
      },
      "65": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 99
        }
      },
      "66": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 178,
          column: 78
        }
      },
      "67": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 179,
          column: 73
        }
      },
      "68": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 180,
          column: 66
        }
      },
      "69": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 181,
          column: 90
        }
      },
      "70": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 182,
          column: 52
        }
      },
      "71": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 183,
          column: 104
        }
      },
      "72": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 184,
          column: 124
        }
      },
      "73": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 185,
          column: 97
        }
      },
      "74": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 186,
          column: 109
        }
      },
      "75": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 187,
          column: 82
        }
      },
      "76": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 190,
          column: 9
        }
      },
      "77": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 54
        }
      },
      "78": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 193,
          column: 9
        }
      },
      "79": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 52
        }
      },
      "80": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 196,
          column: 9
        }
      },
      "81": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 195,
          column: 64
        }
      },
      "82": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 206,
          column: 9
        }
      },
      "83": {
        start: {
          line: 199,
          column: 16
        },
        end: {
          line: 199,
          column: 228
        }
      },
      "84": {
        start: {
          line: 200,
          column: 16
        },
        end: {
          line: 200,
          column: 22
        }
      },
      "85": {
        start: {
          line: 202,
          column: 16
        },
        end: {
          line: 202,
          column: 182
        }
      },
      "86": {
        start: {
          line: 203,
          column: 16
        },
        end: {
          line: 203,
          column: 22
        }
      },
      "87": {
        start: {
          line: 205,
          column: 16
        },
        end: {
          line: 205,
          column: 202
        }
      },
      "88": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 207,
          column: 98
        }
      },
      "89": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 208,
          column: 28
        }
      },
      "90": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 217,
          column: 9
        }
      },
      "91": {
        start: {
          line: 215,
          column: 26
        },
        end: {
          line: 215,
          column: 192
        }
      },
      "92": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 216,
          column: 24
        }
      },
      "93": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 219,
          column: 38
        }
      },
      "94": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 220,
          column: 29
        }
      },
      "95": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 221,
          column: 35
        }
      },
      "96": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 223,
          column: 59
        }
      },
      "97": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 224,
          column: 55
        }
      },
      "98": {
        start: {
          line: 226,
          column: 25
        },
        end: {
          line: 226,
          column: 129
        }
      },
      "99": {
        start: {
          line: 227,
          column: 30
        },
        end: {
          line: 227,
          column: 53
        }
      },
      "100": {
        start: {
          line: 228,
          column: 31
        },
        end: {
          line: 228,
          column: 64
        }
      },
      "101": {
        start: {
          line: 230,
          column: 38
        },
        end: {
          line: 230,
          column: 105
        }
      },
      "102": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 235,
          column: 10
        }
      },
      "103": {
        start: {
          line: 242,
          column: 29
        },
        end: {
          line: 242,
          column: 50
        }
      },
      "104": {
        start: {
          line: 243,
          column: 23
        },
        end: {
          line: 243,
          column: 25
        }
      },
      "105": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 246,
          column: 9
        }
      },
      "106": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 67
        }
      },
      "107": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 256,
          column: 9
        }
      },
      "108": {
        start: {
          line: 249,
          column: 29
        },
        end: {
          line: 249,
          column: 67
        }
      },
      "109": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 39
        }
      },
      "110": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 72
        }
      },
      "111": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 255,
          column: 57
        }
      },
      "112": {
        start: {
          line: 263,
          column: 8
        },
        end: {
          line: 267,
          column: 11
        }
      },
      "113": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 272,
          column: 9
        }
      },
      "114": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 269,
          column: 70
        }
      },
      "115": {
        start: {
          line: 270,
          column: 26
        },
        end: {
          line: 270,
          column: 226
        }
      },
      "116": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 271,
          column: 24
        }
      },
      "117": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 322,
          column: 9
        }
      },
      "118": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 321,
          column: 13
        }
      },
      "119": {
        start: {
          line: 278,
          column: 37
        },
        end: {
          line: 278,
          column: 114
        }
      },
      "120": {
        start: {
          line: 279,
          column: 16
        },
        end: {
          line: 279,
          column: 85
        }
      },
      "121": {
        start: {
          line: 281,
          column: 16
        },
        end: {
          line: 281,
          column: 35
        }
      },
      "122": {
        start: {
          line: 283,
          column: 16
        },
        end: {
          line: 320,
          column: 17
        }
      },
      "123": {
        start: {
          line: 284,
          column: 41
        },
        end: {
          line: 284,
          column: 79
        }
      },
      "124": {
        start: {
          line: 285,
          column: 44
        },
        end: {
          line: 285,
          column: 125
        }
      },
      "125": {
        start: {
          line: 286,
          column: 20
        },
        end: {
          line: 290,
          column: 22
        }
      },
      "126": {
        start: {
          line: 294,
          column: 20
        },
        end: {
          line: 294,
          column: 70
        }
      },
      "127": {
        start: {
          line: 296,
          column: 20
        },
        end: {
          line: 296,
          column: 67
        }
      },
      "128": {
        start: {
          line: 298,
          column: 42
        },
        end: {
          line: 298,
          column: 67
        }
      },
      "129": {
        start: {
          line: 300,
          column: 20
        },
        end: {
          line: 302,
          column: 22
        }
      },
      "130": {
        start: {
          line: 304,
          column: 47
        },
        end: {
          line: 304,
          column: 98
        }
      },
      "131": {
        start: {
          line: 305,
          column: 20
        },
        end: {
          line: 305,
          column: 103
        }
      },
      "132": {
        start: {
          line: 307,
          column: 43
        },
        end: {
          line: 307,
          column: 73
        }
      },
      "133": {
        start: {
          line: 308,
          column: 20
        },
        end: {
          line: 308,
          column: 98
        }
      },
      "134": {
        start: {
          line: 310,
          column: 20
        },
        end: {
          line: 310,
          column: 67
        }
      },
      "135": {
        start: {
          line: 312,
          column: 44
        },
        end: {
          line: 312,
          column: 107
        }
      },
      "136": {
        start: {
          line: 313,
          column: 41
        },
        end: {
          line: 313,
          column: 183
        }
      },
      "137": {
        start: {
          line: 314,
          column: 43
        },
        end: {
          line: 314,
          column: 79
        }
      },
      "138": {
        start: {
          line: 315,
          column: 20
        },
        end: {
          line: 319,
          column: 22
        }
      },
      "139": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 325,
          column: 79
        }
      },
      "140": {
        start: {
          line: 326,
          column: 8
        },
        end: {
          line: 409,
          column: 9
        }
      },
      "141": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 331,
          column: 15
        }
      },
      "142": {
        start: {
          line: 332,
          column: 12
        },
        end: {
          line: 334,
          column: 13
        }
      },
      "143": {
        start: {
          line: 333,
          column: 16
        },
        end: {
          line: 333,
          column: 65
        }
      },
      "144": {
        start: {
          line: 335,
          column: 31
        },
        end: {
          line: 343,
          column: 14
        }
      },
      "145": {
        start: {
          line: 344,
          column: 38
        },
        end: {
          line: 344,
          column: 240
        }
      },
      "146": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 348,
          column: 15
        }
      },
      "147": {
        start: {
          line: 350,
          column: 12
        },
        end: {
          line: 350,
          column: 93
        }
      },
      "148": {
        start: {
          line: 352,
          column: 41
        },
        end: {
          line: 352,
          column: 94
        }
      },
      "149": {
        start: {
          line: 353,
          column: 33
        },
        end: {
          line: 353,
          column: 73
        }
      },
      "150": {
        start: {
          line: 355,
          column: 12
        },
        end: {
          line: 355,
          column: 78
        }
      },
      "151": {
        start: {
          line: 357,
          column: 35
        },
        end: {
          line: 357,
          column: 105
        }
      },
      "152": {
        start: {
          line: 358,
          column: 12
        },
        end: {
          line: 362,
          column: 15
        }
      },
      "153": {
        start: {
          line: 363,
          column: 12
        },
        end: {
          line: 368,
          column: 14
        }
      },
      "154": {
        start: {
          line: 371,
          column: 12
        },
        end: {
          line: 371,
          column: 87
        }
      },
      "155": {
        start: {
          line: 374,
          column: 12
        },
        end: {
          line: 400,
          column: 13
        }
      },
      "156": {
        start: {
          line: 375,
          column: 33
        },
        end: {
          line: 375,
          column: 38
        }
      },
      "157": {
        start: {
          line: 376,
          column: 16
        },
        end: {
          line: 381,
          column: 19
        }
      },
      "158": {
        start: {
          line: 382,
          column: 16
        },
        end: {
          line: 396,
          column: 17
        }
      },
      "159": {
        start: {
          line: 383,
          column: 20
        },
        end: {
          line: 383,
          column: 271
        }
      },
      "160": {
        start: {
          line: 385,
          column: 21
        },
        end: {
          line: 396,
          column: 17
        }
      },
      "161": {
        start: {
          line: 386,
          column: 20
        },
        end: {
          line: 386,
          column: 257
        }
      },
      "162": {
        start: {
          line: 388,
          column: 21
        },
        end: {
          line: 396,
          column: 17
        }
      },
      "163": {
        start: {
          line: 389,
          column: 20
        },
        end: {
          line: 389,
          column: 283
        }
      },
      "164": {
        start: {
          line: 391,
          column: 21
        },
        end: {
          line: 396,
          column: 17
        }
      },
      "165": {
        start: {
          line: 392,
          column: 20
        },
        end: {
          line: 392,
          column: 246
        }
      },
      "166": {
        start: {
          line: 395,
          column: 20
        },
        end: {
          line: 395,
          column: 138
        }
      },
      "167": {
        start: {
          line: 399,
          column: 16
        },
        end: {
          line: 399,
          column: 134
        }
      },
      "168": {
        start: {
          line: 402,
          column: 12
        },
        end: {
          line: 407,
          column: 15
        }
      },
      "169": {
        start: {
          line: 408,
          column: 12
        },
        end: {
          line: 408,
          column: 34
        }
      },
      "170": {
        start: {
          line: 415,
          column: 25
        },
        end: {
          line: 415,
          column: 46
        }
      },
      "171": {
        start: {
          line: 416,
          column: 8
        },
        end: {
          line: 435,
          column: 9
        }
      },
      "172": {
        start: {
          line: 418,
          column: 16
        },
        end: {
          line: 422,
          column: 18
        }
      },
      "173": {
        start: {
          line: 424,
          column: 16
        },
        end: {
          line: 428,
          column: 18
        }
      },
      "174": {
        start: {
          line: 430,
          column: 16
        },
        end: {
          line: 434,
          column: 18
        }
      },
      "175": {
        start: {
          line: 442,
          column: 8
        },
        end: {
          line: 445,
          column: 9
        }
      },
      "176": {
        start: {
          line: 443,
          column: 26
        },
        end: {
          line: 443,
          column: 232
        }
      },
      "177": {
        start: {
          line: 444,
          column: 12
        },
        end: {
          line: 444,
          column: 24
        }
      },
      "178": {
        start: {
          line: 446,
          column: 8
        },
        end: {
          line: 485,
          column: 9
        }
      },
      "179": {
        start: {
          line: 448,
          column: 33
        },
        end: {
          line: 448,
          column: 114
        }
      },
      "180": {
        start: {
          line: 449,
          column: 29
        },
        end: {
          line: 449,
          column: 88
        }
      },
      "181": {
        start: {
          line: 451,
          column: 28
        },
        end: {
          line: 459,
          column: 13
        }
      },
      "182": {
        start: {
          line: 456,
          column: 114
        },
        end: {
          line: 456,
          column: 122
        }
      },
      "183": {
        start: {
          line: 460,
          column: 35
        },
        end: {
          line: 460,
          column: 103
        }
      },
      "184": {
        start: {
          line: 461,
          column: 12
        },
        end: {
          line: 463,
          column: 13
        }
      },
      "185": {
        start: {
          line: 462,
          column: 16
        },
        end: {
          line: 462,
          column: 65
        }
      },
      "186": {
        start: {
          line: 464,
          column: 31
        },
        end: {
          line: 470,
          column: 14
        }
      },
      "187": {
        start: {
          line: 471,
          column: 29
        },
        end: {
          line: 471,
          column: 246
        }
      },
      "188": {
        start: {
          line: 472,
          column: 12
        },
        end: {
          line: 472,
          column: 28
        }
      },
      "189": {
        start: {
          line: 475,
          column: 12
        },
        end: {
          line: 475,
          column: 102
        }
      },
      "190": {
        start: {
          line: 477,
          column: 36
        },
        end: {
          line: 477,
          column: 135
        }
      },
      "191": {
        start: {
          line: 478,
          column: 12
        },
        end: {
          line: 483,
          column: 15
        }
      },
      "192": {
        start: {
          line: 484,
          column: 12
        },
        end: {
          line: 484,
          column: 58
        }
      },
      "193": {
        start: {
          line: 491,
          column: 27
        },
        end: {
          line: 491,
          column: 81
        }
      },
      "194": {
        start: {
          line: 492,
          column: 8
        },
        end: {
          line: 493,
          column: 28
        }
      },
      "195": {
        start: {
          line: 493,
          column: 12
        },
        end: {
          line: 493,
          column: 28
        }
      },
      "196": {
        start: {
          line: 494,
          column: 8
        },
        end: {
          line: 495,
          column: 25
        }
      },
      "197": {
        start: {
          line: 495,
          column: 12
        },
        end: {
          line: 495,
          column: 25
        }
      },
      "198": {
        start: {
          line: 496,
          column: 8
        },
        end: {
          line: 497,
          column: 28
        }
      },
      "199": {
        start: {
          line: 497,
          column: 12
        },
        end: {
          line: 497,
          column: 28
        }
      },
      "200": {
        start: {
          line: 498,
          column: 8
        },
        end: {
          line: 498,
          column: 27
        }
      },
      "201": {
        start: {
          line: 505,
          column: 47
        },
        end: {
          line: 505,
          column: 68
        }
      },
      "202": {
        start: {
          line: 506,
          column: 71
        },
        end: {
          line: 506,
          column: 92
        }
      },
      "203": {
        start: {
          line: 507,
          column: 29
        },
        end: {
          line: 507,
          column: 72
        }
      },
      "204": {
        start: {
          line: 509,
          column: 8
        },
        end: {
          line: 533,
          column: 9
        }
      },
      "205": {
        start: {
          line: 511,
          column: 16
        },
        end: {
          line: 511,
          column: 85
        }
      },
      "206": {
        start: {
          line: 512,
          column: 16
        },
        end: {
          line: 512,
          column: 115
        }
      },
      "207": {
        start: {
          line: 513,
          column: 16
        },
        end: {
          line: 513,
          column: 97
        }
      },
      "208": {
        start: {
          line: 514,
          column: 16
        },
        end: {
          line: 514,
          column: 84
        }
      },
      "209": {
        start: {
          line: 515,
          column: 16
        },
        end: {
          line: 515,
          column: 76
        }
      },
      "210": {
        start: {
          line: 516,
          column: 16
        },
        end: {
          line: 516,
          column: 75
        }
      },
      "211": {
        start: {
          line: 517,
          column: 16
        },
        end: {
          line: 517,
          column: 75
        }
      },
      "212": {
        start: {
          line: 518,
          column: 16
        },
        end: {
          line: 518,
          column: 74
        }
      },
      "213": {
        start: {
          line: 519,
          column: 16
        },
        end: {
          line: 519,
          column: 22
        }
      },
      "214": {
        start: {
          line: 521,
          column: 16
        },
        end: {
          line: 521,
          column: 88
        }
      },
      "215": {
        start: {
          line: 522,
          column: 16
        },
        end: {
          line: 522,
          column: 107
        }
      },
      "216": {
        start: {
          line: 523,
          column: 16
        },
        end: {
          line: 523,
          column: 70
        }
      },
      "217": {
        start: {
          line: 524,
          column: 16
        },
        end: {
          line: 524,
          column: 64
        }
      },
      "218": {
        start: {
          line: 525,
          column: 16
        },
        end: {
          line: 525,
          column: 60
        }
      },
      "219": {
        start: {
          line: 526,
          column: 16
        },
        end: {
          line: 526,
          column: 71
        }
      },
      "220": {
        start: {
          line: 527,
          column: 16
        },
        end: {
          line: 527,
          column: 63
        }
      },
      "221": {
        start: {
          line: 528,
          column: 16
        },
        end: {
          line: 528,
          column: 22
        }
      },
      "222": {
        start: {
          line: 530,
          column: 16
        },
        end: {
          line: 530,
          column: 72
        }
      },
      "223": {
        start: {
          line: 531,
          column: 16
        },
        end: {
          line: 531,
          column: 161
        }
      },
      "224": {
        start: {
          line: 532,
          column: 16
        },
        end: {
          line: 532,
          column: 84
        }
      },
      "225": {
        start: {
          line: 534,
          column: 8
        },
        end: {
          line: 536,
          column: 9
        }
      },
      "226": {
        start: {
          line: 535,
          column: 12
        },
        end: {
          line: 535,
          column: 67
        }
      },
      "227": {
        start: {
          line: 537,
          column: 8
        },
        end: {
          line: 539,
          column: 9
        }
      },
      "228": {
        start: {
          line: 538,
          column: 12
        },
        end: {
          line: 538,
          column: 79
        }
      },
      "229": {
        start: {
          line: 540,
          column: 8
        },
        end: {
          line: 540,
          column: 103
        }
      },
      "230": {
        start: {
          line: 541,
          column: 8
        },
        end: {
          line: 566,
          column: 9
        }
      },
      "231": {
        start: {
          line: 542,
          column: 12
        },
        end: {
          line: 544,
          column: 13
        }
      },
      "232": {
        start: {
          line: 543,
          column: 16
        },
        end: {
          line: 543,
          column: 65
        }
      },
      "233": {
        start: {
          line: 545,
          column: 31
        },
        end: {
          line: 551,
          column: 14
        }
      },
      "234": {
        start: {
          line: 552,
          column: 29
        },
        end: {
          line: 552,
          column: 246
        }
      },
      "235": {
        start: {
          line: 553,
          column: 12
        },
        end: {
          line: 553,
          column: 28
        }
      },
      "236": {
        start: {
          line: 556,
          column: 12
        },
        end: {
          line: 556,
          column: 85
        }
      },
      "237": {
        start: {
          line: 558,
          column: 36
        },
        end: {
          line: 558,
          column: 135
        }
      },
      "238": {
        start: {
          line: 559,
          column: 12
        },
        end: {
          line: 564,
          column: 15
        }
      },
      "239": {
        start: {
          line: 565,
          column: 12
        },
        end: {
          line: 565,
          column: 46
        }
      },
      "240": {
        start: {
          line: 572,
          column: 25
        },
        end: {
          line: 572,
          column: 46
        }
      },
      "241": {
        start: {
          line: 573,
          column: 8
        },
        end: {
          line: 580,
          column: 9
        }
      },
      "242": {
        start: {
          line: 575,
          column: 16
        },
        end: {
          line: 575,
          column: 95
        }
      },
      "243": {
        start: {
          line: 577,
          column: 16
        },
        end: {
          line: 577,
          column: 100
        }
      },
      "244": {
        start: {
          line: 579,
          column: 16
        },
        end: {
          line: 579,
          column: 66
        }
      },
      "245": {
        start: {
          line: 587,
          column: 8
        },
        end: {
          line: 589,
          column: 9
        }
      },
      "246": {
        start: {
          line: 588,
          column: 12
        },
        end: {
          line: 588,
          column: 24
        }
      },
      "247": {
        start: {
          line: 590,
          column: 30
        },
        end: {
          line: 590,
          column: 305
        }
      },
      "248": {
        start: {
          line: 590,
          column: 262
        },
        end: {
          line: 590,
          column: 291
        }
      },
      "249": {
        start: {
          line: 591,
          column: 8
        },
        end: {
          line: 614,
          column: 9
        }
      },
      "250": {
        start: {
          line: 592,
          column: 12
        },
        end: {
          line: 594,
          column: 13
        }
      },
      "251": {
        start: {
          line: 593,
          column: 16
        },
        end: {
          line: 593,
          column: 65
        }
      },
      "252": {
        start: {
          line: 595,
          column: 31
        },
        end: {
          line: 600,
          column: 14
        }
      },
      "253": {
        start: {
          line: 601,
          column: 12
        },
        end: {
          line: 601,
          column: 215
        }
      },
      "254": {
        start: {
          line: 604,
          column: 12
        },
        end: {
          line: 604,
          column: 74
        }
      },
      "255": {
        start: {
          line: 606,
          column: 36
        },
        end: {
          line: 606,
          column: 135
        }
      },
      "256": {
        start: {
          line: 607,
          column: 12
        },
        end: {
          line: 612,
          column: 15
        }
      },
      "257": {
        start: {
          line: 613,
          column: 12
        },
        end: {
          line: 613,
          column: 24
        }
      },
      "258": {
        start: {
          line: 620,
          column: 8
        },
        end: {
          line: 620,
          column: 40
        }
      },
      "259": {
        start: {
          line: 626,
          column: 8
        },
        end: {
          line: 626,
          column: 38
        }
      },
      "260": {
        start: {
          line: 627,
          column: 8
        },
        end: {
          line: 627,
          column: 29
        }
      },
      "261": {
        start: {
          line: 628,
          column: 8
        },
        end: {
          line: 628,
          column: 35
        }
      },
      "262": {
        start: {
          line: 629,
          column: 8
        },
        end: {
          line: 634,
          column: 10
        }
      },
      "263": {
        start: {
          line: 635,
          column: 8
        },
        end: {
          line: 635,
          column: 59
        }
      },
      "264": {
        start: {
          line: 638,
          column: 0
        },
        end: {
          line: 638,
          column: 60
        }
      },
      "265": {
        start: {
          line: 640,
          column: 0
        },
        end: {
          line: 640,
          column: 66
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 18
          },
          end: {
            line: 36,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 40,
            column: 5
          }
        },
        loc: {
          start: {
            line: 40,
            column: 23
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 40
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 76,
            column: 4
          },
          end: {
            line: 76,
            column: 5
          }
        },
        loc: {
          start: {
            line: 76,
            column: 14
          },
          end: {
            line: 78,
            column: 5
          }
        },
        line: 76
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        loc: {
          start: {
            line: 82,
            column: 33
          },
          end: {
            line: 89,
            column: 5
          }
        },
        line: 82
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 93,
            column: 4
          },
          end: {
            line: 93,
            column: 5
          }
        },
        loc: {
          start: {
            line: 93,
            column: 25
          },
          end: {
            line: 119,
            column: 5
          }
        },
        line: 93
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 107,
            column: 109
          },
          end: {
            line: 107,
            column: 110
          }
        },
        loc: {
          start: {
            line: 107,
            column: 114
          },
          end: {
            line: 107,
            column: 122
          }
        },
        line: 107
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 123,
            column: 4
          },
          end: {
            line: 123,
            column: 5
          }
        },
        loc: {
          start: {
            line: 123,
            column: 30
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 123
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 137,
            column: 4
          },
          end: {
            line: 137,
            column: 5
          }
        },
        loc: {
          start: {
            line: 137,
            column: 25
          },
          end: {
            line: 163,
            column: 5
          }
        },
        line: 137
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 167,
            column: 4
          },
          end: {
            line: 167,
            column: 5
          }
        },
        loc: {
          start: {
            line: 167,
            column: 31
          },
          end: {
            line: 209,
            column: 5
          }
        },
        line: 167
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 213,
            column: 4
          },
          end: {
            line: 213,
            column: 5
          }
        },
        loc: {
          start: {
            line: 213,
            column: 39
          },
          end: {
            line: 236,
            column: 5
          }
        },
        line: 213
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 241,
            column: 4
          },
          end: {
            line: 241,
            column: 5
          }
        },
        loc: {
          start: {
            line: 241,
            column: 30
          },
          end: {
            line: 257,
            column: 5
          }
        },
        line: 241
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 261,
            column: 4
          },
          end: {
            line: 261,
            column: 5
          }
        },
        loc: {
          start: {
            line: 261,
            column: 44
          },
          end: {
            line: 410,
            column: 5
          }
        },
        line: 261
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 414,
            column: 4
          },
          end: {
            line: 414,
            column: 5
          }
        },
        loc: {
          start: {
            line: 414,
            column: 34
          },
          end: {
            line: 436,
            column: 5
          }
        },
        line: 414
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 440,
            column: 4
          },
          end: {
            line: 440,
            column: 5
          }
        },
        loc: {
          start: {
            line: 440,
            column: 38
          },
          end: {
            line: 486,
            column: 5
          }
        },
        line: 440
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 456,
            column: 109
          },
          end: {
            line: 456,
            column: 110
          }
        },
        loc: {
          start: {
            line: 456,
            column: 114
          },
          end: {
            line: 456,
            column: 122
          }
        },
        line: 456
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 490,
            column: 4
          },
          end: {
            line: 490,
            column: 5
          }
        },
        loc: {
          start: {
            line: 490,
            column: 25
          },
          end: {
            line: 499,
            column: 5
          }
        },
        line: 490
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 503,
            column: 4
          },
          end: {
            line: 503,
            column: 5
          }
        },
        loc: {
          start: {
            line: 503,
            column: 44
          },
          end: {
            line: 567,
            column: 5
          }
        },
        line: 503
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 571,
            column: 4
          },
          end: {
            line: 571,
            column: 5
          }
        },
        loc: {
          start: {
            line: 571,
            column: 26
          },
          end: {
            line: 581,
            column: 5
          }
        },
        line: 571
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 585,
            column: 4
          },
          end: {
            line: 585,
            column: 5
          }
        },
        loc: {
          start: {
            line: 585,
            column: 37
          },
          end: {
            line: 615,
            column: 5
          }
        },
        line: 585
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 590,
            column: 255
          },
          end: {
            line: 590,
            column: 256
          }
        },
        loc: {
          start: {
            line: 590,
            column: 262
          },
          end: {
            line: 590,
            column: 291
          }
        },
        line: 590
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 619,
            column: 4
          },
          end: {
            line: 619,
            column: 5
          }
        },
        loc: {
          start: {
            line: 619,
            column: 29
          },
          end: {
            line: 621,
            column: 5
          }
        },
        line: 619
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 625,
            column: 4
          },
          end: {
            line: 625,
            column: 5
          }
        },
        loc: {
          start: {
            line: 625,
            column: 12
          },
          end: {
            line: 636,
            column: 5
          }
        },
        line: 625
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 53,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 53,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "4": {
        loc: {
          start: {
            line: 44,
            column: 16
          },
          end: {
            line: 44,
            column: 105
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 16
          },
          end: {
            line: 44,
            column: 39
          }
        }, {
          start: {
            line: 44,
            column: 43
          },
          end: {
            line: 44,
            column: 71
          }
        }, {
          start: {
            line: 44,
            column: 75
          },
          end: {
            line: 44,
            column: 105
          }
        }],
        line: 44
      },
      "5": {
        loc: {
          start: {
            line: 65,
            column: 41
          },
          end: {
            line: 65,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 65,
            column: 66
          },
          end: {
            line: 65,
            column: 71
          }
        }, {
          start: {
            line: 65,
            column: 74
          },
          end: {
            line: 65,
            column: 98
          }
        }],
        line: 65
      },
      "6": {
        loc: {
          start: {
            line: 77,
            column: 15
          },
          end: {
            line: 77,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 77,
            column: 15
          },
          end: {
            line: 77,
            column: 33
          }
        }, {
          start: {
            line: 77,
            column: 37
          },
          end: {
            line: 77,
            column: 57
          }
        }],
        line: 77
      },
      "7": {
        loc: {
          start: {
            line: 87,
            column: 34
          },
          end: {
            line: 87,
            column: 191
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 87,
            column: 181
          },
          end: {
            line: 87,
            column: 183
          }
        }, {
          start: {
            line: 87,
            column: 186
          },
          end: {
            line: 87,
            column: 191
          }
        }],
        line: 87
      },
      "8": {
        loc: {
          start: {
            line: 87,
            column: 34
          },
          end: {
            line: 87,
            column: 178
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 87,
            column: 34
          },
          end: {
            line: 87,
            column: 161
          }
        }, {
          start: {
            line: 87,
            column: 165
          },
          end: {
            line: 87,
            column: 178
          }
        }],
        line: 87
      },
      "9": {
        loc: {
          start: {
            line: 87,
            column: 40
          },
          end: {
            line: 87,
            column: 151
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 87,
            column: 104
          },
          end: {
            line: 87,
            column: 106
          }
        }, {
          start: {
            line: 87,
            column: 109
          },
          end: {
            line: 87,
            column: 151
          }
        }],
        line: 87
      },
      "10": {
        loc: {
          start: {
            line: 87,
            column: 40
          },
          end: {
            line: 87,
            column: 101
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 87,
            column: 40
          },
          end: {
            line: 87,
            column: 84
          }
        }, {
          start: {
            line: 87,
            column: 88
          },
          end: {
            line: 87,
            column: 101
          }
        }],
        line: 87
      },
      "11": {
        loc: {
          start: {
            line: 87,
            column: 215
          },
          end: {
            line: 87,
            column: 368
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 87,
            column: 362
          },
          end: {
            line: 87,
            column: 364
          }
        }, {
          start: {
            line: 87,
            column: 367
          },
          end: {
            line: 87,
            column: 368
          }
        }],
        line: 87
      },
      "12": {
        loc: {
          start: {
            line: 87,
            column: 215
          },
          end: {
            line: 87,
            column: 359
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 87,
            column: 215
          },
          end: {
            line: 87,
            column: 342
          }
        }, {
          start: {
            line: 87,
            column: 346
          },
          end: {
            line: 87,
            column: 359
          }
        }],
        line: 87
      },
      "13": {
        loc: {
          start: {
            line: 87,
            column: 221
          },
          end: {
            line: 87,
            column: 332
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 87,
            column: 285
          },
          end: {
            line: 87,
            column: 287
          }
        }, {
          start: {
            line: 87,
            column: 290
          },
          end: {
            line: 87,
            column: 332
          }
        }],
        line: 87
      },
      "14": {
        loc: {
          start: {
            line: 87,
            column: 221
          },
          end: {
            line: 87,
            column: 282
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 87,
            column: 221
          },
          end: {
            line: 87,
            column: 265
          }
        }, {
          start: {
            line: 87,
            column: 269
          },
          end: {
            line: 87,
            column: 282
          }
        }],
        line: 87
      },
      "15": {
        loc: {
          start: {
            line: 87,
            column: 384
          },
          end: {
            line: 87,
            column: 522
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 87,
            column: 515
          },
          end: {
            line: 87,
            column: 517
          }
        }, {
          start: {
            line: 87,
            column: 520
          },
          end: {
            line: 87,
            column: 522
          }
        }],
        line: 87
      },
      "16": {
        loc: {
          start: {
            line: 87,
            column: 384
          },
          end: {
            line: 87,
            column: 512
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 87,
            column: 384
          },
          end: {
            line: 87,
            column: 495
          }
        }, {
          start: {
            line: 87,
            column: 499
          },
          end: {
            line: 87,
            column: 512
          }
        }],
        line: 87
      },
      "17": {
        loc: {
          start: {
            line: 87,
            column: 390
          },
          end: {
            line: 87,
            column: 485
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 87,
            column: 446
          },
          end: {
            line: 87,
            column: 448
          }
        }, {
          start: {
            line: 87,
            column: 451
          },
          end: {
            line: 87,
            column: 485
          }
        }],
        line: 87
      },
      "18": {
        loc: {
          start: {
            line: 87,
            column: 390
          },
          end: {
            line: 87,
            column: 443
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 87,
            column: 390
          },
          end: {
            line: 87,
            column: 426
          }
        }, {
          start: {
            line: 87,
            column: 430
          },
          end: {
            line: 87,
            column: 443
          }
        }],
        line: 87
      },
      "19": {
        loc: {
          start: {
            line: 101,
            column: 26
          },
          end: {
            line: 101,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 101,
            column: 26
          },
          end: {
            line: 101,
            column: 59
          }
        }, {
          start: {
            line: 101,
            column: 63
          },
          end: {
            line: 101,
            column: 74
          }
        }],
        line: 101
      },
      "20": {
        loc: {
          start: {
            line: 107,
            column: 28
          },
          end: {
            line: 107,
            column: 128
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 107,
            column: 62
          },
          end: {
            line: 107,
            column: 123
          }
        }, {
          start: {
            line: 107,
            column: 126
          },
          end: {
            line: 107,
            column: 128
          }
        }],
        line: 107
      },
      "21": {
        loc: {
          start: {
            line: 127,
            column: 56
          },
          end: {
            line: 127,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 127,
            column: 56
          },
          end: {
            line: 127,
            column: 76
          }
        }, {
          start: {
            line: 127,
            column: 80
          },
          end: {
            line: 127,
            column: 81
          }
        }],
        line: 127
      },
      "22": {
        loc: {
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 162,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 141,
            column: 12
          },
          end: {
            line: 147,
            column: 18
          }
        }, {
          start: {
            line: 148,
            column: 12
          },
          end: {
            line: 154,
            column: 18
          }
        }, {
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 161,
            column: 18
          }
        }],
        line: 140
      },
      "23": {
        loc: {
          start: {
            line: 184,
            column: 70
          },
          end: {
            line: 184,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 184,
            column: 70
          },
          end: {
            line: 184,
            column: 90
          }
        }, {
          start: {
            line: 184,
            column: 94
          },
          end: {
            line: 184,
            column: 95
          }
        }],
        line: 184
      },
      "24": {
        loc: {
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 188
      },
      "25": {
        loc: {
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "26": {
        loc: {
          start: {
            line: 194,
            column: 8
          },
          end: {
            line: 196,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 8
          },
          end: {
            line: 196,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "27": {
        loc: {
          start: {
            line: 197,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 198,
            column: 12
          },
          end: {
            line: 200,
            column: 22
          }
        }, {
          start: {
            line: 201,
            column: 12
          },
          end: {
            line: 203,
            column: 22
          }
        }, {
          start: {
            line: 204,
            column: 12
          },
          end: {
            line: 205,
            column: 202
          }
        }],
        line: 197
      },
      "28": {
        loc: {
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 217,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 217,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 214
      },
      "29": {
        loc: {
          start: {
            line: 214,
            column: 12
          },
          end: {
            line: 214,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 214,
            column: 12
          },
          end: {
            line: 214,
            column: 31
          }
        }, {
          start: {
            line: 214,
            column: 35
          },
          end: {
            line: 214,
            column: 47
          }
        }],
        line: 214
      },
      "30": {
        loc: {
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 246,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 246,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 244
      },
      "31": {
        loc: {
          start: {
            line: 268,
            column: 8
          },
          end: {
            line: 272,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 268,
            column: 8
          },
          end: {
            line: 272,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 268
      },
      "32": {
        loc: {
          start: {
            line: 268,
            column: 12
          },
          end: {
            line: 268,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 268,
            column: 12
          },
          end: {
            line: 268,
            column: 31
          }
        }, {
          start: {
            line: 268,
            column: 35
          },
          end: {
            line: 268,
            column: 47
          }
        }],
        line: 268
      },
      "33": {
        loc: {
          start: {
            line: 274,
            column: 8
          },
          end: {
            line: 322,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 274,
            column: 8
          },
          end: {
            line: 322,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 274
      },
      "34": {
        loc: {
          start: {
            line: 276,
            column: 12
          },
          end: {
            line: 321,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 276,
            column: 12
          },
          end: {
            line: 321,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 276
      },
      "35": {
        loc: {
          start: {
            line: 283,
            column: 16
          },
          end: {
            line: 320,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 283,
            column: 16
          },
          end: {
            line: 320,
            column: 17
          }
        }, {
          start: {
            line: 292,
            column: 21
          },
          end: {
            line: 320,
            column: 17
          }
        }],
        line: 283
      },
      "36": {
        loc: {
          start: {
            line: 304,
            column: 47
          },
          end: {
            line: 304,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 304,
            column: 47
          },
          end: {
            line: 304,
            column: 92
          }
        }, {
          start: {
            line: 304,
            column: 96
          },
          end: {
            line: 304,
            column: 98
          }
        }],
        line: 304
      },
      "37": {
        loc: {
          start: {
            line: 332,
            column: 12
          },
          end: {
            line: 334,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 332,
            column: 12
          },
          end: {
            line: 334,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 332
      },
      "38": {
        loc: {
          start: {
            line: 344,
            column: 38
          },
          end: {
            line: 344,
            column: 240
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 344,
            column: 39
          },
          end: {
            line: 344,
            column: 170
          }
        }, {
          start: {
            line: 344,
            column: 175
          },
          end: {
            line: 344,
            column: 240
          }
        }],
        line: 344
      },
      "39": {
        loc: {
          start: {
            line: 344,
            column: 39
          },
          end: {
            line: 344,
            column: 170
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 344,
            column: 151
          },
          end: {
            line: 344,
            column: 157
          }
        }, {
          start: {
            line: 344,
            column: 160
          },
          end: {
            line: 344,
            column: 170
          }
        }],
        line: 344
      },
      "40": {
        loc: {
          start: {
            line: 344,
            column: 39
          },
          end: {
            line: 344,
            column: 148
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 344,
            column: 39
          },
          end: {
            line: 344,
            column: 131
          }
        }, {
          start: {
            line: 344,
            column: 135
          },
          end: {
            line: 344,
            column: 148
          }
        }],
        line: 344
      },
      "41": {
        loc: {
          start: {
            line: 344,
            column: 45
          },
          end: {
            line: 344,
            column: 121
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 344,
            column: 102
          },
          end: {
            line: 344,
            column: 108
          }
        }, {
          start: {
            line: 344,
            column: 111
          },
          end: {
            line: 344,
            column: 121
          }
        }],
        line: 344
      },
      "42": {
        loc: {
          start: {
            line: 344,
            column: 45
          },
          end: {
            line: 344,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 344,
            column: 45
          },
          end: {
            line: 344,
            column: 82
          }
        }, {
          start: {
            line: 344,
            column: 86
          },
          end: {
            line: 344,
            column: 99
          }
        }],
        line: 344
      },
      "43": {
        loc: {
          start: {
            line: 347,
            column: 28
          },
          end: {
            line: 347,
            column: 119
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 347,
            column: 29
          },
          end: {
            line: 347,
            column: 105
          }
        }, {
          start: {
            line: 347,
            column: 110
          },
          end: {
            line: 347,
            column: 119
          }
        }],
        line: 347
      },
      "44": {
        loc: {
          start: {
            line: 347,
            column: 29
          },
          end: {
            line: 347,
            column: 105
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 347,
            column: 81
          },
          end: {
            line: 347,
            column: 87
          }
        }, {
          start: {
            line: 347,
            column: 90
          },
          end: {
            line: 347,
            column: 105
          }
        }],
        line: 347
      },
      "45": {
        loc: {
          start: {
            line: 347,
            column: 29
          },
          end: {
            line: 347,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 347,
            column: 29
          },
          end: {
            line: 347,
            column: 61
          }
        }, {
          start: {
            line: 347,
            column: 65
          },
          end: {
            line: 347,
            column: 78
          }
        }],
        line: 347
      },
      "46": {
        loc: {
          start: {
            line: 352,
            column: 42
          },
          end: {
            line: 352,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 352,
            column: 42
          },
          end: {
            line: 352,
            column: 84
          }
        }, {
          start: {
            line: 352,
            column: 88
          },
          end: {
            line: 352,
            column: 89
          }
        }],
        line: 352
      },
      "47": {
        loc: {
          start: {
            line: 353,
            column: 33
          },
          end: {
            line: 353,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 353,
            column: 33
          },
          end: {
            line: 353,
            column: 67
          }
        }, {
          start: {
            line: 353,
            column: 71
          },
          end: {
            line: 353,
            column: 73
          }
        }],
        line: 353
      },
      "48": {
        loc: {
          start: {
            line: 374,
            column: 12
          },
          end: {
            line: 400,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 374,
            column: 12
          },
          end: {
            line: 400,
            column: 13
          }
        }, {
          start: {
            line: 398,
            column: 17
          },
          end: {
            line: 400,
            column: 13
          }
        }],
        line: 374
      },
      "49": {
        loc: {
          start: {
            line: 374,
            column: 16
          },
          end: {
            line: 374,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 374,
            column: 16
          },
          end: {
            line: 374,
            column: 21
          }
        }, {
          start: {
            line: 374,
            column: 25
          },
          end: {
            line: 374,
            column: 50
          }
        }, {
          start: {
            line: 374,
            column: 54
          },
          end: {
            line: 374,
            column: 71
          }
        }],
        line: 374
      },
      "50": {
        loc: {
          start: {
            line: 382,
            column: 16
          },
          end: {
            line: 396,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 382,
            column: 16
          },
          end: {
            line: 396,
            column: 17
          }
        }, {
          start: {
            line: 385,
            column: 21
          },
          end: {
            line: 396,
            column: 17
          }
        }],
        line: 382
      },
      "51": {
        loc: {
          start: {
            line: 385,
            column: 21
          },
          end: {
            line: 396,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 385,
            column: 21
          },
          end: {
            line: 396,
            column: 17
          }
        }, {
          start: {
            line: 388,
            column: 21
          },
          end: {
            line: 396,
            column: 17
          }
        }],
        line: 385
      },
      "52": {
        loc: {
          start: {
            line: 385,
            column: 25
          },
          end: {
            line: 385,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 385,
            column: 25
          },
          end: {
            line: 385,
            column: 48
          }
        }, {
          start: {
            line: 385,
            column: 52
          },
          end: {
            line: 385,
            column: 75
          }
        }],
        line: 385
      },
      "53": {
        loc: {
          start: {
            line: 388,
            column: 21
          },
          end: {
            line: 396,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 388,
            column: 21
          },
          end: {
            line: 396,
            column: 17
          }
        }, {
          start: {
            line: 391,
            column: 21
          },
          end: {
            line: 396,
            column: 17
          }
        }],
        line: 388
      },
      "54": {
        loc: {
          start: {
            line: 391,
            column: 21
          },
          end: {
            line: 396,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 391,
            column: 21
          },
          end: {
            line: 396,
            column: 17
          }
        }, {
          start: {
            line: 394,
            column: 21
          },
          end: {
            line: 396,
            column: 17
          }
        }],
        line: 391
      },
      "55": {
        loc: {
          start: {
            line: 402,
            column: 41
          },
          end: {
            line: 402,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 402,
            column: 66
          },
          end: {
            line: 402,
            column: 71
          }
        }, {
          start: {
            line: 402,
            column: 74
          },
          end: {
            line: 402,
            column: 98
          }
        }],
        line: 402
      },
      "56": {
        loc: {
          start: {
            line: 416,
            column: 8
          },
          end: {
            line: 435,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 417,
            column: 12
          },
          end: {
            line: 422,
            column: 18
          }
        }, {
          start: {
            line: 423,
            column: 12
          },
          end: {
            line: 428,
            column: 18
          }
        }, {
          start: {
            line: 429,
            column: 12
          },
          end: {
            line: 434,
            column: 18
          }
        }],
        line: 416
      },
      "57": {
        loc: {
          start: {
            line: 442,
            column: 8
          },
          end: {
            line: 445,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 442,
            column: 8
          },
          end: {
            line: 445,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 442
      },
      "58": {
        loc: {
          start: {
            line: 442,
            column: 12
          },
          end: {
            line: 442,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 442,
            column: 12
          },
          end: {
            line: 442,
            column: 31
          }
        }, {
          start: {
            line: 442,
            column: 35
          },
          end: {
            line: 442,
            column: 47
          }
        }],
        line: 442
      },
      "59": {
        loc: {
          start: {
            line: 452,
            column: 22
          },
          end: {
            line: 452,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 452,
            column: 22
          },
          end: {
            line: 452,
            column: 55
          }
        }, {
          start: {
            line: 452,
            column: 59
          },
          end: {
            line: 452,
            column: 79
          }
        }],
        line: 452
      },
      "60": {
        loc: {
          start: {
            line: 453,
            column: 26
          },
          end: {
            line: 453,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 453,
            column: 26
          },
          end: {
            line: 453,
            column: 52
          }
        }, {
          start: {
            line: 453,
            column: 56
          },
          end: {
            line: 453,
            column: 65
          }
        }],
        line: 453
      },
      "61": {
        loc: {
          start: {
            line: 456,
            column: 28
          },
          end: {
            line: 456,
            column: 128
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 456,
            column: 62
          },
          end: {
            line: 456,
            column: 123
          }
        }, {
          start: {
            line: 456,
            column: 126
          },
          end: {
            line: 456,
            column: 128
          }
        }],
        line: 456
      },
      "62": {
        loc: {
          start: {
            line: 457,
            column: 34
          },
          end: {
            line: 457,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 457,
            column: 34
          },
          end: {
            line: 457,
            column: 71
          }
        }, {
          start: {
            line: 457,
            column: 75
          },
          end: {
            line: 457,
            column: 86
          }
        }],
        line: 457
      },
      "63": {
        loc: {
          start: {
            line: 458,
            column: 37
          },
          end: {
            line: 458,
            column: 152
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 458,
            column: 70
          },
          end: {
            line: 458,
            column: 140
          }
        }, {
          start: {
            line: 458,
            column: 143
          },
          end: {
            line: 458,
            column: 152
          }
        }],
        line: 458
      },
      "64": {
        loc: {
          start: {
            line: 461,
            column: 12
          },
          end: {
            line: 463,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 461,
            column: 12
          },
          end: {
            line: 463,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 461
      },
      "65": {
        loc: {
          start: {
            line: 471,
            column: 29
          },
          end: {
            line: 471,
            column: 246
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 471,
            column: 30
          },
          end: {
            line: 471,
            column: 215
          }
        }, {
          start: {
            line: 471,
            column: 220
          },
          end: {
            line: 471,
            column: 246
          }
        }],
        line: 471
      },
      "66": {
        loc: {
          start: {
            line: 471,
            column: 30
          },
          end: {
            line: 471,
            column: 215
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 471,
            column: 197
          },
          end: {
            line: 471,
            column: 203
          }
        }, {
          start: {
            line: 471,
            column: 206
          },
          end: {
            line: 471,
            column: 215
          }
        }],
        line: 471
      },
      "67": {
        loc: {
          start: {
            line: 471,
            column: 30
          },
          end: {
            line: 471,
            column: 194
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 471,
            column: 30
          },
          end: {
            line: 471,
            column: 177
          }
        }, {
          start: {
            line: 471,
            column: 181
          },
          end: {
            line: 471,
            column: 194
          }
        }],
        line: 471
      },
      "68": {
        loc: {
          start: {
            line: 471,
            column: 36
          },
          end: {
            line: 471,
            column: 167
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 471,
            column: 148
          },
          end: {
            line: 471,
            column: 154
          }
        }, {
          start: {
            line: 471,
            column: 157
          },
          end: {
            line: 471,
            column: 167
          }
        }],
        line: 471
      },
      "69": {
        loc: {
          start: {
            line: 471,
            column: 36
          },
          end: {
            line: 471,
            column: 145
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 471,
            column: 36
          },
          end: {
            line: 471,
            column: 128
          }
        }, {
          start: {
            line: 471,
            column: 132
          },
          end: {
            line: 471,
            column: 145
          }
        }],
        line: 471
      },
      "70": {
        loc: {
          start: {
            line: 471,
            column: 42
          },
          end: {
            line: 471,
            column: 118
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 471,
            column: 99
          },
          end: {
            line: 471,
            column: 105
          }
        }, {
          start: {
            line: 471,
            column: 108
          },
          end: {
            line: 471,
            column: 118
          }
        }],
        line: 471
      },
      "71": {
        loc: {
          start: {
            line: 471,
            column: 42
          },
          end: {
            line: 471,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 471,
            column: 42
          },
          end: {
            line: 471,
            column: 79
          }
        }, {
          start: {
            line: 471,
            column: 83
          },
          end: {
            line: 471,
            column: 96
          }
        }],
        line: 471
      },
      "72": {
        loc: {
          start: {
            line: 478,
            column: 41
          },
          end: {
            line: 478,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 478,
            column: 66
          },
          end: {
            line: 478,
            column: 71
          }
        }, {
          start: {
            line: 478,
            column: 74
          },
          end: {
            line: 478,
            column: 98
          }
        }],
        line: 478
      },
      "73": {
        loc: {
          start: {
            line: 491,
            column: 36
          },
          end: {
            line: 491,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 491,
            column: 36
          },
          end: {
            line: 491,
            column: 73
          }
        }, {
          start: {
            line: 491,
            column: 77
          },
          end: {
            line: 491,
            column: 80
          }
        }],
        line: 491
      },
      "74": {
        loc: {
          start: {
            line: 492,
            column: 8
          },
          end: {
            line: 493,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 492,
            column: 8
          },
          end: {
            line: 493,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 492
      },
      "75": {
        loc: {
          start: {
            line: 494,
            column: 8
          },
          end: {
            line: 495,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 494,
            column: 8
          },
          end: {
            line: 495,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 494
      },
      "76": {
        loc: {
          start: {
            line: 496,
            column: 8
          },
          end: {
            line: 497,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 496,
            column: 8
          },
          end: {
            line: 497,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 496
      },
      "77": {
        loc: {
          start: {
            line: 509,
            column: 8
          },
          end: {
            line: 533,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 510,
            column: 12
          },
          end: {
            line: 519,
            column: 22
          }
        }, {
          start: {
            line: 520,
            column: 12
          },
          end: {
            line: 528,
            column: 22
          }
        }, {
          start: {
            line: 529,
            column: 12
          },
          end: {
            line: 532,
            column: 84
          }
        }],
        line: 509
      },
      "78": {
        loc: {
          start: {
            line: 512,
            column: 74
          },
          end: {
            line: 512,
            column: 109
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 512,
            column: 74
          },
          end: {
            line: 512,
            column: 83
          }
        }, {
          start: {
            line: 512,
            column: 87
          },
          end: {
            line: 512,
            column: 109
          }
        }],
        line: 512
      },
      "79": {
        loc: {
          start: {
            line: 513,
            column: 55
          },
          end: {
            line: 513,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 513,
            column: 55
          },
          end: {
            line: 513,
            column: 70
          }
        }, {
          start: {
            line: 513,
            column: 74
          },
          end: {
            line: 513,
            column: 85
          }
        }],
        line: 513
      },
      "80": {
        loc: {
          start: {
            line: 522,
            column: 68
          },
          end: {
            line: 522,
            column: 101
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 522,
            column: 68
          },
          end: {
            line: 522,
            column: 79
          }
        }, {
          start: {
            line: 522,
            column: 83
          },
          end: {
            line: 522,
            column: 101
          }
        }],
        line: 522
      },
      "81": {
        loc: {
          start: {
            line: 531,
            column: 74
          },
          end: {
            line: 531,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 531,
            column: 74
          },
          end: {
            line: 531,
            column: 85
          }
        }, {
          start: {
            line: 531,
            column: 89
          },
          end: {
            line: 531,
            column: 104
          }
        }],
        line: 531
      },
      "82": {
        loc: {
          start: {
            line: 531,
            column: 113
          },
          end: {
            line: 531,
            column: 138
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 531,
            column: 113
          },
          end: {
            line: 531,
            column: 128
          }
        }, {
          start: {
            line: 531,
            column: 132
          },
          end: {
            line: 531,
            column: 138
          }
        }],
        line: 531
      },
      "83": {
        loc: {
          start: {
            line: 534,
            column: 8
          },
          end: {
            line: 536,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 534,
            column: 8
          },
          end: {
            line: 536,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 534
      },
      "84": {
        loc: {
          start: {
            line: 537,
            column: 8
          },
          end: {
            line: 539,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 537,
            column: 8
          },
          end: {
            line: 539,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 537
      },
      "85": {
        loc: {
          start: {
            line: 542,
            column: 12
          },
          end: {
            line: 544,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 542,
            column: 12
          },
          end: {
            line: 544,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 542
      },
      "86": {
        loc: {
          start: {
            line: 552,
            column: 29
          },
          end: {
            line: 552,
            column: 246
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 552,
            column: 30
          },
          end: {
            line: 552,
            column: 215
          }
        }, {
          start: {
            line: 552,
            column: 220
          },
          end: {
            line: 552,
            column: 246
          }
        }],
        line: 552
      },
      "87": {
        loc: {
          start: {
            line: 552,
            column: 30
          },
          end: {
            line: 552,
            column: 215
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 552,
            column: 197
          },
          end: {
            line: 552,
            column: 203
          }
        }, {
          start: {
            line: 552,
            column: 206
          },
          end: {
            line: 552,
            column: 215
          }
        }],
        line: 552
      },
      "88": {
        loc: {
          start: {
            line: 552,
            column: 30
          },
          end: {
            line: 552,
            column: 194
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 552,
            column: 30
          },
          end: {
            line: 552,
            column: 177
          }
        }, {
          start: {
            line: 552,
            column: 181
          },
          end: {
            line: 552,
            column: 194
          }
        }],
        line: 552
      },
      "89": {
        loc: {
          start: {
            line: 552,
            column: 36
          },
          end: {
            line: 552,
            column: 167
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 552,
            column: 148
          },
          end: {
            line: 552,
            column: 154
          }
        }, {
          start: {
            line: 552,
            column: 157
          },
          end: {
            line: 552,
            column: 167
          }
        }],
        line: 552
      },
      "90": {
        loc: {
          start: {
            line: 552,
            column: 36
          },
          end: {
            line: 552,
            column: 145
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 552,
            column: 36
          },
          end: {
            line: 552,
            column: 128
          }
        }, {
          start: {
            line: 552,
            column: 132
          },
          end: {
            line: 552,
            column: 145
          }
        }],
        line: 552
      },
      "91": {
        loc: {
          start: {
            line: 552,
            column: 42
          },
          end: {
            line: 552,
            column: 118
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 552,
            column: 99
          },
          end: {
            line: 552,
            column: 105
          }
        }, {
          start: {
            line: 552,
            column: 108
          },
          end: {
            line: 552,
            column: 118
          }
        }],
        line: 552
      },
      "92": {
        loc: {
          start: {
            line: 552,
            column: 42
          },
          end: {
            line: 552,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 552,
            column: 42
          },
          end: {
            line: 552,
            column: 79
          }
        }, {
          start: {
            line: 552,
            column: 83
          },
          end: {
            line: 552,
            column: 96
          }
        }],
        line: 552
      },
      "93": {
        loc: {
          start: {
            line: 559,
            column: 41
          },
          end: {
            line: 559,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 559,
            column: 66
          },
          end: {
            line: 559,
            column: 71
          }
        }, {
          start: {
            line: 559,
            column: 74
          },
          end: {
            line: 559,
            column: 98
          }
        }],
        line: 559
      },
      "94": {
        loc: {
          start: {
            line: 573,
            column: 8
          },
          end: {
            line: 580,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 574,
            column: 12
          },
          end: {
            line: 575,
            column: 95
          }
        }, {
          start: {
            line: 576,
            column: 12
          },
          end: {
            line: 577,
            column: 100
          }
        }, {
          start: {
            line: 578,
            column: 12
          },
          end: {
            line: 579,
            column: 66
          }
        }],
        line: 573
      },
      "95": {
        loc: {
          start: {
            line: 587,
            column: 8
          },
          end: {
            line: 589,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 587,
            column: 8
          },
          end: {
            line: 589,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 587
      },
      "96": {
        loc: {
          start: {
            line: 587,
            column: 12
          },
          end: {
            line: 587,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 587,
            column: 12
          },
          end: {
            line: 587,
            column: 31
          }
        }, {
          start: {
            line: 587,
            column: 35
          },
          end: {
            line: 587,
            column: 47
          }
        }, {
          start: {
            line: 587,
            column: 51
          },
          end: {
            line: 587,
            column: 88
          }
        }],
        line: 587
      },
      "97": {
        loc: {
          start: {
            line: 592,
            column: 12
          },
          end: {
            line: 594,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 592,
            column: 12
          },
          end: {
            line: 594,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 592
      },
      "98": {
        loc: {
          start: {
            line: 601,
            column: 19
          },
          end: {
            line: 601,
            column: 214
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 601,
            column: 20
          },
          end: {
            line: 601,
            column: 205
          }
        }, {
          start: {
            line: 601,
            column: 210
          },
          end: {
            line: 601,
            column: 214
          }
        }],
        line: 601
      },
      "99": {
        loc: {
          start: {
            line: 601,
            column: 20
          },
          end: {
            line: 601,
            column: 205
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 601,
            column: 187
          },
          end: {
            line: 601,
            column: 193
          }
        }, {
          start: {
            line: 601,
            column: 196
          },
          end: {
            line: 601,
            column: 205
          }
        }],
        line: 601
      },
      "100": {
        loc: {
          start: {
            line: 601,
            column: 20
          },
          end: {
            line: 601,
            column: 184
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 601,
            column: 20
          },
          end: {
            line: 601,
            column: 167
          }
        }, {
          start: {
            line: 601,
            column: 171
          },
          end: {
            line: 601,
            column: 184
          }
        }],
        line: 601
      },
      "101": {
        loc: {
          start: {
            line: 601,
            column: 26
          },
          end: {
            line: 601,
            column: 157
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 601,
            column: 138
          },
          end: {
            line: 601,
            column: 144
          }
        }, {
          start: {
            line: 601,
            column: 147
          },
          end: {
            line: 601,
            column: 157
          }
        }],
        line: 601
      },
      "102": {
        loc: {
          start: {
            line: 601,
            column: 26
          },
          end: {
            line: 601,
            column: 135
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 601,
            column: 26
          },
          end: {
            line: 601,
            column: 118
          }
        }, {
          start: {
            line: 601,
            column: 122
          },
          end: {
            line: 601,
            column: 135
          }
        }],
        line: 601
      },
      "103": {
        loc: {
          start: {
            line: 601,
            column: 32
          },
          end: {
            line: 601,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 601,
            column: 89
          },
          end: {
            line: 601,
            column: 95
          }
        }, {
          start: {
            line: 601,
            column: 98
          },
          end: {
            line: 601,
            column: 108
          }
        }],
        line: 601
      },
      "104": {
        loc: {
          start: {
            line: 601,
            column: 32
          },
          end: {
            line: 601,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 601,
            column: 32
          },
          end: {
            line: 601,
            column: 69
          }
        }, {
          start: {
            line: 601,
            column: 73
          },
          end: {
            line: 601,
            column: 86
          }
        }],
        line: 601
      },
      "105": {
        loc: {
          start: {
            line: 607,
            column: 41
          },
          end: {
            line: 607,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 607,
            column: 66
          },
          end: {
            line: 607,
            column: 71
          }
        }, {
          start: {
            line: 607,
            column: 74
          },
          end: {
            line: 607,
            column: 98
          }
        }],
        line: 607
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0, 0],
      "78": [0, 0],
      "79": [0, 0],
      "80": [0, 0],
      "81": [0, 0],
      "82": [0, 0],
      "83": [0, 0],
      "84": [0, 0],
      "85": [0, 0],
      "86": [0, 0],
      "87": [0, 0],
      "88": [0, 0],
      "89": [0, 0],
      "90": [0, 0],
      "91": [0, 0],
      "92": [0, 0],
      "93": [0, 0],
      "94": [0, 0, 0],
      "95": [0, 0],
      "96": [0, 0, 0],
      "97": [0, 0],
      "98": [0, 0],
      "99": [0, 0],
      "100": [0, 0],
      "101": [0, 0],
      "102": [0, 0],
      "103": [0, 0],
      "104": [0, 0],
      "105": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/azure/lib/services/azure-openai-service-server.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/azure/lib/services/azure-openai-service-server.ts"],
      sourcesContent: ["import { MigrationOpenAIClient } from '@/lib/azure-ai-foundry/clients/migration-wrapper';\nimport { fetchAzureSecrets } from '../azure-config';\nimport { templateEngine } from '@/lib/utils/template-engine';\nimport { prepareConversationForTTS, extractQuestionForTTS } from '@/lib/utils/text-preprocessing';\nimport path from 'path';\nimport { \n  ErrorCode, \n  createStructuredError, \n  toStructuredError,\n  StructuredError \n} from '@/lib/utils/structured-errors';\nimport { logServerError } from '@/lib/errors';\n\nexport interface ConversationMessage {\n  role: 'system' | 'user' | 'assistant';\n  content: string;\n}\n\nexport interface CandidateProfile {\n  currentRole?: string;\n  techStack?: string;\n  yearsExperience?: string;\n  keySkills?: string;\n  questionCount?: string;\n}\n\nexport interface InterviewContext {\n  type: 'technical' | 'behavioral' | 'general';\n  position?: string;\n  company?: string;\n  difficulty?: 'easy' | 'medium' | 'hard';\n  preliminaryCollected?: boolean; // Default: false - Indicates if preliminary info has been collected\n  currentQuestionCount?: number; // Current number of questions asked in the interview\n  maxQuestions?: number; // Default: 10 - Maximum number of questions for the interview\n}\n\nexport interface GenerationResponse {\n  content: string;\n  questionNumber?: number;\n  isComplete?: boolean;\n  followUpSuggestions?: string[];\n}\n\nexport class AzureOpenAIServiceServer {\n  private client: MigrationOpenAIClient | null = null;\n  private isInitialized = false;\n  private modelDeployment: string = 'gpt-4o'; // Store the deployment name as model\n  private conversationHistory: ConversationMessage[] = [];\n  private interviewContext: InterviewContext = { \n    type: 'general',\n    preliminaryCollected: false,\n    currentQuestionCount: 0,\n    maxQuestions: 10\n  };\n  \n  // Preliminary questions for gathering candidate profile\n  private prelimQuestions = [\n    'What is your current role?',\n    'What primary tech stack do you use?',\n    'How many years of experience do you have?',\n    'What are your key skills?',\n    'How many interview questions would you like?'\n  ];\n  private prelimIndex = 0;\n  private candidateProfile: Record<string, string> = {};\n\n  /**\n   * Initialize the Azure OpenAI service using server-side credential loading\n   */\n  async initialize(): Promise<boolean> {\n    try {\n      console.log('\uD83D\uDD11 Initializing Azure OpenAI service on server...');\n      const secrets = await fetchAzureSecrets();\n      \n      if (!secrets.azureOpenAIKey || !secrets.azureOpenAIEndpoint || !secrets.azureOpenAIDeployment) {\n        console.warn('\u26A0\uFE0F Azure OpenAI credentials not available');\n        const error = createStructuredError(\n          ErrorCode.SERVICE_NOT_CONFIGURED,\n          { service: 'azure-openai', missingCredentials: ['key', 'endpoint', 'deployment'] },\n          'Azure OpenAI credentials not available'\n        );\n        logServerError(new Error(error.message), {\n          errorCode: error.code,\n          category: error.category,\n          details: error.details\n        });\n        return false;\n      }\n\n      this.client = new MigrationOpenAIClient();\n      await this.client.init(); // Initialize the migration client\n      \n      // Store the deployment name for use as model in API calls\n      this.modelDeployment = secrets.azureOpenAIDeployment;\n\n      this.isInitialized = true;\n      console.log('\u2705 Azure OpenAI Service (server-side) initialized successfully');\n      return true;\n    } catch (error) {\n      console.error('\u274C Failed to initialize Azure OpenAI Service (server-side):', error);\n      const structuredError = toStructuredError(error, ErrorCode.CONFIGURATION_ERROR);\n      logServerError(error instanceof Error ? error : new Error(String(error)), {\n        errorCode: structuredError.code,\n        category: structuredError.category,\n        details: structuredError.details\n      });\n      return false;\n    }\n  }\n\n  /**\n   * Check if the service is ready to use\n   */\n  isReady(): boolean {\n    return this.isInitialized && this.client !== null;\n  }\n\n  /**\n   * Set interview context for conversation management\n   */\n  setInterviewContext(context: Partial<InterviewContext>): void {\n    // Merge context while preserving defaults\n    this.interviewContext = { \n      ...this.interviewContext, \n      ...context,\n      // Ensure defaults are set if not provided\n      preliminaryCollected: context.preliminaryCollected ?? this.interviewContext.preliminaryCollected ?? false,\n      currentQuestionCount: context.currentQuestionCount ?? this.interviewContext.currentQuestionCount ?? 0,\n      maxQuestions: context.maxQuestions ?? this.interviewContext.maxQuestions ?? 10\n    };\n    console.log('\uD83D\uDCCB Interview context updated:', this.interviewContext);\n  }\n\n  /**\n   * Build system context from candidate profile using template engine\n   */\n  private buildSystemContext(): string {\n    try {\n      // Load the interview prompts template\n      const templatePath = path.resolve(process.cwd(), 'config/templates/interview-prompts.yaml');\n      const template = templateEngine.loadTemplate(templatePath);\n      \n      // Build context for template rendering\n      const context = {\n        candidate: {\n          name: this.candidateProfile.currentRole || 'candidate'\n        },\n        role: this.candidateProfile.currentRole,\n        company: this.interviewContext.company,\n        interview_type: this.interviewContext.type,\n        experience_level: this.candidateProfile.yearsExperience,\n        tech_stack: this.candidateProfile.techStack ? this.candidateProfile.techStack.split(',').map(s => s.trim()) : [],\n        custom_instructions: this.buildCustomInstructions(),\n        sample_questions: this.getSampleQuestions(),\n        duration: '45-60 minutes',\n        tone: 'professional and encouraging'\n      };\n      \n      return templateEngine.renderFromConfig(template, context);\n    } catch (error) {\n      console.warn('\u26A0\uFE0F Template engine failed, falling back to legacy prompt building:', error);\n      return this.buildSystemContextLegacy();\n    }\n  }\n\n  /**\n   * Build custom instructions based on interview context\n   */\n  private buildCustomInstructions(): string {\n    const { currentQuestionCount, maxQuestions } = this.interviewContext;\n    return [\n      'Preliminary questions have already been collected - do NOT ask them again',\n      `You are currently on interview question ${(currentQuestionCount || 0) + 1} of ${maxQuestions}`,\n      'Continue with interview questions based on the candidate\\'s profile',\n      `After question ${maxQuestions}, conclude the interview and thank the candidate`,\n      `Do NOT exceed ${maxQuestions} interview questions`,\n      'Keep your responses under 100 words and ask one question at a time'\n    ].join('\\n');\n  }\n\n  /**\n   * Get sample questions based on interview type\n   */\n  private getSampleQuestions(): string[] {\n    const { type } = this.interviewContext;\n    const { techStack, yearsExperience, currentRole } = this.candidateProfile;\n    \n    switch (type) {\n      case 'technical':\n        return [\n          `Tell me about a challenging technical problem you've solved using ${techStack}`,\n          'How do you approach debugging complex issues?',\n          'Describe your experience with system design and scalability',\n          'What are your thoughts on code review and best practices?'\n        ];\n      case 'behavioral':\n        return [\n          'Tell me about a time when you had to work with a difficult team member',\n          'Describe a situation where you had to learn a new technology quickly',\n          'How do you handle conflicting priorities and tight deadlines?',\n          'Give me an example of when you mentored or helped a colleague'\n        ];\n      default:\n        return [\n          'What interests you most about this position?',\n          `How has your experience in ${currentRole} prepared you for this role?`,\n          'What are your career goals for the next few years?',\n          'What motivates you in your work?'\n        ];\n    }\n  }\n\n  /**\n   * Legacy system context builder (fallback)\n   */\n  private buildSystemContextLegacy(): string {\n    const { currentRole, techStack, yearsExperience, keySkills } = this.candidateProfile;\n    const { type, position, company, difficulty, currentQuestionCount, maxQuestions } = this.interviewContext;\n    \n    let systemPrompt = `You are an AI interviewer conducting a ${type} interview with a candidate.\\n\\n`;\n    systemPrompt += `Candidate Profile:\\n`;\n    systemPrompt += `- Current Role: ${currentRole}\\n`;\n    systemPrompt += `- Tech Stack: ${techStack}\\n`;\n    systemPrompt += `- Years of Experience: ${yearsExperience}\\n`;\n    systemPrompt += `- Key Skills: ${keySkills}\\n\\n`;\n    \n    systemPrompt += `Interview Guidelines:\\n`;\n    systemPrompt += `1. Ask relevant, engaging questions tailored to their experience level\\n`;\n    systemPrompt += `2. Follow up on answers with clarifying questions\\n`;\n    systemPrompt += `3. Maintain a professional but friendly tone\\n`;\n    systemPrompt += `4. Keep responses concise and focused\\n`;\n    systemPrompt += `5. Adapt difficulty based on their experience and responses\\n\\n`;\n    \n    systemPrompt += `Interview Flow Control:\\n`;\n    systemPrompt += `\u2022 Preliminary questions have already been collected - do NOT ask them again\\n`;\n    systemPrompt += `\u2022 You are currently on interview question ${(currentQuestionCount || 0) + 1} of ${maxQuestions}\\n`;\n    systemPrompt += `\u2022 Continue with interview questions based on the candidate's profile\\n`;\n    systemPrompt += `\u2022 After question ${maxQuestions}, conclude the interview and thank the candidate\\n`;\n    systemPrompt += `\u2022 Do NOT exceed ${maxQuestions} interview questions\\n\\n`;\n    \n    if (position) {\n      systemPrompt += `Position: ${position}\\n`;\n    }\n    if (company) {\n      systemPrompt += `Company: ${company}\\n`;\n    }\n    if (difficulty) {\n      systemPrompt += `Difficulty Level: ${difficulty}\\n`;\n    }\n    \n    switch (type) {\n      case 'technical':\n        systemPrompt += `\\nFocus on technical skills relevant to their tech stack (${techStack}), problem-solving, coding concepts, and system design appropriate for someone with ${yearsExperience} years of experience.`;\n        break;\n      case 'behavioral':\n        systemPrompt += `\\nFocus on behavioral questions about teamwork, leadership, conflict resolution, and past experiences relevant to someone in a ${currentRole} role.`;\n        break;\n      default:\n        systemPrompt += `\\nAsk a mix of questions about background, experience, goals, and general fit for the role, considering their ${yearsExperience} years of experience in ${currentRole}.`;\n    }\n    \n    systemPrompt += `\\n\\nKeep your responses under 100 words and ask one question at a time.`;\n    return systemPrompt;\n  }\n\n  /**\n   * Start a new interview conversation\n   */\n  async startInterviewConversation(): Promise<GenerationResponse> {\n    if (!this.isInitialized || !this.client) {\n      const error = createStructuredError(\n        ErrorCode.SERVICE_UNAVAILABLE,\n        { service: 'azure-openai' },\n        'Azure OpenAI Service not initialized'\n      );\n      throw error;\n    }\n\n    // Reset conversation history and preliminary questions state\n    this.conversationHistory = [];\n    this.prelimIndex = 0;\n    this.candidateProfile = {};\n    // Reset interview context flags\n    this.interviewContext.preliminaryCollected = false;\n    this.interviewContext.currentQuestionCount = 0;\n\n    // Send greeting + first preliminary question\n    const greeting = \"Hello! Welcome to your interview practice session. Before we begin, I'd like to learn a bit about you.\";\n    const firstQuestion = this.prelimQuestions[0];\n    const openingMessage = `${greeting}\\n\\n${firstQuestion}`;\n\n    // Clean the opening message for TTS\n    const cleanedOpeningMessage = prepareConversationForTTS(openingMessage);\n    \n    return {\n      content: cleanedOpeningMessage,\n      questionNumber: 0, // 0 indicates preliminary questions\n      isComplete: false\n    };\n  }\n\n  /**\n   * Get opening message based on interview type\n   * Uses generateInterviewQuestion helper for domain-specific questions\n   */\n  private async getOpeningMessage(): Promise<string> {\n    const { position } = this.interviewContext;\n    \n    let greeting = \"\";\n    \n    if (position) {\n      greeting += `Let's discuss the ${position} position. `;\n    }\n    \n    try {\n      // Use the helper to generate a domain-specific opening question\n      const question = await this.generateInterviewQuestion();\n      return greeting + question;\n    } catch (error) {\n      console.warn('\u26A0\uFE0F Falling back to default opening question');\n      // Fallback to a simpler approach if generation fails\n      return greeting + this.getFallbackQuestion();\n    }\n  }\n\n  /**\n   * Process user response and generate next question or comment\n   */\n  async processUserResponse(userResponse: string): Promise<GenerationResponse> {\n    console.log('\uD83E\uDDEA [AZURE OPENAI] Processing user response', { \n      responseLength: userResponse.length, \n      preliminaryCollected: this.interviewContext.preliminaryCollected,\n      currentQuestionCount: this.interviewContext.currentQuestionCount\n    });\n    \n    if (!this.isInitialized || !this.client) {\n      console.error('\u274C [AZURE OPENAI] Service not initialized');\n      const error = createStructuredError(\n        ErrorCode.SERVICE_UNAVAILABLE,\n        { service: 'azure-openai', context: 'process-user-response' },\n        'Azure OpenAI Service not initialized'\n      );\n      throw error;\n    }\n\n    // Check if we're still collecting preliminary information\n    if (!this.interviewContext.preliminaryCollected) {\n      // We're in preliminary phase - check if we still have questions to ask\n      if (this.prelimIndex < this.prelimQuestions.length) {\n        // Store the user's answer to the current preliminary question\n        const questionKeys = ['currentRole', 'techStack', 'yearsExperience', 'keySkills', 'questionCount'];\n        this.candidateProfile[questionKeys[this.prelimIndex]] = userResponse;\n        \n        // Increment to next preliminary question\n        this.prelimIndex++;\n        \n        // If there are more preliminary questions, return the next one\n        if (this.prelimIndex < this.prelimQuestions.length) {\n          const nextQuestion = this.prelimQuestions[this.prelimIndex];\n          const cleanedResponse = prepareConversationForTTS(`Thank you! ${nextQuestion}`);\n          return {\n            content: cleanedResponse,\n            questionNumber: 0, // Still in preliminary phase - keep at 0\n            isComplete: false\n          };\n        } else {\n          // All preliminary questions collected - mark as complete\n          this.interviewContext.preliminaryCollected = true;\n          // Keep currentQuestionCount at 0 as we haven't asked real questions yet\n          this.interviewContext.currentQuestionCount = 0;\n          \n          // Build system context from collected profile\n          const systemContext = this.buildSystemContext();\n          \n          // Initialize conversation history with system context\n          this.conversationHistory = [\n            { role: 'system', content: systemContext }\n          ];\n          \n          // Set max questions from user's response\n          const requestedQuestions = parseInt(this.candidateProfile.questionCount) || 10;\n          this.interviewContext.maxQuestions = Math.min(Math.max(requestedQuestions, 5), 20); // Between 5 and 20\n          \n          // Generate the first real interview question\n          const openingMessage = await this.getOpeningMessage();\n          this.conversationHistory.push({ role: 'assistant', content: openingMessage });\n          \n          // Increment question count for the first real question\n          this.interviewContext.currentQuestionCount = 1;\n          \n          // Clean the content for TTS - extract just the question part and remove formatting\n          const cleanedQuestion = extractQuestionForTTS(openingMessage);\n          const cleanedIntro = prepareConversationForTTS(\"Great! I now have a better understanding of your background. Let's begin the interview.\");\n          const cleanedContent = `${cleanedIntro} ${cleanedQuestion}`;\n          \n          return {\n            content: cleanedContent,\n            questionNumber: 1, // First real question\n            isComplete: false\n          };\n        }\n      }\n    }\n\n    // Normal interview flow - preliminary info has been collected\n    // Add user response to conversation history\n    this.conversationHistory.push({ role: 'user', content: userResponse });\n\n    try {\n      console.log('\uD83E\uDDEA [AZURE OPENAI] Calling OpenAI API with', {\n        model: this.modelDeployment,\n        messagesCount: this.conversationHistory.length,\n        currentQuestionCount: this.interviewContext.currentQuestionCount\n      });\n      \n      if (!this.client) {\n        throw new Error('OpenAI client not initialized');\n      }\n      const completion = await this.client.chat.completions.create({\n        model: this.modelDeployment,\n        messages: this.conversationHistory,\n        temperature: 0.5, // Reduced from 0.7 for faster, more focused responses\n        max_tokens: 80,    // Reduced from 200 for shorter, quicker responses\n        top_p: 0.8,       // Slightly reduced for more deterministic responses\n        frequency_penalty: 0.0, // Removed penalties for faster processing\n        presence_penalty: 0.0,\n      });\n\n      const assistantResponse = completion.choices[0]?.message?.content || 'I\\'m sorry, I didn\\'t catch that. Could you repeat your answer?';\n      \n      console.log('\u2705 [AZURE OPENAI] Got response from OpenAI', {\n        responseLength: assistantResponse.length,\n        tokensUsed: completion.usage?.total_tokens || 'unknown'\n      });\n      \n      // Add assistant response to conversation history\n      this.conversationHistory.push({ role: 'assistant', content: assistantResponse });\n\n      // Increment question count for the next question\n      const currentQuestionCount = (this.interviewContext.currentQuestionCount || 0) + 1;\n      const maxQuestions = this.interviewContext.maxQuestions || 10;\n      \n      // Update question count in context\n      this.interviewContext.currentQuestionCount = currentQuestionCount;\n      \n      // Clean the content for TTS - remove markdown formatting and extract meaningful text\n      const cleanedContent = prepareConversationForTTS(assistantResponse);\n      \n      console.log('\uD83E\uDDF9 [TTS PREPROCESSING] Cleaned response for speech', {\n        originalLength: assistantResponse.length,\n        cleanedLength: cleanedContent.length,\n        removedFormatting: assistantResponse !== cleanedContent\n      });\n\n      return {\n        content: cleanedContent,\n        questionNumber: currentQuestionCount,\n        isComplete: currentQuestionCount >= maxQuestions,\n        followUpSuggestions: this.generateFollowUpSuggestions()\n      };\n    } catch (error) {\n      console.error('\u274C [AZURE OPENAI] Error generating OpenAI response:', error);\n      \n      // Map to structured error codes\n      let structuredError: StructuredError;\n      \n      if (error && typeof error === 'object' && 'status' in error) {\n        const apiError = error as any;\n        console.error('\u274C [AZURE OPENAI] API Error Details:', {\n          status: apiError.status,\n          code: apiError.code,\n          type: apiError.type,\n          message: apiError.message\n        });\n        \n        if (apiError.status === 429) {\n          structuredError = createStructuredError(\n            ErrorCode.RATE_LIMIT_EXCEEDED,\n            { service: 'azure-openai', apiStatus: apiError.status, apiCode: apiError.code },\n            'Rate limit exceeded - please try again in a moment'\n          );\n        } else if (apiError.status === 401 || apiError.status === 403) {\n          structuredError = createStructuredError(\n            ErrorCode.AUTH_TOKEN_INVALID,\n            { service: 'azure-openai', apiStatus: apiError.status },\n            'Authentication failed - please check Azure OpenAI credentials'\n          );\n        } else if (apiError.status === 404) {\n          structuredError = createStructuredError(\n            ErrorCode.CONFIGURATION_ERROR,\n            { service: 'azure-openai', deployment: this.modelDeployment, apiStatus: apiError.status },\n            `Model deployment '${this.modelDeployment}' not found`\n          );\n        } else if (apiError.status >= 500) {\n          structuredError = createStructuredError(\n            ErrorCode.AZURE_OPENAI_ERROR,\n            { service: 'azure-openai', apiStatus: apiError.status, apiType: apiError.type },\n            'Azure OpenAI service error'\n          );\n        } else {\n          structuredError = toStructuredError(error, ErrorCode.AZURE_OPENAI_ERROR);\n        }\n      } else {\n        structuredError = toStructuredError(error, ErrorCode.AZURE_OPENAI_ERROR);\n      }\n      \n      // Log the error for monitoring\n      logServerError(error instanceof Error ? error : new Error(String(error)), {\n        errorCode: structuredError.code,\n        category: structuredError.category,\n        details: structuredError.details,\n        context: 'azure-openai-process-response'\n      });\n      \n      throw structuredError;\n    }\n  }\n\n  /**\n   * Generate follow-up suggestions based on conversation\n   */\n  private generateFollowUpSuggestions(): string[] {\n    const { type } = this.interviewContext;\n    \n    switch (type) {\n      case 'technical':\n        return [\n          \"Can you explain your thought process?\",\n          \"What would you do differently?\",\n          \"How would this scale?\"\n        ];\n      case 'behavioral':\n        return [\n          \"What was the outcome?\",\n          \"What did you learn?\",\n          \"How would you handle it now?\"\n        ];\n      default:\n        return [\n          \"Can you elaborate on that?\",\n          \"What was your biggest challenge?\",\n          \"What motivates you?\"\n        ];\n    }\n  }\n\n  /**\n   * Generate a domain-specific interview question using template engine\n   */\n  async generateInterviewQuestion(): Promise<string> {\n    if (!this.isInitialized || !this.client) {\n      const error = createStructuredError(\n        ErrorCode.SERVICE_UNAVAILABLE,\n        { service: 'azure-openai', context: 'generate-interview-question' },\n        'Azure OpenAI Service not initialized'\n      );\n      throw error;\n    }\n\n    try {\n      // Load the question generation template\n      const templatePath = path.resolve(process.cwd(), 'config/templates/question-templates.yaml');\n      const template = templateEngine.loadTemplate(templatePath);\n      \n      // Build context for template rendering\n      const context = {\n        role: this.candidateProfile.currentRole || 'Software Developer',\n        category: this.interviewContext.type || 'general',\n        difficulty: this.getDifficultyLevel(),\n        count: 1,\n        tech_stack: this.candidateProfile.techStack ? this.candidateProfile.techStack.split(',').map(s => s.trim()) : [],\n        experience_level: this.candidateProfile.yearsExperience || 'mid-level',\n        custom_requirements: this.interviewContext.position ? `Focus on requirements for ${this.interviewContext.position} position` : undefined\n      };\n      \n      const questionPrompt = templateEngine.renderFromConfig(template, context);\n      \n      if (!this.client) {\n        throw new Error('OpenAI client not initialized');\n      }\n      const completion = await this.client.chat.completions.create({\n        model: this.modelDeployment,\n        messages: [{ role: 'user', content: questionPrompt }],\n        temperature: 0.8,\n        max_tokens: 100,\n        top_p: 0.9,\n      });\n\n      const question = completion.choices[0]?.message?.content?.trim() || this.getFallbackQuestion();\n      return question;\n    } catch (error) {\n      console.warn('\u26A0\uFE0F Template-based question generation failed, using legacy method:', error);\n      // Log but don't throw - fallback to legacy method\n      const structuredError = toStructuredError(error, ErrorCode.AZURE_OPENAI_ERROR);\n      logServerError(error instanceof Error ? error : new Error(String(error)), {\n        errorCode: structuredError.code,\n        category: structuredError.category,\n        details: { ...structuredError.details, context: 'template-question-generation' },\n        context: 'azure-openai-question-template-fallback'\n      });\n      return this.generateInterviewQuestionLegacy();\n    }\n  }\n\n  /**\n   * Get difficulty level mapping\n   */\n  private getDifficultyLevel(): string {\n    const experience = parseInt(this.candidateProfile.yearsExperience || '3');\n    if (experience <= 2) return 'junior';\n    if (experience <= 5) return 'mid';\n    if (experience <= 10) return 'senior';\n    return 'principal';\n  }\n\n  /**\n   * Legacy question generation method (fallback)\n   */\n  private async generateInterviewQuestionLegacy(): Promise<string> {\n    const { type, difficulty, position } = this.interviewContext;\n    const { currentRole, techStack, yearsExperience, keySkills } = this.candidateProfile;\n    \n    let questionPrompt = `Generate one concise interview question. `;\n    \n    // Add context-specific instructions based on interview type\n    switch (type) {\n      case 'technical':\n        questionPrompt += `Focus on technical skills and problem-solving.\\n`;\n        questionPrompt += `Consider the candidate's tech stack: ${techStack || 'various technologies'}.\\n`;\n        questionPrompt += `Experience level: ${yearsExperience || 'mid-level'} years.\\n`;\n        questionPrompt += `Include specific technical scenarios such as:\\n`;\n        questionPrompt += `- Code/architecture design challenges\\n`;\n        questionPrompt += `- Debugging or optimization problems\\n`;\n        questionPrompt += `- Technology-specific best practices\\n`;\n        questionPrompt += `- System scalability considerations\\n`;\n        break;\n        \n      case 'behavioral':\n        questionPrompt += `Focus on behavioral assessment using STAR method.\\n`;\n        questionPrompt += `Consider the candidate's role: ${currentRole || 'general position'}.\\n`;\n        questionPrompt += `Ask about situations involving:\\n`;\n        questionPrompt += `- Leadership and teamwork\\n`;\n        questionPrompt += `- Conflict resolution\\n`;\n        questionPrompt += `- Problem-solving under pressure\\n`;\n        questionPrompt += `- Learning from failures\\n`;\n        break;\n        \n      default:\n        questionPrompt += `Ask a general interview question.\\n`;\n        questionPrompt += `Consider the candidate's background: ${currentRole || 'various roles'} with ${yearsExperience || 'some'} years experience.\\n`;\n        questionPrompt += `Focus on motivation, goals, and cultural fit.\\n`;\n    }\n\n    if (difficulty) {\n      questionPrompt += `Difficulty level: ${difficulty}.\\n`;\n    }\n    \n    if (position) {\n      questionPrompt += `Position being interviewed for: ${position}.\\n`;\n    }\n\n    questionPrompt += `\\nReturn only the question text, no additional formatting or explanations.`;\n\n    try {\n      if (!this.client) {\n        throw new Error('OpenAI client not initialized');\n      }\n      const completion = await this.client.chat.completions.create({\n        model: this.modelDeployment,\n        messages: [{ role: 'user', content: questionPrompt }],\n        temperature: 0.8,\n        max_tokens: 100,\n        top_p: 0.9,\n      });\n\n      const question = completion.choices[0]?.message?.content?.trim() || this.getFallbackQuestion();\n      return question;\n    } catch (error) {\n      console.warn('\u26A0\uFE0F Failed to generate interview question, using fallback');\n      // Log the error for monitoring but return fallback instead of throwing\n      const structuredError = toStructuredError(error, ErrorCode.AZURE_OPENAI_ERROR);\n      logServerError(error instanceof Error ? error : new Error(String(error)), {\n        errorCode: structuredError.code,\n        category: structuredError.category,\n        details: { ...structuredError.details, context: 'legacy-question-generation' },\n        context: 'azure-openai-question-legacy-fallback'\n      });\n      return this.getFallbackQuestion();\n    }\n  }\n\n  /**\n   * Get fallback question when generation fails\n   */\n  private getFallbackQuestion(): string {\n    const { type } = this.interviewContext;\n    \n    switch (type) {\n      case 'technical':\n        return \"Tell me about a challenging technical problem you've solved recently.\";\n      case 'behavioral':\n        return \"Can you describe a time when you had to work with a difficult team member?\";\n      default:\n        return \"What interests you most about this role?\";\n    }\n  }\n\n  /**\n   * Generate interview summary\n   */\n  async generateInterviewSummary(): Promise<string | null> {\n    if (!this.isInitialized || !this.client || this.conversationHistory.length === 0) {\n      return null;\n    }\n\n    const summaryPrompt = `Based on the following interview conversation, provide a brief summary of the candidate's performance, strengths, and areas for improvement. Keep it concise and professional.\\n\\nConversation:\\n${this.conversationHistory.map(msg => `${msg.role}: ${msg.content}`).join('\\n')}`;\n\n    try {\n      if (!this.client) {\n        throw new Error('OpenAI client not initialized');\n      }\n      const completion = await this.client.chat.completions.create({\n        model: this.modelDeployment,\n        messages: [{ role: 'user', content: summaryPrompt }],\n        temperature: 0.5,\n        max_tokens: 300,\n      });\n\n      return completion.choices[0]?.message?.content?.trim() || null;\n    } catch (error) {\n      console.error('\u274C Error generating interview summary:', error);\n      // Log the error for monitoring but return null instead of throwing\n      const structuredError = toStructuredError(error, ErrorCode.AZURE_OPENAI_ERROR);\n      logServerError(error instanceof Error ? error : new Error(String(error)), {\n        errorCode: structuredError.code,\n        category: structuredError.category,\n        details: { ...structuredError.details, context: 'interview-summary-generation' },\n        context: 'azure-openai-summary-generation'\n      });\n      return null;\n    }\n  }\n\n  /**\n   * Get conversation history\n   */\n  getConversationHistory(): ConversationMessage[] {\n    return this.conversationHistory;\n  }\n\n  /**\n   * Reset the service state\n   */\n  reset(): void {\n    this.conversationHistory = [];\n    this.prelimIndex = 0;\n    this.candidateProfile = {};\n    this.interviewContext = { \n      type: 'general',\n      preliminaryCollected: false,\n      currentQuestionCount: 0,\n      maxQuestions: 10\n    };\n    console.log('\uD83D\uDD04 Azure OpenAI Service state reset');\n  }\n}\n\n// Create and export a singleton instance for use across the application\nexport const azureOpenAIServiceServer = new AzureOpenAIServiceServer();\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2821fcc89aba1fc6724ad8fcf86c64cd068684c9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_25q5mvesoh = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_25q5mvesoh();
var __importDefault =
/* istanbul ignore next */
(cov_25q5mvesoh().s[0]++,
/* istanbul ignore next */
(cov_25q5mvesoh().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_25q5mvesoh().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_25q5mvesoh().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_25q5mvesoh().f[0]++;
  cov_25q5mvesoh().s[1]++;
  return /* istanbul ignore next */(cov_25q5mvesoh().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_25q5mvesoh().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_25q5mvesoh().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_25q5mvesoh().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_25q5mvesoh().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_25q5mvesoh().s[3]++;
exports.azureOpenAIServiceServer = exports.AzureOpenAIServiceServer = void 0;
const migration_wrapper_1 =
/* istanbul ignore next */
(cov_25q5mvesoh().s[4]++, require("@/lib/azure-ai-foundry/clients/migration-wrapper"));
const azure_config_1 =
/* istanbul ignore next */
(cov_25q5mvesoh().s[5]++, require("../azure-config"));
const template_engine_1 =
/* istanbul ignore next */
(cov_25q5mvesoh().s[6]++, require("@/lib/utils/template-engine"));
const text_preprocessing_1 =
/* istanbul ignore next */
(cov_25q5mvesoh().s[7]++, require("@/lib/utils/text-preprocessing"));
const path_1 =
/* istanbul ignore next */
(cov_25q5mvesoh().s[8]++, __importDefault(require("path")));
const structured_errors_1 =
/* istanbul ignore next */
(cov_25q5mvesoh().s[9]++, require("@/lib/utils/structured-errors"));
const errors_1 =
/* istanbul ignore next */
(cov_25q5mvesoh().s[10]++, require("@/lib/errors"));
class AzureOpenAIServiceServer {
  constructor() {
    /* istanbul ignore next */
    cov_25q5mvesoh().f[1]++;
    cov_25q5mvesoh().s[11]++;
    this.client = null;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[12]++;
    this.isInitialized = false;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[13]++;
    this.modelDeployment = 'gpt-4o'; // Store the deployment name as model
    /* istanbul ignore next */
    cov_25q5mvesoh().s[14]++;
    this.conversationHistory = [];
    /* istanbul ignore next */
    cov_25q5mvesoh().s[15]++;
    this.interviewContext = {
      type: 'general',
      preliminaryCollected: false,
      currentQuestionCount: 0,
      maxQuestions: 10
    };
    // Preliminary questions for gathering candidate profile
    /* istanbul ignore next */
    cov_25q5mvesoh().s[16]++;
    this.prelimQuestions = ['What is your current role?', 'What primary tech stack do you use?', 'How many years of experience do you have?', 'What are your key skills?', 'How many interview questions would you like?'];
    /* istanbul ignore next */
    cov_25q5mvesoh().s[17]++;
    this.prelimIndex = 0;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[18]++;
    this.candidateProfile = {};
  }
  /**
   * Initialize the Azure OpenAI service using server-side credential loading
   */
  async initialize() {
    /* istanbul ignore next */
    cov_25q5mvesoh().f[2]++;
    cov_25q5mvesoh().s[19]++;
    try {
      /* istanbul ignore next */
      cov_25q5mvesoh().s[20]++;
      console.log('🔑 Initializing Azure OpenAI service on server...');
      const secrets =
      /* istanbul ignore next */
      (cov_25q5mvesoh().s[21]++, await (0, azure_config_1.fetchAzureSecrets)());
      /* istanbul ignore next */
      cov_25q5mvesoh().s[22]++;
      if (
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[4][0]++, !secrets.azureOpenAIKey) ||
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[4][1]++, !secrets.azureOpenAIEndpoint) ||
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[4][2]++, !secrets.azureOpenAIDeployment)) {
        /* istanbul ignore next */
        cov_25q5mvesoh().b[3][0]++;
        cov_25q5mvesoh().s[23]++;
        console.warn('⚠️ Azure OpenAI credentials not available');
        const error =
        /* istanbul ignore next */
        (cov_25q5mvesoh().s[24]++, (0, structured_errors_1.createStructuredError)(structured_errors_1.ErrorCode.SERVICE_NOT_CONFIGURED, {
          service: 'azure-openai',
          missingCredentials: ['key', 'endpoint', 'deployment']
        }, 'Azure OpenAI credentials not available'));
        /* istanbul ignore next */
        cov_25q5mvesoh().s[25]++;
        (0, errors_1.logServerError)(new Error(error.message), {
          errorCode: error.code,
          category: error.category,
          details: error.details
        });
        /* istanbul ignore next */
        cov_25q5mvesoh().s[26]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_25q5mvesoh().b[3][1]++;
      }
      cov_25q5mvesoh().s[27]++;
      this.client = new migration_wrapper_1.MigrationOpenAIClient();
      /* istanbul ignore next */
      cov_25q5mvesoh().s[28]++;
      await this.client.init(); // Initialize the migration client
      // Store the deployment name for use as model in API calls
      /* istanbul ignore next */
      cov_25q5mvesoh().s[29]++;
      this.modelDeployment = secrets.azureOpenAIDeployment;
      /* istanbul ignore next */
      cov_25q5mvesoh().s[30]++;
      this.isInitialized = true;
      /* istanbul ignore next */
      cov_25q5mvesoh().s[31]++;
      console.log('✅ Azure OpenAI Service (server-side) initialized successfully');
      /* istanbul ignore next */
      cov_25q5mvesoh().s[32]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_25q5mvesoh().s[33]++;
      console.error('❌ Failed to initialize Azure OpenAI Service (server-side):', error);
      const structuredError =
      /* istanbul ignore next */
      (cov_25q5mvesoh().s[34]++, (0, structured_errors_1.toStructuredError)(error, structured_errors_1.ErrorCode.CONFIGURATION_ERROR));
      /* istanbul ignore next */
      cov_25q5mvesoh().s[35]++;
      (0, errors_1.logServerError)(error instanceof Error ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[5][0]++, error) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[5][1]++, new Error(String(error))), {
        errorCode: structuredError.code,
        category: structuredError.category,
        details: structuredError.details
      });
      /* istanbul ignore next */
      cov_25q5mvesoh().s[36]++;
      return false;
    }
  }
  /**
   * Check if the service is ready to use
   */
  isReady() {
    /* istanbul ignore next */
    cov_25q5mvesoh().f[3]++;
    cov_25q5mvesoh().s[37]++;
    return /* istanbul ignore next */(cov_25q5mvesoh().b[6][0]++, this.isInitialized) &&
    /* istanbul ignore next */
    (cov_25q5mvesoh().b[6][1]++, this.client !== null);
  }
  /**
   * Set interview context for conversation management
   */
  setInterviewContext(context) {
    /* istanbul ignore next */
    cov_25q5mvesoh().f[4]++;
    var _a, _b, _c, _d, _e, _f;
    // Merge context while preserving defaults
    /* istanbul ignore next */
    cov_25q5mvesoh().s[38]++;
    this.interviewContext = Object.assign(Object.assign(Object.assign({}, this.interviewContext), context), {
      // Ensure defaults are set if not provided
      preliminaryCollected:
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[8][0]++, (_b =
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[10][0]++, (_a = context.preliminaryCollected) !== null) &&
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[10][1]++, _a !== void 0) ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[9][0]++, _a) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[9][1]++, this.interviewContext.preliminaryCollected)) !== null) &&
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[8][1]++, _b !== void 0) ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[7][0]++, _b) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[7][1]++, false),
      currentQuestionCount:
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[12][0]++, (_d =
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[14][0]++, (_c = context.currentQuestionCount) !== null) &&
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[14][1]++, _c !== void 0) ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[13][0]++, _c) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[13][1]++, this.interviewContext.currentQuestionCount)) !== null) &&
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[12][1]++, _d !== void 0) ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[11][0]++, _d) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[11][1]++, 0),
      maxQuestions:
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[16][0]++, (_f =
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[18][0]++, (_e = context.maxQuestions) !== null) &&
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[18][1]++, _e !== void 0) ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[17][0]++, _e) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[17][1]++, this.interviewContext.maxQuestions)) !== null) &&
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[16][1]++, _f !== void 0) ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[15][0]++, _f) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[15][1]++, 10)
    });
    /* istanbul ignore next */
    cov_25q5mvesoh().s[39]++;
    console.log('📋 Interview context updated:', this.interviewContext);
  }
  /**
   * Build system context from candidate profile using template engine
   */
  buildSystemContext() {
    /* istanbul ignore next */
    cov_25q5mvesoh().f[5]++;
    cov_25q5mvesoh().s[40]++;
    try {
      // Load the interview prompts template
      const templatePath =
      /* istanbul ignore next */
      (cov_25q5mvesoh().s[41]++, path_1.default.resolve(process.cwd(), 'config/templates/interview-prompts.yaml'));
      const template =
      /* istanbul ignore next */
      (cov_25q5mvesoh().s[42]++, template_engine_1.templateEngine.loadTemplate(templatePath));
      // Build context for template rendering
      const context =
      /* istanbul ignore next */
      (cov_25q5mvesoh().s[43]++, {
        candidate: {
          name:
          /* istanbul ignore next */
          (cov_25q5mvesoh().b[19][0]++, this.candidateProfile.currentRole) ||
          /* istanbul ignore next */
          (cov_25q5mvesoh().b[19][1]++, 'candidate')
        },
        role: this.candidateProfile.currentRole,
        company: this.interviewContext.company,
        interview_type: this.interviewContext.type,
        experience_level: this.candidateProfile.yearsExperience,
        tech_stack: this.candidateProfile.techStack ?
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[20][0]++, this.candidateProfile.techStack.split(',').map(s => {
          /* istanbul ignore next */
          cov_25q5mvesoh().f[6]++;
          cov_25q5mvesoh().s[44]++;
          return s.trim();
        })) :
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[20][1]++, []),
        custom_instructions: this.buildCustomInstructions(),
        sample_questions: this.getSampleQuestions(),
        duration: '45-60 minutes',
        tone: 'professional and encouraging'
      });
      /* istanbul ignore next */
      cov_25q5mvesoh().s[45]++;
      return template_engine_1.templateEngine.renderFromConfig(template, context);
    } catch (error) {
      /* istanbul ignore next */
      cov_25q5mvesoh().s[46]++;
      console.warn('⚠️ Template engine failed, falling back to legacy prompt building:', error);
      /* istanbul ignore next */
      cov_25q5mvesoh().s[47]++;
      return this.buildSystemContextLegacy();
    }
  }
  /**
   * Build custom instructions based on interview context
   */
  buildCustomInstructions() {
    /* istanbul ignore next */
    cov_25q5mvesoh().f[7]++;
    const {
      currentQuestionCount,
      maxQuestions
    } =
    /* istanbul ignore next */
    (cov_25q5mvesoh().s[48]++, this.interviewContext);
    /* istanbul ignore next */
    cov_25q5mvesoh().s[49]++;
    return ['Preliminary questions have already been collected - do NOT ask them again', `You are currently on interview question ${(
    /* istanbul ignore next */
    (cov_25q5mvesoh().b[21][0]++, currentQuestionCount) ||
    /* istanbul ignore next */
    (cov_25q5mvesoh().b[21][1]++, 0)) + 1} of ${maxQuestions}`, 'Continue with interview questions based on the candidate\'s profile', `After question ${maxQuestions}, conclude the interview and thank the candidate`, `Do NOT exceed ${maxQuestions} interview questions`, 'Keep your responses under 100 words and ask one question at a time'].join('\n');
  }
  /**
   * Get sample questions based on interview type
   */
  getSampleQuestions() {
    /* istanbul ignore next */
    cov_25q5mvesoh().f[8]++;
    const {
      type
    } =
    /* istanbul ignore next */
    (cov_25q5mvesoh().s[50]++, this.interviewContext);
    const {
      techStack,
      yearsExperience,
      currentRole
    } =
    /* istanbul ignore next */
    (cov_25q5mvesoh().s[51]++, this.candidateProfile);
    /* istanbul ignore next */
    cov_25q5mvesoh().s[52]++;
    switch (type) {
      case 'technical':
        /* istanbul ignore next */
        cov_25q5mvesoh().b[22][0]++;
        cov_25q5mvesoh().s[53]++;
        return [`Tell me about a challenging technical problem you've solved using ${techStack}`, 'How do you approach debugging complex issues?', 'Describe your experience with system design and scalability', 'What are your thoughts on code review and best practices?'];
      case 'behavioral':
        /* istanbul ignore next */
        cov_25q5mvesoh().b[22][1]++;
        cov_25q5mvesoh().s[54]++;
        return ['Tell me about a time when you had to work with a difficult team member', 'Describe a situation where you had to learn a new technology quickly', 'How do you handle conflicting priorities and tight deadlines?', 'Give me an example of when you mentored or helped a colleague'];
      default:
        /* istanbul ignore next */
        cov_25q5mvesoh().b[22][2]++;
        cov_25q5mvesoh().s[55]++;
        return ['What interests you most about this position?', `How has your experience in ${currentRole} prepared you for this role?`, 'What are your career goals for the next few years?', 'What motivates you in your work?'];
    }
  }
  /**
   * Legacy system context builder (fallback)
   */
  buildSystemContextLegacy() {
    /* istanbul ignore next */
    cov_25q5mvesoh().f[9]++;
    const {
      currentRole,
      techStack,
      yearsExperience,
      keySkills
    } =
    /* istanbul ignore next */
    (cov_25q5mvesoh().s[56]++, this.candidateProfile);
    const {
      type,
      position,
      company,
      difficulty,
      currentQuestionCount,
      maxQuestions
    } =
    /* istanbul ignore next */
    (cov_25q5mvesoh().s[57]++, this.interviewContext);
    let systemPrompt =
    /* istanbul ignore next */
    (cov_25q5mvesoh().s[58]++, `You are an AI interviewer conducting a ${type} interview with a candidate.\n\n`);
    /* istanbul ignore next */
    cov_25q5mvesoh().s[59]++;
    systemPrompt += `Candidate Profile:\n`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[60]++;
    systemPrompt += `- Current Role: ${currentRole}\n`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[61]++;
    systemPrompt += `- Tech Stack: ${techStack}\n`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[62]++;
    systemPrompt += `- Years of Experience: ${yearsExperience}\n`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[63]++;
    systemPrompt += `- Key Skills: ${keySkills}\n\n`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[64]++;
    systemPrompt += `Interview Guidelines:\n`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[65]++;
    systemPrompt += `1. Ask relevant, engaging questions tailored to their experience level\n`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[66]++;
    systemPrompt += `2. Follow up on answers with clarifying questions\n`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[67]++;
    systemPrompt += `3. Maintain a professional but friendly tone\n`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[68]++;
    systemPrompt += `4. Keep responses concise and focused\n`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[69]++;
    systemPrompt += `5. Adapt difficulty based on their experience and responses\n\n`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[70]++;
    systemPrompt += `Interview Flow Control:\n`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[71]++;
    systemPrompt += `• Preliminary questions have already been collected - do NOT ask them again\n`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[72]++;
    systemPrompt += `• You are currently on interview question ${(
    /* istanbul ignore next */
    (cov_25q5mvesoh().b[23][0]++, currentQuestionCount) ||
    /* istanbul ignore next */
    (cov_25q5mvesoh().b[23][1]++, 0)) + 1} of ${maxQuestions}\n`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[73]++;
    systemPrompt += `• Continue with interview questions based on the candidate's profile\n`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[74]++;
    systemPrompt += `• After question ${maxQuestions}, conclude the interview and thank the candidate\n`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[75]++;
    systemPrompt += `• Do NOT exceed ${maxQuestions} interview questions\n\n`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[76]++;
    if (position) {
      /* istanbul ignore next */
      cov_25q5mvesoh().b[24][0]++;
      cov_25q5mvesoh().s[77]++;
      systemPrompt += `Position: ${position}\n`;
    } else
    /* istanbul ignore next */
    {
      cov_25q5mvesoh().b[24][1]++;
    }
    cov_25q5mvesoh().s[78]++;
    if (company) {
      /* istanbul ignore next */
      cov_25q5mvesoh().b[25][0]++;
      cov_25q5mvesoh().s[79]++;
      systemPrompt += `Company: ${company}\n`;
    } else
    /* istanbul ignore next */
    {
      cov_25q5mvesoh().b[25][1]++;
    }
    cov_25q5mvesoh().s[80]++;
    if (difficulty) {
      /* istanbul ignore next */
      cov_25q5mvesoh().b[26][0]++;
      cov_25q5mvesoh().s[81]++;
      systemPrompt += `Difficulty Level: ${difficulty}\n`;
    } else
    /* istanbul ignore next */
    {
      cov_25q5mvesoh().b[26][1]++;
    }
    cov_25q5mvesoh().s[82]++;
    switch (type) {
      case 'technical':
        /* istanbul ignore next */
        cov_25q5mvesoh().b[27][0]++;
        cov_25q5mvesoh().s[83]++;
        systemPrompt += `\nFocus on technical skills relevant to their tech stack (${techStack}), problem-solving, coding concepts, and system design appropriate for someone with ${yearsExperience} years of experience.`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[84]++;
        break;
      case 'behavioral':
        /* istanbul ignore next */
        cov_25q5mvesoh().b[27][1]++;
        cov_25q5mvesoh().s[85]++;
        systemPrompt += `\nFocus on behavioral questions about teamwork, leadership, conflict resolution, and past experiences relevant to someone in a ${currentRole} role.`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[86]++;
        break;
      default:
        /* istanbul ignore next */
        cov_25q5mvesoh().b[27][2]++;
        cov_25q5mvesoh().s[87]++;
        systemPrompt += `\nAsk a mix of questions about background, experience, goals, and general fit for the role, considering their ${yearsExperience} years of experience in ${currentRole}.`;
    }
    /* istanbul ignore next */
    cov_25q5mvesoh().s[88]++;
    systemPrompt += `\n\nKeep your responses under 100 words and ask one question at a time.`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[89]++;
    return systemPrompt;
  }
  /**
   * Start a new interview conversation
   */
  async startInterviewConversation() {
    /* istanbul ignore next */
    cov_25q5mvesoh().f[10]++;
    cov_25q5mvesoh().s[90]++;
    if (
    /* istanbul ignore next */
    (cov_25q5mvesoh().b[29][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_25q5mvesoh().b[29][1]++, !this.client)) {
      /* istanbul ignore next */
      cov_25q5mvesoh().b[28][0]++;
      const error =
      /* istanbul ignore next */
      (cov_25q5mvesoh().s[91]++, (0, structured_errors_1.createStructuredError)(structured_errors_1.ErrorCode.SERVICE_UNAVAILABLE, {
        service: 'azure-openai'
      }, 'Azure OpenAI Service not initialized'));
      /* istanbul ignore next */
      cov_25q5mvesoh().s[92]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_25q5mvesoh().b[28][1]++;
    }
    // Reset conversation history and preliminary questions state
    cov_25q5mvesoh().s[93]++;
    this.conversationHistory = [];
    /* istanbul ignore next */
    cov_25q5mvesoh().s[94]++;
    this.prelimIndex = 0;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[95]++;
    this.candidateProfile = {};
    // Reset interview context flags
    /* istanbul ignore next */
    cov_25q5mvesoh().s[96]++;
    this.interviewContext.preliminaryCollected = false;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[97]++;
    this.interviewContext.currentQuestionCount = 0;
    // Send greeting + first preliminary question
    const greeting =
    /* istanbul ignore next */
    (cov_25q5mvesoh().s[98]++, "Hello! Welcome to your interview practice session. Before we begin, I'd like to learn a bit about you.");
    const firstQuestion =
    /* istanbul ignore next */
    (cov_25q5mvesoh().s[99]++, this.prelimQuestions[0]);
    const openingMessage =
    /* istanbul ignore next */
    (cov_25q5mvesoh().s[100]++, `${greeting}\n\n${firstQuestion}`);
    // Clean the opening message for TTS
    const cleanedOpeningMessage =
    /* istanbul ignore next */
    (cov_25q5mvesoh().s[101]++, (0, text_preprocessing_1.prepareConversationForTTS)(openingMessage));
    /* istanbul ignore next */
    cov_25q5mvesoh().s[102]++;
    return {
      content: cleanedOpeningMessage,
      questionNumber: 0,
      // 0 indicates preliminary questions
      isComplete: false
    };
  }
  /**
   * Get opening message based on interview type
   * Uses generateInterviewQuestion helper for domain-specific questions
   */
  async getOpeningMessage() {
    /* istanbul ignore next */
    cov_25q5mvesoh().f[11]++;
    const {
      position
    } =
    /* istanbul ignore next */
    (cov_25q5mvesoh().s[103]++, this.interviewContext);
    let greeting =
    /* istanbul ignore next */
    (cov_25q5mvesoh().s[104]++, "");
    /* istanbul ignore next */
    cov_25q5mvesoh().s[105]++;
    if (position) {
      /* istanbul ignore next */
      cov_25q5mvesoh().b[30][0]++;
      cov_25q5mvesoh().s[106]++;
      greeting += `Let's discuss the ${position} position. `;
    } else
    /* istanbul ignore next */
    {
      cov_25q5mvesoh().b[30][1]++;
    }
    cov_25q5mvesoh().s[107]++;
    try {
      // Use the helper to generate a domain-specific opening question
      const question =
      /* istanbul ignore next */
      (cov_25q5mvesoh().s[108]++, await this.generateInterviewQuestion());
      /* istanbul ignore next */
      cov_25q5mvesoh().s[109]++;
      return greeting + question;
    } catch (error) {
      /* istanbul ignore next */
      cov_25q5mvesoh().s[110]++;
      console.warn('⚠️ Falling back to default opening question');
      // Fallback to a simpler approach if generation fails
      /* istanbul ignore next */
      cov_25q5mvesoh().s[111]++;
      return greeting + this.getFallbackQuestion();
    }
  }
  /**
   * Process user response and generate next question or comment
   */
  async processUserResponse(userResponse) {
    /* istanbul ignore next */
    cov_25q5mvesoh().f[12]++;
    var _a, _b, _c;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[112]++;
    console.log('🧪 [AZURE OPENAI] Processing user response', {
      responseLength: userResponse.length,
      preliminaryCollected: this.interviewContext.preliminaryCollected,
      currentQuestionCount: this.interviewContext.currentQuestionCount
    });
    /* istanbul ignore next */
    cov_25q5mvesoh().s[113]++;
    if (
    /* istanbul ignore next */
    (cov_25q5mvesoh().b[32][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_25q5mvesoh().b[32][1]++, !this.client)) {
      /* istanbul ignore next */
      cov_25q5mvesoh().b[31][0]++;
      cov_25q5mvesoh().s[114]++;
      console.error('❌ [AZURE OPENAI] Service not initialized');
      const error =
      /* istanbul ignore next */
      (cov_25q5mvesoh().s[115]++, (0, structured_errors_1.createStructuredError)(structured_errors_1.ErrorCode.SERVICE_UNAVAILABLE, {
        service: 'azure-openai',
        context: 'process-user-response'
      }, 'Azure OpenAI Service not initialized'));
      /* istanbul ignore next */
      cov_25q5mvesoh().s[116]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_25q5mvesoh().b[31][1]++;
    }
    // Check if we're still collecting preliminary information
    cov_25q5mvesoh().s[117]++;
    if (!this.interviewContext.preliminaryCollected) {
      /* istanbul ignore next */
      cov_25q5mvesoh().b[33][0]++;
      cov_25q5mvesoh().s[118]++;
      // We're in preliminary phase - check if we still have questions to ask
      if (this.prelimIndex < this.prelimQuestions.length) {
        /* istanbul ignore next */
        cov_25q5mvesoh().b[34][0]++;
        // Store the user's answer to the current preliminary question
        const questionKeys =
        /* istanbul ignore next */
        (cov_25q5mvesoh().s[119]++, ['currentRole', 'techStack', 'yearsExperience', 'keySkills', 'questionCount']);
        /* istanbul ignore next */
        cov_25q5mvesoh().s[120]++;
        this.candidateProfile[questionKeys[this.prelimIndex]] = userResponse;
        // Increment to next preliminary question
        /* istanbul ignore next */
        cov_25q5mvesoh().s[121]++;
        this.prelimIndex++;
        // If there are more preliminary questions, return the next one
        /* istanbul ignore next */
        cov_25q5mvesoh().s[122]++;
        if (this.prelimIndex < this.prelimQuestions.length) {
          /* istanbul ignore next */
          cov_25q5mvesoh().b[35][0]++;
          const nextQuestion =
          /* istanbul ignore next */
          (cov_25q5mvesoh().s[123]++, this.prelimQuestions[this.prelimIndex]);
          const cleanedResponse =
          /* istanbul ignore next */
          (cov_25q5mvesoh().s[124]++, (0, text_preprocessing_1.prepareConversationForTTS)(`Thank you! ${nextQuestion}`));
          /* istanbul ignore next */
          cov_25q5mvesoh().s[125]++;
          return {
            content: cleanedResponse,
            questionNumber: 0,
            // Still in preliminary phase - keep at 0
            isComplete: false
          };
        } else {
          /* istanbul ignore next */
          cov_25q5mvesoh().b[35][1]++;
          cov_25q5mvesoh().s[126]++;
          // All preliminary questions collected - mark as complete
          this.interviewContext.preliminaryCollected = true;
          // Keep currentQuestionCount at 0 as we haven't asked real questions yet
          /* istanbul ignore next */
          cov_25q5mvesoh().s[127]++;
          this.interviewContext.currentQuestionCount = 0;
          // Build system context from collected profile
          const systemContext =
          /* istanbul ignore next */
          (cov_25q5mvesoh().s[128]++, this.buildSystemContext());
          // Initialize conversation history with system context
          /* istanbul ignore next */
          cov_25q5mvesoh().s[129]++;
          this.conversationHistory = [{
            role: 'system',
            content: systemContext
          }];
          // Set max questions from user's response
          const requestedQuestions =
          /* istanbul ignore next */
          (cov_25q5mvesoh().s[130]++,
          /* istanbul ignore next */
          (cov_25q5mvesoh().b[36][0]++, parseInt(this.candidateProfile.questionCount)) ||
          /* istanbul ignore next */
          (cov_25q5mvesoh().b[36][1]++, 10));
          /* istanbul ignore next */
          cov_25q5mvesoh().s[131]++;
          this.interviewContext.maxQuestions = Math.min(Math.max(requestedQuestions, 5), 20); // Between 5 and 20
          // Generate the first real interview question
          const openingMessage =
          /* istanbul ignore next */
          (cov_25q5mvesoh().s[132]++, await this.getOpeningMessage());
          /* istanbul ignore next */
          cov_25q5mvesoh().s[133]++;
          this.conversationHistory.push({
            role: 'assistant',
            content: openingMessage
          });
          // Increment question count for the first real question
          /* istanbul ignore next */
          cov_25q5mvesoh().s[134]++;
          this.interviewContext.currentQuestionCount = 1;
          // Clean the content for TTS - extract just the question part and remove formatting
          const cleanedQuestion =
          /* istanbul ignore next */
          (cov_25q5mvesoh().s[135]++, (0, text_preprocessing_1.extractQuestionForTTS)(openingMessage));
          const cleanedIntro =
          /* istanbul ignore next */
          (cov_25q5mvesoh().s[136]++, (0, text_preprocessing_1.prepareConversationForTTS)("Great! I now have a better understanding of your background. Let's begin the interview."));
          const cleanedContent =
          /* istanbul ignore next */
          (cov_25q5mvesoh().s[137]++, `${cleanedIntro} ${cleanedQuestion}`);
          /* istanbul ignore next */
          cov_25q5mvesoh().s[138]++;
          return {
            content: cleanedContent,
            questionNumber: 1,
            // First real question
            isComplete: false
          };
        }
      } else
      /* istanbul ignore next */
      {
        cov_25q5mvesoh().b[34][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_25q5mvesoh().b[33][1]++;
    }
    // Normal interview flow - preliminary info has been collected
    // Add user response to conversation history
    cov_25q5mvesoh().s[139]++;
    this.conversationHistory.push({
      role: 'user',
      content: userResponse
    });
    /* istanbul ignore next */
    cov_25q5mvesoh().s[140]++;
    try {
      /* istanbul ignore next */
      cov_25q5mvesoh().s[141]++;
      console.log('🧪 [AZURE OPENAI] Calling OpenAI API with', {
        model: this.modelDeployment,
        messagesCount: this.conversationHistory.length,
        currentQuestionCount: this.interviewContext.currentQuestionCount
      });
      /* istanbul ignore next */
      cov_25q5mvesoh().s[142]++;
      if (!this.client) {
        /* istanbul ignore next */
        cov_25q5mvesoh().b[37][0]++;
        cov_25q5mvesoh().s[143]++;
        throw new Error('OpenAI client not initialized');
      } else
      /* istanbul ignore next */
      {
        cov_25q5mvesoh().b[37][1]++;
      }
      const completion =
      /* istanbul ignore next */
      (cov_25q5mvesoh().s[144]++, await this.client.chat.completions.create({
        model: this.modelDeployment,
        messages: this.conversationHistory,
        temperature: 0.5,
        // Reduced from 0.7 for faster, more focused responses
        max_tokens: 80,
        // Reduced from 200 for shorter, quicker responses
        top_p: 0.8,
        // Slightly reduced for more deterministic responses
        frequency_penalty: 0.0,
        // Removed penalties for faster processing
        presence_penalty: 0.0
      }));
      const assistantResponse =
      /* istanbul ignore next */
      (cov_25q5mvesoh().s[145]++,
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[38][0]++,
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[40][0]++, (_b =
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[42][0]++, (_a = completion.choices[0]) === null) ||
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[42][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[41][0]++, void 0) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[41][1]++, _a.message)) === null) ||
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[40][1]++, _b === void 0) ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[39][0]++, void 0) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[39][1]++, _b.content)) ||
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[38][1]++, 'I\'m sorry, I didn\'t catch that. Could you repeat your answer?'));
      /* istanbul ignore next */
      cov_25q5mvesoh().s[146]++;
      console.log('✅ [AZURE OPENAI] Got response from OpenAI', {
        responseLength: assistantResponse.length,
        tokensUsed:
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[43][0]++,
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[45][0]++, (_c = completion.usage) === null) ||
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[45][1]++, _c === void 0) ?
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[44][0]++, void 0) :
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[44][1]++, _c.total_tokens)) ||
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[43][1]++, 'unknown')
      });
      // Add assistant response to conversation history
      /* istanbul ignore next */
      cov_25q5mvesoh().s[147]++;
      this.conversationHistory.push({
        role: 'assistant',
        content: assistantResponse
      });
      // Increment question count for the next question
      const currentQuestionCount =
      /* istanbul ignore next */
      (cov_25q5mvesoh().s[148]++, (
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[46][0]++, this.interviewContext.currentQuestionCount) ||
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[46][1]++, 0)) + 1);
      const maxQuestions =
      /* istanbul ignore next */
      (cov_25q5mvesoh().s[149]++,
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[47][0]++, this.interviewContext.maxQuestions) ||
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[47][1]++, 10));
      // Update question count in context
      /* istanbul ignore next */
      cov_25q5mvesoh().s[150]++;
      this.interviewContext.currentQuestionCount = currentQuestionCount;
      // Clean the content for TTS - remove markdown formatting and extract meaningful text
      const cleanedContent =
      /* istanbul ignore next */
      (cov_25q5mvesoh().s[151]++, (0, text_preprocessing_1.prepareConversationForTTS)(assistantResponse));
      /* istanbul ignore next */
      cov_25q5mvesoh().s[152]++;
      console.log('🧹 [TTS PREPROCESSING] Cleaned response for speech', {
        originalLength: assistantResponse.length,
        cleanedLength: cleanedContent.length,
        removedFormatting: assistantResponse !== cleanedContent
      });
      /* istanbul ignore next */
      cov_25q5mvesoh().s[153]++;
      return {
        content: cleanedContent,
        questionNumber: currentQuestionCount,
        isComplete: currentQuestionCount >= maxQuestions,
        followUpSuggestions: this.generateFollowUpSuggestions()
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_25q5mvesoh().s[154]++;
      console.error('❌ [AZURE OPENAI] Error generating OpenAI response:', error);
      // Map to structured error codes
      let structuredError;
      /* istanbul ignore next */
      cov_25q5mvesoh().s[155]++;
      if (
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[49][0]++, error) &&
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[49][1]++, typeof error === 'object') &&
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[49][2]++, 'status' in error)) {
        /* istanbul ignore next */
        cov_25q5mvesoh().b[48][0]++;
        const apiError =
        /* istanbul ignore next */
        (cov_25q5mvesoh().s[156]++, error);
        /* istanbul ignore next */
        cov_25q5mvesoh().s[157]++;
        console.error('❌ [AZURE OPENAI] API Error Details:', {
          status: apiError.status,
          code: apiError.code,
          type: apiError.type,
          message: apiError.message
        });
        /* istanbul ignore next */
        cov_25q5mvesoh().s[158]++;
        if (apiError.status === 429) {
          /* istanbul ignore next */
          cov_25q5mvesoh().b[50][0]++;
          cov_25q5mvesoh().s[159]++;
          structuredError = (0, structured_errors_1.createStructuredError)(structured_errors_1.ErrorCode.RATE_LIMIT_EXCEEDED, {
            service: 'azure-openai',
            apiStatus: apiError.status,
            apiCode: apiError.code
          }, 'Rate limit exceeded - please try again in a moment');
        } else {
          /* istanbul ignore next */
          cov_25q5mvesoh().b[50][1]++;
          cov_25q5mvesoh().s[160]++;
          if (
          /* istanbul ignore next */
          (cov_25q5mvesoh().b[52][0]++, apiError.status === 401) ||
          /* istanbul ignore next */
          (cov_25q5mvesoh().b[52][1]++, apiError.status === 403)) {
            /* istanbul ignore next */
            cov_25q5mvesoh().b[51][0]++;
            cov_25q5mvesoh().s[161]++;
            structuredError = (0, structured_errors_1.createStructuredError)(structured_errors_1.ErrorCode.AUTH_TOKEN_INVALID, {
              service: 'azure-openai',
              apiStatus: apiError.status
            }, 'Authentication failed - please check Azure OpenAI credentials');
          } else {
            /* istanbul ignore next */
            cov_25q5mvesoh().b[51][1]++;
            cov_25q5mvesoh().s[162]++;
            if (apiError.status === 404) {
              /* istanbul ignore next */
              cov_25q5mvesoh().b[53][0]++;
              cov_25q5mvesoh().s[163]++;
              structuredError = (0, structured_errors_1.createStructuredError)(structured_errors_1.ErrorCode.CONFIGURATION_ERROR, {
                service: 'azure-openai',
                deployment: this.modelDeployment,
                apiStatus: apiError.status
              }, `Model deployment '${this.modelDeployment}' not found`);
            } else {
              /* istanbul ignore next */
              cov_25q5mvesoh().b[53][1]++;
              cov_25q5mvesoh().s[164]++;
              if (apiError.status >= 500) {
                /* istanbul ignore next */
                cov_25q5mvesoh().b[54][0]++;
                cov_25q5mvesoh().s[165]++;
                structuredError = (0, structured_errors_1.createStructuredError)(structured_errors_1.ErrorCode.AZURE_OPENAI_ERROR, {
                  service: 'azure-openai',
                  apiStatus: apiError.status,
                  apiType: apiError.type
                }, 'Azure OpenAI service error');
              } else {
                /* istanbul ignore next */
                cov_25q5mvesoh().b[54][1]++;
                cov_25q5mvesoh().s[166]++;
                structuredError = (0, structured_errors_1.toStructuredError)(error, structured_errors_1.ErrorCode.AZURE_OPENAI_ERROR);
              }
            }
          }
        }
      } else {
        /* istanbul ignore next */
        cov_25q5mvesoh().b[48][1]++;
        cov_25q5mvesoh().s[167]++;
        structuredError = (0, structured_errors_1.toStructuredError)(error, structured_errors_1.ErrorCode.AZURE_OPENAI_ERROR);
      }
      // Log the error for monitoring
      /* istanbul ignore next */
      cov_25q5mvesoh().s[168]++;
      (0, errors_1.logServerError)(error instanceof Error ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[55][0]++, error) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[55][1]++, new Error(String(error))), {
        errorCode: structuredError.code,
        category: structuredError.category,
        details: structuredError.details,
        context: 'azure-openai-process-response'
      });
      /* istanbul ignore next */
      cov_25q5mvesoh().s[169]++;
      throw structuredError;
    }
  }
  /**
   * Generate follow-up suggestions based on conversation
   */
  generateFollowUpSuggestions() {
    /* istanbul ignore next */
    cov_25q5mvesoh().f[13]++;
    const {
      type
    } =
    /* istanbul ignore next */
    (cov_25q5mvesoh().s[170]++, this.interviewContext);
    /* istanbul ignore next */
    cov_25q5mvesoh().s[171]++;
    switch (type) {
      case 'technical':
        /* istanbul ignore next */
        cov_25q5mvesoh().b[56][0]++;
        cov_25q5mvesoh().s[172]++;
        return ["Can you explain your thought process?", "What would you do differently?", "How would this scale?"];
      case 'behavioral':
        /* istanbul ignore next */
        cov_25q5mvesoh().b[56][1]++;
        cov_25q5mvesoh().s[173]++;
        return ["What was the outcome?", "What did you learn?", "How would you handle it now?"];
      default:
        /* istanbul ignore next */
        cov_25q5mvesoh().b[56][2]++;
        cov_25q5mvesoh().s[174]++;
        return ["Can you elaborate on that?", "What was your biggest challenge?", "What motivates you?"];
    }
  }
  /**
   * Generate a domain-specific interview question using template engine
   */
  async generateInterviewQuestion() {
    /* istanbul ignore next */
    cov_25q5mvesoh().f[14]++;
    var _a, _b, _c;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[175]++;
    if (
    /* istanbul ignore next */
    (cov_25q5mvesoh().b[58][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_25q5mvesoh().b[58][1]++, !this.client)) {
      /* istanbul ignore next */
      cov_25q5mvesoh().b[57][0]++;
      const error =
      /* istanbul ignore next */
      (cov_25q5mvesoh().s[176]++, (0, structured_errors_1.createStructuredError)(structured_errors_1.ErrorCode.SERVICE_UNAVAILABLE, {
        service: 'azure-openai',
        context: 'generate-interview-question'
      }, 'Azure OpenAI Service not initialized'));
      /* istanbul ignore next */
      cov_25q5mvesoh().s[177]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_25q5mvesoh().b[57][1]++;
    }
    cov_25q5mvesoh().s[178]++;
    try {
      // Load the question generation template
      const templatePath =
      /* istanbul ignore next */
      (cov_25q5mvesoh().s[179]++, path_1.default.resolve(process.cwd(), 'config/templates/question-templates.yaml'));
      const template =
      /* istanbul ignore next */
      (cov_25q5mvesoh().s[180]++, template_engine_1.templateEngine.loadTemplate(templatePath));
      // Build context for template rendering
      const context =
      /* istanbul ignore next */
      (cov_25q5mvesoh().s[181]++, {
        role:
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[59][0]++, this.candidateProfile.currentRole) ||
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[59][1]++, 'Software Developer'),
        category:
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[60][0]++, this.interviewContext.type) ||
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[60][1]++, 'general'),
        difficulty: this.getDifficultyLevel(),
        count: 1,
        tech_stack: this.candidateProfile.techStack ?
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[61][0]++, this.candidateProfile.techStack.split(',').map(s => {
          /* istanbul ignore next */
          cov_25q5mvesoh().f[15]++;
          cov_25q5mvesoh().s[182]++;
          return s.trim();
        })) :
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[61][1]++, []),
        experience_level:
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[62][0]++, this.candidateProfile.yearsExperience) ||
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[62][1]++, 'mid-level'),
        custom_requirements: this.interviewContext.position ?
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[63][0]++, `Focus on requirements for ${this.interviewContext.position} position`) :
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[63][1]++, undefined)
      });
      const questionPrompt =
      /* istanbul ignore next */
      (cov_25q5mvesoh().s[183]++, template_engine_1.templateEngine.renderFromConfig(template, context));
      /* istanbul ignore next */
      cov_25q5mvesoh().s[184]++;
      if (!this.client) {
        /* istanbul ignore next */
        cov_25q5mvesoh().b[64][0]++;
        cov_25q5mvesoh().s[185]++;
        throw new Error('OpenAI client not initialized');
      } else
      /* istanbul ignore next */
      {
        cov_25q5mvesoh().b[64][1]++;
      }
      const completion =
      /* istanbul ignore next */
      (cov_25q5mvesoh().s[186]++, await this.client.chat.completions.create({
        model: this.modelDeployment,
        messages: [{
          role: 'user',
          content: questionPrompt
        }],
        temperature: 0.8,
        max_tokens: 100,
        top_p: 0.9
      }));
      const question =
      /* istanbul ignore next */
      (cov_25q5mvesoh().s[187]++,
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[65][0]++,
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[67][0]++, (_c =
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[69][0]++, (_b =
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[71][0]++, (_a = completion.choices[0]) === null) ||
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[71][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[70][0]++, void 0) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[70][1]++, _a.message)) === null) ||
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[69][1]++, _b === void 0) ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[68][0]++, void 0) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[68][1]++, _b.content)) === null) ||
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[67][1]++, _c === void 0) ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[66][0]++, void 0) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[66][1]++, _c.trim())) ||
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[65][1]++, this.getFallbackQuestion()));
      /* istanbul ignore next */
      cov_25q5mvesoh().s[188]++;
      return question;
    } catch (error) {
      /* istanbul ignore next */
      cov_25q5mvesoh().s[189]++;
      console.warn('⚠️ Template-based question generation failed, using legacy method:', error);
      // Log but don't throw - fallback to legacy method
      const structuredError =
      /* istanbul ignore next */
      (cov_25q5mvesoh().s[190]++, (0, structured_errors_1.toStructuredError)(error, structured_errors_1.ErrorCode.AZURE_OPENAI_ERROR));
      /* istanbul ignore next */
      cov_25q5mvesoh().s[191]++;
      (0, errors_1.logServerError)(error instanceof Error ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[72][0]++, error) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[72][1]++, new Error(String(error))), {
        errorCode: structuredError.code,
        category: structuredError.category,
        details: Object.assign(Object.assign({}, structuredError.details), {
          context: 'template-question-generation'
        }),
        context: 'azure-openai-question-template-fallback'
      });
      /* istanbul ignore next */
      cov_25q5mvesoh().s[192]++;
      return this.generateInterviewQuestionLegacy();
    }
  }
  /**
   * Get difficulty level mapping
   */
  getDifficultyLevel() {
    /* istanbul ignore next */
    cov_25q5mvesoh().f[16]++;
    const experience =
    /* istanbul ignore next */
    (cov_25q5mvesoh().s[193]++, parseInt(
    /* istanbul ignore next */
    (cov_25q5mvesoh().b[73][0]++, this.candidateProfile.yearsExperience) ||
    /* istanbul ignore next */
    (cov_25q5mvesoh().b[73][1]++, '3')));
    /* istanbul ignore next */
    cov_25q5mvesoh().s[194]++;
    if (experience <= 2) {
      /* istanbul ignore next */
      cov_25q5mvesoh().b[74][0]++;
      cov_25q5mvesoh().s[195]++;
      return 'junior';
    } else
    /* istanbul ignore next */
    {
      cov_25q5mvesoh().b[74][1]++;
    }
    cov_25q5mvesoh().s[196]++;
    if (experience <= 5) {
      /* istanbul ignore next */
      cov_25q5mvesoh().b[75][0]++;
      cov_25q5mvesoh().s[197]++;
      return 'mid';
    } else
    /* istanbul ignore next */
    {
      cov_25q5mvesoh().b[75][1]++;
    }
    cov_25q5mvesoh().s[198]++;
    if (experience <= 10) {
      /* istanbul ignore next */
      cov_25q5mvesoh().b[76][0]++;
      cov_25q5mvesoh().s[199]++;
      return 'senior';
    } else
    /* istanbul ignore next */
    {
      cov_25q5mvesoh().b[76][1]++;
    }
    cov_25q5mvesoh().s[200]++;
    return 'principal';
  }
  /**
   * Legacy question generation method (fallback)
   */
  async generateInterviewQuestionLegacy() {
    /* istanbul ignore next */
    cov_25q5mvesoh().f[17]++;
    var _a, _b, _c;
    const {
      type,
      difficulty,
      position
    } =
    /* istanbul ignore next */
    (cov_25q5mvesoh().s[201]++, this.interviewContext);
    const {
      currentRole,
      techStack,
      yearsExperience,
      keySkills
    } =
    /* istanbul ignore next */
    (cov_25q5mvesoh().s[202]++, this.candidateProfile);
    let questionPrompt =
    /* istanbul ignore next */
    (cov_25q5mvesoh().s[203]++, `Generate one concise interview question. `);
    // Add context-specific instructions based on interview type
    /* istanbul ignore next */
    cov_25q5mvesoh().s[204]++;
    switch (type) {
      case 'technical':
        /* istanbul ignore next */
        cov_25q5mvesoh().b[77][0]++;
        cov_25q5mvesoh().s[205]++;
        questionPrompt += `Focus on technical skills and problem-solving.\n`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[206]++;
        questionPrompt += `Consider the candidate's tech stack: ${
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[78][0]++, techStack) ||
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[78][1]++, 'various technologies')}.\n`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[207]++;
        questionPrompt += `Experience level: ${
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[79][0]++, yearsExperience) ||
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[79][1]++, 'mid-level')} years.\n`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[208]++;
        questionPrompt += `Include specific technical scenarios such as:\n`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[209]++;
        questionPrompt += `- Code/architecture design challenges\n`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[210]++;
        questionPrompt += `- Debugging or optimization problems\n`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[211]++;
        questionPrompt += `- Technology-specific best practices\n`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[212]++;
        questionPrompt += `- System scalability considerations\n`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[213]++;
        break;
      case 'behavioral':
        /* istanbul ignore next */
        cov_25q5mvesoh().b[77][1]++;
        cov_25q5mvesoh().s[214]++;
        questionPrompt += `Focus on behavioral assessment using STAR method.\n`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[215]++;
        questionPrompt += `Consider the candidate's role: ${
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[80][0]++, currentRole) ||
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[80][1]++, 'general position')}.\n`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[216]++;
        questionPrompt += `Ask about situations involving:\n`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[217]++;
        questionPrompt += `- Leadership and teamwork\n`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[218]++;
        questionPrompt += `- Conflict resolution\n`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[219]++;
        questionPrompt += `- Problem-solving under pressure\n`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[220]++;
        questionPrompt += `- Learning from failures\n`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[221]++;
        break;
      default:
        /* istanbul ignore next */
        cov_25q5mvesoh().b[77][2]++;
        cov_25q5mvesoh().s[222]++;
        questionPrompt += `Ask a general interview question.\n`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[223]++;
        questionPrompt += `Consider the candidate's background: ${
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[81][0]++, currentRole) ||
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[81][1]++, 'various roles')} with ${
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[82][0]++, yearsExperience) ||
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[82][1]++, 'some')} years experience.\n`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[224]++;
        questionPrompt += `Focus on motivation, goals, and cultural fit.\n`;
    }
    /* istanbul ignore next */
    cov_25q5mvesoh().s[225]++;
    if (difficulty) {
      /* istanbul ignore next */
      cov_25q5mvesoh().b[83][0]++;
      cov_25q5mvesoh().s[226]++;
      questionPrompt += `Difficulty level: ${difficulty}.\n`;
    } else
    /* istanbul ignore next */
    {
      cov_25q5mvesoh().b[83][1]++;
    }
    cov_25q5mvesoh().s[227]++;
    if (position) {
      /* istanbul ignore next */
      cov_25q5mvesoh().b[84][0]++;
      cov_25q5mvesoh().s[228]++;
      questionPrompt += `Position being interviewed for: ${position}.\n`;
    } else
    /* istanbul ignore next */
    {
      cov_25q5mvesoh().b[84][1]++;
    }
    cov_25q5mvesoh().s[229]++;
    questionPrompt += `\nReturn only the question text, no additional formatting or explanations.`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[230]++;
    try {
      /* istanbul ignore next */
      cov_25q5mvesoh().s[231]++;
      if (!this.client) {
        /* istanbul ignore next */
        cov_25q5mvesoh().b[85][0]++;
        cov_25q5mvesoh().s[232]++;
        throw new Error('OpenAI client not initialized');
      } else
      /* istanbul ignore next */
      {
        cov_25q5mvesoh().b[85][1]++;
      }
      const completion =
      /* istanbul ignore next */
      (cov_25q5mvesoh().s[233]++, await this.client.chat.completions.create({
        model: this.modelDeployment,
        messages: [{
          role: 'user',
          content: questionPrompt
        }],
        temperature: 0.8,
        max_tokens: 100,
        top_p: 0.9
      }));
      const question =
      /* istanbul ignore next */
      (cov_25q5mvesoh().s[234]++,
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[86][0]++,
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[88][0]++, (_c =
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[90][0]++, (_b =
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[92][0]++, (_a = completion.choices[0]) === null) ||
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[92][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[91][0]++, void 0) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[91][1]++, _a.message)) === null) ||
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[90][1]++, _b === void 0) ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[89][0]++, void 0) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[89][1]++, _b.content)) === null) ||
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[88][1]++, _c === void 0) ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[87][0]++, void 0) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[87][1]++, _c.trim())) ||
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[86][1]++, this.getFallbackQuestion()));
      /* istanbul ignore next */
      cov_25q5mvesoh().s[235]++;
      return question;
    } catch (error) {
      /* istanbul ignore next */
      cov_25q5mvesoh().s[236]++;
      console.warn('⚠️ Failed to generate interview question, using fallback');
      // Log the error for monitoring but return fallback instead of throwing
      const structuredError =
      /* istanbul ignore next */
      (cov_25q5mvesoh().s[237]++, (0, structured_errors_1.toStructuredError)(error, structured_errors_1.ErrorCode.AZURE_OPENAI_ERROR));
      /* istanbul ignore next */
      cov_25q5mvesoh().s[238]++;
      (0, errors_1.logServerError)(error instanceof Error ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[93][0]++, error) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[93][1]++, new Error(String(error))), {
        errorCode: structuredError.code,
        category: structuredError.category,
        details: Object.assign(Object.assign({}, structuredError.details), {
          context: 'legacy-question-generation'
        }),
        context: 'azure-openai-question-legacy-fallback'
      });
      /* istanbul ignore next */
      cov_25q5mvesoh().s[239]++;
      return this.getFallbackQuestion();
    }
  }
  /**
   * Get fallback question when generation fails
   */
  getFallbackQuestion() {
    /* istanbul ignore next */
    cov_25q5mvesoh().f[18]++;
    const {
      type
    } =
    /* istanbul ignore next */
    (cov_25q5mvesoh().s[240]++, this.interviewContext);
    /* istanbul ignore next */
    cov_25q5mvesoh().s[241]++;
    switch (type) {
      case 'technical':
        /* istanbul ignore next */
        cov_25q5mvesoh().b[94][0]++;
        cov_25q5mvesoh().s[242]++;
        return "Tell me about a challenging technical problem you've solved recently.";
      case 'behavioral':
        /* istanbul ignore next */
        cov_25q5mvesoh().b[94][1]++;
        cov_25q5mvesoh().s[243]++;
        return "Can you describe a time when you had to work with a difficult team member?";
      default:
        /* istanbul ignore next */
        cov_25q5mvesoh().b[94][2]++;
        cov_25q5mvesoh().s[244]++;
        return "What interests you most about this role?";
    }
  }
  /**
   * Generate interview summary
   */
  async generateInterviewSummary() {
    /* istanbul ignore next */
    cov_25q5mvesoh().f[19]++;
    var _a, _b, _c;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[245]++;
    if (
    /* istanbul ignore next */
    (cov_25q5mvesoh().b[96][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_25q5mvesoh().b[96][1]++, !this.client) ||
    /* istanbul ignore next */
    (cov_25q5mvesoh().b[96][2]++, this.conversationHistory.length === 0)) {
      /* istanbul ignore next */
      cov_25q5mvesoh().b[95][0]++;
      cov_25q5mvesoh().s[246]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_25q5mvesoh().b[95][1]++;
    }
    const summaryPrompt =
    /* istanbul ignore next */
    (cov_25q5mvesoh().s[247]++, `Based on the following interview conversation, provide a brief summary of the candidate's performance, strengths, and areas for improvement. Keep it concise and professional.\n\nConversation:\n${this.conversationHistory.map(msg => {
      /* istanbul ignore next */
      cov_25q5mvesoh().f[20]++;
      cov_25q5mvesoh().s[248]++;
      return `${msg.role}: ${msg.content}`;
    }).join('\n')}`);
    /* istanbul ignore next */
    cov_25q5mvesoh().s[249]++;
    try {
      /* istanbul ignore next */
      cov_25q5mvesoh().s[250]++;
      if (!this.client) {
        /* istanbul ignore next */
        cov_25q5mvesoh().b[97][0]++;
        cov_25q5mvesoh().s[251]++;
        throw new Error('OpenAI client not initialized');
      } else
      /* istanbul ignore next */
      {
        cov_25q5mvesoh().b[97][1]++;
      }
      const completion =
      /* istanbul ignore next */
      (cov_25q5mvesoh().s[252]++, await this.client.chat.completions.create({
        model: this.modelDeployment,
        messages: [{
          role: 'user',
          content: summaryPrompt
        }],
        temperature: 0.5,
        max_tokens: 300
      }));
      /* istanbul ignore next */
      cov_25q5mvesoh().s[253]++;
      return /* istanbul ignore next */(cov_25q5mvesoh().b[98][0]++,
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[100][0]++, (_c =
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[102][0]++, (_b =
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[104][0]++, (_a = completion.choices[0]) === null) ||
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[104][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[103][0]++, void 0) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[103][1]++, _a.message)) === null) ||
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[102][1]++, _b === void 0) ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[101][0]++, void 0) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[101][1]++, _b.content)) === null) ||
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[100][1]++, _c === void 0) ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[99][0]++, void 0) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[99][1]++, _c.trim())) ||
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[98][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_25q5mvesoh().s[254]++;
      console.error('❌ Error generating interview summary:', error);
      // Log the error for monitoring but return null instead of throwing
      const structuredError =
      /* istanbul ignore next */
      (cov_25q5mvesoh().s[255]++, (0, structured_errors_1.toStructuredError)(error, structured_errors_1.ErrorCode.AZURE_OPENAI_ERROR));
      /* istanbul ignore next */
      cov_25q5mvesoh().s[256]++;
      (0, errors_1.logServerError)(error instanceof Error ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[105][0]++, error) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[105][1]++, new Error(String(error))), {
        errorCode: structuredError.code,
        category: structuredError.category,
        details: Object.assign(Object.assign({}, structuredError.details), {
          context: 'interview-summary-generation'
        }),
        context: 'azure-openai-summary-generation'
      });
      /* istanbul ignore next */
      cov_25q5mvesoh().s[257]++;
      return null;
    }
  }
  /**
   * Get conversation history
   */
  getConversationHistory() {
    /* istanbul ignore next */
    cov_25q5mvesoh().f[21]++;
    cov_25q5mvesoh().s[258]++;
    return this.conversationHistory;
  }
  /**
   * Reset the service state
   */
  reset() {
    /* istanbul ignore next */
    cov_25q5mvesoh().f[22]++;
    cov_25q5mvesoh().s[259]++;
    this.conversationHistory = [];
    /* istanbul ignore next */
    cov_25q5mvesoh().s[260]++;
    this.prelimIndex = 0;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[261]++;
    this.candidateProfile = {};
    /* istanbul ignore next */
    cov_25q5mvesoh().s[262]++;
    this.interviewContext = {
      type: 'general',
      preliminaryCollected: false,
      currentQuestionCount: 0,
      maxQuestions: 10
    };
    /* istanbul ignore next */
    cov_25q5mvesoh().s[263]++;
    console.log('🔄 Azure OpenAI Service state reset');
  }
}
/* istanbul ignore next */
cov_25q5mvesoh().s[264]++;
exports.AzureOpenAIServiceServer = AzureOpenAIServiceServer;
// Create and export a singleton instance for use across the application
/* istanbul ignore next */
cov_25q5mvesoh().s[265]++;
exports.azureOpenAIServiceServer = new AzureOpenAIServiceServer();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,