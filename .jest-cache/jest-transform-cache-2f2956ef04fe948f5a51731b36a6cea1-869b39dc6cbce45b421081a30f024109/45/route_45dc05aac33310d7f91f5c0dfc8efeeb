1fa9683ab8324f830eb56d55ffaa85bb
"use strict";

/* istanbul ignore next */
function cov_1xgbq53d1t() {
  var path = "/Users/dikshantvashistha/PrepBettr/app/api/voice/conversation/route.ts";
  var hash = "077c24c53a924d4a3646a3d39aa0a12b159aec57";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/app/api/voice/conversation/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 20
        }
      },
      "2": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 4,
          column: 18
        }
      },
      "3": {
        start: {
          line: 5,
          column: 17
        },
        end: {
          line: 5,
          column: 39
        }
      },
      "4": {
        start: {
          line: 6,
          column: 38
        },
        end: {
          line: 6,
          column: 97
        }
      },
      "5": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 46
        }
      },
      "6": {
        start: {
          line: 8,
          column: 28
        },
        end: {
          line: 8,
          column: 68
        }
      },
      "7": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 159,
          column: 5
        }
      },
      "8": {
        start: {
          line: 16,
          column: 21
        },
        end: {
          line: 16,
          column: 41
        }
      },
      "9": {
        start: {
          line: 17,
          column: 27
        },
        end: {
          line: 17,
          column: 31
        }
      },
      "10": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 89
        }
      },
      "11": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 113
        }
      },
      "12": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 37,
          column: 9
        }
      },
      "13": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 86
        }
      },
      "14": {
        start: {
          line: 23,
          column: 32
        },
        end: {
          line: 23,
          column: 105
        }
      },
      "15": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 35,
          column: 13
        }
      },
      "16": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 96
        }
      },
      "17": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 26,
          column: 83
        }
      },
      "18": {
        start: {
          line: 27,
          column: 28
        },
        end: {
          line: 27,
          column: 178
        }
      },
      "19": {
        start: {
          line: 28,
          column: 31
        },
        end: {
          line: 28,
          column: 98
        }
      },
      "20": {
        start: {
          line: 29,
          column: 28
        },
        end: {
          line: 29,
          column: 71
        }
      },
      "21": {
        start: {
          line: 30,
          column: 16
        },
        end: {
          line: 33,
          column: 17
        }
      },
      "22": {
        start: {
          line: 31,
          column: 20
        },
        end: {
          line: 31,
          column: 81
        }
      },
      "23": {
        start: {
          line: 32,
          column: 20
        },
        end: {
          line: 32,
          column: 83
        }
      },
      "24": {
        start: {
          line: 34,
          column: 16
        },
        end: {
          line: 34,
          column: 27
        }
      },
      "25": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 94
        }
      },
      "26": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "27": {
        start: {
          line: 40,
          column: 45
        },
        end: {
          line: 40,
          column: 49
        }
      },
      "28": {
        start: {
          line: 41,
          column: 16
        },
        end: {
          line: 44,
          column: 17
        }
      },
      "29": {
        start: {
          line: 42,
          column: 32
        },
        end: {
          line: 42,
          column: 208
        }
      },
      "30": {
        start: {
          line: 43,
          column: 20
        },
        end: {
          line: 43,
          column: 140
        }
      },
      "31": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 54,
          column: 19
        }
      },
      "32": {
        start: {
          line: 56,
          column: 33
        },
        end: {
          line: 56,
          column: 122
        }
      },
      "33": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 61,
          column: 19
        }
      },
      "34": {
        start: {
          line: 62,
          column: 16
        },
        end: {
          line: 68,
          column: 19
        }
      },
      "35": {
        start: {
          line: 71,
          column: 43
        },
        end: {
          line: 71,
          column: 47
        }
      },
      "36": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 76,
          column: 17
        }
      },
      "37": {
        start: {
          line: 73,
          column: 20
        },
        end: {
          line: 73,
          column: 84
        }
      },
      "38": {
        start: {
          line: 74,
          column: 32
        },
        end: {
          line: 74,
          column: 206
        }
      },
      "39": {
        start: {
          line: 75,
          column: 20
        },
        end: {
          line: 75,
          column: 140
        }
      },
      "40": {
        start: {
          line: 77,
          column: 16
        },
        end: {
          line: 80,
          column: 19
        }
      },
      "41": {
        start: {
          line: 81,
          column: 16
        },
        end: {
          line: 106,
          column: 17
        }
      },
      "42": {
        start: {
          line: 83,
          column: 37
        },
        end: {
          line: 83,
          column: 140
        }
      },
      "43": {
        start: {
          line: 84,
          column: 20
        },
        end: {
          line: 88,
          column: 23
        }
      },
      "44": {
        start: {
          line: 89,
          column: 20
        },
        end: {
          line: 94,
          column: 23
        }
      },
      "45": {
        start: {
          line: 95,
          column: 20
        },
        end: {
          line: 101,
          column: 23
        }
      },
      "46": {
        start: {
          line: 104,
          column: 20
        },
        end: {
          line: 104,
          column: 102
        }
      },
      "47": {
        start: {
          line: 105,
          column: 20
        },
        end: {
          line: 105,
          column: 39
        }
      },
      "48": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 127,
          column: 17
        }
      },
      "49": {
        start: {
          line: 111,
          column: 36
        },
        end: {
          line: 111,
          column: 123
        }
      },
      "50": {
        start: {
          line: 112,
          column: 20
        },
        end: {
          line: 115,
          column: 23
        }
      },
      "51": {
        start: {
          line: 116,
          column: 20
        },
        end: {
          line: 119,
          column: 23
        }
      },
      "52": {
        start: {
          line: 122,
          column: 20
        },
        end: {
          line: 122,
          column: 164
        }
      },
      "53": {
        start: {
          line: 123,
          column: 20
        },
        end: {
          line: 126,
          column: 23
        }
      },
      "54": {
        start: {
          line: 130,
          column: 28
        },
        end: {
          line: 130,
          column: 162
        }
      },
      "55": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 136
        }
      },
      "56": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 135,
          column: 123
        }
      },
      "57": {
        start: {
          line: 137,
          column: 19
        },
        end: {
          line: 137,
          column: 70
        }
      },
      "58": {
        start: {
          line: 138,
          column: 24
        },
        end: {
          line: 138,
          column: 81
        }
      },
      "59": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 150,
          column: 9
        }
      },
      "60": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 140,
          column: 69
        }
      },
      "61": {
        start: {
          line: 142,
          column: 13
        },
        end: {
          line: 150,
          column: 9
        }
      },
      "62": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 68
        }
      },
      "63": {
        start: {
          line: 145,
          column: 13
        },
        end: {
          line: 150,
          column: 9
        }
      },
      "64": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 146,
          column: 65
        }
      },
      "65": {
        start: {
          line: 148,
          column: 13
        },
        end: {
          line: 150,
          column: 9
        }
      },
      "66": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 68
        }
      },
      "67": {
        start: {
          line: 151,
          column: 20
        },
        end: {
          line: 151,
          column: 105
        }
      },
      "68": {
        start: {
          line: 152,
          column: 23
        },
        end: {
          line: 152,
          column: 80
        }
      },
      "69": {
        start: {
          line: 153,
          column: 20
        },
        end: {
          line: 153,
          column: 63
        }
      },
      "70": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 157,
          column: 9
        }
      },
      "71": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 73
        }
      },
      "72": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 75
        }
      },
      "73": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 158,
          column: 19
        }
      },
      "74": {
        start: {
          line: 165,
          column: 20
        },
        end: {
          line: 165,
          column: 84
        }
      },
      "75": {
        start: {
          line: 166,
          column: 4
        },
        end: {
          line: 172,
          column: 7
        }
      },
      "76": {
        start: {
          line: 176,
          column: 27
        },
        end: {
          line: 176,
          column: 45
        }
      },
      "77": {
        start: {
          line: 177,
          column: 4
        },
        end: {
          line: 178,
          column: 27
        }
      },
      "78": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 178,
          column: 27
        }
      },
      "79": {
        start: {
          line: 179,
          column: 4
        },
        end: {
          line: 180,
          column: 28
        }
      },
      "80": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 180,
          column: 28
        }
      },
      "81": {
        start: {
          line: 181,
          column: 4
        },
        end: {
          line: 181,
          column: 21
        }
      },
      "82": {
        start: {
          line: 186,
          column: 4
        },
        end: {
          line: 187,
          column: 48
        }
      },
      "83": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 187,
          column: 48
        }
      },
      "84": {
        start: {
          line: 188,
          column: 4
        },
        end: {
          line: 193,
          column: 5
        }
      },
      "85": {
        start: {
          line: 190,
          column: 26
        },
        end: {
          line: 190,
          column: 116
        }
      },
      "86": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 192,
          column: 32
        }
      },
      "87": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 32
        }
      },
      "88": {
        start: {
          line: 194,
          column: 4
        },
        end: {
          line: 194,
          column: 21
        }
      },
      "89": {
        start: {
          line: 199,
          column: 4
        },
        end: {
          line: 199,
          column: 21
        }
      }
    },
    fnMap: {
      "0": {
        name: "POST",
        decl: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 13,
            column: 19
          }
        },
        loc: {
          start: {
            line: 13,
            column: 29
          },
          end: {
            line: 160,
            column: 1
          }
        },
        line: 13
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 164,
            column: 15
          },
          end: {
            line: 164,
            column: 18
          }
        },
        loc: {
          start: {
            line: 164,
            column: 21
          },
          end: {
            line: 173,
            column: 1
          }
        },
        line: 164
      },
      "2": {
        name: "mapInterviewType",
        decl: {
          start: {
            line: 175,
            column: 9
          },
          end: {
            line: 175,
            column: 25
          }
        },
        loc: {
          start: {
            line: 175,
            column: 32
          },
          end: {
            line: 182,
            column: 1
          }
        },
        line: 175
      },
      "3": {
        name: "extractJobRole",
        decl: {
          start: {
            line: 183,
            column: 9
          },
          end: {
            line: 183,
            column: 23
          }
        },
        loc: {
          start: {
            line: 183,
            column: 33
          },
          end: {
            line: 195,
            column: 1
          }
        },
        line: 183
      },
      "4": {
        name: "extractCompanyName",
        decl: {
          start: {
            line: 196,
            column: 9
          },
          end: {
            line: 196,
            column: 27
          }
        },
        loc: {
          start: {
            line: 196,
            column: 37
          },
          end: {
            line: 200,
            column: 1
          }
        },
        line: 196
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 37,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 37,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "1": {
        loc: {
          start: {
            line: 24,
            column: 12
          },
          end: {
            line: 35,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 12
          },
          end: {
            line: 35,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "2": {
        loc: {
          start: {
            line: 30,
            column: 16
          },
          end: {
            line: 33,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 16
          },
          end: {
            line: 33,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "3": {
        loc: {
          start: {
            line: 30,
            column: 20
          },
          end: {
            line: 30,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 20
          },
          end: {
            line: 30,
            column: 39
          }
        }, {
          start: {
            line: 30,
            column: 43
          },
          end: {
            line: 30,
            column: 63
          }
        }],
        line: 30
      },
      "4": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 69,
            column: 13
          }
        }, {
          start: {
            line: 70,
            column: 12
          },
          end: {
            line: 107,
            column: 13
          }
        }, {
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 128,
            column: 13
          }
        }, {
          start: {
            line: 129,
            column: 12
          },
          end: {
            line: 131,
            column: 136
          }
        }],
        line: 38
      },
      "5": {
        loc: {
          start: {
            line: 41,
            column: 16
          },
          end: {
            line: 44,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 16
          },
          end: {
            line: 44,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "6": {
        loc: {
          start: {
            line: 72,
            column: 16
          },
          end: {
            line: 76,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 16
          },
          end: {
            line: 76,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "7": {
        loc: {
          start: {
            line: 72,
            column: 20
          },
          end: {
            line: 72,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 72,
            column: 20
          },
          end: {
            line: 72,
            column: 35
          }
        }, {
          start: {
            line: 72,
            column: 39
          },
          end: {
            line: 72,
            column: 61
          }
        }],
        line: 72
      },
      "8": {
        loc: {
          start: {
            line: 85,
            column: 39
          },
          end: {
            line: 85,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 85,
            column: 91
          },
          end: {
            line: 85,
            column: 97
          }
        }, {
          start: {
            line: 85,
            column: 100
          },
          end: {
            line: 85,
            column: 109
          }
        }],
        line: 85
      },
      "9": {
        loc: {
          start: {
            line: 85,
            column: 39
          },
          end: {
            line: 85,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 85,
            column: 39
          },
          end: {
            line: 85,
            column: 71
          }
        }, {
          start: {
            line: 85,
            column: 75
          },
          end: {
            line: 85,
            column: 88
          }
        }],
        line: 85
      },
      "10": {
        loc: {
          start: {
            line: 122,
            column: 106
          },
          end: {
            line: 122,
            column: 160
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 122,
            column: 131
          },
          end: {
            line: 122,
            column: 144
          }
        }, {
          start: {
            line: 122,
            column: 147
          },
          end: {
            line: 122,
            column: 160
          }
        }],
        line: 122
      },
      "11": {
        loc: {
          start: {
            line: 135,
            column: 64
          },
          end: {
            line: 135,
            column: 121
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 135,
            column: 89
          },
          end: {
            line: 135,
            column: 94
          }
        }, {
          start: {
            line: 135,
            column: 97
          },
          end: {
            line: 135,
            column: 121
          }
        }],
        line: 135
      },
      "12": {
        loc: {
          start: {
            line: 138,
            column: 24
          },
          end: {
            line: 138,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 138,
            column: 49
          },
          end: {
            line: 138,
            column: 76
          }
        }, {
          start: {
            line: 138,
            column: 79
          },
          end: {
            line: 138,
            column: 81
          }
        }],
        line: 138
      },
      "13": {
        loc: {
          start: {
            line: 139,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 139,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        }, {
          start: {
            line: 142,
            column: 13
          },
          end: {
            line: 150,
            column: 9
          }
        }],
        line: 139
      },
      "14": {
        loc: {
          start: {
            line: 139,
            column: 12
          },
          end: {
            line: 139,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 139,
            column: 12
          },
          end: {
            line: 139,
            column: 37
          }
        }, {
          start: {
            line: 139,
            column: 41
          },
          end: {
            line: 139,
            column: 71
          }
        }],
        line: 139
      },
      "15": {
        loc: {
          start: {
            line: 142,
            column: 13
          },
          end: {
            line: 150,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 13
          },
          end: {
            line: 150,
            column: 9
          }
        }, {
          start: {
            line: 145,
            column: 13
          },
          end: {
            line: 150,
            column: 9
          }
        }],
        line: 142
      },
      "16": {
        loc: {
          start: {
            line: 142,
            column: 17
          },
          end: {
            line: 142,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 142,
            column: 17
          },
          end: {
            line: 142,
            column: 51
          }
        }, {
          start: {
            line: 142,
            column: 55
          },
          end: {
            line: 142,
            column: 87
          }
        }],
        line: 142
      },
      "17": {
        loc: {
          start: {
            line: 145,
            column: 13
          },
          end: {
            line: 150,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 13
          },
          end: {
            line: 150,
            column: 9
          }
        }, {
          start: {
            line: 148,
            column: 13
          },
          end: {
            line: 150,
            column: 9
          }
        }],
        line: 145
      },
      "18": {
        loc: {
          start: {
            line: 148,
            column: 13
          },
          end: {
            line: 150,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 148,
            column: 13
          },
          end: {
            line: 150,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 148
      },
      "19": {
        loc: {
          start: {
            line: 148,
            column: 17
          },
          end: {
            line: 148,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 148,
            column: 17
          },
          end: {
            line: 148,
            column: 42
          }
        }, {
          start: {
            line: 148,
            column: 46
          },
          end: {
            line: 148,
            column: 72
          }
        }],
        line: 148
      },
      "20": {
        loc: {
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 157,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 157,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 154
      },
      "21": {
        loc: {
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 154,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 154,
            column: 31
          }
        }, {
          start: {
            line: 154,
            column: 35
          },
          end: {
            line: 154,
            column: 55
          }
        }],
        line: 154
      },
      "22": {
        loc: {
          start: {
            line: 168,
            column: 16
          },
          end: {
            line: 168,
            column: 53
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 168,
            column: 26
          },
          end: {
            line: 168,
            column: 33
          }
        }, {
          start: {
            line: 168,
            column: 36
          },
          end: {
            line: 168,
            column: 53
          }
        }],
        line: 168
      },
      "23": {
        loc: {
          start: {
            line: 171,
            column: 16
          },
          end: {
            line: 171,
            column: 35
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 171,
            column: 26
          },
          end: {
            line: 171,
            column: 29
          }
        }, {
          start: {
            line: 171,
            column: 32
          },
          end: {
            line: 171,
            column: 35
          }
        }],
        line: 171
      },
      "24": {
        loc: {
          start: {
            line: 177,
            column: 4
          },
          end: {
            line: 178,
            column: 27
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 177,
            column: 4
          },
          end: {
            line: 178,
            column: 27
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 177
      },
      "25": {
        loc: {
          start: {
            line: 179,
            column: 4
          },
          end: {
            line: 180,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 4
          },
          end: {
            line: 180,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 179
      },
      "26": {
        loc: {
          start: {
            line: 186,
            column: 4
          },
          end: {
            line: 187,
            column: 48
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 186,
            column: 4
          },
          end: {
            line: 187,
            column: 48
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 186
      },
      "27": {
        loc: {
          start: {
            line: 186,
            column: 8
          },
          end: {
            line: 186,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 186,
            column: 62
          },
          end: {
            line: 186,
            column: 68
          }
        }, {
          start: {
            line: 186,
            column: 71
          },
          end: {
            line: 186,
            column: 87
          }
        }],
        line: 186
      },
      "28": {
        loc: {
          start: {
            line: 186,
            column: 8
          },
          end: {
            line: 186,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 186,
            column: 8
          },
          end: {
            line: 186,
            column: 42
          }
        }, {
          start: {
            line: 186,
            column: 46
          },
          end: {
            line: 186,
            column: 59
          }
        }],
        line: 186
      },
      "29": {
        loc: {
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 193,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 193,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 188
      },
      "30": {
        loc: {
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 188,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 188,
            column: 25
          }
        }, {
          start: {
            line: 188,
            column: 29
          },
          end: {
            line: 188,
            column: 57
          }
        }],
        line: 188
      },
      "31": {
        loc: {
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 192,
            column: 32
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 192,
            column: 32
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/app/api/voice/conversation/route.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/app/api/voice/conversation/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { migrationOpenAIClient } from '@/lib/azure-ai-foundry/clients/migration-wrapper';\nimport { azureOpenAIServiceServer } from '@/azure/lib/services/azure-openai-service-server';\nimport { logger } from '@/lib/utils/logger';\nimport { InterviewContext } from '@/lib/voice/azure-adapters';\nimport { ErrorCode, createErrorResponse, getHTTPStatusFromErrorCode } from '@/lib/utils/structured-errors';\n\ninterface ConversationRequest {\n  action: 'start' | 'process' | 'summary';\n  interviewContext?: InterviewContext;\n  userTranscript?: string;\n}\n\n/**\n * Azure OpenAI Conversation API Endpoint\n * Handles interview conversation flow using Azure OpenAI\n */\nexport async function POST(request: NextRequest) {\n    try {\n      const body: ConversationRequest = await request.json();\n      const { action } = body;\n\n      logger.api.request('POST /api/voice/conversation', `Action: ${action}`);\n      console.log('\uD83C\uDFAF [CONVERSATION API] Processing request', { action, timestamp: new Date().toISOString() });\n\n      // Initialize Azure OpenAI service if needed\n      if (!azureOpenAIServiceServer.isReady()) {\n        console.log('\uD83D\uDD27 [CONVERSATION API] Initializing Azure OpenAI service...');\n        const initialized = await azureOpenAIServiceServer.initialize();\n        if (!initialized) {\n          console.error('\u274C [CONVERSATION API] Failed to initialize Azure OpenAI service');\n          logger.error('Failed to initialize Azure OpenAI service');\n          const err = createErrorResponse(ErrorCode.SERVICE_UNAVAILABLE, { service: 'azure-openai' }, 'AI service unavailable');\n          const status = getHTTPStatusFromErrorCode(err.error.code);\n          const res = NextResponse.json(err, { status });\n          if (err.error.retryable && err.error.retryAfter) {\n            res.headers.set('Retry-After', String(err.error.retryAfter));\n            res.headers.set('X-Retry-After', String(err.error.retryAfter));\n          }\n          return res;\n        }\n        console.log('\u2705 [CONVERSATION API] Azure OpenAI service initialized successfully');\n      }\n\n      switch (action) {\n        case 'start': {\n          const { interviewContext } = body;\n          if (!interviewContext) {\n            const err = createErrorResponse(\n              ErrorCode.MISSING_REQUIRED_FIELD,\n              { field: 'interviewContext' },\n              'Interview context required for start action'\n            );\n            return NextResponse.json(err, { status: getHTTPStatusFromErrorCode(err.error.code) });\n          }\n\n          // Set interview context in the service\n          azureOpenAIServiceServer.setInterviewContext({\n            type: mapInterviewType(interviewContext.type),\n            position: extractJobRole(interviewContext),\n            company: extractCompanyName(interviewContext),\n            difficulty: 'medium', // Default difficulty\n            preliminaryCollected: false,\n            currentQuestionCount: 0,\n            maxQuestions: 10\n          });\n\n          // Start the interview conversation\n          const response = await azureOpenAIServiceServer.startInterviewConversation();\n          \n          logger.api.response('POST /api/voice/conversation', 200, {\n            action: 'start',\n            questionNumber: response.questionNumber,\n            isComplete: response.isComplete\n          });\n\n          return NextResponse.json({\n            message: response.content,\n            questionNumber: response.questionNumber,\n            isComplete: response.isComplete,\n            hasAudio: false, // TTS will be handled separately\n            followUpSuggestions: response.followUpSuggestions\n          });\n        }\n\n        case 'process': {\n          const { userTranscript } = body;\n          if (!userTranscript || !userTranscript.trim()) {\n            console.warn('\uD83D\uDCDD [CONVERSATION API] Empty transcript received');\n            const err = createErrorResponse(\n              ErrorCode.MISSING_REQUIRED_FIELD,\n              { field: 'userTranscript' },\n              'User transcript required for process action'\n            );\n            return NextResponse.json(err, { status: getHTTPStatusFromErrorCode(err.error.code) });\n          }\n\n          console.log('\uD83E\uDDEA [CONVERSATION API] Processing user transcript', {\n            length: userTranscript.trim().length,\n            preview: userTranscript.trim().substring(0, 50) + '...'\n          });\n\n          try {\n            // Process user response and get AI reply\n            const response = await azureOpenAIServiceServer.processUserResponse(userTranscript.trim());\n\n            console.log('\u2705 [CONVERSATION API] Successfully processed response', {\n              contentLength: response.content?.length,\n              questionNumber: response.questionNumber,\n              isComplete: response.isComplete\n            });\n\n            logger.api.response('POST /api/voice/conversation', 200, {\n              action: 'process',\n              questionNumber: response.questionNumber,\n              isComplete: response.isComplete,\n              transcriptLength: userTranscript.length\n            });\n\n            return NextResponse.json({\n              message: response.content,\n              questionNumber: response.questionNumber,\n              isComplete: response.isComplete,\n              hasAudio: false, // TTS will be handled separately\n              followUpSuggestions: response.followUpSuggestions\n            });\n          } catch (processError) {\n            console.error('\u274C [CONVERSATION API] Process user response failed:', processError);\n            throw processError; // Re-throw to be caught by outer error handler\n          }\n        }\n\n        case 'summary': {\n          try {\n            // Generate interview summary\n            const summary = await azureOpenAIServiceServer.generateInterviewSummary();\n\n            logger.api.response('POST /api/voice/conversation', 200, {\n              action: 'summary',\n              hasSummary: !!summary\n            });\n\n            return NextResponse.json({\n              summary,\n              conversationHistory: azureOpenAIServiceServer.getConversationHistory()\n            });\n          } catch (error) {\n            logger.warn('Failed to generate summary, returning empty response', { error: error instanceof Error ? error.message : String(error) });\n            return NextResponse.json({\n              summary: null,\n              error: 'Summary generation failed'\n            });\n          }\n        }\n\n        default:\n          const err = createErrorResponse(\n            ErrorCode.INVALID_PARAMETER,\n            { action },\n            `Invalid action: ${action}`\n          );\n          return NextResponse.json(err, { status: getHTTPStatusFromErrorCode(err.error.code) });\n      }\n\n    } catch (error) {\n      logger.error('Conversation processing failed', error instanceof Error ? error : new Error(String(error)));\n\n      // Provide helpful structured error responses\n      let code: ErrorCode = ErrorCode.INTERNAL_SERVER_ERROR;\n      const message = error instanceof Error ? error.message.toLowerCase() : '';\n\n      if (message.includes('quota') || message.includes('rate limit')) {\n        code = ErrorCode.RATE_LIMIT_EXCEEDED;\n      } else if (message.includes('authentication') || message.includes('unauthorized')) {\n        code = ErrorCode.AUTH_TOKEN_INVALID;\n      } else if (message.includes('timeout')) {\n        code = ErrorCode.SERVICE_TIMEOUT;\n      } else if (message.includes('azure') || message.includes('openai')) {\n        code = ErrorCode.AZURE_OPENAI_ERROR;\n      }\n\n      const err = createErrorResponse(code, { context: 'voice.conversation' });\n      const status = getHTTPStatusFromErrorCode(code);\n      const res = NextResponse.json(err, { status });\n      if (err.error.retryable && err.error.retryAfter) {\n        res.headers.set('Retry-After', String(err.error.retryAfter));\n        res.headers.set('X-Retry-After', String(err.error.retryAfter));\n      }\n      return res;\n    }\n}\n\n/**\n * Health check endpoint for conversation service\n */\nexport async function GET() {\n  const isReady = azureOpenAIServiceServer.isReady();\n  \n  return NextResponse.json({\n    service: 'Azure OpenAI Conversation',\n    status: isReady ? 'ready' : 'not_initialized',\n    timestamp: new Date().toISOString()\n  }, { \n    status: isReady ? 200 : 503 \n  });\n}\n\n// Helper functions\nfunction mapInterviewType(type: string): 'technical' | 'behavioral' | 'general' {\n  const normalizedType = type.toLowerCase();\n  if (normalizedType.includes('technical')) return 'technical';\n  if (normalizedType.includes('behavioral')) return 'behavioral';\n  return 'general';\n}\n\nfunction extractJobRole(context: InterviewContext): string | undefined {\n  // Try to extract job role from various sources\n  if (context.resumeInfo?.candidateName) return context.resumeInfo.candidateName;\n  if (context.questions && context.questions.length > 0) {\n    // Look for role mentions in questions\n    const roleMatch = context.questions[0].match(/(\\w+\\s+\\w+)\\s+(developer|engineer|manager|analyst|designer)/i);\n    if (roleMatch) return roleMatch[0];\n  }\n  return undefined;\n}\n\nfunction extractCompanyName(context: InterviewContext): string | undefined {\n  // Extract company name from context if available\n  // This could be enhanced to parse from resume info or questions\n  return undefined;\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "077c24c53a924d4a3646a3d39aa0a12b159aec57"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1xgbq53d1t = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1xgbq53d1t();
cov_1xgbq53d1t().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1xgbq53d1t().s[1]++;
exports.POST = POST;
/* istanbul ignore next */
cov_1xgbq53d1t().s[2]++;
exports.GET = GET;
const server_1 =
/* istanbul ignore next */
(cov_1xgbq53d1t().s[3]++, require("next/server"));
const azure_openai_service_server_1 =
/* istanbul ignore next */
(cov_1xgbq53d1t().s[4]++, require("@/azure/lib/services/azure-openai-service-server"));
const logger_1 =
/* istanbul ignore next */
(cov_1xgbq53d1t().s[5]++, require("@/lib/utils/logger"));
const structured_errors_1 =
/* istanbul ignore next */
(cov_1xgbq53d1t().s[6]++, require("@/lib/utils/structured-errors"));
/**
 * Azure OpenAI Conversation API Endpoint
 * Handles interview conversation flow using Azure OpenAI
 */
async function POST(request) {
  /* istanbul ignore next */
  cov_1xgbq53d1t().f[0]++;
  var _a;
  /* istanbul ignore next */
  cov_1xgbq53d1t().s[7]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_1xgbq53d1t().s[8]++, await request.json());
    const {
      action
    } =
    /* istanbul ignore next */
    (cov_1xgbq53d1t().s[9]++, body);
    /* istanbul ignore next */
    cov_1xgbq53d1t().s[10]++;
    logger_1.logger.api.request('POST /api/voice/conversation', `Action: ${action}`);
    /* istanbul ignore next */
    cov_1xgbq53d1t().s[11]++;
    console.log('🎯 [CONVERSATION API] Processing request', {
      action,
      timestamp: new Date().toISOString()
    });
    // Initialize Azure OpenAI service if needed
    /* istanbul ignore next */
    cov_1xgbq53d1t().s[12]++;
    if (!azure_openai_service_server_1.azureOpenAIServiceServer.isReady()) {
      /* istanbul ignore next */
      cov_1xgbq53d1t().b[0][0]++;
      cov_1xgbq53d1t().s[13]++;
      console.log('🔧 [CONVERSATION API] Initializing Azure OpenAI service...');
      const initialized =
      /* istanbul ignore next */
      (cov_1xgbq53d1t().s[14]++, await azure_openai_service_server_1.azureOpenAIServiceServer.initialize());
      /* istanbul ignore next */
      cov_1xgbq53d1t().s[15]++;
      if (!initialized) {
        /* istanbul ignore next */
        cov_1xgbq53d1t().b[1][0]++;
        cov_1xgbq53d1t().s[16]++;
        console.error('❌ [CONVERSATION API] Failed to initialize Azure OpenAI service');
        /* istanbul ignore next */
        cov_1xgbq53d1t().s[17]++;
        logger_1.logger.error('Failed to initialize Azure OpenAI service');
        const err =
        /* istanbul ignore next */
        (cov_1xgbq53d1t().s[18]++, (0, structured_errors_1.createErrorResponse)(structured_errors_1.ErrorCode.SERVICE_UNAVAILABLE, {
          service: 'azure-openai'
        }, 'AI service unavailable'));
        const status =
        /* istanbul ignore next */
        (cov_1xgbq53d1t().s[19]++, (0, structured_errors_1.getHTTPStatusFromErrorCode)(err.error.code));
        const res =
        /* istanbul ignore next */
        (cov_1xgbq53d1t().s[20]++, server_1.NextResponse.json(err, {
          status
        }));
        /* istanbul ignore next */
        cov_1xgbq53d1t().s[21]++;
        if (
        /* istanbul ignore next */
        (cov_1xgbq53d1t().b[3][0]++, err.error.retryable) &&
        /* istanbul ignore next */
        (cov_1xgbq53d1t().b[3][1]++, err.error.retryAfter)) {
          /* istanbul ignore next */
          cov_1xgbq53d1t().b[2][0]++;
          cov_1xgbq53d1t().s[22]++;
          res.headers.set('Retry-After', String(err.error.retryAfter));
          /* istanbul ignore next */
          cov_1xgbq53d1t().s[23]++;
          res.headers.set('X-Retry-After', String(err.error.retryAfter));
        } else
        /* istanbul ignore next */
        {
          cov_1xgbq53d1t().b[2][1]++;
        }
        cov_1xgbq53d1t().s[24]++;
        return res;
      } else
      /* istanbul ignore next */
      {
        cov_1xgbq53d1t().b[1][1]++;
      }
      cov_1xgbq53d1t().s[25]++;
      console.log('✅ [CONVERSATION API] Azure OpenAI service initialized successfully');
    } else
    /* istanbul ignore next */
    {
      cov_1xgbq53d1t().b[0][1]++;
    }
    cov_1xgbq53d1t().s[26]++;
    switch (action) {
      case 'start':
        /* istanbul ignore next */
        cov_1xgbq53d1t().b[4][0]++;
        {
          const {
            interviewContext
          } =
          /* istanbul ignore next */
          (cov_1xgbq53d1t().s[27]++, body);
          /* istanbul ignore next */
          cov_1xgbq53d1t().s[28]++;
          if (!interviewContext) {
            /* istanbul ignore next */
            cov_1xgbq53d1t().b[5][0]++;
            const err =
            /* istanbul ignore next */
            (cov_1xgbq53d1t().s[29]++, (0, structured_errors_1.createErrorResponse)(structured_errors_1.ErrorCode.MISSING_REQUIRED_FIELD, {
              field: 'interviewContext'
            }, 'Interview context required for start action'));
            /* istanbul ignore next */
            cov_1xgbq53d1t().s[30]++;
            return server_1.NextResponse.json(err, {
              status: (0, structured_errors_1.getHTTPStatusFromErrorCode)(err.error.code)
            });
          } else
          /* istanbul ignore next */
          {
            cov_1xgbq53d1t().b[5][1]++;
          }
          // Set interview context in the service
          cov_1xgbq53d1t().s[31]++;
          azure_openai_service_server_1.azureOpenAIServiceServer.setInterviewContext({
            type: mapInterviewType(interviewContext.type),
            position: extractJobRole(interviewContext),
            company: extractCompanyName(interviewContext),
            difficulty: 'medium',
            // Default difficulty
            preliminaryCollected: false,
            currentQuestionCount: 0,
            maxQuestions: 10
          });
          // Start the interview conversation
          const response =
          /* istanbul ignore next */
          (cov_1xgbq53d1t().s[32]++, await azure_openai_service_server_1.azureOpenAIServiceServer.startInterviewConversation());
          /* istanbul ignore next */
          cov_1xgbq53d1t().s[33]++;
          logger_1.logger.api.response('POST /api/voice/conversation', 200, {
            action: 'start',
            questionNumber: response.questionNumber,
            isComplete: response.isComplete
          });
          /* istanbul ignore next */
          cov_1xgbq53d1t().s[34]++;
          return server_1.NextResponse.json({
            message: response.content,
            questionNumber: response.questionNumber,
            isComplete: response.isComplete,
            hasAudio: false,
            // TTS will be handled separately
            followUpSuggestions: response.followUpSuggestions
          });
        }
      case 'process':
        /* istanbul ignore next */
        cov_1xgbq53d1t().b[4][1]++;
        {
          const {
            userTranscript
          } =
          /* istanbul ignore next */
          (cov_1xgbq53d1t().s[35]++, body);
          /* istanbul ignore next */
          cov_1xgbq53d1t().s[36]++;
          if (
          /* istanbul ignore next */
          (cov_1xgbq53d1t().b[7][0]++, !userTranscript) ||
          /* istanbul ignore next */
          (cov_1xgbq53d1t().b[7][1]++, !userTranscript.trim())) {
            /* istanbul ignore next */
            cov_1xgbq53d1t().b[6][0]++;
            cov_1xgbq53d1t().s[37]++;
            console.warn('📝 [CONVERSATION API] Empty transcript received');
            const err =
            /* istanbul ignore next */
            (cov_1xgbq53d1t().s[38]++, (0, structured_errors_1.createErrorResponse)(structured_errors_1.ErrorCode.MISSING_REQUIRED_FIELD, {
              field: 'userTranscript'
            }, 'User transcript required for process action'));
            /* istanbul ignore next */
            cov_1xgbq53d1t().s[39]++;
            return server_1.NextResponse.json(err, {
              status: (0, structured_errors_1.getHTTPStatusFromErrorCode)(err.error.code)
            });
          } else
          /* istanbul ignore next */
          {
            cov_1xgbq53d1t().b[6][1]++;
          }
          cov_1xgbq53d1t().s[40]++;
          console.log('🧪 [CONVERSATION API] Processing user transcript', {
            length: userTranscript.trim().length,
            preview: userTranscript.trim().substring(0, 50) + '...'
          });
          /* istanbul ignore next */
          cov_1xgbq53d1t().s[41]++;
          try {
            // Process user response and get AI reply
            const response =
            /* istanbul ignore next */
            (cov_1xgbq53d1t().s[42]++, await azure_openai_service_server_1.azureOpenAIServiceServer.processUserResponse(userTranscript.trim()));
            /* istanbul ignore next */
            cov_1xgbq53d1t().s[43]++;
            console.log('✅ [CONVERSATION API] Successfully processed response', {
              contentLength:
              /* istanbul ignore next */
              (cov_1xgbq53d1t().b[9][0]++, (_a = response.content) === null) ||
              /* istanbul ignore next */
              (cov_1xgbq53d1t().b[9][1]++, _a === void 0) ?
              /* istanbul ignore next */
              (cov_1xgbq53d1t().b[8][0]++, void 0) :
              /* istanbul ignore next */
              (cov_1xgbq53d1t().b[8][1]++, _a.length),
              questionNumber: response.questionNumber,
              isComplete: response.isComplete
            });
            /* istanbul ignore next */
            cov_1xgbq53d1t().s[44]++;
            logger_1.logger.api.response('POST /api/voice/conversation', 200, {
              action: 'process',
              questionNumber: response.questionNumber,
              isComplete: response.isComplete,
              transcriptLength: userTranscript.length
            });
            /* istanbul ignore next */
            cov_1xgbq53d1t().s[45]++;
            return server_1.NextResponse.json({
              message: response.content,
              questionNumber: response.questionNumber,
              isComplete: response.isComplete,
              hasAudio: false,
              // TTS will be handled separately
              followUpSuggestions: response.followUpSuggestions
            });
          } catch (processError) {
            /* istanbul ignore next */
            cov_1xgbq53d1t().s[46]++;
            console.error('❌ [CONVERSATION API] Process user response failed:', processError);
            /* istanbul ignore next */
            cov_1xgbq53d1t().s[47]++;
            throw processError; // Re-throw to be caught by outer error handler
          }
        }
      case 'summary':
        /* istanbul ignore next */
        cov_1xgbq53d1t().b[4][2]++;
        {
          /* istanbul ignore next */
          cov_1xgbq53d1t().s[48]++;
          try {
            // Generate interview summary
            const summary =
            /* istanbul ignore next */
            (cov_1xgbq53d1t().s[49]++, await azure_openai_service_server_1.azureOpenAIServiceServer.generateInterviewSummary());
            /* istanbul ignore next */
            cov_1xgbq53d1t().s[50]++;
            logger_1.logger.api.response('POST /api/voice/conversation', 200, {
              action: 'summary',
              hasSummary: !!summary
            });
            /* istanbul ignore next */
            cov_1xgbq53d1t().s[51]++;
            return server_1.NextResponse.json({
              summary,
              conversationHistory: azure_openai_service_server_1.azureOpenAIServiceServer.getConversationHistory()
            });
          } catch (error) {
            /* istanbul ignore next */
            cov_1xgbq53d1t().s[52]++;
            logger_1.logger.warn('Failed to generate summary, returning empty response', {
              error: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1xgbq53d1t().b[10][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1xgbq53d1t().b[10][1]++, String(error))
            });
            /* istanbul ignore next */
            cov_1xgbq53d1t().s[53]++;
            return server_1.NextResponse.json({
              summary: null,
              error: 'Summary generation failed'
            });
          }
        }
      default:
        /* istanbul ignore next */
        cov_1xgbq53d1t().b[4][3]++;
        const err =
        /* istanbul ignore next */
        (cov_1xgbq53d1t().s[54]++, (0, structured_errors_1.createErrorResponse)(structured_errors_1.ErrorCode.INVALID_PARAMETER, {
          action
        }, `Invalid action: ${action}`));
        /* istanbul ignore next */
        cov_1xgbq53d1t().s[55]++;
        return server_1.NextResponse.json(err, {
          status: (0, structured_errors_1.getHTTPStatusFromErrorCode)(err.error.code)
        });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1xgbq53d1t().s[56]++;
    logger_1.logger.error('Conversation processing failed', error instanceof Error ?
    /* istanbul ignore next */
    (cov_1xgbq53d1t().b[11][0]++, error) :
    /* istanbul ignore next */
    (cov_1xgbq53d1t().b[11][1]++, new Error(String(error))));
    // Provide helpful structured error responses
    let code =
    /* istanbul ignore next */
    (cov_1xgbq53d1t().s[57]++, structured_errors_1.ErrorCode.INTERNAL_SERVER_ERROR);
    const message =
    /* istanbul ignore next */
    (cov_1xgbq53d1t().s[58]++, error instanceof Error ?
    /* istanbul ignore next */
    (cov_1xgbq53d1t().b[12][0]++, error.message.toLowerCase()) :
    /* istanbul ignore next */
    (cov_1xgbq53d1t().b[12][1]++, ''));
    /* istanbul ignore next */
    cov_1xgbq53d1t().s[59]++;
    if (
    /* istanbul ignore next */
    (cov_1xgbq53d1t().b[14][0]++, message.includes('quota')) ||
    /* istanbul ignore next */
    (cov_1xgbq53d1t().b[14][1]++, message.includes('rate limit'))) {
      /* istanbul ignore next */
      cov_1xgbq53d1t().b[13][0]++;
      cov_1xgbq53d1t().s[60]++;
      code = structured_errors_1.ErrorCode.RATE_LIMIT_EXCEEDED;
    } else {
      /* istanbul ignore next */
      cov_1xgbq53d1t().b[13][1]++;
      cov_1xgbq53d1t().s[61]++;
      if (
      /* istanbul ignore next */
      (cov_1xgbq53d1t().b[16][0]++, message.includes('authentication')) ||
      /* istanbul ignore next */
      (cov_1xgbq53d1t().b[16][1]++, message.includes('unauthorized'))) {
        /* istanbul ignore next */
        cov_1xgbq53d1t().b[15][0]++;
        cov_1xgbq53d1t().s[62]++;
        code = structured_errors_1.ErrorCode.AUTH_TOKEN_INVALID;
      } else {
        /* istanbul ignore next */
        cov_1xgbq53d1t().b[15][1]++;
        cov_1xgbq53d1t().s[63]++;
        if (message.includes('timeout')) {
          /* istanbul ignore next */
          cov_1xgbq53d1t().b[17][0]++;
          cov_1xgbq53d1t().s[64]++;
          code = structured_errors_1.ErrorCode.SERVICE_TIMEOUT;
        } else {
          /* istanbul ignore next */
          cov_1xgbq53d1t().b[17][1]++;
          cov_1xgbq53d1t().s[65]++;
          if (
          /* istanbul ignore next */
          (cov_1xgbq53d1t().b[19][0]++, message.includes('azure')) ||
          /* istanbul ignore next */
          (cov_1xgbq53d1t().b[19][1]++, message.includes('openai'))) {
            /* istanbul ignore next */
            cov_1xgbq53d1t().b[18][0]++;
            cov_1xgbq53d1t().s[66]++;
            code = structured_errors_1.ErrorCode.AZURE_OPENAI_ERROR;
          } else
          /* istanbul ignore next */
          {
            cov_1xgbq53d1t().b[18][1]++;
          }
        }
      }
    }
    const err =
    /* istanbul ignore next */
    (cov_1xgbq53d1t().s[67]++, (0, structured_errors_1.createErrorResponse)(code, {
      context: 'voice.conversation'
    }));
    const status =
    /* istanbul ignore next */
    (cov_1xgbq53d1t().s[68]++, (0, structured_errors_1.getHTTPStatusFromErrorCode)(code));
    const res =
    /* istanbul ignore next */
    (cov_1xgbq53d1t().s[69]++, server_1.NextResponse.json(err, {
      status
    }));
    /* istanbul ignore next */
    cov_1xgbq53d1t().s[70]++;
    if (
    /* istanbul ignore next */
    (cov_1xgbq53d1t().b[21][0]++, err.error.retryable) &&
    /* istanbul ignore next */
    (cov_1xgbq53d1t().b[21][1]++, err.error.retryAfter)) {
      /* istanbul ignore next */
      cov_1xgbq53d1t().b[20][0]++;
      cov_1xgbq53d1t().s[71]++;
      res.headers.set('Retry-After', String(err.error.retryAfter));
      /* istanbul ignore next */
      cov_1xgbq53d1t().s[72]++;
      res.headers.set('X-Retry-After', String(err.error.retryAfter));
    } else
    /* istanbul ignore next */
    {
      cov_1xgbq53d1t().b[20][1]++;
    }
    cov_1xgbq53d1t().s[73]++;
    return res;
  }
}
/**
 * Health check endpoint for conversation service
 */
async function GET() {
  /* istanbul ignore next */
  cov_1xgbq53d1t().f[1]++;
  const isReady =
  /* istanbul ignore next */
  (cov_1xgbq53d1t().s[74]++, azure_openai_service_server_1.azureOpenAIServiceServer.isReady());
  /* istanbul ignore next */
  cov_1xgbq53d1t().s[75]++;
  return server_1.NextResponse.json({
    service: 'Azure OpenAI Conversation',
    status: isReady ?
    /* istanbul ignore next */
    (cov_1xgbq53d1t().b[22][0]++, 'ready') :
    /* istanbul ignore next */
    (cov_1xgbq53d1t().b[22][1]++, 'not_initialized'),
    timestamp: new Date().toISOString()
  }, {
    status: isReady ?
    /* istanbul ignore next */
    (cov_1xgbq53d1t().b[23][0]++, 200) :
    /* istanbul ignore next */
    (cov_1xgbq53d1t().b[23][1]++, 503)
  });
}
// Helper functions
function mapInterviewType(type) {
  /* istanbul ignore next */
  cov_1xgbq53d1t().f[2]++;
  const normalizedType =
  /* istanbul ignore next */
  (cov_1xgbq53d1t().s[76]++, type.toLowerCase());
  /* istanbul ignore next */
  cov_1xgbq53d1t().s[77]++;
  if (normalizedType.includes('technical')) {
    /* istanbul ignore next */
    cov_1xgbq53d1t().b[24][0]++;
    cov_1xgbq53d1t().s[78]++;
    return 'technical';
  } else
  /* istanbul ignore next */
  {
    cov_1xgbq53d1t().b[24][1]++;
  }
  cov_1xgbq53d1t().s[79]++;
  if (normalizedType.includes('behavioral')) {
    /* istanbul ignore next */
    cov_1xgbq53d1t().b[25][0]++;
    cov_1xgbq53d1t().s[80]++;
    return 'behavioral';
  } else
  /* istanbul ignore next */
  {
    cov_1xgbq53d1t().b[25][1]++;
  }
  cov_1xgbq53d1t().s[81]++;
  return 'general';
}
function extractJobRole(context) {
  /* istanbul ignore next */
  cov_1xgbq53d1t().f[3]++;
  var _a;
  // Try to extract job role from various sources
  /* istanbul ignore next */
  cov_1xgbq53d1t().s[82]++;
  if (
  /* istanbul ignore next */
  (cov_1xgbq53d1t().b[28][0]++, (_a = context.resumeInfo) === null) ||
  /* istanbul ignore next */
  (cov_1xgbq53d1t().b[28][1]++, _a === void 0) ?
  /* istanbul ignore next */
  (cov_1xgbq53d1t().b[27][0]++, void 0) :
  /* istanbul ignore next */
  (cov_1xgbq53d1t().b[27][1]++, _a.candidateName)) {
    /* istanbul ignore next */
    cov_1xgbq53d1t().b[26][0]++;
    cov_1xgbq53d1t().s[83]++;
    return context.resumeInfo.candidateName;
  } else
  /* istanbul ignore next */
  {
    cov_1xgbq53d1t().b[26][1]++;
  }
  cov_1xgbq53d1t().s[84]++;
  if (
  /* istanbul ignore next */
  (cov_1xgbq53d1t().b[30][0]++, context.questions) &&
  /* istanbul ignore next */
  (cov_1xgbq53d1t().b[30][1]++, context.questions.length > 0)) {
    /* istanbul ignore next */
    cov_1xgbq53d1t().b[29][0]++;
    // Look for role mentions in questions
    const roleMatch =
    /* istanbul ignore next */
    (cov_1xgbq53d1t().s[85]++, context.questions[0].match(/(\w+\s+\w+)\s+(developer|engineer|manager|analyst|designer)/i));
    /* istanbul ignore next */
    cov_1xgbq53d1t().s[86]++;
    if (roleMatch) {
      /* istanbul ignore next */
      cov_1xgbq53d1t().b[31][0]++;
      cov_1xgbq53d1t().s[87]++;
      return roleMatch[0];
    } else
    /* istanbul ignore next */
    {
      cov_1xgbq53d1t().b[31][1]++;
    }
  } else
  /* istanbul ignore next */
  {
    cov_1xgbq53d1t().b[29][1]++;
  }
  cov_1xgbq53d1t().s[88]++;
  return undefined;
}
function extractCompanyName(context) {
  /* istanbul ignore next */
  cov_1xgbq53d1t().f[4]++;
  cov_1xgbq53d1t().s[89]++;
  // Extract company name from context if available
  // This could be enhanced to parse from resume info or questions
  return undefined;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,