407c03c8322234479f3344d5859e0a52
"use strict";

/* istanbul ignore next */
function cov_1ibl20y9gd() {
  var path = "/Users/dikshantvashistha/PrepBettr/app/api/auth/signin/route.ts";
  var hash = "3d5ba2e9a7ea7fb9a9d217f511f0038dd39645b4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/app/api/auth/signin/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 20
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 39
        }
      },
      "3": {
        start: {
          line: 5,
          column: 18
        },
        end: {
          line: 5,
          column: 41
        }
      },
      "4": {
        start: {
          line: 6,
          column: 25
        },
        end: {
          line: 6,
          column: 67
        }
      },
      "5": {
        start: {
          line: 7,
          column: 32
        },
        end: {
          line: 7,
          column: 79
        }
      },
      "6": {
        start: {
          line: 8,
          column: 28
        },
        end: {
          line: 8,
          column: 37
        }
      },
      "7": {
        start: {
          line: 9,
          column: 27
        },
        end: {
          line: 9,
          column: 43
        }
      },
      "8": {
        start: {
          line: 12,
          column: 22
        },
        end: {
          line: 12,
          column: 46
        }
      },
      "9": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 13,
          column: 176
        }
      },
      "10": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 139,
          column: 5
        }
      },
      "11": {
        start: {
          line: 15,
          column: 45
        },
        end: {
          line: 15,
          column: 65
        }
      },
      "12": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 21,
          column: 11
        }
      },
      "13": {
        start: {
          line: 23,
          column: 27
        },
        end: {
          line: 23,
          column: 34
        }
      },
      "14": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 90,
          column: 9
        }
      },
      "15": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 92
        }
      },
      "16": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 32,
          column: 15
        }
      },
      "17": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 49,
          column: 13
        }
      },
      "18": {
        start: {
          line: 34,
          column: 16
        },
        end: {
          line: 34,
          column: 86
        }
      },
      "19": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 40,
          column: 19
        }
      },
      "20": {
        start: {
          line: 43,
          column: 16
        },
        end: {
          line: 43,
          column: 105
        }
      },
      "21": {
        start: {
          line: 44,
          column: 16
        },
        end: {
          line: 48,
          column: 18
        }
      },
      "22": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 57,
          column: 13
        }
      },
      "23": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 55,
          column: 19
        }
      },
      "24": {
        start: {
          line: 56,
          column: 16
        },
        end: {
          line: 56,
          column: 119
        }
      },
      "25": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 103
        }
      },
      "26": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 63,
          column: 15
        }
      },
      "27": {
        start: {
          line: 65,
          column: 13
        },
        end: {
          line: 90,
          column: 9
        }
      },
      "28": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 78
        }
      },
      "29": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 86,
          column: 13
        }
      },
      "30": {
        start: {
          line: 69,
          column: 37
        },
        end: {
          line: 69,
          column: 130
        }
      },
      "31": {
        start: {
          line: 70,
          column: 16
        },
        end: {
          line: 78,
          column: 18
        }
      },
      "32": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 80,
          column: 50
        }
      },
      "33": {
        start: {
          line: 81,
          column: 16
        },
        end: {
          line: 81,
          column: 99
        }
      },
      "34": {
        start: {
          line: 84,
          column: 16
        },
        end: {
          line: 84,
          column: 82
        }
      },
      "35": {
        start: {
          line: 85,
          column: 16
        },
        end: {
          line: 85,
          column: 107
        }
      },
      "36": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 120
        }
      },
      "37": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "38": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 68
        }
      },
      "39": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 99
        }
      },
      "40": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 134,
          column: 9
        }
      },
      "41": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 91
        }
      },
      "42": {
        start: {
          line: 99,
          column: 32
        },
        end: {
          line: 103,
          column: 14
        }
      },
      "43": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 84
        }
      },
      "44": {
        start: {
          line: 106,
          column: 32
        },
        end: {
          line: 106,
          column: 62
        }
      },
      "45": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 113,
          column: 15
        }
      },
      "46": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 81
        }
      },
      "47": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 129,
          column: 15
        }
      },
      "48": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 76
        }
      },
      "49": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 119
        }
      },
      "50": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 137,
          column: 48
        }
      },
      "51": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 138,
          column: 95
        }
      }
    },
    fnMap: {
      "0": {
        name: "POST",
        decl: {
          start: {
            line: 10,
            column: 15
          },
          end: {
            line: 10,
            column: 19
          }
        },
        loc: {
          start: {
            line: 10,
            column: 29
          },
          end: {
            line: 140,
            column: 1
          }
        },
        line: 10
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 13,
            column: 75
          },
          end: {
            line: 13,
            column: 172
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 144
          },
          end: {
            line: 13,
            column: 150
          }
        }, {
          start: {
            line: 13,
            column: 153
          },
          end: {
            line: 13,
            column: 172
          }
        }],
        line: 13
      },
      "1": {
        loc: {
          start: {
            line: 13,
            column: 75
          },
          end: {
            line: 13,
            column: 141
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 75
          },
          end: {
            line: 13,
            column: 124
          }
        }, {
          start: {
            line: 13,
            column: 128
          },
          end: {
            line: 13,
            column: 141
          }
        }],
        line: 13
      },
      "2": {
        loc: {
          start: {
            line: 20,
            column: 27
          },
          end: {
            line: 20,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 20,
            column: 37
          },
          end: {
            line: 20,
            column: 69
          }
        }, {
          start: {
            line: 20,
            column: 72
          },
          end: {
            line: 20,
            column: 78
          }
        }],
        line: 20
      },
      "3": {
        loc: {
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        }, {
          start: {
            line: 65,
            column: 13
          },
          end: {
            line: 90,
            column: 9
          }
        }],
        line: 24
      },
      "4": {
        loc: {
          start: {
            line: 38,
            column: 25
          },
          end: {
            line: 38,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 38,
            column: 76
          },
          end: {
            line: 38,
            column: 82
          }
        }, {
          start: {
            line: 38,
            column: 85
          },
          end: {
            line: 38,
            column: 91
          }
        }],
        line: 38
      },
      "5": {
        loc: {
          start: {
            line: 38,
            column: 25
          },
          end: {
            line: 38,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 25
          },
          end: {
            line: 38,
            column: 56
          }
        }, {
          start: {
            line: 38,
            column: 60
          },
          end: {
            line: 38,
            column: 73
          }
        }],
        line: 38
      },
      "6": {
        loc: {
          start: {
            line: 47,
            column: 27
          },
          end: {
            line: 47,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 47,
            column: 58
          },
          end: {
            line: 47,
            column: 77
          }
        }, {
          start: {
            line: 47,
            column: 80
          },
          end: {
            line: 47,
            column: 107
          }
        }],
        line: 47
      },
      "7": {
        loc: {
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 57,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 57,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "8": {
        loc: {
          start: {
            line: 50,
            column: 16
          },
          end: {
            line: 50,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 50,
            column: 16
          },
          end: {
            line: 50,
            column: 35
          }
        }, {
          start: {
            line: 50,
            column: 39
          },
          end: {
            line: 50,
            column: 55
          }
        }],
        line: 50
      },
      "9": {
        loc: {
          start: {
            line: 65,
            column: 13
          },
          end: {
            line: 90,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 13
          },
          end: {
            line: 90,
            column: 9
          }
        }, {
          start: {
            line: 88,
            column: 13
          },
          end: {
            line: 90,
            column: 9
          }
        }],
        line: 65
      },
      "10": {
        loc: {
          start: {
            line: 65,
            column: 17
          },
          end: {
            line: 65,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 65,
            column: 17
          },
          end: {
            line: 65,
            column: 22
          }
        }, {
          start: {
            line: 65,
            column: 26
          },
          end: {
            line: 65,
            column: 34
          }
        }],
        line: 65
      },
      "11": {
        loc: {
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "12": {
        loc: {
          start: {
            line: 92,
            column: 12
          },
          end: {
            line: 92,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 92,
            column: 12
          },
          end: {
            line: 92,
            column: 28
          }
        }, {
          start: {
            line: 92,
            column: 32
          },
          end: {
            line: 92,
            column: 52
          }
        }],
        line: 92
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/app/api/auth/signin/route.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/app/api/auth/signin/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { cookies } from 'next/headers';\nimport { verifyFirebaseToken } from '@/lib/middleware/authMiddleware';\nimport { firebaseUserService } from '@/lib/services/firebase-user-service';\n\nconst SESSION_COOKIE_NAME = 'session';\nconst SESSION_DURATION_S = 7 * 24 * 60 * 60; // 7 days\n\nexport async function POST(request: NextRequest) {\n  const timestamp = new Date().toISOString();\n  console.log(`\uD83D\uDD11 [${timestamp}] AUTH SIGNIN POST called - User-Agent: ${request.headers.get('user-agent')?.substring(0, 50)}`);\n  try {\n    const { email, password, idToken } = await request.json();\n    \n    console.log(`\uD83D\uDD11 [${timestamp}] Signin request details:`, {\n      hasEmail: !!email,\n      hasPassword: !!password,\n      hasIdToken: !!idToken,\n      idTokenPrefix: idToken ? idToken.substring(0, 50) + '...' : 'none'\n    });\n\n    let authResult;\n    let sessionToken = idToken;\n\n    if (idToken) {\n      // Handle Firebase ID token flow (for Google Sign-in)\n      console.log(`\uD83D\uDD10 [${timestamp}] Verifying Firebase ID token for Google Sign-in`);\n      console.log(`\uD83D\uDD10 [${timestamp}] ID Token format check:`, {\n        length: idToken.length,\n        parts: idToken.split('.').length,\n        startsCorrectly: idToken.startsWith('eyJ'),\n        preview: idToken.substring(0, 100) + '...'\n      });\n      \n      try {\n        authResult = await verifyFirebaseToken(idToken);\n        console.log(`\uD83D\uDD10 [${timestamp}] Firebase token verification result:`, {\n          success: authResult.success,\n          hasUser: !!authResult.user,\n          uid: authResult.user?.uid,\n          error: authResult.error\n        });\n      } catch (verifyError) {\n        console.error(`\uD83D\uDD10 [${timestamp}] Firebase token verification threw error:`, verifyError);\n        authResult = {\n          success: false,\n          user: null,\n          error: verifyError instanceof Error ? verifyError.message : 'Token verification failed'\n        };\n      }\n      \n      if (!authResult.success || !authResult.user) {\n        console.error(`\u274C [${timestamp}] Firebase ID token verification failed:`, {\n          error: authResult.error,\n          success: authResult.success,\n          hasUser: !!authResult.user\n        });\n        return NextResponse.json(\n          { error: `Invalid ID token: ${authResult.error}` },\n          { status: 401 }\n        );\n      }\n      \n      console.log(`\u2705 [${timestamp}] Firebase ID token verified for uid: ${authResult.user.uid}`);\n      console.log(`\u2705 [${timestamp}] Token claims:`, {\n        email: authResult.user.email,\n        name: authResult.user.name,\n        emailVerified: authResult.user.email_verified\n      });\n      \n    } else if (email && password) {\n      // Handle email/password flow with real Firebase\n      console.log(`\uD83D\uDD10 Attempting email/password sign-in for: ${email}`);\n      try {\n        const signInResult = await firebaseUserService.signInWithEmailAndPassword(email, password);\n        \n        authResult = {\n          success: true,\n          user: {\n            uid: signInResult.user.uid,\n            email: signInResult.user.email,\n            name: signInResult.user.displayName,\n            email_verified: signInResult.user.emailVerified\n          }\n        };\n\n        // Use the custom token from Firebase\n        sessionToken = signInResult.token;\n        console.log(`\u2705 Email/password sign-in successful for uid: ${authResult.user.uid}`);\n      } catch (error) {\n        console.error('\u274C Firebase email/password sign-in failed:', error);\n        return NextResponse.json(\n          { error: 'Invalid email or password' },\n          { status: 401 }\n        );\n      }\n    } else {\n      return NextResponse.json(\n        { error: 'Email and password or ID token is required' },\n        { status: 400 }\n      );\n    }\n\n    // Ensure user is properly authenticated\n    if (!authResult.user || !authResult.user.uid) {\n      console.error('\u274C Authentication failed - no user data');\n      return NextResponse.json(\n        { error: 'Authentication failed' },\n        { status: 401 }\n      );\n    }\n    \n    try {\n      // Ensure user profile exists in Firestore\n      console.log(`\uD83D\uDD0D Ensuring user profile exists for uid: ${authResult.user.uid}`);\n      const userProfile = await firebaseUserService.ensureUserProfile(authResult.user.uid, {\n        email: authResult.user.email!,\n        displayName: authResult.user.name,\n        emailVerified: authResult.user.email_verified\n      });\n      \n      console.log(`\u2705 User profile confirmed for uid: ${authResult.user.uid}`);\n      \n      // Set session cookie with the actual token\n      const cookieStore = await cookies();\n      cookieStore.set(SESSION_COOKIE_NAME, sessionToken, {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === 'production',\n        maxAge: SESSION_DURATION_S,\n        path: '/',\n        sameSite: 'lax',\n      });\n      \n      console.log(`\uD83C\uDF6A Session cookie set for uid: ${authResult.user.uid}`);\n\n      // Return user data with auth token for localStorage\n      return NextResponse.json({\n        success: true,\n        token: sessionToken, // Include token for frontend storage\n        user: {\n          uid: userProfile.uid,\n          email: userProfile.email,\n          name: userProfile.displayName,\n          email_verified: userProfile.emailVerified,\n          plan: userProfile.plan,\n          profilePictureUrl: userProfile.profilePictureUrl,\n          createdAt: userProfile.createdAt,\n          updatedAt: userProfile.updatedAt\n        }\n      });\n      \n    } catch (profileError) {\n      console.error('\u274C Failed to handle user profile:', profileError);\n      return NextResponse.json(\n        { error: 'Failed to create or retrieve user profile' },\n        { status: 500 }\n      );\n    }\n\n  } catch (error) {\n    console.error('\u274C Signin error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3d5ba2e9a7ea7fb9a9d217f511f0038dd39645b4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ibl20y9gd = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ibl20y9gd();
cov_1ibl20y9gd().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1ibl20y9gd().s[1]++;
exports.POST = POST;
const server_1 =
/* istanbul ignore next */
(cov_1ibl20y9gd().s[2]++, require("next/server"));
const headers_1 =
/* istanbul ignore next */
(cov_1ibl20y9gd().s[3]++, require("next/headers"));
const authMiddleware_1 =
/* istanbul ignore next */
(cov_1ibl20y9gd().s[4]++, require("@/lib/middleware/authMiddleware"));
const firebase_user_service_1 =
/* istanbul ignore next */
(cov_1ibl20y9gd().s[5]++, require("@/lib/services/firebase-user-service"));
const SESSION_COOKIE_NAME =
/* istanbul ignore next */
(cov_1ibl20y9gd().s[6]++, 'session');
const SESSION_DURATION_S =
/* istanbul ignore next */
(cov_1ibl20y9gd().s[7]++, 7 * 24 * 60 * 60); // 7 days
async function POST(request) {
  /* istanbul ignore next */
  cov_1ibl20y9gd().f[0]++;
  var _a, _b;
  const timestamp =
  /* istanbul ignore next */
  (cov_1ibl20y9gd().s[8]++, new Date().toISOString());
  /* istanbul ignore next */
  cov_1ibl20y9gd().s[9]++;
  console.log(`🔑 [${timestamp}] AUTH SIGNIN POST called - User-Agent: ${
  /* istanbul ignore next */
  (cov_1ibl20y9gd().b[1][0]++, (_a = request.headers.get('user-agent')) === null) ||
  /* istanbul ignore next */
  (cov_1ibl20y9gd().b[1][1]++, _a === void 0) ?
  /* istanbul ignore next */
  (cov_1ibl20y9gd().b[0][0]++, void 0) :
  /* istanbul ignore next */
  (cov_1ibl20y9gd().b[0][1]++, _a.substring(0, 50))}`);
  /* istanbul ignore next */
  cov_1ibl20y9gd().s[10]++;
  try {
    const {
      email,
      password,
      idToken
    } =
    /* istanbul ignore next */
    (cov_1ibl20y9gd().s[11]++, await request.json());
    /* istanbul ignore next */
    cov_1ibl20y9gd().s[12]++;
    console.log(`🔑 [${timestamp}] Signin request details:`, {
      hasEmail: !!email,
      hasPassword: !!password,
      hasIdToken: !!idToken,
      idTokenPrefix: idToken ?
      /* istanbul ignore next */
      (cov_1ibl20y9gd().b[2][0]++, idToken.substring(0, 50) + '...') :
      /* istanbul ignore next */
      (cov_1ibl20y9gd().b[2][1]++, 'none')
    });
    let authResult;
    let sessionToken =
    /* istanbul ignore next */
    (cov_1ibl20y9gd().s[13]++, idToken);
    /* istanbul ignore next */
    cov_1ibl20y9gd().s[14]++;
    if (idToken) {
      /* istanbul ignore next */
      cov_1ibl20y9gd().b[3][0]++;
      cov_1ibl20y9gd().s[15]++;
      // Handle Firebase ID token flow (for Google Sign-in)
      console.log(`🔐 [${timestamp}] Verifying Firebase ID token for Google Sign-in`);
      /* istanbul ignore next */
      cov_1ibl20y9gd().s[16]++;
      console.log(`🔐 [${timestamp}] ID Token format check:`, {
        length: idToken.length,
        parts: idToken.split('.').length,
        startsCorrectly: idToken.startsWith('eyJ'),
        preview: idToken.substring(0, 100) + '...'
      });
      /* istanbul ignore next */
      cov_1ibl20y9gd().s[17]++;
      try {
        /* istanbul ignore next */
        cov_1ibl20y9gd().s[18]++;
        authResult = await (0, authMiddleware_1.verifyFirebaseToken)(idToken);
        /* istanbul ignore next */
        cov_1ibl20y9gd().s[19]++;
        console.log(`🔐 [${timestamp}] Firebase token verification result:`, {
          success: authResult.success,
          hasUser: !!authResult.user,
          uid:
          /* istanbul ignore next */
          (cov_1ibl20y9gd().b[5][0]++, (_b = authResult.user) === null) ||
          /* istanbul ignore next */
          (cov_1ibl20y9gd().b[5][1]++, _b === void 0) ?
          /* istanbul ignore next */
          (cov_1ibl20y9gd().b[4][0]++, void 0) :
          /* istanbul ignore next */
          (cov_1ibl20y9gd().b[4][1]++, _b.uid),
          error: authResult.error
        });
      } catch (verifyError) {
        /* istanbul ignore next */
        cov_1ibl20y9gd().s[20]++;
        console.error(`🔐 [${timestamp}] Firebase token verification threw error:`, verifyError);
        /* istanbul ignore next */
        cov_1ibl20y9gd().s[21]++;
        authResult = {
          success: false,
          user: null,
          error: verifyError instanceof Error ?
          /* istanbul ignore next */
          (cov_1ibl20y9gd().b[6][0]++, verifyError.message) :
          /* istanbul ignore next */
          (cov_1ibl20y9gd().b[6][1]++, 'Token verification failed')
        };
      }
      /* istanbul ignore next */
      cov_1ibl20y9gd().s[22]++;
      if (
      /* istanbul ignore next */
      (cov_1ibl20y9gd().b[8][0]++, !authResult.success) ||
      /* istanbul ignore next */
      (cov_1ibl20y9gd().b[8][1]++, !authResult.user)) {
        /* istanbul ignore next */
        cov_1ibl20y9gd().b[7][0]++;
        cov_1ibl20y9gd().s[23]++;
        console.error(`❌ [${timestamp}] Firebase ID token verification failed:`, {
          error: authResult.error,
          success: authResult.success,
          hasUser: !!authResult.user
        });
        /* istanbul ignore next */
        cov_1ibl20y9gd().s[24]++;
        return server_1.NextResponse.json({
          error: `Invalid ID token: ${authResult.error}`
        }, {
          status: 401
        });
      } else
      /* istanbul ignore next */
      {
        cov_1ibl20y9gd().b[7][1]++;
      }
      cov_1ibl20y9gd().s[25]++;
      console.log(`✅ [${timestamp}] Firebase ID token verified for uid: ${authResult.user.uid}`);
      /* istanbul ignore next */
      cov_1ibl20y9gd().s[26]++;
      console.log(`✅ [${timestamp}] Token claims:`, {
        email: authResult.user.email,
        name: authResult.user.name,
        emailVerified: authResult.user.email_verified
      });
    } else {
      /* istanbul ignore next */
      cov_1ibl20y9gd().b[3][1]++;
      cov_1ibl20y9gd().s[27]++;
      if (
      /* istanbul ignore next */
      (cov_1ibl20y9gd().b[10][0]++, email) &&
      /* istanbul ignore next */
      (cov_1ibl20y9gd().b[10][1]++, password)) {
        /* istanbul ignore next */
        cov_1ibl20y9gd().b[9][0]++;
        cov_1ibl20y9gd().s[28]++;
        // Handle email/password flow with real Firebase
        console.log(`🔐 Attempting email/password sign-in for: ${email}`);
        /* istanbul ignore next */
        cov_1ibl20y9gd().s[29]++;
        try {
          const signInResult =
          /* istanbul ignore next */
          (cov_1ibl20y9gd().s[30]++, await firebase_user_service_1.firebaseUserService.signInWithEmailAndPassword(email, password));
          /* istanbul ignore next */
          cov_1ibl20y9gd().s[31]++;
          authResult = {
            success: true,
            user: {
              uid: signInResult.user.uid,
              email: signInResult.user.email,
              name: signInResult.user.displayName,
              email_verified: signInResult.user.emailVerified
            }
          };
          // Use the custom token from Firebase
          /* istanbul ignore next */
          cov_1ibl20y9gd().s[32]++;
          sessionToken = signInResult.token;
          /* istanbul ignore next */
          cov_1ibl20y9gd().s[33]++;
          console.log(`✅ Email/password sign-in successful for uid: ${authResult.user.uid}`);
        } catch (error) {
          /* istanbul ignore next */
          cov_1ibl20y9gd().s[34]++;
          console.error('❌ Firebase email/password sign-in failed:', error);
          /* istanbul ignore next */
          cov_1ibl20y9gd().s[35]++;
          return server_1.NextResponse.json({
            error: 'Invalid email or password'
          }, {
            status: 401
          });
        }
      } else {
        /* istanbul ignore next */
        cov_1ibl20y9gd().b[9][1]++;
        cov_1ibl20y9gd().s[36]++;
        return server_1.NextResponse.json({
          error: 'Email and password or ID token is required'
        }, {
          status: 400
        });
      }
    }
    // Ensure user is properly authenticated
    /* istanbul ignore next */
    cov_1ibl20y9gd().s[37]++;
    if (
    /* istanbul ignore next */
    (cov_1ibl20y9gd().b[12][0]++, !authResult.user) ||
    /* istanbul ignore next */
    (cov_1ibl20y9gd().b[12][1]++, !authResult.user.uid)) {
      /* istanbul ignore next */
      cov_1ibl20y9gd().b[11][0]++;
      cov_1ibl20y9gd().s[38]++;
      console.error('❌ Authentication failed - no user data');
      /* istanbul ignore next */
      cov_1ibl20y9gd().s[39]++;
      return server_1.NextResponse.json({
        error: 'Authentication failed'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ibl20y9gd().b[11][1]++;
    }
    cov_1ibl20y9gd().s[40]++;
    try {
      /* istanbul ignore next */
      cov_1ibl20y9gd().s[41]++;
      // Ensure user profile exists in Firestore
      console.log(`🔍 Ensuring user profile exists for uid: ${authResult.user.uid}`);
      const userProfile =
      /* istanbul ignore next */
      (cov_1ibl20y9gd().s[42]++, await firebase_user_service_1.firebaseUserService.ensureUserProfile(authResult.user.uid, {
        email: authResult.user.email,
        displayName: authResult.user.name,
        emailVerified: authResult.user.email_verified
      }));
      /* istanbul ignore next */
      cov_1ibl20y9gd().s[43]++;
      console.log(`✅ User profile confirmed for uid: ${authResult.user.uid}`);
      // Set session cookie with the actual token
      const cookieStore =
      /* istanbul ignore next */
      (cov_1ibl20y9gd().s[44]++, await (0, headers_1.cookies)());
      /* istanbul ignore next */
      cov_1ibl20y9gd().s[45]++;
      cookieStore.set(SESSION_COOKIE_NAME, sessionToken, {
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        maxAge: SESSION_DURATION_S,
        path: '/',
        sameSite: 'lax'
      });
      /* istanbul ignore next */
      cov_1ibl20y9gd().s[46]++;
      console.log(`🍪 Session cookie set for uid: ${authResult.user.uid}`);
      // Return user data with auth token for localStorage
      /* istanbul ignore next */
      cov_1ibl20y9gd().s[47]++;
      return server_1.NextResponse.json({
        success: true,
        token: sessionToken,
        // Include token for frontend storage
        user: {
          uid: userProfile.uid,
          email: userProfile.email,
          name: userProfile.displayName,
          email_verified: userProfile.emailVerified,
          plan: userProfile.plan,
          profilePictureUrl: userProfile.profilePictureUrl,
          createdAt: userProfile.createdAt,
          updatedAt: userProfile.updatedAt
        }
      });
    } catch (profileError) {
      /* istanbul ignore next */
      cov_1ibl20y9gd().s[48]++;
      console.error('❌ Failed to handle user profile:', profileError);
      /* istanbul ignore next */
      cov_1ibl20y9gd().s[49]++;
      return server_1.NextResponse.json({
        error: 'Failed to create or retrieve user profile'
      }, {
        status: 500
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1ibl20y9gd().s[50]++;
    console.error('❌ Signin error:', error);
    /* istanbul ignore next */
    cov_1ibl20y9gd().s[51]++;
    return server_1.NextResponse.json({
      error: 'Internal server error'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,