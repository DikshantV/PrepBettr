aa96899c728e74fd6901548c324300ec
"use strict";

/**
 * Unit tests for Mock Interview Service
 * Tests cover:
 * - No duplicate titles in batch of 10 interviews
 * - All required fields are present in generated interviews
 * - Question array length is at least 5
 */
/* istanbul ignore next */
function cov_4hof8aj8b() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/services/mock-interview.service.test.ts";
  var hash = "319e990fc592d0c152641c25dfd7262e3de77eda";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/services/mock-interview.service.test.ts",
    statementMap: {
      "0": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 62
        }
      },
      "1": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 80,
          column: 4
        }
      },
      "2": {
        start: {
          line: 11,
          column: 41
        },
        end: {
          line: 80,
          column: 1
        }
      },
      "3": {
        start: {
          line: 12,
          column: 60
        },
        end: {
          line: 79,
          column: 5
        }
      },
      "4": {
        start: {
          line: 16,
          column: 34
        },
        end: {
          line: 25,
          column: 13
        }
      },
      "5": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 94
        }
      },
      "6": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 47,
          column: 13
        }
      },
      "7": {
        start: {
          line: 32,
          column: 30
        },
        end: {
          line: 43,
          column: 17
        }
      },
      "8": {
        start: {
          line: 45,
          column: 36
        },
        end: {
          line: 45,
          column: 76
        }
      },
      "9": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 46,
          column: 75
        }
      },
      "10": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 76,
          column: 13
        }
      },
      "11": {
        start: {
          line: 50,
          column: 35
        },
        end: {
          line: 61,
          column: 17
        }
      },
      "12": {
        start: {
          line: 63,
          column: 16
        },
        end: {
          line: 70,
          column: 17
        }
      },
      "13": {
        start: {
          line: 64,
          column: 20
        },
        end: {
          line: 69,
          column: 21
        }
      },
      "14": {
        start: {
          line: 65,
          column: 24
        },
        end: {
          line: 68,
          column: 28
        }
      },
      "15": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 75,
          column: 20
        }
      },
      "16": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 41
        }
      },
      "17": {
        start: {
          line: 82,
          column: 0
        },
        end: {
          line: 87,
          column: 4
        }
      },
      "18": {
        start: {
          line: 82,
          column: 32
        },
        end: {
          line: 87,
          column: 1
        }
      },
      "19": {
        start: {
          line: 83,
          column: 58
        },
        end: {
          line: 86,
          column: 5
        }
      },
      "20": {
        start: {
          line: 88,
          column: 33
        },
        end: {
          line: 88,
          column: 68
        }
      },
      "21": {
        start: {
          line: 89,
          column: 0
        },
        end: {
          line: 336,
          column: 3
        }
      },
      "22": {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 96,
          column: 7
        }
      },
      "23": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 29
        }
      },
      "24": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 70
        }
      },
      "25": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 30
        }
      },
      "26": {
        start: {
          line: 97,
          column: 4
        },
        end: {
          line: 111,
          column: 7
        }
      },
      "27": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 101,
          column: 11
        }
      },
      "28": {
        start: {
          line: 99,
          column: 27
        },
        end: {
          line: 99,
          column: 53
        }
      },
      "29": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 38
        }
      },
      "30": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 110,
          column: 11
        }
      },
      "31": {
        start: {
          line: 103,
          column: 32
        },
        end: {
          line: 103,
          column: 82
        }
      },
      "32": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 106,
          column: 16
        }
      },
      "33": {
        start: {
          line: 104,
          column: 54
        },
        end: {
          line: 106,
          column: 13
        }
      },
      "34": {
        start: {
          line: 107,
          column: 33
        },
        end: {
          line: 107,
          column: 84
        }
      },
      "35": {
        start: {
          line: 108,
          column: 27
        },
        end: {
          line: 108,
          column: 58
        }
      },
      "36": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 39
        }
      },
      "37": {
        start: {
          line: 112,
          column: 4
        },
        end: {
          line: 249,
          column: 7
        }
      },
      "38": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 115,
          column: 11
        }
      },
      "39": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 39
        }
      },
      "40": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 144,
          column: 11
        }
      },
      "41": {
        start: {
          line: 117,
          column: 30
        },
        end: {
          line: 117,
          column: 80
        }
      },
      "42": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 51
        }
      },
      "43": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 55
        }
      },
      "44": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 53
        }
      },
      "45": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 54
        }
      },
      "46": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 53
        }
      },
      "47": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 58
        }
      },
      "48": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 58
        }
      },
      "49": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 58
        }
      },
      "50": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 58
        }
      },
      "51": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 60
        }
      },
      "52": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 60
        }
      },
      "53": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 55
        }
      },
      "54": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 59
        }
      },
      "55": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 57
        }
      },
      "56": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 58
        }
      },
      "57": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 57
        }
      },
      "58": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 66
        }
      },
      "59": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 66
        }
      },
      "60": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 51
        }
      },
      "61": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 62
        }
      },
      "62": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 140,
          column: 64
        }
      },
      "63": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 64
        }
      },
      "64": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 49
        }
      },
      "65": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 162,
          column: 11
        }
      },
      "66": {
        start: {
          line: 146,
          column: 31
        },
        end: {
          line: 146,
          column: 33
        }
      },
      "67": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 151,
          column: 13
        }
      },
      "68": {
        start: {
          line: 148,
          column: 25
        },
        end: {
          line: 148,
          column: 26
        }
      },
      "69": {
        start: {
          line: 149,
          column: 34
        },
        end: {
          line: 149,
          column: 80
        }
      },
      "70": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 150,
          column: 43
        }
      },
      "71": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 161,
          column: 15
        }
      },
      "72": {
        start: {
          line: 154,
          column: 16
        },
        end: {
          line: 154,
          column: 77
        }
      },
      "73": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 155,
          column: 74
        }
      },
      "74": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 160,
          column: 19
        }
      },
      "75": {
        start: {
          line: 158,
          column: 20
        },
        end: {
          line: 158,
          column: 59
        }
      },
      "76": {
        start: {
          line: 159,
          column: 20
        },
        end: {
          line: 159,
          column: 63
        }
      },
      "77": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 180,
          column: 11
        }
      },
      "78": {
        start: {
          line: 164,
          column: 31
        },
        end: {
          line: 164,
          column: 33
        }
      },
      "79": {
        start: {
          line: 165,
          column: 30
        },
        end: {
          line: 165,
          column: 39
        }
      },
      "80": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 173,
          column: 13
        }
      },
      "81": {
        start: {
          line: 167,
          column: 25
        },
        end: {
          line: 167,
          column: 26
        }
      },
      "82": {
        start: {
          line: 168,
          column: 34
        },
        end: {
          line: 168,
          column: 80
        }
      },
      "83": {
        start: {
          line: 169,
          column: 16
        },
        end: {
          line: 169,
          column: 43
        }
      },
      "84": {
        start: {
          line: 171,
          column: 33
        },
        end: {
          line: 171,
          column: 64
        }
      },
      "85": {
        start: {
          line: 172,
          column: 16
        },
        end: {
          line: 172,
          column: 40
        }
      },
      "86": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 44
        }
      },
      "87": {
        start: {
          line: 177,
          column: 26
        },
        end: {
          line: 177,
          column: 53
        }
      },
      "88": {
        start: {
          line: 177,
          column: 46
        },
        end: {
          line: 177,
          column: 52
        }
      },
      "89": {
        start: {
          line: 178,
          column: 32
        },
        end: {
          line: 178,
          column: 46
        }
      },
      "90": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 46
        }
      },
      "91": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 192,
          column: 11
        }
      },
      "92": {
        start: {
          line: 182,
          column: 30
        },
        end: {
          line: 182,
          column: 76
        }
      },
      "93": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 66
        }
      },
      "94": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 185,
          column: 73
        }
      },
      "95": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 70
        }
      },
      "96": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 191,
          column: 15
        }
      },
      "97": {
        start: {
          line: 189,
          column: 16
        },
        end: {
          line: 189,
          column: 51
        }
      },
      "98": {
        start: {
          line: 190,
          column: 16
        },
        end: {
          line: 190,
          column: 55
        }
      },
      "99": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 210,
          column: 11
        }
      },
      "100": {
        start: {
          line: 194,
          column: 31
        },
        end: {
          line: 194,
          column: 72
        }
      },
      "101": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 199,
          column: 13
        }
      },
      "102": {
        start: {
          line: 196,
          column: 25
        },
        end: {
          line: 196,
          column: 26
        }
      },
      "103": {
        start: {
          line: 197,
          column: 34
        },
        end: {
          line: 197,
          column: 80
        }
      },
      "104": {
        start: {
          line: 198,
          column: 16
        },
        end: {
          line: 198,
          column: 45
        }
      },
      "105": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 60
        }
      },
      "106": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 61
        }
      },
      "107": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 56
        }
      },
      "108": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 209,
          column: 15
        }
      },
      "109": {
        start: {
          line: 207,
          column: 16
        },
        end: {
          line: 207,
          column: 56
        }
      },
      "110": {
        start: {
          line: 208,
          column: 16
        },
        end: {
          line: 208,
          column: 54
        }
      },
      "111": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 214,
          column: 11
        }
      },
      "112": {
        start: {
          line: 212,
          column: 30
        },
        end: {
          line: 212,
          column: 65
        }
      },
      "113": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 213,
          column: 55
        }
      },
      "114": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 227,
          column: 11
        }
      },
      "115": {
        start: {
          line: 216,
          column: 24
        },
        end: {
          line: 216,
          column: 33
        }
      },
      "116": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 220,
          column: 13
        }
      },
      "117": {
        start: {
          line: 217,
          column: 25
        },
        end: {
          line: 217,
          column: 26
        }
      },
      "118": {
        start: {
          line: 218,
          column: 34
        },
        end: {
          line: 218,
          column: 69
        }
      },
      "119": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 219,
          column: 38
        }
      },
      "120": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 38
        }
      },
      "121": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 226,
          column: 15
        }
      },
      "122": {
        start: {
          line: 225,
          column: 16
        },
        end: {
          line: 225,
          column: 59
        }
      },
      "123": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 238,
          column: 11
        }
      },
      "124": {
        start: {
          line: 229,
          column: 37
        },
        end: {
          line: 229,
          column: 91
        }
      },
      "125": {
        start: {
          line: 230,
          column: 31
        },
        end: {
          line: 230,
          column: 33
        }
      },
      "126": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 234,
          column: 13
        }
      },
      "127": {
        start: {
          line: 231,
          column: 25
        },
        end: {
          line: 231,
          column: 26
        }
      },
      "128": {
        start: {
          line: 232,
          column: 34
        },
        end: {
          line: 232,
          column: 80
        }
      },
      "129": {
        start: {
          line: 233,
          column: 16
        },
        end: {
          line: 233,
          column: 43
        }
      },
      "130": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 237,
          column: 15
        }
      },
      "131": {
        start: {
          line: 236,
          column: 16
        },
        end: {
          line: 236,
          column: 68
        }
      },
      "132": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 248,
          column: 11
        }
      },
      "133": {
        start: {
          line: 240,
          column: 27
        },
        end: {
          line: 240,
          column: 51
        }
      },
      "134": {
        start: {
          line: 241,
          column: 30
        },
        end: {
          line: 241,
          column: 65
        }
      },
      "135": {
        start: {
          line: 242,
          column: 26
        },
        end: {
          line: 242,
          column: 50
        }
      },
      "136": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 244,
          column: 88
        }
      },
      "137": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 111
        }
      },
      "138": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 247,
          column: 107
        }
      },
      "139": {
        start: {
          line: 250,
          column: 4
        },
        end: {
          line: 285,
          column: 7
        }
      },
      "140": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 253,
          column: 11
        }
      },
      "141": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 252,
          column: 39
        }
      },
      "142": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 267,
          column: 11
        }
      },
      "143": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 256,
          column: 56
        }
      },
      "144": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 257,
          column: 56
        }
      },
      "145": {
        start: {
          line: 258,
          column: 26
        },
        end: {
          line: 258,
          column: 49
        }
      },
      "146": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 259,
          column: 56
        }
      },
      "147": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 260,
          column: 61
        }
      },
      "148": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 261,
          column: 60
        }
      },
      "149": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 262,
          column: 59
        }
      },
      "150": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 63
        }
      },
      "151": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 265,
          column: 60
        }
      },
      "152": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 266,
          column: 64
        }
      },
      "153": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 284,
          column: 11
        }
      },
      "154": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 270,
          column: 56
        }
      },
      "155": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 271,
          column: 56
        }
      },
      "156": {
        start: {
          line: 273,
          column: 32
        },
        end: {
          line: 273,
          column: 55
        }
      },
      "157": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 274,
          column: 66
        }
      },
      "158": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 276,
          column: 34
        }
      },
      "159": {
        start: {
          line: 278,
          column: 31
        },
        end: {
          line: 278,
          column: 54
        }
      },
      "160": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 279,
          column: 51
        }
      },
      "161": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 280,
          column: 56
        }
      },
      "162": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 281,
          column: 55
        }
      },
      "163": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 282,
          column: 54
        }
      },
      "164": {
        start: {
          line: 283,
          column: 12
        },
        end: {
          line: 283,
          column: 58
        }
      },
      "165": {
        start: {
          line: 286,
          column: 4
        },
        end: {
          line: 308,
          column: 7
        }
      },
      "166": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 303,
          column: 11
        }
      },
      "167": {
        start: {
          line: 289,
          column: 32
        },
        end: {
          line: 289,
          column: 82
        }
      },
      "168": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 294,
          column: 16
        }
      },
      "169": {
        start: {
          line: 290,
          column: 54
        },
        end: {
          line: 294,
          column: 13
        }
      },
      "170": {
        start: {
          line: 295,
          column: 33
        },
        end: {
          line: 295,
          column: 84
        }
      },
      "171": {
        start: {
          line: 296,
          column: 12
        },
        end: {
          line: 296,
          column: 44
        }
      },
      "172": {
        start: {
          line: 298,
          column: 30
        },
        end: {
          line: 298,
          column: 81
        }
      },
      "173": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 299,
          column: 51
        }
      },
      "174": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 300,
          column: 53
        }
      },
      "175": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 301,
          column: 58
        }
      },
      "176": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 302,
          column: 73
        }
      },
      "177": {
        start: {
          line: 304,
          column: 8
        },
        end: {
          line: 307,
          column: 11
        }
      },
      "178": {
        start: {
          line: 305,
          column: 41
        },
        end: {
          line: 305,
          column: 92
        }
      },
      "179": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 87
        }
      },
      "180": {
        start: {
          line: 309,
          column: 4
        },
        end: {
          line: 335,
          column: 7
        }
      },
      "181": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 312,
          column: 11
        }
      },
      "182": {
        start: {
          line: 311,
          column: 12
        },
        end: {
          line: 311,
          column: 39
        }
      },
      "183": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 319,
          column: 11
        }
      },
      "184": {
        start: {
          line: 314,
          column: 33
        },
        end: {
          line: 314,
          column: 73
        }
      },
      "185": {
        start: {
          line: 315,
          column: 37
        },
        end: {
          line: 315,
          column: 60
        }
      },
      "186": {
        start: {
          line: 316,
          column: 25
        },
        end: {
          line: 316,
          column: 99
        }
      },
      "187": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 317,
          column: 62
        }
      },
      "188": {
        start: {
          line: 318,
          column: 12
        },
        end: {
          line: 318,
          column: 65
        }
      },
      "189": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 334,
          column: 11
        }
      },
      "190": {
        start: {
          line: 321,
          column: 26
        },
        end: {
          line: 321,
          column: 28
        }
      },
      "191": {
        start: {
          line: 322,
          column: 30
        },
        end: {
          line: 322,
          column: 32
        }
      },
      "192": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 328,
          column: 13
        }
      },
      "193": {
        start: {
          line: 324,
          column: 25
        },
        end: {
          line: 324,
          column: 26
        }
      },
      "194": {
        start: {
          line: 325,
          column: 29
        },
        end: {
          line: 325,
          column: 73
        }
      },
      "195": {
        start: {
          line: 326,
          column: 16
        },
        end: {
          line: 326,
          column: 42
        }
      },
      "196": {
        start: {
          line: 327,
          column: 16
        },
        end: {
          line: 327,
          column: 45
        }
      },
      "197": {
        start: {
          line: 330,
          column: 32
        },
        end: {
          line: 330,
          column: 46
        }
      },
      "198": {
        start: {
          line: 331,
          column: 36
        },
        end: {
          line: 331,
          column: 54
        }
      },
      "199": {
        start: {
          line: 332,
          column: 12
        },
        end: {
          line: 332,
          column: 45
        }
      },
      "200": {
        start: {
          line: 333,
          column: 12
        },
        end: {
          line: 333,
          column: 49
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 34
          },
          end: {
            line: 11,
            column: 35
          }
        },
        loc: {
          start: {
            line: 11,
            column: 41
          },
          end: {
            line: 80,
            column: 1
          }
        },
        line: 11
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 53
          },
          end: {
            line: 12,
            column: 54
          }
        },
        loc: {
          start: {
            line: 12,
            column: 60
          },
          end: {
            line: 79,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 14,
            column: 56
          },
          end: {
            line: 14,
            column: 57
          }
        },
        loc: {
          start: {
            line: 14,
            column: 72
          },
          end: {
            line: 27,
            column: 9
          }
        },
        line: 14
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 28,
            column: 62
          },
          end: {
            line: 28,
            column: 63
          }
        },
        loc: {
          start: {
            line: 28,
            column: 98
          },
          end: {
            line: 78,
            column: 9
          }
        },
        line: 28
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 82,
            column: 25
          },
          end: {
            line: 82,
            column: 26
          }
        },
        loc: {
          start: {
            line: 82,
            column: 32
          },
          end: {
            line: 87,
            column: 1
          }
        },
        line: 82
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 83,
            column: 40
          },
          end: {
            line: 83,
            column: 41
          }
        },
        loc: {
          start: {
            line: 83,
            column: 58
          },
          end: {
            line: 86,
            column: 5
          }
        },
        line: 83
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 89,
            column: 33
          },
          end: {
            line: 89,
            column: 34
          }
        },
        loc: {
          start: {
            line: 89,
            column: 39
          },
          end: {
            line: 336,
            column: 1
          }
        },
        line: 89
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 91,
            column: 15
          },
          end: {
            line: 91,
            column: 16
          }
        },
        loc: {
          start: {
            line: 91,
            column: 21
          },
          end: {
            line: 96,
            column: 5
          }
        },
        line: 91
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 97,
            column: 31
          },
          end: {
            line: 97,
            column: 32
          }
        },
        loc: {
          start: {
            line: 97,
            column: 37
          },
          end: {
            line: 111,
            column: 5
          }
        },
        line: 97
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 98,
            column: 57
          },
          end: {
            line: 98,
            column: 58
          }
        },
        loc: {
          start: {
            line: 98,
            column: 69
          },
          end: {
            line: 101,
            column: 9
          }
        },
        line: 98
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 102,
            column: 61
          },
          end: {
            line: 102,
            column: 62
          }
        },
        loc: {
          start: {
            line: 102,
            column: 73
          },
          end: {
            line: 110,
            column: 9
          }
        },
        line: 102
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 104,
            column: 47
          },
          end: {
            line: 104,
            column: 48
          }
        },
        loc: {
          start: {
            line: 104,
            column: 54
          },
          end: {
            line: 106,
            column: 13
          }
        },
        line: 104
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 112,
            column: 37
          },
          end: {
            line: 112,
            column: 38
          }
        },
        loc: {
          start: {
            line: 112,
            column: 43
          },
          end: {
            line: 249,
            column: 5
          }
        },
        line: 112
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 113,
            column: 19
          },
          end: {
            line: 113,
            column: 20
          }
        },
        loc: {
          start: {
            line: 113,
            column: 31
          },
          end: {
            line: 115,
            column: 9
          }
        },
        line: 113
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 116,
            column: 68
          },
          end: {
            line: 116,
            column: 69
          }
        },
        loc: {
          start: {
            line: 116,
            column: 80
          },
          end: {
            line: 144,
            column: 9
          }
        },
        line: 116
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 145,
            column: 67
          },
          end: {
            line: 145,
            column: 68
          }
        },
        loc: {
          start: {
            line: 145,
            column: 79
          },
          end: {
            line: 162,
            column: 9
          }
        },
        line: 145
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 153,
            column: 31
          },
          end: {
            line: 153,
            column: 32
          }
        },
        loc: {
          start: {
            line: 153,
            column: 53
          },
          end: {
            line: 161,
            column: 13
          }
        },
        line: 153
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 157,
            column: 44
          },
          end: {
            line: 157,
            column: 45
          }
        },
        loc: {
          start: {
            line: 157,
            column: 56
          },
          end: {
            line: 160,
            column: 17
          }
        },
        line: 157
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 163,
            column: 83
          },
          end: {
            line: 163,
            column: 84
          }
        },
        loc: {
          start: {
            line: 163,
            column: 95
          },
          end: {
            line: 180,
            column: 9
          }
        },
        line: 163
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 177,
            column: 41
          },
          end: {
            line: 177,
            column: 42
          }
        },
        loc: {
          start: {
            line: 177,
            column: 46
          },
          end: {
            line: 177,
            column: 52
          }
        },
        line: 177
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 181,
            column: 68
          },
          end: {
            line: 181,
            column: 69
          }
        },
        loc: {
          start: {
            line: 181,
            column: 80
          },
          end: {
            line: 192,
            column: 9
          }
        },
        line: 181
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 188,
            column: 40
          },
          end: {
            line: 188,
            column: 41
          }
        },
        loc: {
          start: {
            line: 188,
            column: 48
          },
          end: {
            line: 191,
            column: 13
          }
        },
        line: 188
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 193,
            column: 69
          },
          end: {
            line: 193,
            column: 70
          }
        },
        loc: {
          start: {
            line: 193,
            column: 81
          },
          end: {
            line: 210,
            column: 9
          }
        },
        line: 193
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 206,
            column: 46
          },
          end: {
            line: 206,
            column: 47
          }
        },
        loc: {
          start: {
            line: 206,
            column: 55
          },
          end: {
            line: 209,
            column: 13
          }
        },
        line: 206
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 211,
            column: 76
          },
          end: {
            line: 211,
            column: 77
          }
        },
        loc: {
          start: {
            line: 211,
            column: 88
          },
          end: {
            line: 214,
            column: 9
          }
        },
        line: 211
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 215,
            column: 51
          },
          end: {
            line: 215,
            column: 52
          }
        },
        loc: {
          start: {
            line: 215,
            column: 63
          },
          end: {
            line: 227,
            column: 9
          }
        },
        line: 215
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 224,
            column: 24
          },
          end: {
            line: 224,
            column: 25
          }
        },
        loc: {
          start: {
            line: 224,
            column: 30
          },
          end: {
            line: 226,
            column: 13
          }
        },
        line: 224
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 228,
            column: 50
          },
          end: {
            line: 228,
            column: 51
          }
        },
        loc: {
          start: {
            line: 228,
            column: 62
          },
          end: {
            line: 238,
            column: 9
          }
        },
        line: 228
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 235,
            column: 31
          },
          end: {
            line: 235,
            column: 32
          }
        },
        loc: {
          start: {
            line: 235,
            column: 44
          },
          end: {
            line: 237,
            column: 13
          }
        },
        line: 235
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 239,
            column: 57
          },
          end: {
            line: 239,
            column: 58
          }
        },
        loc: {
          start: {
            line: 239,
            column: 69
          },
          end: {
            line: 248,
            column: 9
          }
        },
        line: 239
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 250,
            column: 33
          },
          end: {
            line: 250,
            column: 34
          }
        },
        loc: {
          start: {
            line: 250,
            column: 39
          },
          end: {
            line: 285,
            column: 5
          }
        },
        line: 250
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 251,
            column: 19
          },
          end: {
            line: 251,
            column: 20
          }
        },
        loc: {
          start: {
            line: 251,
            column: 31
          },
          end: {
            line: 253,
            column: 9
          }
        },
        line: 251
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 254,
            column: 47
          },
          end: {
            line: 254,
            column: 48
          }
        },
        loc: {
          start: {
            line: 254,
            column: 59
          },
          end: {
            line: 267,
            column: 9
          }
        },
        line: 254
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 268,
            column: 49
          },
          end: {
            line: 268,
            column: 50
          }
        },
        loc: {
          start: {
            line: 268,
            column: 61
          },
          end: {
            line: 284,
            column: 9
          }
        },
        line: 268
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 286,
            column: 31
          },
          end: {
            line: 286,
            column: 32
          }
        },
        loc: {
          start: {
            line: 286,
            column: 37
          },
          end: {
            line: 308,
            column: 5
          }
        },
        line: 286
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 287,
            column: 60
          },
          end: {
            line: 287,
            column: 61
          }
        },
        loc: {
          start: {
            line: 287,
            column: 72
          },
          end: {
            line: 303,
            column: 9
          }
        },
        line: 287
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 290,
            column: 47
          },
          end: {
            line: 290,
            column: 48
          }
        },
        loc: {
          start: {
            line: 290,
            column: 54
          },
          end: {
            line: 294,
            column: 13
          }
        },
        line: 290
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 304,
            column: 65
          },
          end: {
            line: 304,
            column: 66
          }
        },
        loc: {
          start: {
            line: 304,
            column: 77
          },
          end: {
            line: 307,
            column: 9
          }
        },
        line: 304
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 309,
            column: 51
          },
          end: {
            line: 309,
            column: 52
          }
        },
        loc: {
          start: {
            line: 309,
            column: 57
          },
          end: {
            line: 335,
            column: 5
          }
        },
        line: 309
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 310,
            column: 19
          },
          end: {
            line: 310,
            column: 20
          }
        },
        loc: {
          start: {
            line: 310,
            column: 31
          },
          end: {
            line: 312,
            column: 9
          }
        },
        line: 310
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 313,
            column: 67
          },
          end: {
            line: 313,
            column: 68
          }
        },
        loc: {
          start: {
            line: 313,
            column: 79
          },
          end: {
            line: 319,
            column: 9
          }
        },
        line: 313
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 320,
            column: 64
          },
          end: {
            line: 320,
            column: 65
          }
        },
        loc: {
          start: {
            line: 320,
            column: 76
          },
          end: {
            line: 334,
            column: 9
          }
        },
        line: 320
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 30,
            column: 12
          },
          end: {
            line: 47,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 12
          },
          end: {
            line: 47,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "1": {
        loc: {
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 76,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 12
          },
          end: {
            line: 76,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "2": {
        loc: {
          start: {
            line: 64,
            column: 20
          },
          end: {
            line: 69,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 20
          },
          end: {
            line: 69,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 64
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/services/mock-interview.service.test.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/services/mock-interview.service.test.ts"],
      sourcesContent: ["/**\n * Unit tests for Mock Interview Service\n * Tests cover:\n * - No duplicate titles in batch of 10 interviews\n * - All required fields are present in generated interviews\n * - Question array length is at least 5\n */\n\nimport { MockInterviewService } from './mock-interview.service';\nimport { Interview } from '@/types/index.d';\n\n// Mock the Azure OpenAI Adapter\njest.mock('@/lib/ai/azureOpenAI', () => ({\n  AzureOpenAIAdapter: jest.fn().mockImplementation(() => ({\n    initialize: jest.fn().mockResolvedValue(true),\n    generateQuestions: jest.fn().mockImplementation((resumeInfo) => {\n      // Generate 5-8 unique questions based on resume info\n      const baseQuestions = [\n        'Tell me about your experience with the technologies mentioned in your resume.',\n        'How do you approach problem-solving in your current role?',\n        'Describe a challenging project you worked on recently.',\n        'What are your thoughts on best practices for code quality?',\n        'How do you stay updated with the latest technology trends?',\n        'Can you explain a complex technical concept to a non-technical person?',\n        'What motivates you in your career?',\n        'How do you handle tight deadlines and pressure?'\n      ];\n      return Promise.resolve(baseQuestions.slice(0, 5 + Math.floor(Math.random() * 4)));\n    }),\n    generateWithAzureOpenAI: jest.fn().mockImplementation((prompt, temperature, maxTokens) => {\n      // Mock responses based on prompt content\n      if (prompt.includes('unique job interview scenario')) {\n        // Generate unique role and company\n        const roles = [\n          { jobTitle: 'Cloud Solutions Architect', seniority: 'Senior', company: 'TechVision Labs', industry: 'Cloud Computing' },\n          { jobTitle: 'DevOps Lead Engineer', seniority: 'Lead', company: 'DataStream Solutions', industry: 'Data Infrastructure' },\n          { jobTitle: 'Full Stack Software Engineer', seniority: 'Mid-level', company: 'InnovateTech Corp', industry: 'Software Development' },\n          { jobTitle: 'Machine Learning Engineer', seniority: 'Senior', company: 'AI Dynamics', industry: 'Artificial Intelligence' },\n          { jobTitle: 'Mobile Development Specialist', seniority: 'Senior', company: 'AppCraft Studios', industry: 'Mobile Technology' },\n          { jobTitle: 'Backend Systems Engineer', seniority: 'Principal', company: 'ScaleUp Systems', industry: 'Enterprise Software' },\n          { jobTitle: 'Frontend UI Developer', seniority: 'Mid-level', company: 'DesignFlow Inc', industry: 'Web Development' },\n          { jobTitle: 'Data Platform Engineer', seniority: 'Senior', company: 'DataBridge Analytics', industry: 'Data Analytics' },\n          { jobTitle: 'Security Software Engineer', seniority: 'Lead', company: 'CyberGuard Tech', industry: 'Cybersecurity' },\n          { jobTitle: 'Platform Reliability Engineer', seniority: 'Senior', company: 'ReliaTech Systems', industry: 'Infrastructure' }\n        ];\n        \n        // Get a random role that hasn't been used (tracked by the service)\n        const randomIndex = Math.floor(Math.random() * roles.length);\n        return Promise.resolve(JSON.stringify(roles[randomIndex]));\n      }\n      \n      if (prompt.includes('generate a relevant technology stack')) {\n        // Generate tech stack\n        const techStacks = {\n          'Cloud Solutions Architect': ['AWS', 'Terraform', 'Kubernetes', 'Python', 'Docker'],\n          'DevOps Lead Engineer': ['Jenkins', 'GitLab CI', 'Docker', 'Ansible', 'Prometheus'],\n          'Full Stack Software Engineer': ['React', 'Node.js', 'PostgreSQL', 'Redis', 'TypeScript'],\n          'Machine Learning Engineer': ['Python', 'TensorFlow', 'PyTorch', 'Scikit-learn', 'Apache Spark'],\n          'Mobile Development Specialist': ['React Native', 'Swift', 'Kotlin', 'Firebase', 'GraphQL'],\n          'Backend Systems Engineer': ['Java', 'Spring Boot', 'Kafka', 'Cassandra', 'Elasticsearch'],\n          'Frontend UI Developer': ['Vue.js', 'TypeScript', 'Tailwind CSS', 'Webpack', 'Jest'],\n          'Data Platform Engineer': ['Apache Spark', 'Airflow', 'Databricks', 'Python', 'SQL'],\n          'Security Software Engineer': ['Go', 'Python', 'OWASP', 'Kubernetes', 'HashiCorp Vault'],\n          'Platform Reliability Engineer': ['Kubernetes', 'Prometheus', 'Grafana', 'Go', 'Terraform']\n        };\n        \n        // Try to match based on role in prompt\n        for (const [role, stack] of Object.entries(techStacks)) {\n          if (prompt.includes(role)) {\n            return Promise.resolve(JSON.stringify({\n              technologies: stack,\n              primaryFocus: `${role} technologies and best practices`\n            }));\n          }\n        }\n        \n        // Default tech stack\n        return Promise.resolve(JSON.stringify({\n          technologies: ['JavaScript', 'Python', 'Docker', 'Git', 'PostgreSQL'],\n          primaryFocus: 'Full-stack development'\n        }));\n      }\n      \n      return Promise.resolve('{}');\n    })\n  }))\n}));\n\n// Mock getCompanyLogoForInterview utility\njest.mock('@/lib/utils', () => ({\n  getCompanyLogoForInterview: jest.fn((interviewId) => ({\n    logo: `/logos/company-${interviewId}.png`,\n    company: 'Mock Company'\n  }))\n}));\n\ndescribe('MockInterviewService', () => {\n  let service: MockInterviewService;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    service = new MockInterviewService();\n    // Clear any caches and used lists\n    service.clearCaches();\n  });\n\n  describe('Initialization', () => {\n    it('should initialize the service successfully', async () => {\n      const result = await service.initialize();\n      expect(result).toBe(true);\n    });\n\n    it('should handle initialization errors gracefully', async () => {\n      const mockAdapter = require('@/lib/ai/azureOpenAI').AzureOpenAIAdapter;\n      mockAdapter.mockImplementationOnce(() => ({\n        initialize: jest.fn().mockRejectedValue(new Error('Initialization failed'))\n      }));\n      \n      const errorService = new MockInterviewService();\n      const result = await errorService.initialize();\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('Interview Generation', () => {\n    beforeEach(async () => {\n      await service.initialize();\n    });\n\n    it('should generate an interview with all required fields', async () => {\n      const interview = await service.createMockInterview('test-user-123');\n\n      // Check all required fields are present\n      expect(interview).toHaveProperty('id');\n      expect(interview).toHaveProperty('userId');\n      expect(interview).toHaveProperty('role');\n      expect(interview).toHaveProperty('level');\n      expect(interview).toHaveProperty('type');\n      expect(interview).toHaveProperty('techstack');\n      expect(interview).toHaveProperty('questions');\n      expect(interview).toHaveProperty('finalized');\n      expect(interview).toHaveProperty('createdAt');\n      expect(interview).toHaveProperty('companyLogo');\n      expect(interview).toHaveProperty('companyName');\n\n      // Validate field types\n      expect(typeof interview.id).toBe('string');\n      expect(interview.userId).toBe('test-user-123');\n      expect(typeof interview.role).toBe('string');\n      expect(typeof interview.level).toBe('string');\n      expect(typeof interview.type).toBe('string');\n      expect(Array.isArray(interview.techstack)).toBe(true);\n      expect(Array.isArray(interview.questions)).toBe(true);\n      expect(interview.finalized).toBe(true);\n      expect(typeof interview.createdAt).toBe('string');\n      expect(typeof interview.companyLogo).toBe('string');\n      expect(typeof interview.companyName).toBe('string');\n\n      // Validate that role includes company name\n      expect(interview.role).toMatch(/at/);\n    });\n\n    it('should generate interviews with at least 5 questions', async () => {\n      const interviews: Interview[] = [];\n      \n      // Generate 10 interviews\n      for (let i = 0; i < 10; i++) {\n        const interview = await service.createMockInterview(`user-${i}`);\n        interviews.push(interview);\n      }\n\n      // Check that all interviews have at least 5 questions\n      interviews.forEach((interview, index) => {\n        expect(interview.questions.length).toBeGreaterThanOrEqual(5);\n        expect(interview.questions.length).toBeLessThanOrEqual(8); // Based on our mock\n        \n        // Verify questions are strings and not empty\n        interview.questions.forEach(question => {\n          expect(typeof question).toBe('string');\n          expect(question.length).toBeGreaterThan(0);\n        });\n      });\n    });\n\n    it('should not generate duplicate job titles in a batch of 10 interviews', async () => {\n      const interviews: Interview[] = [];\n      const jobTitles = new Set<string>();\n\n      // Generate 10 interviews\n      for (let i = 0; i < 10; i++) {\n        const interview = await service.createMockInterview(`user-${i}`);\n        interviews.push(interview);\n        \n        // Extract job title from role (format: \"JobTitle at Company\")\n        const jobTitle = interview.role.split(' at ')[0];\n        jobTitles.add(jobTitle);\n      }\n\n      // Check that we have 10 unique job titles\n      expect(jobTitles.size).toBe(10);\n      \n      // Additional check: no two interviews should have the exact same role\n      const roles = interviews.map(i => i.role);\n      const uniqueRoles = new Set(roles);\n      expect(uniqueRoles.size).toBe(10);\n    });\n\n    it('should generate appropriate tech stacks for each role', async () => {\n      const interview = await service.createMockInterview('test-user');\n      \n      // Tech stack should be an array with 4-6 technologies\n      expect(Array.isArray(interview.techstack)).toBe(true);\n      expect(interview.techstack.length).toBeGreaterThanOrEqual(4);\n      expect(interview.techstack.length).toBeLessThanOrEqual(6);\n      \n      // Each technology should be a non-empty string\n      interview.techstack.forEach(tech => {\n        expect(typeof tech).toBe('string');\n        expect(tech.length).toBeGreaterThan(0);\n      });\n    });\n\n    it('should select interview types with proper distribution', async () => {\n      const typeCounts = { Technical: 0, Behavioral: 0, Mixed: 0 };\n      \n      // Generate 30 interviews to test distribution\n      for (let i = 0; i < 30; i++) {\n        const interview = await service.createMockInterview(`user-${i}`);\n        typeCounts[interview.type as keyof typeof typeCounts]++;\n      }\n      \n      // Each type should appear at least once in 30 interviews\n      expect(typeCounts.Technical).toBeGreaterThan(0);\n      expect(typeCounts.Behavioral).toBeGreaterThan(0);\n      expect(typeCounts.Mixed).toBeGreaterThan(0);\n      \n      // Check that the distribution is roughly balanced (within reasonable variance)\n      // Expected: ~10 each with some variance\n      Object.values(typeCounts).forEach(count => {\n        expect(count).toBeGreaterThanOrEqual(5);\n        expect(count).toBeLessThanOrEqual(15);\n      });\n    });\n\n    it('should handle defaulting to mock user when no userId provided', async () => {\n      const interview = await service.createMockInterview();\n      expect(interview.userId).toBe('mock-user');\n    });\n\n    it('should generate unique interview IDs', async () => {\n      const ids = new Set<string>();\n      \n      for (let i = 0; i < 10; i++) {\n        const interview = await service.createMockInterview();\n        ids.add(interview.id);\n      }\n      \n      // All IDs should be unique\n      expect(ids.size).toBe(10);\n      \n      // IDs should follow the expected format\n      ids.forEach(id => {\n        expect(id).toMatch(/^mock-\\d+-[a-z0-9]+$/);\n      });\n    });\n\n    it('should set correct seniority levels', async () => {\n      const validSeniorities = ['Junior', 'Mid-level', 'Senior', 'Lead', 'Principal'];\n      const interviews: Interview[] = [];\n      \n      for (let i = 0; i < 10; i++) {\n        const interview = await service.createMockInterview(`user-${i}`);\n        interviews.push(interview);\n      }\n      \n      interviews.forEach(interview => {\n        expect(validSeniorities).toContain(interview.level);\n      });\n    });\n\n    it('should properly format createdAt timestamp', async () => {\n      const before = new Date().toISOString();\n      const interview = await service.createMockInterview();\n      const after = new Date().toISOString();\n      \n      // Timestamp should be in ISO format\n      expect(interview.createdAt).toMatch(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);\n      \n      // Timestamp should be between before and after\n      expect(new Date(interview.createdAt).getTime()).toBeGreaterThanOrEqual(new Date(before).getTime());\n      expect(new Date(interview.createdAt).getTime()).toBeLessThanOrEqual(new Date(after).getTime());\n    });\n  });\n\n  describe('Cache Management', () => {\n    beforeEach(async () => {\n      await service.initialize();\n    });\n\n    it('should maintain cache statistics', async () => {\n      // Generate a few interviews\n      await service.createMockInterview('user-1');\n      await service.createMockInterview('user-2');\n      \n      const stats = service.getCacheStats();\n      \n      expect(stats).toHaveProperty('rolesCached');\n      expect(stats).toHaveProperty('techStacksCached');\n      expect(stats).toHaveProperty('questionsCached');\n      expect(stats).toHaveProperty('usedRolesCount');\n      expect(stats).toHaveProperty('usedCompaniesCount');\n      \n      // Should have some cached data\n      expect(stats.usedRolesCount).toBeGreaterThan(0);\n      expect(stats.usedCompaniesCount).toBeGreaterThan(0);\n    });\n\n    it('should clear caches when requested', async () => {\n      // Generate some interviews to populate cache\n      await service.createMockInterview('user-1');\n      await service.createMockInterview('user-2');\n      \n      // Get initial stats\n      const statsBefore = service.getCacheStats();\n      expect(statsBefore.usedRolesCount).toBeGreaterThan(0);\n      \n      // Clear caches\n      service.clearCaches();\n      \n      // Verify caches are cleared\n      const statsAfter = service.getCacheStats();\n      expect(statsAfter.rolesCached).toBe(0);\n      expect(statsAfter.techStacksCached).toBe(0);\n      expect(statsAfter.questionsCached).toBe(0);\n      expect(statsAfter.usedRolesCount).toBe(0);\n      expect(statsAfter.usedCompaniesCount).toBe(0);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle API failures with fallback data', async () => {\n      // Mock a failure in the Azure OpenAI adapter\n      const mockAdapter = require('@/lib/ai/azureOpenAI').AzureOpenAIAdapter;\n      mockAdapter.mockImplementationOnce(() => ({\n        initialize: jest.fn().mockResolvedValue(true),\n        generateQuestions: jest.fn().mockRejectedValue(new Error('API Error')),\n        generateWithAzureOpenAI: jest.fn().mockRejectedValue(new Error('API Error'))\n      }));\n      \n      const errorService = new MockInterviewService();\n      await errorService.initialize();\n      \n      // Should still generate an interview using fallback data\n      const interview = await errorService.createMockInterview('test-user');\n      \n      expect(interview).toHaveProperty('id');\n      expect(interview).toHaveProperty('role');\n      expect(interview).toHaveProperty('questions');\n      expect(interview.questions.length).toBeGreaterThanOrEqual(5);\n    });\n\n    it('should throw error when service is not initialized', async () => {\n      const uninitializedService = new MockInterviewService();\n      \n      await expect(uninitializedService.createMockInterview()).rejects.toThrow();\n    });\n  });\n\n  describe('Unique Role and Company Generation', () => {\n    beforeEach(async () => {\n      await service.initialize();\n    });\n\n    it('should respect exclusion lists when generating roles', async () => {\n      const excludeRoles = ['Software Engineer', 'Product Manager'];\n      const excludeCompanies = ['TechCorp', 'DataInc'];\n      \n      const role = await service.generateUniqueRoleAndCompany(excludeRoles, excludeCompanies);\n      \n      expect(excludeRoles).not.toContain(role.jobTitle);\n      expect(excludeCompanies).not.toContain(role.company);\n    });\n\n    it('should track and avoid previously generated roles', async () => {\n      const roles: string[] = [];\n      const companies: string[] = [];\n      \n      // Generate multiple roles\n      for (let i = 0; i < 5; i++) {\n        const role = await service.generateUniqueRoleAndCompany();\n        roles.push(role.jobTitle);\n        companies.push(role.company);\n      }\n      \n      // Check uniqueness\n      const uniqueRoles = new Set(roles);\n      const uniqueCompanies = new Set(companies);\n      \n      expect(uniqueRoles.size).toBe(5);\n      expect(uniqueCompanies.size).toBe(5);\n    });\n  });\n});\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "319e990fc592d0c152641c25dfd7262e3de77eda"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_4hof8aj8b = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_4hof8aj8b();
cov_4hof8aj8b().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
// Mock the Azure OpenAI Adapter
/* istanbul ignore next */
cov_4hof8aj8b().s[1]++;
jest.mock('@/lib/ai/azureOpenAI', () => {
  /* istanbul ignore next */
  cov_4hof8aj8b().f[0]++;
  cov_4hof8aj8b().s[2]++;
  return {
    AzureOpenAIAdapter: jest.fn().mockImplementation(() => {
      /* istanbul ignore next */
      cov_4hof8aj8b().f[1]++;
      cov_4hof8aj8b().s[3]++;
      return {
        initialize: jest.fn().mockResolvedValue(true),
        generateQuestions: jest.fn().mockImplementation(resumeInfo => {
          /* istanbul ignore next */
          cov_4hof8aj8b().f[2]++;
          // Generate 5-8 unique questions based on resume info
          const baseQuestions =
          /* istanbul ignore next */
          (cov_4hof8aj8b().s[4]++, ['Tell me about your experience with the technologies mentioned in your resume.', 'How do you approach problem-solving in your current role?', 'Describe a challenging project you worked on recently.', 'What are your thoughts on best practices for code quality?', 'How do you stay updated with the latest technology trends?', 'Can you explain a complex technical concept to a non-technical person?', 'What motivates you in your career?', 'How do you handle tight deadlines and pressure?']);
          /* istanbul ignore next */
          cov_4hof8aj8b().s[5]++;
          return Promise.resolve(baseQuestions.slice(0, 5 + Math.floor(Math.random() * 4)));
        }),
        generateWithAzureOpenAI: jest.fn().mockImplementation((prompt, temperature, maxTokens) => {
          /* istanbul ignore next */
          cov_4hof8aj8b().f[3]++;
          cov_4hof8aj8b().s[6]++;
          // Mock responses based on prompt content
          if (prompt.includes('unique job interview scenario')) {
            /* istanbul ignore next */
            cov_4hof8aj8b().b[0][0]++;
            // Generate unique role and company
            const roles =
            /* istanbul ignore next */
            (cov_4hof8aj8b().s[7]++, [{
              jobTitle: 'Cloud Solutions Architect',
              seniority: 'Senior',
              company: 'TechVision Labs',
              industry: 'Cloud Computing'
            }, {
              jobTitle: 'DevOps Lead Engineer',
              seniority: 'Lead',
              company: 'DataStream Solutions',
              industry: 'Data Infrastructure'
            }, {
              jobTitle: 'Full Stack Software Engineer',
              seniority: 'Mid-level',
              company: 'InnovateTech Corp',
              industry: 'Software Development'
            }, {
              jobTitle: 'Machine Learning Engineer',
              seniority: 'Senior',
              company: 'AI Dynamics',
              industry: 'Artificial Intelligence'
            }, {
              jobTitle: 'Mobile Development Specialist',
              seniority: 'Senior',
              company: 'AppCraft Studios',
              industry: 'Mobile Technology'
            }, {
              jobTitle: 'Backend Systems Engineer',
              seniority: 'Principal',
              company: 'ScaleUp Systems',
              industry: 'Enterprise Software'
            }, {
              jobTitle: 'Frontend UI Developer',
              seniority: 'Mid-level',
              company: 'DesignFlow Inc',
              industry: 'Web Development'
            }, {
              jobTitle: 'Data Platform Engineer',
              seniority: 'Senior',
              company: 'DataBridge Analytics',
              industry: 'Data Analytics'
            }, {
              jobTitle: 'Security Software Engineer',
              seniority: 'Lead',
              company: 'CyberGuard Tech',
              industry: 'Cybersecurity'
            }, {
              jobTitle: 'Platform Reliability Engineer',
              seniority: 'Senior',
              company: 'ReliaTech Systems',
              industry: 'Infrastructure'
            }]);
            // Get a random role that hasn't been used (tracked by the service)
            const randomIndex =
            /* istanbul ignore next */
            (cov_4hof8aj8b().s[8]++, Math.floor(Math.random() * roles.length));
            /* istanbul ignore next */
            cov_4hof8aj8b().s[9]++;
            return Promise.resolve(JSON.stringify(roles[randomIndex]));
          } else
          /* istanbul ignore next */
          {
            cov_4hof8aj8b().b[0][1]++;
          }
          cov_4hof8aj8b().s[10]++;
          if (prompt.includes('generate a relevant technology stack')) {
            /* istanbul ignore next */
            cov_4hof8aj8b().b[1][0]++;
            // Generate tech stack
            const techStacks =
            /* istanbul ignore next */
            (cov_4hof8aj8b().s[11]++, {
              'Cloud Solutions Architect': ['AWS', 'Terraform', 'Kubernetes', 'Python', 'Docker'],
              'DevOps Lead Engineer': ['Jenkins', 'GitLab CI', 'Docker', 'Ansible', 'Prometheus'],
              'Full Stack Software Engineer': ['React', 'Node.js', 'PostgreSQL', 'Redis', 'TypeScript'],
              'Machine Learning Engineer': ['Python', 'TensorFlow', 'PyTorch', 'Scikit-learn', 'Apache Spark'],
              'Mobile Development Specialist': ['React Native', 'Swift', 'Kotlin', 'Firebase', 'GraphQL'],
              'Backend Systems Engineer': ['Java', 'Spring Boot', 'Kafka', 'Cassandra', 'Elasticsearch'],
              'Frontend UI Developer': ['Vue.js', 'TypeScript', 'Tailwind CSS', 'Webpack', 'Jest'],
              'Data Platform Engineer': ['Apache Spark', 'Airflow', 'Databricks', 'Python', 'SQL'],
              'Security Software Engineer': ['Go', 'Python', 'OWASP', 'Kubernetes', 'HashiCorp Vault'],
              'Platform Reliability Engineer': ['Kubernetes', 'Prometheus', 'Grafana', 'Go', 'Terraform']
            });
            // Try to match based on role in prompt
            /* istanbul ignore next */
            cov_4hof8aj8b().s[12]++;
            for (const [role, stack] of Object.entries(techStacks)) {
              /* istanbul ignore next */
              cov_4hof8aj8b().s[13]++;
              if (prompt.includes(role)) {
                /* istanbul ignore next */
                cov_4hof8aj8b().b[2][0]++;
                cov_4hof8aj8b().s[14]++;
                return Promise.resolve(JSON.stringify({
                  technologies: stack,
                  primaryFocus: `${role} technologies and best practices`
                }));
              } else
              /* istanbul ignore next */
              {
                cov_4hof8aj8b().b[2][1]++;
              }
            }
            // Default tech stack
            /* istanbul ignore next */
            cov_4hof8aj8b().s[15]++;
            return Promise.resolve(JSON.stringify({
              technologies: ['JavaScript', 'Python', 'Docker', 'Git', 'PostgreSQL'],
              primaryFocus: 'Full-stack development'
            }));
          } else
          /* istanbul ignore next */
          {
            cov_4hof8aj8b().b[1][1]++;
          }
          cov_4hof8aj8b().s[16]++;
          return Promise.resolve('{}');
        })
      };
    })
  };
});
// Mock getCompanyLogoForInterview utility
/* istanbul ignore next */
cov_4hof8aj8b().s[17]++;
jest.mock('@/lib/utils', () => {
  /* istanbul ignore next */
  cov_4hof8aj8b().f[4]++;
  cov_4hof8aj8b().s[18]++;
  return {
    getCompanyLogoForInterview: jest.fn(interviewId => {
      /* istanbul ignore next */
      cov_4hof8aj8b().f[5]++;
      cov_4hof8aj8b().s[19]++;
      return {
        logo: `/logos/company-${interviewId}.png`,
        company: 'Mock Company'
      };
    })
  };
});
const mock_interview_service_1 =
/* istanbul ignore next */
(cov_4hof8aj8b().s[20]++, require("./mock-interview.service"));
/* istanbul ignore next */
cov_4hof8aj8b().s[21]++;
describe('MockInterviewService', () => {
  /* istanbul ignore next */
  cov_4hof8aj8b().f[6]++;
  let service;
  /* istanbul ignore next */
  cov_4hof8aj8b().s[22]++;
  beforeEach(() => {
    /* istanbul ignore next */
    cov_4hof8aj8b().f[7]++;
    cov_4hof8aj8b().s[23]++;
    jest.clearAllMocks();
    /* istanbul ignore next */
    cov_4hof8aj8b().s[24]++;
    service = new mock_interview_service_1.MockInterviewService();
    // Clear any caches and used lists
    /* istanbul ignore next */
    cov_4hof8aj8b().s[25]++;
    service.clearCaches();
  });
  /* istanbul ignore next */
  cov_4hof8aj8b().s[26]++;
  describe('Initialization', () => {
    /* istanbul ignore next */
    cov_4hof8aj8b().f[8]++;
    cov_4hof8aj8b().s[27]++;
    it('should initialize the service successfully', async () => {
      /* istanbul ignore next */
      cov_4hof8aj8b().f[9]++;
      const result =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[28]++, await service.initialize());
      /* istanbul ignore next */
      cov_4hof8aj8b().s[29]++;
      expect(result).toBe(true);
    });
    /* istanbul ignore next */
    cov_4hof8aj8b().s[30]++;
    it('should handle initialization errors gracefully', async () => {
      /* istanbul ignore next */
      cov_4hof8aj8b().f[10]++;
      const mockAdapter =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[31]++, require('@/lib/ai/azureOpenAI').AzureOpenAIAdapter);
      /* istanbul ignore next */
      cov_4hof8aj8b().s[32]++;
      mockAdapter.mockImplementationOnce(() => {
        /* istanbul ignore next */
        cov_4hof8aj8b().f[11]++;
        cov_4hof8aj8b().s[33]++;
        return {
          initialize: jest.fn().mockRejectedValue(new Error('Initialization failed'))
        };
      });
      const errorService =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[34]++, new mock_interview_service_1.MockInterviewService());
      const result =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[35]++, await errorService.initialize());
      /* istanbul ignore next */
      cov_4hof8aj8b().s[36]++;
      expect(result).toBe(false);
    });
  });
  /* istanbul ignore next */
  cov_4hof8aj8b().s[37]++;
  describe('Interview Generation', () => {
    /* istanbul ignore next */
    cov_4hof8aj8b().f[12]++;
    cov_4hof8aj8b().s[38]++;
    beforeEach(async () => {
      /* istanbul ignore next */
      cov_4hof8aj8b().f[13]++;
      cov_4hof8aj8b().s[39]++;
      await service.initialize();
    });
    /* istanbul ignore next */
    cov_4hof8aj8b().s[40]++;
    it('should generate an interview with all required fields', async () => {
      /* istanbul ignore next */
      cov_4hof8aj8b().f[14]++;
      const interview =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[41]++, await service.createMockInterview('test-user-123'));
      // Check all required fields are present
      /* istanbul ignore next */
      cov_4hof8aj8b().s[42]++;
      expect(interview).toHaveProperty('id');
      /* istanbul ignore next */
      cov_4hof8aj8b().s[43]++;
      expect(interview).toHaveProperty('userId');
      /* istanbul ignore next */
      cov_4hof8aj8b().s[44]++;
      expect(interview).toHaveProperty('role');
      /* istanbul ignore next */
      cov_4hof8aj8b().s[45]++;
      expect(interview).toHaveProperty('level');
      /* istanbul ignore next */
      cov_4hof8aj8b().s[46]++;
      expect(interview).toHaveProperty('type');
      /* istanbul ignore next */
      cov_4hof8aj8b().s[47]++;
      expect(interview).toHaveProperty('techstack');
      /* istanbul ignore next */
      cov_4hof8aj8b().s[48]++;
      expect(interview).toHaveProperty('questions');
      /* istanbul ignore next */
      cov_4hof8aj8b().s[49]++;
      expect(interview).toHaveProperty('finalized');
      /* istanbul ignore next */
      cov_4hof8aj8b().s[50]++;
      expect(interview).toHaveProperty('createdAt');
      /* istanbul ignore next */
      cov_4hof8aj8b().s[51]++;
      expect(interview).toHaveProperty('companyLogo');
      /* istanbul ignore next */
      cov_4hof8aj8b().s[52]++;
      expect(interview).toHaveProperty('companyName');
      // Validate field types
      /* istanbul ignore next */
      cov_4hof8aj8b().s[53]++;
      expect(typeof interview.id).toBe('string');
      /* istanbul ignore next */
      cov_4hof8aj8b().s[54]++;
      expect(interview.userId).toBe('test-user-123');
      /* istanbul ignore next */
      cov_4hof8aj8b().s[55]++;
      expect(typeof interview.role).toBe('string');
      /* istanbul ignore next */
      cov_4hof8aj8b().s[56]++;
      expect(typeof interview.level).toBe('string');
      /* istanbul ignore next */
      cov_4hof8aj8b().s[57]++;
      expect(typeof interview.type).toBe('string');
      /* istanbul ignore next */
      cov_4hof8aj8b().s[58]++;
      expect(Array.isArray(interview.techstack)).toBe(true);
      /* istanbul ignore next */
      cov_4hof8aj8b().s[59]++;
      expect(Array.isArray(interview.questions)).toBe(true);
      /* istanbul ignore next */
      cov_4hof8aj8b().s[60]++;
      expect(interview.finalized).toBe(true);
      /* istanbul ignore next */
      cov_4hof8aj8b().s[61]++;
      expect(typeof interview.createdAt).toBe('string');
      /* istanbul ignore next */
      cov_4hof8aj8b().s[62]++;
      expect(typeof interview.companyLogo).toBe('string');
      /* istanbul ignore next */
      cov_4hof8aj8b().s[63]++;
      expect(typeof interview.companyName).toBe('string');
      // Validate that role includes company name
      /* istanbul ignore next */
      cov_4hof8aj8b().s[64]++;
      expect(interview.role).toMatch(/at/);
    });
    /* istanbul ignore next */
    cov_4hof8aj8b().s[65]++;
    it('should generate interviews with at least 5 questions', async () => {
      /* istanbul ignore next */
      cov_4hof8aj8b().f[15]++;
      const interviews =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[66]++, []);
      // Generate 10 interviews
      /* istanbul ignore next */
      cov_4hof8aj8b().s[67]++;
      for (let i =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[68]++, 0); i < 10; i++) {
        const interview =
        /* istanbul ignore next */
        (cov_4hof8aj8b().s[69]++, await service.createMockInterview(`user-${i}`));
        /* istanbul ignore next */
        cov_4hof8aj8b().s[70]++;
        interviews.push(interview);
      }
      // Check that all interviews have at least 5 questions
      /* istanbul ignore next */
      cov_4hof8aj8b().s[71]++;
      interviews.forEach((interview, index) => {
        /* istanbul ignore next */
        cov_4hof8aj8b().f[16]++;
        cov_4hof8aj8b().s[72]++;
        expect(interview.questions.length).toBeGreaterThanOrEqual(5);
        /* istanbul ignore next */
        cov_4hof8aj8b().s[73]++;
        expect(interview.questions.length).toBeLessThanOrEqual(8); // Based on our mock
        // Verify questions are strings and not empty
        /* istanbul ignore next */
        cov_4hof8aj8b().s[74]++;
        interview.questions.forEach(question => {
          /* istanbul ignore next */
          cov_4hof8aj8b().f[17]++;
          cov_4hof8aj8b().s[75]++;
          expect(typeof question).toBe('string');
          /* istanbul ignore next */
          cov_4hof8aj8b().s[76]++;
          expect(question.length).toBeGreaterThan(0);
        });
      });
    });
    /* istanbul ignore next */
    cov_4hof8aj8b().s[77]++;
    it('should not generate duplicate job titles in a batch of 10 interviews', async () => {
      /* istanbul ignore next */
      cov_4hof8aj8b().f[18]++;
      const interviews =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[78]++, []);
      const jobTitles =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[79]++, new Set());
      // Generate 10 interviews
      /* istanbul ignore next */
      cov_4hof8aj8b().s[80]++;
      for (let i =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[81]++, 0); i < 10; i++) {
        const interview =
        /* istanbul ignore next */
        (cov_4hof8aj8b().s[82]++, await service.createMockInterview(`user-${i}`));
        /* istanbul ignore next */
        cov_4hof8aj8b().s[83]++;
        interviews.push(interview);
        // Extract job title from role (format: "JobTitle at Company")
        const jobTitle =
        /* istanbul ignore next */
        (cov_4hof8aj8b().s[84]++, interview.role.split(' at ')[0]);
        /* istanbul ignore next */
        cov_4hof8aj8b().s[85]++;
        jobTitles.add(jobTitle);
      }
      // Check that we have 10 unique job titles
      /* istanbul ignore next */
      cov_4hof8aj8b().s[86]++;
      expect(jobTitles.size).toBe(10);
      // Additional check: no two interviews should have the exact same role
      const roles =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[87]++, interviews.map(i => {
        /* istanbul ignore next */
        cov_4hof8aj8b().f[19]++;
        cov_4hof8aj8b().s[88]++;
        return i.role;
      }));
      const uniqueRoles =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[89]++, new Set(roles));
      /* istanbul ignore next */
      cov_4hof8aj8b().s[90]++;
      expect(uniqueRoles.size).toBe(10);
    });
    /* istanbul ignore next */
    cov_4hof8aj8b().s[91]++;
    it('should generate appropriate tech stacks for each role', async () => {
      /* istanbul ignore next */
      cov_4hof8aj8b().f[20]++;
      const interview =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[92]++, await service.createMockInterview('test-user'));
      // Tech stack should be an array with 4-6 technologies
      /* istanbul ignore next */
      cov_4hof8aj8b().s[93]++;
      expect(Array.isArray(interview.techstack)).toBe(true);
      /* istanbul ignore next */
      cov_4hof8aj8b().s[94]++;
      expect(interview.techstack.length).toBeGreaterThanOrEqual(4);
      /* istanbul ignore next */
      cov_4hof8aj8b().s[95]++;
      expect(interview.techstack.length).toBeLessThanOrEqual(6);
      // Each technology should be a non-empty string
      /* istanbul ignore next */
      cov_4hof8aj8b().s[96]++;
      interview.techstack.forEach(tech => {
        /* istanbul ignore next */
        cov_4hof8aj8b().f[21]++;
        cov_4hof8aj8b().s[97]++;
        expect(typeof tech).toBe('string');
        /* istanbul ignore next */
        cov_4hof8aj8b().s[98]++;
        expect(tech.length).toBeGreaterThan(0);
      });
    });
    /* istanbul ignore next */
    cov_4hof8aj8b().s[99]++;
    it('should select interview types with proper distribution', async () => {
      /* istanbul ignore next */
      cov_4hof8aj8b().f[22]++;
      const typeCounts =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[100]++, {
        Technical: 0,
        Behavioral: 0,
        Mixed: 0
      });
      // Generate 30 interviews to test distribution
      /* istanbul ignore next */
      cov_4hof8aj8b().s[101]++;
      for (let i =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[102]++, 0); i < 30; i++) {
        const interview =
        /* istanbul ignore next */
        (cov_4hof8aj8b().s[103]++, await service.createMockInterview(`user-${i}`));
        /* istanbul ignore next */
        cov_4hof8aj8b().s[104]++;
        typeCounts[interview.type]++;
      }
      // Each type should appear at least once in 30 interviews
      /* istanbul ignore next */
      cov_4hof8aj8b().s[105]++;
      expect(typeCounts.Technical).toBeGreaterThan(0);
      /* istanbul ignore next */
      cov_4hof8aj8b().s[106]++;
      expect(typeCounts.Behavioral).toBeGreaterThan(0);
      /* istanbul ignore next */
      cov_4hof8aj8b().s[107]++;
      expect(typeCounts.Mixed).toBeGreaterThan(0);
      // Check that the distribution is roughly balanced (within reasonable variance)
      // Expected: ~10 each with some variance
      /* istanbul ignore next */
      cov_4hof8aj8b().s[108]++;
      Object.values(typeCounts).forEach(count => {
        /* istanbul ignore next */
        cov_4hof8aj8b().f[23]++;
        cov_4hof8aj8b().s[109]++;
        expect(count).toBeGreaterThanOrEqual(5);
        /* istanbul ignore next */
        cov_4hof8aj8b().s[110]++;
        expect(count).toBeLessThanOrEqual(15);
      });
    });
    /* istanbul ignore next */
    cov_4hof8aj8b().s[111]++;
    it('should handle defaulting to mock user when no userId provided', async () => {
      /* istanbul ignore next */
      cov_4hof8aj8b().f[24]++;
      const interview =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[112]++, await service.createMockInterview());
      /* istanbul ignore next */
      cov_4hof8aj8b().s[113]++;
      expect(interview.userId).toBe('mock-user');
    });
    /* istanbul ignore next */
    cov_4hof8aj8b().s[114]++;
    it('should generate unique interview IDs', async () => {
      /* istanbul ignore next */
      cov_4hof8aj8b().f[25]++;
      const ids =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[115]++, new Set());
      /* istanbul ignore next */
      cov_4hof8aj8b().s[116]++;
      for (let i =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[117]++, 0); i < 10; i++) {
        const interview =
        /* istanbul ignore next */
        (cov_4hof8aj8b().s[118]++, await service.createMockInterview());
        /* istanbul ignore next */
        cov_4hof8aj8b().s[119]++;
        ids.add(interview.id);
      }
      // All IDs should be unique
      /* istanbul ignore next */
      cov_4hof8aj8b().s[120]++;
      expect(ids.size).toBe(10);
      // IDs should follow the expected format
      /* istanbul ignore next */
      cov_4hof8aj8b().s[121]++;
      ids.forEach(id => {
        /* istanbul ignore next */
        cov_4hof8aj8b().f[26]++;
        cov_4hof8aj8b().s[122]++;
        expect(id).toMatch(/^mock-\d+-[a-z0-9]+$/);
      });
    });
    /* istanbul ignore next */
    cov_4hof8aj8b().s[123]++;
    it('should set correct seniority levels', async () => {
      /* istanbul ignore next */
      cov_4hof8aj8b().f[27]++;
      const validSeniorities =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[124]++, ['Junior', 'Mid-level', 'Senior', 'Lead', 'Principal']);
      const interviews =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[125]++, []);
      /* istanbul ignore next */
      cov_4hof8aj8b().s[126]++;
      for (let i =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[127]++, 0); i < 10; i++) {
        const interview =
        /* istanbul ignore next */
        (cov_4hof8aj8b().s[128]++, await service.createMockInterview(`user-${i}`));
        /* istanbul ignore next */
        cov_4hof8aj8b().s[129]++;
        interviews.push(interview);
      }
      /* istanbul ignore next */
      cov_4hof8aj8b().s[130]++;
      interviews.forEach(interview => {
        /* istanbul ignore next */
        cov_4hof8aj8b().f[28]++;
        cov_4hof8aj8b().s[131]++;
        expect(validSeniorities).toContain(interview.level);
      });
    });
    /* istanbul ignore next */
    cov_4hof8aj8b().s[132]++;
    it('should properly format createdAt timestamp', async () => {
      /* istanbul ignore next */
      cov_4hof8aj8b().f[29]++;
      const before =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[133]++, new Date().toISOString());
      const interview =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[134]++, await service.createMockInterview());
      const after =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[135]++, new Date().toISOString());
      // Timestamp should be in ISO format
      /* istanbul ignore next */
      cov_4hof8aj8b().s[136]++;
      expect(interview.createdAt).toMatch(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}/);
      // Timestamp should be between before and after
      /* istanbul ignore next */
      cov_4hof8aj8b().s[137]++;
      expect(new Date(interview.createdAt).getTime()).toBeGreaterThanOrEqual(new Date(before).getTime());
      /* istanbul ignore next */
      cov_4hof8aj8b().s[138]++;
      expect(new Date(interview.createdAt).getTime()).toBeLessThanOrEqual(new Date(after).getTime());
    });
  });
  /* istanbul ignore next */
  cov_4hof8aj8b().s[139]++;
  describe('Cache Management', () => {
    /* istanbul ignore next */
    cov_4hof8aj8b().f[30]++;
    cov_4hof8aj8b().s[140]++;
    beforeEach(async () => {
      /* istanbul ignore next */
      cov_4hof8aj8b().f[31]++;
      cov_4hof8aj8b().s[141]++;
      await service.initialize();
    });
    /* istanbul ignore next */
    cov_4hof8aj8b().s[142]++;
    it('should maintain cache statistics', async () => {
      /* istanbul ignore next */
      cov_4hof8aj8b().f[32]++;
      cov_4hof8aj8b().s[143]++;
      // Generate a few interviews
      await service.createMockInterview('user-1');
      /* istanbul ignore next */
      cov_4hof8aj8b().s[144]++;
      await service.createMockInterview('user-2');
      const stats =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[145]++, service.getCacheStats());
      /* istanbul ignore next */
      cov_4hof8aj8b().s[146]++;
      expect(stats).toHaveProperty('rolesCached');
      /* istanbul ignore next */
      cov_4hof8aj8b().s[147]++;
      expect(stats).toHaveProperty('techStacksCached');
      /* istanbul ignore next */
      cov_4hof8aj8b().s[148]++;
      expect(stats).toHaveProperty('questionsCached');
      /* istanbul ignore next */
      cov_4hof8aj8b().s[149]++;
      expect(stats).toHaveProperty('usedRolesCount');
      /* istanbul ignore next */
      cov_4hof8aj8b().s[150]++;
      expect(stats).toHaveProperty('usedCompaniesCount');
      // Should have some cached data
      /* istanbul ignore next */
      cov_4hof8aj8b().s[151]++;
      expect(stats.usedRolesCount).toBeGreaterThan(0);
      /* istanbul ignore next */
      cov_4hof8aj8b().s[152]++;
      expect(stats.usedCompaniesCount).toBeGreaterThan(0);
    });
    /* istanbul ignore next */
    cov_4hof8aj8b().s[153]++;
    it('should clear caches when requested', async () => {
      /* istanbul ignore next */
      cov_4hof8aj8b().f[33]++;
      cov_4hof8aj8b().s[154]++;
      // Generate some interviews to populate cache
      await service.createMockInterview('user-1');
      /* istanbul ignore next */
      cov_4hof8aj8b().s[155]++;
      await service.createMockInterview('user-2');
      // Get initial stats
      const statsBefore =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[156]++, service.getCacheStats());
      /* istanbul ignore next */
      cov_4hof8aj8b().s[157]++;
      expect(statsBefore.usedRolesCount).toBeGreaterThan(0);
      // Clear caches
      /* istanbul ignore next */
      cov_4hof8aj8b().s[158]++;
      service.clearCaches();
      // Verify caches are cleared
      const statsAfter =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[159]++, service.getCacheStats());
      /* istanbul ignore next */
      cov_4hof8aj8b().s[160]++;
      expect(statsAfter.rolesCached).toBe(0);
      /* istanbul ignore next */
      cov_4hof8aj8b().s[161]++;
      expect(statsAfter.techStacksCached).toBe(0);
      /* istanbul ignore next */
      cov_4hof8aj8b().s[162]++;
      expect(statsAfter.questionsCached).toBe(0);
      /* istanbul ignore next */
      cov_4hof8aj8b().s[163]++;
      expect(statsAfter.usedRolesCount).toBe(0);
      /* istanbul ignore next */
      cov_4hof8aj8b().s[164]++;
      expect(statsAfter.usedCompaniesCount).toBe(0);
    });
  });
  /* istanbul ignore next */
  cov_4hof8aj8b().s[165]++;
  describe('Error Handling', () => {
    /* istanbul ignore next */
    cov_4hof8aj8b().f[34]++;
    cov_4hof8aj8b().s[166]++;
    it('should handle API failures with fallback data', async () => {
      /* istanbul ignore next */
      cov_4hof8aj8b().f[35]++;
      // Mock a failure in the Azure OpenAI adapter
      const mockAdapter =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[167]++, require('@/lib/ai/azureOpenAI').AzureOpenAIAdapter);
      /* istanbul ignore next */
      cov_4hof8aj8b().s[168]++;
      mockAdapter.mockImplementationOnce(() => {
        /* istanbul ignore next */
        cov_4hof8aj8b().f[36]++;
        cov_4hof8aj8b().s[169]++;
        return {
          initialize: jest.fn().mockResolvedValue(true),
          generateQuestions: jest.fn().mockRejectedValue(new Error('API Error')),
          generateWithAzureOpenAI: jest.fn().mockRejectedValue(new Error('API Error'))
        };
      });
      const errorService =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[170]++, new mock_interview_service_1.MockInterviewService());
      /* istanbul ignore next */
      cov_4hof8aj8b().s[171]++;
      await errorService.initialize();
      // Should still generate an interview using fallback data
      const interview =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[172]++, await errorService.createMockInterview('test-user'));
      /* istanbul ignore next */
      cov_4hof8aj8b().s[173]++;
      expect(interview).toHaveProperty('id');
      /* istanbul ignore next */
      cov_4hof8aj8b().s[174]++;
      expect(interview).toHaveProperty('role');
      /* istanbul ignore next */
      cov_4hof8aj8b().s[175]++;
      expect(interview).toHaveProperty('questions');
      /* istanbul ignore next */
      cov_4hof8aj8b().s[176]++;
      expect(interview.questions.length).toBeGreaterThanOrEqual(5);
    });
    /* istanbul ignore next */
    cov_4hof8aj8b().s[177]++;
    it('should throw error when service is not initialized', async () => {
      /* istanbul ignore next */
      cov_4hof8aj8b().f[37]++;
      const uninitializedService =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[178]++, new mock_interview_service_1.MockInterviewService());
      /* istanbul ignore next */
      cov_4hof8aj8b().s[179]++;
      await expect(uninitializedService.createMockInterview()).rejects.toThrow();
    });
  });
  /* istanbul ignore next */
  cov_4hof8aj8b().s[180]++;
  describe('Unique Role and Company Generation', () => {
    /* istanbul ignore next */
    cov_4hof8aj8b().f[38]++;
    cov_4hof8aj8b().s[181]++;
    beforeEach(async () => {
      /* istanbul ignore next */
      cov_4hof8aj8b().f[39]++;
      cov_4hof8aj8b().s[182]++;
      await service.initialize();
    });
    /* istanbul ignore next */
    cov_4hof8aj8b().s[183]++;
    it('should respect exclusion lists when generating roles', async () => {
      /* istanbul ignore next */
      cov_4hof8aj8b().f[40]++;
      const excludeRoles =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[184]++, ['Software Engineer', 'Product Manager']);
      const excludeCompanies =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[185]++, ['TechCorp', 'DataInc']);
      const role =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[186]++, await service.generateUniqueRoleAndCompany(excludeRoles, excludeCompanies));
      /* istanbul ignore next */
      cov_4hof8aj8b().s[187]++;
      expect(excludeRoles).not.toContain(role.jobTitle);
      /* istanbul ignore next */
      cov_4hof8aj8b().s[188]++;
      expect(excludeCompanies).not.toContain(role.company);
    });
    /* istanbul ignore next */
    cov_4hof8aj8b().s[189]++;
    it('should track and avoid previously generated roles', async () => {
      /* istanbul ignore next */
      cov_4hof8aj8b().f[41]++;
      const roles =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[190]++, []);
      const companies =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[191]++, []);
      // Generate multiple roles
      /* istanbul ignore next */
      cov_4hof8aj8b().s[192]++;
      for (let i =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[193]++, 0); i < 5; i++) {
        const role =
        /* istanbul ignore next */
        (cov_4hof8aj8b().s[194]++, await service.generateUniqueRoleAndCompany());
        /* istanbul ignore next */
        cov_4hof8aj8b().s[195]++;
        roles.push(role.jobTitle);
        /* istanbul ignore next */
        cov_4hof8aj8b().s[196]++;
        companies.push(role.company);
      }
      // Check uniqueness
      const uniqueRoles =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[197]++, new Set(roles));
      const uniqueCompanies =
      /* istanbul ignore next */
      (cov_4hof8aj8b().s[198]++, new Set(companies));
      /* istanbul ignore next */
      cov_4hof8aj8b().s[199]++;
      expect(uniqueRoles.size).toBe(5);
      /* istanbul ignore next */
      cov_4hof8aj8b().s[200]++;
      expect(uniqueCompanies.size).toBe(5);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,