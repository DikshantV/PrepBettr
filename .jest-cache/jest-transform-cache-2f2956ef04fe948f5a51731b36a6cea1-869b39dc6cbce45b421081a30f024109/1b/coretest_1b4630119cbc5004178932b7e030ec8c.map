{"file":"/Users/dikshantvashistha/PrepBettr/lib/shared/auth/__tests__/core.test.ts","mappings":"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","names":[],"sources":["/Users/dikshantvashistha/PrepBettr/lib/shared/auth/__tests__/core.test.ts"],"sourcesContent":["/**\n * Unit Tests for Unified Authentication Core Library\n * \n * Tests all core authentication functionality including:\n * - Token verification\n * - Error handling\n * - Performance monitoring\n * - Health checks\n */\n\nimport { \n  UnifiedAuth, \n  UnifiedAuthError, \n  TokenUtils, \n  AuthPerformanceMonitor,\n  getUnifiedAuth,\n  verifyToken,\n  verifyAuthHeader,\n  createAuthError\n} from '../core';\nimport { AuthErrorCode } from '../types';\n\n// Mock Firebase Admin\njest.mock('@/lib/firebase/admin', () => ({\n  getAdminAuth: jest.fn(() => ({\n    verifyIdToken: jest.fn(),\n    verifySessionCookie: jest.fn(),\n    getUser: jest.fn()\n  }))\n}));\n\ndescribe('UnifiedAuth Core Library', () => {\n  let auth: UnifiedAuth;\n  let mockFirebaseAuth: any;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    auth = new UnifiedAuth();\n    \n    // Setup mock Firebase auth\n    const { getAdminAuth } = require('@/lib/firebase/admin');\n    mockFirebaseAuth = getAdminAuth();\n  });\n\n  afterEach(() => {\n    auth.resetMetrics();\n  });\n\n  describe('UnifiedAuth Class', () => {\n    describe('initialization', () => {\n      it('should initialize successfully with default config', async () => {\n        await auth.initialize();\n        expect(auth['initialized']).toBe(true);\n      });\n\n      it('should handle initialization errors', async () => {\n        const { getAdminAuth } = require('@/lib/firebase/admin');\n        getAdminAuth.mockImplementation(() => {\n          throw new Error('Firebase init failed');\n        });\n\n        await expect(auth.initialize()).rejects.toThrow('Firebase init failed');\n      });\n\n      it('should not re-initialize if already initialized', async () => {\n        await auth.initialize();\n        const initSpy = jest.spyOn(auth, 'initialize');\n        await auth.initialize();\n        expect(initSpy).toHaveBeenCalledTimes(1);\n      });\n    });\n\n    describe('token extraction', () => {\n      it('should extract Bearer token correctly', () => {\n        const token = auth.extractBearerToken('Bearer abc123');\n        expect(token).toBe('abc123');\n      });\n\n      it('should return null for invalid auth header', () => {\n        expect(auth.extractBearerToken('')).toBe(null);\n        expect(auth.extractBearerToken('Basic abc123')).toBe(null);\n        expect(auth.extractBearerToken('Bearer')).toBe(null);\n        expect(auth.extractBearerToken(null)).toBe(null);\n        expect(auth.extractBearerToken(undefined)).toBe(null);\n      });\n\n      it('should handle malformed Bearer headers', () => {\n        expect(auth.extractBearerToken('Bearer  ')).toBe('');\n        expect(auth.extractBearerToken('Bearer token1 token2')).toBe('token1');\n      });\n    });\n\n    describe('token verification', () => {\n      it('should verify valid Firebase token', async () => {\n        const mockToken = {\n          uid: 'test-user-id',\n          email: 'test@example.com',\n          email_verified: true,\n          exp: Math.floor(Date.now() / 1000) + 3600,\n          firebase: { sign_in_provider: 'password' }\n        };\n\n        mockFirebaseAuth.verifyIdToken.mockResolvedValue(mockToken);\n        await auth.initialize();\n\n        const result = await auth.verifyToken('valid-token');\n\n        expect(result.valid).toBe(true);\n        expect(result.user?.uid).toBe('test-user-id');\n        expect(result.user?.email).toBe('test@example.com');\n        expect(result.user?.provider).toBe('firebase');\n      });\n\n      it('should handle expired tokens', async () => {\n        mockFirebaseAuth.verifyIdToken.mockRejectedValue({ \n          code: 'auth/id-token-expired' \n        });\n        await auth.initialize();\n\n        const result = await auth.verifyToken('expired-token');\n\n        expect(result.valid).toBe(false);\n        expect(result.errorCode).toBe(AuthErrorCode.EXPIRED_TOKEN);\n      });\n\n      it('should handle invalid tokens', async () => {\n        mockFirebaseAuth.verifyIdToken.mockRejectedValue(new Error('Invalid token'));\n        await auth.initialize();\n\n        const result = await auth.verifyToken('invalid-token');\n\n        expect(result.valid).toBe(false);\n        expect(result.errorCode).toBe(AuthErrorCode.FIREBASE_ERROR);\n      });\n\n      it('should update metrics on token verification', async () => {\n        mockFirebaseAuth.verifyIdToken.mockResolvedValue({\n          uid: 'test-user',\n          email: 'test@example.com',\n          email_verified: true,\n          exp: Math.floor(Date.now() / 1000) + 3600\n        });\n        await auth.initialize();\n\n        await auth.verifyToken('valid-token');\n        \n        const metrics = auth.getMetrics();\n        expect(metrics.totalRequests).toBe(1);\n        expect(metrics.successfulAuth).toBe(1);\n        expect(metrics.failedAuth).toBe(0);\n      });\n    });\n\n    describe('role validation', () => {\n      const mockUser = {\n        uid: 'test-user',\n        email: 'test@example.com',\n        email_verified: true,\n        custom_claims: { roles: ['user', 'editor'] },\n        provider: 'firebase' as const\n      };\n\n      it('should validate user roles correctly', () => {\n        expect(auth.hasRequiredRoles(mockUser, ['user'])).toBe(true);\n        expect(auth.hasRequiredRoles(mockUser, ['admin'])).toBe(false);\n        expect(auth.hasRequiredRoles(mockUser, ['user', 'admin'])).toBe(true); // OR logic\n        expect(auth.hasRequiredRoles(mockUser, [])).toBe(true); // No roles required\n      });\n\n      it('should handle users without roles', () => {\n        const userWithoutRoles = { ...mockUser, custom_claims: {} };\n        expect(auth.hasRequiredRoles(userWithoutRoles, ['user'])).toBe(false);\n        expect(auth.hasRequiredRoles(userWithoutRoles, [])).toBe(true);\n      });\n    });\n\n    describe('session cookie verification', () => {\n      it('should verify valid session cookie', async () => {\n        const mockClaims = {\n          uid: 'test-user',\n          email: 'test@example.com',\n          email_verified: true,\n          exp: Math.floor(Date.now() / 1000) + 3600\n        };\n\n        mockFirebaseAuth.verifySessionCookie.mockResolvedValue(mockClaims);\n        await auth.initialize();\n\n        const result = await auth.verifySessionCookie('valid-session');\n\n        expect(result.valid).toBe(true);\n        expect(result.user?.uid).toBe('test-user');\n      });\n\n      it('should handle invalid session cookie', async () => {\n        mockFirebaseAuth.verifySessionCookie.mockRejectedValue(new Error('Invalid session'));\n        await auth.initialize();\n\n        const result = await auth.verifySessionCookie('invalid-session');\n\n        expect(result.valid).toBe(false);\n        expect(result.errorCode).toBe(AuthErrorCode.INVALID_TOKEN);\n      });\n    });\n\n    describe('health check', () => {\n      it('should return healthy status when initialized', async () => {\n        await auth.initialize();\n        const health = await auth.healthCheck();\n\n        expect(health.healthy).toBe(true);\n        expect(health.details.initialized).toBe(true);\n        expect(health.details.firebase).toBe(true);\n      });\n\n      it('should return unhealthy status when not initialized', async () => {\n        const health = await auth.healthCheck();\n\n        expect(health.healthy).toBe(false);\n        expect(health.details.initialized).toBe(false);\n      });\n    });\n\n    describe('metrics', () => {\n      it('should track authentication metrics', async () => {\n        await auth.initialize();\n        mockFirebaseAuth.verifyIdToken.mockResolvedValue({\n          uid: 'test-user',\n          email: 'test@example.com',\n          email_verified: true,\n          exp: Math.floor(Date.now() / 1000) + 3600\n        });\n\n        // Successful auth\n        await auth.verifyToken('valid-token');\n        \n        // Failed auth\n        mockFirebaseAuth.verifyIdToken.mockRejectedValue(new Error('Invalid'));\n        await auth.verifyToken('invalid-token');\n\n        const metrics = auth.getMetrics();\n        expect(metrics.totalRequests).toBe(2);\n        expect(metrics.successfulAuth).toBe(1);\n        expect(metrics.failedAuth).toBe(1);\n        expect(metrics.errorsByCode[AuthErrorCode.FIREBASE_ERROR]).toBe(1);\n      });\n\n      it('should reset metrics', async () => {\n        await auth.initialize();\n        await auth.verifyToken('test-token');\n        \n        auth.resetMetrics();\n        \n        const metrics = auth.getMetrics();\n        expect(metrics.totalRequests).toBe(0);\n        expect(metrics.successfulAuth).toBe(0);\n        expect(metrics.failedAuth).toBe(0);\n      });\n    });\n  });\n\n  describe('UnifiedAuthError', () => {\n    it('should create error with correct properties', () => {\n      const error = new UnifiedAuthError(\n        AuthErrorCode.INVALID_TOKEN,\n        'Test error',\n        { detail: 'test' },\n        401\n      );\n\n      expect(error.code).toBe(AuthErrorCode.INVALID_TOKEN);\n      expect(error.message).toBe('Test error');\n      expect(error.details).toEqual({ detail: 'test' });\n      expect(error.statusCode).toBe(401);\n      expect(error.name).toBe('UnifiedAuthError');\n    });\n\n    it('should create predefined error types', () => {\n      expect(UnifiedAuthError.missingToken().code).toBe(AuthErrorCode.MISSING_TOKEN);\n      expect(UnifiedAuthError.invalidToken().code).toBe(AuthErrorCode.INVALID_TOKEN);\n      expect(UnifiedAuthError.expiredToken().code).toBe(AuthErrorCode.EXPIRED_TOKEN);\n      expect(UnifiedAuthError.insufficientPermissions(['admin']).code).toBe(AuthErrorCode.INSUFFICIENT_PERMISSIONS);\n      expect(UnifiedAuthError.serviceUnavailable('firebase').code).toBe(AuthErrorCode.SERVICE_UNAVAILABLE);\n    });\n  });\n\n  describe('TokenUtils', () => {\n    const mockJWT = 'eyJhbGciOiJSUzI1NiJ9.eyJ1aWQiOiJ0ZXN0LXVzZXIiLCJleHAiOjE3MDAwMDAwMDB9.signature';\n\n    it('should parse JWT token info', () => {\n      const tokenInfo = TokenUtils.parseTokenInfo(mockJWT);\n      \n      expect(tokenInfo).toBeTruthy();\n      expect(tokenInfo?.provider).toBe('firebase');\n      expect(tokenInfo?.userId).toBe('test-user');\n      expect(tokenInfo?.expiresAt).toBeDefined();\n    });\n\n    it('should handle non-JWT tokens', () => {\n      const tokenInfo = TokenUtils.parseTokenInfo('simple-token');\n      \n      expect(tokenInfo).toBeTruthy();\n      expect(tokenInfo?.provider).toBe('custom');\n      expect(tokenInfo?.value).toBe('simple-token');\n    });\n\n    it('should return null for malformed tokens', () => {\n      const tokenInfo = TokenUtils.parseTokenInfo('malformed.jwt');\n      expect(tokenInfo).toBeNull();\n    });\n\n    it('should check token expiry', () => {\n      const expiredJWT = 'eyJhbGciOiJSUzI1NiJ9.eyJ1aWQiOiJ0ZXN0IiwiZXhwIjoxNTAwMDAwMDAwfQ.signature';\n      const futureJWT = `eyJhbGciOiJSUzI1NiJ9.${Buffer.from(JSON.stringify({\n        uid: 'test',\n        exp: Math.floor(Date.now() / 1000) + 3600\n      })).toString('base64url')}.signature`;\n\n      expect(TokenUtils.isTokenExpired(expiredJWT)).toBe(true);\n      expect(TokenUtils.isTokenExpired(futureJWT)).toBe(false);\n      expect(TokenUtils.isTokenExpired('simple-token')).toBe(false);\n    });\n  });\n\n  describe('AuthPerformanceMonitor', () => {\n    let monitor: AuthPerformanceMonitor;\n\n    beforeEach(() => {\n      monitor = AuthPerformanceMonitor.getInstance();\n      monitor.reset();\n    });\n\n    it('should record timing measurements', () => {\n      monitor.recordTiming('test-operation', 100);\n      monitor.recordTiming('test-operation', 200);\n\n      const stats = monitor.getStats('test-operation');\n      expect(stats.count).toBe(2);\n      expect(stats.average).toBe(150);\n      expect(stats.min).toBe(100);\n      expect(stats.max).toBe(200);\n    });\n\n    it('should provide timing function', (done) => {\n      const endTiming = monitor.startTiming('test-timing');\n      \n      setTimeout(() => {\n        const duration = endTiming();\n        expect(duration).toBeGreaterThan(0);\n        \n        const stats = monitor.getStats('test-timing');\n        expect(stats.count).toBe(1);\n        done();\n      }, 10);\n    });\n\n    it('should calculate percentiles correctly', () => {\n      const values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n      values.forEach(val => monitor.recordTiming('percentile-test', val));\n\n      const stats = monitor.getStats('percentile-test');\n      expect(stats.median).toBe(5);\n      expect(stats.p95).toBe(10);\n      expect(stats.p99).toBe(10);\n    });\n\n    it('should limit stored measurements', () => {\n      // Record more than 100 measurements\n      for (let i = 0; i < 150; i++) {\n        monitor.recordTiming('limit-test', i);\n      }\n\n      const stats = monitor.getStats('limit-test');\n      expect(stats.count).toBe(100); // Should cap at 100\n    });\n  });\n\n  describe('Utility Functions', () => {\n    describe('verifyAuthHeader', () => {\n      beforeEach(async () => {\n        const auth = getUnifiedAuth();\n        await auth.initialize();\n      });\n\n      it('should verify valid auth header', async () => {\n        mockFirebaseAuth.verifyIdToken.mockResolvedValue({\n          uid: 'test-user',\n          email: 'test@example.com',\n          email_verified: true,\n          exp: Math.floor(Date.now() / 1000) + 3600\n        });\n\n        const result = await verifyAuthHeader('Bearer valid-token');\n\n        expect(result.success).toBe(true);\n        expect(result.user?.uid).toBe('test-user');\n      });\n\n      it('should handle missing auth header', async () => {\n        const result = await verifyAuthHeader(null);\n\n        expect(result.success).toBe(false);\n        expect(result.errorCode).toBe(AuthErrorCode.MISSING_TOKEN);\n      });\n\n      it('should handle invalid token format', async () => {\n        const result = await verifyAuthHeader('Invalid format');\n\n        expect(result.success).toBe(false);\n        expect(result.errorCode).toBe(AuthErrorCode.MISSING_TOKEN);\n      });\n    });\n\n    describe('createAuthError', () => {\n      it('should create auth error with all properties', () => {\n        const error = createAuthError(\n          AuthErrorCode.INVALID_TOKEN,\n          'Test error',\n          { test: true },\n          401\n        );\n\n        expect(error).toBeInstanceOf(UnifiedAuthError);\n        expect(error.code).toBe(AuthErrorCode.INVALID_TOKEN);\n        expect(error.message).toBe('Test error');\n        expect(error.details).toEqual({ test: true });\n        expect(error.statusCode).toBe(401);\n      });\n    });\n  });\n\n  describe('Singleton Pattern', () => {\n    it('should return same instance', () => {\n      const instance1 = getUnifiedAuth();\n      const instance2 = getUnifiedAuth();\n      expect(instance1).toBe(instance2);\n    });\n\n    it('should maintain state across instances', async () => {\n      const instance1 = getUnifiedAuth();\n      await instance1.initialize();\n\n      const instance2 = getUnifiedAuth();\n      expect(instance2['initialized']).toBe(true);\n    });\n  });\n});\n"],"version":3}