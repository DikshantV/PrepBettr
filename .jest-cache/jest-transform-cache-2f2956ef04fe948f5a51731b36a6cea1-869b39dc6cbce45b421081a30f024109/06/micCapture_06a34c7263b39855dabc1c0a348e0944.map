{"version":3,"names":["azure_speech_service_1","cov_147ghao2iv","s","require","MicCapture","constructor","f","audioContext","mediaStream","sourceNode","workletNode","sharedBuffer","sharedBufferView","isCapturing","SAMPLE_RATE","FRAME_SIZE","Math","floor","BUFFER_FRAMES","HEADER_SIZE","initialize","navigator","mediaDevices","getUserMedia","audio","sampleRate","channelCount","echoCancellation","noiseSuppression","autoGainControl","AudioContext","workletUrl","metaUrl","b","_a","globalThis","importMeta","url","_c","_b","import","meta","URL","href","_d","audioWorklet","addModule","bufferSize","SharedArrayBuffer","Int16Array","BYTES_PER_ELEMENT","Atomics","store","createMediaStreamSource","AudioWorkletNode","port","postMessage","type","buffer","connect","error","Error","startCapture","state","resume","azureSpeechService","startContinuousRecognition","result","console","log","text","stopCapture","read","frame","readFrame","uint8Frame","Uint8Array","length","i","sample","__await","Promise","resolve","setTimeout","writeIndex","load","readIndex","bufferIndex","nextReadIndex","dispose","disconnect","close","getTracks","forEach","track","stop","capturing","frameSize","exports"],"sources":["/Users/dikshantvashistha/PrepBettr/lib/audio/micCapture.ts"],"sourcesContent":["import { azureSpeechService } from '@/lib/services/azure-speech-service';\n\nexport class MicCapture {\n  private audioContext: AudioContext | null = null;\n  private mediaStream: MediaStream | null = null;\n  private sourceNode: MediaStreamAudioSourceNode | null = null;\n  private workletNode: AudioWorkletNode | null = null;\n  private sharedBuffer: SharedArrayBuffer | null = null;\n  sharedBufferView: Int16Array | null = null;\n  isCapturing = false;\n  \n  // Buffer parameters\n  private readonly SAMPLE_RATE = 16000;\n  private readonly FRAME_SIZE = Math.floor(this.SAMPLE_RATE * 0.1); // 100ms = 1600 samples\n  private readonly BUFFER_FRAMES = 10; // Buffer for 1 second\n  private readonly HEADER_SIZE = 2; // writeIndex, readIndex\n  \n  constructor() {}\n  \n  /**\n   * Initialize the microphone capture system\n   */\n  async initialize(): Promise<void> {\n    try {\n      // Request microphone access\n      this.mediaStream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          sampleRate: 48000,\n          channelCount: 1,\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true\n        }\n      });\n      \n      // Create AudioContext\n      this.audioContext = new AudioContext({ sampleRate: 48000 });\n      \n      // Load the audio worklet\n      let workletUrl;\n      try {\n        // Try to use import.meta.url if available (ES modules)\n        const metaUrl = (globalThis as any).importMeta?.url || (globalThis as any).import?.meta?.url;\n        if (metaUrl) {\n          workletUrl = new URL('./micProcessor.js', metaUrl);\n        } else {\n          // Fallback for testing environments and other cases\n          workletUrl = { href: './micProcessor.js' };\n        }\n      } catch {\n        // Fallback for any errors\n        workletUrl = { href: './micProcessor.js' };\n      }\n      await this.audioContext.audioWorklet.addModule(workletUrl.href);\n      \n      // Create shared buffer for communication\n      const bufferSize = this.HEADER_SIZE + (this.FRAME_SIZE * this.BUFFER_FRAMES);\n      this.sharedBuffer = new SharedArrayBuffer(bufferSize * Int16Array.BYTES_PER_ELEMENT);\n      this.sharedBufferView = new Int16Array(this.sharedBuffer);\n      \n      // Initialize buffer indices\n      Atomics.store(this.sharedBufferView, 0, 0); // writeIndex\n      Atomics.store(this.sharedBufferView, 1, 0); // readIndex\n      \n      // Create audio nodes\n      this.sourceNode = this.audioContext.createMediaStreamSource(this.mediaStream);\n      this.workletNode = new AudioWorkletNode(this.audioContext, 'mic-processor');\n      \n      // Send shared buffer to worklet\n      this.workletNode.port.postMessage({\n        type: 'setSharedBuffer',\n        buffer: this.sharedBuffer\n      });\n      \n      // Connect the audio graph\n      this.sourceNode.connect(this.workletNode);\n      \n    } catch (error) {\n      throw new Error(`Failed to initialize microphone capture: ${error}`);\n    }\n  }\n  \n  /**\n   * Start capturing audio and transcribe using Azure Speech Service\n   */\n  async startCapture(): Promise<void> {\n    if (!this.audioContext || !this.workletNode) {\n      throw new Error('MicCapture not initialized. Call initialize() first.');\n    }\n    \n    if (this.audioContext.state === 'suspended') {\n      await this.audioContext.resume();\n      // Start Azure continuous recognition\n      await azureSpeechService.startContinuousRecognition((result) => {\n        console.log('Recognized Text:', result.text);\n        // TODO: Handle recognized text\n      }, (error) => {\n        console.error('Recognition Error:', error);\n      });\n\n    }\n    \n    this.isCapturing = true;\n  }\n  \n  /**\n   * Stop capturing audio\n   */\n  stopCapture(): void {\n    this.isCapturing = false;\n  }\n  \n  /**\n   * Async iterator that yields Uint8Array frames of â‰¤100ms audio data\n   */\n  async *read(): AsyncIterableIterator<Uint8Array> {\n    if (!this.sharedBufferView) {\n      throw new Error('MicCapture not initialized. Call initialize() first.');\n    }\n    \n    while (this.isCapturing) {\n      const frame = this.readFrame();\n      if (frame) {\n        // Convert Int16Array to Uint8Array (little-endian byte order)\n        const uint8Frame = new Uint8Array(frame.length * 2);\n        for (let i = 0; i < frame.length; i++) {\n          const sample = frame[i];\n          uint8Frame[i * 2] = sample & 0xFF;         // Low byte\n          uint8Frame[i * 2 + 1] = (sample >> 8) & 0xFF; // High byte\n        }\n        yield uint8Frame;\n      } else {\n        // No data available, wait a bit before trying again\n        await new Promise(resolve => setTimeout(resolve, 10));\n      }\n    }\n  }\n  \n  /**\n   * Read a single frame from the shared buffer\n   */\n  readFrame(): Int16Array | null {\n    if (!this.sharedBufferView) return null;\n    \n    const writeIndex = Atomics.load(this.sharedBufferView, 0);\n    const readIndex = Atomics.load(this.sharedBufferView, 1);\n    \n    // Check if data is available\n    if (readIndex === writeIndex) {\n      return null; // No data available\n    }\n    \n    const bufferSize = this.sharedBufferView.length - this.HEADER_SIZE;\n    const frame = new Int16Array(this.FRAME_SIZE);\n    \n    // Read frame from shared buffer\n    for (let i = 0; i < this.FRAME_SIZE; i++) {\n      const bufferIndex = this.HEADER_SIZE + ((readIndex + i) % bufferSize);\n      frame[i] = this.sharedBufferView[bufferIndex];\n    }\n    \n    // Update read index atomically\n    const nextReadIndex = (readIndex + this.FRAME_SIZE) % bufferSize;\n    Atomics.store(this.sharedBufferView, 1, nextReadIndex);\n    \n    return frame;\n  }\n  \n  /**\n   * Cleanup resources\n   */\n  async dispose(): Promise<void> {\n    this.stopCapture();\n    \n    if (this.workletNode) {\n      this.workletNode.disconnect();\n      this.workletNode = null;\n    }\n    \n    if (this.sourceNode) {\n      this.sourceNode.disconnect();\n      this.sourceNode = null;\n    }\n    \n    if (this.audioContext) {\n      await this.audioContext.close();\n      this.audioContext = null;\n    }\n    \n    if (this.mediaStream) {\n      this.mediaStream.getTracks().forEach(track => track.stop());\n      this.mediaStream = null;\n    }\n    \n    this.sharedBuffer = null;\n    this.sharedBufferView = null;\n  }\n  \n  /**\n   * Get the current capture status\n   */\n  get capturing(): boolean {\n    return this.isCapturing;\n  }\n  \n  /**\n   * Get the sample rate\n   */\n  get sampleRate(): number {\n    return this.SAMPLE_RATE;\n  }\n  \n  /**\n   * Get the frame size in samples\n   */\n  get frameSize(): number {\n    return this.FRAME_SIZE;\n  }\n}\n"],"mappingssBAAA;AAAA;AAAA,CAAAC,cAAA,GAAAC,CAAA,QAAAC,OAAA;AAEA,MAAaC,UAAU;EAerBC,YAAA;IAAA;IAAAJ,cAAA,GAAAK,CAAA;IAAAL,cAAA,GAAAC,CAAA;IAdQ,KAAAK,YAAY,GAAwB,IAAI;IAAC;IAAAN,cAAA,GAAAC,CAAA;IACzC,KAAAM,WAAW,GAAuB,IAAI;IAAC;IAAAP,cAAA,GAAAC,CAAA;IACvC,KAAAO,UAAU,GAAsC,IAAI;IAAC;IAAAR,cAAA,GAAAC,CAAA;IACrD,KAAAQ,WAAW,GAA4B,IAAI;IAAC;IAAAT,cAAA,GAAAC,CAAA;IAC5C,KAAAS,YAAY,GAA6B,IAAI;IAAC;IAAAV,cAAA,GAAAC,CAAA;IACtD,KAAAU,gBAAgB,GAAsB,IAAI;IAAC;IAAAX,cAAA,GAAAC,CAAA;IAC3C,KAAAW,WAAW,GAAG,KAAK;IAEnB;IAAA;IAAAZ,cAAA,GAAAC,CAAA;IACiB,KAAAY,WAAW,GAAG,KAAK;IAAC;IAAAb,cAAA,GAAAC,CAAA;IACpB,KAAAa,UAAU,GAAGC,IAAI,CAACC,KAAK,CAAC,IAAI,CAACH,WAAW,GAAG,GAAG,CAAC,CAAC,CAAC;IAAA;IAAAb,cAAA,GAAAC,CAAA;IACjD,KAAAgB,aAAa,GAAG,EAAE,CAAC,CAAC;IAAA;IAAAjB,cAAA,GAAAC,CAAA;IACpB,KAAAiB,WAAW,GAAG,CAAC,CAAC,CAAC;EAEnB;EAEf;;;EAGA,MAAMC,UAAUA,CAAA;IAAA;IAAAnB,cAAA,GAAAK,CAAA;;;;IACd,IAAI;MAAA;MAAAL,cAAA,GAAAC,CAAA;MACF;MACA,IAAI,CAACM,WAAW,GAAG,MAAMa,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QAC3DC,KAAK,EAAE;UACLC,UAAU,EAAE,KAAK;UACjBC,YAAY,EAAE,CAAC;UACfC,gBAAgB,EAAE,IAAI;UACtBC,gBAAgB,EAAE,IAAI;UACtBC,eAAe,EAAE;;OAEpB,CAAC;MAEF;MAAA;MAAA5B,cAAA,GAAAC,CAAA;MACA,IAAI,CAACK,YAAY,GAAG,IAAIuB,YAAY,CAAC;QAAEL,UAAU,EAAE;MAAK,CAAE,CAAC;MAE3D;MACA,IAAIM,UAAU;MAAC;MAAA9B,cAAA,GAAAC,CAAA;MACf,IAAI;QACF;QACA,MAAM8B,OAAO;QAAA;QAAA,CAAA/B,cAAA,GAAAC,CAAA;QAAG;QAAA,CAAAD,cAAA,GAAAgC,CAAA;QAAA;QAAA,CAAAhC,cAAA,GAAAgC,CAAA,YAAAC,EAAA,GAACC,UAAkB,CAACC,UAAU;QAAA;QAAA,CAAAnC,cAAA,GAAAgC,CAAA,WAAAC,EAAA;QAAA;QAAA,CAAAjC,cAAA,GAAAgC,CAAA;QAAA;QAAA,CAAAhC,cAAA,GAAAgC,CAAA,WAAAC,EAAA,CAAEG,GAAG;QAAA;QAAA,CAAApC,cAAA,GAAAgC,CAAA;QAAI;QAAA,CAAAhC,cAAA,GAAAgC,CAAA,YAAAK,EAAA;QAAA;QAAA,CAAArC,cAAA,GAAAgC,CAAA,YAAAM,EAAA,GAACJ,UAAkB,CAACK,MAAM;QAAA;QAAA,CAAAvC,cAAA,GAAAgC,CAAA,WAAAM,EAAA;QAAA;QAAA,CAAAtC,cAAA,GAAAgC,CAAA;QAAA;QAAA,CAAAhC,cAAA,GAAAgC,CAAA,WAAAM,EAAA,CAAEE,IAAI;QAAA;QAAA,CAAAxC,cAAA,GAAAgC,CAAA,WAAAK,EAAA;QAAA;QAAA,CAAArC,cAAA,GAAAgC,CAAA;QAAA;QAAA,CAAAhC,cAAA,GAAAgC,CAAA,WAAAK,EAAA,CAAED,GAAG;QAAC;QAAApC,cAAA,GAAAC,CAAA;QAC7F,IAAI8B,OAAO,EAAE;UAAA;UAAA/B,cAAA,GAAAgC,CAAA;UAAAhC,cAAA,GAAAC,CAAA;UACX6B,UAAU,GAAG,IAAIW,GAAG,CAAC,mBAAmB,EAAEV,OAAO,CAAC;QACpD,CAAC,MAAM;UAAA;UAAA/B,cAAA,GAAAgC,CAAA;UAAAhC,cAAA,GAAAC,CAAA;UACL;UACA6B,UAAU,GAAG;YAAEY,IAAI,EAAE;UAAmB,CAAE;QAC5C;MACF,CAAC,CAAC,OAAAC,EAAA,EAAM;QAAA;QAAA3C,cAAA,GAAAC,CAAA;QACN;QACA6B,UAAU,GAAG;UAAEY,IAAI,EAAE;QAAmB,CAAE;MAC5C;MAAC;MAAA1C,cAAA,GAAAC,CAAA;MACD,MAAM,IAAI,CAACK,YAAY,CAACsC,YAAY,CAACC,SAAS,CAACf,UAAU,CAACY,IAAI,CAAC;MAE/D;MACA,MAAMI,UAAU;MAAA;MAAA,CAAA9C,cAAA,GAAAC,CAAA,QAAG,IAAI,CAACiB,WAAW,GAAI,IAAI,CAACJ,UAAU,GAAG,IAAI,CAACG,aAAc;MAAC;MAAAjB,cAAA,GAAAC,CAAA;MAC7E,IAAI,CAACS,YAAY,GAAG,IAAIqC,iBAAiB,CAACD,UAAU,GAAGE,UAAU,CAACC,iBAAiB,CAAC;MAAC;MAAAjD,cAAA,GAAAC,CAAA;MACrF,IAAI,CAACU,gBAAgB,GAAG,IAAIqC,UAAU,CAAC,IAAI,CAACtC,YAAY,CAAC;MAEzD;MAAA;MAAAV,cAAA,GAAAC,CAAA;MACAiD,OAAO,CAACC,KAAK,CAAC,IAAI,CAACxC,gBAAgB,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MAAA;MAAAX,cAAA,GAAAC,CAAA;MAC5CiD,OAAO,CAACC,KAAK,CAAC,IAAI,CAACxC,gBAAgB,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MAE5C;MAAA;MAAAX,cAAA,GAAAC,CAAA;MACA,IAAI,CAACO,UAAU,GAAG,IAAI,CAACF,YAAY,CAAC8C,uBAAuB,CAAC,IAAI,CAAC7C,WAAW,CAAC;MAAC;MAAAP,cAAA,GAAAC,CAAA;MAC9E,IAAI,CAACQ,WAAW,GAAG,IAAI4C,gBAAgB,CAAC,IAAI,CAAC/C,YAAY,EAAE,eAAe,CAAC;MAE3E;MAAA;MAAAN,cAAA,GAAAC,CAAA;MACA,IAAI,CAACQ,WAAW,CAAC6C,IAAI,CAACC,WAAW,CAAC;QAChCC,IAAI,EAAE,iBAAiB;QACvBC,MAAM,EAAE,IAAI,CAAC/C;OACd,CAAC;MAEF;MAAA;MAAAV,cAAA,GAAAC,CAAA;MACA,IAAI,CAACO,UAAU,CAACkD,OAAO,CAAC,IAAI,CAACjD,WAAW,CAAC;IAE3C,CAAC,CAAC,OAAOkD,KAAK,EAAE;MAAA;MAAA3D,cAAA,GAAAC,CAAA;MACd,MAAM,IAAI2D,KAAK,CAAC,4CAA4CD,KAAK,EAAE,CAAC;IACtE;EACF;EAEA;;;EAGA,MAAME,YAAYA,CAAA;IAAA;IAAA7D,cAAA,GAAAK,CAAA;IAAAL,cAAA,GAAAC,CAAA;IAChB;IAAI;IAAA,CAAAD,cAAA,GAAAgC,CAAA,YAAC,IAAI,CAAC1B,YAAY;IAAA;IAAA,CAAAN,cAAA,GAAAgC,CAAA,WAAI,CAAC,IAAI,CAACvB,WAAW,GAAE;MAAA;MAAAT,cAAA,GAAAgC,CAAA;MAAAhC,cAAA,GAAAC,CAAA;MAC3C,MAAM,IAAI2D,KAAK,CAAC,sDAAsD,CAAC;IACzE,CAAC;IAAA;IAAA;MAAA5D,cAAA,GAAAgC,CAAA;IAAA;IAAAhC,cAAA,GAAAC,CAAA;IAED,IAAI,IAAI,CAACK,YAAY,CAACwD,KAAK,KAAK,WAAW,EAAE;MAAA;MAAA9D,cAAA,GAAAgC,CAAA;MAAAhC,cAAA,GAAAC,CAAA;MAC3C,MAAM,IAAI,CAACK,YAAY,CAACyD,MAAM,EAAE;MAChC;MAAA;MAAA/D,cAAA,GAAAC,CAAA;MACA,MAAMF,sBAAA,CAAAiE,kBAAkB,CAACC,0BAA0B,CAAEC,MAAM,IAAI;QAAA;QAAAlE,cAAA,GAAAK,CAAA;QAAAL,cAAA,GAAAC,CAAA;QAC7DkE,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,MAAM,CAACG,IAAI,CAAC;QAC5C;MACF,CAAC,EAAGV,KAAK,IAAI;QAAA;QAAA3D,cAAA,GAAAK,CAAA;QAAAL,cAAA,GAAAC,CAAA;QACXkE,OAAO,CAACR,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC5C,CAAC,CAAC;IAEJ,CAAC;IAAA;IAAA;MAAA3D,cAAA,GAAAgC,CAAA;IAAA;IAAAhC,cAAA,GAAAC,CAAA;IAED,IAAI,CAACW,WAAW,GAAG,IAAI;EACzB;EAEA;;;EAGA0D,WAAWA,CAAA;IAAA;IAAAtE,cAAA,GAAAK,CAAA;IAAAL,cAAA,GAAAC,CAAA;IACT,IAAI,CAACW,WAAW,GAAG,KAAK;EAC1B;EAEA;;;EAGO2D,IAAIA,CAAA;IAAA;IAAAvE,cAAA,GAAAK,CAAA;IAAAL,cAAA,GAAAC,CAAA;;;;;MACT,IAAI,CAAC,IAAI,CAACU,gBAAgB,EAAE;QAAA;QAAAX,cAAA,GAAAgC,CAAA;QAAAhC,cAAA,GAAAC,CAAA;QAC1B,MAAM,IAAI2D,KAAK,CAAC,sDAAsD,CAAC;MACzE,CAAC;MAAA;MAAA;QAAA5D,cAAA,GAAAgC,CAAA;MAAA;MAAAhC,cAAA,GAAAC,CAAA;MAED,OAAO,IAAI,CAACW,WAAW,EAAE;QACvB,MAAM4D,KAAK;QAAA;QAAA,CAAAxE,cAAA,GAAAC,CAAA,QAAG,IAAI,CAACwE,SAAS,EAAE;QAAC;QAAAzE,cAAA,GAAAC,CAAA;QAC/B,IAAIuE,KAAK,EAAE;UAAA;UAAAxE,cAAA,GAAAgC,CAAA;UACT;UACA,MAAM0C,UAAU;UAAA;UAAA,CAAA1E,cAAA,GAAAC,CAAA,QAAG,IAAI0E,UAAU,CAACH,KAAK,CAACI,MAAM,GAAG,CAAC,CAAC;UAAC;UAAA5E,cAAA,GAAAC,CAAA;UACpD,KAAK,IAAI4E,CAAC;UAAA;UAAA,CAAA7E,cAAA,GAAAC,CAAA,QAAG,CAAC,GAAE4E,CAAC,GAAGL,KAAK,CAACI,MAAM,EAAEC,CAAC,EAAE,EAAE;YACrC,MAAMC,MAAM;YAAA;YAAA,CAAA9E,cAAA,GAAAC,CAAA,QAAGuE,KAAK,CAACK,CAAC,CAAC;YAAC;YAAA7E,cAAA,GAAAC,CAAA;YACxByE,UAAU,CAACG,CAAC,GAAG,CAAC,CAAC,GAAGC,MAAM,GAAG,IAAI,CAAC,CAAS;YAAA;YAAA9E,cAAA,GAAAC,CAAA;YAC3CyE,UAAU,CAACG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAIC,MAAM,IAAI,CAAC,GAAI,IAAI,CAAC,CAAC;UAChD;UAAC;UAAA9E,cAAA,GAAAC,CAAA;UACD,YAAA8E,OAAA,CAAML,UAAU;QAClB,CAAC,MAAM;UAAA;UAAA1E,cAAA,GAAAgC,CAAA;UAAAhC,cAAA,GAAAC,CAAA;UACL;UACA,MAAA8E,OAAA,CAAM,IAAIC,OAAO,CAACC,OAAO,IAAI;YAAA;YAAAjF,cAAA,GAAAK,CAAA;YAAAL,cAAA,GAAAC,CAAA;YAAA,OAAAiF,UAAU,CAACD,OAAO,EAAE,EAAE,CAAC;UAAD,CAAC,CAAC;QACvD;MACF;IACF,CAAC;;EAED;;;EAGAR,SAASA,CAAA;IAAA;IAAAzE,cAAA,GAAAK,CAAA;IAAAL,cAAA,GAAAC,CAAA;IACP,IAAI,CAAC,IAAI,CAACU,gBAAgB,EAAE;MAAA;MAAAX,cAAA,GAAAgC,CAAA;MAAAhC,cAAA,GAAAC,CAAA;MAAA,OAAO,IAAI;IAAA,CAAC;IAAA;IAAA;MAAAD,cAAA,GAAAgC,CAAA;IAAA;IAExC,MAAMmD,UAAU;IAAA;IAAA,CAAAnF,cAAA,GAAAC,CAAA,QAAGiD,OAAO,CAACkC,IAAI,CAAC,IAAI,CAACzE,gBAAgB,EAAE,CAAC,CAAC;IACzD,MAAM0E,SAAS;IAAA;IAAA,CAAArF,cAAA,GAAAC,CAAA,QAAGiD,OAAO,CAACkC,IAAI,CAAC,IAAI,CAACzE,gBAAgB,EAAE,CAAC,CAAC;IAExD;IAAA;IAAAX,cAAA,GAAAC,CAAA;IACA,IAAIoF,SAAS,KAAKF,UAAU,EAAE;MAAA;MAAAnF,cAAA,GAAAgC,CAAA;MAAAhC,cAAA,GAAAC,CAAA;MAC5B,OAAO,IAAI,CAAC,CAAC;IACf,CAAC;IAAA;IAAA;MAAAD,cAAA,GAAAgC,CAAA;IAAA;IAED,MAAMc,UAAU;IAAA;IAAA,CAAA9C,cAAA,GAAAC,CAAA,QAAG,IAAI,CAACU,gBAAgB,CAACiE,MAAM,GAAG,IAAI,CAAC1D,WAAW;IAClE,MAAMsD,KAAK;IAAA;IAAA,CAAAxE,cAAA,GAAAC,CAAA,QAAG,IAAI+C,UAAU,CAAC,IAAI,CAAClC,UAAU,CAAC;IAE7C;IAAA;IAAAd,cAAA,GAAAC,CAAA;IACA,KAAK,IAAI4E,CAAC;IAAA;IAAA,CAAA7E,cAAA,GAAAC,CAAA,QAAG,CAAC,GAAE4E,CAAC,GAAG,IAAI,CAAC/D,UAAU,EAAE+D,CAAC,EAAE,EAAE;MACxC,MAAMS,WAAW;MAAA;MAAA,CAAAtF,cAAA,GAAAC,CAAA,QAAG,IAAI,CAACiB,WAAW,GAAI,CAACmE,SAAS,GAAGR,CAAC,IAAI/B,UAAW;MAAC;MAAA9C,cAAA,GAAAC,CAAA;MACtEuE,KAAK,CAACK,CAAC,CAAC,GAAG,IAAI,CAAClE,gBAAgB,CAAC2E,WAAW,CAAC;IAC/C;IAEA;IACA,MAAMC,aAAa;IAAA;IAAA,CAAAvF,cAAA,GAAAC,CAAA,QAAG,CAACoF,SAAS,GAAG,IAAI,CAACvE,UAAU,IAAIgC,UAAU;IAAC;IAAA9C,cAAA,GAAAC,CAAA;IACjEiD,OAAO,CAACC,KAAK,CAAC,IAAI,CAACxC,gBAAgB,EAAE,CAAC,EAAE4E,aAAa,CAAC;IAAC;IAAAvF,cAAA,GAAAC,CAAA;IAEvD,OAAOuE,KAAK;EACd;EAEA;;;EAGA,MAAMgB,OAAOA,CAAA;IAAA;IAAAxF,cAAA,GAAAK,CAAA;IAAAL,cAAA,GAAAC,CAAA;IACX,IAAI,CAACqE,WAAW,EAAE;IAAC;IAAAtE,cAAA,GAAAC,CAAA;IAEnB,IAAI,IAAI,CAACQ,WAAW,EAAE;MAAA;MAAAT,cAAA,GAAAgC,CAAA;MAAAhC,cAAA,GAAAC,CAAA;MACpB,IAAI,CAACQ,WAAW,CAACgF,UAAU,EAAE;MAAC;MAAAzF,cAAA,GAAAC,CAAA;MAC9B,IAAI,CAACQ,WAAW,GAAG,IAAI;IACzB,CAAC;IAAA;IAAA;MAAAT,cAAA,GAAAgC,CAAA;IAAA;IAAAhC,cAAA,GAAAC,CAAA;IAED,IAAI,IAAI,CAACO,UAAU,EAAE;MAAA;MAAAR,cAAA,GAAAgC,CAAA;MAAAhC,cAAA,GAAAC,CAAA;MACnB,IAAI,CAACO,UAAU,CAACiF,UAAU,EAAE;MAAC;MAAAzF,cAAA,GAAAC,CAAA;MAC7B,IAAI,CAACO,UAAU,GAAG,IAAI;IACxB,CAAC;IAAA;IAAA;MAAAR,cAAA,GAAAgC,CAAA;IAAA;IAAAhC,cAAA,GAAAC,CAAA;IAED,IAAI,IAAI,CAACK,YAAY,EAAE;MAAA;MAAAN,cAAA,GAAAgC,CAAA;MAAAhC,cAAA,GAAAC,CAAA;MACrB,MAAM,IAAI,CAACK,YAAY,CAACoF,KAAK,EAAE;MAAC;MAAA1F,cAAA,GAAAC,CAAA;MAChC,IAAI,CAACK,YAAY,GAAG,IAAI;IAC1B,CAAC;IAAA;IAAA;MAAAN,cAAA,GAAAgC,CAAA;IAAA;IAAAhC,cAAA,GAAAC,CAAA;IAED,IAAI,IAAI,CAACM,WAAW,EAAE;MAAA;MAAAP,cAAA,GAAAgC,CAAA;MAAAhC,cAAA,GAAAC,CAAA;MACpB,IAAI,CAACM,WAAW,CAACoF,SAAS,EAAE,CAACC,OAAO,CAACC,KAAK,IAAI;QAAA;QAAA7F,cAAA,GAAAK,CAAA;QAAAL,cAAA,GAAAC,CAAA;QAAA,OAAA4F,KAAK,CAACC,IAAI,EAAE;MAAF,CAAE,CAAC;MAAC;MAAA9F,cAAA,GAAAC,CAAA;MAC5D,IAAI,CAACM,WAAW,GAAG,IAAI;IACzB,CAAC;IAAA;IAAA;MAAAP,cAAA,GAAAgC,CAAA;IAAA;IAAAhC,cAAA,GAAAC,CAAA;IAED,IAAI,CAACS,YAAY,GAAG,IAAI;IAAC;IAAAV,cAAA,GAAAC,CAAA;IACzB,IAAI,CAACU,gBAAgB,GAAG,IAAI;EAC9B;EAEA;;;EAGA,IAAIoF,SAASA,CAAA;IAAA;IAAA/F,cAAA,GAAAK,CAAA;IAAAL,cAAA,GAAAC,CAAA;IACX,OAAO,IAAI,CAACW,WAAW;EACzB;EAEA;;;EAGA,IAAIY,UAAUA,CAAA;IAAA;IAAAxB,cAAA,GAAAK,CAAA;IAAAL,cAAA,GAAAC,CAAA;IACZ,OAAO,IAAI,CAACY,WAAW;EACzB;EAEA;;;EAGA,IAAImF,SAASA,CAAA;IAAA;IAAAhG,cAAA,GAAAK,CAAA;IAAAL,cAAA,GAAAC,CAAA;IACX,OAAO,IAAI,CAACa,UAAU;EACxB;;AACD;AAAAd,cAAA,GAAAC,CAAA;AAxNDgG,OAAA,CAAA9F,UAAA,GAAAA,UAAA","ignoreList":[]}