5238cd42b33e4e3540880d2df538ce3b
"use strict";

/* istanbul ignore next */
function cov_147ghao2iv() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/audio/micCapture.ts";
  var hash = "c884cd465af69e535550b99a3dca50d9419bf7b3";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/audio/micCapture.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 14
        },
        end: {
          line: 2,
          column: 126
        }
      },
      "1": {
        start: {
          line: 2,
          column: 55
        },
        end: {
          line: 2,
          column: 124
        }
      },
      "2": {
        start: {
          line: 3,
          column: 23
        },
        end: {
          line: 14,
          column: 1
        }
      },
      "3": {
        start: {
          line: 4,
          column: 4
        },
        end: {
          line: 4,
          column: 91
        }
      },
      "4": {
        start: {
          line: 4,
          column: 31
        },
        end: {
          line: 4,
          column: 91
        }
      },
      "5": {
        start: {
          line: 5,
          column: 12
        },
        end: {
          line: 5,
          column: 54
        }
      },
      "6": {
        start: {
          line: 5,
          column: 63
        },
        end: {
          line: 5,
          column: 65
        }
      },
      "7": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 6,
          column: 220
        }
      },
      "8": {
        start: {
          line: 6,
          column: 202
        },
        end: {
          line: 6,
          column: 214
        }
      },
      "9": {
        start: {
          line: 7,
          column: 30
        },
        end: {
          line: 7,
          column: 97
        }
      },
      "10": {
        start: {
          line: 7,
          column: 52
        },
        end: {
          line: 7,
          column: 94
        }
      },
      "11": {
        start: {
          line: 8,
          column: 26
        },
        end: {
          line: 8,
          column: 170
        }
      },
      "12": {
        start: {
          line: 8,
          column: 38
        },
        end: {
          line: 8,
          column: 145
        }
      },
      "13": {
        start: {
          line: 8,
          column: 60
        },
        end: {
          line: 8,
          column: 142
        }
      },
      "14": {
        start: {
          line: 8,
          column: 97
        },
        end: {
          line: 8,
          column: 138
        }
      },
      "15": {
        start: {
          line: 8,
          column: 146
        },
        end: {
          line: 8,
          column: 168
        }
      },
      "16": {
        start: {
          line: 8,
          column: 153
        },
        end: {
          line: 8,
          column: 168
        }
      },
      "17": {
        start: {
          line: 9,
          column: 28
        },
        end: {
          line: 9,
          column: 84
        }
      },
      "18": {
        start: {
          line: 9,
          column: 34
        },
        end: {
          line: 9,
          column: 48
        }
      },
      "19": {
        start: {
          line: 9,
          column: 63
        },
        end: {
          line: 9,
          column: 82
        }
      },
      "20": {
        start: {
          line: 10,
          column: 23
        },
        end: {
          line: 10,
          column: 122
        }
      },
      "21": {
        start: {
          line: 11,
          column: 30
        },
        end: {
          line: 11,
          column: 52
        }
      },
      "22": {
        start: {
          line: 12,
          column: 29
        },
        end: {
          line: 12,
          column: 52
        }
      },
      "23": {
        start: {
          line: 13,
          column: 28
        },
        end: {
          line: 13,
          column: 84
        }
      },
      "24": {
        start: {
          line: 13,
          column: 59
        },
        end: {
          line: 13,
          column: 84
        }
      },
      "25": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 15,
          column: 62
        }
      },
      "26": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 16,
          column: 28
        }
      },
      "27": {
        start: {
          line: 17,
          column: 31
        },
        end: {
          line: 17,
          column: 77
        }
      },
      "28": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 33
        }
      },
      "29": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 32
        }
      },
      "30": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 31
        }
      },
      "31": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 32
        }
      },
      "32": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 33
        }
      },
      "33": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 37
        }
      },
      "34": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 33
        }
      },
      "35": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 33
        }
      },
      "36": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 61
        }
      },
      "37": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 32
        }
      },
      "38": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 29
        }
      },
      "39": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "40": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 48,
          column: 15
        }
      },
      "41": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 72
        }
      },
      "42": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 67,
          column: 13
        }
      },
      "43": {
        start: {
          line: 55,
          column: 32
        },
        end: {
          line: 55,
          column: 232
        }
      },
      "44": {
        start: {
          line: 56,
          column: 16
        },
        end: {
          line: 62,
          column: 17
        }
      },
      "45": {
        start: {
          line: 57,
          column: 20
        },
        end: {
          line: 57,
          column: 71
        }
      },
      "46": {
        start: {
          line: 61,
          column: 20
        },
        end: {
          line: 61,
          column: 63
        }
      },
      "47": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 66,
          column: 59
        }
      },
      "48": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 76
        }
      },
      "49": {
        start: {
          line: 70,
          column: 31
        },
        end: {
          line: 70,
          column: 88
        }
      },
      "50": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 97
        }
      },
      "51": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 70
        }
      },
      "52": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 55
        }
      },
      "53": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 55
        }
      },
      "54": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 90
        }
      },
      "55": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 88
        }
      },
      "56": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 83,
          column: 15
        }
      },
      "57": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 54
        }
      },
      "58": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 81
        }
      },
      "59": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "60": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 84
        }
      },
      "61": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "62": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 45
        }
      },
      "63": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 106,
          column: 15
        }
      },
      "64": {
        start: {
          line: 102,
          column: 16
        },
        end: {
          line: 102,
          column: 61
        }
      },
      "65": {
        start: {
          line: 105,
          column: 16
        },
        end: {
          line: 105,
          column: 59
        }
      },
      "66": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 108,
          column: 32
        }
      },
      "67": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 33
        }
      },
      "68": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 141,
          column: 11
        }
      },
      "69": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 123,
          column: 13
        }
      },
      "70": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 122,
          column: 88
        }
      },
      "71": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 140,
          column: 13
        }
      },
      "72": {
        start: {
          line: 125,
          column: 30
        },
        end: {
          line: 125,
          column: 46
        }
      },
      "73": {
        start: {
          line: 126,
          column: 16
        },
        end: {
          line: 139,
          column: 17
        }
      },
      "74": {
        start: {
          line: 128,
          column: 39
        },
        end: {
          line: 128,
          column: 71
        }
      },
      "75": {
        start: {
          line: 129,
          column: 20
        },
        end: {
          line: 133,
          column: 21
        }
      },
      "76": {
        start: {
          line: 129,
          column: 33
        },
        end: {
          line: 129,
          column: 34
        }
      },
      "77": {
        start: {
          line: 130,
          column: 39
        },
        end: {
          line: 130,
          column: 47
        }
      },
      "78": {
        start: {
          line: 131,
          column: 24
        },
        end: {
          line: 131,
          column: 58
        }
      },
      "79": {
        start: {
          line: 132,
          column: 24
        },
        end: {
          line: 132,
          column: 69
        }
      },
      "80": {
        start: {
          line: 134,
          column: 20
        },
        end: {
          line: 134,
          column: 52
        }
      },
      "81": {
        start: {
          line: 138,
          column: 20
        },
        end: {
          line: 138,
          column: 83
        }
      },
      "82": {
        start: {
          line: 138,
          column: 57
        },
        end: {
          line: 138,
          column: 80
        }
      },
      "83": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 148,
          column: 24
        }
      },
      "84": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 24
        }
      },
      "85": {
        start: {
          line: 149,
          column: 27
        },
        end: {
          line: 149,
          column: 65
        }
      },
      "86": {
        start: {
          line: 150,
          column: 26
        },
        end: {
          line: 150,
          column: 64
        }
      },
      "87": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 154,
          column: 9
        }
      },
      "88": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 24
        }
      },
      "89": {
        start: {
          line: 155,
          column: 27
        },
        end: {
          line: 155,
          column: 74
        }
      },
      "90": {
        start: {
          line: 156,
          column: 22
        },
        end: {
          line: 156,
          column: 53
        }
      },
      "91": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 161,
          column: 9
        }
      },
      "92": {
        start: {
          line: 158,
          column: 21
        },
        end: {
          line: 158,
          column: 22
        }
      },
      "93": {
        start: {
          line: 159,
          column: 32
        },
        end: {
          line: 159,
          column: 81
        }
      },
      "94": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 160,
          column: 58
        }
      },
      "95": {
        start: {
          line: 163,
          column: 30
        },
        end: {
          line: 163,
          column: 72
        }
      },
      "96": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 164,
          column: 63
        }
      },
      "97": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 165,
          column: 21
        }
      },
      "98": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 171,
          column: 27
        }
      },
      "99": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 175,
          column: 9
        }
      },
      "100": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 173,
          column: 42
        }
      },
      "101": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 36
        }
      },
      "102": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 179,
          column: 9
        }
      },
      "103": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 41
        }
      },
      "104": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 178,
          column: 35
        }
      },
      "105": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 183,
          column: 9
        }
      },
      "106": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 44
        }
      },
      "107": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 37
        }
      },
      "108": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 187,
          column: 9
        }
      },
      "109": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 185,
          column: 72
        }
      },
      "110": {
        start: {
          line: 185,
          column: 58
        },
        end: {
          line: 185,
          column: 70
        }
      },
      "111": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 36
        }
      },
      "112": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 188,
          column: 33
        }
      },
      "113": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 189,
          column: 37
        }
      },
      "114": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 195,
          column: 32
        }
      },
      "115": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 201,
          column: 32
        }
      },
      "116": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 207,
          column: 31
        }
      },
      "117": {
        start: {
          line: 210,
          column: 0
        },
        end: {
          line: 210,
          column: 32
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 40
          },
          end: {
            line: 2,
            column: 41
          }
        },
        loc: {
          start: {
            line: 2,
            column: 53
          },
          end: {
            line: 2,
            column: 126
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 3,
            column: 58
          },
          end: {
            line: 3,
            column: 59
          }
        },
        loc: {
          start: {
            line: 3,
            column: 100
          },
          end: {
            line: 14,
            column: 1
          }
        },
        line: 3
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 6,
            column: 188
          },
          end: {
            line: 6,
            column: 189
          }
        },
        loc: {
          start: {
            line: 6,
            column: 200
          },
          end: {
            line: 6,
            column: 216
          }
        },
        line: 6
      },
      "3": {
        name: "awaitReturn",
        decl: {
          start: {
            line: 7,
            column: 13
          },
          end: {
            line: 7,
            column: 24
          }
        },
        loc: {
          start: {
            line: 7,
            column: 28
          },
          end: {
            line: 7,
            column: 99
          }
        },
        line: 7
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 7,
            column: 37
          },
          end: {
            line: 7,
            column: 38
          }
        },
        loc: {
          start: {
            line: 7,
            column: 50
          },
          end: {
            line: 7,
            column: 96
          }
        },
        line: 7
      },
      "5": {
        name: "verb",
        decl: {
          start: {
            line: 8,
            column: 13
          },
          end: {
            line: 8,
            column: 17
          }
        },
        loc: {
          start: {
            line: 8,
            column: 24
          },
          end: {
            line: 8,
            column: 172
          }
        },
        line: 8
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 8,
            column: 45
          },
          end: {
            line: 8,
            column: 46
          }
        },
        loc: {
          start: {
            line: 8,
            column: 58
          },
          end: {
            line: 8,
            column: 144
          }
        },
        line: 8
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 8,
            column: 79
          },
          end: {
            line: 8,
            column: 80
          }
        },
        loc: {
          start: {
            line: 8,
            column: 95
          },
          end: {
            line: 8,
            column: 140
          }
        },
        line: 8
      },
      "8": {
        name: "resume",
        decl: {
          start: {
            line: 9,
            column: 13
          },
          end: {
            line: 9,
            column: 19
          }
        },
        loc: {
          start: {
            line: 9,
            column: 26
          },
          end: {
            line: 9,
            column: 86
          }
        },
        line: 9
      },
      "9": {
        name: "step",
        decl: {
          start: {
            line: 10,
            column: 13
          },
          end: {
            line: 10,
            column: 17
          }
        },
        loc: {
          start: {
            line: 10,
            column: 21
          },
          end: {
            line: 10,
            column: 124
          }
        },
        line: 10
      },
      "10": {
        name: "fulfill",
        decl: {
          start: {
            line: 11,
            column: 13
          },
          end: {
            line: 11,
            column: 20
          }
        },
        loc: {
          start: {
            line: 11,
            column: 28
          },
          end: {
            line: 11,
            column: 54
          }
        },
        line: 11
      },
      "11": {
        name: "reject",
        decl: {
          start: {
            line: 12,
            column: 13
          },
          end: {
            line: 12,
            column: 19
          }
        },
        loc: {
          start: {
            line: 12,
            column: 27
          },
          end: {
            line: 12,
            column: 54
          }
        },
        line: 12
      },
      "12": {
        name: "settle",
        decl: {
          start: {
            line: 13,
            column: 13
          },
          end: {
            line: 13,
            column: 19
          }
        },
        loc: {
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 86
          }
        },
        line: 13
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 19
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 23
          },
          end: {
            line: 90,
            column: 5
          }
        },
        line: 36
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 94,
            column: 4
          },
          end: {
            line: 94,
            column: 5
          }
        },
        loc: {
          start: {
            line: 94,
            column: 25
          },
          end: {
            line: 109,
            column: 5
          }
        },
        line: 94
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 101,
            column: 87
          },
          end: {
            line: 101,
            column: 88
          }
        },
        loc: {
          start: {
            line: 101,
            column: 99
          },
          end: {
            line: 104,
            column: 13
          }
        },
        line: 101
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 104,
            column: 15
          },
          end: {
            line: 104,
            column: 16
          }
        },
        loc: {
          start: {
            line: 104,
            column: 26
          },
          end: {
            line: 106,
            column: 13
          }
        },
        line: 104
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 113,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        },
        loc: {
          start: {
            line: 113,
            column: 18
          },
          end: {
            line: 115,
            column: 5
          }
        },
        line: 113
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 119,
            column: 5
          }
        },
        loc: {
          start: {
            line: 119,
            column: 11
          },
          end: {
            line: 142,
            column: 5
          }
        },
        line: 119
      },
      "20": {
        name: "read_1",
        decl: {
          start: {
            line: 120,
            column: 59
          },
          end: {
            line: 120,
            column: 65
          }
        },
        loc: {
          start: {
            line: 120,
            column: 68
          },
          end: {
            line: 141,
            column: 9
          }
        },
        line: 120
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 138,
            column: 46
          },
          end: {
            line: 138,
            column: 47
          }
        },
        loc: {
          start: {
            line: 138,
            column: 57
          },
          end: {
            line: 138,
            column: 80
          }
        },
        line: 138
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 146,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        },
        loc: {
          start: {
            line: 146,
            column: 16
          },
          end: {
            line: 166,
            column: 5
          }
        },
        line: 146
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 170,
            column: 4
          },
          end: {
            line: 170,
            column: 5
          }
        },
        loc: {
          start: {
            line: 170,
            column: 20
          },
          end: {
            line: 190,
            column: 5
          }
        },
        line: 170
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 185,
            column: 49
          },
          end: {
            line: 185,
            column: 50
          }
        },
        loc: {
          start: {
            line: 185,
            column: 58
          },
          end: {
            line: 185,
            column: 70
          }
        },
        line: 185
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 194,
            column: 4
          },
          end: {
            line: 194,
            column: 5
          }
        },
        loc: {
          start: {
            line: 194,
            column: 20
          },
          end: {
            line: 196,
            column: 5
          }
        },
        line: 194
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 200,
            column: 4
          },
          end: {
            line: 200,
            column: 5
          }
        },
        loc: {
          start: {
            line: 200,
            column: 21
          },
          end: {
            line: 202,
            column: 5
          }
        },
        line: 200
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 206,
            column: 4
          },
          end: {
            line: 206,
            column: 5
          }
        },
        loc: {
          start: {
            line: 206,
            column: 20
          },
          end: {
            line: 208,
            column: 5
          }
        },
        line: 206
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 14
          },
          end: {
            line: 2,
            column: 126
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 15
          },
          end: {
            line: 2,
            column: 19
          }
        }, {
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 35
          }
        }, {
          start: {
            line: 2,
            column: 40
          },
          end: {
            line: 2,
            column: 126
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 62
          },
          end: {
            line: 2,
            column: 123
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 89
          },
          end: {
            line: 2,
            column: 105
          }
        }, {
          start: {
            line: 2,
            column: 109
          },
          end: {
            line: 2,
            column: 123
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 23
          },
          end: {
            line: 14,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 24
          },
          end: {
            line: 3,
            column: 28
          }
        }, {
          start: {
            line: 3,
            column: 32
          },
          end: {
            line: 3,
            column: 53
          }
        }, {
          start: {
            line: 3,
            column: 58
          },
          end: {
            line: 14,
            column: 1
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 4,
            column: 4
          },
          end: {
            line: 4,
            column: 91
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 4,
            column: 4
          },
          end: {
            line: 4,
            column: 91
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 4
      },
      "4": {
        loc: {
          start: {
            line: 5,
            column: 37
          },
          end: {
            line: 5,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 37
          },
          end: {
            line: 5,
            column: 47
          }
        }, {
          start: {
            line: 5,
            column: 51
          },
          end: {
            line: 5,
            column: 53
          }
        }],
        line: 5
      },
      "5": {
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 6,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 6,
            column: 68
          },
          end: {
            line: 6,
            column: 81
          }
        }, {
          start: {
            line: 6,
            column: 84
          },
          end: {
            line: 6,
            column: 90
          }
        }],
        line: 6
      },
      "6": {
        loc: {
          start: {
            line: 8,
            column: 26
          },
          end: {
            line: 8,
            column: 170
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 8,
            column: 26
          },
          end: {
            line: 8,
            column: 170
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 8
      },
      "7": {
        loc: {
          start: {
            line: 8,
            column: 97
          },
          end: {
            line: 8,
            column: 137
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 97
          },
          end: {
            line: 8,
            column: 121
          }
        }, {
          start: {
            line: 8,
            column: 125
          },
          end: {
            line: 8,
            column: 137
          }
        }],
        line: 8
      },
      "8": {
        loc: {
          start: {
            line: 8,
            column: 146
          },
          end: {
            line: 8,
            column: 168
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 8,
            column: 146
          },
          end: {
            line: 8,
            column: 168
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 8
      },
      "9": {
        loc: {
          start: {
            line: 10,
            column: 23
          },
          end: {
            line: 10,
            column: 121
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 10,
            column: 52
          },
          end: {
            line: 10,
            column: 100
          }
        }, {
          start: {
            line: 10,
            column: 103
          },
          end: {
            line: 10,
            column: 121
          }
        }],
        line: 10
      },
      "10": {
        loc: {
          start: {
            line: 13,
            column: 28
          },
          end: {
            line: 13,
            column: 84
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 13,
            column: 28
          },
          end: {
            line: 13,
            column: 84
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 13
      },
      "11": {
        loc: {
          start: {
            line: 55,
            column: 32
          },
          end: {
            line: 55,
            column: 232
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 55,
            column: 33
          },
          end: {
            line: 55,
            column: 105
          }
        }, {
          start: {
            line: 55,
            column: 111
          },
          end: {
            line: 55,
            column: 231
          }
        }],
        line: 55
      },
      "12": {
        loc: {
          start: {
            line: 55,
            column: 33
          },
          end: {
            line: 55,
            column: 105
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 55,
            column: 90
          },
          end: {
            line: 55,
            column: 96
          }
        }, {
          start: {
            line: 55,
            column: 99
          },
          end: {
            line: 55,
            column: 105
          }
        }],
        line: 55
      },
      "13": {
        loc: {
          start: {
            line: 55,
            column: 33
          },
          end: {
            line: 55,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 55,
            column: 33
          },
          end: {
            line: 55,
            column: 70
          }
        }, {
          start: {
            line: 55,
            column: 74
          },
          end: {
            line: 55,
            column: 87
          }
        }],
        line: 55
      },
      "14": {
        loc: {
          start: {
            line: 55,
            column: 111
          },
          end: {
            line: 55,
            column: 231
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 55,
            column: 216
          },
          end: {
            line: 55,
            column: 222
          }
        }, {
          start: {
            line: 55,
            column: 225
          },
          end: {
            line: 55,
            column: 231
          }
        }],
        line: 55
      },
      "15": {
        loc: {
          start: {
            line: 55,
            column: 111
          },
          end: {
            line: 55,
            column: 213
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 55,
            column: 111
          },
          end: {
            line: 55,
            column: 196
          }
        }, {
          start: {
            line: 55,
            column: 200
          },
          end: {
            line: 55,
            column: 213
          }
        }],
        line: 55
      },
      "16": {
        loc: {
          start: {
            line: 55,
            column: 117
          },
          end: {
            line: 55,
            column: 186
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 55,
            column: 170
          },
          end: {
            line: 55,
            column: 176
          }
        }, {
          start: {
            line: 55,
            column: 179
          },
          end: {
            line: 55,
            column: 186
          }
        }],
        line: 55
      },
      "17": {
        loc: {
          start: {
            line: 55,
            column: 117
          },
          end: {
            line: 55,
            column: 167
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 55,
            column: 117
          },
          end: {
            line: 55,
            column: 150
          }
        }, {
          start: {
            line: 55,
            column: 154
          },
          end: {
            line: 55,
            column: 167
          }
        }],
        line: 55
      },
      "18": {
        loc: {
          start: {
            line: 56,
            column: 16
          },
          end: {
            line: 62,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 16
          },
          end: {
            line: 62,
            column: 17
          }
        }, {
          start: {
            line: 59,
            column: 21
          },
          end: {
            line: 62,
            column: 17
          }
        }],
        line: 56
      },
      "19": {
        loc: {
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "20": {
        loc: {
          start: {
            line: 95,
            column: 12
          },
          end: {
            line: 95,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 95,
            column: 12
          },
          end: {
            line: 95,
            column: 30
          }
        }, {
          start: {
            line: 95,
            column: 34
          },
          end: {
            line: 95,
            column: 51
          }
        }],
        line: 95
      },
      "21": {
        loc: {
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "22": {
        loc: {
          start: {
            line: 121,
            column: 12
          },
          end: {
            line: 123,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 121,
            column: 12
          },
          end: {
            line: 123,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 121
      },
      "23": {
        loc: {
          start: {
            line: 126,
            column: 16
          },
          end: {
            line: 139,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 16
          },
          end: {
            line: 139,
            column: 17
          }
        }, {
          start: {
            line: 136,
            column: 21
          },
          end: {
            line: 139,
            column: 17
          }
        }],
        line: 126
      },
      "24": {
        loc: {
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 148,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 148,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 147
      },
      "25": {
        loc: {
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 154,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 154,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      },
      "26": {
        loc: {
          start: {
            line: 172,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 172,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 172
      },
      "27": {
        loc: {
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 179,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 179,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "28": {
        loc: {
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 183,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 183,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "29": {
        loc: {
          start: {
            line: 184,
            column: 8
          },
          end: {
            line: 187,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 184,
            column: 8
          },
          end: {
            line: 187,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 184
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/audio/micCapture.ts",
      mappings: ";;;;;;;;;;;;;;;;AAAA,8EAAyE;AAEzE,MAAa,UAAU;IAerB;QAdQ,iBAAY,GAAwB,IAAI,CAAC;QACzC,gBAAW,GAAuB,IAAI,CAAC;QACvC,eAAU,GAAsC,IAAI,CAAC;QACrD,gBAAW,GAA4B,IAAI,CAAC;QAC5C,iBAAY,GAA6B,IAAI,CAAC;QACtD,qBAAgB,GAAsB,IAAI,CAAC;QAC3C,gBAAW,GAAG,KAAK,CAAC;QAEpB,oBAAoB;QACH,gBAAW,GAAG,KAAK,CAAC;QACpB,eAAU,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC,CAAC,CAAC,uBAAuB;QACxE,kBAAa,GAAG,EAAE,CAAC,CAAC,sBAAsB;QAC1C,gBAAW,GAAG,CAAC,CAAC,CAAC,wBAAwB;IAE3C,CAAC;IAEhB;;OAEG;IACH,KAAK,CAAC,UAAU;;QACd,IAAI,CAAC;YACH,4BAA4B;YAC5B,IAAI,CAAC,WAAW,GAAG,MAAM,SAAS,CAAC,YAAY,CAAC,YAAY,CAAC;gBAC3D,KAAK,EAAE;oBACL,UAAU,EAAE,KAAK;oBACjB,YAAY,EAAE,CAAC;oBACf,gBAAgB,EAAE,IAAI;oBACtB,gBAAgB,EAAE,IAAI;oBACtB,eAAe,EAAE,IAAI;iBACtB;aACF,CAAC,CAAC;YAEH,sBAAsB;YACtB,IAAI,CAAC,YAAY,GAAG,IAAI,YAAY,CAAC,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC;YAE5D,yBAAyB;YACzB,IAAI,UAAU,CAAC;YACf,IAAI,CAAC;gBACH,uDAAuD;gBACvD,MAAM,OAAO,GAAG,CAAA,MAAC,UAAkB,CAAC,UAAU,0CAAE,GAAG,MAAI,MAAA,MAAC,UAAkB,CAAC,MAAM,0CAAE,IAAI,0CAAE,GAAG,CAAA,CAAC;gBAC7F,IAAI,OAAO,EAAE,CAAC;oBACZ,UAAU,GAAG,IAAI,GAAG,CAAC,mBAAmB,EAAE,OAAO,CAAC,CAAC;gBACrD,CAAC;qBAAM,CAAC;oBACN,oDAAoD;oBACpD,UAAU,GAAG,EAAE,IAAI,EAAE,mBAAmB,EAAE,CAAC;gBAC7C,CAAC;YACH,CAAC;YAAC,WAAM,CAAC;gBACP,0BAA0B;gBAC1B,UAAU,GAAG,EAAE,IAAI,EAAE,mBAAmB,EAAE,CAAC;YAC7C,CAAC;YACD,MAAM,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAEhE,yCAAyC;YACzC,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,GAAG,CAAC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC;YAC7E,IAAI,CAAC,YAAY,GAAG,IAAI,iBAAiB,CAAC,UAAU,GAAG,UAAU,CAAC,iBAAiB,CAAC,CAAC;YACrF,IAAI,CAAC,gBAAgB,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAE1D,4BAA4B;YAC5B,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,aAAa;YACzD,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,YAAY;YAExD,qBAAqB;YACrB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,uBAAuB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC9E,IAAI,CAAC,WAAW,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,YAAY,EAAE,eAAe,CAAC,CAAC;YAE5E,gCAAgC;YAChC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC;gBAChC,IAAI,EAAE,iBAAiB;gBACvB,MAAM,EAAE,IAAI,CAAC,YAAY;aAC1B,CAAC,CAAC;YAEH,0BAA0B;YAC1B,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAE5C,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CAAC,4CAA4C,KAAK,EAAE,CAAC,CAAC;QACvE,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,YAAY;QAChB,IAAI,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;YAC5C,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;QAC1E,CAAC;QAED,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,KAAK,WAAW,EAAE,CAAC;YAC5C,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;YACjC,qCAAqC;YACrC,MAAM,yCAAkB,CAAC,0BAA0B,CAAC,CAAC,MAAM,EAAE,EAAE;gBAC7D,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;gBAC7C,+BAA+B;YACjC,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE;gBACX,OAAO,CAAC,KAAK,CAAC,oBAAoB,EAAE,KAAK,CAAC,CAAC;YAC7C,CAAC,CAAC,CAAC;QAEL,CAAC;QAED,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IAC1B,CAAC;IAED;;OAEG;IACH,WAAW;QACT,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IAC3B,CAAC;IAED;;OAEG;IACI,IAAI;;YACT,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBAC3B,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;YAC1E,CAAC;YAED,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;gBACxB,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;gBAC/B,IAAI,KAAK,EAAE,CAAC;oBACV,8DAA8D;oBAC9D,MAAM,UAAU,GAAG,IAAI,UAAU,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;oBACpD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;wBACtC,MAAM,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;wBACxB,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,GAAG,IAAI,CAAC,CAAS,WAAW;wBACtD,UAAU,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,YAAY;oBAC5D,CAAC;oBACD,oBAAM,UAAU,CAAA,CAAC;gBACnB,CAAC;qBAAM,CAAC;oBACN,oDAAoD;oBACpD,cAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAA,CAAC;gBACxD,CAAC;YACH,CAAC;QACH,CAAC;KAAA;IAED;;OAEG;IACH,SAAS;QACP,IAAI,CAAC,IAAI,CAAC,gBAAgB;YAAE,OAAO,IAAI,CAAC;QAExC,MAAM,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAC1D,MAAM,SAAS,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAEzD,6BAA6B;QAC7B,IAAI,SAAS,KAAK,UAAU,EAAE,CAAC;YAC7B,OAAO,IAAI,CAAC,CAAC,oBAAoB;QACnC,CAAC;QAED,MAAM,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC;QACnE,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAE9C,gCAAgC;QAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC;YACzC,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC;YACtE,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;QAChD,CAAC;QAED,+BAA+B;QAC/B,MAAM,aAAa,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,UAAU,CAAC;QACjE,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,EAAE,aAAa,CAAC,CAAC;QAEvD,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,OAAO;QACX,IAAI,CAAC,WAAW,EAAE,CAAC;QAEnB,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YACrB,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC;YAC9B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAC1B,CAAC;QAED,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;YACpB,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;YAC7B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACzB,CAAC;QAED,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YACtB,MAAM,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;YAChC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QAC3B,CAAC;QAED,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YACrB,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;YAC5D,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAC1B,CAAC;QAED,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;IAC/B,CAAC;IAED;;OAEG;IACH,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED;;OAEG;IACH,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED;;OAEG;IACH,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;CACF;AAxND,gCAwNC",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/audio/micCapture.ts"],
      sourcesContent: ["import { azureSpeechService } from '@/lib/services/azure-speech-service';\n\nexport class MicCapture {\n  private audioContext: AudioContext | null = null;\n  private mediaStream: MediaStream | null = null;\n  private sourceNode: MediaStreamAudioSourceNode | null = null;\n  private workletNode: AudioWorkletNode | null = null;\n  private sharedBuffer: SharedArrayBuffer | null = null;\n  sharedBufferView: Int16Array | null = null;\n  isCapturing = false;\n  \n  // Buffer parameters\n  private readonly SAMPLE_RATE = 16000;\n  private readonly FRAME_SIZE = Math.floor(this.SAMPLE_RATE * 0.1); // 100ms = 1600 samples\n  private readonly BUFFER_FRAMES = 10; // Buffer for 1 second\n  private readonly HEADER_SIZE = 2; // writeIndex, readIndex\n  \n  constructor() {}\n  \n  /**\n   * Initialize the microphone capture system\n   */\n  async initialize(): Promise<void> {\n    try {\n      // Request microphone access\n      this.mediaStream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          sampleRate: 48000,\n          channelCount: 1,\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true\n        }\n      });\n      \n      // Create AudioContext\n      this.audioContext = new AudioContext({ sampleRate: 48000 });\n      \n      // Load the audio worklet\n      let workletUrl;\n      try {\n        // Try to use import.meta.url if available (ES modules)\n        const metaUrl = (globalThis as any).importMeta?.url || (globalThis as any).import?.meta?.url;\n        if (metaUrl) {\n          workletUrl = new URL('./micProcessor.js', metaUrl);\n        } else {\n          // Fallback for testing environments and other cases\n          workletUrl = { href: './micProcessor.js' };\n        }\n      } catch {\n        // Fallback for any errors\n        workletUrl = { href: './micProcessor.js' };\n      }\n      await this.audioContext.audioWorklet.addModule(workletUrl.href);\n      \n      // Create shared buffer for communication\n      const bufferSize = this.HEADER_SIZE + (this.FRAME_SIZE * this.BUFFER_FRAMES);\n      this.sharedBuffer = new SharedArrayBuffer(bufferSize * Int16Array.BYTES_PER_ELEMENT);\n      this.sharedBufferView = new Int16Array(this.sharedBuffer);\n      \n      // Initialize buffer indices\n      Atomics.store(this.sharedBufferView, 0, 0); // writeIndex\n      Atomics.store(this.sharedBufferView, 1, 0); // readIndex\n      \n      // Create audio nodes\n      this.sourceNode = this.audioContext.createMediaStreamSource(this.mediaStream);\n      this.workletNode = new AudioWorkletNode(this.audioContext, 'mic-processor');\n      \n      // Send shared buffer to worklet\n      this.workletNode.port.postMessage({\n        type: 'setSharedBuffer',\n        buffer: this.sharedBuffer\n      });\n      \n      // Connect the audio graph\n      this.sourceNode.connect(this.workletNode);\n      \n    } catch (error) {\n      throw new Error(`Failed to initialize microphone capture: ${error}`);\n    }\n  }\n  \n  /**\n   * Start capturing audio and transcribe using Azure Speech Service\n   */\n  async startCapture(): Promise<void> {\n    if (!this.audioContext || !this.workletNode) {\n      throw new Error('MicCapture not initialized. Call initialize() first.');\n    }\n    \n    if (this.audioContext.state === 'suspended') {\n      await this.audioContext.resume();\n      // Start Azure continuous recognition\n      await azureSpeechService.startContinuousRecognition((result) => {\n        console.log('Recognized Text:', result.text);\n        // TODO: Handle recognized text\n      }, (error) => {\n        console.error('Recognition Error:', error);\n      });\n\n    }\n    \n    this.isCapturing = true;\n  }\n  \n  /**\n   * Stop capturing audio\n   */\n  stopCapture(): void {\n    this.isCapturing = false;\n  }\n  \n  /**\n   * Async iterator that yields Uint8Array frames of \u2264100ms audio data\n   */\n  async *read(): AsyncIterableIterator<Uint8Array> {\n    if (!this.sharedBufferView) {\n      throw new Error('MicCapture not initialized. Call initialize() first.');\n    }\n    \n    while (this.isCapturing) {\n      const frame = this.readFrame();\n      if (frame) {\n        // Convert Int16Array to Uint8Array (little-endian byte order)\n        const uint8Frame = new Uint8Array(frame.length * 2);\n        for (let i = 0; i < frame.length; i++) {\n          const sample = frame[i];\n          uint8Frame[i * 2] = sample & 0xFF;         // Low byte\n          uint8Frame[i * 2 + 1] = (sample >> 8) & 0xFF; // High byte\n        }\n        yield uint8Frame;\n      } else {\n        // No data available, wait a bit before trying again\n        await new Promise(resolve => setTimeout(resolve, 10));\n      }\n    }\n  }\n  \n  /**\n   * Read a single frame from the shared buffer\n   */\n  readFrame(): Int16Array | null {\n    if (!this.sharedBufferView) return null;\n    \n    const writeIndex = Atomics.load(this.sharedBufferView, 0);\n    const readIndex = Atomics.load(this.sharedBufferView, 1);\n    \n    // Check if data is available\n    if (readIndex === writeIndex) {\n      return null; // No data available\n    }\n    \n    const bufferSize = this.sharedBufferView.length - this.HEADER_SIZE;\n    const frame = new Int16Array(this.FRAME_SIZE);\n    \n    // Read frame from shared buffer\n    for (let i = 0; i < this.FRAME_SIZE; i++) {\n      const bufferIndex = this.HEADER_SIZE + ((readIndex + i) % bufferSize);\n      frame[i] = this.sharedBufferView[bufferIndex];\n    }\n    \n    // Update read index atomically\n    const nextReadIndex = (readIndex + this.FRAME_SIZE) % bufferSize;\n    Atomics.store(this.sharedBufferView, 1, nextReadIndex);\n    \n    return frame;\n  }\n  \n  /**\n   * Cleanup resources\n   */\n  async dispose(): Promise<void> {\n    this.stopCapture();\n    \n    if (this.workletNode) {\n      this.workletNode.disconnect();\n      this.workletNode = null;\n    }\n    \n    if (this.sourceNode) {\n      this.sourceNode.disconnect();\n      this.sourceNode = null;\n    }\n    \n    if (this.audioContext) {\n      await this.audioContext.close();\n      this.audioContext = null;\n    }\n    \n    if (this.mediaStream) {\n      this.mediaStream.getTracks().forEach(track => track.stop());\n      this.mediaStream = null;\n    }\n    \n    this.sharedBuffer = null;\n    this.sharedBufferView = null;\n  }\n  \n  /**\n   * Get the current capture status\n   */\n  get capturing(): boolean {\n    return this.isCapturing;\n  }\n  \n  /**\n   * Get the sample rate\n   */\n  get sampleRate(): number {\n    return this.SAMPLE_RATE;\n  }\n  \n  /**\n   * Get the frame size in samples\n   */\n  get frameSize(): number {\n    return this.FRAME_SIZE;\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c884cd465af69e535550b99a3dca50d9419bf7b3"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_147ghao2iv = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_147ghao2iv();
var __await =
/* istanbul ignore next */
(cov_147ghao2iv().s[0]++,
/* istanbul ignore next */
(cov_147ghao2iv().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_147ghao2iv().b[0][1]++, this.__await) ||
/* istanbul ignore next */
(cov_147ghao2iv().b[0][2]++, function (v) {
  /* istanbul ignore next */
  cov_147ghao2iv().f[0]++;
  cov_147ghao2iv().s[1]++;
  return this instanceof __await ?
  /* istanbul ignore next */
  (cov_147ghao2iv().b[1][0]++, this.v = v, this) :
  /* istanbul ignore next */
  (cov_147ghao2iv().b[1][1]++, new __await(v));
}));
var __asyncGenerator =
/* istanbul ignore next */
(cov_147ghao2iv().s[2]++,
/* istanbul ignore next */
(cov_147ghao2iv().b[2][0]++, this) &&
/* istanbul ignore next */
(cov_147ghao2iv().b[2][1]++, this.__asyncGenerator) ||
/* istanbul ignore next */
(cov_147ghao2iv().b[2][2]++, function (thisArg, _arguments, generator) {
  /* istanbul ignore next */
  cov_147ghao2iv().f[1]++;
  cov_147ghao2iv().s[3]++;
  if (!Symbol.asyncIterator) {
    /* istanbul ignore next */
    cov_147ghao2iv().b[3][0]++;
    cov_147ghao2iv().s[4]++;
    throw new TypeError("Symbol.asyncIterator is not defined.");
  } else
  /* istanbul ignore next */
  {
    cov_147ghao2iv().b[3][1]++;
  }
  var g =
    /* istanbul ignore next */
    (cov_147ghao2iv().s[5]++, generator.apply(thisArg,
    /* istanbul ignore next */
    (cov_147ghao2iv().b[4][0]++, _arguments) ||
    /* istanbul ignore next */
    (cov_147ghao2iv().b[4][1]++, []))),
    i,
    q =
    /* istanbul ignore next */
    (cov_147ghao2iv().s[6]++, []);
  /* istanbul ignore next */
  cov_147ghao2iv().s[7]++;
  return i = Object.create((typeof AsyncIterator === "function" ?
  /* istanbul ignore next */
  (cov_147ghao2iv().b[5][0]++, AsyncIterator) :
  /* istanbul ignore next */
  (cov_147ghao2iv().b[5][1]++, Object)).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () {
    /* istanbul ignore next */
    cov_147ghao2iv().f[2]++;
    cov_147ghao2iv().s[8]++;
    return this;
  }, i;
  function awaitReturn(f) {
    /* istanbul ignore next */
    cov_147ghao2iv().f[3]++;
    cov_147ghao2iv().s[9]++;
    return function (v) {
      /* istanbul ignore next */
      cov_147ghao2iv().f[4]++;
      cov_147ghao2iv().s[10]++;
      return Promise.resolve(v).then(f, reject);
    };
  }
  function verb(n, f) {
    /* istanbul ignore next */
    cov_147ghao2iv().f[5]++;
    cov_147ghao2iv().s[11]++;
    if (g[n]) {
      /* istanbul ignore next */
      cov_147ghao2iv().b[6][0]++;
      cov_147ghao2iv().s[12]++;
      i[n] = function (v) {
        /* istanbul ignore next */
        cov_147ghao2iv().f[6]++;
        cov_147ghao2iv().s[13]++;
        return new Promise(function (a, b) {
          /* istanbul ignore next */
          cov_147ghao2iv().f[7]++;
          cov_147ghao2iv().s[14]++;
          /* istanbul ignore next */
          (cov_147ghao2iv().b[7][0]++, q.push([n, v, a, b]) > 1) ||
          /* istanbul ignore next */
          (cov_147ghao2iv().b[7][1]++, resume(n, v));
        });
      };
      /* istanbul ignore next */
      cov_147ghao2iv().s[15]++;
      if (f) {
        /* istanbul ignore next */
        cov_147ghao2iv().b[8][0]++;
        cov_147ghao2iv().s[16]++;
        i[n] = f(i[n]);
      } else
      /* istanbul ignore next */
      {
        cov_147ghao2iv().b[8][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_147ghao2iv().b[6][1]++;
    }
  }
  function resume(n, v) {
    /* istanbul ignore next */
    cov_147ghao2iv().f[8]++;
    cov_147ghao2iv().s[17]++;
    try {
      /* istanbul ignore next */
      cov_147ghao2iv().s[18]++;
      step(g[n](v));
    } catch (e) {
      /* istanbul ignore next */
      cov_147ghao2iv().s[19]++;
      settle(q[0][3], e);
    }
  }
  function step(r) {
    /* istanbul ignore next */
    cov_147ghao2iv().f[9]++;
    cov_147ghao2iv().s[20]++;
    r.value instanceof __await ?
    /* istanbul ignore next */
    (cov_147ghao2iv().b[9][0]++, Promise.resolve(r.value.v).then(fulfill, reject)) :
    /* istanbul ignore next */
    (cov_147ghao2iv().b[9][1]++, settle(q[0][2], r));
  }
  function fulfill(value) {
    /* istanbul ignore next */
    cov_147ghao2iv().f[10]++;
    cov_147ghao2iv().s[21]++;
    resume("next", value);
  }
  function reject(value) {
    /* istanbul ignore next */
    cov_147ghao2iv().f[11]++;
    cov_147ghao2iv().s[22]++;
    resume("throw", value);
  }
  function settle(f, v) {
    /* istanbul ignore next */
    cov_147ghao2iv().f[12]++;
    cov_147ghao2iv().s[23]++;
    if (f(v), q.shift(), q.length) {
      /* istanbul ignore next */
      cov_147ghao2iv().b[10][0]++;
      cov_147ghao2iv().s[24]++;
      resume(q[0][0], q[0][1]);
    } else
    /* istanbul ignore next */
    {
      cov_147ghao2iv().b[10][1]++;
    }
  }
}));
/* istanbul ignore next */
cov_147ghao2iv().s[25]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_147ghao2iv().s[26]++;
exports.MicCapture = void 0;
const azure_speech_service_1 =
/* istanbul ignore next */
(cov_147ghao2iv().s[27]++, require("@/lib/services/azure-speech-service"));
class MicCapture {
  constructor() {
    /* istanbul ignore next */
    cov_147ghao2iv().f[13]++;
    cov_147ghao2iv().s[28]++;
    this.audioContext = null;
    /* istanbul ignore next */
    cov_147ghao2iv().s[29]++;
    this.mediaStream = null;
    /* istanbul ignore next */
    cov_147ghao2iv().s[30]++;
    this.sourceNode = null;
    /* istanbul ignore next */
    cov_147ghao2iv().s[31]++;
    this.workletNode = null;
    /* istanbul ignore next */
    cov_147ghao2iv().s[32]++;
    this.sharedBuffer = null;
    /* istanbul ignore next */
    cov_147ghao2iv().s[33]++;
    this.sharedBufferView = null;
    /* istanbul ignore next */
    cov_147ghao2iv().s[34]++;
    this.isCapturing = false;
    // Buffer parameters
    /* istanbul ignore next */
    cov_147ghao2iv().s[35]++;
    this.SAMPLE_RATE = 16000;
    /* istanbul ignore next */
    cov_147ghao2iv().s[36]++;
    this.FRAME_SIZE = Math.floor(this.SAMPLE_RATE * 0.1); // 100ms = 1600 samples
    /* istanbul ignore next */
    cov_147ghao2iv().s[37]++;
    this.BUFFER_FRAMES = 10; // Buffer for 1 second
    /* istanbul ignore next */
    cov_147ghao2iv().s[38]++;
    this.HEADER_SIZE = 2; // writeIndex, readIndex
  }
  /**
   * Initialize the microphone capture system
   */
  async initialize() {
    /* istanbul ignore next */
    cov_147ghao2iv().f[14]++;
    var _a, _b, _c;
    /* istanbul ignore next */
    cov_147ghao2iv().s[39]++;
    try {
      /* istanbul ignore next */
      cov_147ghao2iv().s[40]++;
      // Request microphone access
      this.mediaStream = await navigator.mediaDevices.getUserMedia({
        audio: {
          sampleRate: 48000,
          channelCount: 1,
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true
        }
      });
      // Create AudioContext
      /* istanbul ignore next */
      cov_147ghao2iv().s[41]++;
      this.audioContext = new AudioContext({
        sampleRate: 48000
      });
      // Load the audio worklet
      let workletUrl;
      /* istanbul ignore next */
      cov_147ghao2iv().s[42]++;
      try {
        // Try to use import.meta.url if available (ES modules)
        const metaUrl =
        /* istanbul ignore next */
        (cov_147ghao2iv().s[43]++,
        /* istanbul ignore next */
        (cov_147ghao2iv().b[11][0]++,
        /* istanbul ignore next */
        (cov_147ghao2iv().b[13][0]++, (_a = globalThis.importMeta) === null) ||
        /* istanbul ignore next */
        (cov_147ghao2iv().b[13][1]++, _a === void 0) ?
        /* istanbul ignore next */
        (cov_147ghao2iv().b[12][0]++, void 0) :
        /* istanbul ignore next */
        (cov_147ghao2iv().b[12][1]++, _a.url)) ||
        /* istanbul ignore next */
        (cov_147ghao2iv().b[11][1]++,
        /* istanbul ignore next */
        (cov_147ghao2iv().b[15][0]++, (_c =
        /* istanbul ignore next */
        (cov_147ghao2iv().b[17][0]++, (_b = globalThis.import) === null) ||
        /* istanbul ignore next */
        (cov_147ghao2iv().b[17][1]++, _b === void 0) ?
        /* istanbul ignore next */
        (cov_147ghao2iv().b[16][0]++, void 0) :
        /* istanbul ignore next */
        (cov_147ghao2iv().b[16][1]++, _b.meta)) === null) ||
        /* istanbul ignore next */
        (cov_147ghao2iv().b[15][1]++, _c === void 0) ?
        /* istanbul ignore next */
        (cov_147ghao2iv().b[14][0]++, void 0) :
        /* istanbul ignore next */
        (cov_147ghao2iv().b[14][1]++, _c.url)));
        /* istanbul ignore next */
        cov_147ghao2iv().s[44]++;
        if (metaUrl) {
          /* istanbul ignore next */
          cov_147ghao2iv().b[18][0]++;
          cov_147ghao2iv().s[45]++;
          workletUrl = new URL('./micProcessor.js', metaUrl);
        } else {
          /* istanbul ignore next */
          cov_147ghao2iv().b[18][1]++;
          cov_147ghao2iv().s[46]++;
          // Fallback for testing environments and other cases
          workletUrl = {
            href: './micProcessor.js'
          };
        }
      } catch (_d) {
        /* istanbul ignore next */
        cov_147ghao2iv().s[47]++;
        // Fallback for any errors
        workletUrl = {
          href: './micProcessor.js'
        };
      }
      /* istanbul ignore next */
      cov_147ghao2iv().s[48]++;
      await this.audioContext.audioWorklet.addModule(workletUrl.href);
      // Create shared buffer for communication
      const bufferSize =
      /* istanbul ignore next */
      (cov_147ghao2iv().s[49]++, this.HEADER_SIZE + this.FRAME_SIZE * this.BUFFER_FRAMES);
      /* istanbul ignore next */
      cov_147ghao2iv().s[50]++;
      this.sharedBuffer = new SharedArrayBuffer(bufferSize * Int16Array.BYTES_PER_ELEMENT);
      /* istanbul ignore next */
      cov_147ghao2iv().s[51]++;
      this.sharedBufferView = new Int16Array(this.sharedBuffer);
      // Initialize buffer indices
      /* istanbul ignore next */
      cov_147ghao2iv().s[52]++;
      Atomics.store(this.sharedBufferView, 0, 0); // writeIndex
      /* istanbul ignore next */
      cov_147ghao2iv().s[53]++;
      Atomics.store(this.sharedBufferView, 1, 0); // readIndex
      // Create audio nodes
      /* istanbul ignore next */
      cov_147ghao2iv().s[54]++;
      this.sourceNode = this.audioContext.createMediaStreamSource(this.mediaStream);
      /* istanbul ignore next */
      cov_147ghao2iv().s[55]++;
      this.workletNode = new AudioWorkletNode(this.audioContext, 'mic-processor');
      // Send shared buffer to worklet
      /* istanbul ignore next */
      cov_147ghao2iv().s[56]++;
      this.workletNode.port.postMessage({
        type: 'setSharedBuffer',
        buffer: this.sharedBuffer
      });
      // Connect the audio graph
      /* istanbul ignore next */
      cov_147ghao2iv().s[57]++;
      this.sourceNode.connect(this.workletNode);
    } catch (error) {
      /* istanbul ignore next */
      cov_147ghao2iv().s[58]++;
      throw new Error(`Failed to initialize microphone capture: ${error}`);
    }
  }
  /**
   * Start capturing audio and transcribe using Azure Speech Service
   */
  async startCapture() {
    /* istanbul ignore next */
    cov_147ghao2iv().f[15]++;
    cov_147ghao2iv().s[59]++;
    if (
    /* istanbul ignore next */
    (cov_147ghao2iv().b[20][0]++, !this.audioContext) ||
    /* istanbul ignore next */
    (cov_147ghao2iv().b[20][1]++, !this.workletNode)) {
      /* istanbul ignore next */
      cov_147ghao2iv().b[19][0]++;
      cov_147ghao2iv().s[60]++;
      throw new Error('MicCapture not initialized. Call initialize() first.');
    } else
    /* istanbul ignore next */
    {
      cov_147ghao2iv().b[19][1]++;
    }
    cov_147ghao2iv().s[61]++;
    if (this.audioContext.state === 'suspended') {
      /* istanbul ignore next */
      cov_147ghao2iv().b[21][0]++;
      cov_147ghao2iv().s[62]++;
      await this.audioContext.resume();
      // Start Azure continuous recognition
      /* istanbul ignore next */
      cov_147ghao2iv().s[63]++;
      await azure_speech_service_1.azureSpeechService.startContinuousRecognition(result => {
        /* istanbul ignore next */
        cov_147ghao2iv().f[16]++;
        cov_147ghao2iv().s[64]++;
        console.log('Recognized Text:', result.text);
        // TODO: Handle recognized text
      }, error => {
        /* istanbul ignore next */
        cov_147ghao2iv().f[17]++;
        cov_147ghao2iv().s[65]++;
        console.error('Recognition Error:', error);
      });
    } else
    /* istanbul ignore next */
    {
      cov_147ghao2iv().b[21][1]++;
    }
    cov_147ghao2iv().s[66]++;
    this.isCapturing = true;
  }
  /**
   * Stop capturing audio
   */
  stopCapture() {
    /* istanbul ignore next */
    cov_147ghao2iv().f[18]++;
    cov_147ghao2iv().s[67]++;
    this.isCapturing = false;
  }
  /**
   * Async iterator that yields Uint8Array frames of ≤100ms audio data
   */
  read() {
    /* istanbul ignore next */
    cov_147ghao2iv().f[19]++;
    cov_147ghao2iv().s[68]++;
    return __asyncGenerator(this, arguments, function* read_1() {
      /* istanbul ignore next */
      cov_147ghao2iv().f[20]++;
      cov_147ghao2iv().s[69]++;
      if (!this.sharedBufferView) {
        /* istanbul ignore next */
        cov_147ghao2iv().b[22][0]++;
        cov_147ghao2iv().s[70]++;
        throw new Error('MicCapture not initialized. Call initialize() first.');
      } else
      /* istanbul ignore next */
      {
        cov_147ghao2iv().b[22][1]++;
      }
      cov_147ghao2iv().s[71]++;
      while (this.isCapturing) {
        const frame =
        /* istanbul ignore next */
        (cov_147ghao2iv().s[72]++, this.readFrame());
        /* istanbul ignore next */
        cov_147ghao2iv().s[73]++;
        if (frame) {
          /* istanbul ignore next */
          cov_147ghao2iv().b[23][0]++;
          // Convert Int16Array to Uint8Array (little-endian byte order)
          const uint8Frame =
          /* istanbul ignore next */
          (cov_147ghao2iv().s[74]++, new Uint8Array(frame.length * 2));
          /* istanbul ignore next */
          cov_147ghao2iv().s[75]++;
          for (let i =
          /* istanbul ignore next */
          (cov_147ghao2iv().s[76]++, 0); i < frame.length; i++) {
            const sample =
            /* istanbul ignore next */
            (cov_147ghao2iv().s[77]++, frame[i]);
            /* istanbul ignore next */
            cov_147ghao2iv().s[78]++;
            uint8Frame[i * 2] = sample & 0xFF; // Low byte
            /* istanbul ignore next */
            cov_147ghao2iv().s[79]++;
            uint8Frame[i * 2 + 1] = sample >> 8 & 0xFF; // High byte
          }
          /* istanbul ignore next */
          cov_147ghao2iv().s[80]++;
          yield yield __await(uint8Frame);
        } else {
          /* istanbul ignore next */
          cov_147ghao2iv().b[23][1]++;
          cov_147ghao2iv().s[81]++;
          // No data available, wait a bit before trying again
          yield __await(new Promise(resolve => {
            /* istanbul ignore next */
            cov_147ghao2iv().f[21]++;
            cov_147ghao2iv().s[82]++;
            return setTimeout(resolve, 10);
          }));
        }
      }
    });
  }
  /**
   * Read a single frame from the shared buffer
   */
  readFrame() {
    /* istanbul ignore next */
    cov_147ghao2iv().f[22]++;
    cov_147ghao2iv().s[83]++;
    if (!this.sharedBufferView) {
      /* istanbul ignore next */
      cov_147ghao2iv().b[24][0]++;
      cov_147ghao2iv().s[84]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_147ghao2iv().b[24][1]++;
    }
    const writeIndex =
    /* istanbul ignore next */
    (cov_147ghao2iv().s[85]++, Atomics.load(this.sharedBufferView, 0));
    const readIndex =
    /* istanbul ignore next */
    (cov_147ghao2iv().s[86]++, Atomics.load(this.sharedBufferView, 1));
    // Check if data is available
    /* istanbul ignore next */
    cov_147ghao2iv().s[87]++;
    if (readIndex === writeIndex) {
      /* istanbul ignore next */
      cov_147ghao2iv().b[25][0]++;
      cov_147ghao2iv().s[88]++;
      return null; // No data available
    } else
    /* istanbul ignore next */
    {
      cov_147ghao2iv().b[25][1]++;
    }
    const bufferSize =
    /* istanbul ignore next */
    (cov_147ghao2iv().s[89]++, this.sharedBufferView.length - this.HEADER_SIZE);
    const frame =
    /* istanbul ignore next */
    (cov_147ghao2iv().s[90]++, new Int16Array(this.FRAME_SIZE));
    // Read frame from shared buffer
    /* istanbul ignore next */
    cov_147ghao2iv().s[91]++;
    for (let i =
    /* istanbul ignore next */
    (cov_147ghao2iv().s[92]++, 0); i < this.FRAME_SIZE; i++) {
      const bufferIndex =
      /* istanbul ignore next */
      (cov_147ghao2iv().s[93]++, this.HEADER_SIZE + (readIndex + i) % bufferSize);
      /* istanbul ignore next */
      cov_147ghao2iv().s[94]++;
      frame[i] = this.sharedBufferView[bufferIndex];
    }
    // Update read index atomically
    const nextReadIndex =
    /* istanbul ignore next */
    (cov_147ghao2iv().s[95]++, (readIndex + this.FRAME_SIZE) % bufferSize);
    /* istanbul ignore next */
    cov_147ghao2iv().s[96]++;
    Atomics.store(this.sharedBufferView, 1, nextReadIndex);
    /* istanbul ignore next */
    cov_147ghao2iv().s[97]++;
    return frame;
  }
  /**
   * Cleanup resources
   */
  async dispose() {
    /* istanbul ignore next */
    cov_147ghao2iv().f[23]++;
    cov_147ghao2iv().s[98]++;
    this.stopCapture();
    /* istanbul ignore next */
    cov_147ghao2iv().s[99]++;
    if (this.workletNode) {
      /* istanbul ignore next */
      cov_147ghao2iv().b[26][0]++;
      cov_147ghao2iv().s[100]++;
      this.workletNode.disconnect();
      /* istanbul ignore next */
      cov_147ghao2iv().s[101]++;
      this.workletNode = null;
    } else
    /* istanbul ignore next */
    {
      cov_147ghao2iv().b[26][1]++;
    }
    cov_147ghao2iv().s[102]++;
    if (this.sourceNode) {
      /* istanbul ignore next */
      cov_147ghao2iv().b[27][0]++;
      cov_147ghao2iv().s[103]++;
      this.sourceNode.disconnect();
      /* istanbul ignore next */
      cov_147ghao2iv().s[104]++;
      this.sourceNode = null;
    } else
    /* istanbul ignore next */
    {
      cov_147ghao2iv().b[27][1]++;
    }
    cov_147ghao2iv().s[105]++;
    if (this.audioContext) {
      /* istanbul ignore next */
      cov_147ghao2iv().b[28][0]++;
      cov_147ghao2iv().s[106]++;
      await this.audioContext.close();
      /* istanbul ignore next */
      cov_147ghao2iv().s[107]++;
      this.audioContext = null;
    } else
    /* istanbul ignore next */
    {
      cov_147ghao2iv().b[28][1]++;
    }
    cov_147ghao2iv().s[108]++;
    if (this.mediaStream) {
      /* istanbul ignore next */
      cov_147ghao2iv().b[29][0]++;
      cov_147ghao2iv().s[109]++;
      this.mediaStream.getTracks().forEach(track => {
        /* istanbul ignore next */
        cov_147ghao2iv().f[24]++;
        cov_147ghao2iv().s[110]++;
        return track.stop();
      });
      /* istanbul ignore next */
      cov_147ghao2iv().s[111]++;
      this.mediaStream = null;
    } else
    /* istanbul ignore next */
    {
      cov_147ghao2iv().b[29][1]++;
    }
    cov_147ghao2iv().s[112]++;
    this.sharedBuffer = null;
    /* istanbul ignore next */
    cov_147ghao2iv().s[113]++;
    this.sharedBufferView = null;
  }
  /**
   * Get the current capture status
   */
  get capturing() {
    /* istanbul ignore next */
    cov_147ghao2iv().f[25]++;
    cov_147ghao2iv().s[114]++;
    return this.isCapturing;
  }
  /**
   * Get the sample rate
   */
  get sampleRate() {
    /* istanbul ignore next */
    cov_147ghao2iv().f[26]++;
    cov_147ghao2iv().s[115]++;
    return this.SAMPLE_RATE;
  }
  /**
   * Get the frame size in samples
   */
  get frameSize() {
    /* istanbul ignore next */
    cov_147ghao2iv().f[27]++;
    cov_147ghao2iv().s[116]++;
    return this.FRAME_SIZE;
  }
}
/* istanbul ignore next */
cov_147ghao2iv().s[117]++;
exports.MicCapture = MicCapture;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,