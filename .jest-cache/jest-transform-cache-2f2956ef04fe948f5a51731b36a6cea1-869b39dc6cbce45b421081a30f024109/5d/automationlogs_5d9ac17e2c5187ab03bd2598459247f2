8e4ab9a7fe97480b948a4a6b947ce9ef
/* istanbul ignore next */
function cov_10y9upgzjz() {
  var path = "/Users/dikshantvashistha/PrepBettr/azure/lib/services/automation-logs.js";
  var hash = "5a2857d4661f97f88c7af34bfed17f8d962d1a7b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/azure/lib/services/automation-logs.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 21
        },
        end: {
          line: 1,
          column: 47
        }
      },
      "1": {
        start: {
          line: 2,
          column: 23
        },
        end: {
          line: 2,
          column: 38
        }
      },
      "2": {
        start: {
          line: 6,
          column: 8
        },
        end: {
          line: 6,
          column: 42
        }
      },
      "3": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 22,
          column: 10
        }
      },
      "4": {
        start: {
          line: 29,
          column: 22
        },
        end: {
          line: 41,
          column: 9
        }
      },
      "5": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 35
        }
      },
      "6": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 21
        }
      },
      "7": {
        start: {
          line: 51,
          column: 22
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "8": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 35
        }
      },
      "9": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 21
        }
      },
      "10": {
        start: {
          line: 71,
          column: 22
        },
        end: {
          line: 81,
          column: 9
        }
      },
      "11": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 35
        }
      },
      "12": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 21
        }
      },
      "13": {
        start: {
          line: 91,
          column: 22
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "14": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 35
        }
      },
      "15": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 103,
          column: 21
        }
      },
      "16": {
        start: {
          line: 110,
          column: 22
        },
        end: {
          line: 120,
          column: 9
        }
      },
      "17": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 122,
          column: 35
        }
      },
      "18": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 123,
          column: 21
        }
      },
      "19": {
        start: {
          line: 130,
          column: 22
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "20": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 137,
          column: 35
        }
      },
      "21": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 138,
          column: 21
        }
      },
      "22": {
        start: {
          line: 145,
          column: 22
        },
        end: {
          line: 150,
          column: 9
        }
      },
      "23": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 152,
          column: 35
        }
      },
      "24": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 153,
          column: 21
        }
      },
      "25": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "26": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 163,
          column: 15
        }
      },
      "27": {
        start: {
          line: 166,
          column: 26
        },
        end: {
          line: 166,
          column: 66
        }
      },
      "28": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 167,
          column: 112
        }
      },
      "29": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 172,
          column: 13
        }
      },
      "30": {
        start: {
          line: 171,
          column: 16
        },
        end: {
          line: 171,
          column: 57
        }
      },
      "31": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 68
        }
      },
      "32": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 111
        }
      },
      "33": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 194,
          column: 9
        }
      },
      "34": {
        start: {
          line: 187,
          column: 16
        },
        end: {
          line: 187,
          column: 31
        }
      },
      "35": {
        start: {
          line: 189,
          column: 16
        },
        end: {
          line: 189,
          column: 30
        }
      },
      "36": {
        start: {
          line: 193,
          column: 16
        },
        end: {
          line: 193,
          column: 29
        }
      },
      "37": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 223,
          column: 9
        }
      },
      "38": {
        start: {
          line: 203,
          column: 30
        },
        end: {
          line: 213,
          column: 13
        }
      },
      "39": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 220,
          column: 13
        }
      },
      "40": {
        start: {
          line: 217,
          column: 16
        },
        end: {
          line: 217,
          column: 75
        }
      },
      "41": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 219,
          column: 73
        }
      },
      "42": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 76
        }
      },
      "43": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 238,
          column: 9
        }
      },
      "44": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 69
        }
      },
      "45": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 22
        }
      },
      "46": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 236,
          column: 68
        }
      },
      "47": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 22
        }
      },
      "48": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 258,
          column: 9
        }
      },
      "49": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 84
        }
      },
      "50": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 254,
          column: 14
        }
      },
      "51": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 256,
          column: 66
        }
      },
      "52": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 257,
          column: 24
        }
      },
      "53": {
        start: {
          line: 262,
          column: 0
        },
        end: {
          line: 262,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 5,
            column: 5
          }
        },
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 7,
            column: 5
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 58
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        loc: {
          start: {
            line: 28,
            column: 54
          },
          end: {
            line: 45,
            column: 5
          }
        },
        line: 28
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 50,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        },
        loc: {
          start: {
            line: 50,
            column: 49
          },
          end: {
            line: 65,
            column: 5
          }
        },
        line: 50
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 70,
            column: 4
          },
          end: {
            line: 70,
            column: 5
          }
        },
        loc: {
          start: {
            line: 70,
            column: 68
          },
          end: {
            line: 85,
            column: 5
          }
        },
        line: 70
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 90,
            column: 5
          }
        },
        loc: {
          start: {
            line: 90,
            column: 63
          },
          end: {
            line: 104,
            column: 5
          }
        },
        line: 90
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 109,
            column: 4
          },
          end: {
            line: 109,
            column: 5
          }
        },
        loc: {
          start: {
            line: 109,
            column: 48
          },
          end: {
            line: 124,
            column: 5
          }
        },
        line: 109
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 129,
            column: 4
          },
          end: {
            line: 129,
            column: 5
          }
        },
        loc: {
          start: {
            line: 129,
            column: 52
          },
          end: {
            line: 139,
            column: 5
          }
        },
        line: 129
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 144,
            column: 4
          },
          end: {
            line: 144,
            column: 5
          }
        },
        loc: {
          start: {
            line: 144,
            column: 49
          },
          end: {
            line: 154,
            column: 5
          }
        },
        line: 144
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 159,
            column: 4
          },
          end: {
            line: 159,
            column: 5
          }
        },
        loc: {
          start: {
            line: 159,
            column: 29
          },
          end: {
            line: 179,
            column: 5
          }
        },
        line: 159
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 184,
            column: 4
          },
          end: {
            line: 184,
            column: 5
          }
        },
        loc: {
          start: {
            line: 184,
            column: 31
          },
          end: {
            line: 195,
            column: 5
          }
        },
        line: 184
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 200,
            column: 4
          },
          end: {
            line: 200,
            column: 5
          }
        },
        loc: {
          start: {
            line: 200,
            column: 40
          },
          end: {
            line: 224,
            column: 5
          }
        },
        line: 200
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 229,
            column: 4
          },
          end: {
            line: 229,
            column: 5
          }
        },
        loc: {
          start: {
            line: 229,
            column: 44
          },
          end: {
            line: 239,
            column: 5
          }
        },
        line: 229
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 244,
            column: 4
          },
          end: {
            line: 244,
            column: 5
          }
        },
        loc: {
          start: {
            line: 244,
            column: 49
          },
          end: {
            line: 259,
            column: 5
          }
        },
        line: 244
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 12,
            column: 44
          },
          end: {
            line: 12,
            column: 56
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 12,
            column: 54
          },
          end: {
            line: 12,
            column: 56
          }
        }],
        line: 12
      },
      "1": {
        loc: {
          start: {
            line: 20,
            column: 26
          },
          end: {
            line: 20,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 26
          },
          end: {
            line: 20,
            column: 58
          }
        }, {
          start: {
            line: 20,
            column: 62
          },
          end: {
            line: 20,
            column: 71
          }
        }],
        line: 20
      },
      "2": {
        loc: {
          start: {
            line: 21,
            column: 26
          },
          end: {
            line: 21,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 21,
            column: 26
          },
          end: {
            line: 21,
            column: 51
          }
        }, {
          start: {
            line: 21,
            column: 55
          },
          end: {
            line: 21,
            column: 63
          }
        }],
        line: 21
      },
      "3": {
        loc: {
          start: {
            line: 73,
            column: 12
          },
          end: {
            line: 73,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 73,
            column: 40
          },
          end: {
            line: 73,
            column: 49
          }
        }, {
          start: {
            line: 73,
            column: 52
          },
          end: {
            line: 73,
            column: 59
          }
        }],
        line: 73
      },
      "4": {
        loc: {
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 74,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 74,
            column: 37
          }
        }, {
          start: {
            line: 74,
            column: 41
          },
          end: {
            line: 74,
            column: 75
          }
        }],
        line: 74
      },
      "5": {
        loc: {
          start: {
            line: 109,
            column: 34
          },
          end: {
            line: 109,
            column: 46
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 109,
            column: 44
          },
          end: {
            line: 109,
            column: 46
          }
        }],
        line: 109
      },
      "6": {
        loc: {
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 113,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 113,
            column: 25
          }
        }, {
          start: {
            line: 113,
            column: 29
          },
          end: {
            line: 113,
            column: 48
          }
        }],
        line: 113
      },
      "7": {
        loc: {
          start: {
            line: 129,
            column: 38
          },
          end: {
            line: 129,
            column: 50
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 129,
            column: 48
          },
          end: {
            line: 129,
            column: 50
          }
        }],
        line: 129
      },
      "8": {
        loc: {
          start: {
            line: 144,
            column: 35
          },
          end: {
            line: 144,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 144,
            column: 45
          },
          end: {
            line: 144,
            column: 47
          }
        }],
        line: 144
      },
      "9": {
        loc: {
          start: {
            line: 170,
            column: 12
          },
          end: {
            line: 172,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 170,
            column: 12
          },
          end: {
            line: 172,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 170
      },
      "10": {
        loc: {
          start: {
            line: 185,
            column: 8
          },
          end: {
            line: 194,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 186,
            column: 12
          },
          end: {
            line: 187,
            column: 31
          }
        }, {
          start: {
            line: 188,
            column: 12
          },
          end: {
            line: 189,
            column: 30
          }
        }, {
          start: {
            line: 190,
            column: 12
          },
          end: {
            line: 190,
            column: 24
          }
        }, {
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 191,
            column: 27
          }
        }, {
          start: {
            line: 192,
            column: 12
          },
          end: {
            line: 193,
            column: 29
          }
        }],
        line: 185
      },
      "11": {
        loc: {
          start: {
            line: 216,
            column: 12
          },
          end: {
            line: 220,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 216,
            column: 12
          },
          end: {
            line: 220,
            column: 13
          }
        }, {
          start: {
            line: 218,
            column: 19
          },
          end: {
            line: 220,
            column: 13
          }
        }],
        line: 216
      },
      "12": {
        loc: {
          start: {
            line: 229,
            column: 32
          },
          end: {
            line: 229,
            column: 42
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 229,
            column: 40
          },
          end: {
            line: 229,
            column: 42
          }
        }],
        line: 229
      },
      "13": {
        loc: {
          start: {
            line: 244,
            column: 30
          },
          end: {
            line: 244,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 244,
            column: 42
          },
          end: {
            line: 244,
            column: 47
          }
        }],
        line: 244
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0],
      "6": [0, 0],
      "7": [0],
      "8": [0],
      "9": [0, 0],
      "10": [0, 0, 0, 0, 0],
      "11": [0, 0],
      "12": [0],
      "13": [0]
    },
    inputSourceMap: null,
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5a2857d4661f97f88c7af34bfed17f8d962d1a7b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_10y9upgzjz = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_10y9upgzjz();
const queueService =
/* istanbul ignore next */
(cov_10y9upgzjz().s[0]++, require('./queue-service'));
const {
  v4: uuidv4
} =
/* istanbul ignore next */
(cov_10y9upgzjz().s[1]++, require('uuid'));
class AutomationLogger {
  constructor() {
    /* istanbul ignore next */
    cov_10y9upgzjz().f[0]++;
    cov_10y9upgzjz().s[2]++;
    this.logQueue = 'automation-logs';
  }

  /**
   * Create a new automation log entry
   */
  createLogEntry(action, status, message, details =
  /* istanbul ignore next */
  (cov_10y9upgzjz().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_10y9upgzjz().f[1]++;
    cov_10y9upgzjz().s[3]++;
    return {
      id: uuidv4(),
      timestamp: new Date().toISOString(),
      action: action,
      status: status,
      message: message,
      details: details,
      functionName:
      /* istanbul ignore next */
      (cov_10y9upgzjz().b[1][0]++, process.env.AZURE_FUNCTIONS_NAME) ||
      /* istanbul ignore next */
      (cov_10y9upgzjz().b[1][1]++, 'unknown'),
      invocationId:
      /* istanbul ignore next */
      (cov_10y9upgzjz().b[2][0]++, process.env.INVOCATION_ID) ||
      /* istanbul ignore next */
      (cov_10y9upgzjz().b[2][1]++, uuidv4())
    };
  }

  /**
   * Log a job discovery event
   */
  async logJobDiscovered(userId, jobId, jobDetails) {
    /* istanbul ignore next */
    cov_10y9upgzjz().f[2]++;
    const entry =
    /* istanbul ignore next */
    (cov_10y9upgzjz().s[4]++, this.createLogEntry('job_discovered', 'info', `New job discovered: ${jobDetails.title} at ${jobDetails.company}`, {
      userId,
      jobId,
      company: jobDetails.company,
      title: jobDetails.title,
      portal: jobDetails.jobPortal?.name,
      relevancyScore: jobDetails.relevancyScore
    }));
    /* istanbul ignore next */
    cov_10y9upgzjz().s[5]++;
    await this.writeLog(entry);
    /* istanbul ignore next */
    cov_10y9upgzjz().s[6]++;
    return entry;
  }

  /**
   * Log a job search operation
   */
  async logJobSearch(userId, filters, results) {
    /* istanbul ignore next */
    cov_10y9upgzjz().f[3]++;
    const entry =
    /* istanbul ignore next */
    (cov_10y9upgzjz().s[7]++, this.createLogEntry('job_search_completed', 'success', `Job search completed: Found ${results.jobs.length} jobs`, {
      userId,
      filters,
      resultsCount: results.jobs.length,
      searchedPortals: filters.portals
    }));
    /* istanbul ignore next */
    cov_10y9upgzjz().s[8]++;
    await this.writeLog(entry);
    /* istanbul ignore next */
    cov_10y9upgzjz().s[9]++;
    return entry;
  }

  /**
   * Log an application submission
   */
  async logApplicationSubmitted(userId, jobId, applicationResult) {
    /* istanbul ignore next */
    cov_10y9upgzjz().f[4]++;
    const entry =
    /* istanbul ignore next */
    (cov_10y9upgzjz().s[10]++, this.createLogEntry('application_submitted', applicationResult.success ?
    /* istanbul ignore next */
    (cov_10y9upgzjz().b[3][0]++, 'success') :
    /* istanbul ignore next */
    (cov_10y9upgzjz().b[3][1]++, 'error'),
    /* istanbul ignore next */
    (cov_10y9upgzjz().b[4][0]++, applicationResult.message) ||
    /* istanbul ignore next */
    (cov_10y9upgzjz().b[4][1]++, 'Application processing completed'), {
      userId,
      jobId,
      applicationId: applicationResult.applicationId,
      success: applicationResult.success
    }));
    /* istanbul ignore next */
    cov_10y9upgzjz().s[11]++;
    await this.writeLog(entry);
    /* istanbul ignore next */
    cov_10y9upgzjz().s[12]++;
    return entry;
  }

  /**
   * Log a follow-up action
   */
  async logFollowUpSent(userId, applicationId, followUpType) {
    /* istanbul ignore next */
    cov_10y9upgzjz().f[5]++;
    const entry =
    /* istanbul ignore next */
    (cov_10y9upgzjz().s[13]++, this.createLogEntry('follow_up_sent', 'success', `Follow-up sent: ${followUpType}`, {
      userId,
      applicationId,
      followUpType
    }));
    /* istanbul ignore next */
    cov_10y9upgzjz().s[14]++;
    await this.writeLog(entry);
    /* istanbul ignore next */
    cov_10y9upgzjz().s[15]++;
    return entry;
  }

  /**
   * Log an error
   */
  async logError(action, error, details =
  /* istanbul ignore next */
  (cov_10y9upgzjz().b[5][0]++, {})) {
    /* istanbul ignore next */
    cov_10y9upgzjz().f[6]++;
    const entry =
    /* istanbul ignore next */
    (cov_10y9upgzjz().s[16]++, this.createLogEntry(action, 'error',
    /* istanbul ignore next */
    (cov_10y9upgzjz().b[6][0]++, error.message) ||
    /* istanbul ignore next */
    (cov_10y9upgzjz().b[6][1]++, 'An error occurred'), {
      ...details,
      errorName: error.name,
      errorStack: error.stack,
      errorCode: error.code
    }));
    /* istanbul ignore next */
    cov_10y9upgzjz().s[17]++;
    await this.writeLog(entry);
    /* istanbul ignore next */
    cov_10y9upgzjz().s[18]++;
    return entry;
  }

  /**
   * Log a warning
   */
  async logWarning(action, message, details =
  /* istanbul ignore next */
  (cov_10y9upgzjz().b[7][0]++, {})) {
    /* istanbul ignore next */
    cov_10y9upgzjz().f[7]++;
    const entry =
    /* istanbul ignore next */
    (cov_10y9upgzjz().s[19]++, this.createLogEntry(action, 'warning', message, details));
    /* istanbul ignore next */
    cov_10y9upgzjz().s[20]++;
    await this.writeLog(entry);
    /* istanbul ignore next */
    cov_10y9upgzjz().s[21]++;
    return entry;
  }

  /**
   * Log general information
   */
  async logInfo(action, message, details =
  /* istanbul ignore next */
  (cov_10y9upgzjz().b[8][0]++, {})) {
    /* istanbul ignore next */
    cov_10y9upgzjz().f[8]++;
    const entry =
    /* istanbul ignore next */
    (cov_10y9upgzjz().s[22]++, this.createLogEntry(action, 'info', message, details));
    /* istanbul ignore next */
    cov_10y9upgzjz().s[23]++;
    await this.writeLog(entry);
    /* istanbul ignore next */
    cov_10y9upgzjz().s[24]++;
    return entry;
  }

  /**
   * Write log entry to queue
   */
  async writeLog(logEntry) {
    /* istanbul ignore next */
    cov_10y9upgzjz().f[9]++;
    cov_10y9upgzjz().s[25]++;
    try {
      /* istanbul ignore next */
      cov_10y9upgzjz().s[26]++;
      await queueService.addMessage(this.logQueue, logEntry, {
        timeToLive: 2592000 // 30 days
      });

      // Also write to console for immediate visibility
      const level =
      /* istanbul ignore next */
      (cov_10y9upgzjz().s[27]++, this.getConsoleLogLevel(logEntry.status));
      /* istanbul ignore next */
      cov_10y9upgzjz().s[28]++;
      console[level](`[${logEntry.timestamp}] ${logEntry.action}: ${logEntry.message}`, logEntry.details);

      // Send to Application Insights if available
      /* istanbul ignore next */
      cov_10y9upgzjz().s[29]++;
      if (process.env.APPINSIGHTS_INSTRUMENTATIONKEY) {
        /* istanbul ignore next */
        cov_10y9upgzjz().b[9][0]++;
        cov_10y9upgzjz().s[30]++;
        this.sendToApplicationInsights(logEntry);
      } else
      /* istanbul ignore next */
      {
        cov_10y9upgzjz().b[9][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_10y9upgzjz().s[31]++;
      console.error('Failed to write automation log:', error);
      // Fallback to console only
      /* istanbul ignore next */
      cov_10y9upgzjz().s[32]++;
      console.error(`[${logEntry.timestamp}] ${logEntry.action}: ${logEntry.message}`, logEntry.details);
    }
  }

  /**
   * Get appropriate console log level
   */
  getConsoleLogLevel(status) {
    /* istanbul ignore next */
    cov_10y9upgzjz().f[10]++;
    cov_10y9upgzjz().s[33]++;
    switch (status) {
      case 'error':
        /* istanbul ignore next */
        cov_10y9upgzjz().b[10][0]++;
        cov_10y9upgzjz().s[34]++;
        return 'error';
      case 'warning':
        /* istanbul ignore next */
        cov_10y9upgzjz().b[10][1]++;
        cov_10y9upgzjz().s[35]++;
        return 'warn';
      case 'info':
        /* istanbul ignore next */
        cov_10y9upgzjz().b[10][2]++;
      case 'success':
        /* istanbul ignore next */
        cov_10y9upgzjz().b[10][3]++;
      default:
        /* istanbul ignore next */
        cov_10y9upgzjz().b[10][4]++;
        cov_10y9upgzjz().s[36]++;
        return 'log';
    }
  }

  /**
   * Send log entry to Application Insights
   */
  sendToApplicationInsights(logEntry) {
    /* istanbul ignore next */
    cov_10y9upgzjz().f[11]++;
    cov_10y9upgzjz().s[37]++;
    try {
      // Using console methods that Application Insights can capture
      const telemetry =
      /* istanbul ignore next */
      (cov_10y9upgzjz().s[38]++, {
        name: logEntry.action,
        properties: {
          status: logEntry.status,
          message: logEntry.message,
          functionName: logEntry.functionName,
          invocationId: logEntry.invocationId,
          ...logEntry.details
        },
        timestamp: logEntry.timestamp
      });

      // Application Insights will automatically capture console output
      /* istanbul ignore next */
      cov_10y9upgzjz().s[39]++;
      if (logEntry.status === 'error') {
        /* istanbul ignore next */
        cov_10y9upgzjz().b[11][0]++;
        cov_10y9upgzjz().s[40]++;
        console.error('AUTOMATION_LOG', JSON.stringify(telemetry));
      } else {
        /* istanbul ignore next */
        cov_10y9upgzjz().b[11][1]++;
        cov_10y9upgzjz().s[41]++;
        console.log('AUTOMATION_LOG', JSON.stringify(telemetry));
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_10y9upgzjz().s[42]++;
      console.error('Failed to send to Application Insights:', error);
    }
  }

  /**
   * Retrieve recent logs for a user
   */
  async getRecentLogs(userId, limit =
  /* istanbul ignore next */
  (cov_10y9upgzjz().b[12][0]++, 50)) {
    /* istanbul ignore next */
    cov_10y9upgzjz().f[12]++;
    cov_10y9upgzjz().s[43]++;
    try {
      /* istanbul ignore next */
      cov_10y9upgzjz().s[44]++;
      // This would typically query a database or storage
      // For now, we'll return empty array as queue messages are consumed
      console.log(`Retrieving recent logs for user ${userId}`);
      /* istanbul ignore next */
      cov_10y9upgzjz().s[45]++;
      return [];
    } catch (error) {
      /* istanbul ignore next */
      cov_10y9upgzjz().s[46]++;
      console.error('Failed to retrieve recent logs:', error);
      /* istanbul ignore next */
      cov_10y9upgzjz().s[47]++;
      return [];
    }
  }

  /**
   * Get log statistics
   */
  async getLogStats(userId, timeRange =
  /* istanbul ignore next */
  (cov_10y9upgzjz().b[13][0]++, '24h')) {
    /* istanbul ignore next */
    cov_10y9upgzjz().f[13]++;
    cov_10y9upgzjz().s[48]++;
    try {
      /* istanbul ignore next */
      cov_10y9upgzjz().s[49]++;
      console.log(`Getting log statistics for user ${userId} (${timeRange})`);
      // This would typically aggregate from stored logs
      /* istanbul ignore next */
      cov_10y9upgzjz().s[50]++;
      return {
        totalLogs: 0,
        errorCount: 0,
        successCount: 0,
        warningCount: 0,
        topActions: []
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_10y9upgzjz().s[51]++;
      console.error('Failed to get log statistics:', error);
      /* istanbul ignore next */
      cov_10y9upgzjz().s[52]++;
      return null;
    }
  }
}
/* istanbul ignore next */
cov_10y9upgzjz().s[53]++;
module.exports = new AutomationLogger();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,