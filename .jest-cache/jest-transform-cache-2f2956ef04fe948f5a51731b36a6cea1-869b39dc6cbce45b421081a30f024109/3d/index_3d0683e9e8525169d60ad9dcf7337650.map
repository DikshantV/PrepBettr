{"version":3,"names":["cov_1lh9w6wygl","actualCoverage","s","exports","getStorageService","resetStorageService","IStorageService_1","require","AzureBlobStorageService_1","isClient","window","getConfiguration","b","azureConfig","storageServiceInstance","f","Error","createAzureStorageService","config","storageAccountName","process","env","AZURE_STORAGE_ACCOUNT","containerName","AZURE_STORAGE_CONTAINER","AzureBlobStorageService","error","console","ResumeStorageService","constructor","storageService","getService","uploadResume","userId","fileBuffer","fileName","mimeType","service","filePath","result","upload","fileUrl","url","path","sasUrl","provider","StorageProvider","Azure","deleteResume","delete","getResumeUrl","expiresInHours","getPublicUrl","expiresIn","accessType","resumeStorageService"],"sources":["/Users/dikshantvashistha/PrepBettr/lib/storage/index.ts"],"sourcesContent":["import { IStorageService, StorageProvider } from './IStorageService';\nimport { AzureBlobStorageService } from './providers/AzureBlobStorageService';\n\n// Client-side safety check\nconst isClient = typeof window !== 'undefined';\n\n// Only import server-side dependencies when running on server\nlet getConfiguration: any = null;\n\nif (!isClient) {\n  const azureConfig = require('@/lib/azure-config');\n  getConfiguration = azureConfig.getConfiguration;\n}\n\n// Singleton storage service instance\nlet storageServiceInstance: IStorageService | null = null;\n\n/**\n * Gets the Azure Blob Storage service instance.\n * All storage operations now use Azure exclusively.\n */\nexport async function getStorageService(): Promise<IStorageService> {\n  if (isClient) {\n    throw new Error('Storage service not available on client side');\n  }\n  \n  if (storageServiceInstance) {\n    return storageServiceInstance;\n  }\n\n  storageServiceInstance = await createAzureStorageService();\n  return storageServiceInstance;\n}\n\n/**\n * Creates an Azure Blob Storage service instance with proper configuration.\n */\nasync function createAzureStorageService(): Promise<AzureBlobStorageService> {\n  if (isClient) {\n    throw new Error('Storage service not available on client side');\n  }\n  \n  try {\n    const config = await getConfiguration();\n    const storageAccountName = config['AZURE_STORAGE_ACCOUNT'] || process.env.AZURE_STORAGE_ACCOUNT || 'prepbettrstorage684';\n    const containerName = config['AZURE_STORAGE_CONTAINER'] || process.env.AZURE_STORAGE_CONTAINER || 'resumes';\n    \n    return new AzureBlobStorageService(storageAccountName, containerName);\n  } catch (error) {\n    console.error('Failed to create Azure storage service:', error);\n    throw error;\n  }\n}\n\n\n/**\n * Resets the singleton storage service instance.\n * Useful for testing or configuration changes.\n */\nexport function resetStorageService(): void {\n  storageServiceInstance = null;\n}\n\n/**\n * Resume-specific utilities for backward compatibility\n */\nexport class ResumeStorageService {\n  private storageService: IStorageService | null = null;\n\n  async getService(): Promise<IStorageService> {\n    if (!this.storageService) {\n      this.storageService = await getStorageService();\n    }\n    return this.storageService;\n  }\n\n  /**\n   * Upload a resume file with proper path organization\n   */\n  async uploadResume(\n    userId: string,\n    fileBuffer: Buffer,\n    fileName: string,\n    mimeType: string\n  ): Promise<{ fileUrl: string; filePath: string; sasUrl?: string; provider: StorageProvider }> {\n    const service = await this.getService();\n    const filePath = `resumes/${userId}/${fileName}`;\n    \n    const result = await service.upload(fileBuffer, filePath, mimeType);\n    \n    return {\n      fileUrl: result.url,\n      filePath: result.path,\n      sasUrl: result.sasUrl,\n      provider: StorageProvider.Azure,\n    };\n  }\n\n  /**\n   * Delete a resume file\n   */\n  async deleteResume(filePath: string): Promise<void> {\n    const service = await this.getService();\n    await service.delete(filePath);\n  }\n\n  /**\n   * Generate a secure URL for resume access\n   */\n  async getResumeUrl(filePath: string, expiresInHours: number = 24): Promise<string> {\n    const service = await this.getService();\n    return await service.getPublicUrl(filePath, {\n      expiresIn: expiresInHours * 3600,\n      accessType: 'read',\n    });\n  }\n}\n\n// Export singleton instance for resume operations\nexport const resumeStorageService = new ResumeStorageService();\n"],"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","ignoreList":[]}