3cfe10cf5b9b25c09d64ccf68ac1ba67
"use strict";

/**
 * Mock Interview Generator Service
 *
 * This service generates dynamic mock interviews using Azure OpenAI,
 * creating unique roles, companies, tech stacks, and questions while
 * avoiding duplicates and implementing memoization for efficiency.
 */
/* istanbul ignore next */
function cov_s2twl7gbr() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/services/mock-interview.service.ts";
  var hash = "53ea6640a5cfe59bf919fcdcd04183090d83f11c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/services/mock-interview.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 62
        }
      },
      "1": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 10,
          column: 69
        }
      },
      "2": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 50
        }
      },
      "3": {
        start: {
          line: 12,
          column: 22
        },
        end: {
          line: 12,
          column: 53
        }
      },
      "4": {
        start: {
          line: 13,
          column: 16
        },
        end: {
          line: 13,
          column: 38
        }
      },
      "5": {
        start: {
          line: 15,
          column: 24
        },
        end: {
          line: 19,
          column: 1
        }
      },
      "6": {
        start: {
          line: 21,
          column: 23
        },
        end: {
          line: 21,
          column: 42
        }
      },
      "7": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 35
        }
      },
      "8": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 35
        }
      },
      "9": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 40
        }
      },
      "10": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 40
        }
      },
      "11": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 35
        }
      },
      "12": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 39
        }
      },
      "13": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 67
        }
      },
      "14": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 48,
          column: 9
        }
      },
      "15": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 70
        }
      },
      "16": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 42,
          column: 13
        }
      },
      "17": {
        start: {
          line: 41,
          column: 16
        },
        end: {
          line: 41,
          column: 68
        }
      },
      "18": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 38
        }
      },
      "19": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 83
        }
      },
      "20": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 25
        }
      },
      "21": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 56,
          column: 9
        }
      },
      "22": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 70
        }
      },
      "23": {
        start: {
          line: 58,
          column: 33
        },
        end: {
          line: 58,
          column: 77
        }
      },
      "24": {
        start: {
          line: 59,
          column: 37
        },
        end: {
          line: 59,
          column: 89
        }
      },
      "25": {
        start: {
          line: 60,
          column: 23
        },
        end: {
          line: 76,
          column: 2
        }
      },
      "26": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "27": {
        start: {
          line: 79,
          column: 29
        },
        end: {
          line: 81,
          column: 13
        }
      },
      "28": {
        start: {
          line: 83,
          column: 36
        },
        end: {
          line: 83,
          column: 85
        }
      },
      "29": {
        start: {
          line: 84,
          column: 34
        },
        end: {
          line: 84,
          column: 61
        }
      },
      "30": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 55
        }
      },
      "31": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 58
        }
      },
      "32": {
        start: {
          line: 89,
          column: 29
        },
        end: {
          line: 89,
          column: 81
        }
      },
      "33": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 93,
          column: 15
        }
      },
      "34": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 68
        }
      },
      "35": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 33
        }
      },
      "36": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 80
        }
      },
      "37": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 42
        }
      },
      "38": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "39": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 70
        }
      },
      "40": {
        start: {
          line: 111,
          column: 25
        },
        end: {
          line: 111,
          column: 61
        }
      },
      "41": {
        start: {
          line: 112,
          column: 23
        },
        end: {
          line: 112,
          column: 56
        }
      },
      "42": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 116,
          column: 9
        }
      },
      "43": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 69
        }
      },
      "44": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 44
        }
      },
      "45": {
        start: {
          line: 117,
          column: 23
        },
        end: {
          line: 131,
          column: 2
        }
      },
      "46": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 151,
          column: 9
        }
      },
      "47": {
        start: {
          line: 133,
          column: 29
        },
        end: {
          line: 135,
          column: 13
        }
      },
      "48": {
        start: {
          line: 137,
          column: 36
        },
        end: {
          line: 137,
          column: 85
        }
      },
      "49": {
        start: {
          line: 138,
          column: 34
        },
        end: {
          line: 138,
          column: 61
        }
      },
      "50": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 143,
          column: 15
        }
      },
      "51": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 81
        }
      },
      "52": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 46
        }
      },
      "53": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 67
        }
      },
      "54": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 51
        }
      },
      "55": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 159,
          column: 9
        }
      },
      "56": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 158,
          column: 70
        }
      },
      "57": {
        start: {
          line: 161,
          column: 25
        },
        end: {
          line: 161,
          column: 74
        }
      },
      "58": {
        start: {
          line: 162,
          column: 23
        },
        end: {
          line: 162,
          column: 56
        }
      },
      "59": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 166,
          column: 9
        }
      },
      "60": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 164,
          column: 68
        }
      },
      "61": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 31
        }
      },
      "62": {
        start: {
          line: 168,
          column: 27
        },
        end: {
          line: 173,
          column: 9
        }
      },
      "63": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 189,
          column: 9
        }
      },
      "64": {
        start: {
          line: 176,
          column: 30
        },
        end: {
          line: 176,
          column: 83
        }
      },
      "65": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 181,
          column: 15
        }
      },
      "66": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 91
        }
      },
      "67": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 29
        }
      },
      "68": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 66
        }
      },
      "69": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 188,
          column: 57
        }
      },
      "70": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 197,
          column: 9
        }
      },
      "71": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 36
        }
      },
      "72": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "73": {
        start: {
          line: 200,
          column: 25
        },
        end: {
          line: 200,
          column: 66
        }
      },
      "74": {
        start: {
          line: 202,
          column: 30
        },
        end: {
          line: 202,
          column: 64
        }
      },
      "75": {
        start: {
          line: 204,
          column: 34
        },
        end: {
          line: 204,
          column: 60
        }
      },
      "76": {
        start: {
          line: 206,
          column: 30
        },
        end: {
          line: 206,
          column: 90
        }
      },
      "77": {
        start: {
          line: 208,
          column: 36
        },
        end: {
          line: 214,
          column: 15
        }
      },
      "78": {
        start: {
          line: 208,
          column: 63
        },
        end: {
          line: 214,
          column: 13
        }
      },
      "79": {
        start: {
          line: 216,
          column: 32
        },
        end: {
          line: 216,
          column: 58
        }
      },
      "80": {
        start: {
          line: 218,
          column: 38
        },
        end: {
          line: 218,
          column: 90
        }
      },
      "81": {
        start: {
          line: 220,
          column: 30
        },
        end: {
          line: 235,
          column: 13
        }
      },
      "82": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 241,
          column: 15
        }
      },
      "83": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 29
        }
      },
      "84": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 69
        }
      },
      "85": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 63
        }
      },
      "86": {
        start: {
          line: 253,
          column: 23
        },
        end: {
          line: 253,
          column: 36
        }
      },
      "87": {
        start: {
          line: 254,
          column: 31
        },
        end: {
          line: 254,
          column: 32
        }
      },
      "88": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 260,
          column: 9
        }
      },
      "89": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 256,
          column: 39
        }
      },
      "90": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 259,
          column: 13
        }
      },
      "91": {
        start: {
          line: 258,
          column: 16
        },
        end: {
          line: 258,
          column: 28
        }
      },
      "92": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 261,
          column: 23
        }
      },
      "93": {
        start: {
          line: 267,
          column: 26
        },
        end: {
          line: 267,
          column: 36
        }
      },
      "94": {
        start: {
          line: 268,
          column: 23
        },
        end: {
          line: 268,
          column: 65
        }
      },
      "95": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 269,
          column: 45
        }
      },
      "96": {
        start: {
          line: 275,
          column: 29
        },
        end: {
          line: 281,
          column: 9
        }
      },
      "97": {
        start: {
          line: 282,
          column: 8
        },
        end: {
          line: 282,
          column: 80
        }
      },
      "98": {
        start: {
          line: 288,
          column: 30
        },
        end: {
          line: 319,
          column: 9
        }
      },
      "99": {
        start: {
          line: 321,
          column: 31
        },
        end: {
          line: 321,
          column: 127
        }
      },
      "100": {
        start: {
          line: 321,
          column: 57
        },
        end: {
          line: 321,
          column: 126
        }
      },
      "101": {
        start: {
          line: 322,
          column: 8
        },
        end: {
          line: 327,
          column: 9
        }
      },
      "102": {
        start: {
          line: 324,
          column: 25
        },
        end: {
          line: 324,
          column: 60
        }
      },
      "103": {
        start: {
          line: 325,
          column: 12
        },
        end: {
          line: 325,
          column: 66
        }
      },
      "104": {
        start: {
          line: 326,
          column: 12
        },
        end: {
          line: 326,
          column: 24
        }
      },
      "105": {
        start: {
          line: 328,
          column: 25
        },
        end: {
          line: 328,
          column: 90
        }
      },
      "106": {
        start: {
          line: 329,
          column: 8
        },
        end: {
          line: 329,
          column: 46
        }
      },
      "107": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 330,
          column: 49
        }
      },
      "108": {
        start: {
          line: 331,
          column: 8
        },
        end: {
          line: 331,
          column: 24
        }
      },
      "109": {
        start: {
          line: 337,
          column: 27
        },
        end: {
          line: 346,
          column: 9
        }
      },
      "110": {
        start: {
          line: 348,
          column: 8
        },
        end: {
          line: 352,
          column: 9
        }
      },
      "111": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 351,
          column: 13
        }
      },
      "112": {
        start: {
          line: 350,
          column: 16
        },
        end: {
          line: 350,
          column: 40
        }
      },
      "113": {
        start: {
          line: 354,
          column: 8
        },
        end: {
          line: 354,
          column: 64
        }
      },
      "114": {
        start: {
          line: 360,
          column: 32
        },
        end: {
          line: 382,
          column: 9
        }
      },
      "115": {
        start: {
          line: 383,
          column: 8
        },
        end: {
          line: 383,
          column: 65
        }
      },
      "116": {
        start: {
          line: 389,
          column: 8
        },
        end: {
          line: 389,
          column: 31
        }
      },
      "117": {
        start: {
          line: 390,
          column: 8
        },
        end: {
          line: 390,
          column: 36
        }
      },
      "118": {
        start: {
          line: 391,
          column: 8
        },
        end: {
          line: 391,
          column: 36
        }
      },
      "119": {
        start: {
          line: 392,
          column: 8
        },
        end: {
          line: 392,
          column: 31
        }
      },
      "120": {
        start: {
          line: 393,
          column: 8
        },
        end: {
          line: 393,
          column: 35
        }
      },
      "121": {
        start: {
          line: 394,
          column: 8
        },
        end: {
          line: 394,
          column: 64
        }
      },
      "122": {
        start: {
          line: 400,
          column: 20
        },
        end: {
          line: 400,
          column: 30
        }
      },
      "123": {
        start: {
          line: 402,
          column: 8
        },
        end: {
          line: 406,
          column: 9
        }
      },
      "124": {
        start: {
          line: 403,
          column: 12
        },
        end: {
          line: 405,
          column: 13
        }
      },
      "125": {
        start: {
          line: 404,
          column: 16
        },
        end: {
          line: 404,
          column: 43
        }
      },
      "126": {
        start: {
          line: 408,
          column: 8
        },
        end: {
          line: 412,
          column: 9
        }
      },
      "127": {
        start: {
          line: 409,
          column: 12
        },
        end: {
          line: 411,
          column: 13
        }
      },
      "128": {
        start: {
          line: 410,
          column: 16
        },
        end: {
          line: 410,
          column: 48
        }
      },
      "129": {
        start: {
          line: 414,
          column: 8
        },
        end: {
          line: 418,
          column: 9
        }
      },
      "130": {
        start: {
          line: 415,
          column: 12
        },
        end: {
          line: 417,
          column: 13
        }
      },
      "131": {
        start: {
          line: 416,
          column: 16
        },
        end: {
          line: 416,
          column: 48
        }
      },
      "132": {
        start: {
          line: 419,
          column: 8
        },
        end: {
          line: 419,
          column: 56
        }
      },
      "133": {
        start: {
          line: 425,
          column: 8
        },
        end: {
          line: 431,
          column: 10
        }
      },
      "134": {
        start: {
          line: 434,
          column: 0
        },
        end: {
          line: 434,
          column: 52
        }
      },
      "135": {
        start: {
          line: 436,
          column: 0
        },
        end: {
          line: 436,
          column: 58
        }
      },
      "136": {
        start: {
          line: 439,
          column: 4
        },
        end: {
          line: 439,
          column: 68
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        loc: {
          start: {
            line: 23,
            column: 18
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 23
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        },
        loc: {
          start: {
            line: 37,
            column: 23
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 37
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 53,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        },
        loc: {
          start: {
            line: 53,
            column: 71
          },
          end: {
            line: 102,
            column: 5
          }
        },
        line: 53
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 106,
            column: 5
          }
        },
        loc: {
          start: {
            line: 106,
            column: 34
          },
          end: {
            line: 152,
            column: 5
          }
        },
        line: 106
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 156,
            column: 4
          },
          end: {
            line: 156,
            column: 5
          }
        },
        loc: {
          start: {
            line: 156,
            column: 51
          },
          end: {
            line: 190,
            column: 5
          }
        },
        line: 156
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 194,
            column: 4
          },
          end: {
            line: 194,
            column: 5
          }
        },
        loc: {
          start: {
            line: 194,
            column: 38
          },
          end: {
            line: 248,
            column: 5
          }
        },
        line: 194
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 208,
            column: 50
          },
          end: {
            line: 208,
            column: 51
          }
        },
        loc: {
          start: {
            line: 208,
            column: 63
          },
          end: {
            line: 214,
            column: 13
          }
        },
        line: 208
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 252,
            column: 4
          },
          end: {
            line: 252,
            column: 5
          }
        },
        loc: {
          start: {
            line: 252,
            column: 26
          },
          end: {
            line: 262,
            column: 5
          }
        },
        line: 252
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 266,
            column: 4
          },
          end: {
            line: 266,
            column: 5
          }
        },
        loc: {
          start: {
            line: 266,
            column: 26
          },
          end: {
            line: 270,
            column: 5
          }
        },
        line: 266
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 274,
            column: 4
          },
          end: {
            line: 274,
            column: 5
          }
        },
        loc: {
          start: {
            line: 274,
            column: 40
          },
          end: {
            line: 283,
            column: 5
          }
        },
        line: 274
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 287,
            column: 4
          },
          end: {
            line: 287,
            column: 5
          }
        },
        loc: {
          start: {
            line: 287,
            column: 22
          },
          end: {
            line: 332,
            column: 5
          }
        },
        line: 287
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 321,
            column: 52
          },
          end: {
            line: 321,
            column: 53
          }
        },
        loc: {
          start: {
            line: 321,
            column: 57
          },
          end: {
            line: 321,
            column: 126
          }
        },
        line: 321
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 336,
            column: 4
          },
          end: {
            line: 336,
            column: 5
          }
        },
        loc: {
          start: {
            line: 336,
            column: 31
          },
          end: {
            line: 355,
            column: 5
          }
        },
        line: 336
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 359,
            column: 4
          },
          end: {
            line: 359,
            column: 5
          }
        },
        loc: {
          start: {
            line: 359,
            column: 37
          },
          end: {
            line: 384,
            column: 5
          }
        },
        line: 359
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 388,
            column: 4
          },
          end: {
            line: 388,
            column: 5
          }
        },
        loc: {
          start: {
            line: 388,
            column: 18
          },
          end: {
            line: 395,
            column: 5
          }
        },
        line: 388
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 399,
            column: 4
          },
          end: {
            line: 399,
            column: 5
          }
        },
        loc: {
          start: {
            line: 399,
            column: 24
          },
          end: {
            line: 420,
            column: 5
          }
        },
        line: 399
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 424,
            column: 4
          },
          end: {
            line: 424,
            column: 5
          }
        },
        loc: {
          start: {
            line: 424,
            column: 20
          },
          end: {
            line: 432,
            column: 5
          }
        },
        line: 424
      },
      "17": {
        name: "createMockInterview",
        decl: {
          start: {
            line: 438,
            column: 15
          },
          end: {
            line: 438,
            column: 34
          }
        },
        loc: {
          start: {
            line: 438,
            column: 43
          },
          end: {
            line: 440,
            column: 1
          }
        },
        line: 438
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 42,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 12
          },
          end: {
            line: 42,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "1": {
        loc: {
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "2": {
        loc: {
          start: {
            line: 58,
            column: 57
          },
          end: {
            line: 58,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 58,
            column: 57
          },
          end: {
            line: 58,
            column: 69
          }
        }, {
          start: {
            line: 58,
            column: 73
          },
          end: {
            line: 58,
            column: 75
          }
        }],
        line: 58
      },
      "3": {
        loc: {
          start: {
            line: 59,
            column: 65
          },
          end: {
            line: 59,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 59,
            column: 65
          },
          end: {
            line: 59,
            column: 81
          }
        }, {
          start: {
            line: 59,
            column: 85
          },
          end: {
            line: 59,
            column: 87
          }
        }],
        line: 59
      },
      "4": {
        loc: {
          start: {
            line: 67,
            column: 48
          },
          end: {
            line: 67,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 67,
            column: 48
          },
          end: {
            line: 67,
            column: 75
          }
        }, {
          start: {
            line: 67,
            column: 79
          },
          end: {
            line: 67,
            column: 85
          }
        }],
        line: 67
      },
      "5": {
        loc: {
          start: {
            line: 68,
            column: 52
          },
          end: {
            line: 68,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 68,
            column: 52
          },
          end: {
            line: 68,
            column: 83
          }
        }, {
          start: {
            line: 68,
            column: 87
          },
          end: {
            line: 68,
            column: 93
          }
        }],
        line: 68
      },
      "6": {
        loc: {
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 109,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "7": {
        loc: {
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 116,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 116,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "8": {
        loc: {
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 113,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 113,
            column: 18
          }
        }, {
          start: {
            line: 113,
            column: 22
          },
          end: {
            line: 113,
            column: 70
          }
        }],
        line: 113
      },
      "9": {
        loc: {
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 159,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 159,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 157
      },
      "10": {
        loc: {
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "11": {
        loc: {
          start: {
            line: 163,
            column: 12
          },
          end: {
            line: 163,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 163,
            column: 12
          },
          end: {
            line: 163,
            column: 18
          }
        }, {
          start: {
            line: 163,
            column: 22
          },
          end: {
            line: 163,
            column: 70
          }
        }],
        line: 163
      },
      "12": {
        loc: {
          start: {
            line: 195,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 195,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 195
      },
      "13": {
        loc: {
          start: {
            line: 222,
            column: 24
          },
          end: {
            line: 222,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 222,
            column: 24
          },
          end: {
            line: 222,
            column: 30
          }
        }, {
          start: {
            line: 222,
            column: 34
          },
          end: {
            line: 222,
            column: 45
          }
        }],
        line: 222
      },
      "14": {
        loc: {
          start: {
            line: 257,
            column: 12
          },
          end: {
            line: 259,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 257,
            column: 12
          },
          end: {
            line: 259,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 257
      },
      "15": {
        loc: {
          start: {
            line: 282,
            column: 15
          },
          end: {
            line: 282,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 282,
            column: 15
          },
          end: {
            line: 282,
            column: 38
          }
        }, {
          start: {
            line: 282,
            column: 42
          },
          end: {
            line: 282,
            column: 79
          }
        }],
        line: 282
      },
      "16": {
        loc: {
          start: {
            line: 321,
            column: 57
          },
          end: {
            line: 321,
            column: 126
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 321,
            column: 57
          },
          end: {
            line: 321,
            column: 88
          }
        }, {
          start: {
            line: 321,
            column: 92
          },
          end: {
            line: 321,
            column: 126
          }
        }],
        line: 321
      },
      "17": {
        loc: {
          start: {
            line: 322,
            column: 8
          },
          end: {
            line: 327,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 322,
            column: 8
          },
          end: {
            line: 327,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 322
      },
      "18": {
        loc: {
          start: {
            line: 349,
            column: 12
          },
          end: {
            line: 351,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 349,
            column: 12
          },
          end: {
            line: 351,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 349
      },
      "19": {
        loc: {
          start: {
            line: 383,
            column: 15
          },
          end: {
            line: 383,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 383,
            column: 15
          },
          end: {
            line: 383,
            column: 36
          }
        }, {
          start: {
            line: 383,
            column: 40
          },
          end: {
            line: 383,
            column: 64
          }
        }],
        line: 383
      },
      "20": {
        loc: {
          start: {
            line: 403,
            column: 12
          },
          end: {
            line: 405,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 403,
            column: 12
          },
          end: {
            line: 405,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 403
      },
      "21": {
        loc: {
          start: {
            line: 409,
            column: 12
          },
          end: {
            line: 411,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 409,
            column: 12
          },
          end: {
            line: 411,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 409
      },
      "22": {
        loc: {
          start: {
            line: 415,
            column: 12
          },
          end: {
            line: 417,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 415,
            column: 12
          },
          end: {
            line: 417,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 415
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/services/mock-interview.service.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/services/mock-interview.service.ts"],
      sourcesContent: ["/**\n * Mock Interview Generator Service\n * \n * This service generates dynamic mock interviews using Azure OpenAI,\n * creating unique roles, companies, tech stacks, and questions while\n * avoiding duplicates and implementing memoization for efficiency.\n */\n\nimport { AzureOpenAIAdapter } from '@/lib/ai/azureOpenAI';\nimport { getCompanyLogoForInterview } from '@/lib/utils';\nimport type { Interview } from '@/types';\n// Interview type imported from types/index.ts\n\n// Types for generated content\ninterface GeneratedRole {\n  jobTitle: string;\n  seniority: 'Junior' | 'Mid-level' | 'Senior' | 'Lead' | 'Principal';\n  company: string;\n  industry: string;\n}\n\ninterface GeneratedTechStack {\n  technologies: string[];\n  primaryFocus: string;\n}\n\ninterface CachedEntry<T> {\n  data: T;\n  timestamp: number;\n}\n\n// Interview types with weighted distribution\nconst INTERVIEW_TYPES = [\n  { type: 'Technical', weight: 0.33 },\n  { type: 'Behavioral', weight: 0.33 },\n  { type: 'Mixed', weight: 0.34 }\n];\n\n// Cache configuration\nconst CACHE_DURATION = 24 * 60 * 60 * 1000; // 24 hours in milliseconds\n\nexport class MockInterviewService {\n  private azureAdapter: AzureOpenAIAdapter;\n  private isInitialized = false;\n  \n  // Memoization caches\n  private roleCache = new Map<string, CachedEntry<GeneratedRole>>();\n  private techStackCache = new Map<string, CachedEntry<GeneratedTechStack>>();\n  private questionsCache = new Map<string, CachedEntry<string[]>>();\n  \n  // Exclusion lists to avoid duplicates\n  private usedRoles = new Set<string>();\n  private usedCompanies = new Set<string>();\n\n  constructor() {\n    this.azureAdapter = new AzureOpenAIAdapter();\n  }\n\n  /**\n   * Initialize the service\n   */\n  async initialize(): Promise<boolean> {\n    try {\n      this.isInitialized = await this.azureAdapter.initialize();\n      if (this.isInitialized) {\n        console.log('\u2705 Mock Interview Service initialized');\n      }\n      return this.isInitialized;\n    } catch (error) {\n      console.error('\u274C Failed to initialize Mock Interview Service:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Generate a unique role and company with Azure OpenAI\n   */\n  async generateUniqueRoleAndCompany(\n    excludeRoles?: string[],\n    excludeCompanies?: string[]\n  ): Promise<GeneratedRole> {\n    if (!this.isInitialized) {\n      throw new Error('Mock Interview Service not initialized');\n    }\n\n    // Combine exclusion lists\n    const allExcludedRoles = [...this.usedRoles, ...(excludeRoles || [])];\n    const allExcludedCompanies = [...this.usedCompanies, ...(excludeCompanies || [])];\n\n    const prompt = `Generate a unique job interview scenario with the following requirements:\n\n1. Create a realistic job title (NOT generic like \"Software Engineer\")\n2. Assign an appropriate seniority level (Junior, Mid-level, Senior, Lead, or Principal)\n3. Create a fictitious but realistic company name (must be creative and unique)\n4. Specify the industry sector\n\nIMPORTANT: Avoid these previously used roles: ${allExcludedRoles.join(', ') || 'none'}\nIMPORTANT: Avoid these previously used companies: ${allExcludedCompanies.join(', ') || 'none'}\n\nReturn ONLY a valid JSON object in this exact format:\n{\n  \"jobTitle\": \"Example: Cloud Architecture Specialist\",\n  \"seniority\": \"Senior\",\n  \"company\": \"Example: TechNova Solutions\",\n  \"industry\": \"Example: Financial Technology\"\n}`;\n\n    try {\n      // Generate using Azure OpenAI (via adapter's internal method)\n      const response = await (this.azureAdapter as any).generateWithAzureOpenAI(\n        prompt,\n        0.8, // Higher temperature for creativity\n        150  // Max tokens for JSON response\n      );\n\n      // Parse the JSON response\n      const cleanedResponse = response.replace(/```json\\n?|\\n?```/g, '').trim();\n      const generatedRole = JSON.parse(cleanedResponse) as GeneratedRole;\n\n      // Add to exclusion lists\n      this.usedRoles.add(generatedRole.jobTitle);\n      this.usedCompanies.add(generatedRole.company);\n\n      // Cache the result\n      const cacheKey = `${generatedRole.jobTitle}-${generatedRole.company}`;\n      this.roleCache.set(cacheKey, {\n        data: generatedRole,\n        timestamp: Date.now()\n      });\n\n      console.log('\uD83D\uDCCB Generated unique role:', generatedRole);\n      return generatedRole;\n    } catch (error) {\n      console.error('\u274C Error generating unique role and company:', error);\n      \n      // Fallback to predefined options\n      return this.getFallbackRole();\n    }\n  }\n\n  /**\n   * Generate relevant tech stack for a given role\n   */\n  async generateTechStack(role: GeneratedRole): Promise<string[]> {\n    if (!this.isInitialized) {\n      throw new Error('Mock Interview Service not initialized');\n    }\n\n    // Check cache first\n    const cacheKey = `${role.jobTitle}-${role.seniority}`;\n    const cached = this.techStackCache.get(cacheKey);\n    \n    if (cached && (Date.now() - cached.timestamp) < CACHE_DURATION) {\n      console.log('\uD83D\uDCE6 Using cached tech stack for:', cacheKey);\n      return cached.data.technologies;\n    }\n\n    const prompt = `Based on this job role, generate a relevant technology stack:\n\nRole: ${role.jobTitle}\nSeniority: ${role.seniority}\nCompany: ${role.company}\nIndustry: ${role.industry}\n\nGenerate 4-6 specific technologies that would be relevant for this position.\nConsider the seniority level when selecting technologies (e.g., more advanced tools for senior roles).\n\nReturn ONLY a valid JSON object in this exact format:\n{\n  \"technologies\": [\"Tech1\", \"Tech2\", \"Tech3\", \"Tech4\"],\n  \"primaryFocus\": \"Brief description of the tech focus area\"\n}`;\n\n    try {\n      const response = await (this.azureAdapter as any).generateWithAzureOpenAI(\n        prompt,\n        0.5, // Moderate temperature for relevant but varied tech\n        150  // Max tokens for JSON response\n      );\n\n      // Parse the JSON response\n      const cleanedResponse = response.replace(/```json\\n?|\\n?```/g, '').trim();\n      const generatedTech = JSON.parse(cleanedResponse) as GeneratedTechStack;\n\n      // Cache the result\n      this.techStackCache.set(cacheKey, {\n        data: generatedTech,\n        timestamp: Date.now()\n      });\n\n      console.log('\uD83D\uDEE0\uFE0F Generated tech stack:', generatedTech.technologies);\n      return generatedTech.technologies;\n    } catch (error) {\n      console.error('\u274C Error generating tech stack:', error);\n      \n      // Fallback to common tech stacks based on role\n      return this.getFallbackTechStack(role);\n    }\n  }\n\n  /**\n   * Generate interview questions using the existing adapter method\n   */\n  async generateQuestions(\n    role: GeneratedRole,\n    type: string,\n    techStack: string[]\n  ): Promise<string[]> {\n    if (!this.isInitialized) {\n      throw new Error('Mock Interview Service not initialized');\n    }\n\n    // Create cache key\n    const cacheKey = `${role.jobTitle}-${type}-${techStack.join(',')}`;\n    const cached = this.questionsCache.get(cacheKey);\n    \n    if (cached && (Date.now() - cached.timestamp) < CACHE_DURATION) {\n      console.log('\uD83D\uDCE6 Using cached questions for:', cacheKey);\n      return cached.data;\n    }\n\n    // Create ResumeInfo object for the adapter's generateQuestions method\n    const resumeInfo = {\n      name: 'Mock Candidate',\n      experience: `${role.seniority} ${role.jobTitle} with expertise in ${techStack.slice(0, 3).join(', ')}`,\n      education: this.getEducationForSeniority(role.seniority),\n      skills: techStack.join(', ')\n    };\n\n    try {\n      // Use the existing adapter method\n      const questions = await this.azureAdapter.generateQuestions(resumeInfo);\n      \n      // Cache the result\n      this.questionsCache.set(cacheKey, {\n        data: questions,\n        timestamp: Date.now()\n      });\n\n      console.log(`\u2753 Generated ${questions.length} questions for ${type} interview`);\n      return questions;\n    } catch (error) {\n      console.error('\u274C Error generating questions:', error);\n      \n      // Fallback questions based on type\n      return this.getFallbackQuestions(type, role);\n    }\n  }\n\n  /**\n   * Main method to create a complete mock interview\n   */\n  async createMockInterview(userId?: string): Promise<Interview> {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n\n    try {\n      // Step 1: Generate unique role and company\n      const role = await this.generateUniqueRoleAndCompany();\n      \n      // Step 2: Generate relevant tech stack\n      const techStack = await this.generateTechStack(role);\n      \n      // Step 3: Select interview type (weighted random selection)\n      const interviewType = this.selectInterviewType();\n      \n      // Step 4: Generate questions based on role, type, and tech stack\n      const questions = await this.generateQuestions(role, interviewType, techStack);\n      \n      // Normalize questions into structured Question objects\n      const questionObjects = questions.map((q, idx) => ({\n        id: `q${idx + 1}`,\n        text: q,\n        question: q,\n        category: interviewType.toLowerCase(),\n        difficulty: 'medium',\n      }));\n      \n      // Step 5: Generate unique interview ID\n      const interviewId = this.generateInterviewId();\n      \n      // Step 6: Get company logo deterministically based on interview ID\n      const { logo, company } = getCompanyLogoForInterview(interviewId);\n      \n      // Step 7: Create Interview object with company branding\n      const interview: Interview = {\n        id: interviewId,\n        userId: userId || 'mock-user',\n        jobTitle: role.jobTitle,\n        company: company,\n        questions: questionObjects,\n        finalized: true, // Mock interviews are pre-finalized\n        createdAt: new Date().toISOString(),\n        // Legacy properties for backward compatibility\n        role: `${role.jobTitle} at ${company}`,\n        level: role.seniority,\n        type: interviewType,\n        techstack: techStack,\n        companyLogo: logo,\n        companyName: company\n      };\n\n      console.log('\u2728 Created mock interview:', {\n        id: interview.id,\n        role: interview.role,\n        type: interview.type,\n        questionCount: interview.questions.length\n      });\n\n      return interview;\n    } catch (error) {\n      console.error('\u274C Error creating mock interview:', error);\n      throw new Error('Failed to create mock interview');\n    }\n  }\n\n  /**\n   * Select interview type based on weighted distribution\n   */\n  private selectInterviewType(): string {\n    const random = Math.random();\n    let cumulativeWeight = 0;\n    \n    for (const { type, weight } of INTERVIEW_TYPES) {\n      cumulativeWeight += weight;\n      if (random <= cumulativeWeight) {\n        return type;\n      }\n    }\n    \n    return 'Mixed'; // Default fallback\n  }\n\n  /**\n   * Generate unique interview ID\n   */\n  private generateInterviewId(): string {\n    const timestamp = Date.now();\n    const random = Math.random().toString(36).substring(2, 9);\n    return `mock-${timestamp}-${random}`;\n  }\n\n  /**\n   * Get education level based on seniority\n   */\n  private getEducationForSeniority(seniority: string): string {\n    const educationMap: Record<string, string> = {\n      'Junior': \"Bachelor's degree in Computer Science or related field\",\n      'Mid-level': \"Bachelor's degree with 3-5 years experience\",\n      'Senior': \"Bachelor's/Master's degree with 5+ years experience\",\n      'Lead': \"Advanced degree with 7+ years experience\",\n      'Principal': \"Advanced degree with 10+ years experience\"\n    };\n    \n    return educationMap[seniority] || \"Bachelor's degree in relevant field\";\n  }\n\n  /**\n   * Fallback role generation when API fails\n   */\n  private getFallbackRole(): GeneratedRole {\n    const fallbackRoles: GeneratedRole[] = [\n      {\n        jobTitle: 'Full Stack Developer',\n        seniority: 'Senior',\n        company: 'InnovateTech Solutions',\n        industry: 'Software Development'\n      },\n      {\n        jobTitle: 'DevOps Engineer',\n        seniority: 'Mid-level',\n        company: 'CloudScale Systems',\n        industry: 'Cloud Infrastructure'\n      },\n      {\n        jobTitle: 'Data Engineer',\n        seniority: 'Senior',\n        company: 'DataFlow Analytics',\n        industry: 'Data Analytics'\n      },\n      {\n        jobTitle: 'Mobile App Developer',\n        seniority: 'Mid-level',\n        company: 'AppCraft Studios',\n        industry: 'Mobile Development'\n      },\n      {\n        jobTitle: 'Machine Learning Engineer',\n        seniority: 'Senior',\n        company: 'AI Innovations Lab',\n        industry: 'Artificial Intelligence'\n      }\n    ];\n\n    // Select a random fallback role that hasn't been used\n    const availableRoles = fallbackRoles.filter(\n      r => !this.usedRoles.has(r.jobTitle) && !this.usedCompanies.has(r.company)\n    );\n    \n    if (availableRoles.length === 0) {\n      // If all fallbacks are used, return the first one with modified company\n      const role = { ...fallbackRoles[0] };\n      role.company = `${role.company} ${Date.now() % 1000}`;\n      return role;\n    }\n    \n    const selected = availableRoles[Math.floor(Math.random() * availableRoles.length)];\n    this.usedRoles.add(selected.jobTitle);\n    this.usedCompanies.add(selected.company);\n    \n    return selected;\n  }\n\n  /**\n   * Fallback tech stack generation based on role\n   */\n  private getFallbackTechStack(role: GeneratedRole): string[] {\n    const techByRole: Record<string, string[]> = {\n      'Full Stack Developer': ['React', 'Node.js', 'MongoDB', 'TypeScript', 'Docker'],\n      'DevOps Engineer': ['Kubernetes', 'Docker', 'AWS', 'Terraform', 'Jenkins'],\n      'Data Engineer': ['Python', 'Apache Spark', 'SQL', 'Kafka', 'Airflow'],\n      'Mobile App Developer': ['React Native', 'TypeScript', 'Redux', 'Firebase', 'GraphQL'],\n      'Machine Learning Engineer': ['Python', 'TensorFlow', 'PyTorch', 'Scikit-learn', 'Docker'],\n      'Frontend Developer': ['React', 'TypeScript', 'Next.js', 'Tailwind CSS', 'Jest'],\n      'Backend Developer': ['Node.js', 'Express', 'PostgreSQL', 'Redis', 'Docker'],\n      'Cloud Architect': ['AWS', 'Terraform', 'Kubernetes', 'Python', 'Ansible']\n    };\n\n    // Find matching tech stack or return generic one\n    for (const [roleKey, tech] of Object.entries(techByRole)) {\n      if (role.jobTitle.toLowerCase().includes(roleKey.toLowerCase())) {\n        return tech.slice(0, 5); // Return 5 technologies\n      }\n    }\n\n    // Generic fallback\n    return ['JavaScript', 'Python', 'Docker', 'Git', 'SQL'];\n  }\n\n  /**\n   * Fallback questions generation\n   */\n  private getFallbackQuestions(type: string, role: GeneratedRole): string[] {\n    const questionsByType: Record<string, string[]> = {\n      'Technical': [\n        `Can you explain your experience with the technologies listed in the ${role.jobTitle} job description?`,\n        'Describe a complex technical problem you solved recently. What was your approach?',\n        'How do you ensure code quality and maintainability in your projects?',\n        'What is your approach to system design and architecture decisions?',\n        'Can you walk me through your debugging process when facing a difficult issue?'\n      ],\n      'Behavioral': [\n        'Tell me about a time when you had to work with a difficult team member.',\n        'Describe a situation where you had to meet a tight deadline. How did you manage it?',\n        'Give an example of when you had to learn a new technology quickly.',\n        'How do you handle constructive criticism and feedback?',\n        'Tell me about a project you\\'re particularly proud of. What was your role?'\n      ],\n      'Mixed': [\n        `What interests you most about the ${role.jobTitle} position at ${role.company}?`,\n        'How do you stay updated with the latest technology trends in your field?',\n        'Describe your ideal work environment and team structure.',\n        'What are your career goals for the next 3-5 years?',\n        'How do you balance technical excellence with meeting business deadlines?'\n      ]\n    };\n\n    return questionsByType[type] || questionsByType['Mixed'];\n  }\n\n  /**\n   * Clear caches (useful for testing or memory management)\n   */\n  clearCaches(): void {\n    this.roleCache.clear();\n    this.techStackCache.clear();\n    this.questionsCache.clear();\n    this.usedRoles.clear();\n    this.usedCompanies.clear();\n    console.log('\uD83E\uDDF9 Mock Interview Service caches cleared');\n  }\n\n  /**\n   * Clean expired cache entries\n   */\n  cleanExpiredCache(): void {\n    const now = Date.now();\n    \n    // Clean role cache\n    for (const [key, entry] of this.roleCache.entries()) {\n      if (now - entry.timestamp > CACHE_DURATION) {\n        this.roleCache.delete(key);\n      }\n    }\n    \n    // Clean tech stack cache\n    for (const [key, entry] of this.techStackCache.entries()) {\n      if (now - entry.timestamp > CACHE_DURATION) {\n        this.techStackCache.delete(key);\n      }\n    }\n    \n    // Clean questions cache\n    for (const [key, entry] of this.questionsCache.entries()) {\n      if (now - entry.timestamp > CACHE_DURATION) {\n        this.questionsCache.delete(key);\n      }\n    }\n    \n    console.log('\uD83E\uDDF9 Expired cache entries cleaned');\n  }\n\n  /**\n   * Get cache statistics (useful for monitoring)\n   */\n  getCacheStats(): {\n    rolesCached: number;\n    techStacksCached: number;\n    questionsCached: number;\n    usedRolesCount: number;\n    usedCompaniesCount: number;\n  } {\n    return {\n      rolesCached: this.roleCache.size,\n      techStacksCached: this.techStackCache.size,\n      questionsCached: this.questionsCache.size,\n      usedRolesCount: this.usedRoles.size,\n      usedCompaniesCount: this.usedCompanies.size\n    };\n  }\n}\n\n// Export singleton instance\nexport const mockInterviewService = new MockInterviewService();\n\n// Export the main creation function for convenience\nexport async function createMockInterview(userId?: string): Promise<Interview> {\n  return mockInterviewService.createMockInterview(userId);\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "53ea6640a5cfe59bf919fcdcd04183090d83f11c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_s2twl7gbr = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_s2twl7gbr();
cov_s2twl7gbr().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_s2twl7gbr().s[1]++;
exports.mockInterviewService = exports.MockInterviewService = void 0;
/* istanbul ignore next */
cov_s2twl7gbr().s[2]++;
exports.createMockInterview = createMockInterview;
const azureOpenAI_1 =
/* istanbul ignore next */
(cov_s2twl7gbr().s[3]++, require("@/lib/ai/azureOpenAI"));
const utils_1 =
/* istanbul ignore next */
(cov_s2twl7gbr().s[4]++, require("@/lib/utils"));
// Interview types with weighted distribution
const INTERVIEW_TYPES =
/* istanbul ignore next */
(cov_s2twl7gbr().s[5]++, [{
  type: 'Technical',
  weight: 0.33
}, {
  type: 'Behavioral',
  weight: 0.33
}, {
  type: 'Mixed',
  weight: 0.34
}]);
// Cache configuration
const CACHE_DURATION =
/* istanbul ignore next */
(cov_s2twl7gbr().s[6]++, 24 * 60 * 60 * 1000); // 24 hours in milliseconds
class MockInterviewService {
  constructor() {
    /* istanbul ignore next */
    cov_s2twl7gbr().f[0]++;
    cov_s2twl7gbr().s[7]++;
    this.isInitialized = false;
    // Memoization caches
    /* istanbul ignore next */
    cov_s2twl7gbr().s[8]++;
    this.roleCache = new Map();
    /* istanbul ignore next */
    cov_s2twl7gbr().s[9]++;
    this.techStackCache = new Map();
    /* istanbul ignore next */
    cov_s2twl7gbr().s[10]++;
    this.questionsCache = new Map();
    // Exclusion lists to avoid duplicates
    /* istanbul ignore next */
    cov_s2twl7gbr().s[11]++;
    this.usedRoles = new Set();
    /* istanbul ignore next */
    cov_s2twl7gbr().s[12]++;
    this.usedCompanies = new Set();
    /* istanbul ignore next */
    cov_s2twl7gbr().s[13]++;
    this.azureAdapter = new azureOpenAI_1.AzureOpenAIAdapter();
  }
  /**
   * Initialize the service
   */
  async initialize() {
    /* istanbul ignore next */
    cov_s2twl7gbr().f[1]++;
    cov_s2twl7gbr().s[14]++;
    try {
      /* istanbul ignore next */
      cov_s2twl7gbr().s[15]++;
      this.isInitialized = await this.azureAdapter.initialize();
      /* istanbul ignore next */
      cov_s2twl7gbr().s[16]++;
      if (this.isInitialized) {
        /* istanbul ignore next */
        cov_s2twl7gbr().b[0][0]++;
        cov_s2twl7gbr().s[17]++;
        console.log('✅ Mock Interview Service initialized');
      } else
      /* istanbul ignore next */
      {
        cov_s2twl7gbr().b[0][1]++;
      }
      cov_s2twl7gbr().s[18]++;
      return this.isInitialized;
    } catch (error) {
      /* istanbul ignore next */
      cov_s2twl7gbr().s[19]++;
      console.error('❌ Failed to initialize Mock Interview Service:', error);
      /* istanbul ignore next */
      cov_s2twl7gbr().s[20]++;
      return false;
    }
  }
  /**
   * Generate a unique role and company with Azure OpenAI
   */
  async generateUniqueRoleAndCompany(excludeRoles, excludeCompanies) {
    /* istanbul ignore next */
    cov_s2twl7gbr().f[2]++;
    cov_s2twl7gbr().s[21]++;
    if (!this.isInitialized) {
      /* istanbul ignore next */
      cov_s2twl7gbr().b[1][0]++;
      cov_s2twl7gbr().s[22]++;
      throw new Error('Mock Interview Service not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_s2twl7gbr().b[1][1]++;
    }
    // Combine exclusion lists
    const allExcludedRoles =
    /* istanbul ignore next */
    (cov_s2twl7gbr().s[23]++, [...this.usedRoles, ...(
    /* istanbul ignore next */
    (cov_s2twl7gbr().b[2][0]++, excludeRoles) ||
    /* istanbul ignore next */
    (cov_s2twl7gbr().b[2][1]++, []))]);
    const allExcludedCompanies =
    /* istanbul ignore next */
    (cov_s2twl7gbr().s[24]++, [...this.usedCompanies, ...(
    /* istanbul ignore next */
    (cov_s2twl7gbr().b[3][0]++, excludeCompanies) ||
    /* istanbul ignore next */
    (cov_s2twl7gbr().b[3][1]++, []))]);
    const prompt =
    /* istanbul ignore next */
    (cov_s2twl7gbr().s[25]++, `Generate a unique job interview scenario with the following requirements:

1. Create a realistic job title (NOT generic like "Software Engineer")
2. Assign an appropriate seniority level (Junior, Mid-level, Senior, Lead, or Principal)
3. Create a fictitious but realistic company name (must be creative and unique)
4. Specify the industry sector

IMPORTANT: Avoid these previously used roles: ${
    /* istanbul ignore next */
    (cov_s2twl7gbr().b[4][0]++, allExcludedRoles.join(', ')) ||
    /* istanbul ignore next */
    (cov_s2twl7gbr().b[4][1]++, 'none')}
IMPORTANT: Avoid these previously used companies: ${
    /* istanbul ignore next */
    (cov_s2twl7gbr().b[5][0]++, allExcludedCompanies.join(', ')) ||
    /* istanbul ignore next */
    (cov_s2twl7gbr().b[5][1]++, 'none')}

Return ONLY a valid JSON object in this exact format:
{
  "jobTitle": "Example: Cloud Architecture Specialist",
  "seniority": "Senior",
  "company": "Example: TechNova Solutions",
  "industry": "Example: Financial Technology"
}`);
    /* istanbul ignore next */
    cov_s2twl7gbr().s[26]++;
    try {
      // Generate using Azure OpenAI (via adapter's internal method)
      const response =
      /* istanbul ignore next */
      (cov_s2twl7gbr().s[27]++, await this.azureAdapter.generateWithAzureOpenAI(prompt, 0.8,
      // Higher temperature for creativity
      150 // Max tokens for JSON response
      ));
      // Parse the JSON response
      const cleanedResponse =
      /* istanbul ignore next */
      (cov_s2twl7gbr().s[28]++, response.replace(/```json\n?|\n?```/g, '').trim());
      const generatedRole =
      /* istanbul ignore next */
      (cov_s2twl7gbr().s[29]++, JSON.parse(cleanedResponse));
      // Add to exclusion lists
      /* istanbul ignore next */
      cov_s2twl7gbr().s[30]++;
      this.usedRoles.add(generatedRole.jobTitle);
      /* istanbul ignore next */
      cov_s2twl7gbr().s[31]++;
      this.usedCompanies.add(generatedRole.company);
      // Cache the result
      const cacheKey =
      /* istanbul ignore next */
      (cov_s2twl7gbr().s[32]++, `${generatedRole.jobTitle}-${generatedRole.company}`);
      /* istanbul ignore next */
      cov_s2twl7gbr().s[33]++;
      this.roleCache.set(cacheKey, {
        data: generatedRole,
        timestamp: Date.now()
      });
      /* istanbul ignore next */
      cov_s2twl7gbr().s[34]++;
      console.log('📋 Generated unique role:', generatedRole);
      /* istanbul ignore next */
      cov_s2twl7gbr().s[35]++;
      return generatedRole;
    } catch (error) {
      /* istanbul ignore next */
      cov_s2twl7gbr().s[36]++;
      console.error('❌ Error generating unique role and company:', error);
      // Fallback to predefined options
      /* istanbul ignore next */
      cov_s2twl7gbr().s[37]++;
      return this.getFallbackRole();
    }
  }
  /**
   * Generate relevant tech stack for a given role
   */
  async generateTechStack(role) {
    /* istanbul ignore next */
    cov_s2twl7gbr().f[3]++;
    cov_s2twl7gbr().s[38]++;
    if (!this.isInitialized) {
      /* istanbul ignore next */
      cov_s2twl7gbr().b[6][0]++;
      cov_s2twl7gbr().s[39]++;
      throw new Error('Mock Interview Service not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_s2twl7gbr().b[6][1]++;
    }
    // Check cache first
    const cacheKey =
    /* istanbul ignore next */
    (cov_s2twl7gbr().s[40]++, `${role.jobTitle}-${role.seniority}`);
    const cached =
    /* istanbul ignore next */
    (cov_s2twl7gbr().s[41]++, this.techStackCache.get(cacheKey));
    /* istanbul ignore next */
    cov_s2twl7gbr().s[42]++;
    if (
    /* istanbul ignore next */
    (cov_s2twl7gbr().b[8][0]++, cached) &&
    /* istanbul ignore next */
    (cov_s2twl7gbr().b[8][1]++, Date.now() - cached.timestamp < CACHE_DURATION)) {
      /* istanbul ignore next */
      cov_s2twl7gbr().b[7][0]++;
      cov_s2twl7gbr().s[43]++;
      console.log('📦 Using cached tech stack for:', cacheKey);
      /* istanbul ignore next */
      cov_s2twl7gbr().s[44]++;
      return cached.data.technologies;
    } else
    /* istanbul ignore next */
    {
      cov_s2twl7gbr().b[7][1]++;
    }
    const prompt =
    /* istanbul ignore next */
    (cov_s2twl7gbr().s[45]++, `Based on this job role, generate a relevant technology stack:

Role: ${role.jobTitle}
Seniority: ${role.seniority}
Company: ${role.company}
Industry: ${role.industry}

Generate 4-6 specific technologies that would be relevant for this position.
Consider the seniority level when selecting technologies (e.g., more advanced tools for senior roles).

Return ONLY a valid JSON object in this exact format:
{
  "technologies": ["Tech1", "Tech2", "Tech3", "Tech4"],
  "primaryFocus": "Brief description of the tech focus area"
}`);
    /* istanbul ignore next */
    cov_s2twl7gbr().s[46]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_s2twl7gbr().s[47]++, await this.azureAdapter.generateWithAzureOpenAI(prompt, 0.5,
      // Moderate temperature for relevant but varied tech
      150 // Max tokens for JSON response
      ));
      // Parse the JSON response
      const cleanedResponse =
      /* istanbul ignore next */
      (cov_s2twl7gbr().s[48]++, response.replace(/```json\n?|\n?```/g, '').trim());
      const generatedTech =
      /* istanbul ignore next */
      (cov_s2twl7gbr().s[49]++, JSON.parse(cleanedResponse));
      // Cache the result
      /* istanbul ignore next */
      cov_s2twl7gbr().s[50]++;
      this.techStackCache.set(cacheKey, {
        data: generatedTech,
        timestamp: Date.now()
      });
      /* istanbul ignore next */
      cov_s2twl7gbr().s[51]++;
      console.log('🛠️ Generated tech stack:', generatedTech.technologies);
      /* istanbul ignore next */
      cov_s2twl7gbr().s[52]++;
      return generatedTech.technologies;
    } catch (error) {
      /* istanbul ignore next */
      cov_s2twl7gbr().s[53]++;
      console.error('❌ Error generating tech stack:', error);
      // Fallback to common tech stacks based on role
      /* istanbul ignore next */
      cov_s2twl7gbr().s[54]++;
      return this.getFallbackTechStack(role);
    }
  }
  /**
   * Generate interview questions using the existing adapter method
   */
  async generateQuestions(role, type, techStack) {
    /* istanbul ignore next */
    cov_s2twl7gbr().f[4]++;
    cov_s2twl7gbr().s[55]++;
    if (!this.isInitialized) {
      /* istanbul ignore next */
      cov_s2twl7gbr().b[9][0]++;
      cov_s2twl7gbr().s[56]++;
      throw new Error('Mock Interview Service not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_s2twl7gbr().b[9][1]++;
    }
    // Create cache key
    const cacheKey =
    /* istanbul ignore next */
    (cov_s2twl7gbr().s[57]++, `${role.jobTitle}-${type}-${techStack.join(',')}`);
    const cached =
    /* istanbul ignore next */
    (cov_s2twl7gbr().s[58]++, this.questionsCache.get(cacheKey));
    /* istanbul ignore next */
    cov_s2twl7gbr().s[59]++;
    if (
    /* istanbul ignore next */
    (cov_s2twl7gbr().b[11][0]++, cached) &&
    /* istanbul ignore next */
    (cov_s2twl7gbr().b[11][1]++, Date.now() - cached.timestamp < CACHE_DURATION)) {
      /* istanbul ignore next */
      cov_s2twl7gbr().b[10][0]++;
      cov_s2twl7gbr().s[60]++;
      console.log('📦 Using cached questions for:', cacheKey);
      /* istanbul ignore next */
      cov_s2twl7gbr().s[61]++;
      return cached.data;
    } else
    /* istanbul ignore next */
    {
      cov_s2twl7gbr().b[10][1]++;
    }
    // Create ResumeInfo object for the adapter's generateQuestions method
    const resumeInfo =
    /* istanbul ignore next */
    (cov_s2twl7gbr().s[62]++, {
      name: 'Mock Candidate',
      experience: `${role.seniority} ${role.jobTitle} with expertise in ${techStack.slice(0, 3).join(', ')}`,
      education: this.getEducationForSeniority(role.seniority),
      skills: techStack.join(', ')
    });
    /* istanbul ignore next */
    cov_s2twl7gbr().s[63]++;
    try {
      // Use the existing adapter method
      const questions =
      /* istanbul ignore next */
      (cov_s2twl7gbr().s[64]++, await this.azureAdapter.generateQuestions(resumeInfo));
      // Cache the result
      /* istanbul ignore next */
      cov_s2twl7gbr().s[65]++;
      this.questionsCache.set(cacheKey, {
        data: questions,
        timestamp: Date.now()
      });
      /* istanbul ignore next */
      cov_s2twl7gbr().s[66]++;
      console.log(`❓ Generated ${questions.length} questions for ${type} interview`);
      /* istanbul ignore next */
      cov_s2twl7gbr().s[67]++;
      return questions;
    } catch (error) {
      /* istanbul ignore next */
      cov_s2twl7gbr().s[68]++;
      console.error('❌ Error generating questions:', error);
      // Fallback questions based on type
      /* istanbul ignore next */
      cov_s2twl7gbr().s[69]++;
      return this.getFallbackQuestions(type, role);
    }
  }
  /**
   * Main method to create a complete mock interview
   */
  async createMockInterview(userId) {
    /* istanbul ignore next */
    cov_s2twl7gbr().f[5]++;
    cov_s2twl7gbr().s[70]++;
    if (!this.isInitialized) {
      /* istanbul ignore next */
      cov_s2twl7gbr().b[12][0]++;
      cov_s2twl7gbr().s[71]++;
      await this.initialize();
    } else
    /* istanbul ignore next */
    {
      cov_s2twl7gbr().b[12][1]++;
    }
    cov_s2twl7gbr().s[72]++;
    try {
      // Step 1: Generate unique role and company
      const role =
      /* istanbul ignore next */
      (cov_s2twl7gbr().s[73]++, await this.generateUniqueRoleAndCompany());
      // Step 2: Generate relevant tech stack
      const techStack =
      /* istanbul ignore next */
      (cov_s2twl7gbr().s[74]++, await this.generateTechStack(role));
      // Step 3: Select interview type (weighted random selection)
      const interviewType =
      /* istanbul ignore next */
      (cov_s2twl7gbr().s[75]++, this.selectInterviewType());
      // Step 4: Generate questions based on role, type, and tech stack
      const questions =
      /* istanbul ignore next */
      (cov_s2twl7gbr().s[76]++, await this.generateQuestions(role, interviewType, techStack));
      // Normalize questions into structured Question objects
      const questionObjects =
      /* istanbul ignore next */
      (cov_s2twl7gbr().s[77]++, questions.map((q, idx) => {
        /* istanbul ignore next */
        cov_s2twl7gbr().f[6]++;
        cov_s2twl7gbr().s[78]++;
        return {
          id: `q${idx + 1}`,
          text: q,
          question: q,
          category: interviewType.toLowerCase(),
          difficulty: 'medium'
        };
      }));
      // Step 5: Generate unique interview ID
      const interviewId =
      /* istanbul ignore next */
      (cov_s2twl7gbr().s[79]++, this.generateInterviewId());
      // Step 6: Get company logo deterministically based on interview ID
      const {
        logo,
        company
      } =
      /* istanbul ignore next */
      (cov_s2twl7gbr().s[80]++, (0, utils_1.getCompanyLogoForInterview)(interviewId));
      // Step 7: Create Interview object with company branding
      const interview =
      /* istanbul ignore next */
      (cov_s2twl7gbr().s[81]++, {
        id: interviewId,
        userId:
        /* istanbul ignore next */
        (cov_s2twl7gbr().b[13][0]++, userId) ||
        /* istanbul ignore next */
        (cov_s2twl7gbr().b[13][1]++, 'mock-user'),
        jobTitle: role.jobTitle,
        company: company,
        questions: questionObjects,
        finalized: true,
        // Mock interviews are pre-finalized
        createdAt: new Date().toISOString(),
        // Legacy properties for backward compatibility
        role: `${role.jobTitle} at ${company}`,
        level: role.seniority,
        type: interviewType,
        techstack: techStack,
        companyLogo: logo,
        companyName: company
      });
      /* istanbul ignore next */
      cov_s2twl7gbr().s[82]++;
      console.log('✨ Created mock interview:', {
        id: interview.id,
        role: interview.role,
        type: interview.type,
        questionCount: interview.questions.length
      });
      /* istanbul ignore next */
      cov_s2twl7gbr().s[83]++;
      return interview;
    } catch (error) {
      /* istanbul ignore next */
      cov_s2twl7gbr().s[84]++;
      console.error('❌ Error creating mock interview:', error);
      /* istanbul ignore next */
      cov_s2twl7gbr().s[85]++;
      throw new Error('Failed to create mock interview');
    }
  }
  /**
   * Select interview type based on weighted distribution
   */
  selectInterviewType() {
    /* istanbul ignore next */
    cov_s2twl7gbr().f[7]++;
    const random =
    /* istanbul ignore next */
    (cov_s2twl7gbr().s[86]++, Math.random());
    let cumulativeWeight =
    /* istanbul ignore next */
    (cov_s2twl7gbr().s[87]++, 0);
    /* istanbul ignore next */
    cov_s2twl7gbr().s[88]++;
    for (const {
      type,
      weight
    } of INTERVIEW_TYPES) {
      /* istanbul ignore next */
      cov_s2twl7gbr().s[89]++;
      cumulativeWeight += weight;
      /* istanbul ignore next */
      cov_s2twl7gbr().s[90]++;
      if (random <= cumulativeWeight) {
        /* istanbul ignore next */
        cov_s2twl7gbr().b[14][0]++;
        cov_s2twl7gbr().s[91]++;
        return type;
      } else
      /* istanbul ignore next */
      {
        cov_s2twl7gbr().b[14][1]++;
      }
    }
    /* istanbul ignore next */
    cov_s2twl7gbr().s[92]++;
    return 'Mixed'; // Default fallback
  }
  /**
   * Generate unique interview ID
   */
  generateInterviewId() {
    /* istanbul ignore next */
    cov_s2twl7gbr().f[8]++;
    const timestamp =
    /* istanbul ignore next */
    (cov_s2twl7gbr().s[93]++, Date.now());
    const random =
    /* istanbul ignore next */
    (cov_s2twl7gbr().s[94]++, Math.random().toString(36).substring(2, 9));
    /* istanbul ignore next */
    cov_s2twl7gbr().s[95]++;
    return `mock-${timestamp}-${random}`;
  }
  /**
   * Get education level based on seniority
   */
  getEducationForSeniority(seniority) {
    /* istanbul ignore next */
    cov_s2twl7gbr().f[9]++;
    const educationMap =
    /* istanbul ignore next */
    (cov_s2twl7gbr().s[96]++, {
      'Junior': "Bachelor's degree in Computer Science or related field",
      'Mid-level': "Bachelor's degree with 3-5 years experience",
      'Senior': "Bachelor's/Master's degree with 5+ years experience",
      'Lead': "Advanced degree with 7+ years experience",
      'Principal': "Advanced degree with 10+ years experience"
    });
    /* istanbul ignore next */
    cov_s2twl7gbr().s[97]++;
    return /* istanbul ignore next */(cov_s2twl7gbr().b[15][0]++, educationMap[seniority]) ||
    /* istanbul ignore next */
    (cov_s2twl7gbr().b[15][1]++, "Bachelor's degree in relevant field");
  }
  /**
   * Fallback role generation when API fails
   */
  getFallbackRole() {
    /* istanbul ignore next */
    cov_s2twl7gbr().f[10]++;
    const fallbackRoles =
    /* istanbul ignore next */
    (cov_s2twl7gbr().s[98]++, [{
      jobTitle: 'Full Stack Developer',
      seniority: 'Senior',
      company: 'InnovateTech Solutions',
      industry: 'Software Development'
    }, {
      jobTitle: 'DevOps Engineer',
      seniority: 'Mid-level',
      company: 'CloudScale Systems',
      industry: 'Cloud Infrastructure'
    }, {
      jobTitle: 'Data Engineer',
      seniority: 'Senior',
      company: 'DataFlow Analytics',
      industry: 'Data Analytics'
    }, {
      jobTitle: 'Mobile App Developer',
      seniority: 'Mid-level',
      company: 'AppCraft Studios',
      industry: 'Mobile Development'
    }, {
      jobTitle: 'Machine Learning Engineer',
      seniority: 'Senior',
      company: 'AI Innovations Lab',
      industry: 'Artificial Intelligence'
    }]);
    // Select a random fallback role that hasn't been used
    const availableRoles =
    /* istanbul ignore next */
    (cov_s2twl7gbr().s[99]++, fallbackRoles.filter(r => {
      /* istanbul ignore next */
      cov_s2twl7gbr().f[11]++;
      cov_s2twl7gbr().s[100]++;
      return /* istanbul ignore next */(cov_s2twl7gbr().b[16][0]++, !this.usedRoles.has(r.jobTitle)) &&
      /* istanbul ignore next */
      (cov_s2twl7gbr().b[16][1]++, !this.usedCompanies.has(r.company));
    }));
    /* istanbul ignore next */
    cov_s2twl7gbr().s[101]++;
    if (availableRoles.length === 0) {
      /* istanbul ignore next */
      cov_s2twl7gbr().b[17][0]++;
      // If all fallbacks are used, return the first one with modified company
      const role =
      /* istanbul ignore next */
      (cov_s2twl7gbr().s[102]++, Object.assign({}, fallbackRoles[0]));
      /* istanbul ignore next */
      cov_s2twl7gbr().s[103]++;
      role.company = `${role.company} ${Date.now() % 1000}`;
      /* istanbul ignore next */
      cov_s2twl7gbr().s[104]++;
      return role;
    } else
    /* istanbul ignore next */
    {
      cov_s2twl7gbr().b[17][1]++;
    }
    const selected =
    /* istanbul ignore next */
    (cov_s2twl7gbr().s[105]++, availableRoles[Math.floor(Math.random() * availableRoles.length)]);
    /* istanbul ignore next */
    cov_s2twl7gbr().s[106]++;
    this.usedRoles.add(selected.jobTitle);
    /* istanbul ignore next */
    cov_s2twl7gbr().s[107]++;
    this.usedCompanies.add(selected.company);
    /* istanbul ignore next */
    cov_s2twl7gbr().s[108]++;
    return selected;
  }
  /**
   * Fallback tech stack generation based on role
   */
  getFallbackTechStack(role) {
    /* istanbul ignore next */
    cov_s2twl7gbr().f[12]++;
    const techByRole =
    /* istanbul ignore next */
    (cov_s2twl7gbr().s[109]++, {
      'Full Stack Developer': ['React', 'Node.js', 'MongoDB', 'TypeScript', 'Docker'],
      'DevOps Engineer': ['Kubernetes', 'Docker', 'AWS', 'Terraform', 'Jenkins'],
      'Data Engineer': ['Python', 'Apache Spark', 'SQL', 'Kafka', 'Airflow'],
      'Mobile App Developer': ['React Native', 'TypeScript', 'Redux', 'Firebase', 'GraphQL'],
      'Machine Learning Engineer': ['Python', 'TensorFlow', 'PyTorch', 'Scikit-learn', 'Docker'],
      'Frontend Developer': ['React', 'TypeScript', 'Next.js', 'Tailwind CSS', 'Jest'],
      'Backend Developer': ['Node.js', 'Express', 'PostgreSQL', 'Redis', 'Docker'],
      'Cloud Architect': ['AWS', 'Terraform', 'Kubernetes', 'Python', 'Ansible']
    });
    // Find matching tech stack or return generic one
    /* istanbul ignore next */
    cov_s2twl7gbr().s[110]++;
    for (const [roleKey, tech] of Object.entries(techByRole)) {
      /* istanbul ignore next */
      cov_s2twl7gbr().s[111]++;
      if (role.jobTitle.toLowerCase().includes(roleKey.toLowerCase())) {
        /* istanbul ignore next */
        cov_s2twl7gbr().b[18][0]++;
        cov_s2twl7gbr().s[112]++;
        return tech.slice(0, 5); // Return 5 technologies
      } else
      /* istanbul ignore next */
      {
        cov_s2twl7gbr().b[18][1]++;
      }
    }
    // Generic fallback
    /* istanbul ignore next */
    cov_s2twl7gbr().s[113]++;
    return ['JavaScript', 'Python', 'Docker', 'Git', 'SQL'];
  }
  /**
   * Fallback questions generation
   */
  getFallbackQuestions(type, role) {
    /* istanbul ignore next */
    cov_s2twl7gbr().f[13]++;
    const questionsByType =
    /* istanbul ignore next */
    (cov_s2twl7gbr().s[114]++, {
      'Technical': [`Can you explain your experience with the technologies listed in the ${role.jobTitle} job description?`, 'Describe a complex technical problem you solved recently. What was your approach?', 'How do you ensure code quality and maintainability in your projects?', 'What is your approach to system design and architecture decisions?', 'Can you walk me through your debugging process when facing a difficult issue?'],
      'Behavioral': ['Tell me about a time when you had to work with a difficult team member.', 'Describe a situation where you had to meet a tight deadline. How did you manage it?', 'Give an example of when you had to learn a new technology quickly.', 'How do you handle constructive criticism and feedback?', 'Tell me about a project you\'re particularly proud of. What was your role?'],
      'Mixed': [`What interests you most about the ${role.jobTitle} position at ${role.company}?`, 'How do you stay updated with the latest technology trends in your field?', 'Describe your ideal work environment and team structure.', 'What are your career goals for the next 3-5 years?', 'How do you balance technical excellence with meeting business deadlines?']
    });
    /* istanbul ignore next */
    cov_s2twl7gbr().s[115]++;
    return /* istanbul ignore next */(cov_s2twl7gbr().b[19][0]++, questionsByType[type]) ||
    /* istanbul ignore next */
    (cov_s2twl7gbr().b[19][1]++, questionsByType['Mixed']);
  }
  /**
   * Clear caches (useful for testing or memory management)
   */
  clearCaches() {
    /* istanbul ignore next */
    cov_s2twl7gbr().f[14]++;
    cov_s2twl7gbr().s[116]++;
    this.roleCache.clear();
    /* istanbul ignore next */
    cov_s2twl7gbr().s[117]++;
    this.techStackCache.clear();
    /* istanbul ignore next */
    cov_s2twl7gbr().s[118]++;
    this.questionsCache.clear();
    /* istanbul ignore next */
    cov_s2twl7gbr().s[119]++;
    this.usedRoles.clear();
    /* istanbul ignore next */
    cov_s2twl7gbr().s[120]++;
    this.usedCompanies.clear();
    /* istanbul ignore next */
    cov_s2twl7gbr().s[121]++;
    console.log('🧹 Mock Interview Service caches cleared');
  }
  /**
   * Clean expired cache entries
   */
  cleanExpiredCache() {
    /* istanbul ignore next */
    cov_s2twl7gbr().f[15]++;
    const now =
    /* istanbul ignore next */
    (cov_s2twl7gbr().s[122]++, Date.now());
    // Clean role cache
    /* istanbul ignore next */
    cov_s2twl7gbr().s[123]++;
    for (const [key, entry] of this.roleCache.entries()) {
      /* istanbul ignore next */
      cov_s2twl7gbr().s[124]++;
      if (now - entry.timestamp > CACHE_DURATION) {
        /* istanbul ignore next */
        cov_s2twl7gbr().b[20][0]++;
        cov_s2twl7gbr().s[125]++;
        this.roleCache.delete(key);
      } else
      /* istanbul ignore next */
      {
        cov_s2twl7gbr().b[20][1]++;
      }
    }
    // Clean tech stack cache
    /* istanbul ignore next */
    cov_s2twl7gbr().s[126]++;
    for (const [key, entry] of this.techStackCache.entries()) {
      /* istanbul ignore next */
      cov_s2twl7gbr().s[127]++;
      if (now - entry.timestamp > CACHE_DURATION) {
        /* istanbul ignore next */
        cov_s2twl7gbr().b[21][0]++;
        cov_s2twl7gbr().s[128]++;
        this.techStackCache.delete(key);
      } else
      /* istanbul ignore next */
      {
        cov_s2twl7gbr().b[21][1]++;
      }
    }
    // Clean questions cache
    /* istanbul ignore next */
    cov_s2twl7gbr().s[129]++;
    for (const [key, entry] of this.questionsCache.entries()) {
      /* istanbul ignore next */
      cov_s2twl7gbr().s[130]++;
      if (now - entry.timestamp > CACHE_DURATION) {
        /* istanbul ignore next */
        cov_s2twl7gbr().b[22][0]++;
        cov_s2twl7gbr().s[131]++;
        this.questionsCache.delete(key);
      } else
      /* istanbul ignore next */
      {
        cov_s2twl7gbr().b[22][1]++;
      }
    }
    /* istanbul ignore next */
    cov_s2twl7gbr().s[132]++;
    console.log('🧹 Expired cache entries cleaned');
  }
  /**
   * Get cache statistics (useful for monitoring)
   */
  getCacheStats() {
    /* istanbul ignore next */
    cov_s2twl7gbr().f[16]++;
    cov_s2twl7gbr().s[133]++;
    return {
      rolesCached: this.roleCache.size,
      techStacksCached: this.techStackCache.size,
      questionsCached: this.questionsCache.size,
      usedRolesCount: this.usedRoles.size,
      usedCompaniesCount: this.usedCompanies.size
    };
  }
}
/* istanbul ignore next */
cov_s2twl7gbr().s[134]++;
exports.MockInterviewService = MockInterviewService;
// Export singleton instance
/* istanbul ignore next */
cov_s2twl7gbr().s[135]++;
exports.mockInterviewService = new MockInterviewService();
// Export the main creation function for convenience
async function createMockInterview(userId) {
  /* istanbul ignore next */
  cov_s2twl7gbr().f[17]++;
  cov_s2twl7gbr().s[136]++;
  return exports.mockInterviewService.createMockInterview(userId);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,