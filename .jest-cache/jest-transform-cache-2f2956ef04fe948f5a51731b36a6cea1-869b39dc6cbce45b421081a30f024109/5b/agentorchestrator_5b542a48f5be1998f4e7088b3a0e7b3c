f008cd3db137b9375193bc4f649e87cb
"use strict";

/* istanbul ignore next */
function cov_1gvgwuwej7() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/agents/agent-orchestrator.ts";
  var hash = "c3c40bc069f72884a1c372bdb049eb683e2b51b1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/agents/agent-orchestrator.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 35
        }
      },
      "2": {
        start: {
          line: 4,
          column: 24
        },
        end: {
          line: 4,
          column: 50
        }
      },
      "3": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 40
        }
      },
      "4": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 71
        }
      },
      "5": {
        start: {
          line: 23,
          column: 26
        },
        end: {
          line: 23,
          column: 36
        }
      },
      "6": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 71
        }
      },
      "7": {
        start: {
          line: 26,
          column: 29
        },
        end: {
          line: 36,
          column: 9
        }
      },
      "8": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 64
        }
      },
      "9": {
        start: {
          line: 38,
          column: 29
        },
        end: {
          line: 38,
          column: 31
        }
      },
      "10": {
        start: {
          line: 39,
          column: 24
        },
        end: {
          line: 39,
          column: 25
        }
      },
      "11": {
        start: {
          line: 40,
          column: 30
        },
        end: {
          line: 40,
          column: 31
        }
      },
      "12": {
        start: {
          line: 41,
          column: 30
        },
        end: {
          line: 41,
          column: 31
        }
      },
      "13": {
        start: {
          line: 42,
          column: 28
        },
        end: {
          line: 42,
          column: 29
        }
      },
      "14": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "15": {
        start: {
          line: 44,
          column: 21
        },
        end: {
          line: 44,
          column: 22
        }
      },
      "16": {
        start: {
          line: 45,
          column: 26
        },
        end: {
          line: 45,
          column: 42
        }
      },
      "17": {
        start: {
          line: 46,
          column: 35
        },
        end: {
          line: 46,
          column: 45
        }
      },
      "18": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 100,
          column: 13
        }
      },
      "19": {
        start: {
          line: 49,
          column: 16
        },
        end: {
          line: 53,
          column: 17
        }
      },
      "20": {
        start: {
          line: 50,
          column: 20
        },
        end: {
          line: 50,
          column: 74
        }
      },
      "21": {
        start: {
          line: 51,
          column: 20
        },
        end: {
          line: 51,
          column: 36
        }
      },
      "22": {
        start: {
          line: 52,
          column: 20
        },
        end: {
          line: 52,
          column: 29
        }
      },
      "23": {
        start: {
          line: 54,
          column: 16
        },
        end: {
          line: 54,
          column: 95
        }
      },
      "24": {
        start: {
          line: 56,
          column: 30
        },
        end: {
          line: 56,
          column: 95
        }
      },
      "25": {
        start: {
          line: 58,
          column: 37
        },
        end: {
          line: 60,
          column: 24
        }
      },
      "26": {
        start: {
          line: 62,
          column: 34
        },
        end: {
          line: 62,
          column: 77
        }
      },
      "27": {
        start: {
          line: 64,
          column: 41
        },
        end: {
          line: 64,
          column: 80
        }
      },
      "28": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 66,
          column: 50
        }
      },
      "29": {
        start: {
          line: 67,
          column: 16
        },
        end: {
          line: 67,
          column: 68
        }
      },
      "30": {
        start: {
          line: 68,
          column: 16
        },
        end: {
          line: 68,
          column: 75
        }
      },
      "31": {
        start: {
          line: 69,
          column: 16
        },
        end: {
          line: 69,
          column: 57
        }
      },
      "32": {
        start: {
          line: 70,
          column: 38
        },
        end: {
          line: 70,
          column: 65
        }
      },
      "33": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 78,
          column: 19
        }
      },
      "34": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 79,
          column: 34
        }
      },
      "35": {
        start: {
          line: 81,
          column: 16
        },
        end: {
          line: 81,
          column: 94
        }
      },
      "36": {
        start: {
          line: 82,
          column: 16
        },
        end: {
          line: 82,
          column: 102
        }
      },
      "37": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 83,
          column: 131
        }
      },
      "38": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 86,
          column: 77
        }
      },
      "39": {
        start: {
          line: 87,
          column: 38
        },
        end: {
          line: 87,
          column: 65
        }
      },
      "40": {
        start: {
          line: 88,
          column: 16
        },
        end: {
          line: 95,
          column: 19
        }
      },
      "41": {
        start: {
          line: 97,
          column: 16
        },
        end: {
          line: 99,
          column: 17
        }
      },
      "42": {
        start: {
          line: 98,
          column: 20
        },
        end: {
          line: 98,
          column: 96
        }
      },
      "43": {
        start: {
          line: 102,
          column: 35
        },
        end: {
          line: 102,
          column: 57
        }
      },
      "44": {
        start: {
          line: 104,
          column: 33
        },
        end: {
          line: 104,
          column: 75
        }
      },
      "45": {
        start: {
          line: 104,
          column: 58
        },
        end: {
          line: 104,
          column: 67
        }
      },
      "46": {
        start: {
          line: 105,
          column: 28
        },
        end: {
          line: 105,
          column: 98
        }
      },
      "47": {
        start: {
          line: 106,
          column: 23
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "48": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 121,
          column: 53
        }
      },
      "49": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 127,
          column: 11
        }
      },
      "50": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 128,
          column: 22
        }
      },
      "51": {
        start: {
          line: 138,
          column: 23
        },
        end: {
          line: 138,
          column: 25
        }
      },
      "52": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 150,
          column: 9
        }
      },
      "53": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 149,
          column: 15
        }
      },
      "54": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 162,
          column: 9
        }
      },
      "55": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 161,
          column: 15
        }
      },
      "56": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "57": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 177,
          column: 15
        }
      },
      "58": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 212,
          column: 10
        }
      },
      "59": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 218,
          column: 50
        }
      },
      "60": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 224,
          column: 54
        }
      },
      "61": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 230,
          column: 53
        }
      },
      "62": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 238,
          column: 24
        }
      },
      "63": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 238,
          column: 24
        }
      },
      "64": {
        start: {
          line: 239,
          column: 31
        },
        end: {
          line: 239,
          column: 36
        }
      },
      "65": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 249,
          column: 9
        }
      },
      "66": {
        start: {
          line: 242,
          column: 37
        },
        end: {
          line: 242,
          column: 76
        }
      },
      "67": {
        start: {
          line: 243,
          column: 35
        },
        end: {
          line: 243,
          column: 189
        }
      },
      "68": {
        start: {
          line: 244,
          column: 35
        },
        end: {
          line: 244,
          column: 75
        }
      },
      "69": {
        start: {
          line: 245,
          column: 34
        },
        end: {
          line: 245,
          column: 89
        }
      },
      "70": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 248,
          column: 13
        }
      },
      "71": {
        start: {
          line: 247,
          column: 16
        },
        end: {
          line: 247,
          column: 29
        }
      },
      "72": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 257,
          column: 9
        }
      },
      "73": {
        start: {
          line: 252,
          column: 38
        },
        end: {
          line: 252,
          column: 174
        }
      },
      "74": {
        start: {
          line: 253,
          column: 40
        },
        end: {
          line: 253,
          column: 206
        }
      },
      "75": {
        start: {
          line: 253,
          column: 85
        },
        end: {
          line: 253,
          column: 205
        }
      },
      "76": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 256,
          column: 13
        }
      },
      "77": {
        start: {
          line: 255,
          column: 16
        },
        end: {
          line: 255,
          column: 29
        }
      },
      "78": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 258,
          column: 20
        }
      },
      "79": {
        start: {
          line: 264,
          column: 32
        },
        end: {
          line: 268,
          column: 9
        }
      },
      "80": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 269,
          column: 68
        }
      },
      "81": {
        start: {
          line: 275,
          column: 34
        },
        end: {
          line: 279,
          column: 9
        }
      },
      "82": {
        start: {
          line: 280,
          column: 8
        },
        end: {
          line: 280,
          column: 69
        }
      },
      "83": {
        start: {
          line: 283,
          column: 0
        },
        end: {
          line: 283,
          column: 46
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 18
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 12
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 31
          },
          end: {
            line: 129,
            column: 5
          }
        },
        line: 22
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 104,
            column: 53
          },
          end: {
            line: 104,
            column: 54
          }
        },
        loc: {
          start: {
            line: 104,
            column: 58
          },
          end: {
            line: 104,
            column: 67
          }
        },
        line: 104
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 136,
            column: 4
          },
          end: {
            line: 136,
            column: 5
          }
        },
        loc: {
          start: {
            line: 136,
            column: 34
          },
          end: {
            line: 213,
            column: 5
          }
        },
        line: 136
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 217,
            column: 4
          },
          end: {
            line: 217,
            column: 5
          }
        },
        loc: {
          start: {
            line: 217,
            column: 31
          },
          end: {
            line: 219,
            column: 5
          }
        },
        line: 217
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 223,
            column: 4
          },
          end: {
            line: 223,
            column: 5
          }
        },
        loc: {
          start: {
            line: 223,
            column: 24
          },
          end: {
            line: 225,
            column: 5
          }
        },
        line: 223
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 229,
            column: 4
          },
          end: {
            line: 229,
            column: 5
          }
        },
        loc: {
          start: {
            line: 229,
            column: 29
          },
          end: {
            line: 231,
            column: 5
          }
        },
        line: 229
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 235,
            column: 4
          },
          end: {
            line: 235,
            column: 5
          }
        },
        loc: {
          start: {
            line: 235,
            column: 39
          },
          end: {
            line: 259,
            column: 5
          }
        },
        line: 235
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 253,
            column: 73
          },
          end: {
            line: 253,
            column: 74
          }
        },
        loc: {
          start: {
            line: 253,
            column: 85
          },
          end: {
            line: 253,
            column: 205
          }
        },
        line: 253
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 263,
            column: 4
          },
          end: {
            line: 263,
            column: 5
          }
        },
        loc: {
          start: {
            line: 263,
            column: 48
          },
          end: {
            line: 270,
            column: 5
          }
        },
        line: 263
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 274,
            column: 4
          },
          end: {
            line: 274,
            column: 5
          }
        },
        loc: {
          start: {
            line: 274,
            column: 50
          },
          end: {
            line: 281,
            column: 5
          }
        },
        line: 274
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 35,
            column: 22
          },
          end: {
            line: 35,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 35,
            column: 22
          },
          end: {
            line: 35,
            column: 37
          }
        }, {
          start: {
            line: 35,
            column: 41
          },
          end: {
            line: 35,
            column: 43
          }
        }],
        line: 35
      },
      "1": {
        loc: {
          start: {
            line: 49,
            column: 16
          },
          end: {
            line: 53,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 16
          },
          end: {
            line: 53,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 49
      },
      "2": {
        loc: {
          start: {
            line: 49,
            column: 20
          },
          end: {
            line: 49,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 20
          },
          end: {
            line: 49,
            column: 34
          }
        }, {
          start: {
            line: 49,
            column: 38
          },
          end: {
            line: 49,
            column: 85
          }
        }],
        line: 49
      },
      "3": {
        loc: {
          start: {
            line: 94,
            column: 27
          },
          end: {
            line: 94,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 94,
            column: 52
          },
          end: {
            line: 94,
            column: 65
          }
        }, {
          start: {
            line: 94,
            column: 68
          },
          end: {
            line: 94,
            column: 83
          }
        }],
        line: 94
      },
      "4": {
        loc: {
          start: {
            line: 97,
            column: 16
          },
          end: {
            line: 99,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 97,
            column: 16
          },
          end: {
            line: 99,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 97
      },
      "5": {
        loc: {
          start: {
            line: 105,
            column: 28
          },
          end: {
            line: 105,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 105,
            column: 55
          },
          end: {
            line: 105,
            column: 94
          }
        }, {
          start: {
            line: 105,
            column: 97
          },
          end: {
            line: 105,
            column: 98
          }
        }],
        line: 105
      },
      "6": {
        loc: {
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "7": {
        loc: {
          start: {
            line: 140,
            column: 13
          },
          end: {
            line: 140,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 140,
            column: 69
          },
          end: {
            line: 140,
            column: 75
          }
        }, {
          start: {
            line: 140,
            column: 78
          },
          end: {
            line: 140,
            column: 90
          }
        }],
        line: 140
      },
      "8": {
        loc: {
          start: {
            line: 140,
            column: 13
          },
          end: {
            line: 140,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 140,
            column: 13
          },
          end: {
            line: 140,
            column: 49
          }
        }, {
          start: {
            line: 140,
            column: 53
          },
          end: {
            line: 140,
            column: 66
          }
        }],
        line: 140
      },
      "9": {
        loc: {
          start: {
            line: 145,
            column: 31
          },
          end: {
            line: 145,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 145,
            column: 68
          },
          end: {
            line: 145,
            column: 69
          }
        }, {
          start: {
            line: 145,
            column: 72
          },
          end: {
            line: 145,
            column: 73
          }
        }],
        line: 145
      },
      "10": {
        loc: {
          start: {
            line: 147,
            column: 33
          },
          end: {
            line: 147,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 147,
            column: 70
          },
          end: {
            line: 147,
            column: 73
          }
        }, {
          start: {
            line: 147,
            column: 76
          },
          end: {
            line: 147,
            column: 79
          }
        }],
        line: 147
      },
      "11": {
        loc: {
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 162,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 162,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      },
      "12": {
        loc: {
          start: {
            line: 152,
            column: 13
          },
          end: {
            line: 152,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 152,
            column: 69
          },
          end: {
            line: 152,
            column: 75
          }
        }, {
          start: {
            line: 152,
            column: 78
          },
          end: {
            line: 152,
            column: 91
          }
        }],
        line: 152
      },
      "13": {
        loc: {
          start: {
            line: 152,
            column: 13
          },
          end: {
            line: 152,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 152,
            column: 13
          },
          end: {
            line: 152,
            column: 49
          }
        }, {
          start: {
            line: 152,
            column: 53
          },
          end: {
            line: 152,
            column: 66
          }
        }],
        line: 152
      },
      "14": {
        loc: {
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 164
      },
      "15": {
        loc: {
          start: {
            line: 164,
            column: 13
          },
          end: {
            line: 164,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 164,
            column: 69
          },
          end: {
            line: 164,
            column: 75
          }
        }, {
          start: {
            line: 164,
            column: 78
          },
          end: {
            line: 164,
            column: 89
          }
        }],
        line: 164
      },
      "16": {
        loc: {
          start: {
            line: 164,
            column: 13
          },
          end: {
            line: 164,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 164,
            column: 13
          },
          end: {
            line: 164,
            column: 49
          }
        }, {
          start: {
            line: 164,
            column: 53
          },
          end: {
            line: 164,
            column: 66
          }
        }],
        line: 164
      },
      "17": {
        loc: {
          start: {
            line: 184,
            column: 31
          },
          end: {
            line: 184,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 184,
            column: 31
          },
          end: {
            line: 184,
            column: 59
          }
        }, {
          start: {
            line: 184,
            column: 63
          },
          end: {
            line: 184,
            column: 74
          }
        }],
        line: 184
      },
      "18": {
        loc: {
          start: {
            line: 186,
            column: 33
          },
          end: {
            line: 186,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 186,
            column: 33
          },
          end: {
            line: 186,
            column: 55
          }
        }, {
          start: {
            line: 186,
            column: 59
          },
          end: {
            line: 186,
            column: 64
          }
        }],
        line: 186
      },
      "19": {
        loc: {
          start: {
            line: 195,
            column: 32
          },
          end: {
            line: 195,
            column: 117
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 195,
            column: 73
          },
          end: {
            line: 195,
            column: 81
          }
        }, {
          start: {
            line: 195,
            column: 85
          },
          end: {
            line: 195,
            column: 116
          }
        }],
        line: 195
      },
      "20": {
        loc: {
          start: {
            line: 195,
            column: 85
          },
          end: {
            line: 195,
            column: 116
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 195,
            column: 85
          },
          end: {
            line: 195,
            column: 107
          }
        }, {
          start: {
            line: 195,
            column: 111
          },
          end: {
            line: 195,
            column: 116
          }
        }],
        line: 195
      },
      "21": {
        loc: {
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 238,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 238,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 237
      },
      "22": {
        loc: {
          start: {
            line: 241,
            column: 8
          },
          end: {
            line: 249,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 241,
            column: 8
          },
          end: {
            line: 249,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 241
      },
      "23": {
        loc: {
          start: {
            line: 243,
            column: 35
          },
          end: {
            line: 243,
            column: 189
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 243,
            column: 36
          },
          end: {
            line: 243,
            column: 179
          }
        }, {
          start: {
            line: 243,
            column: 184
          },
          end: {
            line: 243,
            column: 189
          }
        }],
        line: 243
      },
      "24": {
        loc: {
          start: {
            line: 243,
            column: 36
          },
          end: {
            line: 243,
            column: 179
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 243,
            column: 154
          },
          end: {
            line: 243,
            column: 160
          }
        }, {
          start: {
            line: 243,
            column: 163
          },
          end: {
            line: 243,
            column: 179
          }
        }],
        line: 243
      },
      "25": {
        loc: {
          start: {
            line: 243,
            column: 36
          },
          end: {
            line: 243,
            column: 151
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 243,
            column: 36
          },
          end: {
            line: 243,
            column: 134
          }
        }, {
          start: {
            line: 243,
            column: 138
          },
          end: {
            line: 243,
            column: 151
          }
        }],
        line: 243
      },
      "26": {
        loc: {
          start: {
            line: 243,
            column: 42
          },
          end: {
            line: 243,
            column: 124
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 243,
            column: 102
          },
          end: {
            line: 243,
            column: 108
          }
        }, {
          start: {
            line: 243,
            column: 111
          },
          end: {
            line: 243,
            column: 124
          }
        }],
        line: 243
      },
      "27": {
        loc: {
          start: {
            line: 243,
            column: 42
          },
          end: {
            line: 243,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 243,
            column: 42
          },
          end: {
            line: 243,
            column: 82
          }
        }, {
          start: {
            line: 243,
            column: 86
          },
          end: {
            line: 243,
            column: 99
          }
        }],
        line: 243
      },
      "28": {
        loc: {
          start: {
            line: 246,
            column: 12
          },
          end: {
            line: 248,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 246,
            column: 12
          },
          end: {
            line: 248,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 246
      },
      "29": {
        loc: {
          start: {
            line: 251,
            column: 8
          },
          end: {
            line: 257,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 251,
            column: 8
          },
          end: {
            line: 257,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 251
      },
      "30": {
        loc: {
          start: {
            line: 252,
            column: 38
          },
          end: {
            line: 252,
            column: 174
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 252,
            column: 149
          },
          end: {
            line: 252,
            column: 155
          }
        }, {
          start: {
            line: 252,
            column: 158
          },
          end: {
            line: 252,
            column: 174
          }
        }],
        line: 252
      },
      "31": {
        loc: {
          start: {
            line: 252,
            column: 38
          },
          end: {
            line: 252,
            column: 146
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 252,
            column: 38
          },
          end: {
            line: 252,
            column: 129
          }
        }, {
          start: {
            line: 252,
            column: 133
          },
          end: {
            line: 252,
            column: 146
          }
        }],
        line: 252
      },
      "32": {
        loc: {
          start: {
            line: 252,
            column: 44
          },
          end: {
            line: 252,
            column: 119
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 252,
            column: 99
          },
          end: {
            line: 252,
            column: 105
          }
        }, {
          start: {
            line: 252,
            column: 108
          },
          end: {
            line: 252,
            column: 119
          }
        }],
        line: 252
      },
      "33": {
        loc: {
          start: {
            line: 252,
            column: 44
          },
          end: {
            line: 252,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 252,
            column: 44
          },
          end: {
            line: 252,
            column: 79
          }
        }, {
          start: {
            line: 252,
            column: 83
          },
          end: {
            line: 252,
            column: 96
          }
        }],
        line: 252
      },
      "34": {
        loc: {
          start: {
            line: 253,
            column: 85
          },
          end: {
            line: 253,
            column: 205
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 253,
            column: 146
          },
          end: {
            line: 253,
            column: 152
          }
        }, {
          start: {
            line: 253,
            column: 155
          },
          end: {
            line: 253,
            column: 205
          }
        }],
        line: 253
      },
      "35": {
        loc: {
          start: {
            line: 253,
            column: 85
          },
          end: {
            line: 253,
            column: 143
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 253,
            column: 85
          },
          end: {
            line: 253,
            column: 111
          }
        }, {
          start: {
            line: 253,
            column: 115
          },
          end: {
            line: 253,
            column: 143
          }
        }],
        line: 253
      },
      "36": {
        loc: {
          start: {
            line: 254,
            column: 12
          },
          end: {
            line: 256,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 254,
            column: 12
          },
          end: {
            line: 256,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 254
      },
      "37": {
        loc: {
          start: {
            line: 269,
            column: 32
          },
          end: {
            line: 269,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 269,
            column: 32
          },
          end: {
            line: 269,
            column: 58
          }
        }, {
          start: {
            line: 269,
            column: 62
          },
          end: {
            line: 269,
            column: 66
          }
        }],
        line: 269
      },
      "38": {
        loc: {
          start: {
            line: 280,
            column: 32
          },
          end: {
            line: 280,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 280,
            column: 32
          },
          end: {
            line: 280,
            column: 60
          }
        }, {
          start: {
            line: 280,
            column: 64
          },
          end: {
            line: 280,
            column: 67
          }
        }],
        line: 280
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/agents/agent-orchestrator.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/agents/agent-orchestrator.ts"],
      sourcesContent: ["import { FoundryAgent, InterviewContext, Question } from '../types/agent-types';\nimport { AgentFactory, AgentType, AgentFactoryConfig } from './agent-factory';\n\n/**\n * Orchestrator session state (different from global SessionState)\n */\ninterface OrchestratorSessionState {\n  sessionId: string;\n  currentPhase: number;\n  totalPhases: number;\n  completedQuestions: number;\n  allQuestions: Question[];\n  agentResponses: any[];\n  startTime: number;\n  lastUpdateTime: number;\n  metadata: Record<string, any>;\n}\n\n/**\n * Interview phase configuration\n */\nexport interface InterviewPhase {\n  /** Unique identifier for the phase */\n  id: string;\n  /** Display name for the phase */\n  name: string;\n  /** Agent type to use for this phase */\n  agentType: AgentType;\n  /** Optional agent configuration overrides */\n  agentConfig?: AgentFactoryConfig;\n  /** Number of questions to generate in this phase */\n  questionCount: number;\n  /** Whether this phase is optional */\n  optional?: boolean;\n  /** Conditions that must be met to include this phase */\n  conditions?: {\n    minExperienceLevel?: 'entry' | 'mid' | 'senior' | 'executive';\n    requiredIndustry?: string[];\n    requiredRoleType?: 'individual-contributor' | 'management' | 'leadership';\n  };\n}\n\n/**\n * Interview session configuration\n */\nexport interface InterviewSessionConfig {\n  /** Unique session identifier */\n  sessionId: string;\n  /** Interview phases to execute */\n  phases: InterviewPhase[];\n  /** Global context for the interview */\n  context: InterviewContext;\n  /** Maximum total interview duration in minutes */\n  maxDurationMinutes?: number;\n  /** Whether to allow skipping optional phases */\n  allowSkipOptional?: boolean;\n  /** Custom session metadata */\n  metadata?: Record<string, any>;\n}\n\n/**\n * Interview session result\n */\nexport interface InterviewSessionResult {\n  /** Session identifier */\n  sessionId: string;\n  /** All generated questions across all phases */\n  allQuestions: Question[];\n  /** Questions organized by phase */\n  phaseResults: Array<{\n    phase: InterviewPhase;\n    questions: Question[];\n    agent: FoundryAgent;\n    executionTime: number;\n    success: boolean;\n    error?: string;\n  }>;\n  /** Session execution metrics */\n  metrics: {\n    totalExecutionTime: number;\n    totalCost: number;\n    totalTokensUsed: number;\n    phasesCompleted: number;\n    phasesSkipped: number;\n    successRate: number;\n  };\n  /** Final session state */\n  finalState: OrchestratorSessionState;\n}\n\n/**\n * AgentOrchestrator manages multi-agent interview sessions\n * \n * Coordinates the execution of different interview phases using specialized agents,\n * manages session state, tracks progress, and provides comprehensive reporting.\n */\nexport class AgentOrchestrator {\n  private agentFactory: AgentFactory;\n  private activeSessions: Map<string, OrchestratorSessionState> = new Map();\n\n  constructor() {\n    this.agentFactory = AgentFactory.getInstance();\n  }\n\n  /**\n   * Start a new interview session\n   * \n   * @param config - Session configuration\n   * @returns Promise resolving to session result\n   */\n  async startSession(config: InterviewSessionConfig): Promise<InterviewSessionResult> {\n    const startTime = Date.now();\n    console.log(`Starting interview session: ${config.sessionId}`);\n\n    // Initialize session state\n    const sessionState: OrchestratorSessionState = {\n      sessionId: config.sessionId,\n      currentPhase: 0,\n      totalPhases: config.phases.length,\n      completedQuestions: 0,\n      allQuestions: [],\n      agentResponses: [],\n      startTime,\n      lastUpdateTime: startTime,\n      metadata: config.metadata || {}\n    };\n\n    this.activeSessions.set(config.sessionId, sessionState);\n\n    const phaseResults: InterviewSessionResult['phaseResults'] = [];\n    let totalCost = 0;\n    let totalTokensUsed = 0;\n    let phasesCompleted = 0;\n    let phasesSkipped = 0;\n\n    // Execute each phase\n    for (let i = 0; i < config.phases.length; i++) {\n      const phase = config.phases[i];\n      const phaseStartTime = Date.now();\n\n      try {\n        // Check if phase should be executed\n        if (phase.optional && !this.shouldExecutePhase(phase, config.context)) {\n          console.log(`Skipping optional phase: ${phase.name}`);\n          phasesSkipped++;\n          continue;\n        }\n\n        console.log(`Executing phase ${i + 1}/${config.phases.length}: ${phase.name}`);\n\n        // Create agent for this phase\n        const agent = this.agentFactory.createAgent(phase.agentType, phase.agentConfig);\n\n        // Update context with session history\n        const phaseContext: InterviewContext = {\n          ...config.context,\n          sessionHistory: {\n            previousQuestions: sessionState.allQuestions\n          }\n        };\n\n        // Generate questions for this phase\n        const questions = await agent.generateQuestions(phaseContext);\n\n        // Limit questions to requested count\n        const limitedQuestions = questions.slice(0, phase.questionCount);\n\n        // Update session state\n        sessionState.currentPhase = i + 1;\n        sessionState.allQuestions.push(...limitedQuestions);\n        sessionState.completedQuestions += limitedQuestions.length;\n        sessionState.lastUpdateTime = Date.now();\n\n        const executionTime = Date.now() - phaseStartTime;\n\n        // Track phase result\n        phaseResults.push({\n          phase,\n          questions: limitedQuestions,\n          agent,\n          executionTime,\n          success: true\n        });\n\n        phasesCompleted++;\n\n        // Update cost and token tracking (placeholder - would integrate with actual usage tracking)\n        totalCost += this.estimatePhaseCost(limitedQuestions.length, phase.agentType);\n        totalTokensUsed += this.estimatePhaseTokens(limitedQuestions.length, phase.agentType);\n\n        console.log(`Phase ${phase.name} completed: ${limitedQuestions.length} questions generated in ${executionTime}ms`);\n\n      } catch (error) {\n        console.error(`Error executing phase ${phase.name}:`, error);\n        \n        const executionTime = Date.now() - phaseStartTime;\n        phaseResults.push({\n          phase,\n          questions: [],\n          agent: this.agentFactory.createAgent(phase.agentType), // Create agent for consistency\n          executionTime,\n          success: false,\n          error: error instanceof Error ? error.message : 'Unknown error'\n        });\n\n        // Continue with next phase rather than failing entire session\n        if (!phase.optional) {\n          console.warn(`Required phase ${phase.name} failed, but continuing session`);\n        }\n      }\n    }\n\n    const totalExecutionTime = Date.now() - startTime;\n\n    // Calculate final metrics\n    const successfulPhases = phaseResults.filter(r => r.success).length;\n    const successRate = config.phases.length > 0 ? successfulPhases / config.phases.length : 0;\n\n    const result: InterviewSessionResult = {\n      sessionId: config.sessionId,\n      allQuestions: sessionState.allQuestions,\n      phaseResults,\n      metrics: {\n        totalExecutionTime,\n        totalCost,\n        totalTokensUsed,\n        phasesCompleted,\n        phasesSkipped,\n        successRate\n      },\n      finalState: sessionState\n    };\n\n    // Clean up session from active sessions\n    this.activeSessions.delete(config.sessionId);\n\n    console.log(`Interview session ${config.sessionId} completed:`, {\n      totalQuestions: result.allQuestions.length,\n      phases: phasesCompleted,\n      duration: `${totalExecutionTime}ms`,\n      successRate: `${(successRate * 100).toFixed(1)}%`\n    });\n\n    return result;\n  }\n\n  /**\n   * Create a standard interview session configuration\n   * \n   * @param params - Basic interview parameters\n   * @returns Complete session configuration\n   */\n  createStandardSession(params: {\n    sessionId: string;\n    candidateProfile: InterviewContext['candidateProfile'];\n    jobRole: string;\n    companyInfo?: InterviewContext['companyInfo'];\n    experienceLevel?: 'entry' | 'mid' | 'senior' | 'executive';\n    includePhases?: {\n      technical?: boolean;\n      behavioral?: boolean;\n      industry?: boolean;\n    };\n  }): InterviewSessionConfig {\n    const phases: InterviewPhase[] = [];\n\n    // Technical phase (default: included)\n    if (params.includePhases?.technical !== false) {\n      phases.push({\n        id: 'technical',\n        name: 'Technical Assessment',\n        agentType: 'technical',\n        questionCount: params.experienceLevel === 'entry' ? 4 : 6,\n        agentConfig: {\n          temperature: params.experienceLevel === 'entry' ? 0.3 : 0.5\n        }\n      });\n    }\n\n    // Behavioral phase (default: included)\n    if (params.includePhases?.behavioral !== false) {\n      phases.push({\n        id: 'behavioral',\n        name: 'Behavioral Interview',\n        agentType: 'behavioral',\n        questionCount: 5,\n        agentConfig: {\n          temperature: 0.7\n        }\n      });\n    }\n\n    // Industry phase (optional for senior+ or specific industries)\n    if (params.includePhases?.industry !== false) {\n      phases.push({\n        id: 'industry',\n        name: 'Industry Knowledge',\n        agentType: 'industry',\n        questionCount: 4,\n        optional: true,\n        conditions: {\n          minExperienceLevel: 'mid'\n        },\n        agentConfig: {\n          temperature: 0.6\n        }\n      });\n    }\n\n    return {\n      sessionId: params.sessionId,\n      phases,\n      context: {\n        sessionId: params.sessionId,\n        candidateName: params.candidateProfile.name || 'Candidate',\n        role: params.jobRole,\n        experienceLevel: params.experienceLevel || 'mid',\n        industry: params.candidateProfile.industry,\n        resumeContent: params.candidateProfile.resumeContent,\n        candidateProfile: params.candidateProfile,\n        jobRole: params.jobRole,\n        companyInfo: params.companyInfo,\n        interviewConfig: {\n          duration: 60,\n          focusAreas: ['technical', 'behavioral'],\n          difficulty: params.experienceLevel === 'executive' ? 'expert' : (params.experienceLevel || 'mid'),\n          includeFollowUps: true\n        },\n        previousQuestions: [],\n        previousAnswers: [],\n        currentPhase: 'technical',\n        metadata: {\n          sessionType: 'standard',\n          createdAt: new Date().toISOString()\n        }\n      },\n      maxDurationMinutes: 60,\n      allowSkipOptional: true,\n      metadata: {\n        experienceLevel: params.experienceLevel,\n        createdAt: new Date().toISOString()\n      }\n    };\n  }\n\n  /**\n   * Get active session state\n   */\n  getSessionState(sessionId: string): OrchestratorSessionState | undefined {\n    return this.activeSessions.get(sessionId);\n  }\n\n  /**\n   * Get all active session IDs\n   */\n  getActiveSessions(): string[] {\n    return Array.from(this.activeSessions.keys());\n  }\n\n  /**\n   * Cancel an active session\n   */\n  cancelSession(sessionId: string): boolean {\n    return this.activeSessions.delete(sessionId);\n  }\n\n  /**\n   * Determine if a phase should be executed based on conditions\n   */\n  private shouldExecutePhase(phase: InterviewPhase, context: InterviewContext): boolean {\n    if (!phase.conditions) return true;\n\n    const { conditions } = phase;\n\n    // Check experience level requirement\n    if (conditions.minExperienceLevel) {\n      const experienceLevels = ['entry', 'mid', 'senior', 'executive'];\n      const candidateLevel = context.candidateProfile?.experience?.toLowerCase() || 'mid';\n      const candidateIndex = experienceLevels.indexOf(candidateLevel);\n      const requiredIndex = experienceLevels.indexOf(conditions.minExperienceLevel);\n      \n      if (candidateIndex < requiredIndex) {\n        return false;\n      }\n    }\n\n    // Check industry requirement\n    if (conditions.requiredIndustry) {\n      const candidateIndustry = context.companyInfo?.industry?.toLowerCase();\n      const hasRequiredIndustry = conditions.requiredIndustry.some(\n        industry => candidateIndustry?.includes(industry.toLowerCase())\n      );\n      if (!hasRequiredIndustry) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Estimate cost for a phase (placeholder implementation)\n   */\n  private estimatePhaseCost(questionCount: number, agentType: AgentType): number {\n    const costPerQuestion = {\n      'technical': 0.05, // Higher cost for complex technical questions\n      'behavioral': 0.03,\n      'industry': 0.04\n    };\n\n    return questionCount * (costPerQuestion[agentType] || 0.03);\n  }\n\n  /**\n   * Estimate token usage for a phase (placeholder implementation)\n   */\n  private estimatePhaseTokens(questionCount: number, agentType: AgentType): number {\n    const tokensPerQuestion = {\n      'technical': 150, // More tokens for detailed technical questions\n      'behavioral': 100,\n      'industry': 120\n    };\n\n    return questionCount * (tokensPerQuestion[agentType] || 100);\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c3c40bc069f72884a1c372bdb049eb683e2b51b1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1gvgwuwej7 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1gvgwuwej7();
cov_1gvgwuwej7().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1gvgwuwej7().s[1]++;
exports.AgentOrchestrator = void 0;
const agent_factory_1 =
/* istanbul ignore next */
(cov_1gvgwuwej7().s[2]++, require("./agent-factory"));
/**
 * AgentOrchestrator manages multi-agent interview sessions
 *
 * Coordinates the execution of different interview phases using specialized agents,
 * manages session state, tracks progress, and provides comprehensive reporting.
 */
class AgentOrchestrator {
  constructor() {
    /* istanbul ignore next */
    cov_1gvgwuwej7().f[0]++;
    cov_1gvgwuwej7().s[3]++;
    this.activeSessions = new Map();
    /* istanbul ignore next */
    cov_1gvgwuwej7().s[4]++;
    this.agentFactory = agent_factory_1.AgentFactory.getInstance();
  }
  /**
   * Start a new interview session
   *
   * @param config - Session configuration
   * @returns Promise resolving to session result
   */
  async startSession(config) {
    /* istanbul ignore next */
    cov_1gvgwuwej7().f[1]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1gvgwuwej7().s[5]++, Date.now());
    /* istanbul ignore next */
    cov_1gvgwuwej7().s[6]++;
    console.log(`Starting interview session: ${config.sessionId}`);
    // Initialize session state
    const sessionState =
    /* istanbul ignore next */
    (cov_1gvgwuwej7().s[7]++, {
      sessionId: config.sessionId,
      currentPhase: 0,
      totalPhases: config.phases.length,
      completedQuestions: 0,
      allQuestions: [],
      agentResponses: [],
      startTime,
      lastUpdateTime: startTime,
      metadata:
      /* istanbul ignore next */
      (cov_1gvgwuwej7().b[0][0]++, config.metadata) ||
      /* istanbul ignore next */
      (cov_1gvgwuwej7().b[0][1]++, {})
    });
    /* istanbul ignore next */
    cov_1gvgwuwej7().s[8]++;
    this.activeSessions.set(config.sessionId, sessionState);
    const phaseResults =
    /* istanbul ignore next */
    (cov_1gvgwuwej7().s[9]++, []);
    let totalCost =
    /* istanbul ignore next */
    (cov_1gvgwuwej7().s[10]++, 0);
    let totalTokensUsed =
    /* istanbul ignore next */
    (cov_1gvgwuwej7().s[11]++, 0);
    let phasesCompleted =
    /* istanbul ignore next */
    (cov_1gvgwuwej7().s[12]++, 0);
    let phasesSkipped =
    /* istanbul ignore next */
    (cov_1gvgwuwej7().s[13]++, 0);
    // Execute each phase
    /* istanbul ignore next */
    cov_1gvgwuwej7().s[14]++;
    for (let i =
    /* istanbul ignore next */
    (cov_1gvgwuwej7().s[15]++, 0); i < config.phases.length; i++) {
      const phase =
      /* istanbul ignore next */
      (cov_1gvgwuwej7().s[16]++, config.phases[i]);
      const phaseStartTime =
      /* istanbul ignore next */
      (cov_1gvgwuwej7().s[17]++, Date.now());
      /* istanbul ignore next */
      cov_1gvgwuwej7().s[18]++;
      try {
        /* istanbul ignore next */
        cov_1gvgwuwej7().s[19]++;
        // Check if phase should be executed
        if (
        /* istanbul ignore next */
        (cov_1gvgwuwej7().b[2][0]++, phase.optional) &&
        /* istanbul ignore next */
        (cov_1gvgwuwej7().b[2][1]++, !this.shouldExecutePhase(phase, config.context))) {
          /* istanbul ignore next */
          cov_1gvgwuwej7().b[1][0]++;
          cov_1gvgwuwej7().s[20]++;
          console.log(`Skipping optional phase: ${phase.name}`);
          /* istanbul ignore next */
          cov_1gvgwuwej7().s[21]++;
          phasesSkipped++;
          /* istanbul ignore next */
          cov_1gvgwuwej7().s[22]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_1gvgwuwej7().b[1][1]++;
        }
        cov_1gvgwuwej7().s[23]++;
        console.log(`Executing phase ${i + 1}/${config.phases.length}: ${phase.name}`);
        // Create agent for this phase
        const agent =
        /* istanbul ignore next */
        (cov_1gvgwuwej7().s[24]++, this.agentFactory.createAgent(phase.agentType, phase.agentConfig));
        // Update context with session history
        const phaseContext =
        /* istanbul ignore next */
        (cov_1gvgwuwej7().s[25]++, Object.assign(Object.assign({}, config.context), {
          sessionHistory: {
            previousQuestions: sessionState.allQuestions
          }
        }));
        // Generate questions for this phase
        const questions =
        /* istanbul ignore next */
        (cov_1gvgwuwej7().s[26]++, await agent.generateQuestions(phaseContext));
        // Limit questions to requested count
        const limitedQuestions =
        /* istanbul ignore next */
        (cov_1gvgwuwej7().s[27]++, questions.slice(0, phase.questionCount));
        // Update session state
        /* istanbul ignore next */
        cov_1gvgwuwej7().s[28]++;
        sessionState.currentPhase = i + 1;
        /* istanbul ignore next */
        cov_1gvgwuwej7().s[29]++;
        sessionState.allQuestions.push(...limitedQuestions);
        /* istanbul ignore next */
        cov_1gvgwuwej7().s[30]++;
        sessionState.completedQuestions += limitedQuestions.length;
        /* istanbul ignore next */
        cov_1gvgwuwej7().s[31]++;
        sessionState.lastUpdateTime = Date.now();
        const executionTime =
        /* istanbul ignore next */
        (cov_1gvgwuwej7().s[32]++, Date.now() - phaseStartTime);
        // Track phase result
        /* istanbul ignore next */
        cov_1gvgwuwej7().s[33]++;
        phaseResults.push({
          phase,
          questions: limitedQuestions,
          agent,
          executionTime,
          success: true
        });
        /* istanbul ignore next */
        cov_1gvgwuwej7().s[34]++;
        phasesCompleted++;
        // Update cost and token tracking (placeholder - would integrate with actual usage tracking)
        /* istanbul ignore next */
        cov_1gvgwuwej7().s[35]++;
        totalCost += this.estimatePhaseCost(limitedQuestions.length, phase.agentType);
        /* istanbul ignore next */
        cov_1gvgwuwej7().s[36]++;
        totalTokensUsed += this.estimatePhaseTokens(limitedQuestions.length, phase.agentType);
        /* istanbul ignore next */
        cov_1gvgwuwej7().s[37]++;
        console.log(`Phase ${phase.name} completed: ${limitedQuestions.length} questions generated in ${executionTime}ms`);
      } catch (error) {
        /* istanbul ignore next */
        cov_1gvgwuwej7().s[38]++;
        console.error(`Error executing phase ${phase.name}:`, error);
        const executionTime =
        /* istanbul ignore next */
        (cov_1gvgwuwej7().s[39]++, Date.now() - phaseStartTime);
        /* istanbul ignore next */
        cov_1gvgwuwej7().s[40]++;
        phaseResults.push({
          phase,
          questions: [],
          agent: this.agentFactory.createAgent(phase.agentType),
          // Create agent for consistency
          executionTime,
          success: false,
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_1gvgwuwej7().b[3][0]++, error.message) :
          /* istanbul ignore next */
          (cov_1gvgwuwej7().b[3][1]++, 'Unknown error')
        });
        // Continue with next phase rather than failing entire session
        /* istanbul ignore next */
        cov_1gvgwuwej7().s[41]++;
        if (!phase.optional) {
          /* istanbul ignore next */
          cov_1gvgwuwej7().b[4][0]++;
          cov_1gvgwuwej7().s[42]++;
          console.warn(`Required phase ${phase.name} failed, but continuing session`);
        } else
        /* istanbul ignore next */
        {
          cov_1gvgwuwej7().b[4][1]++;
        }
      }
    }
    const totalExecutionTime =
    /* istanbul ignore next */
    (cov_1gvgwuwej7().s[43]++, Date.now() - startTime);
    // Calculate final metrics
    const successfulPhases =
    /* istanbul ignore next */
    (cov_1gvgwuwej7().s[44]++, phaseResults.filter(r => {
      /* istanbul ignore next */
      cov_1gvgwuwej7().f[2]++;
      cov_1gvgwuwej7().s[45]++;
      return r.success;
    }).length);
    const successRate =
    /* istanbul ignore next */
    (cov_1gvgwuwej7().s[46]++, config.phases.length > 0 ?
    /* istanbul ignore next */
    (cov_1gvgwuwej7().b[5][0]++, successfulPhases / config.phases.length) :
    /* istanbul ignore next */
    (cov_1gvgwuwej7().b[5][1]++, 0));
    const result =
    /* istanbul ignore next */
    (cov_1gvgwuwej7().s[47]++, {
      sessionId: config.sessionId,
      allQuestions: sessionState.allQuestions,
      phaseResults,
      metrics: {
        totalExecutionTime,
        totalCost,
        totalTokensUsed,
        phasesCompleted,
        phasesSkipped,
        successRate
      },
      finalState: sessionState
    });
    // Clean up session from active sessions
    /* istanbul ignore next */
    cov_1gvgwuwej7().s[48]++;
    this.activeSessions.delete(config.sessionId);
    /* istanbul ignore next */
    cov_1gvgwuwej7().s[49]++;
    console.log(`Interview session ${config.sessionId} completed:`, {
      totalQuestions: result.allQuestions.length,
      phases: phasesCompleted,
      duration: `${totalExecutionTime}ms`,
      successRate: `${(successRate * 100).toFixed(1)}%`
    });
    /* istanbul ignore next */
    cov_1gvgwuwej7().s[50]++;
    return result;
  }
  /**
   * Create a standard interview session configuration
   *
   * @param params - Basic interview parameters
   * @returns Complete session configuration
   */
  createStandardSession(params) {
    /* istanbul ignore next */
    cov_1gvgwuwej7().f[3]++;
    var _a, _b, _c;
    const phases =
    /* istanbul ignore next */
    (cov_1gvgwuwej7().s[51]++, []);
    // Technical phase (default: included)
    /* istanbul ignore next */
    cov_1gvgwuwej7().s[52]++;
    if ((
    /* istanbul ignore next */
    (cov_1gvgwuwej7().b[8][0]++, (_a = params.includePhases) === null) ||
    /* istanbul ignore next */
    (cov_1gvgwuwej7().b[8][1]++, _a === void 0) ?
    /* istanbul ignore next */
    (cov_1gvgwuwej7().b[7][0]++, void 0) :
    /* istanbul ignore next */
    (cov_1gvgwuwej7().b[7][1]++, _a.technical)) !== false) {
      /* istanbul ignore next */
      cov_1gvgwuwej7().b[6][0]++;
      cov_1gvgwuwej7().s[53]++;
      phases.push({
        id: 'technical',
        name: 'Technical Assessment',
        agentType: 'technical',
        questionCount: params.experienceLevel === 'entry' ?
        /* istanbul ignore next */
        (cov_1gvgwuwej7().b[9][0]++, 4) :
        /* istanbul ignore next */
        (cov_1gvgwuwej7().b[9][1]++, 6),
        agentConfig: {
          temperature: params.experienceLevel === 'entry' ?
          /* istanbul ignore next */
          (cov_1gvgwuwej7().b[10][0]++, 0.3) :
          /* istanbul ignore next */
          (cov_1gvgwuwej7().b[10][1]++, 0.5)
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_1gvgwuwej7().b[6][1]++;
    }
    // Behavioral phase (default: included)
    cov_1gvgwuwej7().s[54]++;
    if ((
    /* istanbul ignore next */
    (cov_1gvgwuwej7().b[13][0]++, (_b = params.includePhases) === null) ||
    /* istanbul ignore next */
    (cov_1gvgwuwej7().b[13][1]++, _b === void 0) ?
    /* istanbul ignore next */
    (cov_1gvgwuwej7().b[12][0]++, void 0) :
    /* istanbul ignore next */
    (cov_1gvgwuwej7().b[12][1]++, _b.behavioral)) !== false) {
      /* istanbul ignore next */
      cov_1gvgwuwej7().b[11][0]++;
      cov_1gvgwuwej7().s[55]++;
      phases.push({
        id: 'behavioral',
        name: 'Behavioral Interview',
        agentType: 'behavioral',
        questionCount: 5,
        agentConfig: {
          temperature: 0.7
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_1gvgwuwej7().b[11][1]++;
    }
    // Industry phase (optional for senior+ or specific industries)
    cov_1gvgwuwej7().s[56]++;
    if ((
    /* istanbul ignore next */
    (cov_1gvgwuwej7().b[16][0]++, (_c = params.includePhases) === null) ||
    /* istanbul ignore next */
    (cov_1gvgwuwej7().b[16][1]++, _c === void 0) ?
    /* istanbul ignore next */
    (cov_1gvgwuwej7().b[15][0]++, void 0) :
    /* istanbul ignore next */
    (cov_1gvgwuwej7().b[15][1]++, _c.industry)) !== false) {
      /* istanbul ignore next */
      cov_1gvgwuwej7().b[14][0]++;
      cov_1gvgwuwej7().s[57]++;
      phases.push({
        id: 'industry',
        name: 'Industry Knowledge',
        agentType: 'industry',
        questionCount: 4,
        optional: true,
        conditions: {
          minExperienceLevel: 'mid'
        },
        agentConfig: {
          temperature: 0.6
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_1gvgwuwej7().b[14][1]++;
    }
    cov_1gvgwuwej7().s[58]++;
    return {
      sessionId: params.sessionId,
      phases,
      context: {
        sessionId: params.sessionId,
        candidateName:
        /* istanbul ignore next */
        (cov_1gvgwuwej7().b[17][0]++, params.candidateProfile.name) ||
        /* istanbul ignore next */
        (cov_1gvgwuwej7().b[17][1]++, 'Candidate'),
        role: params.jobRole,
        experienceLevel:
        /* istanbul ignore next */
        (cov_1gvgwuwej7().b[18][0]++, params.experienceLevel) ||
        /* istanbul ignore next */
        (cov_1gvgwuwej7().b[18][1]++, 'mid'),
        industry: params.candidateProfile.industry,
        resumeContent: params.candidateProfile.resumeContent,
        candidateProfile: params.candidateProfile,
        jobRole: params.jobRole,
        companyInfo: params.companyInfo,
        interviewConfig: {
          duration: 60,
          focusAreas: ['technical', 'behavioral'],
          difficulty: params.experienceLevel === 'executive' ?
          /* istanbul ignore next */
          (cov_1gvgwuwej7().b[19][0]++, 'expert') :
          /* istanbul ignore next */
          (cov_1gvgwuwej7().b[19][1]++,
          /* istanbul ignore next */
          (cov_1gvgwuwej7().b[20][0]++, params.experienceLevel) ||
          /* istanbul ignore next */
          (cov_1gvgwuwej7().b[20][1]++, 'mid')),
          includeFollowUps: true
        },
        previousQuestions: [],
        previousAnswers: [],
        currentPhase: 'technical',
        metadata: {
          sessionType: 'standard',
          createdAt: new Date().toISOString()
        }
      },
      maxDurationMinutes: 60,
      allowSkipOptional: true,
      metadata: {
        experienceLevel: params.experienceLevel,
        createdAt: new Date().toISOString()
      }
    };
  }
  /**
   * Get active session state
   */
  getSessionState(sessionId) {
    /* istanbul ignore next */
    cov_1gvgwuwej7().f[4]++;
    cov_1gvgwuwej7().s[59]++;
    return this.activeSessions.get(sessionId);
  }
  /**
   * Get all active session IDs
   */
  getActiveSessions() {
    /* istanbul ignore next */
    cov_1gvgwuwej7().f[5]++;
    cov_1gvgwuwej7().s[60]++;
    return Array.from(this.activeSessions.keys());
  }
  /**
   * Cancel an active session
   */
  cancelSession(sessionId) {
    /* istanbul ignore next */
    cov_1gvgwuwej7().f[6]++;
    cov_1gvgwuwej7().s[61]++;
    return this.activeSessions.delete(sessionId);
  }
  /**
   * Determine if a phase should be executed based on conditions
   */
  shouldExecutePhase(phase, context) {
    /* istanbul ignore next */
    cov_1gvgwuwej7().f[7]++;
    var _a, _b, _c, _d;
    /* istanbul ignore next */
    cov_1gvgwuwej7().s[62]++;
    if (!phase.conditions) {
      /* istanbul ignore next */
      cov_1gvgwuwej7().b[21][0]++;
      cov_1gvgwuwej7().s[63]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_1gvgwuwej7().b[21][1]++;
    }
    const {
      conditions
    } =
    /* istanbul ignore next */
    (cov_1gvgwuwej7().s[64]++, phase);
    // Check experience level requirement
    /* istanbul ignore next */
    cov_1gvgwuwej7().s[65]++;
    if (conditions.minExperienceLevel) {
      /* istanbul ignore next */
      cov_1gvgwuwej7().b[22][0]++;
      const experienceLevels =
      /* istanbul ignore next */
      (cov_1gvgwuwej7().s[66]++, ['entry', 'mid', 'senior', 'executive']);
      const candidateLevel =
      /* istanbul ignore next */
      (cov_1gvgwuwej7().s[67]++,
      /* istanbul ignore next */
      (cov_1gvgwuwej7().b[23][0]++,
      /* istanbul ignore next */
      (cov_1gvgwuwej7().b[25][0]++, (_b =
      /* istanbul ignore next */
      (cov_1gvgwuwej7().b[27][0]++, (_a = context.candidateProfile) === null) ||
      /* istanbul ignore next */
      (cov_1gvgwuwej7().b[27][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_1gvgwuwej7().b[26][0]++, void 0) :
      /* istanbul ignore next */
      (cov_1gvgwuwej7().b[26][1]++, _a.experience)) === null) ||
      /* istanbul ignore next */
      (cov_1gvgwuwej7().b[25][1]++, _b === void 0) ?
      /* istanbul ignore next */
      (cov_1gvgwuwej7().b[24][0]++, void 0) :
      /* istanbul ignore next */
      (cov_1gvgwuwej7().b[24][1]++, _b.toLowerCase())) ||
      /* istanbul ignore next */
      (cov_1gvgwuwej7().b[23][1]++, 'mid'));
      const candidateIndex =
      /* istanbul ignore next */
      (cov_1gvgwuwej7().s[68]++, experienceLevels.indexOf(candidateLevel));
      const requiredIndex =
      /* istanbul ignore next */
      (cov_1gvgwuwej7().s[69]++, experienceLevels.indexOf(conditions.minExperienceLevel));
      /* istanbul ignore next */
      cov_1gvgwuwej7().s[70]++;
      if (candidateIndex < requiredIndex) {
        /* istanbul ignore next */
        cov_1gvgwuwej7().b[28][0]++;
        cov_1gvgwuwej7().s[71]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_1gvgwuwej7().b[28][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1gvgwuwej7().b[22][1]++;
    }
    // Check industry requirement
    cov_1gvgwuwej7().s[72]++;
    if (conditions.requiredIndustry) {
      /* istanbul ignore next */
      cov_1gvgwuwej7().b[29][0]++;
      const candidateIndustry =
      /* istanbul ignore next */
      (cov_1gvgwuwej7().s[73]++,
      /* istanbul ignore next */
      (cov_1gvgwuwej7().b[31][0]++, (_d =
      /* istanbul ignore next */
      (cov_1gvgwuwej7().b[33][0]++, (_c = context.companyInfo) === null) ||
      /* istanbul ignore next */
      (cov_1gvgwuwej7().b[33][1]++, _c === void 0) ?
      /* istanbul ignore next */
      (cov_1gvgwuwej7().b[32][0]++, void 0) :
      /* istanbul ignore next */
      (cov_1gvgwuwej7().b[32][1]++, _c.industry)) === null) ||
      /* istanbul ignore next */
      (cov_1gvgwuwej7().b[31][1]++, _d === void 0) ?
      /* istanbul ignore next */
      (cov_1gvgwuwej7().b[30][0]++, void 0) :
      /* istanbul ignore next */
      (cov_1gvgwuwej7().b[30][1]++, _d.toLowerCase()));
      const hasRequiredIndustry =
      /* istanbul ignore next */
      (cov_1gvgwuwej7().s[74]++, conditions.requiredIndustry.some(industry => {
        /* istanbul ignore next */
        cov_1gvgwuwej7().f[8]++;
        cov_1gvgwuwej7().s[75]++;
        return /* istanbul ignore next */(cov_1gvgwuwej7().b[35][0]++, candidateIndustry === null) ||
        /* istanbul ignore next */
        (cov_1gvgwuwej7().b[35][1]++, candidateIndustry === void 0) ?
        /* istanbul ignore next */
        (cov_1gvgwuwej7().b[34][0]++, void 0) :
        /* istanbul ignore next */
        (cov_1gvgwuwej7().b[34][1]++, candidateIndustry.includes(industry.toLowerCase()));
      }));
      /* istanbul ignore next */
      cov_1gvgwuwej7().s[76]++;
      if (!hasRequiredIndustry) {
        /* istanbul ignore next */
        cov_1gvgwuwej7().b[36][0]++;
        cov_1gvgwuwej7().s[77]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_1gvgwuwej7().b[36][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1gvgwuwej7().b[29][1]++;
    }
    cov_1gvgwuwej7().s[78]++;
    return true;
  }
  /**
   * Estimate cost for a phase (placeholder implementation)
   */
  estimatePhaseCost(questionCount, agentType) {
    /* istanbul ignore next */
    cov_1gvgwuwej7().f[9]++;
    const costPerQuestion =
    /* istanbul ignore next */
    (cov_1gvgwuwej7().s[79]++, {
      'technical': 0.05,
      // Higher cost for complex technical questions
      'behavioral': 0.03,
      'industry': 0.04
    });
    /* istanbul ignore next */
    cov_1gvgwuwej7().s[80]++;
    return questionCount * (
    /* istanbul ignore next */
    (cov_1gvgwuwej7().b[37][0]++, costPerQuestion[agentType]) ||
    /* istanbul ignore next */
    (cov_1gvgwuwej7().b[37][1]++, 0.03));
  }
  /**
   * Estimate token usage for a phase (placeholder implementation)
   */
  estimatePhaseTokens(questionCount, agentType) {
    /* istanbul ignore next */
    cov_1gvgwuwej7().f[10]++;
    const tokensPerQuestion =
    /* istanbul ignore next */
    (cov_1gvgwuwej7().s[81]++, {
      'technical': 150,
      // More tokens for detailed technical questions
      'behavioral': 100,
      'industry': 120
    });
    /* istanbul ignore next */
    cov_1gvgwuwej7().s[82]++;
    return questionCount * (
    /* istanbul ignore next */
    (cov_1gvgwuwej7().b[38][0]++, tokensPerQuestion[agentType]) ||
    /* istanbul ignore next */
    (cov_1gvgwuwej7().b[38][1]++, 100));
  }
}
/* istanbul ignore next */
cov_1gvgwuwej7().s[83]++;
exports.AgentOrchestrator = AgentOrchestrator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,