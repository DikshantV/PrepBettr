{"version":3,"names":["cov_1eufssfhqh","actualCoverage","PayPalApi","LogLevel","Environment","PAYPAL_PLANS","getPlanById","PayPalClient","constructor","f","s","client","environment","init","clientId","process","env","PAYPAL_CLIENT_ID","clientSecret","PAYPAL_CLIENT_SECRET","mode","b","PAYPAL_MODE","Error","Production","Sandbox","clientCredentialsAuthCredentials","oAuthClientId","oAuthClientSecret","timeout","logging","logLevel","Info","logRequest","logResponse","console","log","error","createProduct","productData","catalogProductsController","request","body","name","description","type","category","image_url","home_url","NEXT_PUBLIC_APP_URL","response","statusCode","result","handlePayPalError","createSubscriptionPlan","planKey","productId","subscriptionsController","planConfig","planData","paypal_plan_details","product_id","createPlan","createAllPlans","planKeys","Object","keys","createdPlans","plan","Promise","resolve","setTimeout","createSubscription","subscriptionData","getSubscription","subscriptionId","cancelSubscription","reason","suspendSubscription","activateSubscription","getSubscriptionTransactions","startTime","endTime","listTransactionsForSubscription","details","map","detail","issue","join","error_description","message","verifyWebhookSignature","webhookId","webhooksController","headers","verifyRequest","auth_algo","cert_id","transmission_id","transmission_sig","transmission_time","webhook_id","webhook_event","verification_status","paypalClient","createSubscriptionPayload","planId","subscriberInfo","returnUrl","cancelUrl","plan_id","subscriber","given_name","split","surname","slice","undefined","email_address","email","application_context","brand_name","locale","shipping_preference","user_action","payment_method","payer_selected","payee_preferred","return_url","cancel_url","getApprovalUrl","subscription","approvalLink","links","find","link","rel","href"],"sources":["paypal-client.js"],"sourcesContent":["// lib/paypal-client.js\n\nimport { PayPalApi, LogLevel, Environment } from '@paypal/paypal-server-sdk';\nimport { PAYPAL_PLANS, getPlanById } from './paypal-config.js';\n\n/**\n * PayPal Client for handling subscriptions and payments\n * Provides utilities for creating plans, subscriptions, and managing webhooks\n */\n\nclass PayPalClient {\n  constructor() {\n    this.client = null;\n    this.environment = null;\n    this.init();\n  }\n\n  /**\n   * Initialize PayPal client with credentials from environment variables\n   */\n  init() {\n    try {\n      const clientId = process.env.PAYPAL_CLIENT_ID;\n      const clientSecret = process.env.PAYPAL_CLIENT_SECRET;\n      const mode = process.env.PAYPAL_MODE || 'sandbox';\n\n      if (!clientId || !clientSecret) {\n        throw new Error('PayPal credentials are missing. Please check your environment variables.');\n      }\n\n      // Set environment based on mode\n      this.environment = mode === 'production' ? Environment.Production : Environment.Sandbox;\n\n      // Initialize PayPal client\n      this.client = new PayPalApi({\n        clientCredentialsAuthCredentials: {\n          oAuthClientId: clientId,\n          oAuthClientSecret: clientSecret,\n        },\n        timeout: 0,\n        environment: this.environment,\n        logging: {\n          logLevel: LogLevel.Info,\n          logRequest: true,\n          logResponse: true,\n        },\n      });\n\n      console.log(`PayPal client initialized successfully in ${mode} mode`);\n    } catch (error) {\n      console.error('Failed to initialize PayPal client:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create a PayPal product (required before creating subscription plans)\n   * @param {Object} productData - Product information\n   * @returns {Promise<Object>} Created product\n   */\n  async createProduct(productData) {\n    try {\n      const { catalogProductsController } = this.client;\n      \n      const request = {\n        body: {\n          name: productData.name,\n          description: productData.description,\n          type: 'SERVICE', // For subscription services\n          category: 'SOFTWARE',\n          image_url: productData.image_url || '',\n          home_url: productData.home_url || process.env.NEXT_PUBLIC_APP_URL || 'https://prepbettr.com'\n        }\n      };\n\n      const response = await catalogProductsController.createProduct(request);\n      \n      if (response.statusCode === 201) {\n        console.log('Product created successfully:', response.result);\n        return response.result;\n      } else {\n        throw new Error(`Failed to create product: ${response.statusCode}`);\n      }\n    } catch (error) {\n      console.error('Error creating product:', error);\n      throw this.handlePayPalError(error);\n    }\n  }\n\n  /**\n   * Create a subscription plan in PayPal\n   * @param {string} planKey - Key from PAYPAL_PLANS configuration\n   * @param {string} productId - PayPal product ID\n   * @returns {Promise<Object>} Created plan\n   */\n  async createSubscriptionPlan(planKey, productId) {\n    try {\n      const { subscriptionsController } = this.client;\n      const planConfig = PAYPAL_PLANS[planKey];\n      \n      if (!planConfig) {\n        throw new Error(`Plan configuration not found for key: ${planKey}`);\n      }\n\n      const planData = {\n        ...planConfig.paypal_plan_details,\n        product_id: productId\n      };\n\n      const request = {\n        body: planData\n      };\n\n      const response = await subscriptionsController.createPlan(request);\n      \n      if (response.statusCode === 201) {\n        console.log(`Subscription plan created successfully: ${planConfig.name}`, response.result);\n        return response.result;\n      } else {\n        throw new Error(`Failed to create subscription plan: ${response.statusCode}`);\n      }\n    } catch (error) {\n      console.error('Error creating subscription plan:', error);\n      throw this.handlePayPalError(error);\n    }\n  }\n\n  /**\n   * Create all subscription plans for a product\n   * @param {string} productId - PayPal product ID\n   * @returns {Promise<Object>} Object containing all created plans\n   */\n  async createAllPlans(productId) {\n    try {\n      const planKeys = Object.keys(PAYPAL_PLANS);\n      const createdPlans = {};\n\n      for (const planKey of planKeys) {\n        try {\n          const plan = await this.createSubscriptionPlan(planKey, productId);\n          createdPlans[planKey] = plan;\n          \n          // Add a small delay between API calls to avoid rate limiting\n          await new Promise(resolve => setTimeout(resolve, 500));\n        } catch (error) {\n          console.error(`Failed to create plan ${planKey}:`, error);\n          // Continue with other plans even if one fails\n        }\n      }\n\n      return createdPlans;\n    } catch (error) {\n      console.error('Error creating all plans:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create a subscription\n   * @param {Object} subscriptionData - Subscription details\n   * @returns {Promise<Object>} Created subscription\n   */\n  async createSubscription(subscriptionData) {\n    try {\n      const { subscriptionsController } = this.client;\n\n      const request = {\n        body: subscriptionData\n      };\n\n      const response = await subscriptionsController.createSubscription(request);\n      \n      if (response.statusCode === 201) {\n        console.log('Subscription created successfully:', response.result);\n        return response.result;\n      } else {\n        throw new Error(`Failed to create subscription: ${response.statusCode}`);\n      }\n    } catch (error) {\n      console.error('Error creating subscription:', error);\n      throw this.handlePayPalError(error);\n    }\n  }\n\n  /**\n   * Get subscription details\n   * @param {string} subscriptionId - PayPal subscription ID\n   * @returns {Promise<Object>} Subscription details\n   */\n  async getSubscription(subscriptionId) {\n    try {\n      const { subscriptionsController } = this.client;\n\n      const request = {\n        subscriptionId: subscriptionId\n      };\n\n      const response = await subscriptionsController.getSubscription(request);\n      \n      if (response.statusCode === 200) {\n        return response.result;\n      } else {\n        throw new Error(`Failed to get subscription: ${response.statusCode}`);\n      }\n    } catch (error) {\n      console.error('Error getting subscription:', error);\n      throw this.handlePayPalError(error);\n    }\n  }\n\n  /**\n   * Cancel a subscription\n   * @param {string} subscriptionId - PayPal subscription ID\n   * @param {string} reason - Cancellation reason\n   * @returns {Promise<boolean>} Success status\n   */\n  async cancelSubscription(subscriptionId, reason = 'User requested cancellation') {\n    try {\n      const { subscriptionsController } = this.client;\n\n      const request = {\n        subscriptionId: subscriptionId,\n        body: {\n          reason: reason\n        }\n      };\n\n      const response = await subscriptionsController.cancelSubscription(request);\n      \n      if (response.statusCode === 204) {\n        console.log('Subscription cancelled successfully:', subscriptionId);\n        return true;\n      } else {\n        throw new Error(`Failed to cancel subscription: ${response.statusCode}`);\n      }\n    } catch (error) {\n      console.error('Error cancelling subscription:', error);\n      throw this.handlePayPalError(error);\n    }\n  }\n\n  /**\n   * Suspend a subscription\n   * @param {string} subscriptionId - PayPal subscription ID\n   * @param {string} reason - Suspension reason\n   * @returns {Promise<boolean>} Success status\n   */\n  async suspendSubscription(subscriptionId, reason = 'Temporary suspension') {\n    try {\n      const { subscriptionsController } = this.client;\n\n      const request = {\n        subscriptionId: subscriptionId,\n        body: {\n          reason: reason\n        }\n      };\n\n      const response = await subscriptionsController.suspendSubscription(request);\n      \n      if (response.statusCode === 204) {\n        console.log('Subscription suspended successfully:', subscriptionId);\n        return true;\n      } else {\n        throw new Error(`Failed to suspend subscription: ${response.statusCode}`);\n      }\n    } catch (error) {\n      console.error('Error suspending subscription:', error);\n      throw this.handlePayPalError(error);\n    }\n  }\n\n  /**\n   * Activate a suspended subscription\n   * @param {string} subscriptionId - PayPal subscription ID\n   * @param {string} reason - Activation reason\n   * @returns {Promise<boolean>} Success status\n   */\n  async activateSubscription(subscriptionId, reason = 'Reactivating subscription') {\n    try {\n      const { subscriptionsController } = this.client;\n\n      const request = {\n        subscriptionId: subscriptionId,\n        body: {\n          reason: reason\n        }\n      };\n\n      const response = await subscriptionsController.activateSubscription(request);\n      \n      if (response.statusCode === 204) {\n        console.log('Subscription activated successfully:', subscriptionId);\n        return true;\n      } else {\n        throw new Error(`Failed to activate subscription: ${response.statusCode}`);\n      }\n    } catch (error) {\n      console.error('Error activating subscription:', error);\n      throw this.handlePayPalError(error);\n    }\n  }\n\n  /**\n   * List subscription transactions\n   * @param {string} subscriptionId - PayPal subscription ID\n   * @param {string} startTime - Start time for transaction list (ISO 8601)\n   * @param {string} endTime - End time for transaction list (ISO 8601)\n   * @returns {Promise<Object>} Transaction list\n   */\n  async getSubscriptionTransactions(subscriptionId, startTime, endTime) {\n    try {\n      const { subscriptionsController } = this.client;\n\n      const request = {\n        subscriptionId: subscriptionId,\n        startTime: startTime,\n        endTime: endTime\n      };\n\n      const response = await subscriptionsController.listTransactionsForSubscription(request);\n      \n      if (response.statusCode === 200) {\n        return response.result;\n      } else {\n        throw new Error(`Failed to get subscription transactions: ${response.statusCode}`);\n      }\n    } catch (error) {\n      console.error('Error getting subscription transactions:', error);\n      throw this.handlePayPalError(error);\n    }\n  }\n\n  /**\n   * Handle PayPal API errors\n   * @param {Error} error - Original error\n   * @returns {Error} Formatted error\n   */\n  handlePayPalError(error) {\n    if (error.result && error.result.details) {\n      // PayPal API error with details\n      const details = error.result.details.map(detail => \n        `${detail.issue}: ${detail.description}`\n      ).join(', ');\n      \n      return new Error(`PayPal API Error: ${details}`);\n    } else if (error.result && error.result.error_description) {\n      // OAuth error\n      return new Error(`PayPal OAuth Error: ${error.result.error_description}`);\n    } else if (error.message) {\n      // Generic error\n      return new Error(`PayPal Error: ${error.message}`);\n    } else {\n      // Unknown error\n      return new Error('Unknown PayPal error occurred');\n    }\n  }\n\n  /**\n   * Verify webhook signature (for webhook endpoints)\n   * @param {Object} request - Express request object\n   * @param {string} webhookId - PayPal webhook ID\n   * @returns {Promise<boolean>} Verification result\n   */\n  async verifyWebhookSignature(request, webhookId) {\n    try {\n      const { webhooksController } = this.client;\n\n      const headers = request.headers;\n      const body = request.body;\n\n      const verifyRequest = {\n        body: {\n          auth_algo: headers['paypal-auth-algo'],\n          cert_id: headers['paypal-cert-id'],\n          transmission_id: headers['paypal-transmission-id'],\n          transmission_sig: headers['paypal-transmission-sig'],\n          transmission_time: headers['paypal-transmission-time'],\n          webhook_id: webhookId,\n          webhook_event: body\n        }\n      };\n\n      const response = await webhooksController.verifyWebhookSignature(verifyRequest);\n      \n      return response.statusCode === 200 && response.result.verification_status === 'SUCCESS';\n    } catch (error) {\n      console.error('Error verifying webhook signature:', error);\n      return false;\n    }\n  }\n}\n\n// Create and export singleton instance\nconst paypalClient = new PayPalClient();\n\nexport default paypalClient;\n\n// Export utility functions\nexport const createSubscriptionPayload = (planId, subscriberInfo, returnUrl, cancelUrl) => {\n  return {\n    plan_id: planId,\n    subscriber: {\n      name: subscriberInfo.name ? {\n        given_name: subscriberInfo.name.split(' ')[0] || '',\n        surname: subscriberInfo.name.split(' ').slice(1).join(' ') || ''\n      } : undefined,\n      email_address: subscriberInfo.email\n    },\n    application_context: {\n      brand_name: 'PrepBettr',\n      locale: 'en-US',\n      shipping_preference: 'NO_SHIPPING',\n      user_action: 'SUBSCRIBE_NOW',\n      payment_method: {\n        payer_selected: 'PAYPAL',\n        payee_preferred: 'IMMEDIATE_PAYMENT_REQUIRED'\n      },\n      return_url: returnUrl,\n      cancel_url: cancelUrl\n    }\n  };\n};\n\nexport const getApprovalUrl = (subscription) => {\n  const approvalLink = subscription.links?.find(link => link.rel === 'approve');\n  return approvalLink?.href || null;\n};\n"],"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","ignoreList":[]}