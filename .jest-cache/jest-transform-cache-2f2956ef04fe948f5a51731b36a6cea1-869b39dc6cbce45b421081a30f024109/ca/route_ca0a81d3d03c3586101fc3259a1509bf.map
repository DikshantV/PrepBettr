{"version":3,"names":["cov_1xgbq53d1t","actualCoverage","s","exports","POST","GET","server_1","require","azure_openai_service_server_1","logger_1","structured_errors_1","request","f","body","json","action","logger","api","console","log","timestamp","Date","toISOString","azureOpenAIServiceServer","isReady","b","initialized","initialize","error","err","createErrorResponse","ErrorCode","SERVICE_UNAVAILABLE","service","status","getHTTPStatusFromErrorCode","code","res","NextResponse","retryable","retryAfter","headers","set","String","interviewContext","MISSING_REQUIRED_FIELD","field","setInterviewContext","type","mapInterviewType","position","extractJobRole","company","extractCompanyName","difficulty","preliminaryCollected","currentQuestionCount","maxQuestions","response","startInterviewConversation","questionNumber","isComplete","message","content","hasAudio","followUpSuggestions","userTranscript","trim","warn","length","preview","substring","processUserResponse","contentLength","_a","transcriptLength","processError","summary","generateInterviewSummary","hasSummary","conversationHistory","getConversationHistory","Error","INVALID_PARAMETER","INTERNAL_SERVER_ERROR","toLowerCase","includes","RATE_LIMIT_EXCEEDED","AUTH_TOKEN_INVALID","SERVICE_TIMEOUT","AZURE_OPENAI_ERROR","context","normalizedType","resumeInfo","candidateName","questions","roleMatch","match","undefined"],"sources":["/Users/dikshantvashistha/PrepBettr/app/api/voice/conversation/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { migrationOpenAIClient } from '@/lib/azure-ai-foundry/clients/migration-wrapper';\nimport { azureOpenAIServiceServer } from '@/azure/lib/services/azure-openai-service-server';\nimport { logger } from '@/lib/utils/logger';\nimport { InterviewContext } from '@/lib/voice/azure-adapters';\nimport { ErrorCode, createErrorResponse, getHTTPStatusFromErrorCode } from '@/lib/utils/structured-errors';\n\ninterface ConversationRequest {\n  action: 'start' | 'process' | 'summary';\n  interviewContext?: InterviewContext;\n  userTranscript?: string;\n}\n\n/**\n * Azure OpenAI Conversation API Endpoint\n * Handles interview conversation flow using Azure OpenAI\n */\nexport async function POST(request: NextRequest) {\n    try {\n      const body: ConversationRequest = await request.json();\n      const { action } = body;\n\n      logger.api.request('POST /api/voice/conversation', `Action: ${action}`);\n      console.log('üéØ [CONVERSATION API] Processing request', { action, timestamp: new Date().toISOString() });\n\n      // Initialize Azure OpenAI service if needed\n      if (!azureOpenAIServiceServer.isReady()) {\n        console.log('üîß [CONVERSATION API] Initializing Azure OpenAI service...');\n        const initialized = await azureOpenAIServiceServer.initialize();\n        if (!initialized) {\n          console.error('‚ùå [CONVERSATION API] Failed to initialize Azure OpenAI service');\n          logger.error('Failed to initialize Azure OpenAI service');\n          const err = createErrorResponse(ErrorCode.SERVICE_UNAVAILABLE, { service: 'azure-openai' }, 'AI service unavailable');\n          const status = getHTTPStatusFromErrorCode(err.error.code);\n          const res = NextResponse.json(err, { status });\n          if (err.error.retryable && err.error.retryAfter) {\n            res.headers.set('Retry-After', String(err.error.retryAfter));\n            res.headers.set('X-Retry-After', String(err.error.retryAfter));\n          }\n          return res;\n        }\n        console.log('‚úÖ [CONVERSATION API] Azure OpenAI service initialized successfully');\n      }\n\n      switch (action) {\n        case 'start': {\n          const { interviewContext } = body;\n          if (!interviewContext) {\n            const err = createErrorResponse(\n              ErrorCode.MISSING_REQUIRED_FIELD,\n              { field: 'interviewContext' },\n              'Interview context required for start action'\n            );\n            return NextResponse.json(err, { status: getHTTPStatusFromErrorCode(err.error.code) });\n          }\n\n          // Set interview context in the service\n          azureOpenAIServiceServer.setInterviewContext({\n            type: mapInterviewType(interviewContext.type),\n            position: extractJobRole(interviewContext),\n            company: extractCompanyName(interviewContext),\n            difficulty: 'medium', // Default difficulty\n            preliminaryCollected: false,\n            currentQuestionCount: 0,\n            maxQuestions: 10\n          });\n\n          // Start the interview conversation\n          const response = await azureOpenAIServiceServer.startInterviewConversation();\n          \n          logger.api.response('POST /api/voice/conversation', 200, {\n            action: 'start',\n            questionNumber: response.questionNumber,\n            isComplete: response.isComplete\n          });\n\n          return NextResponse.json({\n            message: response.content,\n            questionNumber: response.questionNumber,\n            isComplete: response.isComplete,\n            hasAudio: false, // TTS will be handled separately\n            followUpSuggestions: response.followUpSuggestions\n          });\n        }\n\n        case 'process': {\n          const { userTranscript } = body;\n          if (!userTranscript || !userTranscript.trim()) {\n            console.warn('üìù [CONVERSATION API] Empty transcript received');\n            const err = createErrorResponse(\n              ErrorCode.MISSING_REQUIRED_FIELD,\n              { field: 'userTranscript' },\n              'User transcript required for process action'\n            );\n            return NextResponse.json(err, { status: getHTTPStatusFromErrorCode(err.error.code) });\n          }\n\n          console.log('üß™ [CONVERSATION API] Processing user transcript', {\n            length: userTranscript.trim().length,\n            preview: userTranscript.trim().substring(0, 50) + '...'\n          });\n\n          try {\n            // Process user response and get AI reply\n            const response = await azureOpenAIServiceServer.processUserResponse(userTranscript.trim());\n\n            console.log('‚úÖ [CONVERSATION API] Successfully processed response', {\n              contentLength: response.content?.length,\n              questionNumber: response.questionNumber,\n              isComplete: response.isComplete\n            });\n\n            logger.api.response('POST /api/voice/conversation', 200, {\n              action: 'process',\n              questionNumber: response.questionNumber,\n              isComplete: response.isComplete,\n              transcriptLength: userTranscript.length\n            });\n\n            return NextResponse.json({\n              message: response.content,\n              questionNumber: response.questionNumber,\n              isComplete: response.isComplete,\n              hasAudio: false, // TTS will be handled separately\n              followUpSuggestions: response.followUpSuggestions\n            });\n          } catch (processError) {\n            console.error('‚ùå [CONVERSATION API] Process user response failed:', processError);\n            throw processError; // Re-throw to be caught by outer error handler\n          }\n        }\n\n        case 'summary': {\n          try {\n            // Generate interview summary\n            const summary = await azureOpenAIServiceServer.generateInterviewSummary();\n\n            logger.api.response('POST /api/voice/conversation', 200, {\n              action: 'summary',\n              hasSummary: !!summary\n            });\n\n            return NextResponse.json({\n              summary,\n              conversationHistory: azureOpenAIServiceServer.getConversationHistory()\n            });\n          } catch (error) {\n            logger.warn('Failed to generate summary, returning empty response', { error: error instanceof Error ? error.message : String(error) });\n            return NextResponse.json({\n              summary: null,\n              error: 'Summary generation failed'\n            });\n          }\n        }\n\n        default:\n          const err = createErrorResponse(\n            ErrorCode.INVALID_PARAMETER,\n            { action },\n            `Invalid action: ${action}`\n          );\n          return NextResponse.json(err, { status: getHTTPStatusFromErrorCode(err.error.code) });\n      }\n\n    } catch (error) {\n      logger.error('Conversation processing failed', error instanceof Error ? error : new Error(String(error)));\n\n      // Provide helpful structured error responses\n      let code: ErrorCode = ErrorCode.INTERNAL_SERVER_ERROR;\n      const message = error instanceof Error ? error.message.toLowerCase() : '';\n\n      if (message.includes('quota') || message.includes('rate limit')) {\n        code = ErrorCode.RATE_LIMIT_EXCEEDED;\n      } else if (message.includes('authentication') || message.includes('unauthorized')) {\n        code = ErrorCode.AUTH_TOKEN_INVALID;\n      } else if (message.includes('timeout')) {\n        code = ErrorCode.SERVICE_TIMEOUT;\n      } else if (message.includes('azure') || message.includes('openai')) {\n        code = ErrorCode.AZURE_OPENAI_ERROR;\n      }\n\n      const err = createErrorResponse(code, { context: 'voice.conversation' });\n      const status = getHTTPStatusFromErrorCode(code);\n      const res = NextResponse.json(err, { status });\n      if (err.error.retryable && err.error.retryAfter) {\n        res.headers.set('Retry-After', String(err.error.retryAfter));\n        res.headers.set('X-Retry-After', String(err.error.retryAfter));\n      }\n      return res;\n    }\n}\n\n/**\n * Health check endpoint for conversation service\n */\nexport async function GET() {\n  const isReady = azureOpenAIServiceServer.isReady();\n  \n  return NextResponse.json({\n    service: 'Azure OpenAI Conversation',\n    status: isReady ? 'ready' : 'not_initialized',\n    timestamp: new Date().toISOString()\n  }, { \n    status: isReady ? 200 : 503 \n  });\n}\n\n// Helper functions\nfunction mapInterviewType(type: string): 'technical' | 'behavioral' | 'general' {\n  const normalizedType = type.toLowerCase();\n  if (normalizedType.includes('technical')) return 'technical';\n  if (normalizedType.includes('behavioral')) return 'behavioral';\n  return 'general';\n}\n\nfunction extractJobRole(context: InterviewContext): string | undefined {\n  // Try to extract job role from various sources\n  if (context.resumeInfo?.candidateName) return context.resumeInfo.candidateName;\n  if (context.questions && context.questions.length > 0) {\n    // Look for role mentions in questions\n    const roleMatch = context.questions[0].match(/(\\w+\\s+\\w+)\\s+(developer|engineer|manager|analyst|designer)/i);\n    if (roleMatch) return roleMatch[0];\n  }\n  return undefined;\n}\n\nfunction extractCompanyName(context: InterviewContext): string | undefined {\n  // Extract company name from context if available\n  // This could be enhanced to parse from resume info or questions\n  return undefined;\n}\n"],"mappingsmBM;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;AAFNC,OAAA,CAAAC,IAAA,GAAAA,IAAA;AA6KC;AAAAJ,cAAA,GAAAE,CAAA;AAKDC,OAAA,CAAAE,GAAA,GAAAA,GAAA;AAnMA,MAAAC,QAAA;AAAA;AAAA,CAAAN,cAAA,GAAAE,CAAA,OAAAK,OAAA;AAEA,MAAAC,6BAAA;AAAA;AAAA,CAAAR,cAAA,GAAAE,CAAA,OAAAK,OAAA;AACA,MAAAE,QAAA;AAAA;AAAA,CAAAT,cAAA,GAAAE,CAAA,OAAAK,OAAA;AAEA,MAAAG,mBAAA;AAAA;AAAA,CAAAV,cAAA,GAAAE,CAAA,OAAAK,OAAA;AAQA;;;;AAIO,eAAeH,IAAIA,CAACO,OAAoB;EAAA;EAAAX,cAAA,GAAAY,CAAA;;;;EAC3C,IAAI;IACF,MAAMC,IAAI;IAAA;IAAA,CAAAb,cAAA,GAAAE,CAAA,OAAwB,MAAMS,OAAO,CAACG,IAAI,EAAE;IACtD,MAAM;MAAEC;IAAM,CAAE;IAAA;IAAA,CAAAf,cAAA,GAAAE,CAAA,OAAGW,IAAI;IAAC;IAAAb,cAAA,GAAAE,CAAA;IAExBO,QAAA,CAAAO,MAAM,CAACC,GAAG,CAACN,OAAO,CAAC,8BAA8B,EAAE,WAAWI,MAAM,EAAE,CAAC;IAAC;IAAAf,cAAA,GAAAE,CAAA;IACxEgB,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAE;MAAEJ,MAAM;MAAEK,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW;IAAE,CAAE,CAAC;IAExG;IAAA;IAAAtB,cAAA,GAAAE,CAAA;IACA,IAAI,CAACM,6BAAA,CAAAe,wBAAwB,CAACC,OAAO,EAAE,EAAE;MAAA;MAAAxB,cAAA,GAAAyB,CAAA;MAAAzB,cAAA,GAAAE,CAAA;MACvCgB,OAAO,CAACC,GAAG,CAAC,4DAA4D,CAAC;MACzE,MAAMO,WAAW;MAAA;MAAA,CAAA1B,cAAA,GAAAE,CAAA,QAAG,MAAMM,6BAAA,CAAAe,wBAAwB,CAACI,UAAU,EAAE;MAAC;MAAA3B,cAAA,GAAAE,CAAA;MAChE,IAAI,CAACwB,WAAW,EAAE;QAAA;QAAA1B,cAAA,GAAAyB,CAAA;QAAAzB,cAAA,GAAAE,CAAA;QAChBgB,OAAO,CAACU,KAAK,CAAC,gEAAgE,CAAC;QAAC;QAAA5B,cAAA,GAAAE,CAAA;QAChFO,QAAA,CAAAO,MAAM,CAACY,KAAK,CAAC,2CAA2C,CAAC;QACzD,MAAMC,GAAG;QAAA;QAAA,CAAA7B,cAAA,GAAAE,CAAA,QAAG,IAAAQ,mBAAA,CAAAoB,mBAAmB,EAACpB,mBAAA,CAAAqB,SAAS,CAACC,mBAAmB,EAAE;UAAEC,OAAO,EAAE;QAAc,CAAE,EAAE,wBAAwB,CAAC;QACrH,MAAMC,MAAM;QAAA;QAAA,CAAAlC,cAAA,GAAAE,CAAA,QAAG,IAAAQ,mBAAA,CAAAyB,0BAA0B,EAACN,GAAG,CAACD,KAAK,CAACQ,IAAI,CAAC;QACzD,MAAMC,GAAG;QAAA;QAAA,CAAArC,cAAA,GAAAE,CAAA,QAAGI,QAAA,CAAAgC,YAAY,CAACxB,IAAI,CAACe,GAAG,EAAE;UAAEK;QAAM,CAAE,CAAC;QAAC;QAAAlC,cAAA,GAAAE,CAAA;QAC/C;QAAI;QAAA,CAAAF,cAAA,GAAAyB,CAAA,UAAAI,GAAG,CAACD,KAAK,CAACW,SAAS;QAAA;QAAA,CAAAvC,cAAA,GAAAyB,CAAA,UAAII,GAAG,CAACD,KAAK,CAACY,UAAU,GAAE;UAAA;UAAAxC,cAAA,GAAAyB,CAAA;UAAAzB,cAAA,GAAAE,CAAA;UAC/CmC,GAAG,CAACI,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEC,MAAM,CAACd,GAAG,CAACD,KAAK,CAACY,UAAU,CAAC,CAAC;UAAC;UAAAxC,cAAA,GAAAE,CAAA;UAC7DmC,GAAG,CAACI,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEC,MAAM,CAACd,GAAG,CAACD,KAAK,CAACY,UAAU,CAAC,CAAC;QAChE,CAAC;QAAA;QAAA;UAAAxC,cAAA,GAAAyB,CAAA;QAAA;QAAAzB,cAAA,GAAAE,CAAA;QACD,OAAOmC,GAAG;MACZ,CAAC;MAAA;MAAA;QAAArC,cAAA,GAAAyB,CAAA;MAAA;MAAAzB,cAAA,GAAAE,CAAA;MACDgB,OAAO,CAACC,GAAG,CAAC,oEAAoE,CAAC;IACnF,CAAC;IAAA;IAAA;MAAAnB,cAAA,GAAAyB,CAAA;IAAA;IAAAzB,cAAA,GAAAE,CAAA;IAED,QAAQa,MAAM;MACZ,KAAK,OAAO;QAAA;QAAAf,cAAA,GAAAyB,CAAA;QAAE;UACZ,MAAM;YAAEmB;UAAgB,CAAE;UAAA;UAAA,CAAA5C,cAAA,GAAAE,CAAA,QAAGW,IAAI;UAAC;UAAAb,cAAA,GAAAE,CAAA;UAClC,IAAI,CAAC0C,gBAAgB,EAAE;YAAA;YAAA5C,cAAA,GAAAyB,CAAA;YACrB,MAAMI,GAAG;YAAA;YAAA,CAAA7B,cAAA,GAAAE,CAAA,QAAG,IAAAQ,mBAAA,CAAAoB,mBAAmB,EAC7BpB,mBAAA,CAAAqB,SAAS,CAACc,sBAAsB,EAChC;cAAEC,KAAK,EAAE;YAAkB,CAAE,EAC7B,6CAA6C,CAC9C;YAAC;YAAA9C,cAAA,GAAAE,CAAA;YACF,OAAOI,QAAA,CAAAgC,YAAY,CAACxB,IAAI,CAACe,GAAG,EAAE;cAAEK,MAAM,EAAE,IAAAxB,mBAAA,CAAAyB,0BAA0B,EAACN,GAAG,CAACD,KAAK,CAACQ,IAAI;YAAC,CAAE,CAAC;UACvF,CAAC;UAAA;UAAA;YAAApC,cAAA,GAAAyB,CAAA;UAAA;UAED;UAAAzB,cAAA,GAAAE,CAAA;UACAM,6BAAA,CAAAe,wBAAwB,CAACwB,mBAAmB,CAAC;YAC3CC,IAAI,EAAEC,gBAAgB,CAACL,gBAAgB,CAACI,IAAI,CAAC;YAC7CE,QAAQ,EAAEC,cAAc,CAACP,gBAAgB,CAAC;YAC1CQ,OAAO,EAAEC,kBAAkB,CAACT,gBAAgB,CAAC;YAC7CU,UAAU,EAAE,QAAQ;YAAE;YACtBC,oBAAoB,EAAE,KAAK;YAC3BC,oBAAoB,EAAE,CAAC;YACvBC,YAAY,EAAE;WACf,CAAC;UAEF;UACA,MAAMC,QAAQ;UAAA;UAAA,CAAA1D,cAAA,GAAAE,CAAA,QAAG,MAAMM,6BAAA,CAAAe,wBAAwB,CAACoC,0BAA0B,EAAE;UAAC;UAAA3D,cAAA,GAAAE,CAAA;UAE7EO,QAAA,CAAAO,MAAM,CAACC,GAAG,CAACyC,QAAQ,CAAC,8BAA8B,EAAE,GAAG,EAAE;YACvD3C,MAAM,EAAE,OAAO;YACf6C,cAAc,EAAEF,QAAQ,CAACE,cAAc;YACvCC,UAAU,EAAEH,QAAQ,CAACG;WACtB,CAAC;UAAC;UAAA7D,cAAA,GAAAE,CAAA;UAEH,OAAOI,QAAA,CAAAgC,YAAY,CAACxB,IAAI,CAAC;YACvBgD,OAAO,EAAEJ,QAAQ,CAACK,OAAO;YACzBH,cAAc,EAAEF,QAAQ,CAACE,cAAc;YACvCC,UAAU,EAAEH,QAAQ,CAACG,UAAU;YAC/BG,QAAQ,EAAE,KAAK;YAAE;YACjBC,mBAAmB,EAAEP,QAAQ,CAACO;WAC/B,CAAC;QACJ;MAEA,KAAK,SAAS;QAAA;QAAAjE,cAAA,GAAAyB,CAAA;QAAE;UACd,MAAM;YAAEyC;UAAc,CAAE;UAAA;UAAA,CAAAlE,cAAA,GAAAE,CAAA,QAAGW,IAAI;UAAC;UAAAb,cAAA,GAAAE,CAAA;UAChC;UAAI;UAAA,CAAAF,cAAA,GAAAyB,CAAA,WAACyC,cAAc;UAAA;UAAA,CAAAlE,cAAA,GAAAyB,CAAA,UAAI,CAACyC,cAAc,CAACC,IAAI,EAAE,GAAE;YAAA;YAAAnE,cAAA,GAAAyB,CAAA;YAAAzB,cAAA,GAAAE,CAAA;YAC7CgB,OAAO,CAACkD,IAAI,CAAC,iDAAiD,CAAC;YAC/D,MAAMvC,GAAG;YAAA;YAAA,CAAA7B,cAAA,GAAAE,CAAA,QAAG,IAAAQ,mBAAA,CAAAoB,mBAAmB,EAC7BpB,mBAAA,CAAAqB,SAAS,CAACc,sBAAsB,EAChC;cAAEC,KAAK,EAAE;YAAgB,CAAE,EAC3B,6CAA6C,CAC9C;YAAC;YAAA9C,cAAA,GAAAE,CAAA;YACF,OAAOI,QAAA,CAAAgC,YAAY,CAACxB,IAAI,CAACe,GAAG,EAAE;cAAEK,MAAM,EAAE,IAAAxB,mBAAA,CAAAyB,0BAA0B,EAACN,GAAG,CAACD,KAAK,CAACQ,IAAI;YAAC,CAAE,CAAC;UACvF,CAAC;UAAA;UAAA;YAAApC,cAAA,GAAAyB,CAAA;UAAA;UAAAzB,cAAA,GAAAE,CAAA;UAEDgB,OAAO,CAACC,GAAG,CAAC,kDAAkD,EAAE;YAC9DkD,MAAM,EAAEH,cAAc,CAACC,IAAI,EAAE,CAACE,MAAM;YACpCC,OAAO,EAAEJ,cAAc,CAACC,IAAI,EAAE,CAACI,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG;WACnD,CAAC;UAAC;UAAAvE,cAAA,GAAAE,CAAA;UAEH,IAAI;YACF;YACA,MAAMwD,QAAQ;YAAA;YAAA,CAAA1D,cAAA,GAAAE,CAAA,QAAG,MAAMM,6BAAA,CAAAe,wBAAwB,CAACiD,mBAAmB,CAACN,cAAc,CAACC,IAAI,EAAE,CAAC;YAAC;YAAAnE,cAAA,GAAAE,CAAA;YAE3FgB,OAAO,CAACC,GAAG,CAAC,sDAAsD,EAAE;cAClEsD,aAAa;cAAE;cAAA,CAAAzE,cAAA,GAAAyB,CAAA,WAAAiD,EAAA,GAAAhB,QAAQ,CAACK,OAAO;cAAA;cAAA,CAAA/D,cAAA,GAAAyB,CAAA,UAAAiD,EAAA;cAAA;cAAA,CAAA1E,cAAA,GAAAyB,CAAA;cAAA;cAAA,CAAAzB,cAAA,GAAAyB,CAAA,UAAAiD,EAAA,CAAEL,MAAM;cACvCT,cAAc,EAAEF,QAAQ,CAACE,cAAc;cACvCC,UAAU,EAAEH,QAAQ,CAACG;aACtB,CAAC;YAAC;YAAA7D,cAAA,GAAAE,CAAA;YAEHO,QAAA,CAAAO,MAAM,CAACC,GAAG,CAACyC,QAAQ,CAAC,8BAA8B,EAAE,GAAG,EAAE;cACvD3C,MAAM,EAAE,SAAS;cACjB6C,cAAc,EAAEF,QAAQ,CAACE,cAAc;cACvCC,UAAU,EAAEH,QAAQ,CAACG,UAAU;cAC/Bc,gBAAgB,EAAET,cAAc,CAACG;aAClC,CAAC;YAAC;YAAArE,cAAA,GAAAE,CAAA;YAEH,OAAOI,QAAA,CAAAgC,YAAY,CAACxB,IAAI,CAAC;cACvBgD,OAAO,EAAEJ,QAAQ,CAACK,OAAO;cACzBH,cAAc,EAAEF,QAAQ,CAACE,cAAc;cACvCC,UAAU,EAAEH,QAAQ,CAACG,UAAU;cAC/BG,QAAQ,EAAE,KAAK;cAAE;cACjBC,mBAAmB,EAAEP,QAAQ,CAACO;aAC/B,CAAC;UACJ,CAAC,CAAC,OAAOW,YAAY,EAAE;YAAA;YAAA5E,cAAA,GAAAE,CAAA;YACrBgB,OAAO,CAACU,KAAK,CAAC,oDAAoD,EAAEgD,YAAY,CAAC;YAAC;YAAA5E,cAAA,GAAAE,CAAA;YAClF,MAAM0E,YAAY,CAAC,CAAC;UACtB;QACF;MAEA,KAAK,SAAS;QAAA;QAAA5E,cAAA,GAAAyB,CAAA;QAAE;UAAA;UAAAzB,cAAA,GAAAE,CAAA;UACd,IAAI;YACF;YACA,MAAM2E,OAAO;YAAA;YAAA,CAAA7E,cAAA,GAAAE,CAAA,QAAG,MAAMM,6BAAA,CAAAe,wBAAwB,CAACuD,wBAAwB,EAAE;YAAC;YAAA9E,cAAA,GAAAE,CAAA;YAE1EO,QAAA,CAAAO,MAAM,CAACC,GAAG,CAACyC,QAAQ,CAAC,8BAA8B,EAAE,GAAG,EAAE;cACvD3C,MAAM,EAAE,SAAS;cACjBgE,UAAU,EAAE,CAAC,CAACF;aACf,CAAC;YAAC;YAAA7E,cAAA,GAAAE,CAAA;YAEH,OAAOI,QAAA,CAAAgC,YAAY,CAACxB,IAAI,CAAC;cACvB+D,OAAO;cACPG,mBAAmB,EAAExE,6BAAA,CAAAe,wBAAwB,CAAC0D,sBAAsB;aACrE,CAAC;UACJ,CAAC,CAAC,OAAOrD,KAAK,EAAE;YAAA;YAAA5B,cAAA,GAAAE,CAAA;YACdO,QAAA,CAAAO,MAAM,CAACoD,IAAI,CAAC,sDAAsD,EAAE;cAAExC,KAAK,EAAEA,KAAK,YAAYsD,KAAK;cAAA;cAAA,CAAAlF,cAAA,GAAAyB,CAAA,WAAGG,KAAK,CAACkC,OAAO;cAAA;cAAA,CAAA9D,cAAA,GAAAyB,CAAA,WAAGkB,MAAM,CAACf,KAAK,CAAC;YAAA,CAAE,CAAC;YAAC;YAAA5B,cAAA,GAAAE,CAAA;YACvI,OAAOI,QAAA,CAAAgC,YAAY,CAACxB,IAAI,CAAC;cACvB+D,OAAO,EAAE,IAAI;cACbjD,KAAK,EAAE;aACR,CAAC;UACJ;QACF;MAEA;QAAA;QAAA5B,cAAA,GAAAyB,CAAA;QACE,MAAMI,GAAG;QAAA;QAAA,CAAA7B,cAAA,GAAAE,CAAA,QAAG,IAAAQ,mBAAA,CAAAoB,mBAAmB,EAC7BpB,mBAAA,CAAAqB,SAAS,CAACoD,iBAAiB,EAC3B;UAAEpE;QAAM,CAAE,EACV,mBAAmBA,MAAM,EAAE,CAC5B;QAAC;QAAAf,cAAA,GAAAE,CAAA;QACF,OAAOI,QAAA,CAAAgC,YAAY,CAACxB,IAAI,CAACe,GAAG,EAAE;UAAEK,MAAM,EAAE,IAAAxB,mBAAA,CAAAyB,0BAA0B,EAACN,GAAG,CAACD,KAAK,CAACQ,IAAI;QAAC,CAAE,CAAC;IACzF;EAEF,CAAC,CAAC,OAAOR,KAAK,EAAE;IAAA;IAAA5B,cAAA,GAAAE,CAAA;IACdO,QAAA,CAAAO,MAAM,CAACY,KAAK,CAAC,gCAAgC,EAAEA,KAAK,YAAYsD,KAAK;IAAA;IAAA,CAAAlF,cAAA,GAAAyB,CAAA,WAAGG,KAAK;IAAA;IAAA,CAAA5B,cAAA,GAAAyB,CAAA,WAAG,IAAIyD,KAAK,CAACvC,MAAM,CAACf,KAAK,CAAC,CAAC,EAAC;IAEzG;IACA,IAAIQ,IAAI;IAAA;IAAA,CAAApC,cAAA,GAAAE,CAAA,QAAcQ,mBAAA,CAAAqB,SAAS,CAACqD,qBAAqB;IACrD,MAAMtB,OAAO;IAAA;IAAA,CAAA9D,cAAA,GAAAE,CAAA,QAAG0B,KAAK,YAAYsD,KAAK;IAAA;IAAA,CAAAlF,cAAA,GAAAyB,CAAA,WAAGG,KAAK,CAACkC,OAAO,CAACuB,WAAW,EAAE;IAAA;IAAA,CAAArF,cAAA,GAAAyB,CAAA,WAAG,EAAE;IAAC;IAAAzB,cAAA,GAAAE,CAAA;IAE1E;IAAI;IAAA,CAAAF,cAAA,GAAAyB,CAAA,WAAAqC,OAAO,CAACwB,QAAQ,CAAC,OAAO,CAAC;IAAA;IAAA,CAAAtF,cAAA,GAAAyB,CAAA,WAAIqC,OAAO,CAACwB,QAAQ,CAAC,YAAY,CAAC,GAAE;MAAA;MAAAtF,cAAA,GAAAyB,CAAA;MAAAzB,cAAA,GAAAE,CAAA;MAC/DkC,IAAI,GAAG1B,mBAAA,CAAAqB,SAAS,CAACwD,mBAAmB;IACtC,CAAC,MAAM;MAAA;MAAAvF,cAAA,GAAAyB,CAAA;MAAAzB,cAAA,GAAAE,CAAA;MAAA;MAAI;MAAA,CAAAF,cAAA,GAAAyB,CAAA,WAAAqC,OAAO,CAACwB,QAAQ,CAAC,gBAAgB,CAAC;MAAA;MAAA,CAAAtF,cAAA,GAAAyB,CAAA,WAAIqC,OAAO,CAACwB,QAAQ,CAAC,cAAc,CAAC,GAAE;QAAA;QAAAtF,cAAA,GAAAyB,CAAA;QAAAzB,cAAA,GAAAE,CAAA;QACjFkC,IAAI,GAAG1B,mBAAA,CAAAqB,SAAS,CAACyD,kBAAkB;MACrC,CAAC,MAAM;QAAA;QAAAxF,cAAA,GAAAyB,CAAA;QAAAzB,cAAA,GAAAE,CAAA;QAAA,IAAI4D,OAAO,CAACwB,QAAQ,CAAC,SAAS,CAAC,EAAE;UAAA;UAAAtF,cAAA,GAAAyB,CAAA;UAAAzB,cAAA,GAAAE,CAAA;UACtCkC,IAAI,GAAG1B,mBAAA,CAAAqB,SAAS,CAAC0D,eAAe;QAClC,CAAC,MAAM;UAAA;UAAAzF,cAAA,GAAAyB,CAAA;UAAAzB,cAAA,GAAAE,CAAA;UAAA;UAAI;UAAA,CAAAF,cAAA,GAAAyB,CAAA,WAAAqC,OAAO,CAACwB,QAAQ,CAAC,OAAO,CAAC;UAAA;UAAA,CAAAtF,cAAA,GAAAyB,CAAA,WAAIqC,OAAO,CAACwB,QAAQ,CAAC,QAAQ,CAAC,GAAE;YAAA;YAAAtF,cAAA,GAAAyB,CAAA;YAAAzB,cAAA,GAAAE,CAAA;YAClEkC,IAAI,GAAG1B,mBAAA,CAAAqB,SAAS,CAAC2D,kBAAkB;UACrC,CAAC;UAAA;UAAA;YAAA1F,cAAA,GAAAyB,CAAA;UAAA;QAAD;MAAA;IAAA;IAEA,MAAMI,GAAG;IAAA;IAAA,CAAA7B,cAAA,GAAAE,CAAA,QAAG,IAAAQ,mBAAA,CAAAoB,mBAAmB,EAACM,IAAI,EAAE;MAAEuD,OAAO,EAAE;IAAoB,CAAE,CAAC;IACxE,MAAMzD,MAAM;IAAA;IAAA,CAAAlC,cAAA,GAAAE,CAAA,QAAG,IAAAQ,mBAAA,CAAAyB,0BAA0B,EAACC,IAAI,CAAC;IAC/C,MAAMC,GAAG;IAAA;IAAA,CAAArC,cAAA,GAAAE,CAAA,QAAGI,QAAA,CAAAgC,YAAY,CAACxB,IAAI,CAACe,GAAG,EAAE;MAAEK;IAAM,CAAE,CAAC;IAAC;IAAAlC,cAAA,GAAAE,CAAA;IAC/C;IAAI;IAAA,CAAAF,cAAA,GAAAyB,CAAA,WAAAI,GAAG,CAACD,KAAK,CAACW,SAAS;IAAA;IAAA,CAAAvC,cAAA,GAAAyB,CAAA,WAAII,GAAG,CAACD,KAAK,CAACY,UAAU,GAAE;MAAA;MAAAxC,cAAA,GAAAyB,CAAA;MAAAzB,cAAA,GAAAE,CAAA;MAC/CmC,GAAG,CAACI,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEC,MAAM,CAACd,GAAG,CAACD,KAAK,CAACY,UAAU,CAAC,CAAC;MAAC;MAAAxC,cAAA,GAAAE,CAAA;MAC7DmC,GAAG,CAACI,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEC,MAAM,CAACd,GAAG,CAACD,KAAK,CAACY,UAAU,CAAC,CAAC;IAChE,CAAC;IAAA;IAAA;MAAAxC,cAAA,GAAAyB,CAAA;IAAA;IAAAzB,cAAA,GAAAE,CAAA;IACD,OAAOmC,GAAG;EACZ;AACJ;AAEA;;;AAGO,eAAehC,GAAGA,CAAA;EAAA;EAAAL,cAAA,GAAAY,CAAA;EACvB,MAAMY,OAAO;EAAA;EAAA,CAAAxB,cAAA,GAAAE,CAAA,QAAGM,6BAAA,CAAAe,wBAAwB,CAACC,OAAO,EAAE;EAAC;EAAAxB,cAAA,GAAAE,CAAA;EAEnD,OAAOI,QAAA,CAAAgC,YAAY,CAACxB,IAAI,CAAC;IACvBmB,OAAO,EAAE,2BAA2B;IACpCC,MAAM,EAAEV,OAAO;IAAA;IAAA,CAAAxB,cAAA,GAAAyB,CAAA,WAAG,OAAO;IAAA;IAAA,CAAAzB,cAAA,GAAAyB,CAAA,WAAG,iBAAiB;IAC7CL,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW;GAClC,EAAE;IACDY,MAAM,EAAEV,OAAO;IAAA;IAAA,CAAAxB,cAAA,GAAAyB,CAAA,WAAG,GAAG;IAAA;IAAA,CAAAzB,cAAA,GAAAyB,CAAA,WAAG,GAAG;GAC5B,CAAC;AACJ;AAEA;AACA,SAASwB,gBAAgBA,CAACD,IAAY;EAAA;EAAAhD,cAAA,GAAAY,CAAA;EACpC,MAAMgF,cAAc;EAAA;EAAA,CAAA5F,cAAA,GAAAE,CAAA,QAAG8C,IAAI,CAACqC,WAAW,EAAE;EAAC;EAAArF,cAAA,GAAAE,CAAA;EAC1C,IAAI0F,cAAc,CAACN,QAAQ,CAAC,WAAW,CAAC,EAAE;IAAA;IAAAtF,cAAA,GAAAyB,CAAA;IAAAzB,cAAA,GAAAE,CAAA;IAAA,OAAO,WAAW;EAAA,CAAC;EAAA;EAAA;IAAAF,cAAA,GAAAyB,CAAA;EAAA;EAAAzB,cAAA,GAAAE,CAAA;EAC7D,IAAI0F,cAAc,CAACN,QAAQ,CAAC,YAAY,CAAC,EAAE;IAAA;IAAAtF,cAAA,GAAAyB,CAAA;IAAAzB,cAAA,GAAAE,CAAA;IAAA,OAAO,YAAY;EAAA,CAAC;EAAA;EAAA;IAAAF,cAAA,GAAAyB,CAAA;EAAA;EAAAzB,cAAA,GAAAE,CAAA;EAC/D,OAAO,SAAS;AAClB;AAEA,SAASiD,cAAcA,CAACwC,OAAyB;EAAA;EAAA3F,cAAA,GAAAY,CAAA;;EAC/C;EAAA;EAAAZ,cAAA,GAAAE,CAAA;EACA;EAAI;EAAA,CAAAF,cAAA,GAAAyB,CAAA,YAAAiD,EAAA,GAAAiB,OAAO,CAACE,UAAU;EAAA;EAAA,CAAA7F,cAAA,GAAAyB,CAAA,WAAAiD,EAAA;EAAA;EAAA,CAAA1E,cAAA,GAAAyB,CAAA;EAAA;EAAA,CAAAzB,cAAA,GAAAyB,CAAA,WAAAiD,EAAA,CAAEoB,aAAa,GAAE;IAAA;IAAA9F,cAAA,GAAAyB,CAAA;IAAAzB,cAAA,GAAAE,CAAA;IAAA,OAAOyF,OAAO,CAACE,UAAU,CAACC,aAAa;EAAA,CAAC;EAAA;EAAA;IAAA9F,cAAA,GAAAyB,CAAA;EAAA;EAAAzB,cAAA,GAAAE,CAAA;EAC/E;EAAI;EAAA,CAAAF,cAAA,GAAAyB,CAAA,WAAAkE,OAAO,CAACI,SAAS;EAAA;EAAA,CAAA/F,cAAA,GAAAyB,CAAA,WAAIkE,OAAO,CAACI,SAAS,CAAC1B,MAAM,GAAG,CAAC,GAAE;IAAA;IAAArE,cAAA,GAAAyB,CAAA;IACrD;IACA,MAAMuE,SAAS;IAAA;IAAA,CAAAhG,cAAA,GAAAE,CAAA,QAAGyF,OAAO,CAACI,SAAS,CAAC,CAAC,CAAC,CAACE,KAAK,CAAC,8DAA8D,CAAC;IAAC;IAAAjG,cAAA,GAAAE,CAAA;IAC7G,IAAI8F,SAAS,EAAE;MAAA;MAAAhG,cAAA,GAAAyB,CAAA;MAAAzB,cAAA,GAAAE,CAAA;MAAA,OAAO8F,SAAS,CAAC,CAAC,CAAC;IAAA,CAAC;IAAA;IAAA;MAAAhG,cAAA,GAAAyB,CAAA;IAAA;EACrC,CAAC;EAAA;EAAA;IAAAzB,cAAA,GAAAyB,CAAA;EAAA;EAAAzB,cAAA,GAAAE,CAAA;EACD,OAAOgG,SAAS;AAClB;AAEA,SAAS7C,kBAAkBA,CAACsC,OAAyB;EAAA;EAAA3F,cAAA,GAAAY,CAAA;EAAAZ,cAAA,GAAAE,CAAA;EACnD;EACA;EACA,OAAOgG,SAAS;AAClB","ignoreList":[]}