404aa4cce8ea24a9eb07a6825e6f675a
"use strict";
/**
 * Database Migration Script: Firestore to Azure Cosmos DB
 *
 * This script performs a safe migration of data from Firestore to Azure Cosmos DB
 * with comprehensive validation, progress tracking, and rollback capabilities.
 *
 * Usage:
 *   npm run migrate:database [options]
 *
 * Options:
 *   --collection <name>    Migrate specific collection
 *   --dry-run             Preview migration without executing
 *   --batch-size <num>    Batch size for processing (default: 100)
 *   --validate-only       Only run validation, no migration
 *   --rollback           Rollback specified collection to Firestore
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabaseMigrationService = void 0;
const commander_1 = require("commander");
const admin_1 = require("@/lib/firebase/admin");
const azure_cosmos_service_1 = require("@/lib/services/azure-cosmos-service");
const firebase_service_1 = require("@/services/firebase.service");
const crypto = __importStar(require("crypto"));
class DatabaseMigrationService {
    constructor() {
        this.firebaseService = new firebase_service_1.FirebaseService();
        // Collection mapping: Firestore -> Cosmos DB
        this.collectionMappings = {
            'interviews': 'interviews',
            'feedback': 'feedback',
            'resumes': 'resumes',
            'usage': 'usage',
            'autoApplySettings': 'autoApplySettings',
            'applications': 'applications',
            'jobListings': 'jobListings',
            'automationLogs': 'automationLogs',
            'subscription_events': 'subscriptionEvents'
        };
    }
    async getFirestore() {
        return await (0, admin_1.getAdminFirestore)();
    }
    /**
     * Main migration orchestrator
     */
    async migrateCollection(firestoreCollection, options = {}) {
        const { batchSize = 100, dryRun = false, validateOnly = false } = options;
        const cosmosContainer = this.collectionMappings[firestoreCollection];
        if (!cosmosContainer) {
            throw new Error(`No mapping found for collection: ${firestoreCollection}`);
        }
        console.log(`üöÄ Starting migration: ${firestoreCollection} -> ${cosmosContainer}`);
        if (validateOnly) {
            const validation = await this.validateMigration(firestoreCollection);
            console.log('Validation Result:', JSON.stringify(validation, null, 2));
            return {
                collection: firestoreCollection,
                total: 0,
                migrated: 0,
                failed: 0,
                errors: [],
                startTime: new Date()
            };
        }
        // Initialize migration tracking
        const migrationId = await this.initializeMigrationProgress(firestoreCollection);
        const result = {
            collection: firestoreCollection,
            total: 0,
            migrated: 0,
            failed: 0,
            errors: [],
            startTime: new Date()
        };
        try {
            // Initialize Cosmos DB service
            await azure_cosmos_service_1.azureCosmosService.initialize();
            // Get total document count for progress tracking
            const totalCount = await this.getFirestoreCollectionSize(firestoreCollection);
            result.total = totalCount;
            console.log(`üìä Total documents to migrate: ${totalCount}`);
            let processedCount = 0;
            let lastDoc = null;
            // Process in batches
            do {
                const batch = await this.getFirestoreBatch(firestoreCollection, batchSize, lastDoc);
                if (batch.length === 0)
                    break;
                for (const doc of batch) {
                    try {
                        if (!dryRun) {
                            const transformedDoc = await this.transformDocumentForCosmos(doc, firestoreCollection);
                            await azure_cosmos_service_1.azureCosmosService.createDocument(cosmosContainer, transformedDoc);
                        }
                        result.migrated++;
                        processedCount++;
                        // Progress update every 50 documents
                        if (processedCount % 50 === 0) {
                            await this.updateMigrationProgress(migrationId, {
                                progress: (processedCount / totalCount) * 100,
                                updatedAt: new Date()
                            });
                            console.log(`üìà Progress: ${processedCount}/${totalCount} (${Math.round((processedCount / totalCount) * 100)}%)`);
                        }
                    }
                    catch (error) {
                        result.failed++;
                        result.errors.push({
                            docId: doc.id,
                            error: error instanceof Error ? error.message : String(error)
                        });
                        console.error(`‚ùå Failed to migrate document ${doc.id}:`, error);
                    }
                }
                lastDoc = batch[batch.length - 1];
            } while (lastDoc && !dryRun);
            result.endTime = new Date();
            result.duration = result.endTime.getTime() - result.startTime.getTime();
            // Final progress update
            await this.completeMigrationProgress(migrationId, result);
            // Validation after migration
            if (!dryRun && result.failed === 0) {
                console.log('üîç Running post-migration validation...');
                const validation = await this.validateMigration(firestoreCollection);
                if (!validation.isValid) {
                    console.warn('‚ö†Ô∏è Post-migration validation failed:', validation);
                }
                else {
                    console.log('‚úÖ Post-migration validation passed');
                }
            }
            console.log(`üéâ Migration completed: ${result.migrated} migrated, ${result.failed} failed`);
            if (dryRun) {
                console.log('üß™ DRY RUN: No data was actually migrated');
            }
            return result;
        }
        catch (error) {
            console.error('üí• Migration failed:', error);
            await this.failMigrationProgress(migrationId, error instanceof Error ? error.message : String(error));
            throw error;
        }
    }
    /**
     * Transform Firestore document for Cosmos DB
     */
    async transformDocumentForCosmos(doc, collection) {
        const data = doc.data();
        const transformed = Object.assign(Object.assign({ id: doc.id }, data), { _partitionKey: this.getPartitionKey(data, collection), 
            // Add migration metadata
            _migrated: {
                from: 'firestore',
                timestamp: new Date(),
                originalId: doc.id,
                checksum: this.calculateChecksum(data)
            } });
        // Collection-specific transformations
        switch (collection) {
            case 'interviews':
                return this.transformInterview(transformed);
            case 'feedback':
                return this.transformFeedback(transformed);
            case 'resumes':
                return this.transformResume(transformed);
            case 'usage':
                return this.transformUsage(transformed);
            default:
                return transformed;
        }
    }
    /**
     * Collection-specific transformation methods
     */
    transformInterview(doc) {
        return Object.assign(Object.assign({}, doc), { 
            // Ensure required fields
            status: doc.status || (doc.finalized ? 'completed' : 'active'), metadata: Object.assign(Object.assign({}, doc.metadata), { migratedFrom: 'firestore' }) });
    }
    transformFeedback(doc) {
        return Object.assign(Object.assign({}, doc), { 
            // Normalize feedback structure
            overallScore: doc.overallScore || 0, strengths: Array.isArray(doc.strengths) ? doc.strengths : [], improvements: Array.isArray(doc.improvements) ? doc.improvements : [] });
    }
    transformResume(doc) {
        var _a, _b, _c, _d, _e;
        return Object.assign(Object.assign({}, doc), { 
            // Ensure metadata structure
            metadata: Object.assign({ fileSize: ((_a = doc.metadata) === null || _a === void 0 ? void 0 : _a.fileSize) || 0, uploadDate: ((_b = doc.metadata) === null || _b === void 0 ? void 0 : _b.uploadDate) || doc.createdAt, lastModified: ((_c = doc.metadata) === null || _c === void 0 ? void 0 : _c.lastModified) || doc.updatedAt, mimeType: ((_d = doc.metadata) === null || _d === void 0 ? void 0 : _d.mimeType) || 'application/pdf', storageProvider: ((_e = doc.metadata) === null || _e === void 0 ? void 0 : _e.storageProvider) || 'firebase' }, doc.metadata), 
            // Ensure required fields
            extractedData: doc.extractedData || {
                skills: [],
                experience: [],
                education: []
            }, interviewQuestions: doc.interviewQuestions || [] });
    }
    transformUsage(doc) {
        var _a, _b, _c, _d, _e, _f;
        return Object.assign(Object.assign({}, doc), { 
            // Normalize usage structure
            interviews: {
                count: ((_a = doc.interviews) === null || _a === void 0 ? void 0 : _a.count) || 0,
                limit: ((_b = doc.interviews) === null || _b === void 0 ? void 0 : _b.limit) || 3,
                lastReset: (_c = doc.interviews) === null || _c === void 0 ? void 0 : _c.lastReset
            }, resumes: {
                count: ((_d = doc.resumes) === null || _d === void 0 ? void 0 : _d.count) || 0,
                limit: ((_e = doc.resumes) === null || _e === void 0 ? void 0 : _e.limit) || 2,
                lastReset: (_f = doc.resumes) === null || _f === void 0 ? void 0 : _f.lastReset
            } });
    }
    /**
     * Get appropriate partition key for collection
     */
    getPartitionKey(data, collection) {
        switch (collection) {
            case 'jobListings':
            case 'subscription_events':
                return data.id || 'default';
            default:
                return data.userId || data.uid || 'default';
        }
    }
    /**
     * Calculate document checksum for validation
     */
    calculateChecksum(data) {
        const normalized = JSON.stringify(data, Object.keys(data).sort());
        return crypto.createHash('sha256').update(normalized).digest('hex');
    }
    /**
     * Get Firestore collection size
     */
    async getFirestoreCollectionSize(collection) {
        const firestore = await this.getFirestore();
        const snapshot = await firestore.collection(collection).get();
        return snapshot.docs.length;
    }
    /**
     * Get batch of documents from Firestore
     */
    async getFirestoreBatch(collection, batchSize, lastDoc = null) {
        const firestore = await this.getFirestore();
        // For the mock implementation, just return empty array
        // In a real implementation, this would do proper pagination
        let query = firestore.collection(collection);
        // Check if we have the orderBy method available (real Firestore vs mock)
        if (typeof query.orderBy === 'function') {
            query = query.orderBy('__name__').limit(batchSize);
            if (lastDoc) {
                query = query.startAfter(lastDoc);
            }
        }
        else {
            // Mock implementation - use get directly
            query = firestore.collection(collection);
        }
        const snapshot = await query.get();
        return snapshot.docs;
    }
    /**
     * Validate migration by comparing document counts and sample data
     */
    async validateMigration(collection) {
        console.log(`üîç Validating migration for collection: ${collection}`);
        const cosmosContainer = this.collectionMappings[collection];
        if (!cosmosContainer) {
            throw new Error(`No mapping found for collection: ${collection}`);
        }
        // Get document counts
        const [firestoreCount, cosmosCount] = await Promise.all([
            this.getFirestoreCollectionSize(collection),
            this.getCosmosCollectionSize(cosmosContainer)
        ]);
        console.log(`üìä Document counts - Firestore: ${firestoreCount}, Cosmos: ${cosmosCount}`);
        // Sample validation
        const sampleValidation = await this.validateSampleDocuments(collection, cosmosContainer);
        const isValid = firestoreCount === cosmosCount && sampleValidation.allValid;
        return {
            collection,
            isValid,
            counts: { firestore: firestoreCount, cosmos: cosmosCount },
            sampleValidation
        };
    }
    /**
     * Get Cosmos DB collection size
     */
    async getCosmosCollectionSize(container) {
        await azure_cosmos_service_1.azureCosmosService.initialize();
        const results = await azure_cosmos_service_1.azureCosmosService.queryDocuments(container, 'SELECT VALUE COUNT(1) FROM c', []);
        return (typeof results[0] === 'number') ? results[0] : 0;
    }
    /**
     * Validate sample documents between Firestore and Cosmos DB
     */
    async validateSampleDocuments(firestoreCollection, cosmosContainer, sampleSize = 10) {
        const samples = await this.getRandomSamples(firestoreCollection, sampleSize);
        const results = [];
        for (const sample of samples) {
            try {
                const firestore = await this.getFirestore();
                const firestoreDoc = await firestore.collection(firestoreCollection).doc(sample.id).get();
                const cosmosDoc = await azure_cosmos_service_1.azureCosmosService.getDocument(cosmosContainer, sample.id, sample.partitionKey);
                if (!firestoreDoc.exists) {
                    results.push({
                        docId: sample.id,
                        isValid: false,
                        differences: ['Firestore document not found']
                    });
                    continue;
                }
                if (!cosmosDoc) {
                    results.push({
                        docId: sample.id,
                        isValid: false,
                        differences: ['Cosmos document not found']
                    });
                    continue;
                }
                const differences = this.compareDocuments(firestoreDoc.data(), cosmosDoc);
                results.push({
                    docId: sample.id,
                    isValid: differences.length === 0,
                    differences
                });
            }
            catch (error) {
                results.push({
                    docId: sample.id,
                    isValid: false,
                    differences: [`Validation error: ${error instanceof Error ? error.message : 'Unknown error'}`]
                });
            }
        }
        return {
            allValid: results.every(r => r.isValid),
            validCount: results.filter(r => r.isValid).length,
            totalCount: results.length,
            differences: results.filter(r => !r.isValid)
        };
    }
    /**
     * Get random sample of documents for validation
     */
    async getRandomSamples(collection, sampleSize) {
        const totalCount = await this.getFirestoreCollectionSize(collection);
        const samples = [];
        const firestore = await this.getFirestore();
        for (let i = 0; i < Math.min(sampleSize, totalCount); i++) {
            // For mock implementation, just return empty samples
            if (totalCount === 0) {
                break;
            }
            const snapshot = await firestore
                .collection(collection)
                .get();
            if (!snapshot.empty) {
                const doc = snapshot.docs[0];
                samples.push({
                    id: doc.id,
                    partitionKey: this.getPartitionKey(doc.data(), collection)
                });
            }
        }
        return samples;
    }
    /**
     * Compare two documents and return differences
     */
    compareDocuments(firestoreDoc, cosmosDoc) {
        const differences = [];
        // Remove migration metadata from Cosmos doc
        const { _migrated, _partitionKey } = cosmosDoc, cosmosData = __rest(cosmosDoc, ["_migrated", "_partitionKey"]);
        // Compare core fields
        const firestoreKeys = new Set(Object.keys(firestoreDoc));
        const cosmosKeys = new Set(Object.keys(cosmosData));
        // Check for missing keys
        for (const key of firestoreKeys) {
            if (!cosmosKeys.has(key)) {
                differences.push(`Missing key in Cosmos: ${key}`);
            }
        }
        for (const key of cosmosKeys) {
            if (!firestoreKeys.has(key)) {
                differences.push(`Extra key in Cosmos: ${key}`);
            }
        }
        // Compare values
        for (const key of firestoreKeys) {
            if (cosmosKeys.has(key)) {
                if (!this.deepEqual(firestoreDoc[key], cosmosData[key])) {
                    differences.push(`Value mismatch for key: ${key}`);
                }
            }
        }
        return differences;
    }
    /**
     * Deep equality comparison
     */
    deepEqual(obj1, obj2) {
        if (obj1 === obj2)
            return true;
        if (obj1 == null || obj2 == null)
            return obj1 === obj2;
        if (typeof obj1 !== typeof obj2)
            return false;
        if (typeof obj1 === 'object') {
            // Handle dates
            if (obj1 instanceof Date && obj2 instanceof Date) {
                return obj1.getTime() === obj2.getTime();
            }
            if (Array.isArray(obj1) !== Array.isArray(obj2))
                return false;
            const keys1 = Object.keys(obj1);
            const keys2 = Object.keys(obj2);
            if (keys1.length !== keys2.length)
                return false;
            for (const key of keys1) {
                if (!keys2.includes(key) || !this.deepEqual(obj1[key], obj2[key])) {
                    return false;
                }
            }
            return true;
        }
        return false;
    }
    /**
     * Migration progress tracking
     */
    async initializeMigrationProgress(collection) {
        const migrationId = `migration_${collection}_${Date.now()}`;
        const progress = {
            id: migrationId,
            collection,
            status: 'running',
            progress: 0,
            createdAt: new Date(),
            updatedAt: new Date()
        };
        await azure_cosmos_service_1.azureCosmosService.createDocument('migrationProgress', Object.assign(Object.assign({}, progress), { _partitionKey: collection }));
        return migrationId;
    }
    async updateMigrationProgress(migrationId, updates) {
        try {
            await azure_cosmos_service_1.azureCosmosService.updateDocument('migrationProgress', migrationId, migrationId, updates);
        }
        catch (error) {
            console.warn('Failed to update migration progress:', error);
        }
    }
    async completeMigrationProgress(migrationId, result) {
        try {
            await azure_cosmos_service_1.azureCosmosService.updateDocument('migrationProgress', migrationId, migrationId, {
                status: 'completed',
                progress: 100,
                result,
                updatedAt: new Date()
            });
        }
        catch (error) {
            console.warn('Failed to complete migration progress:', error);
        }
    }
    async failMigrationProgress(migrationId, errorMessage) {
        try {
            await azure_cosmos_service_1.azureCosmosService.updateDocument('migrationProgress', migrationId, migrationId, {
                status: 'failed',
                error: errorMessage,
                updatedAt: new Date()
            });
        }
        catch (error) {
            console.warn('Failed to update failed migration progress:', error);
        }
    }
    /**
     * Rollback collection from Cosmos DB to Firestore
     */
    async rollbackCollection(collection) {
        console.log(`üîÑ Starting rollback for collection: ${collection}`);
        const cosmosContainer = this.collectionMappings[collection];
        if (!cosmosContainer) {
            throw new Error(`No mapping found for collection: ${collection}`);
        }
        // Get all documents from Cosmos DB
        const cosmosDocuments = await azure_cosmos_service_1.azureCosmosService.queryDocuments(cosmosContainer, 'SELECT * FROM c WHERE c._migrated.from = "firestore"', []);
        console.log(`Found ${cosmosDocuments.length} documents to rollback`);
        const firestore = await this.getFirestore();
        const batch = firestore.batch();
        let batchCount = 0;
        for (const doc of cosmosDocuments) {
            // Remove Cosmos DB specific fields
            const _a = doc, { _partitionKey, _migrated } = _a, firestoreData = __rest(_a, ["_partitionKey", "_migrated"]);
            const docRef = firestore.collection(collection).doc(doc.id);
            batch.set(docRef, firestoreData);
            batchCount++;
            // Commit batch every 500 operations (Firestore limit)
            if (batchCount >= 500) {
                await batch.commit();
                console.log(`Rollback progress: ${batchCount} documents`);
                batchCount = 0;
            }
        }
        // Commit remaining documents
        if (batchCount > 0) {
            await batch.commit();
        }
        console.log(`‚úÖ Rollback completed for collection: ${collection}`);
    }
    /**
     * Get migration status for all collections
     */
    async getMigrationStatus() {
        const status = {};
        for (const collection of Object.keys(this.collectionMappings)) {
            try {
                const validation = await this.validateMigration(collection);
                status[collection] = {
                    isValid: validation.isValid,
                    firestoreCount: validation.counts.firestore,
                    cosmosCount: validation.counts.cosmos,
                    lastValidated: new Date()
                };
            }
            catch (error) {
                status[collection] = {
                    error: error instanceof Error ? error.message : String(error),
                    lastChecked: new Date()
                };
            }
        }
        return status;
    }
}
exports.DatabaseMigrationService = DatabaseMigrationService;
// CLI implementation
const program = new commander_1.Command();
program
    .name('database-migration')
    .description('Migrate data from Firestore to Azure Cosmos DB')
    .version('1.0.0');
program
    .command('migrate')
    .description('Migrate a specific collection')
    .option('-c, --collection <name>', 'Collection to migrate')
    .option('-b, --batch-size <number>', 'Batch size for processing', '100')
    .option('--dry-run', 'Preview migration without executing')
    .option('--validate-only', 'Only run validation, no migration')
    .action(async (options) => {
    const migrationService = new DatabaseMigrationService();
    try {
        const result = await migrationService.migrateCollection(options.collection, {
            batchSize: parseInt(options.batchSize),
            dryRun: options.dryRun,
            validateOnly: options.validateOnly
        });
        console.log('\nüìä Migration Summary:');
        console.log(`Collection: ${result.collection}`);
        console.log(`Total: ${result.total}`);
        console.log(`Migrated: ${result.migrated}`);
        console.log(`Failed: ${result.failed}`);
        if (result.errors.length > 0) {
            console.log('\n‚ùå Errors:');
            result.errors.forEach(error => {
                console.log(`  ${error.docId}: ${error.error}`);
            });
        }
        if (result.duration) {
            console.log(`Duration: ${Math.round(result.duration / 1000)}s`);
        }
    }
    catch (error) {
        console.error('üí• Migration failed:', error);
        process.exit(1);
    }
});
program
    .command('validate')
    .description('Validate migration for all collections')
    .action(async () => {
    const migrationService = new DatabaseMigrationService();
    try {
        const status = await migrationService.getMigrationStatus();
        console.log('\nüìä Migration Status:');
        console.log(JSON.stringify(status, null, 2));
    }
    catch (error) {
        console.error('üí• Validation failed:', error);
        process.exit(1);
    }
});
program
    .command('rollback')
    .description('Rollback a collection to Firestore')
    .requiredOption('-c, --collection <name>', 'Collection to rollback')
    .action(async (options) => {
    const migrationService = new DatabaseMigrationService();
    try {
        await migrationService.rollbackCollection(options.collection);
        console.log(`‚úÖ Rollback completed for ${options.collection}`);
    }
    catch (error) {
        console.error('üí• Rollback failed:', error);
        process.exit(1);
    }
});
// Run CLI if called directly
if (require.main === module) {
    program.parse();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,