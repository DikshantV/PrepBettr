{"file":"/Users/dikshantvashistha/PrepBettr/scripts/database-migration.ts","mappings":"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","names":[],"sources":["/Users/dikshantvashistha/PrepBettr/scripts/database-migration.ts"],"sourcesContent":["\n\n/**\n * Database Migration Script: Firestore to Azure Cosmos DB\n * \n * This script performs a safe migration of data from Firestore to Azure Cosmos DB\n * with comprehensive validation, progress tracking, and rollback capabilities.\n * \n * Usage:\n *   npm run migrate:database [options]\n *   \n * Options:\n *   --collection <name>    Migrate specific collection\n *   --dry-run             Preview migration without executing\n *   --batch-size <num>    Batch size for processing (default: 100)\n *   --validate-only       Only run validation, no migration\n *   --rollback           Rollback specified collection to Firestore\n */\n\nimport { Command } from 'commander';\nimport { getAdminFirestore } from '@/lib/firebase/admin';\nimport { azureCosmosService } from '@/lib/services/azure-cosmos-service';\nimport { FirebaseService } from '@/services/firebase.service';\nimport * as crypto from 'crypto';\n\ninterface MigrationResult {\n  collection: string;\n  total: number;\n  migrated: number;\n  failed: number;\n  errors: Array<{ docId: string; error: string }>;\n  startTime: Date;\n  endTime?: Date;\n  duration?: number;\n}\n\ninterface ValidationResult {\n  collection: string;\n  isValid: boolean;\n  counts: { firestore: number; cosmos: number };\n  sampleValidation: {\n    allValid: boolean;\n    validCount: number;\n    totalCount: number;\n    differences: Array<{ docId: string; differences: string[] }>;\n  };\n}\n\ninterface MigrationProgress {\n  id: string;\n  collection: string;\n  status: 'pending' | 'running' | 'completed' | 'failed';\n  progress: number;\n  result?: MigrationResult;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nclass DatabaseMigrationService {\n  private firebaseService = new FirebaseService();\n  \n  private async getFirestore() {\n    return await getAdminFirestore();\n  }\n  \n  // Collection mapping: Firestore -> Cosmos DB\n  private collectionMappings = {\n    'interviews': 'interviews',\n    'feedback': 'feedback', \n    'resumes': 'resumes',\n    'usage': 'usage',\n    'autoApplySettings': 'autoApplySettings',\n    'applications': 'applications',\n    'jobListings': 'jobListings',\n    'automationLogs': 'automationLogs',\n    'subscription_events': 'subscriptionEvents'\n  };\n\n  /**\n   * Main migration orchestrator\n   */\n  async migrateCollection(\n    firestoreCollection: string,\n    options: {\n      batchSize?: number;\n      dryRun?: boolean;\n      validateOnly?: boolean;\n    } = {}\n  ): Promise<MigrationResult> {\n    const { batchSize = 100, dryRun = false, validateOnly = false } = options;\n    const cosmosContainer = this.collectionMappings[firestoreCollection as keyof typeof this.collectionMappings];\n    \n    if (!cosmosContainer) {\n      throw new Error(`No mapping found for collection: ${firestoreCollection}`);\n    }\n\n    console.log(`🚀 Starting migration: ${firestoreCollection} -> ${cosmosContainer}`);\n    \n    if (validateOnly) {\n      const validation = await this.validateMigration(firestoreCollection);\n      console.log('Validation Result:', JSON.stringify(validation, null, 2));\n      return {\n        collection: firestoreCollection,\n        total: 0,\n        migrated: 0,\n        failed: 0,\n        errors: [],\n        startTime: new Date()\n      };\n    }\n\n    // Initialize migration tracking\n    const migrationId = await this.initializeMigrationProgress(firestoreCollection);\n    \n    const result: MigrationResult = {\n      collection: firestoreCollection,\n      total: 0,\n      migrated: 0,\n      failed: 0,\n      errors: [],\n      startTime: new Date()\n    };\n\n    try {\n      // Initialize Cosmos DB service\n      await azureCosmosService.initialize();\n      \n      // Get total document count for progress tracking\n      const totalCount = await this.getFirestoreCollectionSize(firestoreCollection);\n      result.total = totalCount;\n      \n      console.log(`📊 Total documents to migrate: ${totalCount}`);\n\n      let processedCount = 0;\n      let lastDoc: any = null;\n\n      // Process in batches\n      do {\n        const batch = await this.getFirestoreBatch(firestoreCollection, batchSize, lastDoc);\n        \n        if (batch.length === 0) break;\n\n        for (const doc of batch) {\n          try {\n            if (!dryRun) {\n              const transformedDoc = await this.transformDocumentForCosmos(doc, firestoreCollection);\n              await azureCosmosService.createDocument(cosmosContainer, transformedDoc);\n            }\n            \n            result.migrated++;\n            processedCount++;\n            \n            // Progress update every 50 documents\n            if (processedCount % 50 === 0) {\n              await this.updateMigrationProgress(migrationId, {\n                progress: (processedCount / totalCount) * 100,\n                updatedAt: new Date()\n              });\n              \n              console.log(`📈 Progress: ${processedCount}/${totalCount} (${Math.round((processedCount/totalCount)*100)}%)`);\n            }\n            \n          } catch (error) {\n            result.failed++;\n            result.errors.push({\n              docId: doc.id,\n              error: error instanceof Error ? error.message : String(error)\n            });\n            \n            console.error(`❌ Failed to migrate document ${doc.id}:`, error);\n          }\n        }\n\n        lastDoc = batch[batch.length - 1];\n        \n      } while (lastDoc && !dryRun);\n\n      result.endTime = new Date();\n      result.duration = result.endTime.getTime() - result.startTime.getTime();\n\n      // Final progress update\n      await this.completeMigrationProgress(migrationId, result);\n      \n      // Validation after migration\n      if (!dryRun && result.failed === 0) {\n        console.log('🔍 Running post-migration validation...');\n        const validation = await this.validateMigration(firestoreCollection);\n        \n        if (!validation.isValid) {\n          console.warn('⚠️ Post-migration validation failed:', validation);\n        } else {\n          console.log('✅ Post-migration validation passed');\n        }\n      }\n\n      console.log(`🎉 Migration completed: ${result.migrated} migrated, ${result.failed} failed`);\n      \n      if (dryRun) {\n        console.log('🧪 DRY RUN: No data was actually migrated');\n      }\n\n      return result;\n      \n    } catch (error) {\n      console.error('💥 Migration failed:', error);\n      await this.failMigrationProgress(migrationId, error instanceof Error ? error.message : String(error));\n      throw error;\n    }\n  }\n\n  /**\n   * Transform Firestore document for Cosmos DB\n   */\n  private async transformDocumentForCosmos(doc: any, collection: string): Promise<any> {\n    const data = doc.data();\n    const transformed = {\n      id: doc.id,\n      ...data,\n      _partitionKey: this.getPartitionKey(data, collection),\n      // Add migration metadata\n      _migrated: {\n        from: 'firestore',\n        timestamp: new Date(),\n        originalId: doc.id,\n        checksum: this.calculateChecksum(data)\n      }\n    };\n\n    // Collection-specific transformations\n    switch (collection) {\n      case 'interviews':\n        return this.transformInterview(transformed);\n      case 'feedback':\n        return this.transformFeedback(transformed);\n      case 'resumes':\n        return this.transformResume(transformed);\n      case 'usage':\n        return this.transformUsage(transformed);\n      default:\n        return transformed;\n    }\n  }\n\n  /**\n   * Collection-specific transformation methods\n   */\n  private transformInterview(doc: any): any {\n    return {\n      ...doc,\n      // Ensure required fields\n      status: doc.status || (doc.finalized ? 'completed' : 'active'),\n      metadata: {\n        ...doc.metadata,\n        migratedFrom: 'firestore'\n      }\n    };\n  }\n\n  private transformFeedback(doc: any): any {\n    return {\n      ...doc,\n      // Normalize feedback structure\n      overallScore: doc.overallScore || 0,\n      strengths: Array.isArray(doc.strengths) ? doc.strengths : [],\n      improvements: Array.isArray(doc.improvements) ? doc.improvements : []\n    };\n  }\n\n  private transformResume(doc: any): any {\n    return {\n      ...doc,\n      // Ensure metadata structure\n      metadata: {\n        fileSize: doc.metadata?.fileSize || 0,\n        uploadDate: doc.metadata?.uploadDate || doc.createdAt,\n        lastModified: doc.metadata?.lastModified || doc.updatedAt,\n        mimeType: doc.metadata?.mimeType || 'application/pdf',\n        storageProvider: doc.metadata?.storageProvider || 'firebase',\n        ...doc.metadata\n      },\n      // Ensure required fields\n      extractedData: doc.extractedData || {\n        skills: [],\n        experience: [],\n        education: []\n      },\n      interviewQuestions: doc.interviewQuestions || []\n    };\n  }\n\n  private transformUsage(doc: any): any {\n    return {\n      ...doc,\n      // Normalize usage structure\n      interviews: {\n        count: doc.interviews?.count || 0,\n        limit: doc.interviews?.limit || 3,\n        lastReset: doc.interviews?.lastReset\n      },\n      resumes: {\n        count: doc.resumes?.count || 0,\n        limit: doc.resumes?.limit || 2,\n        lastReset: doc.resumes?.lastReset\n      }\n    };\n  }\n\n  /**\n   * Get appropriate partition key for collection\n   */\n  private getPartitionKey(data: any, collection: string): string {\n    switch (collection) {\n      case 'jobListings':\n      case 'subscription_events':\n        return data.id || 'default';\n      default:\n        return data.userId || data.uid || 'default';\n    }\n  }\n\n  /**\n   * Calculate document checksum for validation\n   */\n  private calculateChecksum(data: any): string {\n    const normalized = JSON.stringify(data, Object.keys(data).sort());\n    return crypto.createHash('sha256').update(normalized).digest('hex');\n  }\n\n  /**\n   * Get Firestore collection size\n   */\n  private async getFirestoreCollectionSize(collection: string): Promise<number> {\n    const firestore = await this.getFirestore();\n    const snapshot = await firestore.collection(collection).get();\n    return snapshot.docs.length;\n  }\n\n  /**\n   * Get batch of documents from Firestore\n   */\n  private async getFirestoreBatch(\n    collection: string,\n    batchSize: number,\n    lastDoc: any = null\n  ): Promise<any[]> {\n    const firestore = await this.getFirestore();\n    \n    // For the mock implementation, just return empty array\n    // In a real implementation, this would do proper pagination\n    let query: any = firestore.collection(collection);\n    \n    // Check if we have the orderBy method available (real Firestore vs mock)\n    if (typeof query.orderBy === 'function') {\n      query = query.orderBy('__name__').limit(batchSize);\n      \n      if (lastDoc) {\n        query = query.startAfter(lastDoc);\n      }\n    } else {\n      // Mock implementation - use get directly\n      query = firestore.collection(collection);\n    }\n\n    const snapshot = await query.get();\n    return snapshot.docs;\n  }\n\n  /**\n   * Validate migration by comparing document counts and sample data\n   */\n  async validateMigration(collection: string): Promise<ValidationResult> {\n    console.log(`🔍 Validating migration for collection: ${collection}`);\n    \n    const cosmosContainer = this.collectionMappings[collection as keyof typeof this.collectionMappings];\n    if (!cosmosContainer) {\n      throw new Error(`No mapping found for collection: ${collection}`);\n    }\n\n    // Get document counts\n    const [firestoreCount, cosmosCount] = await Promise.all([\n      this.getFirestoreCollectionSize(collection),\n      this.getCosmosCollectionSize(cosmosContainer)\n    ]);\n\n    console.log(`📊 Document counts - Firestore: ${firestoreCount}, Cosmos: ${cosmosCount}`);\n\n    // Sample validation\n    const sampleValidation = await this.validateSampleDocuments(collection, cosmosContainer);\n\n    const isValid = firestoreCount === cosmosCount && sampleValidation.allValid;\n\n    return {\n      collection,\n      isValid,\n      counts: { firestore: firestoreCount, cosmos: cosmosCount },\n      sampleValidation\n    };\n  }\n\n  /**\n   * Get Cosmos DB collection size\n   */\n  private async getCosmosCollectionSize(container: string): Promise<number> {\n    await azureCosmosService.initialize();\n    const results = await azureCosmosService.queryDocuments(\n      container,\n      'SELECT VALUE COUNT(1) FROM c',\n      []\n    );\n    return (typeof results[0] === 'number') ? results[0] : 0;\n  }\n\n  /**\n   * Validate sample documents between Firestore and Cosmos DB\n   */\n  private async validateSampleDocuments(\n    firestoreCollection: string,\n    cosmosContainer: string,\n    sampleSize: number = 10\n  ): Promise<any> {\n    const samples = await this.getRandomSamples(firestoreCollection, sampleSize);\n    const results = [];\n\n    for (const sample of samples) {\n      try {\n        const firestore = await this.getFirestore();\n        const firestoreDoc = await firestore.collection(firestoreCollection).doc(sample.id).get();\n        const cosmosDoc = await azureCosmosService.getDocument(\n          cosmosContainer, \n          sample.id, \n          sample.partitionKey\n        );\n\n        if (!firestoreDoc.exists) {\n          results.push({\n            docId: sample.id,\n            isValid: false,\n            differences: ['Firestore document not found']\n          });\n          continue;\n        }\n\n        if (!cosmosDoc) {\n          results.push({\n            docId: sample.id,\n            isValid: false,\n            differences: ['Cosmos document not found']\n          });\n          continue;\n        }\n\n        const differences = this.compareDocuments(firestoreDoc.data(), cosmosDoc);\n        results.push({\n          docId: sample.id,\n          isValid: differences.length === 0,\n          differences\n        });\n\n      } catch (error) {\n        results.push({\n          docId: sample.id,\n          isValid: false,\n          differences: [`Validation error: ${error instanceof Error ? error.message : 'Unknown error'}`]\n        });\n      }\n    }\n\n    return {\n      allValid: results.every(r => r.isValid),\n      validCount: results.filter(r => r.isValid).length,\n      totalCount: results.length,\n      differences: results.filter(r => !r.isValid)\n    };\n  }\n\n  /**\n   * Get random sample of documents for validation\n   */\n  private async getRandomSamples(collection: string, sampleSize: number): Promise<any[]> {\n    const totalCount = await this.getFirestoreCollectionSize(collection);\n    const samples = [];\n    const firestore = await this.getFirestore();\n    \n    for (let i = 0; i < Math.min(sampleSize, totalCount); i++) {\n      // For mock implementation, just return empty samples\n      if (totalCount === 0) {\n        break;\n      }\n      \n      const snapshot = await firestore\n        .collection(collection)\n        .get();\n      \n      if (!snapshot.empty) {\n        const doc = snapshot.docs[0] as any;\n        samples.push({\n          id: doc.id,\n          partitionKey: this.getPartitionKey(doc.data(), collection)\n        });\n      }\n    }\n\n    return samples;\n  }\n\n  /**\n   * Compare two documents and return differences\n   */\n  private compareDocuments(firestoreDoc: any, cosmosDoc: any): string[] {\n    const differences = [];\n    \n    // Remove migration metadata from Cosmos doc\n    const { _migrated, _partitionKey, ...cosmosData } = cosmosDoc;\n\n    // Compare core fields\n    const firestoreKeys = new Set(Object.keys(firestoreDoc));\n    const cosmosKeys = new Set(Object.keys(cosmosData));\n\n    // Check for missing keys\n    for (const key of firestoreKeys) {\n      if (!cosmosKeys.has(key)) {\n        differences.push(`Missing key in Cosmos: ${key}`);\n      }\n    }\n\n    for (const key of cosmosKeys) {\n      if (!firestoreKeys.has(key)) {\n        differences.push(`Extra key in Cosmos: ${key}`);\n      }\n    }\n\n    // Compare values\n    for (const key of firestoreKeys) {\n      if (cosmosKeys.has(key)) {\n        if (!this.deepEqual(firestoreDoc[key], cosmosData[key])) {\n          differences.push(`Value mismatch for key: ${key}`);\n        }\n      }\n    }\n\n    return differences;\n  }\n\n  /**\n   * Deep equality comparison\n   */\n  private deepEqual(obj1: any, obj2: any): boolean {\n    if (obj1 === obj2) return true;\n    \n    if (obj1 == null || obj2 == null) return obj1 === obj2;\n    \n    if (typeof obj1 !== typeof obj2) return false;\n    \n    if (typeof obj1 === 'object') {\n      // Handle dates\n      if (obj1 instanceof Date && obj2 instanceof Date) {\n        return obj1.getTime() === obj2.getTime();\n      }\n      \n      if (Array.isArray(obj1) !== Array.isArray(obj2)) return false;\n      \n      const keys1 = Object.keys(obj1);\n      const keys2 = Object.keys(obj2);\n      \n      if (keys1.length !== keys2.length) return false;\n      \n      for (const key of keys1) {\n        if (!keys2.includes(key) || !this.deepEqual(obj1[key], obj2[key])) {\n          return false;\n        }\n      }\n      \n      return true;\n    }\n    \n    return false;\n  }\n\n  /**\n   * Migration progress tracking\n   */\n  private async initializeMigrationProgress(collection: string): Promise<string> {\n    const migrationId = `migration_${collection}_${Date.now()}`;\n    \n    const progress: MigrationProgress = {\n      id: migrationId,\n      collection,\n      status: 'running',\n      progress: 0,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    await azureCosmosService.createDocument('migrationProgress', {\n      ...progress,\n      _partitionKey: collection\n    });\n\n    return migrationId;\n  }\n\n  private async updateMigrationProgress(migrationId: string, updates: Partial<MigrationProgress>): Promise<void> {\n    try {\n      await azureCosmosService.updateDocument('migrationProgress', migrationId, migrationId, updates);\n    } catch (error) {\n      console.warn('Failed to update migration progress:', error);\n    }\n  }\n\n  private async completeMigrationProgress(migrationId: string, result: MigrationResult): Promise<void> {\n    try {\n      await azureCosmosService.updateDocument('migrationProgress', migrationId, migrationId, {\n        status: 'completed',\n        progress: 100,\n        result,\n        updatedAt: new Date()\n      });\n    } catch (error) {\n      console.warn('Failed to complete migration progress:', error);\n    }\n  }\n\n  private async failMigrationProgress(migrationId: string, errorMessage: string): Promise<void> {\n    try {\n      await azureCosmosService.updateDocument('migrationProgress', migrationId, migrationId, {\n        status: 'failed',\n        error: errorMessage,\n        updatedAt: new Date()\n      });\n    } catch (error) {\n      console.warn('Failed to update failed migration progress:', error);\n    }\n  }\n\n  /**\n   * Rollback collection from Cosmos DB to Firestore\n   */\n  async rollbackCollection(collection: string): Promise<void> {\n    console.log(`🔄 Starting rollback for collection: ${collection}`);\n    \n    const cosmosContainer = this.collectionMappings[collection as keyof typeof this.collectionMappings];\n    if (!cosmosContainer) {\n      throw new Error(`No mapping found for collection: ${collection}`);\n    }\n\n    // Get all documents from Cosmos DB\n    const cosmosDocuments = await azureCosmosService.queryDocuments(\n      cosmosContainer,\n      'SELECT * FROM c WHERE c._migrated.from = \"firestore\"',\n      []\n    );\n\n    console.log(`Found ${cosmosDocuments.length} documents to rollback`);\n\n    const firestore = await this.getFirestore();\n    const batch = firestore.batch();\n    let batchCount = 0;\n\n    for (const doc of cosmosDocuments) {\n      // Remove Cosmos DB specific fields\n      const { _partitionKey, _migrated, ...firestoreData } = doc as any;\n      \n      const docRef = firestore.collection(collection).doc((doc as any).id);\n      batch.set(docRef, firestoreData);\n      batchCount++;\n\n      // Commit batch every 500 operations (Firestore limit)\n      if (batchCount >= 500) {\n        await batch.commit();\n        console.log(`Rollback progress: ${batchCount} documents`);\n        batchCount = 0;\n      }\n    }\n\n    // Commit remaining documents\n    if (batchCount > 0) {\n      await batch.commit();\n    }\n\n    console.log(`✅ Rollback completed for collection: ${collection}`);\n  }\n\n  /**\n   * Get migration status for all collections\n   */\n  async getMigrationStatus(): Promise<Record<string, any>> {\n    const status: Record<string, any> = {};\n    \n    for (const collection of Object.keys(this.collectionMappings)) {\n      try {\n        const validation = await this.validateMigration(collection);\n        status[collection] = {\n          isValid: validation.isValid,\n          firestoreCount: validation.counts.firestore,\n          cosmosCount: validation.counts.cosmos,\n          lastValidated: new Date()\n        };\n      } catch (error) {\n        status[collection] = {\n          error: error instanceof Error ? error.message : String(error),\n          lastChecked: new Date()\n        };\n      }\n    }\n\n    return status;\n  }\n}\n\n// CLI implementation\nconst program = new Command();\n\nprogram\n  .name('database-migration')\n  .description('Migrate data from Firestore to Azure Cosmos DB')\n  .version('1.0.0');\n\nprogram\n  .command('migrate')\n  .description('Migrate a specific collection')\n  .option('-c, --collection <name>', 'Collection to migrate')\n  .option('-b, --batch-size <number>', 'Batch size for processing', '100')\n  .option('--dry-run', 'Preview migration without executing')\n  .option('--validate-only', 'Only run validation, no migration')\n  .action(async (options) => {\n    const migrationService = new DatabaseMigrationService();\n    \n    try {\n      const result = await migrationService.migrateCollection(options.collection, {\n        batchSize: parseInt(options.batchSize),\n        dryRun: options.dryRun,\n        validateOnly: options.validateOnly\n      });\n      \n      console.log('\\n📊 Migration Summary:');\n      console.log(`Collection: ${result.collection}`);\n      console.log(`Total: ${result.total}`);\n      console.log(`Migrated: ${result.migrated}`);\n      console.log(`Failed: ${result.failed}`);\n      \n      if (result.errors.length > 0) {\n        console.log('\\n❌ Errors:');\n        result.errors.forEach(error => {\n          console.log(`  ${error.docId}: ${error.error}`);\n        });\n      }\n      \n      if (result.duration) {\n        console.log(`Duration: ${Math.round(result.duration / 1000)}s`);\n      }\n      \n    } catch (error) {\n      console.error('💥 Migration failed:', error);\n      process.exit(1);\n    }\n  });\n\nprogram\n  .command('validate')\n  .description('Validate migration for all collections')\n  .action(async () => {\n    const migrationService = new DatabaseMigrationService();\n    \n    try {\n      const status = await migrationService.getMigrationStatus();\n      console.log('\\n📊 Migration Status:');\n      console.log(JSON.stringify(status, null, 2));\n    } catch (error) {\n      console.error('💥 Validation failed:', error);\n      process.exit(1);\n    }\n  });\n\nprogram\n  .command('rollback')\n  .description('Rollback a collection to Firestore')\n  .requiredOption('-c, --collection <name>', 'Collection to rollback')\n  .action(async (options) => {\n    const migrationService = new DatabaseMigrationService();\n    \n    try {\n      await migrationService.rollbackCollection(options.collection);\n      console.log(`✅ Rollback completed for ${options.collection}`);\n    } catch (error) {\n      console.error('💥 Rollback failed:', error);\n      process.exit(1);\n    }\n  });\n\n// Run CLI if called directly\nif (require.main === module) {\n  program.parse();\n}\n\nexport { DatabaseMigrationService };\n"],"version":3}