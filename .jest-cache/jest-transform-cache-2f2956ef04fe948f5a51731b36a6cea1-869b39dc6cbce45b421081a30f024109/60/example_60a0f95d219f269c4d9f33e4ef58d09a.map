{"version":3,"names":["cov_13qlmlmgby","actualCoverage","exports","exampleMicrophoneCapture","s","exampleManualFrameProcessing","micCapture_1","require","f","micCapture","MicCapture","initialize","console","log","sampleRate","frameSize","startCapture","frameCount","maxFrames","_d","_e","__asyncValues","read","_f","next","_a","done","_c","value","audioFrame","length","samples","Int16Array","buffer","rms","calculateRMS","toFixed","b","error","dispose","sum","i","Math","sqrt","processingLoop","setInterval","frame","readFrame","uint8Frame","Uint8Array","sample","setTimeout","clearInterval"],"sources":["/Users/dikshantvashistha/PrepBettr/lib/audio/example.ts"],"sourcesContent":["import { MicCapture } from './micCapture';\n\n/**\n * Example usage of the MicCapture class\n * This demonstrates how to capture microphone audio and process the frames\n */\nexport async function exampleMicrophoneCapture() {\n  const micCapture = new MicCapture();\n  \n  try {\n    // Initialize the microphone capture system\n    await micCapture.initialize();\n    console.log(`Initialized microphone capture:`);\n    console.log(`- Sample rate: ${micCapture.sampleRate} Hz`);\n    console.log(`- Frame size: ${micCapture.frameSize} samples (${micCapture.frameSize / micCapture.sampleRate * 1000}ms)`);\n    \n    // Start capturing audio\n    await micCapture.startCapture();\n    console.log('Started capturing audio...');\n    \n    let frameCount = 0;\n    const maxFrames = 50; // Capture 50 frames (5 seconds at 100ms per frame)\n    \n    // Read frames using the async iterator\n    for await (const audioFrame of micCapture.read()) {\n      frameCount++;\n      \n      console.log(`Frame ${frameCount}: ${audioFrame.length} bytes`);\n      \n      // Here you could process the audioFrame (Uint8Array)\n      // For example:\n      // - Send to speech recognition service\n      // - Store for playback\n      // - Analyze audio levels\n      // - Convert back to Int16Array for audio processing\n      \n      const samples = new Int16Array(audioFrame.buffer);\n      const rms = calculateRMS(samples);\n      console.log(`  RMS level: ${rms.toFixed(2)}`);\n      \n      if (frameCount >= maxFrames) {\n        break;\n      }\n    }\n    \n    console.log(`Captured ${frameCount} frames`);\n    \n  } catch (error) {\n    console.error('Error during microphone capture:', error);\n  } finally {\n    // Clean up resources\n    await micCapture.dispose();\n    console.log('Microphone capture disposed');\n  }\n}\n\n/**\n * Calculate RMS (Root Mean Square) level of audio samples\n * This gives a measure of the audio signal's power/volume\n */\nfunction calculateRMS(samples: Int16Array): number {\n  let sum = 0;\n  for (let i = 0; i < samples.length; i++) {\n    sum += samples[i] * samples[i];\n  }\n  return Math.sqrt(sum / samples.length);\n}\n\n// Example of how to use with manual frame processing\nexport async function exampleManualFrameProcessing() {\n  const micCapture = new MicCapture();\n  \n  try {\n    await micCapture.initialize();\n    await micCapture.startCapture();\n    \n    // Manual frame reading (alternative to async iterator)\n    const processingLoop = setInterval(() => {\n      const frame = micCapture.readFrame();\n      \n      if (frame) {\n        console.log(`Got frame with ${frame.length} samples`);\n        \n        // Convert to Uint8Array if needed for transmission\n        const uint8Frame = new Uint8Array(frame.length * 2);\n        for (let i = 0; i < frame.length; i++) {\n          const sample = frame[i];\n          uint8Frame[i * 2] = sample & 0xFF;\n          uint8Frame[i * 2 + 1] = (sample >> 8) & 0xFF;\n        }\n        \n        // Process uint8Frame...\n      }\n    }, 50); // Check for frames every 50ms\n    \n    // Stop after 5 seconds\n    setTimeout(() => {\n      clearInterval(processingLoop);\n      micCapture.dispose();\n    }, 5000);\n    \n  } catch (error) {\n    console.error('Error:', error);\n    await micCapture.dispose();\n  }\n}\n"],"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","ignoreList":[]}