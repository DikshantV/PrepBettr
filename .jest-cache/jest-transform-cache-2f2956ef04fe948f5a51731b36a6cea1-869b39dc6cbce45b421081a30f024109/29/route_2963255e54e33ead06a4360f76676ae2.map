{"version":3,"names":["cov_2o2molee","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","exports","POST","GET","HEAD","server_1","require","question_bank_service_1","errors_1","request","body","json","pattern","reason","authHeader","headers","get","isAuthorizedForCacheOps","NextResponse","error","status","questionBankService","invalidateCache","stats","getCacheStats","console","log","timestamp","Date","toISOString","remainingSize","size","success","message","logServerError","service","action","Error","process","env","NODE_ENV","adminKey","ADMIN_API_KEY"],"sources":["/Users/dikshantvashistha/PrepBettr/app/api/question-bank/invalidate/route.ts"],"sourcesContent":["/**\n * Question Bank Cache Invalidation API\n * \n * Provides manual cache invalidation for the question bank service.\n * Useful for development, testing, and operational maintenance.\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { questionBankService } from '@/lib/services/question-bank-service';\nimport { logServerError } from '@/lib/errors';\n\n// Supported HTTP methods\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { pattern, reason } = body;\n\n    // Validate admin access (basic implementation)\n    const authHeader = request.headers.get('authorization');\n    if (!isAuthorizedForCacheOps(authHeader)) {\n      return NextResponse.json(\n        { error: 'Unauthorized - admin access required' },\n        { status: 401 }\n      );\n    }\n\n    // Invalidate cache\n    questionBankService.invalidateCache(pattern);\n\n    // Get current cache stats\n    const stats = questionBankService.getCacheStats();\n\n    // Log the cache invalidation\n    console.log('üîÑ Question bank cache invalidated', {\n      pattern: pattern || 'all',\n      reason: reason || 'manual-request',\n      timestamp: new Date().toISOString(),\n      remainingSize: stats.size\n    });\n\n    return NextResponse.json({\n      success: true,\n      message: pattern \n        ? `Cache invalidated for pattern: ${pattern}`\n        : 'Entire question bank cache invalidated',\n      stats,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('‚ùå Error invalidating question bank cache:', error);\n    \n    logServerError(error as Error, {\n      service: 'question-bank-api',\n      action: 'invalidate-cache'\n    });\n\n    return NextResponse.json(\n      { \n        success: false,\n        error: error instanceof Error ? error.message : 'Cache invalidation failed'\n      },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Basic auth check for stats access\n    const authHeader = request.headers.get('authorization');\n    if (!isAuthorizedForCacheOps(authHeader)) {\n      return NextResponse.json(\n        { error: 'Unauthorized - admin access required' },\n        { status: 401 }\n      );\n    }\n\n    // Get cache statistics\n    const stats = questionBankService.getCacheStats();\n\n    return NextResponse.json({\n      success: true,\n      stats,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('‚ùå Error getting question bank cache stats:', error);\n    \n    logServerError(error as Error, {\n      service: 'question-bank-api',\n      action: 'get-cache-stats'\n    });\n\n    return NextResponse.json(\n      { \n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to get cache stats'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Basic authorization check for cache operations\n * In production, this should integrate with proper admin authentication\n */\nfunction isAuthorizedForCacheOps(authHeader: string | null): boolean {\n  // For development: allow cache invalidation without auth\n  if (process.env.NODE_ENV === 'development') {\n    return true;\n  }\n\n  // For production: check for admin key or proper auth token\n  if (!authHeader) {\n    return false;\n  }\n\n  // Check for admin API key\n  const adminKey = process.env.ADMIN_API_KEY;\n  if (adminKey && authHeader === `Bearer ${adminKey}`) {\n    return true;\n  }\n\n  // In a full implementation, you would:\n  // 1. Verify JWT tokens\n  // 2. Check user roles/permissions\n  // 3. Validate against your auth system\n  \n  return false;\n}\n\n// Health check for the invalidation endpoint\nexport async function HEAD() {\n  return new NextResponse(null, { status: 200 });\n}\n"],"mappings":";;AAAA;;;;;;AAAA;AAAA,SAAAA,aAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UA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","ignoreList":[]}