7e74fd0219c07f598585ce08d6b12dc9
"use strict";

/**
 * Question Bank Cache Invalidation API
 *
 * Provides manual cache invalidation for the question bank service.
 * Useful for development, testing, and operational maintenance.
 */
/* istanbul ignore next */
function cov_2o2molee() {
  var path = "/Users/dikshantvashistha/PrepBettr/app/api/question-bank/invalidate/route.ts";
  var hash = "29aa44ef53d5ea7d7c2fe83e5a6be813b21d15bf";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/app/api/question-bank/invalidate/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 62
        }
      },
      "1": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 20
        }
      },
      "2": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 10,
          column: 18
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 20
        }
      },
      "4": {
        start: {
          line: 12,
          column: 17
        },
        end: {
          line: 12,
          column: 39
        }
      },
      "5": {
        start: {
          line: 13,
          column: 32
        },
        end: {
          line: 13,
          column: 79
        }
      },
      "6": {
        start: {
          line: 14,
          column: 17
        },
        end: {
          line: 14,
          column: 40
        }
      },
      "7": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 55,
          column: 5
        }
      },
      "8": {
        start: {
          line: 18,
          column: 21
        },
        end: {
          line: 18,
          column: 41
        }
      },
      "9": {
        start: {
          line: 19,
          column: 36
        },
        end: {
          line: 19,
          column: 40
        }
      },
      "10": {
        start: {
          line: 21,
          column: 27
        },
        end: {
          line: 21,
          column: 63
        }
      },
      "11": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 24,
          column: 9
        }
      },
      "12": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 114
        }
      },
      "13": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 77
        }
      },
      "14": {
        start: {
          line: 28,
          column: 22
        },
        end: {
          line: 28,
          column: 81
        }
      },
      "15": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 35,
          column: 11
        }
      },
      "16": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 43,
          column: 11
        }
      },
      "17": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 74
        }
      },
      "18": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 50,
          column: 11
        }
      },
      "19": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 54,
          column: 28
        }
      },
      "20": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 82,
          column: 5
        }
      },
      "21": {
        start: {
          line: 60,
          column: 27
        },
        end: {
          line: 60,
          column: 63
        }
      },
      "22": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 63,
          column: 9
        }
      },
      "23": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 114
        }
      },
      "24": {
        start: {
          line: 65,
          column: 22
        },
        end: {
          line: 65,
          column: 81
        }
      },
      "25": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 70,
          column: 11
        }
      },
      "26": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 75
        }
      },
      "27": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 77,
          column: 11
        }
      },
      "28": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 81,
          column: 28
        }
      },
      "29": {
        start: {
          line: 90,
          column: 4
        },
        end: {
          line: 92,
          column: 5
        }
      },
      "30": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 20
        }
      },
      "31": {
        start: {
          line: 94,
          column: 4
        },
        end: {
          line: 96,
          column: 5
        }
      },
      "32": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 21
        }
      },
      "33": {
        start: {
          line: 98,
          column: 21
        },
        end: {
          line: 98,
          column: 46
        }
      },
      "34": {
        start: {
          line: 99,
          column: 4
        },
        end: {
          line: 101,
          column: 5
        }
      },
      "35": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 100,
          column: 20
        }
      },
      "36": {
        start: {
          line: 106,
          column: 4
        },
        end: {
          line: 106,
          column: 17
        }
      },
      "37": {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 110,
          column: 60
        }
      }
    },
    fnMap: {
      "0": {
        name: "POST",
        decl: {
          start: {
            line: 16,
            column: 15
          },
          end: {
            line: 16,
            column: 19
          }
        },
        loc: {
          start: {
            line: 16,
            column: 29
          },
          end: {
            line: 56,
            column: 1
          }
        },
        line: 16
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 57,
            column: 15
          },
          end: {
            line: 57,
            column: 18
          }
        },
        loc: {
          start: {
            line: 57,
            column: 28
          },
          end: {
            line: 83,
            column: 1
          }
        },
        line: 57
      },
      "2": {
        name: "isAuthorizedForCacheOps",
        decl: {
          start: {
            line: 88,
            column: 9
          },
          end: {
            line: 88,
            column: 32
          }
        },
        loc: {
          start: {
            line: 88,
            column: 45
          },
          end: {
            line: 107,
            column: 1
          }
        },
        line: 88
      },
      "3": {
        name: "HEAD",
        decl: {
          start: {
            line: 109,
            column: 15
          },
          end: {
            line: 109,
            column: 19
          }
        },
        loc: {
          start: {
            line: 109,
            column: 22
          },
          end: {
            line: 111,
            column: 1
          }
        },
        line: 109
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "1": {
        loc: {
          start: {
            line: 31,
            column: 21
          },
          end: {
            line: 31,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 21
          },
          end: {
            line: 31,
            column: 28
          }
        }, {
          start: {
            line: 31,
            column: 32
          },
          end: {
            line: 31,
            column: 37
          }
        }],
        line: 31
      },
      "2": {
        loc: {
          start: {
            line: 32,
            column: 20
          },
          end: {
            line: 32,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 32,
            column: 20
          },
          end: {
            line: 32,
            column: 26
          }
        }, {
          start: {
            line: 32,
            column: 30
          },
          end: {
            line: 32,
            column: 46
          }
        }],
        line: 32
      },
      "3": {
        loc: {
          start: {
            line: 38,
            column: 21
          },
          end: {
            line: 40,
            column: 58
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 39,
            column: 18
          },
          end: {
            line: 39,
            column: 61
          }
        }, {
          start: {
            line: 40,
            column: 18
          },
          end: {
            line: 40,
            column: 58
          }
        }],
        line: 38
      },
      "4": {
        loc: {
          start: {
            line: 53,
            column: 19
          },
          end: {
            line: 53,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 53,
            column: 44
          },
          end: {
            line: 53,
            column: 57
          }
        }, {
          start: {
            line: 53,
            column: 60
          },
          end: {
            line: 53,
            column: 87
          }
        }],
        line: 53
      },
      "5": {
        loc: {
          start: {
            line: 61,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 61,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 61
      },
      "6": {
        loc: {
          start: {
            line: 80,
            column: 19
          },
          end: {
            line: 80,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 80,
            column: 44
          },
          end: {
            line: 80,
            column: 57
          }
        }, {
          start: {
            line: 80,
            column: 60
          },
          end: {
            line: 80,
            column: 87
          }
        }],
        line: 80
      },
      "7": {
        loc: {
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 92,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 92,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "8": {
        loc: {
          start: {
            line: 94,
            column: 4
          },
          end: {
            line: 96,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 4
          },
          end: {
            line: 96,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "9": {
        loc: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "10": {
        loc: {
          start: {
            line: 99,
            column: 8
          },
          end: {
            line: 99,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 99,
            column: 8
          },
          end: {
            line: 99,
            column: 16
          }
        }, {
          start: {
            line: 99,
            column: 20
          },
          end: {
            line: 99,
            column: 55
          }
        }],
        line: 99
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/app/api/question-bank/invalidate/route.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/app/api/question-bank/invalidate/route.ts"],
      sourcesContent: ["/**\n * Question Bank Cache Invalidation API\n * \n * Provides manual cache invalidation for the question bank service.\n * Useful for development, testing, and operational maintenance.\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { questionBankService } from '@/lib/services/question-bank-service';\nimport { logServerError } from '@/lib/errors';\n\n// Supported HTTP methods\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { pattern, reason } = body;\n\n    // Validate admin access (basic implementation)\n    const authHeader = request.headers.get('authorization');\n    if (!isAuthorizedForCacheOps(authHeader)) {\n      return NextResponse.json(\n        { error: 'Unauthorized - admin access required' },\n        { status: 401 }\n      );\n    }\n\n    // Invalidate cache\n    questionBankService.invalidateCache(pattern);\n\n    // Get current cache stats\n    const stats = questionBankService.getCacheStats();\n\n    // Log the cache invalidation\n    console.log('\uD83D\uDD04 Question bank cache invalidated', {\n      pattern: pattern || 'all',\n      reason: reason || 'manual-request',\n      timestamp: new Date().toISOString(),\n      remainingSize: stats.size\n    });\n\n    return NextResponse.json({\n      success: true,\n      message: pattern \n        ? `Cache invalidated for pattern: ${pattern}`\n        : 'Entire question bank cache invalidated',\n      stats,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('\u274C Error invalidating question bank cache:', error);\n    \n    logServerError(error as Error, {\n      service: 'question-bank-api',\n      action: 'invalidate-cache'\n    });\n\n    return NextResponse.json(\n      { \n        success: false,\n        error: error instanceof Error ? error.message : 'Cache invalidation failed'\n      },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Basic auth check for stats access\n    const authHeader = request.headers.get('authorization');\n    if (!isAuthorizedForCacheOps(authHeader)) {\n      return NextResponse.json(\n        { error: 'Unauthorized - admin access required' },\n        { status: 401 }\n      );\n    }\n\n    // Get cache statistics\n    const stats = questionBankService.getCacheStats();\n\n    return NextResponse.json({\n      success: true,\n      stats,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('\u274C Error getting question bank cache stats:', error);\n    \n    logServerError(error as Error, {\n      service: 'question-bank-api',\n      action: 'get-cache-stats'\n    });\n\n    return NextResponse.json(\n      { \n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to get cache stats'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Basic authorization check for cache operations\n * In production, this should integrate with proper admin authentication\n */\nfunction isAuthorizedForCacheOps(authHeader: string | null): boolean {\n  // For development: allow cache invalidation without auth\n  if (process.env.NODE_ENV === 'development') {\n    return true;\n  }\n\n  // For production: check for admin key or proper auth token\n  if (!authHeader) {\n    return false;\n  }\n\n  // Check for admin API key\n  const adminKey = process.env.ADMIN_API_KEY;\n  if (adminKey && authHeader === `Bearer ${adminKey}`) {\n    return true;\n  }\n\n  // In a full implementation, you would:\n  // 1. Verify JWT tokens\n  // 2. Check user roles/permissions\n  // 3. Validate against your auth system\n  \n  return false;\n}\n\n// Health check for the invalidation endpoint\nexport async function HEAD() {\n  return new NextResponse(null, { status: 200 });\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "29aa44ef53d5ea7d7c2fe83e5a6be813b21d15bf"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2o2molee = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2o2molee();
cov_2o2molee().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2o2molee().s[1]++;
exports.POST = POST;
/* istanbul ignore next */
cov_2o2molee().s[2]++;
exports.GET = GET;
/* istanbul ignore next */
cov_2o2molee().s[3]++;
exports.HEAD = HEAD;
const server_1 =
/* istanbul ignore next */
(cov_2o2molee().s[4]++, require("next/server"));
const question_bank_service_1 =
/* istanbul ignore next */
(cov_2o2molee().s[5]++, require("@/lib/services/question-bank-service"));
const errors_1 =
/* istanbul ignore next */
(cov_2o2molee().s[6]++, require("@/lib/errors"));
// Supported HTTP methods
async function POST(request) {
  /* istanbul ignore next */
  cov_2o2molee().f[0]++;
  cov_2o2molee().s[7]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_2o2molee().s[8]++, await request.json());
    const {
      pattern,
      reason
    } =
    /* istanbul ignore next */
    (cov_2o2molee().s[9]++, body);
    // Validate admin access (basic implementation)
    const authHeader =
    /* istanbul ignore next */
    (cov_2o2molee().s[10]++, request.headers.get('authorization'));
    /* istanbul ignore next */
    cov_2o2molee().s[11]++;
    if (!isAuthorizedForCacheOps(authHeader)) {
      /* istanbul ignore next */
      cov_2o2molee().b[0][0]++;
      cov_2o2molee().s[12]++;
      return server_1.NextResponse.json({
        error: 'Unauthorized - admin access required'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_2o2molee().b[0][1]++;
    }
    // Invalidate cache
    cov_2o2molee().s[13]++;
    question_bank_service_1.questionBankService.invalidateCache(pattern);
    // Get current cache stats
    const stats =
    /* istanbul ignore next */
    (cov_2o2molee().s[14]++, question_bank_service_1.questionBankService.getCacheStats());
    // Log the cache invalidation
    /* istanbul ignore next */
    cov_2o2molee().s[15]++;
    console.log('🔄 Question bank cache invalidated', {
      pattern:
      /* istanbul ignore next */
      (cov_2o2molee().b[1][0]++, pattern) ||
      /* istanbul ignore next */
      (cov_2o2molee().b[1][1]++, 'all'),
      reason:
      /* istanbul ignore next */
      (cov_2o2molee().b[2][0]++, reason) ||
      /* istanbul ignore next */
      (cov_2o2molee().b[2][1]++, 'manual-request'),
      timestamp: new Date().toISOString(),
      remainingSize: stats.size
    });
    /* istanbul ignore next */
    cov_2o2molee().s[16]++;
    return server_1.NextResponse.json({
      success: true,
      message: pattern ?
      /* istanbul ignore next */
      (cov_2o2molee().b[3][0]++, `Cache invalidated for pattern: ${pattern}`) :
      /* istanbul ignore next */
      (cov_2o2molee().b[3][1]++, 'Entire question bank cache invalidated'),
      stats,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2o2molee().s[17]++;
    console.error('❌ Error invalidating question bank cache:', error);
    /* istanbul ignore next */
    cov_2o2molee().s[18]++;
    (0, errors_1.logServerError)(error, {
      service: 'question-bank-api',
      action: 'invalidate-cache'
    });
    /* istanbul ignore next */
    cov_2o2molee().s[19]++;
    return server_1.NextResponse.json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2o2molee().b[4][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2o2molee().b[4][1]++, 'Cache invalidation failed')
    }, {
      status: 500
    });
  }
}
async function GET(request) {
  /* istanbul ignore next */
  cov_2o2molee().f[1]++;
  cov_2o2molee().s[20]++;
  try {
    // Basic auth check for stats access
    const authHeader =
    /* istanbul ignore next */
    (cov_2o2molee().s[21]++, request.headers.get('authorization'));
    /* istanbul ignore next */
    cov_2o2molee().s[22]++;
    if (!isAuthorizedForCacheOps(authHeader)) {
      /* istanbul ignore next */
      cov_2o2molee().b[5][0]++;
      cov_2o2molee().s[23]++;
      return server_1.NextResponse.json({
        error: 'Unauthorized - admin access required'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_2o2molee().b[5][1]++;
    }
    // Get cache statistics
    const stats =
    /* istanbul ignore next */
    (cov_2o2molee().s[24]++, question_bank_service_1.questionBankService.getCacheStats());
    /* istanbul ignore next */
    cov_2o2molee().s[25]++;
    return server_1.NextResponse.json({
      success: true,
      stats,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2o2molee().s[26]++;
    console.error('❌ Error getting question bank cache stats:', error);
    /* istanbul ignore next */
    cov_2o2molee().s[27]++;
    (0, errors_1.logServerError)(error, {
      service: 'question-bank-api',
      action: 'get-cache-stats'
    });
    /* istanbul ignore next */
    cov_2o2molee().s[28]++;
    return server_1.NextResponse.json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2o2molee().b[6][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2o2molee().b[6][1]++, 'Failed to get cache stats')
    }, {
      status: 500
    });
  }
}
/**
 * Basic authorization check for cache operations
 * In production, this should integrate with proper admin authentication
 */
function isAuthorizedForCacheOps(authHeader) {
  /* istanbul ignore next */
  cov_2o2molee().f[2]++;
  cov_2o2molee().s[29]++;
  // For development: allow cache invalidation without auth
  if (process.env.NODE_ENV === 'development') {
    /* istanbul ignore next */
    cov_2o2molee().b[7][0]++;
    cov_2o2molee().s[30]++;
    return true;
  } else
  /* istanbul ignore next */
  {
    cov_2o2molee().b[7][1]++;
  }
  // For production: check for admin key or proper auth token
  cov_2o2molee().s[31]++;
  if (!authHeader) {
    /* istanbul ignore next */
    cov_2o2molee().b[8][0]++;
    cov_2o2molee().s[32]++;
    return false;
  } else
  /* istanbul ignore next */
  {
    cov_2o2molee().b[8][1]++;
  }
  // Check for admin API key
  const adminKey =
  /* istanbul ignore next */
  (cov_2o2molee().s[33]++, process.env.ADMIN_API_KEY);
  /* istanbul ignore next */
  cov_2o2molee().s[34]++;
  if (
  /* istanbul ignore next */
  (cov_2o2molee().b[10][0]++, adminKey) &&
  /* istanbul ignore next */
  (cov_2o2molee().b[10][1]++, authHeader === `Bearer ${adminKey}`)) {
    /* istanbul ignore next */
    cov_2o2molee().b[9][0]++;
    cov_2o2molee().s[35]++;
    return true;
  } else
  /* istanbul ignore next */
  {
    cov_2o2molee().b[9][1]++;
  }
  // In a full implementation, you would:
  // 1. Verify JWT tokens
  // 2. Check user roles/permissions
  // 3. Validate against your auth system
  cov_2o2molee().s[36]++;
  return false;
}
// Health check for the invalidation endpoint
async function HEAD() {
  /* istanbul ignore next */
  cov_2o2molee().f[3]++;
  cov_2o2molee().s[37]++;
  return new server_1.NextResponse(null, {
    status: 200
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,