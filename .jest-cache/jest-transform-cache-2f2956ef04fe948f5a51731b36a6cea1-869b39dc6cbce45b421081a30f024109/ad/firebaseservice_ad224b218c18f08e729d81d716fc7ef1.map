{"file":"/Users/dikshantvashistha/PrepBettr/services/firebase.service.ts","mappings":";AAAA;;;;;GAKG;;;AAEH,MAAa,eAAe;IAGnB,MAAM,CAAC,WAAW;QACvB,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC;YAC9B,eAAe,CAAC,QAAQ,GAAG,IAAI,eAAe,EAAE,CAAC;QACnD,CAAC;QACD,OAAO,eAAe,CAAC,QAAQ,CAAC;IAClC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,0BAA0B,CAAC,KAAa,EAAE,QAAgB;QAC9D,4DAA4D;QAC5D,OAAO;YACL,IAAI,EAAE;gBACJ,GAAG,EAAE,cAAc;gBACnB,KAAK;gBACL,WAAW,EAAE,WAAW;aACzB;SACF,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,8BAA8B,CAAC,KAAa,EAAE,QAAgB;QAClE,qBAAqB;QACrB,OAAO;YACL,IAAI,EAAE;gBACJ,GAAG,EAAE,kBAAkB;gBACvB,KAAK;gBACL,WAAW,EAAE,eAAe;aAC7B;SACF,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,OAAO;QACX,gBAAgB;QAChB,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE,CAAC;YAClC,YAAY,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;YACtC,cAAc,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;QAC1C,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,WAAW,CAAC,UAAkB,EAAE,EAAU;QAC9C,sBAAsB;QACtB,OAAO;YACL,EAAE;YACF,IAAI,EAAE;gBACJ,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB;SACF,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,UAAkB,EAAE,EAAU,EAAE,IAAS;QACzD,oBAAoB;QACpB,OAAO,EAAE,EAAE,EAAE,CAAC;IAChB,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,UAAkB,EAAE,EAAU,EAAE,IAAS;QAC5D,uBAAuB;QACvB,OAAO,EAAE,EAAE,EAAE,CAAC;IAChB,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,UAAkB,EAAE,EAAU;QACjD,uBAAuB;QACvB,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IAC3B,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,UAAkB,EAAE,aAAoB,EAAE;QAC7D,aAAa;QACb,OAAO;YACL,IAAI,EAAE,EAAE;SACT,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,UAAU,CAAC,IAAY,EAAE,IAAmB;QAChD,0DAA0D;QAC1D,OAAO;YACL,WAAW,EAAE,+BAA+B,IAAI,EAAE;YAClD,QAAQ,EAAE;gBACR,IAAI,EAAE,IAAI,YAAY,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM;gBACpD,WAAW,EAAE,IAAI,YAAY,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,0BAA0B;aAC3E;SACF,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,IAAY;QAC3B,qBAAqB;QACrB,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IAC3B,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,IAAY;QAC/B,sBAAsB;QACtB,OAAO,+BAA+B,IAAI,EAAE,CAAC;IAC/C,CAAC;CACF;AAtGD,0CAsGC;AAED,4BAA4B;AACf,QAAA,eAAe,GAAG,eAAe,CAAC,WAAW,EAAE,CAAC;AAC7D,kBAAe,uBAAe,CAAC","names":[],"sources":["/Users/dikshantvashistha/PrepBettr/services/firebase.service.ts"],"sourcesContent":["/**\n * Firebase Service Compatibility Layer\n * \n * Provides mock Firebase service for backward compatibility\n * Applications should migrate to Azure services\n */\n\nexport class FirebaseService {\n  private static instance: FirebaseService;\n\n  public static getInstance(): FirebaseService {\n    if (!FirebaseService.instance) {\n      FirebaseService.instance = new FirebaseService();\n    }\n    return FirebaseService.instance;\n  }\n\n  /**\n   * Mock authentication methods\n   */\n  async signInWithEmailAndPassword(email: string, password: string) {\n    // Mock sign in - in production this would call Azure AD B2C\n    return {\n      user: {\n        uid: 'mock-user-id',\n        email,\n        displayName: 'Mock User'\n      }\n    };\n  }\n\n  async createUserWithEmailAndPassword(email: string, password: string) {\n    // Mock user creation\n    return {\n      user: {\n        uid: 'mock-new-user-id',\n        email,\n        displayName: 'New Mock User'\n      }\n    };\n  }\n\n  async signOut() {\n    // Mock sign out\n    if (typeof window !== 'undefined') {\n      localStorage.removeItem('auth_token');\n      sessionStorage.removeItem('auth_token');\n    }\n  }\n\n  /**\n   * Mock Firestore operations\n   */\n  async getDocument(collection: string, id: string) {\n    // Mock document fetch\n    return {\n      id,\n      data: {\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }\n    };\n  }\n\n  async setDocument(collection: string, id: string, data: any) {\n    // Mock document set\n    return { id };\n  }\n\n  async updateDocument(collection: string, id: string, data: any) {\n    // Mock document update\n    return { id };\n  }\n\n  async deleteDocument(collection: string, id: string) {\n    // Mock document delete\n    return { success: true };\n  }\n\n  async queryDocuments(collection: string, conditions: any[] = []) {\n    // Mock query\n    return {\n      docs: []\n    };\n  }\n\n  /**\n   * Mock storage operations\n   */\n  async uploadFile(path: string, file: File | Buffer) {\n    // Mock file upload - would delegate to Azure Blob Storage\n    return {\n      downloadURL: `https://mockcdn.example.com/${path}`,\n      metadata: {\n        size: file instanceof File ? file.size : file.length,\n        contentType: file instanceof File ? file.type : 'application/octet-stream'\n      }\n    };\n  }\n\n  async deleteFile(path: string) {\n    // Mock file deletion\n    return { success: true };\n  }\n\n  async getDownloadURL(path: string) {\n    // Mock URL generation\n    return `https://mockcdn.example.com/${path}`;\n  }\n}\n\n// Export singleton instance\nexport const firebaseService = FirebaseService.getInstance();\nexport default firebaseService;\n"],"version":3}