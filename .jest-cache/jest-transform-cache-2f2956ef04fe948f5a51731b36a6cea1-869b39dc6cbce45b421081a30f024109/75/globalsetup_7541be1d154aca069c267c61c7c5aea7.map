{"file":"/Users/dikshantvashistha/PrepBettr/tests/setup/global-setup.ts","mappings":"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","names":[],"sources":["/Users/dikshantvashistha/PrepBettr/tests/setup/global-setup.ts"],"sourcesContent":["/**\n * Global Jest Setup for PrepBettr Testing Suite\n * \n * Sets up global test environment, mocks, and shared utilities\n * that are needed across all test files.\n */\n\n// import 'jest-extended';\n\n// Mock Next.js environment variables\nprocess.env.NODE_ENV = 'test';\nprocess.env.NEXT_PUBLIC_APP_URL = 'http://localhost:3000';\nprocess.env.NEXT_PUBLIC_ENVIRONMENT = 'test';\n\n// Mock Azure environment variables\nprocess.env.AZURE_OPENAI_KEY = 'test-azure-openai-key';\nprocess.env.AZURE_OPENAI_ENDPOINT = 'https://test-openai.openai.azure.com';\nprocess.env.AZURE_OPENAI_DEPLOYMENT = 'test-deployment';\nprocess.env.AZURE_SPEECH_KEY = 'test-speech-key';\nprocess.env.AZURE_SPEECH_REGION = 'eastus';\nprocess.env.AZURE_KEY_VAULT_URI = 'https://test-keyvault.vault.azure.net/';\n\n// Mock Firebase environment variables\nprocess.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID = 'test-project';\nprocess.env.NEXT_PUBLIC_FIREBASE_API_KEY = 'test-api-key';\nprocess.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN = 'test-project.firebaseapp.com';\nprocess.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET = 'test-project.appspot.com';\nprocess.env.FIREBASE_ADMIN_PRIVATE_KEY = 'test-private-key';\nprocess.env.FIREBASE_ADMIN_CLIENT_EMAIL = 'test@test-project.iam.gserviceaccount.com';\n\n// Mock Dodo Payments\nprocess.env.DODO_API_KEY = 'test-dodo-api-key';\n\n// Suppress console warnings in tests\nconst originalWarn = console.warn;\nconst originalError = console.error;\n\nbeforeAll(() => {\n  console.warn = jest.fn((message) => {\n    // Only suppress specific warnings we expect in tests\n    if (\n      typeof message === 'string' && (\n        message.includes('Warning: ReactDOM.render is deprecated') ||\n        message.includes('Warning: componentWillReceiveProps') ||\n        message.includes('gRPC') ||\n        message.includes('FIRESTORE_PREFER_REST')\n      )\n    ) {\n      return;\n    }\n    originalWarn(message);\n  });\n\n  console.error = jest.fn((message) => {\n    // Only suppress specific errors we expect in tests\n    if (\n      typeof message === 'string' && (\n        message.includes('Firebase Admin SDK') ||\n        message.includes('GRPC_VERBOSITY')\n      )\n    ) {\n      return;\n    }\n    originalError(message);\n  });\n});\n\nafterAll(() => {\n  console.warn = originalWarn;\n  console.error = originalError;\n});\n\n// Mock WebSocket for voice tests\nglobal.WebSocket = jest.fn().mockImplementation(() => ({\n  readyState: 1,\n  send: jest.fn(),\n  close: jest.fn(),\n  addEventListener: jest.fn(),\n  removeEventListener: jest.fn(),\n}));\n\n// Mock MediaDevices API for audio tests\nObject.defineProperty(global.navigator, 'mediaDevices', {\n  writable: true,\n  value: {\n    getUserMedia: jest.fn().mockResolvedValue({\n      getAudioTracks: () => [{\n        stop: jest.fn(),\n        enabled: true\n      }],\n      getTracks: () => [{\n        stop: jest.fn(),\n        enabled: true\n      }]\n    })\n  }\n});\n\n// Mock AudioContext\nglobal.AudioContext = jest.fn().mockImplementation(() => ({\n  createAnalyser: jest.fn(() => ({\n    connect: jest.fn(),\n    disconnect: jest.fn(),\n    fftSize: 256,\n    frequencyBinCount: 128,\n    getByteFrequencyData: jest.fn(),\n    getFloatFrequencyData: jest.fn(),\n  })),\n  createGain: jest.fn(() => ({\n    connect: jest.fn(),\n    disconnect: jest.fn(),\n    gain: { value: 1 }\n  })),\n  createMediaStreamSource: jest.fn(() => ({\n    connect: jest.fn(),\n    disconnect: jest.fn()\n  })),\n  destination: {},\n  close: jest.fn().mockResolvedValue(undefined),\n  state: 'running'\n}));\n\n// Mock performance API\nObject.defineProperty(global, 'performance', {\n  writable: true,\n  value: {\n    now: jest.fn(() => Date.now()),\n    mark: jest.fn(),\n    measure: jest.fn(),\n    getEntriesByName: jest.fn(() => []),\n    getEntriesByType: jest.fn(() => []),\n  }\n});\n\n// Setup global fetch mock\nglobal.fetch = jest.fn();\n\nexport {};\n"],"version":3}