2e212457d78df352cb1f4bac70deceb4
"use strict";

/* istanbul ignore next */
function cov_13qlmlmgby() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/audio/example.ts";
  var hash = "d4586a27178d9afe5b0790d8764ab5e54716df57";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/audio/example.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 20
        },
        end: {
          line: 8,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 91
        }
      },
      "2": {
        start: {
          line: 3,
          column: 31
        },
        end: {
          line: 3,
          column: 91
        }
      },
      "3": {
        start: {
          line: 4,
          column: 12
        },
        end: {
          line: 4,
          column: 35
        }
      },
      "4": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 5,
          column: 213
        }
      },
      "5": {
        start: {
          line: 5,
          column: 194
        },
        end: {
          line: 5,
          column: 206
        }
      },
      "6": {
        start: {
          line: 6,
          column: 23
        },
        end: {
          line: 6,
          column: 162
        }
      },
      "7": {
        start: {
          line: 6,
          column: 53
        },
        end: {
          line: 6,
          column: 159
        }
      },
      "8": {
        start: {
          line: 6,
          column: 101
        },
        end: {
          line: 6,
          column: 155
        }
      },
      "9": {
        start: {
          line: 7,
          column: 45
        },
        end: {
          line: 7,
          column: 126
        }
      },
      "10": {
        start: {
          line: 7,
          column: 83
        },
        end: {
          line: 7,
          column: 114
        }
      },
      "11": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 62
        }
      },
      "12": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 10,
          column: 60
        }
      },
      "13": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 68
        }
      },
      "14": {
        start: {
          line: 12,
          column: 21
        },
        end: {
          line: 12,
          column: 44
        }
      },
      "15": {
        start: {
          line: 19,
          column: 23
        },
        end: {
          line: 19,
          column: 52
        }
      },
      "16": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 69,
          column: 5
        }
      },
      "17": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "18": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 55
        }
      },
      "19": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 66
        }
      },
      "20": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 128
        }
      },
      "21": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 40
        }
      },
      "22": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 50
        }
      },
      "23": {
        start: {
          line: 29,
          column: 25
        },
        end: {
          line: 29,
          column: 26
        }
      },
      "24": {
        start: {
          line: 30,
          column: 26
        },
        end: {
          line: 30,
          column: 28
        }
      },
      "25": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "26": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 51,
          column: 13
        }
      },
      "27": {
        start: {
          line: 33,
          column: 26
        },
        end: {
          line: 33,
          column: 30
        }
      },
      "28": {
        start: {
          line: 33,
          column: 37
        },
        end: {
          line: 33,
          column: 69
        }
      },
      "29": {
        start: {
          line: 34,
          column: 16
        },
        end: {
          line: 34,
          column: 30
        }
      },
      "30": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 35,
          column: 27
        }
      },
      "31": {
        start: {
          line: 36,
          column: 35
        },
        end: {
          line: 36,
          column: 37
        }
      },
      "32": {
        start: {
          line: 37,
          column: 16
        },
        end: {
          line: 37,
          column: 29
        }
      },
      "33": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 38,
          column: 79
        }
      },
      "34": {
        start: {
          line: 45,
          column: 32
        },
        end: {
          line: 45,
          column: 65
        }
      },
      "35": {
        start: {
          line: 46,
          column: 28
        },
        end: {
          line: 46,
          column: 49
        }
      },
      "36": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 47,
          column: 62
        }
      },
      "37": {
        start: {
          line: 48,
          column: 16
        },
        end: {
          line: 50,
          column: 17
        }
      },
      "38": {
        start: {
          line: 49,
          column: 20
        },
        end: {
          line: 49,
          column: 26
        }
      },
      "39": {
        start: {
          line: 53,
          column: 24
        },
        end: {
          line: 53,
          column: 47
        }
      },
      "40": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 58,
          column: 49
        }
      },
      "41": {
        start: {
          line: 56,
          column: 16
        },
        end: {
          line: 56,
          column: 70
        }
      },
      "42": {
        start: {
          line: 56,
          column: 52
        },
        end: {
          line: 56,
          column: 70
        }
      },
      "43": {
        start: {
          line: 58,
          column: 22
        },
        end: {
          line: 58,
          column: 47
        }
      },
      "44": {
        start: {
          line: 58,
          column: 31
        },
        end: {
          line: 58,
          column: 47
        }
      },
      "45": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 53
        }
      },
      "46": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 65
        }
      },
      "47": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 35
        }
      },
      "48": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 51
        }
      },
      "49": {
        start: {
          line: 76,
          column: 14
        },
        end: {
          line: 76,
          column: 15
        }
      },
      "50": {
        start: {
          line: 77,
          column: 4
        },
        end: {
          line: 79,
          column: 5
        }
      },
      "51": {
        start: {
          line: 77,
          column: 17
        },
        end: {
          line: 77,
          column: 18
        }
      },
      "52": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 39
        }
      },
      "53": {
        start: {
          line: 80,
          column: 4
        },
        end: {
          line: 80,
          column: 43
        }
      },
      "54": {
        start: {
          line: 84,
          column: 23
        },
        end: {
          line: 84,
          column: 52
        }
      },
      "55": {
        start: {
          line: 85,
          column: 4
        },
        end: {
          line: 112,
          column: 5
        }
      },
      "56": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 38
        }
      },
      "57": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 40
        }
      },
      "58": {
        start: {
          line: 89,
          column: 31
        },
        end: {
          line: 102,
          column: 14
        }
      },
      "59": {
        start: {
          line: 90,
          column: 26
        },
        end: {
          line: 90,
          column: 48
        }
      },
      "60": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 101,
          column: 13
        }
      },
      "61": {
        start: {
          line: 92,
          column: 16
        },
        end: {
          line: 92,
          column: 70
        }
      },
      "62": {
        start: {
          line: 94,
          column: 35
        },
        end: {
          line: 94,
          column: 67
        }
      },
      "63": {
        start: {
          line: 95,
          column: 16
        },
        end: {
          line: 99,
          column: 17
        }
      },
      "64": {
        start: {
          line: 95,
          column: 29
        },
        end: {
          line: 95,
          column: 30
        }
      },
      "65": {
        start: {
          line: 96,
          column: 35
        },
        end: {
          line: 96,
          column: 43
        }
      },
      "66": {
        start: {
          line: 97,
          column: 20
        },
        end: {
          line: 97,
          column: 54
        }
      },
      "67": {
        start: {
          line: 98,
          column: 20
        },
        end: {
          line: 98,
          column: 65
        }
      },
      "68": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 107,
          column: 17
        }
      },
      "69": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 42
        }
      },
      "70": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 33
        }
      },
      "71": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 110,
          column: 39
        }
      },
      "72": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 35
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 52
          },
          end: {
            line: 2,
            column: 53
          }
        },
        loc: {
          start: {
            line: 2,
            column: 65
          },
          end: {
            line: 8,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 5,
            column: 180
          },
          end: {
            line: 5,
            column: 181
          }
        },
        loc: {
          start: {
            line: 5,
            column: 192
          },
          end: {
            line: 5,
            column: 208
          }
        },
        line: 5
      },
      "2": {
        name: "verb",
        decl: {
          start: {
            line: 6,
            column: 13
          },
          end: {
            line: 6,
            column: 17
          }
        },
        loc: {
          start: {
            line: 6,
            column: 21
          },
          end: {
            line: 6,
            column: 164
          }
        },
        line: 6
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 39
          }
        },
        loc: {
          start: {
            line: 6,
            column: 51
          },
          end: {
            line: 6,
            column: 161
          }
        },
        line: 6
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 6,
            column: 72
          },
          end: {
            line: 6,
            column: 73
          }
        },
        loc: {
          start: {
            line: 6,
            column: 99
          },
          end: {
            line: 6,
            column: 157
          }
        },
        line: 6
      },
      "5": {
        name: "settle",
        decl: {
          start: {
            line: 7,
            column: 13
          },
          end: {
            line: 7,
            column: 19
          }
        },
        loc: {
          start: {
            line: 7,
            column: 43
          },
          end: {
            line: 7,
            column: 128
          }
        },
        line: 7
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 7,
            column: 69
          },
          end: {
            line: 7,
            column: 70
          }
        },
        loc: {
          start: {
            line: 7,
            column: 81
          },
          end: {
            line: 7,
            column: 116
          }
        },
        line: 7
      },
      "7": {
        name: "exampleMicrophoneCapture",
        decl: {
          start: {
            line: 17,
            column: 15
          },
          end: {
            line: 17,
            column: 39
          }
        },
        loc: {
          start: {
            line: 17,
            column: 42
          },
          end: {
            line: 70,
            column: 1
          }
        },
        line: 17
      },
      "8": {
        name: "calculateRMS",
        decl: {
          start: {
            line: 75,
            column: 9
          },
          end: {
            line: 75,
            column: 21
          }
        },
        loc: {
          start: {
            line: 75,
            column: 31
          },
          end: {
            line: 81,
            column: 1
          }
        },
        line: 75
      },
      "9": {
        name: "exampleManualFrameProcessing",
        decl: {
          start: {
            line: 83,
            column: 15
          },
          end: {
            line: 83,
            column: 43
          }
        },
        loc: {
          start: {
            line: 83,
            column: 46
          },
          end: {
            line: 113,
            column: 1
          }
        },
        line: 83
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 89,
            column: 43
          },
          end: {
            line: 89,
            column: 44
          }
        },
        loc: {
          start: {
            line: 89,
            column: 49
          },
          end: {
            line: 102,
            column: 9
          }
        },
        line: 89
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 104,
            column: 19
          },
          end: {
            line: 104,
            column: 20
          }
        },
        loc: {
          start: {
            line: 104,
            column: 25
          },
          end: {
            line: 107,
            column: 9
          }
        },
        line: 104
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 20
          },
          end: {
            line: 8,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 21
          },
          end: {
            line: 2,
            column: 25
          }
        }, {
          start: {
            line: 2,
            column: 29
          },
          end: {
            line: 2,
            column: 47
          }
        }, {
          start: {
            line: 2,
            column: 52
          },
          end: {
            line: 8,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 91
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 91
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 5,
            column: 11
          },
          end: {
            line: 5,
            column: 212
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 15
          },
          end: {
            line: 5,
            column: 24
          }
        }, {
          start: {
            line: 5,
            column: 28
          },
          end: {
            line: 5,
            column: 211
          }
        }],
        line: 5
      },
      "3": {
        loc: {
          start: {
            line: 5,
            column: 32
          },
          end: {
            line: 5,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 65
          },
          end: {
            line: 5,
            column: 76
          }
        }, {
          start: {
            line: 5,
            column: 79
          },
          end: {
            line: 5,
            column: 99
          }
        }],
        line: 5
      },
      "4": {
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 6,
            column: 161
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 6,
            column: 34
          }
        }, {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 161
          }
        }],
        line: 6
      },
      "5": {
        loc: {
          start: {
            line: 48,
            column: 16
          },
          end: {
            line: 50,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 16
          },
          end: {
            line: 50,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "6": {
        loc: {
          start: {
            line: 56,
            column: 16
          },
          end: {
            line: 56,
            column: 70
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 16
          },
          end: {
            line: 56,
            column: 70
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "7": {
        loc: {
          start: {
            line: 56,
            column: 20
          },
          end: {
            line: 56,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 56,
            column: 20
          },
          end: {
            line: 56,
            column: 23
          }
        }, {
          start: {
            line: 56,
            column: 27
          },
          end: {
            line: 56,
            column: 30
          }
        }, {
          start: {
            line: 56,
            column: 35
          },
          end: {
            line: 56,
            column: 49
          }
        }],
        line: 56
      },
      "8": {
        loc: {
          start: {
            line: 58,
            column: 22
          },
          end: {
            line: 58,
            column: 47
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 22
          },
          end: {
            line: 58,
            column: 47
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "9": {
        loc: {
          start: {
            line: 91,
            column: 12
          },
          end: {
            line: 101,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 12
          },
          end: {
            line: 101,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0, 0],
      "8": [0, 0],
      "9": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/audio/example.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/audio/example.ts"],
      sourcesContent: ["import { MicCapture } from './micCapture';\n\n/**\n * Example usage of the MicCapture class\n * This demonstrates how to capture microphone audio and process the frames\n */\nexport async function exampleMicrophoneCapture() {\n  const micCapture = new MicCapture();\n  \n  try {\n    // Initialize the microphone capture system\n    await micCapture.initialize();\n    console.log(`Initialized microphone capture:`);\n    console.log(`- Sample rate: ${micCapture.sampleRate} Hz`);\n    console.log(`- Frame size: ${micCapture.frameSize} samples (${micCapture.frameSize / micCapture.sampleRate * 1000}ms)`);\n    \n    // Start capturing audio\n    await micCapture.startCapture();\n    console.log('Started capturing audio...');\n    \n    let frameCount = 0;\n    const maxFrames = 50; // Capture 50 frames (5 seconds at 100ms per frame)\n    \n    // Read frames using the async iterator\n    for await (const audioFrame of micCapture.read()) {\n      frameCount++;\n      \n      console.log(`Frame ${frameCount}: ${audioFrame.length} bytes`);\n      \n      // Here you could process the audioFrame (Uint8Array)\n      // For example:\n      // - Send to speech recognition service\n      // - Store for playback\n      // - Analyze audio levels\n      // - Convert back to Int16Array for audio processing\n      \n      const samples = new Int16Array(audioFrame.buffer);\n      const rms = calculateRMS(samples);\n      console.log(`  RMS level: ${rms.toFixed(2)}`);\n      \n      if (frameCount >= maxFrames) {\n        break;\n      }\n    }\n    \n    console.log(`Captured ${frameCount} frames`);\n    \n  } catch (error) {\n    console.error('Error during microphone capture:', error);\n  } finally {\n    // Clean up resources\n    await micCapture.dispose();\n    console.log('Microphone capture disposed');\n  }\n}\n\n/**\n * Calculate RMS (Root Mean Square) level of audio samples\n * This gives a measure of the audio signal's power/volume\n */\nfunction calculateRMS(samples: Int16Array): number {\n  let sum = 0;\n  for (let i = 0; i < samples.length; i++) {\n    sum += samples[i] * samples[i];\n  }\n  return Math.sqrt(sum / samples.length);\n}\n\n// Example of how to use with manual frame processing\nexport async function exampleManualFrameProcessing() {\n  const micCapture = new MicCapture();\n  \n  try {\n    await micCapture.initialize();\n    await micCapture.startCapture();\n    \n    // Manual frame reading (alternative to async iterator)\n    const processingLoop = setInterval(() => {\n      const frame = micCapture.readFrame();\n      \n      if (frame) {\n        console.log(`Got frame with ${frame.length} samples`);\n        \n        // Convert to Uint8Array if needed for transmission\n        const uint8Frame = new Uint8Array(frame.length * 2);\n        for (let i = 0; i < frame.length; i++) {\n          const sample = frame[i];\n          uint8Frame[i * 2] = sample & 0xFF;\n          uint8Frame[i * 2 + 1] = (sample >> 8) & 0xFF;\n        }\n        \n        // Process uint8Frame...\n      }\n    }, 50); // Check for frames every 50ms\n    \n    // Stop after 5 seconds\n    setTimeout(() => {\n      clearInterval(processingLoop);\n      micCapture.dispose();\n    }, 5000);\n    \n  } catch (error) {\n    console.error('Error:', error);\n    await micCapture.dispose();\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d4586a27178d9afe5b0790d8764ab5e54716df57"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_13qlmlmgby = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_13qlmlmgby();
var __asyncValues =
/* istanbul ignore next */
(cov_13qlmlmgby().s[0]++,
/* istanbul ignore next */
(cov_13qlmlmgby().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_13qlmlmgby().b[0][1]++, this.__asyncValues) ||
/* istanbul ignore next */
(cov_13qlmlmgby().b[0][2]++, function (o) {
  /* istanbul ignore next */
  cov_13qlmlmgby().f[0]++;
  cov_13qlmlmgby().s[1]++;
  if (!Symbol.asyncIterator) {
    /* istanbul ignore next */
    cov_13qlmlmgby().b[1][0]++;
    cov_13qlmlmgby().s[2]++;
    throw new TypeError("Symbol.asyncIterator is not defined.");
  } else
  /* istanbul ignore next */
  {
    cov_13qlmlmgby().b[1][1]++;
  }
  var m =
    /* istanbul ignore next */
    (cov_13qlmlmgby().s[3]++, o[Symbol.asyncIterator]),
    i;
  /* istanbul ignore next */
  cov_13qlmlmgby().s[4]++;
  return m ?
  /* istanbul ignore next */
  (cov_13qlmlmgby().b[2][0]++, m.call(o)) :
  /* istanbul ignore next */
  (cov_13qlmlmgby().b[2][1]++, o = typeof __values === "function" ?
  /* istanbul ignore next */
  (cov_13qlmlmgby().b[3][0]++, __values(o)) :
  /* istanbul ignore next */
  (cov_13qlmlmgby().b[3][1]++, o[Symbol.iterator]()), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    /* istanbul ignore next */
    cov_13qlmlmgby().f[1]++;
    cov_13qlmlmgby().s[5]++;
    return this;
  }, i);
  function verb(n) {
    /* istanbul ignore next */
    cov_13qlmlmgby().f[2]++;
    cov_13qlmlmgby().s[6]++;
    i[n] =
    /* istanbul ignore next */
    (cov_13qlmlmgby().b[4][0]++, o[n]) &&
    /* istanbul ignore next */
    (cov_13qlmlmgby().b[4][1]++, function (v) {
      /* istanbul ignore next */
      cov_13qlmlmgby().f[3]++;
      cov_13qlmlmgby().s[7]++;
      return new Promise(function (resolve, reject) {
        /* istanbul ignore next */
        cov_13qlmlmgby().f[4]++;
        cov_13qlmlmgby().s[8]++;
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    });
  }
  function settle(resolve, reject, d, v) {
    /* istanbul ignore next */
    cov_13qlmlmgby().f[5]++;
    cov_13qlmlmgby().s[9]++;
    Promise.resolve(v).then(function (v) {
      /* istanbul ignore next */
      cov_13qlmlmgby().f[6]++;
      cov_13qlmlmgby().s[10]++;
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
}));
/* istanbul ignore next */
cov_13qlmlmgby().s[11]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_13qlmlmgby().s[12]++;
exports.exampleMicrophoneCapture = exampleMicrophoneCapture;
/* istanbul ignore next */
cov_13qlmlmgby().s[13]++;
exports.exampleManualFrameProcessing = exampleManualFrameProcessing;
const micCapture_1 =
/* istanbul ignore next */
(cov_13qlmlmgby().s[14]++, require("./micCapture"));
/**
 * Example usage of the MicCapture class
 * This demonstrates how to capture microphone audio and process the frames
 */
async function exampleMicrophoneCapture() {
  /* istanbul ignore next */
  cov_13qlmlmgby().f[7]++;
  var _a, e_1, _b, _c;
  const micCapture =
  /* istanbul ignore next */
  (cov_13qlmlmgby().s[15]++, new micCapture_1.MicCapture());
  /* istanbul ignore next */
  cov_13qlmlmgby().s[16]++;
  try {
    /* istanbul ignore next */
    cov_13qlmlmgby().s[17]++;
    // Initialize the microphone capture system
    await micCapture.initialize();
    /* istanbul ignore next */
    cov_13qlmlmgby().s[18]++;
    console.log(`Initialized microphone capture:`);
    /* istanbul ignore next */
    cov_13qlmlmgby().s[19]++;
    console.log(`- Sample rate: ${micCapture.sampleRate} Hz`);
    /* istanbul ignore next */
    cov_13qlmlmgby().s[20]++;
    console.log(`- Frame size: ${micCapture.frameSize} samples (${micCapture.frameSize / micCapture.sampleRate * 1000}ms)`);
    // Start capturing audio
    /* istanbul ignore next */
    cov_13qlmlmgby().s[21]++;
    await micCapture.startCapture();
    /* istanbul ignore next */
    cov_13qlmlmgby().s[22]++;
    console.log('Started capturing audio...');
    let frameCount =
    /* istanbul ignore next */
    (cov_13qlmlmgby().s[23]++, 0);
    const maxFrames =
    /* istanbul ignore next */
    (cov_13qlmlmgby().s[24]++, 50); // Capture 50 frames (5 seconds at 100ms per frame)
    /* istanbul ignore next */
    cov_13qlmlmgby().s[25]++;
    try {
      /* istanbul ignore next */
      cov_13qlmlmgby().s[26]++;
      // Read frames using the async iterator
      for (var _d =
        /* istanbul ignore next */
        (cov_13qlmlmgby().s[27]++, true), _e =
        /* istanbul ignore next */
        (cov_13qlmlmgby().s[28]++, __asyncValues(micCapture.read())), _f; _f = await _e.next(), _a = _f.done, !_a; _d = true) {
        /* istanbul ignore next */
        cov_13qlmlmgby().s[29]++;
        _c = _f.value;
        /* istanbul ignore next */
        cov_13qlmlmgby().s[30]++;
        _d = false;
        const audioFrame =
        /* istanbul ignore next */
        (cov_13qlmlmgby().s[31]++, _c);
        /* istanbul ignore next */
        cov_13qlmlmgby().s[32]++;
        frameCount++;
        /* istanbul ignore next */
        cov_13qlmlmgby().s[33]++;
        console.log(`Frame ${frameCount}: ${audioFrame.length} bytes`);
        // Here you could process the audioFrame (Uint8Array)
        // For example:
        // - Send to speech recognition service
        // - Store for playback
        // - Analyze audio levels
        // - Convert back to Int16Array for audio processing
        const samples =
        /* istanbul ignore next */
        (cov_13qlmlmgby().s[34]++, new Int16Array(audioFrame.buffer));
        const rms =
        /* istanbul ignore next */
        (cov_13qlmlmgby().s[35]++, calculateRMS(samples));
        /* istanbul ignore next */
        cov_13qlmlmgby().s[36]++;
        console.log(`  RMS level: ${rms.toFixed(2)}`);
        /* istanbul ignore next */
        cov_13qlmlmgby().s[37]++;
        if (frameCount >= maxFrames) {
          /* istanbul ignore next */
          cov_13qlmlmgby().b[5][0]++;
          cov_13qlmlmgby().s[38]++;
          break;
        } else
        /* istanbul ignore next */
        {
          cov_13qlmlmgby().b[5][1]++;
        }
      }
    } catch (e_1_1) {
      /* istanbul ignore next */
      cov_13qlmlmgby().s[39]++;
      e_1 = {
        error: e_1_1
      };
    } finally {
      /* istanbul ignore next */
      cov_13qlmlmgby().s[40]++;
      try {
        /* istanbul ignore next */
        cov_13qlmlmgby().s[41]++;
        if (
        /* istanbul ignore next */
        (cov_13qlmlmgby().b[7][0]++, !_d) &&
        /* istanbul ignore next */
        (cov_13qlmlmgby().b[7][1]++, !_a) &&
        /* istanbul ignore next */
        (cov_13qlmlmgby().b[7][2]++, _b = _e.return)) {
          /* istanbul ignore next */
          cov_13qlmlmgby().b[6][0]++;
          cov_13qlmlmgby().s[42]++;
          await _b.call(_e);
        } else
        /* istanbul ignore next */
        {
          cov_13qlmlmgby().b[6][1]++;
        }
      } finally {
        /* istanbul ignore next */
        cov_13qlmlmgby().s[43]++;
        if (e_1) {
          /* istanbul ignore next */
          cov_13qlmlmgby().b[8][0]++;
          cov_13qlmlmgby().s[44]++;
          throw e_1.error;
        } else
        /* istanbul ignore next */
        {
          cov_13qlmlmgby().b[8][1]++;
        }
      }
    }
    /* istanbul ignore next */
    cov_13qlmlmgby().s[45]++;
    console.log(`Captured ${frameCount} frames`);
  } catch (error) {
    /* istanbul ignore next */
    cov_13qlmlmgby().s[46]++;
    console.error('Error during microphone capture:', error);
  } finally {
    /* istanbul ignore next */
    cov_13qlmlmgby().s[47]++;
    // Clean up resources
    await micCapture.dispose();
    /* istanbul ignore next */
    cov_13qlmlmgby().s[48]++;
    console.log('Microphone capture disposed');
  }
}
/**
 * Calculate RMS (Root Mean Square) level of audio samples
 * This gives a measure of the audio signal's power/volume
 */
function calculateRMS(samples) {
  /* istanbul ignore next */
  cov_13qlmlmgby().f[8]++;
  let sum =
  /* istanbul ignore next */
  (cov_13qlmlmgby().s[49]++, 0);
  /* istanbul ignore next */
  cov_13qlmlmgby().s[50]++;
  for (let i =
  /* istanbul ignore next */
  (cov_13qlmlmgby().s[51]++, 0); i < samples.length; i++) {
    /* istanbul ignore next */
    cov_13qlmlmgby().s[52]++;
    sum += samples[i] * samples[i];
  }
  /* istanbul ignore next */
  cov_13qlmlmgby().s[53]++;
  return Math.sqrt(sum / samples.length);
}
// Example of how to use with manual frame processing
async function exampleManualFrameProcessing() {
  /* istanbul ignore next */
  cov_13qlmlmgby().f[9]++;
  const micCapture =
  /* istanbul ignore next */
  (cov_13qlmlmgby().s[54]++, new micCapture_1.MicCapture());
  /* istanbul ignore next */
  cov_13qlmlmgby().s[55]++;
  try {
    /* istanbul ignore next */
    cov_13qlmlmgby().s[56]++;
    await micCapture.initialize();
    /* istanbul ignore next */
    cov_13qlmlmgby().s[57]++;
    await micCapture.startCapture();
    // Manual frame reading (alternative to async iterator)
    const processingLoop =
    /* istanbul ignore next */
    (cov_13qlmlmgby().s[58]++, setInterval(() => {
      /* istanbul ignore next */
      cov_13qlmlmgby().f[10]++;
      const frame =
      /* istanbul ignore next */
      (cov_13qlmlmgby().s[59]++, micCapture.readFrame());
      /* istanbul ignore next */
      cov_13qlmlmgby().s[60]++;
      if (frame) {
        /* istanbul ignore next */
        cov_13qlmlmgby().b[9][0]++;
        cov_13qlmlmgby().s[61]++;
        console.log(`Got frame with ${frame.length} samples`);
        // Convert to Uint8Array if needed for transmission
        const uint8Frame =
        /* istanbul ignore next */
        (cov_13qlmlmgby().s[62]++, new Uint8Array(frame.length * 2));
        /* istanbul ignore next */
        cov_13qlmlmgby().s[63]++;
        for (let i =
        /* istanbul ignore next */
        (cov_13qlmlmgby().s[64]++, 0); i < frame.length; i++) {
          const sample =
          /* istanbul ignore next */
          (cov_13qlmlmgby().s[65]++, frame[i]);
          /* istanbul ignore next */
          cov_13qlmlmgby().s[66]++;
          uint8Frame[i * 2] = sample & 0xFF;
          /* istanbul ignore next */
          cov_13qlmlmgby().s[67]++;
          uint8Frame[i * 2 + 1] = sample >> 8 & 0xFF;
        }
        // Process uint8Frame...
      } else
      /* istanbul ignore next */
      {
        cov_13qlmlmgby().b[9][1]++;
      }
    }, 50)); // Check for frames every 50ms
    // Stop after 5 seconds
    /* istanbul ignore next */
    cov_13qlmlmgby().s[68]++;
    setTimeout(() => {
      /* istanbul ignore next */
      cov_13qlmlmgby().f[11]++;
      cov_13qlmlmgby().s[69]++;
      clearInterval(processingLoop);
      /* istanbul ignore next */
      cov_13qlmlmgby().s[70]++;
      micCapture.dispose();
    }, 5000);
  } catch (error) {
    /* istanbul ignore next */
    cov_13qlmlmgby().s[71]++;
    console.error('Error:', error);
    /* istanbul ignore next */
    cov_13qlmlmgby().s[72]++;
    await micCapture.dispose();
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,