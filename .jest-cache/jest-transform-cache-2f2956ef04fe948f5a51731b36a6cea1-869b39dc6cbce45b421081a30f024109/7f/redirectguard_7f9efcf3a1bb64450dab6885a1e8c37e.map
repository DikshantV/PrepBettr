{"version":3,"names":["cov_292dyfetyi","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","RedirectGuard","getRedirectCount","window","data","sessionStorage","getItem","STORAGE_KEY","count","timestamp","JSON","parse","now","Date","RESET_INTERVAL","resetCount","error","console","setRedirectCount","setItem","stringify","removeItem","canRedirect","targetPath","currentCount","MAX_REDIRECTS","warn","recordRedirect","fromPath","toPath","newCount","log","reset","isLoop","isAuthLoop","includes","exports","default"],"sources":["/Users/dikshantvashistha/PrepBettr/lib/utils/redirect-guard.ts"],"sourcesContent":["/**\n * Redirect guard utility to prevent infinite redirect loops\n * during authentication flows\n */\n\nclass RedirectGuard {\n  private static readonly STORAGE_KEY = 'redirect_guard';\n  private static readonly MAX_REDIRECTS = 3;\n  private static readonly RESET_INTERVAL = 30000; // 30 seconds\n\n  private static getRedirectCount(): number {\n    if (typeof window === 'undefined') return 0;\n    \n    try {\n      const data = sessionStorage.getItem(this.STORAGE_KEY);\n      if (!data) return 0;\n      \n      const { count, timestamp } = JSON.parse(data);\n      const now = Date.now();\n      \n      // Reset counter if enough time has passed\n      if (now - timestamp > this.RESET_INTERVAL) {\n        this.resetCount();\n        return 0;\n      }\n      \n      return count || 0;\n    } catch (error) {\n      console.error('RedirectGuard: Error reading redirect count:', error);\n      return 0;\n    }\n  }\n\n  private static setRedirectCount(count: number): void {\n    if (typeof window === 'undefined') return;\n    \n    try {\n      const data = {\n        count,\n        timestamp: Date.now()\n      };\n      sessionStorage.setItem(this.STORAGE_KEY, JSON.stringify(data));\n    } catch (error) {\n      console.error('RedirectGuard: Error setting redirect count:', error);\n    }\n  }\n\n  private static resetCount(): void {\n    if (typeof window === 'undefined') return;\n    \n    try {\n      sessionStorage.removeItem(this.STORAGE_KEY);\n    } catch (error) {\n      console.error('RedirectGuard: Error resetting redirect count:', error);\n    }\n  }\n\n  /**\n   * Check if a redirect is allowed based on current redirect count\n   * @param targetPath - The path we want to redirect to\n   * @returns true if redirect is allowed, false if it should be blocked\n   */\n  public static canRedirect(targetPath: string): boolean {\n    const currentCount = this.getRedirectCount();\n    \n    if (currentCount >= this.MAX_REDIRECTS) {\n      console.warn(`RedirectGuard: Blocking redirect to ${targetPath} - max redirects (${this.MAX_REDIRECTS}) reached`);\n      return false;\n    }\n    \n    return true;\n  }\n\n  /**\n   * Increment the redirect counter when a redirect is about to happen\n   * @param fromPath - Current path\n   * @param toPath - Target path\n   */\n  public static recordRedirect(fromPath: string, toPath: string): void {\n    const currentCount = this.getRedirectCount();\n    const newCount = currentCount + 1;\n    \n    console.log(`RedirectGuard: Recording redirect ${newCount}/${this.MAX_REDIRECTS} from ${fromPath} to ${toPath}`);\n    this.setRedirectCount(newCount);\n  }\n\n  /**\n   * Reset the redirect counter (useful after successful authentication)\n   */\n  public static reset(): void {\n    console.log('RedirectGuard: Resetting redirect counter');\n    this.resetCount();\n  }\n\n  /**\n   * Check if we're potentially in a redirect loop between two pages\n   * @param fromPath - Current path  \n   * @param toPath - Target path\n   * @returns true if this looks like a loop\n   */\n  public static isLoop(fromPath: string, toPath: string): boolean {\n    // Simple loop detection: if we're redirecting between /sign-in and /dashboard\n    const isAuthLoop = (\n      (fromPath.includes('/sign-in') && toPath.includes('/dashboard')) ||\n      (fromPath.includes('/dashboard') && toPath.includes('/sign-in'))\n    );\n    \n    return isAuthLoop && this.getRedirectCount() > 0;\n  }\n}\n\nexport default RedirectGuard;\n"],"mappings":"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C,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;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","ignoreList":[]}