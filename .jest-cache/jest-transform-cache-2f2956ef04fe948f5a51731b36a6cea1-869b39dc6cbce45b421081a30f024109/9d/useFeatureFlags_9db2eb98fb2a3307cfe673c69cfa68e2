993469013d30c572f71a64c6eaffdfcf
"use strict";

/* istanbul ignore next */
function cov_1rcybfzxlm() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/hooks/useFeatureFlags.ts";
  var hash = "a21d6507904c17deb562206b129732c864f96748";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/hooks/useFeatureFlags.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 98
        }
      },
      "2": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 32
        }
      },
      "3": {
        start: {
          line: 5,
          column: 27
        },
        end: {
          line: 5,
          column: 66
        }
      },
      "4": {
        start: {
          line: 10,
          column: 24
        },
        end: {
          line: 82,
          column: 1
        }
      },
      "5": {
        start: {
          line: 11,
          column: 30
        },
        end: {
          line: 11,
          column: 57
        }
      },
      "6": {
        start: {
          line: 12,
          column: 34
        },
        end: {
          line: 12,
          column: 61
        }
      },
      "7": {
        start: {
          line: 13,
          column: 30
        },
        end: {
          line: 13,
          column: 57
        }
      },
      "8": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 49,
          column: 11
        }
      },
      "9": {
        start: {
          line: 16,
          column: 26
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "10": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 46,
          column: 13
        }
      },
      "11": {
        start: {
          line: 18,
          column: 16
        },
        end: {
          line: 18,
          column: 33
        }
      },
      "12": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 31
        }
      },
      "13": {
        start: {
          line: 21,
          column: 33
        },
        end: {
          line: 21,
          column: 66
        }
      },
      "14": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 24,
          column: 17
        }
      },
      "15": {
        start: {
          line: 23,
          column: 20
        },
        end: {
          line: 23,
          column: 69
        }
      },
      "16": {
        start: {
          line: 25,
          column: 38
        },
        end: {
          line: 25,
          column: 59
        }
      },
      "17": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 26,
          column: 40
        }
      },
      "18": {
        start: {
          line: 27,
          column: 16
        },
        end: {
          line: 27,
          column: 34
        }
      },
      "19": {
        start: {
          line: 30,
          column: 16
        },
        end: {
          line: 30,
          column: 67
        }
      },
      "20": {
        start: {
          line: 31,
          column: 16
        },
        end: {
          line: 31,
          column: 94
        }
      },
      "21": {
        start: {
          line: 32,
          column: 16
        },
        end: {
          line: 32,
          column: 34
        }
      },
      "22": {
        start: {
          line: 34,
          column: 16
        },
        end: {
          line: 45,
          column: 17
        }
      },
      "23": {
        start: {
          line: 35,
          column: 20
        },
        end: {
          line: 44,
          column: 23
        }
      },
      "24": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 20
        }
      },
      "25": {
        start: {
          line: 50,
          column: 27
        },
        end: {
          line: 52,
          column: 5
        }
      },
      "26": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 88
        }
      },
      "27": {
        start: {
          line: 53,
          column: 25
        },
        end: {
          line: 70,
          column: 5
        }
      },
      "28": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 69,
          column: 9
        }
      },
      "29": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 29
        }
      },
      "30": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 27
        }
      },
      "31": {
        start: {
          line: 57,
          column: 29
        },
        end: {
          line: 57,
          column: 75
        }
      },
      "32": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 60,
          column: 13
        }
      },
      "33": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 59,
          column: 67
        }
      },
      "34": {
        start: {
          line: 61,
          column: 29
        },
        end: {
          line: 61,
          column: 50
        }
      },
      "35": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 31
        }
      },
      "36": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 30
        }
      },
      "37": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 66
        }
      },
      "38": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 93
        }
      },
      "39": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 30
        }
      },
      "40": {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 81,
          column: 6
        }
      },
      "41": {
        start: {
          line: 78,
          column: 39
        },
        end: {
          line: 78,
          column: 71
        }
      },
      "42": {
        start: {
          line: 79,
          column: 40
        },
        end: {
          line: 79,
          column: 73
        }
      },
      "43": {
        start: {
          line: 80,
          column: 30
        },
        end: {
          line: 80,
          column: 53
        }
      },
      "44": {
        start: {
          line: 83,
          column: 0
        },
        end: {
          line: 83,
          column: 42
        }
      },
      "45": {
        start: {
          line: 88,
          column: 30
        },
        end: {
          line: 91,
          column: 1
        }
      },
      "46": {
        start: {
          line: 89,
          column: 22
        },
        end: {
          line: 89,
          column: 44
        }
      },
      "47": {
        start: {
          line: 90,
          column: 4
        },
        end: {
          line: 90,
          column: 70
        }
      },
      "48": {
        start: {
          line: 92,
          column: 0
        },
        end: {
          line: 92,
          column: 54
        }
      },
      "49": {
        start: {
          line: 96,
          column: 31
        },
        end: {
          line: 104,
          column: 1
        }
      },
      "50": {
        start: {
          line: 97,
          column: 20
        },
        end: {
          line: 102,
          column: 10
        }
      },
      "51": {
        start: {
          line: 98,
          column: 26
        },
        end: {
          line: 98,
          column: 48
        }
      },
      "52": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 100,
          column: 83
        }
      },
      "53": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 19
        }
      },
      "54": {
        start: {
          line: 103,
          column: 4
        },
        end: {
          line: 103,
          column: 19
        }
      },
      "55": {
        start: {
          line: 105,
          column: 0
        },
        end: {
          line: 105,
          column: 56
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 24
          },
          end: {
            line: 10,
            column: 25
          }
        },
        loc: {
          start: {
            line: 10,
            column: 30
          },
          end: {
            line: 82,
            column: 1
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 27
          },
          end: {
            line: 15,
            column: 28
          }
        },
        loc: {
          start: {
            line: 15,
            column: 33
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 26
          },
          end: {
            line: 16,
            column: 27
          }
        },
        loc: {
          start: {
            line: 16,
            column: 38
          },
          end: {
            line: 47,
            column: 9
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 50,
            column: 27
          },
          end: {
            line: 50,
            column: 28
          }
        },
        loc: {
          start: {
            line: 50,
            column: 41
          },
          end: {
            line: 52,
            column: 5
          }
        },
        line: 50
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 53,
            column: 25
          },
          end: {
            line: 53,
            column: 26
          }
        },
        loc: {
          start: {
            line: 53,
            column: 37
          },
          end: {
            line: 70,
            column: 5
          }
        },
        line: 53
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 78,
            column: 33
          },
          end: {
            line: 78,
            column: 34
          }
        },
        loc: {
          start: {
            line: 78,
            column: 39
          },
          end: {
            line: 78,
            column: 71
          }
        },
        line: 78
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 79,
            column: 34
          },
          end: {
            line: 79,
            column: 35
          }
        },
        loc: {
          start: {
            line: 79,
            column: 40
          },
          end: {
            line: 79,
            column: 73
          }
        },
        line: 79
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 80,
            column: 24
          },
          end: {
            line: 80,
            column: 25
          }
        },
        loc: {
          start: {
            line: 80,
            column: 30
          },
          end: {
            line: 80,
            column: 53
          }
        },
        line: 80
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 88,
            column: 30
          },
          end: {
            line: 88,
            column: 31
          }
        },
        loc: {
          start: {
            line: 88,
            column: 44
          },
          end: {
            line: 91,
            column: 1
          }
        },
        line: 88
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 96,
            column: 31
          },
          end: {
            line: 96,
            column: 32
          }
        },
        loc: {
          start: {
            line: 96,
            column: 46
          },
          end: {
            line: 104,
            column: 1
          }
        },
        line: 96
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 97,
            column: 37
          },
          end: {
            line: 97,
            column: 38
          }
        },
        loc: {
          start: {
            line: 97,
            column: 56
          },
          end: {
            line: 102,
            column: 5
          }
        },
        line: 97
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 22,
            column: 16
          },
          end: {
            line: 24,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 16
          },
          end: {
            line: 24,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "1": {
        loc: {
          start: {
            line: 31,
            column: 25
          },
          end: {
            line: 31,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 31,
            column: 48
          },
          end: {
            line: 31,
            column: 59
          }
        }, {
          start: {
            line: 31,
            column: 62
          },
          end: {
            line: 31,
            column: 92
          }
        }],
        line: 31
      },
      "2": {
        loc: {
          start: {
            line: 34,
            column: 16
          },
          end: {
            line: 45,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 16
          },
          end: {
            line: 45,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "3": {
        loc: {
          start: {
            line: 51,
            column: 15
          },
          end: {
            line: 51,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 51,
            column: 16
          },
          end: {
            line: 51,
            column: 77
          }
        }, {
          start: {
            line: 51,
            column: 82
          },
          end: {
            line: 51,
            column: 87
          }
        }],
        line: 51
      },
      "4": {
        loc: {
          start: {
            line: 51,
            column: 16
          },
          end: {
            line: 51,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 51,
            column: 53
          },
          end: {
            line: 51,
            column: 59
          }
        }, {
          start: {
            line: 51,
            column: 62
          },
          end: {
            line: 51,
            column: 77
          }
        }],
        line: 51
      },
      "5": {
        loc: {
          start: {
            line: 51,
            column: 16
          },
          end: {
            line: 51,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 51,
            column: 16
          },
          end: {
            line: 51,
            column: 30
          }
        }, {
          start: {
            line: 51,
            column: 34
          },
          end: {
            line: 51,
            column: 50
          }
        }],
        line: 51
      },
      "6": {
        loc: {
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 60,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 60,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "7": {
        loc: {
          start: {
            line: 67,
            column: 21
          },
          end: {
            line: 67,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 67,
            column: 44
          },
          end: {
            line: 67,
            column: 55
          }
        }, {
          start: {
            line: 67,
            column: 58
          },
          end: {
            line: 67,
            column: 91
          }
        }],
        line: 67
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/hooks/useFeatureFlags.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/hooks/useFeatureFlags.ts"],
      sourcesContent: ["import { useState, useEffect } from 'react';\nimport { useUnifiedConfig } from '@/lib/hooks/useUnifiedConfig';\n\n// Define types locally to avoid importing server-only modules\nexport interface FeatureFlags {\n  voiceInterview: boolean;\n  premiumFeatures: boolean;\n  newUI: boolean;\n}\n\nexport interface EnhancedFeatureFlags extends FeatureFlags {\n  rolloutStatus: {\n    voiceInterview: boolean;\n    premiumFeatures: boolean;\n    newUI: boolean;\n  };\n}\n\n/**\n * Client-safe feature flags hook that uses API calls instead of direct service imports\n * This avoids bundling server-only modules for the client\n */\nexport const useFeatureFlags = () => {\n  const [flags, setFlags] = useState<EnhancedFeatureFlags | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Load feature flags on component mount using API instead of direct service import\n  useEffect(() => {\n    const loadFlags = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Fetch from API endpoint instead of direct service import\n        const response = await fetch('/api/feature-flags');\n        if (!response.ok) {\n          throw new Error('Failed to fetch feature flags');\n        }\n        \n        const enhancedFlags = await response.json();\n        setFlags(enhancedFlags);\n        setLoading(false);\n      } catch (err) {\n        console.error('Error loading feature flags:', err);\n        setError(err instanceof Error ? err.message : 'Failed to load feature flags');\n        setLoading(false);\n\n        // Set default flags if loading fails\n        if (!flags) {\n          setFlags({\n            voiceInterview: false,\n            premiumFeatures: false,\n            newUI: false,\n            rolloutStatus: {\n              voiceInterview: false,\n              premiumFeatures: false,\n              newUI: false,\n            },\n          });\n        }\n      }\n    };\n\n    loadFlags();\n  }, []);\n\n  const getFeatureFlag = (flagName: keyof FeatureFlags): boolean => {\n    return flags?.[flagName] || false;\n  };\n\n  const refreshFlags = async (): Promise<void> => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await fetch('/api/feature-flags?refresh=true');\n      if (!response.ok) {\n        throw new Error('Failed to refresh feature flags');\n      }\n      \n      const newFlags = await response.json();\n      setFlags(newFlags);\n      setLoading(false);\n    } catch (err) {\n      console.error('Error refreshing feature flags:', err);\n      setError(err instanceof Error ? err.message : 'Failed to refresh feature flags');\n      setLoading(false);\n    }\n  };\n\n  return {\n    flags,\n    loading,\n    error,\n    getFeatureFlag,\n    refreshFlags,\n    // Convenience methods for specific flags\n    isVoiceInterviewEnabled: () => getFeatureFlag('voiceInterview'),\n    isPremiumFeaturesEnabled: () => getFeatureFlag('premiumFeatures'),\n    isNewUIEnabled: () => getFeatureFlag('newUI'),\n  };\n};\n\n/**\n * Simplified hook for individual feature flags using unified config directly\n * More performant for components that only need specific flags\n */\nexport const useUnifiedFeatureFlag = (flagName: keyof FeatureFlags) => {\n  const configKey = `features.${flagName}`;\n  return useUnifiedConfig<boolean>(configKey, false);\n};\n\n/**\n * Hook for getting multiple feature flags at once\n */\nexport const useUnifiedFeatureFlags = (flagNames: Array<keyof FeatureFlags>) => {\n  const results = flagNames.reduce((acc, flagName) => {\n    const configKey = `features.${flagName}`;\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    acc[flagName] = useUnifiedConfig<boolean>(configKey, false);\n    return acc;\n  }, {} as Record<keyof FeatureFlags, { value: boolean; loading: boolean; error: string | null }>);\n  \n  return results;\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a21d6507904c17deb562206b129732c864f96748"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1rcybfzxlm = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1rcybfzxlm();
cov_1rcybfzxlm().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1rcybfzxlm().s[1]++;
exports.useUnifiedFeatureFlags = exports.useUnifiedFeatureFlag = exports.useFeatureFlags = void 0;
const react_1 =
/* istanbul ignore next */
(cov_1rcybfzxlm().s[2]++, require("react"));
const useUnifiedConfig_1 =
/* istanbul ignore next */
(cov_1rcybfzxlm().s[3]++, require("@/lib/hooks/useUnifiedConfig"));
/**
 * Client-safe feature flags hook that uses API calls instead of direct service imports
 * This avoids bundling server-only modules for the client
 */
/* istanbul ignore next */
cov_1rcybfzxlm().s[4]++;
const useFeatureFlags = () => {
  /* istanbul ignore next */
  cov_1rcybfzxlm().f[0]++;
  const [flags, setFlags] =
  /* istanbul ignore next */
  (cov_1rcybfzxlm().s[5]++, (0, react_1.useState)(null));
  const [loading, setLoading] =
  /* istanbul ignore next */
  (cov_1rcybfzxlm().s[6]++, (0, react_1.useState)(true));
  const [error, setError] =
  /* istanbul ignore next */
  (cov_1rcybfzxlm().s[7]++, (0, react_1.useState)(null));
  // Load feature flags on component mount using API instead of direct service import
  /* istanbul ignore next */
  cov_1rcybfzxlm().s[8]++;
  (0, react_1.useEffect)(() => {
    /* istanbul ignore next */
    cov_1rcybfzxlm().f[1]++;
    cov_1rcybfzxlm().s[9]++;
    const loadFlags = async () => {
      /* istanbul ignore next */
      cov_1rcybfzxlm().f[2]++;
      cov_1rcybfzxlm().s[10]++;
      try {
        /* istanbul ignore next */
        cov_1rcybfzxlm().s[11]++;
        setLoading(true);
        /* istanbul ignore next */
        cov_1rcybfzxlm().s[12]++;
        setError(null);
        // Fetch from API endpoint instead of direct service import
        const response =
        /* istanbul ignore next */
        (cov_1rcybfzxlm().s[13]++, await fetch('/api/feature-flags'));
        /* istanbul ignore next */
        cov_1rcybfzxlm().s[14]++;
        if (!response.ok) {
          /* istanbul ignore next */
          cov_1rcybfzxlm().b[0][0]++;
          cov_1rcybfzxlm().s[15]++;
          throw new Error('Failed to fetch feature flags');
        } else
        /* istanbul ignore next */
        {
          cov_1rcybfzxlm().b[0][1]++;
        }
        const enhancedFlags =
        /* istanbul ignore next */
        (cov_1rcybfzxlm().s[16]++, await response.json());
        /* istanbul ignore next */
        cov_1rcybfzxlm().s[17]++;
        setFlags(enhancedFlags);
        /* istanbul ignore next */
        cov_1rcybfzxlm().s[18]++;
        setLoading(false);
      } catch (err) {
        /* istanbul ignore next */
        cov_1rcybfzxlm().s[19]++;
        console.error('Error loading feature flags:', err);
        /* istanbul ignore next */
        cov_1rcybfzxlm().s[20]++;
        setError(err instanceof Error ?
        /* istanbul ignore next */
        (cov_1rcybfzxlm().b[1][0]++, err.message) :
        /* istanbul ignore next */
        (cov_1rcybfzxlm().b[1][1]++, 'Failed to load feature flags'));
        /* istanbul ignore next */
        cov_1rcybfzxlm().s[21]++;
        setLoading(false);
        // Set default flags if loading fails
        /* istanbul ignore next */
        cov_1rcybfzxlm().s[22]++;
        if (!flags) {
          /* istanbul ignore next */
          cov_1rcybfzxlm().b[2][0]++;
          cov_1rcybfzxlm().s[23]++;
          setFlags({
            voiceInterview: false,
            premiumFeatures: false,
            newUI: false,
            rolloutStatus: {
              voiceInterview: false,
              premiumFeatures: false,
              newUI: false
            }
          });
        } else
        /* istanbul ignore next */
        {
          cov_1rcybfzxlm().b[2][1]++;
        }
      }
    };
    /* istanbul ignore next */
    cov_1rcybfzxlm().s[24]++;
    loadFlags();
  }, []);
  /* istanbul ignore next */
  cov_1rcybfzxlm().s[25]++;
  const getFeatureFlag = flagName => {
    /* istanbul ignore next */
    cov_1rcybfzxlm().f[3]++;
    cov_1rcybfzxlm().s[26]++;
    return /* istanbul ignore next */(cov_1rcybfzxlm().b[3][0]++,
    /* istanbul ignore next */
    (cov_1rcybfzxlm().b[5][0]++, flags === null) ||
    /* istanbul ignore next */
    (cov_1rcybfzxlm().b[5][1]++, flags === void 0) ?
    /* istanbul ignore next */
    (cov_1rcybfzxlm().b[4][0]++, void 0) :
    /* istanbul ignore next */
    (cov_1rcybfzxlm().b[4][1]++, flags[flagName])) ||
    /* istanbul ignore next */
    (cov_1rcybfzxlm().b[3][1]++, false);
  };
  /* istanbul ignore next */
  cov_1rcybfzxlm().s[27]++;
  const refreshFlags = async () => {
    /* istanbul ignore next */
    cov_1rcybfzxlm().f[4]++;
    cov_1rcybfzxlm().s[28]++;
    try {
      /* istanbul ignore next */
      cov_1rcybfzxlm().s[29]++;
      setLoading(true);
      /* istanbul ignore next */
      cov_1rcybfzxlm().s[30]++;
      setError(null);
      const response =
      /* istanbul ignore next */
      (cov_1rcybfzxlm().s[31]++, await fetch('/api/feature-flags?refresh=true'));
      /* istanbul ignore next */
      cov_1rcybfzxlm().s[32]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_1rcybfzxlm().b[6][0]++;
        cov_1rcybfzxlm().s[33]++;
        throw new Error('Failed to refresh feature flags');
      } else
      /* istanbul ignore next */
      {
        cov_1rcybfzxlm().b[6][1]++;
      }
      const newFlags =
      /* istanbul ignore next */
      (cov_1rcybfzxlm().s[34]++, await response.json());
      /* istanbul ignore next */
      cov_1rcybfzxlm().s[35]++;
      setFlags(newFlags);
      /* istanbul ignore next */
      cov_1rcybfzxlm().s[36]++;
      setLoading(false);
    } catch (err) {
      /* istanbul ignore next */
      cov_1rcybfzxlm().s[37]++;
      console.error('Error refreshing feature flags:', err);
      /* istanbul ignore next */
      cov_1rcybfzxlm().s[38]++;
      setError(err instanceof Error ?
      /* istanbul ignore next */
      (cov_1rcybfzxlm().b[7][0]++, err.message) :
      /* istanbul ignore next */
      (cov_1rcybfzxlm().b[7][1]++, 'Failed to refresh feature flags'));
      /* istanbul ignore next */
      cov_1rcybfzxlm().s[39]++;
      setLoading(false);
    }
  };
  /* istanbul ignore next */
  cov_1rcybfzxlm().s[40]++;
  return {
    flags,
    loading,
    error,
    getFeatureFlag,
    refreshFlags,
    // Convenience methods for specific flags
    isVoiceInterviewEnabled: () => {
      /* istanbul ignore next */
      cov_1rcybfzxlm().f[5]++;
      cov_1rcybfzxlm().s[41]++;
      return getFeatureFlag('voiceInterview');
    },
    isPremiumFeaturesEnabled: () => {
      /* istanbul ignore next */
      cov_1rcybfzxlm().f[6]++;
      cov_1rcybfzxlm().s[42]++;
      return getFeatureFlag('premiumFeatures');
    },
    isNewUIEnabled: () => {
      /* istanbul ignore next */
      cov_1rcybfzxlm().f[7]++;
      cov_1rcybfzxlm().s[43]++;
      return getFeatureFlag('newUI');
    }
  };
};
/* istanbul ignore next */
cov_1rcybfzxlm().s[44]++;
exports.useFeatureFlags = useFeatureFlags;
/**
 * Simplified hook for individual feature flags using unified config directly
 * More performant for components that only need specific flags
 */
/* istanbul ignore next */
cov_1rcybfzxlm().s[45]++;
const useUnifiedFeatureFlag = flagName => {
  /* istanbul ignore next */
  cov_1rcybfzxlm().f[8]++;
  const configKey =
  /* istanbul ignore next */
  (cov_1rcybfzxlm().s[46]++, `features.${flagName}`);
  /* istanbul ignore next */
  cov_1rcybfzxlm().s[47]++;
  return (0, useUnifiedConfig_1.useUnifiedConfig)(configKey, false);
};
/* istanbul ignore next */
cov_1rcybfzxlm().s[48]++;
exports.useUnifiedFeatureFlag = useUnifiedFeatureFlag;
/**
 * Hook for getting multiple feature flags at once
 */
/* istanbul ignore next */
cov_1rcybfzxlm().s[49]++;
const useUnifiedFeatureFlags = flagNames => {
  /* istanbul ignore next */
  cov_1rcybfzxlm().f[9]++;
  const results =
  /* istanbul ignore next */
  (cov_1rcybfzxlm().s[50]++, flagNames.reduce((acc, flagName) => {
    /* istanbul ignore next */
    cov_1rcybfzxlm().f[10]++;
    const configKey =
    /* istanbul ignore next */
    (cov_1rcybfzxlm().s[51]++, `features.${flagName}`);
    // eslint-disable-next-line react-hooks/rules-of-hooks
    /* istanbul ignore next */
    cov_1rcybfzxlm().s[52]++;
    acc[flagName] = (0, useUnifiedConfig_1.useUnifiedConfig)(configKey, false);
    /* istanbul ignore next */
    cov_1rcybfzxlm().s[53]++;
    return acc;
  }, {}));
  /* istanbul ignore next */
  cov_1rcybfzxlm().s[54]++;
  return results;
};
/* istanbul ignore next */
cov_1rcybfzxlm().s[55]++;
exports.useUnifiedFeatureFlags = useUnifiedFeatureFlags;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,