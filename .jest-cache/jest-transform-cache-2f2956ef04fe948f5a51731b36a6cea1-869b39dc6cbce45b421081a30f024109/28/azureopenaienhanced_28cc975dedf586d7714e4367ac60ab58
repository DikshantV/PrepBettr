804bc57131b1a6ee67d688f9ec1bbc3b
"use strict";

/**
 * Enhanced Azure OpenAI Service with Multi-Deployment Support
 *
 * This service provides intelligent model selection based on task type:
 * - gpt-35-turbo: Fast, cost-effective for simple tasks (relevancy scoring, basic Q&A)
 * - gpt-4o: Advanced reasoning for complex tasks (cover letters, resume tailoring)
 */
/* istanbul ignore next */
function cov_1h6rwmcmx5() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/services/azure-openai-enhanced.ts";
  var hash = "5212c9591f3fed1b0c5db662ec7b7c25a5fa4440";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/services/azure-openai-enhanced.ts",
    statementMap: {
      "0": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 62
        }
      },
      "1": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 10,
          column: 81
        }
      },
      "2": {
        start: {
          line: 11,
          column: 28
        },
        end: {
          line: 11,
          column: 87
        }
      },
      "3": {
        start: {
          line: 12,
          column: 31
        },
        end: {
          line: 12,
          column: 68
        }
      },
      "4": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 33
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 35
        }
      },
      "6": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 28
        }
      },
      "7": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 63,
          column: 10
        }
      },
      "8": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 98,
          column: 9
        }
      },
      "9": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 81
        }
      },
      "10": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 74,
          column: 13
        }
      },
      "11": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 72,
          column: 74
        }
      },
      "12": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 73,
          column: 29
        }
      },
      "13": {
        start: {
          line: 76,
          column: 32
        },
        end: {
          line: 80,
          column: 13
        }
      },
      "14": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 88,
          column: 13
        }
      },
      "15": {
        start: {
          line: 82,
          column: 16
        },
        end: {
          line: 87,
          column: 17
        }
      },
      "16": {
        start: {
          line: 83,
          column: 35
        },
        end: {
          line: 83,
          column: 82
        }
      },
      "17": {
        start: {
          line: 84,
          column: 20
        },
        end: {
          line: 84,
          column: 40
        }
      },
      "18": {
        start: {
          line: 85,
          column: 20
        },
        end: {
          line: 85,
          column: 51
        }
      },
      "19": {
        start: {
          line: 86,
          column: 20
        },
        end: {
          line: 86,
          column: 97
        }
      },
      "20": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 55
        }
      },
      "21": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 92,
          column: 13
        }
      },
      "22": {
        start: {
          line: 91,
          column: 16
        },
        end: {
          line: 91,
          column: 109
        }
      },
      "23": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 38
        }
      },
      "24": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 90
        }
      },
      "25": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 25
        }
      },
      "26": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "27": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 77
        }
      },
      "28": {
        start: {
          line: 108,
          column: 23
        },
        end: {
          line: 108,
          column: 105
        }
      },
      "29": {
        start: {
          line: 109,
          column: 23
        },
        end: {
          line: 109,
          column: 89
        }
      },
      "30": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "31": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 88
        }
      },
      "32": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 113,
          column: 74
        }
      },
      "33": {
        start: {
          line: 114,
          column: 25
        },
        end: {
          line: 114,
          column: 60
        }
      },
      "34": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 136,
          column: 9
        }
      },
      "35": {
        start: {
          line: 116,
          column: 31
        },
        end: {
          line: 126,
          column: 14
        }
      },
      "36": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 125,
          column: 19
        }
      },
      "37": {
        start: {
          line: 127,
          column: 28
        },
        end: {
          line: 127,
          column: 159
        }
      },
      "38": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 130,
          column: 13
        }
      },
      "39": {
        start: {
          line: 129,
          column: 16
        },
        end: {
          line: 129,
          column: 91
        }
      },
      "40": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 27
        }
      },
      "41": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 90
        }
      },
      "42": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 24
        }
      },
      "43": {
        start: {
          line: 142,
          column: 23
        },
        end: {
          line: 157,
          column: 84
        }
      },
      "44": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 158,
          column: 66
        }
      },
      "45": {
        start: {
          line: 164,
          column: 23
        },
        end: {
          line: 180,
          column: 133
        }
      },
      "46": {
        start: {
          line: 181,
          column: 25
        },
        end: {
          line: 181,
          column: 72
        }
      },
      "47": {
        start: {
          line: 183,
          column: 27
        },
        end: {
          line: 183,
          column: 55
        }
      },
      "48": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 186,
          column: 9
        }
      },
      "49": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 185,
          column: 79
        }
      },
      "50": {
        start: {
          line: 187,
          column: 22
        },
        end: {
          line: 187,
          column: 49
        }
      },
      "51": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 188,
          column: 49
        }
      },
      "52": {
        start: {
          line: 194,
          column: 23
        },
        end: {
          line: 211,
          column: 87
        }
      },
      "53": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 212,
          column: 67
        }
      },
      "54": {
        start: {
          line: 218,
          column: 23
        },
        end: {
          line: 233,
          column: 106
        }
      },
      "55": {
        start: {
          line: 234,
          column: 25
        },
        end: {
          line: 234,
          column: 72
        }
      },
      "56": {
        start: {
          line: 236,
          column: 26
        },
        end: {
          line: 242,
          column: 24
        }
      },
      "57": {
        start: {
          line: 238,
          column: 25
        },
        end: {
          line: 238,
          column: 36
        }
      },
      "58": {
        start: {
          line: 239,
          column: 28
        },
        end: {
          line: 239,
          column: 43
        }
      },
      "59": {
        start: {
          line: 240,
          column: 25
        },
        end: {
          line: 240,
          column: 54
        }
      },
      "60": {
        start: {
          line: 241,
          column: 28
        },
        end: {
          line: 241,
          column: 43
        }
      },
      "61": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 245,
          column: 9
        }
      },
      "62": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 244,
          column: 74
        }
      },
      "63": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 246,
          column: 25
        }
      },
      "64": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 274,
          column: 9
        }
      },
      "65": {
        start: {
          line: 254,
          column: 27
        },
        end: {
          line: 254,
          column: 28
        }
      },
      "66": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 273,
          column: 13
        }
      },
      "67": {
        start: {
          line: 256,
          column: 16
        },
        end: {
          line: 256,
          column: 41
        }
      },
      "68": {
        start: {
          line: 259,
          column: 16
        },
        end: {
          line: 259,
          column: 34
        }
      },
      "69": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 263,
          column: 17
        }
      },
      "70": {
        start: {
          line: 262,
          column: 20
        },
        end: {
          line: 262,
          column: 32
        }
      },
      "71": {
        start: {
          line: 264,
          column: 16
        },
        end: {
          line: 266,
          column: 17
        }
      },
      "72": {
        start: {
          line: 265,
          column: 20
        },
        end: {
          line: 265,
          column: 32
        }
      },
      "73": {
        start: {
          line: 268,
          column: 30
        },
        end: {
          line: 270,
          column: 54
        }
      },
      "74": {
        start: {
          line: 271,
          column: 16
        },
        end: {
          line: 271,
          column: 99
        }
      },
      "75": {
        start: {
          line: 272,
          column: 16
        },
        end: {
          line: 272,
          column: 73
        }
      },
      "76": {
        start: {
          line: 272,
          column: 45
        },
        end: {
          line: 272,
          column: 71
        }
      },
      "77": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 275,
          column: 24
        }
      },
      "78": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 281,
          column: 59
        }
      },
      "79": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 287,
          column: 47
        }
      },
      "80": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 293,
          column: 29
        }
      },
      "81": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 294,
          column: 35
        }
      },
      "82": {
        start: {
          line: 295,
          column: 8
        },
        end: {
          line: 295,
          column: 65
        }
      },
      "83": {
        start: {
          line: 298,
          column: 0
        },
        end: {
          line: 298,
          column: 64
        }
      },
      "84": {
        start: {
          line: 300,
          column: 0
        },
        end: {
          line: 300,
          column: 70
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 14,
            column: 5
          }
        },
        loc: {
          start: {
            line: 14,
            column: 18
          },
          end: {
            line: 64,
            column: 5
          }
        },
        line: 14
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 68,
            column: 4
          },
          end: {
            line: 68,
            column: 5
          }
        },
        loc: {
          start: {
            line: 68,
            column: 23
          },
          end: {
            line: 99,
            column: 5
          }
        },
        line: 68
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 103,
            column: 4
          },
          end: {
            line: 103,
            column: 5
          }
        },
        loc: {
          start: {
            line: 103,
            column: 59
          },
          end: {
            line: 137,
            column: 5
          }
        },
        line: 103
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 116,
            column: 59
          },
          end: {
            line: 116,
            column: 60
          }
        },
        loc: {
          start: {
            line: 116,
            column: 71
          },
          end: {
            line: 126,
            column: 13
          }
        },
        line: 116
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 141,
            column: 4
          },
          end: {
            line: 141,
            column: 5
          }
        },
        loc: {
          start: {
            line: 141,
            column: 58
          },
          end: {
            line: 159,
            column: 5
          }
        },
        line: 141
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 163,
            column: 4
          },
          end: {
            line: 163,
            column: 5
          }
        },
        loc: {
          start: {
            line: 163,
            column: 57
          },
          end: {
            line: 189,
            column: 5
          }
        },
        line: 163
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 193,
            column: 4
          },
          end: {
            line: 193,
            column: 5
          }
        },
        loc: {
          start: {
            line: 193,
            column: 51
          },
          end: {
            line: 213,
            column: 5
          }
        },
        line: 193
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 217,
            column: 4
          },
          end: {
            line: 217,
            column: 5
          }
        },
        loc: {
          start: {
            line: 217,
            column: 40
          },
          end: {
            line: 247,
            column: 5
          }
        },
        line: 217
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 238,
            column: 17
          },
          end: {
            line: 238,
            column: 18
          }
        },
        loc: {
          start: {
            line: 238,
            column: 25
          },
          end: {
            line: 238,
            column: 36
          }
        },
        line: 238
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 239,
            column: 20
          },
          end: {
            line: 239,
            column: 21
          }
        },
        loc: {
          start: {
            line: 239,
            column: 28
          },
          end: {
            line: 239,
            column: 43
          }
        },
        line: 239
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 240,
            column: 17
          },
          end: {
            line: 240,
            column: 18
          }
        },
        loc: {
          start: {
            line: 240,
            column: 25
          },
          end: {
            line: 240,
            column: 54
          }
        },
        line: 240
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 241,
            column: 20
          },
          end: {
            line: 241,
            column: 21
          }
        },
        loc: {
          start: {
            line: 241,
            column: 28
          },
          end: {
            line: 241,
            column: 43
          }
        },
        line: 241
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 251,
            column: 4
          },
          end: {
            line: 251,
            column: 5
          }
        },
        loc: {
          start: {
            line: 251,
            column: 72
          },
          end: {
            line: 276,
            column: 5
          }
        },
        line: 251
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 272,
            column: 34
          },
          end: {
            line: 272,
            column: 35
          }
        },
        loc: {
          start: {
            line: 272,
            column: 45
          },
          end: {
            line: 272,
            column: 71
          }
        },
        line: 272
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 280,
            column: 4
          },
          end: {
            line: 280,
            column: 5
          }
        },
        loc: {
          start: {
            line: 280,
            column: 14
          },
          end: {
            line: 282,
            column: 5
          }
        },
        line: 280
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 286,
            column: 4
          },
          end: {
            line: 286,
            column: 5
          }
        },
        loc: {
          start: {
            line: 286,
            column: 30
          },
          end: {
            line: 288,
            column: 5
          }
        },
        line: 286
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 292,
            column: 4
          },
          end: {
            line: 292,
            column: 5
          }
        },
        loc: {
          start: {
            line: 292,
            column: 14
          },
          end: {
            line: 296,
            column: 5
          }
        },
        line: 292
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 74,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 74,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "1": {
        loc: {
          start: {
            line: 71,
            column: 16
          },
          end: {
            line: 71,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 71,
            column: 16
          },
          end: {
            line: 71,
            column: 44
          }
        }, {
          start: {
            line: 71,
            column: 48
          },
          end: {
            line: 71,
            column: 81
          }
        }],
        line: 71
      },
      "2": {
        loc: {
          start: {
            line: 77,
            column: 46
          },
          end: {
            line: 77,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 77,
            column: 46
          },
          end: {
            line: 77,
            column: 85
          }
        }, {
          start: {
            line: 77,
            column: 89
          },
          end: {
            line: 77,
            column: 97
          }
        }],
        line: 77
      },
      "3": {
        loc: {
          start: {
            line: 78,
            column: 46
          },
          end: {
            line: 78,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 78,
            column: 46
          },
          end: {
            line: 78,
            column: 85
          }
        }, {
          start: {
            line: 78,
            column: 89
          },
          end: {
            line: 78,
            column: 97
          }
        }],
        line: 78
      },
      "4": {
        loc: {
          start: {
            line: 82,
            column: 16
          },
          end: {
            line: 87,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 16
          },
          end: {
            line: 87,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 82
      },
      "5": {
        loc: {
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 92,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 92,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "6": {
        loc: {
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 105
      },
      "7": {
        loc: {
          start: {
            line: 109,
            column: 23
          },
          end: {
            line: 109,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 109,
            column: 23
          },
          end: {
            line: 109,
            column: 58
          }
        }, {
          start: {
            line: 109,
            column: 62
          },
          end: {
            line: 109,
            column: 89
          }
        }],
        line: 109
      },
      "8": {
        loc: {
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "9": {
        loc: {
          start: {
            line: 122,
            column: 27
          },
          end: {
            line: 122,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 122,
            column: 27
          },
          end: {
            line: 122,
            column: 38
          }
        }, {
          start: {
            line: 122,
            column: 42
          },
          end: {
            line: 122,
            column: 45
          }
        }],
        line: 122
      },
      "10": {
        loc: {
          start: {
            line: 123,
            column: 39
          },
          end: {
            line: 123,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 123,
            column: 39
          },
          end: {
            line: 123,
            column: 62
          }
        }, {
          start: {
            line: 123,
            column: 66
          },
          end: {
            line: 123,
            column: 69
          }
        }],
        line: 123
      },
      "11": {
        loc: {
          start: {
            line: 124,
            column: 38
          },
          end: {
            line: 124,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 124,
            column: 38
          },
          end: {
            line: 124,
            column: 60
          }
        }, {
          start: {
            line: 124,
            column: 64
          },
          end: {
            line: 124,
            column: 67
          }
        }],
        line: 124
      },
      "12": {
        loc: {
          start: {
            line: 127,
            column: 28
          },
          end: {
            line: 127,
            column: 159
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 127,
            column: 140
          },
          end: {
            line: 127,
            column: 146
          }
        }, {
          start: {
            line: 127,
            column: 149
          },
          end: {
            line: 127,
            column: 159
          }
        }],
        line: 127
      },
      "13": {
        loc: {
          start: {
            line: 127,
            column: 28
          },
          end: {
            line: 127,
            column: 137
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 127,
            column: 28
          },
          end: {
            line: 127,
            column: 120
          }
        }, {
          start: {
            line: 127,
            column: 124
          },
          end: {
            line: 127,
            column: 137
          }
        }],
        line: 127
      },
      "14": {
        loc: {
          start: {
            line: 127,
            column: 34
          },
          end: {
            line: 127,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 127,
            column: 91
          },
          end: {
            line: 127,
            column: 97
          }
        }, {
          start: {
            line: 127,
            column: 100
          },
          end: {
            line: 127,
            column: 110
          }
        }],
        line: 127
      },
      "15": {
        loc: {
          start: {
            line: 127,
            column: 34
          },
          end: {
            line: 127,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 127,
            column: 34
          },
          end: {
            line: 127,
            column: 71
          }
        }, {
          start: {
            line: 127,
            column: 75
          },
          end: {
            line: 127,
            column: 88
          }
        }],
        line: 127
      },
      "16": {
        loc: {
          start: {
            line: 128,
            column: 12
          },
          end: {
            line: 130,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 128,
            column: 12
          },
          end: {
            line: 130,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 128
      },
      "17": {
        loc: {
          start: {
            line: 184,
            column: 8
          },
          end: {
            line: 186,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 184,
            column: 8
          },
          end: {
            line: 186,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 184
      },
      "18": {
        loc: {
          start: {
            line: 243,
            column: 8
          },
          end: {
            line: 245,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 243,
            column: 8
          },
          end: {
            line: 245,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 243
      },
      "19": {
        loc: {
          start: {
            line: 251,
            column: 38
          },
          end: {
            line: 251,
            column: 52
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 251,
            column: 51
          },
          end: {
            line: 251,
            column: 52
          }
        }],
        line: 251
      },
      "20": {
        loc: {
          start: {
            line: 251,
            column: 54
          },
          end: {
            line: 251,
            column: 70
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 251,
            column: 66
          },
          end: {
            line: 251,
            column: 70
          }
        }],
        line: 251
      },
      "21": {
        loc: {
          start: {
            line: 261,
            column: 16
          },
          end: {
            line: 263,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 261,
            column: 16
          },
          end: {
            line: 263,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 261
      },
      "22": {
        loc: {
          start: {
            line: 261,
            column: 20
          },
          end: {
            line: 261,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 261,
            column: 20
          },
          end: {
            line: 261,
            column: 32
          }
        }, {
          start: {
            line: 261,
            column: 36
          },
          end: {
            line: 261,
            column: 85
          }
        }],
        line: 261
      },
      "23": {
        loc: {
          start: {
            line: 264,
            column: 16
          },
          end: {
            line: 266,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 264,
            column: 16
          },
          end: {
            line: 266,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 264
      },
      "24": {
        loc: {
          start: {
            line: 268,
            column: 30
          },
          end: {
            line: 270,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 269,
            column: 22
          },
          end: {
            line: 269,
            column: 124
          }
        }, {
          start: {
            line: 270,
            column: 22
          },
          end: {
            line: 270,
            column: 54
          }
        }],
        line: 268
      },
      "25": {
        loc: {
          start: {
            line: 269,
            column: 31
          },
          end: {
            line: 269,
            column: 116
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 269,
            column: 32
          },
          end: {
            line: 269,
            column: 107
          }
        }, {
          start: {
            line: 269,
            column: 112
          },
          end: {
            line: 269,
            column: 116
          }
        }],
        line: 269
      },
      "26": {
        loc: {
          start: {
            line: 269,
            column: 32
          },
          end: {
            line: 269,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 269,
            column: 81
          },
          end: {
            line: 269,
            column: 87
          }
        }, {
          start: {
            line: 269,
            column: 90
          },
          end: {
            line: 269,
            column: 107
          }
        }],
        line: 269
      },
      "27": {
        loc: {
          start: {
            line: 269,
            column: 32
          },
          end: {
            line: 269,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 269,
            column: 32
          },
          end: {
            line: 269,
            column: 61
          }
        }, {
          start: {
            line: 269,
            column: 65
          },
          end: {
            line: 269,
            column: 78
          }
        }],
        line: 269
      },
      "28": {
        loc: {
          start: {
            line: 281,
            column: 15
          },
          end: {
            line: 281,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 281,
            column: 15
          },
          end: {
            line: 281,
            column: 33
          }
        }, {
          start: {
            line: 281,
            column: 37
          },
          end: {
            line: 281,
            column: 58
          }
        }],
        line: 281
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0],
      "20": [0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/services/azure-openai-enhanced.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/services/azure-openai-enhanced.ts"],
      sourcesContent: ["/**\n * Enhanced Azure OpenAI Service with Multi-Deployment Support\n * \n * This service provides intelligent model selection based on task type:\n * - gpt-35-turbo: Fast, cost-effective for simple tasks (relevancy scoring, basic Q&A)\n * - gpt-4o: Advanced reasoning for complex tasks (cover letters, resume tailoring)\n */\n\nimport { MigrationOpenAIClient as OpenAI } from '@/lib/azure-ai-foundry/clients/migration-wrapper';\nimport { fetchAzureSecrets } from '@/lib/azure-config-browser';\n\ninterface ModelConfiguration {\n  deployment: string;\n  temperature: number;\n  maxTokens: number;\n  topP?: number;\n  frequencyPenalty?: number;\n  presencePenalty?: number;\n}\n\ninterface TaskConfigurations {\n  [key: string]: ModelConfiguration;\n}\n\nexport class EnhancedAzureOpenAIService {\n  private clients: Map<string, OpenAI> = new Map();\n  private isInitialized = false;\n  private secrets: any = null;\n\n  // Task-specific configurations optimized for different models\n  private taskConfigurations: TaskConfigurations = {\n    // Fast tasks - use gpt-35-turbo for efficiency\n    'relevancy': {\n      deployment: 'gpt-4o',\n      temperature: 0.1,      // Low temperature for consistent scoring\n      maxTokens: 50,         // Short numeric response\n      topP: 0.9,\n      frequencyPenalty: 0.0,\n      presencePenalty: 0.0\n    },\n    \n    'questions': {\n      deployment: 'gpt-4o',\n      temperature: 0.5,      // Moderate creativity for question variety\n      maxTokens: 300,        // Multiple questions\n      topP: 0.9,\n      frequencyPenalty: 0.1,\n      presencePenalty: 0.1\n    },\n\n    // Complex tasks - use gpt-4o for quality\n    'cover-letter': {\n      deployment: 'gpt-4o',\n      temperature: 0.7,      // Balanced creativity for quality output\n      maxTokens: 1500,       // Full cover letter\n      topP: 0.9,\n      frequencyPenalty: 0.1,\n      presencePenalty: 0.1\n    },\n\n    'resume-tailor': {\n      deployment: 'gpt-4o',\n      temperature: 0.3,      // Lower temperature for precision\n      maxTokens: 2000,       // Full resume content\n      topP: 0.9,\n      frequencyPenalty: 0.1,\n      presencePenalty: 0.1\n    },\n\n    // Interview tasks - use gpt-4o for nuanced conversation\n    'interview': {\n      deployment: 'gpt-4o',\n      temperature: 0.7,      // Natural conversation\n      maxTokens: 200,        // Concise responses\n      topP: 0.9,\n      frequencyPenalty: 0.1,\n      presencePenalty: 0.1\n    }\n  };\n\n  /**\n   * Initialize the service with multiple deployment clients\n   */\n  async initialize(): Promise<boolean> {\n    try {\n      this.secrets = await fetchAzureSecrets();\n      \n      if (!this.secrets.azureOpenAIKey || !this.secrets.azureOpenAIEndpoint) {\n        console.warn('\u26A0\uFE0F Azure OpenAI credentials not available');\n        return false;\n      }\n\n      // Initialize clients for different deployments\n      const deployments = [\n        { name: 'gpt-4o', deployment: this.secrets.azureOpenAIGpt35Deployment || 'gpt-4o' },\n        { name: 'gpt-4o', deployment: this.secrets.azureOpenAIGpt4oDeployment || 'gpt-4o' },\n        { name: 'default', deployment: this.secrets.azureOpenAIDeployment }\n      ];\n\n      for (const { name, deployment } of deployments) {\n        if (deployment) {\n          const client = new OpenAI();\n          await client.init(); // Initialize the migration client\n          \n          this.clients.set(name, client);\n          console.log(`\u2705 Azure OpenAI client initialized for ${name} (${deployment})`);\n        }\n      }\n\n      this.isInitialized = this.clients.size > 0;\n      \n      if (this.isInitialized) {\n        console.log(`\u2705 Enhanced Azure OpenAI Service initialized with ${this.clients.size} clients`);\n      }\n      \n      return this.isInitialized;\n    } catch (error) {\n      console.error('\u274C Failed to initialize Enhanced Azure OpenAI Service:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Generate content using the optimal model for the task\n   */\n  async generateContent(\n    prompt: string,\n    taskType: keyof TaskConfigurations,\n    customOptions?: Partial<ModelConfiguration>\n  ): Promise<string> {\n    if (!this.isInitialized) {\n      throw new Error('Enhanced Azure OpenAI Service not initialized');\n    }\n\n    const config = { ...this.taskConfigurations[taskType], ...customOptions };\n    const client = this.clients.get(config.deployment) || this.clients.get('default');\n    \n    if (!client) {\n      throw new Error(`No client available for deployment: ${config.deployment}`);\n    }\n\n    console.log(`\uD83C\uDFAF Using ${config.deployment} for ${taskType} task`);\n\n    const messages = [{ role: 'user' as const, content: prompt }];\n\n    try {\n      const completion = await this.retryWithBackoff(async () => {\n        return await client.chat.completions.create({\n          model: config.deployment,\n          messages,\n          temperature: config.temperature,\n          max_tokens: config.maxTokens,\n          top_p: config.topP || 0.9,\n          frequency_penalty: config.frequencyPenalty || 0.1,\n          presence_penalty: config.presencePenalty || 0.1,\n        });\n      });\n\n      const content = completion.choices[0]?.message?.content;\n      if (!content) {\n        throw new Error(`Empty response from Azure OpenAI (${config.deployment})`);\n      }\n\n      return content;\n    } catch (error) {\n      console.error(`\u274C Error generating content with ${config.deployment}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Generate cover letter using gpt-4o for high quality\n   */\n  async generateCoverLetter(resumeText: string, jobDescription: string): Promise<string> {\n    const prompt = `You are an expert career coach and professional writer. Please generate a compelling cover letter based on the provided resume and job description.\n\nJOB DESCRIPTION:\n${jobDescription}\n\nRESUME:\n${resumeText}\n\nPlease generate a cover letter that:\n1. Is tailored to the specific job description\n2. Highlights the most relevant skills and experiences from the resume\n3. Has a professional and engaging tone\n4. Is well-structured and easy to read\n5. Is approximately 3-4 paragraphs long\n\nReturn ONLY the cover letter content with no additional commentary or explanations.`;\n\n    return await this.generateContent(prompt, 'cover-letter');\n  }\n\n  /**\n   * Calculate relevancy score using gpt-35-turbo for efficiency\n   */\n  async calculateRelevancy(resumeText: string, jobDescription: string): Promise<number> {\n    const prompt = `You are an expert ATS (Applicant Tracking System) analyzer. Please analyze the relevancy between this resume and job description.\n\nJOB DESCRIPTION:\n${jobDescription}\n\nRESUME:\n${resumeText}\n\nAnalyze the match between the resume and job description considering:\n1. Skills alignment (technical and soft skills)\n2. Experience relevance (years and type of experience)\n3. Education and certifications match\n4. Industry experience\n5. Role responsibilities alignment\n6. Keywords and terminology match\n\nReturn ONLY a single number between 0 and 100 representing the percentage match/relevancy score. No explanations or additional text.`;\n\n    const response = await this.generateContent(prompt, 'relevancy');\n    \n    // Extract number from response\n    const scoreMatch = response.trim().match(/\\d+/);\n    if (!scoreMatch) {\n      throw new Error('Could not extract relevancy score from response');\n    }\n    \n    const score = parseInt(scoreMatch[0], 10);\n    return Math.max(0, Math.min(100, score)); // Ensure score is between 0-100\n  }\n\n  /**\n   * Tailor resume using gpt-4o for quality\n   */\n  async tailorResume(resumeText: string, jobDescription: string): Promise<string> {\n    const prompt = `You are an expert resume writer and ATS optimization specialist. Please tailor this resume to better match the following job description for maximum ATS compatibility and relevance.\n\nJOB DESCRIPTION:\n${jobDescription}\n\nCURRENT RESUME:\n${resumeText}\n\nPlease provide a tailored version of the resume that:\n1. Uses keywords and phrases directly from the job description\n2. Highlights relevant skills and experiences that match the job requirements\n3. Maintains professional formatting and ATS-friendly structure\n4. Uses strong action verbs and quantifiable achievements\n5. Keeps the same overall length and format structure\n6. Optimizes for Applicant Tracking Systems (ATS)\n7. Ensures keyword density without keyword stuffing\n\nReturn ONLY the tailored resume content with no additional commentary or explanations.`;\n\n    return await this.generateContent(prompt, 'resume-tailor');\n  }\n\n  /**\n   * Generate interview questions using gpt-35-turbo for efficiency\n   */\n  async generateQuestions(resumeInfo: {name: string, experience: string, education: string, skills: string}): Promise<string[]> {\n    const prompt = `You are an experienced interviewer. Based on the following resume information, generate 5 relevant interview questions that would help assess this candidate's qualifications and fit for their field.\n\nRESUME INFORMATION:\nName: ${resumeInfo.name}\nExperience: ${resumeInfo.experience}\nEducation: ${resumeInfo.education}\nSkills: ${resumeInfo.skills}\n\nGenerate questions that:\n1. Are specific to their experience level and field\n2. Assess both technical and behavioral competencies\n3. Are professional and engaging\n4. Would help determine cultural fit\n5. Allow the candidate to showcase their strengths\n\nFormat: Return exactly 5 questions, each on a new line, numbered 1-5. No additional text or explanations.`;\n\n    const response = await this.generateContent(prompt, 'questions');\n    \n    // Parse questions from response\n    const questions = response\n      .split('\\n')\n      .map(line => line.trim())\n      .filter(line => line.length > 0)\n      .map(line => line.replace(/^\\d+\\.\\s*/, '')) // Remove numbering\n      .filter(line => line.length > 0)\n      .slice(0, 5); // Ensure max 5 questions\n\n    if (questions.length === 0) {\n      throw new Error('No questions could be parsed from response');\n    }\n\n    return questions;\n  }\n\n  /**\n   * Retry mechanism with exponential backoff for rate limiting\n   */\n  private async retryWithBackoff<T>(\n    operation: () => Promise<T>,\n    maxRetries: number = 3,\n    baseDelay: number = 1000\n  ): Promise<T> {\n    let lastError: Error;\n    \n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\n      try {\n        return await operation();\n      } catch (error: any) {\n        lastError = error;\n        \n        // Don't retry on non-retryable errors\n        if (error.status && ![429, 500, 502, 503, 504].includes(error.status)) {\n          throw error;\n        }\n        \n        if (attempt === maxRetries) {\n          throw error;\n        }\n        \n        // Calculate delay with exponential backoff\n        const delay = error.status === 429 \n          ? parseInt(error.headers?.['retry-after'] || '10') * 1000\n          : baseDelay * Math.pow(2, attempt);\n        \n        console.log(`\u23F3 Retrying in ${delay}ms (attempt ${attempt + 1}/${maxRetries + 1})`);\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n    \n    throw lastError!;\n  }\n\n  /**\n   * Check if service is ready\n   */\n  isReady(): boolean {\n    return this.isInitialized && this.clients.size > 0;\n  }\n\n  /**\n   * Get available deployments\n   */\n  getAvailableDeployments(): string[] {\n    return Array.from(this.clients.keys());\n  }\n\n  /**\n   * Dispose of resources\n   */\n  dispose(): void {\n    this.clients.clear();\n    this.isInitialized = false;\n    console.log('\uD83E\uDDF9 Enhanced Azure OpenAI Service disposed');\n  }\n}\n\n// Export singleton instance\nexport const enhancedAzureOpenAIService = new EnhancedAzureOpenAIService();\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5212c9591f3fed1b0c5db662ec7b7c25a5fa4440"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1h6rwmcmx5 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1h6rwmcmx5();
cov_1h6rwmcmx5().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1h6rwmcmx5().s[1]++;
exports.enhancedAzureOpenAIService = exports.EnhancedAzureOpenAIService = void 0;
const migration_wrapper_1 =
/* istanbul ignore next */
(cov_1h6rwmcmx5().s[2]++, require("@/lib/azure-ai-foundry/clients/migration-wrapper"));
const azure_config_browser_1 =
/* istanbul ignore next */
(cov_1h6rwmcmx5().s[3]++, require("@/lib/azure-config-browser"));
class EnhancedAzureOpenAIService {
  constructor() {
    /* istanbul ignore next */
    cov_1h6rwmcmx5().f[0]++;
    cov_1h6rwmcmx5().s[4]++;
    this.clients = new Map();
    /* istanbul ignore next */
    cov_1h6rwmcmx5().s[5]++;
    this.isInitialized = false;
    /* istanbul ignore next */
    cov_1h6rwmcmx5().s[6]++;
    this.secrets = null;
    // Task-specific configurations optimized for different models
    /* istanbul ignore next */
    cov_1h6rwmcmx5().s[7]++;
    this.taskConfigurations = {
      // Fast tasks - use gpt-35-turbo for efficiency
      'relevancy': {
        deployment: 'gpt-4o',
        temperature: 0.1,
        // Low temperature for consistent scoring
        maxTokens: 50,
        // Short numeric response
        topP: 0.9,
        frequencyPenalty: 0.0,
        presencePenalty: 0.0
      },
      'questions': {
        deployment: 'gpt-4o',
        temperature: 0.5,
        // Moderate creativity for question variety
        maxTokens: 300,
        // Multiple questions
        topP: 0.9,
        frequencyPenalty: 0.1,
        presencePenalty: 0.1
      },
      // Complex tasks - use gpt-4o for quality
      'cover-letter': {
        deployment: 'gpt-4o',
        temperature: 0.7,
        // Balanced creativity for quality output
        maxTokens: 1500,
        // Full cover letter
        topP: 0.9,
        frequencyPenalty: 0.1,
        presencePenalty: 0.1
      },
      'resume-tailor': {
        deployment: 'gpt-4o',
        temperature: 0.3,
        // Lower temperature for precision
        maxTokens: 2000,
        // Full resume content
        topP: 0.9,
        frequencyPenalty: 0.1,
        presencePenalty: 0.1
      },
      // Interview tasks - use gpt-4o for nuanced conversation
      'interview': {
        deployment: 'gpt-4o',
        temperature: 0.7,
        // Natural conversation
        maxTokens: 200,
        // Concise responses
        topP: 0.9,
        frequencyPenalty: 0.1,
        presencePenalty: 0.1
      }
    };
  }
  /**
   * Initialize the service with multiple deployment clients
   */
  async initialize() {
    /* istanbul ignore next */
    cov_1h6rwmcmx5().f[1]++;
    cov_1h6rwmcmx5().s[8]++;
    try {
      /* istanbul ignore next */
      cov_1h6rwmcmx5().s[9]++;
      this.secrets = await (0, azure_config_browser_1.fetchAzureSecrets)();
      /* istanbul ignore next */
      cov_1h6rwmcmx5().s[10]++;
      if (
      /* istanbul ignore next */
      (cov_1h6rwmcmx5().b[1][0]++, !this.secrets.azureOpenAIKey) ||
      /* istanbul ignore next */
      (cov_1h6rwmcmx5().b[1][1]++, !this.secrets.azureOpenAIEndpoint)) {
        /* istanbul ignore next */
        cov_1h6rwmcmx5().b[0][0]++;
        cov_1h6rwmcmx5().s[11]++;
        console.warn('⚠️ Azure OpenAI credentials not available');
        /* istanbul ignore next */
        cov_1h6rwmcmx5().s[12]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_1h6rwmcmx5().b[0][1]++;
      }
      // Initialize clients for different deployments
      const deployments =
      /* istanbul ignore next */
      (cov_1h6rwmcmx5().s[13]++, [{
        name: 'gpt-4o',
        deployment:
        /* istanbul ignore next */
        (cov_1h6rwmcmx5().b[2][0]++, this.secrets.azureOpenAIGpt35Deployment) ||
        /* istanbul ignore next */
        (cov_1h6rwmcmx5().b[2][1]++, 'gpt-4o')
      }, {
        name: 'gpt-4o',
        deployment:
        /* istanbul ignore next */
        (cov_1h6rwmcmx5().b[3][0]++, this.secrets.azureOpenAIGpt4oDeployment) ||
        /* istanbul ignore next */
        (cov_1h6rwmcmx5().b[3][1]++, 'gpt-4o')
      }, {
        name: 'default',
        deployment: this.secrets.azureOpenAIDeployment
      }]);
      /* istanbul ignore next */
      cov_1h6rwmcmx5().s[14]++;
      for (const {
        name,
        deployment
      } of deployments) {
        /* istanbul ignore next */
        cov_1h6rwmcmx5().s[15]++;
        if (deployment) {
          /* istanbul ignore next */
          cov_1h6rwmcmx5().b[4][0]++;
          const client =
          /* istanbul ignore next */
          (cov_1h6rwmcmx5().s[16]++, new migration_wrapper_1.MigrationOpenAIClient());
          /* istanbul ignore next */
          cov_1h6rwmcmx5().s[17]++;
          await client.init(); // Initialize the migration client
          /* istanbul ignore next */
          cov_1h6rwmcmx5().s[18]++;
          this.clients.set(name, client);
          /* istanbul ignore next */
          cov_1h6rwmcmx5().s[19]++;
          console.log(`✅ Azure OpenAI client initialized for ${name} (${deployment})`);
        } else
        /* istanbul ignore next */
        {
          cov_1h6rwmcmx5().b[4][1]++;
        }
      }
      /* istanbul ignore next */
      cov_1h6rwmcmx5().s[20]++;
      this.isInitialized = this.clients.size > 0;
      /* istanbul ignore next */
      cov_1h6rwmcmx5().s[21]++;
      if (this.isInitialized) {
        /* istanbul ignore next */
        cov_1h6rwmcmx5().b[5][0]++;
        cov_1h6rwmcmx5().s[22]++;
        console.log(`✅ Enhanced Azure OpenAI Service initialized with ${this.clients.size} clients`);
      } else
      /* istanbul ignore next */
      {
        cov_1h6rwmcmx5().b[5][1]++;
      }
      cov_1h6rwmcmx5().s[23]++;
      return this.isInitialized;
    } catch (error) {
      /* istanbul ignore next */
      cov_1h6rwmcmx5().s[24]++;
      console.error('❌ Failed to initialize Enhanced Azure OpenAI Service:', error);
      /* istanbul ignore next */
      cov_1h6rwmcmx5().s[25]++;
      return false;
    }
  }
  /**
   * Generate content using the optimal model for the task
   */
  async generateContent(prompt, taskType, customOptions) {
    /* istanbul ignore next */
    cov_1h6rwmcmx5().f[2]++;
    var _a, _b;
    /* istanbul ignore next */
    cov_1h6rwmcmx5().s[26]++;
    if (!this.isInitialized) {
      /* istanbul ignore next */
      cov_1h6rwmcmx5().b[6][0]++;
      cov_1h6rwmcmx5().s[27]++;
      throw new Error('Enhanced Azure OpenAI Service not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_1h6rwmcmx5().b[6][1]++;
    }
    const config =
    /* istanbul ignore next */
    (cov_1h6rwmcmx5().s[28]++, Object.assign(Object.assign({}, this.taskConfigurations[taskType]), customOptions));
    const client =
    /* istanbul ignore next */
    (cov_1h6rwmcmx5().s[29]++,
    /* istanbul ignore next */
    (cov_1h6rwmcmx5().b[7][0]++, this.clients.get(config.deployment)) ||
    /* istanbul ignore next */
    (cov_1h6rwmcmx5().b[7][1]++, this.clients.get('default')));
    /* istanbul ignore next */
    cov_1h6rwmcmx5().s[30]++;
    if (!client) {
      /* istanbul ignore next */
      cov_1h6rwmcmx5().b[8][0]++;
      cov_1h6rwmcmx5().s[31]++;
      throw new Error(`No client available for deployment: ${config.deployment}`);
    } else
    /* istanbul ignore next */
    {
      cov_1h6rwmcmx5().b[8][1]++;
    }
    cov_1h6rwmcmx5().s[32]++;
    console.log(`🎯 Using ${config.deployment} for ${taskType} task`);
    const messages =
    /* istanbul ignore next */
    (cov_1h6rwmcmx5().s[33]++, [{
      role: 'user',
      content: prompt
    }]);
    /* istanbul ignore next */
    cov_1h6rwmcmx5().s[34]++;
    try {
      const completion =
      /* istanbul ignore next */
      (cov_1h6rwmcmx5().s[35]++, await this.retryWithBackoff(async () => {
        /* istanbul ignore next */
        cov_1h6rwmcmx5().f[3]++;
        cov_1h6rwmcmx5().s[36]++;
        return await client.chat.completions.create({
          model: config.deployment,
          messages,
          temperature: config.temperature,
          max_tokens: config.maxTokens,
          top_p:
          /* istanbul ignore next */
          (cov_1h6rwmcmx5().b[9][0]++, config.topP) ||
          /* istanbul ignore next */
          (cov_1h6rwmcmx5().b[9][1]++, 0.9),
          frequency_penalty:
          /* istanbul ignore next */
          (cov_1h6rwmcmx5().b[10][0]++, config.frequencyPenalty) ||
          /* istanbul ignore next */
          (cov_1h6rwmcmx5().b[10][1]++, 0.1),
          presence_penalty:
          /* istanbul ignore next */
          (cov_1h6rwmcmx5().b[11][0]++, config.presencePenalty) ||
          /* istanbul ignore next */
          (cov_1h6rwmcmx5().b[11][1]++, 0.1)
        });
      }));
      const content =
      /* istanbul ignore next */
      (cov_1h6rwmcmx5().s[37]++,
      /* istanbul ignore next */
      (cov_1h6rwmcmx5().b[13][0]++, (_b =
      /* istanbul ignore next */
      (cov_1h6rwmcmx5().b[15][0]++, (_a = completion.choices[0]) === null) ||
      /* istanbul ignore next */
      (cov_1h6rwmcmx5().b[15][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_1h6rwmcmx5().b[14][0]++, void 0) :
      /* istanbul ignore next */
      (cov_1h6rwmcmx5().b[14][1]++, _a.message)) === null) ||
      /* istanbul ignore next */
      (cov_1h6rwmcmx5().b[13][1]++, _b === void 0) ?
      /* istanbul ignore next */
      (cov_1h6rwmcmx5().b[12][0]++, void 0) :
      /* istanbul ignore next */
      (cov_1h6rwmcmx5().b[12][1]++, _b.content));
      /* istanbul ignore next */
      cov_1h6rwmcmx5().s[38]++;
      if (!content) {
        /* istanbul ignore next */
        cov_1h6rwmcmx5().b[16][0]++;
        cov_1h6rwmcmx5().s[39]++;
        throw new Error(`Empty response from Azure OpenAI (${config.deployment})`);
      } else
      /* istanbul ignore next */
      {
        cov_1h6rwmcmx5().b[16][1]++;
      }
      cov_1h6rwmcmx5().s[40]++;
      return content;
    } catch (error) {
      /* istanbul ignore next */
      cov_1h6rwmcmx5().s[41]++;
      console.error(`❌ Error generating content with ${config.deployment}:`, error);
      /* istanbul ignore next */
      cov_1h6rwmcmx5().s[42]++;
      throw error;
    }
  }
  /**
   * Generate cover letter using gpt-4o for high quality
   */
  async generateCoverLetter(resumeText, jobDescription) {
    /* istanbul ignore next */
    cov_1h6rwmcmx5().f[4]++;
    const prompt =
    /* istanbul ignore next */
    (cov_1h6rwmcmx5().s[43]++, `You are an expert career coach and professional writer. Please generate a compelling cover letter based on the provided resume and job description.

JOB DESCRIPTION:
${jobDescription}

RESUME:
${resumeText}

Please generate a cover letter that:
1. Is tailored to the specific job description
2. Highlights the most relevant skills and experiences from the resume
3. Has a professional and engaging tone
4. Is well-structured and easy to read
5. Is approximately 3-4 paragraphs long

Return ONLY the cover letter content with no additional commentary or explanations.`);
    /* istanbul ignore next */
    cov_1h6rwmcmx5().s[44]++;
    return await this.generateContent(prompt, 'cover-letter');
  }
  /**
   * Calculate relevancy score using gpt-35-turbo for efficiency
   */
  async calculateRelevancy(resumeText, jobDescription) {
    /* istanbul ignore next */
    cov_1h6rwmcmx5().f[5]++;
    const prompt =
    /* istanbul ignore next */
    (cov_1h6rwmcmx5().s[45]++, `You are an expert ATS (Applicant Tracking System) analyzer. Please analyze the relevancy between this resume and job description.

JOB DESCRIPTION:
${jobDescription}

RESUME:
${resumeText}

Analyze the match between the resume and job description considering:
1. Skills alignment (technical and soft skills)
2. Experience relevance (years and type of experience)
3. Education and certifications match
4. Industry experience
5. Role responsibilities alignment
6. Keywords and terminology match

Return ONLY a single number between 0 and 100 representing the percentage match/relevancy score. No explanations or additional text.`);
    const response =
    /* istanbul ignore next */
    (cov_1h6rwmcmx5().s[46]++, await this.generateContent(prompt, 'relevancy'));
    // Extract number from response
    const scoreMatch =
    /* istanbul ignore next */
    (cov_1h6rwmcmx5().s[47]++, response.trim().match(/\d+/));
    /* istanbul ignore next */
    cov_1h6rwmcmx5().s[48]++;
    if (!scoreMatch) {
      /* istanbul ignore next */
      cov_1h6rwmcmx5().b[17][0]++;
      cov_1h6rwmcmx5().s[49]++;
      throw new Error('Could not extract relevancy score from response');
    } else
    /* istanbul ignore next */
    {
      cov_1h6rwmcmx5().b[17][1]++;
    }
    const score =
    /* istanbul ignore next */
    (cov_1h6rwmcmx5().s[50]++, parseInt(scoreMatch[0], 10));
    /* istanbul ignore next */
    cov_1h6rwmcmx5().s[51]++;
    return Math.max(0, Math.min(100, score)); // Ensure score is between 0-100
  }
  /**
   * Tailor resume using gpt-4o for quality
   */
  async tailorResume(resumeText, jobDescription) {
    /* istanbul ignore next */
    cov_1h6rwmcmx5().f[6]++;
    const prompt =
    /* istanbul ignore next */
    (cov_1h6rwmcmx5().s[52]++, `You are an expert resume writer and ATS optimization specialist. Please tailor this resume to better match the following job description for maximum ATS compatibility and relevance.

JOB DESCRIPTION:
${jobDescription}

CURRENT RESUME:
${resumeText}

Please provide a tailored version of the resume that:
1. Uses keywords and phrases directly from the job description
2. Highlights relevant skills and experiences that match the job requirements
3. Maintains professional formatting and ATS-friendly structure
4. Uses strong action verbs and quantifiable achievements
5. Keeps the same overall length and format structure
6. Optimizes for Applicant Tracking Systems (ATS)
7. Ensures keyword density without keyword stuffing

Return ONLY the tailored resume content with no additional commentary or explanations.`);
    /* istanbul ignore next */
    cov_1h6rwmcmx5().s[53]++;
    return await this.generateContent(prompt, 'resume-tailor');
  }
  /**
   * Generate interview questions using gpt-35-turbo for efficiency
   */
  async generateQuestions(resumeInfo) {
    /* istanbul ignore next */
    cov_1h6rwmcmx5().f[7]++;
    const prompt =
    /* istanbul ignore next */
    (cov_1h6rwmcmx5().s[54]++, `You are an experienced interviewer. Based on the following resume information, generate 5 relevant interview questions that would help assess this candidate's qualifications and fit for their field.

RESUME INFORMATION:
Name: ${resumeInfo.name}
Experience: ${resumeInfo.experience}
Education: ${resumeInfo.education}
Skills: ${resumeInfo.skills}

Generate questions that:
1. Are specific to their experience level and field
2. Assess both technical and behavioral competencies
3. Are professional and engaging
4. Would help determine cultural fit
5. Allow the candidate to showcase their strengths

Format: Return exactly 5 questions, each on a new line, numbered 1-5. No additional text or explanations.`);
    const response =
    /* istanbul ignore next */
    (cov_1h6rwmcmx5().s[55]++, await this.generateContent(prompt, 'questions'));
    // Parse questions from response
    const questions =
    /* istanbul ignore next */
    (cov_1h6rwmcmx5().s[56]++, response.split('\n').map(line => {
      /* istanbul ignore next */
      cov_1h6rwmcmx5().f[8]++;
      cov_1h6rwmcmx5().s[57]++;
      return line.trim();
    }).filter(line => {
      /* istanbul ignore next */
      cov_1h6rwmcmx5().f[9]++;
      cov_1h6rwmcmx5().s[58]++;
      return line.length > 0;
    }).map(line => {
      /* istanbul ignore next */
      cov_1h6rwmcmx5().f[10]++;
      cov_1h6rwmcmx5().s[59]++;
      return line.replace(/^\d+\.\s*/, '');
    }) // Remove numbering
    .filter(line => {
      /* istanbul ignore next */
      cov_1h6rwmcmx5().f[11]++;
      cov_1h6rwmcmx5().s[60]++;
      return line.length > 0;
    }).slice(0, 5)); // Ensure max 5 questions
    /* istanbul ignore next */
    cov_1h6rwmcmx5().s[61]++;
    if (questions.length === 0) {
      /* istanbul ignore next */
      cov_1h6rwmcmx5().b[18][0]++;
      cov_1h6rwmcmx5().s[62]++;
      throw new Error('No questions could be parsed from response');
    } else
    /* istanbul ignore next */
    {
      cov_1h6rwmcmx5().b[18][1]++;
    }
    cov_1h6rwmcmx5().s[63]++;
    return questions;
  }
  /**
   * Retry mechanism with exponential backoff for rate limiting
   */
  async retryWithBackoff(operation, maxRetries =
  /* istanbul ignore next */
  (cov_1h6rwmcmx5().b[19][0]++, 3), baseDelay =
  /* istanbul ignore next */
  (cov_1h6rwmcmx5().b[20][0]++, 1000)) {
    /* istanbul ignore next */
    cov_1h6rwmcmx5().f[12]++;
    var _a;
    let lastError;
    /* istanbul ignore next */
    cov_1h6rwmcmx5().s[64]++;
    for (let attempt =
    /* istanbul ignore next */
    (cov_1h6rwmcmx5().s[65]++, 0); attempt <= maxRetries; attempt++) {
      /* istanbul ignore next */
      cov_1h6rwmcmx5().s[66]++;
      try {
        /* istanbul ignore next */
        cov_1h6rwmcmx5().s[67]++;
        return await operation();
      } catch (error) {
        /* istanbul ignore next */
        cov_1h6rwmcmx5().s[68]++;
        lastError = error;
        // Don't retry on non-retryable errors
        /* istanbul ignore next */
        cov_1h6rwmcmx5().s[69]++;
        if (
        /* istanbul ignore next */
        (cov_1h6rwmcmx5().b[22][0]++, error.status) &&
        /* istanbul ignore next */
        (cov_1h6rwmcmx5().b[22][1]++, ![429, 500, 502, 503, 504].includes(error.status))) {
          /* istanbul ignore next */
          cov_1h6rwmcmx5().b[21][0]++;
          cov_1h6rwmcmx5().s[70]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_1h6rwmcmx5().b[21][1]++;
        }
        cov_1h6rwmcmx5().s[71]++;
        if (attempt === maxRetries) {
          /* istanbul ignore next */
          cov_1h6rwmcmx5().b[23][0]++;
          cov_1h6rwmcmx5().s[72]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_1h6rwmcmx5().b[23][1]++;
        }
        // Calculate delay with exponential backoff
        const delay =
        /* istanbul ignore next */
        (cov_1h6rwmcmx5().s[73]++, error.status === 429 ?
        /* istanbul ignore next */
        (cov_1h6rwmcmx5().b[24][0]++, parseInt(
        /* istanbul ignore next */
        (cov_1h6rwmcmx5().b[25][0]++,
        /* istanbul ignore next */
        (cov_1h6rwmcmx5().b[27][0]++, (_a = error.headers) === null) ||
        /* istanbul ignore next */
        (cov_1h6rwmcmx5().b[27][1]++, _a === void 0) ?
        /* istanbul ignore next */
        (cov_1h6rwmcmx5().b[26][0]++, void 0) :
        /* istanbul ignore next */
        (cov_1h6rwmcmx5().b[26][1]++, _a['retry-after'])) ||
        /* istanbul ignore next */
        (cov_1h6rwmcmx5().b[25][1]++, '10')) * 1000) :
        /* istanbul ignore next */
        (cov_1h6rwmcmx5().b[24][1]++, baseDelay * Math.pow(2, attempt)));
        /* istanbul ignore next */
        cov_1h6rwmcmx5().s[74]++;
        console.log(`⏳ Retrying in ${delay}ms (attempt ${attempt + 1}/${maxRetries + 1})`);
        /* istanbul ignore next */
        cov_1h6rwmcmx5().s[75]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_1h6rwmcmx5().f[13]++;
          cov_1h6rwmcmx5().s[76]++;
          return setTimeout(resolve, delay);
        });
      }
    }
    /* istanbul ignore next */
    cov_1h6rwmcmx5().s[77]++;
    throw lastError;
  }
  /**
   * Check if service is ready
   */
  isReady() {
    /* istanbul ignore next */
    cov_1h6rwmcmx5().f[14]++;
    cov_1h6rwmcmx5().s[78]++;
    return /* istanbul ignore next */(cov_1h6rwmcmx5().b[28][0]++, this.isInitialized) &&
    /* istanbul ignore next */
    (cov_1h6rwmcmx5().b[28][1]++, this.clients.size > 0);
  }
  /**
   * Get available deployments
   */
  getAvailableDeployments() {
    /* istanbul ignore next */
    cov_1h6rwmcmx5().f[15]++;
    cov_1h6rwmcmx5().s[79]++;
    return Array.from(this.clients.keys());
  }
  /**
   * Dispose of resources
   */
  dispose() {
    /* istanbul ignore next */
    cov_1h6rwmcmx5().f[16]++;
    cov_1h6rwmcmx5().s[80]++;
    this.clients.clear();
    /* istanbul ignore next */
    cov_1h6rwmcmx5().s[81]++;
    this.isInitialized = false;
    /* istanbul ignore next */
    cov_1h6rwmcmx5().s[82]++;
    console.log('🧹 Enhanced Azure OpenAI Service disposed');
  }
}
/* istanbul ignore next */
cov_1h6rwmcmx5().s[83]++;
exports.EnhancedAzureOpenAIService = EnhancedAzureOpenAIService;
// Export singleton instance
/* istanbul ignore next */
cov_1h6rwmcmx5().s[84]++;
exports.enhancedAzureOpenAIService = new EnhancedAzureOpenAIService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,