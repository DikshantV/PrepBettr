{"version":3,"names":["cov_ref6fta5e","actualCoverage","s","exports","retryWithExponentialBackoff","applicationinsights_web_1","require","RetryWithBackoff","initialize","instrumentationKey","f","b","window","appInsights","ApplicationInsights","config","enableAutoRouteTracking","loadAppInsights","execute","fn","options","maxRetries","baseDelay","maxDelay","jitter","retryCondition","defaultRetryCondition","onRetry","userId","action","startTime","Date","now","lastError","attempt","result","logRetrySuccess","totalAttempts","delay","endTime","error","logRetryFailure","exponentialDelay","Math","min","pow","random","logRetryAttempt","sleep","code","_a","response","status","_b","message","includes","_c","_d","ms","Promise","resolve","setTimeout","metrics","logData","level","properties","name","_e","timestamp","toISOString","console","warn","JSON","stringify","trackTrace","severityLevel","duration","log","trackMetric","average","sampleCount","stack","_f","trackException","exception","Object","assign"],"sources":["/Users/dikshantvashistha/PrepBettr/lib/utils/retry-with-backoff.ts"],"sourcesContent":["import { ApplicationInsights } from '@microsoft/applicationinsights-web';\n\nexport interface RetryOptions {\n  maxRetries?: number;\n  baseDelay?: number; // Base delay in milliseconds\n  maxDelay?: number; // Maximum delay in milliseconds\n  jitter?: boolean; // Add randomness to prevent thundering herd\n  retryCondition?: (error: any) => boolean; // Custom condition for retrying\n  onRetry?: (error: any, attempt: number) => void; // Callback on retry\n}\n\nexport interface RetryMetrics {\n  attempt: number;\n  totalAttempts: number;\n  delay: number;\n  error?: any;\n  userId?: string;\n  action: string;\n  startTime: number;\n  endTime?: number;\n}\n\nexport class RetryWithBackoff {\n  private static appInsights?: ApplicationInsights;\n\n  static initialize(instrumentationKey?: string) {\n    if (instrumentationKey && typeof window !== 'undefined') {\n      this.appInsights = new ApplicationInsights({\n        config: {\n          instrumentationKey,\n          enableAutoRouteTracking: false,\n        }\n      });\n      this.appInsights.loadAppInsights();\n    }\n  }\n\n  /**\n   * Execute a function with exponential backoff retry logic\n   */\n  static async execute<T>(\n    fn: () => Promise<T>,\n    options: RetryOptions & { userId?: string; action?: string } = {}\n  ): Promise<T> {\n    const {\n      maxRetries = 3,\n      baseDelay = 1000,\n      maxDelay = 30000,\n      jitter = true,\n      retryCondition = this.defaultRetryCondition,\n      onRetry,\n      userId,\n      action = 'unknown'\n    } = options;\n\n    const startTime = Date.now();\n    let lastError: any;\n\n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\n      try {\n        const result = await fn();\n        \n        // Log success metrics\n        if (attempt > 0) {\n          this.logRetrySuccess({\n            attempt: attempt + 1,\n            totalAttempts: attempt + 1,\n            delay: 0,\n            userId,\n            action,\n            startTime,\n            endTime: Date.now()\n          });\n        }\n\n        return result;\n      } catch (error) {\n        lastError = error;\n\n        // Check if we should retry\n        if (attempt === maxRetries || !retryCondition(error)) {\n          // Log final failure\n          this.logRetryFailure({\n            attempt: attempt + 1,\n            totalAttempts: maxRetries + 1,\n            delay: 0,\n            error,\n            userId,\n            action,\n            startTime,\n            endTime: Date.now()\n          });\n          throw error;\n        }\n\n        // Calculate delay for next attempt\n        const exponentialDelay = Math.min(baseDelay * Math.pow(2, attempt), maxDelay);\n        const delay = jitter \n          ? exponentialDelay + Math.random() * exponentialDelay * 0.1 // Add 10% jitter\n          : exponentialDelay;\n\n        // Log retry attempt\n        this.logRetryAttempt({\n          attempt: attempt + 1,\n          totalAttempts: maxRetries + 1,\n          delay,\n          error,\n          userId,\n          action,\n          startTime\n        });\n\n        // Execute retry callback if provided\n        if (onRetry) {\n          onRetry(error, attempt + 1);\n        }\n\n        // Wait before next attempt\n        await this.sleep(delay);\n      }\n    }\n\n    throw lastError;\n  }\n\n  /**\n   * Default retry condition - retry on network errors, rate limits, and server errors\n   */\n  private static defaultRetryCondition(error: any): boolean {\n    // Network errors\n    if (error.code === 'ECONNRESET' || \n        error.code === 'ENOTFOUND' || \n        error.code === 'ECONNREFUSED') {\n      return true;\n    }\n\n    // HTTP status codes that should be retried\n    if (error.response?.status) {\n      const status = error.response.status;\n      return status === 429 || // Rate limit\n             status === 502 || // Bad Gateway\n             status === 503 || // Service Unavailable\n             status === 504;   // Gateway Timeout\n    }\n\n    // Azure OpenAI specific errors\n    if (error.message?.includes('rate limit') || \n        error.message?.includes('throttled') ||\n        error.message?.includes('quota exceeded')) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Sleep for specified milliseconds\n   */\n  private static sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Log retry attempt\n   */\n  private static logRetryAttempt(metrics: RetryMetrics): void {\n    const logData = {\n      level: 'warn',\n      message: `Retry attempt ${metrics.attempt}/${metrics.totalAttempts} for ${metrics.action}`,\n      properties: {\n        userId: metrics.userId,\n        action: metrics.action,\n        attempt: metrics.attempt,\n        totalAttempts: metrics.totalAttempts,\n        delay: metrics.delay,\n        error: {\n          message: metrics.error?.message,\n          code: metrics.error?.code,\n          status: metrics.error?.response?.status,\n          name: metrics.error?.name\n        },\n        timestamp: new Date().toISOString()\n      }\n    };\n\n    console.warn('RETRY_ATTEMPT', JSON.stringify(logData));\n\n    // Send to Application Insights\n    if (this.appInsights) {\n      this.appInsights.trackTrace({\n        message: logData.message,\n        severityLevel: 2, // Warning\n        properties: logData.properties\n      });\n    }\n  }\n\n  /**\n   * Log retry success\n   */\n  private static logRetrySuccess(metrics: RetryMetrics): void {\n    const duration = (metrics.endTime || Date.now()) - metrics.startTime;\n    \n    const logData = {\n      level: 'info',\n      message: `Retry succeeded for ${metrics.action} after ${metrics.attempt} attempts`,\n      properties: {\n        userId: metrics.userId,\n        action: metrics.action,\n        attempt: metrics.attempt,\n        totalAttempts: metrics.totalAttempts,\n        duration,\n        timestamp: new Date().toISOString()\n      }\n    };\n\n    console.log('RETRY_SUCCESS', JSON.stringify(logData));\n\n    // Send to Application Insights\n    if (this.appInsights) {\n      this.appInsights.trackTrace({\n        message: logData.message,\n        severityLevel: 1, // Information\n        properties: logData.properties\n      });\n\n      // Track custom metric for retry success\n      this.appInsights.trackMetric({\n        name: 'RetrySuccess',\n        average: metrics.attempt,\n        sampleCount: 1,\n        properties: {\n          action: metrics.action,\n          userId: metrics.userId || 'unknown'\n        }\n      });\n    }\n  }\n\n  /**\n   * Log retry failure\n   */\n  private static logRetryFailure(metrics: RetryMetrics): void {\n    const duration = (metrics.endTime || Date.now()) - metrics.startTime;\n    \n    const logData = {\n      level: 'error',\n      message: `Retry failed for ${metrics.action} after ${metrics.attempt} attempts`,\n      properties: {\n        userId: metrics.userId,\n        action: metrics.action,\n        attempt: metrics.attempt,\n        totalAttempts: metrics.totalAttempts,\n        duration,\n        error: {\n          message: metrics.error?.message,\n          code: metrics.error?.code,\n          status: metrics.error?.response?.status,\n          name: metrics.error?.name,\n          stack: metrics.error?.stack\n        },\n        timestamp: new Date().toISOString()\n      }\n    };\n\n    console.error('RETRY_FAILURE', JSON.stringify(logData));\n\n    // Send to Application Insights\n    if (this.appInsights) {\n      this.appInsights.trackException({\n        exception: metrics.error,\n        properties: logData.properties,\n        severityLevel: 3 // Error\n      });\n\n      // Track custom metric for retry failure\n      this.appInsights.trackMetric({\n        name: 'RetryFailure',\n        average: metrics.attempt,\n        sampleCount: 1,\n        properties: {\n          action: metrics.action,\n          userId: metrics.userId || 'unknown'\n        }\n      });\n    }\n  }\n}\n\n/**\n * Convenience function for common retry scenarios\n */\nexport async function retryWithExponentialBackoff<T>(\n  fn: () => Promise<T>,\n  action: string,\n  userId?: string,\n  options?: Partial<RetryOptions>\n): Promise<T> {\n  return RetryWithBackoff.execute(fn, {\n    action,\n    userId,\n    ...options\n  });\n}\n"],"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","ignoreList":[]}