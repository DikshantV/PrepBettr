ee870e4b54279142e3bcff3598531862
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const node_fetch_1 = __importDefault(require("node-fetch"));
const form_data_1 = __importDefault(require("form-data"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
// Test configuration
const API_BASE_URL = process.env.TEST_API_URL || 'http://localhost:3000';
const TEST_TIMEOUT = 30000; // 30 seconds
(0, globals_1.describe)('Voice STT → OpenAI Data Flow Integration', () => {
    let testAudioPath;
    (0, globals_1.beforeAll)(() => {
        // Path to test WAV file
        testAudioPath = path_1.default.join(__dirname, '../fixtures/test-audio.wav');
        // Create a test WAV file if it doesn't exist
        if (!fs_1.default.existsSync(testAudioPath)) {
            // Create directory if it doesn't exist
            const fixturesDir = path_1.default.dirname(testAudioPath);
            if (!fs_1.default.existsSync(fixturesDir)) {
                fs_1.default.mkdirSync(fixturesDir, { recursive: true });
            }
            // Create a simple WAV file with silence (44 bytes header + some data)
            const wavHeader = Buffer.alloc(44);
            // RIFF header
            wavHeader.write('RIFF', 0);
            wavHeader.writeUInt32LE(36 + 1600, 4); // File size - 8
            wavHeader.write('WAVE', 8);
            // fmt subchunk
            wavHeader.write('fmt ', 12);
            wavHeader.writeUInt32LE(16, 16); // Subchunk size
            wavHeader.writeUInt16LE(1, 20); // Audio format (PCM)
            wavHeader.writeUInt16LE(1, 22); // Number of channels
            wavHeader.writeUInt32LE(16000, 24); // Sample rate
            wavHeader.writeUInt32LE(32000, 28); // Byte rate
            wavHeader.writeUInt16LE(2, 32); // Block align
            wavHeader.writeUInt16LE(16, 34); // Bits per sample
            // data subchunk
            wavHeader.write('data', 36);
            wavHeader.writeUInt32LE(1600, 40); // Data size
            // Write header and some silence data
            const silenceData = Buffer.alloc(1600); // 100ms of silence at 16kHz
            fs_1.default.writeFileSync(testAudioPath, Buffer.concat([wavHeader, silenceData]));
        }
    });
    (0, globals_1.describe)('/api/voice/stream endpoint', () => {
        (0, globals_1.it)('should always return success:true with text field', async () => {
            const formData = new form_data_1.default();
            formData.append('audio', fs_1.default.createReadStream(testAudioPath), {
                filename: 'test-audio.wav',
                contentType: 'audio/wav'
            });
            const response = await (0, node_fetch_1.default)(`${API_BASE_URL}/api/voice/stream`, {
                method: 'POST',
                body: formData,
                headers: formData.getHeaders()
            });
            (0, globals_1.expect)(response.status).toBe(200);
            const result = await response.json();
            // Verify the response structure
            (0, globals_1.expect)(result).toHaveProperty('success');
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result).toHaveProperty('text');
            (0, globals_1.expect)(typeof result.text).toBe('string');
            // Even with empty/silent audio, should return success with empty text
            (0, globals_1.expect)(result).toHaveProperty('confidence');
            (0, globals_1.expect)(typeof result.confidence).toBe('number');
        }, TEST_TIMEOUT);
        (0, globals_1.it)('should handle missing audio file gracefully', async () => {
            const formData = new form_data_1.default();
            // Don't append any audio file
            const response = await (0, node_fetch_1.default)(`${API_BASE_URL}/api/voice/stream`, {
                method: 'POST',
                body: formData,
                headers: formData.getHeaders()
            });
            (0, globals_1.expect)(response.status).toBe(200);
            const result = await response.json();
            // Should still return success with empty text
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.text).toBe('');
            (0, globals_1.expect)(result).toHaveProperty('error');
        }, TEST_TIMEOUT);
        (0, globals_1.it)('should handle invalid audio format gracefully', async () => {
            const formData = new form_data_1.default();
            // Send a text file instead of audio
            const invalidData = Buffer.from('This is not audio data');
            formData.append('audio', invalidData, {
                filename: 'invalid.txt',
                contentType: 'text/plain'
            });
            const response = await (0, node_fetch_1.default)(`${API_BASE_URL}/api/voice/stream`, {
                method: 'POST',
                body: formData,
                headers: formData.getHeaders()
            });
            (0, globals_1.expect)(response.status).toBe(200);
            const result = await response.json();
            // Should still return success with empty text
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.text).toBe('');
            (0, globals_1.expect)(result).toHaveProperty('error');
            (0, globals_1.expect)(result.error).toContain('Unsupported audio format');
        }, TEST_TIMEOUT);
    });
    (0, globals_1.describe)('/api/voice/conversation endpoint', () => {
        (0, globals_1.it)('should process text and return AI response', async () => {
            // First, start the conversation
            const startResponse = await (0, node_fetch_1.default)(`${API_BASE_URL}/api/voice/conversation`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    action: 'start',
                    interviewContext: {
                        type: 'general',
                        maxQuestions: 5
                    }
                })
            });
            (0, globals_1.expect)(startResponse.status).toBe(200);
            const startResult = await startResponse.json();
            (0, globals_1.expect)(startResult.success).toBe(true);
            (0, globals_1.expect)(startResult).toHaveProperty('message');
            (0, globals_1.expect)(startResult).toHaveProperty('questionNumber');
            // Then process a user response
            const processResponse = await (0, node_fetch_1.default)(`${API_BASE_URL}/api/voice/conversation`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    action: 'process',
                    userTranscript: 'I have 5 years of experience in software development'
                })
            });
            (0, globals_1.expect)(processResponse.status).toBe(200);
            const processResult = await processResponse.json();
            (0, globals_1.expect)(processResult.success).toBe(true);
            (0, globals_1.expect)(processResult).toHaveProperty('message');
            (0, globals_1.expect)(processResult).toHaveProperty('questionNumber');
            (0, globals_1.expect)(processResult).toHaveProperty('isComplete');
        }, TEST_TIMEOUT);
        (0, globals_1.it)('should handle retry with exponential backoff', async () => {
            // This test simulates multiple rapid requests to test retry logic
            const promises = [];
            for (let i = 0; i < 3; i++) {
                promises.push((0, node_fetch_1.default)(`${API_BASE_URL}/api/voice/conversation`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        action: 'process',
                        userTranscript: `Test message ${i}`
                    })
                }));
            }
            const responses = await Promise.all(promises);
            // All requests should eventually succeed
            for (const response of responses) {
                (0, globals_1.expect)(response.status).toBe(200);
                const result = await response.json();
                (0, globals_1.expect)(result).toHaveProperty('success');
            }
        }, TEST_TIMEOUT * 2);
    });
    (0, globals_1.describe)('End-to-End Voice Flow', () => {
        (0, globals_1.it)('should complete full STT → OpenAI flow', async () => {
            // Step 1: Upload audio to STT
            const formData = new form_data_1.default();
            formData.append('audio', fs_1.default.createReadStream(testAudioPath), {
                filename: 'test-audio.wav',
                contentType: 'audio/wav'
            });
            const sttResponse = await (0, node_fetch_1.default)(`${API_BASE_URL}/api/voice/stream`, {
                method: 'POST',
                body: formData,
                headers: formData.getHeaders()
            });
            (0, globals_1.expect)(sttResponse.status).toBe(200);
            const sttResult = await sttResponse.json();
            (0, globals_1.expect)(sttResult.success).toBe(true);
            (0, globals_1.expect)(sttResult).toHaveProperty('text');
            // Step 2: If we got text, send it to conversation API
            if (sttResult.text && sttResult.text.trim()) {
                const conversationResponse = await (0, node_fetch_1.default)(`${API_BASE_URL}/api/voice/conversation`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        action: 'process',
                        userTranscript: sttResult.text
                    })
                });
                (0, globals_1.expect)(conversationResponse.status).toBe(200);
                const conversationResult = await conversationResponse.json();
                (0, globals_1.expect)(conversationResult.success).toBe(true);
                (0, globals_1.expect)(conversationResult).toHaveProperty('message');
                (0, globals_1.expect)(typeof conversationResult.message).toBe('string');
            }
        }, TEST_TIMEOUT);
    });
    (0, globals_1.afterAll)(() => {
        // Cleanup can be added here if needed
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,