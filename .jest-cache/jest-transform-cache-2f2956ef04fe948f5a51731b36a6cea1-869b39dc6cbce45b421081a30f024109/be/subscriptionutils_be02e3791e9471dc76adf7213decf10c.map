{"version":3,"names":["cov_1ijxvzd0bg","actualCoverage","SUBSCRIPTION_PLANS","s","individual","id","name","description","category","icon","features","limits","resumes","interviews","coverLetters","pricing","monthly","amount","currency","interval","paypalPlanId","yearly","monthlyEquivalent","savings","monthsFree","trial","enabled","duration","unit","popular","recommended","enterprise","SubscriptionData","constructor","planId","b","billingCycle","f","plan","createdAt","Date","status","getFormattedPrice","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","format","getMonthlyEquivalent","getYearlySavings","monthlyPrice","yearlyPrice","monthlyYearlyTotal","getFormattedYearlySavings","getTrialEndDate","endDate","setDate","getDate","getNextBillingDate","trialEnd","nextBilling","setMonth","getMonth","setFullYear","getFullYear","getSummary","planName","price","yearlySavings","savingsPercentage","trialDuration","trialEndDate","nextBillingDate","updatePlan","updateBillingCycle","toPayPalRequest","userEmail","userName","returnUrl","cancelUrl","plan_id","user_email","user_name","return_url","cancel_url","start_time","toISOString","metadata","trialEnabled","fromPayPalResponse","paypalData","subscription","paypalSubscriptionId","paypalStatus","subscriberEmail","subscriber","email_address","startTime","createTime","create_time","updateTime","update_time","subscriptionUtils","getAllPlans","Object","values","getPlan","getPopularPlans","filter","getRecommendedPlans","comparePlans","planId1","planId2","plan1","plan2","length","Math","abs","getTotalYearlySavings","reduce","total","monthlyYear","getStatusDisplay","statusMap","pending","active","cancelled","expired","suspended","approval_pending","formatDate","date","options","defaultOptions","year","month","day","DateTimeFormat","getDaysUntilBilling","today","billing","diffTime","diffDays","ceil","max","getBillingFrequencyText","frequencyMap"],"sources":["subscription-utils.js"],"sourcesContent":["// lib/subscription-utils.js\n\n/**\n * Subscription Data Structure and Utility Functions\n * Handles plan selection, pricing calculations, and subscription management\n */\n\n// Plan configurations with detailed information\nexport const SUBSCRIPTION_PLANS = {\n  individual: {\n    id: 'individual',\n    name: 'Individual',\n    description: 'Perfect for job seekers',\n    category: 'personal',\n    icon: 'zap',\n    features: [\n      'Resume processing and optimization',\n      'AI-powered interview preparation', \n      'Cover letter generation',\n      'Basic career insights',\n      'Email support',\n      'Up to 10 resumes per month',\n      'Up to 20 interview sessions per month',\n      'Up to 5 cover letters per month'\n    ],\n    limits: {\n      resumes: 10,\n      interviews: 20,\n      coverLetters: 5\n    },\n    pricing: {\n      monthly: {\n        amount: 49.00,\n        currency: 'USD',\n        interval: 'month',\n        paypalPlanId: 'individual-monthly' // Will be updated with actual PayPal plan IDs\n      },\n      yearly: {\n        amount: 490.00,\n        currency: 'USD', \n        interval: 'year',\n        monthlyEquivalent: 40.83,\n        savings: 17,\n        monthsFree: 2,\n        paypalPlanId: 'individual-yearly'\n      }\n    },\n    trial: {\n      enabled: true,\n      duration: 7,\n      unit: 'days'\n    },\n    popular: false,\n    recommended: false\n  },\n  enterprise: {\n    id: 'enterprise',\n    name: 'Enterprise',\n    description: 'For teams and organizations',\n    category: 'business',\n    icon: 'building2',\n    features: [\n      'Everything in Individual plan',\n      'Unlimited resume processing',\n      'Unlimited interview sessions',\n      'Unlimited cover letters',\n      'Advanced career analytics',\n      'Priority support',\n      'Custom branding options',\n      'Team collaboration features',\n      'API access',\n      'Dedicated account manager'\n    ],\n    limits: {\n      resumes: -1, // -1 means unlimited\n      interviews: -1,\n      coverLetters: -1\n    },\n    pricing: {\n      monthly: {\n        amount: 199.00,\n        currency: 'USD',\n        interval: 'month',\n        paypalPlanId: 'enterprise-monthly'\n      },\n      yearly: {\n        amount: 1990.00,\n        currency: 'USD',\n        interval: 'year', \n        monthlyEquivalent: 165.83,\n        savings: 17,\n        monthsFree: 2,\n        paypalPlanId: 'enterprise-yearly'\n      }\n    },\n    trial: {\n      enabled: true,\n      duration: 7,\n      unit: 'days'\n    },\n    popular: true,\n    recommended: true\n  }\n};\n\n// Subscription data structure for state management\nexport class SubscriptionData {\n  constructor(planId = 'individual', billingCycle = 'monthly') {\n    this.planId = planId;\n    this.billingCycle = billingCycle;\n    this.plan = SUBSCRIPTION_PLANS[planId];\n    this.pricing = this.plan.pricing[billingCycle];\n    this.createdAt = new Date();\n    this.status = 'pending';\n  }\n\n  // Get formatted price\n  getFormattedPrice() {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: this.pricing.currency,\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 2\n    }).format(this.pricing.amount);\n  }\n\n  // Get monthly equivalent price for yearly plans\n  getMonthlyEquivalent() {\n    if (this.billingCycle === 'yearly') {\n      return new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: this.pricing.currency,\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2\n      }).format(this.pricing.monthlyEquivalent);\n    }\n    return this.getFormattedPrice();\n  }\n\n  // Calculate yearly savings\n  getYearlySavings() {\n    if (this.billingCycle !== 'yearly') return 0;\n    \n    const monthlyPrice = this.plan.pricing.monthly.amount;\n    const yearlyPrice = this.pricing.amount;\n    const monthlyYearlyTotal = monthlyPrice * 12;\n    \n    return monthlyYearlyTotal - yearlyPrice;\n  }\n\n  // Get formatted yearly savings\n  getFormattedYearlySavings() {\n    const savings = this.getYearlySavings();\n    if (savings <= 0) return null;\n    \n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: this.pricing.currency,\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(savings);\n  }\n\n  // Get trial end date\n  getTrialEndDate() {\n    if (!this.plan.trial.enabled) return null;\n    \n    const endDate = new Date();\n    endDate.setDate(endDate.getDate() + this.plan.trial.duration);\n    return endDate;\n  }\n\n  // Get next billing date (after trial)\n  getNextBillingDate() {\n    const trialEnd = this.getTrialEndDate();\n    if (trialEnd) return trialEnd;\n    \n    // If no trial, billing starts immediately\n    const nextBilling = new Date();\n    if (this.billingCycle === 'monthly') {\n      nextBilling.setMonth(nextBilling.getMonth() + 1);\n    } else {\n      nextBilling.setFullYear(nextBilling.getFullYear() + 1);\n    }\n    return nextBilling;\n  }\n\n  // Get subscription summary for display\n  getSummary() {\n    return {\n      planName: `${this.plan.name} ${this.billingCycle === 'yearly' ? 'Yearly' : 'Monthly'}`,\n      planId: this.planId,\n      billingCycle: this.billingCycle,\n      price: this.getFormattedPrice(),\n      monthlyEquivalent: this.getMonthlyEquivalent(),\n      yearlySavings: this.getFormattedYearlySavings(),\n      savingsPercentage: this.billingCycle === 'yearly' ? this.pricing.savings : null,\n      monthsFree: this.billingCycle === 'yearly' ? this.pricing.monthsFree : null,\n      trialDuration: this.plan.trial.enabled ? this.plan.trial.duration : null,\n      trialEndDate: this.getTrialEndDate(),\n      nextBillingDate: this.getNextBillingDate(),\n      features: this.plan.features,\n      limits: this.plan.limits,\n      paypalPlanId: this.pricing.paypalPlanId\n    };\n  }\n\n  // Update plan selection\n  updatePlan(planId) {\n    if (SUBSCRIPTION_PLANS[planId]) {\n      this.planId = planId;\n      this.plan = SUBSCRIPTION_PLANS[planId];\n      this.pricing = this.plan.pricing[this.billingCycle];\n      return true;\n    }\n    return false;\n  }\n\n  // Update billing cycle\n  updateBillingCycle(billingCycle) {\n    if (this.plan.pricing[billingCycle]) {\n      this.billingCycle = billingCycle;\n      this.pricing = this.plan.pricing[billingCycle];\n      return true;\n    }\n    return false;\n  }\n\n  // Convert to PayPal subscription request format\n  toPayPalRequest(userEmail, userName, returnUrl, cancelUrl) {\n    return {\n      plan_id: this.pricing.paypalPlanId,\n      user_email: userEmail,\n      user_name: userName,\n      return_url: returnUrl,\n      cancel_url: cancelUrl,\n      start_time: this.plan.trial.enabled ? null : new Date().toISOString(),\n      metadata: {\n        planId: this.planId,\n        billingCycle: this.billingCycle,\n        trialEnabled: this.plan.trial.enabled,\n        createdAt: this.createdAt.toISOString()\n      }\n    };\n  }\n\n  // Create from PayPal response\n  static fromPayPalResponse(paypalData) {\n    const metadata = paypalData.metadata || {};\n    const subscription = new SubscriptionData(\n      metadata.planId || 'individual',\n      metadata.billingCycle || 'monthly'\n    );\n    \n    subscription.status = paypalData.status || 'active';\n    subscription.paypalSubscriptionId = paypalData.id;\n    subscription.paypalStatus = paypalData.status;\n    subscription.subscriberEmail = paypalData.subscriber?.email_address;\n    subscription.startTime = paypalData.start_time;\n    subscription.createTime = paypalData.create_time;\n    subscription.updateTime = paypalData.update_time;\n    \n    return subscription;\n  }\n}\n\n// Utility functions for subscription management\nexport const subscriptionUtils = {\n  // Get all available plans\n  getAllPlans() {\n    return Object.values(SUBSCRIPTION_PLANS);\n  },\n\n  // Get plan by ID\n  getPlan(planId) {\n    return SUBSCRIPTION_PLANS[planId] || null;\n  },\n\n  // Get popular plans\n  getPopularPlans() {\n    return Object.values(SUBSCRIPTION_PLANS).filter(plan => plan.popular);\n  },\n\n  // Get recommended plans\n  getRecommendedPlans() {\n    return Object.values(SUBSCRIPTION_PLANS).filter(plan => plan.recommended);\n  },\n\n  // Compare two plans\n  comparePlans(planId1, planId2) {\n    const plan1 = SUBSCRIPTION_PLANS[planId1];\n    const plan2 = SUBSCRIPTION_PLANS[planId2];\n    \n    if (!plan1 || !plan2) return null;\n    \n    return {\n      plan1: {\n        name: plan1.name,\n        monthlyPrice: plan1.pricing.monthly.amount,\n        yearlyPrice: plan1.pricing.yearly.amount,\n        features: plan1.features.length\n      },\n      plan2: {\n        name: plan2.name,\n        monthlyPrice: plan2.pricing.monthly.amount, \n        yearlyPrice: plan2.pricing.yearly.amount,\n        features: plan2.features.length\n      },\n      savings: {\n        monthly: Math.abs(plan2.pricing.monthly.amount - plan1.pricing.monthly.amount),\n        yearly: Math.abs(plan2.pricing.yearly.amount - plan1.pricing.yearly.amount)\n      }\n    };\n  },\n\n  // Calculate total savings across all yearly plans\n  getTotalYearlySavings() {\n    return Object.values(SUBSCRIPTION_PLANS).reduce((total, plan) => {\n      const monthlyYear = plan.pricing.monthly.amount * 12;\n      const yearlyPrice = plan.pricing.yearly.amount;\n      return total + (monthlyYear - yearlyPrice);\n    }, 0);\n  },\n\n  // Get subscription status display text\n  getStatusDisplay(status) {\n    const statusMap = {\n      pending: 'Pending Approval',\n      active: 'Active',\n      cancelled: 'Cancelled', \n      expired: 'Expired',\n      suspended: 'Suspended',\n      approval_pending: 'Approval Pending'\n    };\n    return statusMap[status] || status;\n  },\n\n  // Format date for display\n  formatDate(date, options = {}) {\n    if (!date) return null;\n    \n    const defaultOptions = {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      ...options\n    };\n    \n    return new Intl.DateTimeFormat('en-US', defaultOptions).format(\n      typeof date === 'string' ? new Date(date) : date\n    );\n  },\n\n  // Calculate days until next billing\n  getDaysUntilBilling(nextBillingDate) {\n    if (!nextBillingDate) return null;\n    \n    const today = new Date();\n    const billing = typeof nextBillingDate === 'string' ? new Date(nextBillingDate) : nextBillingDate;\n    const diffTime = billing - today;\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    return Math.max(0, diffDays);\n  },\n\n  // Get billing frequency text\n  getBillingFrequencyText(billingCycle) {\n    const frequencyMap = {\n      monthly: 'Every month',\n      yearly: 'Every year'\n    };\n    return frequencyMap[billingCycle] || billingCycle;\n  }\n};\n\n// Export default subscription data class\nexport default SubscriptionData;\n"],"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","ignoreList":[]}