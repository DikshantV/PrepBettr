4cc2182201d8c932e1792d866024f7c1
"use strict";

/* istanbul ignore next */
function cov_2ia6v754lj() {
  var path = "/Users/dikshantvashistha/PrepBettr/app/api/auth/firebase-proxy/route.ts";
  var hash = "1186c19a71ba4753df83579db30d39768155e9ca";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/app/api/auth/firebase-proxy/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 20
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 39
        }
      },
      "3": {
        start: {
          line: 14,
          column: 22
        },
        end: {
          line: 14,
          column: 46
        }
      },
      "4": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 15,
          column: 64
        }
      },
      "5": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 32,
          column: 5
        }
      },
      "6": {
        start: {
          line: 17,
          column: 33
        },
        end: {
          line: 17,
          column: 53
        }
      },
      "7": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 27,
          column: 9
        }
      },
      "8": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 20,
          column: 57
        }
      },
      "9": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 54
        }
      },
      "10": {
        start: {
          line: 24,
          column: 16
        },
        end: {
          line: 24,
          column: 54
        }
      },
      "11": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 26,
          column: 96
        }
      },
      "12": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 56
        }
      },
      "13": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 94
        }
      },
      "14": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 64,
          column: 5
        }
      },
      "15": {
        start: {
          line: 40,
          column: 25
        },
        end: {
          line: 41,
          column: 96
        }
      },
      "16": {
        start: {
          line: 42,
          column: 24
        },
        end: {
          line: 42,
          column: 46
        }
      },
      "17": {
        start: {
          line: 43,
          column: 28
        },
        end: {
          line: 43,
          column: 73
        }
      },
      "18": {
        start: {
          line: 44,
          column: 22
        },
        end: {
          line: 44,
          column: 64
        }
      },
      "19": {
        start: {
          line: 45,
          column: 22
        },
        end: {
          line: 45,
          column: 65
        }
      },
      "20": {
        start: {
          line: 47,
          column: 24
        },
        end: {
          line: 53,
          column: 35
        }
      },
      "21": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 52
        }
      },
      "22": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 59,
          column: 11
        }
      },
      "23": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 66
        }
      },
      "24": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 107
        }
      },
      "25": {
        start: {
          line: 70,
          column: 4
        },
        end: {
          line: 127,
          column: 5
        }
      },
      "26": {
        start: {
          line: 71,
          column: 32
        },
        end: {
          line: 71,
          column: 36
        }
      },
      "27": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "28": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 62
        }
      },
      "29": {
        start: {
          line: 76,
          column: 25
        },
        end: {
          line: 77,
          column: 96
        }
      },
      "30": {
        start: {
          line: 78,
          column: 29
        },
        end: {
          line: 78,
          column: 85
        }
      },
      "31": {
        start: {
          line: 79,
          column: 28
        },
        end: {
          line: 79,
          column: 117
        }
      },
      "32": {
        start: {
          line: 81,
          column: 30
        },
        end: {
          line: 93,
          column: 10
        }
      },
      "33": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "34": {
        start: {
          line: 95,
          column: 30
        },
        end: {
          line: 95,
          column: 56
        }
      },
      "35": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 67
        }
      },
      "36": {
        start: {
          line: 98,
          column: 26
        },
        end: {
          line: 98,
          column: 52
        }
      },
      "37": {
        start: {
          line: 100,
          column: 29
        },
        end: {
          line: 104,
          column: 10
        }
      },
      "38": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "39": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 67
        }
      },
      "40": {
        start: {
          line: 108,
          column: 27
        },
        end: {
          line: 108,
          column: 52
        }
      },
      "41": {
        start: {
          line: 110,
          column: 34
        },
        end: {
          line: 110,
          column: 71
        }
      },
      "42": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 78
        }
      },
      "43": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 122,
          column: 11
        }
      },
      "44": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 125,
          column: 66
        }
      },
      "45": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 126,
          column: 156
        }
      },
      "46": {
        start: {
          line: 133,
          column: 4
        },
        end: {
          line: 170,
          column: 5
        }
      },
      "47": {
        start: {
          line: 134,
          column: 23
        },
        end: {
          line: 134,
          column: 63
        }
      },
      "48": {
        start: {
          line: 135,
          column: 26
        },
        end: {
          line: 135,
          column: 84
        }
      },
      "49": {
        start: {
          line: 137,
          column: 24
        },
        end: {
          line: 137,
          column: 113
        }
      },
      "50": {
        start: {
          line: 138,
          column: 25
        },
        end: {
          line: 143,
          column: 10
        }
      },
      "51": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 71
        }
      },
      "52": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 163,
          column: 9
        }
      },
      "53": {
        start: {
          line: 146,
          column: 27
        },
        end: {
          line: 146,
          column: 48
        }
      },
      "54": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 155,
          column: 15
        }
      },
      "55": {
        start: {
          line: 158,
          column: 30
        },
        end: {
          line: 158,
          column: 51
        }
      },
      "56": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 162,
          column: 15
        }
      },
      "57": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 169,
          column: 11
        }
      },
      "58": {
        start: {
          line: 176,
          column: 19
        },
        end: {
          line: 180,
          column: 5
        }
      },
      "59": {
        start: {
          line: 181,
          column: 16
        },
        end: {
          line: 181,
          column: 45
        }
      },
      "60": {
        start: {
          line: 182,
          column: 20
        },
        end: {
          line: 202,
          column: 5
        }
      },
      "61": {
        start: {
          line: 204,
          column: 26
        },
        end: {
          line: 204,
          column: 83
        }
      },
      "62": {
        start: {
          line: 205,
          column: 27
        },
        end: {
          line: 205,
          column: 85
        }
      },
      "63": {
        start: {
          line: 206,
          column: 4
        },
        end: {
          line: 206,
          column: 71
        }
      }
    },
    fnMap: {
      "0": {
        name: "POST",
        decl: {
          start: {
            line: 13,
            column: 15
          },
          end: {
            line: 13,
            column: 19
          }
        },
        loc: {
          start: {
            line: 13,
            column: 29
          },
          end: {
            line: 33,
            column: 1
          }
        },
        line: 13
      },
      "1": {
        name: "initiateGoogleAuth",
        decl: {
          start: {
            line: 37,
            column: 15
          },
          end: {
            line: 37,
            column: 33
          }
        },
        loc: {
          start: {
            line: 37,
            column: 43
          },
          end: {
            line: 65,
            column: 1
          }
        },
        line: 37
      },
      "2": {
        name: "completeGoogleAuth",
        decl: {
          start: {
            line: 69,
            column: 15
          },
          end: {
            line: 69,
            column: 33
          }
        },
        loc: {
          start: {
            line: 69,
            column: 40
          },
          end: {
            line: 128,
            column: 1
          }
        },
        line: 69
      },
      "3": {
        name: "testFirebaseConnection",
        decl: {
          start: {
            line: 132,
            column: 15
          },
          end: {
            line: 132,
            column: 37
          }
        },
        loc: {
          start: {
            line: 132,
            column: 40
          },
          end: {
            line: 171,
            column: 1
          }
        },
        line: 132
      },
      "4": {
        name: "createMockFirebaseIdToken",
        decl: {
          start: {
            line: 175,
            column: 9
          },
          end: {
            line: 175,
            column: 34
          }
        },
        loc: {
          start: {
            line: 175,
            column: 47
          },
          end: {
            line: 207,
            column: 1
          }
        },
        line: 175
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 27,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 19,
            column: 12
          },
          end: {
            line: 20,
            column: 57
          }
        }, {
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 22,
            column: 54
          }
        }, {
          start: {
            line: 23,
            column: 12
          },
          end: {
            line: 24,
            column: 54
          }
        }, {
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 26,
            column: 96
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 41,
            column: 13
          },
          end: {
            line: 41,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 41,
            column: 13
          },
          end: {
            line: 41,
            column: 48
          }
        }, {
          start: {
            line: 41,
            column: 52
          },
          end: {
            line: 41,
            column: 95
          }
        }],
        line: 41
      },
      "2": {
        loc: {
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 74,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 74,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "3": {
        loc: {
          start: {
            line: 77,
            column: 13
          },
          end: {
            line: 77,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 77,
            column: 13
          },
          end: {
            line: 77,
            column: 48
          }
        }, {
          start: {
            line: 77,
            column: 52
          },
          end: {
            line: 77,
            column: 95
          }
        }],
        line: 77
      },
      "4": {
        loc: {
          start: {
            line: 78,
            column: 29
          },
          end: {
            line: 78,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 78,
            column: 29
          },
          end: {
            line: 78,
            column: 61
          }
        }, {
          start: {
            line: 78,
            column: 65
          },
          end: {
            line: 78,
            column: 85
          }
        }],
        line: 78
      },
      "5": {
        loc: {
          start: {
            line: 79,
            column: 31
          },
          end: {
            line: 79,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 79,
            column: 31
          },
          end: {
            line: 79,
            column: 55
          }
        }, {
          start: {
            line: 79,
            column: 59
          },
          end: {
            line: 79,
            column: 82
          }
        }],
        line: 79
      },
      "6": {
        loc: {
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "7": {
        loc: {
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 105
      },
      "8": {
        loc: {
          start: {
            line: 126,
            column: 77
          },
          end: {
            line: 126,
            column: 133
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 126,
            column: 102
          },
          end: {
            line: 126,
            column: 115
          }
        }, {
          start: {
            line: 126,
            column: 118
          },
          end: {
            line: 126,
            column: 133
          }
        }],
        line: 126
      },
      "9": {
        loc: {
          start: {
            line: 135,
            column: 26
          },
          end: {
            line: 135,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 135,
            column: 26
          },
          end: {
            line: 135,
            column: 69
          }
        }, {
          start: {
            line: 135,
            column: 73
          },
          end: {
            line: 135,
            column: 84
          }
        }],
        line: 135
      },
      "10": {
        loc: {
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 163,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 163,
            column: 9
          }
        }, {
          start: {
            line: 157,
            column: 13
          },
          end: {
            line: 163,
            column: 9
          }
        }],
        line: 145
      },
      "11": {
        loc: {
          start: {
            line: 153,
            column: 31
          },
          end: {
            line: 153,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 153,
            column: 31
          },
          end: {
            line: 153,
            column: 44
          }
        }, {
          start: {
            line: 153,
            column: 48
          },
          end: {
            line: 153,
            column: 50
          }
        }],
        line: 153
      },
      "12": {
        loc: {
          start: {
            line: 168,
            column: 55
          },
          end: {
            line: 168,
            column: 111
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 168,
            column: 80
          },
          end: {
            line: 168,
            column: 93
          }
        }, {
          start: {
            line: 168,
            column: 96
          },
          end: {
            line: 168,
            column: 111
          }
        }],
        line: 168
      },
      "13": {
        loc: {
          start: {
            line: 192,
            column: 24
          },
          end: {
            line: 192,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 192,
            column: 24
          },
          end: {
            line: 192,
            column: 49
          }
        }, {
          start: {
            line: 192,
            column: 53
          },
          end: {
            line: 192,
            column: 57
          }
        }],
        line: 192
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/app/api/auth/firebase-proxy/route.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/app/api/auth/firebase-proxy/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\n\n/**\n * Firebase Auth Proxy Route\n * \n * This route acts as a server-side proxy for Firebase authentication\n * to bypass browser network connectivity issues with Firebase services.\n * \n * It handles Google OAuth flow entirely on the server side.\n */\n\nexport async function POST(request: NextRequest) {\n  const timestamp = new Date().toISOString();\n  console.log(`\uD83C\uDF10 [${timestamp}] Firebase Auth Proxy called`);\n  \n  try {\n    const { action, data } = await request.json();\n    \n    switch (action) {\n      case 'initiate-google-auth':\n        return await initiateGoogleAuth(request);\n        \n      case 'complete-google-auth':\n        return await completeGoogleAuth(data);\n        \n      case 'test-firebase-connection':\n        return await testFirebaseConnection();\n        \n      default:\n        return NextResponse.json(\n          { error: 'Invalid action' },\n          { status: 400 }\n        );\n    }\n    \n  } catch (error) {\n    console.error(`\u274C Firebase proxy error:`, error);\n    return NextResponse.json(\n      { error: 'Firebase proxy error' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Initiate Google OAuth flow - returns authorization URL\n */\nasync function initiateGoogleAuth(request: NextRequest) {\n  try {\n    // Get Google OAuth client configuration\n    const clientId = '660242808945-' + // Your actual Google OAuth client ID\n      (process.env.GOOGLE_CLIENT_ID_SUFFIX || 'YOUR_CLIENT_ID.apps.googleusercontent.com');\n    \n    const baseUrl = request.nextUrl.origin;\n    const redirectUri = `${baseUrl}/api/auth/firebase-proxy/callback`;\n    \n    const scope = encodeURIComponent('openid profile email');\n    const state = Math.random().toString(36).substring(2, 15);\n    \n    // Store state in session for security (you might want to use a more robust storage)\n    const authUrl = `https://accounts.google.com/o/oauth2/v2/auth?` +\n      `client_id=${clientId}&` +\n      `redirect_uri=${encodeURIComponent(redirectUri)}&` +\n      `response_type=code&` +\n      `scope=${scope}&` +\n      `state=${state}&` +\n      `prompt=select_account`;\n    \n    console.log(`\uD83D\uDD10 Generated Google auth URL`);\n    \n    return NextResponse.json({\n      success: true,\n      authUrl,\n      state\n    });\n    \n  } catch (error) {\n    console.error('\u274C Failed to initiate Google auth:', error);\n    return NextResponse.json(\n      { error: 'Failed to initiate authentication' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Complete Google OAuth and create Firebase token\n */\nasync function completeGoogleAuth(data: any) {\n  try {\n    const { code, state } = data;\n    \n    if (!code) {\n      throw new Error('Authorization code is required');\n    }\n    \n    // Exchange code for tokens using server-side request\n    const clientId = '660242808945-' + \n      (process.env.GOOGLE_CLIENT_ID_SUFFIX || 'YOUR_CLIENT_ID.apps.googleusercontent.com');\n    const clientSecret = process.env.GOOGLE_CLIENT_SECRET || 'your-client-secret';\n    const redirectUri = `${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/api/auth/firebase-proxy/callback`;\n    \n    // Exchange authorization code for access token\n    const tokenResponse = await fetch('https://oauth2.googleapis.com/token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: new URLSearchParams({\n        client_id: clientId,\n        client_secret: clientSecret,\n        code: code,\n        grant_type: 'authorization_code',\n        redirect_uri: redirectUri,\n      }),\n    });\n    \n    if (!tokenResponse.ok) {\n      const errorText = await tokenResponse.text();\n      throw new Error(`Token exchange failed: ${errorText}`);\n    }\n    \n    const tokenData = await tokenResponse.json();\n    \n    // Get user info from Google\n    const userResponse = await fetch('https://www.googleapis.com/oauth2/v2/userinfo', {\n      headers: {\n        'Authorization': `Bearer ${tokenData.access_token}`,\n      },\n    });\n    \n    if (!userResponse.ok) {\n      throw new Error('Failed to get user info from Google');\n    }\n    \n    const googleUser = await userResponse.json();\n    \n    // Create a mock Firebase ID token (since we can't use Firebase client-side)\n    const mockFirebaseToken = createMockFirebaseIdToken(googleUser);\n    \n    console.log(`\u2705 Google OAuth completed for user: ${googleUser.email}`);\n    \n    return NextResponse.json({\n      success: true,\n      user: {\n        uid: googleUser.id,\n        email: googleUser.email,\n        displayName: googleUser.name,\n        photoURL: googleUser.picture,\n        emailVerified: googleUser.verified_email\n      },\n      idToken: mockFirebaseToken\n    });\n    \n  } catch (error) {\n    console.error('\u274C Failed to complete Google auth:', error);\n    return NextResponse.json(\n      { error: `Authentication failed: ${error instanceof Error ? error.message : 'Unknown error'}` },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Test Firebase connection from server-side\n */\nasync function testFirebaseConnection() {\n  try {\n    const apiKey = process.env.NEXT_PUBLIC_FIREBASE_API_KEY;\n    const projectId = process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID || 'prepbettr';\n    \n    // Test Firebase Identity Toolkit from server-side\n    const testUrl = `https://identitytoolkit.googleapis.com/v1/projects/${projectId}:getConfig?key=${apiKey}`;\n    \n    const response = await fetch(testUrl, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    \n    console.log(`\uD83D\uDD25 Firebase connection test: ${response.status}`);\n    \n    if (response.ok) {\n      const config = await response.json();\n      return NextResponse.json({\n        success: true,\n        message: 'Firebase connection successful',\n        config: {\n          projectId: config.projectId,\n          authDomain: config.authDomain,\n          providers: config.signIn || {}\n        }\n      });\n    } else {\n      const errorText = await response.text();\n      return NextResponse.json({\n        success: false,\n        error: `Firebase test failed: ${errorText}`\n      });\n    }\n    \n  } catch (error) {\n    return NextResponse.json({\n      success: false,\n      error: `Firebase connection test failed: ${error instanceof Error ? error.message : 'Unknown error'}`\n    });\n  }\n}\n\n/**\n * Create a mock Firebase-compatible ID token\n */\nfunction createMockFirebaseIdToken(googleUser: any) {\n  const header = {\n    alg: 'RS256',\n    kid: 'server-proxy',\n    typ: 'JWT'\n  };\n  \n  const now = Math.floor(Date.now() / 1000);\n  const payload = {\n    iss: 'https://securetoken.google.com/prepbettr',\n    aud: 'prepbettr',\n    auth_time: now,\n    user_id: googleUser.id,\n    uid: googleUser.id,\n    sub: googleUser.id,\n    iat: now,\n    exp: now + (60 * 60), // 1 hour\n    email: googleUser.email,\n    email_verified: googleUser.verified_email || true,\n    name: googleUser.name,\n    picture: googleUser.picture,\n    firebase: {\n      identities: {\n        'google.com': [googleUser.id],\n        email: [googleUser.email]\n      },\n      sign_in_provider: 'google.com'\n    }\n  };\n  \n  // Create JWT without signature (for development/server-side proxy)\n  const encodedHeader = Buffer.from(JSON.stringify(header)).toString('base64url');\n  const encodedPayload = Buffer.from(JSON.stringify(payload)).toString('base64url');\n  \n  return `${encodedHeader}.${encodedPayload}.server-proxy-signature`;\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1186c19a71ba4753df83579db30d39768155e9ca"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2ia6v754lj = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2ia6v754lj();
cov_2ia6v754lj().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2ia6v754lj().s[1]++;
exports.POST = POST;
const server_1 =
/* istanbul ignore next */
(cov_2ia6v754lj().s[2]++, require("next/server"));
/**
 * Firebase Auth Proxy Route
 *
 * This route acts as a server-side proxy for Firebase authentication
 * to bypass browser network connectivity issues with Firebase services.
 *
 * It handles Google OAuth flow entirely on the server side.
 */
async function POST(request) {
  /* istanbul ignore next */
  cov_2ia6v754lj().f[0]++;
  const timestamp =
  /* istanbul ignore next */
  (cov_2ia6v754lj().s[3]++, new Date().toISOString());
  /* istanbul ignore next */
  cov_2ia6v754lj().s[4]++;
  console.log(`🌐 [${timestamp}] Firebase Auth Proxy called`);
  /* istanbul ignore next */
  cov_2ia6v754lj().s[5]++;
  try {
    const {
      action,
      data
    } =
    /* istanbul ignore next */
    (cov_2ia6v754lj().s[6]++, await request.json());
    /* istanbul ignore next */
    cov_2ia6v754lj().s[7]++;
    switch (action) {
      case 'initiate-google-auth':
        /* istanbul ignore next */
        cov_2ia6v754lj().b[0][0]++;
        cov_2ia6v754lj().s[8]++;
        return await initiateGoogleAuth(request);
      case 'complete-google-auth':
        /* istanbul ignore next */
        cov_2ia6v754lj().b[0][1]++;
        cov_2ia6v754lj().s[9]++;
        return await completeGoogleAuth(data);
      case 'test-firebase-connection':
        /* istanbul ignore next */
        cov_2ia6v754lj().b[0][2]++;
        cov_2ia6v754lj().s[10]++;
        return await testFirebaseConnection();
      default:
        /* istanbul ignore next */
        cov_2ia6v754lj().b[0][3]++;
        cov_2ia6v754lj().s[11]++;
        return server_1.NextResponse.json({
          error: 'Invalid action'
        }, {
          status: 400
        });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_2ia6v754lj().s[12]++;
    console.error(`❌ Firebase proxy error:`, error);
    /* istanbul ignore next */
    cov_2ia6v754lj().s[13]++;
    return server_1.NextResponse.json({
      error: 'Firebase proxy error'
    }, {
      status: 500
    });
  }
}
/**
 * Initiate Google OAuth flow - returns authorization URL
 */
async function initiateGoogleAuth(request) {
  /* istanbul ignore next */
  cov_2ia6v754lj().f[1]++;
  cov_2ia6v754lj().s[14]++;
  try {
    // Get Google OAuth client configuration
    const clientId =
    /* istanbul ignore next */
    (cov_2ia6v754lj().s[15]++, '660242808945-' + (
    // Your actual Google OAuth client ID
    /* istanbul ignore next */
    (cov_2ia6v754lj().b[1][0]++, process.env.GOOGLE_CLIENT_ID_SUFFIX) ||
    /* istanbul ignore next */
    (cov_2ia6v754lj().b[1][1]++, 'YOUR_CLIENT_ID.apps.googleusercontent.com')));
    const baseUrl =
    /* istanbul ignore next */
    (cov_2ia6v754lj().s[16]++, request.nextUrl.origin);
    const redirectUri =
    /* istanbul ignore next */
    (cov_2ia6v754lj().s[17]++, `${baseUrl}/api/auth/firebase-proxy/callback`);
    const scope =
    /* istanbul ignore next */
    (cov_2ia6v754lj().s[18]++, encodeURIComponent('openid profile email'));
    const state =
    /* istanbul ignore next */
    (cov_2ia6v754lj().s[19]++, Math.random().toString(36).substring(2, 15));
    // Store state in session for security (you might want to use a more robust storage)
    const authUrl =
    /* istanbul ignore next */
    (cov_2ia6v754lj().s[20]++, `https://accounts.google.com/o/oauth2/v2/auth?` + `client_id=${clientId}&` + `redirect_uri=${encodeURIComponent(redirectUri)}&` + `response_type=code&` + `scope=${scope}&` + `state=${state}&` + `prompt=select_account`);
    /* istanbul ignore next */
    cov_2ia6v754lj().s[21]++;
    console.log(`🔐 Generated Google auth URL`);
    /* istanbul ignore next */
    cov_2ia6v754lj().s[22]++;
    return server_1.NextResponse.json({
      success: true,
      authUrl,
      state
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2ia6v754lj().s[23]++;
    console.error('❌ Failed to initiate Google auth:', error);
    /* istanbul ignore next */
    cov_2ia6v754lj().s[24]++;
    return server_1.NextResponse.json({
      error: 'Failed to initiate authentication'
    }, {
      status: 500
    });
  }
}
/**
 * Complete Google OAuth and create Firebase token
 */
async function completeGoogleAuth(data) {
  /* istanbul ignore next */
  cov_2ia6v754lj().f[2]++;
  cov_2ia6v754lj().s[25]++;
  try {
    const {
      code,
      state
    } =
    /* istanbul ignore next */
    (cov_2ia6v754lj().s[26]++, data);
    /* istanbul ignore next */
    cov_2ia6v754lj().s[27]++;
    if (!code) {
      /* istanbul ignore next */
      cov_2ia6v754lj().b[2][0]++;
      cov_2ia6v754lj().s[28]++;
      throw new Error('Authorization code is required');
    } else
    /* istanbul ignore next */
    {
      cov_2ia6v754lj().b[2][1]++;
    }
    // Exchange code for tokens using server-side request
    const clientId =
    /* istanbul ignore next */
    (cov_2ia6v754lj().s[29]++, '660242808945-' + (
    /* istanbul ignore next */
    (cov_2ia6v754lj().b[3][0]++, process.env.GOOGLE_CLIENT_ID_SUFFIX) ||
    /* istanbul ignore next */
    (cov_2ia6v754lj().b[3][1]++, 'YOUR_CLIENT_ID.apps.googleusercontent.com')));
    const clientSecret =
    /* istanbul ignore next */
    (cov_2ia6v754lj().s[30]++,
    /* istanbul ignore next */
    (cov_2ia6v754lj().b[4][0]++, process.env.GOOGLE_CLIENT_SECRET) ||
    /* istanbul ignore next */
    (cov_2ia6v754lj().b[4][1]++, 'your-client-secret'));
    const redirectUri =
    /* istanbul ignore next */
    (cov_2ia6v754lj().s[31]++, `${
    /* istanbul ignore next */
    (cov_2ia6v754lj().b[5][0]++, process.env.NEXTAUTH_URL) ||
    /* istanbul ignore next */
    (cov_2ia6v754lj().b[5][1]++, 'http://localhost:3000')}/api/auth/firebase-proxy/callback`);
    // Exchange authorization code for access token
    const tokenResponse =
    /* istanbul ignore next */
    (cov_2ia6v754lj().s[32]++, await fetch('https://oauth2.googleapis.com/token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
      },
      body: new URLSearchParams({
        client_id: clientId,
        client_secret: clientSecret,
        code: code,
        grant_type: 'authorization_code',
        redirect_uri: redirectUri
      })
    }));
    /* istanbul ignore next */
    cov_2ia6v754lj().s[33]++;
    if (!tokenResponse.ok) {
      /* istanbul ignore next */
      cov_2ia6v754lj().b[6][0]++;
      const errorText =
      /* istanbul ignore next */
      (cov_2ia6v754lj().s[34]++, await tokenResponse.text());
      /* istanbul ignore next */
      cov_2ia6v754lj().s[35]++;
      throw new Error(`Token exchange failed: ${errorText}`);
    } else
    /* istanbul ignore next */
    {
      cov_2ia6v754lj().b[6][1]++;
    }
    const tokenData =
    /* istanbul ignore next */
    (cov_2ia6v754lj().s[36]++, await tokenResponse.json());
    // Get user info from Google
    const userResponse =
    /* istanbul ignore next */
    (cov_2ia6v754lj().s[37]++, await fetch('https://www.googleapis.com/oauth2/v2/userinfo', {
      headers: {
        'Authorization': `Bearer ${tokenData.access_token}`
      }
    }));
    /* istanbul ignore next */
    cov_2ia6v754lj().s[38]++;
    if (!userResponse.ok) {
      /* istanbul ignore next */
      cov_2ia6v754lj().b[7][0]++;
      cov_2ia6v754lj().s[39]++;
      throw new Error('Failed to get user info from Google');
    } else
    /* istanbul ignore next */
    {
      cov_2ia6v754lj().b[7][1]++;
    }
    const googleUser =
    /* istanbul ignore next */
    (cov_2ia6v754lj().s[40]++, await userResponse.json());
    // Create a mock Firebase ID token (since we can't use Firebase client-side)
    const mockFirebaseToken =
    /* istanbul ignore next */
    (cov_2ia6v754lj().s[41]++, createMockFirebaseIdToken(googleUser));
    /* istanbul ignore next */
    cov_2ia6v754lj().s[42]++;
    console.log(`✅ Google OAuth completed for user: ${googleUser.email}`);
    /* istanbul ignore next */
    cov_2ia6v754lj().s[43]++;
    return server_1.NextResponse.json({
      success: true,
      user: {
        uid: googleUser.id,
        email: googleUser.email,
        displayName: googleUser.name,
        photoURL: googleUser.picture,
        emailVerified: googleUser.verified_email
      },
      idToken: mockFirebaseToken
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2ia6v754lj().s[44]++;
    console.error('❌ Failed to complete Google auth:', error);
    /* istanbul ignore next */
    cov_2ia6v754lj().s[45]++;
    return server_1.NextResponse.json({
      error: `Authentication failed: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_2ia6v754lj().b[8][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2ia6v754lj().b[8][1]++, 'Unknown error')}`
    }, {
      status: 500
    });
  }
}
/**
 * Test Firebase connection from server-side
 */
async function testFirebaseConnection() {
  /* istanbul ignore next */
  cov_2ia6v754lj().f[3]++;
  cov_2ia6v754lj().s[46]++;
  try {
    const apiKey =
    /* istanbul ignore next */
    (cov_2ia6v754lj().s[47]++, process.env.NEXT_PUBLIC_FIREBASE_API_KEY);
    const projectId =
    /* istanbul ignore next */
    (cov_2ia6v754lj().s[48]++,
    /* istanbul ignore next */
    (cov_2ia6v754lj().b[9][0]++, process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID) ||
    /* istanbul ignore next */
    (cov_2ia6v754lj().b[9][1]++, 'prepbettr'));
    // Test Firebase Identity Toolkit from server-side
    const testUrl =
    /* istanbul ignore next */
    (cov_2ia6v754lj().s[49]++, `https://identitytoolkit.googleapis.com/v1/projects/${projectId}:getConfig?key=${apiKey}`);
    const response =
    /* istanbul ignore next */
    (cov_2ia6v754lj().s[50]++, await fetch(testUrl, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    }));
    /* istanbul ignore next */
    cov_2ia6v754lj().s[51]++;
    console.log(`🔥 Firebase connection test: ${response.status}`);
    /* istanbul ignore next */
    cov_2ia6v754lj().s[52]++;
    if (response.ok) {
      /* istanbul ignore next */
      cov_2ia6v754lj().b[10][0]++;
      const config =
      /* istanbul ignore next */
      (cov_2ia6v754lj().s[53]++, await response.json());
      /* istanbul ignore next */
      cov_2ia6v754lj().s[54]++;
      return server_1.NextResponse.json({
        success: true,
        message: 'Firebase connection successful',
        config: {
          projectId: config.projectId,
          authDomain: config.authDomain,
          providers:
          /* istanbul ignore next */
          (cov_2ia6v754lj().b[11][0]++, config.signIn) ||
          /* istanbul ignore next */
          (cov_2ia6v754lj().b[11][1]++, {})
        }
      });
    } else {
      /* istanbul ignore next */
      cov_2ia6v754lj().b[10][1]++;
      const errorText =
      /* istanbul ignore next */
      (cov_2ia6v754lj().s[55]++, await response.text());
      /* istanbul ignore next */
      cov_2ia6v754lj().s[56]++;
      return server_1.NextResponse.json({
        success: false,
        error: `Firebase test failed: ${errorText}`
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_2ia6v754lj().s[57]++;
    return server_1.NextResponse.json({
      success: false,
      error: `Firebase connection test failed: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_2ia6v754lj().b[12][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2ia6v754lj().b[12][1]++, 'Unknown error')}`
    });
  }
}
/**
 * Create a mock Firebase-compatible ID token
 */
function createMockFirebaseIdToken(googleUser) {
  /* istanbul ignore next */
  cov_2ia6v754lj().f[4]++;
  const header =
  /* istanbul ignore next */
  (cov_2ia6v754lj().s[58]++, {
    alg: 'RS256',
    kid: 'server-proxy',
    typ: 'JWT'
  });
  const now =
  /* istanbul ignore next */
  (cov_2ia6v754lj().s[59]++, Math.floor(Date.now() / 1000));
  const payload =
  /* istanbul ignore next */
  (cov_2ia6v754lj().s[60]++, {
    iss: 'https://securetoken.google.com/prepbettr',
    aud: 'prepbettr',
    auth_time: now,
    user_id: googleUser.id,
    uid: googleUser.id,
    sub: googleUser.id,
    iat: now,
    exp: now + 60 * 60,
    // 1 hour
    email: googleUser.email,
    email_verified:
    /* istanbul ignore next */
    (cov_2ia6v754lj().b[13][0]++, googleUser.verified_email) ||
    /* istanbul ignore next */
    (cov_2ia6v754lj().b[13][1]++, true),
    name: googleUser.name,
    picture: googleUser.picture,
    firebase: {
      identities: {
        'google.com': [googleUser.id],
        email: [googleUser.email]
      },
      sign_in_provider: 'google.com'
    }
  });
  // Create JWT without signature (for development/server-side proxy)
  const encodedHeader =
  /* istanbul ignore next */
  (cov_2ia6v754lj().s[61]++, Buffer.from(JSON.stringify(header)).toString('base64url'));
  const encodedPayload =
  /* istanbul ignore next */
  (cov_2ia6v754lj().s[62]++, Buffer.from(JSON.stringify(payload)).toString('base64url'));
  /* istanbul ignore next */
  cov_2ia6v754lj().s[63]++;
  return `${encodedHeader}.${encodedPayload}.server-proxy-signature`;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,