5e5618a05f4aab75a641ec5fca5c6e9d
/* istanbul ignore next */
function cov_153nu0josw() {
  var path = "/Users/dikshantvashistha/PrepBettr/azure/test-voice-function.js";
  var hash = "e92ccf53301549197cb6dbeb4e8b612afb1647b2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/azure/test-voice-function.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 19
        },
        end: {
          line: 1,
          column: 36
        }
      },
      "1": {
        start: {
          line: 2,
          column: 12
        },
        end: {
          line: 2,
          column: 61
        }
      },
      "2": {
        start: {
          line: 3,
          column: 23
        },
        end: {
          line: 3,
          column: 38
        }
      },
      "3": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 6,
          column: 58
        }
      },
      "4": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 9,
          column: 51
        }
      },
      "5": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 29,
          column: 5
        }
      },
      "6": {
        start: {
          line: 11,
          column: 29
        },
        end: {
          line: 18,
          column: 10
        }
      },
      "7": {
        start: {
          line: 20,
          column: 31
        },
        end: {
          line: 24,
          column: 10
        }
      },
      "8": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 85
        }
      },
      "9": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 54
        }
      },
      "10": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 32,
          column: 50
        }
      },
      "11": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 65,
          column: 5
        }
      },
      "12": {
        start: {
          line: 34,
          column: 29
        },
        end: {
          line: 37,
          column: 9
        }
      },
      "13": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 68
        }
      },
      "14": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 111
        }
      },
      "15": {
        start: {
          line: 41,
          column: 34
        },
        end: {
          line: 41,
          column: 73
        }
      },
      "16": {
        start: {
          line: 43,
          column: 25
        },
        end: {
          line: 43,
          column: 59
        }
      },
      "17": {
        start: {
          line: 45,
          column: 23
        },
        end: {
          line: 57,
          column: 10
        }
      },
      "18": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 56,
          column: 14
        }
      },
      "19": {
        start: {
          line: 49,
          column: 20
        },
        end: {
          line: 53,
          column: 21
        }
      },
      "20": {
        start: {
          line: 50,
          column: 24
        },
        end: {
          line: 50,
          column: 40
        }
      },
      "21": {
        start: {
          line: 52,
          column: 24
        },
        end: {
          line: 52,
          column: 93
        }
      },
      "22": {
        start: {
          line: 55,
          column: 27
        },
        end: {
          line: 55,
          column: 40
        }
      },
      "23": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 103
        }
      },
      "24": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 34
        }
      },
      "25": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 62
        }
      },
      "26": {
        start: {
          line: 68,
          column: 4
        },
        end: {
          line: 68,
          column: 51
        }
      },
      "27": {
        start: {
          line: 69,
          column: 19
        },
        end: {
          line: 69,
          column: 27
        }
      },
      "28": {
        start: {
          line: 70,
          column: 4
        },
        end: {
          line: 70,
          column: 45
        }
      },
      "29": {
        start: {
          line: 72,
          column: 4
        },
        end: {
          line: 72,
          column: 52
        }
      },
      "30": {
        start: {
          line: 76,
          column: 0
        },
        end: {
          line: 76,
          column: 38
        }
      }
    },
    fnMap: {
      "0": {
        name: "testComponents",
        decl: {
          start: {
            line: 5,
            column: 15
          },
          end: {
            line: 5,
            column: 29
          }
        },
        loc: {
          start: {
            line: 5,
            column: 32
          },
          end: {
            line: 73,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 45,
            column: 41
          },
          end: {
            line: 45,
            column: 42
          }
        },
        loc: {
          start: {
            line: 45,
            column: 62
          },
          end: {
            line: 57,
            column: 9
          }
        },
        line: 45
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 48,
            column: 16
          },
          end: {
            line: 48,
            column: 17
          }
        },
        loc: {
          start: {
            line: 48,
            column: 28
          },
          end: {
            line: 54,
            column: 17
          }
        },
        line: 48
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 55,
            column: 16
          },
          end: {
            line: 55,
            column: 17
          }
        },
        loc: {
          start: {
            line: 55,
            column: 27
          },
          end: {
            line: 55,
            column: 40
          }
        },
        line: 55
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 49,
            column: 20
          },
          end: {
            line: 53,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 20
          },
          end: {
            line: 53,
            column: 21
          }
        }, {
          start: {
            line: 51,
            column: 27
          },
          end: {
            line: 53,
            column: 21
          }
        }],
        line: 49
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0]
    },
    inputSourceMap: null,
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e92ccf53301549197cb6dbeb4e8b612afb1647b2"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_153nu0josw = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_153nu0josw();
const {
  OpenAI
} =
/* istanbul ignore next */
(cov_153nu0josw().s[0]++, require('openai'));
const sdk =
/* istanbul ignore next */
(cov_153nu0josw().s[1]++, require('microsoft-cognitiveservices-speech-sdk'));
const {
  v4: uuidv4
} =
/* istanbul ignore next */
(cov_153nu0josw().s[2]++, require('uuid'));
async function testComponents() {
  /* istanbul ignore next */
  cov_153nu0josw().f[0]++;
  cov_153nu0josw().s[3]++;
  console.log('Testing Azure Function components...\n');

  // Test OpenAI initialization
  /* istanbul ignore next */
  cov_153nu0josw().s[4]++;
  console.log('1. Testing OpenAI connection...');
  /* istanbul ignore next */
  cov_153nu0josw().s[5]++;
  try {
    const openaiClient =
    /* istanbul ignore next */
    (cov_153nu0josw().s[6]++, new OpenAI({
      apiKey: '1cf6caef55794eee9f30306e217d0f1d',
      // Replace with actual key
      baseURL: 'https://eastus2.api.cognitive.microsoft.com/openai/deployments/gpt4o',
      defaultQuery: {
        'api-version': '2024-02-15-preview'
      },
      defaultHeaders: {
        'api-key': '1cf6caef55794eee9f30306e217d0f1d'
      }
    }));
    const testCompletion =
    /* istanbul ignore next */
    (cov_153nu0josw().s[7]++, await openaiClient.chat.completions.create({
      model: 'gpt4o',
      // This should match the deployment name
      messages: [{
        role: 'user',
        content: 'Say "Hello from Azure OpenAI!"'
      }],
      max_tokens: 10
    }));
    /* istanbul ignore next */
    cov_153nu0josw().s[8]++;
    console.log('✅ OpenAI Response:', testCompletion.choices[0].message.content);
  } catch (error) {
    /* istanbul ignore next */
    cov_153nu0josw().s[9]++;
    console.log('❌ OpenAI Error:', error.message);
  }

  // Test Speech Service initialization
  /* istanbul ignore next */
  cov_153nu0josw().s[10]++;
  console.log('\n2. Testing Speech Service...');
  /* istanbul ignore next */
  cov_153nu0josw().s[11]++;
  try {
    const speechConfig =
    /* istanbul ignore next */
    (cov_153nu0josw().s[12]++, sdk.SpeechConfig.fromSubscription('14ea2036305b4811bc3b0bcb4df6d2ad',
    // Replace with actual key
    'eastus2'));
    /* istanbul ignore next */
    cov_153nu0josw().s[13]++;
    speechConfig.speechSynthesisVoiceName = 'en-US-JennyNeural';
    /* istanbul ignore next */
    cov_153nu0josw().s[14]++;
    speechConfig.speechSynthesisOutputFormat = sdk.SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3;
    const speechSynthesizer =
    /* istanbul ignore next */
    (cov_153nu0josw().s[15]++, new sdk.SpeechSynthesizer(speechConfig));
    const testText =
    /* istanbul ignore next */
    (cov_153nu0josw().s[16]++, 'Hello from Azure Speech Service!');
    const result =
    /* istanbul ignore next */
    (cov_153nu0josw().s[17]++, await new Promise((resolve, reject) => {
      /* istanbul ignore next */
      cov_153nu0josw().f[1]++;
      cov_153nu0josw().s[18]++;
      speechSynthesizer.speakTextAsync(testText, result => {
        /* istanbul ignore next */
        cov_153nu0josw().f[2]++;
        cov_153nu0josw().s[19]++;
        if (result.reason === sdk.ResultReason.SynthesizingAudioCompleted) {
          /* istanbul ignore next */
          cov_153nu0josw().b[0][0]++;
          cov_153nu0josw().s[20]++;
          resolve(result);
        } else {
          /* istanbul ignore next */
          cov_153nu0josw().b[0][1]++;
          cov_153nu0josw().s[21]++;
          reject(new Error(`Speech synthesis failed: ${result.errorDetails}`));
        }
      }, error => {
        /* istanbul ignore next */
        cov_153nu0josw().f[3]++;
        cov_153nu0josw().s[22]++;
        return reject(error);
      });
    }));
    /* istanbul ignore next */
    cov_153nu0josw().s[23]++;
    console.log('✅ Speech synthesis completed. Audio size:', result.audioData.byteLength, 'bytes');
    /* istanbul ignore next */
    cov_153nu0josw().s[24]++;
    speechSynthesizer.close();
  } catch (error) {
    /* istanbul ignore next */
    cov_153nu0josw().s[25]++;
    console.log('❌ Speech Service Error:', error.message);
  }

  // Test UUID generation
  /* istanbul ignore next */
  cov_153nu0josw().s[26]++;
  console.log('\n3. Testing UUID generation...');
  const testId =
  /* istanbul ignore next */
  (cov_153nu0josw().s[27]++, uuidv4());
  /* istanbul ignore next */
  cov_153nu0josw().s[28]++;
  console.log('✅ Generated UUID:', testId);
  /* istanbul ignore next */
  cov_153nu0josw().s[29]++;
  console.log('\n✅ Component testing completed!');
}

// Run the test
/* istanbul ignore next */
cov_153nu0josw().s[30]++;
testComponents().catch(console.error);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,