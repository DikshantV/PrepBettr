{"version":3,"names":["cov_2ia6v754lj","actualCoverage","s","exports","POST","server_1","require","request","f","timestamp","Date","toISOString","console","log","action","data","json","b","initiateGoogleAuth","completeGoogleAuth","testFirebaseConnection","NextResponse","error","status","clientId","process","env","GOOGLE_CLIENT_ID_SUFFIX","baseUrl","nextUrl","origin","redirectUri","scope","encodeURIComponent","state","Math","random","toString","substring","authUrl","success","code","Error","clientSecret","GOOGLE_CLIENT_SECRET","NEXTAUTH_URL","tokenResponse","fetch","method","headers","body","URLSearchParams","client_id","client_secret","grant_type","redirect_uri","ok","errorText","text","tokenData","userResponse","access_token","googleUser","mockFirebaseToken","createMockFirebaseIdToken","email","user","uid","id","displayName","name","photoURL","picture","emailVerified","verified_email","idToken","message","apiKey","NEXT_PUBLIC_FIREBASE_API_KEY","projectId","NEXT_PUBLIC_FIREBASE_PROJECT_ID","testUrl","response","config","authDomain","providers","signIn","header","alg","kid","typ","now","floor","payload","iss","aud","auth_time","user_id","sub","iat","exp","email_verified","firebase","identities","sign_in_provider","encodedHeader","Buffer","from","JSON","stringify","encodedPayload"],"sources":["/Users/dikshantvashistha/PrepBettr/app/api/auth/firebase-proxy/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\n/**\n * Firebase Auth Proxy Route\n * \n * This route acts as a server-side proxy for Firebase authentication\n * to bypass browser network connectivity issues with Firebase services.\n * \n * It handles Google OAuth flow entirely on the server side.\n */\n\nexport async function POST(request: NextRequest) {\n  const timestamp = new Date().toISOString();\n  console.log(`üåê [${timestamp}] Firebase Auth Proxy called`);\n  \n  try {\n    const { action, data } = await request.json();\n    \n    switch (action) {\n      case 'initiate-google-auth':\n        return await initiateGoogleAuth(request);\n        \n      case 'complete-google-auth':\n        return await completeGoogleAuth(data);\n        \n      case 'test-firebase-connection':\n        return await testFirebaseConnection();\n        \n      default:\n        return NextResponse.json(\n          { error: 'Invalid action' },\n          { status: 400 }\n        );\n    }\n    \n  } catch (error) {\n    console.error(`‚ùå Firebase proxy error:`, error);\n    return NextResponse.json(\n      { error: 'Firebase proxy error' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Initiate Google OAuth flow - returns authorization URL\n */\nasync function initiateGoogleAuth(request: NextRequest) {\n  try {\n    // Get Google OAuth client configuration\n    const clientId = '660242808945-' + // Your actual Google OAuth client ID\n      (process.env.GOOGLE_CLIENT_ID_SUFFIX || 'YOUR_CLIENT_ID.apps.googleusercontent.com');\n    \n    const baseUrl = request.nextUrl.origin;\n    const redirectUri = `${baseUrl}/api/auth/firebase-proxy/callback`;\n    \n    const scope = encodeURIComponent('openid profile email');\n    const state = Math.random().toString(36).substring(2, 15);\n    \n    // Store state in session for security (you might want to use a more robust storage)\n    const authUrl = `https://accounts.google.com/o/oauth2/v2/auth?` +\n      `client_id=${clientId}&` +\n      `redirect_uri=${encodeURIComponent(redirectUri)}&` +\n      `response_type=code&` +\n      `scope=${scope}&` +\n      `state=${state}&` +\n      `prompt=select_account`;\n    \n    console.log(`üîê Generated Google auth URL`);\n    \n    return NextResponse.json({\n      success: true,\n      authUrl,\n      state\n    });\n    \n  } catch (error) {\n    console.error('‚ùå Failed to initiate Google auth:', error);\n    return NextResponse.json(\n      { error: 'Failed to initiate authentication' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Complete Google OAuth and create Firebase token\n */\nasync function completeGoogleAuth(data: any) {\n  try {\n    const { code, state } = data;\n    \n    if (!code) {\n      throw new Error('Authorization code is required');\n    }\n    \n    // Exchange code for tokens using server-side request\n    const clientId = '660242808945-' + \n      (process.env.GOOGLE_CLIENT_ID_SUFFIX || 'YOUR_CLIENT_ID.apps.googleusercontent.com');\n    const clientSecret = process.env.GOOGLE_CLIENT_SECRET || 'your-client-secret';\n    const redirectUri = `${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/api/auth/firebase-proxy/callback`;\n    \n    // Exchange authorization code for access token\n    const tokenResponse = await fetch('https://oauth2.googleapis.com/token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: new URLSearchParams({\n        client_id: clientId,\n        client_secret: clientSecret,\n        code: code,\n        grant_type: 'authorization_code',\n        redirect_uri: redirectUri,\n      }),\n    });\n    \n    if (!tokenResponse.ok) {\n      const errorText = await tokenResponse.text();\n      throw new Error(`Token exchange failed: ${errorText}`);\n    }\n    \n    const tokenData = await tokenResponse.json();\n    \n    // Get user info from Google\n    const userResponse = await fetch('https://www.googleapis.com/oauth2/v2/userinfo', {\n      headers: {\n        'Authorization': `Bearer ${tokenData.access_token}`,\n      },\n    });\n    \n    if (!userResponse.ok) {\n      throw new Error('Failed to get user info from Google');\n    }\n    \n    const googleUser = await userResponse.json();\n    \n    // Create a mock Firebase ID token (since we can't use Firebase client-side)\n    const mockFirebaseToken = createMockFirebaseIdToken(googleUser);\n    \n    console.log(`‚úÖ Google OAuth completed for user: ${googleUser.email}`);\n    \n    return NextResponse.json({\n      success: true,\n      user: {\n        uid: googleUser.id,\n        email: googleUser.email,\n        displayName: googleUser.name,\n        photoURL: googleUser.picture,\n        emailVerified: googleUser.verified_email\n      },\n      idToken: mockFirebaseToken\n    });\n    \n  } catch (error) {\n    console.error('‚ùå Failed to complete Google auth:', error);\n    return NextResponse.json(\n      { error: `Authentication failed: ${error instanceof Error ? error.message : 'Unknown error'}` },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Test Firebase connection from server-side\n */\nasync function testFirebaseConnection() {\n  try {\n    const apiKey = process.env.NEXT_PUBLIC_FIREBASE_API_KEY;\n    const projectId = process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID || 'prepbettr';\n    \n    // Test Firebase Identity Toolkit from server-side\n    const testUrl = `https://identitytoolkit.googleapis.com/v1/projects/${projectId}:getConfig?key=${apiKey}`;\n    \n    const response = await fetch(testUrl, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    \n    console.log(`üî• Firebase connection test: ${response.status}`);\n    \n    if (response.ok) {\n      const config = await response.json();\n      return NextResponse.json({\n        success: true,\n        message: 'Firebase connection successful',\n        config: {\n          projectId: config.projectId,\n          authDomain: config.authDomain,\n          providers: config.signIn || {}\n        }\n      });\n    } else {\n      const errorText = await response.text();\n      return NextResponse.json({\n        success: false,\n        error: `Firebase test failed: ${errorText}`\n      });\n    }\n    \n  } catch (error) {\n    return NextResponse.json({\n      success: false,\n      error: `Firebase connection test failed: ${error instanceof Error ? error.message : 'Unknown error'}`\n    });\n  }\n}\n\n/**\n * Create a mock Firebase-compatible ID token\n */\nfunction createMockFirebaseIdToken(googleUser: any) {\n  const header = {\n    alg: 'RS256',\n    kid: 'server-proxy',\n    typ: 'JWT'\n  };\n  \n  const now = Math.floor(Date.now() / 1000);\n  const payload = {\n    iss: 'https://securetoken.google.com/prepbettr',\n    aud: 'prepbettr',\n    auth_time: now,\n    user_id: googleUser.id,\n    uid: googleUser.id,\n    sub: googleUser.id,\n    iat: now,\n    exp: now + (60 * 60), // 1 hour\n    email: googleUser.email,\n    email_verified: googleUser.verified_email || true,\n    name: googleUser.name,\n    picture: googleUser.picture,\n    firebase: {\n      identities: {\n        'google.com': [googleUser.id],\n        email: [googleUser.email]\n      },\n      sign_in_provider: 'google.com'\n    }\n  };\n  \n  // Create JWT without signature (for development/server-side proxy)\n  const encodedHeader = Buffer.from(JSON.stringify(header)).toString('base64url');\n  const encodedPayload = Buffer.from(JSON.stringify(payload)).toString('base64url');\n  \n  return `${encodedHeader}.${encodedPayload}.server-proxy-signature`;\n}"],"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","ignoreList":[]}