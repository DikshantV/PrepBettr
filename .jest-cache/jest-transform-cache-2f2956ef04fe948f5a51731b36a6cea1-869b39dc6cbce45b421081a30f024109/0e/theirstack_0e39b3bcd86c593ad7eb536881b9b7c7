050649f561b4fcfbcf8dd9c49aae8703
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TheirStackPortal = void 0;
exports.getTheirStackPortal = getTheirStackPortal;
const bottleneck_1 = __importDefault(require("bottleneck"));
const admin_1 = require("../lib/firebase/admin");
class TheirStackPortal {
    constructor() {
        this.baseUrl = 'https://api.theirstack.com';
        this.firestore = null;
        // TheirStack API rate limits: 300 requests per minute
        // Bottleneck configuration for rate limiting
        this.rateLimiter = new bottleneck_1.default({
            minTime: 220, // Minimum 220ms between requests (300 req/min = 200ms, add buffer)
            maxConcurrent: 1, // Only 1 concurrent request to avoid rate limit breaches
            reservoir: 300, // 300 requests per minute
            reservoirRefreshAmount: 300,
            reservoirRefreshInterval: 60000, // Refresh every minute
        });
        // Initialize Firestore lazily
        this.initializeFirestore();
    }
    async initializeFirestore() {
        try {
            this.firestore = await (0, admin_1.getAdminFirestore)();
        }
        catch (error) {
            console.error('❌ Failed to initialize Firestore for TheirStack portal:', error);
        }
    }
    /**
     * Search for jobs on TheirStack with rate limiting and credit tracking
     */
    async searchJobs(userId, filters, page = 1, limit = 50) {
        const apiKey = process.env.THEIRSTACK_API_KEY;
        if (!apiKey) {
            this.logError('theirStackSearchError', 'TheirStack API key not configured', { userId, filters });
            throw new Error('TheirStack API key not configured. Please add THEIRSTACK_API_KEY to your environment variables.');
        }
        // Transform our filters to TheirStack API format
        const searchPayload = {
            filters: {
                keywords: filters.keywords,
                locations: filters.locations,
                jobTypes: filters.jobTypes,
                workArrangements: filters.workArrangements,
                salaryRange: filters.salaryRange,
                experienceLevel: filters.experienceLevel,
                companySize: filters.companySize,
                datePosted: filters.datePosted
            },
            page,
            limit
        };
        try {
            // Execute search with rate limiting
            const response = await this.rateLimiter.schedule(async () => {
                return fetch(`${this.baseUrl}/v1/jobs/search`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${apiKey}`,
                        'Content-Type': 'application/json',
                        'User-Agent': 'PrepBettr/1.0 (Job Search Automation)',
                    },
                    body: JSON.stringify(searchPayload)
                });
            });
            if (!response.ok) {
                const errorText = await response.text().catch(() => 'Unknown error');
                const errorMessage = `TheirStack API error: ${response.status} ${response.statusText} - ${errorText}`;
                this.logError('theirStackSearchError', errorMessage, {
                    userId,
                    statusCode: response.status,
                    statusText: response.statusText,
                    filters,
                    page,
                    limit
                });
                throw new Error(errorMessage);
            }
            const data = await response.json();
            // Track credit usage (1 credit per job returned)
            const creditsUsed = data.jobs.length;
            await this.trackCreditUsage(userId, creditsUsed);
            // Transform TheirStack jobs to our JobListing format
            const jobListings = this.transformTheirStackJobsToJobListings(data.jobs);
            // Log successful search
            this.logSuccess('theirStackSearchSuccess', 'TheirStack job search completed successfully', {
                userId,
                jobsFound: jobListings.length,
                totalCount: data.totalCount,
                page,
                limit,
                creditsUsed,
                hasMore: data.hasMore
            });
            return jobListings;
        }
        catch (error) {
            if (error instanceof bottleneck_1.default.BottleneckError) {
                // Rate limit breach detected
                this.logError('theirStackRateLimitBreach', 'TheirStack rate limit exceeded', {
                    userId,
                    error: error.message,
                    filters
                });
                throw new Error('TheirStack rate limit exceeded. Please try again later.');
            }
            // Re-throw other errors
            this.logError('theirStackSearchError', `TheirStack search failed: ${error}`, {
                userId,
                error: error instanceof Error ? error.message : String(error),
                filters,
                page,
                limit
            });
            throw error;
        }
    }
    /**
     * Track credit usage in Firestore
     */
    async trackCreditUsage(userId, creditsUsed) {
        var _a;
        if (!this.firestore || creditsUsed === 0)
            return;
        try {
            const currentMonth = new Date().toISOString().slice(0, 7); // YYYY-MM format
            const docPath = `usage/theirstackCredits/${currentMonth}`;
            const docRef = this.firestore.collection('usage').doc('theirstackCredits').collection('monthly').doc(currentMonth);
            await docRef.set({
                month: currentMonth,
                creditsUsed: this.firestore.FieldValue.increment(creditsUsed),
                lastUpdated: new Date(),
                userId: userId // Track which user used credits
            }, { merge: true });
            // Check credit usage and emit warnings
            const updatedDoc = await docRef.get();
            const totalCreditsUsed = ((_a = updatedDoc.data()) === null || _a === void 0 ? void 0 : _a.creditsUsed) || creditsUsed;
            // Emit warnings based on usage
            if (totalCreditsUsed >= 500) {
                this.logError('theirStackCreditsExceeded', 'TheirStack credits exceeded maximum threshold', {
                    userId,
                    creditsUsed: totalCreditsUsed,
                    threshold: 500,
                    month: currentMonth
                });
            }
            else if (totalCreditsUsed >= 160) { // 80% of 200 free credits
                this.logWarning('theirStackCreditsWarning', 'TheirStack credits approaching limit', {
                    userId,
                    creditsUsed: totalCreditsUsed,
                    threshold: 160,
                    freeLimit: 200,
                    month: currentMonth
                });
            }
            // Track metric for Application Insights
            this.logMetric('theirStackCreditsUsed', creditsUsed, {
                userId,
                month: currentMonth,
                totalCreditsThisMonth: totalCreditsUsed
            });
        }
        catch (error) {
            console.error('❌ Failed to track TheirStack credit usage:', error);
        }
    }
    /**
     * Get credit usage for a specific month
     */
    async getCreditsUsage(month) {
        var _a;
        if (!this.firestore)
            return null;
        try {
            const targetMonth = month || new Date().toISOString().slice(0, 7);
            const docRef = this.firestore.collection('usage').doc('theirstackCredits').collection('monthly').doc(targetMonth);
            const doc = await docRef.get();
            if (doc.exists) {
                const data = doc.data();
                return {
                    month: targetMonth,
                    creditsUsed: data.creditsUsed || 0,
                    lastUpdated: ((_a = data.lastUpdated) === null || _a === void 0 ? void 0 : _a.toDate()) || new Date()
                };
            }
            return {
                month: targetMonth,
                creditsUsed: 0,
                lastUpdated: new Date()
            };
        }
        catch (error) {
            console.error('❌ Failed to get TheirStack credits usage:', error);
            return null;
        }
    }
    /**
     * Transform TheirStack jobs to our JobListing format
     */
    transformTheirStackJobsToJobListings(theirStackJobs) {
        return theirStackJobs.map((job, index) => {
            var _a, _b;
            const jobListing = {
                id: job.id || `theirstack-${Date.now()}-${index}`,
                title: job.title || 'Untitled Position',
                company: ((_a = job.company) === null || _a === void 0 ? void 0 : _a.name) || 'Unknown Company',
                location: job.location || 'Location not specified',
                salary: job.salary ? {
                    min: job.salary.min,
                    max: job.salary.max,
                    currency: job.salary.currency || 'USD',
                    period: job.salary.period || 'yearly'
                } : undefined,
                jobType: this.mapJobTypeToOur(job.jobType),
                workArrangement: this.mapWorkArrangementToOur(job.workArrangement),
                description: job.description || 'No description available',
                requirements: job.requirements || [],
                responsibilities: job.responsibilities || [],
                benefits: job.benefits,
                postedDate: job.postedDate || new Date().toISOString(),
                applicationDeadline: job.applicationDeadline,
                jobPortal: {
                    name: 'TheirStack',
                    logo: '/icons/theirstack.svg',
                    website: 'https://theirstack.com',
                    supportsAutoApply: true,
                },
                originalUrl: job.originalUrl || `https://theirstack.com/jobs/${job.id}`,
                companyLogo: (_b = job.company) === null || _b === void 0 ? void 0 : _b.logo,
                relevancyScore: undefined, // Will be calculated later
                matchedSkills: [],
                missingSkills: [],
                applicationStatus: 'discovered',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString(),
            };
            return jobListing;
        });
    }
    /**
     * Map TheirStack job types to our format
     */
    mapJobTypeToOur(jobType) {
        switch (jobType === null || jobType === void 0 ? void 0 : jobType.toLowerCase()) {
            case 'full-time':
            case 'fulltime':
                return 'full-time';
            case 'part-time':
            case 'parttime':
                return 'part-time';
            case 'contract':
            case 'contractor':
                return 'contract';
            case 'internship':
            case 'intern':
                return 'internship';
            default:
                return 'full-time';
        }
    }
    /**
     * Map TheirStack work arrangements to our format
     */
    mapWorkArrangementToOur(workArrangement) {
        switch (workArrangement === null || workArrangement === void 0 ? void 0 : workArrangement.toLowerCase()) {
            case 'remote':
                return 'remote';
            case 'hybrid':
                return 'hybrid';
            case 'onsite':
            case 'on-site':
            case 'office':
                return 'onsite';
            default:
                return 'onsite';
        }
    }
    /**
     * Log successful operations with structured logging for Application Insights
     */
    logSuccess(eventName, message, properties = {}) {
        const logData = {
            level: 'info',
            eventName,
            message,
            properties: Object.assign({ portal: 'TheirStack', timestamp: new Date().toISOString() }, properties)
        };
        console.log('APPINSIGHTS', JSON.stringify(logData));
    }
    /**
     * Log errors with structured logging for Application Insights
     */
    logError(eventName, message, properties = {}) {
        const logData = {
            level: 'error',
            eventName,
            message,
            properties: Object.assign({ portal: 'TheirStack', timestamp: new Date().toISOString() }, properties)
        };
        console.log('APPINSIGHTS', JSON.stringify(logData));
    }
    /**
     * Log warnings with structured logging for Application Insights
     */
    logWarning(eventName, message, properties = {}) {
        const logData = {
            level: 'warning',
            eventName,
            message,
            properties: Object.assign({ portal: 'TheirStack', timestamp: new Date().toISOString() }, properties)
        };
        console.log('APPINSIGHTS', JSON.stringify(logData));
    }
    /**
     * Log custom metrics for Application Insights
     */
    logMetric(metricName, value, properties = {}) {
        const metricData = {
            type: 'metric',
            name: metricName,
            value,
            properties: Object.assign({ portal: 'TheirStack', timestamp: new Date().toISOString() }, properties)
        };
        console.log('APPINSIGHTS', JSON.stringify(metricData));
    }
    /**
     * Check if TheirStack is properly configured
     */
    isConfigured() {
        return !!process.env.THEIRSTACK_API_KEY;
    }
    /**
     * Health check for TheirStack portal
     */
    async healthCheck() {
        if (!this.isConfigured()) {
            return { healthy: false, message: 'TheirStack API key not configured' };
        }
        try {
            // Try a minimal API call to check connectivity
            const response = await this.rateLimiter.schedule(async () => {
                return fetch(`${this.baseUrl}/v1/health`, {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${process.env.THEIRSTACK_API_KEY}`,
                        'User-Agent': 'PrepBettr/1.0 (Health Check)',
                    }
                });
            });
            return {
                healthy: response.ok,
                message: response.ok ? 'TheirStack API accessible' : `HTTP ${response.status}: ${response.statusText}`
            };
        }
        catch (error) {
            return {
                healthy: false,
                message: `Health check failed: ${error instanceof Error ? error.message : String(error)}`
            };
        }
    }
}
exports.TheirStackPortal = TheirStackPortal;
// Singleton instance
let theirStackPortalInstance = null;
function getTheirStackPortal() {
    if (!theirStackPortalInstance) {
        theirStackPortalInstance = new TheirStackPortal();
    }
    return theirStackPortalInstance;
}
exports.default = TheirStackPortal;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,