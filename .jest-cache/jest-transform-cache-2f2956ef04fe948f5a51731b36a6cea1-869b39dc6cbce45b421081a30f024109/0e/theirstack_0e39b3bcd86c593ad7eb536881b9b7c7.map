{"file":"/Users/dikshantvashistha/PrepBettr/portals/theirstack.ts","mappings":"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","names":[],"sources":["/Users/dikshantvashistha/PrepBettr/portals/theirstack.ts"],"sourcesContent":["import Bottleneck from 'bottleneck';\nimport { JobListing, JobSearchFilters, ApplicationStatus } from '../types/auto-apply';\nimport { getAdminFirestore } from '../lib/firebase/admin';\n\n// TheirStack API interfaces\ninterface TheirStackJobSearchPayload {\n  filters: {\n    keywords?: string[];\n    locations?: string[];\n    jobTypes?: string[];\n    workArrangements?: string[];\n    salaryRange?: {\n      min?: number;\n      max?: number;\n      currency?: string;\n    };\n    experienceLevel?: string[];\n    companySize?: string[];\n    datePosted?: string;\n  };\n  page: number;\n  limit: number;\n}\n\ninterface TheirStackJobResponse {\n  jobs: TheirStackJob[];\n  totalCount: number;\n  page: number;\n  limit: number;\n  hasMore: boolean;\n}\n\ninterface TheirStackJob {\n  id: string;\n  title: string;\n  company: {\n    name: string;\n    logo?: string;\n    size?: string;\n    location?: string;\n  };\n  location: string;\n  salary?: {\n    min?: number;\n    max?: number;\n    currency?: string;\n    period?: 'hourly' | 'monthly' | 'yearly';\n  };\n  jobType: string;\n  workArrangement: string;\n  description: string;\n  requirements?: string[];\n  responsibilities?: string[];\n  benefits?: string[];\n  postedDate: string;\n  applicationDeadline?: string;\n  originalUrl: string;\n}\n\ninterface TheirStackCreditsUsage {\n  month: string; // YYYY-MM format\n  creditsUsed: number;\n  lastUpdated: Date;\n}\n\nexport class TheirStackPortal {\n  private rateLimiter: Bottleneck;\n  private baseUrl = 'https://api.theirstack.com';\n  private firestore: any = null;\n\n  constructor() {\n    // TheirStack API rate limits: 300 requests per minute\n    // Bottleneck configuration for rate limiting\n    this.rateLimiter = new Bottleneck({\n      minTime: 220, // Minimum 220ms between requests (300 req/min = 200ms, add buffer)\n      maxConcurrent: 1, // Only 1 concurrent request to avoid rate limit breaches\n      reservoir: 300, // 300 requests per minute\n      reservoirRefreshAmount: 300,\n      reservoirRefreshInterval: 60000, // Refresh every minute\n    });\n\n    // Initialize Firestore lazily\n    this.initializeFirestore();\n  }\n\n  private async initializeFirestore(): Promise<void> {\n    try {\n      this.firestore = await getAdminFirestore();\n    } catch (error) {\n      console.error('❌ Failed to initialize Firestore for TheirStack portal:', error);\n    }\n  }\n\n  /**\n   * Search for jobs on TheirStack with rate limiting and credit tracking\n   */\n  async searchJobs(userId: string, filters: JobSearchFilters, page: number = 1, limit: number = 50): Promise<JobListing[]> {\n    const apiKey = process.env.THEIRSTACK_API_KEY;\n    \n    if (!apiKey) {\n      this.logError('theirStackSearchError', 'TheirStack API key not configured', { userId, filters });\n      throw new Error('TheirStack API key not configured. Please add THEIRSTACK_API_KEY to your environment variables.');\n    }\n\n    // Transform our filters to TheirStack API format\n    const searchPayload: TheirStackJobSearchPayload = {\n      filters: {\n        keywords: filters.keywords,\n        locations: filters.locations,\n        jobTypes: filters.jobTypes,\n        workArrangements: filters.workArrangements,\n        salaryRange: filters.salaryRange,\n        experienceLevel: filters.experienceLevel,\n        companySize: filters.companySize,\n        datePosted: filters.datePosted\n      },\n      page,\n      limit\n    };\n\n    try {\n      // Execute search with rate limiting\n      const response = await this.rateLimiter.schedule(async () => {\n        return fetch(`${this.baseUrl}/v1/jobs/search`, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${apiKey}`,\n            'Content-Type': 'application/json',\n            'User-Agent': 'PrepBettr/1.0 (Job Search Automation)',\n          },\n          body: JSON.stringify(searchPayload)\n        });\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text().catch(() => 'Unknown error');\n        const errorMessage = `TheirStack API error: ${response.status} ${response.statusText} - ${errorText}`;\n        \n        this.logError('theirStackSearchError', errorMessage, {\n          userId,\n          statusCode: response.status,\n          statusText: response.statusText,\n          filters,\n          page,\n          limit\n        });\n        \n        throw new Error(errorMessage);\n      }\n\n      const data: TheirStackJobResponse = await response.json();\n      \n      // Track credit usage (1 credit per job returned)\n      const creditsUsed = data.jobs.length;\n      await this.trackCreditUsage(userId, creditsUsed);\n\n      // Transform TheirStack jobs to our JobListing format\n      const jobListings = this.transformTheirStackJobsToJobListings(data.jobs);\n\n      // Log successful search\n      this.logSuccess('theirStackSearchSuccess', 'TheirStack job search completed successfully', {\n        userId,\n        jobsFound: jobListings.length,\n        totalCount: data.totalCount,\n        page,\n        limit,\n        creditsUsed,\n        hasMore: data.hasMore\n      });\n\n      return jobListings;\n\n    } catch (error) {\n      if (error instanceof Bottleneck.BottleneckError) {\n        // Rate limit breach detected\n        this.logError('theirStackRateLimitBreach', 'TheirStack rate limit exceeded', {\n          userId,\n          error: error.message,\n          filters\n        });\n        throw new Error('TheirStack rate limit exceeded. Please try again later.');\n      }\n\n      // Re-throw other errors\n      this.logError('theirStackSearchError', `TheirStack search failed: ${error}`, {\n        userId,\n        error: error instanceof Error ? error.message : String(error),\n        filters,\n        page,\n        limit\n      });\n      \n      throw error;\n    }\n  }\n\n  /**\n   * Track credit usage in Firestore\n   */\n  private async trackCreditUsage(userId: string, creditsUsed: number): Promise<void> {\n    if (!this.firestore || creditsUsed === 0) return;\n\n    try {\n      const currentMonth = new Date().toISOString().slice(0, 7); // YYYY-MM format\n      const docPath = `usage/theirstackCredits/${currentMonth}`;\n      \n      const docRef = this.firestore.collection('usage').doc('theirstackCredits').collection('monthly').doc(currentMonth);\n      \n      await docRef.set({\n        month: currentMonth,\n        creditsUsed: this.firestore.FieldValue.increment(creditsUsed),\n        lastUpdated: new Date(),\n        userId: userId // Track which user used credits\n      }, { merge: true });\n\n      // Check credit usage and emit warnings\n      const updatedDoc = await docRef.get();\n      const totalCreditsUsed = updatedDoc.data()?.creditsUsed || creditsUsed;\n      \n      // Emit warnings based on usage\n      if (totalCreditsUsed >= 500) {\n        this.logError('theirStackCreditsExceeded', 'TheirStack credits exceeded maximum threshold', {\n          userId,\n          creditsUsed: totalCreditsUsed,\n          threshold: 500,\n          month: currentMonth\n        });\n      } else if (totalCreditsUsed >= 160) { // 80% of 200 free credits\n        this.logWarning('theirStackCreditsWarning', 'TheirStack credits approaching limit', {\n          userId,\n          creditsUsed: totalCreditsUsed,\n          threshold: 160,\n          freeLimit: 200,\n          month: currentMonth\n        });\n      }\n\n      // Track metric for Application Insights\n      this.logMetric('theirStackCreditsUsed', creditsUsed, {\n        userId,\n        month: currentMonth,\n        totalCreditsThisMonth: totalCreditsUsed\n      });\n\n    } catch (error) {\n      console.error('❌ Failed to track TheirStack credit usage:', error);\n    }\n  }\n\n  /**\n   * Get credit usage for a specific month\n   */\n  async getCreditsUsage(month?: string): Promise<TheirStackCreditsUsage | null> {\n    if (!this.firestore) return null;\n\n    try {\n      const targetMonth = month || new Date().toISOString().slice(0, 7);\n      const docRef = this.firestore.collection('usage').doc('theirstackCredits').collection('monthly').doc(targetMonth);\n      const doc = await docRef.get();\n\n      if (doc.exists) {\n        const data = doc.data();\n        return {\n          month: targetMonth,\n          creditsUsed: data.creditsUsed || 0,\n          lastUpdated: data.lastUpdated?.toDate() || new Date()\n        };\n      }\n\n      return {\n        month: targetMonth,\n        creditsUsed: 0,\n        lastUpdated: new Date()\n      };\n    } catch (error) {\n      console.error('❌ Failed to get TheirStack credits usage:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Transform TheirStack jobs to our JobListing format\n   */\n  private transformTheirStackJobsToJobListings(theirStackJobs: TheirStackJob[]): JobListing[] {\n    return theirStackJobs.map((job, index) => {\n      const jobListing: JobListing = {\n        id: job.id || `theirstack-${Date.now()}-${index}`,\n        title: job.title || 'Untitled Position',\n        company: job.company?.name || 'Unknown Company',\n        location: job.location || 'Location not specified',\n        salary: job.salary ? {\n          min: job.salary.min,\n          max: job.salary.max,\n          currency: job.salary.currency || 'USD',\n          period: job.salary.period || 'yearly'\n        } : undefined,\n        jobType: this.mapJobTypeToOur(job.jobType) as any,\n        workArrangement: this.mapWorkArrangementToOur(job.workArrangement) as any,\n        description: job.description || 'No description available',\n        requirements: job.requirements || [],\n        responsibilities: job.responsibilities || [],\n        benefits: job.benefits,\n        postedDate: job.postedDate || new Date().toISOString(),\n        applicationDeadline: job.applicationDeadline,\n        jobPortal: {\n          name: 'TheirStack',\n          logo: '/icons/theirstack.svg',\n          website: 'https://theirstack.com',\n          supportsAutoApply: true,\n        },\n        originalUrl: job.originalUrl || `https://theirstack.com/jobs/${job.id}`,\n        companyLogo: job.company?.logo,\n        relevancyScore: undefined, // Will be calculated later\n        matchedSkills: [],\n        missingSkills: [],\n        applicationStatus: 'discovered',\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n      };\n\n      return jobListing;\n    });\n  }\n\n  /**\n   * Map TheirStack job types to our format\n   */\n  private mapJobTypeToOur(jobType: string): string {\n    switch (jobType?.toLowerCase()) {\n      case 'full-time':\n      case 'fulltime':\n        return 'full-time';\n      case 'part-time':\n      case 'parttime':\n        return 'part-time';\n      case 'contract':\n      case 'contractor':\n        return 'contract';\n      case 'internship':\n      case 'intern':\n        return 'internship';\n      default:\n        return 'full-time';\n    }\n  }\n\n  /**\n   * Map TheirStack work arrangements to our format\n   */\n  private mapWorkArrangementToOur(workArrangement: string): string {\n    switch (workArrangement?.toLowerCase()) {\n      case 'remote':\n        return 'remote';\n      case 'hybrid':\n        return 'hybrid';\n      case 'onsite':\n      case 'on-site':\n      case 'office':\n        return 'onsite';\n      default:\n        return 'onsite';\n    }\n  }\n\n  /**\n   * Log successful operations with structured logging for Application Insights\n   */\n  private logSuccess(eventName: string, message: string, properties: any = {}): void {\n    const logData = {\n      level: 'info',\n      eventName,\n      message,\n      properties: {\n        portal: 'TheirStack',\n        timestamp: new Date().toISOString(),\n        ...properties\n      }\n    };\n\n    console.log('APPINSIGHTS', JSON.stringify(logData));\n  }\n\n  /**\n   * Log errors with structured logging for Application Insights\n   */\n  private logError(eventName: string, message: string, properties: any = {}): void {\n    const logData = {\n      level: 'error',\n      eventName,\n      message,\n      properties: {\n        portal: 'TheirStack',\n        timestamp: new Date().toISOString(),\n        ...properties\n      }\n    };\n\n    console.log('APPINSIGHTS', JSON.stringify(logData));\n  }\n\n  /**\n   * Log warnings with structured logging for Application Insights\n   */\n  private logWarning(eventName: string, message: string, properties: any = {}): void {\n    const logData = {\n      level: 'warning',\n      eventName,\n      message,\n      properties: {\n        portal: 'TheirStack',\n        timestamp: new Date().toISOString(),\n        ...properties\n      }\n    };\n\n    console.log('APPINSIGHTS', JSON.stringify(logData));\n  }\n\n  /**\n   * Log custom metrics for Application Insights\n   */\n  private logMetric(metricName: string, value: number, properties: any = {}): void {\n    const metricData = {\n      type: 'metric',\n      name: metricName,\n      value,\n      properties: {\n        portal: 'TheirStack',\n        timestamp: new Date().toISOString(),\n        ...properties\n      }\n    };\n\n    console.log('APPINSIGHTS', JSON.stringify(metricData));\n  }\n\n  /**\n   * Check if TheirStack is properly configured\n   */\n  isConfigured(): boolean {\n    return !!process.env.THEIRSTACK_API_KEY;\n  }\n\n  /**\n   * Health check for TheirStack portal\n   */\n  async healthCheck(): Promise<{ healthy: boolean; message?: string }> {\n    if (!this.isConfigured()) {\n      return { healthy: false, message: 'TheirStack API key not configured' };\n    }\n\n    try {\n      // Try a minimal API call to check connectivity\n      const response = await this.rateLimiter.schedule(async () => {\n        return fetch(`${this.baseUrl}/v1/health`, {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${process.env.THEIRSTACK_API_KEY}`,\n            'User-Agent': 'PrepBettr/1.0 (Health Check)',\n          }\n        });\n      });\n\n      return {\n        healthy: response.ok,\n        message: response.ok ? 'TheirStack API accessible' : `HTTP ${response.status}: ${response.statusText}`\n      };\n    } catch (error) {\n      return {\n        healthy: false,\n        message: `Health check failed: ${error instanceof Error ? error.message : String(error)}`\n      };\n    }\n  }\n}\n\n// Singleton instance\nlet theirStackPortalInstance: TheirStackPortal | null = null;\n\nexport function getTheirStackPortal(): TheirStackPortal {\n  if (!theirStackPortalInstance) {\n    theirStackPortalInstance = new TheirStackPortal();\n  }\n  return theirStackPortalInstance;\n}\n\nexport default TheirStackPortal;\n"],"version":3}