c926a6fdc7349d3c22b333495f2a9bb3
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock Firestore admin
jest.mock('../lib/firebase/admin', () => ({
    getAdminFirestore: jest.fn(() => Promise.resolve({
        collection: jest.fn(() => ({
            doc: jest.fn(() => ({
                collection: jest.fn(() => ({
                    doc: jest.fn(() => ({
                        set: jest.fn(),
                        get: jest.fn(() => Promise.resolve({
                            exists: false,
                            data: () => null
                        }))
                    }))
                }))
            }))
        })),
        FieldValue: {
            increment: jest.fn((value) => ({ _increment: value }))
        }
    }))
}));
const nock_1 = __importDefault(require("nock"));
const theirstack_1 = require("../portals/theirstack");
describe('TheirStack Portal Integration', () => {
    let theirStackPortal;
    const mockApiKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test';
    beforeAll(() => {
        // Set up environment
        process.env.THEIRSTACK_API_KEY = mockApiKey;
    });
    beforeEach(() => {
        theirStackPortal = new theirstack_1.TheirStackPortal();
        nock_1.default.cleanAll();
    });
    afterAll(() => {
        delete process.env.THEIRSTACK_API_KEY;
        nock_1.default.cleanAll();
    });
    describe('Configuration', () => {
        it('should detect when TheirStack is properly configured', () => {
            expect(theirStackPortal.isConfigured()).toBe(true);
        });
        it('should detect when TheirStack is not configured', () => {
            delete process.env.THEIRSTACK_API_KEY;
            const portal = new theirstack_1.TheirStackPortal();
            expect(portal.isConfigured()).toBe(false);
            process.env.THEIRSTACK_API_KEY = mockApiKey; // Restore
        });
    });
    describe('Job Search', () => {
        const mockUserId = 'test-user-123';
        const mockFilters = {
            keywords: ['React', 'TypeScript'],
            locations: ['Remote', 'San Francisco'],
            jobTypes: ['full-time'],
            workArrangements: ['remote'],
            experienceLevel: ['mid-senior'],
            companySize: ['medium', 'large'],
            datePosted: 'past-week',
            portals: ['TheirStack'],
            minimumRelevancyScore: 70
        };
        const mockTheirStackResponse = {
            jobs: [
                {
                    id: 'theirstack-job-1',
                    title: 'Senior React Developer',
                    company: {
                        name: 'TechCorp',
                        logo: 'https://example.com/logo.png',
                        size: 'medium',
                        location: 'San Francisco, CA'
                    },
                    location: 'San Francisco, CA (Remote OK)',
                    salary: {
                        min: 120000,
                        max: 160000,
                        currency: 'USD',
                        period: 'yearly'
                    },
                    jobType: 'full-time',
                    workArrangement: 'remote',
                    description: 'We are looking for a skilled React developer to join our team.',
                    requirements: ['React', 'TypeScript', 'JavaScript', 'Git'],
                    responsibilities: ['Build UI components', 'Collaborate with designers'],
                    benefits: ['Health insurance', 'Remote work', '401k'],
                    postedDate: '2025-01-20T10:00:00Z',
                    originalUrl: 'https://theirstack.com/jobs/theirstack-job-1'
                },
                {
                    id: 'theirstack-job-2',
                    title: 'Full Stack Engineer',
                    company: {
                        name: 'StartupXYZ',
                        size: 'small',
                        location: 'Remote'
                    },
                    location: 'Remote',
                    jobType: 'full-time',
                    workArrangement: 'remote',
                    description: 'Join our growing team to build web applications.',
                    requirements: ['React', 'Node.js', 'MongoDB'],
                    responsibilities: ['Develop features', 'Code reviews'],
                    postedDate: '2025-01-19T15:30:00Z',
                    originalUrl: 'https://theirstack.com/jobs/theirstack-job-2'
                }
            ],
            totalCount: 2,
            page: 1,
            limit: 50,
            hasMore: false
        };
        it('should successfully search for jobs and transform them to JobListing format', async () => {
            // Mock the TheirStack API
            (0, nock_1.default)('https://api.theirstack.com')
                .post('/v1/jobs/search', {
                filters: {
                    keywords: mockFilters.keywords,
                    locations: mockFilters.locations,
                    jobTypes: mockFilters.jobTypes,
                    workArrangements: mockFilters.workArrangements,
                    experienceLevel: mockFilters.experienceLevel,
                    companySize: mockFilters.companySize,
                    datePosted: mockFilters.datePosted
                },
                page: 1,
                limit: 50
            })
                .reply(200, mockTheirStackResponse);
            const result = await theirStackPortal.searchJobs(mockUserId, mockFilters);
            expect(result).toHaveLength(2);
            // Check first job transformation
            expect(result[0]).toMatchObject({
                id: 'theirstack-job-1',
                title: 'Senior React Developer',
                company: 'TechCorp',
                location: 'San Francisco, CA (Remote OK)',
                salary: {
                    min: 120000,
                    max: 160000,
                    currency: 'USD',
                    period: 'yearly'
                },
                jobType: 'full-time',
                workArrangement: 'remote',
                description: 'We are looking for a skilled React developer to join our team.',
                requirements: ['React', 'TypeScript', 'JavaScript', 'Git'],
                jobPortal: {
                    name: 'TheirStack',
                    logo: '/icons/theirstack.svg',
                    website: 'https://theirstack.com',
                    supportsAutoApply: true
                },
                applicationStatus: 'discovered'
            });
            // Check second job transformation
            expect(result[1]).toMatchObject({
                id: 'theirstack-job-2',
                title: 'Full Stack Engineer',
                company: 'StartupXYZ',
                location: 'Remote',
                jobType: 'full-time',
                workArrangement: 'remote'
            });
        });
        it('should handle API errors gracefully', async () => {
            (0, nock_1.default)('https://api.theirstack.com')
                .post('/v1/jobs/search')
                .reply(500, { error: 'Internal server error' });
            await expect(theirStackPortal.searchJobs(mockUserId, mockFilters)).rejects.toThrow('TheirStack API error: 500 Internal Server Error');
        });
        it('should handle rate limiting errors', async () => {
            (0, nock_1.default)('https://api.theirstack.com')
                .post('/v1/jobs/search')
                .reply(429, { error: 'Too many requests' });
            await expect(theirStackPortal.searchJobs(mockUserId, mockFilters)).rejects.toThrow('TheirStack API error: 429 Too Many Requests');
        });
        it('should throw error when API key is not configured', async () => {
            delete process.env.THEIRSTACK_API_KEY;
            const portal = new theirstack_1.TheirStackPortal();
            await expect(portal.searchJobs(mockUserId, mockFilters)).rejects.toThrow('TheirStack API key not configured');
            process.env.THEIRSTACK_API_KEY = mockApiKey; // Restore
        });
    });
    describe('Job Type Mapping', () => {
        it('should correctly map TheirStack job types to our format', () => {
            const portal = new theirstack_1.TheirStackPortal();
            // Access private method through any cast for testing
            const mapJobType = portal.mapJobTypeToOur.bind(portal);
            expect(mapJobType('full-time')).toBe('full-time');
            expect(mapJobType('fulltime')).toBe('full-time');
            expect(mapJobType('part-time')).toBe('part-time');
            expect(mapJobType('contract')).toBe('contract');
            expect(mapJobType('internship')).toBe('internship');
            expect(mapJobType('unknown')).toBe('full-time'); // default
        });
    });
    describe('Work Arrangement Mapping', () => {
        it('should correctly map TheirStack work arrangements to our format', () => {
            const portal = new theirstack_1.TheirStackPortal();
            // Access private method through any cast for testing
            const mapWorkArrangement = portal.mapWorkArrangementToOur.bind(portal);
            expect(mapWorkArrangement('remote')).toBe('remote');
            expect(mapWorkArrangement('hybrid')).toBe('hybrid');
            expect(mapWorkArrangement('onsite')).toBe('onsite');
            expect(mapWorkArrangement('on-site')).toBe('onsite');
            expect(mapWorkArrangement('office')).toBe('onsite');
            expect(mapWorkArrangement('unknown')).toBe('onsite'); // default
        });
    });
    describe('Credit Tracking', () => {
        it('should track credits when jobs are returned', async () => {
            const mockResponse = {
                jobs: [{ id: '1' }, { id: '2' }, { id: '3' }], // 3 jobs = 3 credits
                totalCount: 3,
                page: 1,
                limit: 50,
                hasMore: false
            };
            (0, nock_1.default)('https://api.theirstack.com')
                .post('/v1/jobs/search')
                .reply(200, mockResponse);
            // Mock Firestore operations
            const mockSet = jest.fn();
            const mockGet = jest.fn(() => Promise.resolve({
                exists: true,
                data: () => ({ creditsUsed: 5 }) // Mock existing credits
            }));
            require('../lib/firebase/admin').getAdminFirestore.mockImplementation(() => Promise.resolve({
                collection: jest.fn(() => ({
                    doc: jest.fn(() => ({
                        collection: jest.fn(() => ({
                            doc: jest.fn(() => ({
                                set: mockSet,
                                get: mockGet
                            }))
                        }))
                    }))
                })),
                FieldValue: {
                    increment: jest.fn((value) => ({ _increment: value }))
                }
            }));
            const result = await theirStackPortal.searchJobs('test-user', {
                keywords: ['test'],
                locations: [],
                jobTypes: [],
                workArrangements: [],
                experienceLevel: [],
                companySize: [],
                datePosted: 'any',
                portals: [],
                minimumRelevancyScore: 0
            });
            expect(result).toHaveLength(3);
            expect(mockSet).toHaveBeenCalled();
        });
    });
    describe('Health Check', () => {
        it('should return healthy status when API is accessible', async () => {
            (0, nock_1.default)('https://api.theirstack.com')
                .get('/v1/health')
                .reply(200, { status: 'ok' });
            const health = await theirStackPortal.healthCheck();
            expect(health.healthy).toBe(true);
            expect(health.message).toBe('TheirStack API accessible');
        });
        it('should return unhealthy status when API is not accessible', async () => {
            (0, nock_1.default)('https://api.theirstack.com')
                .get('/v1/health')
                .reply(500);
            const health = await theirStackPortal.healthCheck();
            expect(health.healthy).toBe(false);
            expect(health.message).toContain('HTTP 500');
        });
        it('should return unhealthy status when API key is not configured', async () => {
            delete process.env.THEIRSTACK_API_KEY;
            const portal = new theirstack_1.TheirStackPortal();
            const health = await portal.healthCheck();
            expect(health.healthy).toBe(false);
            expect(health.message).toBe('TheirStack API key not configured');
            process.env.THEIRSTACK_API_KEY = mockApiKey; // Restore
        });
    });
});
describe('TheirStack Credits Service Integration', () => {
    beforeAll(() => {
        process.env.THEIRSTACK_API_KEY = 'test-key';
    });
    afterAll(() => {
        delete process.env.THEIRSTACK_API_KEY;
    });
    it('should be importable', () => {
        const { getCurrentTheirStackCredits, getTheirStackCreditsSummary } = require('../lib/services/theirstack-credits');
        expect(typeof getCurrentTheirStackCredits).toBe('function');
        expect(typeof getTheirStackCreditsSummary).toBe('function');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2Rpa3NoYW50dmFzaGlzdGhhL1ByZXBCZXR0ci90ZXN0cy90aGVpcnN0YWNrLXBvcnRhbC50ZXN0LnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBSUEsdUJBQXVCO0FBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUN4QyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7UUFDL0MsVUFBVSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUN6QixHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO2dCQUNsQixVQUFVLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO29CQUN6QixHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO3dCQUNsQixHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTt3QkFDZCxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDOzRCQUNqQyxNQUFNLEVBQUUsS0FBSzs0QkFDYixJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSTt5QkFDakIsQ0FBQyxDQUFDO3FCQUNKLENBQUMsQ0FBQztpQkFDSixDQUFDLENBQUM7YUFDSixDQUFDLENBQUM7U0FDSixDQUFDLENBQUM7UUFDSCxVQUFVLEVBQUU7WUFDVixTQUFTLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1NBQ3ZEO0tBQ0YsQ0FBQyxDQUFDO0NBQ0osQ0FBQyxDQUFDLENBQUM7QUF4QkosZ0RBQXdCO0FBQ3hCLHNEQUF5RDtBQXlCekQsUUFB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QUcsQ0FBQyxrQkFBa0IsR0FBRyxVQUFVLENBQUM7SUFDOUMsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsR0FBRyxFQUFFO1FBQ1osT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDO0lBQ3hDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHNCQUFzQixFQUFFLEdBQUcsRUFBRTtRQUM5QixNQUFNLEVBQUUsMkJBQTJCLEVBQUUsMkJBQTJCLEVBQUUsR0FBRyxPQUFPLENBQUMsb0NBQW9DLENBQUMsQ0FBQztRQUVuSCxNQUFNLENBQUMsT0FBTywyQkFBMkIsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM1RCxNQUFNLENBQUMsT0FBTywyQkFBMkIsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM5RCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9kaWtzaGFudHZhc2hpc3RoYS9QcmVwQmV0dHIvdGVzdHMvdGhlaXJzdGFjay1wb3J0YWwudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbm9jayBmcm9tICdub2NrJztcbmltcG9ydCB7IFRoZWlyU3RhY2tQb3J0YWwgfSBmcm9tICcuLi9wb3J0YWxzL3RoZWlyc3RhY2snO1xuaW1wb3J0IHsgSm9iU2VhcmNoRmlsdGVycyB9IGZyb20gJy4uL3R5cGVzL2F1dG8tYXBwbHknO1xuXG4vLyBNb2NrIEZpcmVzdG9yZSBhZG1pblxuamVzdC5tb2NrKCcuLi9saWIvZmlyZWJhc2UvYWRtaW4nLCAoKSA9PiAoe1xuICBnZXRBZG1pbkZpcmVzdG9yZTogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoe1xuICAgIGNvbGxlY3Rpb246IGplc3QuZm4oKCkgPT4gKHtcbiAgICAgIGRvYzogamVzdC5mbigoKSA9PiAoe1xuICAgICAgICBjb2xsZWN0aW9uOiBqZXN0LmZuKCgpID0+ICh7XG4gICAgICAgICAgZG9jOiBqZXN0LmZuKCgpID0+ICh7XG4gICAgICAgICAgICBzZXQ6IGplc3QuZm4oKSxcbiAgICAgICAgICAgIGdldDogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICAgICAgICBleGlzdHM6IGZhbHNlLFxuICAgICAgICAgICAgICBkYXRhOiAoKSA9PiBudWxsXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgICB9KSlcbiAgICAgICAgfSkpXG4gICAgICB9KSlcbiAgICB9KSksXG4gICAgRmllbGRWYWx1ZToge1xuICAgICAgaW5jcmVtZW50OiBqZXN0LmZuKCh2YWx1ZSkgPT4gKHsgX2luY3JlbWVudDogdmFsdWUgfSkpXG4gICAgfVxuICB9KSlcbn0pKTtcblxuZGVzY3JpYmUoJ1RoZWlyU3RhY2sgUG9ydGFsIEludGVncmF0aW9uJywgKCkgPT4ge1xuICBsZXQgdGhlaXJTdGFja1BvcnRhbDogVGhlaXJTdGFja1BvcnRhbDtcbiAgY29uc3QgbW9ja0FwaUtleSA9ICdleUpoYkdjaU9pSklVekkxTmlJc0luUjVjQ0k2SWtwWFZDSjkudGVzdCc7XG4gIFxuICBiZWZvcmVBbGwoKCkgPT4ge1xuICAgIC8vIFNldCB1cCBlbnZpcm9ubWVudFxuICAgIHByb2Nlc3MuZW52LlRIRUlSU1RBQ0tfQVBJX0tFWSA9IG1vY2tBcGlLZXk7XG4gIH0pO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIHRoZWlyU3RhY2tQb3J0YWwgPSBuZXcgVGhlaXJTdGFja1BvcnRhbCgpO1xuICAgIG5vY2suY2xlYW5BbGwoKTtcbiAgfSk7XG5cbiAgYWZ0ZXJBbGwoKCkgPT4ge1xuICAgIGRlbGV0ZSBwcm9jZXNzLmVudi5USEVJUlNUQUNLX0FQSV9LRVk7XG4gICAgbm9jay5jbGVhbkFsbCgpO1xuICB9KTtcblxuICBkZXNjcmliZSgnQ29uZmlndXJhdGlvbicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGRldGVjdCB3aGVuIFRoZWlyU3RhY2sgaXMgcHJvcGVybHkgY29uZmlndXJlZCcsICgpID0+IHtcbiAgICAgIGV4cGVjdCh0aGVpclN0YWNrUG9ydGFsLmlzQ29uZmlndXJlZCgpKS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBkZXRlY3Qgd2hlbiBUaGVpclN0YWNrIGlzIG5vdCBjb25maWd1cmVkJywgKCkgPT4ge1xuICAgICAgZGVsZXRlIHByb2Nlc3MuZW52LlRIRUlSU1RBQ0tfQVBJX0tFWTtcbiAgICAgIGNvbnN0IHBvcnRhbCA9IG5ldyBUaGVpclN0YWNrUG9ydGFsKCk7XG4gICAgICBleHBlY3QocG9ydGFsLmlzQ29uZmlndXJlZCgpKS50b0JlKGZhbHNlKTtcbiAgICAgIHByb2Nlc3MuZW52LlRIRUlSU1RBQ0tfQVBJX0tFWSA9IG1vY2tBcGlLZXk7IC8vIFJlc3RvcmVcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0pvYiBTZWFyY2gnLCAoKSA9PiB7XG4gICAgY29uc3QgbW9ja1VzZXJJZCA9ICd0ZXN0LXVzZXItMTIzJztcbiAgICBjb25zdCBtb2NrRmlsdGVyczogSm9iU2VhcmNoRmlsdGVycyA9IHtcbiAgICAgIGtleXdvcmRzOiBbJ1JlYWN0JywgJ1R5cGVTY3JpcHQnXSxcbiAgICAgIGxvY2F0aW9uczogWydSZW1vdGUnLCAnU2FuIEZyYW5jaXNjbyddLFxuICAgICAgam9iVHlwZXM6IFsnZnVsbC10aW1lJ10sXG4gICAgICB3b3JrQXJyYW5nZW1lbnRzOiBbJ3JlbW90ZSddLFxuICAgICAgZXhwZXJpZW5jZUxldmVsOiBbJ21pZC1zZW5pb3InXSxcbiAgICAgIGNvbXBhbnlTaXplOiBbJ21lZGl1bScsICdsYXJnZSddLFxuICAgICAgZGF0ZVBvc3RlZDogJ3Bhc3Qtd2VlaycsXG4gICAgICBwb3J0YWxzOiBbJ1RoZWlyU3RhY2snXSxcbiAgICAgIG1pbmltdW1SZWxldmFuY3lTY29yZTogNzBcbiAgICB9O1xuXG4gICAgY29uc3QgbW9ja1RoZWlyU3RhY2tSZXNwb25zZSA9IHtcbiAgICAgIGpvYnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGlkOiAndGhlaXJzdGFjay1qb2ItMScsXG4gICAgICAgICAgdGl0bGU6ICdTZW5pb3IgUmVhY3QgRGV2ZWxvcGVyJyxcbiAgICAgICAgICBjb21wYW55OiB7XG4gICAgICAgICAgICBuYW1lOiAnVGVjaENvcnAnLFxuICAgICAgICAgICAgbG9nbzogJ2h0dHBzOi8vZXhhbXBsZS5jb20vbG9nby5wbmcnLFxuICAgICAgICAgICAgc2l6ZTogJ21lZGl1bScsXG4gICAgICAgICAgICBsb2NhdGlvbjogJ1NhbiBGcmFuY2lzY28sIENBJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgbG9jYXRpb246ICdTYW4gRnJhbmNpc2NvLCBDQSAoUmVtb3RlIE9LKScsXG4gICAgICAgICAgc2FsYXJ5OiB7XG4gICAgICAgICAgICBtaW46IDEyMDAwMCxcbiAgICAgICAgICAgIG1heDogMTYwMDAwLFxuICAgICAgICAgICAgY3VycmVuY3k6ICdVU0QnLFxuICAgICAgICAgICAgcGVyaW9kOiAneWVhcmx5J1xuICAgICAgICAgIH0sXG4gICAgICAgICAgam9iVHlwZTogJ2Z1bGwtdGltZScsXG4gICAgICAgICAgd29ya0FycmFuZ2VtZW50OiAncmVtb3RlJyxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ1dlIGFyZSBsb29raW5nIGZvciBhIHNraWxsZWQgUmVhY3QgZGV2ZWxvcGVyIHRvIGpvaW4gb3VyIHRlYW0uJyxcbiAgICAgICAgICByZXF1aXJlbWVudHM6IFsnUmVhY3QnLCAnVHlwZVNjcmlwdCcsICdKYXZhU2NyaXB0JywgJ0dpdCddLFxuICAgICAgICAgIHJlc3BvbnNpYmlsaXRpZXM6IFsnQnVpbGQgVUkgY29tcG9uZW50cycsICdDb2xsYWJvcmF0ZSB3aXRoIGRlc2lnbmVycyddLFxuICAgICAgICAgIGJlbmVmaXRzOiBbJ0hlYWx0aCBpbnN1cmFuY2UnLCAnUmVtb3RlIHdvcmsnLCAnNDAxayddLFxuICAgICAgICAgIHBvc3RlZERhdGU6ICcyMDI1LTAxLTIwVDEwOjAwOjAwWicsXG4gICAgICAgICAgb3JpZ2luYWxVcmw6ICdodHRwczovL3RoZWlyc3RhY2suY29tL2pvYnMvdGhlaXJzdGFjay1qb2ItMSdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGlkOiAndGhlaXJzdGFjay1qb2ItMicsXG4gICAgICAgICAgdGl0bGU6ICdGdWxsIFN0YWNrIEVuZ2luZWVyJyxcbiAgICAgICAgICBjb21wYW55OiB7XG4gICAgICAgICAgICBuYW1lOiAnU3RhcnR1cFhZWicsXG4gICAgICAgICAgICBzaXplOiAnc21hbGwnLFxuICAgICAgICAgICAgbG9jYXRpb246ICdSZW1vdGUnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBsb2NhdGlvbjogJ1JlbW90ZScsXG4gICAgICAgICAgam9iVHlwZTogJ2Z1bGwtdGltZScsXG4gICAgICAgICAgd29ya0FycmFuZ2VtZW50OiAncmVtb3RlJyxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0pvaW4gb3VyIGdyb3dpbmcgdGVhbSB0byBidWlsZCB3ZWIgYXBwbGljYXRpb25zLicsXG4gICAgICAgICAgcmVxdWlyZW1lbnRzOiBbJ1JlYWN0JywgJ05vZGUuanMnLCAnTW9uZ29EQiddLFxuICAgICAgICAgIHJlc3BvbnNpYmlsaXRpZXM6IFsnRGV2ZWxvcCBmZWF0dXJlcycsICdDb2RlIHJldmlld3MnXSxcbiAgICAgICAgICBwb3N0ZWREYXRlOiAnMjAyNS0wMS0xOVQxNTozMDowMFonLFxuICAgICAgICAgIG9yaWdpbmFsVXJsOiAnaHR0cHM6Ly90aGVpcnN0YWNrLmNvbS9qb2JzL3RoZWlyc3RhY2stam9iLTInXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICB0b3RhbENvdW50OiAyLFxuICAgICAgcGFnZTogMSxcbiAgICAgIGxpbWl0OiA1MCxcbiAgICAgIGhhc01vcmU6IGZhbHNlXG4gICAgfTtcblxuICAgIGl0KCdzaG91bGQgc3VjY2Vzc2Z1bGx5IHNlYXJjaCBmb3Igam9icyBhbmQgdHJhbnNmb3JtIHRoZW0gdG8gSm9iTGlzdGluZyBmb3JtYXQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBNb2NrIHRoZSBUaGVpclN0YWNrIEFQSVxuICAgICAgbm9jaygnaHR0cHM6Ly9hcGkudGhlaXJzdGFjay5jb20nKVxuICAgICAgICAucG9zdCgnL3YxL2pvYnMvc2VhcmNoJywge1xuICAgICAgICAgIGZpbHRlcnM6IHtcbiAgICAgICAgICAgIGtleXdvcmRzOiBtb2NrRmlsdGVycy5rZXl3b3JkcyxcbiAgICAgICAgICAgIGxvY2F0aW9uczogbW9ja0ZpbHRlcnMubG9jYXRpb25zLFxuICAgICAgICAgICAgam9iVHlwZXM6IG1vY2tGaWx0ZXJzLmpvYlR5cGVzLFxuICAgICAgICAgICAgd29ya0FycmFuZ2VtZW50czogbW9ja0ZpbHRlcnMud29ya0FycmFuZ2VtZW50cyxcbiAgICAgICAgICAgIGV4cGVyaWVuY2VMZXZlbDogbW9ja0ZpbHRlcnMuZXhwZXJpZW5jZUxldmVsLFxuICAgICAgICAgICAgY29tcGFueVNpemU6IG1vY2tGaWx0ZXJzLmNvbXBhbnlTaXplLFxuICAgICAgICAgICAgZGF0ZVBvc3RlZDogbW9ja0ZpbHRlcnMuZGF0ZVBvc3RlZFxuICAgICAgICAgIH0sXG4gICAgICAgICAgcGFnZTogMSxcbiAgICAgICAgICBsaW1pdDogNTBcbiAgICAgICAgfSlcbiAgICAgICAgLnJlcGx5KDIwMCwgbW9ja1RoZWlyU3RhY2tSZXNwb25zZSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoZWlyU3RhY2tQb3J0YWwuc2VhcmNoSm9icyhtb2NrVXNlcklkLCBtb2NrRmlsdGVycyk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvSGF2ZUxlbmd0aCgyKTtcbiAgICAgIFxuICAgICAgLy8gQ2hlY2sgZmlyc3Qgam9iIHRyYW5zZm9ybWF0aW9uXG4gICAgICBleHBlY3QocmVzdWx0WzBdKS50b01hdGNoT2JqZWN0KHtcbiAgICAgICAgaWQ6ICd0aGVpcnN0YWNrLWpvYi0xJyxcbiAgICAgICAgdGl0bGU6ICdTZW5pb3IgUmVhY3QgRGV2ZWxvcGVyJyxcbiAgICAgICAgY29tcGFueTogJ1RlY2hDb3JwJyxcbiAgICAgICAgbG9jYXRpb246ICdTYW4gRnJhbmNpc2NvLCBDQSAoUmVtb3RlIE9LKScsXG4gICAgICAgIHNhbGFyeToge1xuICAgICAgICAgIG1pbjogMTIwMDAwLFxuICAgICAgICAgIG1heDogMTYwMDAwLFxuICAgICAgICAgIGN1cnJlbmN5OiAnVVNEJyxcbiAgICAgICAgICBwZXJpb2Q6ICd5ZWFybHknXG4gICAgICAgIH0sXG4gICAgICAgIGpvYlR5cGU6ICdmdWxsLXRpbWUnLFxuICAgICAgICB3b3JrQXJyYW5nZW1lbnQ6ICdyZW1vdGUnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ1dlIGFyZSBsb29raW5nIGZvciBhIHNraWxsZWQgUmVhY3QgZGV2ZWxvcGVyIHRvIGpvaW4gb3VyIHRlYW0uJyxcbiAgICAgICAgcmVxdWlyZW1lbnRzOiBbJ1JlYWN0JywgJ1R5cGVTY3JpcHQnLCAnSmF2YVNjcmlwdCcsICdHaXQnXSxcbiAgICAgICAgam9iUG9ydGFsOiB7XG4gICAgICAgICAgbmFtZTogJ1RoZWlyU3RhY2snLFxuICAgICAgICAgIGxvZ286ICcvaWNvbnMvdGhlaXJzdGFjay5zdmcnLFxuICAgICAgICAgIHdlYnNpdGU6ICdodHRwczovL3RoZWlyc3RhY2suY29tJyxcbiAgICAgICAgICBzdXBwb3J0c0F1dG9BcHBseTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBhcHBsaWNhdGlvblN0YXR1czogJ2Rpc2NvdmVyZWQnXG4gICAgICB9KTtcblxuICAgICAgLy8gQ2hlY2sgc2Vjb25kIGpvYiB0cmFuc2Zvcm1hdGlvblxuICAgICAgZXhwZWN0KHJlc3VsdFsxXSkudG9NYXRjaE9iamVjdCh7XG4gICAgICAgIGlkOiAndGhlaXJzdGFjay1qb2ItMicsXG4gICAgICAgIHRpdGxlOiAnRnVsbCBTdGFjayBFbmdpbmVlcicsXG4gICAgICAgIGNvbXBhbnk6ICdTdGFydHVwWFlaJyxcbiAgICAgICAgbG9jYXRpb246ICdSZW1vdGUnLFxuICAgICAgICBqb2JUeXBlOiAnZnVsbC10aW1lJyxcbiAgICAgICAgd29ya0FycmFuZ2VtZW50OiAncmVtb3RlJ1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBBUEkgZXJyb3JzIGdyYWNlZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBub2NrKCdodHRwczovL2FwaS50aGVpcnN0YWNrLmNvbScpXG4gICAgICAgIC5wb3N0KCcvdjEvam9icy9zZWFyY2gnKVxuICAgICAgICAucmVwbHkoNTAwLCB7IGVycm9yOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyB9KTtcblxuICAgICAgYXdhaXQgZXhwZWN0KFxuICAgICAgICB0aGVpclN0YWNrUG9ydGFsLnNlYXJjaEpvYnMobW9ja1VzZXJJZCwgbW9ja0ZpbHRlcnMpXG4gICAgICApLnJlamVjdHMudG9UaHJvdygnVGhlaXJTdGFjayBBUEkgZXJyb3I6IDUwMCBJbnRlcm5hbCBTZXJ2ZXIgRXJyb3InKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHJhdGUgbGltaXRpbmcgZXJyb3JzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbm9jaygnaHR0cHM6Ly9hcGkudGhlaXJzdGFjay5jb20nKVxuICAgICAgICAucG9zdCgnL3YxL2pvYnMvc2VhcmNoJylcbiAgICAgICAgLnJlcGx5KDQyOSwgeyBlcnJvcjogJ1RvbyBtYW55IHJlcXVlc3RzJyB9KTtcblxuICAgICAgYXdhaXQgZXhwZWN0KFxuICAgICAgICB0aGVpclN0YWNrUG9ydGFsLnNlYXJjaEpvYnMobW9ja1VzZXJJZCwgbW9ja0ZpbHRlcnMpXG4gICAgICApLnJlamVjdHMudG9UaHJvdygnVGhlaXJTdGFjayBBUEkgZXJyb3I6IDQyOSBUb28gTWFueSBSZXF1ZXN0cycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB0aHJvdyBlcnJvciB3aGVuIEFQSSBrZXkgaXMgbm90IGNvbmZpZ3VyZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBkZWxldGUgcHJvY2Vzcy5lbnYuVEhFSVJTVEFDS19BUElfS0VZO1xuICAgICAgY29uc3QgcG9ydGFsID0gbmV3IFRoZWlyU3RhY2tQb3J0YWwoKTtcblxuICAgICAgYXdhaXQgZXhwZWN0KFxuICAgICAgICBwb3J0YWwuc2VhcmNoSm9icyhtb2NrVXNlcklkLCBtb2NrRmlsdGVycylcbiAgICAgICkucmVqZWN0cy50b1Rocm93KCdUaGVpclN0YWNrIEFQSSBrZXkgbm90IGNvbmZpZ3VyZWQnKTtcblxuICAgICAgcHJvY2Vzcy5lbnYuVEhFSVJTVEFDS19BUElfS0VZID0gbW9ja0FwaUtleTsgLy8gUmVzdG9yZVxuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnSm9iIFR5cGUgTWFwcGluZycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGNvcnJlY3RseSBtYXAgVGhlaXJTdGFjayBqb2IgdHlwZXMgdG8gb3VyIGZvcm1hdCcsICgpID0+IHtcbiAgICAgIGNvbnN0IHBvcnRhbCA9IG5ldyBUaGVpclN0YWNrUG9ydGFsKCk7XG4gICAgICBcbiAgICAgIC8vIEFjY2VzcyBwcml2YXRlIG1ldGhvZCB0aHJvdWdoIGFueSBjYXN0IGZvciB0ZXN0aW5nXG4gICAgICBjb25zdCBtYXBKb2JUeXBlID0gKHBvcnRhbCBhcyBhbnkpLm1hcEpvYlR5cGVUb091ci5iaW5kKHBvcnRhbCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChtYXBKb2JUeXBlKCdmdWxsLXRpbWUnKSkudG9CZSgnZnVsbC10aW1lJyk7XG4gICAgICBleHBlY3QobWFwSm9iVHlwZSgnZnVsbHRpbWUnKSkudG9CZSgnZnVsbC10aW1lJyk7XG4gICAgICBleHBlY3QobWFwSm9iVHlwZSgncGFydC10aW1lJykpLnRvQmUoJ3BhcnQtdGltZScpO1xuICAgICAgZXhwZWN0KG1hcEpvYlR5cGUoJ2NvbnRyYWN0JykpLnRvQmUoJ2NvbnRyYWN0Jyk7XG4gICAgICBleHBlY3QobWFwSm9iVHlwZSgnaW50ZXJuc2hpcCcpKS50b0JlKCdpbnRlcm5zaGlwJyk7XG4gICAgICBleHBlY3QobWFwSm9iVHlwZSgndW5rbm93bicpKS50b0JlKCdmdWxsLXRpbWUnKTsgLy8gZGVmYXVsdFxuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnV29yayBBcnJhbmdlbWVudCBNYXBwaW5nJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgY29ycmVjdGx5IG1hcCBUaGVpclN0YWNrIHdvcmsgYXJyYW5nZW1lbnRzIHRvIG91ciBmb3JtYXQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBwb3J0YWwgPSBuZXcgVGhlaXJTdGFja1BvcnRhbCgpO1xuICAgICAgXG4gICAgICAvLyBBY2Nlc3MgcHJpdmF0ZSBtZXRob2QgdGhyb3VnaCBhbnkgY2FzdCBmb3IgdGVzdGluZ1xuICAgICAgY29uc3QgbWFwV29ya0FycmFuZ2VtZW50ID0gKHBvcnRhbCBhcyBhbnkpLm1hcFdvcmtBcnJhbmdlbWVudFRvT3VyLmJpbmQocG9ydGFsKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KG1hcFdvcmtBcnJhbmdlbWVudCgncmVtb3RlJykpLnRvQmUoJ3JlbW90ZScpO1xuICAgICAgZXhwZWN0KG1hcFdvcmtBcnJhbmdlbWVudCgnaHlicmlkJykpLnRvQmUoJ2h5YnJpZCcpO1xuICAgICAgZXhwZWN0KG1hcFdvcmtBcnJhbmdlbWVudCgnb25zaXRlJykpLnRvQmUoJ29uc2l0ZScpO1xuICAgICAgZXhwZWN0KG1hcFdvcmtBcnJhbmdlbWVudCgnb24tc2l0ZScpKS50b0JlKCdvbnNpdGUnKTtcbiAgICAgIGV4cGVjdChtYXBXb3JrQXJyYW5nZW1lbnQoJ29mZmljZScpKS50b0JlKCdvbnNpdGUnKTtcbiAgICAgIGV4cGVjdChtYXBXb3JrQXJyYW5nZW1lbnQoJ3Vua25vd24nKSkudG9CZSgnb25zaXRlJyk7IC8vIGRlZmF1bHRcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0NyZWRpdCBUcmFja2luZycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHRyYWNrIGNyZWRpdHMgd2hlbiBqb2JzIGFyZSByZXR1cm5lZCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tSZXNwb25zZSA9IHtcbiAgICAgICAgam9iczogW3sgaWQ6ICcxJyB9LCB7IGlkOiAnMicgfSwgeyBpZDogJzMnIH1dLCAvLyAzIGpvYnMgPSAzIGNyZWRpdHNcbiAgICAgICAgdG90YWxDb3VudDogMyxcbiAgICAgICAgcGFnZTogMSxcbiAgICAgICAgbGltaXQ6IDUwLFxuICAgICAgICBoYXNNb3JlOiBmYWxzZVxuICAgICAgfTtcblxuICAgICAgbm9jaygnaHR0cHM6Ly9hcGkudGhlaXJzdGFjay5jb20nKVxuICAgICAgICAucG9zdCgnL3YxL2pvYnMvc2VhcmNoJylcbiAgICAgICAgLnJlcGx5KDIwMCwgbW9ja1Jlc3BvbnNlKTtcblxuICAgICAgLy8gTW9jayBGaXJlc3RvcmUgb3BlcmF0aW9uc1xuICAgICAgY29uc3QgbW9ja1NldCA9IGplc3QuZm4oKTtcbiAgICAgIGNvbnN0IG1vY2tHZXQgPSBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgIGV4aXN0czogdHJ1ZSxcbiAgICAgICAgZGF0YTogKCkgPT4gKHsgY3JlZGl0c1VzZWQ6IDUgfSkgLy8gTW9jayBleGlzdGluZyBjcmVkaXRzXG4gICAgICB9KSk7XG4gICAgICBcbiAgICAgIChyZXF1aXJlKCcuLi9saWIvZmlyZWJhc2UvYWRtaW4nKS5nZXRBZG1pbkZpcmVzdG9yZSBhcyBqZXN0Lk1vY2spLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICBjb2xsZWN0aW9uOiBqZXN0LmZuKCgpID0+ICh7XG4gICAgICAgICAgZG9jOiBqZXN0LmZuKCgpID0+ICh7XG4gICAgICAgICAgICBjb2xsZWN0aW9uOiBqZXN0LmZuKCgpID0+ICh7XG4gICAgICAgICAgICAgIGRvYzogamVzdC5mbigoKSA9PiAoe1xuICAgICAgICAgICAgICAgIHNldDogbW9ja1NldCxcbiAgICAgICAgICAgICAgICBnZXQ6IG1vY2tHZXRcbiAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgICB9KSlcbiAgICAgICAgfSkpLFxuICAgICAgICBGaWVsZFZhbHVlOiB7XG4gICAgICAgICAgaW5jcmVtZW50OiBqZXN0LmZuKCh2YWx1ZSkgPT4gKHsgX2luY3JlbWVudDogdmFsdWUgfSkpXG4gICAgICAgIH1cbiAgICAgIH0pKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhlaXJTdGFja1BvcnRhbC5zZWFyY2hKb2JzKCd0ZXN0LXVzZXInLCB7XG4gICAgICAgIGtleXdvcmRzOiBbJ3Rlc3QnXSxcbiAgICAgICAgbG9jYXRpb25zOiBbXSxcbiAgICAgICAgam9iVHlwZXM6IFtdLFxuICAgICAgICB3b3JrQXJyYW5nZW1lbnRzOiBbXSxcbiAgICAgICAgZXhwZXJpZW5jZUxldmVsOiBbXSxcbiAgICAgICAgY29tcGFueVNpemU6IFtdLFxuICAgICAgICBkYXRlUG9zdGVkOiAnYW55JyxcbiAgICAgICAgcG9ydGFsczogW10sXG4gICAgICAgIG1pbmltdW1SZWxldmFuY3lTY29yZTogMFxuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvSGF2ZUxlbmd0aCgzKTtcbiAgICAgIGV4cGVjdChtb2NrU2V0KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdIZWFsdGggQ2hlY2snLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gaGVhbHRoeSBzdGF0dXMgd2hlbiBBUEkgaXMgYWNjZXNzaWJsZScsIGFzeW5jICgpID0+IHtcbiAgICAgIG5vY2soJ2h0dHBzOi8vYXBpLnRoZWlyc3RhY2suY29tJylcbiAgICAgICAgLmdldCgnL3YxL2hlYWx0aCcpXG4gICAgICAgIC5yZXBseSgyMDAsIHsgc3RhdHVzOiAnb2snIH0pO1xuXG4gICAgICBjb25zdCBoZWFsdGggPSBhd2FpdCB0aGVpclN0YWNrUG9ydGFsLmhlYWx0aENoZWNrKCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChoZWFsdGguaGVhbHRoeSkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChoZWFsdGgubWVzc2FnZSkudG9CZSgnVGhlaXJTdGFjayBBUEkgYWNjZXNzaWJsZScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gdW5oZWFsdGh5IHN0YXR1cyB3aGVuIEFQSSBpcyBub3QgYWNjZXNzaWJsZScsIGFzeW5jICgpID0+IHtcbiAgICAgIG5vY2soJ2h0dHBzOi8vYXBpLnRoZWlyc3RhY2suY29tJylcbiAgICAgICAgLmdldCgnL3YxL2hlYWx0aCcpXG4gICAgICAgIC5yZXBseSg1MDApO1xuXG4gICAgICBjb25zdCBoZWFsdGggPSBhd2FpdCB0aGVpclN0YWNrUG9ydGFsLmhlYWx0aENoZWNrKCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChoZWFsdGguaGVhbHRoeSkudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QoaGVhbHRoLm1lc3NhZ2UpLnRvQ29udGFpbignSFRUUCA1MDAnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIHVuaGVhbHRoeSBzdGF0dXMgd2hlbiBBUEkga2V5IGlzIG5vdCBjb25maWd1cmVkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgZGVsZXRlIHByb2Nlc3MuZW52LlRIRUlSU1RBQ0tfQVBJX0tFWTtcbiAgICAgIGNvbnN0IHBvcnRhbCA9IG5ldyBUaGVpclN0YWNrUG9ydGFsKCk7XG4gICAgICBcbiAgICAgIGNvbnN0IGhlYWx0aCA9IGF3YWl0IHBvcnRhbC5oZWFsdGhDaGVjaygpO1xuICAgICAgXG4gICAgICBleHBlY3QoaGVhbHRoLmhlYWx0aHkpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KGhlYWx0aC5tZXNzYWdlKS50b0JlKCdUaGVpclN0YWNrIEFQSSBrZXkgbm90IGNvbmZpZ3VyZWQnKTtcbiAgICAgIFxuICAgICAgcHJvY2Vzcy5lbnYuVEhFSVJTVEFDS19BUElfS0VZID0gbW9ja0FwaUtleTsgLy8gUmVzdG9yZVxuICAgIH0pO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnVGhlaXJTdGFjayBDcmVkaXRzIFNlcnZpY2UgSW50ZWdyYXRpb24nLCAoKSA9PiB7XG4gIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgcHJvY2Vzcy5lbnYuVEhFSVJTVEFDS19BUElfS0VZID0gJ3Rlc3Qta2V5JztcbiAgfSk7XG5cbiAgYWZ0ZXJBbGwoKCkgPT4ge1xuICAgIGRlbGV0ZSBwcm9jZXNzLmVudi5USEVJUlNUQUNLX0FQSV9LRVk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgYmUgaW1wb3J0YWJsZScsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEN1cnJlbnRUaGVpclN0YWNrQ3JlZGl0cywgZ2V0VGhlaXJTdGFja0NyZWRpdHNTdW1tYXJ5IH0gPSByZXF1aXJlKCcuLi9saWIvc2VydmljZXMvdGhlaXJzdGFjay1jcmVkaXRzJyk7XG4gICAgXG4gICAgZXhwZWN0KHR5cGVvZiBnZXRDdXJyZW50VGhlaXJTdGFja0NyZWRpdHMpLnRvQmUoJ2Z1bmN0aW9uJyk7XG4gICAgZXhwZWN0KHR5cGVvZiBnZXRUaGVpclN0YWNrQ3JlZGl0c1N1bW1hcnkpLnRvQmUoJ2Z1bmN0aW9uJyk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=