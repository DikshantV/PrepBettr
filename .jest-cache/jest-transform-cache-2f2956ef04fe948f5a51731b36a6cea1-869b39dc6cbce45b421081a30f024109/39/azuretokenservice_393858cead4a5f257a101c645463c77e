550967e5e3a67935e23c23d9fc4e363c
"use strict";

/* istanbul ignore next */
function cov_2jkd2ezms2() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/services/azure-token-service.ts";
  var hash = "b9f15e2d4868f51e8bfdfb1146d245abf2c059e7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/services/azure-token-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 35
        }
      },
      "4": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 7,
          column: 52
        }
      },
      "5": {
        start: {
          line: 8,
          column: 19
        },
        end: {
          line: 8,
          column: 45
        }
      },
      "6": {
        start: {
          line: 9,
          column: 27
        },
        end: {
          line: 9,
          column: 61
        }
      },
      "7": {
        start: {
          line: 10,
          column: 21
        },
        end: {
          line: 10,
          column: 59
        }
      },
      "8": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 36
        }
      },
      "9": {
        start: {
          line: 14,
          column: 28
        },
        end: {
          line: 14,
          column: 59
        }
      },
      "10": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 17,
          column: 9
        }
      },
      "11": {
        start: {
          line: 16,
          column: 12
        },
        end: {
          line: 16,
          column: 84
        }
      },
      "12": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 118
        }
      },
      "13": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 26,
          column: 11
        }
      },
      "14": {
        start: {
          line: 32,
          column: 27
        },
        end: {
          line: 32,
          column: 55
        }
      },
      "15": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "16": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 36,
          column: 15
        }
      },
      "17": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 35,
          column: 86
        }
      },
      "18": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 63
        }
      },
      "19": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 70
        }
      },
      "20": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 87
        }
      },
      "21": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 70
        }
      },
      "22": {
        start: {
          line: 50,
          column: 25
        },
        end: {
          line: 50,
          column: 46
        }
      },
      "23": {
        start: {
          line: 52,
          column: 29
        },
        end: {
          line: 52,
          column: 58
        }
      },
      "24": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 55,
          column: 9
        }
      },
      "25": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 32
        }
      },
      "26": {
        start: {
          line: 56,
          column: 27
        },
        end: {
          line: 56,
          column: 55
        }
      },
      "27": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "28": {
        start: {
          line: 58,
          column: 27
        },
        end: {
          line: 60,
          column: 14
        }
      },
      "29": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 59,
          column: 69
        }
      },
      "30": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 66,
          column: 13
        }
      },
      "31": {
        start: {
          line: 62,
          column: 31
        },
        end: {
          line: 62,
          column: 55
        }
      },
      "32": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 64,
          column: 54
        }
      },
      "33": {
        start: {
          line: 65,
          column: 16
        },
        end: {
          line: 65,
          column: 30
        }
      },
      "34": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 24
        }
      },
      "35": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 90
        }
      },
      "36": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 24
        }
      },
      "37": {
        start: {
          line: 78,
          column: 28
        },
        end: {
          line: 78,
          column: 41
        }
      },
      "38": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 62
        }
      },
      "39": {
        start: {
          line: 85,
          column: 30
        },
        end: {
          line: 85,
          column: 59
        }
      },
      "40": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 117,
          column: 9
        }
      },
      "41": {
        start: {
          line: 87,
          column: 29
        },
        end: {
          line: 98,
          column: 14
        }
      },
      "42": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 101,
          column: 13
        }
      },
      "43": {
        start: {
          line: 100,
          column: 16
        },
        end: {
          line: 100,
          column: 99
        }
      },
      "44": {
        start: {
          line: 102,
          column: 25
        },
        end: {
          line: 102,
          column: 46
        }
      },
      "45": {
        start: {
          line: 103,
          column: 30
        },
        end: {
          line: 109,
          column: 13
        }
      },
      "46": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 62
        }
      },
      "47": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 29
        }
      },
      "48": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 71
        }
      },
      "49": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 24
        }
      },
      "50": {
        start: {
          line: 123,
          column: 23
        },
        end: {
          line: 123,
          column: 59
        }
      },
      "51": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "52": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 24
        }
      },
      "53": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 130,
          column: 9
        }
      },
      "54": {
        start: {
          line: 128,
          column: 36
        },
        end: {
          line: 128,
          column: 105
        }
      },
      "55": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 123
        }
      },
      "56": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 131,
          column: 34
        }
      },
      "57": {
        start: {
          line: 137,
          column: 27
        },
        end: {
          line: 137,
          column: 54
        }
      },
      "58": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 147,
          column: 9
        }
      },
      "59": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 141,
          column: 15
        }
      },
      "60": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 140,
          column: 86
        }
      },
      "61": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 64
        }
      },
      "62": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 81
        }
      },
      "63": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 146,
          column: 24
        }
      },
      "64": {
        start: {
          line: 153,
          column: 27
        },
        end: {
          line: 153,
          column: 54
        }
      },
      "65": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 166,
          column: 9
        }
      },
      "66": {
        start: {
          line: 155,
          column: 27
        },
        end: {
          line: 157,
          column: 14
        }
      },
      "67": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 156,
          column: 69
        }
      },
      "68": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 160,
          column: 13
        }
      },
      "69": {
        start: {
          line: 159,
          column: 16
        },
        end: {
          line: 159,
          column: 48
        }
      },
      "70": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 161,
          column: 24
        }
      },
      "71": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 164,
          column: 84
        }
      },
      "72": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 24
        }
      },
      "73": {
        start: {
          line: 172,
          column: 27
        },
        end: {
          line: 172,
          column: 55
        }
      },
      "74": {
        start: {
          line: 173,
          column: 25
        },
        end: {
          line: 173,
          column: 46
        }
      },
      "75": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 185,
          column: 9
        }
      },
      "76": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 177,
          column: 15
        }
      },
      "77": {
        start: {
          line: 176,
          column: 16
        },
        end: {
          line: 176,
          column: 70
        }
      },
      "78": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 45
        }
      },
      "79": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 71
        }
      },
      "80": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 88
        }
      },
      "81": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 24
        }
      },
      "82": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 191,
          column: 32
        }
      },
      "83": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 204,
          column: 9
        }
      },
      "84": {
        start: {
          line: 199,
          column: 16
        },
        end: {
          line: 199,
          column: 71
        }
      },
      "85": {
        start: {
          line: 201,
          column: 16
        },
        end: {
          line: 201,
          column: 63
        }
      },
      "86": {
        start: {
          line: 203,
          column: 16
        },
        end: {
          line: 203,
          column: 61
        }
      },
      "87": {
        start: {
          line: 207,
          column: 0
        },
        end: {
          line: 207,
          column: 46
        }
      },
      "88": {
        start: {
          line: 209,
          column: 32
        },
        end: {
          line: 209,
          column: 36
        }
      },
      "89": {
        start: {
          line: 211,
          column: 4
        },
        end: {
          line: 213,
          column: 5
        }
      },
      "90": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 212,
          column: 60
        }
      },
      "91": {
        start: {
          line: 214,
          column: 4
        },
        end: {
          line: 214,
          column: 37
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 18
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        loc: {
          start: {
            line: 31,
            column: 46
          },
          end: {
            line: 45,
            column: 5
          }
        },
        line: 31
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 34,
            column: 44
          },
          end: {
            line: 34,
            column: 45
          }
        },
        loc: {
          start: {
            line: 34,
            column: 56
          },
          end: {
            line: 36,
            column: 13
          }
        },
        line: 34
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 49,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        },
        loc: {
          start: {
            line: 49,
            column: 36
          },
          end: {
            line: 73,
            column: 5
          }
        },
        line: 49
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 58,
            column: 59
          },
          end: {
            line: 58,
            column: 60
          }
        },
        loc: {
          start: {
            line: 58,
            column: 71
          },
          end: {
            line: 60,
            column: 13
          }
        },
        line: 58
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 77,
            column: 5
          }
        },
        loc: {
          start: {
            line: 77,
            column: 25
          },
          end: {
            line: 80,
            column: 5
          }
        },
        line: 77
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        loc: {
          start: {
            line: 84,
            column: 62
          },
          end: {
            line: 118,
            column: 5
          }
        },
        line: 84
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 122,
            column: 4
          },
          end: {
            line: 122,
            column: 5
          }
        },
        loc: {
          start: {
            line: 122,
            column: 54
          },
          end: {
            line: 132,
            column: 5
          }
        },
        line: 122
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 136,
            column: 4
          },
          end: {
            line: 136,
            column: 5
          }
        },
        loc: {
          start: {
            line: 136,
            column: 45
          },
          end: {
            line: 148,
            column: 5
          }
        },
        line: 136
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 139,
            column: 44
          },
          end: {
            line: 139,
            column: 45
          }
        },
        loc: {
          start: {
            line: 139,
            column: 56
          },
          end: {
            line: 141,
            column: 13
          }
        },
        line: 139
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 152,
            column: 4
          },
          end: {
            line: 152,
            column: 5
          }
        },
        loc: {
          start: {
            line: 152,
            column: 35
          },
          end: {
            line: 167,
            column: 5
          }
        },
        line: 152
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 155,
            column: 59
          },
          end: {
            line: 155,
            column: 60
          }
        },
        loc: {
          start: {
            line: 155,
            column: 71
          },
          end: {
            line: 157,
            column: 13
          }
        },
        line: 155
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 171,
            column: 4
          },
          end: {
            line: 171,
            column: 5
          }
        },
        loc: {
          start: {
            line: 171,
            column: 39
          },
          end: {
            line: 186,
            column: 5
          }
        },
        line: 171
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 175,
            column: 44
          },
          end: {
            line: 175,
            column: 45
          }
        },
        loc: {
          start: {
            line: 175,
            column: 56
          },
          end: {
            line: 177,
            column: 13
          }
        },
        line: 175
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 190,
            column: 4
          },
          end: {
            line: 190,
            column: 5
          }
        },
        loc: {
          start: {
            line: 190,
            column: 17
          },
          end: {
            line: 192,
            column: 5
          }
        },
        line: 190
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 196,
            column: 4
          },
          end: {
            line: 196,
            column: 5
          }
        },
        loc: {
          start: {
            line: 196,
            column: 29
          },
          end: {
            line: 205,
            column: 5
          }
        },
        line: 196
      },
      "17": {
        name: "getAzureTokenService",
        decl: {
          start: {
            line: 210,
            column: 9
          },
          end: {
            line: 210,
            column: 29
          }
        },
        loc: {
          start: {
            line: 210,
            column: 32
          },
          end: {
            line: 215,
            column: 1
          }
        },
        line: 210
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 15,
            column: 8
          },
          end: {
            line: 17,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 15,
            column: 8
          },
          end: {
            line: 17,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 15
      },
      "4": {
        loc: {
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "5": {
        loc: {
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 53,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 53,
            column: 24
          }
        }, {
          start: {
            line: 53,
            column: 28
          },
          end: {
            line: 53,
            column: 63
          }
        }],
        line: 53
      },
      "6": {
        loc: {
          start: {
            line: 61,
            column: 12
          },
          end: {
            line: 66,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 61,
            column: 12
          },
          end: {
            line: 66,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 61
      },
      "7": {
        loc: {
          start: {
            line: 99,
            column: 12
          },
          end: {
            line: 101,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 12
          },
          end: {
            line: 101,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "8": {
        loc: {
          start: {
            line: 105,
            column: 30
          },
          end: {
            line: 105,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 105,
            column: 30
          },
          end: {
            line: 105,
            column: 48
          }
        }, {
          start: {
            line: 105,
            column: 52
          },
          end: {
            line: 105,
            column: 64
          }
        }],
        line: 105
      },
      "9": {
        loc: {
          start: {
            line: 107,
            column: 27
          },
          end: {
            line: 107,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 107,
            column: 27
          },
          end: {
            line: 107,
            column: 42
          }
        }, {
          start: {
            line: 107,
            column: 46
          },
          end: {
            line: 107,
            column: 54
          }
        }],
        line: 107
      },
      "10": {
        loc: {
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "11": {
        loc: {
          start: {
            line: 127,
            column: 8
          },
          end: {
            line: 130,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 127,
            column: 8
          },
          end: {
            line: 130,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 127
      },
      "12": {
        loc: {
          start: {
            line: 129,
            column: 19
          },
          end: {
            line: 129,
            column: 122
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 129,
            column: 20
          },
          end: {
            line: 129,
            column: 113
          }
        }, {
          start: {
            line: 129,
            column: 118
          },
          end: {
            line: 129,
            column: 122
          }
        }],
        line: 129
      },
      "13": {
        loc: {
          start: {
            line: 129,
            column: 20
          },
          end: {
            line: 129,
            column: 113
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 129,
            column: 77
          },
          end: {
            line: 129,
            column: 83
          }
        }, {
          start: {
            line: 129,
            column: 86
          },
          end: {
            line: 129,
            column: 113
          }
        }],
        line: 129
      },
      "14": {
        loc: {
          start: {
            line: 129,
            column: 20
          },
          end: {
            line: 129,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 129,
            column: 20
          },
          end: {
            line: 129,
            column: 44
          }
        }, {
          start: {
            line: 129,
            column: 48
          },
          end: {
            line: 129,
            column: 74
          }
        }],
        line: 129
      },
      "15": {
        loc: {
          start: {
            line: 158,
            column: 12
          },
          end: {
            line: 160,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 158,
            column: 12
          },
          end: {
            line: 160,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 158
      },
      "16": {
        loc: {
          start: {
            line: 197,
            column: 8
          },
          end: {
            line: 204,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 198,
            column: 12
          },
          end: {
            line: 199,
            column: 71
          }
        }, {
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 201,
            column: 63
          }
        }, {
          start: {
            line: 202,
            column: 12
          },
          end: {
            line: 203,
            column: 61
          }
        }],
        line: 197
      },
      "17": {
        loc: {
          start: {
            line: 211,
            column: 4
          },
          end: {
            line: 213,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 211,
            column: 4
          },
          end: {
            line: 213,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 211
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0, 0],
      "17": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/services/azure-token-service.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/services/azure-token-service.ts"],
      sourcesContent: ["import { DefaultAzureCredential } from '@azure/identity';\nimport { SecretClient } from '@azure/keyvault-secrets';\nimport Bottleneck from 'bottleneck';\n\nexport interface OAuthTokens {\n  accessToken: string;\n  refreshToken: string;\n  expiresAt: number;\n  tokenType: 'Bearer';\n  scope?: string;\n}\n\nexport interface AzureADConfig {\n  clientId: string;\n  clientSecret: string;\n  tenantId: string;\n  redirectUri: string;\n  scopes: string[];\n}\n\nclass AzureTokenService {\n  private secretClient: SecretClient;\n  private rateLimiter: Bottleneck;\n  private tokenCache: Map<string, OAuthTokens> = new Map();\n\n  constructor() {\n    const keyVaultUri = process.env.AZURE_KEY_VAULT_URI;\n    if (!keyVaultUri) {\n      throw new Error('AZURE_KEY_VAULT_URI environment variable is required');\n    }\n\n    this.secretClient = new SecretClient(keyVaultUri, new DefaultAzureCredential());\n    \n    // Rate limiter for Azure Key Vault operations\n    this.rateLimiter = new Bottleneck({\n      minTime: 100, // Minimum 100ms between requests\n      maxConcurrent: 10,\n      reservoir: 100, // 100 requests per reservoir\n      reservoirRefreshAmount: 100,\n      reservoirRefreshInterval: 60 * 1000, // Refresh every minute\n    });\n  }\n\n  /**\n   * Store OAuth tokens securely in Azure Key Vault\n   */\n  async storeTokens(portal: 'linkedin' | 'wellfound', userId: string, tokens: OAuthTokens): Promise<void> {\n    const secretName = `${portal}-tokens-${userId}`;\n    \n    try {\n      await this.rateLimiter.schedule(async () => {\n        await this.secretClient.setSecret(secretName, JSON.stringify(tokens));\n      });\n      \n      // Update cache\n      this.tokenCache.set(`${portal}-${userId}`, tokens);\n      \n      console.log(`Stored ${portal} tokens for user ${userId}`);\n    } catch (error) {\n      console.error(`Error storing ${portal} tokens for user ${userId}:`, error);\n      throw new Error(`Failed to store OAuth tokens: ${error}`);\n    }\n  }\n\n  /**\n   * Retrieve OAuth tokens from Azure Key Vault\n   */\n  async getTokens(portal: 'linkedin' | 'wellfound', userId: string): Promise<OAuthTokens | null> {\n    const cacheKey = `${portal}-${userId}`;\n    \n    // Check cache first\n    const cachedTokens = this.tokenCache.get(cacheKey);\n    if (cachedTokens && cachedTokens.expiresAt > Date.now()) {\n      return cachedTokens;\n    }\n\n    const secretName = `${portal}-tokens-${userId}`;\n    \n    try {\n      const result = await this.rateLimiter.schedule(async () => {\n        return await this.secretClient.getSecret(secretName);\n      });\n      \n      if (result.value) {\n        const tokens: OAuthTokens = JSON.parse(result.value);\n        \n        // Update cache\n        this.tokenCache.set(cacheKey, tokens);\n        \n        return tokens;\n      }\n      \n      return null;\n    } catch (error) {\n      console.error(`Error retrieving ${portal} tokens for user ${userId}:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Check if tokens need refresh (expires within 5 minutes)\n   */\n  needsRefresh(tokens: OAuthTokens): boolean {\n    const fiveMinutes = 5 * 60 * 1000;\n    return tokens.expiresAt <= (Date.now() + fiveMinutes);\n  }\n\n  /**\n   * Refresh OAuth tokens using refresh token\n   */\n  async refreshTokens(\n    portal: 'linkedin' | 'wellfound',\n    userId: string,\n    refreshToken: string,\n    config: AzureADConfig\n  ): Promise<OAuthTokens | null> {\n    const tokenEndpoint = this.getTokenEndpoint(portal);\n    \n    try {\n      const response = await fetch(tokenEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: new URLSearchParams({\n          grant_type: 'refresh_token',\n          refresh_token: refreshToken,\n          client_id: config.clientId,\n          client_secret: config.clientSecret,\n        }).toString(),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Token refresh failed: ${response.status} ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      \n      const newTokens: OAuthTokens = {\n        accessToken: data.access_token,\n        refreshToken: data.refresh_token || refreshToken,\n        expiresAt: Date.now() + (data.expires_in * 1000),\n        tokenType: data.token_type || 'Bearer',\n        scope: data.scope,\n      };\n\n      // Store the refreshed tokens\n      await this.storeTokens(portal, userId, newTokens);\n      \n      return newTokens;\n    } catch (error) {\n      console.error(`Error refreshing ${portal} tokens:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Get valid access token, refreshing if necessary\n   */\n  async getValidAccessToken(\n    portal: 'linkedin' | 'wellfound',\n    userId: string,\n    config: AzureADConfig\n  ): Promise<string | null> {\n    const tokens = await this.getTokens(portal, userId);\n    \n    if (!tokens) {\n      return null;\n    }\n\n    if (this.needsRefresh(tokens)) {\n      const refreshedTokens = await this.refreshTokens(portal, userId, tokens.refreshToken, config);\n      return refreshedTokens?.accessToken || null;\n    }\n\n    return tokens.accessToken;\n  }\n\n  /**\n   * Store Azure AD app configuration\n   */\n  async storeAzureADConfig(portal: 'linkedin' | 'wellfound', config: AzureADConfig): Promise<void> {\n    const secretName = `${portal}-azure-ad-config`;\n    \n    try {\n      await this.rateLimiter.schedule(async () => {\n        await this.secretClient.setSecret(secretName, JSON.stringify(config));\n      });\n      \n      console.log(`Stored Azure AD config for ${portal}`);\n    } catch (error) {\n      console.error(`Error storing Azure AD config for ${portal}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get Azure AD app configuration\n   */\n  async getAzureADConfig(portal: 'linkedin' | 'wellfound'): Promise<AzureADConfig | null> {\n    const secretName = `${portal}-azure-ad-config`;\n    \n    try {\n      const result = await this.rateLimiter.schedule(async () => {\n        return await this.secretClient.getSecret(secretName);\n      });\n      \n      if (result.value) {\n        return JSON.parse(result.value) as AzureADConfig;\n      }\n      \n      return null;\n    } catch (error) {\n      console.error(`Error retrieving Azure AD config for ${portal}:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Delete user tokens (for logout/revocation)\n   */\n  async deleteTokens(portal: 'linkedin' | 'wellfound', userId: string): Promise<void> {\n    const secretName = `${portal}-tokens-${userId}`;\n    const cacheKey = `${portal}-${userId}`;\n    \n    try {\n      await this.rateLimiter.schedule(async () => {\n        await this.secretClient.beginDeleteSecret(secretName);\n      });\n      \n      // Remove from cache\n      this.tokenCache.delete(cacheKey);\n      \n      console.log(`Deleted ${portal} tokens for user ${userId}`);\n    } catch (error) {\n      console.error(`Error deleting ${portal} tokens for user ${userId}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Clear token cache\n   */\n  clearCache(): void {\n    this.tokenCache.clear();\n  }\n\n  /**\n   * Get token endpoint for the portal\n   */\n  private getTokenEndpoint(portal: 'linkedin' | 'wellfound'): string {\n    switch (portal) {\n      case 'linkedin':\n        return 'https://www.linkedin.com/oauth/v2/accessToken';\n      case 'wellfound':\n        return 'https://api.wellfound.com/oauth/token'; // Note: Wellfound uses AngelList API\n      default:\n        throw new Error(`Unknown portal: ${portal}`);\n    }\n  }\n}\n\n// Singleton instance\nlet azureTokenServiceInstance: AzureTokenService | null = null;\n\nexport function getAzureTokenService(): AzureTokenService {\n  if (!azureTokenServiceInstance) {\n    azureTokenServiceInstance = new AzureTokenService();\n  }\n  return azureTokenServiceInstance;\n}\n\nexport { AzureTokenService };\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b9f15e2d4868f51e8bfdfb1146d245abf2c059e7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2jkd2ezms2 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2jkd2ezms2();
var __importDefault =
/* istanbul ignore next */
(cov_2jkd2ezms2().s[0]++,
/* istanbul ignore next */
(cov_2jkd2ezms2().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_2jkd2ezms2().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_2jkd2ezms2().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_2jkd2ezms2().f[0]++;
  cov_2jkd2ezms2().s[1]++;
  return /* istanbul ignore next */(cov_2jkd2ezms2().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_2jkd2ezms2().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_2jkd2ezms2().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_2jkd2ezms2().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_2jkd2ezms2().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2jkd2ezms2().s[3]++;
exports.AzureTokenService = void 0;
/* istanbul ignore next */
cov_2jkd2ezms2().s[4]++;
exports.getAzureTokenService = getAzureTokenService;
const identity_1 =
/* istanbul ignore next */
(cov_2jkd2ezms2().s[5]++, require("@azure/identity"));
const keyvault_secrets_1 =
/* istanbul ignore next */
(cov_2jkd2ezms2().s[6]++, require("@azure/keyvault-secrets"));
const bottleneck_1 =
/* istanbul ignore next */
(cov_2jkd2ezms2().s[7]++, __importDefault(require("bottleneck")));
class AzureTokenService {
  constructor() {
    /* istanbul ignore next */
    cov_2jkd2ezms2().f[1]++;
    cov_2jkd2ezms2().s[8]++;
    this.tokenCache = new Map();
    const keyVaultUri =
    /* istanbul ignore next */
    (cov_2jkd2ezms2().s[9]++, process.env.AZURE_KEY_VAULT_URI);
    /* istanbul ignore next */
    cov_2jkd2ezms2().s[10]++;
    if (!keyVaultUri) {
      /* istanbul ignore next */
      cov_2jkd2ezms2().b[3][0]++;
      cov_2jkd2ezms2().s[11]++;
      throw new Error('AZURE_KEY_VAULT_URI environment variable is required');
    } else
    /* istanbul ignore next */
    {
      cov_2jkd2ezms2().b[3][1]++;
    }
    cov_2jkd2ezms2().s[12]++;
    this.secretClient = new keyvault_secrets_1.SecretClient(keyVaultUri, new identity_1.DefaultAzureCredential());
    // Rate limiter for Azure Key Vault operations
    /* istanbul ignore next */
    cov_2jkd2ezms2().s[13]++;
    this.rateLimiter = new bottleneck_1.default({
      minTime: 100,
      // Minimum 100ms between requests
      maxConcurrent: 10,
      reservoir: 100,
      // 100 requests per reservoir
      reservoirRefreshAmount: 100,
      reservoirRefreshInterval: 60 * 1000 // Refresh every minute
    });
  }
  /**
   * Store OAuth tokens securely in Azure Key Vault
   */
  async storeTokens(portal, userId, tokens) {
    /* istanbul ignore next */
    cov_2jkd2ezms2().f[2]++;
    const secretName =
    /* istanbul ignore next */
    (cov_2jkd2ezms2().s[14]++, `${portal}-tokens-${userId}`);
    /* istanbul ignore next */
    cov_2jkd2ezms2().s[15]++;
    try {
      /* istanbul ignore next */
      cov_2jkd2ezms2().s[16]++;
      await this.rateLimiter.schedule(async () => {
        /* istanbul ignore next */
        cov_2jkd2ezms2().f[3]++;
        cov_2jkd2ezms2().s[17]++;
        await this.secretClient.setSecret(secretName, JSON.stringify(tokens));
      });
      // Update cache
      /* istanbul ignore next */
      cov_2jkd2ezms2().s[18]++;
      this.tokenCache.set(`${portal}-${userId}`, tokens);
      /* istanbul ignore next */
      cov_2jkd2ezms2().s[19]++;
      console.log(`Stored ${portal} tokens for user ${userId}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_2jkd2ezms2().s[20]++;
      console.error(`Error storing ${portal} tokens for user ${userId}:`, error);
      /* istanbul ignore next */
      cov_2jkd2ezms2().s[21]++;
      throw new Error(`Failed to store OAuth tokens: ${error}`);
    }
  }
  /**
   * Retrieve OAuth tokens from Azure Key Vault
   */
  async getTokens(portal, userId) {
    /* istanbul ignore next */
    cov_2jkd2ezms2().f[4]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_2jkd2ezms2().s[22]++, `${portal}-${userId}`);
    // Check cache first
    const cachedTokens =
    /* istanbul ignore next */
    (cov_2jkd2ezms2().s[23]++, this.tokenCache.get(cacheKey));
    /* istanbul ignore next */
    cov_2jkd2ezms2().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_2jkd2ezms2().b[5][0]++, cachedTokens) &&
    /* istanbul ignore next */
    (cov_2jkd2ezms2().b[5][1]++, cachedTokens.expiresAt > Date.now())) {
      /* istanbul ignore next */
      cov_2jkd2ezms2().b[4][0]++;
      cov_2jkd2ezms2().s[25]++;
      return cachedTokens;
    } else
    /* istanbul ignore next */
    {
      cov_2jkd2ezms2().b[4][1]++;
    }
    const secretName =
    /* istanbul ignore next */
    (cov_2jkd2ezms2().s[26]++, `${portal}-tokens-${userId}`);
    /* istanbul ignore next */
    cov_2jkd2ezms2().s[27]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_2jkd2ezms2().s[28]++, await this.rateLimiter.schedule(async () => {
        /* istanbul ignore next */
        cov_2jkd2ezms2().f[5]++;
        cov_2jkd2ezms2().s[29]++;
        return await this.secretClient.getSecret(secretName);
      }));
      /* istanbul ignore next */
      cov_2jkd2ezms2().s[30]++;
      if (result.value) {
        /* istanbul ignore next */
        cov_2jkd2ezms2().b[6][0]++;
        const tokens =
        /* istanbul ignore next */
        (cov_2jkd2ezms2().s[31]++, JSON.parse(result.value));
        // Update cache
        /* istanbul ignore next */
        cov_2jkd2ezms2().s[32]++;
        this.tokenCache.set(cacheKey, tokens);
        /* istanbul ignore next */
        cov_2jkd2ezms2().s[33]++;
        return tokens;
      } else
      /* istanbul ignore next */
      {
        cov_2jkd2ezms2().b[6][1]++;
      }
      cov_2jkd2ezms2().s[34]++;
      return null;
    } catch (error) {
      /* istanbul ignore next */
      cov_2jkd2ezms2().s[35]++;
      console.error(`Error retrieving ${portal} tokens for user ${userId}:`, error);
      /* istanbul ignore next */
      cov_2jkd2ezms2().s[36]++;
      return null;
    }
  }
  /**
   * Check if tokens need refresh (expires within 5 minutes)
   */
  needsRefresh(tokens) {
    /* istanbul ignore next */
    cov_2jkd2ezms2().f[6]++;
    const fiveMinutes =
    /* istanbul ignore next */
    (cov_2jkd2ezms2().s[37]++, 5 * 60 * 1000);
    /* istanbul ignore next */
    cov_2jkd2ezms2().s[38]++;
    return tokens.expiresAt <= Date.now() + fiveMinutes;
  }
  /**
   * Refresh OAuth tokens using refresh token
   */
  async refreshTokens(portal, userId, refreshToken, config) {
    /* istanbul ignore next */
    cov_2jkd2ezms2().f[7]++;
    const tokenEndpoint =
    /* istanbul ignore next */
    (cov_2jkd2ezms2().s[39]++, this.getTokenEndpoint(portal));
    /* istanbul ignore next */
    cov_2jkd2ezms2().s[40]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_2jkd2ezms2().s[41]++, await fetch(tokenEndpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: new URLSearchParams({
          grant_type: 'refresh_token',
          refresh_token: refreshToken,
          client_id: config.clientId,
          client_secret: config.clientSecret
        }).toString()
      }));
      /* istanbul ignore next */
      cov_2jkd2ezms2().s[42]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_2jkd2ezms2().b[7][0]++;
        cov_2jkd2ezms2().s[43]++;
        throw new Error(`Token refresh failed: ${response.status} ${response.statusText}`);
      } else
      /* istanbul ignore next */
      {
        cov_2jkd2ezms2().b[7][1]++;
      }
      const data =
      /* istanbul ignore next */
      (cov_2jkd2ezms2().s[44]++, await response.json());
      const newTokens =
      /* istanbul ignore next */
      (cov_2jkd2ezms2().s[45]++, {
        accessToken: data.access_token,
        refreshToken:
        /* istanbul ignore next */
        (cov_2jkd2ezms2().b[8][0]++, data.refresh_token) ||
        /* istanbul ignore next */
        (cov_2jkd2ezms2().b[8][1]++, refreshToken),
        expiresAt: Date.now() + data.expires_in * 1000,
        tokenType:
        /* istanbul ignore next */
        (cov_2jkd2ezms2().b[9][0]++, data.token_type) ||
        /* istanbul ignore next */
        (cov_2jkd2ezms2().b[9][1]++, 'Bearer'),
        scope: data.scope
      });
      // Store the refreshed tokens
      /* istanbul ignore next */
      cov_2jkd2ezms2().s[46]++;
      await this.storeTokens(portal, userId, newTokens);
      /* istanbul ignore next */
      cov_2jkd2ezms2().s[47]++;
      return newTokens;
    } catch (error) {
      /* istanbul ignore next */
      cov_2jkd2ezms2().s[48]++;
      console.error(`Error refreshing ${portal} tokens:`, error);
      /* istanbul ignore next */
      cov_2jkd2ezms2().s[49]++;
      return null;
    }
  }
  /**
   * Get valid access token, refreshing if necessary
   */
  async getValidAccessToken(portal, userId, config) {
    /* istanbul ignore next */
    cov_2jkd2ezms2().f[8]++;
    const tokens =
    /* istanbul ignore next */
    (cov_2jkd2ezms2().s[50]++, await this.getTokens(portal, userId));
    /* istanbul ignore next */
    cov_2jkd2ezms2().s[51]++;
    if (!tokens) {
      /* istanbul ignore next */
      cov_2jkd2ezms2().b[10][0]++;
      cov_2jkd2ezms2().s[52]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_2jkd2ezms2().b[10][1]++;
    }
    cov_2jkd2ezms2().s[53]++;
    if (this.needsRefresh(tokens)) {
      /* istanbul ignore next */
      cov_2jkd2ezms2().b[11][0]++;
      const refreshedTokens =
      /* istanbul ignore next */
      (cov_2jkd2ezms2().s[54]++, await this.refreshTokens(portal, userId, tokens.refreshToken, config));
      /* istanbul ignore next */
      cov_2jkd2ezms2().s[55]++;
      return /* istanbul ignore next */(cov_2jkd2ezms2().b[12][0]++,
      /* istanbul ignore next */
      (cov_2jkd2ezms2().b[14][0]++, refreshedTokens === null) ||
      /* istanbul ignore next */
      (cov_2jkd2ezms2().b[14][1]++, refreshedTokens === void 0) ?
      /* istanbul ignore next */
      (cov_2jkd2ezms2().b[13][0]++, void 0) :
      /* istanbul ignore next */
      (cov_2jkd2ezms2().b[13][1]++, refreshedTokens.accessToken)) ||
      /* istanbul ignore next */
      (cov_2jkd2ezms2().b[12][1]++, null);
    } else
    /* istanbul ignore next */
    {
      cov_2jkd2ezms2().b[11][1]++;
    }
    cov_2jkd2ezms2().s[56]++;
    return tokens.accessToken;
  }
  /**
   * Store Azure AD app configuration
   */
  async storeAzureADConfig(portal, config) {
    /* istanbul ignore next */
    cov_2jkd2ezms2().f[9]++;
    const secretName =
    /* istanbul ignore next */
    (cov_2jkd2ezms2().s[57]++, `${portal}-azure-ad-config`);
    /* istanbul ignore next */
    cov_2jkd2ezms2().s[58]++;
    try {
      /* istanbul ignore next */
      cov_2jkd2ezms2().s[59]++;
      await this.rateLimiter.schedule(async () => {
        /* istanbul ignore next */
        cov_2jkd2ezms2().f[10]++;
        cov_2jkd2ezms2().s[60]++;
        await this.secretClient.setSecret(secretName, JSON.stringify(config));
      });
      /* istanbul ignore next */
      cov_2jkd2ezms2().s[61]++;
      console.log(`Stored Azure AD config for ${portal}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_2jkd2ezms2().s[62]++;
      console.error(`Error storing Azure AD config for ${portal}:`, error);
      /* istanbul ignore next */
      cov_2jkd2ezms2().s[63]++;
      throw error;
    }
  }
  /**
   * Get Azure AD app configuration
   */
  async getAzureADConfig(portal) {
    /* istanbul ignore next */
    cov_2jkd2ezms2().f[11]++;
    const secretName =
    /* istanbul ignore next */
    (cov_2jkd2ezms2().s[64]++, `${portal}-azure-ad-config`);
    /* istanbul ignore next */
    cov_2jkd2ezms2().s[65]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_2jkd2ezms2().s[66]++, await this.rateLimiter.schedule(async () => {
        /* istanbul ignore next */
        cov_2jkd2ezms2().f[12]++;
        cov_2jkd2ezms2().s[67]++;
        return await this.secretClient.getSecret(secretName);
      }));
      /* istanbul ignore next */
      cov_2jkd2ezms2().s[68]++;
      if (result.value) {
        /* istanbul ignore next */
        cov_2jkd2ezms2().b[15][0]++;
        cov_2jkd2ezms2().s[69]++;
        return JSON.parse(result.value);
      } else
      /* istanbul ignore next */
      {
        cov_2jkd2ezms2().b[15][1]++;
      }
      cov_2jkd2ezms2().s[70]++;
      return null;
    } catch (error) {
      /* istanbul ignore next */
      cov_2jkd2ezms2().s[71]++;
      console.error(`Error retrieving Azure AD config for ${portal}:`, error);
      /* istanbul ignore next */
      cov_2jkd2ezms2().s[72]++;
      return null;
    }
  }
  /**
   * Delete user tokens (for logout/revocation)
   */
  async deleteTokens(portal, userId) {
    /* istanbul ignore next */
    cov_2jkd2ezms2().f[13]++;
    const secretName =
    /* istanbul ignore next */
    (cov_2jkd2ezms2().s[73]++, `${portal}-tokens-${userId}`);
    const cacheKey =
    /* istanbul ignore next */
    (cov_2jkd2ezms2().s[74]++, `${portal}-${userId}`);
    /* istanbul ignore next */
    cov_2jkd2ezms2().s[75]++;
    try {
      /* istanbul ignore next */
      cov_2jkd2ezms2().s[76]++;
      await this.rateLimiter.schedule(async () => {
        /* istanbul ignore next */
        cov_2jkd2ezms2().f[14]++;
        cov_2jkd2ezms2().s[77]++;
        await this.secretClient.beginDeleteSecret(secretName);
      });
      // Remove from cache
      /* istanbul ignore next */
      cov_2jkd2ezms2().s[78]++;
      this.tokenCache.delete(cacheKey);
      /* istanbul ignore next */
      cov_2jkd2ezms2().s[79]++;
      console.log(`Deleted ${portal} tokens for user ${userId}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_2jkd2ezms2().s[80]++;
      console.error(`Error deleting ${portal} tokens for user ${userId}:`, error);
      /* istanbul ignore next */
      cov_2jkd2ezms2().s[81]++;
      throw error;
    }
  }
  /**
   * Clear token cache
   */
  clearCache() {
    /* istanbul ignore next */
    cov_2jkd2ezms2().f[15]++;
    cov_2jkd2ezms2().s[82]++;
    this.tokenCache.clear();
  }
  /**
   * Get token endpoint for the portal
   */
  getTokenEndpoint(portal) {
    /* istanbul ignore next */
    cov_2jkd2ezms2().f[16]++;
    cov_2jkd2ezms2().s[83]++;
    switch (portal) {
      case 'linkedin':
        /* istanbul ignore next */
        cov_2jkd2ezms2().b[16][0]++;
        cov_2jkd2ezms2().s[84]++;
        return 'https://www.linkedin.com/oauth/v2/accessToken';
      case 'wellfound':
        /* istanbul ignore next */
        cov_2jkd2ezms2().b[16][1]++;
        cov_2jkd2ezms2().s[85]++;
        return 'https://api.wellfound.com/oauth/token';
      // Note: Wellfound uses AngelList API
      default:
        /* istanbul ignore next */
        cov_2jkd2ezms2().b[16][2]++;
        cov_2jkd2ezms2().s[86]++;
        throw new Error(`Unknown portal: ${portal}`);
    }
  }
}
/* istanbul ignore next */
cov_2jkd2ezms2().s[87]++;
exports.AzureTokenService = AzureTokenService;
// Singleton instance
let azureTokenServiceInstance =
/* istanbul ignore next */
(cov_2jkd2ezms2().s[88]++, null);
function getAzureTokenService() {
  /* istanbul ignore next */
  cov_2jkd2ezms2().f[17]++;
  cov_2jkd2ezms2().s[89]++;
  if (!azureTokenServiceInstance) {
    /* istanbul ignore next */
    cov_2jkd2ezms2().b[17][0]++;
    cov_2jkd2ezms2().s[90]++;
    azureTokenServiceInstance = new AzureTokenService();
  } else
  /* istanbul ignore next */
  {
    cov_2jkd2ezms2().b[17][1]++;
  }
  cov_2jkd2ezms2().s[91]++;
  return azureTokenServiceInstance;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,