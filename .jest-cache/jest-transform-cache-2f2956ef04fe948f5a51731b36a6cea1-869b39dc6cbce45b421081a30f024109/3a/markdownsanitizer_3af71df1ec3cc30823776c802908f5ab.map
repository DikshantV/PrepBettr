{"version":3,"names":["cov_1yjb4ezo79","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","exports","sanitizeTextForTTS","sanitizeInterviewText","testMarkdownSanitization","text","cleanText","replace","trim","technicalReplacements","abbr","replacement","Object","entries","regex","RegExp","includes","endsWith","markdownText","console","log"],"sources":["/Users/dikshantvashistha/PrepBettr/lib/utils/markdown-sanitizer.ts"],"sourcesContent":["/**\n * Markdown Sanitizer for Text-to-Speech\n * \n * Removes Markdown formatting symbols that should not be spoken aloud\n * while preserving the actual content and natural speech flow.\n */\n\n/**\n * Strip Markdown formatting from text for TTS processing\n * @param text - Raw text that may contain Markdown formatting\n * @returns Clean text suitable for speech synthesis\n */\nexport function sanitizeTextForTTS(text: string): string {\n  if (!text || typeof text !== 'string') {\n    return '';\n  }\n\n  let cleanText = text;\n\n  // Remove headers (# ## ### etc.) but keep the text\n  cleanText = cleanText.replace(/^#{1,6}\\s+/gm, '');\n\n  // Remove bold/italic formatting but keep the text\n  cleanText = cleanText.replace(/\\*\\*\\*(.*?)\\*\\*\\*/g, '$1'); // Bold italic\n  cleanText = cleanText.replace(/\\*\\*(.*?)\\*\\*/g, '$1'); // Bold\n  cleanText = cleanText.replace(/\\*(.*?)\\*/g, '$1'); // Italic\n  cleanText = cleanText.replace(/__(.*?)__/g, '$1'); // Bold alt\n  cleanText = cleanText.replace(/_(.*?)_/g, '$1'); // Italic alt\n\n  // Remove strikethrough but keep the text\n  cleanText = cleanText.replace(/~~(.*?)~~/g, '$1');\n\n  // Remove inline code formatting but keep the text\n  cleanText = cleanText.replace(/`([^`]+)`/g, '$1');\n\n  // Remove code blocks but keep the content with proper spacing\n  cleanText = cleanText.replace(/```[\\s\\S]*?\\n([\\s\\S]*?)```/g, '$1');\n\n  // Remove blockquotes but keep the text\n  cleanText = cleanText.replace(/^>\\s+/gm, '');\n\n  // Convert lists to natural speech format\n  cleanText = cleanText.replace(/^\\s*[-*+]\\s+/gm, ''); // Remove bullet points\n  cleanText = cleanText.replace(/^\\s*\\d+\\.\\s+/gm, ''); // Remove numbered list markers\n\n  // Remove horizontal rules\n  cleanText = cleanText.replace(/^[-*_]{3,}$/gm, '');\n\n  // Remove table formatting - convert to sentences\n  cleanText = cleanText.replace(/\\|/g, ' '); // Remove table pipes\n  cleanText = cleanText.replace(/^:?-+:?\\s*$/gm, ''); // Remove table separators\n\n  // Remove link formatting but keep the link text\n  cleanText = cleanText.replace(/\\[([^\\]]*)\\]\\([^)]*\\)/g, '$1');\n\n  // Remove image alt text formatting\n  cleanText = cleanText.replace(/!\\[([^\\]]*)\\]\\([^)]*\\)/g, '$1');\n\n  // Remove reference-style links\n  cleanText = cleanText.replace(/\\[([^\\]]*)\\]\\s*\\[[^\\]]*\\]/g, '$1');\n\n  // Clean up excessive whitespace and normalize\n  cleanText = cleanText.replace(/\\n{3,}/g, '\\n\\n'); // Max 2 line breaks\n  cleanText = cleanText.replace(/[ \\t]{2,}/g, ' '); // Multiple spaces to single\n  cleanText = cleanText.trim();\n\n  // Convert remaining line breaks to natural speech pauses\n  cleanText = cleanText.replace(/\\n\\n+/g, '. '); // Double line breaks become sentence breaks\n  cleanText = cleanText.replace(/\\n/g, ' '); // Single line breaks become spaces\n\n  // Clean up any double periods or spaces\n  cleanText = cleanText.replace(/\\.{2,}/g, '.'); \n  cleanText = cleanText.replace(/\\s{2,}/g, ' ');\n\n  return cleanText.trim();\n}\n\n/**\n * Additional sanitization for interview-specific content\n * @param text - Text from AI interviewer responses\n * @returns Text optimized for natural speech in interview context\n */\nexport function sanitizeInterviewText(text: string): string {\n  let cleanText = sanitizeTextForTTS(text);\n\n  // Replace technical abbreviations with full words for better pronunciation\n  const technicalReplacements: Record<string, string> = {\n    'API': 'A-P-I',\n    'REST': 'REST',\n    'HTTP': 'H-T-T-P',\n    'HTTPS': 'H-T-T-P-S',\n    'JSON': 'J-S-O-N',\n    'XML': 'X-M-L',\n    'SQL': 'S-Q-L',\n    'HTML': 'H-T-M-L',\n    'CSS': 'C-S-S',\n    'URL': 'U-R-L',\n    'UI/UX': 'User Interface and User Experience',\n    'CRUD': 'Create, Read, Update, Delete',\n    'MVC': 'Model View Controller'\n  };\n\n  for (const [abbr, replacement] of Object.entries(technicalReplacements)) {\n    const regex = new RegExp(`\\\\b${abbr}\\\\b`, 'g');\n    cleanText = cleanText.replace(regex, replacement);\n  }\n\n  // Ensure questions end with proper intonation\n  if (cleanText.includes('?') && !cleanText.trim().endsWith('?')) {\n    // Move question marks to end if they're in the middle\n    cleanText = cleanText.replace(/\\?([^?]*?)$/, '$1?');\n  }\n\n  return cleanText;\n}\n\n/**\n * Quick test function to verify sanitization\n * @param markdownText - Text to test\n */\nexport function testMarkdownSanitization(markdownText: string): void {\n  console.log('Original:', markdownText);\n  console.log('Sanitized:', sanitizeTextForTTS(markdownText));\n  console.log('Interview-optimized:', sanitizeInterviewText(markdownText));\n}\n\n// Example usage:\n// testMarkdownSanitization(\"Great! Let's **discuss** your experience with `React` and *Next.js*. ## Technical Questions\\n\\n- What is your favorite **API** design pattern?\\n- How do you handle **error** handling in *production*?\");\n"],"mappings":";;AAAA;;;;;;AAAA;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAA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","ignoreList":[]}