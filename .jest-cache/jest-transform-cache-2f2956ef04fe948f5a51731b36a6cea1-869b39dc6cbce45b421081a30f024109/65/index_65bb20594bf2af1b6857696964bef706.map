{"version":3,"names":["cov_en13hratt","actualCoverage","app","s","require","queueService","automationLogger","timer","schedule","handler","myTimer","context","f","timeStamp","Date","toISOString","log","logInfo","timestamp","activeUsers","getActiveAutoApplyUsers","length","b","scheduledSearches","errors","user","needsSearch","shouldScheduleSearch","scheduleJobSearch","id","userId","searchFilters","autoApplySettings","filters","userError","logError","processedUsers","error","http","methods","authLevel","request","body","json","immediate","status","jsonBody","success","searchMessage","getUserSearchFilters","requestId","v4","requestedAt","priority","addMessage","queues","SEARCH_JOBS","visibilityTimeout","message","console","email","isEnabled","keywords","locations","jobTypes","workArrangements","portals","minimumRelevancyScore","dailyApplicationLimit","autoApplyThreshold","lastSearchAt","settings","lastSearch","now","hoursSinceLastSearch","todayApplications","getTodayApplicationCount","queueLength","getQueueLength","autoApply","dailyLimit","Math","floor","random"],"sources":["index.js"],"sourcesContent":["const { app } = require('@azure/functions');\nconst queueService = require('../lib/services/queue-service');\nconst automationLogger = require('../lib/services/automation-logs');\n\n// Timer trigger function - runs every 15 minutes\napp.timer('searchSchedulerTimer', {\n    schedule: '0 */15 * * * *',\n    handler: async (myTimer, context) => {\n        const timeStamp = new Date().toISOString();\n        context.log('Search Scheduler timer trigger function ran!', timeStamp);\n\n        try {\n            await automationLogger.logInfo(\n                'search_scheduler_started',\n                'Search scheduler timer triggered',\n                { timestamp: timeStamp }\n            );\n\n            // Get active users with auto-apply enabled\n            const activeUsers = await getActiveAutoApplyUsers();\n            \n            if (activeUsers.length === 0) {\n                context.log('No active users found for job search scheduling');\n                return;\n            }\n\n            let scheduledSearches = 0;\n            let errors = 0;\n\n            for (const user of activeUsers) {\n                try {\n                    // Check if user needs a new job search based on their settings\n                    const needsSearch = await shouldScheduleSearch(user);\n                    \n                    if (needsSearch) {\n                        await scheduleJobSearch(user);\n                        scheduledSearches++;\n                        \n                        await automationLogger.logInfo(\n                            'job_search_scheduled',\n                            `Job search scheduled for user ${user.id}`,\n                            { userId: user.id, searchFilters: user.autoApplySettings.filters }\n                        );\n                    }\n                } catch (userError) {\n                    errors++;\n                    context.log(`Error processing user ${user.id}:`, userError);\n                    await automationLogger.logError(\n                        'search_scheduling_error',\n                        userError,\n                        { userId: user.id }\n                    );\n                }\n            }\n\n            await automationLogger.logInfo(\n                'search_scheduler_completed',\n                `Search scheduling completed. Scheduled: ${scheduledSearches}, Errors: ${errors}`,\n                { scheduledSearches, errors, processedUsers: activeUsers.length }\n            );\n\n        } catch (error) {\n            context.log('Error in search scheduler:', error);\n            await automationLogger.logError('search_scheduler_error', error);\n            throw error;\n        }\n    }\n});\n\n// HTTP trigger for manual job search scheduling\napp.http('searchSchedulerHttp', {\n    methods: ['POST'],\n    authLevel: 'function',\n    handler: async (request, context) => {\n        try {\n            const body = await request.json();\n            const { userId, filters, immediate = false } = body;\n\n            if (!userId) {\n                return {\n                    status: 400,\n                    jsonBody: {\n                        success: false,\n                        error: 'userId is required'\n                    }\n                };\n            }\n\n            await automationLogger.logInfo(\n                'manual_search_requested',\n                `Manual job search requested for user ${userId}`,\n                { userId, immediate, filters }\n            );\n\n            // Create job search message\n            const searchMessage = {\n                userId,\n                filters: filters || await getUserSearchFilters(userId),\n                requestId: require('uuid').v4(),\n                requestedAt: new Date().toISOString(),\n                priority: immediate ? 'high' : 'normal'\n            };\n\n            // Add to search queue\n            await queueService.addMessage(\n                queueService.queues.SEARCH_JOBS,\n                searchMessage,\n                {\n                    visibilityTimeout: immediate ? 0 : 60 // Process immediately or in 1 minute\n                }\n            );\n\n            await automationLogger.logInfo(\n                'job_search_queued',\n                `Job search queued for user ${userId}`,\n                { userId, requestId: searchMessage.requestId }\n            );\n\n            return {\n                status: 200,\n                jsonBody: {\n                    success: true,\n                    message: 'Job search scheduled successfully',\n                    requestId: searchMessage.requestId\n                }\n            };\n\n        } catch (error) {\n            context.log('Error in HTTP search scheduler:', error);\n            await automationLogger.logError('manual_search_error', error);\n            \n            return {\n                status: 500,\n                jsonBody: {\n                    success: false,\n                    error: 'Internal server error'\n                }\n            };\n        }\n    }\n});\n\n/**\n * Get users with active auto-apply settings\n */\nasync function getActiveAutoApplyUsers() {\n    try {\n        // TODO: In production, this would query Firebase Firestore or another database\n        // For now, return mock data\n        console.log('Fetching active auto-apply users...');\n        \n        return [\n            {\n                id: 'user123',\n                email: 'user@example.com',\n                autoApplySettings: {\n                    isEnabled: true,\n                    filters: {\n                        keywords: ['React', 'Frontend', 'JavaScript'],\n                        locations: ['San Francisco', 'Remote'],\n                        jobTypes: ['full-time'],\n                        workArrangements: ['remote', 'hybrid'],\n                        portals: ['LinkedIn', 'Indeed'],\n                        minimumRelevancyScore: 75\n                    },\n                    dailyApplicationLimit: 5,\n                    autoApplyThreshold: 80,\n                    lastSearchAt: '2024-01-15T06:00:00Z'\n                }\n            }\n        ];\n    } catch (error) {\n        console.error('Error fetching active users:', error);\n        return [];\n    }\n}\n\n/**\n * Determine if a user needs a new job search\n */\nasync function shouldScheduleSearch(user) {\n    try {\n        const settings = user.autoApplySettings;\n        \n        if (!settings.isEnabled) {\n            return false;\n        }\n\n        // Check last search time\n        const lastSearch = new Date(settings.lastSearchAt || 0);\n        const now = new Date();\n        const hoursSinceLastSearch = (now - lastSearch) / (1000 * 60 * 60);\n\n        // Schedule search if it's been more than 4 hours\n        if (hoursSinceLastSearch >= 4) {\n            return true;\n        }\n\n        // Check if user has reached daily application limit\n        const todayApplications = await getTodayApplicationCount(user.id);\n        if (todayApplications >= settings.dailyApplicationLimit) {\n            console.log(`User ${user.id} has reached daily application limit`);\n            return false;\n        }\n\n        // Check queue length to avoid overwhelming the system\n        const queueLength = await queueService.getQueueLength(queueService.queues.SEARCH_JOBS);\n        if (queueLength > 50) {\n            console.log('Search queue is full, skipping additional searches');\n            return false;\n        }\n\n        return false;\n    } catch (error) {\n        console.error(`Error determining if user ${user.id} needs search:`, error);\n        return false;\n    }\n}\n\n/**\n * Schedule a job search for a user\n */\nasync function scheduleJobSearch(user) {\n    try {\n        const searchMessage = {\n            userId: user.id,\n            filters: user.autoApplySettings.filters,\n            requestId: require('uuid').v4(),\n            requestedAt: new Date().toISOString(),\n            priority: 'normal',\n            autoApply: true,\n            autoApplyThreshold: user.autoApplySettings.autoApplyThreshold,\n            dailyLimit: user.autoApplySettings.dailyApplicationLimit\n        };\n\n        await queueService.addMessage(\n            queueService.queues.SEARCH_JOBS,\n            searchMessage,\n            {\n                visibilityTimeout: Math.floor(Math.random() * 300) + 60 // Random delay between 1-6 minutes\n            }\n        );\n\n        console.log(`Scheduled job search for user ${user.id}`);\n    } catch (error) {\n        console.error(`Error scheduling job search for user ${user.id}:`, error);\n        throw error;\n    }\n}\n\n/**\n * Get user's search filters (fallback function)\n */\nasync function getUserSearchFilters(userId) {\n    try {\n        // TODO: Fetch from database\n        return {\n            keywords: ['React', 'Frontend', 'JavaScript'],\n            locations: ['San Francisco', 'Remote'],\n            jobTypes: ['full-time'],\n            workArrangements: ['remote', 'hybrid'],\n            portals: ['LinkedIn', 'Indeed'],\n            minimumRelevancyScore: 75\n        };\n    } catch (error) {\n        console.error(`Error getting search filters for user ${userId}:`, error);\n        return {\n            keywords: [],\n            locations: ['Remote'],\n            jobTypes: ['full-time'],\n            workArrangements: ['remote'],\n            portals: ['LinkedIn'],\n            minimumRelevancyScore: 70\n        };\n    }\n}\n\n/**\n * Get count of applications submitted today for a user\n */\nasync function getTodayApplicationCount(userId) {\n    try {\n        // TODO: Query database for today's applications\n        // For now, return a random number for demonstration\n        return Math.floor(Math.random() * 3);\n    } catch (error) {\n        console.error(`Error getting today's application count for user ${userId}:`, error);\n        return 0;\n    }\n}\n"],"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","ignoreList":[]}