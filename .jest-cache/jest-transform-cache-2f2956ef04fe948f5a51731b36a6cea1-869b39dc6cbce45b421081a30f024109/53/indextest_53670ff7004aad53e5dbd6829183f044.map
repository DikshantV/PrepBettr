{"file":"/Users/dikshantvashistha/PrepBettr/lib/ai/__tests__/index.test.ts","mappings":"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","names":[],"sources":["/Users/dikshantvashistha/PrepBettr/lib/ai/__tests__/index.test.ts"],"sourcesContent":["/**\n * Unit tests for the Azure-Centric AI Service Layer\n */\n\nimport { \n  generateCoverLetter, \n  calculateRelevancy, \n  tailorResume, \n  generateQuestions,\n  getProviderInfo,\n  switchProvider,\n  dispose\n} from '../index';\nimport { AzureOpenAIAdapter } from '../azureOpenAI';\n\n// Mock the adapter\njest.mock('../azureOpenAI');\n\n// Mock console methods to reduce noise in tests\nconst originalConsoleLog = console.log;\nconst originalConsoleError = console.error;\nconst originalConsoleWarn = console.warn;\n\nbeforeAll(() => {\n  console.log = jest.fn();\n  console.error = jest.fn();\n  console.warn = jest.fn();\n});\n\nafterAll(() => {\n  console.log = originalConsoleLog;\n  console.error = originalConsoleError;\n  console.warn = originalConsoleWarn;\n});\n\ndescribe('Azure-Centric AI Service Layer', () => {\n  let mockAzureAdapter: jest.Mocked<AzureOpenAIAdapter>;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Set up mock implementation\n    mockAzureAdapter = {\n      name: 'Azure OpenAI',\n      initialize: jest.fn(),\n      isReady: jest.fn(),\n      generateCoverLetter: jest.fn(),\n      calculateRelevancy: jest.fn(),\n      tailorResume: jest.fn(),\n      generateQuestions: jest.fn(),\n      dispose: jest.fn()\n    };\n\n    // Mock the constructor\n    (AzureOpenAIAdapter as jest.MockedClass<typeof AzureOpenAIAdapter>).mockImplementation(() => mockAzureAdapter);\n  });\n\n  afterEach(() => {\n    dispose();\n  });\n\n  describe('Provider Initialization', () => {\n    it('should initialize with Azure OpenAI provider', async () => {\n      mockAzureAdapter.initialize.mockResolvedValue(true);\n      mockAzureAdapter.isReady.mockReturnValue(true);\n      mockAzureAdapter.generateCoverLetter.mockResolvedValue('Azure cover letter');\n\n      const response = await generateCoverLetter('resume', 'job description');\n\n      expect(mockAzureAdapter.initialize).toHaveBeenCalled();\n      expect(response.success).toBe(true);\n      expect(response.provider).toBe('Azure OpenAI');\n      expect(response.data).toBe('Azure cover letter');\n    });\n\n    it('should return error when Azure OpenAI provider is not available', async () => {\n      mockAzureAdapter.initialize.mockResolvedValue(false);\n\n      const response = await generateCoverLetter('resume', 'job description');\n\n      expect(response.success).toBe(false);\n      expect(response.error).toContain('no providers available');\n    });\n  });\n\n  describe('generateCoverLetter', () => {\n    beforeEach(() => {\n      mockAzureAdapter.initialize.mockResolvedValue(true);\n      mockAzureAdapter.isReady.mockReturnValue(true);\n    });\n\n    it('should generate cover letter successfully', async () => {\n      const expectedCoverLetter = 'Dear Hiring Manager...';\n      mockAzureAdapter.generateCoverLetter.mockResolvedValue(expectedCoverLetter);\n\n      const response = await generateCoverLetter('resume text', 'job description');\n\n      expect(mockAzureAdapter.generateCoverLetter).toHaveBeenCalledWith('resume text', 'job description');\n      expect(response.success).toBe(true);\n      expect(response.data).toBe(expectedCoverLetter);\n      expect(response.provider).toBe('Azure OpenAI');\n    });\n\n    it('should handle provider errors gracefully', async () => {\n      const error = new Error('API quota exceeded');\n      mockAzureAdapter.generateCoverLetter.mockRejectedValue(error);\n\n      const response = await generateCoverLetter('resume', 'job');\n\n      expect(response.success).toBe(false);\n      expect(response.error).toBe('API quota exceeded');\n      expect(response.provider).toBe('Azure OpenAI');\n    });\n  });\n\n  describe('calculateRelevancy', () => {\n    beforeEach(() => {\n      mockAzureAdapter.initialize.mockResolvedValue(true);\n      mockAzureAdapter.isReady.mockReturnValue(true);\n    });\n\n    it('should calculate relevancy score successfully', async () => {\n      mockAzureAdapter.calculateRelevancy.mockResolvedValue(85);\n\n      const response = await calculateRelevancy('resume text', 'job description');\n\n      expect(mockAzureAdapter.calculateRelevancy).toHaveBeenCalledWith('resume text', 'job description');\n      expect(response.success).toBe(true);\n      expect(response.data).toBe(85);\n      expect(response.provider).toBe('Azure OpenAI');\n    });\n\n    it('should clamp score to 0-100 range', async () => {\n      mockAzureAdapter.calculateRelevancy.mockResolvedValue(150);\n\n      const response = await calculateRelevancy('resume', 'job');\n\n      expect(response.success).toBe(true);\n      expect(response.data).toBe(100); // Clamped to max\n    });\n\n    it('should clamp negative scores to 0', async () => {\n      mockAzureAdapter.calculateRelevancy.mockResolvedValue(-10);\n\n      const response = await calculateRelevancy('resume', 'job');\n\n      expect(response.success).toBe(true);\n      expect(response.data).toBe(0); // Clamped to min\n    });\n\n    it('should handle provider errors', async () => {\n      const error = new Error('Failed to analyze');\n      mockAzureAdapter.calculateRelevancy.mockRejectedValue(error);\n\n      const response = await calculateRelevancy('resume', 'job');\n\n      expect(response.success).toBe(false);\n      expect(response.error).toBe('Failed to analyze');\n    });\n  });\n\n  describe('tailorResume', () => {\n    beforeEach(() => {\n      mockAzureAdapter.initialize.mockResolvedValue(true);\n      mockAzureAdapter.isReady.mockReturnValue(true);\n    });\n\n    it('should tailor resume successfully', async () => {\n      const tailoredResume = 'Tailored resume content';\n      mockAzureAdapter.tailorResume.mockResolvedValue(tailoredResume);\n\n      const response = await tailorResume('original resume', 'job description');\n\n      expect(mockAzureAdapter.tailorResume).toHaveBeenCalledWith('original resume', 'job description');\n      expect(response.success).toBe(true);\n      expect(response.data).toBe(tailoredResume);\n      expect(response.provider).toBe('Azure OpenAI');\n    });\n\n    it('should handle provider errors', async () => {\n      const error = new Error('Tailoring failed');\n      mockAzureAdapter.tailorResume.mockRejectedValue(error);\n\n      const response = await tailorResume('resume', 'job');\n\n      expect(response.success).toBe(false);\n      expect(response.error).toBe('Tailoring failed');\n    });\n  });\n\n  describe('generateQuestions', () => {\n    beforeEach(() => {\n      mockAzureAdapter.initialize.mockResolvedValue(true);\n      mockAzureAdapter.isReady.mockReturnValue(true);\n    });\n\n    it('should generate questions successfully', async () => {\n      const questions = [\n        'Tell me about your experience with React',\n        'How do you handle challenging situations?',\n        'What are your career goals?'\n      ];\n      mockAzureAdapter.generateQuestions.mockResolvedValue(questions);\n\n      const resumeInfo = {\n        name: 'John Doe',\n        experience: '5 years in web development',\n        education: 'BS Computer Science',\n        skills: 'React, Node.js, TypeScript'\n      };\n\n      const response = await generateQuestions(resumeInfo);\n\n      expect(mockAzureAdapter.generateQuestions).toHaveBeenCalledWith(resumeInfo);\n      expect(response.success).toBe(true);\n      expect(response.data).toEqual(questions);\n      expect(response.provider).toBe('Azure OpenAI');\n    });\n\n    it('should handle provider errors', async () => {\n      const error = new Error('Question generation failed');\n      mockAzureAdapter.generateQuestions.mockRejectedValue(error);\n\n      const resumeInfo = {\n        name: 'John Doe',\n        experience: '5 years',\n        education: 'BS',\n        skills: 'JavaScript'\n      };\n\n      const response = await generateQuestions(resumeInfo);\n\n      expect(response.success).toBe(false);\n      expect(response.error).toBe('Question generation failed');\n    });\n  });\n\n  describe('getProviderInfo', () => {\n    it('should return provider information when initialized', async () => {\n      mockAzureAdapter.initialize.mockResolvedValue(true);\n      mockAzureAdapter.isReady.mockReturnValue(true);\n      \n      // Initialize by making a call\n      await generateCoverLetter('test', 'test');\n      \n      const info = getProviderInfo();\n      expect(info.name).toBe('Azure OpenAI');\n      expect(info.isReady).toBe(true);\n    });\n\n    it('should return none when not initialized', () => {\n      const info = getProviderInfo();\n      expect(info.name).toBe('none');\n      expect(info.isReady).toBe(false);\n    });\n  });\n\n  describe('switchProvider', () => {\n    beforeEach(() => {\n      mockAzureAdapter.initialize.mockResolvedValue(true);\n      mockAzureAdapter.isReady.mockReturnValue(true);\n    });\n\n    it('should switch to Azure OpenAI successfully', async () => {\n      // Initialize first\n      await generateCoverLetter('test', 'test');\n      expect(getProviderInfo().name).toBe('Azure OpenAI');\n\n      // Switch to Azure (should work since it's the only provider)\n      const response = await switchProvider('azure-openai');\n      \n      expect(response.success).toBe(true);\n      expect(response.data).toBe(true);\n      expect(mockAzureAdapter.dispose).toHaveBeenCalled();\n      expect(mockAzureAdapter.initialize).toHaveBeenCalled();\n    });\n\n    it('should handle invalid provider names', async () => {\n      const response = await switchProvider('invalid-provider');\n      \n      expect(response.success).toBe(false);\n      expect(response.error).toContain('Unknown error occurred');\n    });\n\n    it('should handle switch failures', async () => {\n      mockAzureAdapter.initialize.mockResolvedValue(false);\n      \n      const response = await switchProvider('azure-openai');\n      \n      expect(response.success).toBe(false);\n      expect(response.data).toBe(false);\n    });\n  });\n\n  describe('Error Handling', () => {\n    beforeEach(() => {\n      mockAzureAdapter.initialize.mockResolvedValue(true);\n      mockAzureAdapter.isReady.mockReturnValue(true);\n    });\n\n    it('should handle unknown errors gracefully', async () => {\n      mockAzureAdapter.generateCoverLetter.mockRejectedValue('String error');\n\n      const response = await generateCoverLetter('resume', 'job');\n\n      expect(response.success).toBe(false);\n      expect(response.error).toBe('Unknown error occurred');\n    });\n\n    it('should handle provider not ready state', async () => {\n      mockAzureAdapter.isReady.mockReturnValue(false);\n      mockAzureAdapter.generateCoverLetter.mockRejectedValue(new Error('Provider not ready'));\n\n      const response = await generateCoverLetter('resume', 'job');\n\n      expect(response.success).toBe(false);\n      expect(response.error).toContain('Provider not ready');\n    });\n  });\n\n  describe('Concurrent Requests', () => {\n    beforeEach(() => {\n      mockAzureAdapter.initialize.mockResolvedValue(true);\n      mockAzureAdapter.isReady.mockReturnValue(true);\n    });\n\n    it('should handle multiple concurrent requests', async () => {\n      mockAzureAdapter.generateCoverLetter\n        .mockResolvedValueOnce('Cover letter 1')\n        .mockResolvedValueOnce('Cover letter 2')\n        .mockResolvedValueOnce('Cover letter 3');\n\n      const promises = [\n        generateCoverLetter('resume1', 'job1'),\n        generateCoverLetter('resume2', 'job2'),\n        generateCoverLetter('resume3', 'job3')\n      ];\n\n      const responses = await Promise.all(promises);\n\n      expect(responses).toHaveLength(3);\n      expect(responses[0].success).toBe(true);\n      expect(responses[1].success).toBe(true);\n      expect(responses[2].success).toBe(true);\n      expect(responses[0].data).toBe('Cover letter 1');\n      expect(responses[1].data).toBe('Cover letter 2');\n      expect(responses[2].data).toBe('Cover letter 3');\n    });\n  });\n});\n"],"version":3}