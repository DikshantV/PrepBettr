{"version":3,"names":["exports","POST","cov_16bgpj9l5d","s","GET","OPTIONS","server_1","require","SpeechSDK","__importStar","logger_1","error_utils_1","request","f","handleAsyncError","body","json","text","voice","b","rate","pitch","logger","api","length","trim","NextResponse","error","status","speechKey","process","env","NEXT_PUBLIC_SPEECH_KEY","AZURE_SPEECH_KEY","speechRegion","NEXT_PUBLIC_SPEECH_REGION","AZURE_SPEECH_REGION","speechConfig","SpeechConfig","fromSubscription","speechSynthesisVoiceName","speechSynthesisOutputFormat","SpeechSynthesisOutputFormat","Audio16Khz32KBitRateMonoMp3","synthesizer","SpeechSynthesizer","undefined","ssml","escapeXml","result","Promise","resolve","reject","speakSsmlAsync","close","reason","ResultReason","SynthesizingAudioCompleted","audioData","response","textLength","audioSize","byteLength","headers","toString","Canceled","cancellationDetails","CancellationDetails","fromResult","errorMessage","errorDetails","CancellationReason","Error","_a","includes","_b","String","message","service","availableVoices","name","displayName","gender","language","timestamp","Date","toISOString","replace"],"sources":["/Users/dikshantvashistha/PrepBettr/app/api/voice/tts/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport * as SpeechSDK from 'microsoft-cognitiveservices-speech-sdk';\nimport { logger } from '@/lib/utils/logger';\nimport { handleAsyncError } from '@/lib/utils/error-utils';\n\ninterface TTSRequest {\n  text: string;\n  voice?: string;\n  rate?: string;\n  pitch?: string;\n}\n\n/**\n * Azure Text-to-Speech API Endpoint\n * Converts text to speech using Azure Speech Services\n */\nexport async function POST(request: NextRequest) {\n  return handleAsyncError(\n    async () => {\n    try {\n      const body: TTSRequest = await request.json();\n      const { text, voice = 'en-US-SaraNeural', rate = '1.0', pitch = '0Hz' } = body;\n\n      logger.api.request('POST /api/voice/tts', `Converting text to speech (${text.length} chars)`);\n\n      if (!text || !text.trim()) {\n        return NextResponse.json(\n          { error: 'Text is required' },\n          { status: 400 }\n        );\n      }\n\n      if (text.length > 5000) {\n        return NextResponse.json(\n          { error: 'Text too long (max 5000 characters)' },\n          { status: 400 }\n        );\n      }\n\n      // Get Azure Speech credentials\n      const speechKey = process.env.NEXT_PUBLIC_SPEECH_KEY || process.env.AZURE_SPEECH_KEY;\n      const speechRegion = process.env.NEXT_PUBLIC_SPEECH_REGION || process.env.AZURE_SPEECH_REGION;\n\n      if (!speechKey || !speechRegion) {\n        logger.error('Azure Speech Service credentials not found');\n        return NextResponse.json(\n          { error: 'Speech service configuration error' },\n          { status: 500 }\n        );\n      }\n\n      // Configure Azure Speech SDK\n      const speechConfig = SpeechSDK.SpeechConfig.fromSubscription(speechKey, speechRegion);\n      speechConfig.speechSynthesisVoiceName = voice;\n      speechConfig.speechSynthesisOutputFormat = SpeechSDK.SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3;\n\n      // Create synthesizer with null audio config to get raw audio data\n      const synthesizer = new SpeechSDK.SpeechSynthesizer(speechConfig, undefined);\n\n      // Create SSML for better control\n      const ssml = `\n        <speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\" xml:lang=\"en-US\">\n          <voice name=\"${voice}\">\n            <prosody rate=\"${rate}\" pitch=\"${pitch}\">\n              ${escapeXml(text)}\n            </prosody>\n          </voice>\n        </speak>\n      `.trim();\n\n      // Synthesize speech\n      const result = await new Promise<SpeechSDK.SpeechSynthesisResult>((resolve, reject) => {\n        synthesizer.speakSsmlAsync(\n          ssml,\n          (result) => {\n            synthesizer.close();\n            resolve(result);\n          },\n          (error) => {\n            synthesizer.close();\n            reject(error);\n          }\n        );\n      });\n\n      // Process synthesis result\n      if (result.reason === SpeechSDK.ResultReason.SynthesizingAudioCompleted) {\n        const audioData = result.audioData;\n        \n        logger.api.response('POST /api/voice/tts', 200, {\n          textLength: text.length,\n          audioSize: audioData.byteLength,\n          voice: voice\n        });\n\n        // Return audio as blob\n        return new NextResponse(audioData, {\n          status: 200,\n          headers: {\n            'Content-Type': 'audio/mpeg',\n            'Content-Length': audioData.byteLength.toString(),\n            'Cache-Control': 'public, max-age=3600', // Cache for 1 hour\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',\n            'Access-Control-Allow-Headers': 'Content-Type'\n          }\n        });\n\n      } else if (result.reason === SpeechSDK.ResultReason.Canceled) {\n        const cancellationDetails = SpeechSDK.CancellationDetails.fromResult(result);\n        const errorMessage = `TTS canceled: ${cancellationDetails.reason} - ${cancellationDetails.errorDetails}`;\n        \n        logger.error(errorMessage);\n        \n        if (cancellationDetails.reason === SpeechSDK.CancellationReason.Error) {\n          if (cancellationDetails.errorDetails?.includes('authentication')) {\n            return NextResponse.json(\n              { error: 'Speech service authentication failed' },\n              { status: 401 }\n            );\n          }\n          if (cancellationDetails.errorDetails?.includes('quota')) {\n            return NextResponse.json(\n              { error: 'Speech service quota exceeded' },\n              { status: 429 }\n            );\n          }\n        }\n\n        return NextResponse.json(\n          { error: 'Speech synthesis failed' },\n          { status: 422 }\n        );\n\n      } else {\n        const errorMessage = `TTS failed with reason: ${result.reason}`;\n        logger.error(errorMessage);\n        return NextResponse.json(\n          { error: errorMessage },\n          { status: 422 }\n        );\n      }\n\n    } catch (error) {\n      logger.error('Text-to-speech processing failed', error instanceof Error ? error : new Error(String(error)));\n\n      // Provide helpful error responses\n      if (error instanceof Error) {\n        if (error.message.includes('authentication')) {\n          return NextResponse.json(\n            { error: 'Speech service authentication failed' },\n            { status: 401 }\n          );\n        }\n        if (error.message.includes('quota') || error.message.includes('rate limit')) {\n          return NextResponse.json(\n            { error: 'Speech service quota exceeded' },\n            { status: 429 }\n          );\n        }\n        if (error.message.includes('timeout')) {\n          return NextResponse.json(\n            { error: 'Speech service timeout' },\n            { status: 408 }\n          );\n        }\n      }\n\n      return NextResponse.json(\n        { error: 'Internal TTS processing error' },\n        { status: 500 }\n      );\n    }\n  },\n  'POST /api/voice/tts'\n  );\n}\n\n/**\n * GET endpoint to list available voices\n */\nexport async function GET() {\n  return NextResponse.json({\n    service: 'Azure Text-to-Speech',\n    status: 'available',\n    availableVoices: [\n      {\n        name: 'en-US-SaraNeural',\n        displayName: 'Sara (Neural)',\n        gender: 'Female',\n        language: 'en-US'\n      },\n      {\n        name: 'en-US-JennyNeural',\n        displayName: 'Jenny (Neural)',\n        gender: 'Female', \n        language: 'en-US'\n      },\n      {\n        name: 'en-US-AriaNeural',\n        displayName: 'Aria (Neural)',\n        gender: 'Female',\n        language: 'en-US'\n      },\n      {\n        name: 'en-US-ChristopherNeural',\n        displayName: 'Christopher (Neural)',\n        gender: 'Male',\n        language: 'en-US'\n      },\n      {\n        name: 'en-US-EricNeural',\n        displayName: 'Eric (Neural)', \n        gender: 'Male',\n        language: 'en-US'\n      },\n      {\n        name: 'en-US-GuyNeural',\n        displayName: 'Guy (Neural)',\n        gender: 'Male',\n        language: 'en-US'\n      }\n    ],\n    timestamp: new Date().toISOString()\n  });\n}\n\n/**\n * Handle CORS preflight requests\n */\nexport async function OPTIONS() {\n  return new NextResponse(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type'\n    }\n  });\n}\n\n/**\n * Escape XML special characters for SSML\n */\nfunction escapeXml(text: string): string {\n  return text\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&apos;');\n}\n"],"mappingsgBAA,OAAA,CAAAC,IAAA,GAAAA,IAAA;AAgKC;AAAAC,cAAA,GAAAC,CAAA;AAKDH,OAAA,CAAAI,GAAA,GAAAA,GAAA;AA4CC;AAAAF,cAAA,GAAAC,CAAA;AAKDH,OAAA,CAAAK,OAAA,GAAAA,OAAA;AAtOA,MAAAC,QAAA;AAAA;AAAA,CAAAJ,cAAA,GAAAC,CAAA,QAAAI,OAAA;AACA,MAAAC,SAAA;AAAA;AAAA,CAAAN,cAAA,GAAAC,CAAA,QAAAM,YAAA,CAAAF,OAAA;AACA,MAAAG,QAAA;AAAA;AAAA,CAAAR,cAAA,GAAAC,CAAA,QAAAI,OAAA;AACA,MAAAI,aAAA;AAAA;AAAA,CAAAT,cAAA,GAAAC,CAAA,QAAAI,OAAA;AASA;;;;AAIO,eAAeN,IAAIA,CAACW,OAAoB;EAAA;EAAAV,cAAA,GAAAW,CAAA;EAAAX,cAAA,GAAAC,CAAA;EAC7C,OAAO,IAAAQ,aAAA,CAAAG,gBAAgB,EACrB,YAAW;IAAA;IAAAZ,cAAA,GAAAW,CAAA;;;;IACX,IAAI;MACF,MAAME,IAAI;MAAA;MAAA,CAAAb,cAAA,GAAAC,CAAA,QAAe,MAAMS,OAAO,CAACI,IAAI,EAAE;MAC7C,MAAM;QAAEC,IAAI;QAAEC,KAAK;QAAA;QAAA,CAAAhB,cAAA,GAAAiB,CAAA,WAAG,kBAAkB;QAAEC,IAAI;QAAA;QAAA,CAAAlB,cAAA,GAAAiB,CAAA,WAAG,KAAK;QAAEE,KAAK;QAAA;QAAA,CAAAnB,cAAA,GAAAiB,CAAA,WAAG,KAAK;MAAA,CAAE;MAAA;MAAA,CAAAjB,cAAA,GAAAC,CAAA,QAAGY,IAAI;MAAC;MAAAb,cAAA,GAAAC,CAAA;MAE/EO,QAAA,CAAAY,MAAM,CAACC,GAAG,CAACX,OAAO,CAAC,qBAAqB,EAAE,8BAA8BK,IAAI,CAACO,MAAM,SAAS,CAAC;MAAC;MAAAtB,cAAA,GAAAC,CAAA;MAE9F;MAAI;MAAA,CAAAD,cAAA,GAAAiB,CAAA,YAACF,IAAI;MAAA;MAAA,CAAAf,cAAA,GAAAiB,CAAA,WAAI,CAACF,IAAI,CAACQ,IAAI,EAAE,GAAE;QAAA;QAAAvB,cAAA,GAAAiB,CAAA;QAAAjB,cAAA,GAAAC,CAAA;QACzB,OAAOG,QAAA,CAAAoB,YAAY,CAACV,IAAI,CACtB;UAAEW,KAAK,EAAE;QAAkB,CAAE,EAC7B;UAAEC,MAAM,EAAE;QAAG,CAAE,CAChB;MACH,CAAC;MAAA;MAAA;QAAA1B,cAAA,GAAAiB,CAAA;MAAA;MAAAjB,cAAA,GAAAC,CAAA;MAED,IAAIc,IAAI,CAACO,MAAM,GAAG,IAAI,EAAE;QAAA;QAAAtB,cAAA,GAAAiB,CAAA;QAAAjB,cAAA,GAAAC,CAAA;QACtB,OAAOG,QAAA,CAAAoB,YAAY,CAACV,IAAI,CACtB;UAAEW,KAAK,EAAE;QAAqC,CAAE,EAChD;UAAEC,MAAM,EAAE;QAAG,CAAE,CAChB;MACH,CAAC;MAAA;MAAA;QAAA1B,cAAA,GAAAiB,CAAA;MAAA;MAED;MACA,MAAMU,SAAS;MAAA;MAAA,CAAA3B,cAAA,GAAAC,CAAA;MAAG;MAAA,CAAAD,cAAA,GAAAiB,CAAA,WAAAW,OAAO,CAACC,GAAG,CAACC,sBAAsB;MAAA;MAAA,CAAA9B,cAAA,GAAAiB,CAAA,WAAIW,OAAO,CAACC,GAAG,CAACE,gBAAgB;MACpF,MAAMC,YAAY;MAAA;MAAA,CAAAhC,cAAA,GAAAC,CAAA;MAAG;MAAA,CAAAD,cAAA,GAAAiB,CAAA,WAAAW,OAAO,CAACC,GAAG,CAACI,yBAAyB;MAAA;MAAA,CAAAjC,cAAA,GAAAiB,CAAA,WAAIW,OAAO,CAACC,GAAG,CAACK,mBAAmB;MAAC;MAAAlC,cAAA,GAAAC,CAAA;MAE9F;MAAI;MAAA,CAAAD,cAAA,GAAAiB,CAAA,YAACU,SAAS;MAAA;MAAA,CAAA3B,cAAA,GAAAiB,CAAA,WAAI,CAACe,YAAY,GAAE;QAAA;QAAAhC,cAAA,GAAAiB,CAAA;QAAAjB,cAAA,GAAAC,CAAA;QAC/BO,QAAA,CAAAY,MAAM,CAACK,KAAK,CAAC,4CAA4C,CAAC;QAAC;QAAAzB,cAAA,GAAAC,CAAA;QAC3D,OAAOG,QAAA,CAAAoB,YAAY,CAACV,IAAI,CACtB;UAAEW,KAAK,EAAE;QAAoC,CAAE,EAC/C;UAAEC,MAAM,EAAE;QAAG,CAAE,CAChB;MACH,CAAC;MAAA;MAAA;QAAA1B,cAAA,GAAAiB,CAAA;MAAA;MAED;MACA,MAAMkB,YAAY;MAAA;MAAA,CAAAnC,cAAA,GAAAC,CAAA,QAAGK,SAAS,CAAC8B,YAAY,CAACC,gBAAgB,CAACV,SAAS,EAAEK,YAAY,CAAC;MAAC;MAAAhC,cAAA,GAAAC,CAAA;MACtFkC,YAAY,CAACG,wBAAwB,GAAGtB,KAAK;MAAC;MAAAhB,cAAA,GAAAC,CAAA;MAC9CkC,YAAY,CAACI,2BAA2B,GAAGjC,SAAS,CAACkC,2BAA2B,CAACC,2BAA2B;MAE5G;MACA,MAAMC,WAAW;MAAA;MAAA,CAAA1C,cAAA,GAAAC,CAAA,QAAG,IAAIK,SAAS,CAACqC,iBAAiB,CAACR,YAAY,EAAES,SAAS,CAAC;MAE5E;MACA,MAAMC,IAAI;MAAA;MAAA,CAAA7C,cAAA,GAAAC,CAAA,QAAG;;yBAEMe,KAAK;6BACDE,IAAI,YAAYC,KAAK;gBAClC2B,SAAS,CAAC/B,IAAI,CAAC;;;;OAIxB,CAACQ,IAAI,EAAE;MAER;MACA,MAAMwB,MAAM;MAAA;MAAA,CAAA/C,cAAA,GAAAC,CAAA,QAAG,MAAM,IAAI+C,OAAO,CAAkC,CAACC,OAAO,EAAEC,MAAM,KAAI;QAAA;QAAAlD,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAC,CAAA;QACpFyC,WAAW,CAACS,cAAc,CACxBN,IAAI,EACHE,MAAM,IAAI;UAAA;UAAA/C,cAAA,GAAAW,CAAA;UAAAX,cAAA,GAAAC,CAAA;UACTyC,WAAW,CAACU,KAAK,EAAE;UAAC;UAAApD,cAAA,GAAAC,CAAA;UACpBgD,OAAO,CAACF,MAAM,CAAC;QACjB,CAAC,EACAtB,KAAK,IAAI;UAAA;UAAAzB,cAAA,GAAAW,CAAA;UAAAX,cAAA,GAAAC,CAAA;UACRyC,WAAW,CAACU,KAAK,EAAE;UAAC;UAAApD,cAAA,GAAAC,CAAA;UACpBiD,MAAM,CAACzB,KAAK,CAAC;QACf,CAAC,CACF;MACH,CAAC,CAAC;MAEF;MAAA;MAAAzB,cAAA,GAAAC,CAAA;MACA,IAAI8C,MAAM,CAACM,MAAM,KAAK/C,SAAS,CAACgD,YAAY,CAACC,0BAA0B,EAAE;QAAA;QAAAvD,cAAA,GAAAiB,CAAA;QACvE,MAAMuC,SAAS;QAAA;QAAA,CAAAxD,cAAA,GAAAC,CAAA,QAAG8C,MAAM,CAACS,SAAS;QAAC;QAAAxD,cAAA,GAAAC,CAAA;QAEnCO,QAAA,CAAAY,MAAM,CAACC,GAAG,CAACoC,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;UAC9CC,UAAU,EAAE3C,IAAI,CAACO,MAAM;UACvBqC,SAAS,EAAEH,SAAS,CAACI,UAAU;UAC/B5C,KAAK,EAAEA;SACR,CAAC;QAEF;QAAA;QAAAhB,cAAA,GAAAC,CAAA;QACA,OAAO,IAAIG,QAAA,CAAAoB,YAAY,CAACgC,SAAS,EAAE;UACjC9B,MAAM,EAAE,GAAG;UACXmC,OAAO,EAAE;YACP,cAAc,EAAE,YAAY;YAC5B,gBAAgB,EAAEL,SAAS,CAACI,UAAU,CAACE,QAAQ,EAAE;YACjD,eAAe,EAAE,sBAAsB;YAAE;YACzC,6BAA6B,EAAE,GAAG;YAClC,8BAA8B,EAAE,oBAAoB;YACpD,8BAA8B,EAAE;;SAEnC,CAAC;MAEJ,CAAC,MAAM;QAAA;QAAA9D,cAAA,GAAAiB,CAAA;QAAAjB,cAAA,GAAAC,CAAA;QAAA,IAAI8C,MAAM,CAACM,MAAM,KAAK/C,SAAS,CAACgD,YAAY,CAACS,QAAQ,EAAE;UAAA;UAAA/D,cAAA,GAAAiB,CAAA;UAC5D,MAAM+C,mBAAmB;UAAA;UAAA,CAAAhE,cAAA,GAAAC,CAAA,QAAGK,SAAS,CAAC2D,mBAAmB,CAACC,UAAU,CAACnB,MAAM,CAAC;UAC5E,MAAMoB,YAAY;UAAA;UAAA,CAAAnE,cAAA,GAAAC,CAAA,QAAG,iBAAiB+D,mBAAmB,CAACX,MAAM,MAAMW,mBAAmB,CAACI,YAAY,EAAE;UAAC;UAAApE,cAAA,GAAAC,CAAA;UAEzGO,QAAA,CAAAY,MAAM,CAACK,KAAK,CAAC0C,YAAY,CAAC;UAAC;UAAAnE,cAAA,GAAAC,CAAA;UAE3B,IAAI+D,mBAAmB,CAACX,MAAM,KAAK/C,SAAS,CAAC+D,kBAAkB,CAACC,KAAK,EAAE;YAAA;YAAAtE,cAAA,GAAAiB,CAAA;YAAAjB,cAAA,GAAAC,CAAA;YACrE;YAAI;YAAA,CAAAD,cAAA,GAAAiB,CAAA,YAAAsD,EAAA,GAAAP,mBAAmB,CAACI,YAAY;YAAA;YAAA,CAAApE,cAAA,GAAAiB,CAAA,WAAAsD,EAAA;YAAA;YAAA,CAAAvE,cAAA,GAAAiB,CAAA;YAAA;YAAA,CAAAjB,cAAA,GAAAiB,CAAA,WAAAsD,EAAA,CAAEC,QAAQ,CAAC,gBAAgB,CAAC,GAAE;cAAA;cAAAxE,cAAA,GAAAiB,CAAA;cAAAjB,cAAA,GAAAC,CAAA;cAChE,OAAOG,QAAA,CAAAoB,YAAY,CAACV,IAAI,CACtB;gBAAEW,KAAK,EAAE;cAAsC,CAAE,EACjD;gBAAEC,MAAM,EAAE;cAAG,CAAE,CAChB;YACH,CAAC;YAAA;YAAA;cAAA1B,cAAA,GAAAiB,CAAA;YAAA;YAAAjB,cAAA,GAAAC,CAAA;YACD;YAAI;YAAA,CAAAD,cAAA,GAAAiB,CAAA,YAAAwD,EAAA,GAAAT,mBAAmB,CAACI,YAAY;YAAA;YAAA,CAAApE,cAAA,GAAAiB,CAAA,WAAAwD,EAAA;YAAA;YAAA,CAAAzE,cAAA,GAAAiB,CAAA;YAAA;YAAA,CAAAjB,cAAA,GAAAiB,CAAA,WAAAwD,EAAA,CAAED,QAAQ,CAAC,OAAO,CAAC,GAAE;cAAA;cAAAxE,cAAA,GAAAiB,CAAA;cAAAjB,cAAA,GAAAC,CAAA;cACvD,OAAOG,QAAA,CAAAoB,YAAY,CAACV,IAAI,CACtB;gBAAEW,KAAK,EAAE;cAA+B,CAAE,EAC1C;gBAAEC,MAAM,EAAE;cAAG,CAAE,CAChB;YACH,CAAC;YAAA;YAAA;cAAA1B,cAAA,GAAAiB,CAAA;YAAA;UACH,CAAC;UAAA;UAAA;YAAAjB,cAAA,GAAAiB,CAAA;UAAA;UAAAjB,cAAA,GAAAC,CAAA;UAED,OAAOG,QAAA,CAAAoB,YAAY,CAACV,IAAI,CACtB;YAAEW,KAAK,EAAE;UAAyB,CAAE,EACpC;YAAEC,MAAM,EAAE;UAAG,CAAE,CAChB;QAEH,CAAC,MAAM;UAAA;UAAA1B,cAAA,GAAAiB,CAAA;UACL,MAAMkD,YAAY;UAAA;UAAA,CAAAnE,cAAA,GAAAC,CAAA,QAAG,2BAA2B8C,MAAM,CAACM,MAAM,EAAE;UAAC;UAAArD,cAAA,GAAAC,CAAA;UAChEO,QAAA,CAAAY,MAAM,CAACK,KAAK,CAAC0C,YAAY,CAAC;UAAC;UAAAnE,cAAA,GAAAC,CAAA;UAC3B,OAAOG,QAAA,CAAAoB,YAAY,CAACV,IAAI,CACtB;YAAEW,KAAK,EAAE0C;UAAY,CAAE,EACvB;YAAEzC,MAAM,EAAE;UAAG,CAAE,CAChB;QACH;MAAA;IAEF,CAAC,CAAC,OAAOD,KAAK,EAAE;MAAA;MAAAzB,cAAA,GAAAC,CAAA;MACdO,QAAA,CAAAY,MAAM,CAACK,KAAK,CAAC,kCAAkC,EAAEA,KAAK,YAAY6C,KAAK;MAAA;MAAA,CAAAtE,cAAA,GAAAiB,CAAA,WAAGQ,KAAK;MAAA;MAAA,CAAAzB,cAAA,GAAAiB,CAAA,WAAG,IAAIqD,KAAK,CAACI,MAAM,CAACjD,KAAK,CAAC,CAAC,EAAC;MAE3G;MAAA;MAAAzB,cAAA,GAAAC,CAAA;MACA,IAAIwB,KAAK,YAAY6C,KAAK,EAAE;QAAA;QAAAtE,cAAA,GAAAiB,CAAA;QAAAjB,cAAA,GAAAC,CAAA;QAC1B,IAAIwB,KAAK,CAACkD,OAAO,CAACH,QAAQ,CAAC,gBAAgB,CAAC,EAAE;UAAA;UAAAxE,cAAA,GAAAiB,CAAA;UAAAjB,cAAA,GAAAC,CAAA;UAC5C,OAAOG,QAAA,CAAAoB,YAAY,CAACV,IAAI,CACtB;YAAEW,KAAK,EAAE;UAAsC,CAAE,EACjD;YAAEC,MAAM,EAAE;UAAG,CAAE,CAChB;QACH,CAAC;QAAA;QAAA;UAAA1B,cAAA,GAAAiB,CAAA;QAAA;QAAAjB,cAAA,GAAAC,CAAA;QACD;QAAI;QAAA,CAAAD,cAAA,GAAAiB,CAAA,WAAAQ,KAAK,CAACkD,OAAO,CAACH,QAAQ,CAAC,OAAO,CAAC;QAAA;QAAA,CAAAxE,cAAA,GAAAiB,CAAA,WAAIQ,KAAK,CAACkD,OAAO,CAACH,QAAQ,CAAC,YAAY,CAAC,GAAE;UAAA;UAAAxE,cAAA,GAAAiB,CAAA;UAAAjB,cAAA,GAAAC,CAAA;UAC3E,OAAOG,QAAA,CAAAoB,YAAY,CAACV,IAAI,CACtB;YAAEW,KAAK,EAAE;UAA+B,CAAE,EAC1C;YAAEC,MAAM,EAAE;UAAG,CAAE,CAChB;QACH,CAAC;QAAA;QAAA;UAAA1B,cAAA,GAAAiB,CAAA;QAAA;QAAAjB,cAAA,GAAAC,CAAA;QACD,IAAIwB,KAAK,CAACkD,OAAO,CAACH,QAAQ,CAAC,SAAS,CAAC,EAAE;UAAA;UAAAxE,cAAA,GAAAiB,CAAA;UAAAjB,cAAA,GAAAC,CAAA;UACrC,OAAOG,QAAA,CAAAoB,YAAY,CAACV,IAAI,CACtB;YAAEW,KAAK,EAAE;UAAwB,CAAE,EACnC;YAAEC,MAAM,EAAE;UAAG,CAAE,CAChB;QACH,CAAC;QAAA;QAAA;UAAA1B,cAAA,GAAAiB,CAAA;QAAA;MACH,CAAC;MAAA;MAAA;QAAAjB,cAAA,GAAAiB,CAAA;MAAA;MAAAjB,cAAA,GAAAC,CAAA;MAED,OAAOG,QAAA,CAAAoB,YAAY,CAACV,IAAI,CACtB;QAAEW,KAAK,EAAE;MAA+B,CAAE,EAC1C;QAAEC,MAAM,EAAE;MAAG,CAAE,CAChB;IACH;EACF,CAAC,EACD,qBAAqB,CACpB;AACH;AAEA;;;AAGO,eAAexB,GAAGA,CAAA;EAAA;EAAAF,cAAA,GAAAW,CAAA;EAAAX,cAAA,GAAAC,CAAA;EACvB,OAAOG,QAAA,CAAAoB,YAAY,CAACV,IAAI,CAAC;IACvB8D,OAAO,EAAE,sBAAsB;IAC/BlD,MAAM,EAAE,WAAW;IACnBmD,eAAe,EAAE,CACf;MACEC,IAAI,EAAE,kBAAkB;MACxBC,WAAW,EAAE,eAAe;MAC5BC,MAAM,EAAE,QAAQ;MAChBC,QAAQ,EAAE;KACX,EACD;MACEH,IAAI,EAAE,mBAAmB;MACzBC,WAAW,EAAE,gBAAgB;MAC7BC,MAAM,EAAE,QAAQ;MAChBC,QAAQ,EAAE;KACX,EACD;MACEH,IAAI,EAAE,kBAAkB;MACxBC,WAAW,EAAE,eAAe;MAC5BC,MAAM,EAAE,QAAQ;MAChBC,QAAQ,EAAE;KACX,EACD;MACEH,IAAI,EAAE,yBAAyB;MAC/BC,WAAW,EAAE,sBAAsB;MACnCC,MAAM,EAAE,MAAM;MACdC,QAAQ,EAAE;KACX,EACD;MACEH,IAAI,EAAE,kBAAkB;MACxBC,WAAW,EAAE,eAAe;MAC5BC,MAAM,EAAE,MAAM;MACdC,QAAQ,EAAE;KACX,EACD;MACEH,IAAI,EAAE,iBAAiB;MACvBC,WAAW,EAAE,cAAc;MAC3BC,MAAM,EAAE,MAAM;MACdC,QAAQ,EAAE;KACX,CACF;IACDC,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW;GAClC,CAAC;AACJ;AAEA;;;AAGO,eAAejF,OAAOA,CAAA;EAAA;EAAAH,cAAA,GAAAW,CAAA;EAAAX,cAAA,GAAAC,CAAA;EAC3B,OAAO,IAAIG,QAAA,CAAAoB,YAAY,CAAC,IAAI,EAAE;IAC5BE,MAAM,EAAE,GAAG;IACXmC,OAAO,EAAE;MACP,6BAA6B,EAAE,GAAG;MAClC,8BAA8B,EAAE,oBAAoB;MACpD,8BAA8B,EAAE;;GAEnC,CAAC;AACJ;AAEA;;;AAGA,SAASf,SAASA,CAAC/B,IAAY;EAAA;EAAAf,cAAA,GAAAW,CAAA;EAAAX,cAAA,GAAAC,CAAA;EAC7B,OAAOc,IAAI,CACRsE,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CACtBA,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CACrBA,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CACrBA,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CACvBA,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC;AAC5B","ignoreList":[]}