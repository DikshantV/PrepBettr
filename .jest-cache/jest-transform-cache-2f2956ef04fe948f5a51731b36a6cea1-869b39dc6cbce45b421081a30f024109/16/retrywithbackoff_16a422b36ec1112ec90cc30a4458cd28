b900184fa13a88ef65248da27e3c3e17
"use strict";

/* istanbul ignore next */
function cov_ref6fta5e() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/utils/retry-with-backoff.ts";
  var hash = "b1606296322c315f5445a12594820c5c5b64f8b1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/utils/retry-with-backoff.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 34
        }
      },
      "2": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 4,
          column: 66
        }
      },
      "3": {
        start: {
          line: 5,
          column: 34
        },
        end: {
          line: 5,
          column: 79
        }
      },
      "4": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 16,
          column: 9
        }
      },
      "5": {
        start: {
          line: 9,
          column: 12
        },
        end: {
          line: 14,
          column: 15
        }
      },
      "6": {
        start: {
          line: 15,
          column: 12
        },
        end: {
          line: 15,
          column: 47
        }
      },
      "7": {
        start: {
          line: 22,
          column: 168
        },
        end: {
          line: 22,
          column: 175
        }
      },
      "8": {
        start: {
          line: 23,
          column: 26
        },
        end: {
          line: 23,
          column: 36
        }
      },
      "9": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 81,
          column: 9
        }
      },
      "10": {
        start: {
          line: 25,
          column: 27
        },
        end: {
          line: 25,
          column: 28
        }
      },
      "11": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 80,
          column: 13
        }
      },
      "12": {
        start: {
          line: 27,
          column: 31
        },
        end: {
          line: 27,
          column: 41
        }
      },
      "13": {
        start: {
          line: 29,
          column: 16
        },
        end: {
          line: 39,
          column: 17
        }
      },
      "14": {
        start: {
          line: 30,
          column: 20
        },
        end: {
          line: 38,
          column: 23
        }
      },
      "15": {
        start: {
          line: 40,
          column: 16
        },
        end: {
          line: 40,
          column: 30
        }
      },
      "16": {
        start: {
          line: 43,
          column: 16
        },
        end: {
          line: 43,
          column: 34
        }
      },
      "17": {
        start: {
          line: 45,
          column: 16
        },
        end: {
          line: 58,
          column: 17
        }
      },
      "18": {
        start: {
          line: 47,
          column: 20
        },
        end: {
          line: 56,
          column: 23
        }
      },
      "19": {
        start: {
          line: 57,
          column: 20
        },
        end: {
          line: 57,
          column: 32
        }
      },
      "20": {
        start: {
          line: 60,
          column: 41
        },
        end: {
          line: 60,
          column: 93
        }
      },
      "21": {
        start: {
          line: 61,
          column: 30
        },
        end: {
          line: 63,
          column: 38
        }
      },
      "22": {
        start: {
          line: 65,
          column: 16
        },
        end: {
          line: 73,
          column: 19
        }
      },
      "23": {
        start: {
          line: 75,
          column: 16
        },
        end: {
          line: 77,
          column: 17
        }
      },
      "24": {
        start: {
          line: 76,
          column: 20
        },
        end: {
          line: 76,
          column: 48
        }
      },
      "25": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 79,
          column: 40
        }
      },
      "26": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 24
        }
      },
      "27": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "28": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 24
        }
      },
      "29": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 102,
          column: 9
        }
      },
      "30": {
        start: {
          line: 97,
          column: 27
        },
        end: {
          line: 97,
          column: 48
        }
      },
      "31": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 101,
          column: 31
        }
      },
      "32": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 108,
          column: 9
        }
      },
      "33": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 24
        }
      },
      "34": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 21
        }
      },
      "35": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 115,
          column: 63
        }
      },
      "36": {
        start: {
          line: 115,
          column: 38
        },
        end: {
          line: 115,
          column: 61
        }
      },
      "37": {
        start: {
          line: 122,
          column: 24
        },
        end: {
          line: 139,
          column: 9
        }
      },
      "38": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 140,
          column: 63
        }
      },
      "39": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 148,
          column: 9
        }
      },
      "40": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 147,
          column: 15
        }
      },
      "41": {
        start: {
          line: 154,
          column: 25
        },
        end: {
          line: 154,
          column: 76
        }
      },
      "42": {
        start: {
          line: 155,
          column: 24
        },
        end: {
          line: 166,
          column: 9
        }
      },
      "43": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 167,
          column: 62
        }
      },
      "44": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 185,
          column: 9
        }
      },
      "45": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 174,
          column: 15
        }
      },
      "46": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 184,
          column: 15
        }
      },
      "47": {
        start: {
          line: 192,
          column: 25
        },
        end: {
          line: 192,
          column: 76
        }
      },
      "48": {
        start: {
          line: 193,
          column: 24
        },
        end: {
          line: 211,
          column: 9
        }
      },
      "49": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 212,
          column: 64
        }
      },
      "50": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 230,
          column: 9
        }
      },
      "51": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 219,
          column: 15
        }
      },
      "52": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 229,
          column: 15
        }
      },
      "53": {
        start: {
          line: 233,
          column: 0
        },
        end: {
          line: 233,
          column: 44
        }
      },
      "54": {
        start: {
          line: 238,
          column: 4
        },
        end: {
          line: 239,
          column: 28
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        loc: {
          start: {
            line: 7,
            column: 42
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 43
          },
          end: {
            line: 83,
            column: 5
          }
        },
        line: 21
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 87,
            column: 4
          },
          end: {
            line: 87,
            column: 5
          }
        },
        loc: {
          start: {
            line: 87,
            column: 40
          },
          end: {
            line: 110,
            column: 5
          }
        },
        line: 87
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 114,
            column: 4
          },
          end: {
            line: 114,
            column: 5
          }
        },
        loc: {
          start: {
            line: 114,
            column: 21
          },
          end: {
            line: 116,
            column: 5
          }
        },
        line: 114
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 115,
            column: 27
          },
          end: {
            line: 115,
            column: 28
          }
        },
        loc: {
          start: {
            line: 115,
            column: 38
          },
          end: {
            line: 115,
            column: 61
          }
        },
        line: 115
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 120,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        },
        loc: {
          start: {
            line: 120,
            column: 36
          },
          end: {
            line: 149,
            column: 5
          }
        },
        line: 120
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 153,
            column: 4
          },
          end: {
            line: 153,
            column: 5
          }
        },
        loc: {
          start: {
            line: 153,
            column: 36
          },
          end: {
            line: 186,
            column: 5
          }
        },
        line: 153
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 190,
            column: 4
          },
          end: {
            line: 190,
            column: 5
          }
        },
        loc: {
          start: {
            line: 190,
            column: 36
          },
          end: {
            line: 231,
            column: 5
          }
        },
        line: 190
      },
      "8": {
        name: "retryWithExponentialBackoff",
        decl: {
          start: {
            line: 237,
            column: 15
          },
          end: {
            line: 237,
            column: 42
          }
        },
        loc: {
          start: {
            line: 237,
            column: 72
          },
          end: {
            line: 240,
            column: 1
          }
        },
        line: 237
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 16,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 16,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 8
      },
      "1": {
        loc: {
          start: {
            line: 8,
            column: 12
          },
          end: {
            line: 8,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 12
          },
          end: {
            line: 8,
            column: 30
          }
        }, {
          start: {
            line: 8,
            column: 34
          },
          end: {
            line: 8,
            column: 63
          }
        }],
        line: 8
      },
      "2": {
        loc: {
          start: {
            line: 21,
            column: 29
          },
          end: {
            line: 21,
            column: 41
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 21,
            column: 39
          },
          end: {
            line: 21,
            column: 41
          }
        }],
        line: 21
      },
      "3": {
        loc: {
          start: {
            line: 22,
            column: 16
          },
          end: {
            line: 22,
            column: 30
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 30
          }
        }],
        line: 22
      },
      "4": {
        loc: {
          start: {
            line: 22,
            column: 32
          },
          end: {
            line: 22,
            column: 48
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 22,
            column: 44
          },
          end: {
            line: 22,
            column: 48
          }
        }],
        line: 22
      },
      "5": {
        loc: {
          start: {
            line: 22,
            column: 50
          },
          end: {
            line: 22,
            column: 66
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 22,
            column: 61
          },
          end: {
            line: 22,
            column: 66
          }
        }],
        line: 22
      },
      "6": {
        loc: {
          start: {
            line: 22,
            column: 68
          },
          end: {
            line: 22,
            column: 81
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 22,
            column: 77
          },
          end: {
            line: 22,
            column: 81
          }
        }],
        line: 22
      },
      "7": {
        loc: {
          start: {
            line: 22,
            column: 83
          },
          end: {
            line: 22,
            column: 126
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 22,
            column: 100
          },
          end: {
            line: 22,
            column: 126
          }
        }],
        line: 22
      },
      "8": {
        loc: {
          start: {
            line: 22,
            column: 145
          },
          end: {
            line: 22,
            column: 163
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 22,
            column: 154
          },
          end: {
            line: 22,
            column: 163
          }
        }],
        line: 22
      },
      "9": {
        loc: {
          start: {
            line: 29,
            column: 16
          },
          end: {
            line: 39,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 16
          },
          end: {
            line: 39,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "10": {
        loc: {
          start: {
            line: 45,
            column: 16
          },
          end: {
            line: 58,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 16
          },
          end: {
            line: 58,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "11": {
        loc: {
          start: {
            line: 45,
            column: 20
          },
          end: {
            line: 45,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 45,
            column: 20
          },
          end: {
            line: 45,
            column: 42
          }
        }, {
          start: {
            line: 45,
            column: 46
          },
          end: {
            line: 45,
            column: 68
          }
        }],
        line: 45
      },
      "12": {
        loc: {
          start: {
            line: 61,
            column: 30
          },
          end: {
            line: 63,
            column: 38
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 62,
            column: 22
          },
          end: {
            line: 62,
            column: 79
          }
        }, {
          start: {
            line: 63,
            column: 22
          },
          end: {
            line: 63,
            column: 38
          }
        }],
        line: 61
      },
      "13": {
        loc: {
          start: {
            line: 75,
            column: 16
          },
          end: {
            line: 77,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 16
          },
          end: {
            line: 77,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "14": {
        loc: {
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "15": {
        loc: {
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 92,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 90,
            column: 39
          }
        }, {
          start: {
            line: 91,
            column: 12
          },
          end: {
            line: 91,
            column: 38
          }
        }, {
          start: {
            line: 92,
            column: 12
          },
          end: {
            line: 92,
            column: 41
          }
        }],
        line: 90
      },
      "16": {
        loc: {
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 102,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 102,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "17": {
        loc: {
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 96,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 96,
            column: 62
          },
          end: {
            line: 96,
            column: 68
          }
        }, {
          start: {
            line: 96,
            column: 71
          },
          end: {
            line: 96,
            column: 80
          }
        }],
        line: 96
      },
      "18": {
        loc: {
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 96,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 96,
            column: 42
          }
        }, {
          start: {
            line: 96,
            column: 46
          },
          end: {
            line: 96,
            column: 59
          }
        }],
        line: 96
      },
      "19": {
        loc: {
          start: {
            line: 98,
            column: 19
          },
          end: {
            line: 101,
            column: 30
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 98,
            column: 19
          },
          end: {
            line: 98,
            column: 33
          }
        }, {
          start: {
            line: 99,
            column: 16
          },
          end: {
            line: 99,
            column: 30
          }
        }, {
          start: {
            line: 100,
            column: 16
          },
          end: {
            line: 100,
            column: 30
          }
        }, {
          start: {
            line: 101,
            column: 16
          },
          end: {
            line: 101,
            column: 30
          }
        }],
        line: 98
      },
      "20": {
        loc: {
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 108,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 108,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "21": {
        loc: {
          start: {
            line: 104,
            column: 12
          },
          end: {
            line: 106,
            column: 101
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 13
          },
          end: {
            line: 104,
            column: 96
          }
        }, {
          start: {
            line: 105,
            column: 13
          },
          end: {
            line: 105,
            column: 95
          }
        }, {
          start: {
            line: 106,
            column: 13
          },
          end: {
            line: 106,
            column: 100
          }
        }],
        line: 104
      },
      "22": {
        loc: {
          start: {
            line: 104,
            column: 13
          },
          end: {
            line: 104,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 104,
            column: 62
          },
          end: {
            line: 104,
            column: 68
          }
        }, {
          start: {
            line: 104,
            column: 71
          },
          end: {
            line: 104,
            column: 96
          }
        }],
        line: 104
      },
      "23": {
        loc: {
          start: {
            line: 104,
            column: 13
          },
          end: {
            line: 104,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 13
          },
          end: {
            line: 104,
            column: 42
          }
        }, {
          start: {
            line: 104,
            column: 46
          },
          end: {
            line: 104,
            column: 59
          }
        }],
        line: 104
      },
      "24": {
        loc: {
          start: {
            line: 105,
            column: 13
          },
          end: {
            line: 105,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 105,
            column: 62
          },
          end: {
            line: 105,
            column: 68
          }
        }, {
          start: {
            line: 105,
            column: 71
          },
          end: {
            line: 105,
            column: 95
          }
        }],
        line: 105
      },
      "25": {
        loc: {
          start: {
            line: 105,
            column: 13
          },
          end: {
            line: 105,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 105,
            column: 13
          },
          end: {
            line: 105,
            column: 42
          }
        }, {
          start: {
            line: 105,
            column: 46
          },
          end: {
            line: 105,
            column: 59
          }
        }],
        line: 105
      },
      "26": {
        loc: {
          start: {
            line: 106,
            column: 13
          },
          end: {
            line: 106,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 106,
            column: 62
          },
          end: {
            line: 106,
            column: 68
          }
        }, {
          start: {
            line: 106,
            column: 71
          },
          end: {
            line: 106,
            column: 100
          }
        }],
        line: 106
      },
      "27": {
        loc: {
          start: {
            line: 106,
            column: 13
          },
          end: {
            line: 106,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 106,
            column: 13
          },
          end: {
            line: 106,
            column: 42
          }
        }, {
          start: {
            line: 106,
            column: 46
          },
          end: {
            line: 106,
            column: 59
          }
        }],
        line: 106
      },
      "28": {
        loc: {
          start: {
            line: 132,
            column: 29
          },
          end: {
            line: 132,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 132,
            column: 78
          },
          end: {
            line: 132,
            column: 84
          }
        }, {
          start: {
            line: 132,
            column: 87
          },
          end: {
            line: 132,
            column: 97
          }
        }],
        line: 132
      },
      "29": {
        loc: {
          start: {
            line: 132,
            column: 29
          },
          end: {
            line: 132,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 132,
            column: 29
          },
          end: {
            line: 132,
            column: 58
          }
        }, {
          start: {
            line: 132,
            column: 62
          },
          end: {
            line: 132,
            column: 75
          }
        }],
        line: 132
      },
      "30": {
        loc: {
          start: {
            line: 133,
            column: 26
          },
          end: {
            line: 133,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 133,
            column: 75
          },
          end: {
            line: 133,
            column: 81
          }
        }, {
          start: {
            line: 133,
            column: 84
          },
          end: {
            line: 133,
            column: 91
          }
        }],
        line: 133
      },
      "31": {
        loc: {
          start: {
            line: 133,
            column: 26
          },
          end: {
            line: 133,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 133,
            column: 26
          },
          end: {
            line: 133,
            column: 55
          }
        }, {
          start: {
            line: 133,
            column: 59
          },
          end: {
            line: 133,
            column: 72
          }
        }],
        line: 133
      },
      "32": {
        loc: {
          start: {
            line: 134,
            column: 28
          },
          end: {
            line: 134,
            column: 151
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 134,
            column: 133
          },
          end: {
            line: 134,
            column: 139
          }
        }, {
          start: {
            line: 134,
            column: 142
          },
          end: {
            line: 134,
            column: 151
          }
        }],
        line: 134
      },
      "33": {
        loc: {
          start: {
            line: 134,
            column: 28
          },
          end: {
            line: 134,
            column: 130
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 134,
            column: 28
          },
          end: {
            line: 134,
            column: 113
          }
        }, {
          start: {
            line: 134,
            column: 117
          },
          end: {
            line: 134,
            column: 130
          }
        }],
        line: 134
      },
      "34": {
        loc: {
          start: {
            line: 134,
            column: 34
          },
          end: {
            line: 134,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 134,
            column: 83
          },
          end: {
            line: 134,
            column: 89
          }
        }, {
          start: {
            line: 134,
            column: 92
          },
          end: {
            line: 134,
            column: 103
          }
        }],
        line: 134
      },
      "35": {
        loc: {
          start: {
            line: 134,
            column: 34
          },
          end: {
            line: 134,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 134,
            column: 34
          },
          end: {
            line: 134,
            column: 63
          }
        }, {
          start: {
            line: 134,
            column: 67
          },
          end: {
            line: 134,
            column: 80
          }
        }],
        line: 134
      },
      "36": {
        loc: {
          start: {
            line: 135,
            column: 26
          },
          end: {
            line: 135,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 135,
            column: 75
          },
          end: {
            line: 135,
            column: 81
          }
        }, {
          start: {
            line: 135,
            column: 84
          },
          end: {
            line: 135,
            column: 91
          }
        }],
        line: 135
      },
      "37": {
        loc: {
          start: {
            line: 135,
            column: 26
          },
          end: {
            line: 135,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 135,
            column: 26
          },
          end: {
            line: 135,
            column: 55
          }
        }, {
          start: {
            line: 135,
            column: 59
          },
          end: {
            line: 135,
            column: 72
          }
        }],
        line: 135
      },
      "38": {
        loc: {
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "39": {
        loc: {
          start: {
            line: 154,
            column: 26
          },
          end: {
            line: 154,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 154,
            column: 26
          },
          end: {
            line: 154,
            column: 41
          }
        }, {
          start: {
            line: 154,
            column: 45
          },
          end: {
            line: 154,
            column: 55
          }
        }],
        line: 154
      },
      "40": {
        loc: {
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "41": {
        loc: {
          start: {
            line: 182,
            column: 28
          },
          end: {
            line: 182,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 182,
            column: 28
          },
          end: {
            line: 182,
            column: 42
          }
        }, {
          start: {
            line: 182,
            column: 46
          },
          end: {
            line: 182,
            column: 55
          }
        }],
        line: 182
      },
      "42": {
        loc: {
          start: {
            line: 192,
            column: 26
          },
          end: {
            line: 192,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 192,
            column: 26
          },
          end: {
            line: 192,
            column: 41
          }
        }, {
          start: {
            line: 192,
            column: 45
          },
          end: {
            line: 192,
            column: 55
          }
        }],
        line: 192
      },
      "43": {
        loc: {
          start: {
            line: 203,
            column: 29
          },
          end: {
            line: 203,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 203,
            column: 78
          },
          end: {
            line: 203,
            column: 84
          }
        }, {
          start: {
            line: 203,
            column: 87
          },
          end: {
            line: 203,
            column: 97
          }
        }],
        line: 203
      },
      "44": {
        loc: {
          start: {
            line: 203,
            column: 29
          },
          end: {
            line: 203,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 203,
            column: 29
          },
          end: {
            line: 203,
            column: 58
          }
        }, {
          start: {
            line: 203,
            column: 62
          },
          end: {
            line: 203,
            column: 75
          }
        }],
        line: 203
      },
      "45": {
        loc: {
          start: {
            line: 204,
            column: 26
          },
          end: {
            line: 204,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 204,
            column: 75
          },
          end: {
            line: 204,
            column: 81
          }
        }, {
          start: {
            line: 204,
            column: 84
          },
          end: {
            line: 204,
            column: 91
          }
        }],
        line: 204
      },
      "46": {
        loc: {
          start: {
            line: 204,
            column: 26
          },
          end: {
            line: 204,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 204,
            column: 26
          },
          end: {
            line: 204,
            column: 55
          }
        }, {
          start: {
            line: 204,
            column: 59
          },
          end: {
            line: 204,
            column: 72
          }
        }],
        line: 204
      },
      "47": {
        loc: {
          start: {
            line: 205,
            column: 28
          },
          end: {
            line: 205,
            column: 151
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 205,
            column: 133
          },
          end: {
            line: 205,
            column: 139
          }
        }, {
          start: {
            line: 205,
            column: 142
          },
          end: {
            line: 205,
            column: 151
          }
        }],
        line: 205
      },
      "48": {
        loc: {
          start: {
            line: 205,
            column: 28
          },
          end: {
            line: 205,
            column: 130
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 205,
            column: 28
          },
          end: {
            line: 205,
            column: 113
          }
        }, {
          start: {
            line: 205,
            column: 117
          },
          end: {
            line: 205,
            column: 130
          }
        }],
        line: 205
      },
      "49": {
        loc: {
          start: {
            line: 205,
            column: 34
          },
          end: {
            line: 205,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 205,
            column: 83
          },
          end: {
            line: 205,
            column: 89
          }
        }, {
          start: {
            line: 205,
            column: 92
          },
          end: {
            line: 205,
            column: 103
          }
        }],
        line: 205
      },
      "50": {
        loc: {
          start: {
            line: 205,
            column: 34
          },
          end: {
            line: 205,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 205,
            column: 34
          },
          end: {
            line: 205,
            column: 63
          }
        }, {
          start: {
            line: 205,
            column: 67
          },
          end: {
            line: 205,
            column: 80
          }
        }],
        line: 205
      },
      "51": {
        loc: {
          start: {
            line: 206,
            column: 26
          },
          end: {
            line: 206,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 206,
            column: 75
          },
          end: {
            line: 206,
            column: 81
          }
        }, {
          start: {
            line: 206,
            column: 84
          },
          end: {
            line: 206,
            column: 91
          }
        }],
        line: 206
      },
      "52": {
        loc: {
          start: {
            line: 206,
            column: 26
          },
          end: {
            line: 206,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 206,
            column: 26
          },
          end: {
            line: 206,
            column: 55
          }
        }, {
          start: {
            line: 206,
            column: 59
          },
          end: {
            line: 206,
            column: 72
          }
        }],
        line: 206
      },
      "53": {
        loc: {
          start: {
            line: 207,
            column: 27
          },
          end: {
            line: 207,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 207,
            column: 76
          },
          end: {
            line: 207,
            column: 82
          }
        }, {
          start: {
            line: 207,
            column: 85
          },
          end: {
            line: 207,
            column: 93
          }
        }],
        line: 207
      },
      "54": {
        loc: {
          start: {
            line: 207,
            column: 27
          },
          end: {
            line: 207,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 207,
            column: 27
          },
          end: {
            line: 207,
            column: 56
          }
        }, {
          start: {
            line: 207,
            column: 60
          },
          end: {
            line: 207,
            column: 73
          }
        }],
        line: 207
      },
      "55": {
        loc: {
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 230,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 230,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 214
      },
      "56": {
        loc: {
          start: {
            line: 227,
            column: 28
          },
          end: {
            line: 227,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 227,
            column: 28
          },
          end: {
            line: 227,
            column: 42
          }
        }, {
          start: {
            line: 227,
            column: 46
          },
          end: {
            line: 227,
            column: 55
          }
        }],
        line: 227
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0],
      "3": [0],
      "4": [0],
      "5": [0],
      "6": [0],
      "7": [0],
      "8": [0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0, 0, 0],
      "20": [0, 0],
      "21": [0, 0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/utils/retry-with-backoff.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/utils/retry-with-backoff.ts"],
      sourcesContent: ["import { ApplicationInsights } from '@microsoft/applicationinsights-web';\n\nexport interface RetryOptions {\n  maxRetries?: number;\n  baseDelay?: number; // Base delay in milliseconds\n  maxDelay?: number; // Maximum delay in milliseconds\n  jitter?: boolean; // Add randomness to prevent thundering herd\n  retryCondition?: (error: any) => boolean; // Custom condition for retrying\n  onRetry?: (error: any, attempt: number) => void; // Callback on retry\n}\n\nexport interface RetryMetrics {\n  attempt: number;\n  totalAttempts: number;\n  delay: number;\n  error?: any;\n  userId?: string;\n  action: string;\n  startTime: number;\n  endTime?: number;\n}\n\nexport class RetryWithBackoff {\n  private static appInsights?: ApplicationInsights;\n\n  static initialize(instrumentationKey?: string) {\n    if (instrumentationKey && typeof window !== 'undefined') {\n      this.appInsights = new ApplicationInsights({\n        config: {\n          instrumentationKey,\n          enableAutoRouteTracking: false,\n        }\n      });\n      this.appInsights.loadAppInsights();\n    }\n  }\n\n  /**\n   * Execute a function with exponential backoff retry logic\n   */\n  static async execute<T>(\n    fn: () => Promise<T>,\n    options: RetryOptions & { userId?: string; action?: string } = {}\n  ): Promise<T> {\n    const {\n      maxRetries = 3,\n      baseDelay = 1000,\n      maxDelay = 30000,\n      jitter = true,\n      retryCondition = this.defaultRetryCondition,\n      onRetry,\n      userId,\n      action = 'unknown'\n    } = options;\n\n    const startTime = Date.now();\n    let lastError: any;\n\n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\n      try {\n        const result = await fn();\n        \n        // Log success metrics\n        if (attempt > 0) {\n          this.logRetrySuccess({\n            attempt: attempt + 1,\n            totalAttempts: attempt + 1,\n            delay: 0,\n            userId,\n            action,\n            startTime,\n            endTime: Date.now()\n          });\n        }\n\n        return result;\n      } catch (error) {\n        lastError = error;\n\n        // Check if we should retry\n        if (attempt === maxRetries || !retryCondition(error)) {\n          // Log final failure\n          this.logRetryFailure({\n            attempt: attempt + 1,\n            totalAttempts: maxRetries + 1,\n            delay: 0,\n            error,\n            userId,\n            action,\n            startTime,\n            endTime: Date.now()\n          });\n          throw error;\n        }\n\n        // Calculate delay for next attempt\n        const exponentialDelay = Math.min(baseDelay * Math.pow(2, attempt), maxDelay);\n        const delay = jitter \n          ? exponentialDelay + Math.random() * exponentialDelay * 0.1 // Add 10% jitter\n          : exponentialDelay;\n\n        // Log retry attempt\n        this.logRetryAttempt({\n          attempt: attempt + 1,\n          totalAttempts: maxRetries + 1,\n          delay,\n          error,\n          userId,\n          action,\n          startTime\n        });\n\n        // Execute retry callback if provided\n        if (onRetry) {\n          onRetry(error, attempt + 1);\n        }\n\n        // Wait before next attempt\n        await this.sleep(delay);\n      }\n    }\n\n    throw lastError;\n  }\n\n  /**\n   * Default retry condition - retry on network errors, rate limits, and server errors\n   */\n  private static defaultRetryCondition(error: any): boolean {\n    // Network errors\n    if (error.code === 'ECONNRESET' || \n        error.code === 'ENOTFOUND' || \n        error.code === 'ECONNREFUSED') {\n      return true;\n    }\n\n    // HTTP status codes that should be retried\n    if (error.response?.status) {\n      const status = error.response.status;\n      return status === 429 || // Rate limit\n             status === 502 || // Bad Gateway\n             status === 503 || // Service Unavailable\n             status === 504;   // Gateway Timeout\n    }\n\n    // Azure OpenAI specific errors\n    if (error.message?.includes('rate limit') || \n        error.message?.includes('throttled') ||\n        error.message?.includes('quota exceeded')) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Sleep for specified milliseconds\n   */\n  private static sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Log retry attempt\n   */\n  private static logRetryAttempt(metrics: RetryMetrics): void {\n    const logData = {\n      level: 'warn',\n      message: `Retry attempt ${metrics.attempt}/${metrics.totalAttempts} for ${metrics.action}`,\n      properties: {\n        userId: metrics.userId,\n        action: metrics.action,\n        attempt: metrics.attempt,\n        totalAttempts: metrics.totalAttempts,\n        delay: metrics.delay,\n        error: {\n          message: metrics.error?.message,\n          code: metrics.error?.code,\n          status: metrics.error?.response?.status,\n          name: metrics.error?.name\n        },\n        timestamp: new Date().toISOString()\n      }\n    };\n\n    console.warn('RETRY_ATTEMPT', JSON.stringify(logData));\n\n    // Send to Application Insights\n    if (this.appInsights) {\n      this.appInsights.trackTrace({\n        message: logData.message,\n        severityLevel: 2, // Warning\n        properties: logData.properties\n      });\n    }\n  }\n\n  /**\n   * Log retry success\n   */\n  private static logRetrySuccess(metrics: RetryMetrics): void {\n    const duration = (metrics.endTime || Date.now()) - metrics.startTime;\n    \n    const logData = {\n      level: 'info',\n      message: `Retry succeeded for ${metrics.action} after ${metrics.attempt} attempts`,\n      properties: {\n        userId: metrics.userId,\n        action: metrics.action,\n        attempt: metrics.attempt,\n        totalAttempts: metrics.totalAttempts,\n        duration,\n        timestamp: new Date().toISOString()\n      }\n    };\n\n    console.log('RETRY_SUCCESS', JSON.stringify(logData));\n\n    // Send to Application Insights\n    if (this.appInsights) {\n      this.appInsights.trackTrace({\n        message: logData.message,\n        severityLevel: 1, // Information\n        properties: logData.properties\n      });\n\n      // Track custom metric for retry success\n      this.appInsights.trackMetric({\n        name: 'RetrySuccess',\n        average: metrics.attempt,\n        sampleCount: 1,\n        properties: {\n          action: metrics.action,\n          userId: metrics.userId || 'unknown'\n        }\n      });\n    }\n  }\n\n  /**\n   * Log retry failure\n   */\n  private static logRetryFailure(metrics: RetryMetrics): void {\n    const duration = (metrics.endTime || Date.now()) - metrics.startTime;\n    \n    const logData = {\n      level: 'error',\n      message: `Retry failed for ${metrics.action} after ${metrics.attempt} attempts`,\n      properties: {\n        userId: metrics.userId,\n        action: metrics.action,\n        attempt: metrics.attempt,\n        totalAttempts: metrics.totalAttempts,\n        duration,\n        error: {\n          message: metrics.error?.message,\n          code: metrics.error?.code,\n          status: metrics.error?.response?.status,\n          name: metrics.error?.name,\n          stack: metrics.error?.stack\n        },\n        timestamp: new Date().toISOString()\n      }\n    };\n\n    console.error('RETRY_FAILURE', JSON.stringify(logData));\n\n    // Send to Application Insights\n    if (this.appInsights) {\n      this.appInsights.trackException({\n        exception: metrics.error,\n        properties: logData.properties,\n        severityLevel: 3 // Error\n      });\n\n      // Track custom metric for retry failure\n      this.appInsights.trackMetric({\n        name: 'RetryFailure',\n        average: metrics.attempt,\n        sampleCount: 1,\n        properties: {\n          action: metrics.action,\n          userId: metrics.userId || 'unknown'\n        }\n      });\n    }\n  }\n}\n\n/**\n * Convenience function for common retry scenarios\n */\nexport async function retryWithExponentialBackoff<T>(\n  fn: () => Promise<T>,\n  action: string,\n  userId?: string,\n  options?: Partial<RetryOptions>\n): Promise<T> {\n  return RetryWithBackoff.execute(fn, {\n    action,\n    userId,\n    ...options\n  });\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b1606296322c315f5445a12594820c5c5b64f8b1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_ref6fta5e = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_ref6fta5e();
cov_ref6fta5e().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_ref6fta5e().s[1]++;
exports.RetryWithBackoff = void 0;
/* istanbul ignore next */
cov_ref6fta5e().s[2]++;
exports.retryWithExponentialBackoff = retryWithExponentialBackoff;
const applicationinsights_web_1 =
/* istanbul ignore next */
(cov_ref6fta5e().s[3]++, require("@microsoft/applicationinsights-web"));
class RetryWithBackoff {
  static initialize(instrumentationKey) {
    /* istanbul ignore next */
    cov_ref6fta5e().f[0]++;
    cov_ref6fta5e().s[4]++;
    if (
    /* istanbul ignore next */
    (cov_ref6fta5e().b[1][0]++, instrumentationKey) &&
    /* istanbul ignore next */
    (cov_ref6fta5e().b[1][1]++, typeof window !== 'undefined')) {
      /* istanbul ignore next */
      cov_ref6fta5e().b[0][0]++;
      cov_ref6fta5e().s[5]++;
      this.appInsights = new applicationinsights_web_1.ApplicationInsights({
        config: {
          instrumentationKey,
          enableAutoRouteTracking: false
        }
      });
      /* istanbul ignore next */
      cov_ref6fta5e().s[6]++;
      this.appInsights.loadAppInsights();
    } else
    /* istanbul ignore next */
    {
      cov_ref6fta5e().b[0][1]++;
    }
  }
  /**
   * Execute a function with exponential backoff retry logic
   */
  static async execute(fn, options =
  /* istanbul ignore next */
  (cov_ref6fta5e().b[2][0]++, {})) {
    /* istanbul ignore next */
    cov_ref6fta5e().f[1]++;
    const {
      maxRetries =
      /* istanbul ignore next */
      (cov_ref6fta5e().b[3][0]++, 3),
      baseDelay =
      /* istanbul ignore next */
      (cov_ref6fta5e().b[4][0]++, 1000),
      maxDelay =
      /* istanbul ignore next */
      (cov_ref6fta5e().b[5][0]++, 30000),
      jitter =
      /* istanbul ignore next */
      (cov_ref6fta5e().b[6][0]++, true),
      retryCondition =
      /* istanbul ignore next */
      (cov_ref6fta5e().b[7][0]++, this.defaultRetryCondition),
      onRetry,
      userId,
      action =
      /* istanbul ignore next */
      (cov_ref6fta5e().b[8][0]++, 'unknown')
    } =
    /* istanbul ignore next */
    (cov_ref6fta5e().s[7]++, options);
    const startTime =
    /* istanbul ignore next */
    (cov_ref6fta5e().s[8]++, Date.now());
    let lastError;
    /* istanbul ignore next */
    cov_ref6fta5e().s[9]++;
    for (let attempt =
    /* istanbul ignore next */
    (cov_ref6fta5e().s[10]++, 0); attempt <= maxRetries; attempt++) {
      /* istanbul ignore next */
      cov_ref6fta5e().s[11]++;
      try {
        const result =
        /* istanbul ignore next */
        (cov_ref6fta5e().s[12]++, await fn());
        // Log success metrics
        /* istanbul ignore next */
        cov_ref6fta5e().s[13]++;
        if (attempt > 0) {
          /* istanbul ignore next */
          cov_ref6fta5e().b[9][0]++;
          cov_ref6fta5e().s[14]++;
          this.logRetrySuccess({
            attempt: attempt + 1,
            totalAttempts: attempt + 1,
            delay: 0,
            userId,
            action,
            startTime,
            endTime: Date.now()
          });
        } else
        /* istanbul ignore next */
        {
          cov_ref6fta5e().b[9][1]++;
        }
        cov_ref6fta5e().s[15]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_ref6fta5e().s[16]++;
        lastError = error;
        // Check if we should retry
        /* istanbul ignore next */
        cov_ref6fta5e().s[17]++;
        if (
        /* istanbul ignore next */
        (cov_ref6fta5e().b[11][0]++, attempt === maxRetries) ||
        /* istanbul ignore next */
        (cov_ref6fta5e().b[11][1]++, !retryCondition(error))) {
          /* istanbul ignore next */
          cov_ref6fta5e().b[10][0]++;
          cov_ref6fta5e().s[18]++;
          // Log final failure
          this.logRetryFailure({
            attempt: attempt + 1,
            totalAttempts: maxRetries + 1,
            delay: 0,
            error,
            userId,
            action,
            startTime,
            endTime: Date.now()
          });
          /* istanbul ignore next */
          cov_ref6fta5e().s[19]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_ref6fta5e().b[10][1]++;
        }
        // Calculate delay for next attempt
        const exponentialDelay =
        /* istanbul ignore next */
        (cov_ref6fta5e().s[20]++, Math.min(baseDelay * Math.pow(2, attempt), maxDelay));
        const delay =
        /* istanbul ignore next */
        (cov_ref6fta5e().s[21]++, jitter ?
        /* istanbul ignore next */
        (cov_ref6fta5e().b[12][0]++, exponentialDelay + Math.random() * exponentialDelay * 0.1 // Add 10% jitter
        ) :
        /* istanbul ignore next */
        (cov_ref6fta5e().b[12][1]++, exponentialDelay));
        // Log retry attempt
        /* istanbul ignore next */
        cov_ref6fta5e().s[22]++;
        this.logRetryAttempt({
          attempt: attempt + 1,
          totalAttempts: maxRetries + 1,
          delay,
          error,
          userId,
          action,
          startTime
        });
        // Execute retry callback if provided
        /* istanbul ignore next */
        cov_ref6fta5e().s[23]++;
        if (onRetry) {
          /* istanbul ignore next */
          cov_ref6fta5e().b[13][0]++;
          cov_ref6fta5e().s[24]++;
          onRetry(error, attempt + 1);
        } else
        /* istanbul ignore next */
        {
          cov_ref6fta5e().b[13][1]++;
        }
        // Wait before next attempt
        cov_ref6fta5e().s[25]++;
        await this.sleep(delay);
      }
    }
    /* istanbul ignore next */
    cov_ref6fta5e().s[26]++;
    throw lastError;
  }
  /**
   * Default retry condition - retry on network errors, rate limits, and server errors
   */
  static defaultRetryCondition(error) {
    /* istanbul ignore next */
    cov_ref6fta5e().f[2]++;
    var _a, _b, _c, _d;
    // Network errors
    /* istanbul ignore next */
    cov_ref6fta5e().s[27]++;
    if (
    /* istanbul ignore next */
    (cov_ref6fta5e().b[15][0]++, error.code === 'ECONNRESET') ||
    /* istanbul ignore next */
    (cov_ref6fta5e().b[15][1]++, error.code === 'ENOTFOUND') ||
    /* istanbul ignore next */
    (cov_ref6fta5e().b[15][2]++, error.code === 'ECONNREFUSED')) {
      /* istanbul ignore next */
      cov_ref6fta5e().b[14][0]++;
      cov_ref6fta5e().s[28]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_ref6fta5e().b[14][1]++;
    }
    // HTTP status codes that should be retried
    cov_ref6fta5e().s[29]++;
    if (
    /* istanbul ignore next */
    (cov_ref6fta5e().b[18][0]++, (_a = error.response) === null) ||
    /* istanbul ignore next */
    (cov_ref6fta5e().b[18][1]++, _a === void 0) ?
    /* istanbul ignore next */
    (cov_ref6fta5e().b[17][0]++, void 0) :
    /* istanbul ignore next */
    (cov_ref6fta5e().b[17][1]++, _a.status)) {
      /* istanbul ignore next */
      cov_ref6fta5e().b[16][0]++;
      const status =
      /* istanbul ignore next */
      (cov_ref6fta5e().s[30]++, error.response.status);
      /* istanbul ignore next */
      cov_ref6fta5e().s[31]++;
      return /* istanbul ignore next */(cov_ref6fta5e().b[19][0]++, status === 429) ||
      /* istanbul ignore next */
      (cov_ref6fta5e().b[19][1]++,
      // Rate limit
      status === 502) ||
      /* istanbul ignore next */
      (cov_ref6fta5e().b[19][2]++,
      // Bad Gateway
      status === 503) ||
      /* istanbul ignore next */
      (cov_ref6fta5e().b[19][3]++,
      // Service Unavailable
      status === 504); // Gateway Timeout
    } else
    /* istanbul ignore next */
    {
      cov_ref6fta5e().b[16][1]++;
    }
    // Azure OpenAI specific errors
    cov_ref6fta5e().s[32]++;
    if (
    /* istanbul ignore next */
    (cov_ref6fta5e().b[21][0]++,
    /* istanbul ignore next */
    (cov_ref6fta5e().b[23][0]++, (_b = error.message) === null) ||
    /* istanbul ignore next */
    (cov_ref6fta5e().b[23][1]++, _b === void 0) ?
    /* istanbul ignore next */
    (cov_ref6fta5e().b[22][0]++, void 0) :
    /* istanbul ignore next */
    (cov_ref6fta5e().b[22][1]++, _b.includes('rate limit'))) ||
    /* istanbul ignore next */
    (cov_ref6fta5e().b[21][1]++,
    /* istanbul ignore next */
    (cov_ref6fta5e().b[25][0]++, (_c = error.message) === null) ||
    /* istanbul ignore next */
    (cov_ref6fta5e().b[25][1]++, _c === void 0) ?
    /* istanbul ignore next */
    (cov_ref6fta5e().b[24][0]++, void 0) :
    /* istanbul ignore next */
    (cov_ref6fta5e().b[24][1]++, _c.includes('throttled'))) ||
    /* istanbul ignore next */
    (cov_ref6fta5e().b[21][2]++,
    /* istanbul ignore next */
    (cov_ref6fta5e().b[27][0]++, (_d = error.message) === null) ||
    /* istanbul ignore next */
    (cov_ref6fta5e().b[27][1]++, _d === void 0) ?
    /* istanbul ignore next */
    (cov_ref6fta5e().b[26][0]++, void 0) :
    /* istanbul ignore next */
    (cov_ref6fta5e().b[26][1]++, _d.includes('quota exceeded')))) {
      /* istanbul ignore next */
      cov_ref6fta5e().b[20][0]++;
      cov_ref6fta5e().s[33]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_ref6fta5e().b[20][1]++;
    }
    cov_ref6fta5e().s[34]++;
    return false;
  }
  /**
   * Sleep for specified milliseconds
   */
  static sleep(ms) {
    /* istanbul ignore next */
    cov_ref6fta5e().f[3]++;
    cov_ref6fta5e().s[35]++;
    return new Promise(resolve => {
      /* istanbul ignore next */
      cov_ref6fta5e().f[4]++;
      cov_ref6fta5e().s[36]++;
      return setTimeout(resolve, ms);
    });
  }
  /**
   * Log retry attempt
   */
  static logRetryAttempt(metrics) {
    /* istanbul ignore next */
    cov_ref6fta5e().f[5]++;
    var _a, _b, _c, _d, _e;
    const logData =
    /* istanbul ignore next */
    (cov_ref6fta5e().s[37]++, {
      level: 'warn',
      message: `Retry attempt ${metrics.attempt}/${metrics.totalAttempts} for ${metrics.action}`,
      properties: {
        userId: metrics.userId,
        action: metrics.action,
        attempt: metrics.attempt,
        totalAttempts: metrics.totalAttempts,
        delay: metrics.delay,
        error: {
          message:
          /* istanbul ignore next */
          (cov_ref6fta5e().b[29][0]++, (_a = metrics.error) === null) ||
          /* istanbul ignore next */
          (cov_ref6fta5e().b[29][1]++, _a === void 0) ?
          /* istanbul ignore next */
          (cov_ref6fta5e().b[28][0]++, void 0) :
          /* istanbul ignore next */
          (cov_ref6fta5e().b[28][1]++, _a.message),
          code:
          /* istanbul ignore next */
          (cov_ref6fta5e().b[31][0]++, (_b = metrics.error) === null) ||
          /* istanbul ignore next */
          (cov_ref6fta5e().b[31][1]++, _b === void 0) ?
          /* istanbul ignore next */
          (cov_ref6fta5e().b[30][0]++, void 0) :
          /* istanbul ignore next */
          (cov_ref6fta5e().b[30][1]++, _b.code),
          status:
          /* istanbul ignore next */
          (cov_ref6fta5e().b[33][0]++, (_d =
          /* istanbul ignore next */
          (cov_ref6fta5e().b[35][0]++, (_c = metrics.error) === null) ||
          /* istanbul ignore next */
          (cov_ref6fta5e().b[35][1]++, _c === void 0) ?
          /* istanbul ignore next */
          (cov_ref6fta5e().b[34][0]++, void 0) :
          /* istanbul ignore next */
          (cov_ref6fta5e().b[34][1]++, _c.response)) === null) ||
          /* istanbul ignore next */
          (cov_ref6fta5e().b[33][1]++, _d === void 0) ?
          /* istanbul ignore next */
          (cov_ref6fta5e().b[32][0]++, void 0) :
          /* istanbul ignore next */
          (cov_ref6fta5e().b[32][1]++, _d.status),
          name:
          /* istanbul ignore next */
          (cov_ref6fta5e().b[37][0]++, (_e = metrics.error) === null) ||
          /* istanbul ignore next */
          (cov_ref6fta5e().b[37][1]++, _e === void 0) ?
          /* istanbul ignore next */
          (cov_ref6fta5e().b[36][0]++, void 0) :
          /* istanbul ignore next */
          (cov_ref6fta5e().b[36][1]++, _e.name)
        },
        timestamp: new Date().toISOString()
      }
    });
    /* istanbul ignore next */
    cov_ref6fta5e().s[38]++;
    console.warn('RETRY_ATTEMPT', JSON.stringify(logData));
    // Send to Application Insights
    /* istanbul ignore next */
    cov_ref6fta5e().s[39]++;
    if (this.appInsights) {
      /* istanbul ignore next */
      cov_ref6fta5e().b[38][0]++;
      cov_ref6fta5e().s[40]++;
      this.appInsights.trackTrace({
        message: logData.message,
        severityLevel: 2,
        // Warning
        properties: logData.properties
      });
    } else
    /* istanbul ignore next */
    {
      cov_ref6fta5e().b[38][1]++;
    }
  }
  /**
   * Log retry success
   */
  static logRetrySuccess(metrics) {
    /* istanbul ignore next */
    cov_ref6fta5e().f[6]++;
    const duration =
    /* istanbul ignore next */
    (cov_ref6fta5e().s[41]++, (
    /* istanbul ignore next */
    (cov_ref6fta5e().b[39][0]++, metrics.endTime) ||
    /* istanbul ignore next */
    (cov_ref6fta5e().b[39][1]++, Date.now())) - metrics.startTime);
    const logData =
    /* istanbul ignore next */
    (cov_ref6fta5e().s[42]++, {
      level: 'info',
      message: `Retry succeeded for ${metrics.action} after ${metrics.attempt} attempts`,
      properties: {
        userId: metrics.userId,
        action: metrics.action,
        attempt: metrics.attempt,
        totalAttempts: metrics.totalAttempts,
        duration,
        timestamp: new Date().toISOString()
      }
    });
    /* istanbul ignore next */
    cov_ref6fta5e().s[43]++;
    console.log('RETRY_SUCCESS', JSON.stringify(logData));
    // Send to Application Insights
    /* istanbul ignore next */
    cov_ref6fta5e().s[44]++;
    if (this.appInsights) {
      /* istanbul ignore next */
      cov_ref6fta5e().b[40][0]++;
      cov_ref6fta5e().s[45]++;
      this.appInsights.trackTrace({
        message: logData.message,
        severityLevel: 1,
        // Information
        properties: logData.properties
      });
      // Track custom metric for retry success
      /* istanbul ignore next */
      cov_ref6fta5e().s[46]++;
      this.appInsights.trackMetric({
        name: 'RetrySuccess',
        average: metrics.attempt,
        sampleCount: 1,
        properties: {
          action: metrics.action,
          userId:
          /* istanbul ignore next */
          (cov_ref6fta5e().b[41][0]++, metrics.userId) ||
          /* istanbul ignore next */
          (cov_ref6fta5e().b[41][1]++, 'unknown')
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_ref6fta5e().b[40][1]++;
    }
  }
  /**
   * Log retry failure
   */
  static logRetryFailure(metrics) {
    /* istanbul ignore next */
    cov_ref6fta5e().f[7]++;
    var _a, _b, _c, _d, _e, _f;
    const duration =
    /* istanbul ignore next */
    (cov_ref6fta5e().s[47]++, (
    /* istanbul ignore next */
    (cov_ref6fta5e().b[42][0]++, metrics.endTime) ||
    /* istanbul ignore next */
    (cov_ref6fta5e().b[42][1]++, Date.now())) - metrics.startTime);
    const logData =
    /* istanbul ignore next */
    (cov_ref6fta5e().s[48]++, {
      level: 'error',
      message: `Retry failed for ${metrics.action} after ${metrics.attempt} attempts`,
      properties: {
        userId: metrics.userId,
        action: metrics.action,
        attempt: metrics.attempt,
        totalAttempts: metrics.totalAttempts,
        duration,
        error: {
          message:
          /* istanbul ignore next */
          (cov_ref6fta5e().b[44][0]++, (_a = metrics.error) === null) ||
          /* istanbul ignore next */
          (cov_ref6fta5e().b[44][1]++, _a === void 0) ?
          /* istanbul ignore next */
          (cov_ref6fta5e().b[43][0]++, void 0) :
          /* istanbul ignore next */
          (cov_ref6fta5e().b[43][1]++, _a.message),
          code:
          /* istanbul ignore next */
          (cov_ref6fta5e().b[46][0]++, (_b = metrics.error) === null) ||
          /* istanbul ignore next */
          (cov_ref6fta5e().b[46][1]++, _b === void 0) ?
          /* istanbul ignore next */
          (cov_ref6fta5e().b[45][0]++, void 0) :
          /* istanbul ignore next */
          (cov_ref6fta5e().b[45][1]++, _b.code),
          status:
          /* istanbul ignore next */
          (cov_ref6fta5e().b[48][0]++, (_d =
          /* istanbul ignore next */
          (cov_ref6fta5e().b[50][0]++, (_c = metrics.error) === null) ||
          /* istanbul ignore next */
          (cov_ref6fta5e().b[50][1]++, _c === void 0) ?
          /* istanbul ignore next */
          (cov_ref6fta5e().b[49][0]++, void 0) :
          /* istanbul ignore next */
          (cov_ref6fta5e().b[49][1]++, _c.response)) === null) ||
          /* istanbul ignore next */
          (cov_ref6fta5e().b[48][1]++, _d === void 0) ?
          /* istanbul ignore next */
          (cov_ref6fta5e().b[47][0]++, void 0) :
          /* istanbul ignore next */
          (cov_ref6fta5e().b[47][1]++, _d.status),
          name:
          /* istanbul ignore next */
          (cov_ref6fta5e().b[52][0]++, (_e = metrics.error) === null) ||
          /* istanbul ignore next */
          (cov_ref6fta5e().b[52][1]++, _e === void 0) ?
          /* istanbul ignore next */
          (cov_ref6fta5e().b[51][0]++, void 0) :
          /* istanbul ignore next */
          (cov_ref6fta5e().b[51][1]++, _e.name),
          stack:
          /* istanbul ignore next */
          (cov_ref6fta5e().b[54][0]++, (_f = metrics.error) === null) ||
          /* istanbul ignore next */
          (cov_ref6fta5e().b[54][1]++, _f === void 0) ?
          /* istanbul ignore next */
          (cov_ref6fta5e().b[53][0]++, void 0) :
          /* istanbul ignore next */
          (cov_ref6fta5e().b[53][1]++, _f.stack)
        },
        timestamp: new Date().toISOString()
      }
    });
    /* istanbul ignore next */
    cov_ref6fta5e().s[49]++;
    console.error('RETRY_FAILURE', JSON.stringify(logData));
    // Send to Application Insights
    /* istanbul ignore next */
    cov_ref6fta5e().s[50]++;
    if (this.appInsights) {
      /* istanbul ignore next */
      cov_ref6fta5e().b[55][0]++;
      cov_ref6fta5e().s[51]++;
      this.appInsights.trackException({
        exception: metrics.error,
        properties: logData.properties,
        severityLevel: 3 // Error
      });
      // Track custom metric for retry failure
      /* istanbul ignore next */
      cov_ref6fta5e().s[52]++;
      this.appInsights.trackMetric({
        name: 'RetryFailure',
        average: metrics.attempt,
        sampleCount: 1,
        properties: {
          action: metrics.action,
          userId:
          /* istanbul ignore next */
          (cov_ref6fta5e().b[56][0]++, metrics.userId) ||
          /* istanbul ignore next */
          (cov_ref6fta5e().b[56][1]++, 'unknown')
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_ref6fta5e().b[55][1]++;
    }
  }
}
/* istanbul ignore next */
cov_ref6fta5e().s[53]++;
exports.RetryWithBackoff = RetryWithBackoff;
/**
 * Convenience function for common retry scenarios
 */
async function retryWithExponentialBackoff(fn, action, userId, options) {
  /* istanbul ignore next */
  cov_ref6fta5e().f[8]++;
  cov_ref6fta5e().s[54]++;
  return RetryWithBackoff.execute(fn, Object.assign({
    action,
    userId
  }, options));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,