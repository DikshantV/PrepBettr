4bebaae2b99349d26c5f450730094ef7
"use strict";

/**
 * Azure AI Foundry TypeScript Type Definitions
 *
 * Comprehensive type definitions for Azure AI Foundry services including
 * models, agents, projects, and inference capabilities.
 */
/* istanbul ignore next */
function cov_r1abvudep() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/types/foundry-types.ts";
  var hash = "7608a3ab8cf669ed9bad9d50d4f544f438a4efd0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/types/foundry-types.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 62
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0
    },
    f: {},
    b: {},
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/types/foundry-types.ts",
      mappings: ";AAAA;;;;;GAKG",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/types/foundry-types.ts"],
      sourcesContent: ["/**\n * Azure AI Foundry TypeScript Type Definitions\n * \n * Comprehensive type definitions for Azure AI Foundry services including\n * models, agents, projects, and inference capabilities.\n */\n\n// ====================\n// Core Types\n// ====================\n\n/**\n * Base Foundry resource identifier\n */\nexport interface FoundryResourceId {\n  subscriptionId: string;\n  resourceGroupName: string;\n  hubName: string;\n  projectName?: string;\n}\n\n/**\n * Foundry project metadata\n */\nexport interface FoundryProject {\n  id: string;\n  name: string;\n  description?: string;\n  resourceGroup: string;\n  location: string;\n  tags?: Record<string, string>;\n  createdAt: string;\n  modifiedAt: string;\n  status: 'Active' | 'Creating' | 'Deleting' | 'Failed' | 'Updating';\n}\n\n/**\n * Foundry model deployment information\n */\nexport interface ModelDeployment {\n  id: string;\n  name: string;\n  modelName: string;\n  modelVersion: string;\n  deploymentStatus: 'Creating' | 'Succeeded' | 'Failed' | 'Deleting';\n  endpoint?: string;\n  apiKey?: string;\n  properties: {\n    scaleSettings?: {\n      scaleType: 'Standard' | 'Manual';\n      capacity?: number;\n      maxCapacity?: number;\n    };\n    versionUpgradeOption?: 'OnceNewDefaultVersionAvailable' | 'OnceCurrentVersionExpired' | 'NoAutoUpgrade';\n  };\n}\n\n// ====================\n// Model Inference Types\n// ====================\n\n/**\n * Text completion request parameters\n */\nexport interface CompletionRequest {\n  model: string;\n  prompt: string;\n  max_tokens?: number;\n  temperature?: number;\n  top_p?: number;\n  frequency_penalty?: number;\n  presence_penalty?: number;\n  stop?: string | string[];\n  stream?: boolean;\n  logit_bias?: Record<string, number>;\n  user?: string;\n}\n\n/**\n * Text completion response\n */\nexport interface CompletionResponse {\n  id: string;\n  object: 'text_completion';\n  created: number;\n  model: string;\n  choices: CompletionChoice[];\n  usage: TokenUsage;\n}\n\n/**\n * Individual completion choice\n */\nexport interface CompletionChoice {\n  text: string;\n  index: number;\n  logprobs?: {\n    tokens: string[];\n    token_logprobs: (number | null)[];\n    top_logprobs: (Record<string, number> | null)[];\n    text_offset: number[];\n  };\n  finish_reason: 'stop' | 'length' | 'content_filter' | null;\n}\n\n/**\n * Chat completion request (OpenAI format)\n */\nexport interface ChatCompletionRequest {\n  model: string;\n  messages: ChatMessage[];\n  temperature?: number;\n  top_p?: number;\n  max_tokens?: number;\n  stream?: boolean;\n  stop?: string | string[];\n  presence_penalty?: number;\n  frequency_penalty?: number;\n  logit_bias?: Record<string, number>;\n  user?: string;\n  functions?: ChatFunction[];\n  function_call?: 'none' | 'auto' | { name: string };\n}\n\n/**\n * Chat message structure\n */\nexport interface ChatMessage {\n  role: 'system' | 'user' | 'assistant' | 'function';\n  content: string;\n  name?: string;\n  function_call?: {\n    name: string;\n    arguments: string;\n  };\n}\n\n/**\n * Chat function definition\n */\nexport interface ChatFunction {\n  name: string;\n  description?: string;\n  parameters: {\n    type: 'object';\n    properties: Record<string, any>;\n    required?: string[];\n  };\n}\n\n/**\n * Chat completion response\n */\nexport interface ChatCompletionResponse {\n  id: string;\n  object: 'chat.completion';\n  created: number;\n  model: string;\n  choices: ChatCompletionChoice[];\n  usage: TokenUsage;\n}\n\n/**\n * Chat completion choice\n */\nexport interface ChatCompletionChoice {\n  index: number;\n  message: ChatMessage;\n  finish_reason: 'stop' | 'length' | 'function_call' | 'content_filter' | null;\n}\n\n/**\n * Token usage information\n */\nexport interface TokenUsage {\n  prompt_tokens: number;\n  completion_tokens: number;\n  total_tokens: number;\n}\n\n// ====================\n// Agent Framework Types\n// ====================\n\n/**\n * Foundry agent definition\n */\nexport interface FoundryAgent {\n  id: string;\n  name: string;\n  description?: string;\n  version: string;\n  model: string;\n  systemPrompt?: string;\n  tools?: AgentTool[];\n  capabilities: AgentCapability[];\n  configuration: AgentConfiguration;\n  metadata?: Record<string, any>;\n  createdAt: string;\n  modifiedAt: string;\n  status: 'Active' | 'Draft' | 'Archived';\n}\n\n/**\n * Agent capabilities\n */\nexport type AgentCapability = \n  | 'text-generation'\n  | 'code-generation' \n  | 'reasoning'\n  | 'function-calling'\n  | 'retrieval'\n  | 'multimodal'\n  | 'streaming';\n\n/**\n * Agent tool definition\n */\nexport interface AgentTool {\n  type: 'function' | 'retrieval' | 'code_interpreter';\n  function?: {\n    name: string;\n    description?: string;\n    parameters: Record<string, any>;\n  };\n}\n\n/**\n * Agent configuration settings\n */\nexport interface AgentConfiguration {\n  maxTokens: number;\n  temperature: number;\n  topP: number;\n  frequencyPenalty: number;\n  presencePenalty: number;\n  timeout: number; // milliseconds\n  retryConfig: {\n    maxRetries: number;\n    baseDelay: number;\n  };\n}\n\n/**\n * Agent conversation session\n */\nexport interface AgentSession {\n  id: string;\n  agentId: string;\n  userId?: string;\n  messages: AgentMessage[];\n  context?: Record<string, any>;\n  createdAt: string;\n  lastActivityAt: string;\n  status: 'Active' | 'Completed' | 'Failed' | 'Timeout';\n}\n\n/**\n * Agent message in a conversation\n */\nexport interface AgentMessage {\n  id: string;\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  timestamp: string;\n  metadata?: {\n    tokens?: number;\n    latency?: number;\n    model?: string;\n    toolCalls?: ToolCall[];\n  };\n}\n\n/**\n * Tool call within agent message\n */\nexport interface ToolCall {\n  id: string;\n  type: 'function';\n  function: {\n    name: string;\n    arguments: string;\n    result?: string;\n  };\n}\n\n// ====================\n// Evaluation Types\n// ====================\n\n/**\n * Model evaluation metrics\n */\nexport interface EvaluationMetrics {\n  accuracy?: number;\n  precision?: number;\n  recall?: number;\n  f1Score?: number;\n  bleuScore?: number;\n  rougeScore?: {\n    rouge1: number;\n    rouge2: number;\n    rougeL: number;\n  };\n  perplexity?: number;\n  latency?: {\n    mean: number;\n    p95: number;\n    p99: number;\n  };\n  throughput?: number; // tokens per second\n}\n\n/**\n * Evaluation run configuration\n */\nexport interface EvaluationRun {\n  id: string;\n  name: string;\n  modelName: string;\n  datasetId: string;\n  metrics: EvaluationMetrics;\n  parameters: {\n    temperature: number;\n    maxTokens: number;\n    topP: number;\n  };\n  status: 'Running' | 'Completed' | 'Failed' | 'Cancelled';\n  createdAt: string;\n  completedAt?: string;\n  results?: EvaluationResult[];\n}\n\n/**\n * Individual evaluation result\n */\nexport interface EvaluationResult {\n  input: string;\n  expectedOutput: string;\n  actualOutput: string;\n  score: number;\n  metadata?: Record<string, any>;\n}\n\n// ====================\n// Error Types\n// ====================\n\n/**\n * Foundry API error response\n */\nexport interface FoundryError {\n  error: {\n    code: string;\n    message: string;\n    details?: Record<string, any>;\n    innererror?: {\n      code: string;\n      innererror?: FoundryError['error']['innererror'];\n    };\n  };\n}\n\n/**\n * Rate limiting information\n */\nexport interface RateLimitInfo {\n  remainingRequests: number;\n  remainingTokens: number;\n  resetTimeRequests?: string;\n  resetTimeTokens?: string;\n}\n\n// ====================\n// Monitoring Types\n// ====================\n\n/**\n * Model usage statistics\n */\nexport interface UsageStatistics {\n  totalRequests: number;\n  totalTokens: number;\n  averageLatency: number;\n  errorRate: number;\n  timeRange: {\n    start: string;\n    end: string;\n  };\n  breakdown: {\n    [model: string]: {\n      requests: number;\n      tokens: number;\n      errors: number;\n    };\n  };\n}\n\n/**\n * Health check status\n */\nexport interface HealthStatus {\n  status: 'healthy' | 'degraded' | 'unhealthy';\n  checks: {\n    [service: string]: {\n      status: 'pass' | 'fail' | 'warn';\n      responseTime?: number;\n      error?: string;\n    };\n  };\n  timestamp: string;\n}\n\n// ====================\n// Streaming Types\n// ====================\n\n/**\n * Server-sent event for streaming responses\n */\nexport interface StreamEvent {\n  id?: string;\n  event?: string;\n  data: string;\n  retry?: number;\n}\n\n/**\n * Streaming completion chunk\n */\nexport interface StreamingCompletionChunk {\n  id: string;\n  object: 'text_completion.chunk' | 'chat.completion.chunk';\n  created: number;\n  model: string;\n  choices: Array<{\n    index: number;\n    delta: {\n      content?: string;\n      role?: string;\n      function_call?: {\n        name?: string;\n        arguments?: string;\n      };\n    };\n    finish_reason?: 'stop' | 'length' | 'function_call' | 'content_filter' | null;\n  }>;\n}\n\n// ====================\n// Utility Types\n// ====================\n\n/**\n * Paginated response wrapper\n */\nexport interface PaginatedResponse<T> {\n  data: T[];\n  nextLink?: string;\n  count?: number;\n}\n\n/**\n * Foundry operation status\n */\nexport interface OperationStatus {\n  id: string;\n  status: 'NotStarted' | 'Running' | 'Succeeded' | 'Failed' | 'Cancelled';\n  createdDateTime: string;\n  lastActionDateTime?: string;\n  resourceLocation?: string;\n  percentComplete?: number;\n  error?: FoundryError['error'];\n}\n\n/**\n * API version information\n */\nexport interface ApiVersionInfo {\n  version: string;\n  preview?: boolean;\n  deprecated?: boolean;\n  supportedUntil?: string;\n}\n\n// ====================\n// Configuration Types\n// ====================\n\n/**\n * Foundry SDK configuration options\n */\nexport interface FoundryClientOptions {\n  endpoint: string;\n  apiKey: string;\n  projectId?: string;\n  apiVersion?: string;\n  timeout?: number;\n  retries?: number;\n  userAgent?: string;\n  defaultHeaders?: Record<string, string>;\n}\n\n/**\n * Request options for API calls\n */\nexport interface RequestOptions {\n  timeout?: number;\n  retries?: number;\n  headers?: Record<string, string>;\n  signal?: AbortSignal;\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7608a3ab8cf669ed9bad9d50d4f544f438a4efd0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_r1abvudep = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_r1abvudep();
cov_r1abvudep().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,