{"version":3,"names":["cov_2ak5to38u2","actualCoverage","s","exports","getCurrentTheirStackCredits","getTheirStackCreditsSummary","getTheirStackCreditsHealth","admin_1","require","TheirStackCreditsService","constructor","f","firestore","initializeFirestore","getInstance","instance","b","getAdminFirestore","error","console","getCurrentCredits","currentMonth","Date","toISOString","slice","getCreditsForMonth","month","docRef","collection","doc","get","creditsUsed","exists","_a","data","creditsRemaining","Math","max","FREE_TIER_LIMIT","warning","isOverLimit","EMERGENCY_LIMIT","WARNING_THRESHOLD","percentage","round","lastUpdated","_c","_b","toDate","getCreditsSummary","previousMonth","getPreviousMonth","currentMonthData","previousMonthData","yearToDateCredits","averageMonthlyCredits","Promise","all","getYearToDateCredits","getAverageMonthlyCredits","yearToDate","averageMonthly","currentYear","getFullYear","yearStart","yearEnd","snapshot","where","totalCredits","docs","forEach","months","now","i","date","getMonth","push","monthsWithData","credits","getCreditAlertLevel","getCreditsHealthStatus","currentCredits","status","message","getHistoricalCreditsData","dataMap","Map","set","map","year","monthNum","split","Number","getCreditsConfiguration","freeTierLimit","warningThreshold","emergencyLimit","warningPercentage","theirStackCreditsService","default"],"sources":["/Users/dikshantvashistha/PrepBettr/lib/services/theirstack-credits.ts"],"sourcesContent":["import { getAdminFirestore } from '@/lib/firebase/admin';\n\nexport interface TheirStackCreditsData {\n  month: string; // YYYY-MM format\n  creditsUsed: number;\n  creditsRemaining: number;\n  lastUpdated: Date;\n  warning?: string;\n  isOverLimit: boolean;\n}\n\nexport interface TheirStackCreditsSummary {\n  currentMonth: TheirStackCreditsData;\n  previousMonth: TheirStackCreditsData | null;\n  yearToDate: number;\n  averageMonthly: number;\n}\n\nexport class TheirStackCreditsService {\n  private static instance: TheirStackCreditsService;\n  private firestore: any = null;\n\n  // Credit limits\n  private static readonly FREE_TIER_LIMIT = 200;\n  private static readonly WARNING_THRESHOLD = 0.8; // 80%\n  private static readonly EMERGENCY_LIMIT = 500;\n\n  private constructor() {\n    this.initializeFirestore();\n  }\n\n  public static getInstance(): TheirStackCreditsService {\n    if (!TheirStackCreditsService.instance) {\n      TheirStackCreditsService.instance = new TheirStackCreditsService();\n    }\n    return TheirStackCreditsService.instance;\n  }\n\n  private async initializeFirestore(): Promise<void> {\n    try {\n      this.firestore = await getAdminFirestore();\n    } catch (error) {\n      console.error('❌ Failed to initialize Firestore for TheirStack credits service:', error);\n    }\n  }\n\n  /**\n   * Get current month's credit usage\n   */\n  async getCurrentCredits(): Promise<TheirStackCreditsData> {\n    const currentMonth = new Date().toISOString().slice(0, 7);\n    return this.getCreditsForMonth(currentMonth);\n  }\n\n  /**\n   * Get credits usage for a specific month\n   */\n  async getCreditsForMonth(month: string): Promise<TheirStackCreditsData> {\n    if (!this.firestore) {\n      await this.initializeFirestore();\n    }\n\n    try {\n      const docRef = this.firestore\n        .collection('usage')\n        .doc('theirstackCredits')\n        .collection('monthly')\n        .doc(month);\n      \n      const doc = await docRef.get();\n      const creditsUsed = doc.exists ? (doc.data()?.creditsUsed || 0) : 0;\n      const creditsRemaining = Math.max(0, TheirStackCreditsService.FREE_TIER_LIMIT - creditsUsed);\n      \n      // Generate warning message if needed\n      let warning: string | undefined;\n      const isOverLimit = creditsUsed >= TheirStackCreditsService.EMERGENCY_LIMIT;\n      \n      if (isOverLimit) {\n        warning = `⚠️ Emergency limit exceeded (${creditsUsed}/${TheirStackCreditsService.EMERGENCY_LIMIT})`;\n      } else if (creditsUsed >= TheirStackCreditsService.FREE_TIER_LIMIT * TheirStackCreditsService.WARNING_THRESHOLD) {\n        const percentage = Math.round((creditsUsed / TheirStackCreditsService.FREE_TIER_LIMIT) * 100);\n        warning = `⚠️ ${percentage}% of free tier used (${creditsUsed}/${TheirStackCreditsService.FREE_TIER_LIMIT})`;\n      }\n\n      return {\n        month,\n        creditsUsed,\n        creditsRemaining,\n        lastUpdated: doc.exists ? (doc.data()?.lastUpdated?.toDate() || new Date()) : new Date(),\n        warning,\n        isOverLimit\n      };\n\n    } catch (error) {\n      console.error('❌ Failed to get TheirStack credits for month:', month, error);\n      \n      // Return default data on error\n      return {\n        month,\n        creditsUsed: 0,\n        creditsRemaining: TheirStackCreditsService.FREE_TIER_LIMIT,\n        lastUpdated: new Date(),\n        isOverLimit: false\n      };\n    }\n  }\n\n  /**\n   * Get comprehensive credits summary including historical data\n   */\n  async getCreditsSummary(): Promise<TheirStackCreditsSummary> {\n    const currentMonth = new Date().toISOString().slice(0, 7);\n    const previousMonth = this.getPreviousMonth(currentMonth);\n\n    const [currentMonthData, previousMonthData, yearToDateCredits, averageMonthlyCredits] = await Promise.all([\n      this.getCreditsForMonth(currentMonth),\n      this.getCreditsForMonth(previousMonth),\n      this.getYearToDateCredits(),\n      this.getAverageMonthlyCredits()\n    ]);\n\n    return {\n      currentMonth: currentMonthData,\n      previousMonth: previousMonthData.creditsUsed > 0 ? previousMonthData : null,\n      yearToDate: yearToDateCredits,\n      averageMonthly: averageMonthlyCredits\n    };\n  }\n\n  /**\n   * Get total credits used in current year\n   */\n  async getYearToDateCredits(): Promise<number> {\n    if (!this.firestore) {\n      await this.initializeFirestore();\n    }\n\n    try {\n      const currentYear = new Date().getFullYear();\n      const yearStart = `${currentYear}-01`;\n      const yearEnd = `${currentYear}-12`;\n\n      const snapshot = await this.firestore\n        .collection('usage')\n        .doc('theirstackCredits')\n        .collection('monthly')\n        .where('month', '>=', yearStart)\n        .where('month', '<=', yearEnd)\n        .get();\n\n      let totalCredits = 0;\n      snapshot.docs.forEach((doc: any) => {\n        totalCredits += doc.data()?.creditsUsed || 0;\n      });\n\n      return totalCredits;\n\n    } catch (error) {\n      console.error('❌ Failed to get year-to-date credits:', error);\n      return 0;\n    }\n  }\n\n  /**\n   * Get average monthly credits usage (last 6 months)\n   */\n  async getAverageMonthlyCredits(): Promise<number> {\n    if (!this.firestore) {\n      await this.initializeFirestore();\n    }\n\n    try {\n      // Get last 6 months\n      const months: string[] = [];\n      const now = new Date();\n      \n      for (let i = 0; i < 6; i++) {\n        const date = new Date(now.getFullYear(), now.getMonth() - i, 1);\n        months.push(date.toISOString().slice(0, 7));\n      }\n\n      const snapshot = await this.firestore\n        .collection('usage')\n        .doc('theirstackCredits')\n        .collection('monthly')\n        .where('month', 'in', months)\n        .get();\n\n      let totalCredits = 0;\n      let monthsWithData = 0;\n      \n      snapshot.docs.forEach((doc: any) => {\n        const credits = doc.data()?.creditsUsed || 0;\n        if (credits > 0) {\n          totalCredits += credits;\n          monthsWithData++;\n        }\n      });\n\n      return monthsWithData > 0 ? Math.round(totalCredits / monthsWithData) : 0;\n\n    } catch (error) {\n      console.error('❌ Failed to get average monthly credits:', error);\n      return 0;\n    }\n  }\n\n  /**\n   * Check if credits are approaching limits and return alert level\n   */\n  getCreditAlertLevel(creditsUsed: number): 'none' | 'warning' | 'danger' | 'emergency' {\n    if (creditsUsed >= TheirStackCreditsService.EMERGENCY_LIMIT) {\n      return 'emergency';\n    } else if (creditsUsed >= TheirStackCreditsService.FREE_TIER_LIMIT) {\n      return 'danger';\n    } else if (creditsUsed >= TheirStackCreditsService.FREE_TIER_LIMIT * TheirStackCreditsService.WARNING_THRESHOLD) {\n      return 'warning';\n    }\n    return 'none';\n  }\n\n  /**\n   * Get credits health status for dashboard\n   */\n  async getCreditsHealthStatus(): Promise<{\n    status: 'healthy' | 'warning' | 'critical' | 'emergency';\n    message: string;\n    creditsUsed: number;\n    creditsRemaining: number;\n    percentage: number;\n  }> {\n    const currentCredits = await this.getCurrentCredits();\n    const percentage = Math.round((currentCredits.creditsUsed / TheirStackCreditsService.FREE_TIER_LIMIT) * 100);\n    \n    let status: 'healthy' | 'warning' | 'critical' | 'emergency';\n    let message: string;\n\n    if (currentCredits.isOverLimit) {\n      status = 'emergency';\n      message = `Emergency limit exceeded! ${currentCredits.creditsUsed} credits used this month.`;\n    } else if (currentCredits.creditsUsed >= TheirStackCreditsService.FREE_TIER_LIMIT) {\n      status = 'critical';\n      message = `Free tier limit exceeded! ${currentCredits.creditsUsed}/${TheirStackCreditsService.FREE_TIER_LIMIT} credits used (${percentage}%).`;\n    } else if (percentage >= 80) {\n      status = 'warning';\n      message = `Approaching free tier limit: ${currentCredits.creditsUsed}/${TheirStackCreditsService.FREE_TIER_LIMIT} credits used (${percentage}%).`;\n    } else {\n      status = 'healthy';\n      message = `Credits usage is healthy: ${currentCredits.creditsUsed}/${TheirStackCreditsService.FREE_TIER_LIMIT} credits used (${percentage}%).`;\n    }\n\n    return {\n      status,\n      message,\n      creditsUsed: currentCredits.creditsUsed,\n      creditsRemaining: currentCredits.creditsRemaining,\n      percentage\n    };\n  }\n\n  /**\n   * Get historical credits data for charts (last 12 months)\n   */\n  async getHistoricalCreditsData(): Promise<Array<{ month: string; creditsUsed: number; date: Date }>> {\n    if (!this.firestore) {\n      await this.initializeFirestore();\n    }\n\n    try {\n      // Get last 12 months\n      const months: string[] = [];\n      const now = new Date();\n      \n      for (let i = 11; i >= 0; i--) {\n        const date = new Date(now.getFullYear(), now.getMonth() - i, 1);\n        months.push(date.toISOString().slice(0, 7));\n      }\n\n      const snapshot = await this.firestore\n        .collection('usage')\n        .doc('theirstackCredits')\n        .collection('monthly')\n        .where('month', 'in', months)\n        .get();\n\n      // Create a map for quick lookup\n      const dataMap = new Map();\n      snapshot.docs.forEach((doc: any) => {\n        const data = doc.data();\n        dataMap.set(data.month, data.creditsUsed || 0);\n      });\n\n      // Build the historical data array\n      return months.map(month => ({\n        month,\n        creditsUsed: dataMap.get(month) || 0,\n        date: new Date(`${month}-01`)\n      }));\n\n    } catch (error) {\n      console.error('❌ Failed to get historical credits data:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Helper method to get previous month string\n   */\n  private getPreviousMonth(month: string): string {\n    const [year, monthNum] = month.split('-').map(Number);\n    const date = new Date(year, monthNum - 2, 1); // monthNum - 2 because Date months are 0-indexed\n    return date.toISOString().slice(0, 7);\n  }\n\n  /**\n   * Get credits configuration for display\n   */\n  static getCreditsConfiguration() {\n    return {\n      freeTierLimit: TheirStackCreditsService.FREE_TIER_LIMIT,\n      warningThreshold: Math.round(TheirStackCreditsService.FREE_TIER_LIMIT * TheirStackCreditsService.WARNING_THRESHOLD),\n      emergencyLimit: TheirStackCreditsService.EMERGENCY_LIMIT,\n      warningPercentage: TheirStackCreditsService.WARNING_THRESHOLD * 100\n    };\n  }\n}\n\n// Export convenience functions\nexport const theirStackCreditsService = TheirStackCreditsService.getInstance();\n\nexport async function getCurrentTheirStackCredits(): Promise<TheirStackCreditsData> {\n  return theirStackCreditsService.getCurrentCredits();\n}\n\nexport async function getTheirStackCreditsSummary(): Promise<TheirStackCreditsSummary> {\n  return theirStackCreditsService.getCreditsSummary();\n}\n\nexport async function getTheirStackCreditsHealth() {\n  return theirStackCreditsService.getCreditsHealthStatus();\n}\n\nexport default TheirStackCreditsService;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}