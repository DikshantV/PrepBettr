{"version":3,"names":["ai_form_recognizer_1","cov_1yq1w51grr","s","require","azure_config_1","errors_1","AzureFormRecognizerService","constructor","f","client","modelId","initialize","secrets","fetchAzureSecrets","endpoint","b","process","env","AZURE_FORM_RECOGNIZER_ENDPOINT","azureFormRecognizerEndpoint","apiKey","AZURE_FORM_RECOGNIZER_KEY","azureFormRecognizerKey","console","warn","DocumentAnalysisClient","AzureKeyCredential","log","error","logServerError","service","action","isReady","extractResumeData","fileBuffer","mimeType","Error","poller","beginAnalyzeDocument","result","pollUntilDone","fullText","content","rawExtraction","pages","tables","keyValuePairs","styles","extractedData","parseResumeContent","text","prompt","tailorResume","Promise","resolve","then","__importStar","extractionResult","success","data","parsedData","JSON","parse","personalInfo","summary","skills","experience","education","projects","certifications","languages","parseError","fallbackTextParsing","lines","split","map","line","trim","filter","emailRegex","phoneRegex","linkedinRegex","githubRegex","emails","match","phones","linkedinUrls","githubUrls","skillKeywords","detectedSkills","skill","toLowerCase","includes","email","phone","linkedin","undefined","github","exports","azureFormRecognizer"],"sources":["/Users/dikshantvashistha/PrepBettr/lib/services/azure-form-recognizer.ts"],"sourcesContent":["import { DocumentAnalysisClient, AzureKeyCredential } from '@azure/ai-form-recognizer';\nimport { fetchAzureSecrets } from '@/azure/lib/azure-config';\nimport { logServerError } from '@/lib/errors';\n\n// Types for extracted resume data\nexport interface ExtractedResumeData {\n  personalInfo: {\n    name?: string;\n    email?: string;\n    phone?: string;\n    address?: string;\n    linkedin?: string;\n    github?: string;\n    website?: string;\n  };\n  summary?: string;\n  skills: string[];\n  experience: WorkExperience[];\n  education: Education[];\n  projects?: Project[];\n  certifications?: Certification[];\n  languages?: Language[];\n  rawExtraction?: any; // Store raw extraction for GDPR export\n}\n\nexport interface WorkExperience {\n  company: string;\n  position: string;\n  startDate?: string;\n  endDate?: string;\n  isCurrent?: boolean;\n  description: string;\n  achievements?: string[];\n  technologies?: string[];\n  location?: string;\n}\n\nexport interface Education {\n  institution: string;\n  degree: string;\n  field: string;\n  startDate?: string;\n  endDate?: string;\n  gpa?: number;\n  description?: string;\n  location?: string;\n}\n\nexport interface Project {\n  name: string;\n  description: string;\n  technologies?: string[];\n  url?: string;\n  github?: string;\n  startDate?: string;\n  endDate?: string;\n}\n\nexport interface Certification {\n  name: string;\n  issuer: string;\n  date?: string;\n  expiryDate?: string;\n  credentialId?: string;\n  url?: string;\n}\n\nexport interface Language {\n  name: string;\n  proficiency: string;\n}\n\nclass AzureFormRecognizerService {\n  private client: DocumentAnalysisClient | null = null;\n  private modelId = 'prebuilt-document'; // Use prebuilt document model\n\n  /**\n   * Initialize the Azure Form Recognizer service\n   */\n  async initialize(): Promise<boolean> {\n    try {\n      const secrets = await fetchAzureSecrets();\n      \n      const endpoint = process.env.AZURE_FORM_RECOGNIZER_ENDPOINT || secrets.azureFormRecognizerEndpoint;\n      const apiKey = process.env.AZURE_FORM_RECOGNIZER_KEY || secrets.azureFormRecognizerKey;\n\n      if (!endpoint || !apiKey) {\n        console.warn('‚ö†Ô∏è Azure Form Recognizer credentials not found, will use OpenAI fallback');\n        return false;\n      }\n\n      this.client = new DocumentAnalysisClient(\n        endpoint,\n        new AzureKeyCredential(apiKey)\n      );\n\n      console.log('‚úÖ Azure Form Recognizer service initialized');\n      return true;\n    } catch (error) {\n      console.error('‚ùå Failed to initialize Azure Form Recognizer:', error);\n      logServerError(error as Error, { service: 'azure-form-recognizer', action: 'initialize' });\n      return false;\n    }\n  }\n\n  /**\n   * Check if service is ready\n   */\n  isReady(): boolean {\n    return this.client !== null;\n  }\n\n  /**\n   * Extract resume data from buffer using Azure Form Recognizer\n   */\n  async extractResumeData(fileBuffer: Buffer, mimeType: string): Promise<ExtractedResumeData> {\n    if (!this.isReady()) {\n      throw new Error('Azure Form Recognizer service not initialized');\n    }\n\n    try {\n      console.log('üîç Extracting resume data with Azure Form Recognizer...');\n\n      // Analyze the document\n      const poller = await this.client!.beginAnalyzeDocument(this.modelId, fileBuffer);\n      const result = await poller.pollUntilDone();\n\n      // Extract text content from the document\n      const fullText = result.content || '';\n      \n      // Store raw extraction for GDPR export\n      const rawExtraction = {\n        content: result.content,\n        pages: result.pages,\n        tables: result.tables,\n        keyValuePairs: result.keyValuePairs,\n        styles: result.styles\n      };\n\n      // Parse the extracted text to structure data\n      const extractedData = await this.parseResumeContent(fullText);\n      \n      // Include raw extraction\n      extractedData.rawExtraction = rawExtraction;\n\n      console.log('‚úÖ Resume data extracted successfully with Azure Form Recognizer');\n      return extractedData;\n\n    } catch (error) {\n      console.error('Failed to extract resume data with Azure Form Recognizer:', error);\n      logServerError(error as Error, { \n        service: 'azure-form-recognizer', \n        action: 'extract'\n      }, {\n        mimeType\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Parse resume content using AI to extract structured data\n   * This method uses OpenAI as a processing layer on top of Form Recognizer\n   */\n  private async parseResumeContent(text: string): Promise<ExtractedResumeData> {\n    // We'll use tailorResume function as it's the main AI processing function available\n    \n    // Use OpenAI function calling to structure the extracted text\n    const prompt = `\n    Extract the following information from this resume text and return as JSON:\n    \n    {\n      \"personalInfo\": {\n        \"name\": \"Full name\",\n        \"email\": \"Email address\",\n        \"phone\": \"Phone number\",\n        \"address\": \"Address\",\n        \"linkedin\": \"LinkedIn URL\",\n        \"github\": \"GitHub URL\",\n        \"website\": \"Personal website URL\"\n      },\n      \"summary\": \"Professional summary or objective\",\n      \"skills\": [\"skill1\", \"skill2\", ...],\n      \"experience\": [\n        {\n          \"company\": \"Company name\",\n          \"position\": \"Job title\",\n          \"startDate\": \"Start date\",\n          \"endDate\": \"End date or 'Present'\",\n          \"isCurrent\": true/false,\n          \"description\": \"Job description\",\n          \"achievements\": [\"achievement1\", ...],\n          \"technologies\": [\"tech1\", \"tech2\", ...],\n          \"location\": \"Location\"\n        }\n      ],\n      \"education\": [\n        {\n          \"institution\": \"School name\",\n          \"degree\": \"Degree type\",\n          \"field\": \"Field of study\",\n          \"startDate\": \"Start date\",\n          \"endDate\": \"End date\",\n          \"gpa\": 3.5,\n          \"description\": \"Additional details\",\n          \"location\": \"Location\"\n        }\n      ],\n      \"projects\": [\n        {\n          \"name\": \"Project name\",\n          \"description\": \"Project description\",\n          \"technologies\": [\"tech1\", \"tech2\", ...],\n          \"url\": \"Project URL\",\n          \"github\": \"GitHub URL\",\n          \"startDate\": \"Start date\",\n          \"endDate\": \"End date\"\n        }\n      ],\n      \"certifications\": [\n        {\n          \"name\": \"Certification name\",\n          \"issuer\": \"Issuing organization\",\n          \"date\": \"Issue date\",\n          \"expiryDate\": \"Expiry date\",\n          \"credentialId\": \"Credential ID\",\n          \"url\": \"Verification URL\"\n        }\n      ],\n      \"languages\": [\n        {\n          \"name\": \"Language name\",\n          \"proficiency\": \"Proficiency level\"\n        }\n      ]\n    }\n    \n    Resume text:\n    ${text}\n    `;\n\n    try {\n      // Use the AI service to process the text\n      const { tailorResume } = await import('@/lib/ai');\n      \n      // Create a structured extraction prompt\n      const extractionResult = await tailorResume(text, prompt);\n      \n      if (extractionResult.success && extractionResult.data) {\n        try {\n          // Parse the JSON response\n          const parsedData = typeof extractionResult.data === 'string' \n            ? JSON.parse(extractionResult.data) \n            : extractionResult.data;\n            \n          return {\n            personalInfo: parsedData.personalInfo || {},\n            summary: parsedData.summary,\n            skills: parsedData.skills || [],\n            experience: parsedData.experience || [],\n            education: parsedData.education || [],\n            projects: parsedData.projects || [],\n            certifications: parsedData.certifications || [],\n            languages: parsedData.languages || []\n          };\n        } catch (parseError) {\n          console.warn('Failed to parse AI extraction result, using fallback parsing');\n          return this.fallbackTextParsing(text);\n        }\n      }\n      \n      // Fallback to simple text parsing if AI fails\n      return this.fallbackTextParsing(text);\n      \n    } catch (error) {\n      console.warn('AI parsing failed, using fallback text parsing:', error);\n      return this.fallbackTextParsing(text);\n    }\n  }\n\n  /**\n   * Fallback text parsing method\n   */\n  private fallbackTextParsing(text: string): ExtractedResumeData {\n    const lines = text.split('\\n').map(line => line.trim()).filter(line => line);\n    \n    // Simple regex patterns for basic extraction\n    const emailRegex = /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/g;\n    const phoneRegex = /(\\+?1?[-.\\s]?)?\\(?[0-9]{3}\\)?[-.\\s]?[0-9]{3}[-.\\s]?[0-9]{4}/g;\n    const linkedinRegex = /linkedin\\.com\\/in\\/[\\w-]+/gi;\n    const githubRegex = /github\\.com\\/[\\w-]+/gi;\n\n    const emails = text.match(emailRegex) || [];\n    const phones = text.match(phoneRegex) || [];\n    const linkedinUrls = text.match(linkedinRegex) || [];\n    const githubUrls = text.match(githubRegex) || [];\n\n    // Extract skills (simple keyword matching)\n    const skillKeywords = [\n      'javascript', 'typescript', 'python', 'java', 'react', 'node', 'express',\n      'mongodb', 'sql', 'postgresql', 'mysql', 'docker', 'kubernetes', 'aws',\n      'azure', 'gcp', 'git', 'html', 'css', 'angular', 'vue', 'spring',\n      'django', 'flask', 'ruby', 'php', 'go', 'rust', 'c++', 'c#', 'swift',\n      'kotlin', 'flutter', 'dart', 'tensorflow', 'pytorch', 'machine learning',\n      'data science', 'artificial intelligence', 'blockchain', 'devops'\n    ];\n\n    const detectedSkills = skillKeywords.filter(skill => \n      text.toLowerCase().includes(skill.toLowerCase())\n    );\n\n    return {\n      personalInfo: {\n        email: emails[0],\n        phone: phones[0],\n        linkedin: linkedinUrls[0] ? `https://${linkedinUrls[0]}` : undefined,\n        github: githubUrls[0] ? `https://${githubUrls[0]}` : undefined\n      },\n      skills: detectedSkills,\n      experience: [],\n      education: [],\n      projects: [],\n      certifications: [],\n      languages: []\n    };\n  }\n}\n\n// Export singleton instance\nexport const azureFormRecognizer = new AzureFormRecognizerService();\n"],"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","ignoreList":[]}