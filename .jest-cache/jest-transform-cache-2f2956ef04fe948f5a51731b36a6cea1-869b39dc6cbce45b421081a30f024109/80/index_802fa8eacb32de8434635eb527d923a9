4fa15e4b9466634574c6fdc33a3458bb
/* istanbul ignore next */
function cov_1pwd3cutoc() {
  var path = "/Users/dikshantvashistha/PrepBettr/azure/applicationWorker/index.js";
  var hash = "b6a7e6c1bc61d7bebf7b807417f1599d513889e9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/azure/applicationWorker/index.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 16
        },
        end: {
          line: 1,
          column: 43
        }
      },
      "1": {
        start: {
          line: 2,
          column: 21
        },
        end: {
          line: 2,
          column: 61
        }
      },
      "2": {
        start: {
          line: 3,
          column: 25
        },
        end: {
          line: 3,
          column: 67
        }
      },
      "3": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 32
        }
      },
      "4": {
        start: {
          line: 5,
          column: 30
        },
        end: {
          line: 5,
          column: 60
        }
      },
      "5": {
        start: {
          line: 6,
          column: 23
        },
        end: {
          line: 6,
          column: 38
        }
      },
      "6": {
        start: {
          line: 9,
          column: 24
        },
        end: {
          line: 9,
          column: 28
        }
      },
      "7": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 17,
          column: 5
        }
      },
      "8": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 33
        }
      },
      "9": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 41,
          column: 5
        }
      },
      "10": {
        start: {
          line: 20,
          column: 24
        },
        end: {
          line: 20,
          column: 49
        }
      },
      "11": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 25,
          column: 9
        }
      },
      "12": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 86
        }
      },
      "13": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 24,
          column: 24
        }
      },
      "14": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 34,
          column: 11
        }
      },
      "15": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 80
        }
      },
      "16": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 33
        }
      },
      "17": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 76
        }
      },
      "18": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 20
        }
      },
      "19": {
        start: {
          line: 45,
          column: 0
        },
        end: {
          line: 174,
          column: 3
        }
      },
      "20": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 76
        }
      },
      "21": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 172,
          column: 9
        }
      },
      "22": {
        start: {
          line: 52,
          column: 36
        },
        end: {
          line: 52,
          column: 101
        }
      },
      "23": {
        start: {
          line: 53,
          column: 72
        },
        end: {
          line: 53,
          column: 87
        }
      },
      "24": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 59,
          column: 14
        }
      },
      "25": {
        start: {
          line: 62,
          column: 32
        },
        end: {
          line: 62,
          column: 60
        }
      },
      "26": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 65,
          column: 13
        }
      },
      "27": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 64,
          column: 77
        }
      },
      "28": {
        start: {
          line: 68,
          column: 40
        },
        end: {
          line: 68,
          column: 85
        }
      },
      "29": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 77,
          column: 13
        }
      },
      "30": {
        start: {
          line: 70,
          column: 16
        },
        end: {
          line: 70,
          column: 82
        }
      },
      "31": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 75,
          column: 18
        }
      },
      "32": {
        start: {
          line: 76,
          column: 16
        },
        end: {
          line: 76,
          column: 23
        }
      },
      "33": {
        start: {
          line: 80,
          column: 33
        },
        end: {
          line: 80,
          column: 58
        }
      },
      "34": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 84,
          column: 13
        }
      },
      "35": {
        start: {
          line: 82,
          column: 16
        },
        end: {
          line: 82,
          column: 86
        }
      },
      "36": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 83,
          column: 59
        }
      },
      "37": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 110,
          column: 13
        }
      },
      "38": {
        start: {
          line: 88,
          column: 42
        },
        end: {
          line: 88,
          column: 80
        }
      },
      "39": {
        start: {
          line: 89,
          column: 16
        },
        end: {
          line: 97,
          column: 17
        }
      },
      "40": {
        start: {
          line: 90,
          column: 20
        },
        end: {
          line: 90,
          column: 129
        }
      },
      "41": {
        start: {
          line: 91,
          column: 20
        },
        end: {
          line: 95,
          column: 22
        }
      },
      "42": {
        start: {
          line: 96,
          column: 20
        },
        end: {
          line: 96,
          column: 27
        }
      },
      "43": {
        start: {
          line: 100,
          column: 42
        },
        end: {
          line: 100,
          column: 80
        }
      },
      "44": {
        start: {
          line: 101,
          column: 16
        },
        end: {
          line: 109,
          column: 17
        }
      },
      "45": {
        start: {
          line: 102,
          column: 20
        },
        end: {
          line: 102,
          column: 86
        }
      },
      "46": {
        start: {
          line: 103,
          column: 20
        },
        end: {
          line: 107,
          column: 22
        }
      },
      "47": {
        start: {
          line: 108,
          column: 20
        },
        end: {
          line: 108,
          column: 27
        }
      },
      "48": {
        start: {
          line: 113,
          column: 32
        },
        end: {
          line: 113,
          column: 82
        }
      },
      "49": {
        start: {
          line: 116,
          column: 35
        },
        end: {
          line: 116,
          column: 85
        }
      },
      "50": {
        start: {
          line: 119,
          column: 38
        },
        end: {
          line: 127,
          column: 14
        }
      },
      "51": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 160,
          column: 13
        }
      },
      "52": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 97
        }
      },
      "53": {
        start: {
          line: 134,
          column: 16
        },
        end: {
          line: 145,
          column: 19
        }
      },
      "54": {
        start: {
          line: 148,
          column: 42
        },
        end: {
          line: 148,
          column: 80
        }
      },
      "55": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 151,
          column: 17
        }
      },
      "56": {
        start: {
          line: 150,
          column: 20
        },
        end: {
          line: 150,
          column: 120
        }
      },
      "57": {
        start: {
          line: 153,
          column: 16
        },
        end: {
          line: 153,
          column: 83
        }
      },
      "58": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 159,
          column: 18
        }
      },
      "59": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 163,
          column: 64
        }
      },
      "60": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 168,
          column: 14
        }
      },
      "61": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 171,
          column: 24
        }
      },
      "62": {
        start: {
          line: 180,
          column: 4
        },
        end: {
          line: 224,
          column: 5
        }
      },
      "63": {
        start: {
          line: 181,
          column: 23
        },
        end: {
          line: 181,
          column: 52
        }
      },
      "64": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 186,
          column: 9
        }
      },
      "65": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 86
        }
      },
      "66": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 185,
          column: 71
        }
      },
      "67": {
        start: {
          line: 188,
          column: 23
        },
        end: {
          line: 208,
          column: 9
        }
      },
      "68": {
        start: {
          line: 198,
          column: 61
        },
        end: {
          line: 198,
          column: 96
        }
      },
      "69": {
        start: {
          line: 210,
          column: 27
        },
        end: {
          line: 215,
          column: 10
        }
      },
      "70": {
        start: {
          line: 217,
          column: 26
        },
        end: {
          line: 217,
          column: 79
        }
      },
      "71": {
        start: {
          line: 218,
          column: 22
        },
        end: {
          line: 218,
          column: 41
        }
      },
      "72": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 220,
          column: 69
        }
      },
      "73": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 222,
          column: 83
        }
      },
      "74": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 223,
          column: 67
        }
      },
      "75": {
        start: {
          line: 231,
          column: 20
        },
        end: {
          line: 231,
          column: 119
        }
      },
      "76": {
        start: {
          line: 232,
          column: 26
        },
        end: {
          line: 232,
          column: 106
        }
      },
      "77": {
        start: {
          line: 232,
          column: 62
        },
        end: {
          line: 232,
          column: 99
        }
      },
      "78": {
        start: {
          line: 233,
          column: 4
        },
        end: {
          line: 233,
          column: 90
        }
      },
      "79": {
        start: {
          line: 240,
          column: 4
        },
        end: {
          line: 286,
          column: 5
        }
      },
      "80": {
        start: {
          line: 241,
          column: 23
        },
        end: {
          line: 241,
          column: 52
        }
      },
      "81": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 246,
          column: 9
        }
      },
      "82": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 244,
          column: 91
        }
      },
      "83": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 72
        }
      },
      "84": {
        start: {
          line: 248,
          column: 23
        },
        end: {
          line: 272,
          column: 9
        }
      },
      "85": {
        start: {
          line: 260,
          column: 61
        },
        end: {
          line: 260,
          column: 96
        }
      },
      "86": {
        start: {
          line: 274,
          column: 27
        },
        end: {
          line: 279,
          column: 10
        }
      },
      "87": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 281,
          column: 119
        }
      },
      "88": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 284,
          column: 81
        }
      },
      "89": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 285,
          column: 68
        }
      },
      "90": {
        start: {
          line: 293,
          column: 4
        },
        end: {
          line: 302,
          column: 21
        }
      },
      "91": {
        start: {
          line: 309,
          column: 4
        },
        end: {
          line: 350,
          column: 5
        }
      },
      "92": {
        start: {
          line: 310,
          column: 23
        },
        end: {
          line: 310,
          column: 52
        }
      },
      "93": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 315,
          column: 9
        }
      },
      "94": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 313,
          column: 89
        }
      },
      "95": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 314,
          column: 34
        }
      },
      "96": {
        start: {
          line: 317,
          column: 23
        },
        end: {
          line: 336,
          column: 9
        }
      },
      "97": {
        start: {
          line: 338,
          column: 27
        },
        end: {
          line: 343,
          column: 10
        }
      },
      "98": {
        start: {
          line: 345,
          column: 8
        },
        end: {
          line: 345,
          column: 81
        }
      },
      "99": {
        start: {
          line: 348,
          column: 8
        },
        end: {
          line: 348,
          column: 74
        }
      },
      "100": {
        start: {
          line: 349,
          column: 8
        },
        end: {
          line: 349,
          column: 30
        }
      },
      "101": {
        start: {
          line: 357,
          column: 4
        },
        end: {
          line: 406,
          column: 5
        }
      },
      "102": {
        start: {
          line: 358,
          column: 96
        },
        end: {
          line: 358,
          column: 111
        }
      },
      "103": {
        start: {
          line: 367,
          column: 30
        },
        end: {
          line: 367,
          column: 38
        }
      },
      "104": {
        start: {
          line: 370,
          column: 24
        },
        end: {
          line: 370,
          column: 43
        }
      },
      "105": {
        start: {
          line: 372,
          column: 8
        },
        end: {
          line: 398,
          column: 9
        }
      },
      "106": {
        start: {
          line: 374,
          column: 12
        },
        end: {
          line: 386,
          column: 15
        }
      },
      "107": {
        start: {
          line: 388,
          column: 12
        },
        end: {
          line: 392,
          column: 14
        }
      },
      "108": {
        start: {
          line: 394,
          column: 12
        },
        end: {
          line: 397,
          column: 14
        }
      },
      "109": {
        start: {
          line: 401,
          column: 8
        },
        end: {
          line: 401,
          column: 66
        }
      },
      "110": {
        start: {
          line: 402,
          column: 8
        },
        end: {
          line: 405,
          column: 10
        }
      },
      "111": {
        start: {
          line: 413,
          column: 4
        },
        end: {
          line: 433,
          column: 5
        }
      },
      "112": {
        start: {
          line: 414,
          column: 32
        },
        end: {
          line: 420,
          column: 9
        }
      },
      "113": {
        start: {
          line: 422,
          column: 8
        },
        end: {
          line: 428,
          column: 10
        }
      },
      "114": {
        start: {
          line: 430,
          column: 8
        },
        end: {
          line: 430,
          column: 76
        }
      },
      "115": {
        start: {
          line: 432,
          column: 8
        },
        end: {
          line: 432,
          column: 60
        }
      },
      "116": {
        start: {
          line: 440,
          column: 4
        },
        end: {
          line: 451,
          column: 6
        }
      },
      "117": {
        start: {
          line: 455,
          column: 4
        },
        end: {
          line: 463,
          column: 6
        }
      },
      "118": {
        start: {
          line: 468,
          column: 4
        },
        end: {
          line: 468,
          column: 16
        }
      },
      "119": {
        start: {
          line: 473,
          column: 4
        },
        end: {
          line: 473,
          column: 41
        }
      },
      "120": {
        start: {
          line: 478,
          column: 4
        },
        end: {
          line: 478,
          column: 61
        }
      },
      "121": {
        start: {
          line: 485,
          column: 4
        },
        end: {
          line: 496,
          column: 5
        }
      },
      "122": {
        start: {
          line: 487,
          column: 47
        },
        end: {
          line: 487,
          column: 105
        }
      },
      "123": {
        start: {
          line: 490,
          column: 8
        },
        end: {
          line: 490,
          column: 93
        }
      },
      "124": {
        start: {
          line: 492,
          column: 8
        },
        end: {
          line: 492,
          column: 117
        }
      },
      "125": {
        start: {
          line: 494,
          column: 8
        },
        end: {
          line: 494,
          column: 82
        }
      }
    },
    fnMap: {
      "0": {
        name: "initializeAzureOpenAI",
        decl: {
          start: {
            line: 14,
            column: 15
          },
          end: {
            line: 14,
            column: 36
          }
        },
        loc: {
          start: {
            line: 14,
            column: 39
          },
          end: {
            line: 42,
            column: 1
          }
        },
        line: 14
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 48,
            column: 13
          },
          end: {
            line: 48,
            column: 14
          }
        },
        loc: {
          start: {
            line: 48,
            column: 43
          },
          end: {
            line: 173,
            column: 5
          }
        },
        line: 48
      },
      "2": {
        name: "calculateJobRelevancy",
        decl: {
          start: {
            line: 179,
            column: 15
          },
          end: {
            line: 179,
            column: 36
          }
        },
        loc: {
          start: {
            line: 179,
            column: 62
          },
          end: {
            line: 225,
            column: 1
          }
        },
        line: 179
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 198,
            column: 54
          },
          end: {
            line: 198,
            column: 55
          }
        },
        loc: {
          start: {
            line: 198,
            column: 61
          },
          end: {
            line: 198,
            column: 96
          }
        },
        line: 198
      },
      "4": {
        name: "calculateFallbackRelevancy",
        decl: {
          start: {
            line: 230,
            column: 9
          },
          end: {
            line: 230,
            column: 35
          }
        },
        loc: {
          start: {
            line: 230,
            column: 61
          },
          end: {
            line: 234,
            column: 1
          }
        },
        line: 230
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 232,
            column: 53
          },
          end: {
            line: 232,
            column: 54
          }
        },
        loc: {
          start: {
            line: 232,
            column: 62
          },
          end: {
            line: 232,
            column: 99
          }
        },
        line: 232
      },
      "6": {
        name: "generateCoverLetter",
        decl: {
          start: {
            line: 239,
            column: 15
          },
          end: {
            line: 239,
            column: 34
          }
        },
        loc: {
          start: {
            line: 239,
            column: 60
          },
          end: {
            line: 287,
            column: 1
          }
        },
        line: 239
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 260,
            column: 54
          },
          end: {
            line: 260,
            column: 55
          }
        },
        loc: {
          start: {
            line: 260,
            column: 61
          },
          end: {
            line: 260,
            column: 96
          }
        },
        line: 260
      },
      "8": {
        name: "generateFallbackCoverLetter",
        decl: {
          start: {
            line: 292,
            column: 9
          },
          end: {
            line: 292,
            column: 36
          }
        },
        loc: {
          start: {
            line: 292,
            column: 62
          },
          end: {
            line: 303,
            column: 1
          }
        },
        line: 292
      },
      "9": {
        name: "tailorResume",
        decl: {
          start: {
            line: 308,
            column: 15
          },
          end: {
            line: 308,
            column: 27
          }
        },
        loc: {
          start: {
            line: 308,
            column: 56
          },
          end: {
            line: 351,
            column: 1
          }
        },
        line: 308
      },
      "10": {
        name: "submitJobApplication",
        decl: {
          start: {
            line: 356,
            column: 15
          },
          end: {
            line: 356,
            column: 35
          }
        },
        loc: {
          start: {
            line: 356,
            column: 53
          },
          end: {
            line: 407,
            column: 1
          }
        },
        line: 356
      },
      "11": {
        name: "scheduleFollowUp",
        decl: {
          start: {
            line: 412,
            column: 15
          },
          end: {
            line: 412,
            column: 31
          }
        },
        loc: {
          start: {
            line: 412,
            column: 73
          },
          end: {
            line: 434,
            column: 1
          }
        },
        line: 412
      },
      "12": {
        name: "getUserProfile",
        decl: {
          start: {
            line: 438,
            column: 15
          },
          end: {
            line: 438,
            column: 29
          }
        },
        loc: {
          start: {
            line: 438,
            column: 38
          },
          end: {
            line: 452,
            column: 1
          }
        },
        line: 438
      },
      "13": {
        name: "getUserAutoApplySettings",
        decl: {
          start: {
            line: 454,
            column: 15
          },
          end: {
            line: 454,
            column: 39
          }
        },
        loc: {
          start: {
            line: 454,
            column: 48
          },
          end: {
            line: 464,
            column: 1
          }
        },
        line: 454
      },
      "14": {
        name: "checkExistingApplication",
        decl: {
          start: {
            line: 466,
            column: 15
          },
          end: {
            line: 466,
            column: 39
          }
        },
        loc: {
          start: {
            line: 466,
            column: 55
          },
          end: {
            line: 469,
            column: 1
          }
        },
        line: 466
      },
      "15": {
        name: "getTodayApplicationCount",
        decl: {
          start: {
            line: 471,
            column: 15
          },
          end: {
            line: 471,
            column: 39
          }
        },
        loc: {
          start: {
            line: 471,
            column: 48
          },
          end: {
            line: 474,
            column: 1
          }
        },
        line: 471
      },
      "16": {
        name: "storeJobApplication",
        decl: {
          start: {
            line: 476,
            column: 15
          },
          end: {
            line: 476,
            column: 34
          }
        },
        loc: {
          start: {
            line: 476,
            column: 52
          },
          end: {
            line: 479,
            column: 1
          }
        },
        line: 476
      },
      "17": {
        name: "sendApplicationSubmittedNotification",
        decl: {
          start: {
            line: 484,
            column: 15
          },
          end: {
            line: 484,
            column: 51
          }
        },
        loc: {
          start: {
            line: 484,
            column: 77
          },
          end: {
            line: 497,
            column: 1
          }
        },
        line: 484
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "2": {
        loc: {
          start: {
            line: 22,
            column: 12
          },
          end: {
            line: 22,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 22,
            column: 12
          },
          end: {
            line: 22,
            column: 35
          }
        }, {
          start: {
            line: 22,
            column: 39
          },
          end: {
            line: 22,
            column: 67
          }
        }],
        line: 22
      },
      "3": {
        loc: {
          start: {
            line: 52,
            column: 36
          },
          end: {
            line: 52,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 52,
            column: 68
          },
          end: {
            line: 52,
            column: 89
          }
        }, {
          start: {
            line: 52,
            column: 92
          },
          end: {
            line: 52,
            column: 101
          }
        }],
        line: 52
      },
      "4": {
        loc: {
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 65,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 65,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "5": {
        loc: {
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 77,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 77,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "6": {
        loc: {
          start: {
            line: 81,
            column: 12
          },
          end: {
            line: 84,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 12
          },
          end: {
            line: 84,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      },
      "7": {
        loc: {
          start: {
            line: 87,
            column: 12
          },
          end: {
            line: 110,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 87,
            column: 12
          },
          end: {
            line: 110,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 87
      },
      "8": {
        loc: {
          start: {
            line: 89,
            column: 16
          },
          end: {
            line: 97,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 16
          },
          end: {
            line: 97,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "9": {
        loc: {
          start: {
            line: 101,
            column: 16
          },
          end: {
            line: 109,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 101,
            column: 16
          },
          end: {
            line: 109,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 101
      },
      "10": {
        loc: {
          start: {
            line: 129,
            column: 12
          },
          end: {
            line: 160,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 12
          },
          end: {
            line: 160,
            column: 13
          }
        }, {
          start: {
            line: 154,
            column: 19
          },
          end: {
            line: 160,
            column: 13
          }
        }],
        line: 129
      },
      "11": {
        loc: {
          start: {
            line: 149,
            column: 16
          },
          end: {
            line: 151,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 16
          },
          end: {
            line: 151,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 149
      },
      "12": {
        loc: {
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 186,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 186,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "13": {
        loc: {
          start: {
            line: 217,
            column: 26
          },
          end: {
            line: 217,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 217,
            column: 26
          },
          end: {
            line: 217,
            column: 73
          }
        }, {
          start: {
            line: 217,
            column: 77
          },
          end: {
            line: 217,
            column: 79
          }
        }],
        line: 217
      },
      "14": {
        loc: {
          start: {
            line: 220,
            column: 15
          },
          end: {
            line: 220,
            column: 68
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 220,
            column: 30
          },
          end: {
            line: 220,
            column: 32
          }
        }, {
          start: {
            line: 220,
            column: 35
          },
          end: {
            line: 220,
            column: 68
          }
        }],
        line: 220
      },
      "15": {
        loc: {
          start: {
            line: 232,
            column: 26
          },
          end: {
            line: 232,
            column: 106
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 232,
            column: 26
          },
          end: {
            line: 232,
            column: 100
          }
        }, {
          start: {
            line: 232,
            column: 104
          },
          end: {
            line: 232,
            column: 106
          }
        }],
        line: 232
      },
      "16": {
        loc: {
          start: {
            line: 233,
            column: 49
          },
          end: {
            line: 233,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 233,
            column: 49
          },
          end: {
            line: 233,
            column: 75
          }
        }, {
          start: {
            line: 233,
            column: 79
          },
          end: {
            line: 233,
            column: 80
          }
        }],
        line: 233
      },
      "17": {
        loc: {
          start: {
            line: 243,
            column: 8
          },
          end: {
            line: 246,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 243,
            column: 8
          },
          end: {
            line: 246,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 243
      },
      "18": {
        loc: {
          start: {
            line: 281,
            column: 15
          },
          end: {
            line: 281,
            column: 118
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 281,
            column: 15
          },
          end: {
            line: 281,
            column: 62
          }
        }, {
          start: {
            line: 281,
            column: 66
          },
          end: {
            line: 281,
            column: 118
          }
        }],
        line: 281
      },
      "19": {
        loc: {
          start: {
            line: 312,
            column: 8
          },
          end: {
            line: 315,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 312,
            column: 8
          },
          end: {
            line: 315,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 312
      },
      "20": {
        loc: {
          start: {
            line: 345,
            column: 15
          },
          end: {
            line: 345,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 345,
            column: 15
          },
          end: {
            line: 345,
            column: 62
          }
        }, {
          start: {
            line: 345,
            column: 66
          },
          end: {
            line: 345,
            column: 80
          }
        }],
        line: 345
      },
      "21": {
        loc: {
          start: {
            line: 372,
            column: 8
          },
          end: {
            line: 398,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 372,
            column: 8
          },
          end: {
            line: 398,
            column: 9
          }
        }, {
          start: {
            line: 393,
            column: 15
          },
          end: {
            line: 398,
            column: 9
          }
        }],
        line: 372
      },
      "22": {
        loc: {
          start: {
            line: 404,
            column: 21
          },
          end: {
            line: 404,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 404,
            column: 21
          },
          end: {
            line: 404,
            column: 34
          }
        }, {
          start: {
            line: 404,
            column: 38
          },
          end: {
            line: 404,
            column: 84
          }
        }],
        line: 404
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0]
    },
    inputSourceMap: null,
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b6a7e6c1bc61d7bebf7b807417f1599d513889e9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1pwd3cutoc = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1pwd3cutoc();
const {
  app
} =
/* istanbul ignore next */
(cov_1pwd3cutoc().s[0]++, require('@azure/functions'));
const queueService =
/* istanbul ignore next */
(cov_1pwd3cutoc().s[1]++, require('../lib/services/queue-service'));
const automationLogger =
/* istanbul ignore next */
(cov_1pwd3cutoc().s[2]++, require('../lib/services/automation-logs'));
const OpenAI =
/* istanbul ignore next */
(cov_1pwd3cutoc().s[3]++, require('openai'));
const {
  fetchAzureSecrets
} =
/* istanbul ignore next */
(cov_1pwd3cutoc().s[4]++, require('../lib/azure-config'));
const {
  v4: uuidv4
} =
/* istanbul ignore next */
(cov_1pwd3cutoc().s[5]++, require('uuid'));

// Azure OpenAI client - will be initialized from Key Vault secrets
let azureOpenAIClient =
/* istanbul ignore next */
(cov_1pwd3cutoc().s[6]++, null);

/**
 * Initialize Azure OpenAI client
 */
async function initializeAzureOpenAI() {
  /* istanbul ignore next */
  cov_1pwd3cutoc().f[0]++;
  cov_1pwd3cutoc().s[7]++;
  if (azureOpenAIClient) {
    /* istanbul ignore next */
    cov_1pwd3cutoc().b[0][0]++;
    cov_1pwd3cutoc().s[8]++;
    return azureOpenAIClient;
  } else
  /* istanbul ignore next */
  {
    cov_1pwd3cutoc().b[0][1]++;
  }
  cov_1pwd3cutoc().s[9]++;
  try {
    const secrets =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[10]++, await fetchAzureSecrets());
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[11]++;
    if (
    /* istanbul ignore next */
    (cov_1pwd3cutoc().b[2][0]++, !secrets.azureOpenAIKey) ||
    /* istanbul ignore next */
    (cov_1pwd3cutoc().b[2][1]++, !secrets.azureOpenAIEndpoint)) {
      /* istanbul ignore next */
      cov_1pwd3cutoc().b[1][0]++;
      cov_1pwd3cutoc().s[12]++;
      console.warn('⚠️ Azure OpenAI credentials not available, using fallback');
      /* istanbul ignore next */
      cov_1pwd3cutoc().s[13]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1pwd3cutoc().b[1][1]++;
    }
    cov_1pwd3cutoc().s[14]++;
    azureOpenAIClient = new OpenAI({
      apiKey: secrets.azureOpenAIKey,
      baseURL: `${secrets.azureOpenAIEndpoint}/openai/deployments/${secrets.azureOpenAIDeployment}`,
      defaultQuery: {
        'api-version': '2024-08-01-preview'
      },
      defaultHeaders: {
        'api-key': secrets.azureOpenAIKey
      }
    });
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[15]++;
    console.log('✅ Azure OpenAI client initialized for application worker');
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[16]++;
    return azureOpenAIClient;
  } catch (error) {
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[17]++;
    console.error('❌ Failed to initialize Azure OpenAI client:', error);
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[18]++;
    return null;
  }
}

// Queue trigger function for processing job applications
/* istanbul ignore next */
cov_1pwd3cutoc().s[19]++;
app.storageQueue('applicationWorker', {
  queueName: 'process-applications',
  connection: 'AzureWebJobsStorage',
  handler: async (queueItem, context) => {
    /* istanbul ignore next */
    cov_1pwd3cutoc().f[1]++;
    cov_1pwd3cutoc().s[20]++;
    context.log('Application Worker processing queue item:', queueItem);
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[21]++;
    try {
      const applicationData =
      /* istanbul ignore next */
      (cov_1pwd3cutoc().s[22]++, typeof queueItem === 'string' ?
      /* istanbul ignore next */
      (cov_1pwd3cutoc().b[3][0]++, JSON.parse(queueItem)) :
      /* istanbul ignore next */
      (cov_1pwd3cutoc().b[3][1]++, queueItem));
      const {
        userId,
        jobId,
        jobListing,
        requestId,
        autoApply
      } =
      /* istanbul ignore next */
      (cov_1pwd3cutoc().s[23]++, applicationData);
      /* istanbul ignore next */
      cov_1pwd3cutoc().s[24]++;
      await automationLogger.logInfo('application_processing_started', `Starting application processing for job ${jobId}`, {
        userId,
        jobId,
        requestId,
        autoApply
      });

      // Get user profile and preferences
      const userProfile =
      /* istanbul ignore next */
      (cov_1pwd3cutoc().s[25]++, await getUserProfile(userId));
      /* istanbul ignore next */
      cov_1pwd3cutoc().s[26]++;
      if (!userProfile) {
        /* istanbul ignore next */
        cov_1pwd3cutoc().b[4][0]++;
        cov_1pwd3cutoc().s[27]++;
        throw new Error(`User profile not found for user ${userId}`);
      } else
      /* istanbul ignore next */
      {
        cov_1pwd3cutoc().b[4][1]++;
      }

      // Check if user has already applied to this job
      const existingApplication =
      /* istanbul ignore next */
      (cov_1pwd3cutoc().s[28]++, await checkExistingApplication(userId, jobId));
      /* istanbul ignore next */
      cov_1pwd3cutoc().s[29]++;
      if (existingApplication) {
        /* istanbul ignore next */
        cov_1pwd3cutoc().b[5][0]++;
        cov_1pwd3cutoc().s[30]++;
        context.log(`User ${userId} has already applied to job ${jobId}`);
        /* istanbul ignore next */
        cov_1pwd3cutoc().s[31]++;
        await automationLogger.logWarning('application_duplicate_skipped', 'Skipping duplicate application', {
          userId,
          jobId
        });
        /* istanbul ignore next */
        cov_1pwd3cutoc().s[32]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1pwd3cutoc().b[5][1]++;
      }

      // Calculate job relevancy if not already done
      let relevancyScore =
      /* istanbul ignore next */
      (cov_1pwd3cutoc().s[33]++, jobListing.relevancyScore);
      /* istanbul ignore next */
      cov_1pwd3cutoc().s[34]++;
      if (!relevancyScore) {
        /* istanbul ignore next */
        cov_1pwd3cutoc().b[6][0]++;
        cov_1pwd3cutoc().s[35]++;
        relevancyScore = await calculateJobRelevancy(jobListing, userProfile);
        /* istanbul ignore next */
        cov_1pwd3cutoc().s[36]++;
        jobListing.relevancyScore = relevancyScore;
      } else
      /* istanbul ignore next */
      {
        cov_1pwd3cutoc().b[6][1]++;
      }

      // Check if job meets auto-apply threshold
      cov_1pwd3cutoc().s[37]++;
      if (autoApply) {
        /* istanbul ignore next */
        cov_1pwd3cutoc().b[7][0]++;
        const autoApplySettings =
        /* istanbul ignore next */
        (cov_1pwd3cutoc().s[38]++, await getUserAutoApplySettings(userId));
        /* istanbul ignore next */
        cov_1pwd3cutoc().s[39]++;
        if (relevancyScore < autoApplySettings.autoApplyThreshold) {
          /* istanbul ignore next */
          cov_1pwd3cutoc().b[8][0]++;
          cov_1pwd3cutoc().s[40]++;
          context.log(`Job relevancy score ${relevancyScore} below threshold ${autoApplySettings.autoApplyThreshold}`);
          /* istanbul ignore next */
          cov_1pwd3cutoc().s[41]++;
          await automationLogger.logInfo('application_skipped_threshold', `Job skipped due to low relevancy score: ${relevancyScore}`, {
            userId,
            jobId,
            relevancyScore,
            threshold: autoApplySettings.autoApplyThreshold
          });
          /* istanbul ignore next */
          cov_1pwd3cutoc().s[42]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_1pwd3cutoc().b[8][1]++;
        }

        // Check daily application limit
        const todayApplications =
        /* istanbul ignore next */
        (cov_1pwd3cutoc().s[43]++, await getTodayApplicationCount(userId));
        /* istanbul ignore next */
        cov_1pwd3cutoc().s[44]++;
        if (todayApplications >= autoApplySettings.dailyApplicationLimit) {
          /* istanbul ignore next */
          cov_1pwd3cutoc().b[9][0]++;
          cov_1pwd3cutoc().s[45]++;
          context.log(`User ${userId} has reached daily application limit`);
          /* istanbul ignore next */
          cov_1pwd3cutoc().s[46]++;
          await automationLogger.logWarning('application_daily_limit_reached', 'Daily application limit reached', {
            userId,
            todayApplications,
            dailyLimit: autoApplySettings.dailyApplicationLimit
          });
          /* istanbul ignore next */
          cov_1pwd3cutoc().s[47]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_1pwd3cutoc().b[9][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_1pwd3cutoc().b[7][1]++;
      }

      // Generate cover letter
      const coverLetter =
      /* istanbul ignore next */
      (cov_1pwd3cutoc().s[48]++, await generateCoverLetter(jobListing, userProfile));

      // Tailor resume for the job
      const tailoredResume =
      /* istanbul ignore next */
      (cov_1pwd3cutoc().s[49]++, await tailorResume(userProfile.resume, jobListing));

      // Submit application
      const applicationResult =
      /* istanbul ignore next */
      (cov_1pwd3cutoc().s[50]++, await submitJobApplication({
        userId,
        jobId,
        jobListing,
        userProfile,
        coverLetter,
        resume: tailoredResume,
        relevancyScore
      }));
      /* istanbul ignore next */
      cov_1pwd3cutoc().s[51]++;
      if (applicationResult.success) {
        /* istanbul ignore next */
        cov_1pwd3cutoc().b[10][0]++;
        cov_1pwd3cutoc().s[52]++;
        // Log successful application
        await automationLogger.logApplicationSubmitted(userId, jobId, applicationResult);

        // Send application submitted notification
        /* istanbul ignore next */
        cov_1pwd3cutoc().s[53]++;
        await sendApplicationSubmittedNotification(userId, {
          id: applicationResult.applicationId,
          userId,
          jobId,
          jobTitle: jobListing.title,
          company: jobListing.company,
          appliedAt: new Date(),
          autoApplied: autoApply,
          coverLetterUsed: !!coverLetter,
          resumeTailored: !!tailoredResume,
          relevancyScore
        });

        // Schedule follow-up reminder if enabled
        const autoApplySettings =
        /* istanbul ignore next */
        (cov_1pwd3cutoc().s[54]++, await getUserAutoApplySettings(userId));
        /* istanbul ignore next */
        cov_1pwd3cutoc().s[55]++;
        if (autoApplySettings.followUpEnabled) {
          /* istanbul ignore next */
          cov_1pwd3cutoc().b[11][0]++;
          cov_1pwd3cutoc().s[56]++;
          await scheduleFollowUp(userId, applicationResult.applicationId, autoApplySettings.followUpSchedule);
        } else
        /* istanbul ignore next */
        {
          cov_1pwd3cutoc().b[11][1]++;
        }
        cov_1pwd3cutoc().s[57]++;
        context.log(`Successfully processed application for job ${jobId}`);
      } else {
        /* istanbul ignore next */
        cov_1pwd3cutoc().b[10][1]++;
        cov_1pwd3cutoc().s[58]++;
        await automationLogger.logError('application_submission_failed', new Error(applicationResult.message), {
          userId,
          jobId,
          applicationResult
        });
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1pwd3cutoc().s[59]++;
      context.log('Error processing application:', error);
      /* istanbul ignore next */
      cov_1pwd3cutoc().s[60]++;
      await automationLogger.logError('application_processing_error', error, {
        queueItem
      });

      // Re-throw to trigger Azure Functions retry logic
      /* istanbul ignore next */
      cov_1pwd3cutoc().s[61]++;
      throw error;
    }
  }
});

/**
 * Calculate job relevancy score using AI
 */
async function calculateJobRelevancy(jobListing, userProfile) {
  /* istanbul ignore next */
  cov_1pwd3cutoc().f[2]++;
  cov_1pwd3cutoc().s[62]++;
  try {
    const client =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[63]++, await initializeAzureOpenAI());
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[64]++;
    if (!client) {
      /* istanbul ignore next */
      cov_1pwd3cutoc().b[12][0]++;
      cov_1pwd3cutoc().s[65]++;
      console.warn('Azure OpenAI client not available, using fallback scoring');
      /* istanbul ignore next */
      cov_1pwd3cutoc().s[66]++;
      return calculateFallbackRelevancy(jobListing, userProfile);
    } else
    /* istanbul ignore next */
    {
      cov_1pwd3cutoc().b[12][1]++;
    }
    const prompt =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[67]++, `
            Analyze the relevancy between this job posting and the candidate's profile:
            
            JOB TITLE: ${jobListing.title}
            COMPANY: ${jobListing.company}
            JOB DESCRIPTION: ${jobListing.description}
            REQUIREMENTS: ${jobListing.requirements?.join(', ')}
            
            CANDIDATE PROFILE:
            Skills: ${userProfile.skills?.join(', ')}
            Experience: ${userProfile.experience?.map(exp => {
      /* istanbul ignore next */
      cov_1pwd3cutoc().f[3]++;
      cov_1pwd3cutoc().s[68]++;
      return `${exp.position} at ${exp.company}`;
    }).join(', ')}
            Target Roles: ${userProfile.targetRoles?.join(', ')}
            
            Calculate a relevancy score from 0-100 based on:
            1. Skills match (40% weight)
            2. Role alignment (30% weight) 
            3. Experience level match (20% weight)
            4. Job requirements match (10% weight)
            
            Return only a number between 0-100.
        `);
    const completion =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[69]++, await client.chat.completions.create({
      model: 'gpt-35-turbo',
      // Using the deployment name
      messages: [{
        role: 'user',
        content: prompt
      }],
      temperature: 0.1,
      max_tokens: 50
    }));
    const scoreText =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[70]++,
    /* istanbul ignore next */
    (cov_1pwd3cutoc().b[13][0]++, completion.choices[0]?.message?.content?.trim()) ||
    /* istanbul ignore next */
    (cov_1pwd3cutoc().b[13][1]++, ''));
    const score =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[71]++, parseInt(scoreText));
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[72]++;
    return isNaN(score) ?
    /* istanbul ignore next */
    (cov_1pwd3cutoc().b[14][0]++, 50) :
    /* istanbul ignore next */
    (cov_1pwd3cutoc().b[14][1]++, Math.max(0, Math.min(100, score)));
  } catch (error) {
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[73]++;
    console.error('Error calculating job relevancy with Azure OpenAI:', error);
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[74]++;
    return calculateFallbackRelevancy(jobListing, userProfile);
  }
}

/**
 * Fallback relevancy calculation using keyword matching
 */
function calculateFallbackRelevancy(jobListing, userProfile) {
  /* istanbul ignore next */
  cov_1pwd3cutoc().f[4]++;
  const jobText =
  /* istanbul ignore next */
  (cov_1pwd3cutoc().s[75]++, `${jobListing.title} ${jobListing.description} ${jobListing.requirements?.join(' ')}`.toLowerCase());
  const matchedSkills =
  /* istanbul ignore next */
  (cov_1pwd3cutoc().s[76]++,
  /* istanbul ignore next */
  (cov_1pwd3cutoc().b[15][0]++, userProfile.skills?.filter(skill => {
    /* istanbul ignore next */
    cov_1pwd3cutoc().f[5]++;
    cov_1pwd3cutoc().s[77]++;
    return jobText.includes(skill.toLowerCase());
  })) ||
  /* istanbul ignore next */
  (cov_1pwd3cutoc().b[15][1]++, []));
  /* istanbul ignore next */
  cov_1pwd3cutoc().s[78]++;
  return Math.min(90, matchedSkills.length / (
  /* istanbul ignore next */
  (cov_1pwd3cutoc().b[16][0]++, userProfile.skills?.length) ||
  /* istanbul ignore next */
  (cov_1pwd3cutoc().b[16][1]++, 1)) * 100);
}

/**
 * Generate AI-powered cover letter
 */
async function generateCoverLetter(jobListing, userProfile) {
  /* istanbul ignore next */
  cov_1pwd3cutoc().f[6]++;
  cov_1pwd3cutoc().s[79]++;
  try {
    const client =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[80]++, await initializeAzureOpenAI());
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[81]++;
    if (!client) {
      /* istanbul ignore next */
      cov_1pwd3cutoc().b[17][0]++;
      cov_1pwd3cutoc().s[82]++;
      console.warn('Azure OpenAI client not available, using fallback cover letter');
      /* istanbul ignore next */
      cov_1pwd3cutoc().s[83]++;
      return generateFallbackCoverLetter(jobListing, userProfile);
    } else
    /* istanbul ignore next */
    {
      cov_1pwd3cutoc().b[17][1]++;
    }
    const prompt =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[84]++, `
            Generate a professional cover letter for this job application:
            
            JOB DETAILS:
            Position: ${jobListing.title}
            Company: ${jobListing.company}
            Description: ${jobListing.description}
            Requirements: ${jobListing.requirements?.join(', ')}
            
            CANDIDATE PROFILE:
            Name: ${userProfile.name}
            Skills: ${userProfile.skills?.join(', ')}
            Experience: ${userProfile.experience?.map(exp => {
      /* istanbul ignore next */
      cov_1pwd3cutoc().f[7]++;
      cov_1pwd3cutoc().s[85]++;
      return `${exp.position} at ${exp.company}`;
    }).join(', ')}
            Summary: ${userProfile.summary}
            
            Requirements:
            1. Professional tone and format
            2. Highlight relevant skills and experience
            3. Show enthusiasm for the role and company
            4. Keep it concise (3-4 paragraphs)
            5. Include specific examples when possible
            6. Address any skill gaps positively
            
            Return only the cover letter text, no additional formatting or explanations.
        `);
    const completion =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[86]++, await client.chat.completions.create({
      model: 'gpt-4o',
      // Using gpt-4o for better content generation
      messages: [{
        role: 'user',
        content: prompt
      }],
      temperature: 0.7,
      max_tokens: 1000
    }));
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[87]++;
    return /* istanbul ignore next */(cov_1pwd3cutoc().b[18][0]++, completion.choices[0]?.message?.content?.trim()) ||
    /* istanbul ignore next */
    (cov_1pwd3cutoc().b[18][1]++, generateFallbackCoverLetter(jobListing, userProfile));
  } catch (error) {
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[88]++;
    console.error('Error generating cover letter with Azure OpenAI:', error);
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[89]++;
    return generateFallbackCoverLetter(jobListing, userProfile);
  }
}

/**
 * Generate fallback cover letter
 */
function generateFallbackCoverLetter(jobListing, userProfile) {
  /* istanbul ignore next */
  cov_1pwd3cutoc().f[8]++;
  cov_1pwd3cutoc().s[90]++;
  return `Dear Hiring Manager,

I am writing to express my strong interest in the ${jobListing.title} position at ${jobListing.company}. With my background in ${userProfile.skills?.slice(0, 3).join(', ')}, I am confident that I would be a valuable addition to your team.

In my previous roles, I have gained extensive experience in ${userProfile.skills?.slice(0, 2).join(' and ')}, which directly aligns with the requirements outlined in your job posting. I am particularly excited about the opportunity to contribute to ${jobListing.company}'s innovative work in this space.

I would welcome the opportunity to discuss how my skills and enthusiasm can contribute to your team's success. Thank you for considering my application.

Best regards,
${userProfile.name}`;
}

/**
 * Tailor resume for specific job
 */
async function tailorResume(originalResume, jobListing) {
  /* istanbul ignore next */
  cov_1pwd3cutoc().f[9]++;
  cov_1pwd3cutoc().s[91]++;
  try {
    const client =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[92]++, await initializeAzureOpenAI());
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[93]++;
    if (!client) {
      /* istanbul ignore next */
      cov_1pwd3cutoc().b[19][0]++;
      cov_1pwd3cutoc().s[94]++;
      console.warn('Azure OpenAI client not available, returning original resume');
      /* istanbul ignore next */
      cov_1pwd3cutoc().s[95]++;
      return originalResume;
    } else
    /* istanbul ignore next */
    {
      cov_1pwd3cutoc().b[19][1]++;
    }
    const prompt =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[96]++, `
            Tailor this resume for the specific job posting to maximize ATS compatibility and relevance:
            
            JOB DESCRIPTION:
            ${jobListing.description}
            REQUIREMENTS: ${jobListing.requirements?.join(', ')}
            
            ORIGINAL RESUME:
            ${originalResume}
            
            Instructions:
            1. Optimize keywords for ATS systems
            2. Highlight most relevant experience first
            3. Include specific skills mentioned in job description
            4. Quantify achievements where possible
            5. Maintain professional formatting
            6. Keep same overall structure and length
            
            Return only the tailored resume content.
        `);
    const completion =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[97]++, await client.chat.completions.create({
      model: 'gpt-4o',
      // Using gpt-4o for better content generation
      messages: [{
        role: 'user',
        content: prompt
      }],
      temperature: 0.7,
      max_tokens: 2000
    }));
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[98]++;
    return /* istanbul ignore next */(cov_1pwd3cutoc().b[20][0]++, completion.choices[0]?.message?.content?.trim()) ||
    /* istanbul ignore next */
    (cov_1pwd3cutoc().b[20][1]++, originalResume);
  } catch (error) {
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[99]++;
    console.error('Error tailoring resume with Azure OpenAI:', error);
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[100]++;
    return originalResume; // Return original if tailoring fails
  }
}

/**
 * Submit job application to the appropriate portal
 */
async function submitJobApplication(applicationData) {
  /* istanbul ignore next */
  cov_1pwd3cutoc().f[10]++;
  cov_1pwd3cutoc().s[101]++;
  try {
    const {
      userId,
      jobId,
      jobListing,
      userProfile,
      coverLetter,
      resume,
      relevancyScore
    } =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[102]++, applicationData);

    // TODO: Implement portal-specific application submission
    // This would involve:
    // 1. Portal-specific API calls (LinkedIn, Indeed, etc.)
    // 2. Form filling automation (for portals without APIs)
    // 3. File uploads (resume, cover letter)
    // 4. Application tracking

    const applicationId =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[103]++, uuidv4());

    // Simulate application processing
    const success =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[104]++, Math.random() > 0.1); // 90% success rate
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[105]++;
    if (success) {
      /* istanbul ignore next */
      cov_1pwd3cutoc().b[21][0]++;
      cov_1pwd3cutoc().s[106]++;
      // Store application in database (TODO: implement proper storage)
      await storeJobApplication({
        id: applicationId,
        userId,
        jobId,
        status: 'applied',
        appliedAt: new Date().toISOString(),
        coverLetter,
        tailoredResume: resume,
        relevancyScore,
        portal: jobListing.jobPortal?.name,
        jobTitle: jobListing.title,
        company: jobListing.company
      });
      /* istanbul ignore next */
      cov_1pwd3cutoc().s[107]++;
      return {
        success: true,
        message: 'Application submitted successfully',
        applicationId
      };
    } else {
      /* istanbul ignore next */
      cov_1pwd3cutoc().b[21][1]++;
      cov_1pwd3cutoc().s[108]++;
      return {
        success: false,
        message: 'Failed to submit application to job portal'
      };
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[109]++;
    console.error('Error submitting job application:', error);
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[110]++;
    return {
      success: false,
      message:
      /* istanbul ignore next */
      (cov_1pwd3cutoc().b[22][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_1pwd3cutoc().b[22][1]++, 'Internal error during application submission')
    };
  }
}

/**
 * Schedule follow-up reminder
 */
async function scheduleFollowUp(userId, applicationId, followUpSchedule) {
  /* istanbul ignore next */
  cov_1pwd3cutoc().f[11]++;
  cov_1pwd3cutoc().s[111]++;
  try {
    const followUpMessage =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[112]++, {
      userId,
      applicationId,
      type: 'initial_follow_up',
      scheduledDate: new Date(Date.now() + followUpSchedule.initialDays * 24 * 60 * 60 * 1000).toISOString(),
      createdAt: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[113]++;
    await queueService.addMessage(queueService.queues.FOLLOW_UP_REMINDERS, followUpMessage, {
      visibilityTimeout: followUpSchedule.initialDays * 24 * 60 * 60 // Delay until follow-up date
    });
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[114]++;
    console.log(`Follow-up scheduled for application ${applicationId}`);
  } catch (error) {
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[115]++;
    console.error('Error scheduling follow-up:', error);
  }
}

// Utility functions (TODO: Implement with proper data storage)

async function getUserProfile(userId) {
  /* istanbul ignore next */
  cov_1pwd3cutoc().f[12]++;
  cov_1pwd3cutoc().s[116]++;
  // Mock user profile
  return {
    id: userId,
    name: 'John Doe',
    email: 'john.doe@example.com',
    skills: ['JavaScript', 'React', 'TypeScript', 'Node.js', 'Python'],
    experience: [{
      position: 'Frontend Developer',
      company: 'Tech Corp',
      technologies: ['React', 'TypeScript']
    }],
    targetRoles: ['Frontend Developer', 'Full Stack Developer'],
    summary: 'Experienced frontend developer with expertise in React applications',
    resume: 'Detailed resume content would be stored here...'
  };
}
async function getUserAutoApplySettings(userId) {
  /* istanbul ignore next */
  cov_1pwd3cutoc().f[13]++;
  cov_1pwd3cutoc().s[117]++;
  return {
    autoApplyThreshold: 75,
    dailyApplicationLimit: 5,
    followUpEnabled: true,
    followUpSchedule: {
      initialDays: 3,
      secondDays: 7
    }
  };
}
async function checkExistingApplication(userId, jobId) {
  /* istanbul ignore next */
  cov_1pwd3cutoc().f[14]++;
  cov_1pwd3cutoc().s[118]++;
  // TODO: Check database for existing applications
  return null; // No existing application found
}
async function getTodayApplicationCount(userId) {
  /* istanbul ignore next */
  cov_1pwd3cutoc().f[15]++;
  cov_1pwd3cutoc().s[119]++;
  // TODO: Query database for today's applications
  return Math.floor(Math.random() * 3); // Mock count
}
async function storeJobApplication(applicationData) {
  /* istanbul ignore next */
  cov_1pwd3cutoc().f[16]++;
  cov_1pwd3cutoc().s[120]++;
  // TODO: Store in database (Firestore, etc.)
  console.log('Storing job application:', applicationData);
}

/**
 * Send application submitted notification
 */
async function sendApplicationSubmittedNotification(userId, applicationData) {
  /* istanbul ignore next */
  cov_1pwd3cutoc().f[17]++;
  cov_1pwd3cutoc().s[121]++;
  try {
    // Import notification integration service
    const {
      jobNotificationIntegration
    } =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[122]++, require('../../lib/services/job-notification-integration'));

    // Send application submitted notification
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[123]++;
    await jobNotificationIntegration.notifyApplicationSubmitted(userId, applicationData);
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[124]++;
    console.log(`Application submitted notification sent for user ${userId}, application ${applicationData.id}`);
  } catch (error) {
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[125]++;
    console.error('Error sending application submitted notification:', error);
    // Don't throw error here to avoid breaking the application workflow
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,