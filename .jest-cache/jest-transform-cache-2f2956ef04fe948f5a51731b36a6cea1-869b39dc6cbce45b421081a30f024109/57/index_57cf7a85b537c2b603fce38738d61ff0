d06683253a5155d82b9fc6f6cc50d8f8
/* istanbul ignore next */
function cov_fy88dger1() {
  var path = "/Users/dikshantvashistha/PrepBettr/azure/health/index.js";
  var hash = "c05e991d6d21a0a58f9db3335c73deca16fc57a3";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/azure/health/index.js",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 74,
          column: 2
        }
      },
      "1": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 7,
          column: 48
        }
      },
      "2": {
        start: {
          line: 9,
          column: 22
        },
        end: {
          line: 9,
          column: 32
        }
      },
      "3": {
        start: {
          line: 10,
          column: 22
        },
        end: {
          line: 10,
          column: 45
        }
      },
      "4": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 73,
          column: 5
        }
      },
      "5": {
        start: {
          line: 14,
          column: 29
        },
        end: {
          line: 36,
          column: 9
        }
      },
      "6": {
        start: {
          line: 39,
          column: 24
        },
        end: {
          line: 39,
          column: 34
        }
      },
      "7": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 56
        }
      },
      "8": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 45
        }
      },
      "9": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 59
        }
      },
      "10": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 52,
          column: 10
        }
      },
      "11": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 57
        }
      },
      "12": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 72,
          column: 10
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 17
          },
          end: {
            line: 6,
            column: 18
          }
        },
        loc: {
          start: {
            line: 6,
            column: 47
          },
          end: {
            line: 74,
            column: 1
          }
        },
        line: 6
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 20,
            column: 25
          },
          end: {
            line: 20,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 25
          },
          end: {
            line: 20,
            column: 45
          }
        }, {
          start: {
            line: 20,
            column: 49
          },
          end: {
            line: 20,
            column: 62
          }
        }],
        line: 20
      },
      "1": {
        loc: {
          start: {
            line: 31,
            column: 24
          },
          end: {
            line: 32,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 31,
            column: 24
          },
          end: {
            line: 31,
            column: 55
          }
        }, {
          start: {
            line: 32,
            column: 24
          },
          end: {
            line: 32,
            column: 57
          }
        }],
        line: 31
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    inputSourceMap: null,
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c05e991d6d21a0a58f9db3335c73deca16fc57a3"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_fy88dger1 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_fy88dger1();
cov_fy88dger1().s[0]++;
/**
 * Azure Function: Health Check Endpoint
 * Provides a simple health status for the Function App
 */

module.exports = async function (context, req) {
  /* istanbul ignore next */
  cov_fy88dger1().f[0]++;
  cov_fy88dger1().s[1]++;
  context.log('Health check endpoint called');
  const startTime =
  /* istanbul ignore next */
  (cov_fy88dger1().s[2]++, new Date());
  const timestamp =
  /* istanbul ignore next */
  (cov_fy88dger1().s[3]++, startTime.toISOString());
  /* istanbul ignore next */
  cov_fy88dger1().s[4]++;
  try {
    // Basic health checks
    const healthStatus =
    /* istanbul ignore next */
    (cov_fy88dger1().s[5]++, {
      status: 'healthy',
      timestamp,
      service: 'PrepBettr Azure Functions',
      version: '1.0.0',
      uptime: process.uptime(),
      environment:
      /* istanbul ignore next */
      (cov_fy88dger1().b[0][0]++, process.env.NODE_ENV) ||
      /* istanbul ignore next */
      (cov_fy88dger1().b[0][1]++, 'development'),
      checks: {
        memory: {
          used: Math.round(process.memoryUsage().heapUsed / 1024 / 1024),
          total: Math.round(process.memoryUsage().heapTotal / 1024 / 1024),
          unit: 'MB'
        },
        services: {
          azure_openai: !!process.env.AZURE_OPENAI_KEY,
          azure_speech: !!process.env.SPEECH_KEY,
          firebase_configured: !!(
          /* istanbul ignore next */
          (cov_fy88dger1().b[1][0]++, process.env.FIREBASE_PROJECT_ID) &&
          /* istanbul ignore next */
          (cov_fy88dger1().b[1][1]++, process.env.FIREBASE_CLIENT_EMAIL))
        }
      }
    });

    // Calculate response time
    const endTime =
    /* istanbul ignore next */
    (cov_fy88dger1().s[6]++, new Date());
    /* istanbul ignore next */
    cov_fy88dger1().s[7]++;
    healthStatus.responseTime = endTime - startTime;
    /* istanbul ignore next */
    cov_fy88dger1().s[8]++;
    healthStatus.responseTimeUnit = 'ms';
    /* istanbul ignore next */
    cov_fy88dger1().s[9]++;
    context.log('Health check completed successfully');
    /* istanbul ignore next */
    cov_fy88dger1().s[10]++;
    context.res = {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
        'Cache-Control': 'no-cache'
      },
      body: healthStatus
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_fy88dger1().s[11]++;
    context.log.error('Health check failed:', error);
    /* istanbul ignore next */
    cov_fy88dger1().s[12]++;
    context.res = {
      status: 503,
      headers: {
        'Content-Type': 'application/json',
        'Cache-Control': 'no-cache'
      },
      body: {
        status: 'unhealthy',
        timestamp,
        service: 'PrepBettr Azure Functions',
        error: error.message,
        checks: {
          basic_functionality: false
        }
      }
    };
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfZnk4OGRnZXIxIiwiYWN0dWFsQ292ZXJhZ2UiLCJzIiwibW9kdWxlIiwiZXhwb3J0cyIsImNvbnRleHQiLCJyZXEiLCJmIiwibG9nIiwic3RhcnRUaW1lIiwiRGF0ZSIsInRpbWVzdGFtcCIsInRvSVNPU3RyaW5nIiwiaGVhbHRoU3RhdHVzIiwic3RhdHVzIiwic2VydmljZSIsInZlcnNpb24iLCJ1cHRpbWUiLCJwcm9jZXNzIiwiZW52aXJvbm1lbnQiLCJiIiwiZW52IiwiTk9ERV9FTlYiLCJjaGVja3MiLCJtZW1vcnkiLCJ1c2VkIiwiTWF0aCIsInJvdW5kIiwibWVtb3J5VXNhZ2UiLCJoZWFwVXNlZCIsInRvdGFsIiwiaGVhcFRvdGFsIiwidW5pdCIsInNlcnZpY2VzIiwiYXp1cmVfb3BlbmFpIiwiQVpVUkVfT1BFTkFJX0tFWSIsImF6dXJlX3NwZWVjaCIsIlNQRUVDSF9LRVkiLCJmaXJlYmFzZV9jb25maWd1cmVkIiwiRklSRUJBU0VfUFJPSkVDVF9JRCIsIkZJUkVCQVNFX0NMSUVOVF9FTUFJTCIsImVuZFRpbWUiLCJyZXNwb25zZVRpbWUiLCJyZXNwb25zZVRpbWVVbml0IiwicmVzIiwiaGVhZGVycyIsImJvZHkiLCJlcnJvciIsIm1lc3NhZ2UiLCJiYXNpY19mdW5jdGlvbmFsaXR5Il0sInNvdXJjZXMiOlsiaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBenVyZSBGdW5jdGlvbjogSGVhbHRoIENoZWNrIEVuZHBvaW50XG4gKiBQcm92aWRlcyBhIHNpbXBsZSBoZWFsdGggc3RhdHVzIGZvciB0aGUgRnVuY3Rpb24gQXBwXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBhc3luYyBmdW5jdGlvbiAoY29udGV4dCwgcmVxKSB7XG4gICAgY29udGV4dC5sb2coJ0hlYWx0aCBjaGVjayBlbmRwb2ludCBjYWxsZWQnKTtcbiAgICBcbiAgICBjb25zdCBzdGFydFRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgIGNvbnN0IHRpbWVzdGFtcCA9IHN0YXJ0VGltZS50b0lTT1N0cmluZygpO1xuICAgIFxuICAgIHRyeSB7XG4gICAgICAgIC8vIEJhc2ljIGhlYWx0aCBjaGVja3NcbiAgICAgICAgY29uc3QgaGVhbHRoU3RhdHVzID0ge1xuICAgICAgICAgICAgc3RhdHVzOiAnaGVhbHRoeScsXG4gICAgICAgICAgICB0aW1lc3RhbXAsXG4gICAgICAgICAgICBzZXJ2aWNlOiAnUHJlcEJldHRyIEF6dXJlIEZ1bmN0aW9ucycsXG4gICAgICAgICAgICB2ZXJzaW9uOiAnMS4wLjAnLFxuICAgICAgICAgICAgdXB0aW1lOiBwcm9jZXNzLnVwdGltZSgpLFxuICAgICAgICAgICAgZW52aXJvbm1lbnQ6IHByb2Nlc3MuZW52Lk5PREVfRU5WIHx8ICdkZXZlbG9wbWVudCcsXG4gICAgICAgICAgICBjaGVja3M6IHtcbiAgICAgICAgICAgICAgICBtZW1vcnk6IHtcbiAgICAgICAgICAgICAgICAgICAgdXNlZDogTWF0aC5yb3VuZChwcm9jZXNzLm1lbW9yeVVzYWdlKCkuaGVhcFVzZWQgLyAxMDI0IC8gMTAyNCksXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsOiBNYXRoLnJvdW5kKHByb2Nlc3MubWVtb3J5VXNhZ2UoKS5oZWFwVG90YWwgLyAxMDI0IC8gMTAyNCksXG4gICAgICAgICAgICAgICAgICAgIHVuaXQ6ICdNQidcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNlcnZpY2VzOiB7XG4gICAgICAgICAgICAgICAgICAgIGF6dXJlX29wZW5haTogISFwcm9jZXNzLmVudi5BWlVSRV9PUEVOQUlfS0VZLFxuICAgICAgICAgICAgICAgICAgICBhenVyZV9zcGVlY2g6ICEhcHJvY2Vzcy5lbnYuU1BFRUNIX0tFWSxcbiAgICAgICAgICAgICAgICAgICAgZmlyZWJhc2VfY29uZmlndXJlZDogISEoXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzLmVudi5GSVJFQkFTRV9QUk9KRUNUX0lEICYmIFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnYuRklSRUJBU0VfQ0xJRU5UX0VNQUlMXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICAvLyBDYWxjdWxhdGUgcmVzcG9uc2UgdGltZVxuICAgICAgICBjb25zdCBlbmRUaW1lID0gbmV3IERhdGUoKTtcbiAgICAgICAgaGVhbHRoU3RhdHVzLnJlc3BvbnNlVGltZSA9IGVuZFRpbWUgLSBzdGFydFRpbWU7XG4gICAgICAgIGhlYWx0aFN0YXR1cy5yZXNwb25zZVRpbWVVbml0ID0gJ21zJztcbiAgICAgICAgXG4gICAgICAgIGNvbnRleHQubG9nKCdIZWFsdGggY2hlY2sgY29tcGxldGVkIHN1Y2Nlc3NmdWxseScpO1xuICAgICAgICBcbiAgICAgICAgY29udGV4dC5yZXMgPSB7XG4gICAgICAgICAgICBzdGF0dXM6IDIwMCxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdDYWNoZS1Db250cm9sJzogJ25vLWNhY2hlJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJvZHk6IGhlYWx0aFN0YXR1c1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb250ZXh0LmxvZy5lcnJvcignSGVhbHRoIGNoZWNrIGZhaWxlZDonLCBlcnJvcik7XG4gICAgICAgIFxuICAgICAgICBjb250ZXh0LnJlcyA9IHtcbiAgICAgICAgICAgIHN0YXR1czogNTAzLFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ0NhY2hlLUNvbnRyb2wnOiAnbm8tY2FjaGUnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICAgIHN0YXR1czogJ3VuaGVhbHRoeScsXG4gICAgICAgICAgICAgICAgdGltZXN0YW1wLFxuICAgICAgICAgICAgICAgIHNlcnZpY2U6ICdQcmVwQmV0dHIgQXp1cmUgRnVuY3Rpb25zJyxcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgICAgICAgICBjaGVja3M6IHtcbiAgICAgICAgICAgICAgICAgICAgYmFzaWNfZnVuY3Rpb25hbGl0eTogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxufTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFlWTtJQUFBQSxhQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBQyxjQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFBLGNBQUE7QUFBQTtBQUFBRCxhQUFBO0FBQUFBLGFBQUEsR0FBQUUsQ0FBQTtBQWZaO0FBQ0E7QUFDQTtBQUNBOztBQUVBQyxNQUFNLENBQUNDLE9BQU8sR0FBRyxnQkFBZ0JDLE9BQU8sRUFBRUMsR0FBRyxFQUFFO0VBQUE7RUFBQU4sYUFBQSxHQUFBTyxDQUFBO0VBQUFQLGFBQUEsR0FBQUUsQ0FBQTtFQUMzQ0csT0FBTyxDQUFDRyxHQUFHLENBQUMsOEJBQThCLENBQUM7RUFFM0MsTUFBTUMsU0FBUztFQUFBO0VBQUEsQ0FBQVQsYUFBQSxHQUFBRSxDQUFBLE9BQUcsSUFBSVEsSUFBSSxDQUFDLENBQUM7RUFDNUIsTUFBTUMsU0FBUztFQUFBO0VBQUEsQ0FBQVgsYUFBQSxHQUFBRSxDQUFBLE9BQUdPLFNBQVMsQ0FBQ0csV0FBVyxDQUFDLENBQUM7RUFBQztFQUFBWixhQUFBLEdBQUFFLENBQUE7RUFFMUMsSUFBSTtJQUNBO0lBQ0EsTUFBTVcsWUFBWTtJQUFBO0lBQUEsQ0FBQWIsYUFBQSxHQUFBRSxDQUFBLE9BQUc7TUFDakJZLE1BQU0sRUFBRSxTQUFTO01BQ2pCSCxTQUFTO01BQ1RJLE9BQU8sRUFBRSwyQkFBMkI7TUFDcENDLE9BQU8sRUFBRSxPQUFPO01BQ2hCQyxNQUFNLEVBQUVDLE9BQU8sQ0FBQ0QsTUFBTSxDQUFDLENBQUM7TUFDeEJFLFdBQVc7TUFBRTtNQUFBLENBQUFuQixhQUFBLEdBQUFvQixDQUFBLFVBQUFGLE9BQU8sQ0FBQ0csR0FBRyxDQUFDQyxRQUFRO01BQUE7TUFBQSxDQUFBdEIsYUFBQSxHQUFBb0IsQ0FBQSxVQUFJLGFBQWE7TUFDbERHLE1BQU0sRUFBRTtRQUNKQyxNQUFNLEVBQUU7VUFDSkMsSUFBSSxFQUFFQyxJQUFJLENBQUNDLEtBQUssQ0FBQ1QsT0FBTyxDQUFDVSxXQUFXLENBQUMsQ0FBQyxDQUFDQyxRQUFRLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQztVQUM5REMsS0FBSyxFQUFFSixJQUFJLENBQUNDLEtBQUssQ0FBQ1QsT0FBTyxDQUFDVSxXQUFXLENBQUMsQ0FBQyxDQUFDRyxTQUFTLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQztVQUNoRUMsSUFBSSxFQUFFO1FBQ1YsQ0FBQztRQUNEQyxRQUFRLEVBQUU7VUFDTkMsWUFBWSxFQUFFLENBQUMsQ0FBQ2hCLE9BQU8sQ0FBQ0csR0FBRyxDQUFDYyxnQkFBZ0I7VUFDNUNDLFlBQVksRUFBRSxDQUFDLENBQUNsQixPQUFPLENBQUNHLEdBQUcsQ0FBQ2dCLFVBQVU7VUFDdENDLG1CQUFtQixFQUFFLENBQUM7VUFDbEI7VUFBQSxDQUFBdEMsYUFBQSxHQUFBb0IsQ0FBQSxVQUFBRixPQUFPLENBQUNHLEdBQUcsQ0FBQ2tCLG1CQUFtQjtVQUFBO1VBQUEsQ0FBQXZDLGFBQUEsR0FBQW9CLENBQUEsVUFDL0JGLE9BQU8sQ0FBQ0csR0FBRyxDQUFDbUIscUJBQXFCO1FBRXpDO01BQ0o7SUFDSixDQUFDOztJQUVEO0lBQ0EsTUFBTUMsT0FBTztJQUFBO0lBQUEsQ0FBQXpDLGFBQUEsR0FBQUUsQ0FBQSxPQUFHLElBQUlRLElBQUksQ0FBQyxDQUFDO0lBQUM7SUFBQVYsYUFBQSxHQUFBRSxDQUFBO0lBQzNCVyxZQUFZLENBQUM2QixZQUFZLEdBQUdELE9BQU8sR0FBR2hDLFNBQVM7SUFBQztJQUFBVCxhQUFBLEdBQUFFLENBQUE7SUFDaERXLFlBQVksQ0FBQzhCLGdCQUFnQixHQUFHLElBQUk7SUFBQztJQUFBM0MsYUFBQSxHQUFBRSxDQUFBO0lBRXJDRyxPQUFPLENBQUNHLEdBQUcsQ0FBQyxxQ0FBcUMsQ0FBQztJQUFDO0lBQUFSLGFBQUEsR0FBQUUsQ0FBQTtJQUVuREcsT0FBTyxDQUFDdUMsR0FBRyxHQUFHO01BQ1Y5QixNQUFNLEVBQUUsR0FBRztNQUNYK0IsT0FBTyxFQUFFO1FBQ0wsY0FBYyxFQUFFLGtCQUFrQjtRQUNsQyxlQUFlLEVBQUU7TUFDckIsQ0FBQztNQUNEQyxJQUFJLEVBQUVqQztJQUNWLENBQUM7RUFFTCxDQUFDLENBQUMsT0FBT2tDLEtBQUssRUFBRTtJQUFBO0lBQUEvQyxhQUFBLEdBQUFFLENBQUE7SUFDWkcsT0FBTyxDQUFDRyxHQUFHLENBQUN1QyxLQUFLLENBQUMsc0JBQXNCLEVBQUVBLEtBQUssQ0FBQztJQUFDO0lBQUEvQyxhQUFBLEdBQUFFLENBQUE7SUFFakRHLE9BQU8sQ0FBQ3VDLEdBQUcsR0FBRztNQUNWOUIsTUFBTSxFQUFFLEdBQUc7TUFDWCtCLE9BQU8sRUFBRTtRQUNMLGNBQWMsRUFBRSxrQkFBa0I7UUFDbEMsZUFBZSxFQUFFO01BQ3JCLENBQUM7TUFDREMsSUFBSSxFQUFFO1FBQ0ZoQyxNQUFNLEVBQUUsV0FBVztRQUNuQkgsU0FBUztRQUNUSSxPQUFPLEVBQUUsMkJBQTJCO1FBQ3BDZ0MsS0FBSyxFQUFFQSxLQUFLLENBQUNDLE9BQU87UUFDcEJ6QixNQUFNLEVBQUU7VUFDSjBCLG1CQUFtQixFQUFFO1FBQ3pCO01BQ0o7SUFDSixDQUFDO0VBQ0w7QUFDSixDQUFDIiwiaWdub3JlTGlzdCI6W119