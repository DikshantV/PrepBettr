{"file":"/Users/dikshantvashistha/PrepBettr/lib/azure-config.ts","mappings":"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","names":[],"sources":["/Users/dikshantvashistha/PrepBettr/lib/azure-config.ts"],"sourcesContent":["import { DefaultAzureCredential } from '@azure/identity';\nimport { SecretClient } from '@azure/keyvault-secrets';\n\n// Client-side safety check - provide empty implementations when running on client\nconst isClient = typeof window !== 'undefined';\n\nif (isClient) {\n  console.warn('[Azure Config] Running on client side - using fallback implementations');\n}\n\n// Azure Key Vault configuration\nconst AZURE_KEY_VAULT_URI = process.env.AZURE_KEY_VAULT_URI || 'https://prepbettr-keyvault-083.vault.azure.net/';\n\ninterface AzureSecrets {\n  speechKey: string;\n  speechEndpoint: string;\n  azureOpenAIKey: string;\n  azureOpenAIEndpoint: string;\n  azureOpenAIDeployment: string;\n  // Firebase configuration\n  firebaseProjectId: string;\n  firebaseClientEmail: string;\n  firebasePrivateKey: string;\n  firebaseClientKey?: string;\n  // Additional Azure services\n  azureFormRecognizerKey?: string;\n  azureFormRecognizerEndpoint?: string;\n  // Storage configuration\n  azureStorageAccount?: string;\n  azureStorageAccountKey?: string;\n  azureStorageConnectionString?: string;\n  azureStorageContainer?: string;\n  storageProvider?: string;\n}\n\nlet cachedSecrets: AzureSecrets | null = null;\n\n/**\n * Initialize Azure Key Vault client\n */\nfunction createKeyVaultClient(): SecretClient {\n  if (!AZURE_KEY_VAULT_URI) {\n    throw new Error('AZURE_KEY_VAULT_URI environment variable is required');\n  }\n  \n  const credential = new DefaultAzureCredential();\n  return new SecretClient(AZURE_KEY_VAULT_URI, credential);\n}\n\n/**\n * Clear cached secrets (useful when Azure keys are renewed)\n */\nexport function clearAzureSecretsCache(): void {\n  if (isClient) return;\n  console.log('🔄 Clearing Azure secrets cache...');\n  cachedSecrets = null;\n}\n\n/**\n * Fetch secrets from Azure Key Vault\n */\nexport async function fetchAzureSecrets(forceRefresh: boolean = false): Promise<AzureSecrets> {\n  if (isClient) {\n    return {\n      speechKey: '',\n      speechEndpoint: '',\n      azureOpenAIKey: '',\n      azureOpenAIEndpoint: '',\n      azureOpenAIDeployment: '',\n      firebaseProjectId: '',\n      firebaseClientEmail: '',\n      firebasePrivateKey: ''\n    };\n  }\n  // Clear cache if force refresh is requested\n  if (forceRefresh) {\n    clearAzureSecretsCache();\n  }\n  \n  // Return cached secrets if available\n  if (cachedSecrets) {\n    return cachedSecrets;\n  }\n\n  try {\n    console.log('🔑 Fetching secrets from Azure Key Vault...');\n    const client = createKeyVaultClient();\n\n    // Helper function to suppress expected 404 errors for optional secrets\n    const getOptionalSecret = (name: string) => \n      client.getSecret(name).catch(err => {\n        if (err.statusCode !== 404) {\n          console.warn(`⚠️ Unexpected error fetching optional secret '${name}':`, err.message);\n        }\n        return null;\n      });\n\n    // Fetch all secrets (some are optional)\n    const [\n      speechKey, speechEndpoint, azureOpenAIKey, azureOpenAIEndpoint, azureOpenAIDeployment,\n      firebaseProjectId, firebaseClientEmail, firebasePrivateKey, firebaseClientKey,\n      azureFormRecognizerKey, azureFormRecognizerEndpoint, \n      azureStorageAccount, azureStorageAccountKey, azureStorageConnectionString,\n      azureStorageContainer, storageProvider\n    ] = await Promise.all([\n      client.getSecret('speech-key'),\n      client.getSecret('speech-endpoint'),\n      client.getSecret('azure-openai-key'),\n      client.getSecret('azure-openai-endpoint'),\n      client.getSecret('azure-openai-deployment'),\n      getOptionalSecret('firebase-project-id'),\n      getOptionalSecret('firebase-client-email'),\n      getOptionalSecret('firebase-private-key'),\n      getOptionalSecret('NEXT-PUBLIC-FIREBASE-CLIENT-KEY'),\n      getOptionalSecret('azure-form-recognizer-key'),\n      getOptionalSecret('azure-form-recognizer-endpoint'),\n      getOptionalSecret('azure-storage-account'),\n      getOptionalSecret('azure-storage-account-key'),\n      getOptionalSecret('azure-storage-connection-string'),\n      getOptionalSecret('azure-storage-container'),\n      getOptionalSecret('storage-provider')\n    ]);\n\n    // Validate only Azure-related secrets (Firebase can come from env vars)\n    const requiredAzureSecrets = {\n      speechKey: speechKey?.value,\n      speechEndpoint: speechEndpoint?.value,\n      azureOpenAIKey: azureOpenAIKey?.value,\n      azureOpenAIEndpoint: azureOpenAIEndpoint?.value,\n      azureOpenAIDeployment: azureOpenAIDeployment?.value\n    };\n\n    const missingAzureSecrets = Object.entries(requiredAzureSecrets)\n      .filter(([_, value]) => !value)\n      .map(([key, _]) => key);\n\n    if (missingAzureSecrets.length > 0) {\n      throw new Error(`Required Azure secrets missing from Key Vault: ${missingAzureSecrets.join(', ')}`);\n    }\n\n    cachedSecrets = {\n      speechKey: speechKey.value!,\n      speechEndpoint: speechEndpoint.value!,\n      azureOpenAIKey: azureOpenAIKey.value!,\n      azureOpenAIEndpoint: azureOpenAIEndpoint.value!,\n      azureOpenAIDeployment: azureOpenAIDeployment.value!,\n      firebaseProjectId: firebaseProjectId?.value || process.env.FIREBASE_PROJECT_ID || '',\n      firebaseClientEmail: firebaseClientEmail?.value || process.env.FIREBASE_CLIENT_EMAIL || '',\n      firebasePrivateKey: firebasePrivateKey?.value || process.env.FIREBASE_PRIVATE_KEY || '',\n      firebaseClientKey: firebaseClientKey?.value || '',\n      azureFormRecognizerKey: azureFormRecognizerKey?.value,\n      azureFormRecognizerEndpoint: azureFormRecognizerEndpoint?.value,\n      azureStorageAccount: azureStorageAccount?.value,\n      azureStorageAccountKey: azureStorageAccountKey?.value,\n      azureStorageConnectionString: azureStorageConnectionString?.value,\n      azureStorageContainer: azureStorageContainer?.value,\n      storageProvider: storageProvider?.value\n    };\n\n    console.log('✅ Azure secrets loaded successfully');\n    return cachedSecrets;\n\n  } catch (error) {\n    console.error('❌ Failed to fetch Azure secrets:', error);\n    \n    // Fallback to environment variables if Key Vault fails\n    console.log('🔄 Falling back to environment variables...');\n    const fallbackSecrets: AzureSecrets = {\n      speechKey: process.env.AZURE_SPEECH_KEY || process.env.SPEECH_KEY || '',\n      speechEndpoint: process.env.SPEECH_ENDPOINT || 'https://eastus2.api.cognitive.microsoft.com/',\n      azureOpenAIKey: process.env.AZURE_OPENAI_API_KEY || process.env.AZURE_OPENAI_KEY || '',\n      azureOpenAIEndpoint: process.env.AZURE_OPENAI_ENDPOINT || '',\n      azureOpenAIDeployment: process.env.AZURE_OPENAI_DEPLOYMENT || '',\n      // Firebase fallbacks\n      firebaseProjectId: process.env.FIREBASE_PROJECT_ID || '',\n      firebaseClientEmail: process.env.FIREBASE_CLIENT_EMAIL || '',\n      firebasePrivateKey: process.env.FIREBASE_PRIVATE_KEY || '',\n      firebaseClientKey: '',\n      // Optional fallbacks\n      azureFormRecognizerKey: process.env.AZURE_FORM_RECOGNIZER_KEY,\n      azureFormRecognizerEndpoint: process.env.AZURE_FORM_RECOGNIZER_ENDPOINT,\n      azureStorageAccount: process.env.AZURE_STORAGE_ACCOUNT_NAME,\n      azureStorageAccountKey: process.env.AZURE_STORAGE_ACCOUNT_KEY\n    };\n\n    // Only warn about critical missing secrets\n    const missingCritical = [];\n    if (!fallbackSecrets.speechKey) missingCritical.push('SPEECH_KEY');\n    if (!fallbackSecrets.azureOpenAIKey) missingCritical.push('AZURE_OPENAI_KEY');\n    \n    // Only warn about missing optional secrets if not available from environment\n    const missingOptional = [];\n    if (!fallbackSecrets.firebaseProjectId && !process.env.FIREBASE_PROJECT_ID) missingOptional.push('FIREBASE_PROJECT_ID');\n\n    if (missingCritical.length > 0) {\n      console.error(`❌ Critical secrets missing: ${missingCritical.join(', ')}`);\n    }\n    if (missingOptional.length > 0) {\n      console.warn(`⚠️ Optional secrets missing: ${missingOptional.join(', ')}`);\n    }\n\n    cachedSecrets = fallbackSecrets;\n    return cachedSecrets;\n  }\n}\n\n\n/**\n * Initialize environment variables from Azure Key Vault\n * This should be called at application startup\n */\nexport async function initializeAzureEnvironment(): Promise<void> {\n  if (isClient) return;\n  try {\n    const secrets = await fetchAzureSecrets();\n    \n    // Set Azure service environment variables\n    process.env.SPEECH_KEY = secrets.speechKey;\n    process.env.SPEECH_ENDPOINT = secrets.speechEndpoint;\n    \n    // Set Azure OpenAI environment variables\n    process.env.AZURE_OPENAI_KEY = secrets.azureOpenAIKey;\n    process.env.AZURE_OPENAI_ENDPOINT = secrets.azureOpenAIEndpoint;\n    process.env.AZURE_OPENAI_DEPLOYMENT = secrets.azureOpenAIDeployment;\n    \n    // Set Firebase environment variables\n    process.env.FIREBASE_PROJECT_ID = secrets.firebaseProjectId;\n    process.env.FIREBASE_CLIENT_EMAIL = secrets.firebaseClientEmail;\n    process.env.FIREBASE_PRIVATE_KEY = secrets.firebasePrivateKey;\n    \n    // Set client-side environment variables using string concatenation to avoid Next.js inlining\n    const nextPublicPrefix = 'NEXT_PUBLIC_';\n    process.env[nextPublicPrefix + 'SPEECH_KEY'] = secrets.speechKey;\n    process.env[nextPublicPrefix + 'SPEECH_ENDPOINT'] = secrets.speechEndpoint;\n    process.env[nextPublicPrefix + 'AZURE_OPENAI_API_KEY'] = secrets.azureOpenAIKey;\n    process.env[nextPublicPrefix + 'AZURE_OPENAI_ENDPOINT'] = secrets.azureOpenAIEndpoint;\n    process.env[nextPublicPrefix + 'AZURE_OPENAI_DEPLOYMENT'] = secrets.azureOpenAIDeployment;\n    process.env[nextPublicPrefix + 'FIREBASE_PROJECT_ID'] = secrets.firebaseProjectId;\n    \n    // Set the Firebase client key from secrets or environment\n    if (secrets.firebaseClientKey) {\n      process.env[nextPublicPrefix + 'FIREBASE_CLIENT_KEY'] = secrets.firebaseClientKey;\n      console.log('🔑 Firebase client key set from Azure Key Vault');\n    } else {\n      console.warn('⚠️ Firebase client key not found in Azure Key Vault');\n    }\n    \n    // Set optional Azure services if available\n    if (secrets.azureFormRecognizerKey) {\n      process.env.AZURE_FORM_RECOGNIZER_KEY = secrets.azureFormRecognizerKey;\n    }\n    if (secrets.azureFormRecognizerEndpoint) {\n      process.env.AZURE_FORM_RECOGNIZER_ENDPOINT = secrets.azureFormRecognizerEndpoint;\n    }\n    // Set storage configuration\n    if (secrets.azureStorageAccount) {\n      process.env.AZURE_STORAGE_ACCOUNT = secrets.azureStorageAccount;\n    }\n    if (secrets.azureStorageAccountKey) {\n      process.env.AZURE_STORAGE_ACCOUNT_KEY = secrets.azureStorageAccountKey;\n    }\n    if (secrets.azureStorageConnectionString) {\n      process.env.AZURE_STORAGE_CONNECTION_STRING = secrets.azureStorageConnectionString;\n    }\n    if (secrets.azureStorageContainer) {\n      process.env.AZURE_STORAGE_CONTAINER = secrets.azureStorageContainer;\n    }\n    if (secrets.storageProvider) {\n      process.env.STORAGE_PROVIDER = secrets.storageProvider;\n    }\n\n    console.log('🌟 Azure environment initialized successfully');\n  } catch (error) {\n    console.error('❌ Failed to initialize Azure environment:', error);\n    throw error;\n  }\n}\n\n/**\n * Get generic configuration values (used by storage abstraction and other services)\n */\nexport async function getConfiguration(): Promise<Record<string, string>> {\n  try {\n    const secrets = await fetchAzureSecrets();\n    \n    return {\n      // Azure Storage configuration\n      'AZURE_STORAGE_ACCOUNT': secrets.azureStorageAccount || process.env.AZURE_STORAGE_ACCOUNT || 'prepbettrstorage684',\n      'AZURE_STORAGE_ACCOUNT_KEY': secrets.azureStorageAccountKey || process.env.AZURE_STORAGE_ACCOUNT_KEY || '',\n      'AZURE_STORAGE_CONNECTION_STRING': secrets.azureStorageConnectionString || process.env.AZURE_STORAGE_CONNECTION_STRING || '',\n      'AZURE_STORAGE_CONTAINER': secrets.azureStorageContainer || process.env.AZURE_STORAGE_CONTAINER || 'resumes',\n      'STORAGE_PROVIDER': secrets.storageProvider || process.env.STORAGE_PROVIDER || 'firebase',\n      \n      // Azure AI services\n      'AZURE_OPENAI_KEY': secrets.azureOpenAIKey,\n      'AZURE_OPENAI_ENDPOINT': secrets.azureOpenAIEndpoint,\n      'AZURE_OPENAI_DEPLOYMENT': secrets.azureOpenAIDeployment,\n      'AZURE_SPEECH_KEY': secrets.speechKey,\n      'AZURE_SPEECH_ENDPOINT': secrets.speechEndpoint,\n      'AZURE_FORM_RECOGNIZER_KEY': secrets.azureFormRecognizerKey || '',\n      'AZURE_FORM_RECOGNIZER_ENDPOINT': secrets.azureFormRecognizerEndpoint || '',\n      \n      // Firebase configuration\n      'FIREBASE_PROJECT_ID': secrets.firebaseProjectId,\n      'FIREBASE_CLIENT_EMAIL': secrets.firebaseClientEmail,\n      'FIREBASE_PRIVATE_KEY': secrets.firebasePrivateKey,\n      'FIREBASE_CLIENT_KEY': secrets.firebaseClientKey || ''\n    };\n  } catch (error) {\n    console.warn('Failed to get configuration from Azure, using environment variables:', error);\n    \n    // Fallback to environment variables only\n    return {\n      'AZURE_STORAGE_ACCOUNT': process.env.AZURE_STORAGE_ACCOUNT || 'prepbettrstorage684',\n      'AZURE_STORAGE_ACCOUNT_KEY': process.env.AZURE_STORAGE_ACCOUNT_KEY || '',\n      'AZURE_STORAGE_CONNECTION_STRING': process.env.AZURE_STORAGE_CONNECTION_STRING || '',\n      'AZURE_STORAGE_CONTAINER': process.env.AZURE_STORAGE_CONTAINER || 'resumes',\n      'STORAGE_PROVIDER': process.env.STORAGE_PROVIDER || 'firebase',\n      'AZURE_OPENAI_KEY': process.env.AZURE_OPENAI_KEY || '',\n      'AZURE_OPENAI_ENDPOINT': process.env.AZURE_OPENAI_ENDPOINT || '',\n      'AZURE_OPENAI_DEPLOYMENT': process.env.AZURE_OPENAI_DEPLOYMENT || '',\n      'AZURE_SPEECH_KEY': process.env.AZURE_SPEECH_KEY || process.env.SPEECH_KEY || '',\n      'AZURE_SPEECH_ENDPOINT': process.env.SPEECH_ENDPOINT || '',\n      'AZURE_FORM_RECOGNIZER_KEY': process.env.AZURE_FORM_RECOGNIZER_KEY || '',\n      'AZURE_FORM_RECOGNIZER_ENDPOINT': process.env.AZURE_FORM_RECOGNIZER_ENDPOINT || '',\n      'FIREBASE_PROJECT_ID': process.env.FIREBASE_PROJECT_ID || '',\n      'FIREBASE_CLIENT_EMAIL': process.env.FIREBASE_CLIENT_EMAIL || '',\n      'FIREBASE_PRIVATE_KEY': process.env.FIREBASE_PRIVATE_KEY || '',\n      // Use string concatenation to avoid Next.js inlining\n      'FIREBASE_CLIENT_KEY': process.env['NEXT_PUBLIC_' + 'FIREBASE_CLIENT_KEY'] || ''\n    };\n  }\n}\n\n/**\n * Get current Azure configuration (for debugging)\n */\nexport function getAzureConfig() {\n  const nextPublicPrefix = 'NEXT_PUBLIC_';\n  return {\n    keyVaultUri: AZURE_KEY_VAULT_URI,\n    hasSecretsCache: !!cachedSecrets,\n    environment: {\n      speechKey: !!process.env[nextPublicPrefix + 'SPEECH_KEY'],\n      speechEndpoint: !!process.env[nextPublicPrefix + 'SPEECH_ENDPOINT'],\n      azureOpenAIKey: !!process.env.AZURE_OPENAI_KEY,\n      azureOpenAIEndpoint: !!process.env.AZURE_OPENAI_ENDPOINT,\n      azureOpenAIDeployment: !!process.env.AZURE_OPENAI_DEPLOYMENT\n    }\n  };\n}\n"],"version":3}