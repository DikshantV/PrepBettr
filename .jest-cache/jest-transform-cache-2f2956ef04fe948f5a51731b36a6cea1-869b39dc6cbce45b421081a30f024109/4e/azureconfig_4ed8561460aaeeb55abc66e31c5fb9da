df8e90434aa0c131ddebadd0854a2993
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.clearAzureSecretsCache = clearAzureSecretsCache;
exports.fetchAzureSecrets = fetchAzureSecrets;
exports.initializeAzureEnvironment = initializeAzureEnvironment;
exports.getConfiguration = getConfiguration;
exports.getAzureConfig = getAzureConfig;
const identity_1 = require("@azure/identity");
const keyvault_secrets_1 = require("@azure/keyvault-secrets");
// Client-side safety check - provide empty implementations when running on client
const isClient = typeof window !== 'undefined';
if (isClient) {
    console.warn('[Azure Config] Running on client side - using fallback implementations');
}
// Azure Key Vault configuration
const AZURE_KEY_VAULT_URI = process.env.AZURE_KEY_VAULT_URI || 'https://prepbettr-keyvault-083.vault.azure.net/';
let cachedSecrets = null;
/**
 * Initialize Azure Key Vault client
 */
function createKeyVaultClient() {
    if (!AZURE_KEY_VAULT_URI) {
        throw new Error('AZURE_KEY_VAULT_URI environment variable is required');
    }
    const credential = new identity_1.DefaultAzureCredential();
    return new keyvault_secrets_1.SecretClient(AZURE_KEY_VAULT_URI, credential);
}
/**
 * Clear cached secrets (useful when Azure keys are renewed)
 */
function clearAzureSecretsCache() {
    if (isClient)
        return;
    console.log('üîÑ Clearing Azure secrets cache...');
    cachedSecrets = null;
}
/**
 * Fetch secrets from Azure Key Vault
 */
async function fetchAzureSecrets(forceRefresh = false) {
    if (isClient) {
        return {
            speechKey: '',
            speechEndpoint: '',
            azureOpenAIKey: '',
            azureOpenAIEndpoint: '',
            azureOpenAIDeployment: '',
            firebaseProjectId: '',
            firebaseClientEmail: '',
            firebasePrivateKey: ''
        };
    }
    // Clear cache if force refresh is requested
    if (forceRefresh) {
        clearAzureSecretsCache();
    }
    // Return cached secrets if available
    if (cachedSecrets) {
        return cachedSecrets;
    }
    try {
        console.log('üîë Fetching secrets from Azure Key Vault...');
        const client = createKeyVaultClient();
        // Helper function to suppress expected 404 errors for optional secrets
        const getOptionalSecret = (name) => client.getSecret(name).catch(err => {
            if (err.statusCode !== 404) {
                console.warn(`‚ö†Ô∏è Unexpected error fetching optional secret '${name}':`, err.message);
            }
            return null;
        });
        // Fetch all secrets (some are optional)
        const [speechKey, speechEndpoint, azureOpenAIKey, azureOpenAIEndpoint, azureOpenAIDeployment, firebaseProjectId, firebaseClientEmail, firebasePrivateKey, firebaseClientKey, azureFormRecognizerKey, azureFormRecognizerEndpoint, azureStorageAccount, azureStorageAccountKey, azureStorageConnectionString, azureStorageContainer, storageProvider] = await Promise.all([
            client.getSecret('speech-key'),
            client.getSecret('speech-endpoint'),
            client.getSecret('azure-openai-key'),
            client.getSecret('azure-openai-endpoint'),
            client.getSecret('azure-openai-deployment'),
            getOptionalSecret('firebase-project-id'),
            getOptionalSecret('firebase-client-email'),
            getOptionalSecret('firebase-private-key'),
            getOptionalSecret('NEXT-PUBLIC-FIREBASE-CLIENT-KEY'),
            getOptionalSecret('azure-form-recognizer-key'),
            getOptionalSecret('azure-form-recognizer-endpoint'),
            getOptionalSecret('azure-storage-account'),
            getOptionalSecret('azure-storage-account-key'),
            getOptionalSecret('azure-storage-connection-string'),
            getOptionalSecret('azure-storage-container'),
            getOptionalSecret('storage-provider')
        ]);
        // Validate only Azure-related secrets (Firebase can come from env vars)
        const requiredAzureSecrets = {
            speechKey: speechKey === null || speechKey === void 0 ? void 0 : speechKey.value,
            speechEndpoint: speechEndpoint === null || speechEndpoint === void 0 ? void 0 : speechEndpoint.value,
            azureOpenAIKey: azureOpenAIKey === null || azureOpenAIKey === void 0 ? void 0 : azureOpenAIKey.value,
            azureOpenAIEndpoint: azureOpenAIEndpoint === null || azureOpenAIEndpoint === void 0 ? void 0 : azureOpenAIEndpoint.value,
            azureOpenAIDeployment: azureOpenAIDeployment === null || azureOpenAIDeployment === void 0 ? void 0 : azureOpenAIDeployment.value
        };
        const missingAzureSecrets = Object.entries(requiredAzureSecrets)
            .filter(([_, value]) => !value)
            .map(([key, _]) => key);
        if (missingAzureSecrets.length > 0) {
            throw new Error(`Required Azure secrets missing from Key Vault: ${missingAzureSecrets.join(', ')}`);
        }
        cachedSecrets = {
            speechKey: speechKey.value,
            speechEndpoint: speechEndpoint.value,
            azureOpenAIKey: azureOpenAIKey.value,
            azureOpenAIEndpoint: azureOpenAIEndpoint.value,
            azureOpenAIDeployment: azureOpenAIDeployment.value,
            firebaseProjectId: (firebaseProjectId === null || firebaseProjectId === void 0 ? void 0 : firebaseProjectId.value) || process.env.FIREBASE_PROJECT_ID || '',
            firebaseClientEmail: (firebaseClientEmail === null || firebaseClientEmail === void 0 ? void 0 : firebaseClientEmail.value) || process.env.FIREBASE_CLIENT_EMAIL || '',
            firebasePrivateKey: (firebasePrivateKey === null || firebasePrivateKey === void 0 ? void 0 : firebasePrivateKey.value) || process.env.FIREBASE_PRIVATE_KEY || '',
            firebaseClientKey: (firebaseClientKey === null || firebaseClientKey === void 0 ? void 0 : firebaseClientKey.value) || '',
            azureFormRecognizerKey: azureFormRecognizerKey === null || azureFormRecognizerKey === void 0 ? void 0 : azureFormRecognizerKey.value,
            azureFormRecognizerEndpoint: azureFormRecognizerEndpoint === null || azureFormRecognizerEndpoint === void 0 ? void 0 : azureFormRecognizerEndpoint.value,
            azureStorageAccount: azureStorageAccount === null || azureStorageAccount === void 0 ? void 0 : azureStorageAccount.value,
            azureStorageAccountKey: azureStorageAccountKey === null || azureStorageAccountKey === void 0 ? void 0 : azureStorageAccountKey.value,
            azureStorageConnectionString: azureStorageConnectionString === null || azureStorageConnectionString === void 0 ? void 0 : azureStorageConnectionString.value,
            azureStorageContainer: azureStorageContainer === null || azureStorageContainer === void 0 ? void 0 : azureStorageContainer.value,
            storageProvider: storageProvider === null || storageProvider === void 0 ? void 0 : storageProvider.value
        };
        console.log('‚úÖ Azure secrets loaded successfully');
        return cachedSecrets;
    }
    catch (error) {
        console.error('‚ùå Failed to fetch Azure secrets:', error);
        // Fallback to environment variables if Key Vault fails
        console.log('üîÑ Falling back to environment variables...');
        const fallbackSecrets = {
            speechKey: process.env.AZURE_SPEECH_KEY || process.env.SPEECH_KEY || '',
            speechEndpoint: process.env.SPEECH_ENDPOINT || 'https://eastus2.api.cognitive.microsoft.com/',
            azureOpenAIKey: process.env.AZURE_OPENAI_API_KEY || process.env.AZURE_OPENAI_KEY || '',
            azureOpenAIEndpoint: process.env.AZURE_OPENAI_ENDPOINT || '',
            azureOpenAIDeployment: process.env.AZURE_OPENAI_DEPLOYMENT || '',
            // Firebase fallbacks
            firebaseProjectId: process.env.FIREBASE_PROJECT_ID || '',
            firebaseClientEmail: process.env.FIREBASE_CLIENT_EMAIL || '',
            firebasePrivateKey: process.env.FIREBASE_PRIVATE_KEY || '',
            firebaseClientKey: '',
            // Optional fallbacks
            azureFormRecognizerKey: process.env.AZURE_FORM_RECOGNIZER_KEY,
            azureFormRecognizerEndpoint: process.env.AZURE_FORM_RECOGNIZER_ENDPOINT,
            azureStorageAccount: process.env.AZURE_STORAGE_ACCOUNT_NAME,
            azureStorageAccountKey: process.env.AZURE_STORAGE_ACCOUNT_KEY
        };
        // Only warn about critical missing secrets
        const missingCritical = [];
        if (!fallbackSecrets.speechKey)
            missingCritical.push('SPEECH_KEY');
        if (!fallbackSecrets.azureOpenAIKey)
            missingCritical.push('AZURE_OPENAI_KEY');
        // Only warn about missing optional secrets if not available from environment
        const missingOptional = [];
        if (!fallbackSecrets.firebaseProjectId && !process.env.FIREBASE_PROJECT_ID)
            missingOptional.push('FIREBASE_PROJECT_ID');
        if (missingCritical.length > 0) {
            console.error(`‚ùå Critical secrets missing: ${missingCritical.join(', ')}`);
        }
        if (missingOptional.length > 0) {
            console.warn(`‚ö†Ô∏è Optional secrets missing: ${missingOptional.join(', ')}`);
        }
        cachedSecrets = fallbackSecrets;
        return cachedSecrets;
    }
}
/**
 * Initialize environment variables from Azure Key Vault
 * This should be called at application startup
 */
async function initializeAzureEnvironment() {
    if (isClient)
        return;
    try {
        const secrets = await fetchAzureSecrets();
        // Set Azure service environment variables
        process.env.SPEECH_KEY = secrets.speechKey;
        process.env.SPEECH_ENDPOINT = secrets.speechEndpoint;
        // Set Azure OpenAI environment variables
        process.env.AZURE_OPENAI_KEY = secrets.azureOpenAIKey;
        process.env.AZURE_OPENAI_ENDPOINT = secrets.azureOpenAIEndpoint;
        process.env.AZURE_OPENAI_DEPLOYMENT = secrets.azureOpenAIDeployment;
        // Set Firebase environment variables
        process.env.FIREBASE_PROJECT_ID = secrets.firebaseProjectId;
        process.env.FIREBASE_CLIENT_EMAIL = secrets.firebaseClientEmail;
        process.env.FIREBASE_PRIVATE_KEY = secrets.firebasePrivateKey;
        // Set client-side environment variables using string concatenation to avoid Next.js inlining
        const nextPublicPrefix = 'NEXT_PUBLIC_';
        process.env[nextPublicPrefix + 'SPEECH_KEY'] = secrets.speechKey;
        process.env[nextPublicPrefix + 'SPEECH_ENDPOINT'] = secrets.speechEndpoint;
        process.env[nextPublicPrefix + 'AZURE_OPENAI_API_KEY'] = secrets.azureOpenAIKey;
        process.env[nextPublicPrefix + 'AZURE_OPENAI_ENDPOINT'] = secrets.azureOpenAIEndpoint;
        process.env[nextPublicPrefix + 'AZURE_OPENAI_DEPLOYMENT'] = secrets.azureOpenAIDeployment;
        process.env[nextPublicPrefix + 'FIREBASE_PROJECT_ID'] = secrets.firebaseProjectId;
        // Set the Firebase client key from secrets or environment
        if (secrets.firebaseClientKey) {
            process.env[nextPublicPrefix + 'FIREBASE_CLIENT_KEY'] = secrets.firebaseClientKey;
            console.log('üîë Firebase client key set from Azure Key Vault');
        }
        else {
            console.warn('‚ö†Ô∏è Firebase client key not found in Azure Key Vault');
        }
        // Set optional Azure services if available
        if (secrets.azureFormRecognizerKey) {
            process.env.AZURE_FORM_RECOGNIZER_KEY = secrets.azureFormRecognizerKey;
        }
        if (secrets.azureFormRecognizerEndpoint) {
            process.env.AZURE_FORM_RECOGNIZER_ENDPOINT = secrets.azureFormRecognizerEndpoint;
        }
        // Set storage configuration
        if (secrets.azureStorageAccount) {
            process.env.AZURE_STORAGE_ACCOUNT = secrets.azureStorageAccount;
        }
        if (secrets.azureStorageAccountKey) {
            process.env.AZURE_STORAGE_ACCOUNT_KEY = secrets.azureStorageAccountKey;
        }
        if (secrets.azureStorageConnectionString) {
            process.env.AZURE_STORAGE_CONNECTION_STRING = secrets.azureStorageConnectionString;
        }
        if (secrets.azureStorageContainer) {
            process.env.AZURE_STORAGE_CONTAINER = secrets.azureStorageContainer;
        }
        if (secrets.storageProvider) {
            process.env.STORAGE_PROVIDER = secrets.storageProvider;
        }
        console.log('üåü Azure environment initialized successfully');
    }
    catch (error) {
        console.error('‚ùå Failed to initialize Azure environment:', error);
        throw error;
    }
}
/**
 * Get generic configuration values (used by storage abstraction and other services)
 */
async function getConfiguration() {
    try {
        const secrets = await fetchAzureSecrets();
        return {
            // Azure Storage configuration
            'AZURE_STORAGE_ACCOUNT': secrets.azureStorageAccount || process.env.AZURE_STORAGE_ACCOUNT || 'prepbettrstorage684',
            'AZURE_STORAGE_ACCOUNT_KEY': secrets.azureStorageAccountKey || process.env.AZURE_STORAGE_ACCOUNT_KEY || '',
            'AZURE_STORAGE_CONNECTION_STRING': secrets.azureStorageConnectionString || process.env.AZURE_STORAGE_CONNECTION_STRING || '',
            'AZURE_STORAGE_CONTAINER': secrets.azureStorageContainer || process.env.AZURE_STORAGE_CONTAINER || 'resumes',
            'STORAGE_PROVIDER': secrets.storageProvider || process.env.STORAGE_PROVIDER || 'firebase',
            // Azure AI services
            'AZURE_OPENAI_KEY': secrets.azureOpenAIKey,
            'AZURE_OPENAI_ENDPOINT': secrets.azureOpenAIEndpoint,
            'AZURE_OPENAI_DEPLOYMENT': secrets.azureOpenAIDeployment,
            'AZURE_SPEECH_KEY': secrets.speechKey,
            'AZURE_SPEECH_ENDPOINT': secrets.speechEndpoint,
            'AZURE_FORM_RECOGNIZER_KEY': secrets.azureFormRecognizerKey || '',
            'AZURE_FORM_RECOGNIZER_ENDPOINT': secrets.azureFormRecognizerEndpoint || '',
            // Firebase configuration
            'FIREBASE_PROJECT_ID': secrets.firebaseProjectId,
            'FIREBASE_CLIENT_EMAIL': secrets.firebaseClientEmail,
            'FIREBASE_PRIVATE_KEY': secrets.firebasePrivateKey,
            'FIREBASE_CLIENT_KEY': secrets.firebaseClientKey || ''
        };
    }
    catch (error) {
        console.warn('Failed to get configuration from Azure, using environment variables:', error);
        // Fallback to environment variables only
        return {
            'AZURE_STORAGE_ACCOUNT': process.env.AZURE_STORAGE_ACCOUNT || 'prepbettrstorage684',
            'AZURE_STORAGE_ACCOUNT_KEY': process.env.AZURE_STORAGE_ACCOUNT_KEY || '',
            'AZURE_STORAGE_CONNECTION_STRING': process.env.AZURE_STORAGE_CONNECTION_STRING || '',
            'AZURE_STORAGE_CONTAINER': process.env.AZURE_STORAGE_CONTAINER || 'resumes',
            'STORAGE_PROVIDER': process.env.STORAGE_PROVIDER || 'firebase',
            'AZURE_OPENAI_KEY': process.env.AZURE_OPENAI_KEY || '',
            'AZURE_OPENAI_ENDPOINT': process.env.AZURE_OPENAI_ENDPOINT || '',
            'AZURE_OPENAI_DEPLOYMENT': process.env.AZURE_OPENAI_DEPLOYMENT || '',
            'AZURE_SPEECH_KEY': process.env.AZURE_SPEECH_KEY || process.env.SPEECH_KEY || '',
            'AZURE_SPEECH_ENDPOINT': process.env.SPEECH_ENDPOINT || '',
            'AZURE_FORM_RECOGNIZER_KEY': process.env.AZURE_FORM_RECOGNIZER_KEY || '',
            'AZURE_FORM_RECOGNIZER_ENDPOINT': process.env.AZURE_FORM_RECOGNIZER_ENDPOINT || '',
            'FIREBASE_PROJECT_ID': process.env.FIREBASE_PROJECT_ID || '',
            'FIREBASE_CLIENT_EMAIL': process.env.FIREBASE_CLIENT_EMAIL || '',
            'FIREBASE_PRIVATE_KEY': process.env.FIREBASE_PRIVATE_KEY || '',
            // Use string concatenation to avoid Next.js inlining
            'FIREBASE_CLIENT_KEY': process.env['NEXT_PUBLIC_' + 'FIREBASE_CLIENT_KEY'] || ''
        };
    }
}
/**
 * Get current Azure configuration (for debugging)
 */
function getAzureConfig() {
    const nextPublicPrefix = 'NEXT_PUBLIC_';
    return {
        keyVaultUri: AZURE_KEY_VAULT_URI,
        hasSecretsCache: !!cachedSecrets,
        environment: {
            speechKey: !!process.env[nextPublicPrefix + 'SPEECH_KEY'],
            speechEndpoint: !!process.env[nextPublicPrefix + 'SPEECH_ENDPOINT'],
            azureOpenAIKey: !!process.env.AZURE_OPENAI_KEY,
            azureOpenAIEndpoint: !!process.env.AZURE_OPENAI_ENDPOINT,
            azureOpenAIDeployment: !!process.env.AZURE_OPENAI_DEPLOYMENT
        }
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,