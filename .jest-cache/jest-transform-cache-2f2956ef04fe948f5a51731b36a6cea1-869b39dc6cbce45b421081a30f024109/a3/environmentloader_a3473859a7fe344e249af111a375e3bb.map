{"file":"/Users/dikshantvashistha/PrepBettr/lib/config/environment-loader.ts","mappings":"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","names":[],"sources":["/Users/dikshantvashistha/PrepBettr/lib/config/environment-loader.ts"],"sourcesContent":["/**\n * Environment Configuration Loader\n * \n * Provides centralized environment variable management with hierarchical loading:\n * 1. Azure App Configuration (primary)\n * 2. Azure Key Vault (sensitive secrets)\n * 3. Environment variables (fallback for local dev)\n * \n * Special handling for Cosmos DB connection strings and other sensitive data.\n */\n\nimport { unifiedConfigService } from '@/lib/services/unified-config-service';\nimport { logServerError } from '@/lib/errors';\n\n// ===== INTERFACES =====\n\nexport interface CosmosDbConfig {\n  connectionString: string;\n  database: string;\n  maxRUPerSecond: number;\n  batchSize: number;\n  connectionTimeout: number;\n  retryAttempts: number;\n}\n\nexport interface EnvironmentConfig {\n  environment: 'development' | 'staging' | 'production';\n  cosmosDb: CosmosDbConfig;\n  azure: {\n    appConfigConnectionString?: string;\n    appConfigEndpoint?: string;\n    keyVaultUrl?: string;\n  };\n  firebase: {\n    clientKey?: string;\n    adminKey?: string;\n  };\n  features: {\n    enableCosmosDb: boolean;\n    enableUnifiedConfig: boolean;\n    enableKeyVault: boolean;\n  };\n}\n\n// ===== CONFIGURATION LOADER =====\n\nclass EnvironmentConfigurationLoader {\n  private config: EnvironmentConfig | null = null;\n  private initialized = false;\n\n  /**\n   * Load environment configuration with hierarchy\n   */\n  async load(): Promise<EnvironmentConfig> {\n    if (this.config && this.initialized) {\n      return this.config;\n    }\n\n    try {\n      console.log('üîß Loading environment configuration...');\n\n      // Load base environment settings\n      const environment = this.getEnvironment();\n\n      // Load Cosmos DB configuration\n      const cosmosDb = await this.loadCosmosDbConfig();\n\n      // Load Azure service configuration\n      const azure = await this.loadAzureConfig();\n\n      // Load Firebase configuration\n      const firebase = await this.loadFirebaseConfig();\n\n      // Load feature flags\n      const features = await this.loadFeatureConfig();\n\n      this.config = {\n        environment,\n        cosmosDb,\n        azure,\n        firebase,\n        features\n      };\n\n      this.initialized = true;\n      console.log(`‚úÖ Environment configuration loaded for ${environment}`);\n\n      return this.config;\n    } catch (error) {\n      console.error('‚ùå Failed to load environment configuration:', error);\n      logServerError(error as Error, { service: 'environment-loader', action: 'load' });\n\n      // Return minimal fallback configuration\n      return this.getFallbackConfig();\n    }\n  }\n\n  /**\n   * Load Cosmos DB configuration with hierarchy\n   */\n  private async loadCosmosDbConfig(): Promise<CosmosDbConfig> {\n    try {\n      // Try unified config service first\n      const [connectionString, maxRUPerSecond, batchSize, connectionTimeout, retryAttempts] = await Promise.all([\n        this.getConfigValue('data.cosmos.connectionString', process.env.COSMOS_CONNECTION_STRING),\n        this.getConfigValue('data.cosmos.maxRUPerSecond', 4000),\n        this.getConfigValue('data.cosmos.batchSize', 100),\n        this.getConfigValue('data.cosmos.connectionTimeout', 10000),\n        this.getConfigValue('data.cosmos.retryAttempts', 3)\n      ]);\n\n      if (!connectionString) {\n        throw new Error('Cosmos DB connection string is required');\n      }\n\n      return {\n        connectionString,\n        database: process.env.COSMOS_DATABASE || 'prepbettr',\n        maxRUPerSecond: Number(maxRUPerSecond),\n        batchSize: Number(batchSize),\n        connectionTimeout: Number(connectionTimeout),\n        retryAttempts: Number(retryAttempts)\n      };\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Failed to load Cosmos DB config from unified service, using environment fallback');\n      \n      return {\n        connectionString: process.env.COSMOS_CONNECTION_STRING || '',\n        database: process.env.COSMOS_DATABASE || 'prepbettr',\n        maxRUPerSecond: Number(process.env.COSMOS_MAX_RU_PER_SECOND || 4000),\n        batchSize: Number(process.env.COSMOS_BATCH_SIZE || 100),\n        connectionTimeout: Number(process.env.COSMOS_CONNECTION_TIMEOUT || 10000),\n        retryAttempts: Number(process.env.COSMOS_RETRY_ATTEMPTS || 3)\n      };\n    }\n  }\n\n  /**\n   * Load Azure service configuration\n   */\n  private async loadAzureConfig() {\n    return {\n      appConfigConnectionString: process.env.AZURE_APP_CONFIG_CONNECTION_STRING,\n      appConfigEndpoint: process.env.AZURE_APP_CONFIG_ENDPOINT,\n      keyVaultUrl: process.env.AZURE_KEY_VAULT_URL\n    };\n  }\n\n  /**\n   * Load Firebase configuration\n   */\n  private async loadFirebaseConfig() {\n    try {\n      const [clientKey, adminKey] = await Promise.all([\n        this.getConfigValue('auth.firebase.clientKey', process.env.NEXT_PUBLIC_FIREBASE_CLIENT_KEY),\n        this.getConfigValue('auth.firebase.adminKey', process.env.FIREBASE_ADMIN_KEY)\n      ]);\n\n      return { clientKey, adminKey };\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Failed to load Firebase config from unified service, using environment fallback');\n      \n      return {\n        clientKey: process.env.NEXT_PUBLIC_FIREBASE_CLIENT_KEY,\n        adminKey: process.env.FIREBASE_ADMIN_KEY\n      };\n    }\n  }\n\n  /**\n   * Load feature configuration\n   */\n  private async loadFeatureConfig() {\n    try {\n      const [enableCosmosDb, enableUnifiedConfig, enableKeyVault] = await Promise.all([\n        this.getConfigValue('features.enableCosmosDb', true),\n        this.getConfigValue('features.enableUnifiedConfig', true),\n        this.getConfigValue('features.enableKeyVault', false)\n      ]);\n\n      return {\n        enableCosmosDb: Boolean(enableCosmosDb),\n        enableUnifiedConfig: Boolean(enableUnifiedConfig),\n        enableKeyVault: Boolean(enableKeyVault)\n      };\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Failed to load feature config from unified service, using defaults');\n      \n      return {\n        enableCosmosDb: process.env.NODE_ENV === 'production',\n        enableUnifiedConfig: true,\n        enableKeyVault: false\n      };\n    }\n  }\n\n  /**\n   * Get configuration value with fallback hierarchy\n   */\n  private async getConfigValue<T>(key: string, fallback: T): Promise<T> {\n    try {\n      // Try unified config service first\n      const value = await unifiedConfigService.get(key, fallback);\n      return value;\n    } catch (error) {\n      // Fall back to provided fallback value\n      console.warn(`‚ö†Ô∏è Failed to get config ${key} from unified service:`, error);\n      return fallback;\n    }\n  }\n\n  /**\n   * Determine current environment\n   */\n  private getEnvironment(): 'development' | 'staging' | 'production' {\n    const env = process.env.NODE_ENV || 'development';\n    const vercelEnv = process.env.VERCEL_ENV;\n    \n    if (env === 'production') {\n      return 'production';\n    } else if (vercelEnv === 'preview' || process.env.APP_ENV === 'staging') {\n      return 'staging';\n    } else {\n      return 'development';\n    }\n  }\n\n  /**\n   * Get fallback configuration when loading fails\n   */\n  private getFallbackConfig(): EnvironmentConfig {\n    console.warn('‚ö†Ô∏è Using fallback environment configuration');\n    \n    return {\n      environment: this.getEnvironment(),\n      cosmosDb: {\n        connectionString: process.env.COSMOS_CONNECTION_STRING || '',\n        database: process.env.COSMOS_DATABASE || 'prepbettr',\n        maxRUPerSecond: 4000,\n        batchSize: 100,\n        connectionTimeout: 10000,\n        retryAttempts: 3\n      },\n      azure: {\n        appConfigConnectionString: process.env.AZURE_APP_CONFIG_CONNECTION_STRING,\n        appConfigEndpoint: process.env.AZURE_APP_CONFIG_ENDPOINT,\n        keyVaultUrl: process.env.AZURE_KEY_VAULT_URL\n      },\n      firebase: {\n        clientKey: process.env.NEXT_PUBLIC_FIREBASE_CLIENT_KEY,\n        adminKey: process.env.FIREBASE_ADMIN_KEY\n      },\n      features: {\n        enableCosmosDb: process.env.NODE_ENV === 'production',\n        enableUnifiedConfig: false, // Disable if unified config failed\n        enableKeyVault: false\n      }\n    };\n  }\n\n  /**\n   * Refresh configuration (useful for hot reloading in development)\n   */\n  async refresh(): Promise<EnvironmentConfig> {\n    this.config = null;\n    this.initialized = false;\n    return await this.load();\n  }\n\n  /**\n   * Get current configuration (throws if not loaded)\n   */\n  getCurrentConfig(): EnvironmentConfig {\n    if (!this.config) {\n      throw new Error('Environment configuration not loaded. Call load() first.');\n    }\n    return this.config;\n  }\n\n  /**\n   * Check if configuration is loaded\n   */\n  isLoaded(): boolean {\n    return this.initialized && this.config !== null;\n  }\n\n  /**\n   * Export configuration for deployment scripts\n   */\n  exportForDeployment(): Record<string, string> {\n    const config = this.getCurrentConfig();\n    \n    return {\n      NODE_ENV: config.environment,\n      COSMOS_DATABASE: config.cosmosDb.database,\n      COSMOS_MAX_RU_PER_SECOND: config.cosmosDb.maxRUPerSecond.toString(),\n      COSMOS_BATCH_SIZE: config.cosmosDb.batchSize.toString(),\n      COSMOS_CONNECTION_TIMEOUT: config.cosmosDb.connectionTimeout.toString(),\n      COSMOS_RETRY_ATTEMPTS: config.cosmosDb.retryAttempts.toString(),\n      // NOTE: Don't export connection strings or sensitive keys for security\n      AZURE_APP_CONFIG_ENDPOINT: config.azure.appConfigEndpoint || '',\n      AZURE_KEY_VAULT_URL: config.azure.keyVaultUrl || ''\n    };\n  }\n}\n\n// ===== SINGLETON INSTANCE =====\n\nexport const environmentLoader = new EnvironmentConfigurationLoader();\n\n// ===== CONVENIENCE FUNCTIONS =====\n\n/**\n * Load environment configuration (idempotent)\n */\nexport async function loadEnvironmentConfig(): Promise<EnvironmentConfig> {\n  return await environmentLoader.load();\n}\n\n/**\n * Get Cosmos DB configuration\n */\nexport async function getCosmosDbConfig(): Promise<CosmosDbConfig> {\n  const config = await loadEnvironmentConfig();\n  return config.cosmosDb;\n}\n\n/**\n * Check if Cosmos DB is enabled\n */\nexport async function isCosmosDbEnabled(): Promise<boolean> {\n  try {\n    const config = await loadEnvironmentConfig();\n    return config.features.enableCosmosDb && !!config.cosmosDb.connectionString;\n  } catch (error) {\n    console.warn('Failed to check Cosmos DB status:', error);\n    return false;\n  }\n}\n\n/**\n * Get environment name\n */\nexport async function getEnvironmentName(): Promise<string> {\n  const config = await loadEnvironmentConfig();\n  return config.environment;\n}\n\nexport default environmentLoader;\n"],"version":3}