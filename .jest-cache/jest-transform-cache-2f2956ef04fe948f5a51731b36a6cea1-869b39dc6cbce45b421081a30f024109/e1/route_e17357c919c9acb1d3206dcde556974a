51c2502c1a822ac10667bb180aa0a546
"use strict";

/* istanbul ignore next */
function cov_1lzx122niq() {
  var path = "/Users/dikshantvashistha/PrepBettr/app/api/health/firebase/route.ts";
  var hash = "5c933a60122e8d8a5a5cc6e98ef0e6950b4b6717";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/app/api/health/firebase/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 18
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 39
        }
      },
      "3": {
        start: {
          line: 5,
          column: 32
        },
        end: {
          line: 5,
          column: 79
        }
      },
      "4": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 44,
          column: 5
        }
      },
      "5": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 58
        }
      },
      "6": {
        start: {
          line: 10,
          column: 29
        },
        end: {
          line: 10,
          column: 92
        }
      },
      "7": {
        start: {
          line: 11,
          column: 25
        },
        end: {
          line: 16,
          column: 9
        }
      },
      "8": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 66
        }
      },
      "9": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 24,
          column: 11
        }
      },
      "10": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 64
        }
      },
      "11": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 43,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "GET",
        decl: {
          start: {
            line: 6,
            column: 15
          },
          end: {
            line: 6,
            column: 18
          }
        },
        loc: {
          start: {
            line: 6,
            column: 21
          },
          end: {
            line: 45,
            column: 1
          }
        },
        line: 6
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 20
          },
          end: {
            line: 14,
            column: 66
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 14,
            column: 43
          },
          end: {
            line: 14,
            column: 52
          }
        }, {
          start: {
            line: 14,
            column: 55
          },
          end: {
            line: 14,
            column: 66
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 19,
            column: 20
          },
          end: {
            line: 19,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 19,
            column: 43
          },
          end: {
            line: 19,
            column: 46
          }
        }, {
          start: {
            line: 19,
            column: 49
          },
          end: {
            line: 19,
            column: 52
          }
        }],
        line: 19
      },
      "2": {
        loc: {
          start: {
            line: 32,
            column: 19
          },
          end: {
            line: 32,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 32,
            column: 44
          },
          end: {
            line: 32,
            column: 57
          }
        }, {
          start: {
            line: 32,
            column: 60
          },
          end: {
            line: 32,
            column: 75
          }
        }],
        line: 32
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/app/api/health/firebase/route.ts",
      mappings: ";;AAGA,kBA4CC;AA/CD,wCAA2C;AAC3C,gFAA2E;AAEpE,KAAK,UAAU,GAAG;IACvB,IAAI,CAAC;QACH,OAAO,CAAC,GAAG,CAAC,oCAAoC,CAAC,CAAC;QAElD,qCAAqC;QACrC,MAAM,YAAY,GAAG,MAAM,2CAAmB,CAAC,WAAW,EAAE,CAAC;QAE7D,MAAM,QAAQ,GAAG;YACf,OAAO,EAAE,UAAU;YACnB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACnC,MAAM,EAAE,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW;YACtD,OAAO,EAAE,YAAY,CAAC,OAAO;SAC9B,CAAC;QAEF,OAAO,CAAC,GAAG,CAAC,kCAAkC,EAAE,QAAQ,CAAC,CAAC;QAE1D,OAAO,qBAAY,CAAC,IAAI,CAAC,QAAQ,EAAE;YACjC,MAAM,EAAE,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG;YACxC,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;gBAClC,eAAe,EAAE,UAAU;aAC5B;SACF,CAAC,CAAC;IAEL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC;QAExD,OAAO,qBAAY,CAAC,IAAI,CAAC;YACvB,OAAO,EAAE,UAAU;YACnB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACnC,MAAM,EAAE,OAAO;YACf,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;YAC/D,OAAO,EAAE;gBACP,YAAY,EAAE,OAAO;gBACrB,SAAS,EAAE,OAAO;aACnB;SACF,EAAE;YACD,MAAM,EAAE,GAAG;YACX,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;gBAClC,eAAe,EAAE,UAAU;aAC5B;SACF,CAAC,CAAC;IACL,CAAC;AACH,CAAC",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/app/api/health/firebase/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server';\nimport { firebaseUserService } from '@/lib/services/firebase-user-service';\n\nexport async function GET() {\n  try {\n    console.log('\uD83C\uDFE5 Firebase health check requested');\n    \n    // Perform comprehensive health check\n    const healthResult = await firebaseUserService.healthCheck();\n    \n    const response = {\n      service: 'firebase',\n      timestamp: new Date().toISOString(),\n      status: healthResult.healthy ? 'healthy' : 'unhealthy',\n      details: healthResult.details\n    };\n    \n    console.log('\uD83C\uDFE5 Firebase health check result:', response);\n    \n    return NextResponse.json(response, {\n      status: healthResult.healthy ? 200 : 503,\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-cache'\n      }\n    });\n    \n  } catch (error) {\n    console.error('\u274C Firebase health check failed:', error);\n    \n    return NextResponse.json({\n      service: 'firebase',\n      timestamp: new Date().toISOString(),\n      status: 'error',\n      error: error instanceof Error ? error.message : 'Unknown error',\n      details: {\n        firebaseAuth: 'error',\n        firestore: 'error'\n      }\n    }, {\n      status: 503,\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-cache'\n      }\n    });\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5c933a60122e8d8a5a5cc6e98ef0e6950b4b6717"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1lzx122niq = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1lzx122niq();
cov_1lzx122niq().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1lzx122niq().s[1]++;
exports.GET = GET;
const server_1 =
/* istanbul ignore next */
(cov_1lzx122niq().s[2]++, require("next/server"));
const firebase_user_service_1 =
/* istanbul ignore next */
(cov_1lzx122niq().s[3]++, require("@/lib/services/firebase-user-service"));
async function GET() {
  /* istanbul ignore next */
  cov_1lzx122niq().f[0]++;
  cov_1lzx122niq().s[4]++;
  try {
    /* istanbul ignore next */
    cov_1lzx122niq().s[5]++;
    console.log('üè• Firebase health check requested');
    // Perform comprehensive health check
    const healthResult =
    /* istanbul ignore next */
    (cov_1lzx122niq().s[6]++, await firebase_user_service_1.firebaseUserService.healthCheck());
    const response =
    /* istanbul ignore next */
    (cov_1lzx122niq().s[7]++, {
      service: 'firebase',
      timestamp: new Date().toISOString(),
      status: healthResult.healthy ?
      /* istanbul ignore next */
      (cov_1lzx122niq().b[0][0]++, 'healthy') :
      /* istanbul ignore next */
      (cov_1lzx122niq().b[0][1]++, 'unhealthy'),
      details: healthResult.details
    });
    /* istanbul ignore next */
    cov_1lzx122niq().s[8]++;
    console.log('üè• Firebase health check result:', response);
    /* istanbul ignore next */
    cov_1lzx122niq().s[9]++;
    return server_1.NextResponse.json(response, {
      status: healthResult.healthy ?
      /* istanbul ignore next */
      (cov_1lzx122niq().b[1][0]++, 200) :
      /* istanbul ignore next */
      (cov_1lzx122niq().b[1][1]++, 503),
      headers: {
        'Content-Type': 'application/json',
        'Cache-Control': 'no-cache'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1lzx122niq().s[10]++;
    console.error('‚ùå Firebase health check failed:', error);
    /* istanbul ignore next */
    cov_1lzx122niq().s[11]++;
    return server_1.NextResponse.json({
      service: 'firebase',
      timestamp: new Date().toISOString(),
      status: 'error',
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1lzx122niq().b[2][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1lzx122niq().b[2][1]++, 'Unknown error'),
      details: {
        firebaseAuth: 'error',
        firestore: 'error'
      }
    }, {
      status: 503,
      headers: {
        'Content-Type': 'application/json',
        'Cache-Control': 'no-cache'
      }
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMWx6eDEyMm5pcSIsImFjdHVhbENvdmVyYWdlIiwicyIsImV4cG9ydHMiLCJHRVQiLCJzZXJ2ZXJfMSIsInJlcXVpcmUiLCJmaXJlYmFzZV91c2VyX3NlcnZpY2VfMSIsImYiLCJjb25zb2xlIiwibG9nIiwiaGVhbHRoUmVzdWx0IiwiZmlyZWJhc2VVc2VyU2VydmljZSIsImhlYWx0aENoZWNrIiwicmVzcG9uc2UiLCJzZXJ2aWNlIiwidGltZXN0YW1wIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwic3RhdHVzIiwiaGVhbHRoeSIsImIiLCJkZXRhaWxzIiwiTmV4dFJlc3BvbnNlIiwianNvbiIsImhlYWRlcnMiLCJlcnJvciIsIkVycm9yIiwibWVzc2FnZSIsImZpcmViYXNlQXV0aCIsImZpcmVzdG9yZSJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9kaWtzaGFudHZhc2hpc3RoYS9QcmVwQmV0dHIvYXBwL2FwaS9oZWFsdGgvZmlyZWJhc2Uvcm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xuaW1wb3J0IHsgZmlyZWJhc2VVc2VyU2VydmljZSB9IGZyb20gJ0AvbGliL3NlcnZpY2VzL2ZpcmViYXNlLXVzZXItc2VydmljZSc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQoKSB7XG4gIHRyeSB7XG4gICAgY29uc29sZS5sb2coJ/Cfj6UgRmlyZWJhc2UgaGVhbHRoIGNoZWNrIHJlcXVlc3RlZCcpO1xuICAgIFxuICAgIC8vIFBlcmZvcm0gY29tcHJlaGVuc2l2ZSBoZWFsdGggY2hlY2tcbiAgICBjb25zdCBoZWFsdGhSZXN1bHQgPSBhd2FpdCBmaXJlYmFzZVVzZXJTZXJ2aWNlLmhlYWx0aENoZWNrKCk7XG4gICAgXG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICBzZXJ2aWNlOiAnZmlyZWJhc2UnLFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICBzdGF0dXM6IGhlYWx0aFJlc3VsdC5oZWFsdGh5ID8gJ2hlYWx0aHknIDogJ3VuaGVhbHRoeScsXG4gICAgICBkZXRhaWxzOiBoZWFsdGhSZXN1bHQuZGV0YWlsc1xuICAgIH07XG4gICAgXG4gICAgY29uc29sZS5sb2coJ/Cfj6UgRmlyZWJhc2UgaGVhbHRoIGNoZWNrIHJlc3VsdDonLCByZXNwb25zZSk7XG4gICAgXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHJlc3BvbnNlLCB7XG4gICAgICBzdGF0dXM6IGhlYWx0aFJlc3VsdC5oZWFsdGh5ID8gMjAwIDogNTAzLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAnQ2FjaGUtQ29udHJvbCc6ICduby1jYWNoZSdcbiAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCfinYwgRmlyZWJhc2UgaGVhbHRoIGNoZWNrIGZhaWxlZDonLCBlcnJvcik7XG4gICAgXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgIHNlcnZpY2U6ICdmaXJlYmFzZScsXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIHN0YXR1czogJ2Vycm9yJyxcbiAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJyxcbiAgICAgIGRldGFpbHM6IHtcbiAgICAgICAgZmlyZWJhc2VBdXRoOiAnZXJyb3InLFxuICAgICAgICBmaXJlc3RvcmU6ICdlcnJvcidcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBzdGF0dXM6IDUwMyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgJ0NhY2hlLUNvbnRyb2wnOiAnbm8tY2FjaGUnXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWVNO0lBQUFBLGNBQUEsWUFBQUEsQ0FBQTtNQUFBLE9BQUFDLGNBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQUEsY0FBQTtBQUFBO0FBQUFELGNBQUE7QUFBQUEsY0FBQSxHQUFBRSxDQUFBOzs7Ozs7QUFaTkMsT0FBQSxDQUFBQyxHQUFBLEdBQUFBLEdBQUE7QUFIQSxNQUFBQyxRQUFBO0FBQUE7QUFBQSxDQUFBTCxjQUFBLEdBQUFFLENBQUEsT0FBQUksT0FBQTtBQUNBLE1BQUFDLHVCQUFBO0FBQUE7QUFBQSxDQUFBUCxjQUFBLEdBQUFFLENBQUEsT0FBQUksT0FBQTtBQUVPLGVBQWVGLEdBQUdBLENBQUE7RUFBQTtFQUFBSixjQUFBLEdBQUFRLENBQUE7RUFBQVIsY0FBQSxHQUFBRSxDQUFBO0VBQ3ZCLElBQUk7SUFBQTtJQUFBRixjQUFBLEdBQUFFLENBQUE7SUFDRk8sT0FBTyxDQUFDQyxHQUFHLENBQUMsb0NBQW9DLENBQUM7SUFFakQ7SUFDQSxNQUFNQyxZQUFZO0lBQUE7SUFBQSxDQUFBWCxjQUFBLEdBQUFFLENBQUEsT0FBRyxNQUFNSyx1QkFBQSxDQUFBSyxtQkFBbUIsQ0FBQ0MsV0FBVyxFQUFFO0lBRTVELE1BQU1DLFFBQVE7SUFBQTtJQUFBLENBQUFkLGNBQUEsR0FBQUUsQ0FBQSxPQUFHO01BQ2ZhLE9BQU8sRUFBRSxVQUFVO01BQ25CQyxTQUFTLEVBQUUsSUFBSUMsSUFBSSxFQUFFLENBQUNDLFdBQVcsRUFBRTtNQUNuQ0MsTUFBTSxFQUFFUixZQUFZLENBQUNTLE9BQU87TUFBQTtNQUFBLENBQUFwQixjQUFBLEdBQUFxQixDQUFBLFVBQUcsU0FBUztNQUFBO01BQUEsQ0FBQXJCLGNBQUEsR0FBQXFCLENBQUEsVUFBRyxXQUFXO01BQ3REQyxPQUFPLEVBQUVYLFlBQVksQ0FBQ1c7S0FDdkI7SUFBQztJQUFBdEIsY0FBQSxHQUFBRSxDQUFBO0lBRUZPLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGtDQUFrQyxFQUFFSSxRQUFRLENBQUM7SUFBQztJQUFBZCxjQUFBLEdBQUFFLENBQUE7SUFFMUQsT0FBT0csUUFBQSxDQUFBa0IsWUFBWSxDQUFDQyxJQUFJLENBQUNWLFFBQVEsRUFBRTtNQUNqQ0ssTUFBTSxFQUFFUixZQUFZLENBQUNTLE9BQU87TUFBQTtNQUFBLENBQUFwQixjQUFBLEdBQUFxQixDQUFBLFVBQUcsR0FBRztNQUFBO01BQUEsQ0FBQXJCLGNBQUEsR0FBQXFCLENBQUEsVUFBRyxHQUFHO01BQ3hDSSxPQUFPLEVBQUU7UUFDUCxjQUFjLEVBQUUsa0JBQWtCO1FBQ2xDLGVBQWUsRUFBRTs7S0FFcEIsQ0FBQztFQUVKLENBQUMsQ0FBQyxPQUFPQyxLQUFLLEVBQUU7SUFBQTtJQUFBMUIsY0FBQSxHQUFBRSxDQUFBO0lBQ2RPLE9BQU8sQ0FBQ2lCLEtBQUssQ0FBQyxpQ0FBaUMsRUFBRUEsS0FBSyxDQUFDO0lBQUM7SUFBQTFCLGNBQUEsR0FBQUUsQ0FBQTtJQUV4RCxPQUFPRyxRQUFBLENBQUFrQixZQUFZLENBQUNDLElBQUksQ0FBQztNQUN2QlQsT0FBTyxFQUFFLFVBQVU7TUFDbkJDLFNBQVMsRUFBRSxJQUFJQyxJQUFJLEVBQUUsQ0FBQ0MsV0FBVyxFQUFFO01BQ25DQyxNQUFNLEVBQUUsT0FBTztNQUNmTyxLQUFLLEVBQUVBLEtBQUssWUFBWUMsS0FBSztNQUFBO01BQUEsQ0FBQTNCLGNBQUEsR0FBQXFCLENBQUEsVUFBR0ssS0FBSyxDQUFDRSxPQUFPO01BQUE7TUFBQSxDQUFBNUIsY0FBQSxHQUFBcUIsQ0FBQSxVQUFHLGVBQWU7TUFDL0RDLE9BQU8sRUFBRTtRQUNQTyxZQUFZLEVBQUUsT0FBTztRQUNyQkMsU0FBUyxFQUFFOztLQUVkLEVBQUU7TUFDRFgsTUFBTSxFQUFFLEdBQUc7TUFDWE0sT0FBTyxFQUFFO1FBQ1AsY0FBYyxFQUFFLGtCQUFrQjtRQUNsQyxlQUFlLEVBQUU7O0tBRXBCLENBQUM7RUFDSjtBQUNGIiwiaWdub3JlTGlzdCI6W119