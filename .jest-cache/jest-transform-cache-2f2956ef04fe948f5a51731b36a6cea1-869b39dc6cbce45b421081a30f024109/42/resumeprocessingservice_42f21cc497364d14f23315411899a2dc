a29c417847c72d37da724b4e604a4b31
"use strict";

/* istanbul ignore next */
function cov_18q5nz8gk1() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/services/resume-processing-service.ts";
  var hash = "4fe6742d8ca702dfe7208cf4cec0c64faf823f73";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/services/resume-processing-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 12,
          column: 3
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 3,
          column: 26
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "3": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 52
        }
      },
      "4": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 7,
          column: 5
        }
      },
      "5": {
        start: {
          line: 6,
          column: 6
        },
        end: {
          line: 6,
          column: 68
        }
      },
      "6": {
        start: {
          line: 6,
          column: 51
        },
        end: {
          line: 6,
          column: 63
        }
      },
      "7": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 39
        }
      },
      "8": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "9": {
        start: {
          line: 10,
          column: 26
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "10": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 17
        }
      },
      "11": {
        start: {
          line: 13,
          column: 25
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "12": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 72
        }
      },
      "13": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 21
        }
      },
      "14": {
        start: {
          line: 18,
          column: 19
        },
        end: {
          line: 34,
          column: 4
        }
      },
      "15": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "16": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 24,
          column: 10
        }
      },
      "17": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 23
        }
      },
      "18": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "19": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "20": {
        start: {
          line: 22,
          column: 77
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "21": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 22
        }
      },
      "22": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 26
        }
      },
      "23": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 33,
          column: 6
        }
      },
      "24": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "25": {
        start: {
          line: 28,
          column: 35
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "26": {
        start: {
          line: 29,
          column: 21
        },
        end: {
          line: 29,
          column: 23
        }
      },
      "27": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "28": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "29": {
        start: {
          line: 30,
          column: 38
        },
        end: {
          line: 30,
          column: 50
        }
      },
      "30": {
        start: {
          line: 30,
          column: 56
        },
        end: {
          line: 30,
          column: 57
        }
      },
      "31": {
        start: {
          line: 30,
          column: 78
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "32": {
        start: {
          line: 30,
          column: 102
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "33": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 40
        }
      },
      "34": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 22
        }
      },
      "35": {
        start: {
          line: 35,
          column: 0
        },
        end: {
          line: 35,
          column: 62
        }
      },
      "36": {
        start: {
          line: 36,
          column: 0
        },
        end: {
          line: 36,
          column: 41
        }
      },
      "37": {
        start: {
          line: 37,
          column: 20
        },
        end: {
          line: 37,
          column: 55
        }
      },
      "38": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 38,
          column: 47
        }
      },
      "39": {
        start: {
          line: 39,
          column: 18
        },
        end: {
          line: 39,
          column: 42
        }
      },
      "40": {
        start: {
          line: 40,
          column: 32
        },
        end: {
          line: 40,
          column: 66
        }
      },
      "41": {
        start: {
          line: 43,
          column: 17
        },
        end: {
          line: 43,
          column: 40
        }
      },
      "42": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 33
        }
      },
      "43": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 54,
          column: 9
        }
      },
      "44": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 19
        }
      },
      "45": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 66,
          column: 9
        }
      },
      "46": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 75
        }
      },
      "47": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 36
        }
      },
      "48": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 67
        }
      },
      "49": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 86
        }
      },
      "50": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 104
        }
      },
      "51": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 36
        }
      },
      "52": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "53": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 36
        }
      },
      "54": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 80
        }
      },
      "55": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 52
        }
      },
      "56": {
        start: {
          line: 78,
          column: 34
        },
        end: {
          line: 78,
          column: 123
        }
      },
      "57": {
        start: {
          line: 80,
          column: 34
        },
        end: {
          line: 80,
          column: 84
        }
      },
      "58": {
        start: {
          line: 82,
          column: 37
        },
        end: {
          line: 82,
          column: 39
        }
      },
      "59": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 85,
          column: 13
        }
      },
      "60": {
        start: {
          line: 84,
          column: 16
        },
        end: {
          line: 84,
          column: 103
        }
      },
      "61": {
        start: {
          line: 87,
          column: 29
        },
        end: {
          line: 101,
          column: 14
        }
      },
      "62": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 78
        }
      },
      "63": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 113,
          column: 14
        }
      },
      "64": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 83
        }
      },
      "65": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 123,
          column: 15
        }
      },
      "66": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 127,
          column: 14
        }
      },
      "67": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 136,
          column: 103
        }
      },
      "68": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 152,
          column: 9
        }
      },
      "69": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 151,
          column: 13
        }
      },
      "70": {
        start: {
          line: 145,
          column: 16
        },
        end: {
          line: 145,
          column: 80
        }
      },
      "71": {
        start: {
          line: 146,
          column: 16
        },
        end: {
          line: 146,
          column: 113
        }
      },
      "72": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 149,
          column: 107
        }
      },
      "73": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 154,
          column: 57
        }
      },
      "74": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 155,
          column: 66
        }
      },
      "75": {
        start: {
          line: 162,
          column: 19
        },
        end: {
          line: 162,
          column: 21
        }
      },
      "76": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 174,
          column: 9
        }
      },
      "77": {
        start: {
          line: 165,
          column: 42
        },
        end: {
          line: 165,
          column: 112
        }
      },
      "78": {
        start: {
          line: 165,
          column: 77
        },
        end: {
          line: 165,
          column: 111
        }
      },
      "79": {
        start: {
          line: 166,
          column: 28
        },
        end: {
          line: 166,
          column: 54
        }
      },
      "80": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 167,
          column: 32
        }
      },
      "81": {
        start: {
          line: 169,
          column: 13
        },
        end: {
          line: 174,
          column: 9
        }
      },
      "82": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 48
        }
      },
      "83": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 173,
          column: 88
        }
      },
      "84": {
        start: {
          line: 176,
          column: 23
        },
        end: {
          line: 220,
          column: 12
        }
      },
      "85": {
        start: {
          line: 221,
          column: 33
        },
        end: {
          line: 221,
          column: 102
        }
      },
      "86": {
        start: {
          line: 221,
          column: 68
        },
        end: {
          line: 221,
          column: 101
        }
      },
      "87": {
        start: {
          line: 222,
          column: 23
        },
        end: {
          line: 222,
          column: 55
        }
      },
      "88": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 244,
          column: 9
        }
      },
      "89": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 243,
          column: 13
        }
      },
      "90": {
        start: {
          line: 225,
          column: 35
        },
        end: {
          line: 227,
          column: 33
        }
      },
      "91": {
        start: {
          line: 228,
          column: 16
        },
        end: {
          line: 238,
          column: 18
        }
      },
      "92": {
        start: {
          line: 241,
          column: 16
        },
        end: {
          line: 241,
          column: 73
        }
      },
      "93": {
        start: {
          line: 242,
          column: 16
        },
        end: {
          line: 242,
          column: 73
        }
      },
      "94": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 245,
          column: 69
        }
      },
      "95": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 290,
          column: 9
        }
      },
      "96": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 64
        }
      },
      "97": {
        start: {
          line: 255,
          column: 35
        },
        end: {
          line: 261,
          column: 7
        }
      },
      "98": {
        start: {
          line: 259,
          column: 58
        },
        end: {
          line: 259,
          column: 93
        }
      },
      "99": {
        start: {
          line: 260,
          column: 56
        },
        end: {
          line: 260,
          column: 111
        }
      },
      "100": {
        start: {
          line: 263,
          column: 42
        },
        end: {
          line: 263,
          column: 111
        }
      },
      "101": {
        start: {
          line: 263,
          column: 77
        },
        end: {
          line: 263,
          column: 110
        }
      },
      "102": {
        start: {
          line: 265,
          column: 31
        },
        end: {
          line: 270,
          column: 13
        }
      },
      "103": {
        start: {
          line: 268,
          column: 64
        },
        end: {
          line: 268,
          column: 168
        }
      },
      "104": {
        start: {
          line: 269,
          column: 62
        },
        end: {
          line: 269,
          column: 153
        }
      },
      "105": {
        start: {
          line: 271,
          column: 30
        },
        end: {
          line: 271,
          column: 65
        }
      },
      "106": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 277,
          column: 13
        }
      },
      "107": {
        start: {
          line: 274,
          column: 16
        },
        end: {
          line: 276,
          column: 39
        }
      },
      "108": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 285,
          column: 14
        }
      },
      "109": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 288,
          column: 75
        }
      },
      "110": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 289,
          column: 22
        }
      },
      "111": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 306,
          column: 9
        }
      },
      "112": {
        start: {
          line: 297,
          column: 23
        },
        end: {
          line: 297,
          column: 61
        }
      },
      "113": {
        start: {
          line: 298,
          column: 27
        },
        end: {
          line: 298,
          column: 64
        }
      },
      "114": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 299,
          column: 266
        }
      },
      "115": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 300,
          column: 80
        }
      },
      "116": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 301,
          column: 26
        }
      },
      "117": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 304,
          column: 77
        }
      },
      "118": {
        start: {
          line: 305,
          column: 12
        },
        end: {
          line: 305,
          column: 58
        }
      },
      "119": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 332,
          column: 9
        }
      },
      "120": {
        start: {
          line: 314,
          column: 23
        },
        end: {
          line: 314,
          column: 61
        }
      },
      "121": {
        start: {
          line: 315,
          column: 31
        },
        end: {
          line: 315,
          column: 80
        }
      },
      "122": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 325,
          column: 13
        }
      },
      "123": {
        start: {
          line: 317,
          column: 36
        },
        end: {
          line: 317,
          column: 53
        }
      },
      "124": {
        start: {
          line: 319,
          column: 16
        },
        end: {
          line: 324,
          column: 17
        }
      },
      "125": {
        start: {
          line: 320,
          column: 20
        },
        end: {
          line: 320,
          column: 92
        }
      },
      "126": {
        start: {
          line: 322,
          column: 21
        },
        end: {
          line: 324,
          column: 17
        }
      },
      "127": {
        start: {
          line: 323,
          column: 20
        },
        end: {
          line: 323,
          column: 92
        }
      },
      "128": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 327,
          column: 78
        }
      },
      "129": {
        start: {
          line: 330,
          column: 12
        },
        end: {
          line: 330,
          column: 69
        }
      },
      "130": {
        start: {
          line: 338,
          column: 8
        },
        end: {
          line: 350,
          column: 9
        }
      },
      "131": {
        start: {
          line: 339,
          column: 23
        },
        end: {
          line: 339,
          column: 61
        }
      },
      "132": {
        start: {
          line: 340,
          column: 31
        },
        end: {
          line: 340,
          column: 80
        }
      },
      "133": {
        start: {
          line: 341,
          column: 12
        },
        end: {
          line: 343,
          column: 13
        }
      },
      "134": {
        start: {
          line: 342,
          column: 16
        },
        end: {
          line: 342,
          column: 41
        }
      },
      "135": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 345,
          column: 24
        }
      },
      "136": {
        start: {
          line: 348,
          column: 12
        },
        end: {
          line: 348,
          column: 68
        }
      },
      "137": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 349,
          column: 24
        }
      },
      "138": {
        start: {
          line: 356,
          column: 8
        },
        end: {
          line: 367,
          column: 9
        }
      },
      "139": {
        start: {
          line: 357,
          column: 31
        },
        end: {
          line: 357,
          column: 67
        }
      },
      "140": {
        start: {
          line: 358,
          column: 29
        },
        end: {
          line: 358,
          column: 187
        }
      },
      "141": {
        start: {
          line: 359,
          column: 12
        },
        end: {
          line: 361,
          column: 13
        }
      },
      "142": {
        start: {
          line: 360,
          column: 16
        },
        end: {
          line: 360,
          column: 96
        }
      },
      "143": {
        start: {
          line: 362,
          column: 12
        },
        end: {
          line: 362,
          column: 24
        }
      },
      "144": {
        start: {
          line: 365,
          column: 12
        },
        end: {
          line: 365,
          column: 71
        }
      },
      "145": {
        start: {
          line: 366,
          column: 12
        },
        end: {
          line: 366,
          column: 24
        }
      },
      "146": {
        start: {
          line: 371,
          column: 0
        },
        end: {
          line: 371,
          column: 64
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 2,
            column: 75
          }
        },
        loc: {
          start: {
            line: 2,
            column: 96
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 39
          }
        },
        loc: {
          start: {
            line: 6,
            column: 49
          },
          end: {
            line: 6,
            column: 65
          }
        },
        line: 6
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 9,
            column: 7
          }
        },
        loc: {
          start: {
            line: 9,
            column: 28
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 9
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 13,
            column: 81
          }
        },
        loc: {
          start: {
            line: 13,
            column: 95
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 13
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 15,
            column: 6
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 15
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 18,
            column: 51
          },
          end: {
            line: 18,
            column: 52
          }
        },
        loc: {
          start: {
            line: 18,
            column: 63
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 18
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 19,
            column: 19
          }
        },
        loc: {
          start: {
            line: 19,
            column: 30
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 19
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 20,
            column: 49
          }
        },
        loc: {
          start: {
            line: 20,
            column: 61
          },
          end: {
            line: 24,
            column: 9
          }
        },
        line: 20
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 12
          }
        },
        loc: {
          start: {
            line: 27,
            column: 26
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 27
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        },
        loc: {
          start: {
            line: 45,
            column: 18
          },
          end: {
            line: 47,
            column: 5
          }
        },
        line: 45
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 51,
            column: 5
          }
        },
        loc: {
          start: {
            line: 51,
            column: 23
          },
          end: {
            line: 67,
            column: 5
          }
        },
        line: 51
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 71,
            column: 5
          }
        },
        loc: {
          start: {
            line: 71,
            column: 88
          },
          end: {
            line: 129,
            column: 5
          }
        },
        line: 71
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 133,
            column: 4
          },
          end: {
            line: 133,
            column: 5
          }
        },
        loc: {
          start: {
            line: 133,
            column: 66
          },
          end: {
            line: 137,
            column: 5
          }
        },
        line: 133
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 141,
            column: 4
          },
          end: {
            line: 141,
            column: 5
          }
        },
        loc: {
          start: {
            line: 141,
            column: 50
          },
          end: {
            line: 156,
            column: 5
          }
        },
        line: 141
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 160,
            column: 4
          },
          end: {
            line: 160,
            column: 5
          }
        },
        loc: {
          start: {
            line: 160,
            column: 50
          },
          end: {
            line: 246,
            column: 5
          }
        },
        line: 160
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 165,
            column: 71
          },
          end: {
            line: 165,
            column: 72
          }
        },
        loc: {
          start: {
            line: 165,
            column: 77
          },
          end: {
            line: 165,
            column: 111
          }
        },
        line: 165
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 221,
            column: 62
          },
          end: {
            line: 221,
            column: 63
          }
        },
        loc: {
          start: {
            line: 221,
            column: 68
          },
          end: {
            line: 221,
            column: 101
          }
        },
        line: 221
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 250,
            column: 4
          },
          end: {
            line: 250,
            column: 5
          }
        },
        loc: {
          start: {
            line: 250,
            column: 62
          },
          end: {
            line: 291,
            column: 5
          }
        },
        line: 250
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 259,
            column: 51
          },
          end: {
            line: 259,
            column: 52
          }
        },
        loc: {
          start: {
            line: 259,
            column: 58
          },
          end: {
            line: 259,
            column: 93
          }
        },
        line: 259
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 260,
            column: 49
          },
          end: {
            line: 260,
            column: 50
          }
        },
        loc: {
          start: {
            line: 260,
            column: 56
          },
          end: {
            line: 260,
            column: 111
          }
        },
        line: 260
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 263,
            column: 71
          },
          end: {
            line: 263,
            column: 72
          }
        },
        loc: {
          start: {
            line: 263,
            column: 77
          },
          end: {
            line: 263,
            column: 110
          }
        },
        line: 263
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 268,
            column: 57
          },
          end: {
            line: 268,
            column: 58
          }
        },
        loc: {
          start: {
            line: 268,
            column: 64
          },
          end: {
            line: 268,
            column: 168
          }
        },
        line: 268
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 269,
            column: 55
          },
          end: {
            line: 269,
            column: 56
          }
        },
        loc: {
          start: {
            line: 269,
            column: 62
          },
          end: {
            line: 269,
            column: 153
          }
        },
        line: 269
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 295,
            column: 4
          },
          end: {
            line: 295,
            column: 5
          }
        },
        loc: {
          start: {
            line: 295,
            column: 46
          },
          end: {
            line: 307,
            column: 5
          }
        },
        line: 295
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 311,
            column: 4
          },
          end: {
            line: 311,
            column: 5
          }
        },
        loc: {
          start: {
            line: 311,
            column: 39
          },
          end: {
            line: 333,
            column: 5
          }
        },
        line: 311
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 337,
            column: 4
          },
          end: {
            line: 337,
            column: 5
          }
        },
        loc: {
          start: {
            line: 337,
            column: 36
          },
          end: {
            line: 351,
            column: 5
          }
        },
        line: 337
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 355,
            column: 4
          },
          end: {
            line: 355,
            column: 5
          }
        },
        loc: {
          start: {
            line: 355,
            column: 57
          },
          end: {
            line: 368,
            column: 5
          }
        },
        line: 355
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 12,
            column: 3
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 9,
            column: 1
          }
        }, {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 5
      },
      "4": {
        loc: {
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 13
          }
        }, {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "5": {
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 47
          }
        }, {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "6": {
        loc: {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 63
          }
        }, {
          start: {
            line: 5,
            column: 67
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "7": {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "8": {
        loc: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 17,
            column: 2
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 30
          }
        }, {
          start: {
            line: 13,
            column: 34
          },
          end: {
            line: 13,
            column: 57
          }
        }, {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "9": {
        loc: {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 15,
            column: 1
          }
        }, {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "10": {
        loc: {
          start: {
            line: 18,
            column: 19
          },
          end: {
            line: 34,
            column: 4
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 18,
            column: 24
          }
        }, {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 45
          }
        }, {
          start: {
            line: 18,
            column: 50
          },
          end: {
            line: 34,
            column: 4
          }
        }],
        line: 18
      },
      "11": {
        loc: {
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 20,
            column: 44
          }
        }, {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 24,
            column: 9
          }
        }],
        line: 20
      },
      "12": {
        loc: {
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "13": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "14": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 15
          }
        }, {
          start: {
            line: 28,
            column: 19
          },
          end: {
            line: 28,
            column: 33
          }
        }],
        line: 28
      },
      "15": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "16": {
        loc: {
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "17": {
        loc: {
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "18": {
        loc: {
          start: {
            line: 71,
            column: 74
          },
          end: {
            line: 71,
            column: 86
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 71,
            column: 84
          },
          end: {
            line: 71,
            column: 86
          }
        }],
        line: 71
      },
      "19": {
        loc: {
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 85,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 85,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "20": {
        loc: {
          start: {
            line: 126,
            column: 23
          },
          end: {
            line: 126,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 126,
            column: 48
          },
          end: {
            line: 126,
            column: 61
          }
        }, {
          start: {
            line: 126,
            column: 64
          },
          end: {
            line: 126,
            column: 90
          }
        }],
        line: 126
      },
      "21": {
        loc: {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 152,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "22": {
        loc: {
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 174,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 174,
            column: 9
          }
        }, {
          start: {
            line: 169,
            column: 13
          },
          end: {
            line: 174,
            column: 9
          }
        }],
        line: 163
      },
      "23": {
        loc: {
          start: {
            line: 169,
            column: 13
          },
          end: {
            line: 174,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 13
          },
          end: {
            line: 174,
            column: 9
          }
        }, {
          start: {
            line: 172,
            column: 13
          },
          end: {
            line: 174,
            column: 9
          }
        }],
        line: 169
      },
      "24": {
        loc: {
          start: {
            line: 223,
            column: 8
          },
          end: {
            line: 244,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 223,
            column: 8
          },
          end: {
            line: 244,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 223
      },
      "25": {
        loc: {
          start: {
            line: 223,
            column: 12
          },
          end: {
            line: 223,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 223,
            column: 12
          },
          end: {
            line: 223,
            column: 26
          }
        }, {
          start: {
            line: 223,
            column: 30
          },
          end: {
            line: 223,
            column: 41
          }
        }],
        line: 223
      },
      "26": {
        loc: {
          start: {
            line: 225,
            column: 35
          },
          end: {
            line: 227,
            column: 33
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 226,
            column: 22
          },
          end: {
            line: 226,
            column: 45
          }
        }, {
          start: {
            line: 227,
            column: 22
          },
          end: {
            line: 227,
            column: 33
          }
        }],
        line: 225
      },
      "27": {
        loc: {
          start: {
            line: 229,
            column: 34
          },
          end: {
            line: 229,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 229,
            column: 34
          },
          end: {
            line: 229,
            column: 57
          }
        }, {
          start: {
            line: 229,
            column: 61
          },
          end: {
            line: 229,
            column: 63
          }
        }],
        line: 229
      },
      "28": {
        loc: {
          start: {
            line: 231,
            column: 28
          },
          end: {
            line: 231,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 231,
            column: 28
          },
          end: {
            line: 231,
            column: 45
          }
        }, {
          start: {
            line: 231,
            column: 49
          },
          end: {
            line: 231,
            column: 51
          }
        }],
        line: 231
      },
      "29": {
        loc: {
          start: {
            line: 232,
            column: 32
          },
          end: {
            line: 232,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 232,
            column: 32
          },
          end: {
            line: 232,
            column: 53
          }
        }, {
          start: {
            line: 232,
            column: 57
          },
          end: {
            line: 232,
            column: 59
          }
        }],
        line: 232
      },
      "30": {
        loc: {
          start: {
            line: 233,
            column: 31
          },
          end: {
            line: 233,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 233,
            column: 31
          },
          end: {
            line: 233,
            column: 51
          }
        }, {
          start: {
            line: 233,
            column: 55
          },
          end: {
            line: 233,
            column: 57
          }
        }],
        line: 233
      },
      "31": {
        loc: {
          start: {
            line: 234,
            column: 30
          },
          end: {
            line: 234,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 234,
            column: 30
          },
          end: {
            line: 234,
            column: 49
          }
        }, {
          start: {
            line: 234,
            column: 53
          },
          end: {
            line: 234,
            column: 55
          }
        }],
        line: 234
      },
      "32": {
        loc: {
          start: {
            line: 235,
            column: 36
          },
          end: {
            line: 235,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 235,
            column: 36
          },
          end: {
            line: 235,
            column: 61
          }
        }, {
          start: {
            line: 235,
            column: 65
          },
          end: {
            line: 235,
            column: 67
          }
        }],
        line: 235
      },
      "33": {
        loc: {
          start: {
            line: 236,
            column: 31
          },
          end: {
            line: 236,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 236,
            column: 31
          },
          end: {
            line: 236,
            column: 51
          }
        }, {
          start: {
            line: 236,
            column: 55
          },
          end: {
            line: 236,
            column: 57
          }
        }],
        line: 236
      },
      "34": {
        loc: {
          start: {
            line: 250,
            column: 43
          },
          end: {
            line: 250,
            column: 60
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 250,
            column: 58
          },
          end: {
            line: 250,
            column: 60
          }
        }],
        line: 250
      },
      "35": {
        loc: {
          start: {
            line: 256,
            column: 16
          },
          end: {
            line: 256,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 256,
            column: 16
          },
          end: {
            line: 256,
            column: 47
          }
        }, {
          start: {
            line: 256,
            column: 51
          },
          end: {
            line: 256,
            column: 56
          }
        }],
        line: 256
      },
      "36": {
        loc: {
          start: {
            line: 257,
            column: 19
          },
          end: {
            line: 257,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 257,
            column: 19
          },
          end: {
            line: 257,
            column: 40
          }
        }, {
          start: {
            line: 257,
            column: 44
          },
          end: {
            line: 257,
            column: 49
          }
        }],
        line: 257
      },
      "37": {
        loc: {
          start: {
            line: 266,
            column: 22
          },
          end: {
            line: 266,
            column: 115
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 266,
            column: 23
          },
          end: {
            line: 266,
            column: 101
          }
        }, {
          start: {
            line: 266,
            column: 106
          },
          end: {
            line: 266,
            column: 115
          }
        }],
        line: 266
      },
      "38": {
        loc: {
          start: {
            line: 266,
            column: 23
          },
          end: {
            line: 266,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 266,
            column: 85
          },
          end: {
            line: 266,
            column: 91
          }
        }, {
          start: {
            line: 266,
            column: 94
          },
          end: {
            line: 266,
            column: 101
          }
        }],
        line: 266
      },
      "39": {
        loc: {
          start: {
            line: 266,
            column: 23
          },
          end: {
            line: 266,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 266,
            column: 23
          },
          end: {
            line: 266,
            column: 65
          }
        }, {
          start: {
            line: 266,
            column: 69
          },
          end: {
            line: 266,
            column: 82
          }
        }],
        line: 266
      },
      "40": {
        loc: {
          start: {
            line: 268,
            column: 121
          },
          end: {
            line: 268,
            column: 145
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 268,
            column: 121
          },
          end: {
            line: 268,
            column: 132
          }
        }, {
          start: {
            line: 268,
            column: 136
          },
          end: {
            line: 268,
            column: 145
          }
        }],
        line: 268
      },
      "41": {
        loc: {
          start: {
            line: 272,
            column: 12
          },
          end: {
            line: 277,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 272,
            column: 12
          },
          end: {
            line: 277,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 272
      },
      "42": {
        loc: {
          start: {
            line: 272,
            column: 16
          },
          end: {
            line: 272,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 272,
            column: 16
          },
          end: {
            line: 272,
            column: 33
          }
        }, {
          start: {
            line: 272,
            column: 37
          },
          end: {
            line: 272,
            column: 51
          }
        }],
        line: 272
      },
      "43": {
        loc: {
          start: {
            line: 274,
            column: 23
          },
          end: {
            line: 276,
            column: 38
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 275,
            column: 22
          },
          end: {
            line: 275,
            column: 59
          }
        }, {
          start: {
            line: 276,
            column: 22
          },
          end: {
            line: 276,
            column: 38
          }
        }],
        line: 274
      },
      "44": {
        loc: {
          start: {
            line: 316,
            column: 12
          },
          end: {
            line: 325,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 316,
            column: 12
          },
          end: {
            line: 325,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 316
      },
      "45": {
        loc: {
          start: {
            line: 319,
            column: 16
          },
          end: {
            line: 324,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 319,
            column: 16
          },
          end: {
            line: 324,
            column: 17
          }
        }, {
          start: {
            line: 322,
            column: 21
          },
          end: {
            line: 324,
            column: 17
          }
        }],
        line: 319
      },
      "46": {
        loc: {
          start: {
            line: 319,
            column: 20
          },
          end: {
            line: 319,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 319,
            column: 69
          },
          end: {
            line: 319,
            column: 75
          }
        }, {
          start: {
            line: 319,
            column: 78
          },
          end: {
            line: 319,
            column: 98
          }
        }],
        line: 319
      },
      "47": {
        loc: {
          start: {
            line: 319,
            column: 20
          },
          end: {
            line: 319,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 319,
            column: 20
          },
          end: {
            line: 319,
            column: 40
          }
        }, {
          start: {
            line: 319,
            column: 44
          },
          end: {
            line: 319,
            column: 66
          }
        }],
        line: 319
      },
      "48": {
        loc: {
          start: {
            line: 322,
            column: 21
          },
          end: {
            line: 324,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 322,
            column: 21
          },
          end: {
            line: 324,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 322
      },
      "49": {
        loc: {
          start: {
            line: 322,
            column: 25
          },
          end: {
            line: 322,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 322,
            column: 74
          },
          end: {
            line: 322,
            column: 80
          }
        }, {
          start: {
            line: 322,
            column: 83
          },
          end: {
            line: 322,
            column: 103
          }
        }],
        line: 322
      },
      "50": {
        loc: {
          start: {
            line: 322,
            column: 25
          },
          end: {
            line: 322,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 322,
            column: 25
          },
          end: {
            line: 322,
            column: 45
          }
        }, {
          start: {
            line: 322,
            column: 49
          },
          end: {
            line: 322,
            column: 71
          }
        }],
        line: 322
      },
      "51": {
        loc: {
          start: {
            line: 341,
            column: 12
          },
          end: {
            line: 343,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 341,
            column: 12
          },
          end: {
            line: 343,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 341
      },
      "52": {
        loc: {
          start: {
            line: 355,
            column: 39
          },
          end: {
            line: 355,
            column: 55
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 355,
            column: 53
          },
          end: {
            line: 355,
            column: 55
          }
        }],
        line: 355
      },
      "53": {
        loc: {
          start: {
            line: 358,
            column: 29
          },
          end: {
            line: 358,
            column: 187
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 358,
            column: 30
          },
          end: {
            line: 358,
            column: 105
          }
        }, {
          start: {
            line: 358,
            column: 111
          },
          end: {
            line: 358,
            column: 186
          }
        }],
        line: 358
      },
      "54": {
        loc: {
          start: {
            line: 358,
            column: 30
          },
          end: {
            line: 358,
            column: 105
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 358,
            column: 77
          },
          end: {
            line: 358,
            column: 83
          }
        }, {
          start: {
            line: 358,
            column: 86
          },
          end: {
            line: 358,
            column: 105
          }
        }],
        line: 358
      },
      "55": {
        loc: {
          start: {
            line: 358,
            column: 30
          },
          end: {
            line: 358,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 358,
            column: 30
          },
          end: {
            line: 358,
            column: 49
          }
        }, {
          start: {
            line: 358,
            column: 53
          },
          end: {
            line: 358,
            column: 74
          }
        }],
        line: 358
      },
      "56": {
        loc: {
          start: {
            line: 358,
            column: 111
          },
          end: {
            line: 358,
            column: 186
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 358,
            column: 158
          },
          end: {
            line: 358,
            column: 164
          }
        }, {
          start: {
            line: 358,
            column: 167
          },
          end: {
            line: 358,
            column: 186
          }
        }],
        line: 358
      },
      "57": {
        loc: {
          start: {
            line: 358,
            column: 111
          },
          end: {
            line: 358,
            column: 155
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 358,
            column: 111
          },
          end: {
            line: 358,
            column: 130
          }
        }, {
          start: {
            line: 358,
            column: 134
          },
          end: {
            line: 358,
            column: 155
          }
        }],
        line: 358
      },
      "58": {
        loc: {
          start: {
            line: 359,
            column: 12
          },
          end: {
            line: 361,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 359,
            column: 12
          },
          end: {
            line: 361,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 359
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/services/resume-processing-service.ts",
      mappings: ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,wDAAsD;AACtD,gDAAyD;AACzD,2CAAwE;AAExE,mEAAmF;AACnF,uDAAuD;AACvD,8CAA8C;AAC9C,yCAA8C;AAoB9C,MAAM,uBAAuB;IAA7B;QACU,gBAAW,GAAG,KAAK,CAAC;IAiY9B,CAAC;IA/XC;;OAEG;IACH,KAAK,CAAC,UAAU;QACd,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YACrB,OAAO;QACT,CAAC;QAED,IAAI,CAAC;YACH,sFAAsF;YACtF,MAAM,2CAAmB,CAAC,UAAU,EAAE,CAAC;YAEvC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YACxB,OAAO,CAAC,GAAG,CAAC,yCAAyC,CAAC,CAAC;QACzD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,mDAAmD,EAAE,KAAK,CAAC,CAAC;YAC1E,IAAA,uBAAc,EAAC,KAAc,EAAE,EAAE,OAAO,EAAE,mBAAmB,EAAE,MAAM,EAAE,YAAY,EAAE,CAAC,CAAC;YACvF,oDAAoD;YACpD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAC1B,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,aAAa,CACjB,MAAc,EACd,UAAkB,EAClB,QAAgB,EAChB,QAAgB,EAChB,QAAgB,EAChB,UAAmC,EAAE;QAErC,IAAI,CAAC;YACH,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;YAExB,OAAO,CAAC,GAAG,CAAC,iCAAiC,MAAM,KAAK,QAAQ,EAAE,CAAC,CAAC;YAEpE,8CAA8C;YAC9C,MAAM,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;YAExC,4DAA4D;YAC5D,MAAM,aAAa,GAAG,MAAM,8BAAoB,CAAC,YAAY,CAAC,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAEtG,mCAAmC;YACnC,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;YAEzE,oDAAoD;YACpD,IAAI,kBAAkB,GAAa,EAAE,CAAC;YACtC,IAAI,OAAO,CAAC,iBAAiB,KAAK,KAAK,EAAE,CAAC;gBACxC,kBAAkB,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,OAAO,CAAC,YAAY,CAAC,CAAC;YACzF,CAAC;YAED,gDAAgD;YAChD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE;gBAClD,QAAQ;gBACR,OAAO,EAAE,aAAa,CAAC,OAAO;gBAC9B,QAAQ,EAAE,aAAa,CAAC,QAAQ;gBAChC,MAAM,EAAE,aAAa,CAAC,MAAM;gBAC5B,aAAa;gBACb,kBAAkB;gBAClB,QAAQ,EAAE;oBACR,QAAQ;oBACR,UAAU,EAAE,IAAI,IAAI,EAAE;oBACtB,YAAY,EAAE,IAAI,IAAI,EAAE;oBACxB,QAAQ;oBACR,eAAe,EAAE,aAAa,CAAC,QAAQ;iBACxC;aACF,CAAC,CAAC;YAEH,OAAO,CAAC,GAAG,CAAC,4CAA4C,MAAM,EAAE,CAAC,CAAC;YAElE,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE;oBACJ,QAAQ;oBACR,OAAO,EAAE,aAAa,CAAC,OAAO;oBAC9B,MAAM,EAAE,aAAa,CAAC,MAAM;oBAC5B,aAAa;oBACb,kBAAkB;oBAClB,eAAe,EAAE,aAAa,CAAC,QAAQ;iBACxC;aACF,CAAC;QAEJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,uCAAuC,MAAM,GAAG,EAAE,KAAK,CAAC,CAAC;YACvE,IAAA,uBAAc,EAAC,KAAc,EAAE;gBAC7B,OAAO,EAAE,mBAAmB;gBAC5B,MAAM,EAAE,SAAS;gBACjB,MAAM;aACP,EAAE;gBACD,QAAQ,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;aACpC,CAAC,CAAC;YAEH,OAAO;gBACL,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,0BAA0B;aAC3E,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,eAAe,CAC3B,MAAc,EACd,UAAkB,EAClB,QAAgB,EAChB,QAAgB;QAQhB,+DAA+D;QAC/D,kDAAkD;QAClD,MAAM,IAAI,KAAK,CAAC,6EAA6E,CAAC,CAAC;IACjG,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,iBAAiB,CAAC,UAAkB,EAAE,QAAgB;QAElE,kCAAkC;QAClC,IAAI,2CAAmB,CAAC,OAAO,EAAE,EAAE,CAAC;YAClC,IAAI,CAAC;gBACH,OAAO,CAAC,GAAG,CAAC,kDAAkD,CAAC,CAAC;gBAChE,OAAO,MAAM,2CAAmB,CAAC,iBAAiB,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;YAC3E,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,IAAI,CAAC,qEAAqE,EAAE,KAAK,CAAC,CAAC;gBAC3F,8BAA8B;YAChC,CAAC;QACH,CAAC;QAED,gCAAgC;QAChC,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;QACjD,OAAO,MAAM,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;IAC5D,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,iBAAiB,CAAC,UAAkB,EAAE,QAAgB;QAClE,0CAA0C;QAC1C,IAAI,IAAI,GAAG,EAAE,CAAC;QAEd,IAAI,QAAQ,KAAK,iBAAiB,EAAE,CAAC;YACnC,4DAA4D;YAC5D,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,wDAAa,WAAW,GAAC,CAAC;YACxD,MAAM,OAAO,GAAG,MAAM,QAAQ,CAAC,UAAU,CAAC,CAAC;YAC3C,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QACtB,CAAC;aAAM,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;YACrC,IAAI,GAAG,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACtC,CAAC;aAAM,CAAC;YACN,MAAM,IAAI,KAAK,CAAC,gDAAgD,QAAQ,EAAE,CAAC,CAAC;QAC9E,CAAC;QAED,yDAAyD;QACzD,MAAM,MAAM,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA4Cb,IAAI,EAAE,CAAC;QAET,MAAM,EAAE,YAAY,EAAE,GAAG,wDAAa,UAAU,GAAC,CAAC;QAClD,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAEhD,IAAI,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC;YAClC,IAAI,CAAC;gBACH,MAAM,UAAU,GAAG,OAAO,MAAM,CAAC,IAAI,KAAK,QAAQ;oBAChD,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC;oBACzB,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC;gBAEhB,OAAO;oBACL,YAAY,EAAE,UAAU,CAAC,YAAY,IAAI,EAAE;oBAC3C,OAAO,EAAE,UAAU,CAAC,OAAO;oBAC3B,MAAM,EAAE,UAAU,CAAC,MAAM,IAAI,EAAE;oBAC/B,UAAU,EAAE,UAAU,CAAC,UAAU,IAAI,EAAE;oBACvC,SAAS,EAAE,UAAU,CAAC,SAAS,IAAI,EAAE;oBACrC,QAAQ,EAAE,UAAU,CAAC,QAAQ,IAAI,EAAE;oBACnC,cAAc,EAAE,UAAU,CAAC,cAAc,IAAI,EAAE;oBAC/C,SAAS,EAAE,UAAU,CAAC,SAAS,IAAI,EAAE;oBACrC,aAAa,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,CAAC,IAAI,EAAE;iBACjD,CAAC;YACJ,CAAC;YAAC,OAAO,UAAU,EAAE,CAAC;gBACpB,OAAO,CAAC,IAAI,CAAC,0CAA0C,CAAC,CAAC;gBACzD,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;YAC3D,CAAC;QACH,CAAC;QAED,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;IAC/D,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,iBAAiB,CAC7B,aAAkC,EAClC,eAAuB,EAAE;;QAEzB,IAAI,CAAC;YACH,OAAO,CAAC,GAAG,CAAC,sCAAsC,CAAC,CAAC;YAEpD,sEAAsE;YACtE,MAAM,cAAc,GAAG;gBACb,aAAa,CAAC,YAAY,CAAC,IAAI,IAAI,KAAK;mBACrC,aAAa,CAAC,OAAO,IAAI,KAAK;kBAC/B,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;sBAC3B,aAAa,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;qBACpF,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,OAAO,GAAG,CAAC,KAAK,SAAS,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;OACpH,CAAC;YAEF,gDAAgD;YAChD,MAAM,EAAE,iBAAiB,EAAE,GAAG,wDAAa,UAAU,GAAC,CAAC;YAEvD,iFAAiF;YACjF,MAAM,UAAU,GAAG;gBACjB,IAAI,EAAE,CAAA,MAAA,aAAa,CAAC,YAAY,0CAAE,IAAI,KAAI,SAAS;gBACnD,MAAM,EAAE,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;gBACvC,UAAU,EAAE,aAAa,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,OAAO,KAAK,GAAG,CAAC,SAAS,MAAM,GAAG,CAAC,OAAO,IAAI,SAAS,MAAM,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;gBACpK,SAAS,EAAE,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,OAAO,GAAG,CAAC,KAAK,SAAS,GAAG,CAAC,WAAW,KAAK,GAAG,CAAC,SAAS,MAAM,GAAG,CAAC,OAAO,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;aACtJ,CAAC;YAEF,MAAM,SAAS,GAAG,MAAM,iBAAiB,CAAC,UAAU,CAAC,CAAC;YAEtD,IAAI,SAAS,CAAC,OAAO,IAAI,SAAS,CAAC,IAAI,EAAE,CAAC;gBACxC,wBAAwB;gBACxB,OAAO,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC;oBAClC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,YAAY,CAAC;oBACvC,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YACvB,CAAC;YAED,+CAA+C;YAC/C,OAAO;gBACL,0DAA0D;gBAC1D,8CAA8C;gBAC9C,kDAAkD;gBAClD,+CAA+C;gBAC/C,uCAAuC;aACxC,CAAC;QAEJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,IAAI,CAAC,yCAAyC,EAAE,KAAK,CAAC,CAAC;YAC/D,OAAO,EAAE,CAAC;QACZ,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,eAAe,CAAC,MAAc,EAAE,UAAe;QAC3D,IAAI,CAAC;YACH,MAAM,EAAE,GAAG,MAAM,IAAA,yBAAiB,GAAE,CAAC;YACrC,MAAM,MAAM,GAAG,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAErD,MAAM,MAAM,CAAC,GAAG,+BACd,MAAM,IACH,UAAU,KACb,QAAQ,kCACH,UAAU,CAAC,QAAQ,KACtB,UAAU,EAAE,sBAAU,CAAC,eAAe,EAAE,EACxC,YAAY,EAAE,sBAAU,CAAC,eAAe,EAAE,OAE5C,CAAC,CAAC,uCAAuC;YAE3C,OAAO,CAAC,GAAG,CAAC,8CAA8C,MAAM,EAAE,CAAC,CAAC;YACpE,OAAO,MAAM,CAAC,CAAC,yDAAyD;QAC1E,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,0CAA0C,EAAE,KAAK,CAAC,CAAC;YACjE,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;QAChD,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,oBAAoB,CAAC,MAAc;QAC/C,IAAI,CAAC;YACH,2BAA2B;YAC3B,MAAM,EAAE,GAAG,MAAM,IAAA,yBAAiB,GAAE,CAAC;YACrC,MAAM,UAAU,GAAG,MAAM,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;YAErE,IAAI,UAAU,CAAC,MAAM,EAAE,CAAC;gBACtB,MAAM,WAAW,GAAG,UAAU,CAAC,IAAI,EAAS,CAAC;gBAE7C,kDAAkD;gBAClD,IAAI,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,QAAQ,EAAE,CAAC;oBAC1B,MAAM,8BAAoB,CAAC,YAAY,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;gBAChE,CAAC;qBAAM,IAAI,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,QAAQ,EAAE,CAAC;oBACjC,MAAM,8BAAoB,CAAC,YAAY,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;gBAChE,CAAC;YACH,CAAC;YAED,qDAAqD;YAErD,OAAO,CAAC,GAAG,CAAC,4CAA4C,MAAM,EAAE,CAAC,CAAC;QACpE,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,IAAI,CAAC,mCAAmC,EAAE,KAAK,CAAC,CAAC;YACzD,yDAAyD;QAC3D,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,iBAAiB,CAAC,MAAc;QACpC,IAAI,CAAC;YACH,MAAM,EAAE,GAAG,MAAM,IAAA,yBAAiB,GAAE,CAAC;YACrC,MAAM,UAAU,GAAG,MAAM,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;YAErE,IAAI,UAAU,CAAC,MAAM,EAAE,CAAC;gBACtB,OAAO,UAAU,CAAC,IAAI,EAAS,CAAC;YAClC,CAAC;YAED,4CAA4C;YAC5C,OAAO,IAAI,CAAC;QACd,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC;YACxD,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,oBAAoB,CAAC,MAAc,EAAE,cAAsB,EAAE;QACjE,IAAI,CAAC;YACH,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;YAExD,MAAM,QAAQ,GAAG,CAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,QAAQ,MAAI,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,QAAQ,CAAA,CAAC;YAC9D,IAAI,QAAQ,EAAE,CAAC;gBACb,OAAO,MAAM,8BAAoB,CAAC,YAAY,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;YACxE,CAAC;YAED,OAAO,IAAI,CAAC;QACd,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,oCAAoC,EAAE,KAAK,CAAC,CAAC;YAC3D,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;CACF;AAED,4BAA4B;AACf,QAAA,uBAAuB,GAAG,IAAI,uBAAuB,EAAE,CAAC",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/services/resume-processing-service.ts"],
      sourcesContent: ["import { FieldValue } from 'firebase-admin/firestore';\nimport { getAdminFirestore } from '@/lib/firebase/admin';\nimport { getStorageService, resumeStorageService } from '@/lib/storage';\nimport { StorageProvider } from '@/lib/storage/IStorageService';\nimport { azureFormRecognizer, ExtractedResumeData } from './azure-form-recognizer';\n// Firebase resume service replaced with Azure services\n// Import will be done dynamically when needed\nimport { logServerError } from '@/lib/errors';\n\nexport interface ProcessedResumeResult {\n  success: boolean;\n  data?: {\n    resumeId: string;\n    fileUrl: string;\n    sasUrl?: string;\n    extractedData: ExtractedResumeData;\n    interviewQuestions: string[];\n    storageProvider: StorageProvider;\n  };\n  error?: string;\n}\n\nexport interface ResumeProcessingOptions {\n  generateQuestions?: boolean;\n  maxQuestions?: number;\n}\n\nclass ResumeProcessingService {\n  private initialized = false;\n\n  /**\n   * Initialize the resume processing service\n   */\n  async initialize(): Promise<void> {\n    if (this.initialized) {\n      return;\n    }\n\n    try {\n      // Initialize Azure Form Recognizer (storage is initialized via the abstraction layer)\n      await azureFormRecognizer.initialize();\n\n      this.initialized = true;\n      console.log('\u2705 Resume processing service initialized');\n    } catch (error) {\n      console.error('\u274C Failed to initialize resume processing service:', error);\n      logServerError(error as Error, { service: 'resume-processing', action: 'initialize' });\n      // Don't throw - we can still operate with fallbacks\n      this.initialized = true;\n    }\n  }\n\n  /**\n   * Process uploaded resume: storage, extraction, and data persistence\n   */\n  async processResume(\n    userId: string,\n    fileBuffer: Buffer,\n    fileName: string,\n    mimeType: string,\n    fileSize: number,\n    options: ResumeProcessingOptions = {}\n  ): Promise<ProcessedResumeResult> {\n    try {\n      await this.initialize();\n\n      console.log(`\uD83D\uDD04 Processing resume for user ${userId}: ${fileName}`);\n\n      // Step 1: Delete existing resume if it exists\n      await this.deleteExistingResume(userId);\n\n      // Step 2: Upload to storage using the new abstraction layer\n      const storageResult = await resumeStorageService.uploadResume(userId, fileBuffer, fileName, mimeType);\n\n      // Step 3: Extract data from resume\n      const extractedData = await this.extractResumeData(fileBuffer, mimeType);\n\n      // Step 4: Generate interview questions if requested\n      let interviewQuestions: string[] = [];\n      if (options.generateQuestions !== false) {\n        interviewQuestions = await this.generateQuestions(extractedData, options.maxQuestions);\n      }\n\n      // Step 5: Save to Firestore profiles collection\n      const resumeId = await this.saveToFirestore(userId, {\n        fileName,\n        fileUrl: storageResult.fileUrl,\n        filePath: storageResult.filePath,\n        sasUrl: storageResult.sasUrl,\n        extractedData,\n        interviewQuestions,\n        metadata: {\n          fileSize,\n          uploadDate: new Date(),\n          lastModified: new Date(),\n          mimeType,\n          storageProvider: storageResult.provider\n        }\n      });\n\n      console.log(`\u2705 Resume processed successfully for user ${userId}`);\n\n      return {\n        success: true,\n        data: {\n          resumeId,\n          fileUrl: storageResult.fileUrl,\n          sasUrl: storageResult.sasUrl,\n          extractedData,\n          interviewQuestions,\n          storageProvider: storageResult.provider\n        }\n      };\n\n    } catch (error) {\n      console.error(`\u274C Failed to process resume for user ${userId}:`, error);\n      logServerError(error as Error, {\n        service: 'resume-processing',\n        action: 'process',\n        userId\n      }, {\n        fileName: fileName.substring(0, 50)\n      });\n\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to process resume'\n      };\n    }\n  }\n\n  /**\n   * This method is deprecated - storage is now handled via the abstraction layer\n   */\n  private async uploadToStorage(\n    userId: string,\n    fileBuffer: Buffer,\n    fileName: string,\n    mimeType: string\n  ): Promise<{\n    fileUrl: string;\n    filePath?: string;\n    blobName?: string;\n    sasUrl?: string;\n    provider: 'azure' | 'firebase';\n  }> {\n    // This method is now replaced by the storage abstraction layer\n    // Use resumeStorageService.uploadResume() instead\n    throw new Error('This method is deprecated. Use resumeStorageService.uploadResume() instead.');\n  }\n\n  /**\n   * Extract data from resume using Azure Form Recognizer or OpenAI\n   */\n  private async extractResumeData(fileBuffer: Buffer, mimeType: string): Promise<ExtractedResumeData> {\n    \n    // Try Azure Form Recognizer first\n    if (azureFormRecognizer.isReady()) {\n      try {\n        console.log('\uD83D\uDD0D Extracting data with Azure Form Recognizer...');\n        return await azureFormRecognizer.extractResumeData(fileBuffer, mimeType);\n      } catch (error) {\n        console.warn('\u26A0\uFE0F Azure Form Recognizer extraction failed, falling back to OpenAI:', error);\n        // Continue to OpenAI fallback\n      }\n    }\n\n    // Fallback to OpenAI extraction\n    console.log('\uD83D\uDD0D Extracting data with OpenAI...');\n    return await this.extractWithOpenAI(fileBuffer, mimeType);\n  }\n\n  /**\n   * Extract resume data using OpenAI as fallback\n   */\n  private async extractWithOpenAI(fileBuffer: Buffer, mimeType: string): Promise<ExtractedResumeData> {\n    // For PDFs, we need to extract text first\n    let text = '';\n\n    if (mimeType === 'application/pdf') {\n      // Dynamic import to avoid bundling pdf-parse in main bundle\n      const { default: pdfParse } = await import('pdf-parse');\n      const pdfData = await pdfParse(fileBuffer);\n      text = pdfData.text;\n    } else if (mimeType.includes('text')) {\n      text = fileBuffer.toString('utf-8');\n    } else {\n      throw new Error(`Unsupported file type for OpenAI extraction: ${mimeType}`);\n    }\n\n    // Use OpenAI function calling to extract structured data\n    const prompt = `Extract the following information from this resume and return as JSON:\n\n    {\n      \"personalInfo\": {\n        \"name\": \"Full name\",\n        \"email\": \"Email address\", \n        \"phone\": \"Phone number\",\n        \"address\": \"Address\",\n        \"linkedin\": \"LinkedIn URL\",\n        \"github\": \"GitHub URL\",\n        \"website\": \"Personal website URL\"\n      },\n      \"summary\": \"Professional summary\",\n      \"skills\": [\"skill1\", \"skill2\", ...],\n      \"experience\": [\n        {\n          \"company\": \"Company name\",\n          \"position\": \"Job title\", \n          \"startDate\": \"Start date\",\n          \"endDate\": \"End date or 'Present'\",\n          \"isCurrent\": true/false,\n          \"description\": \"Job description\",\n          \"achievements\": [\"achievement1\", ...],\n          \"technologies\": [\"tech1\", \"tech2\", ...],\n          \"location\": \"Location\"\n        }\n      ],\n      \"education\": [\n        {\n          \"institution\": \"School name\",\n          \"degree\": \"Degree type\",\n          \"field\": \"Field of study\", \n          \"startDate\": \"Start date\",\n          \"endDate\": \"End date\",\n          \"gpa\": 3.5,\n          \"location\": \"Location\"\n        }\n      ],\n      \"projects\": [...],\n      \"certifications\": [...],\n      \"languages\": [...]\n    }\n\n    Resume text:\n    ${text}`;\n\n    const { tailorResume } = await import('@/lib/ai');\n    const result = await tailorResume(text, prompt);\n\n    if (result.success && result.data) {\n      try {\n        const parsedData = typeof result.data === 'string' \n          ? JSON.parse(result.data) \n          : result.data;\n\n        return {\n          personalInfo: parsedData.personalInfo || {},\n          summary: parsedData.summary,\n          skills: parsedData.skills || [],\n          experience: parsedData.experience || [],\n          education: parsedData.education || [],\n          projects: parsedData.projects || [],\n          certifications: parsedData.certifications || [],\n          languages: parsedData.languages || [],\n          rawExtraction: { text, aiResponse: result.data }\n        };\n      } catch (parseError) {\n        console.warn('Failed to parse OpenAI extraction result');\n        throw new Error('Failed to parse extracted resume data');\n      }\n    }\n\n    throw new Error('Failed to extract resume data with OpenAI');\n  }\n\n  /**\n   * Generate interview questions based on extracted data\n   */\n  private async generateQuestions(\n    extractedData: ExtractedResumeData, \n    maxQuestions: number = 10\n  ): Promise<string[]> {\n    try {\n      console.log('\uD83E\uDD14 Generating interview questions...');\n\n      // Create a summary of the candidate's profile for question generation\n      const profileSummary = `\n        Name: ${extractedData.personalInfo.name || 'N/A'}\n        Summary: ${extractedData.summary || 'N/A'}\n        Skills: ${extractedData.skills.join(', ')}\n        Experience: ${extractedData.experience.map(exp => `${exp.position} at ${exp.company}`).join(', ')}\n        Education: ${extractedData.education.map(edu => `${edu.degree} in ${edu.field} from ${edu.institution}`).join(', ')}\n      `;\n\n      // Dynamic import to avoid circular dependencies\n      const { generateQuestions } = await import('@/lib/ai');\n      \n      // Convert ExtractedResumeData to ResumeInfo format expected by generateQuestions\n      const resumeInfo = {\n        name: extractedData.personalInfo?.name || 'Unknown',\n        skills: extractedData.skills.join(', '),\n        experience: extractedData.experience.map(exp => `${exp.position} at ${exp.company} (${exp.startDate} - ${exp.endDate || 'Present'}): ${exp.description}`).join('. '),\n        education: extractedData.education.map(edu => `${edu.degree} in ${edu.field} from ${edu.institution} (${edu.startDate} - ${edu.endDate})`).join(', ')\n      };\n      \n      const questions = await generateQuestions(resumeInfo);\n      \n      if (questions.success && questions.data) {\n        // Limit to maxQuestions\n        return Array.isArray(questions.data) \n          ? questions.data.slice(0, maxQuestions)\n          : [questions.data];\n      }\n\n      // Return default questions if generation fails\n      return [\n        \"Tell me about yourself and your professional background.\",\n        \"What interests you most about this position?\",\n        \"Describe a challenging project you've worked on.\",\n        \"How do you stay updated with industry trends?\",\n        \"Where do you see yourself in 5 years?\"\n      ];\n\n    } catch (error) {\n      console.warn('Failed to generate interview questions:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Save resume data to Firestore profiles collection\n   */\n  private async saveToFirestore(userId: string, resumeData: any): Promise<string> {\n    try {\n      const db = await getAdminFirestore();\n      const docRef = db.collection('profiles').doc(userId);\n\n      await docRef.set({\n        userId,\n        ...resumeData,\n        metadata: {\n          ...resumeData.metadata,\n          uploadDate: FieldValue.serverTimestamp(),\n          lastModified: FieldValue.serverTimestamp(),\n        },\n      }); // Use merge to update existing profile\n\n      console.log(`\u2705 Resume data saved to Firestore for user: ${userId}`);\n      return userId; // Use userId as the document ID since that's what we set\n    } catch (error) {\n      console.error('Failed to save resume data to Firestore:', error);\n      throw new Error('Failed to save resume data');\n    }\n  }\n\n  /**\n   * Delete existing resume for user\n   */\n  private async deleteExistingResume(userId: string): Promise<void> {\n    try {\n      // Get existing resume data\n      const db = await getAdminFirestore();\n      const profileDoc = await db.collection('profiles').doc(userId).get();\n\n      if (profileDoc.exists) {\n        const profileData = profileDoc.data() as any;\n        \n        // Delete from storage using the abstraction layer\n        if (profileData?.filePath) {\n          await resumeStorageService.deleteResume(profileData.filePath);\n        } else if (profileData?.blobName) {\n          await resumeStorageService.deleteResume(profileData.blobName);\n        }\n      }\n\n      // Legacy resume cleanup (Firebase functions removed)\n      \n      console.log(`\uD83D\uDDD1\uFE0F Existing resume cleaned up for user: ${userId}`);\n    } catch (error) {\n      console.warn('Failed to delete existing resume:', error);\n      // Don't throw - we still want to proceed with new upload\n    }\n  }\n\n  /**\n   * Get user's resume data from Firestore\n   */\n  async getUserResumeData(userId: string): Promise<any> {\n    try {\n      const db = await getAdminFirestore();\n      const profileDoc = await db.collection('profiles').doc(userId).get();\n\n      if (profileDoc.exists) {\n        return profileDoc.data() as any;\n      }\n\n      // Legacy resume collection fallback removed\n      return null;\n    } catch (error) {\n      console.error('Failed to get user resume data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Generate new secure URL for file access\n   */\n  async generateNewSecureUrl(userId: string, expiryHours: number = 24): Promise<string | null> {\n    try {\n      const resumeData = await this.getUserResumeData(userId);\n      \n      const filePath = resumeData?.filePath || resumeData?.blobName;\n      if (filePath) {\n        return await resumeStorageService.getResumeUrl(filePath, expiryHours);\n      }\n\n      return null;\n    } catch (error) {\n      console.error('Failed to generate new secure URL:', error);\n      return null;\n    }\n  }\n}\n\n// Export singleton instance\nexport const resumeProcessingService = new ResumeProcessingService();\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4fe6742d8ca702dfe7208cf4cec0c64faf823f73"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_18q5nz8gk1 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_18q5nz8gk1();
var __createBinding =
/* istanbul ignore next */
(cov_18q5nz8gk1().s[0]++,
/* istanbul ignore next */
(cov_18q5nz8gk1().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_18q5nz8gk1().b[0][1]++, this.__createBinding) ||
/* istanbul ignore next */
(cov_18q5nz8gk1().b[0][2]++, Object.create ?
/* istanbul ignore next */
(cov_18q5nz8gk1().b[1][0]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_18q5nz8gk1().f[0]++;
  cov_18q5nz8gk1().s[1]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_18q5nz8gk1().b[2][0]++;
    cov_18q5nz8gk1().s[2]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_18q5nz8gk1().b[2][1]++;
  }
  var desc =
  /* istanbul ignore next */
  (cov_18q5nz8gk1().s[3]++, Object.getOwnPropertyDescriptor(m, k));
  /* istanbul ignore next */
  cov_18q5nz8gk1().s[4]++;
  if (
  /* istanbul ignore next */
  (cov_18q5nz8gk1().b[4][0]++, !desc) ||
  /* istanbul ignore next */
  (cov_18q5nz8gk1().b[4][1]++, "get" in desc ?
  /* istanbul ignore next */
  (cov_18q5nz8gk1().b[5][0]++, !m.__esModule) :
  /* istanbul ignore next */
  (cov_18q5nz8gk1().b[5][1]++,
  /* istanbul ignore next */
  (cov_18q5nz8gk1().b[6][0]++, desc.writable) ||
  /* istanbul ignore next */
  (cov_18q5nz8gk1().b[6][1]++, desc.configurable)))) {
    /* istanbul ignore next */
    cov_18q5nz8gk1().b[3][0]++;
    cov_18q5nz8gk1().s[5]++;
    desc = {
      enumerable: true,
      get: function () {
        /* istanbul ignore next */
        cov_18q5nz8gk1().f[1]++;
        cov_18q5nz8gk1().s[6]++;
        return m[k];
      }
    };
  } else
  /* istanbul ignore next */
  {
    cov_18q5nz8gk1().b[3][1]++;
  }
  cov_18q5nz8gk1().s[7]++;
  Object.defineProperty(o, k2, desc);
}) :
/* istanbul ignore next */
(cov_18q5nz8gk1().b[1][1]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_18q5nz8gk1().f[2]++;
  cov_18q5nz8gk1().s[8]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_18q5nz8gk1().b[7][0]++;
    cov_18q5nz8gk1().s[9]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_18q5nz8gk1().b[7][1]++;
  }
  cov_18q5nz8gk1().s[10]++;
  o[k2] = m[k];
})));
var __setModuleDefault =
/* istanbul ignore next */
(cov_18q5nz8gk1().s[11]++,
/* istanbul ignore next */
(cov_18q5nz8gk1().b[8][0]++, this) &&
/* istanbul ignore next */
(cov_18q5nz8gk1().b[8][1]++, this.__setModuleDefault) ||
/* istanbul ignore next */
(cov_18q5nz8gk1().b[8][2]++, Object.create ?
/* istanbul ignore next */
(cov_18q5nz8gk1().b[9][0]++, function (o, v) {
  /* istanbul ignore next */
  cov_18q5nz8gk1().f[3]++;
  cov_18q5nz8gk1().s[12]++;
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
}) :
/* istanbul ignore next */
(cov_18q5nz8gk1().b[9][1]++, function (o, v) {
  /* istanbul ignore next */
  cov_18q5nz8gk1().f[4]++;
  cov_18q5nz8gk1().s[13]++;
  o["default"] = v;
})));
var __importStar =
/* istanbul ignore next */
(cov_18q5nz8gk1().s[14]++,
/* istanbul ignore next */
(cov_18q5nz8gk1().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_18q5nz8gk1().b[10][1]++, this.__importStar) ||
/* istanbul ignore next */
(cov_18q5nz8gk1().b[10][2]++, function () {
  /* istanbul ignore next */
  cov_18q5nz8gk1().f[5]++;
  cov_18q5nz8gk1().s[15]++;
  var ownKeys = function (o) {
    /* istanbul ignore next */
    cov_18q5nz8gk1().f[6]++;
    cov_18q5nz8gk1().s[16]++;
    ownKeys =
    /* istanbul ignore next */
    (cov_18q5nz8gk1().b[11][0]++, Object.getOwnPropertyNames) ||
    /* istanbul ignore next */
    (cov_18q5nz8gk1().b[11][1]++, function (o) {
      /* istanbul ignore next */
      cov_18q5nz8gk1().f[7]++;
      var ar =
      /* istanbul ignore next */
      (cov_18q5nz8gk1().s[17]++, []);
      /* istanbul ignore next */
      cov_18q5nz8gk1().s[18]++;
      for (var k in o) {
        /* istanbul ignore next */
        cov_18q5nz8gk1().s[19]++;
        if (Object.prototype.hasOwnProperty.call(o, k)) {
          /* istanbul ignore next */
          cov_18q5nz8gk1().b[12][0]++;
          cov_18q5nz8gk1().s[20]++;
          ar[ar.length] = k;
        } else
        /* istanbul ignore next */
        {
          cov_18q5nz8gk1().b[12][1]++;
        }
      }
      /* istanbul ignore next */
      cov_18q5nz8gk1().s[21]++;
      return ar;
    });
    /* istanbul ignore next */
    cov_18q5nz8gk1().s[22]++;
    return ownKeys(o);
  };
  /* istanbul ignore next */
  cov_18q5nz8gk1().s[23]++;
  return function (mod) {
    /* istanbul ignore next */
    cov_18q5nz8gk1().f[8]++;
    cov_18q5nz8gk1().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_18q5nz8gk1().b[14][0]++, mod) &&
    /* istanbul ignore next */
    (cov_18q5nz8gk1().b[14][1]++, mod.__esModule)) {
      /* istanbul ignore next */
      cov_18q5nz8gk1().b[13][0]++;
      cov_18q5nz8gk1().s[25]++;
      return mod;
    } else
    /* istanbul ignore next */
    {
      cov_18q5nz8gk1().b[13][1]++;
    }
    var result =
    /* istanbul ignore next */
    (cov_18q5nz8gk1().s[26]++, {});
    /* istanbul ignore next */
    cov_18q5nz8gk1().s[27]++;
    if (mod != null) {
      /* istanbul ignore next */
      cov_18q5nz8gk1().b[15][0]++;
      cov_18q5nz8gk1().s[28]++;
      for (var k =
        /* istanbul ignore next */
        (cov_18q5nz8gk1().s[29]++, ownKeys(mod)), i =
        /* istanbul ignore next */
        (cov_18q5nz8gk1().s[30]++, 0); i < k.length; i++) {
        /* istanbul ignore next */
        cov_18q5nz8gk1().s[31]++;
        if (k[i] !== "default") {
          /* istanbul ignore next */
          cov_18q5nz8gk1().b[16][0]++;
          cov_18q5nz8gk1().s[32]++;
          __createBinding(result, mod, k[i]);
        } else
        /* istanbul ignore next */
        {
          cov_18q5nz8gk1().b[16][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_18q5nz8gk1().b[15][1]++;
    }
    cov_18q5nz8gk1().s[33]++;
    __setModuleDefault(result, mod);
    /* istanbul ignore next */
    cov_18q5nz8gk1().s[34]++;
    return result;
  };
}()));
/* istanbul ignore next */
cov_18q5nz8gk1().s[35]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_18q5nz8gk1().s[36]++;
exports.resumeProcessingService = void 0;
const firestore_1 =
/* istanbul ignore next */
(cov_18q5nz8gk1().s[37]++, require("firebase-admin/firestore"));
const admin_1 =
/* istanbul ignore next */
(cov_18q5nz8gk1().s[38]++, require("@/lib/firebase/admin"));
const storage_1 =
/* istanbul ignore next */
(cov_18q5nz8gk1().s[39]++, require("@/lib/storage"));
const azure_form_recognizer_1 =
/* istanbul ignore next */
(cov_18q5nz8gk1().s[40]++, require("./azure-form-recognizer"));
// Firebase resume service replaced with Azure services
// Import will be done dynamically when needed
const errors_1 =
/* istanbul ignore next */
(cov_18q5nz8gk1().s[41]++, require("@/lib/errors"));
class ResumeProcessingService {
  constructor() {
    /* istanbul ignore next */
    cov_18q5nz8gk1().f[9]++;
    cov_18q5nz8gk1().s[42]++;
    this.initialized = false;
  }
  /**
   * Initialize the resume processing service
   */
  async initialize() {
    /* istanbul ignore next */
    cov_18q5nz8gk1().f[10]++;
    cov_18q5nz8gk1().s[43]++;
    if (this.initialized) {
      /* istanbul ignore next */
      cov_18q5nz8gk1().b[17][0]++;
      cov_18q5nz8gk1().s[44]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_18q5nz8gk1().b[17][1]++;
    }
    cov_18q5nz8gk1().s[45]++;
    try {
      /* istanbul ignore next */
      cov_18q5nz8gk1().s[46]++;
      // Initialize Azure Form Recognizer (storage is initialized via the abstraction layer)
      await azure_form_recognizer_1.azureFormRecognizer.initialize();
      /* istanbul ignore next */
      cov_18q5nz8gk1().s[47]++;
      this.initialized = true;
      /* istanbul ignore next */
      cov_18q5nz8gk1().s[48]++;
      console.log('✅ Resume processing service initialized');
    } catch (error) {
      /* istanbul ignore next */
      cov_18q5nz8gk1().s[49]++;
      console.error('❌ Failed to initialize resume processing service:', error);
      /* istanbul ignore next */
      cov_18q5nz8gk1().s[50]++;
      (0, errors_1.logServerError)(error, {
        service: 'resume-processing',
        action: 'initialize'
      });
      // Don't throw - we can still operate with fallbacks
      /* istanbul ignore next */
      cov_18q5nz8gk1().s[51]++;
      this.initialized = true;
    }
  }
  /**
   * Process uploaded resume: storage, extraction, and data persistence
   */
  async processResume(userId, fileBuffer, fileName, mimeType, fileSize, options =
  /* istanbul ignore next */
  (cov_18q5nz8gk1().b[18][0]++, {})) {
    /* istanbul ignore next */
    cov_18q5nz8gk1().f[11]++;
    cov_18q5nz8gk1().s[52]++;
    try {
      /* istanbul ignore next */
      cov_18q5nz8gk1().s[53]++;
      await this.initialize();
      /* istanbul ignore next */
      cov_18q5nz8gk1().s[54]++;
      console.log(`🔄 Processing resume for user ${userId}: ${fileName}`);
      // Step 1: Delete existing resume if it exists
      /* istanbul ignore next */
      cov_18q5nz8gk1().s[55]++;
      await this.deleteExistingResume(userId);
      // Step 2: Upload to storage using the new abstraction layer
      const storageResult =
      /* istanbul ignore next */
      (cov_18q5nz8gk1().s[56]++, await storage_1.resumeStorageService.uploadResume(userId, fileBuffer, fileName, mimeType));
      // Step 3: Extract data from resume
      const extractedData =
      /* istanbul ignore next */
      (cov_18q5nz8gk1().s[57]++, await this.extractResumeData(fileBuffer, mimeType));
      // Step 4: Generate interview questions if requested
      let interviewQuestions =
      /* istanbul ignore next */
      (cov_18q5nz8gk1().s[58]++, []);
      /* istanbul ignore next */
      cov_18q5nz8gk1().s[59]++;
      if (options.generateQuestions !== false) {
        /* istanbul ignore next */
        cov_18q5nz8gk1().b[19][0]++;
        cov_18q5nz8gk1().s[60]++;
        interviewQuestions = await this.generateQuestions(extractedData, options.maxQuestions);
      } else
      /* istanbul ignore next */
      {
        cov_18q5nz8gk1().b[19][1]++;
      }
      // Step 5: Save to Firestore profiles collection
      const resumeId =
      /* istanbul ignore next */
      (cov_18q5nz8gk1().s[61]++, await this.saveToFirestore(userId, {
        fileName,
        fileUrl: storageResult.fileUrl,
        filePath: storageResult.filePath,
        sasUrl: storageResult.sasUrl,
        extractedData,
        interviewQuestions,
        metadata: {
          fileSize,
          uploadDate: new Date(),
          lastModified: new Date(),
          mimeType,
          storageProvider: storageResult.provider
        }
      }));
      /* istanbul ignore next */
      cov_18q5nz8gk1().s[62]++;
      console.log(`✅ Resume processed successfully for user ${userId}`);
      /* istanbul ignore next */
      cov_18q5nz8gk1().s[63]++;
      return {
        success: true,
        data: {
          resumeId,
          fileUrl: storageResult.fileUrl,
          sasUrl: storageResult.sasUrl,
          extractedData,
          interviewQuestions,
          storageProvider: storageResult.provider
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_18q5nz8gk1().s[64]++;
      console.error(`❌ Failed to process resume for user ${userId}:`, error);
      /* istanbul ignore next */
      cov_18q5nz8gk1().s[65]++;
      (0, errors_1.logServerError)(error, {
        service: 'resume-processing',
        action: 'process',
        userId
      }, {
        fileName: fileName.substring(0, 50)
      });
      /* istanbul ignore next */
      cov_18q5nz8gk1().s[66]++;
      return {
        success: false,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_18q5nz8gk1().b[20][0]++, error.message) :
        /* istanbul ignore next */
        (cov_18q5nz8gk1().b[20][1]++, 'Failed to process resume')
      };
    }
  }
  /**
   * This method is deprecated - storage is now handled via the abstraction layer
   */
  async uploadToStorage(userId, fileBuffer, fileName, mimeType) {
    /* istanbul ignore next */
    cov_18q5nz8gk1().f[12]++;
    cov_18q5nz8gk1().s[67]++;
    // This method is now replaced by the storage abstraction layer
    // Use resumeStorageService.uploadResume() instead
    throw new Error('This method is deprecated. Use resumeStorageService.uploadResume() instead.');
  }
  /**
   * Extract data from resume using Azure Form Recognizer or OpenAI
   */
  async extractResumeData(fileBuffer, mimeType) {
    /* istanbul ignore next */
    cov_18q5nz8gk1().f[13]++;
    cov_18q5nz8gk1().s[68]++;
    // Try Azure Form Recognizer first
    if (azure_form_recognizer_1.azureFormRecognizer.isReady()) {
      /* istanbul ignore next */
      cov_18q5nz8gk1().b[21][0]++;
      cov_18q5nz8gk1().s[69]++;
      try {
        /* istanbul ignore next */
        cov_18q5nz8gk1().s[70]++;
        console.log('🔍 Extracting data with Azure Form Recognizer...');
        /* istanbul ignore next */
        cov_18q5nz8gk1().s[71]++;
        return await azure_form_recognizer_1.azureFormRecognizer.extractResumeData(fileBuffer, mimeType);
      } catch (error) {
        /* istanbul ignore next */
        cov_18q5nz8gk1().s[72]++;
        console.warn('⚠️ Azure Form Recognizer extraction failed, falling back to OpenAI:', error);
        // Continue to OpenAI fallback
      }
    } else
    /* istanbul ignore next */
    {
      cov_18q5nz8gk1().b[21][1]++;
    }
    // Fallback to OpenAI extraction
    cov_18q5nz8gk1().s[73]++;
    console.log('🔍 Extracting data with OpenAI...');
    /* istanbul ignore next */
    cov_18q5nz8gk1().s[74]++;
    return await this.extractWithOpenAI(fileBuffer, mimeType);
  }
  /**
   * Extract resume data using OpenAI as fallback
   */
  async extractWithOpenAI(fileBuffer, mimeType) {
    /* istanbul ignore next */
    cov_18q5nz8gk1().f[14]++;
    // For PDFs, we need to extract text first
    let text =
    /* istanbul ignore next */
    (cov_18q5nz8gk1().s[75]++, '');
    /* istanbul ignore next */
    cov_18q5nz8gk1().s[76]++;
    if (mimeType === 'application/pdf') {
      /* istanbul ignore next */
      cov_18q5nz8gk1().b[22][0]++;
      // Dynamic import to avoid bundling pdf-parse in main bundle
      const {
        default: pdfParse
      } =
      /* istanbul ignore next */
      (cov_18q5nz8gk1().s[77]++, await Promise.resolve().then(() => {
        /* istanbul ignore next */
        cov_18q5nz8gk1().f[15]++;
        cov_18q5nz8gk1().s[78]++;
        return __importStar(require('pdf-parse'));
      }));
      const pdfData =
      /* istanbul ignore next */
      (cov_18q5nz8gk1().s[79]++, await pdfParse(fileBuffer));
      /* istanbul ignore next */
      cov_18q5nz8gk1().s[80]++;
      text = pdfData.text;
    } else {
      /* istanbul ignore next */
      cov_18q5nz8gk1().b[22][1]++;
      cov_18q5nz8gk1().s[81]++;
      if (mimeType.includes('text')) {
        /* istanbul ignore next */
        cov_18q5nz8gk1().b[23][0]++;
        cov_18q5nz8gk1().s[82]++;
        text = fileBuffer.toString('utf-8');
      } else {
        /* istanbul ignore next */
        cov_18q5nz8gk1().b[23][1]++;
        cov_18q5nz8gk1().s[83]++;
        throw new Error(`Unsupported file type for OpenAI extraction: ${mimeType}`);
      }
    }
    // Use OpenAI function calling to extract structured data
    const prompt =
    /* istanbul ignore next */
    (cov_18q5nz8gk1().s[84]++, `Extract the following information from this resume and return as JSON:

    {
      "personalInfo": {
        "name": "Full name",
        "email": "Email address", 
        "phone": "Phone number",
        "address": "Address",
        "linkedin": "LinkedIn URL",
        "github": "GitHub URL",
        "website": "Personal website URL"
      },
      "summary": "Professional summary",
      "skills": ["skill1", "skill2", ...],
      "experience": [
        {
          "company": "Company name",
          "position": "Job title", 
          "startDate": "Start date",
          "endDate": "End date or 'Present'",
          "isCurrent": true/false,
          "description": "Job description",
          "achievements": ["achievement1", ...],
          "technologies": ["tech1", "tech2", ...],
          "location": "Location"
        }
      ],
      "education": [
        {
          "institution": "School name",
          "degree": "Degree type",
          "field": "Field of study", 
          "startDate": "Start date",
          "endDate": "End date",
          "gpa": 3.5,
          "location": "Location"
        }
      ],
      "projects": [...],
      "certifications": [...],
      "languages": [...]
    }

    Resume text:
    ${text}`);
    const {
      tailorResume
    } =
    /* istanbul ignore next */
    (cov_18q5nz8gk1().s[85]++, await Promise.resolve().then(() => {
      /* istanbul ignore next */
      cov_18q5nz8gk1().f[16]++;
      cov_18q5nz8gk1().s[86]++;
      return __importStar(require('@/lib/ai'));
    }));
    const result =
    /* istanbul ignore next */
    (cov_18q5nz8gk1().s[87]++, await tailorResume(text, prompt));
    /* istanbul ignore next */
    cov_18q5nz8gk1().s[88]++;
    if (
    /* istanbul ignore next */
    (cov_18q5nz8gk1().b[25][0]++, result.success) &&
    /* istanbul ignore next */
    (cov_18q5nz8gk1().b[25][1]++, result.data)) {
      /* istanbul ignore next */
      cov_18q5nz8gk1().b[24][0]++;
      cov_18q5nz8gk1().s[89]++;
      try {
        const parsedData =
        /* istanbul ignore next */
        (cov_18q5nz8gk1().s[90]++, typeof result.data === 'string' ?
        /* istanbul ignore next */
        (cov_18q5nz8gk1().b[26][0]++, JSON.parse(result.data)) :
        /* istanbul ignore next */
        (cov_18q5nz8gk1().b[26][1]++, result.data));
        /* istanbul ignore next */
        cov_18q5nz8gk1().s[91]++;
        return {
          personalInfo:
          /* istanbul ignore next */
          (cov_18q5nz8gk1().b[27][0]++, parsedData.personalInfo) ||
          /* istanbul ignore next */
          (cov_18q5nz8gk1().b[27][1]++, {}),
          summary: parsedData.summary,
          skills:
          /* istanbul ignore next */
          (cov_18q5nz8gk1().b[28][0]++, parsedData.skills) ||
          /* istanbul ignore next */
          (cov_18q5nz8gk1().b[28][1]++, []),
          experience:
          /* istanbul ignore next */
          (cov_18q5nz8gk1().b[29][0]++, parsedData.experience) ||
          /* istanbul ignore next */
          (cov_18q5nz8gk1().b[29][1]++, []),
          education:
          /* istanbul ignore next */
          (cov_18q5nz8gk1().b[30][0]++, parsedData.education) ||
          /* istanbul ignore next */
          (cov_18q5nz8gk1().b[30][1]++, []),
          projects:
          /* istanbul ignore next */
          (cov_18q5nz8gk1().b[31][0]++, parsedData.projects) ||
          /* istanbul ignore next */
          (cov_18q5nz8gk1().b[31][1]++, []),
          certifications:
          /* istanbul ignore next */
          (cov_18q5nz8gk1().b[32][0]++, parsedData.certifications) ||
          /* istanbul ignore next */
          (cov_18q5nz8gk1().b[32][1]++, []),
          languages:
          /* istanbul ignore next */
          (cov_18q5nz8gk1().b[33][0]++, parsedData.languages) ||
          /* istanbul ignore next */
          (cov_18q5nz8gk1().b[33][1]++, []),
          rawExtraction: {
            text,
            aiResponse: result.data
          }
        };
      } catch (parseError) {
        /* istanbul ignore next */
        cov_18q5nz8gk1().s[92]++;
        console.warn('Failed to parse OpenAI extraction result');
        /* istanbul ignore next */
        cov_18q5nz8gk1().s[93]++;
        throw new Error('Failed to parse extracted resume data');
      }
    } else
    /* istanbul ignore next */
    {
      cov_18q5nz8gk1().b[24][1]++;
    }
    cov_18q5nz8gk1().s[94]++;
    throw new Error('Failed to extract resume data with OpenAI');
  }
  /**
   * Generate interview questions based on extracted data
   */
  async generateQuestions(extractedData, maxQuestions =
  /* istanbul ignore next */
  (cov_18q5nz8gk1().b[34][0]++, 10)) {
    /* istanbul ignore next */
    cov_18q5nz8gk1().f[17]++;
    var _a;
    /* istanbul ignore next */
    cov_18q5nz8gk1().s[95]++;
    try {
      /* istanbul ignore next */
      cov_18q5nz8gk1().s[96]++;
      console.log('🤔 Generating interview questions...');
      // Create a summary of the candidate's profile for question generation
      const profileSummary =
      /* istanbul ignore next */
      (cov_18q5nz8gk1().s[97]++, `
        Name: ${
      /* istanbul ignore next */
      (cov_18q5nz8gk1().b[35][0]++, extractedData.personalInfo.name) ||
      /* istanbul ignore next */
      (cov_18q5nz8gk1().b[35][1]++, 'N/A')}
        Summary: ${
      /* istanbul ignore next */
      (cov_18q5nz8gk1().b[36][0]++, extractedData.summary) ||
      /* istanbul ignore next */
      (cov_18q5nz8gk1().b[36][1]++, 'N/A')}
        Skills: ${extractedData.skills.join(', ')}
        Experience: ${extractedData.experience.map(exp => {
        /* istanbul ignore next */
        cov_18q5nz8gk1().f[18]++;
        cov_18q5nz8gk1().s[98]++;
        return `${exp.position} at ${exp.company}`;
      }).join(', ')}
        Education: ${extractedData.education.map(edu => {
        /* istanbul ignore next */
        cov_18q5nz8gk1().f[19]++;
        cov_18q5nz8gk1().s[99]++;
        return `${edu.degree} in ${edu.field} from ${edu.institution}`;
      }).join(', ')}
      `);
      // Dynamic import to avoid circular dependencies
      const {
        generateQuestions
      } =
      /* istanbul ignore next */
      (cov_18q5nz8gk1().s[100]++, await Promise.resolve().then(() => {
        /* istanbul ignore next */
        cov_18q5nz8gk1().f[20]++;
        cov_18q5nz8gk1().s[101]++;
        return __importStar(require('@/lib/ai'));
      }));
      // Convert ExtractedResumeData to ResumeInfo format expected by generateQuestions
      const resumeInfo =
      /* istanbul ignore next */
      (cov_18q5nz8gk1().s[102]++, {
        name:
        /* istanbul ignore next */
        (cov_18q5nz8gk1().b[37][0]++,
        /* istanbul ignore next */
        (cov_18q5nz8gk1().b[39][0]++, (_a = extractedData.personalInfo) === null) ||
        /* istanbul ignore next */
        (cov_18q5nz8gk1().b[39][1]++, _a === void 0) ?
        /* istanbul ignore next */
        (cov_18q5nz8gk1().b[38][0]++, void 0) :
        /* istanbul ignore next */
        (cov_18q5nz8gk1().b[38][1]++, _a.name)) ||
        /* istanbul ignore next */
        (cov_18q5nz8gk1().b[37][1]++, 'Unknown'),
        skills: extractedData.skills.join(', '),
        experience: extractedData.experience.map(exp => {
          /* istanbul ignore next */
          cov_18q5nz8gk1().f[21]++;
          cov_18q5nz8gk1().s[103]++;
          return `${exp.position} at ${exp.company} (${exp.startDate} - ${
          /* istanbul ignore next */
          (cov_18q5nz8gk1().b[40][0]++, exp.endDate) ||
          /* istanbul ignore next */
          (cov_18q5nz8gk1().b[40][1]++, 'Present')}): ${exp.description}`;
        }).join('. '),
        education: extractedData.education.map(edu => {
          /* istanbul ignore next */
          cov_18q5nz8gk1().f[22]++;
          cov_18q5nz8gk1().s[104]++;
          return `${edu.degree} in ${edu.field} from ${edu.institution} (${edu.startDate} - ${edu.endDate})`;
        }).join(', ')
      });
      const questions =
      /* istanbul ignore next */
      (cov_18q5nz8gk1().s[105]++, await generateQuestions(resumeInfo));
      /* istanbul ignore next */
      cov_18q5nz8gk1().s[106]++;
      if (
      /* istanbul ignore next */
      (cov_18q5nz8gk1().b[42][0]++, questions.success) &&
      /* istanbul ignore next */
      (cov_18q5nz8gk1().b[42][1]++, questions.data)) {
        /* istanbul ignore next */
        cov_18q5nz8gk1().b[41][0]++;
        cov_18q5nz8gk1().s[107]++;
        // Limit to maxQuestions
        return Array.isArray(questions.data) ?
        /* istanbul ignore next */
        (cov_18q5nz8gk1().b[43][0]++, questions.data.slice(0, maxQuestions)) :
        /* istanbul ignore next */
        (cov_18q5nz8gk1().b[43][1]++, [questions.data]);
      } else
      /* istanbul ignore next */
      {
        cov_18q5nz8gk1().b[41][1]++;
      }
      // Return default questions if generation fails
      cov_18q5nz8gk1().s[108]++;
      return ["Tell me about yourself and your professional background.", "What interests you most about this position?", "Describe a challenging project you've worked on.", "How do you stay updated with industry trends?", "Where do you see yourself in 5 years?"];
    } catch (error) {
      /* istanbul ignore next */
      cov_18q5nz8gk1().s[109]++;
      console.warn('Failed to generate interview questions:', error);
      /* istanbul ignore next */
      cov_18q5nz8gk1().s[110]++;
      return [];
    }
  }
  /**
   * Save resume data to Firestore profiles collection
   */
  async saveToFirestore(userId, resumeData) {
    /* istanbul ignore next */
    cov_18q5nz8gk1().f[23]++;
    cov_18q5nz8gk1().s[111]++;
    try {
      const db =
      /* istanbul ignore next */
      (cov_18q5nz8gk1().s[112]++, await (0, admin_1.getAdminFirestore)());
      const docRef =
      /* istanbul ignore next */
      (cov_18q5nz8gk1().s[113]++, db.collection('profiles').doc(userId));
      /* istanbul ignore next */
      cov_18q5nz8gk1().s[114]++;
      await docRef.set(Object.assign(Object.assign({
        userId
      }, resumeData), {
        metadata: Object.assign(Object.assign({}, resumeData.metadata), {
          uploadDate: firestore_1.FieldValue.serverTimestamp(),
          lastModified: firestore_1.FieldValue.serverTimestamp()
        })
      })); // Use merge to update existing profile
      /* istanbul ignore next */
      cov_18q5nz8gk1().s[115]++;
      console.log(`✅ Resume data saved to Firestore for user: ${userId}`);
      /* istanbul ignore next */
      cov_18q5nz8gk1().s[116]++;
      return userId; // Use userId as the document ID since that's what we set
    } catch (error) {
      /* istanbul ignore next */
      cov_18q5nz8gk1().s[117]++;
      console.error('Failed to save resume data to Firestore:', error);
      /* istanbul ignore next */
      cov_18q5nz8gk1().s[118]++;
      throw new Error('Failed to save resume data');
    }
  }
  /**
   * Delete existing resume for user
   */
  async deleteExistingResume(userId) {
    /* istanbul ignore next */
    cov_18q5nz8gk1().f[24]++;
    cov_18q5nz8gk1().s[119]++;
    try {
      // Get existing resume data
      const db =
      /* istanbul ignore next */
      (cov_18q5nz8gk1().s[120]++, await (0, admin_1.getAdminFirestore)());
      const profileDoc =
      /* istanbul ignore next */
      (cov_18q5nz8gk1().s[121]++, await db.collection('profiles').doc(userId).get());
      /* istanbul ignore next */
      cov_18q5nz8gk1().s[122]++;
      if (profileDoc.exists) {
        /* istanbul ignore next */
        cov_18q5nz8gk1().b[44][0]++;
        const profileData =
        /* istanbul ignore next */
        (cov_18q5nz8gk1().s[123]++, profileDoc.data());
        // Delete from storage using the abstraction layer
        /* istanbul ignore next */
        cov_18q5nz8gk1().s[124]++;
        if (
        /* istanbul ignore next */
        (cov_18q5nz8gk1().b[47][0]++, profileData === null) ||
        /* istanbul ignore next */
        (cov_18q5nz8gk1().b[47][1]++, profileData === void 0) ?
        /* istanbul ignore next */
        (cov_18q5nz8gk1().b[46][0]++, void 0) :
        /* istanbul ignore next */
        (cov_18q5nz8gk1().b[46][1]++, profileData.filePath)) {
          /* istanbul ignore next */
          cov_18q5nz8gk1().b[45][0]++;
          cov_18q5nz8gk1().s[125]++;
          await storage_1.resumeStorageService.deleteResume(profileData.filePath);
        } else {
          /* istanbul ignore next */
          cov_18q5nz8gk1().b[45][1]++;
          cov_18q5nz8gk1().s[126]++;
          if (
          /* istanbul ignore next */
          (cov_18q5nz8gk1().b[50][0]++, profileData === null) ||
          /* istanbul ignore next */
          (cov_18q5nz8gk1().b[50][1]++, profileData === void 0) ?
          /* istanbul ignore next */
          (cov_18q5nz8gk1().b[49][0]++, void 0) :
          /* istanbul ignore next */
          (cov_18q5nz8gk1().b[49][1]++, profileData.blobName)) {
            /* istanbul ignore next */
            cov_18q5nz8gk1().b[48][0]++;
            cov_18q5nz8gk1().s[127]++;
            await storage_1.resumeStorageService.deleteResume(profileData.blobName);
          } else
          /* istanbul ignore next */
          {
            cov_18q5nz8gk1().b[48][1]++;
          }
        }
      } else
      /* istanbul ignore next */
      {
        cov_18q5nz8gk1().b[44][1]++;
      }
      // Legacy resume cleanup (Firebase functions removed)
      cov_18q5nz8gk1().s[128]++;
      console.log(`🗑️ Existing resume cleaned up for user: ${userId}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_18q5nz8gk1().s[129]++;
      console.warn('Failed to delete existing resume:', error);
      // Don't throw - we still want to proceed with new upload
    }
  }
  /**
   * Get user's resume data from Firestore
   */
  async getUserResumeData(userId) {
    /* istanbul ignore next */
    cov_18q5nz8gk1().f[25]++;
    cov_18q5nz8gk1().s[130]++;
    try {
      const db =
      /* istanbul ignore next */
      (cov_18q5nz8gk1().s[131]++, await (0, admin_1.getAdminFirestore)());
      const profileDoc =
      /* istanbul ignore next */
      (cov_18q5nz8gk1().s[132]++, await db.collection('profiles').doc(userId).get());
      /* istanbul ignore next */
      cov_18q5nz8gk1().s[133]++;
      if (profileDoc.exists) {
        /* istanbul ignore next */
        cov_18q5nz8gk1().b[51][0]++;
        cov_18q5nz8gk1().s[134]++;
        return profileDoc.data();
      } else
      /* istanbul ignore next */
      {
        cov_18q5nz8gk1().b[51][1]++;
      }
      // Legacy resume collection fallback removed
      cov_18q5nz8gk1().s[135]++;
      return null;
    } catch (error) {
      /* istanbul ignore next */
      cov_18q5nz8gk1().s[136]++;
      console.error('Failed to get user resume data:', error);
      /* istanbul ignore next */
      cov_18q5nz8gk1().s[137]++;
      throw error;
    }
  }
  /**
   * Generate new secure URL for file access
   */
  async generateNewSecureUrl(userId, expiryHours =
  /* istanbul ignore next */
  (cov_18q5nz8gk1().b[52][0]++, 24)) {
    /* istanbul ignore next */
    cov_18q5nz8gk1().f[26]++;
    cov_18q5nz8gk1().s[138]++;
    try {
      const resumeData =
      /* istanbul ignore next */
      (cov_18q5nz8gk1().s[139]++, await this.getUserResumeData(userId));
      const filePath =
      /* istanbul ignore next */
      (cov_18q5nz8gk1().s[140]++,
      /* istanbul ignore next */
      (cov_18q5nz8gk1().b[53][0]++,
      /* istanbul ignore next */
      (cov_18q5nz8gk1().b[55][0]++, resumeData === null) ||
      /* istanbul ignore next */
      (cov_18q5nz8gk1().b[55][1]++, resumeData === void 0) ?
      /* istanbul ignore next */
      (cov_18q5nz8gk1().b[54][0]++, void 0) :
      /* istanbul ignore next */
      (cov_18q5nz8gk1().b[54][1]++, resumeData.filePath)) ||
      /* istanbul ignore next */
      (cov_18q5nz8gk1().b[53][1]++,
      /* istanbul ignore next */
      (cov_18q5nz8gk1().b[57][0]++, resumeData === null) ||
      /* istanbul ignore next */
      (cov_18q5nz8gk1().b[57][1]++, resumeData === void 0) ?
      /* istanbul ignore next */
      (cov_18q5nz8gk1().b[56][0]++, void 0) :
      /* istanbul ignore next */
      (cov_18q5nz8gk1().b[56][1]++, resumeData.blobName)));
      /* istanbul ignore next */
      cov_18q5nz8gk1().s[141]++;
      if (filePath) {
        /* istanbul ignore next */
        cov_18q5nz8gk1().b[58][0]++;
        cov_18q5nz8gk1().s[142]++;
        return await storage_1.resumeStorageService.getResumeUrl(filePath, expiryHours);
      } else
      /* istanbul ignore next */
      {
        cov_18q5nz8gk1().b[58][1]++;
      }
      cov_18q5nz8gk1().s[143]++;
      return null;
    } catch (error) {
      /* istanbul ignore next */
      cov_18q5nz8gk1().s[144]++;
      console.error('Failed to generate new secure URL:', error);
      /* istanbul ignore next */
      cov_18q5nz8gk1().s[145]++;
      return null;
    }
  }
}
// Export singleton instance
/* istanbul ignore next */
cov_18q5nz8gk1().s[146]++;
exports.resumeProcessingService = new ResumeProcessingService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,