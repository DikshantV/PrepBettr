{"version":3,"names":["cov_2jkd2ezms2","actualCoverage","exports","getAzureTokenService","identity_1","s","require","keyvault_secrets_1","bottleneck_1","__importDefault","AzureTokenService","constructor","f","tokenCache","Map","keyVaultUri","process","env","AZURE_KEY_VAULT_URI","b","Error","secretClient","SecretClient","DefaultAzureCredential","rateLimiter","default","minTime","maxConcurrent","reservoir","reservoirRefreshAmount","reservoirRefreshInterval","storeTokens","portal","userId","tokens","secretName","schedule","setSecret","JSON","stringify","set","console","log","error","getTokens","cacheKey","cachedTokens","get","expiresAt","Date","now","result","getSecret","value","parse","needsRefresh","fiveMinutes","refreshTokens","refreshToken","config","tokenEndpoint","getTokenEndpoint","response","fetch","method","headers","body","URLSearchParams","grant_type","refresh_token","client_id","clientId","client_secret","clientSecret","toString","ok","status","statusText","data","json","newTokens","accessToken","access_token","expires_in","tokenType","token_type","scope","getValidAccessToken","refreshedTokens","storeAzureADConfig","getAzureADConfig","deleteTokens","beginDeleteSecret","delete","clearCache","clear","azureTokenServiceInstance"],"sources":["/Users/dikshantvashistha/PrepBettr/lib/services/azure-token-service.ts"],"sourcesContent":["import { DefaultAzureCredential } from '@azure/identity';\nimport { SecretClient } from '@azure/keyvault-secrets';\nimport Bottleneck from 'bottleneck';\n\nexport interface OAuthTokens {\n  accessToken: string;\n  refreshToken: string;\n  expiresAt: number;\n  tokenType: 'Bearer';\n  scope?: string;\n}\n\nexport interface AzureADConfig {\n  clientId: string;\n  clientSecret: string;\n  tenantId: string;\n  redirectUri: string;\n  scopes: string[];\n}\n\nclass AzureTokenService {\n  private secretClient: SecretClient;\n  private rateLimiter: Bottleneck;\n  private tokenCache: Map<string, OAuthTokens> = new Map();\n\n  constructor() {\n    const keyVaultUri = process.env.AZURE_KEY_VAULT_URI;\n    if (!keyVaultUri) {\n      throw new Error('AZURE_KEY_VAULT_URI environment variable is required');\n    }\n\n    this.secretClient = new SecretClient(keyVaultUri, new DefaultAzureCredential());\n    \n    // Rate limiter for Azure Key Vault operations\n    this.rateLimiter = new Bottleneck({\n      minTime: 100, // Minimum 100ms between requests\n      maxConcurrent: 10,\n      reservoir: 100, // 100 requests per reservoir\n      reservoirRefreshAmount: 100,\n      reservoirRefreshInterval: 60 * 1000, // Refresh every minute\n    });\n  }\n\n  /**\n   * Store OAuth tokens securely in Azure Key Vault\n   */\n  async storeTokens(portal: 'linkedin' | 'wellfound', userId: string, tokens: OAuthTokens): Promise<void> {\n    const secretName = `${portal}-tokens-${userId}`;\n    \n    try {\n      await this.rateLimiter.schedule(async () => {\n        await this.secretClient.setSecret(secretName, JSON.stringify(tokens));\n      });\n      \n      // Update cache\n      this.tokenCache.set(`${portal}-${userId}`, tokens);\n      \n      console.log(`Stored ${portal} tokens for user ${userId}`);\n    } catch (error) {\n      console.error(`Error storing ${portal} tokens for user ${userId}:`, error);\n      throw new Error(`Failed to store OAuth tokens: ${error}`);\n    }\n  }\n\n  /**\n   * Retrieve OAuth tokens from Azure Key Vault\n   */\n  async getTokens(portal: 'linkedin' | 'wellfound', userId: string): Promise<OAuthTokens | null> {\n    const cacheKey = `${portal}-${userId}`;\n    \n    // Check cache first\n    const cachedTokens = this.tokenCache.get(cacheKey);\n    if (cachedTokens && cachedTokens.expiresAt > Date.now()) {\n      return cachedTokens;\n    }\n\n    const secretName = `${portal}-tokens-${userId}`;\n    \n    try {\n      const result = await this.rateLimiter.schedule(async () => {\n        return await this.secretClient.getSecret(secretName);\n      });\n      \n      if (result.value) {\n        const tokens: OAuthTokens = JSON.parse(result.value);\n        \n        // Update cache\n        this.tokenCache.set(cacheKey, tokens);\n        \n        return tokens;\n      }\n      \n      return null;\n    } catch (error) {\n      console.error(`Error retrieving ${portal} tokens for user ${userId}:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Check if tokens need refresh (expires within 5 minutes)\n   */\n  needsRefresh(tokens: OAuthTokens): boolean {\n    const fiveMinutes = 5 * 60 * 1000;\n    return tokens.expiresAt <= (Date.now() + fiveMinutes);\n  }\n\n  /**\n   * Refresh OAuth tokens using refresh token\n   */\n  async refreshTokens(\n    portal: 'linkedin' | 'wellfound',\n    userId: string,\n    refreshToken: string,\n    config: AzureADConfig\n  ): Promise<OAuthTokens | null> {\n    const tokenEndpoint = this.getTokenEndpoint(portal);\n    \n    try {\n      const response = await fetch(tokenEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: new URLSearchParams({\n          grant_type: 'refresh_token',\n          refresh_token: refreshToken,\n          client_id: config.clientId,\n          client_secret: config.clientSecret,\n        }).toString(),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Token refresh failed: ${response.status} ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      \n      const newTokens: OAuthTokens = {\n        accessToken: data.access_token,\n        refreshToken: data.refresh_token || refreshToken,\n        expiresAt: Date.now() + (data.expires_in * 1000),\n        tokenType: data.token_type || 'Bearer',\n        scope: data.scope,\n      };\n\n      // Store the refreshed tokens\n      await this.storeTokens(portal, userId, newTokens);\n      \n      return newTokens;\n    } catch (error) {\n      console.error(`Error refreshing ${portal} tokens:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Get valid access token, refreshing if necessary\n   */\n  async getValidAccessToken(\n    portal: 'linkedin' | 'wellfound',\n    userId: string,\n    config: AzureADConfig\n  ): Promise<string | null> {\n    const tokens = await this.getTokens(portal, userId);\n    \n    if (!tokens) {\n      return null;\n    }\n\n    if (this.needsRefresh(tokens)) {\n      const refreshedTokens = await this.refreshTokens(portal, userId, tokens.refreshToken, config);\n      return refreshedTokens?.accessToken || null;\n    }\n\n    return tokens.accessToken;\n  }\n\n  /**\n   * Store Azure AD app configuration\n   */\n  async storeAzureADConfig(portal: 'linkedin' | 'wellfound', config: AzureADConfig): Promise<void> {\n    const secretName = `${portal}-azure-ad-config`;\n    \n    try {\n      await this.rateLimiter.schedule(async () => {\n        await this.secretClient.setSecret(secretName, JSON.stringify(config));\n      });\n      \n      console.log(`Stored Azure AD config for ${portal}`);\n    } catch (error) {\n      console.error(`Error storing Azure AD config for ${portal}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get Azure AD app configuration\n   */\n  async getAzureADConfig(portal: 'linkedin' | 'wellfound'): Promise<AzureADConfig | null> {\n    const secretName = `${portal}-azure-ad-config`;\n    \n    try {\n      const result = await this.rateLimiter.schedule(async () => {\n        return await this.secretClient.getSecret(secretName);\n      });\n      \n      if (result.value) {\n        return JSON.parse(result.value) as AzureADConfig;\n      }\n      \n      return null;\n    } catch (error) {\n      console.error(`Error retrieving Azure AD config for ${portal}:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Delete user tokens (for logout/revocation)\n   */\n  async deleteTokens(portal: 'linkedin' | 'wellfound', userId: string): Promise<void> {\n    const secretName = `${portal}-tokens-${userId}`;\n    const cacheKey = `${portal}-${userId}`;\n    \n    try {\n      await this.rateLimiter.schedule(async () => {\n        await this.secretClient.beginDeleteSecret(secretName);\n      });\n      \n      // Remove from cache\n      this.tokenCache.delete(cacheKey);\n      \n      console.log(`Deleted ${portal} tokens for user ${userId}`);\n    } catch (error) {\n      console.error(`Error deleting ${portal} tokens for user ${userId}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Clear token cache\n   */\n  clearCache(): void {\n    this.tokenCache.clear();\n  }\n\n  /**\n   * Get token endpoint for the portal\n   */\n  private getTokenEndpoint(portal: 'linkedin' | 'wellfound'): string {\n    switch (portal) {\n      case 'linkedin':\n        return 'https://www.linkedin.com/oauth/v2/accessToken';\n      case 'wellfound':\n        return 'https://api.wellfound.com/oauth/token'; // Note: Wellfound uses AngelList API\n      default:\n        throw new Error(`Unknown portal: ${portal}`);\n    }\n  }\n}\n\n// Singleton instance\nlet azureTokenServiceInstance: AzureTokenService | null = null;\n\nexport function getAzureTokenService(): AzureTokenService {\n  if (!azureTokenServiceInstance) {\n    azureTokenServiceInstance = new AzureTokenService();\n  }\n  return azureTokenServiceInstance;\n}\n\nexport { AzureTokenService };\n"],"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","ignoreList":[]}