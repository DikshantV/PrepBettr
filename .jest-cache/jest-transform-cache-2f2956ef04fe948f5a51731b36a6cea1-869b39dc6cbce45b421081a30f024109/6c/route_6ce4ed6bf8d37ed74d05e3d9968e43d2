8eff15ebd2c9923bab5b7a45a8b11546
"use strict";

/* istanbul ignore next */
function cov_1bxck3nr89() {
  var path = "/Users/dikshantvashistha/PrepBettr/app/api/auth/signup/route.ts";
  var hash = "6669032e60ed5816fe11658babd389f74e69ea69";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/app/api/auth/signup/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 12,
          column: 3
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 3,
          column: 26
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "3": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 52
        }
      },
      "4": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 7,
          column: 5
        }
      },
      "5": {
        start: {
          line: 6,
          column: 6
        },
        end: {
          line: 6,
          column: 68
        }
      },
      "6": {
        start: {
          line: 6,
          column: 51
        },
        end: {
          line: 6,
          column: 63
        }
      },
      "7": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 39
        }
      },
      "8": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "9": {
        start: {
          line: 10,
          column: 26
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "10": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 17
        }
      },
      "11": {
        start: {
          line: 13,
          column: 25
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "12": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 72
        }
      },
      "13": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 21
        }
      },
      "14": {
        start: {
          line: 18,
          column: 19
        },
        end: {
          line: 34,
          column: 4
        }
      },
      "15": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "16": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 24,
          column: 10
        }
      },
      "17": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 23
        }
      },
      "18": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "19": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "20": {
        start: {
          line: 22,
          column: 77
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "21": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 22
        }
      },
      "22": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 26
        }
      },
      "23": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 33,
          column: 6
        }
      },
      "24": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "25": {
        start: {
          line: 28,
          column: 35
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "26": {
        start: {
          line: 29,
          column: 21
        },
        end: {
          line: 29,
          column: 23
        }
      },
      "27": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "28": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "29": {
        start: {
          line: 30,
          column: 38
        },
        end: {
          line: 30,
          column: 50
        }
      },
      "30": {
        start: {
          line: 30,
          column: 56
        },
        end: {
          line: 30,
          column: 57
        }
      },
      "31": {
        start: {
          line: 30,
          column: 78
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "32": {
        start: {
          line: 30,
          column: 102
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "33": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 40
        }
      },
      "34": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 22
        }
      },
      "35": {
        start: {
          line: 35,
          column: 0
        },
        end: {
          line: 35,
          column: 62
        }
      },
      "36": {
        start: {
          line: 36,
          column: 0
        },
        end: {
          line: 36,
          column: 20
        }
      },
      "37": {
        start: {
          line: 37,
          column: 17
        },
        end: {
          line: 37,
          column: 39
        }
      },
      "38": {
        start: {
          line: 38,
          column: 18
        },
        end: {
          line: 38,
          column: 41
        }
      },
      "39": {
        start: {
          line: 39,
          column: 25
        },
        end: {
          line: 39,
          column: 67
        }
      },
      "40": {
        start: {
          line: 40,
          column: 32
        },
        end: {
          line: 40,
          column: 79
        }
      },
      "41": {
        start: {
          line: 41,
          column: 28
        },
        end: {
          line: 41,
          column: 37
        }
      },
      "42": {
        start: {
          line: 42,
          column: 27
        },
        end: {
          line: 42,
          column: 43
        }
      },
      "43": {
        start: {
          line: 45,
          column: 22
        },
        end: {
          line: 45,
          column: 46
        }
      },
      "44": {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 46,
          column: 61
        }
      },
      "45": {
        start: {
          line: 47,
          column: 4
        },
        end: {
          line: 268,
          column: 5
        }
      },
      "46": {
        start: {
          line: 48,
          column: 59
        },
        end: {
          line: 48,
          column: 79
        }
      },
      "47": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 55,
          column: 11
        }
      },
      "48": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "49": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 95
        }
      },
      "50": {
        start: {
          line: 60,
          column: 27
        },
        end: {
          line: 60,
          column: 34
        }
      },
      "51": {
        start: {
          line: 61,
          column: 24
        },
        end: {
          line: 61,
          column: 29
        }
      },
      "52": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 193,
          column: 9
        }
      },
      "53": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 92
        }
      },
      "54": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 89,
          column: 13
        }
      },
      "55": {
        start: {
          line: 67,
          column: 30
        },
        end: {
          line: 67,
          column: 48
        }
      },
      "56": {
        start: {
          line: 68,
          column: 16
        },
        end: {
          line: 84,
          column: 17
        }
      },
      "57": {
        start: {
          line: 69,
          column: 36
        },
        end: {
          line: 69,
          column: 100
        }
      },
      "58": {
        start: {
          line: 70,
          column: 20
        },
        end: {
          line: 78,
          column: 22
        }
      },
      "59": {
        start: {
          line: 79,
          column: 20
        },
        end: {
          line: 79,
          column: 43
        }
      },
      "60": {
        start: {
          line: 80,
          column: 20
        },
        end: {
          line: 80,
          column: 114
        }
      },
      "61": {
        start: {
          line: 83,
          column: 20
        },
        end: {
          line: 83,
          column: 67
        }
      },
      "62": {
        start: {
          line: 87,
          column: 16
        },
        end: {
          line: 87,
          column: 89
        }
      },
      "63": {
        start: {
          line: 88,
          column: 16
        },
        end: {
          line: 88,
          column: 102
        }
      },
      "64": {
        start: {
          line: 91,
          column: 13
        },
        end: {
          line: 193,
          column: 9
        }
      },
      "65": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 92
        }
      },
      "66": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 99,
          column: 15
        }
      },
      "67": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 116,
          column: 13
        }
      },
      "68": {
        start: {
          line: 101,
          column: 16
        },
        end: {
          line: 101,
          column: 86
        }
      },
      "69": {
        start: {
          line: 102,
          column: 16
        },
        end: {
          line: 107,
          column: 19
        }
      },
      "70": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 110,
          column: 105
        }
      },
      "71": {
        start: {
          line: 111,
          column: 16
        },
        end: {
          line: 115,
          column: 18
        }
      },
      "72": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 124,
          column: 13
        }
      },
      "73": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 122,
          column: 19
        }
      },
      "74": {
        start: {
          line: 123,
          column: 16
        },
        end: {
          line: 123,
          column: 119
        }
      },
      "75": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 103
        }
      },
      "76": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 130,
          column: 15
        }
      },
      "77": {
        start: {
          line: 134,
          column: 13
        },
        end: {
          line: 193,
          column: 9
        }
      },
      "78": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 76
        }
      },
      "79": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 189,
          column: 13
        }
      },
      "80": {
        start: {
          line: 138,
          column: 38
        },
        end: {
          line: 143,
          column: 18
        }
      },
      "81": {
        start: {
          line: 144,
          column: 16
        },
        end: {
          line: 152,
          column: 18
        }
      },
      "82": {
        start: {
          line: 154,
          column: 29
        },
        end: {
          line: 154,
          column: 138
        }
      },
      "83": {
        start: {
          line: 154,
          column: 64
        },
        end: {
          line: 154,
          column: 109
        }
      },
      "84": {
        start: {
          line: 154,
          column: 121
        },
        end: {
          line: 154,
          column: 137
        }
      },
      "85": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 155,
          column: 79
        }
      },
      "86": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 156,
          column: 33
        }
      },
      "87": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 157,
          column: 92
        }
      },
      "88": {
        start: {
          line: 160,
          column: 16
        },
        end: {
          line: 160,
          column: 78
        }
      },
      "89": {
        start: {
          line: 162,
          column: 16
        },
        end: {
          line: 169,
          column: 17
        }
      },
      "90": {
        start: {
          line: 163,
          column: 20
        },
        end: {
          line: 163,
          column: 92
        }
      },
      "91": {
        start: {
          line: 164,
          column: 20
        },
        end: {
          line: 168,
          column: 40
        }
      },
      "92": {
        start: {
          line: 170,
          column: 16
        },
        end: {
          line: 175,
          column: 17
        }
      },
      "93": {
        start: {
          line: 171,
          column: 20
        },
        end: {
          line: 174,
          column: 40
        }
      },
      "94": {
        start: {
          line: 176,
          column: 16
        },
        end: {
          line: 181,
          column: 17
        }
      },
      "95": {
        start: {
          line: 177,
          column: 20
        },
        end: {
          line: 180,
          column: 40
        }
      },
      "96": {
        start: {
          line: 183,
          column: 37
        },
        end: {
          line: 183,
          column: 80
        }
      },
      "97": {
        start: {
          line: 184,
          column: 16
        },
        end: {
          line: 184,
          column: 111
        }
      },
      "98": {
        start: {
          line: 185,
          column: 16
        },
        end: {
          line: 188,
          column: 36
        }
      },
      "99": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 110
        }
      },
      "100": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 197,
          column: 9
        }
      },
      "101": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 195,
          column: 68
        }
      },
      "102": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 99
        }
      },
      "103": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 263,
          column: 9
        }
      },
      "104": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 200,
          column: 94
        }
      },
      "105": {
        start: {
          line: 201,
          column: 36
        },
        end: {
          line: 201,
          column: 121
        }
      },
      "106": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 205,
          column: 13
        }
      },
      "107": {
        start: {
          line: 203,
          column: 16
        },
        end: {
          line: 203,
          column: 94
        }
      },
      "108": {
        start: {
          line: 204,
          column: 16
        },
        end: {
          line: 204,
          column: 101
        }
      },
      "109": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 232,
          column: 13
        }
      },
      "110": {
        start: {
          line: 209,
          column: 16
        },
        end: {
          line: 214,
          column: 19
        }
      },
      "111": {
        start: {
          line: 217,
          column: 16
        },
        end: {
          line: 217,
          column: 112
        }
      },
      "112": {
        start: {
          line: 220,
          column: 16
        },
        end: {
          line: 230,
          column: 17
        }
      },
      "113": {
        start: {
          line: 221,
          column: 20
        },
        end: {
          line: 221,
          column: 113
        }
      },
      "114": {
        start: {
          line: 222,
          column: 20
        },
        end: {
          line: 229,
          column: 21
        }
      },
      "115": {
        start: {
          line: 223,
          column: 24
        },
        end: {
          line: 223,
          column: 106
        }
      },
      "116": {
        start: {
          line: 224,
          column: 24
        },
        end: {
          line: 224,
          column: 83
        }
      },
      "117": {
        start: {
          line: 227,
          column: 24
        },
        end: {
          line: 227,
          column: 107
        }
      },
      "118": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 231,
          column: 35
        }
      },
      "119": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 119
        }
      },
      "120": {
        start: {
          line: 235,
          column: 32
        },
        end: {
          line: 235,
          column: 62
        }
      },
      "121": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 242,
          column: 15
        }
      },
      "122": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 243,
          column: 81
        }
      },
      "123": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 258,
          column: 15
        }
      },
      "124": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 261,
          column: 76
        }
      },
      "125": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 262,
          column: 107
        }
      },
      "126": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 266,
          column: 48
        }
      },
      "127": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 267,
          column: 95
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 2,
            column: 75
          }
        },
        loc: {
          start: {
            line: 2,
            column: 96
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 39
          }
        },
        loc: {
          start: {
            line: 6,
            column: 49
          },
          end: {
            line: 6,
            column: 65
          }
        },
        line: 6
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 9,
            column: 7
          }
        },
        loc: {
          start: {
            line: 9,
            column: 28
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 9
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 13,
            column: 81
          }
        },
        loc: {
          start: {
            line: 13,
            column: 95
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 13
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 15,
            column: 6
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 15
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 18,
            column: 51
          },
          end: {
            line: 18,
            column: 52
          }
        },
        loc: {
          start: {
            line: 18,
            column: 63
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 18
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 19,
            column: 19
          }
        },
        loc: {
          start: {
            line: 19,
            column: 30
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 19
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 20,
            column: 49
          }
        },
        loc: {
          start: {
            line: 20,
            column: 61
          },
          end: {
            line: 24,
            column: 9
          }
        },
        line: 20
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 12
          }
        },
        loc: {
          start: {
            line: 27,
            column: 26
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 27
      },
      "9": {
        name: "POST",
        decl: {
          start: {
            line: 43,
            column: 15
          },
          end: {
            line: 43,
            column: 19
          }
        },
        loc: {
          start: {
            line: 43,
            column: 29
          },
          end: {
            line: 269,
            column: 1
          }
        },
        line: 43
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 154,
            column: 58
          },
          end: {
            line: 154,
            column: 59
          }
        },
        loc: {
          start: {
            line: 154,
            column: 64
          },
          end: {
            line: 154,
            column: 109
          }
        },
        line: 154
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 154,
            column: 116
          },
          end: {
            line: 154,
            column: 117
          }
        },
        loc: {
          start: {
            line: 154,
            column: 121
          },
          end: {
            line: 154,
            column: 137
          }
        },
        line: 154
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 12,
            column: 3
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 9,
            column: 1
          }
        }, {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 5
      },
      "4": {
        loc: {
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 13
          }
        }, {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "5": {
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 47
          }
        }, {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "6": {
        loc: {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 63
          }
        }, {
          start: {
            line: 5,
            column: 67
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "7": {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "8": {
        loc: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 17,
            column: 2
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 30
          }
        }, {
          start: {
            line: 13,
            column: 34
          },
          end: {
            line: 13,
            column: 57
          }
        }, {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "9": {
        loc: {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 15,
            column: 1
          }
        }, {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "10": {
        loc: {
          start: {
            line: 18,
            column: 19
          },
          end: {
            line: 34,
            column: 4
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 18,
            column: 24
          }
        }, {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 45
          }
        }, {
          start: {
            line: 18,
            column: 50
          },
          end: {
            line: 34,
            column: 4
          }
        }],
        line: 18
      },
      "11": {
        loc: {
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 20,
            column: 44
          }
        }, {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 24,
            column: 9
          }
        }],
        line: 20
      },
      "12": {
        loc: {
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "13": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "14": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 15
          }
        }, {
          start: {
            line: 28,
            column: 19
          },
          end: {
            line: 28,
            column: 33
          }
        }],
        line: 28
      },
      "15": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "16": {
        loc: {
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "17": {
        loc: {
          start: {
            line: 54,
            column: 27
          },
          end: {
            line: 54,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 54,
            column: 37
          },
          end: {
            line: 54,
            column: 69
          }
        }, {
          start: {
            line: 54,
            column: 72
          },
          end: {
            line: 54,
            column: 78
          }
        }],
        line: 54
      },
      "18": {
        loc: {
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "19": {
        loc: {
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        }, {
          start: {
            line: 91,
            column: 13
          },
          end: {
            line: 193,
            column: 9
          }
        }],
        line: 62
      },
      "20": {
        loc: {
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 62,
            column: 29
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 62,
            column: 19
          }
        }, {
          start: {
            line: 62,
            column: 23
          },
          end: {
            line: 62,
            column: 29
          }
        }],
        line: 62
      },
      "21": {
        loc: {
          start: {
            line: 68,
            column: 16
          },
          end: {
            line: 84,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 16
          },
          end: {
            line: 84,
            column: 17
          }
        }, {
          start: {
            line: 82,
            column: 21
          },
          end: {
            line: 84,
            column: 17
          }
        }],
        line: 68
      },
      "22": {
        loc: {
          start: {
            line: 76,
            column: 44
          },
          end: {
            line: 76,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 76,
            column: 44
          },
          end: {
            line: 76,
            column: 66
          }
        }, {
          start: {
            line: 76,
            column: 70
          },
          end: {
            line: 76,
            column: 74
          }
        }],
        line: 76
      },
      "23": {
        loc: {
          start: {
            line: 91,
            column: 13
          },
          end: {
            line: 193,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 13
          },
          end: {
            line: 193,
            column: 9
          }
        }, {
          start: {
            line: 134,
            column: 13
          },
          end: {
            line: 193,
            column: 9
          }
        }],
        line: 91
      },
      "24": {
        loc: {
          start: {
            line: 105,
            column: 25
          },
          end: {
            line: 105,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 105,
            column: 76
          },
          end: {
            line: 105,
            column: 82
          }
        }, {
          start: {
            line: 105,
            column: 85
          },
          end: {
            line: 105,
            column: 91
          }
        }],
        line: 105
      },
      "25": {
        loc: {
          start: {
            line: 105,
            column: 25
          },
          end: {
            line: 105,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 105,
            column: 25
          },
          end: {
            line: 105,
            column: 56
          }
        }, {
          start: {
            line: 105,
            column: 60
          },
          end: {
            line: 105,
            column: 73
          }
        }],
        line: 105
      },
      "26": {
        loc: {
          start: {
            line: 114,
            column: 27
          },
          end: {
            line: 114,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 114,
            column: 58
          },
          end: {
            line: 114,
            column: 77
          }
        }, {
          start: {
            line: 114,
            column: 80
          },
          end: {
            line: 114,
            column: 107
          }
        }],
        line: 114
      },
      "27": {
        loc: {
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 124,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 124,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "28": {
        loc: {
          start: {
            line: 117,
            column: 16
          },
          end: {
            line: 117,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 117,
            column: 16
          },
          end: {
            line: 117,
            column: 35
          }
        }, {
          start: {
            line: 117,
            column: 39
          },
          end: {
            line: 117,
            column: 55
          }
        }],
        line: 117
      },
      "29": {
        loc: {
          start: {
            line: 134,
            column: 13
          },
          end: {
            line: 193,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 13
          },
          end: {
            line: 193,
            column: 9
          }
        }, {
          start: {
            line: 191,
            column: 13
          },
          end: {
            line: 193,
            column: 9
          }
        }],
        line: 134
      },
      "30": {
        loc: {
          start: {
            line: 149,
            column: 30
          },
          end: {
            line: 149,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 149,
            column: 30
          },
          end: {
            line: 149,
            column: 55
          }
        }, {
          start: {
            line: 149,
            column: 59
          },
          end: {
            line: 149,
            column: 63
          }
        }],
        line: 149
      },
      "31": {
        loc: {
          start: {
            line: 162,
            column: 16
          },
          end: {
            line: 169,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 162,
            column: 16
          },
          end: {
            line: 169,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 162
      },
      "32": {
        loc: {
          start: {
            line: 170,
            column: 16
          },
          end: {
            line: 175,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 170,
            column: 16
          },
          end: {
            line: 175,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 170
      },
      "33": {
        loc: {
          start: {
            line: 176,
            column: 16
          },
          end: {
            line: 181,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 16
          },
          end: {
            line: 181,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "34": {
        loc: {
          start: {
            line: 183,
            column: 37
          },
          end: {
            line: 183,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 183,
            column: 37
          },
          end: {
            line: 183,
            column: 50
          }
        }, {
          start: {
            line: 183,
            column: 54
          },
          end: {
            line: 183,
            column: 80
          }
        }],
        line: 183
      },
      "35": {
        loc: {
          start: {
            line: 186,
            column: 27
          },
          end: {
            line: 186,
            column: 127
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 186,
            column: 63
          },
          end: {
            line: 186,
            column: 112
          }
        }, {
          start: {
            line: 186,
            column: 115
          },
          end: {
            line: 186,
            column: 127
          }
        }],
        line: 186
      },
      "36": {
        loc: {
          start: {
            line: 187,
            column: 26
          },
          end: {
            line: 187,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 187,
            column: 26
          },
          end: {
            line: 187,
            column: 36
          }
        }, {
          start: {
            line: 187,
            column: 40
          },
          end: {
            line: 187,
            column: 52
          }
        }],
        line: 187
      },
      "37": {
        loc: {
          start: {
            line: 194,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "38": {
        loc: {
          start: {
            line: 194,
            column: 12
          },
          end: {
            line: 194,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 194,
            column: 12
          },
          end: {
            line: 194,
            column: 28
          }
        }, {
          start: {
            line: 194,
            column: 32
          },
          end: {
            line: 194,
            column: 52
          }
        }],
        line: 194
      },
      "39": {
        loc: {
          start: {
            line: 202,
            column: 12
          },
          end: {
            line: 205,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 202,
            column: 12
          },
          end: {
            line: 205,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 202
      },
      "40": {
        loc: {
          start: {
            line: 202,
            column: 16
          },
          end: {
            line: 202,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 202,
            column: 16
          },
          end: {
            line: 202,
            column: 31
          }
        }, {
          start: {
            line: 202,
            column: 35
          },
          end: {
            line: 202,
            column: 45
          }
        }],
        line: 202
      },
      "41": {
        loc: {
          start: {
            line: 211,
            column: 33
          },
          end: {
            line: 211,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 211,
            column: 33
          },
          end: {
            line: 211,
            column: 53
          }
        }, {
          start: {
            line: 211,
            column: 57
          },
          end: {
            line: 211,
            column: 61
          }
        }],
        line: 211
      },
      "42": {
        loc: {
          start: {
            line: 220,
            column: 16
          },
          end: {
            line: 230,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 220,
            column: 16
          },
          end: {
            line: 230,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 220
      },
      "43": {
        loc: {
          start: {
            line: 233,
            column: 42
          },
          end: {
            line: 233,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 233,
            column: 60
          },
          end: {
            line: 233,
            column: 71
          }
        }, {
          start: {
            line: 233,
            column: 74
          },
          end: {
            line: 233,
            column: 83
          }
        }],
        line: 233
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/app/api/auth/signup/route.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/app/api/auth/signup/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { cookies } from 'next/headers';\nimport { verifyFirebaseToken } from '@/lib/middleware/authMiddleware';\nimport { firebaseUserService } from '@/lib/services/firebase-user-service';\n\nconst SESSION_COOKIE_NAME = 'session';\nconst SESSION_DURATION_S = 7 * 24 * 60 * 60; // 7 days\n\nexport async function POST(request: NextRequest) {\n  const timestamp = new Date().toISOString();\n  console.log(`\uD83C\uDD95 [${timestamp}] AUTH SIGNUP POST called`);\n  \n  try {\n    const { email, password, name, idToken, bypass } = await request.json();\n    \n    console.log(`\uD83C\uDD95 [${timestamp}] Signup request details:`, {\n      hasEmail: !!email,\n      hasPassword: !!password,\n      hasName: !!name,\n      hasIdToken: !!idToken,\n      idTokenPrefix: idToken ? idToken.substring(0, 50) + '...' : 'none'\n    });\n\n    if (!email) {\n      return NextResponse.json(\n        { error: 'Email is required' },\n        { status: 400 }\n      );\n    }\n\n    let authResult;\n    let sessionToken = idToken;\n    let isNewUser = false;\n\n    if (idToken && bypass) {\n      // Handle bypass/development token flow\n      console.log(`\uD83D\uDD10 [${timestamp}] Processing bypass token for development signup`);\n      \n      try {\n        // For bypass tokens, decode directly since they're mock tokens\n        const parts = idToken.split('.');\n        if (parts.length >= 3) {\n          const payload = JSON.parse(atob(parts[1].replace(/-/g, '+').replace(/_/g, '/')));\n          \n          authResult = {\n            success: true,\n            user: {\n              uid: payload.uid,\n              email: payload.email,\n              name: payload.name,\n              email_verified: payload.email_verified || true\n            }\n          };\n          \n          sessionToken = idToken; // Use the bypass token as session token\n          console.log(`\u2705 [${timestamp}] Bypass token processed for signup uid: ${authResult.user.uid}`);\n        } else {\n          throw new Error('Invalid bypass token format');\n        }\n      } catch (error) {\n        console.error(`\u274C [${timestamp}] Bypass token processing failed:`, error);\n        return NextResponse.json(\n          { error: 'Invalid bypass token' },\n          { status: 401 }\n        );\n      }\n      \n    } else if (idToken) {\n      // Handle Firebase ID token flow (for Google Sign-in)\n      console.log(`\uD83D\uDD10 [${timestamp}] Verifying Firebase ID token for Google Sign-up`);\n      console.log(`\uD83D\uDD10 [${timestamp}] ID Token format check:`, {\n        length: idToken.length,\n        parts: idToken.split('.').length,\n        startsCorrectly: idToken.startsWith('eyJ'),\n        preview: idToken.substring(0, 100) + '...'\n      });\n      \n      try {\n        authResult = await verifyFirebaseToken(idToken);\n        console.log(`\uD83D\uDD10 [${timestamp}] Firebase token verification result:`, {\n          success: authResult.success,\n          hasUser: !!authResult.user,\n          uid: authResult.user?.uid,\n          error: authResult.error\n        });\n      } catch (verifyError) {\n        console.error(`\uD83D\uDD10 [${timestamp}] Firebase token verification threw error:`, verifyError);\n        authResult = {\n          success: false,\n          user: null,\n          error: verifyError instanceof Error ? verifyError.message : 'Token verification failed'\n        };\n      }\n      \n      if (!authResult.success || !authResult.user) {\n        console.error(`\u274C [${timestamp}] Firebase ID token verification failed:`, {\n          error: authResult.error,\n          success: authResult.success,\n          hasUser: !!authResult.user\n        });\n        return NextResponse.json(\n          { error: `Invalid ID token: ${authResult.error}` },\n          { status: 401 }\n        );\n      }\n      \n      console.log(`\u2705 [${timestamp}] Firebase ID token verified for uid: ${authResult.user.uid}`);\n      console.log(`\u2705 [${timestamp}] Token claims:`, {\n        email: authResult.user.email,\n        name: authResult.user.name,\n        emailVerified: authResult.user.email_verified\n      });\n      \n      // For Google sign-in, user already exists in Firebase Auth\n      // We just need to ensure the profile exists in Firestore\n      \n    } else if (password) {\n      // Handle email/password flow - create new Firebase Auth user\n      console.log(`\uD83C\uDD95 Creating new Firebase Auth user for: ${email}`);\n      try {\n        const newUserRecord = await firebaseUserService.createAuthUser({\n          email,\n          password,\n          displayName: name,\n          emailVerified: false\n        });\n        \n        authResult = {\n          success: true,\n          user: {\n            uid: newUserRecord.uid,\n            email: newUserRecord.email!,\n            name: newUserRecord.displayName || name,\n            email_verified: newUserRecord.emailVerified\n          }\n        };\n\n        // Create a custom token for the new user\n        const auth = await import('@/lib/firebase/admin').then(m => m.getAdminAuth());\n        sessionToken = await auth.createCustomToken(newUserRecord.uid);\n        isNewUser = true;\n        \n        console.log(`\u2705 Firebase Auth user created for uid: ${authResult.user.uid}`);\n      } catch (error: any) {\n        console.error('\u274C Firebase Auth user creation failed:', error);\n        \n        // Handle specific Firebase Auth errors\n        if (error.code === 'auth/email-already-exists') {\n          console.log(`\u26A0\uFE0F Account creation attempt for existing email: ${email}`);\n          return NextResponse.json(\n            { \n              error: 'This email is already registered. Please sign in instead or use a different email.',\n              code: 'email_already_exists',\n              action: 'redirect_to_signin'\n            },\n            { status: 409 }\n          );\n        }\n        \n        if (error.code === 'auth/invalid-email') {\n          return NextResponse.json(\n            { \n              error: 'Please enter a valid email address.',\n              code: 'invalid_email'\n            },\n            { status: 400 }\n          );\n        }\n        \n        if (error.code === 'auth/weak-password') {\n          return NextResponse.json(\n            { \n              error: 'Password must be at least 6 characters long.',\n              code: 'weak_password'\n            },\n            { status: 400 }\n          );\n        }\n        \n        // Generic Firebase error handling\n        const errorMessage = error.message || 'Failed to create account';\n        console.error(`\u274C Unhandled Firebase Auth error code: ${error.code}, message: ${errorMessage}`);\n        \n        return NextResponse.json(\n          { \n            error: errorMessage.includes('Firebase') ? 'Authentication service error. Please try again.' : errorMessage,\n            code: error.code || 'auth_error'\n          },\n          { status: 400 }\n        );\n      }\n    } else {\n      return NextResponse.json(\n        { error: 'Password or ID token is required' },\n        { status: 400 }\n      );\n    }\n\n    if (!authResult.user || !authResult.user.uid) {\n      console.error('\u274C Authentication failed - no user data');\n      return NextResponse.json(\n        { error: 'Authentication failed' },\n        { status: 401 }\n      );\n    }\n\n    try {\n      // Check if user profile already exists in Firestore\n      console.log(`\uD83D\uDD0D Checking if user profile exists for uid: ${authResult.user.uid}`);\n      const existingProfile = await firebaseUserService.getUserProfile(authResult.user.uid);\n      \n      if (existingProfile && !isNewUser) {\n        console.log(`\u26A0\uFE0F User profile already exists for uid: ${authResult.user.uid}`);\n        return NextResponse.json(\n          { error: 'User already exists' },\n          { status: 409 }\n        );\n      }\n\n      // Create or ensure user profile exists in Firestore with retry logic\n      let userProfile;\n      try {\n        userProfile = await firebaseUserService.ensureUserProfile(authResult.user.uid, {\n          email: authResult.user.email,\n          displayName: authResult.user.name || name,\n          emailVerified: authResult.user.email_verified,\n          plan: 'free'\n        });\n      } catch (profileError) {\n        console.error(`\u274C Failed to create user profile for uid: ${authResult.user.uid}:`, profileError);\n        \n        // If this was a new Firebase Auth user creation and profile creation failed,\n        // we should clean up the orphaned Firebase Auth account\n        if (isNewUser) {\n          console.log(`\uD83E\uDDF9 Cleaning up orphaned Firebase Auth account for uid: ${authResult.user.uid}`);\n          try {\n            await firebaseUserService.deleteUser(authResult.user.uid);\n            console.log(`\u2705 Cleaned up orphaned Firebase Auth account`);\n          } catch (cleanupError) {\n            console.error(`\u274C Failed to cleanup orphaned Firebase Auth account:`, cleanupError);\n            // Don't fail the request for cleanup errors - log for manual review\n          }\n        }\n        \n        throw profileError;\n      }\n      \n      console.log(`\u2705 User profile ${existingProfile ? 'confirmed' : 'created'} for uid: ${authResult.user.uid}`);\n\n      // Set session cookie\n      const cookieStore = await cookies();\n      cookieStore.set(SESSION_COOKIE_NAME, sessionToken, {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === 'production',\n        maxAge: SESSION_DURATION_S,\n        path: '/',\n        sameSite: 'lax',\n      });\n      \n      console.log(`\uD83C\uDF6A Session cookie set for uid: ${authResult.user.uid}`);\n\n      // Return success with user data and token for localStorage\n      return NextResponse.json({\n        success: true,\n        token: sessionToken,\n        user: {\n          uid: userProfile.uid,\n          email: userProfile.email,\n          name: userProfile.displayName,\n          email_verified: userProfile.emailVerified,\n          plan: userProfile.plan,\n          profilePictureUrl: userProfile.profilePictureUrl,\n          createdAt: userProfile.createdAt,\n          updatedAt: userProfile.updatedAt\n        }\n      });\n      \n    } catch (profileError) {\n      console.error('\u274C Failed to handle user profile:', profileError);\n      return NextResponse.json(\n        { error: 'Failed to create user profile' },\n        { status: 500 }\n      );\n    }\n\n  } catch (error) {\n    console.error('\u274C Signup error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6669032e60ed5816fe11658babd389f74e69ea69"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1bxck3nr89 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1bxck3nr89();
var __createBinding =
/* istanbul ignore next */
(cov_1bxck3nr89().s[0]++,
/* istanbul ignore next */
(cov_1bxck3nr89().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1bxck3nr89().b[0][1]++, this.__createBinding) ||
/* istanbul ignore next */
(cov_1bxck3nr89().b[0][2]++, Object.create ?
/* istanbul ignore next */
(cov_1bxck3nr89().b[1][0]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_1bxck3nr89().f[0]++;
  cov_1bxck3nr89().s[1]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_1bxck3nr89().b[2][0]++;
    cov_1bxck3nr89().s[2]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_1bxck3nr89().b[2][1]++;
  }
  var desc =
  /* istanbul ignore next */
  (cov_1bxck3nr89().s[3]++, Object.getOwnPropertyDescriptor(m, k));
  /* istanbul ignore next */
  cov_1bxck3nr89().s[4]++;
  if (
  /* istanbul ignore next */
  (cov_1bxck3nr89().b[4][0]++, !desc) ||
  /* istanbul ignore next */
  (cov_1bxck3nr89().b[4][1]++, "get" in desc ?
  /* istanbul ignore next */
  (cov_1bxck3nr89().b[5][0]++, !m.__esModule) :
  /* istanbul ignore next */
  (cov_1bxck3nr89().b[5][1]++,
  /* istanbul ignore next */
  (cov_1bxck3nr89().b[6][0]++, desc.writable) ||
  /* istanbul ignore next */
  (cov_1bxck3nr89().b[6][1]++, desc.configurable)))) {
    /* istanbul ignore next */
    cov_1bxck3nr89().b[3][0]++;
    cov_1bxck3nr89().s[5]++;
    desc = {
      enumerable: true,
      get: function () {
        /* istanbul ignore next */
        cov_1bxck3nr89().f[1]++;
        cov_1bxck3nr89().s[6]++;
        return m[k];
      }
    };
  } else
  /* istanbul ignore next */
  {
    cov_1bxck3nr89().b[3][1]++;
  }
  cov_1bxck3nr89().s[7]++;
  Object.defineProperty(o, k2, desc);
}) :
/* istanbul ignore next */
(cov_1bxck3nr89().b[1][1]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_1bxck3nr89().f[2]++;
  cov_1bxck3nr89().s[8]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_1bxck3nr89().b[7][0]++;
    cov_1bxck3nr89().s[9]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_1bxck3nr89().b[7][1]++;
  }
  cov_1bxck3nr89().s[10]++;
  o[k2] = m[k];
})));
var __setModuleDefault =
/* istanbul ignore next */
(cov_1bxck3nr89().s[11]++,
/* istanbul ignore next */
(cov_1bxck3nr89().b[8][0]++, this) &&
/* istanbul ignore next */
(cov_1bxck3nr89().b[8][1]++, this.__setModuleDefault) ||
/* istanbul ignore next */
(cov_1bxck3nr89().b[8][2]++, Object.create ?
/* istanbul ignore next */
(cov_1bxck3nr89().b[9][0]++, function (o, v) {
  /* istanbul ignore next */
  cov_1bxck3nr89().f[3]++;
  cov_1bxck3nr89().s[12]++;
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
}) :
/* istanbul ignore next */
(cov_1bxck3nr89().b[9][1]++, function (o, v) {
  /* istanbul ignore next */
  cov_1bxck3nr89().f[4]++;
  cov_1bxck3nr89().s[13]++;
  o["default"] = v;
})));
var __importStar =
/* istanbul ignore next */
(cov_1bxck3nr89().s[14]++,
/* istanbul ignore next */
(cov_1bxck3nr89().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_1bxck3nr89().b[10][1]++, this.__importStar) ||
/* istanbul ignore next */
(cov_1bxck3nr89().b[10][2]++, function () {
  /* istanbul ignore next */
  cov_1bxck3nr89().f[5]++;
  cov_1bxck3nr89().s[15]++;
  var ownKeys = function (o) {
    /* istanbul ignore next */
    cov_1bxck3nr89().f[6]++;
    cov_1bxck3nr89().s[16]++;
    ownKeys =
    /* istanbul ignore next */
    (cov_1bxck3nr89().b[11][0]++, Object.getOwnPropertyNames) ||
    /* istanbul ignore next */
    (cov_1bxck3nr89().b[11][1]++, function (o) {
      /* istanbul ignore next */
      cov_1bxck3nr89().f[7]++;
      var ar =
      /* istanbul ignore next */
      (cov_1bxck3nr89().s[17]++, []);
      /* istanbul ignore next */
      cov_1bxck3nr89().s[18]++;
      for (var k in o) {
        /* istanbul ignore next */
        cov_1bxck3nr89().s[19]++;
        if (Object.prototype.hasOwnProperty.call(o, k)) {
          /* istanbul ignore next */
          cov_1bxck3nr89().b[12][0]++;
          cov_1bxck3nr89().s[20]++;
          ar[ar.length] = k;
        } else
        /* istanbul ignore next */
        {
          cov_1bxck3nr89().b[12][1]++;
        }
      }
      /* istanbul ignore next */
      cov_1bxck3nr89().s[21]++;
      return ar;
    });
    /* istanbul ignore next */
    cov_1bxck3nr89().s[22]++;
    return ownKeys(o);
  };
  /* istanbul ignore next */
  cov_1bxck3nr89().s[23]++;
  return function (mod) {
    /* istanbul ignore next */
    cov_1bxck3nr89().f[8]++;
    cov_1bxck3nr89().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_1bxck3nr89().b[14][0]++, mod) &&
    /* istanbul ignore next */
    (cov_1bxck3nr89().b[14][1]++, mod.__esModule)) {
      /* istanbul ignore next */
      cov_1bxck3nr89().b[13][0]++;
      cov_1bxck3nr89().s[25]++;
      return mod;
    } else
    /* istanbul ignore next */
    {
      cov_1bxck3nr89().b[13][1]++;
    }
    var result =
    /* istanbul ignore next */
    (cov_1bxck3nr89().s[26]++, {});
    /* istanbul ignore next */
    cov_1bxck3nr89().s[27]++;
    if (mod != null) {
      /* istanbul ignore next */
      cov_1bxck3nr89().b[15][0]++;
      cov_1bxck3nr89().s[28]++;
      for (var k =
        /* istanbul ignore next */
        (cov_1bxck3nr89().s[29]++, ownKeys(mod)), i =
        /* istanbul ignore next */
        (cov_1bxck3nr89().s[30]++, 0); i < k.length; i++) {
        /* istanbul ignore next */
        cov_1bxck3nr89().s[31]++;
        if (k[i] !== "default") {
          /* istanbul ignore next */
          cov_1bxck3nr89().b[16][0]++;
          cov_1bxck3nr89().s[32]++;
          __createBinding(result, mod, k[i]);
        } else
        /* istanbul ignore next */
        {
          cov_1bxck3nr89().b[16][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_1bxck3nr89().b[15][1]++;
    }
    cov_1bxck3nr89().s[33]++;
    __setModuleDefault(result, mod);
    /* istanbul ignore next */
    cov_1bxck3nr89().s[34]++;
    return result;
  };
}()));
/* istanbul ignore next */
cov_1bxck3nr89().s[35]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1bxck3nr89().s[36]++;
exports.POST = POST;
const server_1 =
/* istanbul ignore next */
(cov_1bxck3nr89().s[37]++, require("next/server"));
const headers_1 =
/* istanbul ignore next */
(cov_1bxck3nr89().s[38]++, require("next/headers"));
const authMiddleware_1 =
/* istanbul ignore next */
(cov_1bxck3nr89().s[39]++, require("@/lib/middleware/authMiddleware"));
const firebase_user_service_1 =
/* istanbul ignore next */
(cov_1bxck3nr89().s[40]++, require("@/lib/services/firebase-user-service"));
const SESSION_COOKIE_NAME =
/* istanbul ignore next */
(cov_1bxck3nr89().s[41]++, 'session');
const SESSION_DURATION_S =
/* istanbul ignore next */
(cov_1bxck3nr89().s[42]++, 7 * 24 * 60 * 60); // 7 days
async function POST(request) {
  /* istanbul ignore next */
  cov_1bxck3nr89().f[9]++;
  var _a;
  const timestamp =
  /* istanbul ignore next */
  (cov_1bxck3nr89().s[43]++, new Date().toISOString());
  /* istanbul ignore next */
  cov_1bxck3nr89().s[44]++;
  console.log(`🆕 [${timestamp}] AUTH SIGNUP POST called`);
  /* istanbul ignore next */
  cov_1bxck3nr89().s[45]++;
  try {
    const {
      email,
      password,
      name,
      idToken,
      bypass
    } =
    /* istanbul ignore next */
    (cov_1bxck3nr89().s[46]++, await request.json());
    /* istanbul ignore next */
    cov_1bxck3nr89().s[47]++;
    console.log(`🆕 [${timestamp}] Signup request details:`, {
      hasEmail: !!email,
      hasPassword: !!password,
      hasName: !!name,
      hasIdToken: !!idToken,
      idTokenPrefix: idToken ?
      /* istanbul ignore next */
      (cov_1bxck3nr89().b[17][0]++, idToken.substring(0, 50) + '...') :
      /* istanbul ignore next */
      (cov_1bxck3nr89().b[17][1]++, 'none')
    });
    /* istanbul ignore next */
    cov_1bxck3nr89().s[48]++;
    if (!email) {
      /* istanbul ignore next */
      cov_1bxck3nr89().b[18][0]++;
      cov_1bxck3nr89().s[49]++;
      return server_1.NextResponse.json({
        error: 'Email is required'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1bxck3nr89().b[18][1]++;
    }
    let authResult;
    let sessionToken =
    /* istanbul ignore next */
    (cov_1bxck3nr89().s[50]++, idToken);
    let isNewUser =
    /* istanbul ignore next */
    (cov_1bxck3nr89().s[51]++, false);
    /* istanbul ignore next */
    cov_1bxck3nr89().s[52]++;
    if (
    /* istanbul ignore next */
    (cov_1bxck3nr89().b[20][0]++, idToken) &&
    /* istanbul ignore next */
    (cov_1bxck3nr89().b[20][1]++, bypass)) {
      /* istanbul ignore next */
      cov_1bxck3nr89().b[19][0]++;
      cov_1bxck3nr89().s[53]++;
      // Handle bypass/development token flow
      console.log(`🔐 [${timestamp}] Processing bypass token for development signup`);
      /* istanbul ignore next */
      cov_1bxck3nr89().s[54]++;
      try {
        // For bypass tokens, decode directly since they're mock tokens
        const parts =
        /* istanbul ignore next */
        (cov_1bxck3nr89().s[55]++, idToken.split('.'));
        /* istanbul ignore next */
        cov_1bxck3nr89().s[56]++;
        if (parts.length >= 3) {
          /* istanbul ignore next */
          cov_1bxck3nr89().b[21][0]++;
          const payload =
          /* istanbul ignore next */
          (cov_1bxck3nr89().s[57]++, JSON.parse(atob(parts[1].replace(/-/g, '+').replace(/_/g, '/'))));
          /* istanbul ignore next */
          cov_1bxck3nr89().s[58]++;
          authResult = {
            success: true,
            user: {
              uid: payload.uid,
              email: payload.email,
              name: payload.name,
              email_verified:
              /* istanbul ignore next */
              (cov_1bxck3nr89().b[22][0]++, payload.email_verified) ||
              /* istanbul ignore next */
              (cov_1bxck3nr89().b[22][1]++, true)
            }
          };
          /* istanbul ignore next */
          cov_1bxck3nr89().s[59]++;
          sessionToken = idToken; // Use the bypass token as session token
          /* istanbul ignore next */
          cov_1bxck3nr89().s[60]++;
          console.log(`✅ [${timestamp}] Bypass token processed for signup uid: ${authResult.user.uid}`);
        } else {
          /* istanbul ignore next */
          cov_1bxck3nr89().b[21][1]++;
          cov_1bxck3nr89().s[61]++;
          throw new Error('Invalid bypass token format');
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_1bxck3nr89().s[62]++;
        console.error(`❌ [${timestamp}] Bypass token processing failed:`, error);
        /* istanbul ignore next */
        cov_1bxck3nr89().s[63]++;
        return server_1.NextResponse.json({
          error: 'Invalid bypass token'
        }, {
          status: 401
        });
      }
    } else {
      /* istanbul ignore next */
      cov_1bxck3nr89().b[19][1]++;
      cov_1bxck3nr89().s[64]++;
      if (idToken) {
        /* istanbul ignore next */
        cov_1bxck3nr89().b[23][0]++;
        cov_1bxck3nr89().s[65]++;
        // Handle Firebase ID token flow (for Google Sign-in)
        console.log(`🔐 [${timestamp}] Verifying Firebase ID token for Google Sign-up`);
        /* istanbul ignore next */
        cov_1bxck3nr89().s[66]++;
        console.log(`🔐 [${timestamp}] ID Token format check:`, {
          length: idToken.length,
          parts: idToken.split('.').length,
          startsCorrectly: idToken.startsWith('eyJ'),
          preview: idToken.substring(0, 100) + '...'
        });
        /* istanbul ignore next */
        cov_1bxck3nr89().s[67]++;
        try {
          /* istanbul ignore next */
          cov_1bxck3nr89().s[68]++;
          authResult = await (0, authMiddleware_1.verifyFirebaseToken)(idToken);
          /* istanbul ignore next */
          cov_1bxck3nr89().s[69]++;
          console.log(`🔐 [${timestamp}] Firebase token verification result:`, {
            success: authResult.success,
            hasUser: !!authResult.user,
            uid:
            /* istanbul ignore next */
            (cov_1bxck3nr89().b[25][0]++, (_a = authResult.user) === null) ||
            /* istanbul ignore next */
            (cov_1bxck3nr89().b[25][1]++, _a === void 0) ?
            /* istanbul ignore next */
            (cov_1bxck3nr89().b[24][0]++, void 0) :
            /* istanbul ignore next */
            (cov_1bxck3nr89().b[24][1]++, _a.uid),
            error: authResult.error
          });
        } catch (verifyError) {
          /* istanbul ignore next */
          cov_1bxck3nr89().s[70]++;
          console.error(`🔐 [${timestamp}] Firebase token verification threw error:`, verifyError);
          /* istanbul ignore next */
          cov_1bxck3nr89().s[71]++;
          authResult = {
            success: false,
            user: null,
            error: verifyError instanceof Error ?
            /* istanbul ignore next */
            (cov_1bxck3nr89().b[26][0]++, verifyError.message) :
            /* istanbul ignore next */
            (cov_1bxck3nr89().b[26][1]++, 'Token verification failed')
          };
        }
        /* istanbul ignore next */
        cov_1bxck3nr89().s[72]++;
        if (
        /* istanbul ignore next */
        (cov_1bxck3nr89().b[28][0]++, !authResult.success) ||
        /* istanbul ignore next */
        (cov_1bxck3nr89().b[28][1]++, !authResult.user)) {
          /* istanbul ignore next */
          cov_1bxck3nr89().b[27][0]++;
          cov_1bxck3nr89().s[73]++;
          console.error(`❌ [${timestamp}] Firebase ID token verification failed:`, {
            error: authResult.error,
            success: authResult.success,
            hasUser: !!authResult.user
          });
          /* istanbul ignore next */
          cov_1bxck3nr89().s[74]++;
          return server_1.NextResponse.json({
            error: `Invalid ID token: ${authResult.error}`
          }, {
            status: 401
          });
        } else
        /* istanbul ignore next */
        {
          cov_1bxck3nr89().b[27][1]++;
        }
        cov_1bxck3nr89().s[75]++;
        console.log(`✅ [${timestamp}] Firebase ID token verified for uid: ${authResult.user.uid}`);
        /* istanbul ignore next */
        cov_1bxck3nr89().s[76]++;
        console.log(`✅ [${timestamp}] Token claims:`, {
          email: authResult.user.email,
          name: authResult.user.name,
          emailVerified: authResult.user.email_verified
        });
        // For Google sign-in, user already exists in Firebase Auth
        // We just need to ensure the profile exists in Firestore
      } else {
        /* istanbul ignore next */
        cov_1bxck3nr89().b[23][1]++;
        cov_1bxck3nr89().s[77]++;
        if (password) {
          /* istanbul ignore next */
          cov_1bxck3nr89().b[29][0]++;
          cov_1bxck3nr89().s[78]++;
          // Handle email/password flow - create new Firebase Auth user
          console.log(`🆕 Creating new Firebase Auth user for: ${email}`);
          /* istanbul ignore next */
          cov_1bxck3nr89().s[79]++;
          try {
            const newUserRecord =
            /* istanbul ignore next */
            (cov_1bxck3nr89().s[80]++, await firebase_user_service_1.firebaseUserService.createAuthUser({
              email,
              password,
              displayName: name,
              emailVerified: false
            }));
            /* istanbul ignore next */
            cov_1bxck3nr89().s[81]++;
            authResult = {
              success: true,
              user: {
                uid: newUserRecord.uid,
                email: newUserRecord.email,
                name:
                /* istanbul ignore next */
                (cov_1bxck3nr89().b[30][0]++, newUserRecord.displayName) ||
                /* istanbul ignore next */
                (cov_1bxck3nr89().b[30][1]++, name),
                email_verified: newUserRecord.emailVerified
              }
            };
            // Create a custom token for the new user
            const auth =
            /* istanbul ignore next */
            (cov_1bxck3nr89().s[82]++, await Promise.resolve().then(() => {
              /* istanbul ignore next */
              cov_1bxck3nr89().f[10]++;
              cov_1bxck3nr89().s[83]++;
              return __importStar(require('@/lib/firebase/admin'));
            }).then(m => {
              /* istanbul ignore next */
              cov_1bxck3nr89().f[11]++;
              cov_1bxck3nr89().s[84]++;
              return m.getAdminAuth();
            }));
            /* istanbul ignore next */
            cov_1bxck3nr89().s[85]++;
            sessionToken = await auth.createCustomToken(newUserRecord.uid);
            /* istanbul ignore next */
            cov_1bxck3nr89().s[86]++;
            isNewUser = true;
            /* istanbul ignore next */
            cov_1bxck3nr89().s[87]++;
            console.log(`✅ Firebase Auth user created for uid: ${authResult.user.uid}`);
          } catch (error) {
            /* istanbul ignore next */
            cov_1bxck3nr89().s[88]++;
            console.error('❌ Firebase Auth user creation failed:', error);
            // Handle specific Firebase Auth errors
            /* istanbul ignore next */
            cov_1bxck3nr89().s[89]++;
            if (error.code === 'auth/email-already-exists') {
              /* istanbul ignore next */
              cov_1bxck3nr89().b[31][0]++;
              cov_1bxck3nr89().s[90]++;
              console.log(`⚠️ Account creation attempt for existing email: ${email}`);
              /* istanbul ignore next */
              cov_1bxck3nr89().s[91]++;
              return server_1.NextResponse.json({
                error: 'This email is already registered. Please sign in instead or use a different email.',
                code: 'email_already_exists',
                action: 'redirect_to_signin'
              }, {
                status: 409
              });
            } else
            /* istanbul ignore next */
            {
              cov_1bxck3nr89().b[31][1]++;
            }
            cov_1bxck3nr89().s[92]++;
            if (error.code === 'auth/invalid-email') {
              /* istanbul ignore next */
              cov_1bxck3nr89().b[32][0]++;
              cov_1bxck3nr89().s[93]++;
              return server_1.NextResponse.json({
                error: 'Please enter a valid email address.',
                code: 'invalid_email'
              }, {
                status: 400
              });
            } else
            /* istanbul ignore next */
            {
              cov_1bxck3nr89().b[32][1]++;
            }
            cov_1bxck3nr89().s[94]++;
            if (error.code === 'auth/weak-password') {
              /* istanbul ignore next */
              cov_1bxck3nr89().b[33][0]++;
              cov_1bxck3nr89().s[95]++;
              return server_1.NextResponse.json({
                error: 'Password must be at least 6 characters long.',
                code: 'weak_password'
              }, {
                status: 400
              });
            } else
            /* istanbul ignore next */
            {
              cov_1bxck3nr89().b[33][1]++;
            }
            // Generic Firebase error handling
            const errorMessage =
            /* istanbul ignore next */
            (cov_1bxck3nr89().s[96]++,
            /* istanbul ignore next */
            (cov_1bxck3nr89().b[34][0]++, error.message) ||
            /* istanbul ignore next */
            (cov_1bxck3nr89().b[34][1]++, 'Failed to create account'));
            /* istanbul ignore next */
            cov_1bxck3nr89().s[97]++;
            console.error(`❌ Unhandled Firebase Auth error code: ${error.code}, message: ${errorMessage}`);
            /* istanbul ignore next */
            cov_1bxck3nr89().s[98]++;
            return server_1.NextResponse.json({
              error: errorMessage.includes('Firebase') ?
              /* istanbul ignore next */
              (cov_1bxck3nr89().b[35][0]++, 'Authentication service error. Please try again.') :
              /* istanbul ignore next */
              (cov_1bxck3nr89().b[35][1]++, errorMessage),
              code:
              /* istanbul ignore next */
              (cov_1bxck3nr89().b[36][0]++, error.code) ||
              /* istanbul ignore next */
              (cov_1bxck3nr89().b[36][1]++, 'auth_error')
            }, {
              status: 400
            });
          }
        } else {
          /* istanbul ignore next */
          cov_1bxck3nr89().b[29][1]++;
          cov_1bxck3nr89().s[99]++;
          return server_1.NextResponse.json({
            error: 'Password or ID token is required'
          }, {
            status: 400
          });
        }
      }
    }
    /* istanbul ignore next */
    cov_1bxck3nr89().s[100]++;
    if (
    /* istanbul ignore next */
    (cov_1bxck3nr89().b[38][0]++, !authResult.user) ||
    /* istanbul ignore next */
    (cov_1bxck3nr89().b[38][1]++, !authResult.user.uid)) {
      /* istanbul ignore next */
      cov_1bxck3nr89().b[37][0]++;
      cov_1bxck3nr89().s[101]++;
      console.error('❌ Authentication failed - no user data');
      /* istanbul ignore next */
      cov_1bxck3nr89().s[102]++;
      return server_1.NextResponse.json({
        error: 'Authentication failed'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1bxck3nr89().b[37][1]++;
    }
    cov_1bxck3nr89().s[103]++;
    try {
      /* istanbul ignore next */
      cov_1bxck3nr89().s[104]++;
      // Check if user profile already exists in Firestore
      console.log(`🔍 Checking if user profile exists for uid: ${authResult.user.uid}`);
      const existingProfile =
      /* istanbul ignore next */
      (cov_1bxck3nr89().s[105]++, await firebase_user_service_1.firebaseUserService.getUserProfile(authResult.user.uid));
      /* istanbul ignore next */
      cov_1bxck3nr89().s[106]++;
      if (
      /* istanbul ignore next */
      (cov_1bxck3nr89().b[40][0]++, existingProfile) &&
      /* istanbul ignore next */
      (cov_1bxck3nr89().b[40][1]++, !isNewUser)) {
        /* istanbul ignore next */
        cov_1bxck3nr89().b[39][0]++;
        cov_1bxck3nr89().s[107]++;
        console.log(`⚠️ User profile already exists for uid: ${authResult.user.uid}`);
        /* istanbul ignore next */
        cov_1bxck3nr89().s[108]++;
        return server_1.NextResponse.json({
          error: 'User already exists'
        }, {
          status: 409
        });
      } else
      /* istanbul ignore next */
      {
        cov_1bxck3nr89().b[39][1]++;
      }
      // Create or ensure user profile exists in Firestore with retry logic
      let userProfile;
      /* istanbul ignore next */
      cov_1bxck3nr89().s[109]++;
      try {
        /* istanbul ignore next */
        cov_1bxck3nr89().s[110]++;
        userProfile = await firebase_user_service_1.firebaseUserService.ensureUserProfile(authResult.user.uid, {
          email: authResult.user.email,
          displayName:
          /* istanbul ignore next */
          (cov_1bxck3nr89().b[41][0]++, authResult.user.name) ||
          /* istanbul ignore next */
          (cov_1bxck3nr89().b[41][1]++, name),
          emailVerified: authResult.user.email_verified,
          plan: 'free'
        });
      } catch (profileError) {
        /* istanbul ignore next */
        cov_1bxck3nr89().s[111]++;
        console.error(`❌ Failed to create user profile for uid: ${authResult.user.uid}:`, profileError);
        // If this was a new Firebase Auth user creation and profile creation failed,
        // we should clean up the orphaned Firebase Auth account
        /* istanbul ignore next */
        cov_1bxck3nr89().s[112]++;
        if (isNewUser) {
          /* istanbul ignore next */
          cov_1bxck3nr89().b[42][0]++;
          cov_1bxck3nr89().s[113]++;
          console.log(`🧹 Cleaning up orphaned Firebase Auth account for uid: ${authResult.user.uid}`);
          /* istanbul ignore next */
          cov_1bxck3nr89().s[114]++;
          try {
            /* istanbul ignore next */
            cov_1bxck3nr89().s[115]++;
            await firebase_user_service_1.firebaseUserService.deleteUser(authResult.user.uid);
            /* istanbul ignore next */
            cov_1bxck3nr89().s[116]++;
            console.log(`✅ Cleaned up orphaned Firebase Auth account`);
          } catch (cleanupError) {
            /* istanbul ignore next */
            cov_1bxck3nr89().s[117]++;
            console.error(`❌ Failed to cleanup orphaned Firebase Auth account:`, cleanupError);
            // Don't fail the request for cleanup errors - log for manual review
          }
        } else
        /* istanbul ignore next */
        {
          cov_1bxck3nr89().b[42][1]++;
        }
        cov_1bxck3nr89().s[118]++;
        throw profileError;
      }
      /* istanbul ignore next */
      cov_1bxck3nr89().s[119]++;
      console.log(`✅ User profile ${existingProfile ?
      /* istanbul ignore next */
      (cov_1bxck3nr89().b[43][0]++, 'confirmed') :
      /* istanbul ignore next */
      (cov_1bxck3nr89().b[43][1]++, 'created')} for uid: ${authResult.user.uid}`);
      // Set session cookie
      const cookieStore =
      /* istanbul ignore next */
      (cov_1bxck3nr89().s[120]++, await (0, headers_1.cookies)());
      /* istanbul ignore next */
      cov_1bxck3nr89().s[121]++;
      cookieStore.set(SESSION_COOKIE_NAME, sessionToken, {
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        maxAge: SESSION_DURATION_S,
        path: '/',
        sameSite: 'lax'
      });
      /* istanbul ignore next */
      cov_1bxck3nr89().s[122]++;
      console.log(`🍪 Session cookie set for uid: ${authResult.user.uid}`);
      // Return success with user data and token for localStorage
      /* istanbul ignore next */
      cov_1bxck3nr89().s[123]++;
      return server_1.NextResponse.json({
        success: true,
        token: sessionToken,
        user: {
          uid: userProfile.uid,
          email: userProfile.email,
          name: userProfile.displayName,
          email_verified: userProfile.emailVerified,
          plan: userProfile.plan,
          profilePictureUrl: userProfile.profilePictureUrl,
          createdAt: userProfile.createdAt,
          updatedAt: userProfile.updatedAt
        }
      });
    } catch (profileError) {
      /* istanbul ignore next */
      cov_1bxck3nr89().s[124]++;
      console.error('❌ Failed to handle user profile:', profileError);
      /* istanbul ignore next */
      cov_1bxck3nr89().s[125]++;
      return server_1.NextResponse.json({
        error: 'Failed to create user profile'
      }, {
        status: 500
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1bxck3nr89().s[126]++;
    console.error('❌ Signup error:', error);
    /* istanbul ignore next */
    cov_1bxck3nr89().s[127]++;
    return server_1.NextResponse.json({
      error: 'Internal server error'
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,