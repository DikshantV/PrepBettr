{"version":3,"names":["cov_2nlfpe6nzb","actualCoverage","cosmos_1","s","require","storage_blob_1","identity_1","keyvault_secrets_1","AzureGDPRService","constructor","f","cosmosClient","database","blobServiceClient","keyVaultClient","COSMOS_DATABASE_ID","CONTAINERS","DELETION_REQUESTS","AUDIT_LOG","CONSENTS","ANONYMIZED_ANALYTICS","getInstance","instance","b","initialize","process","env","AZURE_KEY_VAULT_URL","SecretClient","DefaultAzureCredential","initializeCosmosDB","initializeBlobStorage","console","log","error","connectionString","AZURE_COSMOS_CONNECTION_STRING","secret","getSecret","value","keyVaultError","warn","endpoint","AZURE_COSMOS_ENDPOINT","key","AZURE_COSMOS_KEY","Error","CosmosClient","ensureContainers","AZURE_STORAGE_CONNECTION_STRING","BlobServiceClient","fromConnectionString","containerName","containerId","Object","entries","containers","createIfNotExists","id","partitionKey","paths","recordConsent","consent","consentId","userId","Date","now","consentRecord","assign","lastUpdated","toISOString","container","items","create","createAuditLogEntry","action","details","analytics","marketing","functional","version","ipAddress","userAgent","getConsent","query","parameters","name","resources","maxItemCount","fetchNext","length","updateConsent","updates","currentConsent","updatedConsent","item","replace","requestDataDeletion","requestedBy","reason","requestId","Math","random","toString","substring","requestDate","scheduledDate","getTime","deletionRequest","status","deletedData","auditTrail","toDateString","processDataDeletion","resource","request","read","patch","op","path","errors","containersToDelete","deleted","deleteFromContainer","push","errorMsg","deletedBlobContainers","deleteFromBlobStorage","join","finalStatus","complianceOfficer","success","message","updateError","getPendingDeletions","fetchAll","getDeletionRequestStatus","code","exportUserData","exportData","exportDate","data","containersToExport","containerClient","consents","auditLogs","getAuditLogs","exportedContainers","keys","totalRecords","values","flat","entry","auditEntry","timestamp","limit","deletedCount","batchSize","i","batch","slice","deletePromises","map","delete","catch","results","Promise","all","filter","result","deletedContainers","userContainers","getContainerClient","prefix","deletedBlobs","_d","_e","e_1","__asyncValues","listBlobsFlat","_f","next","_a","done","_c","blob","deleteBlob","anonymizeAnalyticsData","event","page","hashUserId","sessionId","hashSessionId","metadata","sanitizeMetadata","maskEmail","email","username","domain","split","maskedUsername","charAt","repeat","maskPhoneNumber","phone","cleaned","Buffer","from","sanitized","piiKeys","forEach","exports","azureGDPRService"],"sources":["/Users/dikshantvashistha/PrepBettr/lib/services/azure-gdpr-service.ts"],"sourcesContent":["import { CosmosClient, Container, Database } from '@azure/cosmos';\nimport { BlobServiceClient, ContainerClient } from '@azure/storage-blob';\nimport { DefaultAzureCredential } from '@azure/identity';\nimport { SecretClient } from '@azure/keyvault-secrets';\n\n/**\n * Azure-based GDPR Compliance Service\n * \n * Implements GDPR features using Azure Cosmos DB for data deletion requests\n * and audit logging, plus Azure Blob Storage for file deletion.\n */\n\nexport interface UserConsent {\n  id: string;\n  userId: string;\n  analytics: boolean;\n  marketing: boolean;\n  functional: boolean;\n  consentDate: string;\n  ipAddress?: string;\n  userAgent?: string;\n  version: string; // Privacy policy version\n  lastUpdated: string;\n  partitionKey: string; // For Cosmos DB partitioning\n}\n\nexport interface DataDeletionRequest {\n  id: string;\n  userId: string;\n  requestDate: string;\n  requestedBy: string; // email of person making request\n  reason?: string;\n  status: 'pending' | 'processing' | 'completed' | 'failed' | 'cancelled';\n  scheduledDate?: string; // When deletion will be processed (30 days after request)\n  completedDate?: string;\n  deletedData: string[]; // list of containers/collections deleted\n  errors?: string[]; // any errors encountered during deletion\n  auditTrail: AuditLogEntry[];\n  partitionKey: string; // For Cosmos DB partitioning\n}\n\nexport interface AuditLogEntry {\n  id: string;\n  userId: string;\n  action: 'consent_recorded' | 'consent_updated' | 'data_deletion_requested' | 'data_deletion_processed' | 'data_exported' | 'data_anonymized';\n  timestamp: string;\n  details: Record<string, any>;\n  ipAddress?: string;\n  userAgent?: string;\n  complianceOfficer?: string;\n  partitionKey: string;\n}\n\nexport interface AnonymizedAnalytics {\n  id: string;\n  timestamp: string;\n  event: string;\n  page: string;\n  userId: string; // hashed/pseudonymized\n  sessionId: string; // hashed\n  userAgent?: string; // anonymized\n  location?: {\n    country: string;\n    region?: string;\n  };\n  metadata: Record<string, any>;\n  partitionKey: string;\n}\n\nexport class AzureGDPRService {\n  private cosmosClient: CosmosClient | null = null;\n  private database: Database | null = null;\n  private blobServiceClient: BlobServiceClient | null = null;\n  private keyVaultClient: SecretClient | null = null;\n  private static instance: AzureGDPRService;\n  \n  private readonly COSMOS_DATABASE_ID = 'PrepBettrDB';\n  private readonly CONTAINERS = {\n    DELETION_REQUESTS: 'gdprRequests',\n    AUDIT_LOG: 'dataProtectionAuditLog',\n    CONSENTS: 'userConsents',\n    ANONYMIZED_ANALYTICS: 'anonymizedAnalytics'\n  } as const;\n\n  public static getInstance(): AzureGDPRService {\n    if (!AzureGDPRService.instance) {\n      AzureGDPRService.instance = new AzureGDPRService();\n    }\n    return AzureGDPRService.instance;\n  }\n\n  /**\n   * Initialize Azure services (Cosmos DB, Blob Storage, Key Vault)\n   */\n  async initialize(): Promise<void> {\n    try {\n      // Initialize Azure Key Vault for secrets\n      if (process.env.AZURE_KEY_VAULT_URL) {\n        this.keyVaultClient = new SecretClient(\n          process.env.AZURE_KEY_VAULT_URL,\n          new DefaultAzureCredential()\n        );\n      }\n\n      // Initialize Cosmos DB\n      await this.initializeCosmosDB();\n      \n      // Initialize Blob Storage\n      await this.initializeBlobStorage();\n\n      console.log('✅ Azure GDPR Service initialized successfully');\n    } catch (error) {\n      console.error('❌ Failed to initialize Azure GDPR Service:', error);\n      throw error;\n    }\n  }\n\n  private async initializeCosmosDB(): Promise<void> {\n    try {\n      let connectionString = process.env.AZURE_COSMOS_CONNECTION_STRING;\n      \n      // Try to get connection string from Key Vault if not in env\n      if (!connectionString && this.keyVaultClient) {\n        try {\n          const secret = await this.keyVaultClient.getSecret('cosmos-db-connection-string');\n          connectionString = secret.value;\n        } catch (keyVaultError) {\n          console.warn('Could not retrieve Cosmos DB connection from Key Vault:', keyVaultError);\n        }\n      }\n\n      // Fallback to endpoint and key\n      if (!connectionString) {\n        const endpoint = process.env.AZURE_COSMOS_ENDPOINT;\n        const key = process.env.AZURE_COSMOS_KEY;\n        \n        if (!endpoint || !key) {\n          throw new Error('Cosmos DB configuration missing. Provide either AZURE_COSMOS_CONNECTION_STRING or both AZURE_COSMOS_ENDPOINT and AZURE_COSMOS_KEY');\n        }\n        \n        this.cosmosClient = new CosmosClient({ endpoint, key });\n      } else {\n        this.cosmosClient = new CosmosClient(connectionString);\n      }\n\n      // Get database reference\n      this.database = this.cosmosClient.database(this.COSMOS_DATABASE_ID);\n      \n      // Ensure containers exist\n      await this.ensureContainers();\n      \n      console.log('✅ Cosmos DB initialized for GDPR service');\n    } catch (error) {\n      console.error('❌ Failed to initialize Cosmos DB:', error);\n      throw error;\n    }\n  }\n\n  private async initializeBlobStorage(): Promise<void> {\n    try {\n      let connectionString = process.env.AZURE_STORAGE_CONNECTION_STRING;\n      \n      // Try to get connection string from Key Vault\n      if (!connectionString && this.keyVaultClient) {\n        try {\n          const secret = await this.keyVaultClient.getSecret('storage-connection-string');\n          connectionString = secret.value;\n        } catch (keyVaultError) {\n          console.warn('Could not retrieve Storage connection from Key Vault:', keyVaultError);\n        }\n      }\n\n      if (!connectionString) {\n        throw new Error('Azure Storage connection string not found in environment or Key Vault');\n      }\n\n      this.blobServiceClient = BlobServiceClient.fromConnectionString(connectionString);\n      \n      console.log('✅ Azure Blob Storage initialized for GDPR service');\n    } catch (error) {\n      console.error('❌ Failed to initialize Blob Storage:', error);\n      throw error;\n    }\n  }\n\n  private async ensureContainers(): Promise<void> {\n    if (!this.database) throw new Error('Database not initialized');\n\n    for (const [containerName, containerId] of Object.entries(this.CONTAINERS)) {\n      try {\n        await this.database.containers.createIfNotExists({\n          id: containerId,\n          partitionKey: { paths: ['/partitionKey'] }\n        });\n        console.log(`✅ Container ${containerId} ready`);\n      } catch (error) {\n        console.error(`❌ Failed to create container ${containerId}:`, error);\n      }\n    }\n  }\n\n  /**\n   * Record user consent with audit trail\n   */\n  async recordConsent(consent: Omit<UserConsent, 'id' | 'partitionKey' | 'lastUpdated'>): Promise<string> {\n    if (!this.database) await this.initialize();\n\n    try {\n      const consentId = `consent_${consent.userId}_${Date.now()}`;\n      const consentRecord: UserConsent = {\n        id: consentId,\n        ...consent,\n        lastUpdated: new Date().toISOString(),\n        partitionKey: consent.userId\n      };\n\n      const container = this.database!.container(this.CONTAINERS.CONSENTS);\n      await container.items.create(consentRecord);\n\n      // Create audit log entry\n      await this.createAuditLogEntry({\n        userId: consent.userId,\n        action: 'consent_recorded',\n        details: {\n          analytics: consent.analytics,\n          marketing: consent.marketing,\n          functional: consent.functional,\n          version: consent.version\n        },\n        ipAddress: consent.ipAddress,\n        userAgent: consent.userAgent\n      });\n\n      console.log(`✅ Consent recorded for user ${consent.userId}`);\n      return consentId;\n    } catch (error) {\n      console.error('❌ Failed to record consent:', error);\n      throw new Error('Failed to record user consent');\n    }\n  }\n\n  /**\n   * Get latest user consent\n   */\n  async getConsent(userId: string): Promise<UserConsent | null> {\n    if (!this.database) await this.initialize();\n\n    try {\n      const container = this.database!.container(this.CONTAINERS.CONSENTS);\n      const query = {\n        query: 'SELECT * FROM c WHERE c.userId = @userId ORDER BY c.lastUpdated DESC',\n        parameters: [{ name: '@userId', value: userId }]\n      };\n\n      const { resources } = await container.items.query<UserConsent>(query, {\n        maxItemCount: 1,\n        partitionKey: userId\n      }).fetchNext();\n\n      return resources.length > 0 ? resources[0] : null;\n    } catch (error) {\n      console.error('❌ Failed to get consent:', error);\n      throw new Error('Failed to retrieve user consent');\n    }\n  }\n\n  /**\n   * Update user consent\n   */\n  async updateConsent(userId: string, updates: Partial<UserConsent>): Promise<void> {\n    if (!this.database) await this.initialize();\n\n    try {\n      const currentConsent = await this.getConsent(userId);\n      if (!currentConsent) {\n        throw new Error('No existing consent found for user');\n      }\n\n      const updatedConsent: UserConsent = {\n        ...currentConsent,\n        ...updates,\n        lastUpdated: new Date().toISOString()\n      };\n\n      const container = this.database!.container(this.CONTAINERS.CONSENTS);\n      await container.item(currentConsent.id, userId).replace(updatedConsent);\n\n      // Create audit log entry\n      await this.createAuditLogEntry({\n        userId,\n        action: 'consent_updated',\n        details: { updates }\n      });\n\n      console.log(`✅ Consent updated for user ${userId}`);\n    } catch (error) {\n      console.error('❌ Failed to update consent:', error);\n      throw new Error('Failed to update user consent');\n    }\n  }\n\n  /**\n   * Request data deletion (GDPR Right to Erasure)\n   */\n  async requestDataDeletion(\n    userId: string,\n    requestedBy: string,\n    reason?: string,\n    ipAddress?: string,\n    userAgent?: string\n  ): Promise<string> {\n    if (!this.database) await this.initialize();\n\n    try {\n      const requestId = `del_${Date.now()}_${Math.random().toString(36).substring(2)}`;\n      const requestDate = new Date();\n      const scheduledDate = new Date(requestDate.getTime() + (30 * 24 * 60 * 60 * 1000)); // 30 days from now\n\n      const deletionRequest: DataDeletionRequest = {\n        id: requestId,\n        userId,\n        requestDate: requestDate.toISOString(),\n        requestedBy,\n        reason,\n        status: 'pending',\n        scheduledDate: scheduledDate.toISOString(),\n        deletedData: [],\n        auditTrail: [],\n        partitionKey: userId\n      };\n\n      const container = this.database!.container(this.CONTAINERS.DELETION_REQUESTS);\n      await container.items.create(deletionRequest);\n\n      // Create audit log entry\n      await this.createAuditLogEntry({\n        userId,\n        action: 'data_deletion_requested',\n        details: {\n          requestId,\n          requestedBy,\n          reason,\n          scheduledDate: scheduledDate.toISOString()\n        },\n        ipAddress,\n        userAgent\n      });\n\n      console.log(`✅ Data deletion requested for user ${userId}, scheduled for ${scheduledDate.toDateString()}`);\n      return requestId;\n    } catch (error) {\n      console.error('❌ Failed to request data deletion:', error);\n      throw new Error('Failed to request data deletion');\n    }\n  }\n\n  /**\n   * Process data deletion (called by scheduled Azure Function)\n   */\n  async processDataDeletion(requestId: string): Promise<{ success: boolean; deletedData: string[]; errors: string[] }> {\n    if (!this.database) await this.initialize();\n\n    try {\n      const container = this.database!.container(this.CONTAINERS.DELETION_REQUESTS);\n      const { resource: request } = await container.item(requestId, requestId).read<DataDeletionRequest>();\n\n      if (!request) {\n        throw new Error('Deletion request not found');\n      }\n\n      if (request.status !== 'pending') {\n        throw new Error(`Cannot process request with status: ${request.status}`);\n      }\n\n      // Update status to processing\n      await container.item(requestId, request.partitionKey).patch([\n        { op: 'replace', path: '/status', value: 'processing' }\n      ]);\n\n      const deletedData: string[] = [];\n      const errors: string[] = [];\n\n      // Delete from Cosmos DB containers\n      const containersToDelete = [\n        'users',\n        'profiles', \n        'resumes',\n        'interviews',\n        'feedback',\n        'usage',\n        'notifications',\n        'emailVerifications'\n      ];\n\n      for (const containerName of containersToDelete) {\n        try {\n          const deleted = await this.deleteFromContainer(containerName, request.userId);\n          if (deleted > 0) {\n            deletedData.push(`${containerName} (${deleted} items)`);\n          }\n        } catch (error) {\n          const errorMsg = `Failed to delete from ${containerName}: ${error}`;\n          errors.push(errorMsg);\n          console.error(`❌ ${errorMsg}`);\n        }\n      }\n\n      // Delete from Azure Blob Storage\n      try {\n        const deletedBlobContainers = await this.deleteFromBlobStorage(request.userId);\n        if (deletedBlobContainers.length > 0) {\n          deletedData.push(`blob-storage (${deletedBlobContainers.join(', ')})`);\n        }\n      } catch (error) {\n        const errorMsg = `Failed to delete from blob storage: ${error}`;\n        errors.push(errorMsg);\n        console.error(`❌ ${errorMsg}`);\n      }\n\n      // Update request with results\n      const finalStatus = errors.length > 0 ? 'completed' : 'completed'; // Still completed even with some errors\n      await container.item(requestId, request.partitionKey).patch([\n        { op: 'replace', path: '/status', value: finalStatus },\n        { op: 'replace', path: '/completedDate', value: new Date().toISOString() },\n        { op: 'replace', path: '/deletedData', value: deletedData },\n        { op: 'replace', path: '/errors', value: errors }\n      ]);\n\n      // Create audit log entry\n      await this.createAuditLogEntry({\n        userId: request.userId,\n        action: 'data_deletion_processed',\n        details: {\n          requestId,\n          deletedData,\n          errors,\n          status: finalStatus\n        },\n        complianceOfficer: 'system'\n      });\n\n      console.log(`✅ Data deletion processed for user ${request.userId}`);\n      console.log(`   Deleted: ${deletedData.join(', ')}`);\n      if (errors.length > 0) {\n        console.log(`   Errors: ${errors.join(', ')}`);\n      }\n\n      return { success: errors.length === 0, deletedData, errors };\n    } catch (error) {\n      console.error('❌ Failed to process data deletion:', error);\n      \n      // Update request status to failed\n      try {\n        const container = this.database!.container(this.CONTAINERS.DELETION_REQUESTS);\n        await container.item(requestId, requestId).patch([\n          { op: 'replace', path: '/status', value: 'failed' },\n          { op: 'replace', path: '/errors', value: [error instanceof Error ? error.message : 'Unknown error'] }\n        ]);\n      } catch (updateError) {\n        console.error('❌ Failed to update request status to failed:', updateError);\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Get pending deletion requests that are ready for processing\n   */\n  async getPendingDeletions(): Promise<DataDeletionRequest[]> {\n    if (!this.database) await this.initialize();\n\n    try {\n      const container = this.database!.container(this.CONTAINERS.DELETION_REQUESTS);\n      const now = new Date().toISOString();\n      \n      const query = {\n        query: 'SELECT * FROM c WHERE c.status = @status AND c.scheduledDate <= @now',\n        parameters: [\n          { name: '@status', value: 'pending' },\n          { name: '@now', value: now }\n        ]\n      };\n\n      const { resources } = await container.items.query<DataDeletionRequest>(query).fetchAll();\n      return resources;\n    } catch (error) {\n      console.error('❌ Failed to get pending deletions:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get deletion request status\n   */\n  async getDeletionRequestStatus(requestId: string): Promise<DataDeletionRequest | null> {\n    if (!this.database) await this.initialize();\n\n    try {\n      const container = this.database!.container(this.CONTAINERS.DELETION_REQUESTS);\n      const { resource } = await container.item(requestId, requestId).read<DataDeletionRequest>();\n      return resource || null;\n    } catch (error: any) {\n      if (error.code === 404) {\n        return null; // Request not found\n      }\n      console.error('❌ Failed to get deletion request status:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Export user data (GDPR Subject Access Request)\n   */\n  async exportUserData(userId: string): Promise<any> {\n    if (!this.database) await this.initialize();\n\n    try {\n      const exportData: any = {\n        userId,\n        exportDate: new Date().toISOString(),\n        data: {}\n      };\n\n      // Export from Cosmos DB containers\n      const containersToExport = ['users', 'profiles', 'resumes', 'interviews', 'usage'];\n      \n      for (const containerName of containersToExport) {\n        try {\n          const containerClient = this.database!.container(containerName);\n          const query = {\n            query: 'SELECT * FROM c WHERE c.userId = @userId',\n            parameters: [{ name: '@userId', value: userId }]\n          };\n\n          const { resources } = await containerClient.items.query(query, {\n            partitionKey: userId\n          }).fetchAll();\n\n          if (resources.length > 0) {\n            exportData.data[containerName] = resources;\n          }\n        } catch (error) {\n          console.warn(`Failed to export from ${containerName}:`, error);\n        }\n      }\n\n      // Export consent data\n      const consent = await this.getConsent(userId);\n      if (consent) {\n        exportData.data.consents = consent;\n      }\n\n      // Export audit logs related to this user\n      const auditLogs = await this.getAuditLogs(userId);\n      if (auditLogs.length > 0) {\n        exportData.data.auditLogs = auditLogs;\n      }\n\n      // Create audit log entry for data export\n      await this.createAuditLogEntry({\n        userId,\n        action: 'data_exported',\n        details: {\n          exportedContainers: Object.keys(exportData.data),\n          totalRecords: Object.values(exportData.data).flat().length\n        }\n      });\n\n      console.log(`✅ User data exported for ${userId}`);\n      return exportData;\n    } catch (error) {\n      console.error('❌ Failed to export user data:', error);\n      throw new Error('Failed to export user data');\n    }\n  }\n\n  /**\n   * Create audit log entry\n   */\n  private async createAuditLogEntry(entry: Omit<AuditLogEntry, 'id' | 'timestamp' | 'partitionKey'>): Promise<void> {\n    if (!this.database) return;\n\n    try {\n      const auditEntry: AuditLogEntry = {\n        id: `audit_${Date.now()}_${Math.random().toString(36).substring(2)}`,\n        timestamp: new Date().toISOString(),\n        partitionKey: entry.userId,\n        ...entry\n      };\n\n      const container = this.database.container(this.CONTAINERS.AUDIT_LOG);\n      await container.items.create(auditEntry);\n    } catch (error) {\n      console.error('❌ Failed to create audit log entry:', error);\n      // Don't throw - audit logging failure shouldn't stop the main operation\n    }\n  }\n\n  /**\n   * Get audit logs for a user\n   */\n  async getAuditLogs(userId: string, limit: number = 100): Promise<AuditLogEntry[]> {\n    if (!this.database) await this.initialize();\n\n    try {\n      const container = this.database!.container(this.CONTAINERS.AUDIT_LOG);\n      const query = {\n        query: 'SELECT * FROM c WHERE c.userId = @userId ORDER BY c.timestamp DESC',\n        parameters: [{ name: '@userId', value: userId }]\n      };\n\n      const { resources } = await container.items.query<AuditLogEntry>(query, {\n        maxItemCount: limit,\n        partitionKey: userId\n      }).fetchNext();\n\n      return resources;\n    } catch (error) {\n      console.error('❌ Failed to get audit logs:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete user data from a specific Cosmos DB container\n   */\n  private async deleteFromContainer(containerName: string, userId: string): Promise<number> {\n    if (!this.database) return 0;\n\n    try {\n      const container = this.database.container(containerName);\n      const query = {\n        query: 'SELECT c.id FROM c WHERE c.userId = @userId',\n        parameters: [{ name: '@userId', value: userId }]\n      };\n\n      const { resources: items } = await container.items.query(query, {\n        partitionKey: userId\n      }).fetchAll();\n\n      let deletedCount = 0;\n      \n      // Delete in batches to avoid overwhelming the database\n      const batchSize = 25;\n      for (let i = 0; i < items.length; i += batchSize) {\n        const batch = items.slice(i, i + batchSize);\n        const deletePromises = batch.map(item => \n          container.item(item.id, userId).delete().catch(error => {\n            console.warn(`Failed to delete item ${item.id} from ${containerName}:`, error);\n            return null;\n          })\n        );\n        \n        const results = await Promise.all(deletePromises);\n        deletedCount += results.filter(result => result !== null).length;\n      }\n\n      return deletedCount;\n    } catch (error) {\n      console.error(`❌ Error deleting from container ${containerName}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete user files from Azure Blob Storage\n   */\n  private async deleteFromBlobStorage(userId: string): Promise<string[]> {\n    if (!this.blobServiceClient) return [];\n\n    const deletedContainers: string[] = [];\n    const userContainers = ['user-files', 'resumes', 'profile-pics', 'documents'];\n\n    for (const containerName of userContainers) {\n      try {\n        const containerClient = this.blobServiceClient.getContainerClient(containerName);\n        const prefix = `users/${userId}/`;\n        \n        let deletedBlobs = 0;\n        for await (const blob of containerClient.listBlobsFlat({ prefix })) {\n          try {\n            await containerClient.deleteBlob(blob.name);\n            deletedBlobs++;\n          } catch (error) {\n            console.warn(`Failed to delete blob ${blob.name}:`, error);\n          }\n        }\n\n        if (deletedBlobs > 0) {\n          deletedContainers.push(`${containerName} (${deletedBlobs} files)`);\n        }\n      } catch (error) {\n        console.warn(`Failed to access blob container ${containerName}:`, error);\n      }\n    }\n\n    return deletedContainers;\n  }\n\n  /**\n   * Anonymize analytics data for GDPR compliance\n   */\n  anonymizeAnalyticsData(data: {\n    userId: string;\n    sessionId: string;\n    event: string;\n    page: string;\n    metadata?: Record<string, any>;\n  }): AnonymizedAnalytics {\n    return {\n      id: `anon_${Date.now()}_${Math.random().toString(36).substring(2)}`,\n      timestamp: new Date().toISOString(),\n      event: data.event,\n      page: data.page,\n      userId: this.hashUserId(data.userId),\n      sessionId: this.hashSessionId(data.sessionId),\n      metadata: this.sanitizeMetadata(data.metadata || {}),\n      partitionKey: 'anonymized'\n    };\n  }\n\n  /**\n   * Privacy utility methods\n   */\n  maskEmail(email: string): string {\n    const [username, domain] = email.split('@');\n    const maskedUsername = username.length > 2 \n      ? username.charAt(0) + '*'.repeat(username.length - 2) + username.charAt(username.length - 1)\n      : '*'.repeat(username.length);\n    return `${maskedUsername}@${domain}`;\n  }\n\n  maskPhoneNumber(phone: string): string {\n    const cleaned = phone.replace(/\\D/g, '');\n    if (cleaned.length > 4) {\n      return cleaned.substring(0, 3) + '*'.repeat(cleaned.length - 6) + cleaned.substring(cleaned.length - 3);\n    }\n    return '*'.repeat(cleaned.length);\n  }\n\n  private hashUserId(userId: string): string {\n    return Buffer.from(userId + 'salt').toString('base64').substring(0, 12);\n  }\n\n  private hashSessionId(sessionId: string): string {\n    return Buffer.from(sessionId + 'salt').toString('base64').substring(0, 8);\n  }\n\n  private sanitizeMetadata(metadata: Record<string, any>): Record<string, any> {\n    const sanitized = { ...metadata };\n    \n    // Remove potential PII from metadata\n    const piiKeys = ['email', 'phone', 'name', 'address', 'ssn', 'creditCard', 'userId'];\n    piiKeys.forEach(key => {\n      if (sanitized[key]) {\n        delete sanitized[key];\n      }\n    });\n    \n    return sanitized;\n  }\n}\n\nexport const azureGDPRService = AzureGDPRService.getInstance();\n"],"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","ignoreList":[]}