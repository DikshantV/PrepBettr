bfd09220559cc65b0f2240741fd09e3d
"use strict";

/* istanbul ignore next */
function cov_2nlfpe6nzb() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/services/azure-gdpr-service.ts";
  var hash = "51bb2e51b367b8f8aace4777afb3e855aca76567";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/services/azure-gdpr-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 20
        },
        end: {
          line: 8,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 91
        }
      },
      "2": {
        start: {
          line: 3,
          column: 31
        },
        end: {
          line: 3,
          column: 91
        }
      },
      "3": {
        start: {
          line: 4,
          column: 12
        },
        end: {
          line: 4,
          column: 35
        }
      },
      "4": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 5,
          column: 213
        }
      },
      "5": {
        start: {
          line: 5,
          column: 194
        },
        end: {
          line: 5,
          column: 206
        }
      },
      "6": {
        start: {
          line: 6,
          column: 23
        },
        end: {
          line: 6,
          column: 162
        }
      },
      "7": {
        start: {
          line: 6,
          column: 53
        },
        end: {
          line: 6,
          column: 159
        }
      },
      "8": {
        start: {
          line: 6,
          column: 101
        },
        end: {
          line: 6,
          column: 155
        }
      },
      "9": {
        start: {
          line: 7,
          column: 45
        },
        end: {
          line: 7,
          column: 126
        }
      },
      "10": {
        start: {
          line: 7,
          column: 83
        },
        end: {
          line: 7,
          column: 114
        }
      },
      "11": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 62
        }
      },
      "12": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 10,
          column: 61
        }
      },
      "13": {
        start: {
          line: 11,
          column: 17
        },
        end: {
          line: 11,
          column: 41
        }
      },
      "14": {
        start: {
          line: 12,
          column: 23
        },
        end: {
          line: 12,
          column: 53
        }
      },
      "15": {
        start: {
          line: 13,
          column: 19
        },
        end: {
          line: 13,
          column: 45
        }
      },
      "16": {
        start: {
          line: 14,
          column: 27
        },
        end: {
          line: 14,
          column: 61
        }
      },
      "17": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 33
        }
      },
      "18": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 29
        }
      },
      "19": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "20": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 35
        }
      },
      "21": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 48
        }
      },
      "22": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 27,
          column: 10
        }
      },
      "23": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 32,
          column: 9
        }
      },
      "24": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 31,
          column: 63
        }
      },
      "25": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 41
        }
      },
      "26": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 53,
          column: 9
        }
      },
      "27": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 43,
          column: 13
        }
      },
      "28": {
        start: {
          line: 42,
          column: 16
        },
        end: {
          line: 42,
          column: 148
        }
      },
      "29": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 44
        }
      },
      "30": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 47
        }
      },
      "31": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 73
        }
      },
      "32": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 79
        }
      },
      "33": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 24
        }
      },
      "34": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "35": {
        start: {
          line: 57,
          column: 35
        },
        end: {
          line: 57,
          column: 77
        }
      },
      "36": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 67,
          column: 13
        }
      },
      "37": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 66,
          column: 17
        }
      },
      "38": {
        start: {
          line: 61,
          column: 35
        },
        end: {
          line: 61,
          column: 101
        }
      },
      "39": {
        start: {
          line: 62,
          column: 20
        },
        end: {
          line: 62,
          column: 52
        }
      },
      "40": {
        start: {
          line: 65,
          column: 20
        },
        end: {
          line: 65,
          column: 107
        }
      },
      "41": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 79,
          column: 13
        }
      },
      "42": {
        start: {
          line: 70,
          column: 33
        },
        end: {
          line: 70,
          column: 66
        }
      },
      "43": {
        start: {
          line: 71,
          column: 28
        },
        end: {
          line: 71,
          column: 56
        }
      },
      "44": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 74,
          column: 17
        }
      },
      "45": {
        start: {
          line: 73,
          column: 20
        },
        end: {
          line: 73,
          column: 169
        }
      },
      "46": {
        start: {
          line: 75,
          column: 16
        },
        end: {
          line: 75,
          column: 81
        }
      },
      "47": {
        start: {
          line: 78,
          column: 16
        },
        end: {
          line: 78,
          column: 80
        }
      },
      "48": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 80
        }
      },
      "49": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 42
        }
      },
      "50": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 68
        }
      },
      "51": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 70
        }
      },
      "52": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 24
        }
      },
      "53": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 113,
          column: 9
        }
      },
      "54": {
        start: {
          line: 93,
          column: 35
        },
        end: {
          line: 93,
          column: 78
        }
      },
      "55": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 103,
          column: 13
        }
      },
      "56": {
        start: {
          line: 96,
          column: 16
        },
        end: {
          line: 102,
          column: 17
        }
      },
      "57": {
        start: {
          line: 97,
          column: 35
        },
        end: {
          line: 97,
          column: 99
        }
      },
      "58": {
        start: {
          line: 98,
          column: 20
        },
        end: {
          line: 98,
          column: 52
        }
      },
      "59": {
        start: {
          line: 101,
          column: 20
        },
        end: {
          line: 101,
          column: 105
        }
      },
      "60": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 106,
          column: 13
        }
      },
      "61": {
        start: {
          line: 105,
          column: 16
        },
        end: {
          line: 105,
          column: 105
        }
      },
      "62": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 109
        }
      },
      "63": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 77
        }
      },
      "64": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 73
        }
      },
      "65": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 24
        }
      },
      "66": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 117,
          column: 56
        }
      },
      "67": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 56
        }
      },
      "68": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 129,
          column: 9
        }
      },
      "69": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 128,
          column: 13
        }
      },
      "70": {
        start: {
          line: 120,
          column: 16
        },
        end: {
          line: 123,
          column: 19
        }
      },
      "71": {
        start: {
          line: 124,
          column: 16
        },
        end: {
          line: 124,
          column: 64
        }
      },
      "72": {
        start: {
          line: 127,
          column: 16
        },
        end: {
          line: 127,
          column: 85
        }
      },
      "73": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 136,
          column: 36
        }
      },
      "74": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 36
        }
      },
      "75": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 161,
          column: 9
        }
      },
      "76": {
        start: {
          line: 138,
          column: 30
        },
        end: {
          line: 138,
          column: 71
        }
      },
      "77": {
        start: {
          line: 139,
          column: 34
        },
        end: {
          line: 139,
          column: 163
        }
      },
      "78": {
        start: {
          line: 140,
          column: 30
        },
        end: {
          line: 140,
          column: 79
        }
      },
      "79": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 56
        }
      },
      "80": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 154,
          column: 15
        }
      },
      "81": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 73
        }
      },
      "82": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 29
        }
      },
      "83": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 159,
          column: 64
        }
      },
      "84": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 160,
          column: 61
        }
      },
      "85": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 168,
          column: 36
        }
      },
      "86": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 168,
          column: 36
        }
      },
      "87": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 184,
          column: 9
        }
      },
      "88": {
        start: {
          line: 170,
          column: 30
        },
        end: {
          line: 170,
          column: 79
        }
      },
      "89": {
        start: {
          line: 171,
          column: 26
        },
        end: {
          line: 174,
          column: 13
        }
      },
      "90": {
        start: {
          line: 175,
          column: 34
        },
        end: {
          line: 178,
          column: 26
        }
      },
      "91": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 62
        }
      },
      "92": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 61
        }
      },
      "93": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 63
        }
      },
      "94": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 191,
          column: 36
        }
      },
      "95": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 36
        }
      },
      "96": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 211,
          column: 9
        }
      },
      "97": {
        start: {
          line: 193,
          column: 35
        },
        end: {
          line: 193,
          column: 64
        }
      },
      "98": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 196,
          column: 13
        }
      },
      "99": {
        start: {
          line: 195,
          column: 16
        },
        end: {
          line: 195,
          column: 70
        }
      },
      "100": {
        start: {
          line: 197,
          column: 35
        },
        end: {
          line: 197,
          column: 150
        }
      },
      "101": {
        start: {
          line: 198,
          column: 30
        },
        end: {
          line: 198,
          column: 79
        }
      },
      "102": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 199,
          column: 84
        }
      },
      "103": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 205,
          column: 15
        }
      },
      "104": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 206,
          column: 64
        }
      },
      "105": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 209,
          column: 64
        }
      },
      "106": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 61
        }
      },
      "107": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 218,
          column: 36
        }
      },
      "108": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 218,
          column: 36
        }
      },
      "109": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 256,
          column: 9
        }
      },
      "110": {
        start: {
          line: 220,
          column: 30
        },
        end: {
          line: 220,
          column: 92
        }
      },
      "111": {
        start: {
          line: 221,
          column: 32
        },
        end: {
          line: 221,
          column: 42
        }
      },
      "112": {
        start: {
          line: 222,
          column: 34
        },
        end: {
          line: 222,
          column: 94
        }
      },
      "113": {
        start: {
          line: 223,
          column: 36
        },
        end: {
          line: 234,
          column: 13
        }
      },
      "114": {
        start: {
          line: 235,
          column: 30
        },
        end: {
          line: 235,
          column: 88
        }
      },
      "115": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 236,
          column: 58
        }
      },
      "116": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 249,
          column: 15
        }
      },
      "117": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 119
        }
      },
      "118": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 251,
          column: 29
        }
      },
      "119": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 254,
          column: 71
        }
      },
      "120": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 255,
          column: 63
        }
      },
      "121": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 263,
          column: 36
        }
      },
      "122": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 36
        }
      },
      "123": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 356,
          column: 9
        }
      },
      "124": {
        start: {
          line: 265,
          column: 30
        },
        end: {
          line: 265,
          column: 88
        }
      },
      "125": {
        start: {
          line: 266,
          column: 42
        },
        end: {
          line: 266,
          column: 91
        }
      },
      "126": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 269,
          column: 13
        }
      },
      "127": {
        start: {
          line: 268,
          column: 16
        },
        end: {
          line: 268,
          column: 62
        }
      },
      "128": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 272,
          column: 13
        }
      },
      "129": {
        start: {
          line: 271,
          column: 16
        },
        end: {
          line: 271,
          column: 89
        }
      },
      "130": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 276,
          column: 15
        }
      },
      "131": {
        start: {
          line: 277,
          column: 32
        },
        end: {
          line: 277,
          column: 34
        }
      },
      "132": {
        start: {
          line: 278,
          column: 27
        },
        end: {
          line: 278,
          column: 29
        }
      },
      "133": {
        start: {
          line: 280,
          column: 39
        },
        end: {
          line: 289,
          column: 13
        }
      },
      "134": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 302,
          column: 13
        }
      },
      "135": {
        start: {
          line: 291,
          column: 16
        },
        end: {
          line: 301,
          column: 17
        }
      },
      "136": {
        start: {
          line: 292,
          column: 36
        },
        end: {
          line: 292,
          column: 97
        }
      },
      "137": {
        start: {
          line: 293,
          column: 20
        },
        end: {
          line: 295,
          column: 21
        }
      },
      "138": {
        start: {
          line: 294,
          column: 24
        },
        end: {
          line: 294,
          column: 80
        }
      },
      "139": {
        start: {
          line: 298,
          column: 37
        },
        end: {
          line: 298,
          column: 87
        }
      },
      "140": {
        start: {
          line: 299,
          column: 20
        },
        end: {
          line: 299,
          column: 42
        }
      },
      "141": {
        start: {
          line: 300,
          column: 20
        },
        end: {
          line: 300,
          column: 51
        }
      },
      "142": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 314,
          column: 13
        }
      },
      "143": {
        start: {
          line: 305,
          column: 46
        },
        end: {
          line: 305,
          column: 94
        }
      },
      "144": {
        start: {
          line: 306,
          column: 16
        },
        end: {
          line: 308,
          column: 17
        }
      },
      "145": {
        start: {
          line: 307,
          column: 20
        },
        end: {
          line: 307,
          column: 91
        }
      },
      "146": {
        start: {
          line: 311,
          column: 33
        },
        end: {
          line: 311,
          column: 79
        }
      },
      "147": {
        start: {
          line: 312,
          column: 16
        },
        end: {
          line: 312,
          column: 38
        }
      },
      "148": {
        start: {
          line: 313,
          column: 16
        },
        end: {
          line: 313,
          column: 47
        }
      },
      "149": {
        start: {
          line: 316,
          column: 32
        },
        end: {
          line: 316,
          column: 77
        }
      },
      "150": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 322,
          column: 15
        }
      },
      "151": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 334,
          column: 15
        }
      },
      "152": {
        start: {
          line: 335,
          column: 12
        },
        end: {
          line: 335,
          column: 80
        }
      },
      "153": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 336,
          column: 65
        }
      },
      "154": {
        start: {
          line: 337,
          column: 12
        },
        end: {
          line: 339,
          column: 13
        }
      },
      "155": {
        start: {
          line: 338,
          column: 16
        },
        end: {
          line: 338,
          column: 63
        }
      },
      "156": {
        start: {
          line: 340,
          column: 12
        },
        end: {
          line: 340,
          column: 73
        }
      },
      "157": {
        start: {
          line: 343,
          column: 12
        },
        end: {
          line: 343,
          column: 71
        }
      },
      "158": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 354,
          column: 13
        }
      },
      "159": {
        start: {
          line: 346,
          column: 34
        },
        end: {
          line: 346,
          column: 92
        }
      },
      "160": {
        start: {
          line: 347,
          column: 16
        },
        end: {
          line: 350,
          column: 19
        }
      },
      "161": {
        start: {
          line: 353,
          column: 16
        },
        end: {
          line: 353,
          column: 91
        }
      },
      "162": {
        start: {
          line: 355,
          column: 12
        },
        end: {
          line: 355,
          column: 24
        }
      },
      "163": {
        start: {
          line: 362,
          column: 8
        },
        end: {
          line: 363,
          column: 36
        }
      },
      "164": {
        start: {
          line: 363,
          column: 12
        },
        end: {
          line: 363,
          column: 36
        }
      },
      "165": {
        start: {
          line: 364,
          column: 8
        },
        end: {
          line: 380,
          column: 9
        }
      },
      "166": {
        start: {
          line: 365,
          column: 30
        },
        end: {
          line: 365,
          column: 88
        }
      },
      "167": {
        start: {
          line: 366,
          column: 24
        },
        end: {
          line: 366,
          column: 48
        }
      },
      "168": {
        start: {
          line: 367,
          column: 26
        },
        end: {
          line: 373,
          column: 13
        }
      },
      "169": {
        start: {
          line: 374,
          column: 34
        },
        end: {
          line: 374,
          column: 79
        }
      },
      "170": {
        start: {
          line: 375,
          column: 12
        },
        end: {
          line: 375,
          column: 29
        }
      },
      "171": {
        start: {
          line: 378,
          column: 12
        },
        end: {
          line: 378,
          column: 71
        }
      },
      "172": {
        start: {
          line: 379,
          column: 12
        },
        end: {
          line: 379,
          column: 24
        }
      },
      "173": {
        start: {
          line: 386,
          column: 8
        },
        end: {
          line: 387,
          column: 36
        }
      },
      "174": {
        start: {
          line: 387,
          column: 12
        },
        end: {
          line: 387,
          column: 36
        }
      },
      "175": {
        start: {
          line: 388,
          column: 8
        },
        end: {
          line: 399,
          column: 9
        }
      },
      "176": {
        start: {
          line: 389,
          column: 30
        },
        end: {
          line: 389,
          column: 88
        }
      },
      "177": {
        start: {
          line: 390,
          column: 33
        },
        end: {
          line: 390,
          column: 82
        }
      },
      "178": {
        start: {
          line: 391,
          column: 12
        },
        end: {
          line: 391,
          column: 36
        }
      },
      "179": {
        start: {
          line: 394,
          column: 12
        },
        end: {
          line: 396,
          column: 13
        }
      },
      "180": {
        start: {
          line: 395,
          column: 16
        },
        end: {
          line: 395,
          column: 28
        }
      },
      "181": {
        start: {
          line: 397,
          column: 12
        },
        end: {
          line: 397,
          column: 77
        }
      },
      "182": {
        start: {
          line: 398,
          column: 12
        },
        end: {
          line: 398,
          column: 24
        }
      },
      "183": {
        start: {
          line: 405,
          column: 8
        },
        end: {
          line: 406,
          column: 36
        }
      },
      "184": {
        start: {
          line: 406,
          column: 12
        },
        end: {
          line: 406,
          column: 36
        }
      },
      "185": {
        start: {
          line: 407,
          column: 8
        },
        end: {
          line: 458,
          column: 9
        }
      },
      "186": {
        start: {
          line: 408,
          column: 31
        },
        end: {
          line: 412,
          column: 13
        }
      },
      "187": {
        start: {
          line: 414,
          column: 39
        },
        end: {
          line: 414,
          column: 94
        }
      },
      "188": {
        start: {
          line: 415,
          column: 12
        },
        end: {
          line: 432,
          column: 13
        }
      },
      "189": {
        start: {
          line: 416,
          column: 16
        },
        end: {
          line: 431,
          column: 17
        }
      },
      "190": {
        start: {
          line: 417,
          column: 44
        },
        end: {
          line: 417,
          column: 82
        }
      },
      "191": {
        start: {
          line: 418,
          column: 34
        },
        end: {
          line: 421,
          column: 21
        }
      },
      "192": {
        start: {
          line: 422,
          column: 42
        },
        end: {
          line: 424,
          column: 33
        }
      },
      "193": {
        start: {
          line: 425,
          column: 20
        },
        end: {
          line: 427,
          column: 21
        }
      },
      "194": {
        start: {
          line: 426,
          column: 24
        },
        end: {
          line: 426,
          column: 67
        }
      },
      "195": {
        start: {
          line: 430,
          column: 20
        },
        end: {
          line: 430,
          column: 83
        }
      },
      "196": {
        start: {
          line: 434,
          column: 28
        },
        end: {
          line: 434,
          column: 57
        }
      },
      "197": {
        start: {
          line: 435,
          column: 12
        },
        end: {
          line: 437,
          column: 13
        }
      },
      "198": {
        start: {
          line: 436,
          column: 16
        },
        end: {
          line: 436,
          column: 51
        }
      },
      "199": {
        start: {
          line: 439,
          column: 30
        },
        end: {
          line: 439,
          column: 61
        }
      },
      "200": {
        start: {
          line: 440,
          column: 12
        },
        end: {
          line: 442,
          column: 13
        }
      },
      "201": {
        start: {
          line: 441,
          column: 16
        },
        end: {
          line: 441,
          column: 54
        }
      },
      "202": {
        start: {
          line: 444,
          column: 12
        },
        end: {
          line: 451,
          column: 15
        }
      },
      "203": {
        start: {
          line: 452,
          column: 12
        },
        end: {
          line: 452,
          column: 62
        }
      },
      "204": {
        start: {
          line: 453,
          column: 12
        },
        end: {
          line: 453,
          column: 30
        }
      },
      "205": {
        start: {
          line: 456,
          column: 12
        },
        end: {
          line: 456,
          column: 66
        }
      },
      "206": {
        start: {
          line: 457,
          column: 12
        },
        end: {
          line: 457,
          column: 58
        }
      },
      "207": {
        start: {
          line: 464,
          column: 8
        },
        end: {
          line: 465,
          column: 19
        }
      },
      "208": {
        start: {
          line: 465,
          column: 12
        },
        end: {
          line: 465,
          column: 19
        }
      },
      "209": {
        start: {
          line: 466,
          column: 8
        },
        end: {
          line: 474,
          column: 9
        }
      },
      "210": {
        start: {
          line: 467,
          column: 31
        },
        end: {
          line: 467,
          column: 190
        }
      },
      "211": {
        start: {
          line: 468,
          column: 30
        },
        end: {
          line: 468,
          column: 80
        }
      },
      "212": {
        start: {
          line: 469,
          column: 12
        },
        end: {
          line: 469,
          column: 53
        }
      },
      "213": {
        start: {
          line: 472,
          column: 12
        },
        end: {
          line: 472,
          column: 72
        }
      },
      "214": {
        start: {
          line: 480,
          column: 8
        },
        end: {
          line: 481,
          column: 36
        }
      },
      "215": {
        start: {
          line: 481,
          column: 12
        },
        end: {
          line: 481,
          column: 36
        }
      },
      "216": {
        start: {
          line: 482,
          column: 8
        },
        end: {
          line: 497,
          column: 9
        }
      },
      "217": {
        start: {
          line: 483,
          column: 30
        },
        end: {
          line: 483,
          column: 80
        }
      },
      "218": {
        start: {
          line: 484,
          column: 26
        },
        end: {
          line: 487,
          column: 13
        }
      },
      "219": {
        start: {
          line: 488,
          column: 34
        },
        end: {
          line: 491,
          column: 26
        }
      },
      "220": {
        start: {
          line: 492,
          column: 12
        },
        end: {
          line: 492,
          column: 29
        }
      },
      "221": {
        start: {
          line: 495,
          column: 12
        },
        end: {
          line: 495,
          column: 64
        }
      },
      "222": {
        start: {
          line: 496,
          column: 12
        },
        end: {
          line: 496,
          column: 24
        }
      },
      "223": {
        start: {
          line: 503,
          column: 8
        },
        end: {
          line: 504,
          column: 21
        }
      },
      "224": {
        start: {
          line: 504,
          column: 12
        },
        end: {
          line: 504,
          column: 21
        }
      },
      "225": {
        start: {
          line: 505,
          column: 8
        },
        end: {
          line: 531,
          column: 9
        }
      },
      "226": {
        start: {
          line: 506,
          column: 30
        },
        end: {
          line: 506,
          column: 68
        }
      },
      "227": {
        start: {
          line: 507,
          column: 26
        },
        end: {
          line: 510,
          column: 13
        }
      },
      "228": {
        start: {
          line: 511,
          column: 41
        },
        end: {
          line: 513,
          column: 25
        }
      },
      "229": {
        start: {
          line: 514,
          column: 31
        },
        end: {
          line: 514,
          column: 32
        }
      },
      "230": {
        start: {
          line: 516,
          column: 30
        },
        end: {
          line: 516,
          column: 32
        }
      },
      "231": {
        start: {
          line: 517,
          column: 12
        },
        end: {
          line: 525,
          column: 13
        }
      },
      "232": {
        start: {
          line: 517,
          column: 25
        },
        end: {
          line: 517,
          column: 26
        }
      },
      "233": {
        start: {
          line: 518,
          column: 30
        },
        end: {
          line: 518,
          column: 59
        }
      },
      "234": {
        start: {
          line: 519,
          column: 39
        },
        end: {
          line: 522,
          column: 19
        }
      },
      "235": {
        start: {
          line: 519,
          column: 57
        },
        end: {
          line: 522,
          column: 18
        }
      },
      "236": {
        start: {
          line: 520,
          column: 20
        },
        end: {
          line: 520,
          column: 99
        }
      },
      "237": {
        start: {
          line: 521,
          column: 20
        },
        end: {
          line: 521,
          column: 32
        }
      },
      "238": {
        start: {
          line: 523,
          column: 32
        },
        end: {
          line: 523,
          column: 65
        }
      },
      "239": {
        start: {
          line: 524,
          column: 16
        },
        end: {
          line: 524,
          column: 81
        }
      },
      "240": {
        start: {
          line: 524,
          column: 57
        },
        end: {
          line: 524,
          column: 72
        }
      },
      "241": {
        start: {
          line: 526,
          column: 12
        },
        end: {
          line: 526,
          column: 32
        }
      },
      "242": {
        start: {
          line: 529,
          column: 12
        },
        end: {
          line: 529,
          column: 86
        }
      },
      "243": {
        start: {
          line: 530,
          column: 12
        },
        end: {
          line: 530,
          column: 24
        }
      },
      "244": {
        start: {
          line: 538,
          column: 8
        },
        end: {
          line: 539,
          column: 22
        }
      },
      "245": {
        start: {
          line: 539,
          column: 12
        },
        end: {
          line: 539,
          column: 22
        }
      },
      "246": {
        start: {
          line: 540,
          column: 34
        },
        end: {
          line: 540,
          column: 36
        }
      },
      "247": {
        start: {
          line: 541,
          column: 31
        },
        end: {
          line: 541,
          column: 85
        }
      },
      "248": {
        start: {
          line: 542,
          column: 8
        },
        end: {
          line: 575,
          column: 9
        }
      },
      "249": {
        start: {
          line: 543,
          column: 12
        },
        end: {
          line: 574,
          column: 13
        }
      },
      "250": {
        start: {
          line: 544,
          column: 40
        },
        end: {
          line: 544,
          column: 96
        }
      },
      "251": {
        start: {
          line: 545,
          column: 31
        },
        end: {
          line: 545,
          column: 49
        }
      },
      "252": {
        start: {
          line: 546,
          column: 35
        },
        end: {
          line: 546,
          column: 36
        }
      },
      "253": {
        start: {
          line: 547,
          column: 16
        },
        end: {
          line: 567,
          column: 17
        }
      },
      "254": {
        start: {
          line: 548,
          column: 20
        },
        end: {
          line: 559,
          column: 21
        }
      },
      "255": {
        start: {
          line: 548,
          column: 34
        },
        end: {
          line: 548,
          column: 38
        }
      },
      "256": {
        start: {
          line: 548,
          column: 46
        },
        end: {
          line: 548,
          column: 116
        }
      },
      "257": {
        start: {
          line: 549,
          column: 24
        },
        end: {
          line: 549,
          column: 38
        }
      },
      "258": {
        start: {
          line: 550,
          column: 24
        },
        end: {
          line: 550,
          column: 35
        }
      },
      "259": {
        start: {
          line: 551,
          column: 37
        },
        end: {
          line: 551,
          column: 39
        }
      },
      "260": {
        start: {
          line: 552,
          column: 24
        },
        end: {
          line: 558,
          column: 25
        }
      },
      "261": {
        start: {
          line: 553,
          column: 28
        },
        end: {
          line: 553,
          column: 72
        }
      },
      "262": {
        start: {
          line: 554,
          column: 28
        },
        end: {
          line: 554,
          column: 43
        }
      },
      "263": {
        start: {
          line: 557,
          column: 28
        },
        end: {
          line: 557,
          column: 87
        }
      },
      "264": {
        start: {
          line: 561,
          column: 32
        },
        end: {
          line: 561,
          column: 55
        }
      },
      "265": {
        start: {
          line: 563,
          column: 20
        },
        end: {
          line: 566,
          column: 57
        }
      },
      "266": {
        start: {
          line: 564,
          column: 24
        },
        end: {
          line: 564,
          column: 78
        }
      },
      "267": {
        start: {
          line: 564,
          column: 60
        },
        end: {
          line: 564,
          column: 78
        }
      },
      "268": {
        start: {
          line: 566,
          column: 30
        },
        end: {
          line: 566,
          column: 55
        }
      },
      "269": {
        start: {
          line: 566,
          column: 39
        },
        end: {
          line: 566,
          column: 55
        }
      },
      "270": {
        start: {
          line: 568,
          column: 16
        },
        end: {
          line: 570,
          column: 17
        }
      },
      "271": {
        start: {
          line: 569,
          column: 20
        },
        end: {
          line: 569,
          column: 87
        }
      },
      "272": {
        start: {
          line: 573,
          column: 16
        },
        end: {
          line: 573,
          column: 89
        }
      },
      "273": {
        start: {
          line: 576,
          column: 8
        },
        end: {
          line: 576,
          column: 33
        }
      },
      "274": {
        start: {
          line: 582,
          column: 8
        },
        end: {
          line: 591,
          column: 10
        }
      },
      "275": {
        start: {
          line: 597,
          column: 35
        },
        end: {
          line: 597,
          column: 51
        }
      },
      "276": {
        start: {
          line: 598,
          column: 31
        },
        end: {
          line: 600,
          column: 41
        }
      },
      "277": {
        start: {
          line: 601,
          column: 8
        },
        end: {
          line: 601,
          column: 45
        }
      },
      "278": {
        start: {
          line: 604,
          column: 24
        },
        end: {
          line: 604,
          column: 48
        }
      },
      "279": {
        start: {
          line: 605,
          column: 8
        },
        end: {
          line: 607,
          column: 9
        }
      },
      "280": {
        start: {
          line: 606,
          column: 12
        },
        end: {
          line: 606,
          column: 116
        }
      },
      "281": {
        start: {
          line: 608,
          column: 8
        },
        end: {
          line: 608,
          column: 42
        }
      },
      "282": {
        start: {
          line: 611,
          column: 8
        },
        end: {
          line: 611,
          column: 80
        }
      },
      "283": {
        start: {
          line: 614,
          column: 8
        },
        end: {
          line: 614,
          column: 82
        }
      },
      "284": {
        start: {
          line: 617,
          column: 26
        },
        end: {
          line: 617,
          column: 53
        }
      },
      "285": {
        start: {
          line: 619,
          column: 24
        },
        end: {
          line: 619,
          column: 92
        }
      },
      "286": {
        start: {
          line: 620,
          column: 8
        },
        end: {
          line: 624,
          column: 11
        }
      },
      "287": {
        start: {
          line: 621,
          column: 12
        },
        end: {
          line: 623,
          column: 13
        }
      },
      "288": {
        start: {
          line: 622,
          column: 16
        },
        end: {
          line: 622,
          column: 38
        }
      },
      "289": {
        start: {
          line: 625,
          column: 8
        },
        end: {
          line: 625,
          column: 25
        }
      },
      "290": {
        start: {
          line: 628,
          column: 0
        },
        end: {
          line: 628,
          column: 44
        }
      },
      "291": {
        start: {
          line: 629,
          column: 0
        },
        end: {
          line: 629,
          column: 58
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 52
          },
          end: {
            line: 2,
            column: 53
          }
        },
        loc: {
          start: {
            line: 2,
            column: 65
          },
          end: {
            line: 8,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 5,
            column: 180
          },
          end: {
            line: 5,
            column: 181
          }
        },
        loc: {
          start: {
            line: 5,
            column: 192
          },
          end: {
            line: 5,
            column: 208
          }
        },
        line: 5
      },
      "2": {
        name: "verb",
        decl: {
          start: {
            line: 6,
            column: 13
          },
          end: {
            line: 6,
            column: 17
          }
        },
        loc: {
          start: {
            line: 6,
            column: 21
          },
          end: {
            line: 6,
            column: 164
          }
        },
        line: 6
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 39
          }
        },
        loc: {
          start: {
            line: 6,
            column: 51
          },
          end: {
            line: 6,
            column: 161
          }
        },
        line: 6
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 6,
            column: 72
          },
          end: {
            line: 6,
            column: 73
          }
        },
        loc: {
          start: {
            line: 6,
            column: 99
          },
          end: {
            line: 6,
            column: 157
          }
        },
        line: 6
      },
      "5": {
        name: "settle",
        decl: {
          start: {
            line: 7,
            column: 13
          },
          end: {
            line: 7,
            column: 19
          }
        },
        loc: {
          start: {
            line: 7,
            column: 43
          },
          end: {
            line: 7,
            column: 128
          }
        },
        line: 7
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 7,
            column: 69
          },
          end: {
            line: 7,
            column: 70
          }
        },
        loc: {
          start: {
            line: 7,
            column: 81
          },
          end: {
            line: 7,
            column: 116
          }
        },
        line: 7
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 18
          },
          end: {
            line: 28,
            column: 5
          }
        },
        line: 16
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        loc: {
          start: {
            line: 29,
            column: 25
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 29
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        loc: {
          start: {
            line: 38,
            column: 23
          },
          end: {
            line: 54,
            column: 5
          }
        },
        line: 38
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 55,
            column: 5
          }
        },
        loc: {
          start: {
            line: 55,
            column: 31
          },
          end: {
            line: 90,
            column: 5
          }
        },
        line: 55
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 91,
            column: 5
          }
        },
        loc: {
          start: {
            line: 91,
            column: 34
          },
          end: {
            line: 114,
            column: 5
          }
        },
        line: 91
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 115,
            column: 4
          },
          end: {
            line: 115,
            column: 5
          }
        },
        loc: {
          start: {
            line: 115,
            column: 29
          },
          end: {
            line: 130,
            column: 5
          }
        },
        line: 115
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        },
        loc: {
          start: {
            line: 134,
            column: 33
          },
          end: {
            line: 162,
            column: 5
          }
        },
        line: 134
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 166,
            column: 4
          },
          end: {
            line: 166,
            column: 5
          }
        },
        loc: {
          start: {
            line: 166,
            column: 29
          },
          end: {
            line: 185,
            column: 5
          }
        },
        line: 166
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 189,
            column: 4
          },
          end: {
            line: 189,
            column: 5
          }
        },
        loc: {
          start: {
            line: 189,
            column: 41
          },
          end: {
            line: 212,
            column: 5
          }
        },
        line: 189
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 216,
            column: 4
          },
          end: {
            line: 216,
            column: 5
          }
        },
        loc: {
          start: {
            line: 216,
            column: 81
          },
          end: {
            line: 257,
            column: 5
          }
        },
        line: 216
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 261,
            column: 4
          },
          end: {
            line: 261,
            column: 5
          }
        },
        loc: {
          start: {
            line: 261,
            column: 41
          },
          end: {
            line: 357,
            column: 5
          }
        },
        line: 261
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 361,
            column: 4
          },
          end: {
            line: 361,
            column: 5
          }
        },
        loc: {
          start: {
            line: 361,
            column: 32
          },
          end: {
            line: 381,
            column: 5
          }
        },
        line: 361
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 385,
            column: 4
          },
          end: {
            line: 385,
            column: 5
          }
        },
        loc: {
          start: {
            line: 385,
            column: 46
          },
          end: {
            line: 400,
            column: 5
          }
        },
        line: 385
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 404,
            column: 4
          },
          end: {
            line: 404,
            column: 5
          }
        },
        loc: {
          start: {
            line: 404,
            column: 33
          },
          end: {
            line: 459,
            column: 5
          }
        },
        line: 404
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 463,
            column: 4
          },
          end: {
            line: 463,
            column: 5
          }
        },
        loc: {
          start: {
            line: 463,
            column: 37
          },
          end: {
            line: 475,
            column: 5
          }
        },
        line: 463
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 479,
            column: 4
          },
          end: {
            line: 479,
            column: 5
          }
        },
        loc: {
          start: {
            line: 479,
            column: 44
          },
          end: {
            line: 498,
            column: 5
          }
        },
        line: 479
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 502,
            column: 4
          },
          end: {
            line: 502,
            column: 5
          }
        },
        loc: {
          start: {
            line: 502,
            column: 53
          },
          end: {
            line: 532,
            column: 5
          }
        },
        line: 502
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 519,
            column: 49
          },
          end: {
            line: 519,
            column: 50
          }
        },
        loc: {
          start: {
            line: 519,
            column: 57
          },
          end: {
            line: 522,
            column: 18
          }
        },
        line: 519
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 519,
            column: 104
          },
          end: {
            line: 519,
            column: 105
          }
        },
        loc: {
          start: {
            line: 519,
            column: 113
          },
          end: {
            line: 522,
            column: 17
          }
        },
        line: 519
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 524,
            column: 47
          },
          end: {
            line: 524,
            column: 48
          }
        },
        loc: {
          start: {
            line: 524,
            column: 57
          },
          end: {
            line: 524,
            column: 72
          }
        },
        line: 524
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 536,
            column: 4
          },
          end: {
            line: 536,
            column: 5
          }
        },
        loc: {
          start: {
            line: 536,
            column: 40
          },
          end: {
            line: 577,
            column: 5
          }
        },
        line: 536
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 581,
            column: 4
          },
          end: {
            line: 581,
            column: 5
          }
        },
        loc: {
          start: {
            line: 581,
            column: 33
          },
          end: {
            line: 592,
            column: 5
          }
        },
        line: 581
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 596,
            column: 4
          },
          end: {
            line: 596,
            column: 5
          }
        },
        loc: {
          start: {
            line: 596,
            column: 21
          },
          end: {
            line: 602,
            column: 5
          }
        },
        line: 596
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 603,
            column: 4
          },
          end: {
            line: 603,
            column: 5
          }
        },
        loc: {
          start: {
            line: 603,
            column: 27
          },
          end: {
            line: 609,
            column: 5
          }
        },
        line: 603
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 610,
            column: 4
          },
          end: {
            line: 610,
            column: 5
          }
        },
        loc: {
          start: {
            line: 610,
            column: 23
          },
          end: {
            line: 612,
            column: 5
          }
        },
        line: 610
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 613,
            column: 4
          },
          end: {
            line: 613,
            column: 5
          }
        },
        loc: {
          start: {
            line: 613,
            column: 29
          },
          end: {
            line: 615,
            column: 5
          }
        },
        line: 613
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 616,
            column: 4
          },
          end: {
            line: 616,
            column: 5
          }
        },
        loc: {
          start: {
            line: 616,
            column: 31
          },
          end: {
            line: 626,
            column: 5
          }
        },
        line: 616
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 620,
            column: 24
          },
          end: {
            line: 620,
            column: 25
          }
        },
        loc: {
          start: {
            line: 620,
            column: 31
          },
          end: {
            line: 624,
            column: 9
          }
        },
        line: 620
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 20
          },
          end: {
            line: 8,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 21
          },
          end: {
            line: 2,
            column: 25
          }
        }, {
          start: {
            line: 2,
            column: 29
          },
          end: {
            line: 2,
            column: 47
          }
        }, {
          start: {
            line: 2,
            column: 52
          },
          end: {
            line: 8,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 91
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 91
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 5,
            column: 11
          },
          end: {
            line: 5,
            column: 212
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 15
          },
          end: {
            line: 5,
            column: 24
          }
        }, {
          start: {
            line: 5,
            column: 28
          },
          end: {
            line: 5,
            column: 211
          }
        }],
        line: 5
      },
      "3": {
        loc: {
          start: {
            line: 5,
            column: 32
          },
          end: {
            line: 5,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 65
          },
          end: {
            line: 5,
            column: 76
          }
        }, {
          start: {
            line: 5,
            column: 79
          },
          end: {
            line: 5,
            column: 99
          }
        }],
        line: 5
      },
      "4": {
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 6,
            column: 161
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 6,
            column: 34
          }
        }, {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 161
          }
        }],
        line: 6
      },
      "5": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "6": {
        loc: {
          start: {
            line: 41,
            column: 12
          },
          end: {
            line: 43,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 12
          },
          end: {
            line: 43,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "7": {
        loc: {
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "8": {
        loc: {
          start: {
            line: 59,
            column: 16
          },
          end: {
            line: 59,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 59,
            column: 16
          },
          end: {
            line: 59,
            column: 33
          }
        }, {
          start: {
            line: 59,
            column: 37
          },
          end: {
            line: 59,
            column: 56
          }
        }],
        line: 59
      },
      "9": {
        loc: {
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 79,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 79,
            column: 13
          }
        }, {
          start: {
            line: 77,
            column: 17
          },
          end: {
            line: 79,
            column: 13
          }
        }],
        line: 69
      },
      "10": {
        loc: {
          start: {
            line: 72,
            column: 16
          },
          end: {
            line: 74,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 16
          },
          end: {
            line: 74,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "11": {
        loc: {
          start: {
            line: 72,
            column: 20
          },
          end: {
            line: 72,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 72,
            column: 20
          },
          end: {
            line: 72,
            column: 29
          }
        }, {
          start: {
            line: 72,
            column: 33
          },
          end: {
            line: 72,
            column: 37
          }
        }],
        line: 72
      },
      "12": {
        loc: {
          start: {
            line: 95,
            column: 12
          },
          end: {
            line: 103,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 12
          },
          end: {
            line: 103,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "13": {
        loc: {
          start: {
            line: 95,
            column: 16
          },
          end: {
            line: 95,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 95,
            column: 16
          },
          end: {
            line: 95,
            column: 33
          }
        }, {
          start: {
            line: 95,
            column: 37
          },
          end: {
            line: 95,
            column: 56
          }
        }],
        line: 95
      },
      "14": {
        loc: {
          start: {
            line: 104,
            column: 12
          },
          end: {
            line: 106,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 12
          },
          end: {
            line: 106,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "15": {
        loc: {
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 117,
            column: 56
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 117,
            column: 56
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "16": {
        loc: {
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 136,
            column: 36
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 136,
            column: 36
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "17": {
        loc: {
          start: {
            line: 167,
            column: 8
          },
          end: {
            line: 168,
            column: 36
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 167,
            column: 8
          },
          end: {
            line: 168,
            column: 36
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 167
      },
      "18": {
        loc: {
          start: {
            line: 179,
            column: 19
          },
          end: {
            line: 179,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 179,
            column: 42
          },
          end: {
            line: 179,
            column: 54
          }
        }, {
          start: {
            line: 179,
            column: 57
          },
          end: {
            line: 179,
            column: 61
          }
        }],
        line: 179
      },
      "19": {
        loc: {
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 191,
            column: 36
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 191,
            column: 36
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 190
      },
      "20": {
        loc: {
          start: {
            line: 194,
            column: 12
          },
          end: {
            line: 196,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 12
          },
          end: {
            line: 196,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "21": {
        loc: {
          start: {
            line: 217,
            column: 8
          },
          end: {
            line: 218,
            column: 36
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 217,
            column: 8
          },
          end: {
            line: 218,
            column: 36
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 217
      },
      "22": {
        loc: {
          start: {
            line: 262,
            column: 8
          },
          end: {
            line: 263,
            column: 36
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 262,
            column: 8
          },
          end: {
            line: 263,
            column: 36
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 262
      },
      "23": {
        loc: {
          start: {
            line: 267,
            column: 12
          },
          end: {
            line: 269,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 267,
            column: 12
          },
          end: {
            line: 269,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 267
      },
      "24": {
        loc: {
          start: {
            line: 270,
            column: 12
          },
          end: {
            line: 272,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 270,
            column: 12
          },
          end: {
            line: 272,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 270
      },
      "25": {
        loc: {
          start: {
            line: 293,
            column: 20
          },
          end: {
            line: 295,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 293,
            column: 20
          },
          end: {
            line: 295,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 293
      },
      "26": {
        loc: {
          start: {
            line: 306,
            column: 16
          },
          end: {
            line: 308,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 306,
            column: 16
          },
          end: {
            line: 308,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 306
      },
      "27": {
        loc: {
          start: {
            line: 316,
            column: 32
          },
          end: {
            line: 316,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 316,
            column: 52
          },
          end: {
            line: 316,
            column: 63
          }
        }, {
          start: {
            line: 316,
            column: 66
          },
          end: {
            line: 316,
            column: 77
          }
        }],
        line: 316
      },
      "28": {
        loc: {
          start: {
            line: 337,
            column: 12
          },
          end: {
            line: 339,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 337,
            column: 12
          },
          end: {
            line: 339,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 337
      },
      "29": {
        loc: {
          start: {
            line: 349,
            column: 62
          },
          end: {
            line: 349,
            column: 118
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 349,
            column: 87
          },
          end: {
            line: 349,
            column: 100
          }
        }, {
          start: {
            line: 349,
            column: 103
          },
          end: {
            line: 349,
            column: 118
          }
        }],
        line: 349
      },
      "30": {
        loc: {
          start: {
            line: 362,
            column: 8
          },
          end: {
            line: 363,
            column: 36
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 362,
            column: 8
          },
          end: {
            line: 363,
            column: 36
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 362
      },
      "31": {
        loc: {
          start: {
            line: 386,
            column: 8
          },
          end: {
            line: 387,
            column: 36
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 386,
            column: 8
          },
          end: {
            line: 387,
            column: 36
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 386
      },
      "32": {
        loc: {
          start: {
            line: 391,
            column: 19
          },
          end: {
            line: 391,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 391,
            column: 19
          },
          end: {
            line: 391,
            column: 27
          }
        }, {
          start: {
            line: 391,
            column: 31
          },
          end: {
            line: 391,
            column: 35
          }
        }],
        line: 391
      },
      "33": {
        loc: {
          start: {
            line: 394,
            column: 12
          },
          end: {
            line: 396,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 394,
            column: 12
          },
          end: {
            line: 396,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 394
      },
      "34": {
        loc: {
          start: {
            line: 405,
            column: 8
          },
          end: {
            line: 406,
            column: 36
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 405,
            column: 8
          },
          end: {
            line: 406,
            column: 36
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 405
      },
      "35": {
        loc: {
          start: {
            line: 425,
            column: 20
          },
          end: {
            line: 427,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 425,
            column: 20
          },
          end: {
            line: 427,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 425
      },
      "36": {
        loc: {
          start: {
            line: 435,
            column: 12
          },
          end: {
            line: 437,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 435,
            column: 12
          },
          end: {
            line: 437,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 435
      },
      "37": {
        loc: {
          start: {
            line: 440,
            column: 12
          },
          end: {
            line: 442,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 440,
            column: 12
          },
          end: {
            line: 442,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 440
      },
      "38": {
        loc: {
          start: {
            line: 464,
            column: 8
          },
          end: {
            line: 465,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 464,
            column: 8
          },
          end: {
            line: 465,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 464
      },
      "39": {
        loc: {
          start: {
            line: 479,
            column: 31
          },
          end: {
            line: 479,
            column: 42
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 479,
            column: 39
          },
          end: {
            line: 479,
            column: 42
          }
        }],
        line: 479
      },
      "40": {
        loc: {
          start: {
            line: 480,
            column: 8
          },
          end: {
            line: 481,
            column: 36
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 480,
            column: 8
          },
          end: {
            line: 481,
            column: 36
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 480
      },
      "41": {
        loc: {
          start: {
            line: 503,
            column: 8
          },
          end: {
            line: 504,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 503,
            column: 8
          },
          end: {
            line: 504,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 503
      },
      "42": {
        loc: {
          start: {
            line: 538,
            column: 8
          },
          end: {
            line: 539,
            column: 22
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 538,
            column: 8
          },
          end: {
            line: 539,
            column: 22
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 538
      },
      "43": {
        loc: {
          start: {
            line: 564,
            column: 24
          },
          end: {
            line: 564,
            column: 78
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 564,
            column: 24
          },
          end: {
            line: 564,
            column: 78
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 564
      },
      "44": {
        loc: {
          start: {
            line: 564,
            column: 28
          },
          end: {
            line: 564,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 564,
            column: 28
          },
          end: {
            line: 564,
            column: 31
          }
        }, {
          start: {
            line: 564,
            column: 35
          },
          end: {
            line: 564,
            column: 38
          }
        }, {
          start: {
            line: 564,
            column: 43
          },
          end: {
            line: 564,
            column: 57
          }
        }],
        line: 564
      },
      "45": {
        loc: {
          start: {
            line: 566,
            column: 30
          },
          end: {
            line: 566,
            column: 55
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 566,
            column: 30
          },
          end: {
            line: 566,
            column: 55
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 566
      },
      "46": {
        loc: {
          start: {
            line: 568,
            column: 16
          },
          end: {
            line: 570,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 568,
            column: 16
          },
          end: {
            line: 570,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 568
      },
      "47": {
        loc: {
          start: {
            line: 589,
            column: 44
          },
          end: {
            line: 589,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 589,
            column: 44
          },
          end: {
            line: 589,
            column: 57
          }
        }, {
          start: {
            line: 589,
            column: 61
          },
          end: {
            line: 589,
            column: 63
          }
        }],
        line: 589
      },
      "48": {
        loc: {
          start: {
            line: 598,
            column: 31
          },
          end: {
            line: 600,
            column: 41
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 599,
            column: 14
          },
          end: {
            line: 599,
            column: 105
          }
        }, {
          start: {
            line: 600,
            column: 14
          },
          end: {
            line: 600,
            column: 41
          }
        }],
        line: 598
      },
      "49": {
        loc: {
          start: {
            line: 605,
            column: 8
          },
          end: {
            line: 607,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 605,
            column: 8
          },
          end: {
            line: 607,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 605
      },
      "50": {
        loc: {
          start: {
            line: 621,
            column: 12
          },
          end: {
            line: 623,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 621,
            column: 12
          },
          end: {
            line: 623,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 621
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/services/azure-gdpr-service.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/services/azure-gdpr-service.ts"],
      sourcesContent: ["import { CosmosClient, Container, Database } from '@azure/cosmos';\nimport { BlobServiceClient, ContainerClient } from '@azure/storage-blob';\nimport { DefaultAzureCredential } from '@azure/identity';\nimport { SecretClient } from '@azure/keyvault-secrets';\n\n/**\n * Azure-based GDPR Compliance Service\n * \n * Implements GDPR features using Azure Cosmos DB for data deletion requests\n * and audit logging, plus Azure Blob Storage for file deletion.\n */\n\nexport interface UserConsent {\n  id: string;\n  userId: string;\n  analytics: boolean;\n  marketing: boolean;\n  functional: boolean;\n  consentDate: string;\n  ipAddress?: string;\n  userAgent?: string;\n  version: string; // Privacy policy version\n  lastUpdated: string;\n  partitionKey: string; // For Cosmos DB partitioning\n}\n\nexport interface DataDeletionRequest {\n  id: string;\n  userId: string;\n  requestDate: string;\n  requestedBy: string; // email of person making request\n  reason?: string;\n  status: 'pending' | 'processing' | 'completed' | 'failed' | 'cancelled';\n  scheduledDate?: string; // When deletion will be processed (30 days after request)\n  completedDate?: string;\n  deletedData: string[]; // list of containers/collections deleted\n  errors?: string[]; // any errors encountered during deletion\n  auditTrail: AuditLogEntry[];\n  partitionKey: string; // For Cosmos DB partitioning\n}\n\nexport interface AuditLogEntry {\n  id: string;\n  userId: string;\n  action: 'consent_recorded' | 'consent_updated' | 'data_deletion_requested' | 'data_deletion_processed' | 'data_exported' | 'data_anonymized';\n  timestamp: string;\n  details: Record<string, any>;\n  ipAddress?: string;\n  userAgent?: string;\n  complianceOfficer?: string;\n  partitionKey: string;\n}\n\nexport interface AnonymizedAnalytics {\n  id: string;\n  timestamp: string;\n  event: string;\n  page: string;\n  userId: string; // hashed/pseudonymized\n  sessionId: string; // hashed\n  userAgent?: string; // anonymized\n  location?: {\n    country: string;\n    region?: string;\n  };\n  metadata: Record<string, any>;\n  partitionKey: string;\n}\n\nexport class AzureGDPRService {\n  private cosmosClient: CosmosClient | null = null;\n  private database: Database | null = null;\n  private blobServiceClient: BlobServiceClient | null = null;\n  private keyVaultClient: SecretClient | null = null;\n  private static instance: AzureGDPRService;\n  \n  private readonly COSMOS_DATABASE_ID = 'PrepBettrDB';\n  private readonly CONTAINERS = {\n    DELETION_REQUESTS: 'gdprRequests',\n    AUDIT_LOG: 'dataProtectionAuditLog',\n    CONSENTS: 'userConsents',\n    ANONYMIZED_ANALYTICS: 'anonymizedAnalytics'\n  } as const;\n\n  public static getInstance(): AzureGDPRService {\n    if (!AzureGDPRService.instance) {\n      AzureGDPRService.instance = new AzureGDPRService();\n    }\n    return AzureGDPRService.instance;\n  }\n\n  /**\n   * Initialize Azure services (Cosmos DB, Blob Storage, Key Vault)\n   */\n  async initialize(): Promise<void> {\n    try {\n      // Initialize Azure Key Vault for secrets\n      if (process.env.AZURE_KEY_VAULT_URL) {\n        this.keyVaultClient = new SecretClient(\n          process.env.AZURE_KEY_VAULT_URL,\n          new DefaultAzureCredential()\n        );\n      }\n\n      // Initialize Cosmos DB\n      await this.initializeCosmosDB();\n      \n      // Initialize Blob Storage\n      await this.initializeBlobStorage();\n\n      console.log('\u2705 Azure GDPR Service initialized successfully');\n    } catch (error) {\n      console.error('\u274C Failed to initialize Azure GDPR Service:', error);\n      throw error;\n    }\n  }\n\n  private async initializeCosmosDB(): Promise<void> {\n    try {\n      let connectionString = process.env.AZURE_COSMOS_CONNECTION_STRING;\n      \n      // Try to get connection string from Key Vault if not in env\n      if (!connectionString && this.keyVaultClient) {\n        try {\n          const secret = await this.keyVaultClient.getSecret('cosmos-db-connection-string');\n          connectionString = secret.value;\n        } catch (keyVaultError) {\n          console.warn('Could not retrieve Cosmos DB connection from Key Vault:', keyVaultError);\n        }\n      }\n\n      // Fallback to endpoint and key\n      if (!connectionString) {\n        const endpoint = process.env.AZURE_COSMOS_ENDPOINT;\n        const key = process.env.AZURE_COSMOS_KEY;\n        \n        if (!endpoint || !key) {\n          throw new Error('Cosmos DB configuration missing. Provide either AZURE_COSMOS_CONNECTION_STRING or both AZURE_COSMOS_ENDPOINT and AZURE_COSMOS_KEY');\n        }\n        \n        this.cosmosClient = new CosmosClient({ endpoint, key });\n      } else {\n        this.cosmosClient = new CosmosClient(connectionString);\n      }\n\n      // Get database reference\n      this.database = this.cosmosClient.database(this.COSMOS_DATABASE_ID);\n      \n      // Ensure containers exist\n      await this.ensureContainers();\n      \n      console.log('\u2705 Cosmos DB initialized for GDPR service');\n    } catch (error) {\n      console.error('\u274C Failed to initialize Cosmos DB:', error);\n      throw error;\n    }\n  }\n\n  private async initializeBlobStorage(): Promise<void> {\n    try {\n      let connectionString = process.env.AZURE_STORAGE_CONNECTION_STRING;\n      \n      // Try to get connection string from Key Vault\n      if (!connectionString && this.keyVaultClient) {\n        try {\n          const secret = await this.keyVaultClient.getSecret('storage-connection-string');\n          connectionString = secret.value;\n        } catch (keyVaultError) {\n          console.warn('Could not retrieve Storage connection from Key Vault:', keyVaultError);\n        }\n      }\n\n      if (!connectionString) {\n        throw new Error('Azure Storage connection string not found in environment or Key Vault');\n      }\n\n      this.blobServiceClient = BlobServiceClient.fromConnectionString(connectionString);\n      \n      console.log('\u2705 Azure Blob Storage initialized for GDPR service');\n    } catch (error) {\n      console.error('\u274C Failed to initialize Blob Storage:', error);\n      throw error;\n    }\n  }\n\n  private async ensureContainers(): Promise<void> {\n    if (!this.database) throw new Error('Database not initialized');\n\n    for (const [containerName, containerId] of Object.entries(this.CONTAINERS)) {\n      try {\n        await this.database.containers.createIfNotExists({\n          id: containerId,\n          partitionKey: { paths: ['/partitionKey'] }\n        });\n        console.log(`\u2705 Container ${containerId} ready`);\n      } catch (error) {\n        console.error(`\u274C Failed to create container ${containerId}:`, error);\n      }\n    }\n  }\n\n  /**\n   * Record user consent with audit trail\n   */\n  async recordConsent(consent: Omit<UserConsent, 'id' | 'partitionKey' | 'lastUpdated'>): Promise<string> {\n    if (!this.database) await this.initialize();\n\n    try {\n      const consentId = `consent_${consent.userId}_${Date.now()}`;\n      const consentRecord: UserConsent = {\n        id: consentId,\n        ...consent,\n        lastUpdated: new Date().toISOString(),\n        partitionKey: consent.userId\n      };\n\n      const container = this.database!.container(this.CONTAINERS.CONSENTS);\n      await container.items.create(consentRecord);\n\n      // Create audit log entry\n      await this.createAuditLogEntry({\n        userId: consent.userId,\n        action: 'consent_recorded',\n        details: {\n          analytics: consent.analytics,\n          marketing: consent.marketing,\n          functional: consent.functional,\n          version: consent.version\n        },\n        ipAddress: consent.ipAddress,\n        userAgent: consent.userAgent\n      });\n\n      console.log(`\u2705 Consent recorded for user ${consent.userId}`);\n      return consentId;\n    } catch (error) {\n      console.error('\u274C Failed to record consent:', error);\n      throw new Error('Failed to record user consent');\n    }\n  }\n\n  /**\n   * Get latest user consent\n   */\n  async getConsent(userId: string): Promise<UserConsent | null> {\n    if (!this.database) await this.initialize();\n\n    try {\n      const container = this.database!.container(this.CONTAINERS.CONSENTS);\n      const query = {\n        query: 'SELECT * FROM c WHERE c.userId = @userId ORDER BY c.lastUpdated DESC',\n        parameters: [{ name: '@userId', value: userId }]\n      };\n\n      const { resources } = await container.items.query<UserConsent>(query, {\n        maxItemCount: 1,\n        partitionKey: userId\n      }).fetchNext();\n\n      return resources.length > 0 ? resources[0] : null;\n    } catch (error) {\n      console.error('\u274C Failed to get consent:', error);\n      throw new Error('Failed to retrieve user consent');\n    }\n  }\n\n  /**\n   * Update user consent\n   */\n  async updateConsent(userId: string, updates: Partial<UserConsent>): Promise<void> {\n    if (!this.database) await this.initialize();\n\n    try {\n      const currentConsent = await this.getConsent(userId);\n      if (!currentConsent) {\n        throw new Error('No existing consent found for user');\n      }\n\n      const updatedConsent: UserConsent = {\n        ...currentConsent,\n        ...updates,\n        lastUpdated: new Date().toISOString()\n      };\n\n      const container = this.database!.container(this.CONTAINERS.CONSENTS);\n      await container.item(currentConsent.id, userId).replace(updatedConsent);\n\n      // Create audit log entry\n      await this.createAuditLogEntry({\n        userId,\n        action: 'consent_updated',\n        details: { updates }\n      });\n\n      console.log(`\u2705 Consent updated for user ${userId}`);\n    } catch (error) {\n      console.error('\u274C Failed to update consent:', error);\n      throw new Error('Failed to update user consent');\n    }\n  }\n\n  /**\n   * Request data deletion (GDPR Right to Erasure)\n   */\n  async requestDataDeletion(\n    userId: string,\n    requestedBy: string,\n    reason?: string,\n    ipAddress?: string,\n    userAgent?: string\n  ): Promise<string> {\n    if (!this.database) await this.initialize();\n\n    try {\n      const requestId = `del_${Date.now()}_${Math.random().toString(36).substring(2)}`;\n      const requestDate = new Date();\n      const scheduledDate = new Date(requestDate.getTime() + (30 * 24 * 60 * 60 * 1000)); // 30 days from now\n\n      const deletionRequest: DataDeletionRequest = {\n        id: requestId,\n        userId,\n        requestDate: requestDate.toISOString(),\n        requestedBy,\n        reason,\n        status: 'pending',\n        scheduledDate: scheduledDate.toISOString(),\n        deletedData: [],\n        auditTrail: [],\n        partitionKey: userId\n      };\n\n      const container = this.database!.container(this.CONTAINERS.DELETION_REQUESTS);\n      await container.items.create(deletionRequest);\n\n      // Create audit log entry\n      await this.createAuditLogEntry({\n        userId,\n        action: 'data_deletion_requested',\n        details: {\n          requestId,\n          requestedBy,\n          reason,\n          scheduledDate: scheduledDate.toISOString()\n        },\n        ipAddress,\n        userAgent\n      });\n\n      console.log(`\u2705 Data deletion requested for user ${userId}, scheduled for ${scheduledDate.toDateString()}`);\n      return requestId;\n    } catch (error) {\n      console.error('\u274C Failed to request data deletion:', error);\n      throw new Error('Failed to request data deletion');\n    }\n  }\n\n  /**\n   * Process data deletion (called by scheduled Azure Function)\n   */\n  async processDataDeletion(requestId: string): Promise<{ success: boolean; deletedData: string[]; errors: string[] }> {\n    if (!this.database) await this.initialize();\n\n    try {\n      const container = this.database!.container(this.CONTAINERS.DELETION_REQUESTS);\n      const { resource: request } = await container.item(requestId, requestId).read<DataDeletionRequest>();\n\n      if (!request) {\n        throw new Error('Deletion request not found');\n      }\n\n      if (request.status !== 'pending') {\n        throw new Error(`Cannot process request with status: ${request.status}`);\n      }\n\n      // Update status to processing\n      await container.item(requestId, request.partitionKey).patch([\n        { op: 'replace', path: '/status', value: 'processing' }\n      ]);\n\n      const deletedData: string[] = [];\n      const errors: string[] = [];\n\n      // Delete from Cosmos DB containers\n      const containersToDelete = [\n        'users',\n        'profiles', \n        'resumes',\n        'interviews',\n        'feedback',\n        'usage',\n        'notifications',\n        'emailVerifications'\n      ];\n\n      for (const containerName of containersToDelete) {\n        try {\n          const deleted = await this.deleteFromContainer(containerName, request.userId);\n          if (deleted > 0) {\n            deletedData.push(`${containerName} (${deleted} items)`);\n          }\n        } catch (error) {\n          const errorMsg = `Failed to delete from ${containerName}: ${error}`;\n          errors.push(errorMsg);\n          console.error(`\u274C ${errorMsg}`);\n        }\n      }\n\n      // Delete from Azure Blob Storage\n      try {\n        const deletedBlobContainers = await this.deleteFromBlobStorage(request.userId);\n        if (deletedBlobContainers.length > 0) {\n          deletedData.push(`blob-storage (${deletedBlobContainers.join(', ')})`);\n        }\n      } catch (error) {\n        const errorMsg = `Failed to delete from blob storage: ${error}`;\n        errors.push(errorMsg);\n        console.error(`\u274C ${errorMsg}`);\n      }\n\n      // Update request with results\n      const finalStatus = errors.length > 0 ? 'completed' : 'completed'; // Still completed even with some errors\n      await container.item(requestId, request.partitionKey).patch([\n        { op: 'replace', path: '/status', value: finalStatus },\n        { op: 'replace', path: '/completedDate', value: new Date().toISOString() },\n        { op: 'replace', path: '/deletedData', value: deletedData },\n        { op: 'replace', path: '/errors', value: errors }\n      ]);\n\n      // Create audit log entry\n      await this.createAuditLogEntry({\n        userId: request.userId,\n        action: 'data_deletion_processed',\n        details: {\n          requestId,\n          deletedData,\n          errors,\n          status: finalStatus\n        },\n        complianceOfficer: 'system'\n      });\n\n      console.log(`\u2705 Data deletion processed for user ${request.userId}`);\n      console.log(`   Deleted: ${deletedData.join(', ')}`);\n      if (errors.length > 0) {\n        console.log(`   Errors: ${errors.join(', ')}`);\n      }\n\n      return { success: errors.length === 0, deletedData, errors };\n    } catch (error) {\n      console.error('\u274C Failed to process data deletion:', error);\n      \n      // Update request status to failed\n      try {\n        const container = this.database!.container(this.CONTAINERS.DELETION_REQUESTS);\n        await container.item(requestId, requestId).patch([\n          { op: 'replace', path: '/status', value: 'failed' },\n          { op: 'replace', path: '/errors', value: [error instanceof Error ? error.message : 'Unknown error'] }\n        ]);\n      } catch (updateError) {\n        console.error('\u274C Failed to update request status to failed:', updateError);\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Get pending deletion requests that are ready for processing\n   */\n  async getPendingDeletions(): Promise<DataDeletionRequest[]> {\n    if (!this.database) await this.initialize();\n\n    try {\n      const container = this.database!.container(this.CONTAINERS.DELETION_REQUESTS);\n      const now = new Date().toISOString();\n      \n      const query = {\n        query: 'SELECT * FROM c WHERE c.status = @status AND c.scheduledDate <= @now',\n        parameters: [\n          { name: '@status', value: 'pending' },\n          { name: '@now', value: now }\n        ]\n      };\n\n      const { resources } = await container.items.query<DataDeletionRequest>(query).fetchAll();\n      return resources;\n    } catch (error) {\n      console.error('\u274C Failed to get pending deletions:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get deletion request status\n   */\n  async getDeletionRequestStatus(requestId: string): Promise<DataDeletionRequest | null> {\n    if (!this.database) await this.initialize();\n\n    try {\n      const container = this.database!.container(this.CONTAINERS.DELETION_REQUESTS);\n      const { resource } = await container.item(requestId, requestId).read<DataDeletionRequest>();\n      return resource || null;\n    } catch (error: any) {\n      if (error.code === 404) {\n        return null; // Request not found\n      }\n      console.error('\u274C Failed to get deletion request status:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Export user data (GDPR Subject Access Request)\n   */\n  async exportUserData(userId: string): Promise<any> {\n    if (!this.database) await this.initialize();\n\n    try {\n      const exportData: any = {\n        userId,\n        exportDate: new Date().toISOString(),\n        data: {}\n      };\n\n      // Export from Cosmos DB containers\n      const containersToExport = ['users', 'profiles', 'resumes', 'interviews', 'usage'];\n      \n      for (const containerName of containersToExport) {\n        try {\n          const containerClient = this.database!.container(containerName);\n          const query = {\n            query: 'SELECT * FROM c WHERE c.userId = @userId',\n            parameters: [{ name: '@userId', value: userId }]\n          };\n\n          const { resources } = await containerClient.items.query(query, {\n            partitionKey: userId\n          }).fetchAll();\n\n          if (resources.length > 0) {\n            exportData.data[containerName] = resources;\n          }\n        } catch (error) {\n          console.warn(`Failed to export from ${containerName}:`, error);\n        }\n      }\n\n      // Export consent data\n      const consent = await this.getConsent(userId);\n      if (consent) {\n        exportData.data.consents = consent;\n      }\n\n      // Export audit logs related to this user\n      const auditLogs = await this.getAuditLogs(userId);\n      if (auditLogs.length > 0) {\n        exportData.data.auditLogs = auditLogs;\n      }\n\n      // Create audit log entry for data export\n      await this.createAuditLogEntry({\n        userId,\n        action: 'data_exported',\n        details: {\n          exportedContainers: Object.keys(exportData.data),\n          totalRecords: Object.values(exportData.data).flat().length\n        }\n      });\n\n      console.log(`\u2705 User data exported for ${userId}`);\n      return exportData;\n    } catch (error) {\n      console.error('\u274C Failed to export user data:', error);\n      throw new Error('Failed to export user data');\n    }\n  }\n\n  /**\n   * Create audit log entry\n   */\n  private async createAuditLogEntry(entry: Omit<AuditLogEntry, 'id' | 'timestamp' | 'partitionKey'>): Promise<void> {\n    if (!this.database) return;\n\n    try {\n      const auditEntry: AuditLogEntry = {\n        id: `audit_${Date.now()}_${Math.random().toString(36).substring(2)}`,\n        timestamp: new Date().toISOString(),\n        partitionKey: entry.userId,\n        ...entry\n      };\n\n      const container = this.database.container(this.CONTAINERS.AUDIT_LOG);\n      await container.items.create(auditEntry);\n    } catch (error) {\n      console.error('\u274C Failed to create audit log entry:', error);\n      // Don't throw - audit logging failure shouldn't stop the main operation\n    }\n  }\n\n  /**\n   * Get audit logs for a user\n   */\n  async getAuditLogs(userId: string, limit: number = 100): Promise<AuditLogEntry[]> {\n    if (!this.database) await this.initialize();\n\n    try {\n      const container = this.database!.container(this.CONTAINERS.AUDIT_LOG);\n      const query = {\n        query: 'SELECT * FROM c WHERE c.userId = @userId ORDER BY c.timestamp DESC',\n        parameters: [{ name: '@userId', value: userId }]\n      };\n\n      const { resources } = await container.items.query<AuditLogEntry>(query, {\n        maxItemCount: limit,\n        partitionKey: userId\n      }).fetchNext();\n\n      return resources;\n    } catch (error) {\n      console.error('\u274C Failed to get audit logs:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete user data from a specific Cosmos DB container\n   */\n  private async deleteFromContainer(containerName: string, userId: string): Promise<number> {\n    if (!this.database) return 0;\n\n    try {\n      const container = this.database.container(containerName);\n      const query = {\n        query: 'SELECT c.id FROM c WHERE c.userId = @userId',\n        parameters: [{ name: '@userId', value: userId }]\n      };\n\n      const { resources: items } = await container.items.query(query, {\n        partitionKey: userId\n      }).fetchAll();\n\n      let deletedCount = 0;\n      \n      // Delete in batches to avoid overwhelming the database\n      const batchSize = 25;\n      for (let i = 0; i < items.length; i += batchSize) {\n        const batch = items.slice(i, i + batchSize);\n        const deletePromises = batch.map(item => \n          container.item(item.id, userId).delete().catch(error => {\n            console.warn(`Failed to delete item ${item.id} from ${containerName}:`, error);\n            return null;\n          })\n        );\n        \n        const results = await Promise.all(deletePromises);\n        deletedCount += results.filter(result => result !== null).length;\n      }\n\n      return deletedCount;\n    } catch (error) {\n      console.error(`\u274C Error deleting from container ${containerName}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete user files from Azure Blob Storage\n   */\n  private async deleteFromBlobStorage(userId: string): Promise<string[]> {\n    if (!this.blobServiceClient) return [];\n\n    const deletedContainers: string[] = [];\n    const userContainers = ['user-files', 'resumes', 'profile-pics', 'documents'];\n\n    for (const containerName of userContainers) {\n      try {\n        const containerClient = this.blobServiceClient.getContainerClient(containerName);\n        const prefix = `users/${userId}/`;\n        \n        let deletedBlobs = 0;\n        for await (const blob of containerClient.listBlobsFlat({ prefix })) {\n          try {\n            await containerClient.deleteBlob(blob.name);\n            deletedBlobs++;\n          } catch (error) {\n            console.warn(`Failed to delete blob ${blob.name}:`, error);\n          }\n        }\n\n        if (deletedBlobs > 0) {\n          deletedContainers.push(`${containerName} (${deletedBlobs} files)`);\n        }\n      } catch (error) {\n        console.warn(`Failed to access blob container ${containerName}:`, error);\n      }\n    }\n\n    return deletedContainers;\n  }\n\n  /**\n   * Anonymize analytics data for GDPR compliance\n   */\n  anonymizeAnalyticsData(data: {\n    userId: string;\n    sessionId: string;\n    event: string;\n    page: string;\n    metadata?: Record<string, any>;\n  }): AnonymizedAnalytics {\n    return {\n      id: `anon_${Date.now()}_${Math.random().toString(36).substring(2)}`,\n      timestamp: new Date().toISOString(),\n      event: data.event,\n      page: data.page,\n      userId: this.hashUserId(data.userId),\n      sessionId: this.hashSessionId(data.sessionId),\n      metadata: this.sanitizeMetadata(data.metadata || {}),\n      partitionKey: 'anonymized'\n    };\n  }\n\n  /**\n   * Privacy utility methods\n   */\n  maskEmail(email: string): string {\n    const [username, domain] = email.split('@');\n    const maskedUsername = username.length > 2 \n      ? username.charAt(0) + '*'.repeat(username.length - 2) + username.charAt(username.length - 1)\n      : '*'.repeat(username.length);\n    return `${maskedUsername}@${domain}`;\n  }\n\n  maskPhoneNumber(phone: string): string {\n    const cleaned = phone.replace(/\\D/g, '');\n    if (cleaned.length > 4) {\n      return cleaned.substring(0, 3) + '*'.repeat(cleaned.length - 6) + cleaned.substring(cleaned.length - 3);\n    }\n    return '*'.repeat(cleaned.length);\n  }\n\n  private hashUserId(userId: string): string {\n    return Buffer.from(userId + 'salt').toString('base64').substring(0, 12);\n  }\n\n  private hashSessionId(sessionId: string): string {\n    return Buffer.from(sessionId + 'salt').toString('base64').substring(0, 8);\n  }\n\n  private sanitizeMetadata(metadata: Record<string, any>): Record<string, any> {\n    const sanitized = { ...metadata };\n    \n    // Remove potential PII from metadata\n    const piiKeys = ['email', 'phone', 'name', 'address', 'ssn', 'creditCard', 'userId'];\n    piiKeys.forEach(key => {\n      if (sanitized[key]) {\n        delete sanitized[key];\n      }\n    });\n    \n    return sanitized;\n  }\n}\n\nexport const azureGDPRService = AzureGDPRService.getInstance();\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "51bb2e51b367b8f8aace4777afb3e855aca76567"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2nlfpe6nzb = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2nlfpe6nzb();
var __asyncValues =
/* istanbul ignore next */
(cov_2nlfpe6nzb().s[0]++,
/* istanbul ignore next */
(cov_2nlfpe6nzb().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_2nlfpe6nzb().b[0][1]++, this.__asyncValues) ||
/* istanbul ignore next */
(cov_2nlfpe6nzb().b[0][2]++, function (o) {
  /* istanbul ignore next */
  cov_2nlfpe6nzb().f[0]++;
  cov_2nlfpe6nzb().s[1]++;
  if (!Symbol.asyncIterator) {
    /* istanbul ignore next */
    cov_2nlfpe6nzb().b[1][0]++;
    cov_2nlfpe6nzb().s[2]++;
    throw new TypeError("Symbol.asyncIterator is not defined.");
  } else
  /* istanbul ignore next */
  {
    cov_2nlfpe6nzb().b[1][1]++;
  }
  var m =
    /* istanbul ignore next */
    (cov_2nlfpe6nzb().s[3]++, o[Symbol.asyncIterator]),
    i;
  /* istanbul ignore next */
  cov_2nlfpe6nzb().s[4]++;
  return m ?
  /* istanbul ignore next */
  (cov_2nlfpe6nzb().b[2][0]++, m.call(o)) :
  /* istanbul ignore next */
  (cov_2nlfpe6nzb().b[2][1]++, o = typeof __values === "function" ?
  /* istanbul ignore next */
  (cov_2nlfpe6nzb().b[3][0]++, __values(o)) :
  /* istanbul ignore next */
  (cov_2nlfpe6nzb().b[3][1]++, o[Symbol.iterator]()), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    /* istanbul ignore next */
    cov_2nlfpe6nzb().f[1]++;
    cov_2nlfpe6nzb().s[5]++;
    return this;
  }, i);
  function verb(n) {
    /* istanbul ignore next */
    cov_2nlfpe6nzb().f[2]++;
    cov_2nlfpe6nzb().s[6]++;
    i[n] =
    /* istanbul ignore next */
    (cov_2nlfpe6nzb().b[4][0]++, o[n]) &&
    /* istanbul ignore next */
    (cov_2nlfpe6nzb().b[4][1]++, function (v) {
      /* istanbul ignore next */
      cov_2nlfpe6nzb().f[3]++;
      cov_2nlfpe6nzb().s[7]++;
      return new Promise(function (resolve, reject) {
        /* istanbul ignore next */
        cov_2nlfpe6nzb().f[4]++;
        cov_2nlfpe6nzb().s[8]++;
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    });
  }
  function settle(resolve, reject, d, v) {
    /* istanbul ignore next */
    cov_2nlfpe6nzb().f[5]++;
    cov_2nlfpe6nzb().s[9]++;
    Promise.resolve(v).then(function (v) {
      /* istanbul ignore next */
      cov_2nlfpe6nzb().f[6]++;
      cov_2nlfpe6nzb().s[10]++;
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
}));
/* istanbul ignore next */
cov_2nlfpe6nzb().s[11]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2nlfpe6nzb().s[12]++;
exports.azureGDPRService = exports.AzureGDPRService = void 0;
const cosmos_1 =
/* istanbul ignore next */
(cov_2nlfpe6nzb().s[13]++, require("@azure/cosmos"));
const storage_blob_1 =
/* istanbul ignore next */
(cov_2nlfpe6nzb().s[14]++, require("@azure/storage-blob"));
const identity_1 =
/* istanbul ignore next */
(cov_2nlfpe6nzb().s[15]++, require("@azure/identity"));
const keyvault_secrets_1 =
/* istanbul ignore next */
(cov_2nlfpe6nzb().s[16]++, require("@azure/keyvault-secrets"));
class AzureGDPRService {
  constructor() {
    /* istanbul ignore next */
    cov_2nlfpe6nzb().f[7]++;
    cov_2nlfpe6nzb().s[17]++;
    this.cosmosClient = null;
    /* istanbul ignore next */
    cov_2nlfpe6nzb().s[18]++;
    this.database = null;
    /* istanbul ignore next */
    cov_2nlfpe6nzb().s[19]++;
    this.blobServiceClient = null;
    /* istanbul ignore next */
    cov_2nlfpe6nzb().s[20]++;
    this.keyVaultClient = null;
    /* istanbul ignore next */
    cov_2nlfpe6nzb().s[21]++;
    this.COSMOS_DATABASE_ID = 'PrepBettrDB';
    /* istanbul ignore next */
    cov_2nlfpe6nzb().s[22]++;
    this.CONTAINERS = {
      DELETION_REQUESTS: 'gdprRequests',
      AUDIT_LOG: 'dataProtectionAuditLog',
      CONSENTS: 'userConsents',
      ANONYMIZED_ANALYTICS: 'anonymizedAnalytics'
    };
  }
  static getInstance() {
    /* istanbul ignore next */
    cov_2nlfpe6nzb().f[8]++;
    cov_2nlfpe6nzb().s[23]++;
    if (!AzureGDPRService.instance) {
      /* istanbul ignore next */
      cov_2nlfpe6nzb().b[5][0]++;
      cov_2nlfpe6nzb().s[24]++;
      AzureGDPRService.instance = new AzureGDPRService();
    } else
    /* istanbul ignore next */
    {
      cov_2nlfpe6nzb().b[5][1]++;
    }
    cov_2nlfpe6nzb().s[25]++;
    return AzureGDPRService.instance;
  }
  /**
   * Initialize Azure services (Cosmos DB, Blob Storage, Key Vault)
   */
  async initialize() {
    /* istanbul ignore next */
    cov_2nlfpe6nzb().f[9]++;
    cov_2nlfpe6nzb().s[26]++;
    try {
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[27]++;
      // Initialize Azure Key Vault for secrets
      if (process.env.AZURE_KEY_VAULT_URL) {
        /* istanbul ignore next */
        cov_2nlfpe6nzb().b[6][0]++;
        cov_2nlfpe6nzb().s[28]++;
        this.keyVaultClient = new keyvault_secrets_1.SecretClient(process.env.AZURE_KEY_VAULT_URL, new identity_1.DefaultAzureCredential());
      } else
      /* istanbul ignore next */
      {
        cov_2nlfpe6nzb().b[6][1]++;
      }
      // Initialize Cosmos DB
      cov_2nlfpe6nzb().s[29]++;
      await this.initializeCosmosDB();
      // Initialize Blob Storage
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[30]++;
      await this.initializeBlobStorage();
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[31]++;
      console.log('✅ Azure GDPR Service initialized successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[32]++;
      console.error('❌ Failed to initialize Azure GDPR Service:', error);
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[33]++;
      throw error;
    }
  }
  async initializeCosmosDB() {
    /* istanbul ignore next */
    cov_2nlfpe6nzb().f[10]++;
    cov_2nlfpe6nzb().s[34]++;
    try {
      let connectionString =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[35]++, process.env.AZURE_COSMOS_CONNECTION_STRING);
      // Try to get connection string from Key Vault if not in env
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[36]++;
      if (
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().b[8][0]++, !connectionString) &&
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().b[8][1]++, this.keyVaultClient)) {
        /* istanbul ignore next */
        cov_2nlfpe6nzb().b[7][0]++;
        cov_2nlfpe6nzb().s[37]++;
        try {
          const secret =
          /* istanbul ignore next */
          (cov_2nlfpe6nzb().s[38]++, await this.keyVaultClient.getSecret('cosmos-db-connection-string'));
          /* istanbul ignore next */
          cov_2nlfpe6nzb().s[39]++;
          connectionString = secret.value;
        } catch (keyVaultError) {
          /* istanbul ignore next */
          cov_2nlfpe6nzb().s[40]++;
          console.warn('Could not retrieve Cosmos DB connection from Key Vault:', keyVaultError);
        }
      } else
      /* istanbul ignore next */
      {
        cov_2nlfpe6nzb().b[7][1]++;
      }
      // Fallback to endpoint and key
      cov_2nlfpe6nzb().s[41]++;
      if (!connectionString) {
        /* istanbul ignore next */
        cov_2nlfpe6nzb().b[9][0]++;
        const endpoint =
        /* istanbul ignore next */
        (cov_2nlfpe6nzb().s[42]++, process.env.AZURE_COSMOS_ENDPOINT);
        const key =
        /* istanbul ignore next */
        (cov_2nlfpe6nzb().s[43]++, process.env.AZURE_COSMOS_KEY);
        /* istanbul ignore next */
        cov_2nlfpe6nzb().s[44]++;
        if (
        /* istanbul ignore next */
        (cov_2nlfpe6nzb().b[11][0]++, !endpoint) ||
        /* istanbul ignore next */
        (cov_2nlfpe6nzb().b[11][1]++, !key)) {
          /* istanbul ignore next */
          cov_2nlfpe6nzb().b[10][0]++;
          cov_2nlfpe6nzb().s[45]++;
          throw new Error('Cosmos DB configuration missing. Provide either AZURE_COSMOS_CONNECTION_STRING or both AZURE_COSMOS_ENDPOINT and AZURE_COSMOS_KEY');
        } else
        /* istanbul ignore next */
        {
          cov_2nlfpe6nzb().b[10][1]++;
        }
        cov_2nlfpe6nzb().s[46]++;
        this.cosmosClient = new cosmos_1.CosmosClient({
          endpoint,
          key
        });
      } else {
        /* istanbul ignore next */
        cov_2nlfpe6nzb().b[9][1]++;
        cov_2nlfpe6nzb().s[47]++;
        this.cosmosClient = new cosmos_1.CosmosClient(connectionString);
      }
      // Get database reference
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[48]++;
      this.database = this.cosmosClient.database(this.COSMOS_DATABASE_ID);
      // Ensure containers exist
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[49]++;
      await this.ensureContainers();
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[50]++;
      console.log('✅ Cosmos DB initialized for GDPR service');
    } catch (error) {
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[51]++;
      console.error('❌ Failed to initialize Cosmos DB:', error);
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[52]++;
      throw error;
    }
  }
  async initializeBlobStorage() {
    /* istanbul ignore next */
    cov_2nlfpe6nzb().f[11]++;
    cov_2nlfpe6nzb().s[53]++;
    try {
      let connectionString =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[54]++, process.env.AZURE_STORAGE_CONNECTION_STRING);
      // Try to get connection string from Key Vault
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[55]++;
      if (
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().b[13][0]++, !connectionString) &&
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().b[13][1]++, this.keyVaultClient)) {
        /* istanbul ignore next */
        cov_2nlfpe6nzb().b[12][0]++;
        cov_2nlfpe6nzb().s[56]++;
        try {
          const secret =
          /* istanbul ignore next */
          (cov_2nlfpe6nzb().s[57]++, await this.keyVaultClient.getSecret('storage-connection-string'));
          /* istanbul ignore next */
          cov_2nlfpe6nzb().s[58]++;
          connectionString = secret.value;
        } catch (keyVaultError) {
          /* istanbul ignore next */
          cov_2nlfpe6nzb().s[59]++;
          console.warn('Could not retrieve Storage connection from Key Vault:', keyVaultError);
        }
      } else
      /* istanbul ignore next */
      {
        cov_2nlfpe6nzb().b[12][1]++;
      }
      cov_2nlfpe6nzb().s[60]++;
      if (!connectionString) {
        /* istanbul ignore next */
        cov_2nlfpe6nzb().b[14][0]++;
        cov_2nlfpe6nzb().s[61]++;
        throw new Error('Azure Storage connection string not found in environment or Key Vault');
      } else
      /* istanbul ignore next */
      {
        cov_2nlfpe6nzb().b[14][1]++;
      }
      cov_2nlfpe6nzb().s[62]++;
      this.blobServiceClient = storage_blob_1.BlobServiceClient.fromConnectionString(connectionString);
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[63]++;
      console.log('✅ Azure Blob Storage initialized for GDPR service');
    } catch (error) {
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[64]++;
      console.error('❌ Failed to initialize Blob Storage:', error);
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[65]++;
      throw error;
    }
  }
  async ensureContainers() {
    /* istanbul ignore next */
    cov_2nlfpe6nzb().f[12]++;
    cov_2nlfpe6nzb().s[66]++;
    if (!this.database) {
      /* istanbul ignore next */
      cov_2nlfpe6nzb().b[15][0]++;
      cov_2nlfpe6nzb().s[67]++;
      throw new Error('Database not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_2nlfpe6nzb().b[15][1]++;
    }
    cov_2nlfpe6nzb().s[68]++;
    for (const [containerName, containerId] of Object.entries(this.CONTAINERS)) {
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[69]++;
      try {
        /* istanbul ignore next */
        cov_2nlfpe6nzb().s[70]++;
        await this.database.containers.createIfNotExists({
          id: containerId,
          partitionKey: {
            paths: ['/partitionKey']
          }
        });
        /* istanbul ignore next */
        cov_2nlfpe6nzb().s[71]++;
        console.log(`✅ Container ${containerId} ready`);
      } catch (error) {
        /* istanbul ignore next */
        cov_2nlfpe6nzb().s[72]++;
        console.error(`❌ Failed to create container ${containerId}:`, error);
      }
    }
  }
  /**
   * Record user consent with audit trail
   */
  async recordConsent(consent) {
    /* istanbul ignore next */
    cov_2nlfpe6nzb().f[13]++;
    cov_2nlfpe6nzb().s[73]++;
    if (!this.database) {
      /* istanbul ignore next */
      cov_2nlfpe6nzb().b[16][0]++;
      cov_2nlfpe6nzb().s[74]++;
      await this.initialize();
    } else
    /* istanbul ignore next */
    {
      cov_2nlfpe6nzb().b[16][1]++;
    }
    cov_2nlfpe6nzb().s[75]++;
    try {
      const consentId =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[76]++, `consent_${consent.userId}_${Date.now()}`);
      const consentRecord =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[77]++, Object.assign(Object.assign({
        id: consentId
      }, consent), {
        lastUpdated: new Date().toISOString(),
        partitionKey: consent.userId
      }));
      const container =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[78]++, this.database.container(this.CONTAINERS.CONSENTS));
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[79]++;
      await container.items.create(consentRecord);
      // Create audit log entry
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[80]++;
      await this.createAuditLogEntry({
        userId: consent.userId,
        action: 'consent_recorded',
        details: {
          analytics: consent.analytics,
          marketing: consent.marketing,
          functional: consent.functional,
          version: consent.version
        },
        ipAddress: consent.ipAddress,
        userAgent: consent.userAgent
      });
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[81]++;
      console.log(`✅ Consent recorded for user ${consent.userId}`);
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[82]++;
      return consentId;
    } catch (error) {
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[83]++;
      console.error('❌ Failed to record consent:', error);
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[84]++;
      throw new Error('Failed to record user consent');
    }
  }
  /**
   * Get latest user consent
   */
  async getConsent(userId) {
    /* istanbul ignore next */
    cov_2nlfpe6nzb().f[14]++;
    cov_2nlfpe6nzb().s[85]++;
    if (!this.database) {
      /* istanbul ignore next */
      cov_2nlfpe6nzb().b[17][0]++;
      cov_2nlfpe6nzb().s[86]++;
      await this.initialize();
    } else
    /* istanbul ignore next */
    {
      cov_2nlfpe6nzb().b[17][1]++;
    }
    cov_2nlfpe6nzb().s[87]++;
    try {
      const container =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[88]++, this.database.container(this.CONTAINERS.CONSENTS));
      const query =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[89]++, {
        query: 'SELECT * FROM c WHERE c.userId = @userId ORDER BY c.lastUpdated DESC',
        parameters: [{
          name: '@userId',
          value: userId
        }]
      });
      const {
        resources
      } =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[90]++, await container.items.query(query, {
        maxItemCount: 1,
        partitionKey: userId
      }).fetchNext());
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[91]++;
      return resources.length > 0 ?
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().b[18][0]++, resources[0]) :
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().b[18][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[92]++;
      console.error('❌ Failed to get consent:', error);
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[93]++;
      throw new Error('Failed to retrieve user consent');
    }
  }
  /**
   * Update user consent
   */
  async updateConsent(userId, updates) {
    /* istanbul ignore next */
    cov_2nlfpe6nzb().f[15]++;
    cov_2nlfpe6nzb().s[94]++;
    if (!this.database) {
      /* istanbul ignore next */
      cov_2nlfpe6nzb().b[19][0]++;
      cov_2nlfpe6nzb().s[95]++;
      await this.initialize();
    } else
    /* istanbul ignore next */
    {
      cov_2nlfpe6nzb().b[19][1]++;
    }
    cov_2nlfpe6nzb().s[96]++;
    try {
      const currentConsent =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[97]++, await this.getConsent(userId));
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[98]++;
      if (!currentConsent) {
        /* istanbul ignore next */
        cov_2nlfpe6nzb().b[20][0]++;
        cov_2nlfpe6nzb().s[99]++;
        throw new Error('No existing consent found for user');
      } else
      /* istanbul ignore next */
      {
        cov_2nlfpe6nzb().b[20][1]++;
      }
      const updatedConsent =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[100]++, Object.assign(Object.assign(Object.assign({}, currentConsent), updates), {
        lastUpdated: new Date().toISOString()
      }));
      const container =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[101]++, this.database.container(this.CONTAINERS.CONSENTS));
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[102]++;
      await container.item(currentConsent.id, userId).replace(updatedConsent);
      // Create audit log entry
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[103]++;
      await this.createAuditLogEntry({
        userId,
        action: 'consent_updated',
        details: {
          updates
        }
      });
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[104]++;
      console.log(`✅ Consent updated for user ${userId}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[105]++;
      console.error('❌ Failed to update consent:', error);
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[106]++;
      throw new Error('Failed to update user consent');
    }
  }
  /**
   * Request data deletion (GDPR Right to Erasure)
   */
  async requestDataDeletion(userId, requestedBy, reason, ipAddress, userAgent) {
    /* istanbul ignore next */
    cov_2nlfpe6nzb().f[16]++;
    cov_2nlfpe6nzb().s[107]++;
    if (!this.database) {
      /* istanbul ignore next */
      cov_2nlfpe6nzb().b[21][0]++;
      cov_2nlfpe6nzb().s[108]++;
      await this.initialize();
    } else
    /* istanbul ignore next */
    {
      cov_2nlfpe6nzb().b[21][1]++;
    }
    cov_2nlfpe6nzb().s[109]++;
    try {
      const requestId =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[110]++, `del_${Date.now()}_${Math.random().toString(36).substring(2)}`);
      const requestDate =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[111]++, new Date());
      const scheduledDate =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[112]++, new Date(requestDate.getTime() + 30 * 24 * 60 * 60 * 1000)); // 30 days from now
      const deletionRequest =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[113]++, {
        id: requestId,
        userId,
        requestDate: requestDate.toISOString(),
        requestedBy,
        reason,
        status: 'pending',
        scheduledDate: scheduledDate.toISOString(),
        deletedData: [],
        auditTrail: [],
        partitionKey: userId
      });
      const container =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[114]++, this.database.container(this.CONTAINERS.DELETION_REQUESTS));
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[115]++;
      await container.items.create(deletionRequest);
      // Create audit log entry
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[116]++;
      await this.createAuditLogEntry({
        userId,
        action: 'data_deletion_requested',
        details: {
          requestId,
          requestedBy,
          reason,
          scheduledDate: scheduledDate.toISOString()
        },
        ipAddress,
        userAgent
      });
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[117]++;
      console.log(`✅ Data deletion requested for user ${userId}, scheduled for ${scheduledDate.toDateString()}`);
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[118]++;
      return requestId;
    } catch (error) {
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[119]++;
      console.error('❌ Failed to request data deletion:', error);
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[120]++;
      throw new Error('Failed to request data deletion');
    }
  }
  /**
   * Process data deletion (called by scheduled Azure Function)
   */
  async processDataDeletion(requestId) {
    /* istanbul ignore next */
    cov_2nlfpe6nzb().f[17]++;
    cov_2nlfpe6nzb().s[121]++;
    if (!this.database) {
      /* istanbul ignore next */
      cov_2nlfpe6nzb().b[22][0]++;
      cov_2nlfpe6nzb().s[122]++;
      await this.initialize();
    } else
    /* istanbul ignore next */
    {
      cov_2nlfpe6nzb().b[22][1]++;
    }
    cov_2nlfpe6nzb().s[123]++;
    try {
      const container =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[124]++, this.database.container(this.CONTAINERS.DELETION_REQUESTS));
      const {
        resource: request
      } =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[125]++, await container.item(requestId, requestId).read());
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[126]++;
      if (!request) {
        /* istanbul ignore next */
        cov_2nlfpe6nzb().b[23][0]++;
        cov_2nlfpe6nzb().s[127]++;
        throw new Error('Deletion request not found');
      } else
      /* istanbul ignore next */
      {
        cov_2nlfpe6nzb().b[23][1]++;
      }
      cov_2nlfpe6nzb().s[128]++;
      if (request.status !== 'pending') {
        /* istanbul ignore next */
        cov_2nlfpe6nzb().b[24][0]++;
        cov_2nlfpe6nzb().s[129]++;
        throw new Error(`Cannot process request with status: ${request.status}`);
      } else
      /* istanbul ignore next */
      {
        cov_2nlfpe6nzb().b[24][1]++;
      }
      // Update status to processing
      cov_2nlfpe6nzb().s[130]++;
      await container.item(requestId, request.partitionKey).patch([{
        op: 'replace',
        path: '/status',
        value: 'processing'
      }]);
      const deletedData =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[131]++, []);
      const errors =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[132]++, []);
      // Delete from Cosmos DB containers
      const containersToDelete =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[133]++, ['users', 'profiles', 'resumes', 'interviews', 'feedback', 'usage', 'notifications', 'emailVerifications']);
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[134]++;
      for (const containerName of containersToDelete) {
        /* istanbul ignore next */
        cov_2nlfpe6nzb().s[135]++;
        try {
          const deleted =
          /* istanbul ignore next */
          (cov_2nlfpe6nzb().s[136]++, await this.deleteFromContainer(containerName, request.userId));
          /* istanbul ignore next */
          cov_2nlfpe6nzb().s[137]++;
          if (deleted > 0) {
            /* istanbul ignore next */
            cov_2nlfpe6nzb().b[25][0]++;
            cov_2nlfpe6nzb().s[138]++;
            deletedData.push(`${containerName} (${deleted} items)`);
          } else
          /* istanbul ignore next */
          {
            cov_2nlfpe6nzb().b[25][1]++;
          }
        } catch (error) {
          const errorMsg =
          /* istanbul ignore next */
          (cov_2nlfpe6nzb().s[139]++, `Failed to delete from ${containerName}: ${error}`);
          /* istanbul ignore next */
          cov_2nlfpe6nzb().s[140]++;
          errors.push(errorMsg);
          /* istanbul ignore next */
          cov_2nlfpe6nzb().s[141]++;
          console.error(`❌ ${errorMsg}`);
        }
      }
      // Delete from Azure Blob Storage
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[142]++;
      try {
        const deletedBlobContainers =
        /* istanbul ignore next */
        (cov_2nlfpe6nzb().s[143]++, await this.deleteFromBlobStorage(request.userId));
        /* istanbul ignore next */
        cov_2nlfpe6nzb().s[144]++;
        if (deletedBlobContainers.length > 0) {
          /* istanbul ignore next */
          cov_2nlfpe6nzb().b[26][0]++;
          cov_2nlfpe6nzb().s[145]++;
          deletedData.push(`blob-storage (${deletedBlobContainers.join(', ')})`);
        } else
        /* istanbul ignore next */
        {
          cov_2nlfpe6nzb().b[26][1]++;
        }
      } catch (error) {
        const errorMsg =
        /* istanbul ignore next */
        (cov_2nlfpe6nzb().s[146]++, `Failed to delete from blob storage: ${error}`);
        /* istanbul ignore next */
        cov_2nlfpe6nzb().s[147]++;
        errors.push(errorMsg);
        /* istanbul ignore next */
        cov_2nlfpe6nzb().s[148]++;
        console.error(`❌ ${errorMsg}`);
      }
      // Update request with results
      const finalStatus =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[149]++, errors.length > 0 ?
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().b[27][0]++, 'completed') :
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().b[27][1]++, 'completed')); // Still completed even with some errors
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[150]++;
      await container.item(requestId, request.partitionKey).patch([{
        op: 'replace',
        path: '/status',
        value: finalStatus
      }, {
        op: 'replace',
        path: '/completedDate',
        value: new Date().toISOString()
      }, {
        op: 'replace',
        path: '/deletedData',
        value: deletedData
      }, {
        op: 'replace',
        path: '/errors',
        value: errors
      }]);
      // Create audit log entry
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[151]++;
      await this.createAuditLogEntry({
        userId: request.userId,
        action: 'data_deletion_processed',
        details: {
          requestId,
          deletedData,
          errors,
          status: finalStatus
        },
        complianceOfficer: 'system'
      });
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[152]++;
      console.log(`✅ Data deletion processed for user ${request.userId}`);
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[153]++;
      console.log(`   Deleted: ${deletedData.join(', ')}`);
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[154]++;
      if (errors.length > 0) {
        /* istanbul ignore next */
        cov_2nlfpe6nzb().b[28][0]++;
        cov_2nlfpe6nzb().s[155]++;
        console.log(`   Errors: ${errors.join(', ')}`);
      } else
      /* istanbul ignore next */
      {
        cov_2nlfpe6nzb().b[28][1]++;
      }
      cov_2nlfpe6nzb().s[156]++;
      return {
        success: errors.length === 0,
        deletedData,
        errors
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[157]++;
      console.error('❌ Failed to process data deletion:', error);
      // Update request status to failed
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[158]++;
      try {
        const container =
        /* istanbul ignore next */
        (cov_2nlfpe6nzb().s[159]++, this.database.container(this.CONTAINERS.DELETION_REQUESTS));
        /* istanbul ignore next */
        cov_2nlfpe6nzb().s[160]++;
        await container.item(requestId, requestId).patch([{
          op: 'replace',
          path: '/status',
          value: 'failed'
        }, {
          op: 'replace',
          path: '/errors',
          value: [error instanceof Error ?
          /* istanbul ignore next */
          (cov_2nlfpe6nzb().b[29][0]++, error.message) :
          /* istanbul ignore next */
          (cov_2nlfpe6nzb().b[29][1]++, 'Unknown error')]
        }]);
      } catch (updateError) {
        /* istanbul ignore next */
        cov_2nlfpe6nzb().s[161]++;
        console.error('❌ Failed to update request status to failed:', updateError);
      }
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[162]++;
      throw error;
    }
  }
  /**
   * Get pending deletion requests that are ready for processing
   */
  async getPendingDeletions() {
    /* istanbul ignore next */
    cov_2nlfpe6nzb().f[18]++;
    cov_2nlfpe6nzb().s[163]++;
    if (!this.database) {
      /* istanbul ignore next */
      cov_2nlfpe6nzb().b[30][0]++;
      cov_2nlfpe6nzb().s[164]++;
      await this.initialize();
    } else
    /* istanbul ignore next */
    {
      cov_2nlfpe6nzb().b[30][1]++;
    }
    cov_2nlfpe6nzb().s[165]++;
    try {
      const container =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[166]++, this.database.container(this.CONTAINERS.DELETION_REQUESTS));
      const now =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[167]++, new Date().toISOString());
      const query =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[168]++, {
        query: 'SELECT * FROM c WHERE c.status = @status AND c.scheduledDate <= @now',
        parameters: [{
          name: '@status',
          value: 'pending'
        }, {
          name: '@now',
          value: now
        }]
      });
      const {
        resources
      } =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[169]++, await container.items.query(query).fetchAll());
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[170]++;
      return resources;
    } catch (error) {
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[171]++;
      console.error('❌ Failed to get pending deletions:', error);
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[172]++;
      throw error;
    }
  }
  /**
   * Get deletion request status
   */
  async getDeletionRequestStatus(requestId) {
    /* istanbul ignore next */
    cov_2nlfpe6nzb().f[19]++;
    cov_2nlfpe6nzb().s[173]++;
    if (!this.database) {
      /* istanbul ignore next */
      cov_2nlfpe6nzb().b[31][0]++;
      cov_2nlfpe6nzb().s[174]++;
      await this.initialize();
    } else
    /* istanbul ignore next */
    {
      cov_2nlfpe6nzb().b[31][1]++;
    }
    cov_2nlfpe6nzb().s[175]++;
    try {
      const container =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[176]++, this.database.container(this.CONTAINERS.DELETION_REQUESTS));
      const {
        resource
      } =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[177]++, await container.item(requestId, requestId).read());
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[178]++;
      return /* istanbul ignore next */(cov_2nlfpe6nzb().b[32][0]++, resource) ||
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().b[32][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[179]++;
      if (error.code === 404) {
        /* istanbul ignore next */
        cov_2nlfpe6nzb().b[33][0]++;
        cov_2nlfpe6nzb().s[180]++;
        return null; // Request not found
      } else
      /* istanbul ignore next */
      {
        cov_2nlfpe6nzb().b[33][1]++;
      }
      cov_2nlfpe6nzb().s[181]++;
      console.error('❌ Failed to get deletion request status:', error);
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[182]++;
      throw error;
    }
  }
  /**
   * Export user data (GDPR Subject Access Request)
   */
  async exportUserData(userId) {
    /* istanbul ignore next */
    cov_2nlfpe6nzb().f[20]++;
    cov_2nlfpe6nzb().s[183]++;
    if (!this.database) {
      /* istanbul ignore next */
      cov_2nlfpe6nzb().b[34][0]++;
      cov_2nlfpe6nzb().s[184]++;
      await this.initialize();
    } else
    /* istanbul ignore next */
    {
      cov_2nlfpe6nzb().b[34][1]++;
    }
    cov_2nlfpe6nzb().s[185]++;
    try {
      const exportData =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[186]++, {
        userId,
        exportDate: new Date().toISOString(),
        data: {}
      });
      // Export from Cosmos DB containers
      const containersToExport =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[187]++, ['users', 'profiles', 'resumes', 'interviews', 'usage']);
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[188]++;
      for (const containerName of containersToExport) {
        /* istanbul ignore next */
        cov_2nlfpe6nzb().s[189]++;
        try {
          const containerClient =
          /* istanbul ignore next */
          (cov_2nlfpe6nzb().s[190]++, this.database.container(containerName));
          const query =
          /* istanbul ignore next */
          (cov_2nlfpe6nzb().s[191]++, {
            query: 'SELECT * FROM c WHERE c.userId = @userId',
            parameters: [{
              name: '@userId',
              value: userId
            }]
          });
          const {
            resources
          } =
          /* istanbul ignore next */
          (cov_2nlfpe6nzb().s[192]++, await containerClient.items.query(query, {
            partitionKey: userId
          }).fetchAll());
          /* istanbul ignore next */
          cov_2nlfpe6nzb().s[193]++;
          if (resources.length > 0) {
            /* istanbul ignore next */
            cov_2nlfpe6nzb().b[35][0]++;
            cov_2nlfpe6nzb().s[194]++;
            exportData.data[containerName] = resources;
          } else
          /* istanbul ignore next */
          {
            cov_2nlfpe6nzb().b[35][1]++;
          }
        } catch (error) {
          /* istanbul ignore next */
          cov_2nlfpe6nzb().s[195]++;
          console.warn(`Failed to export from ${containerName}:`, error);
        }
      }
      // Export consent data
      const consent =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[196]++, await this.getConsent(userId));
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[197]++;
      if (consent) {
        /* istanbul ignore next */
        cov_2nlfpe6nzb().b[36][0]++;
        cov_2nlfpe6nzb().s[198]++;
        exportData.data.consents = consent;
      } else
      /* istanbul ignore next */
      {
        cov_2nlfpe6nzb().b[36][1]++;
      }
      // Export audit logs related to this user
      const auditLogs =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[199]++, await this.getAuditLogs(userId));
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[200]++;
      if (auditLogs.length > 0) {
        /* istanbul ignore next */
        cov_2nlfpe6nzb().b[37][0]++;
        cov_2nlfpe6nzb().s[201]++;
        exportData.data.auditLogs = auditLogs;
      } else
      /* istanbul ignore next */
      {
        cov_2nlfpe6nzb().b[37][1]++;
      }
      // Create audit log entry for data export
      cov_2nlfpe6nzb().s[202]++;
      await this.createAuditLogEntry({
        userId,
        action: 'data_exported',
        details: {
          exportedContainers: Object.keys(exportData.data),
          totalRecords: Object.values(exportData.data).flat().length
        }
      });
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[203]++;
      console.log(`✅ User data exported for ${userId}`);
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[204]++;
      return exportData;
    } catch (error) {
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[205]++;
      console.error('❌ Failed to export user data:', error);
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[206]++;
      throw new Error('Failed to export user data');
    }
  }
  /**
   * Create audit log entry
   */
  async createAuditLogEntry(entry) {
    /* istanbul ignore next */
    cov_2nlfpe6nzb().f[21]++;
    cov_2nlfpe6nzb().s[207]++;
    if (!this.database) {
      /* istanbul ignore next */
      cov_2nlfpe6nzb().b[38][0]++;
      cov_2nlfpe6nzb().s[208]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2nlfpe6nzb().b[38][1]++;
    }
    cov_2nlfpe6nzb().s[209]++;
    try {
      const auditEntry =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[210]++, Object.assign({
        id: `audit_${Date.now()}_${Math.random().toString(36).substring(2)}`,
        timestamp: new Date().toISOString(),
        partitionKey: entry.userId
      }, entry));
      const container =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[211]++, this.database.container(this.CONTAINERS.AUDIT_LOG));
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[212]++;
      await container.items.create(auditEntry);
    } catch (error) {
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[213]++;
      console.error('❌ Failed to create audit log entry:', error);
      // Don't throw - audit logging failure shouldn't stop the main operation
    }
  }
  /**
   * Get audit logs for a user
   */
  async getAuditLogs(userId, limit =
  /* istanbul ignore next */
  (cov_2nlfpe6nzb().b[39][0]++, 100)) {
    /* istanbul ignore next */
    cov_2nlfpe6nzb().f[22]++;
    cov_2nlfpe6nzb().s[214]++;
    if (!this.database) {
      /* istanbul ignore next */
      cov_2nlfpe6nzb().b[40][0]++;
      cov_2nlfpe6nzb().s[215]++;
      await this.initialize();
    } else
    /* istanbul ignore next */
    {
      cov_2nlfpe6nzb().b[40][1]++;
    }
    cov_2nlfpe6nzb().s[216]++;
    try {
      const container =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[217]++, this.database.container(this.CONTAINERS.AUDIT_LOG));
      const query =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[218]++, {
        query: 'SELECT * FROM c WHERE c.userId = @userId ORDER BY c.timestamp DESC',
        parameters: [{
          name: '@userId',
          value: userId
        }]
      });
      const {
        resources
      } =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[219]++, await container.items.query(query, {
        maxItemCount: limit,
        partitionKey: userId
      }).fetchNext());
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[220]++;
      return resources;
    } catch (error) {
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[221]++;
      console.error('❌ Failed to get audit logs:', error);
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[222]++;
      throw error;
    }
  }
  /**
   * Delete user data from a specific Cosmos DB container
   */
  async deleteFromContainer(containerName, userId) {
    /* istanbul ignore next */
    cov_2nlfpe6nzb().f[23]++;
    cov_2nlfpe6nzb().s[223]++;
    if (!this.database) {
      /* istanbul ignore next */
      cov_2nlfpe6nzb().b[41][0]++;
      cov_2nlfpe6nzb().s[224]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_2nlfpe6nzb().b[41][1]++;
    }
    cov_2nlfpe6nzb().s[225]++;
    try {
      const container =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[226]++, this.database.container(containerName));
      const query =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[227]++, {
        query: 'SELECT c.id FROM c WHERE c.userId = @userId',
        parameters: [{
          name: '@userId',
          value: userId
        }]
      });
      const {
        resources: items
      } =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[228]++, await container.items.query(query, {
        partitionKey: userId
      }).fetchAll());
      let deletedCount =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[229]++, 0);
      // Delete in batches to avoid overwhelming the database
      const batchSize =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[230]++, 25);
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[231]++;
      for (let i =
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().s[232]++, 0); i < items.length; i += batchSize) {
        const batch =
        /* istanbul ignore next */
        (cov_2nlfpe6nzb().s[233]++, items.slice(i, i + batchSize));
        const deletePromises =
        /* istanbul ignore next */
        (cov_2nlfpe6nzb().s[234]++, batch.map(item => {
          /* istanbul ignore next */
          cov_2nlfpe6nzb().f[24]++;
          cov_2nlfpe6nzb().s[235]++;
          return container.item(item.id, userId).delete().catch(error => {
            /* istanbul ignore next */
            cov_2nlfpe6nzb().f[25]++;
            cov_2nlfpe6nzb().s[236]++;
            console.warn(`Failed to delete item ${item.id} from ${containerName}:`, error);
            /* istanbul ignore next */
            cov_2nlfpe6nzb().s[237]++;
            return null;
          });
        }));
        const results =
        /* istanbul ignore next */
        (cov_2nlfpe6nzb().s[238]++, await Promise.all(deletePromises));
        /* istanbul ignore next */
        cov_2nlfpe6nzb().s[239]++;
        deletedCount += results.filter(result => {
          /* istanbul ignore next */
          cov_2nlfpe6nzb().f[26]++;
          cov_2nlfpe6nzb().s[240]++;
          return result !== null;
        }).length;
      }
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[241]++;
      return deletedCount;
    } catch (error) {
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[242]++;
      console.error(`❌ Error deleting from container ${containerName}:`, error);
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[243]++;
      throw error;
    }
  }
  /**
   * Delete user files from Azure Blob Storage
   */
  async deleteFromBlobStorage(userId) {
    /* istanbul ignore next */
    cov_2nlfpe6nzb().f[27]++;
    var _a, e_1, _b, _c;
    /* istanbul ignore next */
    cov_2nlfpe6nzb().s[244]++;
    if (!this.blobServiceClient) {
      /* istanbul ignore next */
      cov_2nlfpe6nzb().b[42][0]++;
      cov_2nlfpe6nzb().s[245]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_2nlfpe6nzb().b[42][1]++;
    }
    const deletedContainers =
    /* istanbul ignore next */
    (cov_2nlfpe6nzb().s[246]++, []);
    const userContainers =
    /* istanbul ignore next */
    (cov_2nlfpe6nzb().s[247]++, ['user-files', 'resumes', 'profile-pics', 'documents']);
    /* istanbul ignore next */
    cov_2nlfpe6nzb().s[248]++;
    for (const containerName of userContainers) {
      /* istanbul ignore next */
      cov_2nlfpe6nzb().s[249]++;
      try {
        const containerClient =
        /* istanbul ignore next */
        (cov_2nlfpe6nzb().s[250]++, this.blobServiceClient.getContainerClient(containerName));
        const prefix =
        /* istanbul ignore next */
        (cov_2nlfpe6nzb().s[251]++, `users/${userId}/`);
        let deletedBlobs =
        /* istanbul ignore next */
        (cov_2nlfpe6nzb().s[252]++, 0);
        /* istanbul ignore next */
        cov_2nlfpe6nzb().s[253]++;
        try {
          /* istanbul ignore next */
          cov_2nlfpe6nzb().s[254]++;
          for (var _d =
            /* istanbul ignore next */
            (cov_2nlfpe6nzb().s[255]++, true), _e =
            /* istanbul ignore next */
            (cov_2nlfpe6nzb().s[256]++, e_1 = void 0, __asyncValues(containerClient.listBlobsFlat({
              prefix
            }))), _f; _f = await _e.next(), _a = _f.done, !_a; _d = true) {
            /* istanbul ignore next */
            cov_2nlfpe6nzb().s[257]++;
            _c = _f.value;
            /* istanbul ignore next */
            cov_2nlfpe6nzb().s[258]++;
            _d = false;
            const blob =
            /* istanbul ignore next */
            (cov_2nlfpe6nzb().s[259]++, _c);
            /* istanbul ignore next */
            cov_2nlfpe6nzb().s[260]++;
            try {
              /* istanbul ignore next */
              cov_2nlfpe6nzb().s[261]++;
              await containerClient.deleteBlob(blob.name);
              /* istanbul ignore next */
              cov_2nlfpe6nzb().s[262]++;
              deletedBlobs++;
            } catch (error) {
              /* istanbul ignore next */
              cov_2nlfpe6nzb().s[263]++;
              console.warn(`Failed to delete blob ${blob.name}:`, error);
            }
          }
        } catch (e_1_1) {
          /* istanbul ignore next */
          cov_2nlfpe6nzb().s[264]++;
          e_1 = {
            error: e_1_1
          };
        } finally {
          /* istanbul ignore next */
          cov_2nlfpe6nzb().s[265]++;
          try {
            /* istanbul ignore next */
            cov_2nlfpe6nzb().s[266]++;
            if (
            /* istanbul ignore next */
            (cov_2nlfpe6nzb().b[44][0]++, !_d) &&
            /* istanbul ignore next */
            (cov_2nlfpe6nzb().b[44][1]++, !_a) &&
            /* istanbul ignore next */
            (cov_2nlfpe6nzb().b[44][2]++, _b = _e.return)) {
              /* istanbul ignore next */
              cov_2nlfpe6nzb().b[43][0]++;
              cov_2nlfpe6nzb().s[267]++;
              await _b.call(_e);
            } else
            /* istanbul ignore next */
            {
              cov_2nlfpe6nzb().b[43][1]++;
            }
          } finally {
            /* istanbul ignore next */
            cov_2nlfpe6nzb().s[268]++;
            if (e_1) {
              /* istanbul ignore next */
              cov_2nlfpe6nzb().b[45][0]++;
              cov_2nlfpe6nzb().s[269]++;
              throw e_1.error;
            } else
            /* istanbul ignore next */
            {
              cov_2nlfpe6nzb().b[45][1]++;
            }
          }
        }
        /* istanbul ignore next */
        cov_2nlfpe6nzb().s[270]++;
        if (deletedBlobs > 0) {
          /* istanbul ignore next */
          cov_2nlfpe6nzb().b[46][0]++;
          cov_2nlfpe6nzb().s[271]++;
          deletedContainers.push(`${containerName} (${deletedBlobs} files)`);
        } else
        /* istanbul ignore next */
        {
          cov_2nlfpe6nzb().b[46][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_2nlfpe6nzb().s[272]++;
        console.warn(`Failed to access blob container ${containerName}:`, error);
      }
    }
    /* istanbul ignore next */
    cov_2nlfpe6nzb().s[273]++;
    return deletedContainers;
  }
  /**
   * Anonymize analytics data for GDPR compliance
   */
  anonymizeAnalyticsData(data) {
    /* istanbul ignore next */
    cov_2nlfpe6nzb().f[28]++;
    cov_2nlfpe6nzb().s[274]++;
    return {
      id: `anon_${Date.now()}_${Math.random().toString(36).substring(2)}`,
      timestamp: new Date().toISOString(),
      event: data.event,
      page: data.page,
      userId: this.hashUserId(data.userId),
      sessionId: this.hashSessionId(data.sessionId),
      metadata: this.sanitizeMetadata(
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().b[47][0]++, data.metadata) ||
      /* istanbul ignore next */
      (cov_2nlfpe6nzb().b[47][1]++, {})),
      partitionKey: 'anonymized'
    };
  }
  /**
   * Privacy utility methods
   */
  maskEmail(email) {
    /* istanbul ignore next */
    cov_2nlfpe6nzb().f[29]++;
    const [username, domain] =
    /* istanbul ignore next */
    (cov_2nlfpe6nzb().s[275]++, email.split('@'));
    const maskedUsername =
    /* istanbul ignore next */
    (cov_2nlfpe6nzb().s[276]++, username.length > 2 ?
    /* istanbul ignore next */
    (cov_2nlfpe6nzb().b[48][0]++, username.charAt(0) + '*'.repeat(username.length - 2) + username.charAt(username.length - 1)) :
    /* istanbul ignore next */
    (cov_2nlfpe6nzb().b[48][1]++, '*'.repeat(username.length)));
    /* istanbul ignore next */
    cov_2nlfpe6nzb().s[277]++;
    return `${maskedUsername}@${domain}`;
  }
  maskPhoneNumber(phone) {
    /* istanbul ignore next */
    cov_2nlfpe6nzb().f[30]++;
    const cleaned =
    /* istanbul ignore next */
    (cov_2nlfpe6nzb().s[278]++, phone.replace(/\D/g, ''));
    /* istanbul ignore next */
    cov_2nlfpe6nzb().s[279]++;
    if (cleaned.length > 4) {
      /* istanbul ignore next */
      cov_2nlfpe6nzb().b[49][0]++;
      cov_2nlfpe6nzb().s[280]++;
      return cleaned.substring(0, 3) + '*'.repeat(cleaned.length - 6) + cleaned.substring(cleaned.length - 3);
    } else
    /* istanbul ignore next */
    {
      cov_2nlfpe6nzb().b[49][1]++;
    }
    cov_2nlfpe6nzb().s[281]++;
    return '*'.repeat(cleaned.length);
  }
  hashUserId(userId) {
    /* istanbul ignore next */
    cov_2nlfpe6nzb().f[31]++;
    cov_2nlfpe6nzb().s[282]++;
    return Buffer.from(userId + 'salt').toString('base64').substring(0, 12);
  }
  hashSessionId(sessionId) {
    /* istanbul ignore next */
    cov_2nlfpe6nzb().f[32]++;
    cov_2nlfpe6nzb().s[283]++;
    return Buffer.from(sessionId + 'salt').toString('base64').substring(0, 8);
  }
  sanitizeMetadata(metadata) {
    /* istanbul ignore next */
    cov_2nlfpe6nzb().f[33]++;
    const sanitized =
    /* istanbul ignore next */
    (cov_2nlfpe6nzb().s[284]++, Object.assign({}, metadata));
    // Remove potential PII from metadata
    const piiKeys =
    /* istanbul ignore next */
    (cov_2nlfpe6nzb().s[285]++, ['email', 'phone', 'name', 'address', 'ssn', 'creditCard', 'userId']);
    /* istanbul ignore next */
    cov_2nlfpe6nzb().s[286]++;
    piiKeys.forEach(key => {
      /* istanbul ignore next */
      cov_2nlfpe6nzb().f[34]++;
      cov_2nlfpe6nzb().s[287]++;
      if (sanitized[key]) {
        /* istanbul ignore next */
        cov_2nlfpe6nzb().b[50][0]++;
        cov_2nlfpe6nzb().s[288]++;
        delete sanitized[key];
      } else
      /* istanbul ignore next */
      {
        cov_2nlfpe6nzb().b[50][1]++;
      }
    });
    /* istanbul ignore next */
    cov_2nlfpe6nzb().s[289]++;
    return sanitized;
  }
}
/* istanbul ignore next */
cov_2nlfpe6nzb().s[290]++;
exports.AzureGDPRService = AzureGDPRService;
/* istanbul ignore next */
cov_2nlfpe6nzb().s[291]++;
exports.azureGDPRService = AzureGDPRService.getInstance();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,