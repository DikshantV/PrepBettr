{"file":"/Users/dikshantvashistha/PrepBettr/lib/services/theirstack-credits.ts","mappings":"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","names":[],"sources":["/Users/dikshantvashistha/PrepBettr/lib/services/theirstack-credits.ts"],"sourcesContent":["import { getAdminFirestore } from '@/lib/firebase/admin';\n\nexport interface TheirStackCreditsData {\n  month: string; // YYYY-MM format\n  creditsUsed: number;\n  creditsRemaining: number;\n  lastUpdated: Date;\n  warning?: string;\n  isOverLimit: boolean;\n}\n\nexport interface TheirStackCreditsSummary {\n  currentMonth: TheirStackCreditsData;\n  previousMonth: TheirStackCreditsData | null;\n  yearToDate: number;\n  averageMonthly: number;\n}\n\nexport class TheirStackCreditsService {\n  private static instance: TheirStackCreditsService;\n  private firestore: any = null;\n\n  // Credit limits\n  private static readonly FREE_TIER_LIMIT = 200;\n  private static readonly WARNING_THRESHOLD = 0.8; // 80%\n  private static readonly EMERGENCY_LIMIT = 500;\n\n  private constructor() {\n    this.initializeFirestore();\n  }\n\n  public static getInstance(): TheirStackCreditsService {\n    if (!TheirStackCreditsService.instance) {\n      TheirStackCreditsService.instance = new TheirStackCreditsService();\n    }\n    return TheirStackCreditsService.instance;\n  }\n\n  private async initializeFirestore(): Promise<void> {\n    try {\n      this.firestore = await getAdminFirestore();\n    } catch (error) {\n      console.error('‚ùå Failed to initialize Firestore for TheirStack credits service:', error);\n    }\n  }\n\n  /**\n   * Get current month's credit usage\n   */\n  async getCurrentCredits(): Promise<TheirStackCreditsData> {\n    const currentMonth = new Date().toISOString().slice(0, 7);\n    return this.getCreditsForMonth(currentMonth);\n  }\n\n  /**\n   * Get credits usage for a specific month\n   */\n  async getCreditsForMonth(month: string): Promise<TheirStackCreditsData> {\n    if (!this.firestore) {\n      await this.initializeFirestore();\n    }\n\n    try {\n      const docRef = this.firestore\n        .collection('usage')\n        .doc('theirstackCredits')\n        .collection('monthly')\n        .doc(month);\n      \n      const doc = await docRef.get();\n      const creditsUsed = doc.exists ? (doc.data()?.creditsUsed || 0) : 0;\n      const creditsRemaining = Math.max(0, TheirStackCreditsService.FREE_TIER_LIMIT - creditsUsed);\n      \n      // Generate warning message if needed\n      let warning: string | undefined;\n      const isOverLimit = creditsUsed >= TheirStackCreditsService.EMERGENCY_LIMIT;\n      \n      if (isOverLimit) {\n        warning = `‚ö†Ô∏è Emergency limit exceeded (${creditsUsed}/${TheirStackCreditsService.EMERGENCY_LIMIT})`;\n      } else if (creditsUsed >= TheirStackCreditsService.FREE_TIER_LIMIT * TheirStackCreditsService.WARNING_THRESHOLD) {\n        const percentage = Math.round((creditsUsed / TheirStackCreditsService.FREE_TIER_LIMIT) * 100);\n        warning = `‚ö†Ô∏è ${percentage}% of free tier used (${creditsUsed}/${TheirStackCreditsService.FREE_TIER_LIMIT})`;\n      }\n\n      return {\n        month,\n        creditsUsed,\n        creditsRemaining,\n        lastUpdated: doc.exists ? (doc.data()?.lastUpdated?.toDate() || new Date()) : new Date(),\n        warning,\n        isOverLimit\n      };\n\n    } catch (error) {\n      console.error('‚ùå Failed to get TheirStack credits for month:', month, error);\n      \n      // Return default data on error\n      return {\n        month,\n        creditsUsed: 0,\n        creditsRemaining: TheirStackCreditsService.FREE_TIER_LIMIT,\n        lastUpdated: new Date(),\n        isOverLimit: false\n      };\n    }\n  }\n\n  /**\n   * Get comprehensive credits summary including historical data\n   */\n  async getCreditsSummary(): Promise<TheirStackCreditsSummary> {\n    const currentMonth = new Date().toISOString().slice(0, 7);\n    const previousMonth = this.getPreviousMonth(currentMonth);\n\n    const [currentMonthData, previousMonthData, yearToDateCredits, averageMonthlyCredits] = await Promise.all([\n      this.getCreditsForMonth(currentMonth),\n      this.getCreditsForMonth(previousMonth),\n      this.getYearToDateCredits(),\n      this.getAverageMonthlyCredits()\n    ]);\n\n    return {\n      currentMonth: currentMonthData,\n      previousMonth: previousMonthData.creditsUsed > 0 ? previousMonthData : null,\n      yearToDate: yearToDateCredits,\n      averageMonthly: averageMonthlyCredits\n    };\n  }\n\n  /**\n   * Get total credits used in current year\n   */\n  async getYearToDateCredits(): Promise<number> {\n    if (!this.firestore) {\n      await this.initializeFirestore();\n    }\n\n    try {\n      const currentYear = new Date().getFullYear();\n      const yearStart = `${currentYear}-01`;\n      const yearEnd = `${currentYear}-12`;\n\n      const snapshot = await this.firestore\n        .collection('usage')\n        .doc('theirstackCredits')\n        .collection('monthly')\n        .where('month', '>=', yearStart)\n        .where('month', '<=', yearEnd)\n        .get();\n\n      let totalCredits = 0;\n      snapshot.docs.forEach((doc: any) => {\n        totalCredits += doc.data()?.creditsUsed || 0;\n      });\n\n      return totalCredits;\n\n    } catch (error) {\n      console.error('‚ùå Failed to get year-to-date credits:', error);\n      return 0;\n    }\n  }\n\n  /**\n   * Get average monthly credits usage (last 6 months)\n   */\n  async getAverageMonthlyCredits(): Promise<number> {\n    if (!this.firestore) {\n      await this.initializeFirestore();\n    }\n\n    try {\n      // Get last 6 months\n      const months: string[] = [];\n      const now = new Date();\n      \n      for (let i = 0; i < 6; i++) {\n        const date = new Date(now.getFullYear(), now.getMonth() - i, 1);\n        months.push(date.toISOString().slice(0, 7));\n      }\n\n      const snapshot = await this.firestore\n        .collection('usage')\n        .doc('theirstackCredits')\n        .collection('monthly')\n        .where('month', 'in', months)\n        .get();\n\n      let totalCredits = 0;\n      let monthsWithData = 0;\n      \n      snapshot.docs.forEach((doc: any) => {\n        const credits = doc.data()?.creditsUsed || 0;\n        if (credits > 0) {\n          totalCredits += credits;\n          monthsWithData++;\n        }\n      });\n\n      return monthsWithData > 0 ? Math.round(totalCredits / monthsWithData) : 0;\n\n    } catch (error) {\n      console.error('‚ùå Failed to get average monthly credits:', error);\n      return 0;\n    }\n  }\n\n  /**\n   * Check if credits are approaching limits and return alert level\n   */\n  getCreditAlertLevel(creditsUsed: number): 'none' | 'warning' | 'danger' | 'emergency' {\n    if (creditsUsed >= TheirStackCreditsService.EMERGENCY_LIMIT) {\n      return 'emergency';\n    } else if (creditsUsed >= TheirStackCreditsService.FREE_TIER_LIMIT) {\n      return 'danger';\n    } else if (creditsUsed >= TheirStackCreditsService.FREE_TIER_LIMIT * TheirStackCreditsService.WARNING_THRESHOLD) {\n      return 'warning';\n    }\n    return 'none';\n  }\n\n  /**\n   * Get credits health status for dashboard\n   */\n  async getCreditsHealthStatus(): Promise<{\n    status: 'healthy' | 'warning' | 'critical' | 'emergency';\n    message: string;\n    creditsUsed: number;\n    creditsRemaining: number;\n    percentage: number;\n  }> {\n    const currentCredits = await this.getCurrentCredits();\n    const percentage = Math.round((currentCredits.creditsUsed / TheirStackCreditsService.FREE_TIER_LIMIT) * 100);\n    \n    let status: 'healthy' | 'warning' | 'critical' | 'emergency';\n    let message: string;\n\n    if (currentCredits.isOverLimit) {\n      status = 'emergency';\n      message = `Emergency limit exceeded! ${currentCredits.creditsUsed} credits used this month.`;\n    } else if (currentCredits.creditsUsed >= TheirStackCreditsService.FREE_TIER_LIMIT) {\n      status = 'critical';\n      message = `Free tier limit exceeded! ${currentCredits.creditsUsed}/${TheirStackCreditsService.FREE_TIER_LIMIT} credits used (${percentage}%).`;\n    } else if (percentage >= 80) {\n      status = 'warning';\n      message = `Approaching free tier limit: ${currentCredits.creditsUsed}/${TheirStackCreditsService.FREE_TIER_LIMIT} credits used (${percentage}%).`;\n    } else {\n      status = 'healthy';\n      message = `Credits usage is healthy: ${currentCredits.creditsUsed}/${TheirStackCreditsService.FREE_TIER_LIMIT} credits used (${percentage}%).`;\n    }\n\n    return {\n      status,\n      message,\n      creditsUsed: currentCredits.creditsUsed,\n      creditsRemaining: currentCredits.creditsRemaining,\n      percentage\n    };\n  }\n\n  /**\n   * Get historical credits data for charts (last 12 months)\n   */\n  async getHistoricalCreditsData(): Promise<Array<{ month: string; creditsUsed: number; date: Date }>> {\n    if (!this.firestore) {\n      await this.initializeFirestore();\n    }\n\n    try {\n      // Get last 12 months\n      const months: string[] = [];\n      const now = new Date();\n      \n      for (let i = 11; i >= 0; i--) {\n        const date = new Date(now.getFullYear(), now.getMonth() - i, 1);\n        months.push(date.toISOString().slice(0, 7));\n      }\n\n      const snapshot = await this.firestore\n        .collection('usage')\n        .doc('theirstackCredits')\n        .collection('monthly')\n        .where('month', 'in', months)\n        .get();\n\n      // Create a map for quick lookup\n      const dataMap = new Map();\n      snapshot.docs.forEach((doc: any) => {\n        const data = doc.data();\n        dataMap.set(data.month, data.creditsUsed || 0);\n      });\n\n      // Build the historical data array\n      return months.map(month => ({\n        month,\n        creditsUsed: dataMap.get(month) || 0,\n        date: new Date(`${month}-01`)\n      }));\n\n    } catch (error) {\n      console.error('‚ùå Failed to get historical credits data:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Helper method to get previous month string\n   */\n  private getPreviousMonth(month: string): string {\n    const [year, monthNum] = month.split('-').map(Number);\n    const date = new Date(year, monthNum - 2, 1); // monthNum - 2 because Date months are 0-indexed\n    return date.toISOString().slice(0, 7);\n  }\n\n  /**\n   * Get credits configuration for display\n   */\n  static getCreditsConfiguration() {\n    return {\n      freeTierLimit: TheirStackCreditsService.FREE_TIER_LIMIT,\n      warningThreshold: Math.round(TheirStackCreditsService.FREE_TIER_LIMIT * TheirStackCreditsService.WARNING_THRESHOLD),\n      emergencyLimit: TheirStackCreditsService.EMERGENCY_LIMIT,\n      warningPercentage: TheirStackCreditsService.WARNING_THRESHOLD * 100\n    };\n  }\n}\n\n// Export convenience functions\nexport const theirStackCreditsService = TheirStackCreditsService.getInstance();\n\nexport async function getCurrentTheirStackCredits(): Promise<TheirStackCreditsData> {\n  return theirStackCreditsService.getCurrentCredits();\n}\n\nexport async function getTheirStackCreditsSummary(): Promise<TheirStackCreditsSummary> {\n  return theirStackCreditsService.getCreditsSummary();\n}\n\nexport async function getTheirStackCreditsHealth() {\n  return theirStackCreditsService.getCreditsHealthStatus();\n}\n\nexport default TheirStackCreditsService;\n"],"version":3}