b958e2f5ec2d7cbd2a065cb91c11142a
/* istanbul ignore next */
function cov_22pt3bunhp() {
  var path = "/Users/dikshantvashistha/PrepBettr/azure/lib/services/test-preliminary-flow.js";
  var hash = "608356c3d87d1ebc45ed29f868049b4dfa0d43c7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/azure/lib/services/test-preliminary-flow.js",
    statementMap: {
      "0": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 15,
          column: 6
        }
      },
      "1": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 25
        }
      },
      "2": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 17,
          column: 31
        }
      },
      "3": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 18,
          column: 50
        }
      },
      "4": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 19,
          column: 34
        }
      },
      "5": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 23,
          column: 25
        }
      },
      "6": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 24,
          column: 31
        }
      },
      "7": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 25,
          column: 34
        }
      },
      "8": {
        start: {
          line: 27,
          column: 21
        },
        end: {
          line: 27,
          column: 125
        }
      },
      "9": {
        start: {
          line: 28,
          column: 26
        },
        end: {
          line: 28,
          column: 49
        }
      },
      "10": {
        start: {
          line: 29,
          column: 27
        },
        end: {
          line: 29,
          column: 60
        }
      },
      "11": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 35,
          column: 6
        }
      },
      "12": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 71,
          column: 5
        }
      },
      "13": {
        start: {
          line: 42,
          column: 27
        },
        end: {
          line: 42,
          column: 104
        }
      },
      "14": {
        start: {
          line: 43,
          column: 6
        },
        end: {
          line: 43,
          column: 75
        }
      },
      "15": {
        start: {
          line: 46,
          column: 6
        },
        end: {
          line: 46,
          column: 25
        }
      },
      "16": {
        start: {
          line: 49,
          column: 6
        },
        end: {
          line: 70,
          column: 7
        }
      },
      "17": {
        start: {
          line: 50,
          column: 29
        },
        end: {
          line: 50,
          column: 67
        }
      },
      "18": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 55,
          column: 10
        }
      },
      "19": {
        start: {
          line: 58,
          column: 30
        },
        end: {
          line: 58,
          column: 55
        }
      },
      "20": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 82
        }
      },
      "21": {
        start: {
          line: 61,
          column: 35
        },
        end: {
          line: 61,
          column: 86
        }
      },
      "22": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 91
        }
      },
      "23": {
        start: {
          line: 64,
          column: 31
        },
        end: {
          line: 64,
          column: 55
        }
      },
      "24": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 69,
          column: 10
        }
      },
      "25": {
        start: {
          line: 74,
          column: 4
        },
        end: {
          line: 79,
          column: 6
        }
      },
      "26": {
        start: {
          line: 83,
          column: 67
        },
        end: {
          line: 83,
          column: 88
        }
      },
      "27": {
        start: {
          line: 84,
          column: 4
        },
        end: {
          line: 89,
          column: 49
        }
      },
      "28": {
        start: {
          line: 93,
          column: 56
        },
        end: {
          line: 93,
          column: 77
        }
      },
      "29": {
        start: {
          line: 94,
          column: 18
        },
        end: {
          line: 94,
          column: 43
        }
      },
      "30": {
        start: {
          line: 96,
          column: 4
        },
        end: {
          line: 102,
          column: 5
        }
      },
      "31": {
        start: {
          line: 97,
          column: 6
        },
        end: {
          line: 97,
          column: 229
        }
      },
      "32": {
        start: {
          line: 98,
          column: 11
        },
        end: {
          line: 102,
          column: 5
        }
      },
      "33": {
        start: {
          line: 99,
          column: 6
        },
        end: {
          line: 99,
          column: 245
        }
      },
      "34": {
        start: {
          line: 101,
          column: 6
        },
        end: {
          line: 101,
          column: 216
        }
      },
      "35": {
        start: {
          line: 108,
          column: 2
        },
        end: {
          line: 108,
          column: 57
        }
      },
      "36": {
        start: {
          line: 109,
          column: 2
        },
        end: {
          line: 109,
          column: 57
        }
      },
      "37": {
        start: {
          line: 111,
          column: 18
        },
        end: {
          line: 111,
          column: 46
        }
      },
      "38": {
        start: {
          line: 114,
          column: 2
        },
        end: {
          line: 114,
          column: 44
        }
      },
      "39": {
        start: {
          line: 115,
          column: 17
        },
        end: {
          line: 115,
          column: 59
        }
      },
      "40": {
        start: {
          line: 116,
          column: 2
        },
        end: {
          line: 116,
          column: 39
        }
      },
      "41": {
        start: {
          line: 117,
          column: 2
        },
        end: {
          line: 117,
          column: 58
        }
      },
      "42": {
        start: {
          line: 120,
          column: 22
        },
        end: {
          line: 126,
          column: 3
        }
      },
      "43": {
        start: {
          line: 128,
          column: 2
        },
        end: {
          line: 143,
          column: 3
        }
      },
      "44": {
        start: {
          line: 128,
          column: 15
        },
        end: {
          line: 128,
          column: 16
        }
      },
      "45": {
        start: {
          line: 129,
          column: 4
        },
        end: {
          line: 129,
          column: 41
        }
      },
      "46": {
        start: {
          line: 130,
          column: 4
        },
        end: {
          line: 130,
          column: 65
        }
      },
      "47": {
        start: {
          line: 131,
          column: 4
        },
        end: {
          line: 131,
          column: 43
        }
      },
      "48": {
        start: {
          line: 132,
          column: 4
        },
        end: {
          line: 132,
          column: 58
        }
      },
      "49": {
        start: {
          line: 134,
          column: 4
        },
        end: {
          line: 141,
          column: 5
        }
      },
      "50": {
        start: {
          line: 135,
          column: 6
        },
        end: {
          line: 135,
          column: 57
        }
      },
      "51": {
        start: {
          line: 136,
          column: 6
        },
        end: {
          line: 136,
          column: 69
        }
      },
      "52": {
        start: {
          line: 137,
          column: 6
        },
        end: {
          line: 140,
          column: 9
        }
      },
      "53": {
        start: {
          line: 142,
          column: 4
        },
        end: {
          line: 142,
          column: 27
        }
      },
      "54": {
        start: {
          line: 146,
          column: 2
        },
        end: {
          line: 146,
          column: 104
        }
      },
      "55": {
        start: {
          line: 147,
          column: 2
        },
        end: {
          line: 147,
          column: 131
        }
      },
      "56": {
        start: {
          line: 148,
          column: 2
        },
        end: {
          line: 148,
          column: 41
        }
      },
      "57": {
        start: {
          line: 149,
          column: 2
        },
        end: {
          line: 149,
          column: 56
        }
      },
      "58": {
        start: {
          line: 150,
          column: 2
        },
        end: {
          line: 152,
          column: 3
        }
      },
      "59": {
        start: {
          line: 151,
          column: 4
        },
        end: {
          line: 151,
          column: 62
        }
      },
      "60": {
        start: {
          line: 154,
          column: 2
        },
        end: {
          line: 154,
          column: 57
        }
      },
      "61": {
        start: {
          line: 155,
          column: 2
        },
        end: {
          line: 155,
          column: 34
        }
      },
      "62": {
        start: {
          line: 159,
          column: 0
        },
        end: {
          line: 159,
          column: 43
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 2
          },
          end: {
            line: 8,
            column: 3
          }
        },
        loc: {
          start: {
            line: 8,
            column: 16
          },
          end: {
            line: 20,
            column: 3
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 22,
            column: 2
          },
          end: {
            line: 22,
            column: 3
          }
        },
        loc: {
          start: {
            line: 22,
            column: 37
          },
          end: {
            line: 36,
            column: 3
          }
        },
        line: 22
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 38,
            column: 2
          },
          end: {
            line: 38,
            column: 3
          }
        },
        loc: {
          start: {
            line: 38,
            column: 42
          },
          end: {
            line: 80,
            column: 3
          }
        },
        line: 38
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 82,
            column: 2
          },
          end: {
            line: 82,
            column: 3
          }
        },
        loc: {
          start: {
            line: 82,
            column: 23
          },
          end: {
            line: 90,
            column: 3
          }
        },
        line: 82
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 92,
            column: 2
          },
          end: {
            line: 92,
            column: 3
          }
        },
        loc: {
          start: {
            line: 92,
            column: 22
          },
          end: {
            line: 103,
            column: 3
          }
        },
        line: 92
      },
      "5": {
        name: "testPreliminaryFlow",
        decl: {
          start: {
            line: 107,
            column: 15
          },
          end: {
            line: 107,
            column: 34
          }
        },
        loc: {
          start: {
            line: 107,
            column: 37
          },
          end: {
            line: 156,
            column: 1
          }
        },
        line: 107
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 71,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 71,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "1": {
        loc: {
          start: {
            line: 49,
            column: 6
          },
          end: {
            line: 70,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 6
          },
          end: {
            line: 70,
            column: 7
          }
        }, {
          start: {
            line: 56,
            column: 13
          },
          end: {
            line: 70,
            column: 7
          }
        }],
        line: 49
      },
      "2": {
        loc: {
          start: {
            line: 61,
            column: 35
          },
          end: {
            line: 61,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 61,
            column: 35
          },
          end: {
            line: 61,
            column: 80
          }
        }, {
          start: {
            line: 61,
            column: 84
          },
          end: {
            line: 61,
            column: 86
          }
        }],
        line: 61
      },
      "3": {
        loc: {
          start: {
            line: 96,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        }, {
          start: {
            line: 98,
            column: 11
          },
          end: {
            line: 102,
            column: 5
          }
        }],
        line: 96
      },
      "4": {
        loc: {
          start: {
            line: 97,
            column: 136
          },
          end: {
            line: 97,
            column: 196
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 97,
            column: 136
          },
          end: {
            line: 97,
            column: 167
          }
        }, {
          start: {
            line: 97,
            column: 171
          },
          end: {
            line: 97,
            column: 196
          }
        }],
        line: 97
      },
      "5": {
        loc: {
          start: {
            line: 98,
            column: 11
          },
          end: {
            line: 102,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 11
          },
          end: {
            line: 102,
            column: 5
          }
        }, {
          start: {
            line: 100,
            column: 11
          },
          end: {
            line: 102,
            column: 5
          }
        }],
        line: 98
      },
      "6": {
        loc: {
          start: {
            line: 99,
            column: 155
          },
          end: {
            line: 99,
            column: 207
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 99,
            column: 155
          },
          end: {
            line: 99,
            column: 186
          }
        }, {
          start: {
            line: 99,
            column: 190
          },
          end: {
            line: 99,
            column: 207
          }
        }],
        line: 99
      },
      "7": {
        loc: {
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 141,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 141,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 134
      },
      "8": {
        loc: {
          start: {
            line: 150,
            column: 2
          },
          end: {
            line: 152,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 2
          },
          end: {
            line: 152,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0]
    },
    inputSourceMap: null,
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "608356c3d87d1ebc45ed29f868049b4dfa0d43c7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_22pt3bunhp = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_22pt3bunhp();
/**
 * Manual test script for AzureOpenAIService preliminary questions flow
 * Run this to test the sequential preliminary questions without OpenAI API
 */

// Mock implementation of AzureOpenAIService for testing
class MockAzureOpenAIService {
  constructor() {
    /* istanbul ignore next */
    cov_22pt3bunhp().f[0]++;
    cov_22pt3bunhp().s[0]++;
    this.prelimQuestions = ['What is your current role?', 'What primary tech stack do you use?', 'How many years of experience do you have?', 'What are your key skills?', 'How many interview questions would you like?'];
    /* istanbul ignore next */
    cov_22pt3bunhp().s[1]++;
    this.prelimIndex = 0;
    /* istanbul ignore next */
    cov_22pt3bunhp().s[2]++;
    this.candidateProfile = {};
    /* istanbul ignore next */
    cov_22pt3bunhp().s[3]++;
    this.interviewContext = {
      type: 'technical'
    };
    /* istanbul ignore next */
    cov_22pt3bunhp().s[4]++;
    this.conversationHistory = [];
  }
  async startInterviewConversation() {
    /* istanbul ignore next */
    cov_22pt3bunhp().f[1]++;
    cov_22pt3bunhp().s[5]++;
    this.prelimIndex = 0;
    /* istanbul ignore next */
    cov_22pt3bunhp().s[6]++;
    this.candidateProfile = {};
    /* istanbul ignore next */
    cov_22pt3bunhp().s[7]++;
    this.conversationHistory = [];
    const greeting =
    /* istanbul ignore next */
    (cov_22pt3bunhp().s[8]++, "Hello! Welcome to your interview practice session. Before we begin, I'd like to learn a bit about you.");
    const firstQuestion =
    /* istanbul ignore next */
    (cov_22pt3bunhp().s[9]++, this.prelimQuestions[0]);
    const openingMessage =
    /* istanbul ignore next */
    (cov_22pt3bunhp().s[10]++, `${greeting}\n\n${firstQuestion}`);
    /* istanbul ignore next */
    cov_22pt3bunhp().s[11]++;
    return {
      content: openingMessage,
      questionNumber: 0,
      isComplete: false
    };
  }
  async processUserResponse(userResponse) {
    /* istanbul ignore next */
    cov_22pt3bunhp().f[2]++;
    cov_22pt3bunhp().s[12]++;
    // Check if we're still in preliminary questions phase
    if (this.prelimIndex < this.prelimQuestions.length) {
      /* istanbul ignore next */
      cov_22pt3bunhp().b[0][0]++;
      // Store the user's answer
      const questionKeys =
      /* istanbul ignore next */
      (cov_22pt3bunhp().s[13]++, ['currentRole', 'techStack', 'yearsExperience', 'keySkills', 'questionCount']);
      /* istanbul ignore next */
      cov_22pt3bunhp().s[14]++;
      this.candidateProfile[questionKeys[this.prelimIndex]] = userResponse;

      // Increment to next preliminary question
      /* istanbul ignore next */
      cov_22pt3bunhp().s[15]++;
      this.prelimIndex++;

      // If there are more preliminary questions, return the next one
      /* istanbul ignore next */
      cov_22pt3bunhp().s[16]++;
      if (this.prelimIndex < this.prelimQuestions.length) {
        /* istanbul ignore next */
        cov_22pt3bunhp().b[1][0]++;
        const nextQuestion =
        /* istanbul ignore next */
        (cov_22pt3bunhp().s[17]++, this.prelimQuestions[this.prelimIndex]);
        /* istanbul ignore next */
        cov_22pt3bunhp().s[18]++;
        return {
          content: `Thank you! ${nextQuestion}`,
          questionNumber: 0,
          isComplete: false
        };
      } else {
        /* istanbul ignore next */
        cov_22pt3bunhp().b[1][1]++;
        // Preliminary questions complete
        const systemContext =
        /* istanbul ignore next */
        (cov_22pt3bunhp().s[19]++, this.buildSystemContext());
        /* istanbul ignore next */
        cov_22pt3bunhp().s[20]++;
        this.conversationHistory.push({
          role: 'system',
          content: systemContext
        });
        const requestedQuestions =
        /* istanbul ignore next */
        (cov_22pt3bunhp().s[21]++,
        /* istanbul ignore next */
        (cov_22pt3bunhp().b[2][0]++, parseInt(this.candidateProfile.questionCount)) ||
        /* istanbul ignore next */
        (cov_22pt3bunhp().b[2][1]++, 10));
        /* istanbul ignore next */
        cov_22pt3bunhp().s[22]++;
        this.interviewContext.maxQuestions = Math.min(Math.max(requestedQuestions, 5), 20);
        const openingMessage =
        /* istanbul ignore next */
        (cov_22pt3bunhp().s[23]++, this.getOpeningMessage());
        /* istanbul ignore next */
        cov_22pt3bunhp().s[24]++;
        return {
          content: `Great! I now have a better understanding of your background. Let's begin the interview.\n\n${openingMessage}`,
          questionNumber: 1,
          isComplete: false
        };
      }
    } else
    /* istanbul ignore next */
    {
      cov_22pt3bunhp().b[0][1]++;
    }

    // Normal interview flow (mocked)
    cov_22pt3bunhp().s[25]++;
    return {
      content: "That's an interesting approach. Can you elaborate on how you would handle edge cases?",
      questionNumber: 2,
      isComplete: false,
      followUpSuggestions: ["Can you explain your thought process?", "What would you do differently?"]
    };
  }
  buildSystemContext() {
    /* istanbul ignore next */
    cov_22pt3bunhp().f[3]++;
    const {
      currentRole,
      techStack,
      yearsExperience,
      keySkills
    } =
    /* istanbul ignore next */
    (cov_22pt3bunhp().s[26]++, this.candidateProfile);
    /* istanbul ignore next */
    cov_22pt3bunhp().s[27]++;
    return `System Context:
- Role: ${currentRole}
- Tech Stack: ${techStack}
- Experience: ${yearsExperience} years
- Skills: ${keySkills}
- Interview Type: ${this.interviewContext.type}`;
  }
  getOpeningMessage() {
    /* istanbul ignore next */
    cov_22pt3bunhp().f[4]++;
    const {
      currentRole,
      techStack,
      yearsExperience
    } =
    /* istanbul ignore next */
    (cov_22pt3bunhp().s[28]++, this.candidateProfile);
    const years =
    /* istanbul ignore next */
    (cov_22pt3bunhp().s[29]++, parseInt(yearsExperience));
    /* istanbul ignore next */
    cov_22pt3bunhp().s[30]++;
    if (years < 3) {
      /* istanbul ignore next */
      cov_22pt3bunhp().b[3][0]++;
      cov_22pt3bunhp().s[31]++;
      return `As someone with ${yearsExperience} years of experience in ${techStack}, can you explain a recent project where you used ${
      /* istanbul ignore next */
      (cov_22pt3bunhp().b[4][0]++, techStack.split(',')[0]?.trim()) ||
      /* istanbul ignore next */
      (cov_22pt3bunhp().b[4][1]++, 'your primary technology')} and what you learned from it?`;
    } else {
      /* istanbul ignore next */
      cov_22pt3bunhp().b[3][1]++;
      cov_22pt3bunhp().s[32]++;
      if (years < 7) {
        /* istanbul ignore next */
        cov_22pt3bunhp().b[5][0]++;
        cov_22pt3bunhp().s[33]++;
        return `With your ${yearsExperience} years of experience as a ${currentRole}, can you describe a challenging technical problem you've solved using ${
        /* istanbul ignore next */
        (cov_22pt3bunhp().b[6][0]++, techStack.split(',')[0]?.trim()) ||
        /* istanbul ignore next */
        (cov_22pt3bunhp().b[6][1]++, 'your tech stack')} and walk me through your approach?`;
      } else {
        /* istanbul ignore next */
        cov_22pt3bunhp().b[5][1]++;
        cov_22pt3bunhp().s[34]++;
        return `As a senior ${currentRole} with ${yearsExperience} years of experience, can you discuss a complex system design decision you've made and how your experience with ${techStack} influenced your approach?`;
      }
    }
  }
}

// Test the flow
async function testPreliminaryFlow() {
  /* istanbul ignore next */
  cov_22pt3bunhp().f[5]++;
  cov_22pt3bunhp().s[35]++;
  console.log('🚀 Testing Preliminary Questions Flow\n');
  /* istanbul ignore next */
  cov_22pt3bunhp().s[36]++;
  console.log('=====================================\n');
  const service =
  /* istanbul ignore next */
  (cov_22pt3bunhp().s[37]++, new MockAzureOpenAIService());

  // Start interview
  /* istanbul ignore next */
  cov_22pt3bunhp().s[38]++;
  console.log('📝 Starting Interview...\n');
  let response =
  /* istanbul ignore next */
  (cov_22pt3bunhp().s[39]++, await service.startInterviewConversation());
  /* istanbul ignore next */
  cov_22pt3bunhp().s[40]++;
  console.log('AI:', response.content);
  /* istanbul ignore next */
  cov_22pt3bunhp().s[41]++;
  console.log(`(Question #${response.questionNumber})\n`);

  // Simulate user answers
  const userAnswers =
  /* istanbul ignore next */
  (cov_22pt3bunhp().s[42]++, ['Senior Software Engineer', 'React, Node.js, TypeScript, AWS', '5', 'Full-stack development, System design, Team leadership', '10']);
  /* istanbul ignore next */
  cov_22pt3bunhp().s[43]++;
  for (let i =
  /* istanbul ignore next */
  (cov_22pt3bunhp().s[44]++, 0); i < userAnswers.length; i++) {
    /* istanbul ignore next */
    cov_22pt3bunhp().s[45]++;
    console.log('User:', userAnswers[i]);
    /* istanbul ignore next */
    cov_22pt3bunhp().s[46]++;
    response = await service.processUserResponse(userAnswers[i]);
    /* istanbul ignore next */
    cov_22pt3bunhp().s[47]++;
    console.log('\nAI:', response.content);
    /* istanbul ignore next */
    cov_22pt3bunhp().s[48]++;
    console.log(`(Question #${response.questionNumber})`);
    /* istanbul ignore next */
    cov_22pt3bunhp().s[49]++;
    if (response.questionNumber > 0) {
      /* istanbul ignore next */
      cov_22pt3bunhp().b[7][0]++;
      cov_22pt3bunhp().s[50]++;
      console.log('\n✅ Preliminary questions complete!');
      /* istanbul ignore next */
      cov_22pt3bunhp().s[51]++;
      console.log('📊 Candidate Profile:', service.candidateProfile);
      /* istanbul ignore next */
      cov_22pt3bunhp().s[52]++;
      console.log('🎯 Interview Settings:', {
        type: service.interviewContext.type,
        maxQuestions: service.interviewContext.maxQuestions
      });
    } else
    /* istanbul ignore next */
    {
      cov_22pt3bunhp().b[7][1]++;
    }
    cov_22pt3bunhp().s[53]++;
    console.log('\n---\n');
  }

  // Test one more normal interview response
  /* istanbul ignore next */
  cov_22pt3bunhp().s[54]++;
  console.log('User: I would implement a microservices architecture with proper service boundaries...');
  /* istanbul ignore next */
  cov_22pt3bunhp().s[55]++;
  response = await service.processUserResponse('I would implement a microservices architecture with proper service boundaries...');
  /* istanbul ignore next */
  cov_22pt3bunhp().s[56]++;
  console.log('\nAI:', response.content);
  /* istanbul ignore next */
  cov_22pt3bunhp().s[57]++;
  console.log(`(Question #${response.questionNumber})`);
  /* istanbul ignore next */
  cov_22pt3bunhp().s[58]++;
  if (response.followUpSuggestions) {
    /* istanbul ignore next */
    cov_22pt3bunhp().b[8][0]++;
    cov_22pt3bunhp().s[59]++;
    console.log('Suggestions:', response.followUpSuggestions);
  } else
  /* istanbul ignore next */
  {
    cov_22pt3bunhp().b[8][1]++;
  }
  cov_22pt3bunhp().s[60]++;
  console.log('\n=====================================');
  /* istanbul ignore next */
  cov_22pt3bunhp().s[61]++;
  console.log('✅ Test Complete!');
}

// Run the test
/* istanbul ignore next */
cov_22pt3bunhp().s[62]++;
testPreliminaryFlow().catch(console.error);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,