{"version":3,"names":["cov_1o5xacbhdi","actualCoverage","admin","s","require","CosmosClient","BlobServiceClient","DefaultAzureCredential","SecretClient","createAuthenticatedFunction","authMiddleware","firebaseInitialized","cosmosClient","blobServiceClient","initializeServices","f","b","credential","vaultName","process","env","AZURE_KEYVAULT_NAME","url","secretClient","serviceAccountSecret","getSecret","serviceAccount","JSON","parse","value","apps","length","initializeApp","cert","projectId","project_id","connectionString","AZURE_COSMOS_DB_CONNECTION_STRING","storageConnectionString","AZURE_STORAGE_CONNECTION_STRING","fromConnectionString","console","log","error","COLLECTIONS_TO_DELETE","handleDeleteUserData","context","req","authenticatedUser","startTime","Date","now","res","headers","method","status","body","requestId","userId","reason","requestingUserId","uid","isAdmin","custom_claims","roles","includes","code","database","deletedCollections","deletionErrors","deletionRequestId","Math","random","toString","substr","deletionRequest","id","requestedBy","requestDate","toISOString","deletedData","errors","container","items","create","containerName","querySpec","query","parameters","name","resources","documents","fetchAll","batchSize","deletedCount","i","batch","slice","deletePromises","map","doc","item","delete","catch","err","warn","results","Promise","all","filter","result","push","collection","count","message","containerClient","getContainerClient","prefix","deletedBlobsCount","blob","listBlobsFlat","deleteBlob","auth","deleteUser","updatedRequest","completedDate","replace","action","timestamp","c","duration","totalDeleted","reduce","sum","col","success","patch","op","path","updateError","details","module","exports"],"sources":["index.js"],"sourcesContent":["const admin = require('firebase-admin');\nconst { CosmosClient } = require('@azure/cosmos');\nconst { BlobServiceClient } = require('@azure/storage-blob');\nconst { DefaultAzureCredential } = require('@azure/identity');\nconst { SecretClient } = require('@azure/keyvault-secrets');\nconst { createAuthenticatedFunction, authMiddleware } = require('../shared/authMiddleware');\n\n// Initialize services\nlet firebaseInitialized = false;\nlet cosmosClient;\nlet blobServiceClient;\n\nasync function initializeServices() {\n  if (firebaseInitialized && cosmosClient && blobServiceClient) return;\n\n  try {\n    // Get secrets from Azure Key Vault\n    const credential = new DefaultAzureCredential();\n    const vaultName = process.env.AZURE_KEYVAULT_NAME;\n    const url = `https://${vaultName}.vault.azure.net`;\n    const secretClient = new SecretClient(url, credential);\n\n    // Initialize Firebase Admin\n    if (!firebaseInitialized) {\n      const serviceAccountSecret = await secretClient.getSecret('firebase-service-account-key');\n      const serviceAccount = JSON.parse(serviceAccountSecret.value);\n\n      if (!admin.apps.length) {\n        admin.initializeApp({\n          credential: admin.credential.cert(serviceAccount),\n          projectId: serviceAccount.project_id\n        });\n      }\n      firebaseInitialized = true;\n    }\n\n    // Initialize Cosmos DB client\n    if (!cosmosClient) {\n      const connectionString = process.env.AZURE_COSMOS_DB_CONNECTION_STRING;\n      cosmosClient = new CosmosClient(connectionString);\n    }\n\n    // Initialize Azure Storage client\n    if (!blobServiceClient) {\n      const storageConnectionString = process.env.AZURE_STORAGE_CONNECTION_STRING;\n      blobServiceClient = BlobServiceClient.fromConnectionString(storageConnectionString);\n    }\n\n    console.log('All services initialized successfully');\n  } catch (error) {\n    console.error('Failed to initialize services:', error);\n    throw error;\n  }\n}\n\n// Collections to delete from Azure Cosmos DB\nconst COLLECTIONS_TO_DELETE = [\n  'users',\n  'profiles',\n  'resumes',\n  'interviews',\n  'feedback',\n  'usage',\n  'notifications',\n  'emailVerifications',\n  'gdprRequests'\n];\n\n// Internal function that handles the actual deletion logic\nasync function handleDeleteUserData(context, req, authenticatedUser) {\n  const startTime = Date.now();\n\n  // Set CORS headers\n  context.res = {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Functions-Key',\n      'Content-Type': 'application/json'\n    }\n  };\n\n  // Handle preflight requests\n  if (req.method === 'OPTIONS') {\n    context.res.status = 204;\n    context.res.body = '';\n    return;\n  }\n\n  try {\n    await initializeServices();\n\n    const { requestId, userId, reason } = req.body || {};\n    const requestingUserId = authenticatedUser.uid;\n    const isAdmin = authenticatedUser.custom_claims?.roles?.includes('admin') || false;\n    \n    if (!userId) {\n      context.res.status = 400;\n      context.res.body = { \n        error: 'User ID is required',\n        code: 'MISSING_USER_ID'\n      };\n      return;\n    }\n\n    // Verify authorization - either admin or user deleting their own data\n    if (!isAdmin && requestingUserId !== userId) {\n      context.res.status = 403;\n      context.res.body = { \n        error: 'Users can only delete their own data. You are authenticated as: ' + requestingUserId,\n        code: 'PERMISSION_DENIED'\n      };\n      return;\n    }\n\n    const database = cosmosClient.database('PrepBettrDB');\n    const deletedCollections = [];\n    const deletionErrors = [];\n\n    // Create deletion request record\n    const deletionRequestId = requestId || `del_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const deletionRequest = {\n      id: deletionRequestId,\n      userId,\n      requestedBy: requestingUserId || userId,\n      requestDate: new Date().toISOString(),\n      reason: reason || 'User requested account deletion',\n      status: 'processing',\n      deletedData: [],\n      errors: []\n    };\n\n    try {\n      await database.container('gdprRequests').items.create(deletionRequest);\n      context.log(`Created deletion request: ${deletionRequestId} for user: ${userId}`);\n    } catch (error) {\n      context.log.error('Failed to create deletion request record:', error);\n    }\n\n    // Delete from Azure Cosmos DB collections\n    for (const containerName of COLLECTIONS_TO_DELETE) {\n      try {\n        const container = database.container(containerName);\n        \n        // Query for user documents\n        const querySpec = {\n          query: 'SELECT c.id FROM c WHERE c.userId = @userId',\n          parameters: [{ name: '@userId', value: userId }]\n        };\n\n        const { resources: documents } = await container.items.query(querySpec).fetchAll();\n        \n        if (documents.length > 0) {\n          // Delete documents in batches\n          const batchSize = 25;\n          let deletedCount = 0;\n          \n          for (let i = 0; i < documents.length; i += batchSize) {\n            const batch = documents.slice(i, i + batchSize);\n            const deletePromises = batch.map(doc => \n              container.item(doc.id, userId).delete().catch(err => {\n                context.log.warn(`Failed to delete document ${doc.id} from ${containerName}:`, err);\n                return null;\n              })\n            );\n            \n            const results = await Promise.all(deletePromises);\n            deletedCount += results.filter(result => result !== null).length;\n          }\n          \n          deletedCollections.push({ collection: containerName, count: deletedCount });\n          context.log(`Deleted ${deletedCount} documents from ${containerName}`);\n        }\n      } catch (error) {\n        context.log.error(`Error deleting from ${containerName}:`, error);\n        deletionErrors.push({ collection: containerName, error: error.message });\n      }\n    }\n\n    // Delete from Azure Blob Storage\n    try {\n      const containerClient = blobServiceClient.getContainerClient('user-files');\n      const prefix = `users/${userId}/`;\n      \n      let deletedBlobsCount = 0;\n      for await (const blob of containerClient.listBlobsFlat({ prefix })) {\n        try {\n          await containerClient.deleteBlob(blob.name);\n          deletedBlobsCount++;\n        } catch (error) {\n          context.log.warn(`Failed to delete blob ${blob.name}:`, error);\n        }\n      }\n      \n      if (deletedBlobsCount > 0) {\n        deletedCollections.push({ collection: 'azure-storage', count: deletedBlobsCount });\n        context.log(`Deleted ${deletedBlobsCount} files from Azure Storage`);\n      }\n    } catch (error) {\n      context.log.error('Error deleting from Azure Storage:', error);\n      deletionErrors.push({ collection: 'azure-storage', error: error.message });\n    }\n\n    // Delete Firebase Authentication record\n    try {\n      await admin.auth().deleteUser(userId);\n      deletedCollections.push({ collection: 'firebase-auth', count: 1 });\n      context.log(`Deleted Firebase authentication record for user: ${userId}`);\n    } catch (error) {\n      context.log.error('Error deleting Firebase auth record:', error);\n      deletionErrors.push({ collection: 'firebase-auth', error: error.message });\n    }\n\n    // Update deletion request status\n    try {\n      const updatedRequest = {\n        ...deletionRequest,\n        status: deletionErrors.length > 0 ? 'completed-with-errors' : 'completed',\n        completedDate: new Date().toISOString(),\n        deletedData: deletedCollections,\n        errors: deletionErrors\n      };\n\n      await database.container('gdprRequests').item(deletionRequestId, userId).replace(updatedRequest);\n    } catch (error) {\n      context.log.error('Failed to update deletion request status:', error);\n    }\n\n    // Log audit trail\n    try {\n      await database.container('auditLog').items.create({\n        id: `audit_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        userId,\n        action: 'data_deletion_completed',\n        timestamp: new Date().toISOString(),\n        deletedCollections: deletedCollections.map(c => c.collection),\n        errors: deletionErrors,\n        requestId: deletionRequestId,\n        requestedBy: requestingUserId || userId,\n        duration: Date.now() - startTime\n      });\n    } catch (error) {\n      context.log.error('Failed to create audit log:', error);\n    }\n\n    const duration = Date.now() - startTime;\n    context.log(`Data deletion completed for user: ${userId} in ${duration}ms`);\n\n    const totalDeleted = deletedCollections.reduce((sum, col) => sum + col.count, 0);\n    \n    context.res.status = 200;\n    context.res.body = {\n      success: true,\n      requestId: deletionRequestId,\n      userId,\n      totalDeleted,\n      deletedCollections,\n      errors: deletionErrors,\n      duration,\n      status: deletionErrors.length > 0 ? 'completed-with-errors' : 'completed',\n      message: `User data deletion ${deletionErrors.length > 0 ? 'completed with some errors' : 'completed successfully'}`\n    };\n    \n  } catch (error) {\n    const duration = Date.now() - startTime;\n    context.log.error(`Error in deleteUserData function (${duration}ms):`, error);\n    \n    // Try to update deletion request status to failed\n    if (deletionRequestId && cosmosClient) {\n      try {\n        const database = cosmosClient.database('PrepBettrDB');\n        await database.container('gdprRequests').item(deletionRequestId, userId).patch([\n          { op: 'replace', path: '/status', value: 'failed' },\n          { op: 'replace', path: '/error', value: error.message },\n          { op: 'replace', path: '/failedAt', value: new Date().toISOString() }\n        ]);\n      } catch (updateError) {\n        context.log.error('Failed to update deletion request status to failed:', updateError);\n      }\n    }\n    \n    context.res.status = 500;\n    context.res.body = { \n      error: 'Failed to delete user data',\n      code: 'DELETION_FAILED',\n      details: error.message \n    };\n  }\n}\n\n// Export authenticated function\nmodule.exports = createAuthenticatedFunction(handleDeleteUserData);\n"],"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","ignoreList":[]}