1a1093606f3e9dab485651af9671984f
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const azure_openai_service_1 = require("../lib/services/azure-openai-service");
const azure_speech_service_1 = require("../azure/lib/services/azure-speech-service");
const azure_config_1 = require("../lib/azure-config");
const azure_config_browser_1 = require("../lib/azure-config-browser");
(0, globals_1.describe)('Azure Services Health Check', () => {
    (0, globals_1.describe)('Configuration Validation', () => {
        (0, globals_1.it)('should have valid API version for Azure OpenAI', async () => {
            // Valid API versions for Azure OpenAI as of 2024
            const validApiVersions = [
                '2024-02-15-preview', // Current stable preview
                '2024-08-01-preview', // Latest preview (but less stable)
                '2023-12-01-preview', // Previous stable
                '2023-05-15', // GA version
            ];
            // Check all service files for API version
            const apiVersionPattern = /api-version.*["']([^"']+)["']/g;
            const serviceFiles = [
                '../lib/services/azure-openai-service.ts',
                '../lib/services/azure-openai.ts',
                '../azure/lib/services/azure-openai-service.ts',
            ];
            for (const file of serviceFiles) {
                try {
                    const fs = await Promise.resolve().then(() => __importStar(require('fs')));
                    const content = fs.readFileSync(file, 'utf-8');
                    const matches = content.matchAll(apiVersionPattern);
                    for (const match of matches) {
                        const apiVersion = match[1];
                        (0, globals_1.expect)(validApiVersions).toContain(apiVersion);
                        console.log(`✅ ${file}: Using valid API version ${apiVersion}`);
                    }
                }
                catch (error) {
                    console.warn(`⚠️ Could not check ${file}: ${error.message}`);
                }
            }
        });
        (0, globals_1.it)('should validate Azure OpenAI deployment name matches available models', async () => {
            const secrets = await (0, azure_config_1.fetchAzureSecrets)();
            // Common Azure OpenAI deployment names
            const validDeploymentPatterns = [
                /^gpt-4[a-z0-9-]*$/i, // GPT-4 variants
                /^gpt-35-turbo[a-z0-9-]*$/i, // GPT-3.5 Turbo variants
                /^text-embedding[a-z0-9-]*$/i, // Embedding models
                /^dall-e[a-z0-9-]*$/i, // DALL-E models
                /^whisper[a-z0-9-]*$/i, // Whisper models
            ];
            const deployment = secrets.azureOpenAIDeployment;
            (0, globals_1.expect)(deployment).toBeDefined();
            (0, globals_1.expect)(deployment.length).toBeGreaterThan(0);
            const isValidDeployment = validDeploymentPatterns.some(pattern => pattern.test(deployment));
            (0, globals_1.expect)(isValidDeployment).toBe(true);
            console.log(`✅ Deployment name "${deployment}" appears to be valid`);
        });
        (0, globals_1.it)('should extract correct region from Speech Service endpoint', async () => {
            const secrets = await (0, azure_config_1.fetchAzureSecrets)();
            const endpoint = secrets.speechEndpoint;
            (0, globals_1.expect)(endpoint).toBeDefined();
            (0, globals_1.expect)(endpoint).toMatch(/^https:\/\/[a-z0-9-]+\.(api\.cognitive|cognitiveservices)\.microsoft\.com/i);
            // Extract region from endpoint
            const regionMatch = endpoint.match(/https:\/\/([^.]+)/);
            (0, globals_1.expect)(regionMatch).toBeTruthy();
            const region = regionMatch === null || regionMatch === void 0 ? void 0 : regionMatch[1];
            (0, globals_1.expect)(region).toBeDefined();
            // Common Azure regions
            const validRegions = [
                'eastus', 'eastus2', 'westus', 'westus2', 'westus3',
                'centralus', 'northcentralus', 'southcentralus', 'westcentralus',
                'canadacentral', 'canadaeast',
                'northeurope', 'westeurope', 'uksouth', 'ukwest',
                'francecentral', 'francesouth', 'germanywestcentral',
                'switzerlandnorth', 'switzerlandwest', 'norwayeast', 'norwaywest',
                'brazilsouth', 'australiaeast', 'australiasoutheast',
                'southeastasia', 'eastasia', 'japaneast', 'japanwest',
                'koreacentral', 'koreasouth', 'centralindia', 'southindia', 'westindia'
            ];
            (0, globals_1.expect)(validRegions).toContain(region);
            console.log(`✅ Speech Service region "${region}" is valid`);
        });
        (0, globals_1.it)('should have consistent configurations across environments', async () => {
            const serverSecrets = await (0, azure_config_1.fetchAzureSecrets)();
            const browserSecrets = await (0, azure_config_browser_1.fetchAzureSecrets)();
            // Key fields should be present in both
            (0, globals_1.expect)(serverSecrets.azureOpenAIKey).toBeDefined();
            (0, globals_1.expect)(browserSecrets.azureOpenAIKey).toBeDefined();
            (0, globals_1.expect)(serverSecrets.azureOpenAIEndpoint).toBeDefined();
            (0, globals_1.expect)(browserSecrets.azureOpenAIEndpoint).toBeDefined();
            (0, globals_1.expect)(serverSecrets.azureOpenAIDeployment).toBeDefined();
            (0, globals_1.expect)(browserSecrets.azureOpenAIDeployment).toBeDefined();
            console.log('✅ Configurations are consistent across server and browser environments');
        });
    });
    (0, globals_1.describe)('Service Initialization Tests', () => {
        (0, globals_1.afterAll)(() => {
            // Clean up services after tests
            azure_openai_service_1.azureOpenAIService.dispose();
            azure_speech_service_1.azureSpeechService.dispose();
        });
        (0, globals_1.it)('should successfully initialize Azure OpenAI Service', async () => {
            const initialized = await azure_openai_service_1.azureOpenAIService.initialize();
            if (process.env.CI && !process.env.AZURE_OPENAI_KEY) {
                // In CI without credentials, initialization might fail
                console.warn('⚠️ Skipping in CI without Azure credentials');
                (0, globals_1.expect)(initialized).toBe(false);
            }
            else {
                (0, globals_1.expect)(initialized).toBe(true);
                (0, globals_1.expect)(azure_openai_service_1.azureOpenAIService.isReady()).toBe(true);
                console.log('✅ Azure OpenAI Service initialized successfully');
            }
        });
        (0, globals_1.it)('should successfully initialize Azure Speech Service', async () => {
            const initialized = await azure_speech_service_1.azureSpeechService.initialize();
            if (process.env.CI && !process.env.AZURE_SPEECH_KEY) {
                // In CI without credentials, initialization might fail
                console.warn('⚠️ Skipping in CI without Azure credentials');
                (0, globals_1.expect)(initialized).toBe(false);
            }
            else {
                (0, globals_1.expect)(initialized).toBe(true);
                (0, globals_1.expect)(azure_speech_service_1.azureSpeechService.isReady()).toBe(true);
                console.log('✅ Azure Speech Service initialized successfully');
            }
        });
        (0, globals_1.it)('should handle initialization failures gracefully', async () => {
            // Mock environment to simulate failure
            const originalEnv = Object.assign({}, process.env);
            delete process.env.AZURE_OPENAI_KEY;
            delete process.env.AZURE_OPENAI_ENDPOINT;
            const initialized = await azure_openai_service_1.azureOpenAIService.initialize();
            (0, globals_1.expect)(initialized).toBe(false);
            (0, globals_1.expect)(azure_openai_service_1.azureOpenAIService.isReady()).toBe(false);
            // Restore environment
            Object.assign(process.env, originalEnv);
            console.log('✅ Service handles initialization failures gracefully');
        });
    });
    (0, globals_1.describe)('Embedding Model Configuration', () => {
        (0, globals_1.it)('should have valid embedding model configuration', async () => {
            const secrets = await (0, azure_config_1.fetchAzureSecrets)();
            // Check if there's a separate embedding deployment
            // Common pattern: deployment names like "text-embedding-ada-002"
            const deployment = secrets.azureOpenAIDeployment;
            if (deployment.includes('embedding')) {
                (0, globals_1.expect)(deployment).toMatch(/text-embedding-[a-z0-9-]+/i);
                console.log(`✅ Embedding model deployment "${deployment}" is configured`);
            }
            else {
                console.log(`ℹ️ Using general deployment "${deployment}" for embeddings`);
            }
        });
        (0, globals_1.it)('should use correct API version for embeddings', () => {
            // Embeddings should use the same stable API version
            const expectedVersion = '2024-02-15-preview';
            // This would be validated in the actual embedding service implementation
            (0, globals_1.expect)(expectedVersion).toMatch(/^\d{4}-\d{2}-\d{2}(-preview)?$/);
            console.log(`✅ Embedding API version format is valid: ${expectedVersion}`);
        });
    });
    (0, globals_1.describe)('Network and Connectivity', () => {
        (0, globals_1.it)('should have valid Azure endpoints', async () => {
            const secrets = await (0, azure_config_1.fetchAzureSecrets)();
            // Validate OpenAI endpoint format
            (0, globals_1.expect)(secrets.azureOpenAIEndpoint).toMatch(/^https:\/\/[a-z0-9-]+\.openai\.azure\.com\/?$/i);
            // Validate Speech endpoint format
            (0, globals_1.expect)(secrets.speechEndpoint).toMatch(/^https:\/\/[a-z0-9-]+\.(api\.cognitive|cognitiveservices)\.microsoft\.com\/?$/i);
            console.log('✅ All Azure endpoints have valid formats');
        });
        (0, globals_1.it)('should handle rate limiting properly', async () => {
            // Check that retry logic is implemented
            const azureOpenAI = await Promise.resolve().then(() => __importStar(require('../lib/services/azure-openai-service')));
            // Verify retry method exists
            (0, globals_1.expect)(azureOpenAI.azureOpenAIService).toHaveProperty('retryWithBackoff');
            console.log('✅ Rate limiting retry logic is implemented');
        });
    });
    (0, globals_1.describe)('Security and Authentication', () => {
        (0, globals_1.it)('should not expose sensitive keys in browser environment', () => {
            if (typeof window !== 'undefined') {
                // In browser environment
                (0, globals_1.expect)(window.AZURE_OPENAI_KEY).toBeUndefined();
                (0, globals_1.expect)(window.AZURE_SPEECH_KEY).toBeUndefined();
                console.log('✅ Sensitive keys are not exposed in browser');
            }
            else {
                console.log('ℹ️ Running in Node.js environment');
            }
        });
        (0, globals_1.it)('should use proper authentication headers', async () => {
            const secrets = await (0, azure_config_1.fetchAzureSecrets)();
            (0, globals_1.expect)(secrets.azureOpenAIKey).toBeTruthy();
            (0, globals_1.expect)(secrets.azureOpenAIKey.length).toBeGreaterThan(20);
            (0, globals_1.expect)(secrets.speechKey).toBeTruthy();
            (0, globals_1.expect)(secrets.speechKey.length).toBeGreaterThan(20);
            console.log('✅ Authentication keys are properly configured');
        });
    });
});
(0, globals_1.describe)('Health Check Endpoint', () => {
    (0, globals_1.it)('should return health status from /api/azure-health', async () => {
        if (process.env.CI) {
            console.log('ℹ️ Skipping API endpoint test in CI');
            return;
        }
        try {
            const response = await fetch('http://localhost:3000/api/azure-health');
            const data = await response.json();
            (0, globals_1.expect)(data).toHaveProperty('status');
            (0, globals_1.expect)(data).toHaveProperty('services');
            (0, globals_1.expect)(data).toHaveProperty('timestamp');
            console.log('✅ Health check endpoint is functional');
        }
        catch (error) {
            console.warn('⚠️ Health check endpoint not available (server may not be running)');
        }
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,