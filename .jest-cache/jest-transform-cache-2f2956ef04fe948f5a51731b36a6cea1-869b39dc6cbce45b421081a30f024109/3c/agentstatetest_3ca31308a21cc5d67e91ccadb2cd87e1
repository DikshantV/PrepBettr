8f1e040a7c991fd06228a2bad7bc2c5e
"use strict";

/**
 * Unit tests for Agent state reducer
 * Validates state transitions and selectors
 */
/* istanbul ignore next */
function cov_28nnmmn81s() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/voice/agent-state.test.ts";
  var hash = "06be73eec87423d2d6749cf161e7e92da4d61dd0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/voice/agent-state.test.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 62
        }
      },
      "1": {
        start: {
          line: 7,
          column: 22
        },
        end: {
          line: 7,
          column: 46
        }
      },
      "2": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 215,
          column: 3
        }
      },
      "3": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 23,
          column: 7
        }
      },
      "4": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 22,
          column: 11
        }
      },
      "5": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 29,
          column: 7
        }
      },
      "6": {
        start: {
          line: 26,
          column: 23
        },
        end: {
          line: 26,
          column: 100
        }
      },
      "7": {
        start: {
          line: 27,
          column: 26
        },
        end: {
          line: 27,
          column: 98
        }
      },
      "8": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 83
        }
      },
      "9": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 34,
          column: 7
        }
      },
      "10": {
        start: {
          line: 31,
          column: 23
        },
        end: {
          line: 31,
          column: 95
        }
      },
      "11": {
        start: {
          line: 32,
          column: 26
        },
        end: {
          line: 32,
          column: 98
        }
      },
      "12": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 78
        }
      },
      "13": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 40,
          column: 7
        }
      },
      "14": {
        start: {
          line: 36,
          column: 24
        },
        end: {
          line: 36,
          column: 58
        }
      },
      "15": {
        start: {
          line: 37,
          column: 23
        },
        end: {
          line: 37,
          column: 64
        }
      },
      "16": {
        start: {
          line: 38,
          column: 26
        },
        end: {
          line: 38,
          column: 98
        }
      },
      "17": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 54
        }
      },
      "18": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 49,
          column: 7
        }
      },
      "19": {
        start: {
          line: 42,
          column: 25
        },
        end: {
          line: 45,
          column: 9
        }
      },
      "20": {
        start: {
          line: 46,
          column: 23
        },
        end: {
          line: 46,
          column: 66
        }
      },
      "21": {
        start: {
          line: 47,
          column: 26
        },
        end: {
          line: 47,
          column: 98
        }
      },
      "22": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 53
        }
      },
      "23": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 54,
          column: 7
        }
      },
      "24": {
        start: {
          line: 51,
          column: 23
        },
        end: {
          line: 51,
          column: 65
        }
      },
      "25": {
        start: {
          line: 52,
          column: 26
        },
        end: {
          line: 52,
          column: 98
        }
      },
      "26": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 51
        }
      },
      "27": {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 63,
          column: 7
        }
      },
      "28": {
        start: {
          line: 56,
          column: 23
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "29": {
        start: {
          line: 60,
          column: 26
        },
        end: {
          line: 60,
          column: 98
        }
      },
      "30": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 55
        }
      },
      "31": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 67
        }
      },
      "32": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 72,
          column: 7
        }
      },
      "33": {
        start: {
          line: 66,
          column: 22
        },
        end: {
          line: 66,
          column: 208
        }
      },
      "34": {
        start: {
          line: 67,
          column: 23
        },
        end: {
          line: 67,
          column: 48
        }
      },
      "35": {
        start: {
          line: 68,
          column: 26
        },
        end: {
          line: 68,
          column: 72
        }
      },
      "36": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 85
        }
      },
      "37": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 73
        }
      },
      "38": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 49
        }
      },
      "39": {
        start: {
          line: 73,
          column: 4
        },
        end: {
          line: 84,
          column: 7
        }
      },
      "40": {
        start: {
          line: 75,
          column: 22
        },
        end: {
          line: 75,
          column: 291
        }
      },
      "41": {
        start: {
          line: 76,
          column: 23
        },
        end: {
          line: 76,
          column: 50
        }
      },
      "42": {
        start: {
          line: 77,
          column: 26
        },
        end: {
          line: 77,
          column: 72
        }
      },
      "43": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 82
        }
      },
      "44": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 73
        }
      },
      "45": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 47
        }
      },
      "46": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 52
        }
      },
      "47": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 61
        }
      },
      "48": {
        start: {
          line: 86,
          column: 4
        },
        end: {
          line: 92,
          column: 7
        }
      },
      "49": {
        start: {
          line: 87,
          column: 23
        },
        end: {
          line: 87,
          column: 70
        }
      },
      "50": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 91,
          column: 11
        }
      },
      "51": {
        start: {
          line: 93,
          column: 4
        },
        end: {
          line: 98,
          column: 7
        }
      },
      "52": {
        start: {
          line: 94,
          column: 23
        },
        end: {
          line: 94,
          column: 68
        }
      },
      "53": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 97,
          column: 11
        }
      },
      "54": {
        start: {
          line: 99,
          column: 4
        },
        end: {
          line: 105,
          column: 7
        }
      },
      "55": {
        start: {
          line: 100,
          column: 23
        },
        end: {
          line: 100,
          column: 83
        }
      },
      "56": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 104,
          column: 11
        }
      },
      "57": {
        start: {
          line: 106,
          column: 4
        },
        end: {
          line: 112,
          column: 7
        }
      },
      "58": {
        start: {
          line: 107,
          column: 23
        },
        end: {
          line: 107,
          column: 91
        }
      },
      "59": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 111,
          column: 11
        }
      },
      "60": {
        start: {
          line: 113,
          column: 4
        },
        end: {
          line: 119,
          column: 7
        }
      },
      "61": {
        start: {
          line: 114,
          column: 23
        },
        end: {
          line: 114,
          column: 65
        }
      },
      "62": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 118,
          column: 11
        }
      },
      "63": {
        start: {
          line: 120,
          column: 4
        },
        end: {
          line: 133,
          column: 7
        }
      },
      "64": {
        start: {
          line: 121,
          column: 24
        },
        end: {
          line: 123,
          column: 9
        }
      },
      "65": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 132,
          column: 11
        }
      },
      "66": {
        start: {
          line: 135,
          column: 4
        },
        end: {
          line: 139,
          column: 7
        }
      },
      "67": {
        start: {
          line: 136,
          column: 31
        },
        end: {
          line: 136,
          column: 148
        }
      },
      "68": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 137,
          column: 80
        }
      },
      "69": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 138,
          column: 98
        }
      },
      "70": {
        start: {
          line: 140,
          column: 4
        },
        end: {
          line: 144,
          column: 7
        }
      },
      "71": {
        start: {
          line: 141,
          column: 32
        },
        end: {
          line: 141,
          column: 150
        }
      },
      "72": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 142,
          column: 82
        }
      },
      "73": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 143,
          column: 99
        }
      },
      "74": {
        start: {
          line: 145,
          column: 4
        },
        end: {
          line: 149,
          column: 7
        }
      },
      "75": {
        start: {
          line: 146,
          column: 30
        },
        end: {
          line: 146,
          column: 146
        }
      },
      "76": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 78
        }
      },
      "77": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 148,
          column: 97
        }
      },
      "78": {
        start: {
          line: 150,
          column: 4
        },
        end: {
          line: 154,
          column: 7
        }
      },
      "79": {
        start: {
          line: 151,
          column: 29
        },
        end: {
          line: 151,
          column: 144
        }
      },
      "80": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 152,
          column: 76
        }
      },
      "81": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 153,
          column: 96
        }
      },
      "82": {
        start: {
          line: 155,
          column: 4
        },
        end: {
          line: 162,
          column: 7
        }
      },
      "83": {
        start: {
          line: 156,
          column: 27
        },
        end: {
          line: 156,
          column: 148
        }
      },
      "84": {
        start: {
          line: 157,
          column: 35
        },
        end: {
          line: 157,
          column: 203
        }
      },
      "85": {
        start: {
          line: 158,
          column: 37
        },
        end: {
          line: 158,
          column: 207
        }
      },
      "86": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 159,
          column: 83
        }
      },
      "87": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 160,
          column: 90
        }
      },
      "88": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 161,
          column: 93
        }
      },
      "89": {
        start: {
          line: 163,
          column: 4
        },
        end: {
          line: 170,
          column: 7
        }
      },
      "90": {
        start: {
          line: 164,
          column: 32
        },
        end: {
          line: 164,
          column: 182
        }
      },
      "91": {
        start: {
          line: 165,
          column: 37
        },
        end: {
          line: 165,
          column: 213
        }
      },
      "92": {
        start: {
          line: 166,
          column: 38
        },
        end: {
          line: 166,
          column: 224
        }
      },
      "93": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 167,
          column: 89
        }
      },
      "94": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 168,
          column: 94
        }
      },
      "95": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 169,
          column: 94
        }
      },
      "96": {
        start: {
          line: 172,
          column: 4
        },
        end: {
          line: 214,
          column: 7
        }
      },
      "97": {
        start: {
          line: 174,
          column: 20
        },
        end: {
          line: 174,
          column: 51
        }
      },
      "98": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 176,
          column: 104
        }
      },
      "99": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 79
        }
      },
      "100": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 179,
          column: 85
        }
      },
      "101": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 180,
          column: 72
        }
      },
      "102": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 182,
          column: 84
        }
      },
      "103": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 183,
          column: 74
        }
      },
      "104": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 185,
          column: 83
        }
      },
      "105": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 186,
          column: 75
        }
      },
      "106": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 188,
          column: 83
        }
      },
      "107": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 189,
          column: 73
        }
      },
      "108": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 191,
          column: 136
        }
      },
      "109": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 192,
          column: 133
        }
      },
      "110": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 193,
          column: 46
        }
      },
      "111": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 195,
          column: 85
        }
      },
      "112": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 196,
          column: 72
        }
      },
      "113": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 198,
          column: 106
        }
      },
      "114": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 199,
          column: 53
        }
      },
      "115": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 201,
          column: 102
        }
      },
      "116": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 202,
          column: 81
        }
      },
      "117": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 203,
          column: 69
        }
      },
      "118": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 208,
          column: 11
        }
      },
      "119": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 209,
          column: 51
        }
      },
      "120": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 210,
          column: 63
        }
      },
      "121": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 212,
          column: 79
        }
      },
      "122": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 213,
          column: 78
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 32
          },
          end: {
            line: 8,
            column: 33
          }
        },
        loc: {
          start: {
            line: 8,
            column: 38
          },
          end: {
            line: 215,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 10,
            column: 57
          },
          end: {
            line: 10,
            column: 58
          }
        },
        loc: {
          start: {
            line: 10,
            column: 63
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 10
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 25,
            column: 62
          },
          end: {
            line: 25,
            column: 63
          }
        },
        loc: {
          start: {
            line: 25,
            column: 68
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 25
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 30,
            column: 54
          },
          end: {
            line: 30,
            column: 55
          }
        },
        loc: {
          start: {
            line: 30,
            column: 60
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 30
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 35,
            column: 48
          },
          end: {
            line: 35,
            column: 49
          }
        },
        loc: {
          start: {
            line: 35,
            column: 54
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 35
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 41,
            column: 57
          },
          end: {
            line: 41,
            column: 58
          }
        },
        loc: {
          start: {
            line: 41,
            column: 63
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 41
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 50,
            column: 61
          },
          end: {
            line: 50,
            column: 62
          }
        },
        loc: {
          start: {
            line: 50,
            column: 67
          },
          end: {
            line: 54,
            column: 5
          }
        },
        line: 50
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 55,
            column: 64
          },
          end: {
            line: 55,
            column: 65
          }
        },
        loc: {
          start: {
            line: 55,
            column: 70
          },
          end: {
            line: 63,
            column: 5
          }
        },
        line: 55
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 64,
            column: 57
          },
          end: {
            line: 64,
            column: 58
          }
        },
        loc: {
          start: {
            line: 64,
            column: 63
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 64
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 73,
            column: 71
          },
          end: {
            line: 73,
            column: 72
          }
        },
        loc: {
          start: {
            line: 73,
            column: 77
          },
          end: {
            line: 84,
            column: 5
          }
        },
        line: 73
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 86,
            column: 72
          },
          end: {
            line: 86,
            column: 73
          }
        },
        loc: {
          start: {
            line: 86,
            column: 78
          },
          end: {
            line: 92,
            column: 5
          }
        },
        line: 86
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 93,
            column: 70
          },
          end: {
            line: 93,
            column: 71
          }
        },
        loc: {
          start: {
            line: 93,
            column: 76
          },
          end: {
            line: 98,
            column: 5
          }
        },
        line: 93
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 99,
            column: 72
          },
          end: {
            line: 99,
            column: 73
          }
        },
        loc: {
          start: {
            line: 99,
            column: 78
          },
          end: {
            line: 105,
            column: 5
          }
        },
        line: 99
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 106,
            column: 70
          },
          end: {
            line: 106,
            column: 71
          }
        },
        loc: {
          start: {
            line: 106,
            column: 76
          },
          end: {
            line: 112,
            column: 5
          }
        },
        line: 106
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 113,
            column: 67
          },
          end: {
            line: 113,
            column: 68
          }
        },
        loc: {
          start: {
            line: 113,
            column: 73
          },
          end: {
            line: 119,
            column: 5
          }
        },
        line: 113
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 120,
            column: 74
          },
          end: {
            line: 120,
            column: 75
          }
        },
        loc: {
          start: {
            line: 120,
            column: 80
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 120
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 135,
            column: 60
          },
          end: {
            line: 135,
            column: 61
          }
        },
        loc: {
          start: {
            line: 135,
            column: 66
          },
          end: {
            line: 139,
            column: 5
          }
        },
        line: 135
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 140,
            column: 61
          },
          end: {
            line: 140,
            column: 62
          }
        },
        loc: {
          start: {
            line: 140,
            column: 67
          },
          end: {
            line: 144,
            column: 5
          }
        },
        line: 140
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 145,
            column: 59
          },
          end: {
            line: 145,
            column: 60
          }
        },
        loc: {
          start: {
            line: 145,
            column: 65
          },
          end: {
            line: 149,
            column: 5
          }
        },
        line: 145
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 150,
            column: 58
          },
          end: {
            line: 150,
            column: 59
          }
        },
        loc: {
          start: {
            line: 150,
            column: 64
          },
          end: {
            line: 154,
            column: 5
          }
        },
        line: 150
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 155,
            column: 84
          },
          end: {
            line: 155,
            column: 85
          }
        },
        loc: {
          start: {
            line: 155,
            column: 90
          },
          end: {
            line: 162,
            column: 5
          }
        },
        line: 155
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 163,
            column: 79
          },
          end: {
            line: 163,
            column: 80
          }
        },
        loc: {
          start: {
            line: 163,
            column: 85
          },
          end: {
            line: 170,
            column: 5
          }
        },
        line: 163
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 172,
            column: 55
          },
          end: {
            line: 172,
            column: 56
          }
        },
        loc: {
          start: {
            line: 172,
            column: 61
          },
          end: {
            line: 214,
            column: 5
          }
        },
        line: 172
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0
    },
    b: {},
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/voice/agent-state.test.ts",
      mappings: ";AAAA;;;GAGG;;AAEH,+CAoBuB;AAGvB,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;IACnC,qBAAqB;IACrB,IAAI,CAAC,8CAA8C,EAAE,GAAG,EAAE;QACxD,MAAM,CAAC,+BAAiB,CAAC,CAAC,OAAO,CAAC;YAChC,cAAc,EAAE,4BAAc,CAAC,KAAK;YACpC,UAAU,EAAE,wBAAU,CAAC,IAAI;YAC3B,QAAQ,EAAE,EAAE;YACZ,cAAc,EAAE,CAAC;YACjB,aAAa,EAAE,KAAK;YACpB,mBAAmB,EAAE,KAAK;YAC1B,SAAS,EAAE,EAAE;YACb,iBAAiB,EAAE,KAAK;YACxB,mBAAmB,EAAE,IAAI;YACzB,WAAW,EAAE,IAAI;SAClB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,0BAA0B;IAC1B,IAAI,CAAC,mDAAmD,EAAE,GAAG,EAAE;QAC7D,MAAM,MAAM,GAAG,EAAE,IAAI,EAAE,qBAA8B,EAAE,OAAO,EAAE,4BAAc,CAAC,MAAM,EAAE,CAAC;QACxF,MAAM,SAAS,GAAG,IAAA,0BAAY,EAAC,+BAAiB,EAAE,MAAM,CAAC,CAAC;QAE1D,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,4BAAc,CAAC,MAAM,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,2CAA2C,EAAE,GAAG,EAAE;QACrD,MAAM,MAAM,GAAG,EAAE,IAAI,EAAE,iBAA0B,EAAE,OAAO,EAAE,wBAAU,CAAC,SAAS,EAAE,CAAC;QACnF,MAAM,SAAS,GAAG,IAAA,0BAAY,EAAC,+BAAiB,EAAE,MAAM,CAAC,CAAC;QAE1D,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,wBAAU,CAAC,SAAS,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,qCAAqC,EAAE,GAAG,EAAE;QAC/C,MAAM,OAAO,GAAiB,EAAE,IAAI,EAAE,MAAe,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;QAC1E,MAAM,MAAM,GAAG,EAAE,IAAI,EAAE,aAAsB,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;QAClE,MAAM,SAAS,GAAG,IAAA,0BAAY,EAAC,+BAAiB,EAAE,MAAM,CAAC,CAAC;QAE1D,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,8CAA8C,EAAE,GAAG,EAAE;QACxD,MAAM,QAAQ,GAAmB;YAC/B,EAAE,IAAI,EAAE,MAAe,EAAE,OAAO,EAAE,OAAO,EAAE;YAC3C,EAAE,IAAI,EAAE,WAAoB,EAAE,OAAO,EAAE,UAAU,EAAE;SACpD,CAAC;QACF,MAAM,MAAM,GAAG,EAAE,IAAI,EAAE,cAAuB,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC;QACpE,MAAM,SAAS,GAAG,IAAA,0BAAY,EAAC,+BAAiB,EAAE,MAAM,CAAC,CAAC;QAE1D,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,kDAAkD,EAAE,GAAG,EAAE;QAC5D,MAAM,MAAM,GAAG,EAAE,IAAI,EAAE,iBAA0B,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;QACnE,MAAM,SAAS,GAAG,IAAA,0BAAY,EAAC,+BAAiB,EAAE,MAAM,CAAC,CAAC;QAE1D,MAAM,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,qDAAqD,EAAE,GAAG,EAAE;QAC/D,MAAM,MAAM,GAAG;YACb,IAAI,EAAE,wBAAiC;YACvC,OAAO,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,EAAE,EAAE,cAAc,EAAE;SACjD,CAAC;QACF,MAAM,SAAS,GAAG,IAAA,0BAAY,EAAC,+BAAiB,EAAE,MAAM,CAAC,CAAC;QAE1D,MAAM,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/C,MAAM,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,8CAA8C,EAAE,GAAG,EAAE;QACxD,mCAAmC;QACnC,MAAM,KAAK,mCACN,+BAAiB,KACpB,cAAc,EAAE,4BAAc,CAAC,MAAM,EACrC,UAAU,EAAE,wBAAU,CAAC,QAAQ,EAC/B,WAAW,EAAE,EAAiB,GAC/B,CAAC;QAEF,MAAM,MAAM,GAAG,EAAE,IAAI,EAAE,eAAwB,EAAE,CAAC;QAClD,MAAM,SAAS,GAAG,IAAA,0BAAY,EAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAE9C,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,4BAAc,CAAC,QAAQ,CAAC,CAAC;QAC/D,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,wBAAU,CAAC,IAAI,CAAC,CAAC;QACnD,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,QAAQ,EAAE,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,4DAA4D,EAAE,GAAG,EAAE;QACtE,+CAA+C;QAC/C,MAAM,KAAK,mCACN,+BAAiB,KACpB,cAAc,EAAE,4BAAc,CAAC,MAAM,EACrC,UAAU,EAAE,wBAAU,CAAC,QAAQ,EAC/B,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,MAAe,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,EACvD,aAAa,EAAE,IAAI,EACnB,SAAS,EAAE,kBAAkB,GAC9B,CAAC;QAEF,MAAM,MAAM,GAAG,EAAE,IAAI,EAAE,iBAA0B,EAAE,CAAC;QACpD,MAAM,SAAS,GAAG,IAAA,0BAAY,EAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAE9C,2CAA2C;QAC3C,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,4BAAc,CAAC,KAAK,CAAC,CAAC;QAC5D,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,wBAAU,CAAC,IAAI,CAAC,CAAC;QACnD,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACvC,MAAM,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC5C,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,YAAY;IACpE,CAAC,CAAC,CAAC;IAEH,uBAAuB;IACvB,IAAI,CAAC,6DAA6D,EAAE,GAAG,EAAE;QACvE,MAAM,MAAM,GAAG,IAAA,wCAA0B,GAAE,CAAC;QAC5C,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;YACrB,IAAI,EAAE,qBAAqB;YAC3B,OAAO,EAAE,4BAAc,CAAC,MAAM;SAC/B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,2DAA2D,EAAE,GAAG,EAAE;QACrE,MAAM,MAAM,GAAG,IAAA,sCAAwB,GAAE,CAAC;QAC1C,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;YACrB,IAAI,EAAE,eAAe;SACtB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,6DAA6D,EAAE,GAAG,EAAE;QACvE,MAAM,MAAM,GAAG,IAAA,wCAA0B,EAAC,aAAa,CAAC,CAAC;QACzD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;YACrB,IAAI,EAAE,aAAa;YACnB,OAAO,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,aAAa,EAAE;SAClD,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,2DAA2D,EAAE,GAAG,EAAE;QACrE,MAAM,MAAM,GAAG,IAAA,sCAAwB,EAAC,uBAAuB,CAAC,CAAC;QACjE,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;YACrB,IAAI,EAAE,aAAa;YACnB,OAAO,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,uBAAuB,EAAE;SACjE,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,wDAAwD,EAAE,GAAG,EAAE;QAClE,MAAM,MAAM,GAAG,IAAA,mCAAqB,GAAE,CAAC;QACvC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;YACrB,IAAI,EAAE,iBAAiB;YACvB,OAAO,EAAE,IAAI;SACd,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,+DAA+D,EAAE,GAAG,EAAE;QACzE,MAAM,OAAO,GAAG,IAAA,4CAA8B,EAC5C,aAAa,EACb,CAAC,EAAE,kBAAkB;QACrB,KAAK,CAAC,eAAe;SACtB,CAAC;QAEF,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC;YACtB;gBACE,IAAI,EAAE,aAAa;gBACnB,OAAO,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,aAAa,EAAE;aACvD;YACD,EAAE,IAAI,EAAE,kBAAkB,EAAE;YAC5B,EAAE,IAAI,EAAE,qBAAqB,EAAE,OAAO,EAAE,CAAC,EAAE;YAC3C,EAAE,IAAI,EAAE,wBAAwB,EAAE,OAAO,EAAE,KAAK,EAAE;SACnD,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,iBAAiB;IACjB,IAAI,CAAC,iDAAiD,EAAE,GAAG,EAAE;QAC3D,MAAM,cAAc,mCACf,+BAAiB,KACpB,UAAU,EAAE,wBAAU,CAAC,SAAS,GACjC,CAAC;QAEF,MAAM,CAAC,IAAA,+BAAiB,EAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrD,MAAM,CAAC,IAAA,+BAAiB,EAAC,+BAAiB,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,kDAAkD,EAAE,GAAG,EAAE;QAC5D,MAAM,eAAe,mCAChB,+BAAiB,KACpB,UAAU,EAAE,wBAAU,CAAC,UAAU,GAClC,CAAC;QAEF,MAAM,CAAC,IAAA,gCAAkB,EAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvD,MAAM,CAAC,IAAA,gCAAkB,EAAC,+BAAiB,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,gDAAgD,EAAE,GAAG,EAAE;QAC1D,MAAM,aAAa,mCACd,+BAAiB,KACpB,UAAU,EAAE,wBAAU,CAAC,QAAQ,GAChC,CAAC;QAEF,MAAM,CAAC,IAAA,8BAAgB,EAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnD,MAAM,CAAC,IAAA,8BAAgB,EAAC,+BAAiB,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,+CAA+C,EAAE,GAAG,EAAE;QACzD,MAAM,YAAY,mCACb,+BAAiB,KACpB,UAAU,EAAE,wBAAU,CAAC,OAAO,GAC/B,CAAC;QAEF,MAAM,CAAC,IAAA,6BAAe,EAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjD,MAAM,CAAC,IAAA,6BAAe,EAAC,+BAAiB,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,yEAAyE,EAAE,GAAG,EAAE;QACnF,MAAM,UAAU,mCACX,+BAAiB,KACpB,cAAc,EAAE,4BAAc,CAAC,KAAK,GACrC,CAAC;QAEF,MAAM,kBAAkB,mCACnB,+BAAiB,KACpB,cAAc,EAAE,4BAAc,CAAC,MAAM,EACrC,UAAU,EAAE,wBAAU,CAAC,OAAO,GAC/B,CAAC;QAEF,MAAM,oBAAoB,mCACrB,+BAAiB,KACpB,cAAc,EAAE,4BAAc,CAAC,MAAM,EACrC,UAAU,EAAE,wBAAU,CAAC,SAAS,GACjC,CAAC;QAEF,MAAM,CAAC,IAAA,qCAAuB,EAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxD,MAAM,CAAC,IAAA,qCAAuB,EAAC,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/D,MAAM,CAAC,IAAA,qCAAuB,EAAC,oBAAoB,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACpE,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,oEAAoE,EAAE,GAAG,EAAE;QAC9E,MAAM,eAAe,mCAChB,+BAAiB,KACpB,cAAc,EAAE,4BAAc,CAAC,QAAQ,EACvC,iBAAiB,EAAE,KAAK,GACzB,CAAC;QAEF,MAAM,oBAAoB,mCACrB,+BAAiB,KACpB,cAAc,EAAE,4BAAc,CAAC,QAAQ,EACvC,iBAAiB,EAAE,IAAI,EACvB,mBAAmB,EAAE,IAAI,GAC1B,CAAC;QAEF,MAAM,qBAAqB,mCACtB,+BAAiB,KACpB,cAAc,EAAE,4BAAc,CAAC,QAAQ,EACvC,iBAAiB,EAAE,IAAI,EACvB,mBAAmB,EAAE,cAAc,GACpC,CAAC;QAEF,MAAM,CAAC,IAAA,sCAAwB,EAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC9D,MAAM,CAAC,IAAA,sCAAwB,EAAC,oBAAoB,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnE,MAAM,CAAC,IAAA,sCAAwB,EAAC,qBAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrE,CAAC,CAAC,CAAC;IAEH,4CAA4C;IAC5C,IAAI,CAAC,4CAA4C,EAAE,GAAG,EAAE;QACtD,2BAA2B;QAC3B,IAAI,KAAK,GAAG,+BAAiB,CAAC;QAE9B,qBAAqB;QACrB,KAAK,GAAG,IAAA,0BAAY,EAAC,KAAK,EAAE,IAAA,wCAA0B,GAAE,CAAC,CAAC;QAC1D,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,4BAAc,CAAC,MAAM,CAAC,CAAC;QAEzD,yCAAyC;QACzC,KAAK,GAAG,IAAA,0BAAY,EAAC,KAAK,EAAE,EAAE,IAAI,EAAE,kBAAkB,EAAE,CAAC,CAAC;QAC1D,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,wBAAU,CAAC,OAAO,CAAC,CAAC;QAElD,qBAAqB;QACrB,KAAK,GAAG,IAAA,0BAAY,EAAC,KAAK,EAAE,EAAE,IAAI,EAAE,iBAAiB,EAAE,CAAC,CAAC;QACzD,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,wBAAU,CAAC,SAAS,CAAC,CAAC;QAEpD,oBAAoB;QACpB,KAAK,GAAG,IAAA,0BAAY,EAAC,KAAK,EAAE,EAAE,IAAI,EAAE,gBAAgB,EAAE,CAAC,CAAC;QACxD,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,wBAAU,CAAC,UAAU,CAAC,CAAC;QAErD,oBAAoB;QACpB,KAAK,GAAG,IAAA,0BAAY,EAAC,KAAK,EAAE,EAAE,IAAI,EAAE,gBAAgB,EAAE,CAAC,CAAC;QACxD,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,wBAAU,CAAC,QAAQ,CAAC,CAAC;QAEnD,8BAA8B;QAC9B,KAAK,GAAG,IAAA,0BAAY,EAAC,KAAK,EAAE,IAAA,wCAA0B,EAAC,gCAAgC,CAAC,CAAC,CAAC;QAC1F,KAAK,GAAG,IAAA,0BAAY,EAAC,KAAK,EAAE,IAAA,sCAAwB,EAAC,+BAA+B,CAAC,CAAC,CAAC;QACvF,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAEtC,4BAA4B;QAC5B,KAAK,GAAG,IAAA,0BAAY,EAAC,KAAK,EAAE,EAAE,IAAI,EAAE,kBAAkB,EAAE,CAAC,CAAC;QAC1D,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,wBAAU,CAAC,OAAO,CAAC,CAAC;QAElD,gCAAgC;QAChC,KAAK,GAAG,IAAA,0BAAY,EAAC,KAAK,EAAE,EAAE,IAAI,EAAE,wBAAwB,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;QAC/E,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE7C,mBAAmB;QACnB,KAAK,GAAG,IAAA,0BAAY,EAAC,KAAK,EAAE,IAAA,sCAAwB,GAAE,CAAC,CAAC;QACxD,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,4BAAc,CAAC,QAAQ,CAAC,CAAC;QAC3D,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,wBAAU,CAAC,IAAI,CAAC,CAAC;QAE/C,wBAAwB;QACxB,KAAK,GAAG,IAAA,0BAAY,EAAC,KAAK,EAAE;YAC1B,IAAI,EAAE,wBAAwB;YAC9B,OAAO,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,EAAE,EAAE,cAAc,EAAE;SACjD,CAAC,CAAC;QACH,MAAM,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3C,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAEvD,mBAAmB;QACnB,MAAM,CAAC,IAAA,uCAAyB,EAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpD,MAAM,CAAC,IAAA,sCAAwB,EAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/voice/agent-state.test.ts"],
      sourcesContent: ["/**\n * Unit tests for Agent state reducer\n * Validates state transitions and selectors\n */\n\nimport {\n  InterviewState,\n  AudioState,\n  AgentState,\n  agentReducer,\n  initialAgentState,\n  selectIsRecording,\n  selectIsProcessing,\n  selectIsSpeaking,\n  selectIsWaiting,\n  selectIsInterviewActive,\n  selectIsInterviewFinished,\n  selectCanStartRecording,\n  selectShouldShowFeedback,\n  createStartInterviewAction,\n  createEndInterviewAction,\n  createAddUserMessageAction,\n  createAddAIMessageAction,\n  createUserSpokeAction,\n  createProcessingCompleteAction\n} from './agent-state';\nimport { SavedMessage } from '@/lib/types/voice';\n\ndescribe('Agent State Reducer', () => {\n  // Test initial state\n  test('should initialize with correct default state', () => {\n    expect(initialAgentState).toEqual({\n      interviewState: InterviewState.READY,\n      audioState: AudioState.IDLE,\n      messages: [],\n      questionNumber: 0,\n      hasUserSpoken: false,\n      isInterviewComplete: false,\n      userImage: \"\",\n      feedbackGenerated: false,\n      generatedFeedbackId: null,\n      audioStream: null,\n    });\n  });\n\n  // Test individual actions\n  test('SET_INTERVIEW_STATE should update interview state', () => {\n    const action = { type: 'SET_INTERVIEW_STATE' as const, payload: InterviewState.ACTIVE };\n    const nextState = agentReducer(initialAgentState, action);\n    \n    expect(nextState.interviewState).toBe(InterviewState.ACTIVE);\n  });\n\n  test('SET_AUDIO_STATE should update audio state', () => {\n    const action = { type: 'SET_AUDIO_STATE' as const, payload: AudioState.RECORDING };\n    const nextState = agentReducer(initialAgentState, action);\n    \n    expect(nextState.audioState).toBe(AudioState.RECORDING);\n  });\n\n  test('ADD_MESSAGE should append a message', () => {\n    const message: SavedMessage = { role: 'user' as const, content: 'Hello' };\n    const action = { type: 'ADD_MESSAGE' as const, payload: message };\n    const nextState = agentReducer(initialAgentState, action);\n    \n    expect(nextState.messages).toEqual([message]);\n  });\n\n  test('ADD_MESSAGES should append multiple messages', () => {\n    const messages: SavedMessage[] = [\n      { role: 'user' as const, content: 'Hello' },\n      { role: 'assistant' as const, content: 'Hi there' }\n    ];\n    const action = { type: 'ADD_MESSAGES' as const, payload: messages };\n    const nextState = agentReducer(initialAgentState, action);\n    \n    expect(nextState.messages).toEqual(messages);\n  });\n\n  test('SET_USER_SPOKEN should update hasUserSpoken flag', () => {\n    const action = { type: 'SET_USER_SPOKEN' as const, payload: true };\n    const nextState = agentReducer(initialAgentState, action);\n    \n    expect(nextState.hasUserSpoken).toBe(true);\n  });\n\n  test('SET_FEEDBACK_GENERATED should update feedback state', () => {\n    const action = { \n      type: 'SET_FEEDBACK_GENERATED' as const, \n      payload: { generated: true, id: 'feedback-123' } \n    };\n    const nextState = agentReducer(initialAgentState, action);\n    \n    expect(nextState.feedbackGenerated).toBe(true);\n    expect(nextState.generatedFeedbackId).toBe('feedback-123');\n  });\n\n  test('END_INTERVIEW should reset to finished state', () => {\n    // Set up an active interview first\n    const state = { \n      ...initialAgentState, \n      interviewState: InterviewState.ACTIVE,\n      audioState: AudioState.SPEAKING,\n      audioStream: {} as MediaStream\n    };\n    \n    const action = { type: 'END_INTERVIEW' as const };\n    const nextState = agentReducer(state, action);\n    \n    expect(nextState.interviewState).toBe(InterviewState.FINISHED);\n    expect(nextState.audioState).toBe(AudioState.IDLE);\n    expect(nextState.audioStream).toBeNull();\n  });\n\n  test('RESET_INTERVIEW should reset state but preserve user image', () => {\n    // Set up an active state with multiple changes\n    const state: AgentState = { \n      ...initialAgentState, \n      interviewState: InterviewState.ACTIVE,\n      audioState: AudioState.SPEAKING,\n      messages: [{ role: 'user' as const, content: 'Hello' }],\n      hasUserSpoken: true,\n      userImage: 'user-profile.jpg'\n    };\n    \n    const action = { type: 'RESET_INTERVIEW' as const };\n    const nextState = agentReducer(state, action);\n    \n    // Should reset everything except userImage\n    expect(nextState.interviewState).toBe(InterviewState.READY);\n    expect(nextState.audioState).toBe(AudioState.IDLE);\n    expect(nextState.messages).toEqual([]);\n    expect(nextState.hasUserSpoken).toBe(false);\n    expect(nextState.userImage).toBe('user-profile.jpg'); // Preserved\n  });\n\n  // Test action creators\n  test('createStartInterviewAction should create the correct action', () => {\n    const action = createStartInterviewAction();\n    expect(action).toEqual({\n      type: 'SET_INTERVIEW_STATE',\n      payload: InterviewState.ACTIVE\n    });\n  });\n\n  test('createEndInterviewAction should create the correct action', () => {\n    const action = createEndInterviewAction();\n    expect(action).toEqual({\n      type: 'END_INTERVIEW'\n    });\n  });\n\n  test('createAddUserMessageAction should create the correct action', () => {\n    const action = createAddUserMessageAction('Hello there');\n    expect(action).toEqual({\n      type: 'ADD_MESSAGE',\n      payload: { role: 'user', content: 'Hello there' }\n    });\n  });\n\n  test('createAddAIMessageAction should create the correct action', () => {\n    const action = createAddAIMessageAction('I am the AI assistant');\n    expect(action).toEqual({\n      type: 'ADD_MESSAGE',\n      payload: { role: 'assistant', content: 'I am the AI assistant' }\n    });\n  });\n\n  test('createUserSpokeAction should create the correct action', () => {\n    const action = createUserSpokeAction();\n    expect(action).toEqual({\n      type: 'SET_USER_SPOKEN',\n      payload: true\n    });\n  });\n\n  test('createProcessingCompleteAction should create multiple actions', () => {\n    const actions = createProcessingCompleteAction(\n      'AI response', \n      2, // question number\n      false // not complete\n    );\n    \n    expect(actions).toEqual([\n      { \n        type: 'ADD_MESSAGE', \n        payload: { role: 'assistant', content: 'AI response' } \n      },\n      { type: 'RESET_TO_WAITING' },\n      { type: 'SET_QUESTION_NUMBER', payload: 2 },\n      { type: 'SET_INTERVIEW_COMPLETE', payload: false }\n    ]);\n  });\n\n  // Test selectors\n  test('selectIsRecording should return correct boolean', () => {\n    const recordingState: AgentState = {\n      ...initialAgentState,\n      audioState: AudioState.RECORDING\n    };\n    \n    expect(selectIsRecording(recordingState)).toBe(true);\n    expect(selectIsRecording(initialAgentState)).toBe(false);\n  });\n\n  test('selectIsProcessing should return correct boolean', () => {\n    const processingState: AgentState = {\n      ...initialAgentState,\n      audioState: AudioState.PROCESSING\n    };\n    \n    expect(selectIsProcessing(processingState)).toBe(true);\n    expect(selectIsProcessing(initialAgentState)).toBe(false);\n  });\n\n  test('selectIsSpeaking should return correct boolean', () => {\n    const speakingState: AgentState = {\n      ...initialAgentState,\n      audioState: AudioState.SPEAKING\n    };\n    \n    expect(selectIsSpeaking(speakingState)).toBe(true);\n    expect(selectIsSpeaking(initialAgentState)).toBe(false);\n  });\n\n  test('selectIsWaiting should return correct boolean', () => {\n    const waitingState: AgentState = {\n      ...initialAgentState,\n      audioState: AudioState.WAITING\n    };\n    \n    expect(selectIsWaiting(waitingState)).toBe(true);\n    expect(selectIsWaiting(initialAgentState)).toBe(false);\n  });\n\n  test('selectCanStartRecording should return true only when active and waiting', () => {\n    const readyState: AgentState = {\n      ...initialAgentState,\n      interviewState: InterviewState.READY\n    };\n    \n    const activeWaitingState: AgentState = {\n      ...initialAgentState,\n      interviewState: InterviewState.ACTIVE,\n      audioState: AudioState.WAITING\n    };\n    \n    const activeRecordingState: AgentState = {\n      ...initialAgentState,\n      interviewState: InterviewState.ACTIVE,\n      audioState: AudioState.RECORDING\n    };\n    \n    expect(selectCanStartRecording(readyState)).toBe(false);\n    expect(selectCanStartRecording(activeWaitingState)).toBe(true);\n    expect(selectCanStartRecording(activeRecordingState)).toBe(false);\n  });\n\n  test('selectShouldShowFeedback should return true when feedback is ready', () => {\n    const noFeedbackState: AgentState = {\n      ...initialAgentState,\n      interviewState: InterviewState.FINISHED,\n      feedbackGenerated: false\n    };\n    \n    const pendingFeedbackState: AgentState = {\n      ...initialAgentState,\n      interviewState: InterviewState.FINISHED,\n      feedbackGenerated: true,\n      generatedFeedbackId: null\n    };\n    \n    const completeFeedbackState: AgentState = {\n      ...initialAgentState,\n      interviewState: InterviewState.FINISHED,\n      feedbackGenerated: true,\n      generatedFeedbackId: 'feedback-123'\n    };\n    \n    expect(selectShouldShowFeedback(noFeedbackState)).toBe(false);\n    expect(selectShouldShowFeedback(pendingFeedbackState)).toBe(false);\n    expect(selectShouldShowFeedback(completeFeedbackState)).toBe(true);\n  });\n\n  // Test full interview lifecycle transitions\n  test('should handle complete interview lifecycle', () => {\n    // Start with initial state\n    let state = initialAgentState;\n    \n    // 1. Start interview\n    state = agentReducer(state, createStartInterviewAction());\n    expect(state.interviewState).toBe(InterviewState.ACTIVE);\n    \n    // 2. Set audio state to waiting for user\n    state = agentReducer(state, { type: 'RESET_TO_WAITING' });\n    expect(state.audioState).toBe(AudioState.WAITING);\n    \n    // 3. Start recording\n    state = agentReducer(state, { type: 'START_RECORDING' });\n    expect(state.audioState).toBe(AudioState.RECORDING);\n    \n    // 4. Stop recording\n    state = agentReducer(state, { type: 'STOP_RECORDING' });\n    expect(state.audioState).toBe(AudioState.PROCESSING);\n    \n    // 5. Start speaking\n    state = agentReducer(state, { type: 'START_SPEAKING' });\n    expect(state.audioState).toBe(AudioState.SPEAKING);\n    \n    // 6. Add user and AI messages\n    state = agentReducer(state, createAddUserMessageAction('Hello, I am applying for a job'));\n    state = agentReducer(state, createAddAIMessageAction('Tell me about your experience'));\n    expect(state.messages.length).toBe(2);\n    \n    // 7. Reset to waiting state\n    state = agentReducer(state, { type: 'RESET_TO_WAITING' });\n    expect(state.audioState).toBe(AudioState.WAITING);\n    \n    // 8. Mark interview as complete\n    state = agentReducer(state, { type: 'SET_INTERVIEW_COMPLETE', payload: true });\n    expect(state.isInterviewComplete).toBe(true);\n    \n    // 9. End interview\n    state = agentReducer(state, createEndInterviewAction());\n    expect(state.interviewState).toBe(InterviewState.FINISHED);\n    expect(state.audioState).toBe(AudioState.IDLE);\n    \n    // 10. Generate feedback\n    state = agentReducer(state, { \n      type: 'SET_FEEDBACK_GENERATED', \n      payload: { generated: true, id: 'feedback-123' } \n    });\n    expect(state.feedbackGenerated).toBe(true);\n    expect(state.generatedFeedbackId).toBe('feedback-123');\n    \n    // Verify selectors\n    expect(selectIsInterviewFinished(state)).toBe(true);\n    expect(selectShouldShowFeedback(state)).toBe(true);\n  });\n});\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "06be73eec87423d2d6749cf161e7e92da4d61dd0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_28nnmmn81s = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_28nnmmn81s();
cov_28nnmmn81s().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const agent_state_1 =
/* istanbul ignore next */
(cov_28nnmmn81s().s[1]++, require("./agent-state"));
/* istanbul ignore next */
cov_28nnmmn81s().s[2]++;
describe('Agent State Reducer', () => {
  /* istanbul ignore next */
  cov_28nnmmn81s().f[0]++;
  cov_28nnmmn81s().s[3]++;
  // Test initial state
  test('should initialize with correct default state', () => {
    /* istanbul ignore next */
    cov_28nnmmn81s().f[1]++;
    cov_28nnmmn81s().s[4]++;
    expect(agent_state_1.initialAgentState).toEqual({
      interviewState: agent_state_1.InterviewState.READY,
      audioState: agent_state_1.AudioState.IDLE,
      messages: [],
      questionNumber: 0,
      hasUserSpoken: false,
      isInterviewComplete: false,
      userImage: "",
      feedbackGenerated: false,
      generatedFeedbackId: null,
      audioStream: null
    });
  });
  // Test individual actions
  /* istanbul ignore next */
  cov_28nnmmn81s().s[5]++;
  test('SET_INTERVIEW_STATE should update interview state', () => {
    /* istanbul ignore next */
    cov_28nnmmn81s().f[2]++;
    const action =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[6]++, {
      type: 'SET_INTERVIEW_STATE',
      payload: agent_state_1.InterviewState.ACTIVE
    });
    const nextState =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[7]++, (0, agent_state_1.agentReducer)(agent_state_1.initialAgentState, action));
    /* istanbul ignore next */
    cov_28nnmmn81s().s[8]++;
    expect(nextState.interviewState).toBe(agent_state_1.InterviewState.ACTIVE);
  });
  /* istanbul ignore next */
  cov_28nnmmn81s().s[9]++;
  test('SET_AUDIO_STATE should update audio state', () => {
    /* istanbul ignore next */
    cov_28nnmmn81s().f[3]++;
    const action =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[10]++, {
      type: 'SET_AUDIO_STATE',
      payload: agent_state_1.AudioState.RECORDING
    });
    const nextState =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[11]++, (0, agent_state_1.agentReducer)(agent_state_1.initialAgentState, action));
    /* istanbul ignore next */
    cov_28nnmmn81s().s[12]++;
    expect(nextState.audioState).toBe(agent_state_1.AudioState.RECORDING);
  });
  /* istanbul ignore next */
  cov_28nnmmn81s().s[13]++;
  test('ADD_MESSAGE should append a message', () => {
    /* istanbul ignore next */
    cov_28nnmmn81s().f[4]++;
    const message =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[14]++, {
      role: 'user',
      content: 'Hello'
    });
    const action =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[15]++, {
      type: 'ADD_MESSAGE',
      payload: message
    });
    const nextState =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[16]++, (0, agent_state_1.agentReducer)(agent_state_1.initialAgentState, action));
    /* istanbul ignore next */
    cov_28nnmmn81s().s[17]++;
    expect(nextState.messages).toEqual([message]);
  });
  /* istanbul ignore next */
  cov_28nnmmn81s().s[18]++;
  test('ADD_MESSAGES should append multiple messages', () => {
    /* istanbul ignore next */
    cov_28nnmmn81s().f[5]++;
    const messages =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[19]++, [{
      role: 'user',
      content: 'Hello'
    }, {
      role: 'assistant',
      content: 'Hi there'
    }]);
    const action =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[20]++, {
      type: 'ADD_MESSAGES',
      payload: messages
    });
    const nextState =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[21]++, (0, agent_state_1.agentReducer)(agent_state_1.initialAgentState, action));
    /* istanbul ignore next */
    cov_28nnmmn81s().s[22]++;
    expect(nextState.messages).toEqual(messages);
  });
  /* istanbul ignore next */
  cov_28nnmmn81s().s[23]++;
  test('SET_USER_SPOKEN should update hasUserSpoken flag', () => {
    /* istanbul ignore next */
    cov_28nnmmn81s().f[6]++;
    const action =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[24]++, {
      type: 'SET_USER_SPOKEN',
      payload: true
    });
    const nextState =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[25]++, (0, agent_state_1.agentReducer)(agent_state_1.initialAgentState, action));
    /* istanbul ignore next */
    cov_28nnmmn81s().s[26]++;
    expect(nextState.hasUserSpoken).toBe(true);
  });
  /* istanbul ignore next */
  cov_28nnmmn81s().s[27]++;
  test('SET_FEEDBACK_GENERATED should update feedback state', () => {
    /* istanbul ignore next */
    cov_28nnmmn81s().f[7]++;
    const action =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[28]++, {
      type: 'SET_FEEDBACK_GENERATED',
      payload: {
        generated: true,
        id: 'feedback-123'
      }
    });
    const nextState =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[29]++, (0, agent_state_1.agentReducer)(agent_state_1.initialAgentState, action));
    /* istanbul ignore next */
    cov_28nnmmn81s().s[30]++;
    expect(nextState.feedbackGenerated).toBe(true);
    /* istanbul ignore next */
    cov_28nnmmn81s().s[31]++;
    expect(nextState.generatedFeedbackId).toBe('feedback-123');
  });
  /* istanbul ignore next */
  cov_28nnmmn81s().s[32]++;
  test('END_INTERVIEW should reset to finished state', () => {
    /* istanbul ignore next */
    cov_28nnmmn81s().f[8]++;
    // Set up an active interview first
    const state =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[33]++, Object.assign(Object.assign({}, agent_state_1.initialAgentState), {
      interviewState: agent_state_1.InterviewState.ACTIVE,
      audioState: agent_state_1.AudioState.SPEAKING,
      audioStream: {}
    }));
    const action =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[34]++, {
      type: 'END_INTERVIEW'
    });
    const nextState =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[35]++, (0, agent_state_1.agentReducer)(state, action));
    /* istanbul ignore next */
    cov_28nnmmn81s().s[36]++;
    expect(nextState.interviewState).toBe(agent_state_1.InterviewState.FINISHED);
    /* istanbul ignore next */
    cov_28nnmmn81s().s[37]++;
    expect(nextState.audioState).toBe(agent_state_1.AudioState.IDLE);
    /* istanbul ignore next */
    cov_28nnmmn81s().s[38]++;
    expect(nextState.audioStream).toBeNull();
  });
  /* istanbul ignore next */
  cov_28nnmmn81s().s[39]++;
  test('RESET_INTERVIEW should reset state but preserve user image', () => {
    /* istanbul ignore next */
    cov_28nnmmn81s().f[9]++;
    // Set up an active state with multiple changes
    const state =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[40]++, Object.assign(Object.assign({}, agent_state_1.initialAgentState), {
      interviewState: agent_state_1.InterviewState.ACTIVE,
      audioState: agent_state_1.AudioState.SPEAKING,
      messages: [{
        role: 'user',
        content: 'Hello'
      }],
      hasUserSpoken: true,
      userImage: 'user-profile.jpg'
    }));
    const action =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[41]++, {
      type: 'RESET_INTERVIEW'
    });
    const nextState =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[42]++, (0, agent_state_1.agentReducer)(state, action));
    // Should reset everything except userImage
    /* istanbul ignore next */
    cov_28nnmmn81s().s[43]++;
    expect(nextState.interviewState).toBe(agent_state_1.InterviewState.READY);
    /* istanbul ignore next */
    cov_28nnmmn81s().s[44]++;
    expect(nextState.audioState).toBe(agent_state_1.AudioState.IDLE);
    /* istanbul ignore next */
    cov_28nnmmn81s().s[45]++;
    expect(nextState.messages).toEqual([]);
    /* istanbul ignore next */
    cov_28nnmmn81s().s[46]++;
    expect(nextState.hasUserSpoken).toBe(false);
    /* istanbul ignore next */
    cov_28nnmmn81s().s[47]++;
    expect(nextState.userImage).toBe('user-profile.jpg'); // Preserved
  });
  // Test action creators
  /* istanbul ignore next */
  cov_28nnmmn81s().s[48]++;
  test('createStartInterviewAction should create the correct action', () => {
    /* istanbul ignore next */
    cov_28nnmmn81s().f[10]++;
    const action =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[49]++, (0, agent_state_1.createStartInterviewAction)());
    /* istanbul ignore next */
    cov_28nnmmn81s().s[50]++;
    expect(action).toEqual({
      type: 'SET_INTERVIEW_STATE',
      payload: agent_state_1.InterviewState.ACTIVE
    });
  });
  /* istanbul ignore next */
  cov_28nnmmn81s().s[51]++;
  test('createEndInterviewAction should create the correct action', () => {
    /* istanbul ignore next */
    cov_28nnmmn81s().f[11]++;
    const action =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[52]++, (0, agent_state_1.createEndInterviewAction)());
    /* istanbul ignore next */
    cov_28nnmmn81s().s[53]++;
    expect(action).toEqual({
      type: 'END_INTERVIEW'
    });
  });
  /* istanbul ignore next */
  cov_28nnmmn81s().s[54]++;
  test('createAddUserMessageAction should create the correct action', () => {
    /* istanbul ignore next */
    cov_28nnmmn81s().f[12]++;
    const action =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[55]++, (0, agent_state_1.createAddUserMessageAction)('Hello there'));
    /* istanbul ignore next */
    cov_28nnmmn81s().s[56]++;
    expect(action).toEqual({
      type: 'ADD_MESSAGE',
      payload: {
        role: 'user',
        content: 'Hello there'
      }
    });
  });
  /* istanbul ignore next */
  cov_28nnmmn81s().s[57]++;
  test('createAddAIMessageAction should create the correct action', () => {
    /* istanbul ignore next */
    cov_28nnmmn81s().f[13]++;
    const action =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[58]++, (0, agent_state_1.createAddAIMessageAction)('I am the AI assistant'));
    /* istanbul ignore next */
    cov_28nnmmn81s().s[59]++;
    expect(action).toEqual({
      type: 'ADD_MESSAGE',
      payload: {
        role: 'assistant',
        content: 'I am the AI assistant'
      }
    });
  });
  /* istanbul ignore next */
  cov_28nnmmn81s().s[60]++;
  test('createUserSpokeAction should create the correct action', () => {
    /* istanbul ignore next */
    cov_28nnmmn81s().f[14]++;
    const action =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[61]++, (0, agent_state_1.createUserSpokeAction)());
    /* istanbul ignore next */
    cov_28nnmmn81s().s[62]++;
    expect(action).toEqual({
      type: 'SET_USER_SPOKEN',
      payload: true
    });
  });
  /* istanbul ignore next */
  cov_28nnmmn81s().s[63]++;
  test('createProcessingCompleteAction should create multiple actions', () => {
    /* istanbul ignore next */
    cov_28nnmmn81s().f[15]++;
    const actions =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[64]++, (0, agent_state_1.createProcessingCompleteAction)('AI response', 2,
    // question number
    false // not complete
    ));
    /* istanbul ignore next */
    cov_28nnmmn81s().s[65]++;
    expect(actions).toEqual([{
      type: 'ADD_MESSAGE',
      payload: {
        role: 'assistant',
        content: 'AI response'
      }
    }, {
      type: 'RESET_TO_WAITING'
    }, {
      type: 'SET_QUESTION_NUMBER',
      payload: 2
    }, {
      type: 'SET_INTERVIEW_COMPLETE',
      payload: false
    }]);
  });
  // Test selectors
  /* istanbul ignore next */
  cov_28nnmmn81s().s[66]++;
  test('selectIsRecording should return correct boolean', () => {
    /* istanbul ignore next */
    cov_28nnmmn81s().f[16]++;
    const recordingState =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[67]++, Object.assign(Object.assign({}, agent_state_1.initialAgentState), {
      audioState: agent_state_1.AudioState.RECORDING
    }));
    /* istanbul ignore next */
    cov_28nnmmn81s().s[68]++;
    expect((0, agent_state_1.selectIsRecording)(recordingState)).toBe(true);
    /* istanbul ignore next */
    cov_28nnmmn81s().s[69]++;
    expect((0, agent_state_1.selectIsRecording)(agent_state_1.initialAgentState)).toBe(false);
  });
  /* istanbul ignore next */
  cov_28nnmmn81s().s[70]++;
  test('selectIsProcessing should return correct boolean', () => {
    /* istanbul ignore next */
    cov_28nnmmn81s().f[17]++;
    const processingState =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[71]++, Object.assign(Object.assign({}, agent_state_1.initialAgentState), {
      audioState: agent_state_1.AudioState.PROCESSING
    }));
    /* istanbul ignore next */
    cov_28nnmmn81s().s[72]++;
    expect((0, agent_state_1.selectIsProcessing)(processingState)).toBe(true);
    /* istanbul ignore next */
    cov_28nnmmn81s().s[73]++;
    expect((0, agent_state_1.selectIsProcessing)(agent_state_1.initialAgentState)).toBe(false);
  });
  /* istanbul ignore next */
  cov_28nnmmn81s().s[74]++;
  test('selectIsSpeaking should return correct boolean', () => {
    /* istanbul ignore next */
    cov_28nnmmn81s().f[18]++;
    const speakingState =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[75]++, Object.assign(Object.assign({}, agent_state_1.initialAgentState), {
      audioState: agent_state_1.AudioState.SPEAKING
    }));
    /* istanbul ignore next */
    cov_28nnmmn81s().s[76]++;
    expect((0, agent_state_1.selectIsSpeaking)(speakingState)).toBe(true);
    /* istanbul ignore next */
    cov_28nnmmn81s().s[77]++;
    expect((0, agent_state_1.selectIsSpeaking)(agent_state_1.initialAgentState)).toBe(false);
  });
  /* istanbul ignore next */
  cov_28nnmmn81s().s[78]++;
  test('selectIsWaiting should return correct boolean', () => {
    /* istanbul ignore next */
    cov_28nnmmn81s().f[19]++;
    const waitingState =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[79]++, Object.assign(Object.assign({}, agent_state_1.initialAgentState), {
      audioState: agent_state_1.AudioState.WAITING
    }));
    /* istanbul ignore next */
    cov_28nnmmn81s().s[80]++;
    expect((0, agent_state_1.selectIsWaiting)(waitingState)).toBe(true);
    /* istanbul ignore next */
    cov_28nnmmn81s().s[81]++;
    expect((0, agent_state_1.selectIsWaiting)(agent_state_1.initialAgentState)).toBe(false);
  });
  /* istanbul ignore next */
  cov_28nnmmn81s().s[82]++;
  test('selectCanStartRecording should return true only when active and waiting', () => {
    /* istanbul ignore next */
    cov_28nnmmn81s().f[20]++;
    const readyState =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[83]++, Object.assign(Object.assign({}, agent_state_1.initialAgentState), {
      interviewState: agent_state_1.InterviewState.READY
    }));
    const activeWaitingState =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[84]++, Object.assign(Object.assign({}, agent_state_1.initialAgentState), {
      interviewState: agent_state_1.InterviewState.ACTIVE,
      audioState: agent_state_1.AudioState.WAITING
    }));
    const activeRecordingState =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[85]++, Object.assign(Object.assign({}, agent_state_1.initialAgentState), {
      interviewState: agent_state_1.InterviewState.ACTIVE,
      audioState: agent_state_1.AudioState.RECORDING
    }));
    /* istanbul ignore next */
    cov_28nnmmn81s().s[86]++;
    expect((0, agent_state_1.selectCanStartRecording)(readyState)).toBe(false);
    /* istanbul ignore next */
    cov_28nnmmn81s().s[87]++;
    expect((0, agent_state_1.selectCanStartRecording)(activeWaitingState)).toBe(true);
    /* istanbul ignore next */
    cov_28nnmmn81s().s[88]++;
    expect((0, agent_state_1.selectCanStartRecording)(activeRecordingState)).toBe(false);
  });
  /* istanbul ignore next */
  cov_28nnmmn81s().s[89]++;
  test('selectShouldShowFeedback should return true when feedback is ready', () => {
    /* istanbul ignore next */
    cov_28nnmmn81s().f[21]++;
    const noFeedbackState =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[90]++, Object.assign(Object.assign({}, agent_state_1.initialAgentState), {
      interviewState: agent_state_1.InterviewState.FINISHED,
      feedbackGenerated: false
    }));
    const pendingFeedbackState =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[91]++, Object.assign(Object.assign({}, agent_state_1.initialAgentState), {
      interviewState: agent_state_1.InterviewState.FINISHED,
      feedbackGenerated: true,
      generatedFeedbackId: null
    }));
    const completeFeedbackState =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[92]++, Object.assign(Object.assign({}, agent_state_1.initialAgentState), {
      interviewState: agent_state_1.InterviewState.FINISHED,
      feedbackGenerated: true,
      generatedFeedbackId: 'feedback-123'
    }));
    /* istanbul ignore next */
    cov_28nnmmn81s().s[93]++;
    expect((0, agent_state_1.selectShouldShowFeedback)(noFeedbackState)).toBe(false);
    /* istanbul ignore next */
    cov_28nnmmn81s().s[94]++;
    expect((0, agent_state_1.selectShouldShowFeedback)(pendingFeedbackState)).toBe(false);
    /* istanbul ignore next */
    cov_28nnmmn81s().s[95]++;
    expect((0, agent_state_1.selectShouldShowFeedback)(completeFeedbackState)).toBe(true);
  });
  // Test full interview lifecycle transitions
  /* istanbul ignore next */
  cov_28nnmmn81s().s[96]++;
  test('should handle complete interview lifecycle', () => {
    /* istanbul ignore next */
    cov_28nnmmn81s().f[22]++;
    // Start with initial state
    let state =
    /* istanbul ignore next */
    (cov_28nnmmn81s().s[97]++, agent_state_1.initialAgentState);
    // 1. Start interview
    /* istanbul ignore next */
    cov_28nnmmn81s().s[98]++;
    state = (0, agent_state_1.agentReducer)(state, (0, agent_state_1.createStartInterviewAction)());
    /* istanbul ignore next */
    cov_28nnmmn81s().s[99]++;
    expect(state.interviewState).toBe(agent_state_1.InterviewState.ACTIVE);
    // 2. Set audio state to waiting for user
    /* istanbul ignore next */
    cov_28nnmmn81s().s[100]++;
    state = (0, agent_state_1.agentReducer)(state, {
      type: 'RESET_TO_WAITING'
    });
    /* istanbul ignore next */
    cov_28nnmmn81s().s[101]++;
    expect(state.audioState).toBe(agent_state_1.AudioState.WAITING);
    // 3. Start recording
    /* istanbul ignore next */
    cov_28nnmmn81s().s[102]++;
    state = (0, agent_state_1.agentReducer)(state, {
      type: 'START_RECORDING'
    });
    /* istanbul ignore next */
    cov_28nnmmn81s().s[103]++;
    expect(state.audioState).toBe(agent_state_1.AudioState.RECORDING);
    // 4. Stop recording
    /* istanbul ignore next */
    cov_28nnmmn81s().s[104]++;
    state = (0, agent_state_1.agentReducer)(state, {
      type: 'STOP_RECORDING'
    });
    /* istanbul ignore next */
    cov_28nnmmn81s().s[105]++;
    expect(state.audioState).toBe(agent_state_1.AudioState.PROCESSING);
    // 5. Start speaking
    /* istanbul ignore next */
    cov_28nnmmn81s().s[106]++;
    state = (0, agent_state_1.agentReducer)(state, {
      type: 'START_SPEAKING'
    });
    /* istanbul ignore next */
    cov_28nnmmn81s().s[107]++;
    expect(state.audioState).toBe(agent_state_1.AudioState.SPEAKING);
    // 6. Add user and AI messages
    /* istanbul ignore next */
    cov_28nnmmn81s().s[108]++;
    state = (0, agent_state_1.agentReducer)(state, (0, agent_state_1.createAddUserMessageAction)('Hello, I am applying for a job'));
    /* istanbul ignore next */
    cov_28nnmmn81s().s[109]++;
    state = (0, agent_state_1.agentReducer)(state, (0, agent_state_1.createAddAIMessageAction)('Tell me about your experience'));
    /* istanbul ignore next */
    cov_28nnmmn81s().s[110]++;
    expect(state.messages.length).toBe(2);
    // 7. Reset to waiting state
    /* istanbul ignore next */
    cov_28nnmmn81s().s[111]++;
    state = (0, agent_state_1.agentReducer)(state, {
      type: 'RESET_TO_WAITING'
    });
    /* istanbul ignore next */
    cov_28nnmmn81s().s[112]++;
    expect(state.audioState).toBe(agent_state_1.AudioState.WAITING);
    // 8. Mark interview as complete
    /* istanbul ignore next */
    cov_28nnmmn81s().s[113]++;
    state = (0, agent_state_1.agentReducer)(state, {
      type: 'SET_INTERVIEW_COMPLETE',
      payload: true
    });
    /* istanbul ignore next */
    cov_28nnmmn81s().s[114]++;
    expect(state.isInterviewComplete).toBe(true);
    // 9. End interview
    /* istanbul ignore next */
    cov_28nnmmn81s().s[115]++;
    state = (0, agent_state_1.agentReducer)(state, (0, agent_state_1.createEndInterviewAction)());
    /* istanbul ignore next */
    cov_28nnmmn81s().s[116]++;
    expect(state.interviewState).toBe(agent_state_1.InterviewState.FINISHED);
    /* istanbul ignore next */
    cov_28nnmmn81s().s[117]++;
    expect(state.audioState).toBe(agent_state_1.AudioState.IDLE);
    // 10. Generate feedback
    /* istanbul ignore next */
    cov_28nnmmn81s().s[118]++;
    state = (0, agent_state_1.agentReducer)(state, {
      type: 'SET_FEEDBACK_GENERATED',
      payload: {
        generated: true,
        id: 'feedback-123'
      }
    });
    /* istanbul ignore next */
    cov_28nnmmn81s().s[119]++;
    expect(state.feedbackGenerated).toBe(true);
    /* istanbul ignore next */
    cov_28nnmmn81s().s[120]++;
    expect(state.generatedFeedbackId).toBe('feedback-123');
    // Verify selectors
    /* istanbul ignore next */
    cov_28nnmmn81s().s[121]++;
    expect((0, agent_state_1.selectIsInterviewFinished)(state)).toBe(true);
    /* istanbul ignore next */
    cov_28nnmmn81s().s[122]++;
    expect((0, agent_state_1.selectShouldShowFeedback)(state)).toBe(true);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,