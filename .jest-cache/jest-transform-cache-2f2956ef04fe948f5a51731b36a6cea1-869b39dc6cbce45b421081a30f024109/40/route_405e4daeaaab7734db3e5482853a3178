757d1527750aa8d8b800f5e5713169b7
"use strict";

/* istanbul ignore next */
function cov_1ee9ppme9a() {
  var path = "/Users/dikshantvashistha/PrepBettr/app/api/voice/stream/route.ts";
  var hash = "fd924bf2f7c54ee5379ee5d69fda5bd45b16f1de";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/app/api/voice/stream/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 12,
          column: 3
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 3,
          column: 26
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "3": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 52
        }
      },
      "4": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 7,
          column: 5
        }
      },
      "5": {
        start: {
          line: 6,
          column: 6
        },
        end: {
          line: 6,
          column: 68
        }
      },
      "6": {
        start: {
          line: 6,
          column: 51
        },
        end: {
          line: 6,
          column: 63
        }
      },
      "7": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 39
        }
      },
      "8": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "9": {
        start: {
          line: 10,
          column: 26
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "10": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 17
        }
      },
      "11": {
        start: {
          line: 13,
          column: 25
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "12": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 72
        }
      },
      "13": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 21
        }
      },
      "14": {
        start: {
          line: 18,
          column: 19
        },
        end: {
          line: 34,
          column: 4
        }
      },
      "15": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "16": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 24,
          column: 10
        }
      },
      "17": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 23
        }
      },
      "18": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "19": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "20": {
        start: {
          line: 22,
          column: 77
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "21": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 22
        }
      },
      "22": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 26
        }
      },
      "23": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 33,
          column: 6
        }
      },
      "24": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "25": {
        start: {
          line: 28,
          column: 35
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "26": {
        start: {
          line: 29,
          column: 21
        },
        end: {
          line: 29,
          column: 23
        }
      },
      "27": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "28": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "29": {
        start: {
          line: 30,
          column: 38
        },
        end: {
          line: 30,
          column: 50
        }
      },
      "30": {
        start: {
          line: 30,
          column: 56
        },
        end: {
          line: 30,
          column: 57
        }
      },
      "31": {
        start: {
          line: 30,
          column: 78
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "32": {
        start: {
          line: 30,
          column: 102
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "33": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 40
        }
      },
      "34": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 22
        }
      },
      "35": {
        start: {
          line: 35,
          column: 0
        },
        end: {
          line: 35,
          column: 62
        }
      },
      "36": {
        start: {
          line: 36,
          column: 0
        },
        end: {
          line: 36,
          column: 20
        }
      },
      "37": {
        start: {
          line: 37,
          column: 0
        },
        end: {
          line: 37,
          column: 18
        }
      },
      "38": {
        start: {
          line: 38,
          column: 17
        },
        end: {
          line: 38,
          column: 39
        }
      },
      "39": {
        start: {
          line: 39,
          column: 18
        },
        end: {
          line: 39,
          column: 81
        }
      },
      "40": {
        start: {
          line: 40,
          column: 17
        },
        end: {
          line: 40,
          column: 46
        }
      },
      "41": {
        start: {
          line: 41,
          column: 22
        },
        end: {
          line: 41,
          column: 56
        }
      },
      "42": {
        start: {
          line: 47,
          column: 4
        },
        end: {
          line: 133,
          column: 33
        }
      },
      "43": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 101
        }
      },
      "44": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "45": {
        start: {
          line: 50,
          column: 29
        },
        end: {
          line: 50,
          column: 53
        }
      },
      "46": {
        start: {
          line: 51,
          column: 30
        },
        end: {
          line: 51,
          column: 51
        }
      },
      "47": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 54,
          column: 13
        }
      },
      "48": {
        start: {
          line: 53,
          column: 16
        },
        end: {
          line: 53,
          column: 104
        }
      },
      "49": {
        start: {
          line: 56,
          column: 31
        },
        end: {
          line: 56,
          column: 84
        }
      },
      "50": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 60,
          column: 13
        }
      },
      "51": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 58,
          column: 94
        }
      },
      "52": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 59,
          column: 156
        }
      },
      "53": {
        start: {
          line: 62,
          column: 30
        },
        end: {
          line: 62,
          column: 96
        }
      },
      "54": {
        start: {
          line: 63,
          column: 33
        },
        end: {
          line: 63,
          column: 105
        }
      },
      "55": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 67,
          column: 13
        }
      },
      "56": {
        start: {
          line: 65,
          column: 16
        },
        end: {
          line: 65,
          column: 84
        }
      },
      "57": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 66,
          column: 116
        }
      },
      "58": {
        start: {
          line: 69,
          column: 32
        },
        end: {
          line: 69,
          column: 61
        }
      },
      "59": {
        start: {
          line: 70,
          column: 30
        },
        end: {
          line: 70,
          column: 57
        }
      },
      "60": {
        start: {
          line: 72,
          column: 33
        },
        end: {
          line: 72,
          column: 97
        }
      },
      "61": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 61
        }
      },
      "62": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 111
        }
      },
      "63": {
        start: {
          line: 76,
          column: 32
        },
        end: {
          line: 76,
          column: 90
        }
      },
      "64": {
        start: {
          line: 77,
          column: 32
        },
        end: {
          line: 77,
          column: 88
        }
      },
      "65": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 48
        }
      },
      "66": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 32
        }
      },
      "67": {
        start: {
          line: 81,
          column: 32
        },
        end: {
          line: 81,
          column: 82
        }
      },
      "68": {
        start: {
          line: 82,
          column: 31
        },
        end: {
          line: 82,
          column: 88
        }
      },
      "69": {
        start: {
          line: 84,
          column: 27
        },
        end: {
          line: 92,
          column: 14
        }
      },
      "70": {
        start: {
          line: 85,
          column: 16
        },
        end: {
          line: 91,
          column: 19
        }
      },
      "71": {
        start: {
          line: 86,
          column: 20
        },
        end: {
          line: 86,
          column: 39
        }
      },
      "72": {
        start: {
          line: 87,
          column: 20
        },
        end: {
          line: 87,
          column: 36
        }
      },
      "73": {
        start: {
          line: 89,
          column: 20
        },
        end: {
          line: 89,
          column: 39
        }
      },
      "74": {
        start: {
          line: 90,
          column: 20
        },
        end: {
          line: 90,
          column: 34
        }
      },
      "75": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 118,
          column: 13
        }
      },
      "76": {
        start: {
          line: 95,
          column: 35
        },
        end: {
          line: 95,
          column: 53
        }
      },
      "77": {
        start: {
          line: 96,
          column: 16
        },
        end: {
          line: 99,
          column: 19
        }
      },
      "78": {
        start: {
          line: 100,
          column: 16
        },
        end: {
          line: 104,
          column: 19
        }
      },
      "79": {
        start: {
          line: 106,
          column: 17
        },
        end: {
          line: 118,
          column: 13
        }
      },
      "80": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 107,
          column: 99
        }
      },
      "81": {
        start: {
          line: 108,
          column: 16
        },
        end: {
          line: 112,
          column: 19
        }
      },
      "82": {
        start: {
          line: 115,
          column: 37
        },
        end: {
          line: 115,
          column: 82
        }
      },
      "83": {
        start: {
          line: 116,
          column: 16
        },
        end: {
          line: 116,
          column: 79
        }
      },
      "84": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 117,
          column: 92
        }
      },
      "85": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 129
        }
      },
      "86": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 130,
          column: 13
        }
      },
      "87": {
        start: {
          line: 124,
          column: 16
        },
        end: {
          line: 126,
          column: 17
        }
      },
      "88": {
        start: {
          line: 125,
          column: 20
        },
        end: {
          line: 125,
          column: 122
        }
      },
      "89": {
        start: {
          line: 127,
          column: 16
        },
        end: {
          line: 129,
          column: 17
        }
      },
      "90": {
        start: {
          line: 128,
          column: 20
        },
        end: {
          line: 128,
          column: 115
        }
      },
      "91": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 110
        }
      },
      "92": {
        start: {
          line: 139,
          column: 4
        },
        end: {
          line: 143,
          column: 7
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 2,
            column: 75
          }
        },
        loc: {
          start: {
            line: 2,
            column: 96
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 39
          }
        },
        loc: {
          start: {
            line: 6,
            column: 49
          },
          end: {
            line: 6,
            column: 65
          }
        },
        line: 6
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 9,
            column: 7
          }
        },
        loc: {
          start: {
            line: 9,
            column: 28
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 9
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 13,
            column: 81
          }
        },
        loc: {
          start: {
            line: 13,
            column: 95
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 13
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 15,
            column: 6
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 15
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 18,
            column: 51
          },
          end: {
            line: 18,
            column: 52
          }
        },
        loc: {
          start: {
            line: 18,
            column: 63
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 18
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 19,
            column: 19
          }
        },
        loc: {
          start: {
            line: 19,
            column: 30
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 19
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 20,
            column: 49
          }
        },
        loc: {
          start: {
            line: 20,
            column: 61
          },
          end: {
            line: 24,
            column: 9
          }
        },
        line: 20
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 12
          }
        },
        loc: {
          start: {
            line: 27,
            column: 26
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 27
      },
      "9": {
        name: "POST",
        decl: {
          start: {
            line: 46,
            column: 15
          },
          end: {
            line: 46,
            column: 19
          }
        },
        loc: {
          start: {
            line: 46,
            column: 29
          },
          end: {
            line: 134,
            column: 1
          }
        },
        line: 46
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 47,
            column: 47
          },
          end: {
            line: 47,
            column: 48
          }
        },
        loc: {
          start: {
            line: 47,
            column: 59
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 47
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 84,
            column: 45
          },
          end: {
            line: 84,
            column: 46
          }
        },
        loc: {
          start: {
            line: 84,
            column: 66
          },
          end: {
            line: 92,
            column: 13
          }
        },
        line: 84
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 85,
            column: 46
          },
          end: {
            line: 85,
            column: 47
          }
        },
        loc: {
          start: {
            line: 85,
            column: 58
          },
          end: {
            line: 88,
            column: 17
          }
        },
        line: 85
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 88,
            column: 19
          },
          end: {
            line: 88,
            column: 20
          }
        },
        loc: {
          start: {
            line: 88,
            column: 30
          },
          end: {
            line: 91,
            column: 17
          }
        },
        line: 88
      },
      "14": {
        name: "GET",
        decl: {
          start: {
            line: 138,
            column: 15
          },
          end: {
            line: 138,
            column: 18
          }
        },
        loc: {
          start: {
            line: 138,
            column: 21
          },
          end: {
            line: 144,
            column: 1
          }
        },
        line: 138
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 12,
            column: 3
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 9,
            column: 1
          }
        }, {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 5
      },
      "4": {
        loc: {
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 13
          }
        }, {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "5": {
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 47
          }
        }, {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "6": {
        loc: {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 63
          }
        }, {
          start: {
            line: 5,
            column: 67
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "7": {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "8": {
        loc: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 17,
            column: 2
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 30
          }
        }, {
          start: {
            line: 13,
            column: 34
          },
          end: {
            line: 13,
            column: 57
          }
        }, {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "9": {
        loc: {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 15,
            column: 1
          }
        }, {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "10": {
        loc: {
          start: {
            line: 18,
            column: 19
          },
          end: {
            line: 34,
            column: 4
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 18,
            column: 24
          }
        }, {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 45
          }
        }, {
          start: {
            line: 18,
            column: 50
          },
          end: {
            line: 34,
            column: 4
          }
        }],
        line: 18
      },
      "11": {
        loc: {
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 20,
            column: 44
          }
        }, {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 24,
            column: 9
          }
        }],
        line: 20
      },
      "12": {
        loc: {
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "13": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "14": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 15
          }
        }, {
          start: {
            line: 28,
            column: 19
          },
          end: {
            line: 28,
            column: 33
          }
        }],
        line: 28
      },
      "15": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "16": {
        loc: {
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "17": {
        loc: {
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 54,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 54,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "18": {
        loc: {
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 60,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 60,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "19": {
        loc: {
          start: {
            line: 62,
            column: 30
          },
          end: {
            line: 62,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 30
          },
          end: {
            line: 62,
            column: 64
          }
        }, {
          start: {
            line: 62,
            column: 68
          },
          end: {
            line: 62,
            column: 96
          }
        }],
        line: 62
      },
      "20": {
        loc: {
          start: {
            line: 63,
            column: 33
          },
          end: {
            line: 63,
            column: 105
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 63,
            column: 33
          },
          end: {
            line: 63,
            column: 70
          }
        }, {
          start: {
            line: 63,
            column: 74
          },
          end: {
            line: 63,
            column: 105
          }
        }],
        line: 63
      },
      "21": {
        loc: {
          start: {
            line: 64,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 64
      },
      "22": {
        loc: {
          start: {
            line: 64,
            column: 16
          },
          end: {
            line: 64,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 64,
            column: 16
          },
          end: {
            line: 64,
            column: 26
          }
        }, {
          start: {
            line: 64,
            column: 30
          },
          end: {
            line: 64,
            column: 43
          }
        }],
        line: 64
      },
      "23": {
        loc: {
          start: {
            line: 94,
            column: 12
          },
          end: {
            line: 118,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 12
          },
          end: {
            line: 118,
            column: 13
          }
        }, {
          start: {
            line: 106,
            column: 17
          },
          end: {
            line: 118,
            column: 13
          }
        }],
        line: 94
      },
      "24": {
        loc: {
          start: {
            line: 106,
            column: 17
          },
          end: {
            line: 118,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 17
          },
          end: {
            line: 118,
            column: 13
          }
        }, {
          start: {
            line: 114,
            column: 17
          },
          end: {
            line: 118,
            column: 13
          }
        }],
        line: 106
      },
      "25": {
        loc: {
          start: {
            line: 121,
            column: 70
          },
          end: {
            line: 121,
            column: 127
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 121,
            column: 95
          },
          end: {
            line: 121,
            column: 100
          }
        }, {
          start: {
            line: 121,
            column: 103
          },
          end: {
            line: 121,
            column: 127
          }
        }],
        line: 121
      },
      "26": {
        loc: {
          start: {
            line: 123,
            column: 12
          },
          end: {
            line: 130,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 12
          },
          end: {
            line: 130,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 123
      },
      "27": {
        loc: {
          start: {
            line: 124,
            column: 16
          },
          end: {
            line: 126,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 16
          },
          end: {
            line: 126,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "28": {
        loc: {
          start: {
            line: 127,
            column: 16
          },
          end: {
            line: 129,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 127,
            column: 16
          },
          end: {
            line: 129,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 127
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/app/api/voice/stream/route.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/app/api/voice/stream/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport * as SpeechSDK from 'microsoft-cognitiveservices-speech-sdk';\nimport { logger } from '@/lib/utils/logger';\nimport { handleAsyncError } from '@/lib/utils/error-utils';\n\n/**\n * Azure Speech-to-Text API Endpoint\n * Converts audio blobs to text using Azure Speech Services\n */\nexport async function POST(request: NextRequest) {\n  return handleAsyncError(\n    async () => {\n      logger.api.request('POST /api/voice/stream', 'Processing audio for speech-to-text');\n\n    try {\n      const formData = await request.formData();\n      const audioFile = formData.get('audio') as File;\n\n      if (!audioFile) {\n        return NextResponse.json(\n          { error: 'No audio file provided' },\n          { status: 400 }\n        );\n      }\n\n      // Validate audio file\n      const validTypes = ['audio/wav', 'audio/webm', 'audio/mp4', 'audio/ogg'];\n      if (!validTypes.includes(audioFile.type)) {\n        logger.warn('Invalid audio type received', { type: audioFile.type });\n        return NextResponse.json(\n          { error: `Invalid audio type: ${audioFile.type}. Supported: ${validTypes.join(', ')}` },\n          { status: 400 }\n        );\n      }\n\n      // Get Azure Speech credentials\n      const speechKey = process.env.NEXT_PUBLIC_SPEECH_KEY || process.env.AZURE_SPEECH_KEY;\n      const speechRegion = process.env.NEXT_PUBLIC_SPEECH_REGION || process.env.AZURE_SPEECH_REGION;\n\n      if (!speechKey || !speechRegion) {\n        logger.error('Azure Speech Service credentials not found');\n        return NextResponse.json(\n          { error: 'Speech service configuration error' },\n          { status: 500 }\n        );\n      }\n\n      // Convert File to ArrayBuffer\n      const audioBuffer = await audioFile.arrayBuffer();\n      const audioData = new Uint8Array(audioBuffer);\n\n      // Configure Azure Speech SDK\n      const speechConfig = SpeechSDK.SpeechConfig.fromSubscription(speechKey, speechRegion);\n      speechConfig.speechRecognitionLanguage = 'en-US';\n      speechConfig.setProperty(SpeechSDK.PropertyId.SpeechServiceConnection_EnableAudioLogging, \"false\");\n\n      // Create audio stream from buffer\n      const audioFormat = SpeechSDK.AudioStreamFormat.getWaveFormatPCM(16000, 16, 1);\n      const audioStream = SpeechSDK.AudioInputStream.createPushStream(audioFormat);\n      \n      // Push audio data to stream\n      audioStream.write(audioData.buffer);\n      audioStream.close();\n\n      const audioConfig = SpeechSDK.AudioConfig.fromStreamInput(audioStream);\n      const recognizer = new SpeechSDK.SpeechRecognizer(speechConfig, audioConfig);\n\n      // Perform speech recognition\n      const result = await new Promise<SpeechSDK.SpeechRecognitionResult>((resolve, reject) => {\n        recognizer.recognizeOnceAsync(\n          (result) => {\n            recognizer.close();\n            resolve(result);\n          },\n          (error) => {\n            recognizer.close();\n            reject(error);\n          }\n        );\n      });\n\n      // Process recognition result\n      if (result.reason === SpeechSDK.ResultReason.RecognizedSpeech) {\n        const transcript = result.text.trim();\n        \n        logger.api.response('POST /api/voice/stream', 200, {\n          transcriptLength: transcript.length,\n          audioSize: audioFile.size\n        });\n\n        return NextResponse.json({\n          text: transcript,\n          confidence: 0.95, // Azure doesn't always provide confidence, use default\n          duration: audioFile.size / 16000 // Rough estimation\n        });\n      } else if (result.reason === SpeechSDK.ResultReason.NoMatch) {\n        logger.warn('No speech detected in audio', { audioSize: audioFile.size });\n        return NextResponse.json({\n          text: '',\n          confidence: 0,\n          error: 'No speech detected'\n        });\n      } else {\n        const errorMessage = `Speech recognition failed: ${result.reason}`;\n        logger.error(errorMessage, { reason: result.reason });\n        return NextResponse.json(\n          { error: errorMessage },\n          { status: 422 }\n        );\n      }\n\n    } catch (error) {\n      logger.error('Speech-to-text processing failed', error instanceof Error ? error : new Error(String(error)));\n      \n      // Provide helpful error responses\n      if (error instanceof Error) {\n        if (error.message.includes('authentication')) {\n          return NextResponse.json(\n            { error: 'Speech service authentication failed' },\n            { status: 401 }\n          );\n        }\n        if (error.message.includes('quota')) {\n          return NextResponse.json(\n            { error: 'Speech service quota exceeded' },\n            { status: 429 }\n          );\n        }\n      }\n\n      return NextResponse.json(\n        { error: 'Internal speech processing error' },\n        { status: 500 }\n      );\n    }\n  },\n  'POST /api/voice/stream'\n  );\n}\n\n/**\n * Health check endpoint for speech service\n */\nexport async function GET() {\n  return NextResponse.json({\n    service: 'Azure Speech-to-Text',\n    status: 'available',\n    timestamp: new Date().toISOString()\n  });\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "fd924bf2f7c54ee5379ee5d69fda5bd45b16f1de"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ee9ppme9a = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ee9ppme9a();
var __createBinding =
/* istanbul ignore next */
(cov_1ee9ppme9a().s[0]++,
/* istanbul ignore next */
(cov_1ee9ppme9a().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1ee9ppme9a().b[0][1]++, this.__createBinding) ||
/* istanbul ignore next */
(cov_1ee9ppme9a().b[0][2]++, Object.create ?
/* istanbul ignore next */
(cov_1ee9ppme9a().b[1][0]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_1ee9ppme9a().f[0]++;
  cov_1ee9ppme9a().s[1]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_1ee9ppme9a().b[2][0]++;
    cov_1ee9ppme9a().s[2]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_1ee9ppme9a().b[2][1]++;
  }
  var desc =
  /* istanbul ignore next */
  (cov_1ee9ppme9a().s[3]++, Object.getOwnPropertyDescriptor(m, k));
  /* istanbul ignore next */
  cov_1ee9ppme9a().s[4]++;
  if (
  /* istanbul ignore next */
  (cov_1ee9ppme9a().b[4][0]++, !desc) ||
  /* istanbul ignore next */
  (cov_1ee9ppme9a().b[4][1]++, "get" in desc ?
  /* istanbul ignore next */
  (cov_1ee9ppme9a().b[5][0]++, !m.__esModule) :
  /* istanbul ignore next */
  (cov_1ee9ppme9a().b[5][1]++,
  /* istanbul ignore next */
  (cov_1ee9ppme9a().b[6][0]++, desc.writable) ||
  /* istanbul ignore next */
  (cov_1ee9ppme9a().b[6][1]++, desc.configurable)))) {
    /* istanbul ignore next */
    cov_1ee9ppme9a().b[3][0]++;
    cov_1ee9ppme9a().s[5]++;
    desc = {
      enumerable: true,
      get: function () {
        /* istanbul ignore next */
        cov_1ee9ppme9a().f[1]++;
        cov_1ee9ppme9a().s[6]++;
        return m[k];
      }
    };
  } else
  /* istanbul ignore next */
  {
    cov_1ee9ppme9a().b[3][1]++;
  }
  cov_1ee9ppme9a().s[7]++;
  Object.defineProperty(o, k2, desc);
}) :
/* istanbul ignore next */
(cov_1ee9ppme9a().b[1][1]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_1ee9ppme9a().f[2]++;
  cov_1ee9ppme9a().s[8]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_1ee9ppme9a().b[7][0]++;
    cov_1ee9ppme9a().s[9]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_1ee9ppme9a().b[7][1]++;
  }
  cov_1ee9ppme9a().s[10]++;
  o[k2] = m[k];
})));
var __setModuleDefault =
/* istanbul ignore next */
(cov_1ee9ppme9a().s[11]++,
/* istanbul ignore next */
(cov_1ee9ppme9a().b[8][0]++, this) &&
/* istanbul ignore next */
(cov_1ee9ppme9a().b[8][1]++, this.__setModuleDefault) ||
/* istanbul ignore next */
(cov_1ee9ppme9a().b[8][2]++, Object.create ?
/* istanbul ignore next */
(cov_1ee9ppme9a().b[9][0]++, function (o, v) {
  /* istanbul ignore next */
  cov_1ee9ppme9a().f[3]++;
  cov_1ee9ppme9a().s[12]++;
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
}) :
/* istanbul ignore next */
(cov_1ee9ppme9a().b[9][1]++, function (o, v) {
  /* istanbul ignore next */
  cov_1ee9ppme9a().f[4]++;
  cov_1ee9ppme9a().s[13]++;
  o["default"] = v;
})));
var __importStar =
/* istanbul ignore next */
(cov_1ee9ppme9a().s[14]++,
/* istanbul ignore next */
(cov_1ee9ppme9a().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_1ee9ppme9a().b[10][1]++, this.__importStar) ||
/* istanbul ignore next */
(cov_1ee9ppme9a().b[10][2]++, function () {
  /* istanbul ignore next */
  cov_1ee9ppme9a().f[5]++;
  cov_1ee9ppme9a().s[15]++;
  var ownKeys = function (o) {
    /* istanbul ignore next */
    cov_1ee9ppme9a().f[6]++;
    cov_1ee9ppme9a().s[16]++;
    ownKeys =
    /* istanbul ignore next */
    (cov_1ee9ppme9a().b[11][0]++, Object.getOwnPropertyNames) ||
    /* istanbul ignore next */
    (cov_1ee9ppme9a().b[11][1]++, function (o) {
      /* istanbul ignore next */
      cov_1ee9ppme9a().f[7]++;
      var ar =
      /* istanbul ignore next */
      (cov_1ee9ppme9a().s[17]++, []);
      /* istanbul ignore next */
      cov_1ee9ppme9a().s[18]++;
      for (var k in o) {
        /* istanbul ignore next */
        cov_1ee9ppme9a().s[19]++;
        if (Object.prototype.hasOwnProperty.call(o, k)) {
          /* istanbul ignore next */
          cov_1ee9ppme9a().b[12][0]++;
          cov_1ee9ppme9a().s[20]++;
          ar[ar.length] = k;
        } else
        /* istanbul ignore next */
        {
          cov_1ee9ppme9a().b[12][1]++;
        }
      }
      /* istanbul ignore next */
      cov_1ee9ppme9a().s[21]++;
      return ar;
    });
    /* istanbul ignore next */
    cov_1ee9ppme9a().s[22]++;
    return ownKeys(o);
  };
  /* istanbul ignore next */
  cov_1ee9ppme9a().s[23]++;
  return function (mod) {
    /* istanbul ignore next */
    cov_1ee9ppme9a().f[8]++;
    cov_1ee9ppme9a().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_1ee9ppme9a().b[14][0]++, mod) &&
    /* istanbul ignore next */
    (cov_1ee9ppme9a().b[14][1]++, mod.__esModule)) {
      /* istanbul ignore next */
      cov_1ee9ppme9a().b[13][0]++;
      cov_1ee9ppme9a().s[25]++;
      return mod;
    } else
    /* istanbul ignore next */
    {
      cov_1ee9ppme9a().b[13][1]++;
    }
    var result =
    /* istanbul ignore next */
    (cov_1ee9ppme9a().s[26]++, {});
    /* istanbul ignore next */
    cov_1ee9ppme9a().s[27]++;
    if (mod != null) {
      /* istanbul ignore next */
      cov_1ee9ppme9a().b[15][0]++;
      cov_1ee9ppme9a().s[28]++;
      for (var k =
        /* istanbul ignore next */
        (cov_1ee9ppme9a().s[29]++, ownKeys(mod)), i =
        /* istanbul ignore next */
        (cov_1ee9ppme9a().s[30]++, 0); i < k.length; i++) {
        /* istanbul ignore next */
        cov_1ee9ppme9a().s[31]++;
        if (k[i] !== "default") {
          /* istanbul ignore next */
          cov_1ee9ppme9a().b[16][0]++;
          cov_1ee9ppme9a().s[32]++;
          __createBinding(result, mod, k[i]);
        } else
        /* istanbul ignore next */
        {
          cov_1ee9ppme9a().b[16][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_1ee9ppme9a().b[15][1]++;
    }
    cov_1ee9ppme9a().s[33]++;
    __setModuleDefault(result, mod);
    /* istanbul ignore next */
    cov_1ee9ppme9a().s[34]++;
    return result;
  };
}()));
/* istanbul ignore next */
cov_1ee9ppme9a().s[35]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1ee9ppme9a().s[36]++;
exports.POST = POST;
/* istanbul ignore next */
cov_1ee9ppme9a().s[37]++;
exports.GET = GET;
const server_1 =
/* istanbul ignore next */
(cov_1ee9ppme9a().s[38]++, require("next/server"));
const SpeechSDK =
/* istanbul ignore next */
(cov_1ee9ppme9a().s[39]++, __importStar(require("microsoft-cognitiveservices-speech-sdk")));
const logger_1 =
/* istanbul ignore next */
(cov_1ee9ppme9a().s[40]++, require("@/lib/utils/logger"));
const error_utils_1 =
/* istanbul ignore next */
(cov_1ee9ppme9a().s[41]++, require("@/lib/utils/error-utils"));
/**
 * Azure Speech-to-Text API Endpoint
 * Converts audio blobs to text using Azure Speech Services
 */
async function POST(request) {
  /* istanbul ignore next */
  cov_1ee9ppme9a().f[9]++;
  cov_1ee9ppme9a().s[42]++;
  return (0, error_utils_1.handleAsyncError)(async () => {
    /* istanbul ignore next */
    cov_1ee9ppme9a().f[10]++;
    cov_1ee9ppme9a().s[43]++;
    logger_1.logger.api.request('POST /api/voice/stream', 'Processing audio for speech-to-text');
    /* istanbul ignore next */
    cov_1ee9ppme9a().s[44]++;
    try {
      const formData =
      /* istanbul ignore next */
      (cov_1ee9ppme9a().s[45]++, await request.formData());
      const audioFile =
      /* istanbul ignore next */
      (cov_1ee9ppme9a().s[46]++, formData.get('audio'));
      /* istanbul ignore next */
      cov_1ee9ppme9a().s[47]++;
      if (!audioFile) {
        /* istanbul ignore next */
        cov_1ee9ppme9a().b[17][0]++;
        cov_1ee9ppme9a().s[48]++;
        return server_1.NextResponse.json({
          error: 'No audio file provided'
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_1ee9ppme9a().b[17][1]++;
      }
      // Validate audio file
      const validTypes =
      /* istanbul ignore next */
      (cov_1ee9ppme9a().s[49]++, ['audio/wav', 'audio/webm', 'audio/mp4', 'audio/ogg']);
      /* istanbul ignore next */
      cov_1ee9ppme9a().s[50]++;
      if (!validTypes.includes(audioFile.type)) {
        /* istanbul ignore next */
        cov_1ee9ppme9a().b[18][0]++;
        cov_1ee9ppme9a().s[51]++;
        logger_1.logger.warn('Invalid audio type received', {
          type: audioFile.type
        });
        /* istanbul ignore next */
        cov_1ee9ppme9a().s[52]++;
        return server_1.NextResponse.json({
          error: `Invalid audio type: ${audioFile.type}. Supported: ${validTypes.join(', ')}`
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_1ee9ppme9a().b[18][1]++;
      }
      // Get Azure Speech credentials
      const speechKey =
      /* istanbul ignore next */
      (cov_1ee9ppme9a().s[53]++,
      /* istanbul ignore next */
      (cov_1ee9ppme9a().b[19][0]++, process.env.NEXT_PUBLIC_SPEECH_KEY) ||
      /* istanbul ignore next */
      (cov_1ee9ppme9a().b[19][1]++, process.env.AZURE_SPEECH_KEY));
      const speechRegion =
      /* istanbul ignore next */
      (cov_1ee9ppme9a().s[54]++,
      /* istanbul ignore next */
      (cov_1ee9ppme9a().b[20][0]++, process.env.NEXT_PUBLIC_SPEECH_REGION) ||
      /* istanbul ignore next */
      (cov_1ee9ppme9a().b[20][1]++, process.env.AZURE_SPEECH_REGION));
      /* istanbul ignore next */
      cov_1ee9ppme9a().s[55]++;
      if (
      /* istanbul ignore next */
      (cov_1ee9ppme9a().b[22][0]++, !speechKey) ||
      /* istanbul ignore next */
      (cov_1ee9ppme9a().b[22][1]++, !speechRegion)) {
        /* istanbul ignore next */
        cov_1ee9ppme9a().b[21][0]++;
        cov_1ee9ppme9a().s[56]++;
        logger_1.logger.error('Azure Speech Service credentials not found');
        /* istanbul ignore next */
        cov_1ee9ppme9a().s[57]++;
        return server_1.NextResponse.json({
          error: 'Speech service configuration error'
        }, {
          status: 500
        });
      } else
      /* istanbul ignore next */
      {
        cov_1ee9ppme9a().b[21][1]++;
      }
      // Convert File to ArrayBuffer
      const audioBuffer =
      /* istanbul ignore next */
      (cov_1ee9ppme9a().s[58]++, await audioFile.arrayBuffer());
      const audioData =
      /* istanbul ignore next */
      (cov_1ee9ppme9a().s[59]++, new Uint8Array(audioBuffer));
      // Configure Azure Speech SDK
      const speechConfig =
      /* istanbul ignore next */
      (cov_1ee9ppme9a().s[60]++, SpeechSDK.SpeechConfig.fromSubscription(speechKey, speechRegion));
      /* istanbul ignore next */
      cov_1ee9ppme9a().s[61]++;
      speechConfig.speechRecognitionLanguage = 'en-US';
      /* istanbul ignore next */
      cov_1ee9ppme9a().s[62]++;
      speechConfig.setProperty(SpeechSDK.PropertyId.SpeechServiceConnection_EnableAudioLogging, "false");
      // Create audio stream from buffer
      const audioFormat =
      /* istanbul ignore next */
      (cov_1ee9ppme9a().s[63]++, SpeechSDK.AudioStreamFormat.getWaveFormatPCM(16000, 16, 1));
      const audioStream =
      /* istanbul ignore next */
      (cov_1ee9ppme9a().s[64]++, SpeechSDK.AudioInputStream.createPushStream(audioFormat));
      // Push audio data to stream
      /* istanbul ignore next */
      cov_1ee9ppme9a().s[65]++;
      audioStream.write(audioData.buffer);
      /* istanbul ignore next */
      cov_1ee9ppme9a().s[66]++;
      audioStream.close();
      const audioConfig =
      /* istanbul ignore next */
      (cov_1ee9ppme9a().s[67]++, SpeechSDK.AudioConfig.fromStreamInput(audioStream));
      const recognizer =
      /* istanbul ignore next */
      (cov_1ee9ppme9a().s[68]++, new SpeechSDK.SpeechRecognizer(speechConfig, audioConfig));
      // Perform speech recognition
      const result =
      /* istanbul ignore next */
      (cov_1ee9ppme9a().s[69]++, await new Promise((resolve, reject) => {
        /* istanbul ignore next */
        cov_1ee9ppme9a().f[11]++;
        cov_1ee9ppme9a().s[70]++;
        recognizer.recognizeOnceAsync(result => {
          /* istanbul ignore next */
          cov_1ee9ppme9a().f[12]++;
          cov_1ee9ppme9a().s[71]++;
          recognizer.close();
          /* istanbul ignore next */
          cov_1ee9ppme9a().s[72]++;
          resolve(result);
        }, error => {
          /* istanbul ignore next */
          cov_1ee9ppme9a().f[13]++;
          cov_1ee9ppme9a().s[73]++;
          recognizer.close();
          /* istanbul ignore next */
          cov_1ee9ppme9a().s[74]++;
          reject(error);
        });
      }));
      // Process recognition result
      /* istanbul ignore next */
      cov_1ee9ppme9a().s[75]++;
      if (result.reason === SpeechSDK.ResultReason.RecognizedSpeech) {
        /* istanbul ignore next */
        cov_1ee9ppme9a().b[23][0]++;
        const transcript =
        /* istanbul ignore next */
        (cov_1ee9ppme9a().s[76]++, result.text.trim());
        /* istanbul ignore next */
        cov_1ee9ppme9a().s[77]++;
        logger_1.logger.api.response('POST /api/voice/stream', 200, {
          transcriptLength: transcript.length,
          audioSize: audioFile.size
        });
        /* istanbul ignore next */
        cov_1ee9ppme9a().s[78]++;
        return server_1.NextResponse.json({
          text: transcript,
          confidence: 0.95,
          // Azure doesn't always provide confidence, use default
          duration: audioFile.size / 16000 // Rough estimation
        });
      } else {
        /* istanbul ignore next */
        cov_1ee9ppme9a().b[23][1]++;
        cov_1ee9ppme9a().s[79]++;
        if (result.reason === SpeechSDK.ResultReason.NoMatch) {
          /* istanbul ignore next */
          cov_1ee9ppme9a().b[24][0]++;
          cov_1ee9ppme9a().s[80]++;
          logger_1.logger.warn('No speech detected in audio', {
            audioSize: audioFile.size
          });
          /* istanbul ignore next */
          cov_1ee9ppme9a().s[81]++;
          return server_1.NextResponse.json({
            text: '',
            confidence: 0,
            error: 'No speech detected'
          });
        } else {
          /* istanbul ignore next */
          cov_1ee9ppme9a().b[24][1]++;
          const errorMessage =
          /* istanbul ignore next */
          (cov_1ee9ppme9a().s[82]++, `Speech recognition failed: ${result.reason}`);
          /* istanbul ignore next */
          cov_1ee9ppme9a().s[83]++;
          logger_1.logger.error(errorMessage, {
            reason: result.reason
          });
          /* istanbul ignore next */
          cov_1ee9ppme9a().s[84]++;
          return server_1.NextResponse.json({
            error: errorMessage
          }, {
            status: 422
          });
        }
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1ee9ppme9a().s[85]++;
      logger_1.logger.error('Speech-to-text processing failed', error instanceof Error ?
      /* istanbul ignore next */
      (cov_1ee9ppme9a().b[25][0]++, error) :
      /* istanbul ignore next */
      (cov_1ee9ppme9a().b[25][1]++, new Error(String(error))));
      // Provide helpful error responses
      /* istanbul ignore next */
      cov_1ee9ppme9a().s[86]++;
      if (error instanceof Error) {
        /* istanbul ignore next */
        cov_1ee9ppme9a().b[26][0]++;
        cov_1ee9ppme9a().s[87]++;
        if (error.message.includes('authentication')) {
          /* istanbul ignore next */
          cov_1ee9ppme9a().b[27][0]++;
          cov_1ee9ppme9a().s[88]++;
          return server_1.NextResponse.json({
            error: 'Speech service authentication failed'
          }, {
            status: 401
          });
        } else
        /* istanbul ignore next */
        {
          cov_1ee9ppme9a().b[27][1]++;
        }
        cov_1ee9ppme9a().s[89]++;
        if (error.message.includes('quota')) {
          /* istanbul ignore next */
          cov_1ee9ppme9a().b[28][0]++;
          cov_1ee9ppme9a().s[90]++;
          return server_1.NextResponse.json({
            error: 'Speech service quota exceeded'
          }, {
            status: 429
          });
        } else
        /* istanbul ignore next */
        {
          cov_1ee9ppme9a().b[28][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_1ee9ppme9a().b[26][1]++;
      }
      cov_1ee9ppme9a().s[91]++;
      return server_1.NextResponse.json({
        error: 'Internal speech processing error'
      }, {
        status: 500
      });
    }
  }, 'POST /api/voice/stream');
}
/**
 * Health check endpoint for speech service
 */
async function GET() {
  /* istanbul ignore next */
  cov_1ee9ppme9a().f[14]++;
  cov_1ee9ppme9a().s[92]++;
  return server_1.NextResponse.json({
    service: 'Azure Speech-to-Text',
    status: 'available',
    timestamp: new Date().toISOString()
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHBvcnRzIiwiUE9TVCIsImNvdl8xZWU5cHBtZTlhIiwicyIsIkdFVCIsInNlcnZlcl8xIiwicmVxdWlyZSIsIlNwZWVjaFNESyIsIl9faW1wb3J0U3RhciIsImxvZ2dlcl8xIiwiZXJyb3JfdXRpbHNfMSIsInJlcXVlc3QiLCJmIiwiaGFuZGxlQXN5bmNFcnJvciIsImxvZ2dlciIsImFwaSIsImZvcm1EYXRhIiwiYXVkaW9GaWxlIiwiZ2V0IiwiYiIsIk5leHRSZXNwb25zZSIsImpzb24iLCJlcnJvciIsInN0YXR1cyIsInZhbGlkVHlwZXMiLCJpbmNsdWRlcyIsInR5cGUiLCJ3YXJuIiwiam9pbiIsInNwZWVjaEtleSIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19TUEVFQ0hfS0VZIiwiQVpVUkVfU1BFRUNIX0tFWSIsInNwZWVjaFJlZ2lvbiIsIk5FWFRfUFVCTElDX1NQRUVDSF9SRUdJT04iLCJBWlVSRV9TUEVFQ0hfUkVHSU9OIiwiYXVkaW9CdWZmZXIiLCJhcnJheUJ1ZmZlciIsImF1ZGlvRGF0YSIsIlVpbnQ4QXJyYXkiLCJzcGVlY2hDb25maWciLCJTcGVlY2hDb25maWciLCJmcm9tU3Vic2NyaXB0aW9uIiwic3BlZWNoUmVjb2duaXRpb25MYW5ndWFnZSIsInNldFByb3BlcnR5IiwiUHJvcGVydHlJZCIsIlNwZWVjaFNlcnZpY2VDb25uZWN0aW9uX0VuYWJsZUF1ZGlvTG9nZ2luZyIsImF1ZGlvRm9ybWF0IiwiQXVkaW9TdHJlYW1Gb3JtYXQiLCJnZXRXYXZlRm9ybWF0UENNIiwiYXVkaW9TdHJlYW0iLCJBdWRpb0lucHV0U3RyZWFtIiwiY3JlYXRlUHVzaFN0cmVhbSIsIndyaXRlIiwiYnVmZmVyIiwiY2xvc2UiLCJhdWRpb0NvbmZpZyIsIkF1ZGlvQ29uZmlnIiwiZnJvbVN0cmVhbUlucHV0IiwicmVjb2duaXplciIsIlNwZWVjaFJlY29nbml6ZXIiLCJyZXN1bHQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlY29nbml6ZU9uY2VBc3luYyIsInJlYXNvbiIsIlJlc3VsdFJlYXNvbiIsIlJlY29nbml6ZWRTcGVlY2giLCJ0cmFuc2NyaXB0IiwidGV4dCIsInRyaW0iLCJyZXNwb25zZSIsInRyYW5zY3JpcHRMZW5ndGgiLCJsZW5ndGgiLCJhdWRpb1NpemUiLCJzaXplIiwiY29uZmlkZW5jZSIsImR1cmF0aW9uIiwiTm9NYXRjaCIsImVycm9yTWVzc2FnZSIsIkVycm9yIiwiU3RyaW5nIiwibWVzc2FnZSIsInNlcnZpY2UiLCJ0aW1lc3RhbXAiLCJEYXRlIiwidG9JU09TdHJpbmciXSwic291cmNlcyI6WyIvVXNlcnMvZGlrc2hhbnR2YXNoaXN0aGEvUHJlcEJldHRyL2FwcC9hcGkvdm9pY2Uvc3RyZWFtL3JvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgKiBhcyBTcGVlY2hTREsgZnJvbSAnbWljcm9zb2Z0LWNvZ25pdGl2ZXNlcnZpY2VzLXNwZWVjaC1zZGsnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnQC9saWIvdXRpbHMvbG9nZ2VyJztcbmltcG9ydCB7IGhhbmRsZUFzeW5jRXJyb3IgfSBmcm9tICdAL2xpYi91dGlscy9lcnJvci11dGlscyc7XG5cbi8qKlxuICogQXp1cmUgU3BlZWNoLXRvLVRleHQgQVBJIEVuZHBvaW50XG4gKiBDb252ZXJ0cyBhdWRpbyBibG9icyB0byB0ZXh0IHVzaW5nIEF6dXJlIFNwZWVjaCBTZXJ2aWNlc1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICByZXR1cm4gaGFuZGxlQXN5bmNFcnJvcihcbiAgICBhc3luYyAoKSA9PiB7XG4gICAgICBsb2dnZXIuYXBpLnJlcXVlc3QoJ1BPU1QgL2FwaS92b2ljZS9zdHJlYW0nLCAnUHJvY2Vzc2luZyBhdWRpbyBmb3Igc3BlZWNoLXRvLXRleHQnKTtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBmb3JtRGF0YSA9IGF3YWl0IHJlcXVlc3QuZm9ybURhdGEoKTtcbiAgICAgIGNvbnN0IGF1ZGlvRmlsZSA9IGZvcm1EYXRhLmdldCgnYXVkaW8nKSBhcyBGaWxlO1xuXG4gICAgICBpZiAoIWF1ZGlvRmlsZSkge1xuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgICAgeyBlcnJvcjogJ05vIGF1ZGlvIGZpbGUgcHJvdmlkZWQnIH0sXG4gICAgICAgICAgeyBzdGF0dXM6IDQwMCB9XG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIFZhbGlkYXRlIGF1ZGlvIGZpbGVcbiAgICAgIGNvbnN0IHZhbGlkVHlwZXMgPSBbJ2F1ZGlvL3dhdicsICdhdWRpby93ZWJtJywgJ2F1ZGlvL21wNCcsICdhdWRpby9vZ2cnXTtcbiAgICAgIGlmICghdmFsaWRUeXBlcy5pbmNsdWRlcyhhdWRpb0ZpbGUudHlwZSkpIHtcbiAgICAgICAgbG9nZ2VyLndhcm4oJ0ludmFsaWQgYXVkaW8gdHlwZSByZWNlaXZlZCcsIHsgdHlwZTogYXVkaW9GaWxlLnR5cGUgfSk7XG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgICB7IGVycm9yOiBgSW52YWxpZCBhdWRpbyB0eXBlOiAke2F1ZGlvRmlsZS50eXBlfS4gU3VwcG9ydGVkOiAke3ZhbGlkVHlwZXMuam9pbignLCAnKX1gIH0sXG4gICAgICAgICAgeyBzdGF0dXM6IDQwMCB9XG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIEdldCBBenVyZSBTcGVlY2ggY3JlZGVudGlhbHNcbiAgICAgIGNvbnN0IHNwZWVjaEtleSA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NQRUVDSF9LRVkgfHwgcHJvY2Vzcy5lbnYuQVpVUkVfU1BFRUNIX0tFWTtcbiAgICAgIGNvbnN0IHNwZWVjaFJlZ2lvbiA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NQRUVDSF9SRUdJT04gfHwgcHJvY2Vzcy5lbnYuQVpVUkVfU1BFRUNIX1JFR0lPTjtcblxuICAgICAgaWYgKCFzcGVlY2hLZXkgfHwgIXNwZWVjaFJlZ2lvbikge1xuICAgICAgICBsb2dnZXIuZXJyb3IoJ0F6dXJlIFNwZWVjaCBTZXJ2aWNlIGNyZWRlbnRpYWxzIG5vdCBmb3VuZCcpO1xuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgICAgeyBlcnJvcjogJ1NwZWVjaCBzZXJ2aWNlIGNvbmZpZ3VyYXRpb24gZXJyb3InIH0sXG4gICAgICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIENvbnZlcnQgRmlsZSB0byBBcnJheUJ1ZmZlclxuICAgICAgY29uc3QgYXVkaW9CdWZmZXIgPSBhd2FpdCBhdWRpb0ZpbGUuYXJyYXlCdWZmZXIoKTtcbiAgICAgIGNvbnN0IGF1ZGlvRGF0YSA9IG5ldyBVaW50OEFycmF5KGF1ZGlvQnVmZmVyKTtcblxuICAgICAgLy8gQ29uZmlndXJlIEF6dXJlIFNwZWVjaCBTREtcbiAgICAgIGNvbnN0IHNwZWVjaENvbmZpZyA9IFNwZWVjaFNESy5TcGVlY2hDb25maWcuZnJvbVN1YnNjcmlwdGlvbihzcGVlY2hLZXksIHNwZWVjaFJlZ2lvbik7XG4gICAgICBzcGVlY2hDb25maWcuc3BlZWNoUmVjb2duaXRpb25MYW5ndWFnZSA9ICdlbi1VUyc7XG4gICAgICBzcGVlY2hDb25maWcuc2V0UHJvcGVydHkoU3BlZWNoU0RLLlByb3BlcnR5SWQuU3BlZWNoU2VydmljZUNvbm5lY3Rpb25fRW5hYmxlQXVkaW9Mb2dnaW5nLCBcImZhbHNlXCIpO1xuXG4gICAgICAvLyBDcmVhdGUgYXVkaW8gc3RyZWFtIGZyb20gYnVmZmVyXG4gICAgICBjb25zdCBhdWRpb0Zvcm1hdCA9IFNwZWVjaFNESy5BdWRpb1N0cmVhbUZvcm1hdC5nZXRXYXZlRm9ybWF0UENNKDE2MDAwLCAxNiwgMSk7XG4gICAgICBjb25zdCBhdWRpb1N0cmVhbSA9IFNwZWVjaFNESy5BdWRpb0lucHV0U3RyZWFtLmNyZWF0ZVB1c2hTdHJlYW0oYXVkaW9Gb3JtYXQpO1xuICAgICAgXG4gICAgICAvLyBQdXNoIGF1ZGlvIGRhdGEgdG8gc3RyZWFtXG4gICAgICBhdWRpb1N0cmVhbS53cml0ZShhdWRpb0RhdGEuYnVmZmVyKTtcbiAgICAgIGF1ZGlvU3RyZWFtLmNsb3NlKCk7XG5cbiAgICAgIGNvbnN0IGF1ZGlvQ29uZmlnID0gU3BlZWNoU0RLLkF1ZGlvQ29uZmlnLmZyb21TdHJlYW1JbnB1dChhdWRpb1N0cmVhbSk7XG4gICAgICBjb25zdCByZWNvZ25pemVyID0gbmV3IFNwZWVjaFNESy5TcGVlY2hSZWNvZ25pemVyKHNwZWVjaENvbmZpZywgYXVkaW9Db25maWcpO1xuXG4gICAgICAvLyBQZXJmb3JtIHNwZWVjaCByZWNvZ25pdGlvblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbmV3IFByb21pc2U8U3BlZWNoU0RLLlNwZWVjaFJlY29nbml0aW9uUmVzdWx0PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHJlY29nbml6ZXIucmVjb2duaXplT25jZUFzeW5jKFxuICAgICAgICAgIChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgIHJlY29nbml6ZXIuY2xvc2UoKTtcbiAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgcmVjb2duaXplci5jbG9zZSgpO1xuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9KTtcblxuICAgICAgLy8gUHJvY2VzcyByZWNvZ25pdGlvbiByZXN1bHRcbiAgICAgIGlmIChyZXN1bHQucmVhc29uID09PSBTcGVlY2hTREsuUmVzdWx0UmVhc29uLlJlY29nbml6ZWRTcGVlY2gpIHtcbiAgICAgICAgY29uc3QgdHJhbnNjcmlwdCA9IHJlc3VsdC50ZXh0LnRyaW0oKTtcbiAgICAgICAgXG4gICAgICAgIGxvZ2dlci5hcGkucmVzcG9uc2UoJ1BPU1QgL2FwaS92b2ljZS9zdHJlYW0nLCAyMDAsIHtcbiAgICAgICAgICB0cmFuc2NyaXB0TGVuZ3RoOiB0cmFuc2NyaXB0Lmxlbmd0aCxcbiAgICAgICAgICBhdWRpb1NpemU6IGF1ZGlvRmlsZS5zaXplXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICAgICAgdGV4dDogdHJhbnNjcmlwdCxcbiAgICAgICAgICBjb25maWRlbmNlOiAwLjk1LCAvLyBBenVyZSBkb2Vzbid0IGFsd2F5cyBwcm92aWRlIGNvbmZpZGVuY2UsIHVzZSBkZWZhdWx0XG4gICAgICAgICAgZHVyYXRpb246IGF1ZGlvRmlsZS5zaXplIC8gMTYwMDAgLy8gUm91Z2ggZXN0aW1hdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAocmVzdWx0LnJlYXNvbiA9PT0gU3BlZWNoU0RLLlJlc3VsdFJlYXNvbi5Ob01hdGNoKSB7XG4gICAgICAgIGxvZ2dlci53YXJuKCdObyBzcGVlY2ggZGV0ZWN0ZWQgaW4gYXVkaW8nLCB7IGF1ZGlvU2l6ZTogYXVkaW9GaWxlLnNpemUgfSk7XG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICAgICAgdGV4dDogJycsXG4gICAgICAgICAgY29uZmlkZW5jZTogMCxcbiAgICAgICAgICBlcnJvcjogJ05vIHNwZWVjaCBkZXRlY3RlZCdcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBgU3BlZWNoIHJlY29nbml0aW9uIGZhaWxlZDogJHtyZXN1bHQucmVhc29ufWA7XG4gICAgICAgIGxvZ2dlci5lcnJvcihlcnJvck1lc3NhZ2UsIHsgcmVhc29uOiByZXN1bHQucmVhc29uIH0pO1xuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgICAgeyBlcnJvcjogZXJyb3JNZXNzYWdlIH0sXG4gICAgICAgICAgeyBzdGF0dXM6IDQyMiB9XG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nZ2VyLmVycm9yKCdTcGVlY2gtdG8tdGV4dCBwcm9jZXNzaW5nIGZhaWxlZCcsIGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvciA6IG5ldyBFcnJvcihTdHJpbmcoZXJyb3IpKSk7XG4gICAgICBcbiAgICAgIC8vIFByb3ZpZGUgaGVscGZ1bCBlcnJvciByZXNwb25zZXNcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIGlmIChlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdhdXRoZW50aWNhdGlvbicpKSB7XG4gICAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICAgICAgeyBlcnJvcjogJ1NwZWVjaCBzZXJ2aWNlIGF1dGhlbnRpY2F0aW9uIGZhaWxlZCcgfSxcbiAgICAgICAgICAgIHsgc3RhdHVzOiA0MDEgfVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ3F1b3RhJykpIHtcbiAgICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgICAgICB7IGVycm9yOiAnU3BlZWNoIHNlcnZpY2UgcXVvdGEgZXhjZWVkZWQnIH0sXG4gICAgICAgICAgICB7IHN0YXR1czogNDI5IH1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgeyBlcnJvcjogJ0ludGVybmFsIHNwZWVjaCBwcm9jZXNzaW5nIGVycm9yJyB9LFxuICAgICAgICB7IHN0YXR1czogNTAwIH1cbiAgICAgICk7XG4gICAgfVxuICB9LFxuICAnUE9TVCAvYXBpL3ZvaWNlL3N0cmVhbSdcbiAgKTtcbn1cblxuLyoqXG4gKiBIZWFsdGggY2hlY2sgZW5kcG9pbnQgZm9yIHNwZWVjaCBzZXJ2aWNlXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQoKSB7XG4gIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgc2VydmljZTogJ0F6dXJlIFNwZWVjaC10by1UZXh0JyxcbiAgICBzdGF0dXM6ICdhdmFpbGFibGUnLFxuICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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