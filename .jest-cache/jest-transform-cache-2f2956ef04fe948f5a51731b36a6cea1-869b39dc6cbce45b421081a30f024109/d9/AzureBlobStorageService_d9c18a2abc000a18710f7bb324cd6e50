7df120cefca0354e128781b877158188
"use strict";

/* istanbul ignore next */
function cov_2ecg0ha5vh() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/storage/providers/AzureBlobStorageService.ts";
  var hash = "b5937e3caf171766ae708507caa86a0b7ff689ec";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/storage/providers/AzureBlobStorageService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 41
        }
      },
      "2": {
        start: {
          line: 4,
          column: 23
        },
        end: {
          line: 4,
          column: 53
        }
      },
      "3": {
        start: {
          line: 5,
          column: 19
        },
        end: {
          line: 5,
          column: 45
        }
      },
      "4": {
        start: {
          line: 6,
          column: 14
        },
        end: {
          line: 6,
          column: 43
        }
      },
      "5": {
        start: {
          line: 7,
          column: 26
        },
        end: {
          line: 7,
          column: 55
        }
      },
      "6": {
        start: {
          line: 8,
          column: 20
        },
        end: {
          line: 8,
          column: 45
        }
      },
      "7": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 43
        }
      },
      "8": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 35
        }
      },
      "9": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 53
        }
      },
      "10": {
        start: {
          line: 14,
          column: 31
        },
        end: {
          line: 14,
          column: 89
        }
      },
      "11": {
        start: {
          line: 16,
          column: 27
        },
        end: {
          line: 18,
          column: 53
        }
      },
      "12": {
        start: {
          line: 19,
          column: 34
        },
        end: {
          line: 19,
          column: 98
        }
      },
      "13": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 88
        }
      },
      "14": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 24,
          column: 19
        }
      },
      "15": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 24,
          column: 19
        }
      },
      "16": {
        start: {
          line: 25,
          column: 23
        },
        end: {
          line: 25,
          column: 57
        }
      },
      "17": {
        start: {
          line: 26,
          column: 21
        },
        end: {
          line: 26,
          column: 51
        }
      },
      "18": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 39,
          column: 9
        }
      },
      "19": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 59
        }
      },
      "20": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 38
        }
      },
      "21": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 40
        }
      },
      "22": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 40
        }
      },
      "23": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 64
        }
      },
      "24": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 35,
          column: 154
        }
      },
      "25": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 23
        }
      },
      "26": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 32
        }
      },
      "27": {
        start: {
          line: 43,
          column: 32
        },
        end: {
          line: 43,
          column: 77
        }
      },
      "28": {
        start: {
          line: 44,
          column: 23
        },
        end: {
          line: 44,
          column: 57
        }
      },
      "29": {
        start: {
          line: 45,
          column: 21
        },
        end: {
          line: 45,
          column: 47
        }
      },
      "30": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 66
        }
      },
      "31": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 67,
          column: 9
        }
      },
      "32": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 112
        }
      },
      "33": {
        start: {
          line: 49,
          column: 29
        },
        end: {
          line: 56,
          column: 13
        }
      },
      "34": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 40
        }
      },
      "35": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 28
        }
      },
      "36": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 40
        }
      },
      "37": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 64
        }
      },
      "38": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 152
        }
      },
      "39": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 23
        }
      },
      "40": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 32
        }
      },
      "41": {
        start: {
          line: 71,
          column: 32
        },
        end: {
          line: 71,
          column: 77
        }
      },
      "42": {
        start: {
          line: 72,
          column: 23
        },
        end: {
          line: 72,
          column: 57
        }
      },
      "43": {
        start: {
          line: 73,
          column: 21
        },
        end: {
          line: 73,
          column: 49
        }
      },
      "44": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 40
        }
      },
      "45": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "46": {
        start: {
          line: 76,
          column: 27
        },
        end: {
          line: 76,
          column: 67
        }
      },
      "47": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 40
        }
      },
      "48": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 26
        }
      },
      "49": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 40
        }
      },
      "50": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 64
        }
      },
      "51": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 156
        }
      },
      "52": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 23
        }
      },
      "53": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 32
        }
      },
      "54": {
        start: {
          line: 91,
          column: 32
        },
        end: {
          line: 91,
          column: 77
        }
      },
      "55": {
        start: {
          line: 92,
          column: 23
        },
        end: {
          line: 92,
          column: 57
        }
      },
      "56": {
        start: {
          line: 93,
          column: 21
        },
        end: {
          line: 93,
          column: 47
        }
      },
      "57": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 40
        }
      },
      "58": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 106,
          column: 9
        }
      },
      "59": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 43
        }
      },
      "60": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 40
        }
      },
      "61": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 40
        }
      },
      "62": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 101,
          column: 64
        }
      },
      "63": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 154
        }
      },
      "64": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 23
        }
      },
      "65": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 32
        }
      },
      "66": {
        start: {
          line: 110,
          column: 32
        },
        end: {
          line: 110,
          column: 77
        }
      },
      "67": {
        start: {
          line: 111,
          column: 28
        },
        end: {
          line: 111,
          column: 67
        }
      },
      "68": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 112,
          column: 184
        }
      },
      "69": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 113,
          column: 111
        }
      },
      "70": {
        start: {
          line: 114,
          column: 27
        },
        end: {
          line: 114,
          column: 37
        }
      },
      "71": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 115,
          column: 137
        }
      },
      "72": {
        start: {
          line: 116,
          column: 35
        },
        end: {
          line: 122,
          column: 43
        }
      },
      "73": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 123,
          column: 73
        }
      },
      "74": {
        start: {
          line: 126,
          column: 0
        },
        end: {
          line: 126,
          column: 58
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        loc: {
          start: {
            line: 10,
            column: 51
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 23
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 22
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        },
        loc: {
          start: {
            line: 41,
            column: 39
          },
          end: {
            line: 68,
            column: 5
          }
        },
        line: 41
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        loc: {
          start: {
            line: 69,
            column: 25
          },
          end: {
            line: 88,
            column: 5
          }
        },
        line: 69
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 89,
            column: 5
          }
        },
        loc: {
          start: {
            line: 89,
            column: 23
          },
          end: {
            line: 107,
            column: 5
          }
        },
        line: 89
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 108,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        },
        loc: {
          start: {
            line: 108,
            column: 38
          },
          end: {
            line: 124,
            column: 5
          }
        },
        line: 108
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 27
          },
          end: {
            line: 18,
            column: 53
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 17,
            column: 14
          },
          end: {
            line: 17,
            column: 123
          }
        }, {
          start: {
            line: 18,
            column: 14
          },
          end: {
            line: 18,
            column: 53
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 24,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 24,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 23
      },
      "2": {
        loc: {
          start: {
            line: 54,
            column: 26
          },
          end: {
            line: 54,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 54,
            column: 26
          },
          end: {
            line: 54,
            column: 34
          }
        }, {
          start: {
            line: 54,
            column: 38
          },
          end: {
            line: 54,
            column: 64
          }
        }],
        line: 54
      },
      "3": {
        loc: {
          start: {
            line: 112,
            column: 27
          },
          end: {
            line: 112,
            column: 183
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 27
          },
          end: {
            line: 112,
            column: 108
          }
        }, {
          start: {
            line: 112,
            column: 112
          },
          end: {
            line: 112,
            column: 183
          }
        }],
        line: 112
      },
      "4": {
        loc: {
          start: {
            line: 112,
            column: 28
          },
          end: {
            line: 112,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 112,
            column: 69
          },
          end: {
            line: 112,
            column: 75
          }
        }, {
          start: {
            line: 112,
            column: 78
          },
          end: {
            line: 112,
            column: 96
          }
        }],
        line: 112
      },
      "5": {
        loc: {
          start: {
            line: 112,
            column: 28
          },
          end: {
            line: 112,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 28
          },
          end: {
            line: 112,
            column: 44
          }
        }, {
          start: {
            line: 112,
            column: 48
          },
          end: {
            line: 112,
            column: 66
          }
        }],
        line: 112
      },
      "6": {
        loc: {
          start: {
            line: 112,
            column: 114
          },
          end: {
            line: 112,
            column: 182
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 112,
            column: 155
          },
          end: {
            line: 112,
            column: 161
          }
        }, {
          start: {
            line: 112,
            column: 164
          },
          end: {
            line: 112,
            column: 182
          }
        }],
        line: 112
      },
      "7": {
        loc: {
          start: {
            line: 112,
            column: 114
          },
          end: {
            line: 112,
            column: 152
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 114
          },
          end: {
            line: 112,
            column: 130
          }
        }, {
          start: {
            line: 112,
            column: 134
          },
          end: {
            line: 112,
            column: 152
          }
        }],
        line: 112
      },
      "8": {
        loc: {
          start: {
            line: 113,
            column: 29
          },
          end: {
            line: 113,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 113,
            column: 70
          },
          end: {
            line: 113,
            column: 76
          }
        }, {
          start: {
            line: 113,
            column: 79
          },
          end: {
            line: 113,
            column: 97
          }
        }],
        line: 113
      },
      "9": {
        loc: {
          start: {
            line: 113,
            column: 29
          },
          end: {
            line: 113,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 113,
            column: 29
          },
          end: {
            line: 113,
            column: 45
          }
        }, {
          start: {
            line: 113,
            column: 49
          },
          end: {
            line: 113,
            column: 67
          }
        }],
        line: 113
      },
      "10": {
        loc: {
          start: {
            line: 115,
            column: 57
          },
          end: {
            line: 115,
            column: 134
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 115,
            column: 58
          },
          end: {
            line: 115,
            column: 125
          }
        }, {
          start: {
            line: 115,
            column: 130
          },
          end: {
            line: 115,
            column: 134
          }
        }],
        line: 115
      },
      "11": {
        loc: {
          start: {
            line: 115,
            column: 58
          },
          end: {
            line: 115,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 115,
            column: 99
          },
          end: {
            line: 115,
            column: 105
          }
        }, {
          start: {
            line: 115,
            column: 108
          },
          end: {
            line: 115,
            column: 125
          }
        }],
        line: 115
      },
      "12": {
        loc: {
          start: {
            line: 115,
            column: 58
          },
          end: {
            line: 115,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 115,
            column: 58
          },
          end: {
            line: 115,
            column: 74
          }
        }, {
          start: {
            line: 115,
            column: 78
          },
          end: {
            line: 115,
            column: 96
          }
        }],
        line: 115
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/storage/providers/AzureBlobStorageService.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/storage/providers/AzureBlobStorageService.ts"],
      sourcesContent: ["import {\n  BlobServiceClient,\n  ContainerClient,\n  StorageSharedKeyCredential,\n  BlobSASPermissions,\n  generateBlobSASQueryParameters,\n} from '@azure/storage-blob';\nimport { DefaultAzureCredential } from '@azure/identity';\nimport { trace } from '@opentelemetry/api';\n\nimport { IStorageService, FileMeta, SignedUrlOptions, StorageProvider, StorageError } from '../IStorageService';\nimport { getConfiguration } from '@/lib/azure-config';\n\nconst TRACER_NAME = 'AzureBlobStorageService';\n\nexport class AzureBlobStorageService implements IStorageService {\n  private containerClient: ContainerClient;\n  private storageAccountName: string;\n  private isInitialized = false;\n\n  constructor(storageAccountName: string, private containerName: string) {\n    this.storageAccountName = storageAccountName;\n    const blobServiceUrl = `https://${this.storageAccountName}.blob.core.windows.net`;\n\n    // Use DefaultAzureCredential in production, fallback to connection string for local dev\n    const credential = process.env.AZURE_STORAGE_CONNECTION_STRING\n      ? new StorageSharedKeyCredential(this.storageAccountName, process.env.AZURE_STORAGE_ACCOUNT_KEY!)\n      : new DefaultAzureCredential();\n\n    const blobServiceClient = new BlobServiceClient(blobServiceUrl, credential);\n    this.containerClient = blobServiceClient.getContainerClient(this.containerName);\n  }\n\n  async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    const tracer = trace.getTracer(TRACER_NAME);\n    const span = tracer.startSpan('initialize');\n\n    try {\n      await this.containerClient.createIfNotExists(); // Private access by default\n      this.isInitialized = true;\n      span.setStatus({ code: 1 }); // OK\n    } catch (error) {\n      span.recordException(error as Error);\n      span.setStatus({ code: 2, message: (error as Error).message }); // ERROR\n      throw new StorageError('Failed to initialize Azure Blob Storage container', StorageProvider.Azure, error);\n    } finally {\n      span.end();\n    }\n  }\n\n  async upload(file: Buffer, path: string, mimeType?: string): Promise<FileMeta> {\n    await this.initialize();\n    const blockBlobClient = this.containerClient.getBlockBlobClient(path);\n\n    const tracer = trace.getTracer(TRACER_NAME);\n    const span = tracer.startSpan('upload');\n    span.setAttributes({ path, mimeType, size: file.length });\n\n    try {\n      await blockBlobClient.upload(file, file.length, { blobHTTPHeaders: { blobContentType: mimeType } });\n      const fileMeta: FileMeta = {\n        provider: StorageProvider.Azure,\n        url: blockBlobClient.url,\n        path,\n        size: file.length,\n        mimeType: mimeType || 'application/octet-stream',\n        createdAt: new Date(),\n      };\n      span.setStatus({ code: 1 });\n      return fileMeta;\n    } catch (error) {\n      span.recordException(error as Error);\n      span.setStatus({ code: 2, message: (error as Error).message });\n      throw new StorageError(`Failed to upload to Azure Blob Storage: ${path}`, StorageProvider.Azure, error);\n    } finally {\n      span.end();\n    }\n  }\n\n  async download(path: string): Promise<Buffer> {\n    await this.initialize();\n    const blockBlobClient = this.containerClient.getBlockBlobClient(path);\n\n    const tracer = trace.getTracer(TRACER_NAME);\n    const span = tracer.startSpan('download');\n    span.setAttribute('path', path);\n\n    try {\n      const buffer = await blockBlobClient.downloadToBuffer();\n      span.setStatus({ code: 1 });\n      return buffer;\n    } catch (error) {\n      span.recordException(error as Error);\n      span.setStatus({ code: 2, message: (error as Error).message });\n      throw new StorageError(`Failed to download from Azure Blob Storage: ${path}`, StorageProvider.Azure, error);\n    } finally {\n      span.end();\n    }\n  }\n\n  async delete(path: string): Promise<void> {\n    await this.initialize();\n    const blockBlobClient = this.containerClient.getBlockBlobClient(path);\n\n    const tracer = trace.getTracer(TRACER_NAME);\n    const span = tracer.startSpan('delete');\n    span.setAttribute('path', path);\n\n    try {\n      await blockBlobClient.delete();\n      span.setStatus({ code: 1 });\n    } catch (error) {\n      span.recordException(error as Error);\n      span.setStatus({ code: 2, message: (error as Error).message });\n      throw new StorageError(`Failed to delete from Azure Blob Storage: ${path}`, StorageProvider.Azure, error);\n    } finally {\n      span.end();\n    }\n  }\n\n  async getPublicUrl(path: string, options?: SignedUrlOptions): Promise<string> {\n    await this.initialize();\n    const blockBlobClient = this.containerClient.getBlockBlobClient(path);\n\n    const permissions = new BlobSASPermissions();\n    permissions.read = options?.accessType === 'read' || !options?.accessType;\n    permissions.write = options?.accessType === 'write';\n\n    const expiryDate = new Date();\n    expiryDate.setSeconds(expiryDate.getSeconds() + (options?.expiresIn || 3600)); // Default to 1 hour\n\n    const sasQueryParameters = generateBlobSASQueryParameters(\n      {\n        containerName: this.containerName,\n        blobName: path,\n        permissions,\n        startsOn: new Date(),\n        expiresOn: expiryDate,\n      },\n      this.containerClient.credential as StorageSharedKeyCredential\n    );\n\n    return `${blockBlobClient.url}?${sasQueryParameters.toString()}`;\n  }\n}\n\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b5937e3caf171766ae708507caa86a0b7ff689ec"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2ecg0ha5vh = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2ecg0ha5vh();
cov_2ecg0ha5vh().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2ecg0ha5vh().s[1]++;
exports.AzureBlobStorageService = void 0;
const storage_blob_1 =
/* istanbul ignore next */
(cov_2ecg0ha5vh().s[2]++, require("@azure/storage-blob"));
const identity_1 =
/* istanbul ignore next */
(cov_2ecg0ha5vh().s[3]++, require("@azure/identity"));
const api_1 =
/* istanbul ignore next */
(cov_2ecg0ha5vh().s[4]++, require("@opentelemetry/api"));
const IStorageService_1 =
/* istanbul ignore next */
(cov_2ecg0ha5vh().s[5]++, require("../IStorageService"));
const TRACER_NAME =
/* istanbul ignore next */
(cov_2ecg0ha5vh().s[6]++, 'AzureBlobStorageService');
class AzureBlobStorageService {
  constructor(storageAccountName, containerName) {
    /* istanbul ignore next */
    cov_2ecg0ha5vh().f[0]++;
    cov_2ecg0ha5vh().s[7]++;
    this.containerName = containerName;
    /* istanbul ignore next */
    cov_2ecg0ha5vh().s[8]++;
    this.isInitialized = false;
    /* istanbul ignore next */
    cov_2ecg0ha5vh().s[9]++;
    this.storageAccountName = storageAccountName;
    const blobServiceUrl =
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().s[10]++, `https://${this.storageAccountName}.blob.core.windows.net`);
    // Use DefaultAzureCredential in production, fallback to connection string for local dev
    const credential =
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().s[11]++, process.env.AZURE_STORAGE_CONNECTION_STRING ?
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().b[0][0]++, new storage_blob_1.StorageSharedKeyCredential(this.storageAccountName, process.env.AZURE_STORAGE_ACCOUNT_KEY)) :
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().b[0][1]++, new identity_1.DefaultAzureCredential()));
    const blobServiceClient =
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().s[12]++, new storage_blob_1.BlobServiceClient(blobServiceUrl, credential));
    /* istanbul ignore next */
    cov_2ecg0ha5vh().s[13]++;
    this.containerClient = blobServiceClient.getContainerClient(this.containerName);
  }
  async initialize() {
    /* istanbul ignore next */
    cov_2ecg0ha5vh().f[1]++;
    cov_2ecg0ha5vh().s[14]++;
    if (this.isInitialized) {
      /* istanbul ignore next */
      cov_2ecg0ha5vh().b[1][0]++;
      cov_2ecg0ha5vh().s[15]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2ecg0ha5vh().b[1][1]++;
    }
    const tracer =
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().s[16]++, api_1.trace.getTracer(TRACER_NAME));
    const span =
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().s[17]++, tracer.startSpan('initialize'));
    /* istanbul ignore next */
    cov_2ecg0ha5vh().s[18]++;
    try {
      /* istanbul ignore next */
      cov_2ecg0ha5vh().s[19]++;
      await this.containerClient.createIfNotExists(); // Private access by default
      /* istanbul ignore next */
      cov_2ecg0ha5vh().s[20]++;
      this.isInitialized = true;
      /* istanbul ignore next */
      cov_2ecg0ha5vh().s[21]++;
      span.setStatus({
        code: 1
      }); // OK
    } catch (error) {
      /* istanbul ignore next */
      cov_2ecg0ha5vh().s[22]++;
      span.recordException(error);
      /* istanbul ignore next */
      cov_2ecg0ha5vh().s[23]++;
      span.setStatus({
        code: 2,
        message: error.message
      }); // ERROR
      /* istanbul ignore next */
      cov_2ecg0ha5vh().s[24]++;
      throw new IStorageService_1.StorageError('Failed to initialize Azure Blob Storage container', IStorageService_1.StorageProvider.Azure, error);
    } finally {
      /* istanbul ignore next */
      cov_2ecg0ha5vh().s[25]++;
      span.end();
    }
  }
  async upload(file, path, mimeType) {
    /* istanbul ignore next */
    cov_2ecg0ha5vh().f[2]++;
    cov_2ecg0ha5vh().s[26]++;
    await this.initialize();
    const blockBlobClient =
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().s[27]++, this.containerClient.getBlockBlobClient(path));
    const tracer =
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().s[28]++, api_1.trace.getTracer(TRACER_NAME));
    const span =
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().s[29]++, tracer.startSpan('upload'));
    /* istanbul ignore next */
    cov_2ecg0ha5vh().s[30]++;
    span.setAttributes({
      path,
      mimeType,
      size: file.length
    });
    /* istanbul ignore next */
    cov_2ecg0ha5vh().s[31]++;
    try {
      /* istanbul ignore next */
      cov_2ecg0ha5vh().s[32]++;
      await blockBlobClient.upload(file, file.length, {
        blobHTTPHeaders: {
          blobContentType: mimeType
        }
      });
      const fileMeta =
      /* istanbul ignore next */
      (cov_2ecg0ha5vh().s[33]++, {
        provider: IStorageService_1.StorageProvider.Azure,
        url: blockBlobClient.url,
        path,
        size: file.length,
        mimeType:
        /* istanbul ignore next */
        (cov_2ecg0ha5vh().b[2][0]++, mimeType) ||
        /* istanbul ignore next */
        (cov_2ecg0ha5vh().b[2][1]++, 'application/octet-stream'),
        createdAt: new Date()
      });
      /* istanbul ignore next */
      cov_2ecg0ha5vh().s[34]++;
      span.setStatus({
        code: 1
      });
      /* istanbul ignore next */
      cov_2ecg0ha5vh().s[35]++;
      return fileMeta;
    } catch (error) {
      /* istanbul ignore next */
      cov_2ecg0ha5vh().s[36]++;
      span.recordException(error);
      /* istanbul ignore next */
      cov_2ecg0ha5vh().s[37]++;
      span.setStatus({
        code: 2,
        message: error.message
      });
      /* istanbul ignore next */
      cov_2ecg0ha5vh().s[38]++;
      throw new IStorageService_1.StorageError(`Failed to upload to Azure Blob Storage: ${path}`, IStorageService_1.StorageProvider.Azure, error);
    } finally {
      /* istanbul ignore next */
      cov_2ecg0ha5vh().s[39]++;
      span.end();
    }
  }
  async download(path) {
    /* istanbul ignore next */
    cov_2ecg0ha5vh().f[3]++;
    cov_2ecg0ha5vh().s[40]++;
    await this.initialize();
    const blockBlobClient =
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().s[41]++, this.containerClient.getBlockBlobClient(path));
    const tracer =
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().s[42]++, api_1.trace.getTracer(TRACER_NAME));
    const span =
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().s[43]++, tracer.startSpan('download'));
    /* istanbul ignore next */
    cov_2ecg0ha5vh().s[44]++;
    span.setAttribute('path', path);
    /* istanbul ignore next */
    cov_2ecg0ha5vh().s[45]++;
    try {
      const buffer =
      /* istanbul ignore next */
      (cov_2ecg0ha5vh().s[46]++, await blockBlobClient.downloadToBuffer());
      /* istanbul ignore next */
      cov_2ecg0ha5vh().s[47]++;
      span.setStatus({
        code: 1
      });
      /* istanbul ignore next */
      cov_2ecg0ha5vh().s[48]++;
      return buffer;
    } catch (error) {
      /* istanbul ignore next */
      cov_2ecg0ha5vh().s[49]++;
      span.recordException(error);
      /* istanbul ignore next */
      cov_2ecg0ha5vh().s[50]++;
      span.setStatus({
        code: 2,
        message: error.message
      });
      /* istanbul ignore next */
      cov_2ecg0ha5vh().s[51]++;
      throw new IStorageService_1.StorageError(`Failed to download from Azure Blob Storage: ${path}`, IStorageService_1.StorageProvider.Azure, error);
    } finally {
      /* istanbul ignore next */
      cov_2ecg0ha5vh().s[52]++;
      span.end();
    }
  }
  async delete(path) {
    /* istanbul ignore next */
    cov_2ecg0ha5vh().f[4]++;
    cov_2ecg0ha5vh().s[53]++;
    await this.initialize();
    const blockBlobClient =
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().s[54]++, this.containerClient.getBlockBlobClient(path));
    const tracer =
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().s[55]++, api_1.trace.getTracer(TRACER_NAME));
    const span =
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().s[56]++, tracer.startSpan('delete'));
    /* istanbul ignore next */
    cov_2ecg0ha5vh().s[57]++;
    span.setAttribute('path', path);
    /* istanbul ignore next */
    cov_2ecg0ha5vh().s[58]++;
    try {
      /* istanbul ignore next */
      cov_2ecg0ha5vh().s[59]++;
      await blockBlobClient.delete();
      /* istanbul ignore next */
      cov_2ecg0ha5vh().s[60]++;
      span.setStatus({
        code: 1
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2ecg0ha5vh().s[61]++;
      span.recordException(error);
      /* istanbul ignore next */
      cov_2ecg0ha5vh().s[62]++;
      span.setStatus({
        code: 2,
        message: error.message
      });
      /* istanbul ignore next */
      cov_2ecg0ha5vh().s[63]++;
      throw new IStorageService_1.StorageError(`Failed to delete from Azure Blob Storage: ${path}`, IStorageService_1.StorageProvider.Azure, error);
    } finally {
      /* istanbul ignore next */
      cov_2ecg0ha5vh().s[64]++;
      span.end();
    }
  }
  async getPublicUrl(path, options) {
    /* istanbul ignore next */
    cov_2ecg0ha5vh().f[5]++;
    cov_2ecg0ha5vh().s[65]++;
    await this.initialize();
    const blockBlobClient =
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().s[66]++, this.containerClient.getBlockBlobClient(path));
    const permissions =
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().s[67]++, new storage_blob_1.BlobSASPermissions());
    /* istanbul ignore next */
    cov_2ecg0ha5vh().s[68]++;
    permissions.read =
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().b[3][0]++, (
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().b[5][0]++, options === null) ||
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().b[5][1]++, options === void 0) ?
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().b[4][0]++, void 0) :
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().b[4][1]++, options.accessType)) === 'read') ||
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().b[3][1]++, !(
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().b[7][0]++, options === null) ||
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().b[7][1]++, options === void 0) ?
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().b[6][0]++, void 0) :
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().b[6][1]++, options.accessType)));
    /* istanbul ignore next */
    cov_2ecg0ha5vh().s[69]++;
    permissions.write = (
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().b[9][0]++, options === null) ||
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().b[9][1]++, options === void 0) ?
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().b[8][0]++, void 0) :
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().b[8][1]++, options.accessType)) === 'write';
    const expiryDate =
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().s[70]++, new Date());
    /* istanbul ignore next */
    cov_2ecg0ha5vh().s[71]++;
    expiryDate.setSeconds(expiryDate.getSeconds() + (
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().b[10][0]++,
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().b[12][0]++, options === null) ||
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().b[12][1]++, options === void 0) ?
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().b[11][0]++, void 0) :
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().b[11][1]++, options.expiresIn)) ||
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().b[10][1]++, 3600))); // Default to 1 hour
    const sasQueryParameters =
    /* istanbul ignore next */
    (cov_2ecg0ha5vh().s[72]++, (0, storage_blob_1.generateBlobSASQueryParameters)({
      containerName: this.containerName,
      blobName: path,
      permissions,
      startsOn: new Date(),
      expiresOn: expiryDate
    }, this.containerClient.credential));
    /* istanbul ignore next */
    cov_2ecg0ha5vh().s[73]++;
    return `${blockBlobClient.url}?${sasQueryParameters.toString()}`;
  }
}
/* istanbul ignore next */
cov_2ecg0ha5vh().s[74]++;
exports.AzureBlobStorageService = AzureBlobStorageService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,