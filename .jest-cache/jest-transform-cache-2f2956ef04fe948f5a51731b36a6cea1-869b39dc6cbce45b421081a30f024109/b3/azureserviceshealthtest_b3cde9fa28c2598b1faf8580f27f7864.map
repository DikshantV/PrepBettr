{"file":"/Users/dikshantvashistha/PrepBettr/tests/azure-services-health.test.ts","mappings":"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","names":[],"sources":["/Users/dikshantvashistha/PrepBettr/tests/azure-services-health.test.ts"],"sourcesContent":["import { describe, it, expect, beforeAll, afterAll } from '@jest/globals';\nimport { azureOpenAIService } from '../lib/services/azure-openai-service';\nimport { azureSpeechService } from '../azure/lib/services/azure-speech-service';\nimport { fetchAzureSecrets, getAzureConfig } from '../lib/azure-config';\nimport { fetchAzureSecrets as fetchBrowserSecrets } from '../lib/azure-config-browser';\n\ndescribe('Azure Services Health Check', () => {\n  describe('Configuration Validation', () => {\n    it('should have valid API version for Azure OpenAI', async () => {\n      // Valid API versions for Azure OpenAI as of 2024\n      const validApiVersions = [\n        '2024-02-15-preview', // Current stable preview\n        '2024-08-01-preview', // Latest preview (but less stable)\n        '2023-12-01-preview', // Previous stable\n        '2023-05-15',         // GA version\n      ];\n      \n      // Check all service files for API version\n      const apiVersionPattern = /api-version.*[\"']([^\"']+)[\"']/g;\n      const serviceFiles = [\n        '../lib/services/azure-openai-service.ts',\n        '../lib/services/azure-openai.ts',\n        '../azure/lib/services/azure-openai-service.ts',\n      ];\n      \n      for (const file of serviceFiles) {\n        try {\n          const fs = await import('fs');\n          const content = fs.readFileSync(file, 'utf-8');\n          const matches = content.matchAll(apiVersionPattern);\n          \n          for (const match of matches) {\n            const apiVersion = match[1];\n            expect(validApiVersions).toContain(apiVersion);\n            console.log(`✅ ${file}: Using valid API version ${apiVersion}`);\n          }\n        } catch (error) {\n          console.warn(`⚠️ Could not check ${file}: ${error.message}`);\n        }\n      }\n    });\n\n    it('should validate Azure OpenAI deployment name matches available models', async () => {\n      const secrets = await fetchAzureSecrets();\n      \n      // Common Azure OpenAI deployment names\n      const validDeploymentPatterns = [\n        /^gpt-4[a-z0-9-]*$/i,        // GPT-4 variants\n        /^gpt-35-turbo[a-z0-9-]*$/i, // GPT-3.5 Turbo variants\n        /^text-embedding[a-z0-9-]*$/i, // Embedding models\n        /^dall-e[a-z0-9-]*$/i,       // DALL-E models\n        /^whisper[a-z0-9-]*$/i,      // Whisper models\n      ];\n      \n      const deployment = secrets.azureOpenAIDeployment;\n      expect(deployment).toBeDefined();\n      expect(deployment.length).toBeGreaterThan(0);\n      \n      const isValidDeployment = validDeploymentPatterns.some(pattern => \n        pattern.test(deployment)\n      );\n      \n      expect(isValidDeployment).toBe(true);\n      console.log(`✅ Deployment name \"${deployment}\" appears to be valid`);\n    });\n\n    it('should extract correct region from Speech Service endpoint', async () => {\n      const secrets = await fetchAzureSecrets();\n      const endpoint = secrets.speechEndpoint;\n      \n      expect(endpoint).toBeDefined();\n      expect(endpoint).toMatch(/^https:\\/\\/[a-z0-9-]+\\.(api\\.cognitive|cognitiveservices)\\.microsoft\\.com/i);\n      \n      // Extract region from endpoint\n      const regionMatch = endpoint.match(/https:\\/\\/([^.]+)/);\n      expect(regionMatch).toBeTruthy();\n      \n      const region = regionMatch?.[1];\n      expect(region).toBeDefined();\n      \n      // Common Azure regions\n      const validRegions = [\n        'eastus', 'eastus2', 'westus', 'westus2', 'westus3',\n        'centralus', 'northcentralus', 'southcentralus', 'westcentralus',\n        'canadacentral', 'canadaeast',\n        'northeurope', 'westeurope', 'uksouth', 'ukwest',\n        'francecentral', 'francesouth', 'germanywestcentral',\n        'switzerlandnorth', 'switzerlandwest', 'norwayeast', 'norwaywest',\n        'brazilsouth', 'australiaeast', 'australiasoutheast',\n        'southeastasia', 'eastasia', 'japaneast', 'japanwest',\n        'koreacentral', 'koreasouth', 'centralindia', 'southindia', 'westindia'\n      ];\n      \n      expect(validRegions).toContain(region);\n      console.log(`✅ Speech Service region \"${region}\" is valid`);\n    });\n\n    it('should have consistent configurations across environments', async () => {\n      const serverSecrets = await fetchAzureSecrets();\n      const browserSecrets = await fetchBrowserSecrets();\n      \n      // Key fields should be present in both\n      expect(serverSecrets.azureOpenAIKey).toBeDefined();\n      expect(browserSecrets.azureOpenAIKey).toBeDefined();\n      \n      expect(serverSecrets.azureOpenAIEndpoint).toBeDefined();\n      expect(browserSecrets.azureOpenAIEndpoint).toBeDefined();\n      \n      expect(serverSecrets.azureOpenAIDeployment).toBeDefined();\n      expect(browserSecrets.azureOpenAIDeployment).toBeDefined();\n      \n      console.log('✅ Configurations are consistent across server and browser environments');\n    });\n  });\n\n  describe('Service Initialization Tests', () => {\n    afterAll(() => {\n      // Clean up services after tests\n      azureOpenAIService.dispose();\n      azureSpeechService.dispose();\n    });\n\n    it('should successfully initialize Azure OpenAI Service', async () => {\n      const initialized = await azureOpenAIService.initialize();\n      \n      if (process.env.CI && !process.env.AZURE_OPENAI_KEY) {\n        // In CI without credentials, initialization might fail\n        console.warn('⚠️ Skipping in CI without Azure credentials');\n        expect(initialized).toBe(false);\n      } else {\n        expect(initialized).toBe(true);\n        expect(azureOpenAIService.isReady()).toBe(true);\n        console.log('✅ Azure OpenAI Service initialized successfully');\n      }\n    });\n\n    it('should successfully initialize Azure Speech Service', async () => {\n      const initialized = await azureSpeechService.initialize();\n      \n      if (process.env.CI && !process.env.AZURE_SPEECH_KEY) {\n        // In CI without credentials, initialization might fail\n        console.warn('⚠️ Skipping in CI without Azure credentials');\n        expect(initialized).toBe(false);\n      } else {\n        expect(initialized).toBe(true);\n        expect(azureSpeechService.isReady()).toBe(true);\n        console.log('✅ Azure Speech Service initialized successfully');\n      }\n    });\n\n    it('should handle initialization failures gracefully', async () => {\n      // Mock environment to simulate failure\n      const originalEnv = { ...process.env };\n      delete process.env.AZURE_OPENAI_KEY;\n      delete process.env.AZURE_OPENAI_ENDPOINT;\n      \n      const initialized = await azureOpenAIService.initialize();\n      expect(initialized).toBe(false);\n      expect(azureOpenAIService.isReady()).toBe(false);\n      \n      // Restore environment\n      Object.assign(process.env, originalEnv);\n      console.log('✅ Service handles initialization failures gracefully');\n    });\n  });\n\n  describe('Embedding Model Configuration', () => {\n    it('should have valid embedding model configuration', async () => {\n      const secrets = await fetchAzureSecrets();\n      \n      // Check if there's a separate embedding deployment\n      // Common pattern: deployment names like \"text-embedding-ada-002\"\n      const deployment = secrets.azureOpenAIDeployment;\n      \n      if (deployment.includes('embedding')) {\n        expect(deployment).toMatch(/text-embedding-[a-z0-9-]+/i);\n        console.log(`✅ Embedding model deployment \"${deployment}\" is configured`);\n      } else {\n        console.log(`ℹ️ Using general deployment \"${deployment}\" for embeddings`);\n      }\n    });\n\n    it('should use correct API version for embeddings', () => {\n      // Embeddings should use the same stable API version\n      const expectedVersion = '2024-02-15-preview';\n      \n      // This would be validated in the actual embedding service implementation\n      expect(expectedVersion).toMatch(/^\\d{4}-\\d{2}-\\d{2}(-preview)?$/);\n      console.log(`✅ Embedding API version format is valid: ${expectedVersion}`);\n    });\n  });\n\n  describe('Network and Connectivity', () => {\n    it('should have valid Azure endpoints', async () => {\n      const secrets = await fetchAzureSecrets();\n      \n      // Validate OpenAI endpoint format\n      expect(secrets.azureOpenAIEndpoint).toMatch(\n        /^https:\\/\\/[a-z0-9-]+\\.openai\\.azure\\.com\\/?$/i\n      );\n      \n      // Validate Speech endpoint format\n      expect(secrets.speechEndpoint).toMatch(\n        /^https:\\/\\/[a-z0-9-]+\\.(api\\.cognitive|cognitiveservices)\\.microsoft\\.com\\/?$/i\n      );\n      \n      console.log('✅ All Azure endpoints have valid formats');\n    });\n\n    it('should handle rate limiting properly', async () => {\n      // Check that retry logic is implemented\n      const azureOpenAI = await import('../lib/services/azure-openai-service');\n      \n      // Verify retry method exists\n      expect(azureOpenAI.azureOpenAIService).toHaveProperty('retryWithBackoff');\n      \n      console.log('✅ Rate limiting retry logic is implemented');\n    });\n  });\n\n  describe('Security and Authentication', () => {\n    it('should not expose sensitive keys in browser environment', () => {\n      if (typeof window !== 'undefined') {\n        // In browser environment\n        expect(window.AZURE_OPENAI_KEY).toBeUndefined();\n        expect(window.AZURE_SPEECH_KEY).toBeUndefined();\n        console.log('✅ Sensitive keys are not exposed in browser');\n      } else {\n        console.log('ℹ️ Running in Node.js environment');\n      }\n    });\n\n    it('should use proper authentication headers', async () => {\n      const secrets = await fetchAzureSecrets();\n      \n      expect(secrets.azureOpenAIKey).toBeTruthy();\n      expect(secrets.azureOpenAIKey.length).toBeGreaterThan(20);\n      \n      expect(secrets.speechKey).toBeTruthy();\n      expect(secrets.speechKey.length).toBeGreaterThan(20);\n      \n      console.log('✅ Authentication keys are properly configured');\n    });\n  });\n});\n\ndescribe('Health Check Endpoint', () => {\n  it('should return health status from /api/azure-health', async () => {\n    if (process.env.CI) {\n      console.log('ℹ️ Skipping API endpoint test in CI');\n      return;\n    }\n    \n    try {\n      const response = await fetch('http://localhost:3000/api/azure-health');\n      const data = await response.json();\n      \n      expect(data).toHaveProperty('status');\n      expect(data).toHaveProperty('services');\n      expect(data).toHaveProperty('timestamp');\n      \n      console.log('✅ Health check endpoint is functional');\n    } catch (error) {\n      console.warn('⚠️ Health check endpoint not available (server may not be running)');\n    }\n  });\n});\n"],"version":3}