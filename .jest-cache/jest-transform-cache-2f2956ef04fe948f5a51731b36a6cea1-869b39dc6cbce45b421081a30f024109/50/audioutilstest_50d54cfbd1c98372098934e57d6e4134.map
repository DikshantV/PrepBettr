{"version":3,"names":["cov_t6ava1fuc","actualCoverage","s","audio_utils_1","require","describe","f","sampleRate","it","emptyArray","Float32Array","result","trimInitialSilence","expect","toEqual","length","toBe","shortArray","silenceSamples","Math","floor","nonSilenceSamples","totalSamples","audioData","i","random","sin","PI","toBeLessThan","toBeGreaterThan","samples","testCases","forEach","silenceDuration","speechSamples","toBeLessThanOrEqual","emptyChunks","trimInitialSilenceFromChunks","chunkSize","chunks","silenceChunk","push","partialChunk","speechChunk","originalTotal","reduce","sum","chunk","trimmedTotal","j","toBeInstanceOf","calculateRMS","silentAudio","amplitude","rms","toBeCloseTo","sqrt","fill","rmsToDecibels","Infinity","decibelsToRMS","testValues","originalRMS","dB","convertedRMS"],"sources":["/Users/dikshantvashistha/PrepBettr/lib/audio-utils.test.ts"],"sourcesContent":["import { \n  trimInitialSilence, \n  trimInitialSilenceFromChunks,\n  calculateRMS, \n  rmsToDecibels, \n  decibelsToRMS \n} from './audio-utils';\n\ndescribe('Audio Utilities', () => {\n  const sampleRate = 16000; // 16kHz sample rate\n  \n  describe('trimInitialSilence', () => {\n    it('should return original audio when array is empty', () => {\n      const emptyArray = new Float32Array(0);\n      const result = trimInitialSilence(emptyArray, sampleRate);\n      expect(result).toEqual(emptyArray);\n      expect(result.length).toBe(0);\n    });\n\n    it('should return original audio when window size is larger than audio length', () => {\n      const shortArray = new Float32Array(100); // Very short audio\n      const result = trimInitialSilence(shortArray, sampleRate);\n      expect(result).toEqual(shortArray);\n      expect(result.length).toBe(100);\n    });\n\n    it('should trim silence from the beginning of audio', () => {\n      // Create audio with 0.5 seconds of silence, then non-silence\n      const silenceSamples = Math.floor(sampleRate * 0.5); // 0.5 seconds\n      const nonSilenceSamples = Math.floor(sampleRate * 0.5); // 0.5 seconds\n      const totalSamples = silenceSamples + nonSilenceSamples;\n      \n      const audioData = new Float32Array(totalSamples);\n      \n      // Fill first half with silence (very low amplitude)\n      for (let i = 0; i < silenceSamples; i++) {\n        audioData[i] = Math.random() * 0.001; // Very quiet noise\n      }\n      \n      // Fill second half with actual audio (higher amplitude)\n      for (let i = silenceSamples; i < totalSamples; i++) {\n        audioData[i] = Math.sin(2 * Math.PI * 440 * i / sampleRate) * 0.3; // 440Hz sine wave\n      }\n      \n      const result = trimInitialSilence(audioData, sampleRate);\n      \n      // Should have trimmed most of the silence\n      expect(result.length).toBeLessThan(audioData.length);\n      expect(result.length).toBeGreaterThan(nonSilenceSamples * 0.9); // Allow some margin\n    });\n\n    it('should not trim audio that starts with non-silence', () => {\n      const samples = Math.floor(sampleRate * 1); // 1 second\n      const audioData = new Float32Array(samples);\n      \n      // Fill with non-silent audio from the start\n      for (let i = 0; i < samples; i++) {\n        audioData[i] = Math.sin(2 * Math.PI * 440 * i / sampleRate) * 0.3;\n      }\n      \n      const result = trimInitialSilence(audioData, sampleRate);\n      \n      // Should return most of the original audio\n      expect(result.length).toBeGreaterThan(samples * 0.95);\n    });\n\n    it('should handle all-silence audio', () => {\n      const samples = Math.floor(sampleRate * 1); // 1 second\n      const audioData = new Float32Array(samples);\n      \n      // Fill with silence\n      for (let i = 0; i < samples; i++) {\n        audioData[i] = Math.random() * 0.001; // Very quiet noise\n      }\n      \n      const result = trimInitialSilence(audioData, sampleRate);\n      \n      // Should return original or nearly original since it's all silence\n      expect(result.length).toBe(samples);\n    });\n\n    it('should detect speech after variable silence durations', () => {\n      const testCases = [0.1, 0.3, 0.5, 1.0]; // Different silence durations in seconds\n      \n      testCases.forEach(silenceDuration => {\n        const silenceSamples = Math.floor(sampleRate * silenceDuration);\n        const speechSamples = Math.floor(sampleRate * 0.5);\n        const totalSamples = silenceSamples + speechSamples;\n        \n        const audioData = new Float32Array(totalSamples);\n        \n        // Add silence\n        for (let i = 0; i < silenceSamples; i++) {\n          audioData[i] = 0;\n        }\n        \n        // Add speech\n        for (let i = silenceSamples; i < totalSamples; i++) {\n          audioData[i] = Math.sin(2 * Math.PI * 440 * i / sampleRate) * 0.5;\n        }\n        \n        const result = trimInitialSilence(audioData, sampleRate);\n        \n        // Should have trimmed the silence\n        expect(result.length).toBeLessThanOrEqual(speechSamples + sampleRate * 0.2); // Allow window size margin\n      });\n    });\n  });\n\n  describe('trimInitialSilenceFromChunks', () => {\n    it('should handle empty chunks array', () => {\n      const emptyChunks: Float32Array[] = [];\n      const result = trimInitialSilenceFromChunks(emptyChunks, sampleRate);\n      expect(result).toEqual(emptyChunks);\n      expect(result.length).toBe(0);\n    });\n\n    it('should trim silence from multiple chunks', () => {\n      const chunkSize = 4096;\n      const chunks: Float32Array[] = [];\n      \n      // Create 3 chunks: first is silence, second is partial silence, third is speech\n      const silenceChunk = new Float32Array(chunkSize);\n      for (let i = 0; i < chunkSize; i++) {\n        silenceChunk[i] = Math.random() * 0.001;\n      }\n      chunks.push(silenceChunk);\n      \n      const partialChunk = new Float32Array(chunkSize);\n      for (let i = 0; i < chunkSize / 2; i++) {\n        partialChunk[i] = Math.random() * 0.001;\n      }\n      for (let i = chunkSize / 2; i < chunkSize; i++) {\n        partialChunk[i] = Math.sin(2 * Math.PI * 440 * i / sampleRate) * 0.3;\n      }\n      chunks.push(partialChunk);\n      \n      const speechChunk = new Float32Array(chunkSize);\n      for (let i = 0; i < chunkSize; i++) {\n        speechChunk[i] = Math.sin(2 * Math.PI * 440 * i / sampleRate) * 0.3;\n      }\n      chunks.push(speechChunk);\n      \n      const result = trimInitialSilenceFromChunks(chunks, sampleRate);\n      \n      // Should have fewer total samples after trimming\n      const originalTotal = chunks.reduce((sum, chunk) => sum + chunk.length, 0);\n      const trimmedTotal = result.reduce((sum, chunk) => sum + chunk.length, 0);\n      expect(trimmedTotal).toBeLessThan(originalTotal);\n    });\n\n    it('should maintain chunk structure after trimming', () => {\n      const chunks: Float32Array[] = [];\n      const chunkSize = 4096;\n      \n      // Create chunks with speech from the start\n      for (let i = 0; i < 3; i++) {\n        const chunk = new Float32Array(chunkSize);\n        for (let j = 0; j < chunkSize; j++) {\n          chunk[j] = Math.sin(2 * Math.PI * 440 * (i * chunkSize + j) / sampleRate) * 0.3;\n        }\n        chunks.push(chunk);\n      }\n      \n      const result = trimInitialSilenceFromChunks(chunks, sampleRate);\n      \n      // Should return chunks (may be re-chunked)\n      expect(result.length).toBeGreaterThan(0);\n      result.forEach(chunk => {\n        expect(chunk).toBeInstanceOf(Float32Array);\n        expect(chunk.length).toBeGreaterThan(0);\n      });\n    });\n  });\n\n  describe('calculateRMS', () => {\n    it('should return 0 for empty array', () => {\n      const emptyArray = new Float32Array(0);\n      expect(calculateRMS(emptyArray)).toBe(0);\n    });\n\n    it('should return 0 for silent audio', () => {\n      const silentAudio = new Float32Array(1000);\n      expect(calculateRMS(silentAudio)).toBe(0);\n    });\n\n    it('should calculate correct RMS for sine wave', () => {\n      const samples = 1000;\n      const audioData = new Float32Array(samples);\n      const amplitude = 0.5;\n      \n      for (let i = 0; i < samples; i++) {\n        audioData[i] = Math.sin(2 * Math.PI * i / 100) * amplitude;\n      }\n      \n      const rms = calculateRMS(audioData);\n      // RMS of sine wave should be approximately amplitude / sqrt(2)\n      expect(rms).toBeCloseTo(amplitude / Math.sqrt(2), 2);\n    });\n\n    it('should calculate correct RMS for constant signal', () => {\n      const audioData = new Float32Array(1000);\n      const amplitude = 0.5;\n      audioData.fill(amplitude);\n      \n      const rms = calculateRMS(audioData);\n      expect(rms).toBe(amplitude);\n    });\n  });\n\n  describe('rmsToDecibels', () => {\n    it('should return -Infinity for 0 RMS', () => {\n      expect(rmsToDecibels(0)).toBe(-Infinity);\n    });\n\n    it('should return 0 dB for RMS of 1', () => {\n      expect(rmsToDecibels(1)).toBeCloseTo(0, 5);\n    });\n\n    it('should return negative dB for RMS less than 1', () => {\n      expect(rmsToDecibels(0.5)).toBeCloseTo(-6.02, 1); // -6dB is half amplitude\n      expect(rmsToDecibels(0.1)).toBeCloseTo(-20, 1);\n      expect(rmsToDecibels(0.01)).toBeCloseTo(-40, 1);\n    });\n\n    it('should return positive dB for RMS greater than 1', () => {\n      expect(rmsToDecibels(2)).toBeCloseTo(6.02, 1);\n      expect(rmsToDecibels(10)).toBeCloseTo(20, 1);\n    });\n  });\n\n  describe('decibelsToRMS', () => {\n    it('should return 0 for -Infinity dB', () => {\n      expect(decibelsToRMS(-Infinity)).toBe(0);\n    });\n\n    it('should return 1 for 0 dB', () => {\n      expect(decibelsToRMS(0)).toBeCloseTo(1, 5);\n    });\n\n    it('should convert negative dB correctly', () => {\n      expect(decibelsToRMS(-6)).toBeCloseTo(0.501, 2);\n      expect(decibelsToRMS(-20)).toBeCloseTo(0.1, 2);\n      expect(decibelsToRMS(-40)).toBeCloseTo(0.01, 3);\n    });\n\n    it('should convert positive dB correctly', () => {\n      expect(decibelsToRMS(6)).toBeCloseTo(1.995, 2);\n      expect(decibelsToRMS(20)).toBeCloseTo(10, 1);\n    });\n  });\n\n  describe('RMS and dB conversion round-trip', () => {\n    it('should maintain values through round-trip conversion', () => {\n      const testValues = [0.001, 0.01, 0.1, 0.5, 1, 2, 10];\n      \n      testValues.forEach(originalRMS => {\n        const dB = rmsToDecibels(originalRMS);\n        const convertedRMS = decibelsToRMS(dB);\n        expect(convertedRMS).toBeCloseTo(originalRMS, 5);\n      });\n    });\n  });\n});\n"],"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","ignoreList":[]}