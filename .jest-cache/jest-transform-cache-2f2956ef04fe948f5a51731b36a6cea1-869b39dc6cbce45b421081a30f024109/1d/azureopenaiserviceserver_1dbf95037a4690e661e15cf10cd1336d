2622113ff30d7c154b5316f0d479b0bd
"use strict";

/* istanbul ignore next */
function cov_25q5mvesoh() {
  var path = "/Users/dikshantvashistha/PrepBettr/azure/lib/services/azure-openai-service-server.ts";
  var hash = "7e0324ceef59d2ccabbf84d2c3d850fcd7346d75";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/azure/lib/services/azure-openai-service-server.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 77
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 34
        }
      },
      "3": {
        start: {
          line: 5,
          column: 23
        },
        end: {
          line: 5,
          column: 49
        }
      },
      "4": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 27
        }
      },
      "5": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 35
        }
      },
      "6": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 40
        }
      },
      "7": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "8": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 17,
          column: 10
        }
      },
      "9": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 25,
          column: 10
        }
      },
      "10": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 29
        }
      },
      "11": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 35
        }
      },
      "12": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 56,
          column: 9
        }
      },
      "13": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 77
        }
      },
      "14": {
        start: {
          line: 35,
          column: 28
        },
        end: {
          line: 35,
          column: 73
        }
      },
      "15": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 39,
          column: 13
        }
      },
      "16": {
        start: {
          line: 37,
          column: 16
        },
        end: {
          line: 37,
          column: 74
        }
      },
      "17": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 38,
          column: 29
        }
      },
      "18": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 46,
          column: 15
        }
      },
      "19": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 65
        }
      },
      "20": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 38
        }
      },
      "21": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 89
        }
      },
      "22": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 24
        }
      },
      "23": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 95
        }
      },
      "24": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 25
        }
      },
      "25": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 58
        }
      },
      "26": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 72,
          column: 526
        }
      },
      "27": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 76
        }
      },
      "28": {
        start: {
          line: 79,
          column: 71
        },
        end: {
          line: 79,
          column: 92
        }
      },
      "29": {
        start: {
          line: 80,
          column: 92
        },
        end: {
          line: 80,
          column: 113
        }
      },
      "30": {
        start: {
          line: 81,
          column: 27
        },
        end: {
          line: 81,
          column: 107
        }
      },
      "31": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 47
        }
      },
      "32": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 59
        }
      },
      "33": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 55
        }
      },
      "34": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 70
        }
      },
      "35": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 57
        }
      },
      "36": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 50
        }
      },
      "37": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 88,
          column: 99
        }
      },
      "38": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 78
        }
      },
      "39": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 73
        }
      },
      "40": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 66
        }
      },
      "41": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 90
        }
      },
      "42": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 52
        }
      },
      "43": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 104
        }
      },
      "44": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 124
        }
      },
      "45": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 96,
          column: 97
        }
      },
      "46": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 97,
          column: 109
        }
      },
      "47": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 98,
          column: 82
        }
      },
      "48": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "49": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 54
        }
      },
      "50": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 104,
          column: 9
        }
      },
      "51": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 52
        }
      },
      "52": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "53": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 64
        }
      },
      "54": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 117,
          column: 9
        }
      },
      "55": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 110,
          column: 228
        }
      },
      "56": {
        start: {
          line: 111,
          column: 16
        },
        end: {
          line: 111,
          column: 22
        }
      },
      "57": {
        start: {
          line: 113,
          column: 16
        },
        end: {
          line: 113,
          column: 182
        }
      },
      "58": {
        start: {
          line: 114,
          column: 16
        },
        end: {
          line: 114,
          column: 22
        }
      },
      "59": {
        start: {
          line: 116,
          column: 16
        },
        end: {
          line: 116,
          column: 202
        }
      },
      "60": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 98
        }
      },
      "61": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 119,
          column: 28
        }
      },
      "62": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 127,
          column: 9
        }
      },
      "63": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 68
        }
      },
      "64": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 38
        }
      },
      "65": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 29
        }
      },
      "66": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 131,
          column: 35
        }
      },
      "67": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 133,
          column: 59
        }
      },
      "68": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 134,
          column: 55
        }
      },
      "69": {
        start: {
          line: 136,
          column: 25
        },
        end: {
          line: 136,
          column: 129
        }
      },
      "70": {
        start: {
          line: 137,
          column: 30
        },
        end: {
          line: 137,
          column: 53
        }
      },
      "71": {
        start: {
          line: 138,
          column: 31
        },
        end: {
          line: 138,
          column: 64
        }
      },
      "72": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 143,
          column: 10
        }
      },
      "73": {
        start: {
          line: 150,
          column: 29
        },
        end: {
          line: 150,
          column: 50
        }
      },
      "74": {
        start: {
          line: 151,
          column: 23
        },
        end: {
          line: 151,
          column: 25
        }
      },
      "75": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 154,
          column: 9
        }
      },
      "76": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 67
        }
      },
      "77": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 164,
          column: 9
        }
      },
      "78": {
        start: {
          line: 157,
          column: 29
        },
        end: {
          line: 157,
          column: 67
        }
      },
      "79": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 158,
          column: 39
        }
      },
      "80": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 161,
          column: 72
        }
      },
      "81": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 163,
          column: 57
        }
      },
      "82": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 175,
          column: 11
        }
      },
      "83": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 179,
          column: 9
        }
      },
      "84": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 70
        }
      },
      "85": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 178,
          column: 68
        }
      },
      "86": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 224,
          column: 9
        }
      },
      "87": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 223,
          column: 13
        }
      },
      "88": {
        start: {
          line: 185,
          column: 37
        },
        end: {
          line: 185,
          column: 114
        }
      },
      "89": {
        start: {
          line: 186,
          column: 16
        },
        end: {
          line: 186,
          column: 85
        }
      },
      "90": {
        start: {
          line: 188,
          column: 16
        },
        end: {
          line: 188,
          column: 35
        }
      },
      "91": {
        start: {
          line: 190,
          column: 16
        },
        end: {
          line: 222,
          column: 17
        }
      },
      "92": {
        start: {
          line: 191,
          column: 41
        },
        end: {
          line: 191,
          column: 79
        }
      },
      "93": {
        start: {
          line: 192,
          column: 20
        },
        end: {
          line: 196,
          column: 22
        }
      },
      "94": {
        start: {
          line: 200,
          column: 20
        },
        end: {
          line: 200,
          column: 70
        }
      },
      "95": {
        start: {
          line: 202,
          column: 20
        },
        end: {
          line: 202,
          column: 67
        }
      },
      "96": {
        start: {
          line: 204,
          column: 42
        },
        end: {
          line: 204,
          column: 67
        }
      },
      "97": {
        start: {
          line: 206,
          column: 20
        },
        end: {
          line: 208,
          column: 22
        }
      },
      "98": {
        start: {
          line: 210,
          column: 47
        },
        end: {
          line: 210,
          column: 98
        }
      },
      "99": {
        start: {
          line: 211,
          column: 20
        },
        end: {
          line: 211,
          column: 103
        }
      },
      "100": {
        start: {
          line: 213,
          column: 43
        },
        end: {
          line: 213,
          column: 73
        }
      },
      "101": {
        start: {
          line: 214,
          column: 20
        },
        end: {
          line: 214,
          column: 98
        }
      },
      "102": {
        start: {
          line: 216,
          column: 20
        },
        end: {
          line: 216,
          column: 67
        }
      },
      "103": {
        start: {
          line: 217,
          column: 20
        },
        end: {
          line: 221,
          column: 22
        }
      },
      "104": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 227,
          column: 79
        }
      },
      "105": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 284,
          column: 9
        }
      },
      "106": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 233,
          column: 15
        }
      },
      "107": {
        start: {
          line: 234,
          column: 31
        },
        end: {
          line: 242,
          column: 14
        }
      },
      "108": {
        start: {
          line: 243,
          column: 38
        },
        end: {
          line: 243,
          column: 240
        }
      },
      "109": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 247,
          column: 15
        }
      },
      "110": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 249,
          column: 93
        }
      },
      "111": {
        start: {
          line: 251,
          column: 41
        },
        end: {
          line: 251,
          column: 94
        }
      },
      "112": {
        start: {
          line: 252,
          column: 33
        },
        end: {
          line: 252,
          column: 73
        }
      },
      "113": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 254,
          column: 78
        }
      },
      "114": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 260,
          column: 14
        }
      },
      "115": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 87
        }
      },
      "116": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 282,
          column: 13
        }
      },
      "117": {
        start: {
          line: 266,
          column: 33
        },
        end: {
          line: 266,
          column: 38
        }
      },
      "118": {
        start: {
          line: 267,
          column: 16
        },
        end: {
          line: 272,
          column: 19
        }
      },
      "119": {
        start: {
          line: 273,
          column: 16
        },
        end: {
          line: 281,
          column: 17
        }
      },
      "120": {
        start: {
          line: 274,
          column: 20
        },
        end: {
          line: 274,
          column: 90
        }
      },
      "121": {
        start: {
          line: 276,
          column: 21
        },
        end: {
          line: 281,
          column: 17
        }
      },
      "122": {
        start: {
          line: 277,
          column: 20
        },
        end: {
          line: 277,
          column: 101
        }
      },
      "123": {
        start: {
          line: 279,
          column: 21
        },
        end: {
          line: 281,
          column: 17
        }
      },
      "124": {
        start: {
          line: 280,
          column: 20
        },
        end: {
          line: 280,
          column: 92
        }
      },
      "125": {
        start: {
          line: 283,
          column: 12
        },
        end: {
          line: 283,
          column: 118
        }
      },
      "126": {
        start: {
          line: 290,
          column: 25
        },
        end: {
          line: 290,
          column: 46
        }
      },
      "127": {
        start: {
          line: 291,
          column: 8
        },
        end: {
          line: 310,
          column: 9
        }
      },
      "128": {
        start: {
          line: 293,
          column: 16
        },
        end: {
          line: 297,
          column: 18
        }
      },
      "129": {
        start: {
          line: 299,
          column: 16
        },
        end: {
          line: 303,
          column: 18
        }
      },
      "130": {
        start: {
          line: 305,
          column: 16
        },
        end: {
          line: 309,
          column: 18
        }
      },
      "131": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 319,
          column: 9
        }
      },
      "132": {
        start: {
          line: 318,
          column: 12
        },
        end: {
          line: 318,
          column: 68
        }
      },
      "133": {
        start: {
          line: 321,
          column: 47
        },
        end: {
          line: 321,
          column: 68
        }
      },
      "134": {
        start: {
          line: 322,
          column: 71
        },
        end: {
          line: 322,
          column: 92
        }
      },
      "135": {
        start: {
          line: 323,
          column: 29
        },
        end: {
          line: 323,
          column: 72
        }
      },
      "136": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 349,
          column: 9
        }
      },
      "137": {
        start: {
          line: 327,
          column: 16
        },
        end: {
          line: 327,
          column: 85
        }
      },
      "138": {
        start: {
          line: 328,
          column: 16
        },
        end: {
          line: 328,
          column: 115
        }
      },
      "139": {
        start: {
          line: 329,
          column: 16
        },
        end: {
          line: 329,
          column: 97
        }
      },
      "140": {
        start: {
          line: 330,
          column: 16
        },
        end: {
          line: 330,
          column: 84
        }
      },
      "141": {
        start: {
          line: 331,
          column: 16
        },
        end: {
          line: 331,
          column: 76
        }
      },
      "142": {
        start: {
          line: 332,
          column: 16
        },
        end: {
          line: 332,
          column: 75
        }
      },
      "143": {
        start: {
          line: 333,
          column: 16
        },
        end: {
          line: 333,
          column: 75
        }
      },
      "144": {
        start: {
          line: 334,
          column: 16
        },
        end: {
          line: 334,
          column: 74
        }
      },
      "145": {
        start: {
          line: 335,
          column: 16
        },
        end: {
          line: 335,
          column: 22
        }
      },
      "146": {
        start: {
          line: 337,
          column: 16
        },
        end: {
          line: 337,
          column: 88
        }
      },
      "147": {
        start: {
          line: 338,
          column: 16
        },
        end: {
          line: 338,
          column: 107
        }
      },
      "148": {
        start: {
          line: 339,
          column: 16
        },
        end: {
          line: 339,
          column: 70
        }
      },
      "149": {
        start: {
          line: 340,
          column: 16
        },
        end: {
          line: 340,
          column: 64
        }
      },
      "150": {
        start: {
          line: 341,
          column: 16
        },
        end: {
          line: 341,
          column: 60
        }
      },
      "151": {
        start: {
          line: 342,
          column: 16
        },
        end: {
          line: 342,
          column: 71
        }
      },
      "152": {
        start: {
          line: 343,
          column: 16
        },
        end: {
          line: 343,
          column: 63
        }
      },
      "153": {
        start: {
          line: 344,
          column: 16
        },
        end: {
          line: 344,
          column: 22
        }
      },
      "154": {
        start: {
          line: 346,
          column: 16
        },
        end: {
          line: 346,
          column: 72
        }
      },
      "155": {
        start: {
          line: 347,
          column: 16
        },
        end: {
          line: 347,
          column: 161
        }
      },
      "156": {
        start: {
          line: 348,
          column: 16
        },
        end: {
          line: 348,
          column: 84
        }
      },
      "157": {
        start: {
          line: 350,
          column: 8
        },
        end: {
          line: 352,
          column: 9
        }
      },
      "158": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 351,
          column: 67
        }
      },
      "159": {
        start: {
          line: 353,
          column: 8
        },
        end: {
          line: 355,
          column: 9
        }
      },
      "160": {
        start: {
          line: 354,
          column: 12
        },
        end: {
          line: 354,
          column: 79
        }
      },
      "161": {
        start: {
          line: 356,
          column: 8
        },
        end: {
          line: 356,
          column: 103
        }
      },
      "162": {
        start: {
          line: 357,
          column: 8
        },
        end: {
          line: 371,
          column: 9
        }
      },
      "163": {
        start: {
          line: 358,
          column: 31
        },
        end: {
          line: 364,
          column: 14
        }
      },
      "164": {
        start: {
          line: 365,
          column: 29
        },
        end: {
          line: 365,
          column: 246
        }
      },
      "165": {
        start: {
          line: 366,
          column: 12
        },
        end: {
          line: 366,
          column: 28
        }
      },
      "166": {
        start: {
          line: 369,
          column: 12
        },
        end: {
          line: 369,
          column: 85
        }
      },
      "167": {
        start: {
          line: 370,
          column: 12
        },
        end: {
          line: 370,
          column: 46
        }
      },
      "168": {
        start: {
          line: 377,
          column: 25
        },
        end: {
          line: 377,
          column: 46
        }
      },
      "169": {
        start: {
          line: 378,
          column: 8
        },
        end: {
          line: 385,
          column: 9
        }
      },
      "170": {
        start: {
          line: 380,
          column: 16
        },
        end: {
          line: 380,
          column: 95
        }
      },
      "171": {
        start: {
          line: 382,
          column: 16
        },
        end: {
          line: 382,
          column: 100
        }
      },
      "172": {
        start: {
          line: 384,
          column: 16
        },
        end: {
          line: 384,
          column: 66
        }
      },
      "173": {
        start: {
          line: 392,
          column: 8
        },
        end: {
          line: 394,
          column: 9
        }
      },
      "174": {
        start: {
          line: 393,
          column: 12
        },
        end: {
          line: 393,
          column: 24
        }
      },
      "175": {
        start: {
          line: 395,
          column: 30
        },
        end: {
          line: 395,
          column: 305
        }
      },
      "176": {
        start: {
          line: 395,
          column: 262
        },
        end: {
          line: 395,
          column: 291
        }
      },
      "177": {
        start: {
          line: 396,
          column: 8
        },
        end: {
          line: 408,
          column: 9
        }
      },
      "178": {
        start: {
          line: 397,
          column: 31
        },
        end: {
          line: 402,
          column: 14
        }
      },
      "179": {
        start: {
          line: 403,
          column: 12
        },
        end: {
          line: 403,
          column: 215
        }
      },
      "180": {
        start: {
          line: 406,
          column: 12
        },
        end: {
          line: 406,
          column: 74
        }
      },
      "181": {
        start: {
          line: 407,
          column: 12
        },
        end: {
          line: 407,
          column: 24
        }
      },
      "182": {
        start: {
          line: 414,
          column: 8
        },
        end: {
          line: 414,
          column: 40
        }
      },
      "183": {
        start: {
          line: 420,
          column: 8
        },
        end: {
          line: 420,
          column: 38
        }
      },
      "184": {
        start: {
          line: 421,
          column: 8
        },
        end: {
          line: 421,
          column: 29
        }
      },
      "185": {
        start: {
          line: 422,
          column: 8
        },
        end: {
          line: 422,
          column: 35
        }
      },
      "186": {
        start: {
          line: 423,
          column: 8
        },
        end: {
          line: 428,
          column: 10
        }
      },
      "187": {
        start: {
          line: 429,
          column: 8
        },
        end: {
          line: 429,
          column: 59
        }
      },
      "188": {
        start: {
          line: 432,
          column: 0
        },
        end: {
          line: 432,
          column: 60
        }
      },
      "189": {
        start: {
          line: 434,
          column: 0
        },
        end: {
          line: 434,
          column: 66
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        loc: {
          start: {
            line: 7,
            column: 18
          },
          end: {
            line: 28,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        },
        loc: {
          start: {
            line: 32,
            column: 23
          },
          end: {
            line: 57,
            column: 5
          }
        },
        line: 32
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 61,
            column: 4
          },
          end: {
            line: 61,
            column: 5
          }
        },
        loc: {
          start: {
            line: 61,
            column: 14
          },
          end: {
            line: 63,
            column: 5
          }
        },
        line: 61
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 67,
            column: 5
          }
        },
        loc: {
          start: {
            line: 67,
            column: 33
          },
          end: {
            line: 74,
            column: 5
          }
        },
        line: 67
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        },
        loc: {
          start: {
            line: 78,
            column: 25
          },
          end: {
            line: 120,
            column: 5
          }
        },
        line: 78
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 124,
            column: 4
          },
          end: {
            line: 124,
            column: 5
          }
        },
        loc: {
          start: {
            line: 124,
            column: 39
          },
          end: {
            line: 144,
            column: 5
          }
        },
        line: 124
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 149,
            column: 4
          },
          end: {
            line: 149,
            column: 5
          }
        },
        loc: {
          start: {
            line: 149,
            column: 30
          },
          end: {
            line: 165,
            column: 5
          }
        },
        line: 149
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 169,
            column: 4
          },
          end: {
            line: 169,
            column: 5
          }
        },
        loc: {
          start: {
            line: 169,
            column: 44
          },
          end: {
            line: 285,
            column: 5
          }
        },
        line: 169
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 289,
            column: 4
          },
          end: {
            line: 289,
            column: 5
          }
        },
        loc: {
          start: {
            line: 289,
            column: 34
          },
          end: {
            line: 311,
            column: 5
          }
        },
        line: 289
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 315,
            column: 4
          },
          end: {
            line: 315,
            column: 5
          }
        },
        loc: {
          start: {
            line: 315,
            column: 38
          },
          end: {
            line: 372,
            column: 5
          }
        },
        line: 315
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 376,
            column: 4
          },
          end: {
            line: 376,
            column: 5
          }
        },
        loc: {
          start: {
            line: 376,
            column: 26
          },
          end: {
            line: 386,
            column: 5
          }
        },
        line: 376
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 390,
            column: 4
          },
          end: {
            line: 390,
            column: 5
          }
        },
        loc: {
          start: {
            line: 390,
            column: 37
          },
          end: {
            line: 409,
            column: 5
          }
        },
        line: 390
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 395,
            column: 255
          },
          end: {
            line: 395,
            column: 256
          }
        },
        loc: {
          start: {
            line: 395,
            column: 262
          },
          end: {
            line: 395,
            column: 291
          }
        },
        line: 395
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 413,
            column: 4
          },
          end: {
            line: 413,
            column: 5
          }
        },
        loc: {
          start: {
            line: 413,
            column: 29
          },
          end: {
            line: 415,
            column: 5
          }
        },
        line: 413
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 419,
            column: 4
          },
          end: {
            line: 419,
            column: 5
          }
        },
        loc: {
          start: {
            line: 419,
            column: 12
          },
          end: {
            line: 430,
            column: 5
          }
        },
        line: 419
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 39,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 39,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "1": {
        loc: {
          start: {
            line: 36,
            column: 16
          },
          end: {
            line: 36,
            column: 105
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 16
          },
          end: {
            line: 36,
            column: 39
          }
        }, {
          start: {
            line: 36,
            column: 43
          },
          end: {
            line: 36,
            column: 71
          }
        }, {
          start: {
            line: 36,
            column: 75
          },
          end: {
            line: 36,
            column: 105
          }
        }],
        line: 36
      },
      "2": {
        loc: {
          start: {
            line: 62,
            column: 15
          },
          end: {
            line: 62,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 15
          },
          end: {
            line: 62,
            column: 33
          }
        }, {
          start: {
            line: 62,
            column: 37
          },
          end: {
            line: 62,
            column: 57
          }
        }],
        line: 62
      },
      "3": {
        loc: {
          start: {
            line: 72,
            column: 34
          },
          end: {
            line: 72,
            column: 191
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 72,
            column: 181
          },
          end: {
            line: 72,
            column: 183
          }
        }, {
          start: {
            line: 72,
            column: 186
          },
          end: {
            line: 72,
            column: 191
          }
        }],
        line: 72
      },
      "4": {
        loc: {
          start: {
            line: 72,
            column: 34
          },
          end: {
            line: 72,
            column: 178
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 72,
            column: 34
          },
          end: {
            line: 72,
            column: 161
          }
        }, {
          start: {
            line: 72,
            column: 165
          },
          end: {
            line: 72,
            column: 178
          }
        }],
        line: 72
      },
      "5": {
        loc: {
          start: {
            line: 72,
            column: 40
          },
          end: {
            line: 72,
            column: 151
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 72,
            column: 104
          },
          end: {
            line: 72,
            column: 106
          }
        }, {
          start: {
            line: 72,
            column: 109
          },
          end: {
            line: 72,
            column: 151
          }
        }],
        line: 72
      },
      "6": {
        loc: {
          start: {
            line: 72,
            column: 40
          },
          end: {
            line: 72,
            column: 101
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 72,
            column: 40
          },
          end: {
            line: 72,
            column: 84
          }
        }, {
          start: {
            line: 72,
            column: 88
          },
          end: {
            line: 72,
            column: 101
          }
        }],
        line: 72
      },
      "7": {
        loc: {
          start: {
            line: 72,
            column: 215
          },
          end: {
            line: 72,
            column: 368
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 72,
            column: 362
          },
          end: {
            line: 72,
            column: 364
          }
        }, {
          start: {
            line: 72,
            column: 367
          },
          end: {
            line: 72,
            column: 368
          }
        }],
        line: 72
      },
      "8": {
        loc: {
          start: {
            line: 72,
            column: 215
          },
          end: {
            line: 72,
            column: 359
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 72,
            column: 215
          },
          end: {
            line: 72,
            column: 342
          }
        }, {
          start: {
            line: 72,
            column: 346
          },
          end: {
            line: 72,
            column: 359
          }
        }],
        line: 72
      },
      "9": {
        loc: {
          start: {
            line: 72,
            column: 221
          },
          end: {
            line: 72,
            column: 332
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 72,
            column: 285
          },
          end: {
            line: 72,
            column: 287
          }
        }, {
          start: {
            line: 72,
            column: 290
          },
          end: {
            line: 72,
            column: 332
          }
        }],
        line: 72
      },
      "10": {
        loc: {
          start: {
            line: 72,
            column: 221
          },
          end: {
            line: 72,
            column: 282
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 72,
            column: 221
          },
          end: {
            line: 72,
            column: 265
          }
        }, {
          start: {
            line: 72,
            column: 269
          },
          end: {
            line: 72,
            column: 282
          }
        }],
        line: 72
      },
      "11": {
        loc: {
          start: {
            line: 72,
            column: 384
          },
          end: {
            line: 72,
            column: 522
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 72,
            column: 515
          },
          end: {
            line: 72,
            column: 517
          }
        }, {
          start: {
            line: 72,
            column: 520
          },
          end: {
            line: 72,
            column: 522
          }
        }],
        line: 72
      },
      "12": {
        loc: {
          start: {
            line: 72,
            column: 384
          },
          end: {
            line: 72,
            column: 512
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 72,
            column: 384
          },
          end: {
            line: 72,
            column: 495
          }
        }, {
          start: {
            line: 72,
            column: 499
          },
          end: {
            line: 72,
            column: 512
          }
        }],
        line: 72
      },
      "13": {
        loc: {
          start: {
            line: 72,
            column: 390
          },
          end: {
            line: 72,
            column: 485
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 72,
            column: 446
          },
          end: {
            line: 72,
            column: 448
          }
        }, {
          start: {
            line: 72,
            column: 451
          },
          end: {
            line: 72,
            column: 485
          }
        }],
        line: 72
      },
      "14": {
        loc: {
          start: {
            line: 72,
            column: 390
          },
          end: {
            line: 72,
            column: 443
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 72,
            column: 390
          },
          end: {
            line: 72,
            column: 426
          }
        }, {
          start: {
            line: 72,
            column: 430
          },
          end: {
            line: 72,
            column: 443
          }
        }],
        line: 72
      },
      "15": {
        loc: {
          start: {
            line: 95,
            column: 70
          },
          end: {
            line: 95,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 95,
            column: 70
          },
          end: {
            line: 95,
            column: 90
          }
        }, {
          start: {
            line: 95,
            column: 94
          },
          end: {
            line: 95,
            column: 95
          }
        }],
        line: 95
      },
      "16": {
        loc: {
          start: {
            line: 99,
            column: 8
          },
          end: {
            line: 101,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 8
          },
          end: {
            line: 101,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "17": {
        loc: {
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 104,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 104,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "18": {
        loc: {
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 105
      },
      "19": {
        loc: {
          start: {
            line: 108,
            column: 8
          },
          end: {
            line: 117,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 109,
            column: 12
          },
          end: {
            line: 111,
            column: 22
          }
        }, {
          start: {
            line: 112,
            column: 12
          },
          end: {
            line: 114,
            column: 22
          }
        }, {
          start: {
            line: 115,
            column: 12
          },
          end: {
            line: 116,
            column: 202
          }
        }],
        line: 108
      },
      "20": {
        loc: {
          start: {
            line: 125,
            column: 8
          },
          end: {
            line: 127,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 8
          },
          end: {
            line: 127,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "21": {
        loc: {
          start: {
            line: 125,
            column: 12
          },
          end: {
            line: 125,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 125,
            column: 12
          },
          end: {
            line: 125,
            column: 31
          }
        }, {
          start: {
            line: 125,
            column: 35
          },
          end: {
            line: 125,
            column: 47
          }
        }],
        line: 125
      },
      "22": {
        loc: {
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 154,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 154,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      },
      "23": {
        loc: {
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 179,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 179,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "24": {
        loc: {
          start: {
            line: 176,
            column: 12
          },
          end: {
            line: 176,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 176,
            column: 12
          },
          end: {
            line: 176,
            column: 31
          }
        }, {
          start: {
            line: 176,
            column: 35
          },
          end: {
            line: 176,
            column: 47
          }
        }],
        line: 176
      },
      "25": {
        loc: {
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "26": {
        loc: {
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 223,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 223,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "27": {
        loc: {
          start: {
            line: 190,
            column: 16
          },
          end: {
            line: 222,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 190,
            column: 16
          },
          end: {
            line: 222,
            column: 17
          }
        }, {
          start: {
            line: 198,
            column: 21
          },
          end: {
            line: 222,
            column: 17
          }
        }],
        line: 190
      },
      "28": {
        loc: {
          start: {
            line: 210,
            column: 47
          },
          end: {
            line: 210,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 210,
            column: 47
          },
          end: {
            line: 210,
            column: 92
          }
        }, {
          start: {
            line: 210,
            column: 96
          },
          end: {
            line: 210,
            column: 98
          }
        }],
        line: 210
      },
      "29": {
        loc: {
          start: {
            line: 243,
            column: 38
          },
          end: {
            line: 243,
            column: 240
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 243,
            column: 39
          },
          end: {
            line: 243,
            column: 170
          }
        }, {
          start: {
            line: 243,
            column: 175
          },
          end: {
            line: 243,
            column: 240
          }
        }],
        line: 243
      },
      "30": {
        loc: {
          start: {
            line: 243,
            column: 39
          },
          end: {
            line: 243,
            column: 170
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 243,
            column: 151
          },
          end: {
            line: 243,
            column: 157
          }
        }, {
          start: {
            line: 243,
            column: 160
          },
          end: {
            line: 243,
            column: 170
          }
        }],
        line: 243
      },
      "31": {
        loc: {
          start: {
            line: 243,
            column: 39
          },
          end: {
            line: 243,
            column: 148
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 243,
            column: 39
          },
          end: {
            line: 243,
            column: 131
          }
        }, {
          start: {
            line: 243,
            column: 135
          },
          end: {
            line: 243,
            column: 148
          }
        }],
        line: 243
      },
      "32": {
        loc: {
          start: {
            line: 243,
            column: 45
          },
          end: {
            line: 243,
            column: 121
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 243,
            column: 102
          },
          end: {
            line: 243,
            column: 108
          }
        }, {
          start: {
            line: 243,
            column: 111
          },
          end: {
            line: 243,
            column: 121
          }
        }],
        line: 243
      },
      "33": {
        loc: {
          start: {
            line: 243,
            column: 45
          },
          end: {
            line: 243,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 243,
            column: 45
          },
          end: {
            line: 243,
            column: 82
          }
        }, {
          start: {
            line: 243,
            column: 86
          },
          end: {
            line: 243,
            column: 99
          }
        }],
        line: 243
      },
      "34": {
        loc: {
          start: {
            line: 246,
            column: 28
          },
          end: {
            line: 246,
            column: 119
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 246,
            column: 29
          },
          end: {
            line: 246,
            column: 105
          }
        }, {
          start: {
            line: 246,
            column: 110
          },
          end: {
            line: 246,
            column: 119
          }
        }],
        line: 246
      },
      "35": {
        loc: {
          start: {
            line: 246,
            column: 29
          },
          end: {
            line: 246,
            column: 105
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 246,
            column: 81
          },
          end: {
            line: 246,
            column: 87
          }
        }, {
          start: {
            line: 246,
            column: 90
          },
          end: {
            line: 246,
            column: 105
          }
        }],
        line: 246
      },
      "36": {
        loc: {
          start: {
            line: 246,
            column: 29
          },
          end: {
            line: 246,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 246,
            column: 29
          },
          end: {
            line: 246,
            column: 61
          }
        }, {
          start: {
            line: 246,
            column: 65
          },
          end: {
            line: 246,
            column: 78
          }
        }],
        line: 246
      },
      "37": {
        loc: {
          start: {
            line: 251,
            column: 42
          },
          end: {
            line: 251,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 251,
            column: 42
          },
          end: {
            line: 251,
            column: 84
          }
        }, {
          start: {
            line: 251,
            column: 88
          },
          end: {
            line: 251,
            column: 89
          }
        }],
        line: 251
      },
      "38": {
        loc: {
          start: {
            line: 252,
            column: 33
          },
          end: {
            line: 252,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 252,
            column: 33
          },
          end: {
            line: 252,
            column: 67
          }
        }, {
          start: {
            line: 252,
            column: 71
          },
          end: {
            line: 252,
            column: 73
          }
        }],
        line: 252
      },
      "39": {
        loc: {
          start: {
            line: 265,
            column: 12
          },
          end: {
            line: 282,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 265,
            column: 12
          },
          end: {
            line: 282,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 265
      },
      "40": {
        loc: {
          start: {
            line: 265,
            column: 16
          },
          end: {
            line: 265,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 265,
            column: 16
          },
          end: {
            line: 265,
            column: 21
          }
        }, {
          start: {
            line: 265,
            column: 25
          },
          end: {
            line: 265,
            column: 50
          }
        }, {
          start: {
            line: 265,
            column: 54
          },
          end: {
            line: 265,
            column: 71
          }
        }],
        line: 265
      },
      "41": {
        loc: {
          start: {
            line: 273,
            column: 16
          },
          end: {
            line: 281,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 273,
            column: 16
          },
          end: {
            line: 281,
            column: 17
          }
        }, {
          start: {
            line: 276,
            column: 21
          },
          end: {
            line: 281,
            column: 17
          }
        }],
        line: 273
      },
      "42": {
        loc: {
          start: {
            line: 276,
            column: 21
          },
          end: {
            line: 281,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 276,
            column: 21
          },
          end: {
            line: 281,
            column: 17
          }
        }, {
          start: {
            line: 279,
            column: 21
          },
          end: {
            line: 281,
            column: 17
          }
        }],
        line: 276
      },
      "43": {
        loc: {
          start: {
            line: 279,
            column: 21
          },
          end: {
            line: 281,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 279,
            column: 21
          },
          end: {
            line: 281,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 279
      },
      "44": {
        loc: {
          start: {
            line: 283,
            column: 60
          },
          end: {
            line: 283,
            column: 114
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 283,
            column: 85
          },
          end: {
            line: 283,
            column: 98
          }
        }, {
          start: {
            line: 283,
            column: 101
          },
          end: {
            line: 283,
            column: 114
          }
        }],
        line: 283
      },
      "45": {
        loc: {
          start: {
            line: 291,
            column: 8
          },
          end: {
            line: 310,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 292,
            column: 12
          },
          end: {
            line: 297,
            column: 18
          }
        }, {
          start: {
            line: 298,
            column: 12
          },
          end: {
            line: 303,
            column: 18
          }
        }, {
          start: {
            line: 304,
            column: 12
          },
          end: {
            line: 309,
            column: 18
          }
        }],
        line: 291
      },
      "46": {
        loc: {
          start: {
            line: 317,
            column: 8
          },
          end: {
            line: 319,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 317,
            column: 8
          },
          end: {
            line: 319,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 317
      },
      "47": {
        loc: {
          start: {
            line: 317,
            column: 12
          },
          end: {
            line: 317,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 317,
            column: 12
          },
          end: {
            line: 317,
            column: 31
          }
        }, {
          start: {
            line: 317,
            column: 35
          },
          end: {
            line: 317,
            column: 47
          }
        }],
        line: 317
      },
      "48": {
        loc: {
          start: {
            line: 325,
            column: 8
          },
          end: {
            line: 349,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 326,
            column: 12
          },
          end: {
            line: 335,
            column: 22
          }
        }, {
          start: {
            line: 336,
            column: 12
          },
          end: {
            line: 344,
            column: 22
          }
        }, {
          start: {
            line: 345,
            column: 12
          },
          end: {
            line: 348,
            column: 84
          }
        }],
        line: 325
      },
      "49": {
        loc: {
          start: {
            line: 328,
            column: 74
          },
          end: {
            line: 328,
            column: 109
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 328,
            column: 74
          },
          end: {
            line: 328,
            column: 83
          }
        }, {
          start: {
            line: 328,
            column: 87
          },
          end: {
            line: 328,
            column: 109
          }
        }],
        line: 328
      },
      "50": {
        loc: {
          start: {
            line: 329,
            column: 55
          },
          end: {
            line: 329,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 329,
            column: 55
          },
          end: {
            line: 329,
            column: 70
          }
        }, {
          start: {
            line: 329,
            column: 74
          },
          end: {
            line: 329,
            column: 85
          }
        }],
        line: 329
      },
      "51": {
        loc: {
          start: {
            line: 338,
            column: 68
          },
          end: {
            line: 338,
            column: 101
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 338,
            column: 68
          },
          end: {
            line: 338,
            column: 79
          }
        }, {
          start: {
            line: 338,
            column: 83
          },
          end: {
            line: 338,
            column: 101
          }
        }],
        line: 338
      },
      "52": {
        loc: {
          start: {
            line: 347,
            column: 74
          },
          end: {
            line: 347,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 347,
            column: 74
          },
          end: {
            line: 347,
            column: 85
          }
        }, {
          start: {
            line: 347,
            column: 89
          },
          end: {
            line: 347,
            column: 104
          }
        }],
        line: 347
      },
      "53": {
        loc: {
          start: {
            line: 347,
            column: 113
          },
          end: {
            line: 347,
            column: 138
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 347,
            column: 113
          },
          end: {
            line: 347,
            column: 128
          }
        }, {
          start: {
            line: 347,
            column: 132
          },
          end: {
            line: 347,
            column: 138
          }
        }],
        line: 347
      },
      "54": {
        loc: {
          start: {
            line: 350,
            column: 8
          },
          end: {
            line: 352,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 350,
            column: 8
          },
          end: {
            line: 352,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 350
      },
      "55": {
        loc: {
          start: {
            line: 353,
            column: 8
          },
          end: {
            line: 355,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 353,
            column: 8
          },
          end: {
            line: 355,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 353
      },
      "56": {
        loc: {
          start: {
            line: 365,
            column: 29
          },
          end: {
            line: 365,
            column: 246
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 365,
            column: 30
          },
          end: {
            line: 365,
            column: 215
          }
        }, {
          start: {
            line: 365,
            column: 220
          },
          end: {
            line: 365,
            column: 246
          }
        }],
        line: 365
      },
      "57": {
        loc: {
          start: {
            line: 365,
            column: 30
          },
          end: {
            line: 365,
            column: 215
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 365,
            column: 197
          },
          end: {
            line: 365,
            column: 203
          }
        }, {
          start: {
            line: 365,
            column: 206
          },
          end: {
            line: 365,
            column: 215
          }
        }],
        line: 365
      },
      "58": {
        loc: {
          start: {
            line: 365,
            column: 30
          },
          end: {
            line: 365,
            column: 194
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 365,
            column: 30
          },
          end: {
            line: 365,
            column: 177
          }
        }, {
          start: {
            line: 365,
            column: 181
          },
          end: {
            line: 365,
            column: 194
          }
        }],
        line: 365
      },
      "59": {
        loc: {
          start: {
            line: 365,
            column: 36
          },
          end: {
            line: 365,
            column: 167
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 365,
            column: 148
          },
          end: {
            line: 365,
            column: 154
          }
        }, {
          start: {
            line: 365,
            column: 157
          },
          end: {
            line: 365,
            column: 167
          }
        }],
        line: 365
      },
      "60": {
        loc: {
          start: {
            line: 365,
            column: 36
          },
          end: {
            line: 365,
            column: 145
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 365,
            column: 36
          },
          end: {
            line: 365,
            column: 128
          }
        }, {
          start: {
            line: 365,
            column: 132
          },
          end: {
            line: 365,
            column: 145
          }
        }],
        line: 365
      },
      "61": {
        loc: {
          start: {
            line: 365,
            column: 42
          },
          end: {
            line: 365,
            column: 118
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 365,
            column: 99
          },
          end: {
            line: 365,
            column: 105
          }
        }, {
          start: {
            line: 365,
            column: 108
          },
          end: {
            line: 365,
            column: 118
          }
        }],
        line: 365
      },
      "62": {
        loc: {
          start: {
            line: 365,
            column: 42
          },
          end: {
            line: 365,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 365,
            column: 42
          },
          end: {
            line: 365,
            column: 79
          }
        }, {
          start: {
            line: 365,
            column: 83
          },
          end: {
            line: 365,
            column: 96
          }
        }],
        line: 365
      },
      "63": {
        loc: {
          start: {
            line: 378,
            column: 8
          },
          end: {
            line: 385,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 379,
            column: 12
          },
          end: {
            line: 380,
            column: 95
          }
        }, {
          start: {
            line: 381,
            column: 12
          },
          end: {
            line: 382,
            column: 100
          }
        }, {
          start: {
            line: 383,
            column: 12
          },
          end: {
            line: 384,
            column: 66
          }
        }],
        line: 378
      },
      "64": {
        loc: {
          start: {
            line: 392,
            column: 8
          },
          end: {
            line: 394,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 392,
            column: 8
          },
          end: {
            line: 394,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 392
      },
      "65": {
        loc: {
          start: {
            line: 392,
            column: 12
          },
          end: {
            line: 392,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 392,
            column: 12
          },
          end: {
            line: 392,
            column: 31
          }
        }, {
          start: {
            line: 392,
            column: 35
          },
          end: {
            line: 392,
            column: 47
          }
        }, {
          start: {
            line: 392,
            column: 51
          },
          end: {
            line: 392,
            column: 88
          }
        }],
        line: 392
      },
      "66": {
        loc: {
          start: {
            line: 403,
            column: 19
          },
          end: {
            line: 403,
            column: 214
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 403,
            column: 20
          },
          end: {
            line: 403,
            column: 205
          }
        }, {
          start: {
            line: 403,
            column: 210
          },
          end: {
            line: 403,
            column: 214
          }
        }],
        line: 403
      },
      "67": {
        loc: {
          start: {
            line: 403,
            column: 20
          },
          end: {
            line: 403,
            column: 205
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 403,
            column: 187
          },
          end: {
            line: 403,
            column: 193
          }
        }, {
          start: {
            line: 403,
            column: 196
          },
          end: {
            line: 403,
            column: 205
          }
        }],
        line: 403
      },
      "68": {
        loc: {
          start: {
            line: 403,
            column: 20
          },
          end: {
            line: 403,
            column: 184
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 403,
            column: 20
          },
          end: {
            line: 403,
            column: 167
          }
        }, {
          start: {
            line: 403,
            column: 171
          },
          end: {
            line: 403,
            column: 184
          }
        }],
        line: 403
      },
      "69": {
        loc: {
          start: {
            line: 403,
            column: 26
          },
          end: {
            line: 403,
            column: 157
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 403,
            column: 138
          },
          end: {
            line: 403,
            column: 144
          }
        }, {
          start: {
            line: 403,
            column: 147
          },
          end: {
            line: 403,
            column: 157
          }
        }],
        line: 403
      },
      "70": {
        loc: {
          start: {
            line: 403,
            column: 26
          },
          end: {
            line: 403,
            column: 135
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 403,
            column: 26
          },
          end: {
            line: 403,
            column: 118
          }
        }, {
          start: {
            line: 403,
            column: 122
          },
          end: {
            line: 403,
            column: 135
          }
        }],
        line: 403
      },
      "71": {
        loc: {
          start: {
            line: 403,
            column: 32
          },
          end: {
            line: 403,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 403,
            column: 89
          },
          end: {
            line: 403,
            column: 95
          }
        }, {
          start: {
            line: 403,
            column: 98
          },
          end: {
            line: 403,
            column: 108
          }
        }],
        line: 403
      },
      "72": {
        loc: {
          start: {
            line: 403,
            column: 32
          },
          end: {
            line: 403,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 403,
            column: 32
          },
          end: {
            line: 403,
            column: 69
          }
        }, {
          start: {
            line: 403,
            column: 73
          },
          end: {
            line: 403,
            column: 86
          }
        }],
        line: 403
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0, 0],
      "64": [0, 0],
      "65": [0, 0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/azure/lib/services/azure-openai-service-server.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/azure/lib/services/azure-openai-service-server.ts"],
      sourcesContent: ["import { AzureOpenAI } from 'openai';\nimport { fetchAzureSecrets } from '../azure-config';\n\nexport interface ConversationMessage {\n  role: 'system' | 'user' | 'assistant';\n  content: string;\n}\n\nexport interface CandidateProfile {\n  currentRole?: string;\n  techStack?: string;\n  yearsExperience?: string;\n  keySkills?: string;\n  questionCount?: string;\n}\n\nexport interface InterviewContext {\n  type: 'technical' | 'behavioral' | 'general';\n  position?: string;\n  company?: string;\n  difficulty?: 'easy' | 'medium' | 'hard';\n  preliminaryCollected?: boolean; // Default: false - Indicates if preliminary info has been collected\n  currentQuestionCount?: number; // Current number of questions asked in the interview\n  maxQuestions?: number; // Default: 10 - Maximum number of questions for the interview\n}\n\nexport interface GenerationResponse {\n  content: string;\n  questionNumber?: number;\n  isComplete?: boolean;\n  followUpSuggestions?: string[];\n}\n\nexport class AzureOpenAIServiceServer {\n  private client: AzureOpenAI | null = null;\n  private isInitialized = false;\n  private modelDeployment: string = 'gpt-4o'; // Store the deployment name as model\n  private conversationHistory: ConversationMessage[] = [];\n  private interviewContext: InterviewContext = { \n    type: 'general',\n    preliminaryCollected: false,\n    currentQuestionCount: 0,\n    maxQuestions: 10\n  };\n  \n  // Preliminary questions for gathering candidate profile\n  private prelimQuestions = [\n    'What is your current role?',\n    'What primary tech stack do you use?',\n    'How many years of experience do you have?',\n    'What are your key skills?',\n    'How many interview questions would you like?'\n  ];\n  private prelimIndex = 0;\n  private candidateProfile: Record<string, string> = {};\n\n  /**\n   * Initialize the Azure OpenAI service using server-side credential loading\n   */\n  async initialize(): Promise<boolean> {\n    try {\n      console.log('\uD83D\uDD11 Initializing Azure OpenAI service on server...');\n      const secrets = await fetchAzureSecrets();\n      \n      if (!secrets.azureOpenAIKey || !secrets.azureOpenAIEndpoint || !secrets.azureOpenAIDeployment) {\n        console.warn('\u26A0\uFE0F Azure OpenAI credentials not available');\n        return false;\n      }\n\n      this.client = new AzureOpenAI({\n        apiKey: secrets.azureOpenAIKey,\n        endpoint: secrets.azureOpenAIEndpoint,\n        deployment: secrets.azureOpenAIDeployment,\n        apiVersion: '2024-02-15-preview', // Using stable API version\n        // Note: dangerouslyAllowBrowser is NOT set here since this is server-side only\n      });\n      \n      // Store the deployment name for use as model in API calls\n      this.modelDeployment = secrets.azureOpenAIDeployment;\n\n      this.isInitialized = true;\n      console.log('\u2705 Azure OpenAI Service (server-side) initialized successfully');\n      return true;\n    } catch (error) {\n      console.error('\u274C Failed to initialize Azure OpenAI Service (server-side):', error);\n      return false;\n    }\n  }\n\n  /**\n   * Check if the service is ready to use\n   */\n  isReady(): boolean {\n    return this.isInitialized && this.client !== null;\n  }\n\n  /**\n   * Set interview context for conversation management\n   */\n  setInterviewContext(context: Partial<InterviewContext>): void {\n    // Merge context while preserving defaults\n    this.interviewContext = { \n      ...this.interviewContext, \n      ...context,\n      // Ensure defaults are set if not provided\n      preliminaryCollected: context.preliminaryCollected ?? this.interviewContext.preliminaryCollected ?? false,\n      currentQuestionCount: context.currentQuestionCount ?? this.interviewContext.currentQuestionCount ?? 0,\n      maxQuestions: context.maxQuestions ?? this.interviewContext.maxQuestions ?? 10\n    };\n    console.log('\uD83D\uDCCB Interview context updated:', this.interviewContext);\n  }\n\n  /**\n   * Build system context from candidate profile\n   */\n  private buildSystemContext(): string {\n    const { currentRole, techStack, yearsExperience, keySkills } = this.candidateProfile;\n    const { type, position, company, difficulty, currentQuestionCount, maxQuestions } = this.interviewContext;\n    \n    let systemPrompt = `You are an AI interviewer conducting a ${type} interview with a candidate.\\n\\n`;\n    systemPrompt += `Candidate Profile:\\n`;\n    systemPrompt += `- Current Role: ${currentRole}\\n`;\n    systemPrompt += `- Tech Stack: ${techStack}\\n`;\n    systemPrompt += `- Years of Experience: ${yearsExperience}\\n`;\n    systemPrompt += `- Key Skills: ${keySkills}\\n\\n`;\n    \n    systemPrompt += `Interview Guidelines:\\n`;\n    systemPrompt += `1. Ask relevant, engaging questions tailored to their experience level\\n`;\n    systemPrompt += `2. Follow up on answers with clarifying questions\\n`;\n    systemPrompt += `3. Maintain a professional but friendly tone\\n`;\n    systemPrompt += `4. Keep responses concise and focused\\n`;\n    systemPrompt += `5. Adapt difficulty based on their experience and responses\\n\\n`;\n    \n    systemPrompt += `Interview Flow Control:\\n`;\n    systemPrompt += `\u2022 Preliminary questions have already been collected - do NOT ask them again\\n`;\n    systemPrompt += `\u2022 You are currently on interview question ${(currentQuestionCount || 0) + 1} of ${maxQuestions}\\n`;\n    systemPrompt += `\u2022 Continue with interview questions based on the candidate's profile\\n`;\n    systemPrompt += `\u2022 After question ${maxQuestions}, conclude the interview and thank the candidate\\n`;\n    systemPrompt += `\u2022 Do NOT exceed ${maxQuestions} interview questions\\n\\n`;\n    \n    if (position) {\n      systemPrompt += `Position: ${position}\\n`;\n    }\n    if (company) {\n      systemPrompt += `Company: ${company}\\n`;\n    }\n    if (difficulty) {\n      systemPrompt += `Difficulty Level: ${difficulty}\\n`;\n    }\n    \n    switch (type) {\n      case 'technical':\n        systemPrompt += `\\nFocus on technical skills relevant to their tech stack (${techStack}), problem-solving, coding concepts, and system design appropriate for someone with ${yearsExperience} years of experience.`;\n        break;\n      case 'behavioral':\n        systemPrompt += `\\nFocus on behavioral questions about teamwork, leadership, conflict resolution, and past experiences relevant to someone in a ${currentRole} role.`;\n        break;\n      default:\n        systemPrompt += `\\nAsk a mix of questions about background, experience, goals, and general fit for the role, considering their ${yearsExperience} years of experience in ${currentRole}.`;\n    }\n    \n    systemPrompt += `\\n\\nKeep your responses under 100 words and ask one question at a time.`;\n    return systemPrompt;\n  }\n\n  /**\n   * Start a new interview conversation\n   */\n  async startInterviewConversation(): Promise<GenerationResponse> {\n    if (!this.isInitialized || !this.client) {\n      throw new Error('Azure OpenAI Service not initialized');\n    }\n\n    // Reset conversation history and preliminary questions state\n    this.conversationHistory = [];\n    this.prelimIndex = 0;\n    this.candidateProfile = {};\n    // Reset interview context flags\n    this.interviewContext.preliminaryCollected = false;\n    this.interviewContext.currentQuestionCount = 0;\n\n    // Send greeting + first preliminary question\n    const greeting = \"Hello! Welcome to your interview practice session. Before we begin, I'd like to learn a bit about you.\";\n    const firstQuestion = this.prelimQuestions[0];\n    const openingMessage = `${greeting}\\n\\n${firstQuestion}`;\n\n    return {\n      content: openingMessage,\n      questionNumber: 0, // 0 indicates preliminary questions\n      isComplete: false\n    };\n  }\n\n  /**\n   * Get opening message based on interview type\n   * Uses generateInterviewQuestion helper for domain-specific questions\n   */\n  private async getOpeningMessage(): Promise<string> {\n    const { position } = this.interviewContext;\n    \n    let greeting = \"\";\n    \n    if (position) {\n      greeting += `Let's discuss the ${position} position. `;\n    }\n    \n    try {\n      // Use the helper to generate a domain-specific opening question\n      const question = await this.generateInterviewQuestion();\n      return greeting + question;\n    } catch (error) {\n      console.warn('\u26A0\uFE0F Falling back to default opening question');\n      // Fallback to a simpler approach if generation fails\n      return greeting + this.getFallbackQuestion();\n    }\n  }\n\n  /**\n   * Process user response and generate next question or comment\n   */\n  async processUserResponse(userResponse: string): Promise<GenerationResponse> {\n    console.log('\uD83E\uDDEA [AZURE OPENAI] Processing user response', { \n      responseLength: userResponse.length, \n      preliminaryCollected: this.interviewContext.preliminaryCollected,\n      currentQuestionCount: this.interviewContext.currentQuestionCount\n    });\n    \n    if (!this.isInitialized || !this.client) {\n      console.error('\u274C [AZURE OPENAI] Service not initialized');\n      throw new Error('Azure OpenAI Service not initialized');\n    }\n\n    // Check if we're still collecting preliminary information\n    if (!this.interviewContext.preliminaryCollected) {\n      // We're in preliminary phase - check if we still have questions to ask\n      if (this.prelimIndex < this.prelimQuestions.length) {\n        // Store the user's answer to the current preliminary question\n        const questionKeys = ['currentRole', 'techStack', 'yearsExperience', 'keySkills', 'questionCount'];\n        this.candidateProfile[questionKeys[this.prelimIndex]] = userResponse;\n        \n        // Increment to next preliminary question\n        this.prelimIndex++;\n        \n        // If there are more preliminary questions, return the next one\n        if (this.prelimIndex < this.prelimQuestions.length) {\n          const nextQuestion = this.prelimQuestions[this.prelimIndex];\n          return {\n            content: `Thank you! ${nextQuestion}`,\n            questionNumber: 0, // Still in preliminary phase - keep at 0\n            isComplete: false\n          };\n        } else {\n          // All preliminary questions collected - mark as complete\n          this.interviewContext.preliminaryCollected = true;\n          // Keep currentQuestionCount at 0 as we haven't asked real questions yet\n          this.interviewContext.currentQuestionCount = 0;\n          \n          // Build system context from collected profile\n          const systemContext = this.buildSystemContext();\n          \n          // Initialize conversation history with system context\n          this.conversationHistory = [\n            { role: 'system', content: systemContext }\n          ];\n          \n          // Set max questions from user's response\n          const requestedQuestions = parseInt(this.candidateProfile.questionCount) || 10;\n          this.interviewContext.maxQuestions = Math.min(Math.max(requestedQuestions, 5), 20); // Between 5 and 20\n          \n          // Generate the first real interview question\n          const openingMessage = await this.getOpeningMessage();\n          this.conversationHistory.push({ role: 'assistant', content: openingMessage });\n          \n          // Increment question count for the first real question\n          this.interviewContext.currentQuestionCount = 1;\n          \n          return {\n            content: `Great! I now have a better understanding of your background. Let's begin the interview.\\n\\n${openingMessage}`,\n            questionNumber: 1, // First real question\n            isComplete: false\n          };\n        }\n      }\n    }\n\n    // Normal interview flow - preliminary info has been collected\n    // Add user response to conversation history\n    this.conversationHistory.push({ role: 'user', content: userResponse });\n\n    try {\n      console.log('\uD83E\uDDEA [AZURE OPENAI] Calling OpenAI API with', {\n        model: this.modelDeployment,\n        messagesCount: this.conversationHistory.length,\n        currentQuestionCount: this.interviewContext.currentQuestionCount\n      });\n      \n      const completion = await this.client.chat.completions.create({\n        model: this.modelDeployment,\n        messages: this.conversationHistory,\n        temperature: 0.7,\n        max_tokens: 200,\n        top_p: 0.9,\n        frequency_penalty: 0.1,\n        presence_penalty: 0.1,\n      });\n\n      const assistantResponse = completion.choices[0]?.message?.content || 'I\\'m sorry, I didn\\'t catch that. Could you repeat your answer?';\n      \n      console.log('\u2705 [AZURE OPENAI] Got response from OpenAI', {\n        responseLength: assistantResponse.length,\n        tokensUsed: completion.usage?.total_tokens || 'unknown'\n      });\n      \n      // Add assistant response to conversation history\n      this.conversationHistory.push({ role: 'assistant', content: assistantResponse });\n\n      // Increment question count for the next question\n      const currentQuestionCount = (this.interviewContext.currentQuestionCount || 0) + 1;\n      const maxQuestions = this.interviewContext.maxQuestions || 10;\n      \n      // Update question count in context\n      this.interviewContext.currentQuestionCount = currentQuestionCount;\n\n      return {\n        content: assistantResponse,\n        questionNumber: currentQuestionCount,\n        isComplete: currentQuestionCount >= maxQuestions,\n        followUpSuggestions: this.generateFollowUpSuggestions()\n      };\n    } catch (error) {\n      console.error('\u274C [AZURE OPENAI] Error generating OpenAI response:', error);\n      \n      // Provide more detailed error information\n      if (error && typeof error === 'object' && 'status' in error) {\n        const apiError = error as any;\n        console.error('\u274C [AZURE OPENAI] API Error Details:', {\n          status: apiError.status,\n          code: apiError.code,\n          type: apiError.type,\n          message: apiError.message\n        });\n        \n        if (apiError.status === 429) {\n          throw new Error('Rate limit exceeded - please try again in a moment');\n        } else if (apiError.status === 401) {\n          throw new Error('Authentication failed - please check Azure OpenAI credentials');\n        } else if (apiError.status === 404) {\n          throw new Error(`Model deployment '${this.modelDeployment}' not found`);\n        }\n      }\n      \n      throw new Error(`Failed to generate response: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * Generate follow-up suggestions based on conversation\n   */\n  private generateFollowUpSuggestions(): string[] {\n    const { type } = this.interviewContext;\n    \n    switch (type) {\n      case 'technical':\n        return [\n          \"Can you explain your thought process?\",\n          \"What would you do differently?\",\n          \"How would this scale?\"\n        ];\n      case 'behavioral':\n        return [\n          \"What was the outcome?\",\n          \"What did you learn?\",\n          \"How would you handle it now?\"\n        ];\n      default:\n        return [\n          \"Can you elaborate on that?\",\n          \"What was your biggest challenge?\",\n          \"What motivates you?\"\n        ];\n    }\n  }\n\n  /**\n   * Generate a domain-specific interview question based on context and conversation history\n   */\n  async generateInterviewQuestion(): Promise<string> {\n    if (!this.isInitialized || !this.client) {\n      throw new Error('Azure OpenAI Service not initialized');\n    }\n\n    // Build the appropriate system prompt based on interview type and profile\n    const { type, difficulty, position } = this.interviewContext;\n    const { currentRole, techStack, yearsExperience, keySkills } = this.candidateProfile;\n    \n    let questionPrompt = `Generate one concise interview question. `;\n    \n    // Add context-specific instructions based on interview type\n    switch (type) {\n      case 'technical':\n        questionPrompt += `Focus on technical skills and problem-solving.\\n`;\n        questionPrompt += `Consider the candidate's tech stack: ${techStack || 'various technologies'}.\\n`;\n        questionPrompt += `Experience level: ${yearsExperience || 'mid-level'} years.\\n`;\n        questionPrompt += `Include specific technical scenarios such as:\\n`;\n        questionPrompt += `- Code/architecture design challenges\\n`;\n        questionPrompt += `- Debugging or optimization problems\\n`;\n        questionPrompt += `- Technology-specific best practices\\n`;\n        questionPrompt += `- System scalability considerations\\n`;\n        break;\n        \n      case 'behavioral':\n        questionPrompt += `Focus on behavioral assessment using STAR method.\\n`;\n        questionPrompt += `Consider the candidate's role: ${currentRole || 'general position'}.\\n`;\n        questionPrompt += `Ask about situations involving:\\n`;\n        questionPrompt += `- Leadership and teamwork\\n`;\n        questionPrompt += `- Conflict resolution\\n`;\n        questionPrompt += `- Problem-solving under pressure\\n`;\n        questionPrompt += `- Learning from failures\\n`;\n        break;\n        \n      default:\n        questionPrompt += `Ask a general interview question.\\n`;\n        questionPrompt += `Consider the candidate's background: ${currentRole || 'various roles'} with ${yearsExperience || 'some'} years experience.\\n`;\n        questionPrompt += `Focus on motivation, goals, and cultural fit.\\n`;\n    }\n\n    if (difficulty) {\n      questionPrompt += `Difficulty level: ${difficulty}.\\n`;\n    }\n    \n    if (position) {\n      questionPrompt += `Position being interviewed for: ${position}.\\n`;\n    }\n\n    questionPrompt += `\\nReturn only the question text, no additional formatting or explanations.`;\n\n    try {\n      const completion = await this.client.chat.completions.create({\n        model: this.modelDeployment,\n        messages: [{ role: 'user', content: questionPrompt }],\n        temperature: 0.8,\n        max_tokens: 100,\n        top_p: 0.9,\n      });\n\n      const question = completion.choices[0]?.message?.content?.trim() || this.getFallbackQuestion();\n      return question;\n    } catch (error) {\n      console.warn('\u26A0\uFE0F Failed to generate interview question, using fallback');\n      return this.getFallbackQuestion();\n    }\n  }\n\n  /**\n   * Get fallback question when generation fails\n   */\n  private getFallbackQuestion(): string {\n    const { type } = this.interviewContext;\n    \n    switch (type) {\n      case 'technical':\n        return \"Tell me about a challenging technical problem you've solved recently.\";\n      case 'behavioral':\n        return \"Can you describe a time when you had to work with a difficult team member?\";\n      default:\n        return \"What interests you most about this role?\";\n    }\n  }\n\n  /**\n   * Generate interview summary\n   */\n  async generateInterviewSummary(): Promise<string | null> {\n    if (!this.isInitialized || !this.client || this.conversationHistory.length === 0) {\n      return null;\n    }\n\n    const summaryPrompt = `Based on the following interview conversation, provide a brief summary of the candidate's performance, strengths, and areas for improvement. Keep it concise and professional.\\n\\nConversation:\\n${this.conversationHistory.map(msg => `${msg.role}: ${msg.content}`).join('\\n')}`;\n\n    try {\n      const completion = await this.client.chat.completions.create({\n        model: this.modelDeployment,\n        messages: [{ role: 'user', content: summaryPrompt }],\n        temperature: 0.5,\n        max_tokens: 300,\n      });\n\n      return completion.choices[0]?.message?.content?.trim() || null;\n    } catch (error) {\n      console.error('\u274C Error generating interview summary:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Get conversation history\n   */\n  getConversationHistory(): ConversationMessage[] {\n    return this.conversationHistory;\n  }\n\n  /**\n   * Reset the service state\n   */\n  reset(): void {\n    this.conversationHistory = [];\n    this.prelimIndex = 0;\n    this.candidateProfile = {};\n    this.interviewContext = { \n      type: 'general',\n      preliminaryCollected: false,\n      currentQuestionCount: 0,\n      maxQuestions: 10\n    };\n    console.log('\uD83D\uDD04 Azure OpenAI Service state reset');\n  }\n}\n\n// Create and export a singleton instance for use across the application\nexport const azureOpenAIServiceServer = new AzureOpenAIServiceServer();\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7e0324ceef59d2ccabbf84d2c3d850fcd7346d75"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_25q5mvesoh = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_25q5mvesoh();
cov_25q5mvesoh().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_25q5mvesoh().s[1]++;
exports.azureOpenAIServiceServer = exports.AzureOpenAIServiceServer = void 0;
const openai_1 =
/* istanbul ignore next */
(cov_25q5mvesoh().s[2]++, require("openai"));
const azure_config_1 =
/* istanbul ignore next */
(cov_25q5mvesoh().s[3]++, require("../azure-config"));
class AzureOpenAIServiceServer {
  constructor() {
    /* istanbul ignore next */
    cov_25q5mvesoh().f[0]++;
    cov_25q5mvesoh().s[4]++;
    this.client = null;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[5]++;
    this.isInitialized = false;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[6]++;
    this.modelDeployment = 'gpt-4o'; // Store the deployment name as model
    /* istanbul ignore next */
    cov_25q5mvesoh().s[7]++;
    this.conversationHistory = [];
    /* istanbul ignore next */
    cov_25q5mvesoh().s[8]++;
    this.interviewContext = {
      type: 'general',
      preliminaryCollected: false,
      currentQuestionCount: 0,
      maxQuestions: 10
    };
    // Preliminary questions for gathering candidate profile
    /* istanbul ignore next */
    cov_25q5mvesoh().s[9]++;
    this.prelimQuestions = ['What is your current role?', 'What primary tech stack do you use?', 'How many years of experience do you have?', 'What are your key skills?', 'How many interview questions would you like?'];
    /* istanbul ignore next */
    cov_25q5mvesoh().s[10]++;
    this.prelimIndex = 0;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[11]++;
    this.candidateProfile = {};
  }
  /**
   * Initialize the Azure OpenAI service using server-side credential loading
   */
  async initialize() {
    /* istanbul ignore next */
    cov_25q5mvesoh().f[1]++;
    cov_25q5mvesoh().s[12]++;
    try {
      /* istanbul ignore next */
      cov_25q5mvesoh().s[13]++;
      console.log('🔑 Initializing Azure OpenAI service on server...');
      const secrets =
      /* istanbul ignore next */
      (cov_25q5mvesoh().s[14]++, await (0, azure_config_1.fetchAzureSecrets)());
      /* istanbul ignore next */
      cov_25q5mvesoh().s[15]++;
      if (
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[1][0]++, !secrets.azureOpenAIKey) ||
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[1][1]++, !secrets.azureOpenAIEndpoint) ||
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[1][2]++, !secrets.azureOpenAIDeployment)) {
        /* istanbul ignore next */
        cov_25q5mvesoh().b[0][0]++;
        cov_25q5mvesoh().s[16]++;
        console.warn('⚠️ Azure OpenAI credentials not available');
        /* istanbul ignore next */
        cov_25q5mvesoh().s[17]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_25q5mvesoh().b[0][1]++;
      }
      cov_25q5mvesoh().s[18]++;
      this.client = new openai_1.AzureOpenAI({
        apiKey: secrets.azureOpenAIKey,
        endpoint: secrets.azureOpenAIEndpoint,
        deployment: secrets.azureOpenAIDeployment,
        apiVersion: '2024-02-15-preview' // Using stable API version
        // Note: dangerouslyAllowBrowser is NOT set here since this is server-side only
      });
      // Store the deployment name for use as model in API calls
      /* istanbul ignore next */
      cov_25q5mvesoh().s[19]++;
      this.modelDeployment = secrets.azureOpenAIDeployment;
      /* istanbul ignore next */
      cov_25q5mvesoh().s[20]++;
      this.isInitialized = true;
      /* istanbul ignore next */
      cov_25q5mvesoh().s[21]++;
      console.log('✅ Azure OpenAI Service (server-side) initialized successfully');
      /* istanbul ignore next */
      cov_25q5mvesoh().s[22]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_25q5mvesoh().s[23]++;
      console.error('❌ Failed to initialize Azure OpenAI Service (server-side):', error);
      /* istanbul ignore next */
      cov_25q5mvesoh().s[24]++;
      return false;
    }
  }
  /**
   * Check if the service is ready to use
   */
  isReady() {
    /* istanbul ignore next */
    cov_25q5mvesoh().f[2]++;
    cov_25q5mvesoh().s[25]++;
    return /* istanbul ignore next */(cov_25q5mvesoh().b[2][0]++, this.isInitialized) &&
    /* istanbul ignore next */
    (cov_25q5mvesoh().b[2][1]++, this.client !== null);
  }
  /**
   * Set interview context for conversation management
   */
  setInterviewContext(context) {
    /* istanbul ignore next */
    cov_25q5mvesoh().f[3]++;
    var _a, _b, _c, _d, _e, _f;
    // Merge context while preserving defaults
    /* istanbul ignore next */
    cov_25q5mvesoh().s[26]++;
    this.interviewContext = Object.assign(Object.assign(Object.assign({}, this.interviewContext), context), {
      // Ensure defaults are set if not provided
      preliminaryCollected:
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[4][0]++, (_b =
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[6][0]++, (_a = context.preliminaryCollected) !== null) &&
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[6][1]++, _a !== void 0) ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[5][0]++, _a) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[5][1]++, this.interviewContext.preliminaryCollected)) !== null) &&
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[4][1]++, _b !== void 0) ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[3][0]++, _b) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[3][1]++, false),
      currentQuestionCount:
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[8][0]++, (_d =
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[10][0]++, (_c = context.currentQuestionCount) !== null) &&
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[10][1]++, _c !== void 0) ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[9][0]++, _c) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[9][1]++, this.interviewContext.currentQuestionCount)) !== null) &&
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[8][1]++, _d !== void 0) ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[7][0]++, _d) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[7][1]++, 0),
      maxQuestions:
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[12][0]++, (_f =
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[14][0]++, (_e = context.maxQuestions) !== null) &&
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[14][1]++, _e !== void 0) ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[13][0]++, _e) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[13][1]++, this.interviewContext.maxQuestions)) !== null) &&
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[12][1]++, _f !== void 0) ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[11][0]++, _f) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[11][1]++, 10)
    });
    /* istanbul ignore next */
    cov_25q5mvesoh().s[27]++;
    console.log('📋 Interview context updated:', this.interviewContext);
  }
  /**
   * Build system context from candidate profile
   */
  buildSystemContext() {
    /* istanbul ignore next */
    cov_25q5mvesoh().f[4]++;
    const {
      currentRole,
      techStack,
      yearsExperience,
      keySkills
    } =
    /* istanbul ignore next */
    (cov_25q5mvesoh().s[28]++, this.candidateProfile);
    const {
      type,
      position,
      company,
      difficulty,
      currentQuestionCount,
      maxQuestions
    } =
    /* istanbul ignore next */
    (cov_25q5mvesoh().s[29]++, this.interviewContext);
    let systemPrompt =
    /* istanbul ignore next */
    (cov_25q5mvesoh().s[30]++, `You are an AI interviewer conducting a ${type} interview with a candidate.\n\n`);
    /* istanbul ignore next */
    cov_25q5mvesoh().s[31]++;
    systemPrompt += `Candidate Profile:\n`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[32]++;
    systemPrompt += `- Current Role: ${currentRole}\n`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[33]++;
    systemPrompt += `- Tech Stack: ${techStack}\n`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[34]++;
    systemPrompt += `- Years of Experience: ${yearsExperience}\n`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[35]++;
    systemPrompt += `- Key Skills: ${keySkills}\n\n`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[36]++;
    systemPrompt += `Interview Guidelines:\n`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[37]++;
    systemPrompt += `1. Ask relevant, engaging questions tailored to their experience level\n`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[38]++;
    systemPrompt += `2. Follow up on answers with clarifying questions\n`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[39]++;
    systemPrompt += `3. Maintain a professional but friendly tone\n`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[40]++;
    systemPrompt += `4. Keep responses concise and focused\n`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[41]++;
    systemPrompt += `5. Adapt difficulty based on their experience and responses\n\n`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[42]++;
    systemPrompt += `Interview Flow Control:\n`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[43]++;
    systemPrompt += `• Preliminary questions have already been collected - do NOT ask them again\n`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[44]++;
    systemPrompt += `• You are currently on interview question ${(
    /* istanbul ignore next */
    (cov_25q5mvesoh().b[15][0]++, currentQuestionCount) ||
    /* istanbul ignore next */
    (cov_25q5mvesoh().b[15][1]++, 0)) + 1} of ${maxQuestions}\n`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[45]++;
    systemPrompt += `• Continue with interview questions based on the candidate's profile\n`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[46]++;
    systemPrompt += `• After question ${maxQuestions}, conclude the interview and thank the candidate\n`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[47]++;
    systemPrompt += `• Do NOT exceed ${maxQuestions} interview questions\n\n`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[48]++;
    if (position) {
      /* istanbul ignore next */
      cov_25q5mvesoh().b[16][0]++;
      cov_25q5mvesoh().s[49]++;
      systemPrompt += `Position: ${position}\n`;
    } else
    /* istanbul ignore next */
    {
      cov_25q5mvesoh().b[16][1]++;
    }
    cov_25q5mvesoh().s[50]++;
    if (company) {
      /* istanbul ignore next */
      cov_25q5mvesoh().b[17][0]++;
      cov_25q5mvesoh().s[51]++;
      systemPrompt += `Company: ${company}\n`;
    } else
    /* istanbul ignore next */
    {
      cov_25q5mvesoh().b[17][1]++;
    }
    cov_25q5mvesoh().s[52]++;
    if (difficulty) {
      /* istanbul ignore next */
      cov_25q5mvesoh().b[18][0]++;
      cov_25q5mvesoh().s[53]++;
      systemPrompt += `Difficulty Level: ${difficulty}\n`;
    } else
    /* istanbul ignore next */
    {
      cov_25q5mvesoh().b[18][1]++;
    }
    cov_25q5mvesoh().s[54]++;
    switch (type) {
      case 'technical':
        /* istanbul ignore next */
        cov_25q5mvesoh().b[19][0]++;
        cov_25q5mvesoh().s[55]++;
        systemPrompt += `\nFocus on technical skills relevant to their tech stack (${techStack}), problem-solving, coding concepts, and system design appropriate for someone with ${yearsExperience} years of experience.`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[56]++;
        break;
      case 'behavioral':
        /* istanbul ignore next */
        cov_25q5mvesoh().b[19][1]++;
        cov_25q5mvesoh().s[57]++;
        systemPrompt += `\nFocus on behavioral questions about teamwork, leadership, conflict resolution, and past experiences relevant to someone in a ${currentRole} role.`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[58]++;
        break;
      default:
        /* istanbul ignore next */
        cov_25q5mvesoh().b[19][2]++;
        cov_25q5mvesoh().s[59]++;
        systemPrompt += `\nAsk a mix of questions about background, experience, goals, and general fit for the role, considering their ${yearsExperience} years of experience in ${currentRole}.`;
    }
    /* istanbul ignore next */
    cov_25q5mvesoh().s[60]++;
    systemPrompt += `\n\nKeep your responses under 100 words and ask one question at a time.`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[61]++;
    return systemPrompt;
  }
  /**
   * Start a new interview conversation
   */
  async startInterviewConversation() {
    /* istanbul ignore next */
    cov_25q5mvesoh().f[5]++;
    cov_25q5mvesoh().s[62]++;
    if (
    /* istanbul ignore next */
    (cov_25q5mvesoh().b[21][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_25q5mvesoh().b[21][1]++, !this.client)) {
      /* istanbul ignore next */
      cov_25q5mvesoh().b[20][0]++;
      cov_25q5mvesoh().s[63]++;
      throw new Error('Azure OpenAI Service not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_25q5mvesoh().b[20][1]++;
    }
    // Reset conversation history and preliminary questions state
    cov_25q5mvesoh().s[64]++;
    this.conversationHistory = [];
    /* istanbul ignore next */
    cov_25q5mvesoh().s[65]++;
    this.prelimIndex = 0;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[66]++;
    this.candidateProfile = {};
    // Reset interview context flags
    /* istanbul ignore next */
    cov_25q5mvesoh().s[67]++;
    this.interviewContext.preliminaryCollected = false;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[68]++;
    this.interviewContext.currentQuestionCount = 0;
    // Send greeting + first preliminary question
    const greeting =
    /* istanbul ignore next */
    (cov_25q5mvesoh().s[69]++, "Hello! Welcome to your interview practice session. Before we begin, I'd like to learn a bit about you.");
    const firstQuestion =
    /* istanbul ignore next */
    (cov_25q5mvesoh().s[70]++, this.prelimQuestions[0]);
    const openingMessage =
    /* istanbul ignore next */
    (cov_25q5mvesoh().s[71]++, `${greeting}\n\n${firstQuestion}`);
    /* istanbul ignore next */
    cov_25q5mvesoh().s[72]++;
    return {
      content: openingMessage,
      questionNumber: 0,
      // 0 indicates preliminary questions
      isComplete: false
    };
  }
  /**
   * Get opening message based on interview type
   * Uses generateInterviewQuestion helper for domain-specific questions
   */
  async getOpeningMessage() {
    /* istanbul ignore next */
    cov_25q5mvesoh().f[6]++;
    const {
      position
    } =
    /* istanbul ignore next */
    (cov_25q5mvesoh().s[73]++, this.interviewContext);
    let greeting =
    /* istanbul ignore next */
    (cov_25q5mvesoh().s[74]++, "");
    /* istanbul ignore next */
    cov_25q5mvesoh().s[75]++;
    if (position) {
      /* istanbul ignore next */
      cov_25q5mvesoh().b[22][0]++;
      cov_25q5mvesoh().s[76]++;
      greeting += `Let's discuss the ${position} position. `;
    } else
    /* istanbul ignore next */
    {
      cov_25q5mvesoh().b[22][1]++;
    }
    cov_25q5mvesoh().s[77]++;
    try {
      // Use the helper to generate a domain-specific opening question
      const question =
      /* istanbul ignore next */
      (cov_25q5mvesoh().s[78]++, await this.generateInterviewQuestion());
      /* istanbul ignore next */
      cov_25q5mvesoh().s[79]++;
      return greeting + question;
    } catch (error) {
      /* istanbul ignore next */
      cov_25q5mvesoh().s[80]++;
      console.warn('⚠️ Falling back to default opening question');
      // Fallback to a simpler approach if generation fails
      /* istanbul ignore next */
      cov_25q5mvesoh().s[81]++;
      return greeting + this.getFallbackQuestion();
    }
  }
  /**
   * Process user response and generate next question or comment
   */
  async processUserResponse(userResponse) {
    /* istanbul ignore next */
    cov_25q5mvesoh().f[7]++;
    var _a, _b, _c;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[82]++;
    console.log('🧪 [AZURE OPENAI] Processing user response', {
      responseLength: userResponse.length,
      preliminaryCollected: this.interviewContext.preliminaryCollected,
      currentQuestionCount: this.interviewContext.currentQuestionCount
    });
    /* istanbul ignore next */
    cov_25q5mvesoh().s[83]++;
    if (
    /* istanbul ignore next */
    (cov_25q5mvesoh().b[24][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_25q5mvesoh().b[24][1]++, !this.client)) {
      /* istanbul ignore next */
      cov_25q5mvesoh().b[23][0]++;
      cov_25q5mvesoh().s[84]++;
      console.error('❌ [AZURE OPENAI] Service not initialized');
      /* istanbul ignore next */
      cov_25q5mvesoh().s[85]++;
      throw new Error('Azure OpenAI Service not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_25q5mvesoh().b[23][1]++;
    }
    // Check if we're still collecting preliminary information
    cov_25q5mvesoh().s[86]++;
    if (!this.interviewContext.preliminaryCollected) {
      /* istanbul ignore next */
      cov_25q5mvesoh().b[25][0]++;
      cov_25q5mvesoh().s[87]++;
      // We're in preliminary phase - check if we still have questions to ask
      if (this.prelimIndex < this.prelimQuestions.length) {
        /* istanbul ignore next */
        cov_25q5mvesoh().b[26][0]++;
        // Store the user's answer to the current preliminary question
        const questionKeys =
        /* istanbul ignore next */
        (cov_25q5mvesoh().s[88]++, ['currentRole', 'techStack', 'yearsExperience', 'keySkills', 'questionCount']);
        /* istanbul ignore next */
        cov_25q5mvesoh().s[89]++;
        this.candidateProfile[questionKeys[this.prelimIndex]] = userResponse;
        // Increment to next preliminary question
        /* istanbul ignore next */
        cov_25q5mvesoh().s[90]++;
        this.prelimIndex++;
        // If there are more preliminary questions, return the next one
        /* istanbul ignore next */
        cov_25q5mvesoh().s[91]++;
        if (this.prelimIndex < this.prelimQuestions.length) {
          /* istanbul ignore next */
          cov_25q5mvesoh().b[27][0]++;
          const nextQuestion =
          /* istanbul ignore next */
          (cov_25q5mvesoh().s[92]++, this.prelimQuestions[this.prelimIndex]);
          /* istanbul ignore next */
          cov_25q5mvesoh().s[93]++;
          return {
            content: `Thank you! ${nextQuestion}`,
            questionNumber: 0,
            // Still in preliminary phase - keep at 0
            isComplete: false
          };
        } else {
          /* istanbul ignore next */
          cov_25q5mvesoh().b[27][1]++;
          cov_25q5mvesoh().s[94]++;
          // All preliminary questions collected - mark as complete
          this.interviewContext.preliminaryCollected = true;
          // Keep currentQuestionCount at 0 as we haven't asked real questions yet
          /* istanbul ignore next */
          cov_25q5mvesoh().s[95]++;
          this.interviewContext.currentQuestionCount = 0;
          // Build system context from collected profile
          const systemContext =
          /* istanbul ignore next */
          (cov_25q5mvesoh().s[96]++, this.buildSystemContext());
          // Initialize conversation history with system context
          /* istanbul ignore next */
          cov_25q5mvesoh().s[97]++;
          this.conversationHistory = [{
            role: 'system',
            content: systemContext
          }];
          // Set max questions from user's response
          const requestedQuestions =
          /* istanbul ignore next */
          (cov_25q5mvesoh().s[98]++,
          /* istanbul ignore next */
          (cov_25q5mvesoh().b[28][0]++, parseInt(this.candidateProfile.questionCount)) ||
          /* istanbul ignore next */
          (cov_25q5mvesoh().b[28][1]++, 10));
          /* istanbul ignore next */
          cov_25q5mvesoh().s[99]++;
          this.interviewContext.maxQuestions = Math.min(Math.max(requestedQuestions, 5), 20); // Between 5 and 20
          // Generate the first real interview question
          const openingMessage =
          /* istanbul ignore next */
          (cov_25q5mvesoh().s[100]++, await this.getOpeningMessage());
          /* istanbul ignore next */
          cov_25q5mvesoh().s[101]++;
          this.conversationHistory.push({
            role: 'assistant',
            content: openingMessage
          });
          // Increment question count for the first real question
          /* istanbul ignore next */
          cov_25q5mvesoh().s[102]++;
          this.interviewContext.currentQuestionCount = 1;
          /* istanbul ignore next */
          cov_25q5mvesoh().s[103]++;
          return {
            content: `Great! I now have a better understanding of your background. Let's begin the interview.\n\n${openingMessage}`,
            questionNumber: 1,
            // First real question
            isComplete: false
          };
        }
      } else
      /* istanbul ignore next */
      {
        cov_25q5mvesoh().b[26][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_25q5mvesoh().b[25][1]++;
    }
    // Normal interview flow - preliminary info has been collected
    // Add user response to conversation history
    cov_25q5mvesoh().s[104]++;
    this.conversationHistory.push({
      role: 'user',
      content: userResponse
    });
    /* istanbul ignore next */
    cov_25q5mvesoh().s[105]++;
    try {
      /* istanbul ignore next */
      cov_25q5mvesoh().s[106]++;
      console.log('🧪 [AZURE OPENAI] Calling OpenAI API with', {
        model: this.modelDeployment,
        messagesCount: this.conversationHistory.length,
        currentQuestionCount: this.interviewContext.currentQuestionCount
      });
      const completion =
      /* istanbul ignore next */
      (cov_25q5mvesoh().s[107]++, await this.client.chat.completions.create({
        model: this.modelDeployment,
        messages: this.conversationHistory,
        temperature: 0.7,
        max_tokens: 200,
        top_p: 0.9,
        frequency_penalty: 0.1,
        presence_penalty: 0.1
      }));
      const assistantResponse =
      /* istanbul ignore next */
      (cov_25q5mvesoh().s[108]++,
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[29][0]++,
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[31][0]++, (_b =
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[33][0]++, (_a = completion.choices[0]) === null) ||
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[33][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[32][0]++, void 0) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[32][1]++, _a.message)) === null) ||
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[31][1]++, _b === void 0) ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[30][0]++, void 0) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[30][1]++, _b.content)) ||
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[29][1]++, 'I\'m sorry, I didn\'t catch that. Could you repeat your answer?'));
      /* istanbul ignore next */
      cov_25q5mvesoh().s[109]++;
      console.log('✅ [AZURE OPENAI] Got response from OpenAI', {
        responseLength: assistantResponse.length,
        tokensUsed:
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[34][0]++,
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[36][0]++, (_c = completion.usage) === null) ||
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[36][1]++, _c === void 0) ?
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[35][0]++, void 0) :
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[35][1]++, _c.total_tokens)) ||
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[34][1]++, 'unknown')
      });
      // Add assistant response to conversation history
      /* istanbul ignore next */
      cov_25q5mvesoh().s[110]++;
      this.conversationHistory.push({
        role: 'assistant',
        content: assistantResponse
      });
      // Increment question count for the next question
      const currentQuestionCount =
      /* istanbul ignore next */
      (cov_25q5mvesoh().s[111]++, (
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[37][0]++, this.interviewContext.currentQuestionCount) ||
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[37][1]++, 0)) + 1);
      const maxQuestions =
      /* istanbul ignore next */
      (cov_25q5mvesoh().s[112]++,
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[38][0]++, this.interviewContext.maxQuestions) ||
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[38][1]++, 10));
      // Update question count in context
      /* istanbul ignore next */
      cov_25q5mvesoh().s[113]++;
      this.interviewContext.currentQuestionCount = currentQuestionCount;
      /* istanbul ignore next */
      cov_25q5mvesoh().s[114]++;
      return {
        content: assistantResponse,
        questionNumber: currentQuestionCount,
        isComplete: currentQuestionCount >= maxQuestions,
        followUpSuggestions: this.generateFollowUpSuggestions()
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_25q5mvesoh().s[115]++;
      console.error('❌ [AZURE OPENAI] Error generating OpenAI response:', error);
      // Provide more detailed error information
      /* istanbul ignore next */
      cov_25q5mvesoh().s[116]++;
      if (
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[40][0]++, error) &&
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[40][1]++, typeof error === 'object') &&
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[40][2]++, 'status' in error)) {
        /* istanbul ignore next */
        cov_25q5mvesoh().b[39][0]++;
        const apiError =
        /* istanbul ignore next */
        (cov_25q5mvesoh().s[117]++, error);
        /* istanbul ignore next */
        cov_25q5mvesoh().s[118]++;
        console.error('❌ [AZURE OPENAI] API Error Details:', {
          status: apiError.status,
          code: apiError.code,
          type: apiError.type,
          message: apiError.message
        });
        /* istanbul ignore next */
        cov_25q5mvesoh().s[119]++;
        if (apiError.status === 429) {
          /* istanbul ignore next */
          cov_25q5mvesoh().b[41][0]++;
          cov_25q5mvesoh().s[120]++;
          throw new Error('Rate limit exceeded - please try again in a moment');
        } else {
          /* istanbul ignore next */
          cov_25q5mvesoh().b[41][1]++;
          cov_25q5mvesoh().s[121]++;
          if (apiError.status === 401) {
            /* istanbul ignore next */
            cov_25q5mvesoh().b[42][0]++;
            cov_25q5mvesoh().s[122]++;
            throw new Error('Authentication failed - please check Azure OpenAI credentials');
          } else {
            /* istanbul ignore next */
            cov_25q5mvesoh().b[42][1]++;
            cov_25q5mvesoh().s[123]++;
            if (apiError.status === 404) {
              /* istanbul ignore next */
              cov_25q5mvesoh().b[43][0]++;
              cov_25q5mvesoh().s[124]++;
              throw new Error(`Model deployment '${this.modelDeployment}' not found`);
            } else
            /* istanbul ignore next */
            {
              cov_25q5mvesoh().b[43][1]++;
            }
          }
        }
      } else
      /* istanbul ignore next */
      {
        cov_25q5mvesoh().b[39][1]++;
      }
      cov_25q5mvesoh().s[125]++;
      throw new Error(`Failed to generate response: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[44][0]++, error.message) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[44][1]++, String(error))}`);
    }
  }
  /**
   * Generate follow-up suggestions based on conversation
   */
  generateFollowUpSuggestions() {
    /* istanbul ignore next */
    cov_25q5mvesoh().f[8]++;
    const {
      type
    } =
    /* istanbul ignore next */
    (cov_25q5mvesoh().s[126]++, this.interviewContext);
    /* istanbul ignore next */
    cov_25q5mvesoh().s[127]++;
    switch (type) {
      case 'technical':
        /* istanbul ignore next */
        cov_25q5mvesoh().b[45][0]++;
        cov_25q5mvesoh().s[128]++;
        return ["Can you explain your thought process?", "What would you do differently?", "How would this scale?"];
      case 'behavioral':
        /* istanbul ignore next */
        cov_25q5mvesoh().b[45][1]++;
        cov_25q5mvesoh().s[129]++;
        return ["What was the outcome?", "What did you learn?", "How would you handle it now?"];
      default:
        /* istanbul ignore next */
        cov_25q5mvesoh().b[45][2]++;
        cov_25q5mvesoh().s[130]++;
        return ["Can you elaborate on that?", "What was your biggest challenge?", "What motivates you?"];
    }
  }
  /**
   * Generate a domain-specific interview question based on context and conversation history
   */
  async generateInterviewQuestion() {
    /* istanbul ignore next */
    cov_25q5mvesoh().f[9]++;
    var _a, _b, _c;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[131]++;
    if (
    /* istanbul ignore next */
    (cov_25q5mvesoh().b[47][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_25q5mvesoh().b[47][1]++, !this.client)) {
      /* istanbul ignore next */
      cov_25q5mvesoh().b[46][0]++;
      cov_25q5mvesoh().s[132]++;
      throw new Error('Azure OpenAI Service not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_25q5mvesoh().b[46][1]++;
    }
    // Build the appropriate system prompt based on interview type and profile
    const {
      type,
      difficulty,
      position
    } =
    /* istanbul ignore next */
    (cov_25q5mvesoh().s[133]++, this.interviewContext);
    const {
      currentRole,
      techStack,
      yearsExperience,
      keySkills
    } =
    /* istanbul ignore next */
    (cov_25q5mvesoh().s[134]++, this.candidateProfile);
    let questionPrompt =
    /* istanbul ignore next */
    (cov_25q5mvesoh().s[135]++, `Generate one concise interview question. `);
    // Add context-specific instructions based on interview type
    /* istanbul ignore next */
    cov_25q5mvesoh().s[136]++;
    switch (type) {
      case 'technical':
        /* istanbul ignore next */
        cov_25q5mvesoh().b[48][0]++;
        cov_25q5mvesoh().s[137]++;
        questionPrompt += `Focus on technical skills and problem-solving.\n`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[138]++;
        questionPrompt += `Consider the candidate's tech stack: ${
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[49][0]++, techStack) ||
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[49][1]++, 'various technologies')}.\n`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[139]++;
        questionPrompt += `Experience level: ${
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[50][0]++, yearsExperience) ||
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[50][1]++, 'mid-level')} years.\n`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[140]++;
        questionPrompt += `Include specific technical scenarios such as:\n`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[141]++;
        questionPrompt += `- Code/architecture design challenges\n`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[142]++;
        questionPrompt += `- Debugging or optimization problems\n`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[143]++;
        questionPrompt += `- Technology-specific best practices\n`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[144]++;
        questionPrompt += `- System scalability considerations\n`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[145]++;
        break;
      case 'behavioral':
        /* istanbul ignore next */
        cov_25q5mvesoh().b[48][1]++;
        cov_25q5mvesoh().s[146]++;
        questionPrompt += `Focus on behavioral assessment using STAR method.\n`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[147]++;
        questionPrompt += `Consider the candidate's role: ${
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[51][0]++, currentRole) ||
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[51][1]++, 'general position')}.\n`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[148]++;
        questionPrompt += `Ask about situations involving:\n`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[149]++;
        questionPrompt += `- Leadership and teamwork\n`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[150]++;
        questionPrompt += `- Conflict resolution\n`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[151]++;
        questionPrompt += `- Problem-solving under pressure\n`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[152]++;
        questionPrompt += `- Learning from failures\n`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[153]++;
        break;
      default:
        /* istanbul ignore next */
        cov_25q5mvesoh().b[48][2]++;
        cov_25q5mvesoh().s[154]++;
        questionPrompt += `Ask a general interview question.\n`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[155]++;
        questionPrompt += `Consider the candidate's background: ${
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[52][0]++, currentRole) ||
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[52][1]++, 'various roles')} with ${
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[53][0]++, yearsExperience) ||
        /* istanbul ignore next */
        (cov_25q5mvesoh().b[53][1]++, 'some')} years experience.\n`;
        /* istanbul ignore next */
        cov_25q5mvesoh().s[156]++;
        questionPrompt += `Focus on motivation, goals, and cultural fit.\n`;
    }
    /* istanbul ignore next */
    cov_25q5mvesoh().s[157]++;
    if (difficulty) {
      /* istanbul ignore next */
      cov_25q5mvesoh().b[54][0]++;
      cov_25q5mvesoh().s[158]++;
      questionPrompt += `Difficulty level: ${difficulty}.\n`;
    } else
    /* istanbul ignore next */
    {
      cov_25q5mvesoh().b[54][1]++;
    }
    cov_25q5mvesoh().s[159]++;
    if (position) {
      /* istanbul ignore next */
      cov_25q5mvesoh().b[55][0]++;
      cov_25q5mvesoh().s[160]++;
      questionPrompt += `Position being interviewed for: ${position}.\n`;
    } else
    /* istanbul ignore next */
    {
      cov_25q5mvesoh().b[55][1]++;
    }
    cov_25q5mvesoh().s[161]++;
    questionPrompt += `\nReturn only the question text, no additional formatting or explanations.`;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[162]++;
    try {
      const completion =
      /* istanbul ignore next */
      (cov_25q5mvesoh().s[163]++, await this.client.chat.completions.create({
        model: this.modelDeployment,
        messages: [{
          role: 'user',
          content: questionPrompt
        }],
        temperature: 0.8,
        max_tokens: 100,
        top_p: 0.9
      }));
      const question =
      /* istanbul ignore next */
      (cov_25q5mvesoh().s[164]++,
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[56][0]++,
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[58][0]++, (_c =
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[60][0]++, (_b =
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[62][0]++, (_a = completion.choices[0]) === null) ||
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[62][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[61][0]++, void 0) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[61][1]++, _a.message)) === null) ||
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[60][1]++, _b === void 0) ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[59][0]++, void 0) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[59][1]++, _b.content)) === null) ||
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[58][1]++, _c === void 0) ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[57][0]++, void 0) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[57][1]++, _c.trim())) ||
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[56][1]++, this.getFallbackQuestion()));
      /* istanbul ignore next */
      cov_25q5mvesoh().s[165]++;
      return question;
    } catch (error) {
      /* istanbul ignore next */
      cov_25q5mvesoh().s[166]++;
      console.warn('⚠️ Failed to generate interview question, using fallback');
      /* istanbul ignore next */
      cov_25q5mvesoh().s[167]++;
      return this.getFallbackQuestion();
    }
  }
  /**
   * Get fallback question when generation fails
   */
  getFallbackQuestion() {
    /* istanbul ignore next */
    cov_25q5mvesoh().f[10]++;
    const {
      type
    } =
    /* istanbul ignore next */
    (cov_25q5mvesoh().s[168]++, this.interviewContext);
    /* istanbul ignore next */
    cov_25q5mvesoh().s[169]++;
    switch (type) {
      case 'technical':
        /* istanbul ignore next */
        cov_25q5mvesoh().b[63][0]++;
        cov_25q5mvesoh().s[170]++;
        return "Tell me about a challenging technical problem you've solved recently.";
      case 'behavioral':
        /* istanbul ignore next */
        cov_25q5mvesoh().b[63][1]++;
        cov_25q5mvesoh().s[171]++;
        return "Can you describe a time when you had to work with a difficult team member?";
      default:
        /* istanbul ignore next */
        cov_25q5mvesoh().b[63][2]++;
        cov_25q5mvesoh().s[172]++;
        return "What interests you most about this role?";
    }
  }
  /**
   * Generate interview summary
   */
  async generateInterviewSummary() {
    /* istanbul ignore next */
    cov_25q5mvesoh().f[11]++;
    var _a, _b, _c;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[173]++;
    if (
    /* istanbul ignore next */
    (cov_25q5mvesoh().b[65][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_25q5mvesoh().b[65][1]++, !this.client) ||
    /* istanbul ignore next */
    (cov_25q5mvesoh().b[65][2]++, this.conversationHistory.length === 0)) {
      /* istanbul ignore next */
      cov_25q5mvesoh().b[64][0]++;
      cov_25q5mvesoh().s[174]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_25q5mvesoh().b[64][1]++;
    }
    const summaryPrompt =
    /* istanbul ignore next */
    (cov_25q5mvesoh().s[175]++, `Based on the following interview conversation, provide a brief summary of the candidate's performance, strengths, and areas for improvement. Keep it concise and professional.\n\nConversation:\n${this.conversationHistory.map(msg => {
      /* istanbul ignore next */
      cov_25q5mvesoh().f[12]++;
      cov_25q5mvesoh().s[176]++;
      return `${msg.role}: ${msg.content}`;
    }).join('\n')}`);
    /* istanbul ignore next */
    cov_25q5mvesoh().s[177]++;
    try {
      const completion =
      /* istanbul ignore next */
      (cov_25q5mvesoh().s[178]++, await this.client.chat.completions.create({
        model: this.modelDeployment,
        messages: [{
          role: 'user',
          content: summaryPrompt
        }],
        temperature: 0.5,
        max_tokens: 300
      }));
      /* istanbul ignore next */
      cov_25q5mvesoh().s[179]++;
      return /* istanbul ignore next */(cov_25q5mvesoh().b[66][0]++,
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[68][0]++, (_c =
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[70][0]++, (_b =
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[72][0]++, (_a = completion.choices[0]) === null) ||
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[72][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[71][0]++, void 0) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[71][1]++, _a.message)) === null) ||
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[70][1]++, _b === void 0) ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[69][0]++, void 0) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[69][1]++, _b.content)) === null) ||
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[68][1]++, _c === void 0) ?
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[67][0]++, void 0) :
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[67][1]++, _c.trim())) ||
      /* istanbul ignore next */
      (cov_25q5mvesoh().b[66][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_25q5mvesoh().s[180]++;
      console.error('❌ Error generating interview summary:', error);
      /* istanbul ignore next */
      cov_25q5mvesoh().s[181]++;
      return null;
    }
  }
  /**
   * Get conversation history
   */
  getConversationHistory() {
    /* istanbul ignore next */
    cov_25q5mvesoh().f[13]++;
    cov_25q5mvesoh().s[182]++;
    return this.conversationHistory;
  }
  /**
   * Reset the service state
   */
  reset() {
    /* istanbul ignore next */
    cov_25q5mvesoh().f[14]++;
    cov_25q5mvesoh().s[183]++;
    this.conversationHistory = [];
    /* istanbul ignore next */
    cov_25q5mvesoh().s[184]++;
    this.prelimIndex = 0;
    /* istanbul ignore next */
    cov_25q5mvesoh().s[185]++;
    this.candidateProfile = {};
    /* istanbul ignore next */
    cov_25q5mvesoh().s[186]++;
    this.interviewContext = {
      type: 'general',
      preliminaryCollected: false,
      currentQuestionCount: 0,
      maxQuestions: 10
    };
    /* istanbul ignore next */
    cov_25q5mvesoh().s[187]++;
    console.log('🔄 Azure OpenAI Service state reset');
  }
}
/* istanbul ignore next */
cov_25q5mvesoh().s[188]++;
exports.AzureOpenAIServiceServer = AzureOpenAIServiceServer;
// Create and export a singleton instance for use across the application
/* istanbul ignore next */
cov_25q5mvesoh().s[189]++;
exports.azureOpenAIServiceServer = new AzureOpenAIServiceServer();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,