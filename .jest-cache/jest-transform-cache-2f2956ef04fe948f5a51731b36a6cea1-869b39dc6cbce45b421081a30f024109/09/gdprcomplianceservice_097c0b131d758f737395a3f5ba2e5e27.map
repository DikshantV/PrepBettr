{"version":3,"names":["azure_blob_storage_1","cov_fb5mtmk3e","s","require","admin_1","GDPRComplianceService","constructor","f","db","getDB","b","getDBService","getInstance","instance","recordConsent","consent","consentRef","collection","doc","userId","set","Object","assign","consentDate","Date","version","getCurrentPrivacyPolicyVersion","logConsentChange","error","console","Error","getConsent","get","exists","data","updateConsent","updates","update","lastUpdated","anonymizeAnalyticsData","timestamp","event","page","hashUserId","sessionId","hashSessionId","userAgent","anonymizeUserAgent","undefined","location","ipAddress","getLocationFromIP","metadata","sanitizeMetadata","pseudonymizeUserData","userData","pseudonymized","email","emailHash","hashEmail","name","nameInitials","getInitials","phone","address","city","country","anonymizedAt","requestDataDeletion","requestedBy","reason","requestId","generateRequestId","deletionRequest","requestDate","status","deletedData","scheduleDataDeletion","processDataDeletion","requestRef","requestDoc","request","collectionsToDelete","deleted","deleteFromCollection","push","storageDeleted","deleteFromStorage","deleteFromExternalServices","completedDate","logDataDeletion","failDb","message","getDeletionRequestStatus","exportUserData","exportDate","collections","collectionName","docs","where","map","id","consentDoc","consents","usageDoc","usage","maskEmail","username","domain","split","maskedUsername","length","charAt","repeat","maskPhoneNumber","cleaned","replace","substring","add","changes","source","Buffer","from","toString","n","toUpperCase","join","sanitized","piiKeys","forEach","key","now","Math","random","log","batch","delete","ref","commit","filesDeleted","azureBlobStorage","initialize","isReady","deletedContainers","deleteAllUserFiles","azureError","getStorage","Promise","resolve","then","__importStar","storage","bucket","files","getFiles","prefix","deletePromises","file","all","firebaseError","action","deletedCollections","complianceOfficer","exports","gdprComplianceService"],"sources":["/Users/dikshantvashistha/PrepBettr/lib/services/gdpr-compliance-service.ts"],"sourcesContent":["import { getFirestore } from 'firebase-admin/firestore';\nimport { azureBlobStorage } from '@/lib/services/azure-blob-storage';\nimport { getDBService } from '@/lib/firebase/admin';\n\nexport interface UserConsent {\n  userId: string;\n  analytics: boolean;\n  marketing: boolean;\n  functional: boolean;\n  consentDate: Date;\n  ipAddress?: string;\n  userAgent?: string;\n  version: string; // Privacy policy version\n}\n\nexport interface DataDeletionRequest {\n  userId: string;\n  requestDate: Date;\n  requestedBy: string; // email of person making request\n  reason?: string;\n  status: 'pending' | 'processing' | 'completed' | 'failed';\n  completedDate?: Date;\n  deletedData: string[]; // list of data types deleted\n}\n\nexport interface AnonymizedAnalytics {\n  timestamp: Date;\n  event: string;\n  page: string;\n  userId: string; // hashed/pseudonymized\n  sessionId: string; // hashed\n  userAgent?: string; // anonymized\n  location?: {\n    country: string;\n    region?: string; // only if consent given\n  };\n  metadata: Record<string, any>;\n}\n\nexport class GDPRComplianceService {\n  private db: Awaited<ReturnType<typeof getDBService>> | null = null;\n  private static instance: GDPRComplianceService;\n  \n  private async getDB() {\n    if (!this.db) {\n      this.db = await getDBService();\n    }\n    return this.db;\n  }\n\n  public static getInstance(): GDPRComplianceService {\n    if (!GDPRComplianceService.instance) {\n      GDPRComplianceService.instance = new GDPRComplianceService();\n    }\n    return GDPRComplianceService.instance;\n  }\n\n  // Consent Management\n  async recordConsent(consent: UserConsent): Promise<void> {\n    try {\n      const db = await this.getDB();\n      const consentRef = db.collection('userConsents').doc(consent.userId);\n      await consentRef.set({\n        ...consent,\n        consentDate: new Date(),\n        version: this.getCurrentPrivacyPolicyVersion()\n      });\n\n      // Log consent change for audit trail\n      await this.logConsentChange(consent);\n    } catch (error) {\n      console.error('Error recording consent:', error);\n      throw new Error('Failed to record user consent');\n    }\n  }\n\n  async getConsent(userId: string): Promise<UserConsent | null> {\n    try {\n      const db = await this.getDB();\n      const consentRef = db.collection('userConsents').doc(userId);\n      const doc = await consentRef.get();\n      \n      if (!doc.exists) {\n        return null;\n      }\n\n      return (doc.data() as any) as UserConsent;\n    } catch (error) {\n      console.error('Error getting consent:', error);\n      throw new Error('Failed to retrieve user consent');\n    }\n  }\n\n  async updateConsent(userId: string, updates: Partial<UserConsent>): Promise<void> {\n    try {\n      const db = await this.getDB();\n      const consentRef = db.collection('userConsents').doc(userId);\n      await consentRef.update({\n        ...updates,\n        lastUpdated: new Date()\n      });\n\n      await this.logConsentChange({ userId, ...updates } as UserConsent);\n    } catch (error) {\n      console.error('Error updating consent:', error);\n      throw new Error('Failed to update user consent');\n    }\n  }\n\n  // Data Anonymization\n  anonymizeAnalyticsData(data: {\n    userId: string;\n    sessionId: string;\n    ipAddress?: string;\n    userAgent?: string;\n    event: string;\n    page: string;\n    metadata?: Record<string, any>;\n  }): AnonymizedAnalytics {\n    return {\n      timestamp: new Date(),\n      event: data.event,\n      page: data.page,\n      userId: this.hashUserId(data.userId),\n      sessionId: this.hashSessionId(data.sessionId),\n      userAgent: data.userAgent ? this.anonymizeUserAgent(data.userAgent) : undefined,\n      location: data.ipAddress ? this.getLocationFromIP(data.ipAddress) : undefined,\n      metadata: this.sanitizeMetadata(data.metadata || {})\n    };\n  }\n\n  pseudonymizeUserData(userData: any): any {\n    const pseudonymized = { ...userData };\n    \n    // Remove or hash PII fields\n    if (pseudonymized.email) {\n      pseudonymized.emailHash = this.hashEmail(pseudonymized.email);\n      delete pseudonymized.email;\n    }\n    \n    if (pseudonymized.name) {\n      pseudonymized.nameInitials = this.getInitials(pseudonymized.name);\n      delete pseudonymized.name;\n    }\n    \n    if (pseudonymized.phone) {\n      delete pseudonymized.phone;\n    }\n    \n    if (pseudonymized.address) {\n      // Keep only city and country\n      pseudonymized.location = {\n        city: pseudonymized.address.city,\n        country: pseudonymized.address.country\n      };\n      delete pseudonymized.address;\n    }\n\n    // Add anonymization timestamp\n    pseudonymized.anonymizedAt = new Date();\n    \n    return pseudonymized;\n  }\n\n  // Data Deletion\n  async requestDataDeletion(\n    userId: string, \n    requestedBy: string, \n    reason?: string\n  ): Promise<string> {\n    try {\n      const requestId = this.generateRequestId();\n      const deletionRequest: DataDeletionRequest = {\n        userId,\n        requestDate: new Date(),\n        requestedBy,\n        reason,\n        status: 'pending',\n        deletedData: []\n      };\n\n      const db = await this.getDB();\n      await db.collection('dataDeletionRequests').doc(requestId).set(deletionRequest);\n      \n      // Schedule deletion process (30-day compliance window)\n      await this.scheduleDataDeletion(requestId, userId);\n      \n      return requestId;\n    } catch (error) {\n      console.error('Error requesting data deletion:', error);\n      throw new Error('Failed to request data deletion');\n    }\n  }\n\n  async processDataDeletion(requestId: string): Promise<void> {\n    try {\n      const db = await this.getDB();\n      const requestRef = db.collection('dataDeletionRequests').doc(requestId);\n      const requestDoc = await requestRef.get();\n      \n      if (!requestDoc.exists) {\n        throw new Error('Deletion request not found');\n      }\n\n      const request = (requestDoc.data() as any) as DataDeletionRequest;\n      \n      // Update status to processing\n      await requestRef.update({ status: 'processing' });\n\n      const deletedData: string[] = [];\n\n      // Delete from Firestore collections\n      const collectionsToDelete = [\n        'users',\n        'userProfiles',\n        'resumes',\n        'interviews',\n        'analytics',\n        'userConsents',\n        'usage'\n      ];\n\n      for (const collection of collectionsToDelete) {\n        const deleted = await this.deleteFromCollection(collection, request.userId);\n        if (deleted) deletedData.push(collection);\n      }\n\n      // Delete from Firebase Storage\n      const storageDeleted = await this.deleteFromStorage(request.userId);\n      if (storageDeleted) deletedData.push('storage');\n\n      // Delete from external services (if any)\n      await this.deleteFromExternalServices(request.userId);\n\n      // Update request status\n      await requestRef.update({\n        status: 'completed',\n        completedDate: new Date(),\n        deletedData\n      });\n\n      // Log completion for audit\n      await this.logDataDeletion(request.userId, deletedData);\n\n    } catch (error: any) {\n      console.error('Error processing data deletion:', error);\n      \n      // Update request status to failed\n      const failDb = await this.getDB();\n      await failDb.collection('dataDeletionRequests').doc(requestId).update({\n        status: 'failed',\n        error: error.message || 'Unknown error'\n      });\n      \n      throw error;\n    }\n  }\n\n  async getDeletionRequestStatus(requestId: string): Promise<DataDeletionRequest | null> {\n    try {\n      const db = await this.getDB();\n      const requestDoc = await db.collection('dataDeletionRequests').doc(requestId).get();\n      return requestDoc.exists ? ((requestDoc.data() as any) as DataDeletionRequest) : null;\n    } catch (error) {\n      console.error('Error getting deletion request status:', error);\n      throw new Error('Failed to get deletion request status');\n    }\n  }\n\n  // Data Export (Subject Access Request)\n  async exportUserData(userId: string): Promise<any> {\n    try {\n      const userData: any = {\n        userId,\n        exportDate: new Date(),\n        data: {}\n      };\n\n      // Export from all relevant collections\n      const collections = ['users', 'userProfiles', 'resumes', 'interviews'];\n      \n      const db = await this.getDB();\n      for (const collectionName of collections) {\n        const docs = await db.collection(collectionName)\n          .where('userId', '==', userId)\n          .get();\n        \n        userData.data[collectionName] = docs.docs.map((doc: any) => ({\n          id: doc.id,\n          ...(doc.data() as any)\n        }));\n      }\n\n      // Export consent records\n      const consentDoc = await db.collection('userConsents').doc(userId).get();\n      if (consentDoc.exists) {\n        userData.data.consents = consentDoc.data() as any;\n      }\n\n      // Export usage data\n      const usageDoc = await db.collection('usage').doc(userId).get();\n      if (usageDoc.exists) {\n        userData.data.usage = usageDoc.data() as any;\n      }\n\n      return userData;\n    } catch (error) {\n      console.error('Error exporting user data:', error);\n      throw new Error('Failed to export user data');\n    }\n  }\n\n  // Privacy Utilities\n  maskEmail(email: string): string {\n    const [username, domain] = email.split('@');\n    const maskedUsername = username.length > 2 \n      ? username.charAt(0) + '*'.repeat(username.length - 2) + username.charAt(username.length - 1)\n      : '*'.repeat(username.length);\n    return `${maskedUsername}@${domain}`;\n  }\n\n  maskPhoneNumber(phone: string): string {\n    const cleaned = phone.replace(/\\D/g, '');\n    if (cleaned.length > 4) {\n      return cleaned.substring(0, 3) + '*'.repeat(cleaned.length - 6) + cleaned.substring(cleaned.length - 3);\n    }\n    return '*'.repeat(cleaned.length);\n  }\n\n  // Private helper methods\n  private getCurrentPrivacyPolicyVersion(): string {\n    return 'v1.0'; // Update when privacy policy changes\n  }\n\n  private async logConsentChange(consent: UserConsent): Promise<void> {\n    const db = await this.getDB();\n    await db.collection('consentAuditLog').add({\n      userId: consent.userId,\n      timestamp: new Date(),\n      changes: consent,\n      source: 'user-settings'\n    });\n  }\n\n  private hashUserId(userId: string): string {\n    // Use a consistent hashing algorithm\n    return Buffer.from(userId).toString('base64').substring(0, 12);\n  }\n\n  private hashSessionId(sessionId: string): string {\n    return Buffer.from(sessionId).toString('base64').substring(0, 8);\n  }\n\n  private hashEmail(email: string): string {\n    return Buffer.from(email).toString('base64');\n  }\n\n  private getInitials(name: string): string {\n    return name.split(' ').map(n => n.charAt(0).toUpperCase()).join('.');\n  }\n\n  private anonymizeUserAgent(userAgent: string): string {\n    // Remove version numbers and specific identifiers\n    return userAgent.replace(/\\/[\\d\\.]+/g, '/x.x')\n                   .replace(/\\([^)]*\\)/g, '(anonymized)');\n  }\n\n  private getLocationFromIP(ipAddress: string): { country: string; region?: string } | undefined {\n    // In production, use a GeoIP service\n    // For now, return minimal location data\n    return {\n      country: 'Unknown'\n    };\n  }\n\n  private sanitizeMetadata(metadata: Record<string, any>): Record<string, any> {\n    const sanitized = { ...metadata };\n    \n    // Remove potential PII from metadata\n    const piiKeys = ['email', 'phone', 'name', 'address', 'ssn', 'creditCard'];\n    piiKeys.forEach(key => {\n      if (sanitized[key]) {\n        delete sanitized[key];\n      }\n    });\n    \n    return sanitized;\n  }\n\n  private generateRequestId(): string {\n    return `del_${Date.now()}_${Math.random().toString(36).substring(2)}`;\n  }\n\n  private async scheduleDataDeletion(requestId: string, userId: string): Promise<void> {\n    // In production, use Cloud Functions or Cloud Tasks to schedule deletion\n    // For now, just log the scheduling\n    console.log(`Scheduled data deletion for user ${userId} with request ${requestId}`);\n  }\n\n  private async deleteFromCollection(collectionName: string, userId: string): Promise<boolean> {\n    try {\n      const db = await this.getDB();\n      const batch = db.batch();\n      const docs = await db.collection(collectionName)\n        .where('userId', '==', userId)\n        .get();\n\n      docs.docs.forEach((doc: any) => {\n        batch.delete(doc.ref);\n      });\n\n      await batch.commit();\n      return docs.docs.length > 0;\n    } catch (error) {\n      console.error(`Error deleting from ${collectionName}:`, error);\n      return false;\n    }\n  }\n\n  private async deleteFromStorage(userId: string): Promise<boolean> {\n    let filesDeleted = false;\n    \n    try {\n      // Try Azure Blob Storage first\n      await azureBlobStorage.initialize();\n      if (azureBlobStorage.isReady()) {\n        console.log(`🗑️ Deleting Azure Blob Storage files for user ${userId}`);\n        const deletedContainers = await azureBlobStorage.deleteAllUserFiles(userId);\n        if (deletedContainers.length > 0) {\n          console.log(`✅ Deleted from Azure containers: ${deletedContainers.join(', ')}`);\n          filesDeleted = true;\n        }\n      }\n    } catch (azureError) {\n      console.error('Error deleting from Azure Blob Storage:', azureError);\n    }\n\n    // Also attempt Firebase Storage cleanup for legacy files\n    try {\n      // Dynamic import to avoid circular dependency\n      const { getStorage } = await import('firebase-admin/storage');\n      const storage = getStorage();\n      const bucket = storage.bucket();\n      \n      const [files] = await bucket.getFiles({\n        prefix: `users/${userId}/`\n      });\n      \n      if (files.length > 0) {\n        const deletePromises = files.map(file => file.delete());\n        await Promise.all(deletePromises);\n        console.log(`✅ Deleted ${files.length} legacy Firebase Storage files for user ${userId}`);\n        filesDeleted = true;\n      }\n    } catch (firebaseError) {\n      console.error('Error deleting from Firebase Storage:', firebaseError);\n    }\n\n    return filesDeleted;\n  }\n\n  private async deleteFromExternalServices(userId: string): Promise<void> {\n    // Delete from external services like analytics, email providers, etc.\n    // Implementation depends on which external services are used\n    console.log(`Deleting user ${userId} from external services`);\n  }\n\n  private async logDataDeletion(userId: string, deletedData: string[]): Promise<void> {\n    const db = await this.getDB();\n    await db.collection('dataProtectionAuditLog').add({\n      userId,\n      action: 'data_deletion',\n      timestamp: new Date(),\n      deletedCollections: deletedData,\n      complianceOfficer: 'system'\n    });\n  }\n}\n\nexport const gdprComplianceService = GDPRComplianceService.getInstance();\n"],"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","ignoreList":[]}