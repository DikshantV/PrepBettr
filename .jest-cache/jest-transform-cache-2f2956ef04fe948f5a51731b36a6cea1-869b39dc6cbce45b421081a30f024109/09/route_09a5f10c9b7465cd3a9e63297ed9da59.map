{"version":3,"names":["cov_1xgbq53d1t","actualCoverage","s","exports","POST","GET","server_1","require","azure_openai_service_server_1","logger_1","request","f","body","json","action","logger","api","console","log","timestamp","Date","toISOString","azureOpenAIServiceServer","isReady","b","initialized","initialize","error","NextResponse","status","interviewContext","setInterviewContext","type","mapInterviewType","position","extractJobRole","company","extractCompanyName","difficulty","preliminaryCollected","currentQuestionCount","maxQuestions","response","startInterviewConversation","questionNumber","isComplete","message","content","hasAudio","followUpSuggestions","userTranscript","trim","warn","length","preview","substring","processUserResponse","contentLength","_a","transcriptLength","processError","summary","generateInterviewSummary","hasSummary","conversationHistory","getConversationHistory","Error","String","includes","service","normalizedType","toLowerCase","context","resumeInfo","candidateName","questions","roleMatch","match","undefined"],"sources":["/Users/dikshantvashistha/PrepBettr/app/api/voice/conversation/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { azureOpenAIServiceServer } from '@/azure/lib/services/azure-openai-service-server';\nimport { logger } from '@/lib/utils/logger';\nimport { InterviewContext } from '@/lib/voice/azure-adapters';\n\ninterface ConversationRequest {\n  action: 'start' | 'process' | 'summary';\n  interviewContext?: InterviewContext;\n  userTranscript?: string;\n}\n\n/**\n * Azure OpenAI Conversation API Endpoint\n * Handles interview conversation flow using Azure OpenAI\n */\nexport async function POST(request: NextRequest) {\n    try {\n      const body: ConversationRequest = await request.json();\n      const { action } = body;\n\n      logger.api.request('POST /api/voice/conversation', `Action: ${action}`);\n      console.log('🎯 [CONVERSATION API] Processing request', { action, timestamp: new Date().toISOString() });\n\n      // Initialize Azure OpenAI service if needed\n      if (!azureOpenAIServiceServer.isReady()) {\n        console.log('🔧 [CONVERSATION API] Initializing Azure OpenAI service...');\n        const initialized = await azureOpenAIServiceServer.initialize();\n        if (!initialized) {\n          console.error('❌ [CONVERSATION API] Failed to initialize Azure OpenAI service');\n          logger.error('Failed to initialize Azure OpenAI service');\n          return NextResponse.json(\n            { error: 'AI service unavailable' },\n            { status: 503 }\n          );\n        }\n        console.log('✅ [CONVERSATION API] Azure OpenAI service initialized successfully');\n      }\n\n      switch (action) {\n        case 'start': {\n          const { interviewContext } = body;\n          if (!interviewContext) {\n            return NextResponse.json(\n              { error: 'Interview context required for start action' },\n              { status: 400 }\n            );\n          }\n\n          // Set interview context in the service\n          azureOpenAIServiceServer.setInterviewContext({\n            type: mapInterviewType(interviewContext.type),\n            position: extractJobRole(interviewContext),\n            company: extractCompanyName(interviewContext),\n            difficulty: 'medium', // Default difficulty\n            preliminaryCollected: false,\n            currentQuestionCount: 0,\n            maxQuestions: 10\n          });\n\n          // Start the interview conversation\n          const response = await azureOpenAIServiceServer.startInterviewConversation();\n          \n          logger.api.response('POST /api/voice/conversation', 200, {\n            action: 'start',\n            questionNumber: response.questionNumber,\n            isComplete: response.isComplete\n          });\n\n          return NextResponse.json({\n            message: response.content,\n            questionNumber: response.questionNumber,\n            isComplete: response.isComplete,\n            hasAudio: false, // TTS will be handled separately\n            followUpSuggestions: response.followUpSuggestions\n          });\n        }\n\n        case 'process': {\n          const { userTranscript } = body;\n          if (!userTranscript || !userTranscript.trim()) {\n            console.warn('📝 [CONVERSATION API] Empty transcript received');\n            return NextResponse.json(\n              { error: 'User transcript required for process action' },\n              { status: 400 }\n            );\n          }\n\n          console.log('🧪 [CONVERSATION API] Processing user transcript', {\n            length: userTranscript.trim().length,\n            preview: userTranscript.trim().substring(0, 50) + '...'\n          });\n\n          try {\n            // Process user response and get AI reply\n            const response = await azureOpenAIServiceServer.processUserResponse(userTranscript.trim());\n\n            console.log('✅ [CONVERSATION API] Successfully processed response', {\n              contentLength: response.content?.length,\n              questionNumber: response.questionNumber,\n              isComplete: response.isComplete\n            });\n\n            logger.api.response('POST /api/voice/conversation', 200, {\n              action: 'process',\n              questionNumber: response.questionNumber,\n              isComplete: response.isComplete,\n              transcriptLength: userTranscript.length\n            });\n\n            return NextResponse.json({\n              message: response.content,\n              questionNumber: response.questionNumber,\n              isComplete: response.isComplete,\n              hasAudio: false, // TTS will be handled separately\n              followUpSuggestions: response.followUpSuggestions\n            });\n          } catch (processError) {\n            console.error('❌ [CONVERSATION API] Process user response failed:', processError);\n            throw processError; // Re-throw to be caught by outer error handler\n          }\n        }\n\n        case 'summary': {\n          try {\n            // Generate interview summary\n            const summary = await azureOpenAIServiceServer.generateInterviewSummary();\n\n            logger.api.response('POST /api/voice/conversation', 200, {\n              action: 'summary',\n              hasSummary: !!summary\n            });\n\n            return NextResponse.json({\n              summary,\n              conversationHistory: azureOpenAIServiceServer.getConversationHistory()\n            });\n          } catch (error) {\n            logger.warn('Failed to generate summary, returning empty response', { error: error instanceof Error ? error.message : String(error) });\n            return NextResponse.json({\n              summary: null,\n              error: 'Summary generation failed'\n            });\n          }\n        }\n\n        default:\n          return NextResponse.json(\n            { error: `Invalid action: ${action}` },\n            { status: 400 }\n          );\n      }\n\n    } catch (error) {\n      logger.error('Conversation processing failed', error instanceof Error ? error : new Error(String(error)));\n\n      // Provide helpful error responses\n      if (error instanceof Error) {\n        if (error.message.includes('quota') || error.message.includes('rate limit')) {\n          return NextResponse.json(\n            { error: 'AI service quota exceeded. Please try again later.' },\n            { status: 429 }\n          );\n        }\n        if (error.message.includes('authentication') || error.message.includes('unauthorized')) {\n          return NextResponse.json(\n            { error: 'AI service authentication failed' },\n            { status: 401 }\n          );\n        }\n        if (error.message.includes('timeout')) {\n          return NextResponse.json(\n            { error: 'AI service timeout. Please try again.' },\n            { status: 408 }\n          );\n        }\n      }\n\n      return NextResponse.json(\n        { error: 'Internal AI processing error' },\n        { status: 500 }\n      );\n    }\n}\n\n/**\n * Health check endpoint for conversation service\n */\nexport async function GET() {\n  const isReady = azureOpenAIServiceServer.isReady();\n  \n  return NextResponse.json({\n    service: 'Azure OpenAI Conversation',\n    status: isReady ? 'ready' : 'not_initialized',\n    timestamp: new Date().toISOString()\n  }, { \n    status: isReady ? 200 : 503 \n  });\n}\n\n// Helper functions\nfunction mapInterviewType(type: string): 'technical' | 'behavioral' | 'general' {\n  const normalizedType = type.toLowerCase();\n  if (normalizedType.includes('technical')) return 'technical';\n  if (normalizedType.includes('behavioral')) return 'behavioral';\n  return 'general';\n}\n\nfunction extractJobRole(context: InterviewContext): string | undefined {\n  // Try to extract job role from various sources\n  if (context.resumeInfo?.candidateName) return context.resumeInfo.candidateName;\n  if (context.questions && context.questions.length > 0) {\n    // Look for role mentions in questions\n    const roleMatch = context.questions[0].match(/(\\w+\\s+\\w+)\\s+(developer|engineer|manager|analyst|designer)/i);\n    if (roleMatch) return roleMatch[0];\n  }\n  return undefined;\n}\n\nfunction extractCompanyName(context: InterviewContext): string | undefined {\n  // Extract company name from context if available\n  // This could be enhanced to parse from resume info or questions\n  return undefined;\n}\n"],"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","ignoreList":[]}