30023dcd96326a46bf3d912539c584df
"use strict";

/* istanbul ignore next */
function cov_1xgbq53d1t() {
  var path = "/Users/dikshantvashistha/PrepBettr/app/api/voice/conversation/route.ts";
  var hash = "2f4b6fbb1be4cbcd57e24b45a8d5c40e60c7c2a2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/app/api/voice/conversation/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 20
        }
      },
      "2": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 4,
          column: 18
        }
      },
      "3": {
        start: {
          line: 5,
          column: 17
        },
        end: {
          line: 5,
          column: 39
        }
      },
      "4": {
        start: {
          line: 6,
          column: 38
        },
        end: {
          line: 6,
          column: 97
        }
      },
      "5": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 46
        }
      },
      "6": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 138,
          column: 5
        }
      },
      "7": {
        start: {
          line: 15,
          column: 21
        },
        end: {
          line: 15,
          column: 41
        }
      },
      "8": {
        start: {
          line: 16,
          column: 27
        },
        end: {
          line: 16,
          column: 31
        }
      },
      "9": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 89
        }
      },
      "10": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 113
        }
      },
      "11": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 29,
          column: 9
        }
      },
      "12": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 21,
          column: 86
        }
      },
      "13": {
        start: {
          line: 22,
          column: 32
        },
        end: {
          line: 22,
          column: 105
        }
      },
      "14": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 27,
          column: 13
        }
      },
      "15": {
        start: {
          line: 24,
          column: 16
        },
        end: {
          line: 24,
          column: 96
        }
      },
      "16": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 83
        }
      },
      "17": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 26,
          column: 104
        }
      },
      "18": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 94
        }
      },
      "19": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 121,
          column: 9
        }
      },
      "20": {
        start: {
          line: 32,
          column: 45
        },
        end: {
          line: 32,
          column: 49
        }
      },
      "21": {
        start: {
          line: 33,
          column: 16
        },
        end: {
          line: 35,
          column: 17
        }
      },
      "22": {
        start: {
          line: 34,
          column: 20
        },
        end: {
          line: 34,
          column: 129
        }
      },
      "23": {
        start: {
          line: 37,
          column: 16
        },
        end: {
          line: 45,
          column: 19
        }
      },
      "24": {
        start: {
          line: 47,
          column: 33
        },
        end: {
          line: 47,
          column: 122
        }
      },
      "25": {
        start: {
          line: 48,
          column: 16
        },
        end: {
          line: 52,
          column: 19
        }
      },
      "26": {
        start: {
          line: 53,
          column: 16
        },
        end: {
          line: 59,
          column: 19
        }
      },
      "27": {
        start: {
          line: 62,
          column: 43
        },
        end: {
          line: 62,
          column: 47
        }
      },
      "28": {
        start: {
          line: 63,
          column: 16
        },
        end: {
          line: 66,
          column: 17
        }
      },
      "29": {
        start: {
          line: 64,
          column: 20
        },
        end: {
          line: 64,
          column: 84
        }
      },
      "30": {
        start: {
          line: 65,
          column: 20
        },
        end: {
          line: 65,
          column: 129
        }
      },
      "31": {
        start: {
          line: 67,
          column: 16
        },
        end: {
          line: 70,
          column: 19
        }
      },
      "32": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 96,
          column: 17
        }
      },
      "33": {
        start: {
          line: 73,
          column: 37
        },
        end: {
          line: 73,
          column: 140
        }
      },
      "34": {
        start: {
          line: 74,
          column: 20
        },
        end: {
          line: 78,
          column: 23
        }
      },
      "35": {
        start: {
          line: 79,
          column: 20
        },
        end: {
          line: 84,
          column: 23
        }
      },
      "36": {
        start: {
          line: 85,
          column: 20
        },
        end: {
          line: 91,
          column: 23
        }
      },
      "37": {
        start: {
          line: 94,
          column: 20
        },
        end: {
          line: 94,
          column: 102
        }
      },
      "38": {
        start: {
          line: 95,
          column: 20
        },
        end: {
          line: 95,
          column: 39
        }
      },
      "39": {
        start: {
          line: 99,
          column: 16
        },
        end: {
          line: 117,
          column: 17
        }
      },
      "40": {
        start: {
          line: 101,
          column: 36
        },
        end: {
          line: 101,
          column: 123
        }
      },
      "41": {
        start: {
          line: 102,
          column: 20
        },
        end: {
          line: 105,
          column: 23
        }
      },
      "42": {
        start: {
          line: 106,
          column: 20
        },
        end: {
          line: 109,
          column: 23
        }
      },
      "43": {
        start: {
          line: 112,
          column: 20
        },
        end: {
          line: 112,
          column: 164
        }
      },
      "44": {
        start: {
          line: 113,
          column: 20
        },
        end: {
          line: 116,
          column: 23
        }
      },
      "45": {
        start: {
          line: 120,
          column: 16
        },
        end: {
          line: 120,
          column: 107
        }
      },
      "46": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 124,
          column: 123
        }
      },
      "47": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 136,
          column: 9
        }
      },
      "48": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 129,
          column: 13
        }
      },
      "49": {
        start: {
          line: 128,
          column: 16
        },
        end: {
          line: 128,
          column: 132
        }
      },
      "50": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 132,
          column: 13
        }
      },
      "51": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 114
        }
      },
      "52": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 135,
          column: 13
        }
      },
      "53": {
        start: {
          line: 134,
          column: 16
        },
        end: {
          line: 134,
          column: 119
        }
      },
      "54": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 137,
          column: 102
        }
      },
      "55": {
        start: {
          line: 144,
          column: 20
        },
        end: {
          line: 144,
          column: 84
        }
      },
      "56": {
        start: {
          line: 145,
          column: 4
        },
        end: {
          line: 151,
          column: 7
        }
      },
      "57": {
        start: {
          line: 155,
          column: 27
        },
        end: {
          line: 155,
          column: 45
        }
      },
      "58": {
        start: {
          line: 156,
          column: 4
        },
        end: {
          line: 157,
          column: 27
        }
      },
      "59": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 157,
          column: 27
        }
      },
      "60": {
        start: {
          line: 158,
          column: 4
        },
        end: {
          line: 159,
          column: 28
        }
      },
      "61": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 159,
          column: 28
        }
      },
      "62": {
        start: {
          line: 160,
          column: 4
        },
        end: {
          line: 160,
          column: 21
        }
      },
      "63": {
        start: {
          line: 165,
          column: 4
        },
        end: {
          line: 166,
          column: 48
        }
      },
      "64": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 166,
          column: 48
        }
      },
      "65": {
        start: {
          line: 167,
          column: 4
        },
        end: {
          line: 172,
          column: 5
        }
      },
      "66": {
        start: {
          line: 169,
          column: 26
        },
        end: {
          line: 169,
          column: 116
        }
      },
      "67": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 171,
          column: 32
        }
      },
      "68": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 171,
          column: 32
        }
      },
      "69": {
        start: {
          line: 173,
          column: 4
        },
        end: {
          line: 173,
          column: 21
        }
      },
      "70": {
        start: {
          line: 178,
          column: 4
        },
        end: {
          line: 178,
          column: 21
        }
      }
    },
    fnMap: {
      "0": {
        name: "POST",
        decl: {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 12,
            column: 19
          }
        },
        loc: {
          start: {
            line: 12,
            column: 29
          },
          end: {
            line: 139,
            column: 1
          }
        },
        line: 12
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 143,
            column: 15
          },
          end: {
            line: 143,
            column: 18
          }
        },
        loc: {
          start: {
            line: 143,
            column: 21
          },
          end: {
            line: 152,
            column: 1
          }
        },
        line: 143
      },
      "2": {
        name: "mapInterviewType",
        decl: {
          start: {
            line: 154,
            column: 9
          },
          end: {
            line: 154,
            column: 25
          }
        },
        loc: {
          start: {
            line: 154,
            column: 32
          },
          end: {
            line: 161,
            column: 1
          }
        },
        line: 154
      },
      "3": {
        name: "extractJobRole",
        decl: {
          start: {
            line: 162,
            column: 9
          },
          end: {
            line: 162,
            column: 23
          }
        },
        loc: {
          start: {
            line: 162,
            column: 33
          },
          end: {
            line: 174,
            column: 1
          }
        },
        line: 162
      },
      "4": {
        name: "extractCompanyName",
        decl: {
          start: {
            line: 175,
            column: 9
          },
          end: {
            line: 175,
            column: 27
          }
        },
        loc: {
          start: {
            line: 175,
            column: 37
          },
          end: {
            line: 179,
            column: 1
          }
        },
        line: 175
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 29,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 29,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      },
      "1": {
        loc: {
          start: {
            line: 23,
            column: 12
          },
          end: {
            line: 27,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 12
          },
          end: {
            line: 27,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 23
      },
      "2": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 121,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 60,
            column: 13
          }
        }, {
          start: {
            line: 61,
            column: 12
          },
          end: {
            line: 97,
            column: 13
          }
        }, {
          start: {
            line: 98,
            column: 12
          },
          end: {
            line: 118,
            column: 13
          }
        }, {
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 120,
            column: 107
          }
        }],
        line: 30
      },
      "3": {
        loc: {
          start: {
            line: 33,
            column: 16
          },
          end: {
            line: 35,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 16
          },
          end: {
            line: 35,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "4": {
        loc: {
          start: {
            line: 63,
            column: 16
          },
          end: {
            line: 66,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 16
          },
          end: {
            line: 66,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "5": {
        loc: {
          start: {
            line: 63,
            column: 20
          },
          end: {
            line: 63,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 63,
            column: 20
          },
          end: {
            line: 63,
            column: 35
          }
        }, {
          start: {
            line: 63,
            column: 39
          },
          end: {
            line: 63,
            column: 61
          }
        }],
        line: 63
      },
      "6": {
        loc: {
          start: {
            line: 75,
            column: 39
          },
          end: {
            line: 75,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 75,
            column: 91
          },
          end: {
            line: 75,
            column: 97
          }
        }, {
          start: {
            line: 75,
            column: 100
          },
          end: {
            line: 75,
            column: 109
          }
        }],
        line: 75
      },
      "7": {
        loc: {
          start: {
            line: 75,
            column: 39
          },
          end: {
            line: 75,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 75,
            column: 39
          },
          end: {
            line: 75,
            column: 71
          }
        }, {
          start: {
            line: 75,
            column: 75
          },
          end: {
            line: 75,
            column: 88
          }
        }],
        line: 75
      },
      "8": {
        loc: {
          start: {
            line: 112,
            column: 106
          },
          end: {
            line: 112,
            column: 160
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 112,
            column: 131
          },
          end: {
            line: 112,
            column: 144
          }
        }, {
          start: {
            line: 112,
            column: 147
          },
          end: {
            line: 112,
            column: 160
          }
        }],
        line: 112
      },
      "9": {
        loc: {
          start: {
            line: 124,
            column: 64
          },
          end: {
            line: 124,
            column: 121
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 124,
            column: 89
          },
          end: {
            line: 124,
            column: 94
          }
        }, {
          start: {
            line: 124,
            column: 97
          },
          end: {
            line: 124,
            column: 121
          }
        }],
        line: 124
      },
      "10": {
        loc: {
          start: {
            line: 126,
            column: 8
          },
          end: {
            line: 136,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 8
          },
          end: {
            line: 136,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 126
      },
      "11": {
        loc: {
          start: {
            line: 127,
            column: 12
          },
          end: {
            line: 129,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 127,
            column: 12
          },
          end: {
            line: 129,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 127
      },
      "12": {
        loc: {
          start: {
            line: 127,
            column: 16
          },
          end: {
            line: 127,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 127,
            column: 16
          },
          end: {
            line: 127,
            column: 47
          }
        }, {
          start: {
            line: 127,
            column: 51
          },
          end: {
            line: 127,
            column: 87
          }
        }],
        line: 127
      },
      "13": {
        loc: {
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 132,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 132,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "14": {
        loc: {
          start: {
            line: 130,
            column: 16
          },
          end: {
            line: 130,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 130,
            column: 16
          },
          end: {
            line: 130,
            column: 56
          }
        }, {
          start: {
            line: 130,
            column: 60
          },
          end: {
            line: 130,
            column: 98
          }
        }],
        line: 130
      },
      "15": {
        loc: {
          start: {
            line: 133,
            column: 12
          },
          end: {
            line: 135,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 12
          },
          end: {
            line: 135,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "16": {
        loc: {
          start: {
            line: 147,
            column: 16
          },
          end: {
            line: 147,
            column: 53
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 147,
            column: 26
          },
          end: {
            line: 147,
            column: 33
          }
        }, {
          start: {
            line: 147,
            column: 36
          },
          end: {
            line: 147,
            column: 53
          }
        }],
        line: 147
      },
      "17": {
        loc: {
          start: {
            line: 150,
            column: 16
          },
          end: {
            line: 150,
            column: 35
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 150,
            column: 26
          },
          end: {
            line: 150,
            column: 29
          }
        }, {
          start: {
            line: 150,
            column: 32
          },
          end: {
            line: 150,
            column: 35
          }
        }],
        line: 150
      },
      "18": {
        loc: {
          start: {
            line: 156,
            column: 4
          },
          end: {
            line: 157,
            column: 27
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 4
          },
          end: {
            line: 157,
            column: 27
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 156
      },
      "19": {
        loc: {
          start: {
            line: 158,
            column: 4
          },
          end: {
            line: 159,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 158,
            column: 4
          },
          end: {
            line: 159,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 158
      },
      "20": {
        loc: {
          start: {
            line: 165,
            column: 4
          },
          end: {
            line: 166,
            column: 48
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 165,
            column: 4
          },
          end: {
            line: 166,
            column: 48
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 165
      },
      "21": {
        loc: {
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 165,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 165,
            column: 62
          },
          end: {
            line: 165,
            column: 68
          }
        }, {
          start: {
            line: 165,
            column: 71
          },
          end: {
            line: 165,
            column: 87
          }
        }],
        line: 165
      },
      "22": {
        loc: {
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 165,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 165,
            column: 42
          }
        }, {
          start: {
            line: 165,
            column: 46
          },
          end: {
            line: 165,
            column: 59
          }
        }],
        line: 165
      },
      "23": {
        loc: {
          start: {
            line: 167,
            column: 4
          },
          end: {
            line: 172,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 167,
            column: 4
          },
          end: {
            line: 172,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 167
      },
      "24": {
        loc: {
          start: {
            line: 167,
            column: 8
          },
          end: {
            line: 167,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 167,
            column: 8
          },
          end: {
            line: 167,
            column: 25
          }
        }, {
          start: {
            line: 167,
            column: 29
          },
          end: {
            line: 167,
            column: 57
          }
        }],
        line: 167
      },
      "25": {
        loc: {
          start: {
            line: 170,
            column: 8
          },
          end: {
            line: 171,
            column: 32
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 170,
            column: 8
          },
          end: {
            line: 171,
            column: 32
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 170
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0, 0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/app/api/voice/conversation/route.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/app/api/voice/conversation/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { azureOpenAIServiceServer } from '@/azure/lib/services/azure-openai-service-server';\nimport { logger } from '@/lib/utils/logger';\nimport { InterviewContext } from '@/lib/voice/azure-adapters';\n\ninterface ConversationRequest {\n  action: 'start' | 'process' | 'summary';\n  interviewContext?: InterviewContext;\n  userTranscript?: string;\n}\n\n/**\n * Azure OpenAI Conversation API Endpoint\n * Handles interview conversation flow using Azure OpenAI\n */\nexport async function POST(request: NextRequest) {\n    try {\n      const body: ConversationRequest = await request.json();\n      const { action } = body;\n\n      logger.api.request('POST /api/voice/conversation', `Action: ${action}`);\n      console.log('\uD83C\uDFAF [CONVERSATION API] Processing request', { action, timestamp: new Date().toISOString() });\n\n      // Initialize Azure OpenAI service if needed\n      if (!azureOpenAIServiceServer.isReady()) {\n        console.log('\uD83D\uDD27 [CONVERSATION API] Initializing Azure OpenAI service...');\n        const initialized = await azureOpenAIServiceServer.initialize();\n        if (!initialized) {\n          console.error('\u274C [CONVERSATION API] Failed to initialize Azure OpenAI service');\n          logger.error('Failed to initialize Azure OpenAI service');\n          return NextResponse.json(\n            { error: 'AI service unavailable' },\n            { status: 503 }\n          );\n        }\n        console.log('\u2705 [CONVERSATION API] Azure OpenAI service initialized successfully');\n      }\n\n      switch (action) {\n        case 'start': {\n          const { interviewContext } = body;\n          if (!interviewContext) {\n            return NextResponse.json(\n              { error: 'Interview context required for start action' },\n              { status: 400 }\n            );\n          }\n\n          // Set interview context in the service\n          azureOpenAIServiceServer.setInterviewContext({\n            type: mapInterviewType(interviewContext.type),\n            position: extractJobRole(interviewContext),\n            company: extractCompanyName(interviewContext),\n            difficulty: 'medium', // Default difficulty\n            preliminaryCollected: false,\n            currentQuestionCount: 0,\n            maxQuestions: 10\n          });\n\n          // Start the interview conversation\n          const response = await azureOpenAIServiceServer.startInterviewConversation();\n          \n          logger.api.response('POST /api/voice/conversation', 200, {\n            action: 'start',\n            questionNumber: response.questionNumber,\n            isComplete: response.isComplete\n          });\n\n          return NextResponse.json({\n            message: response.content,\n            questionNumber: response.questionNumber,\n            isComplete: response.isComplete,\n            hasAudio: false, // TTS will be handled separately\n            followUpSuggestions: response.followUpSuggestions\n          });\n        }\n\n        case 'process': {\n          const { userTranscript } = body;\n          if (!userTranscript || !userTranscript.trim()) {\n            console.warn('\uD83D\uDCDD [CONVERSATION API] Empty transcript received');\n            return NextResponse.json(\n              { error: 'User transcript required for process action' },\n              { status: 400 }\n            );\n          }\n\n          console.log('\uD83E\uDDEA [CONVERSATION API] Processing user transcript', {\n            length: userTranscript.trim().length,\n            preview: userTranscript.trim().substring(0, 50) + '...'\n          });\n\n          try {\n            // Process user response and get AI reply\n            const response = await azureOpenAIServiceServer.processUserResponse(userTranscript.trim());\n\n            console.log('\u2705 [CONVERSATION API] Successfully processed response', {\n              contentLength: response.content?.length,\n              questionNumber: response.questionNumber,\n              isComplete: response.isComplete\n            });\n\n            logger.api.response('POST /api/voice/conversation', 200, {\n              action: 'process',\n              questionNumber: response.questionNumber,\n              isComplete: response.isComplete,\n              transcriptLength: userTranscript.length\n            });\n\n            return NextResponse.json({\n              message: response.content,\n              questionNumber: response.questionNumber,\n              isComplete: response.isComplete,\n              hasAudio: false, // TTS will be handled separately\n              followUpSuggestions: response.followUpSuggestions\n            });\n          } catch (processError) {\n            console.error('\u274C [CONVERSATION API] Process user response failed:', processError);\n            throw processError; // Re-throw to be caught by outer error handler\n          }\n        }\n\n        case 'summary': {\n          try {\n            // Generate interview summary\n            const summary = await azureOpenAIServiceServer.generateInterviewSummary();\n\n            logger.api.response('POST /api/voice/conversation', 200, {\n              action: 'summary',\n              hasSummary: !!summary\n            });\n\n            return NextResponse.json({\n              summary,\n              conversationHistory: azureOpenAIServiceServer.getConversationHistory()\n            });\n          } catch (error) {\n            logger.warn('Failed to generate summary, returning empty response', { error: error instanceof Error ? error.message : String(error) });\n            return NextResponse.json({\n              summary: null,\n              error: 'Summary generation failed'\n            });\n          }\n        }\n\n        default:\n          return NextResponse.json(\n            { error: `Invalid action: ${action}` },\n            { status: 400 }\n          );\n      }\n\n    } catch (error) {\n      logger.error('Conversation processing failed', error instanceof Error ? error : new Error(String(error)));\n\n      // Provide helpful error responses\n      if (error instanceof Error) {\n        if (error.message.includes('quota') || error.message.includes('rate limit')) {\n          return NextResponse.json(\n            { error: 'AI service quota exceeded. Please try again later.' },\n            { status: 429 }\n          );\n        }\n        if (error.message.includes('authentication') || error.message.includes('unauthorized')) {\n          return NextResponse.json(\n            { error: 'AI service authentication failed' },\n            { status: 401 }\n          );\n        }\n        if (error.message.includes('timeout')) {\n          return NextResponse.json(\n            { error: 'AI service timeout. Please try again.' },\n            { status: 408 }\n          );\n        }\n      }\n\n      return NextResponse.json(\n        { error: 'Internal AI processing error' },\n        { status: 500 }\n      );\n    }\n}\n\n/**\n * Health check endpoint for conversation service\n */\nexport async function GET() {\n  const isReady = azureOpenAIServiceServer.isReady();\n  \n  return NextResponse.json({\n    service: 'Azure OpenAI Conversation',\n    status: isReady ? 'ready' : 'not_initialized',\n    timestamp: new Date().toISOString()\n  }, { \n    status: isReady ? 200 : 503 \n  });\n}\n\n// Helper functions\nfunction mapInterviewType(type: string): 'technical' | 'behavioral' | 'general' {\n  const normalizedType = type.toLowerCase();\n  if (normalizedType.includes('technical')) return 'technical';\n  if (normalizedType.includes('behavioral')) return 'behavioral';\n  return 'general';\n}\n\nfunction extractJobRole(context: InterviewContext): string | undefined {\n  // Try to extract job role from various sources\n  if (context.resumeInfo?.candidateName) return context.resumeInfo.candidateName;\n  if (context.questions && context.questions.length > 0) {\n    // Look for role mentions in questions\n    const roleMatch = context.questions[0].match(/(\\w+\\s+\\w+)\\s+(developer|engineer|manager|analyst|designer)/i);\n    if (roleMatch) return roleMatch[0];\n  }\n  return undefined;\n}\n\nfunction extractCompanyName(context: InterviewContext): string | undefined {\n  // Extract company name from context if available\n  // This could be enhanced to parse from resume info or questions\n  return undefined;\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2f4b6fbb1be4cbcd57e24b45a8d5c40e60c7c2a2"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1xgbq53d1t = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1xgbq53d1t();
cov_1xgbq53d1t().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1xgbq53d1t().s[1]++;
exports.POST = POST;
/* istanbul ignore next */
cov_1xgbq53d1t().s[2]++;
exports.GET = GET;
const server_1 =
/* istanbul ignore next */
(cov_1xgbq53d1t().s[3]++, require("next/server"));
const azure_openai_service_server_1 =
/* istanbul ignore next */
(cov_1xgbq53d1t().s[4]++, require("@/azure/lib/services/azure-openai-service-server"));
const logger_1 =
/* istanbul ignore next */
(cov_1xgbq53d1t().s[5]++, require("@/lib/utils/logger"));
/**
 * Azure OpenAI Conversation API Endpoint
 * Handles interview conversation flow using Azure OpenAI
 */
async function POST(request) {
  /* istanbul ignore next */
  cov_1xgbq53d1t().f[0]++;
  var _a;
  /* istanbul ignore next */
  cov_1xgbq53d1t().s[6]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_1xgbq53d1t().s[7]++, await request.json());
    const {
      action
    } =
    /* istanbul ignore next */
    (cov_1xgbq53d1t().s[8]++, body);
    /* istanbul ignore next */
    cov_1xgbq53d1t().s[9]++;
    logger_1.logger.api.request('POST /api/voice/conversation', `Action: ${action}`);
    /* istanbul ignore next */
    cov_1xgbq53d1t().s[10]++;
    console.log('🎯 [CONVERSATION API] Processing request', {
      action,
      timestamp: new Date().toISOString()
    });
    // Initialize Azure OpenAI service if needed
    /* istanbul ignore next */
    cov_1xgbq53d1t().s[11]++;
    if (!azure_openai_service_server_1.azureOpenAIServiceServer.isReady()) {
      /* istanbul ignore next */
      cov_1xgbq53d1t().b[0][0]++;
      cov_1xgbq53d1t().s[12]++;
      console.log('🔧 [CONVERSATION API] Initializing Azure OpenAI service...');
      const initialized =
      /* istanbul ignore next */
      (cov_1xgbq53d1t().s[13]++, await azure_openai_service_server_1.azureOpenAIServiceServer.initialize());
      /* istanbul ignore next */
      cov_1xgbq53d1t().s[14]++;
      if (!initialized) {
        /* istanbul ignore next */
        cov_1xgbq53d1t().b[1][0]++;
        cov_1xgbq53d1t().s[15]++;
        console.error('❌ [CONVERSATION API] Failed to initialize Azure OpenAI service');
        /* istanbul ignore next */
        cov_1xgbq53d1t().s[16]++;
        logger_1.logger.error('Failed to initialize Azure OpenAI service');
        /* istanbul ignore next */
        cov_1xgbq53d1t().s[17]++;
        return server_1.NextResponse.json({
          error: 'AI service unavailable'
        }, {
          status: 503
        });
      } else
      /* istanbul ignore next */
      {
        cov_1xgbq53d1t().b[1][1]++;
      }
      cov_1xgbq53d1t().s[18]++;
      console.log('✅ [CONVERSATION API] Azure OpenAI service initialized successfully');
    } else
    /* istanbul ignore next */
    {
      cov_1xgbq53d1t().b[0][1]++;
    }
    cov_1xgbq53d1t().s[19]++;
    switch (action) {
      case 'start':
        /* istanbul ignore next */
        cov_1xgbq53d1t().b[2][0]++;
        {
          const {
            interviewContext
          } =
          /* istanbul ignore next */
          (cov_1xgbq53d1t().s[20]++, body);
          /* istanbul ignore next */
          cov_1xgbq53d1t().s[21]++;
          if (!interviewContext) {
            /* istanbul ignore next */
            cov_1xgbq53d1t().b[3][0]++;
            cov_1xgbq53d1t().s[22]++;
            return server_1.NextResponse.json({
              error: 'Interview context required for start action'
            }, {
              status: 400
            });
          } else
          /* istanbul ignore next */
          {
            cov_1xgbq53d1t().b[3][1]++;
          }
          // Set interview context in the service
          cov_1xgbq53d1t().s[23]++;
          azure_openai_service_server_1.azureOpenAIServiceServer.setInterviewContext({
            type: mapInterviewType(interviewContext.type),
            position: extractJobRole(interviewContext),
            company: extractCompanyName(interviewContext),
            difficulty: 'medium',
            // Default difficulty
            preliminaryCollected: false,
            currentQuestionCount: 0,
            maxQuestions: 10
          });
          // Start the interview conversation
          const response =
          /* istanbul ignore next */
          (cov_1xgbq53d1t().s[24]++, await azure_openai_service_server_1.azureOpenAIServiceServer.startInterviewConversation());
          /* istanbul ignore next */
          cov_1xgbq53d1t().s[25]++;
          logger_1.logger.api.response('POST /api/voice/conversation', 200, {
            action: 'start',
            questionNumber: response.questionNumber,
            isComplete: response.isComplete
          });
          /* istanbul ignore next */
          cov_1xgbq53d1t().s[26]++;
          return server_1.NextResponse.json({
            message: response.content,
            questionNumber: response.questionNumber,
            isComplete: response.isComplete,
            hasAudio: false,
            // TTS will be handled separately
            followUpSuggestions: response.followUpSuggestions
          });
        }
      case 'process':
        /* istanbul ignore next */
        cov_1xgbq53d1t().b[2][1]++;
        {
          const {
            userTranscript
          } =
          /* istanbul ignore next */
          (cov_1xgbq53d1t().s[27]++, body);
          /* istanbul ignore next */
          cov_1xgbq53d1t().s[28]++;
          if (
          /* istanbul ignore next */
          (cov_1xgbq53d1t().b[5][0]++, !userTranscript) ||
          /* istanbul ignore next */
          (cov_1xgbq53d1t().b[5][1]++, !userTranscript.trim())) {
            /* istanbul ignore next */
            cov_1xgbq53d1t().b[4][0]++;
            cov_1xgbq53d1t().s[29]++;
            console.warn('📝 [CONVERSATION API] Empty transcript received');
            /* istanbul ignore next */
            cov_1xgbq53d1t().s[30]++;
            return server_1.NextResponse.json({
              error: 'User transcript required for process action'
            }, {
              status: 400
            });
          } else
          /* istanbul ignore next */
          {
            cov_1xgbq53d1t().b[4][1]++;
          }
          cov_1xgbq53d1t().s[31]++;
          console.log('🧪 [CONVERSATION API] Processing user transcript', {
            length: userTranscript.trim().length,
            preview: userTranscript.trim().substring(0, 50) + '...'
          });
          /* istanbul ignore next */
          cov_1xgbq53d1t().s[32]++;
          try {
            // Process user response and get AI reply
            const response =
            /* istanbul ignore next */
            (cov_1xgbq53d1t().s[33]++, await azure_openai_service_server_1.azureOpenAIServiceServer.processUserResponse(userTranscript.trim()));
            /* istanbul ignore next */
            cov_1xgbq53d1t().s[34]++;
            console.log('✅ [CONVERSATION API] Successfully processed response', {
              contentLength:
              /* istanbul ignore next */
              (cov_1xgbq53d1t().b[7][0]++, (_a = response.content) === null) ||
              /* istanbul ignore next */
              (cov_1xgbq53d1t().b[7][1]++, _a === void 0) ?
              /* istanbul ignore next */
              (cov_1xgbq53d1t().b[6][0]++, void 0) :
              /* istanbul ignore next */
              (cov_1xgbq53d1t().b[6][1]++, _a.length),
              questionNumber: response.questionNumber,
              isComplete: response.isComplete
            });
            /* istanbul ignore next */
            cov_1xgbq53d1t().s[35]++;
            logger_1.logger.api.response('POST /api/voice/conversation', 200, {
              action: 'process',
              questionNumber: response.questionNumber,
              isComplete: response.isComplete,
              transcriptLength: userTranscript.length
            });
            /* istanbul ignore next */
            cov_1xgbq53d1t().s[36]++;
            return server_1.NextResponse.json({
              message: response.content,
              questionNumber: response.questionNumber,
              isComplete: response.isComplete,
              hasAudio: false,
              // TTS will be handled separately
              followUpSuggestions: response.followUpSuggestions
            });
          } catch (processError) {
            /* istanbul ignore next */
            cov_1xgbq53d1t().s[37]++;
            console.error('❌ [CONVERSATION API] Process user response failed:', processError);
            /* istanbul ignore next */
            cov_1xgbq53d1t().s[38]++;
            throw processError; // Re-throw to be caught by outer error handler
          }
        }
      case 'summary':
        /* istanbul ignore next */
        cov_1xgbq53d1t().b[2][2]++;
        {
          /* istanbul ignore next */
          cov_1xgbq53d1t().s[39]++;
          try {
            // Generate interview summary
            const summary =
            /* istanbul ignore next */
            (cov_1xgbq53d1t().s[40]++, await azure_openai_service_server_1.azureOpenAIServiceServer.generateInterviewSummary());
            /* istanbul ignore next */
            cov_1xgbq53d1t().s[41]++;
            logger_1.logger.api.response('POST /api/voice/conversation', 200, {
              action: 'summary',
              hasSummary: !!summary
            });
            /* istanbul ignore next */
            cov_1xgbq53d1t().s[42]++;
            return server_1.NextResponse.json({
              summary,
              conversationHistory: azure_openai_service_server_1.azureOpenAIServiceServer.getConversationHistory()
            });
          } catch (error) {
            /* istanbul ignore next */
            cov_1xgbq53d1t().s[43]++;
            logger_1.logger.warn('Failed to generate summary, returning empty response', {
              error: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1xgbq53d1t().b[8][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1xgbq53d1t().b[8][1]++, String(error))
            });
            /* istanbul ignore next */
            cov_1xgbq53d1t().s[44]++;
            return server_1.NextResponse.json({
              summary: null,
              error: 'Summary generation failed'
            });
          }
        }
      default:
        /* istanbul ignore next */
        cov_1xgbq53d1t().b[2][3]++;
        cov_1xgbq53d1t().s[45]++;
        return server_1.NextResponse.json({
          error: `Invalid action: ${action}`
        }, {
          status: 400
        });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1xgbq53d1t().s[46]++;
    logger_1.logger.error('Conversation processing failed', error instanceof Error ?
    /* istanbul ignore next */
    (cov_1xgbq53d1t().b[9][0]++, error) :
    /* istanbul ignore next */
    (cov_1xgbq53d1t().b[9][1]++, new Error(String(error))));
    // Provide helpful error responses
    /* istanbul ignore next */
    cov_1xgbq53d1t().s[47]++;
    if (error instanceof Error) {
      /* istanbul ignore next */
      cov_1xgbq53d1t().b[10][0]++;
      cov_1xgbq53d1t().s[48]++;
      if (
      /* istanbul ignore next */
      (cov_1xgbq53d1t().b[12][0]++, error.message.includes('quota')) ||
      /* istanbul ignore next */
      (cov_1xgbq53d1t().b[12][1]++, error.message.includes('rate limit'))) {
        /* istanbul ignore next */
        cov_1xgbq53d1t().b[11][0]++;
        cov_1xgbq53d1t().s[49]++;
        return server_1.NextResponse.json({
          error: 'AI service quota exceeded. Please try again later.'
        }, {
          status: 429
        });
      } else
      /* istanbul ignore next */
      {
        cov_1xgbq53d1t().b[11][1]++;
      }
      cov_1xgbq53d1t().s[50]++;
      if (
      /* istanbul ignore next */
      (cov_1xgbq53d1t().b[14][0]++, error.message.includes('authentication')) ||
      /* istanbul ignore next */
      (cov_1xgbq53d1t().b[14][1]++, error.message.includes('unauthorized'))) {
        /* istanbul ignore next */
        cov_1xgbq53d1t().b[13][0]++;
        cov_1xgbq53d1t().s[51]++;
        return server_1.NextResponse.json({
          error: 'AI service authentication failed'
        }, {
          status: 401
        });
      } else
      /* istanbul ignore next */
      {
        cov_1xgbq53d1t().b[13][1]++;
      }
      cov_1xgbq53d1t().s[52]++;
      if (error.message.includes('timeout')) {
        /* istanbul ignore next */
        cov_1xgbq53d1t().b[15][0]++;
        cov_1xgbq53d1t().s[53]++;
        return server_1.NextResponse.json({
          error: 'AI service timeout. Please try again.'
        }, {
          status: 408
        });
      } else
      /* istanbul ignore next */
      {
        cov_1xgbq53d1t().b[15][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1xgbq53d1t().b[10][1]++;
    }
    cov_1xgbq53d1t().s[54]++;
    return server_1.NextResponse.json({
      error: 'Internal AI processing error'
    }, {
      status: 500
    });
  }
}
/**
 * Health check endpoint for conversation service
 */
async function GET() {
  /* istanbul ignore next */
  cov_1xgbq53d1t().f[1]++;
  const isReady =
  /* istanbul ignore next */
  (cov_1xgbq53d1t().s[55]++, azure_openai_service_server_1.azureOpenAIServiceServer.isReady());
  /* istanbul ignore next */
  cov_1xgbq53d1t().s[56]++;
  return server_1.NextResponse.json({
    service: 'Azure OpenAI Conversation',
    status: isReady ?
    /* istanbul ignore next */
    (cov_1xgbq53d1t().b[16][0]++, 'ready') :
    /* istanbul ignore next */
    (cov_1xgbq53d1t().b[16][1]++, 'not_initialized'),
    timestamp: new Date().toISOString()
  }, {
    status: isReady ?
    /* istanbul ignore next */
    (cov_1xgbq53d1t().b[17][0]++, 200) :
    /* istanbul ignore next */
    (cov_1xgbq53d1t().b[17][1]++, 503)
  });
}
// Helper functions
function mapInterviewType(type) {
  /* istanbul ignore next */
  cov_1xgbq53d1t().f[2]++;
  const normalizedType =
  /* istanbul ignore next */
  (cov_1xgbq53d1t().s[57]++, type.toLowerCase());
  /* istanbul ignore next */
  cov_1xgbq53d1t().s[58]++;
  if (normalizedType.includes('technical')) {
    /* istanbul ignore next */
    cov_1xgbq53d1t().b[18][0]++;
    cov_1xgbq53d1t().s[59]++;
    return 'technical';
  } else
  /* istanbul ignore next */
  {
    cov_1xgbq53d1t().b[18][1]++;
  }
  cov_1xgbq53d1t().s[60]++;
  if (normalizedType.includes('behavioral')) {
    /* istanbul ignore next */
    cov_1xgbq53d1t().b[19][0]++;
    cov_1xgbq53d1t().s[61]++;
    return 'behavioral';
  } else
  /* istanbul ignore next */
  {
    cov_1xgbq53d1t().b[19][1]++;
  }
  cov_1xgbq53d1t().s[62]++;
  return 'general';
}
function extractJobRole(context) {
  /* istanbul ignore next */
  cov_1xgbq53d1t().f[3]++;
  var _a;
  // Try to extract job role from various sources
  /* istanbul ignore next */
  cov_1xgbq53d1t().s[63]++;
  if (
  /* istanbul ignore next */
  (cov_1xgbq53d1t().b[22][0]++, (_a = context.resumeInfo) === null) ||
  /* istanbul ignore next */
  (cov_1xgbq53d1t().b[22][1]++, _a === void 0) ?
  /* istanbul ignore next */
  (cov_1xgbq53d1t().b[21][0]++, void 0) :
  /* istanbul ignore next */
  (cov_1xgbq53d1t().b[21][1]++, _a.candidateName)) {
    /* istanbul ignore next */
    cov_1xgbq53d1t().b[20][0]++;
    cov_1xgbq53d1t().s[64]++;
    return context.resumeInfo.candidateName;
  } else
  /* istanbul ignore next */
  {
    cov_1xgbq53d1t().b[20][1]++;
  }
  cov_1xgbq53d1t().s[65]++;
  if (
  /* istanbul ignore next */
  (cov_1xgbq53d1t().b[24][0]++, context.questions) &&
  /* istanbul ignore next */
  (cov_1xgbq53d1t().b[24][1]++, context.questions.length > 0)) {
    /* istanbul ignore next */
    cov_1xgbq53d1t().b[23][0]++;
    // Look for role mentions in questions
    const roleMatch =
    /* istanbul ignore next */
    (cov_1xgbq53d1t().s[66]++, context.questions[0].match(/(\w+\s+\w+)\s+(developer|engineer|manager|analyst|designer)/i));
    /* istanbul ignore next */
    cov_1xgbq53d1t().s[67]++;
    if (roleMatch) {
      /* istanbul ignore next */
      cov_1xgbq53d1t().b[25][0]++;
      cov_1xgbq53d1t().s[68]++;
      return roleMatch[0];
    } else
    /* istanbul ignore next */
    {
      cov_1xgbq53d1t().b[25][1]++;
    }
  } else
  /* istanbul ignore next */
  {
    cov_1xgbq53d1t().b[23][1]++;
  }
  cov_1xgbq53d1t().s[69]++;
  return undefined;
}
function extractCompanyName(context) {
  /* istanbul ignore next */
  cov_1xgbq53d1t().f[4]++;
  cov_1xgbq53d1t().s[70]++;
  // Extract company name from context if available
  // This could be enhanced to parse from resume info or questions
  return undefined;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,