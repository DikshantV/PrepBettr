{"version":3,"names":["cov_fy88dger1","actualCoverage","s","module","exports","context","req","f","log","startTime","Date","timestamp","toISOString","healthStatus","status","service","version","uptime","process","environment","b","env","NODE_ENV","checks","memory","used","Math","round","memoryUsage","heapUsed","total","heapTotal","unit","services","azure_openai","AZURE_OPENAI_KEY","azure_speech","SPEECH_KEY","firebase_configured","FIREBASE_PROJECT_ID","FIREBASE_CLIENT_EMAIL","endTime","responseTime","responseTimeUnit","res","headers","body","error","message","basic_functionality"],"sources":["index.js"],"sourcesContent":["/**\n * Azure Function: Health Check Endpoint\n * Provides a simple health status for the Function App\n */\n\nmodule.exports = async function (context, req) {\n    context.log('Health check endpoint called');\n    \n    const startTime = new Date();\n    const timestamp = startTime.toISOString();\n    \n    try {\n        // Basic health checks\n        const healthStatus = {\n            status: 'healthy',\n            timestamp,\n            service: 'PrepBettr Azure Functions',\n            version: '1.0.0',\n            uptime: process.uptime(),\n            environment: process.env.NODE_ENV || 'development',\n            checks: {\n                memory: {\n                    used: Math.round(process.memoryUsage().heapUsed / 1024 / 1024),\n                    total: Math.round(process.memoryUsage().heapTotal / 1024 / 1024),\n                    unit: 'MB'\n                },\n                services: {\n                    azure_openai: !!process.env.AZURE_OPENAI_KEY,\n                    azure_speech: !!process.env.SPEECH_KEY,\n                    firebase_configured: !!(\n                        process.env.FIREBASE_PROJECT_ID && \n                        process.env.FIREBASE_CLIENT_EMAIL\n                    )\n                }\n            }\n        };\n        \n        // Calculate response time\n        const endTime = new Date();\n        healthStatus.responseTime = endTime - startTime;\n        healthStatus.responseTimeUnit = 'ms';\n        \n        context.log('Health check completed successfully');\n        \n        context.res = {\n            status: 200,\n            headers: {\n                'Content-Type': 'application/json',\n                'Cache-Control': 'no-cache'\n            },\n            body: healthStatus\n        };\n        \n    } catch (error) {\n        context.log.error('Health check failed:', error);\n        \n        context.res = {\n            status: 503,\n            headers: {\n                'Content-Type': 'application/json',\n                'Cache-Control': 'no-cache'\n            },\n            body: {\n                status: 'unhealthy',\n                timestamp,\n                service: 'PrepBettr Azure Functions',\n                error: error.message,\n                checks: {\n                    basic_functionality: false\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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","ignoreList":[]}