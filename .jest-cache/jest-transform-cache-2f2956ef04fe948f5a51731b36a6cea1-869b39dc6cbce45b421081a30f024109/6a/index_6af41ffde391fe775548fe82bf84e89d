28c07fcfbaa8515317acf1f4f53b439b
/* istanbul ignore next */
function cov_7v84alcm7() {
  var path = "/Users/dikshantvashistha/PrepBettr/azure/onUserPlanChange/index.js";
  var hash = "27663e2d4c2dd27eedb3c65e4c3533b83346e5fc";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/azure/onUserPlanChange/index.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 25
        },
        end: {
          line: 1,
          column: 49
        }
      },
      "1": {
        start: {
          line: 7,
          column: 2
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 29
        },
        end: {
          line: 8,
          column: 74
        }
      },
      "3": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 9,
          column: 54
        }
      },
      "4": {
        start: {
          line: 11,
          column: 2
        },
        end: {
          line: 11,
          column: 22
        }
      },
      "5": {
        start: {
          line: 15,
          column: 20
        },
        end: {
          line: 31,
          column: 1
        }
      },
      "6": {
        start: {
          line: 33,
          column: 0
        },
        end: {
          line: 140,
          column: 2
        }
      },
      "7": {
        start: {
          line: 34,
          column: 20
        },
        end: {
          line: 34,
          column: 30
        }
      },
      "8": {
        start: {
          line: 36,
          column: 2
        },
        end: {
          line: 39,
          column: 3
        }
      },
      "9": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 37,
          column: 43
        }
      },
      "10": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 38,
          column: 11
        }
      },
      "11": {
        start: {
          line: 41,
          column: 17
        },
        end: {
          line: 41,
          column: 34
        }
      },
      "12": {
        start: {
          line: 42,
          column: 19
        },
        end: {
          line: 42,
          column: 49
        }
      },
      "13": {
        start: {
          line: 43,
          column: 25
        },
        end: {
          line: 43,
          column: 52
        }
      },
      "14": {
        start: {
          line: 45,
          column: 25
        },
        end: {
          line: 45,
          column: 27
        }
      },
      "15": {
        start: {
          line: 47,
          column: 2
        },
        end: {
          line: 139,
          column: 3
        }
      },
      "16": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 121,
          column: 5
        }
      },
      "17": {
        start: {
          line: 50,
          column: 21
        },
        end: {
          line: 50,
          column: 32
        }
      },
      "18": {
        start: {
          line: 54,
          column: 6
        },
        end: {
          line: 120,
          column: 7
        }
      },
      "19": {
        start: {
          line: 55,
          column: 24
        },
        end: {
          line: 55,
          column: 37
        }
      },
      "20": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "21": {
        start: {
          line: 59,
          column: 45
        },
        end: {
          line: 59,
          column: 93
        }
      },
      "22": {
        start: {
          line: 62,
          column: 10
        },
        end: {
          line: 88,
          column: 11
        }
      },
      "23": {
        start: {
          line: 63,
          column: 34
        },
        end: {
          line: 63,
          column: 74
        }
      },
      "24": {
        start: {
          line: 64,
          column: 30
        },
        end: {
          line: 64,
          column: 54
        }
      },
      "25": {
        start: {
          line: 66,
          column: 34
        },
        end: {
          line: 75,
          column: 13
        }
      },
      "26": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 61
        }
      },
      "27": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 85,
          column: 15
        }
      },
      "28": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 133
        }
      },
      "29": {
        start: {
          line: 91,
          column: 10
        },
        end: {
          line: 118,
          column: 11
        }
      },
      "30": {
        start: {
          line: 92,
          column: 34
        },
        end: {
          line: 92,
          column: 74
        }
      },
      "31": {
        start: {
          line: 93,
          column: 30
        },
        end: {
          line: 93,
          column: 54
        }
      },
      "32": {
        start: {
          line: 95,
          column: 34
        },
        end: {
          line: 104,
          column: 13
        }
      },
      "33": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 61
        }
      },
      "34": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 113,
          column: 15
        }
      },
      "35": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 96
        }
      },
      "36": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 88
        }
      },
      "37": {
        start: {
          line: 123,
          column: 21
        },
        end: {
          line: 123,
          column: 43
        }
      },
      "38": {
        start: {
          line: 124,
          column: 4
        },
        end: {
          line: 125,
          column: 86
        }
      },
      "39": {
        start: {
          line: 125,
          column: 30
        },
        end: {
          line: 125,
          column: 72
        }
      },
      "40": {
        start: {
          line: 128,
          column: 4
        },
        end: {
          line: 133,
          column: 6
        }
      },
      "41": {
        start: {
          line: 136,
          column: 21
        },
        end: {
          line: 136,
          column: 43
        }
      },
      "42": {
        start: {
          line: 137,
          column: 4
        },
        end: {
          line: 137,
          column: 79
        }
      },
      "43": {
        start: {
          line: 138,
          column: 4
        },
        end: {
          line: 138,
          column: 16
        }
      }
    },
    fnMap: {
      "0": {
        name: "getCosmosClient",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 24
          }
        },
        loc: {
          start: {
            line: 6,
            column: 27
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 33,
            column: 17
          },
          end: {
            line: 33,
            column: 18
          }
        },
        loc: {
          start: {
            line: 33,
            column: 53
          },
          end: {
            line: 140,
            column: 1
          }
        },
        line: 33
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 125,
            column: 25
          },
          end: {
            line: 125,
            column: 26
          }
        },
        loc: {
          start: {
            line: 125,
            column: 30
          },
          end: {
            line: 125,
            column: 72
          }
        },
        line: 125
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 7,
            column: 2
          },
          end: {
            line: 10,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 7,
            column: 2
          },
          end: {
            line: 10,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 7
      },
      "1": {
        loc: {
          start: {
            line: 36,
            column: 2
          },
          end: {
            line: 39,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 2
          },
          end: {
            line: 39,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "2": {
        loc: {
          start: {
            line: 36,
            column: 6
          },
          end: {
            line: 36,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 6
          },
          end: {
            line: 36,
            column: 16
          }
        }, {
          start: {
            line: 36,
            column: 20
          },
          end: {
            line: 36,
            column: 42
          }
        }],
        line: 36
      },
      "3": {
        loc: {
          start: {
            line: 54,
            column: 6
          },
          end: {
            line: 120,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 6
          },
          end: {
            line: 120,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "4": {
        loc: {
          start: {
            line: 54,
            column: 10
          },
          end: {
            line: 54,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 54,
            column: 10
          },
          end: {
            line: 54,
            column: 23
          }
        }, {
          start: {
            line: 54,
            column: 27
          },
          end: {
            line: 54,
            column: 33
          }
        }],
        line: 54
      },
      "5": {
        loc: {
          start: {
            line: 62,
            column: 10
          },
          end: {
            line: 88,
            column: 11
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 10
          },
          end: {
            line: 88,
            column: 11
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "6": {
        loc: {
          start: {
            line: 62,
            column: 14
          },
          end: {
            line: 62,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 14
          },
          end: {
            line: 62,
            column: 27
          }
        }, {
          start: {
            line: 62,
            column: 31
          },
          end: {
            line: 62,
            column: 49
          }
        }, {
          start: {
            line: 62,
            column: 53
          },
          end: {
            line: 62,
            column: 82
          }
        }],
        line: 62
      },
      "7": {
        loc: {
          start: {
            line: 63,
            column: 34
          },
          end: {
            line: 63,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 63,
            column: 34
          },
          end: {
            line: 63,
            column: 54
          }
        }, {
          start: {
            line: 63,
            column: 58
          },
          end: {
            line: 63,
            column: 74
          }
        }],
        line: 63
      },
      "8": {
        loc: {
          start: {
            line: 70,
            column: 28
          },
          end: {
            line: 70,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 70,
            column: 28
          },
          end: {
            line: 70,
            column: 46
          }
        }, {
          start: {
            line: 70,
            column: 50
          },
          end: {
            line: 70,
            column: 56
          }
        }],
        line: 70
      },
      "9": {
        loc: {
          start: {
            line: 74,
            column: 25
          },
          end: {
            line: 74,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 74,
            column: 25
          },
          end: {
            line: 74,
            column: 48
          }
        }, {
          start: {
            line: 74,
            column: 52
          },
          end: {
            line: 74,
            column: 61
          }
        }],
        line: 74
      },
      "10": {
        loc: {
          start: {
            line: 82,
            column: 23
          },
          end: {
            line: 82,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 82,
            column: 23
          },
          end: {
            line: 82,
            column: 41
          }
        }, {
          start: {
            line: 82,
            column: 45
          },
          end: {
            line: 82,
            column: 51
          }
        }],
        line: 82
      },
      "11": {
        loc: {
          start: {
            line: 87,
            column: 87
          },
          end: {
            line: 87,
            column: 115
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 87,
            column: 87
          },
          end: {
            line: 87,
            column: 105
          }
        }, {
          start: {
            line: 87,
            column: 109
          },
          end: {
            line: 87,
            column: 115
          }
        }],
        line: 87
      },
      "12": {
        loc: {
          start: {
            line: 91,
            column: 10
          },
          end: {
            line: 118,
            column: 11
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 10
          },
          end: {
            line: 118,
            column: 11
          }
        }, {
          start: {
            line: 116,
            column: 17
          },
          end: {
            line: 118,
            column: 11
          }
        }],
        line: 91
      },
      "13": {
        loc: {
          start: {
            line: 92,
            column: 34
          },
          end: {
            line: 92,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 92,
            column: 34
          },
          end: {
            line: 92,
            column: 54
          }
        }, {
          start: {
            line: 92,
            column: 58
          },
          end: {
            line: 92,
            column: 74
          }
        }],
        line: 92
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0]
    },
    inputSourceMap: null,
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "27663e2d4c2dd27eedb3c65e4c3533b83346e5fc"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_7v84alcm7 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_7v84alcm7();
const {
  CosmosClient
} =
/* istanbul ignore next */
(cov_7v84alcm7().s[0]++, require('@azure/cosmos'));

// Initialize Cosmos client
let cosmosClient;
function getCosmosClient() {
  /* istanbul ignore next */
  cov_7v84alcm7().f[0]++;
  cov_7v84alcm7().s[1]++;
  if (!cosmosClient) {
    /* istanbul ignore next */
    cov_7v84alcm7().b[0][0]++;
    const connectionString =
    /* istanbul ignore next */
    (cov_7v84alcm7().s[2]++, process.env.AZURE_COSMOS_DB_CONNECTION_STRING);
    /* istanbul ignore next */
    cov_7v84alcm7().s[3]++;
    cosmosClient = new CosmosClient(connectionString);
  } else
  /* istanbul ignore next */
  {
    cov_7v84alcm7().b[0][1]++;
  }
  cov_7v84alcm7().s[4]++;
  return cosmosClient;
}

// Plan limits configuration
const PLAN_LIMITS =
/* istanbul ignore next */
(cov_7v84alcm7().s[5]++, {
  free: {
    interviews: {
      count: 0,
      limit: 3
    },
    resumeTailor: {
      count: 0,
      limit: 2
    },
    autoApply: {
      count: 0,
      limit: 1
    }
  },
  premium: {
    interviews: {
      count: 0,
      limit: -1
    },
    resumeTailor: {
      count: 0,
      limit: -1
    },
    autoApply: {
      count: 0,
      limit: -1
    }
  },
  pro: {
    interviews: {
      count: 0,
      limit: -1
    },
    resumeTailor: {
      count: 0,
      limit: -1
    },
    autoApply: {
      count: 0,
      limit: -1
    }
  }
});
/* istanbul ignore next */
cov_7v84alcm7().s[6]++;
module.exports = async function (context, documents) {
  /* istanbul ignore next */
  cov_7v84alcm7().f[1]++;
  const startTime =
  /* istanbul ignore next */
  (cov_7v84alcm7().s[7]++, Date.now());
  /* istanbul ignore next */
  cov_7v84alcm7().s[8]++;
  if (
  /* istanbul ignore next */
  (cov_7v84alcm7().b[2][0]++, !documents) ||
  /* istanbul ignore next */
  (cov_7v84alcm7().b[2][1]++, documents.length === 0)) {
    /* istanbul ignore next */
    cov_7v84alcm7().b[1][0]++;
    cov_7v84alcm7().s[9]++;
    context.log('No documents to process');
    /* istanbul ignore next */
    cov_7v84alcm7().s[10]++;
    return;
  } else
  /* istanbul ignore next */
  {
    cov_7v84alcm7().b[1][1]++;
  }
  const client =
  /* istanbul ignore next */
  (cov_7v84alcm7().s[11]++, getCosmosClient());
  const database =
  /* istanbul ignore next */
  (cov_7v84alcm7().s[12]++, client.database('PrepBettrDB'));
  const usageContainer =
  /* istanbul ignore next */
  (cov_7v84alcm7().s[13]++, database.container('usage'));
  const processedUsers =
  /* istanbul ignore next */
  (cov_7v84alcm7().s[14]++, []);
  /* istanbul ignore next */
  cov_7v84alcm7().s[15]++;
  try {
    /* istanbul ignore next */
    cov_7v84alcm7().s[16]++;
    for (const document of documents) {
      // Check if this is a plan change by looking at the operation type and changes
      const userId =
      /* istanbul ignore next */
      (cov_7v84alcm7().s[17]++, document.id);

      // Azure Cosmos DB doesn't provide "before/after" like Firestore
      // We need to detect plan changes differently
      /* istanbul ignore next */
      cov_7v84alcm7().s[18]++;
      if (
      /* istanbul ignore next */
      (cov_7v84alcm7().b[4][0]++, document.plan) &&
      /* istanbul ignore next */
      (cov_7v84alcm7().b[4][1]++, userId)) {
        /* istanbul ignore next */
        cov_7v84alcm7().b[3][0]++;
        const newPlan =
        /* istanbul ignore next */
        (cov_7v84alcm7().s[19]++, document.plan);

        // Get current usage data to check if plan actually changed
        /* istanbul ignore next */
        cov_7v84alcm7().s[20]++;
        try {
          const {
            resource: currentUsage
          } =
          /* istanbul ignore next */
          (cov_7v84alcm7().s[21]++, await usageContainer.item(userId, userId).read());

          // If user doesn't have usage record or plan is different, reset usage
          /* istanbul ignore next */
          cov_7v84alcm7().s[22]++;
          if (
          /* istanbul ignore next */
          (cov_7v84alcm7().b[6][0]++, !currentUsage) ||
          /* istanbul ignore next */
          (cov_7v84alcm7().b[6][1]++, !currentUsage.plan) ||
          /* istanbul ignore next */
          (cov_7v84alcm7().b[6][2]++, currentUsage.plan !== newPlan)) {
            /* istanbul ignore next */
            cov_7v84alcm7().b[5][0]++;
            const newPlanLimits =
            /* istanbul ignore next */
            (cov_7v84alcm7().s[23]++,
            /* istanbul ignore next */
            (cov_7v84alcm7().b[7][0]++, PLAN_LIMITS[newPlan]) ||
            /* istanbul ignore next */
            (cov_7v84alcm7().b[7][1]++, PLAN_LIMITS.free));
            const timestamp =
            /* istanbul ignore next */
            (cov_7v84alcm7().s[24]++, new Date().toISOString());
            const usageDocument =
            /* istanbul ignore next */
            (cov_7v84alcm7().s[25]++, {
              id: userId,
              userId: userId,
              plan: newPlan,
              previousPlan:
              /* istanbul ignore next */
              (cov_7v84alcm7().b[8][0]++, currentUsage?.plan) ||
              /* istanbul ignore next */
              (cov_7v84alcm7().b[8][1]++, 'free'),
              ...newPlanLimits,
              lastReset: timestamp,
              updatedAt: timestamp,
              createdAt:
              /* istanbul ignore next */
              (cov_7v84alcm7().b[9][0]++, currentUsage?.createdAt) ||
              /* istanbul ignore next */
              (cov_7v84alcm7().b[9][1]++, timestamp)
            });

            // Upsert the usage document
            /* istanbul ignore next */
            cov_7v84alcm7().s[26]++;
            await usageContainer.items.upsert(usageDocument);
            /* istanbul ignore next */
            cov_7v84alcm7().s[27]++;
            processedUsers.push({
              userId,
              oldPlan:
              /* istanbul ignore next */
              (cov_7v84alcm7().b[10][0]++, currentUsage?.plan) ||
              /* istanbul ignore next */
              (cov_7v84alcm7().b[10][1]++, 'free'),
              newPlan,
              resetAt: timestamp
            });
            /* istanbul ignore next */
            cov_7v84alcm7().s[28]++;
            context.log(`Usage counters reset for user: ${userId}, plan changed from ${
            /* istanbul ignore next */
            (cov_7v84alcm7().b[11][0]++, currentUsage?.plan) ||
            /* istanbul ignore next */
            (cov_7v84alcm7().b[11][1]++, 'free')} to ${newPlan}`);
          } else
          /* istanbul ignore next */
          {
            cov_7v84alcm7().b[5][1]++;
          }
        } catch (usageError) {
          /* istanbul ignore next */
          cov_7v84alcm7().s[29]++;
          // If usage document doesn't exist, create it
          if (usageError.code === 404) {
            /* istanbul ignore next */
            cov_7v84alcm7().b[12][0]++;
            const newPlanLimits =
            /* istanbul ignore next */
            (cov_7v84alcm7().s[30]++,
            /* istanbul ignore next */
            (cov_7v84alcm7().b[13][0]++, PLAN_LIMITS[newPlan]) ||
            /* istanbul ignore next */
            (cov_7v84alcm7().b[13][1]++, PLAN_LIMITS.free));
            const timestamp =
            /* istanbul ignore next */
            (cov_7v84alcm7().s[31]++, new Date().toISOString());
            const usageDocument =
            /* istanbul ignore next */
            (cov_7v84alcm7().s[32]++, {
              id: userId,
              userId: userId,
              plan: newPlan,
              previousPlan: 'free',
              ...newPlanLimits,
              lastReset: timestamp,
              updatedAt: timestamp,
              createdAt: timestamp
            });
            /* istanbul ignore next */
            cov_7v84alcm7().s[33]++;
            await usageContainer.items.create(usageDocument);
            /* istanbul ignore next */
            cov_7v84alcm7().s[34]++;
            processedUsers.push({
              userId,
              oldPlan: 'free',
              newPlan,
              resetAt: timestamp
            });
            /* istanbul ignore next */
            cov_7v84alcm7().s[35]++;
            context.log(`Initial usage counters created for user: ${userId}, plan: ${newPlan}`);
          } else {
            /* istanbul ignore next */
            cov_7v84alcm7().b[12][1]++;
            cov_7v84alcm7().s[36]++;
            context.log.error(`Error processing usage for user ${userId}:`, usageError);
          }
        }
      } else
      /* istanbul ignore next */
      {
        cov_7v84alcm7().b[3][1]++;
      }
    }
    const duration =
    /* istanbul ignore next */
    (cov_7v84alcm7().s[37]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_7v84alcm7().s[38]++;
    context.log(`Processed ${processedUsers.length} plan changes in ${duration}ms:`, processedUsers.map(u => {
      /* istanbul ignore next */
      cov_7v84alcm7().f[2]++;
      cov_7v84alcm7().s[39]++;
      return `${u.userId}: ${u.oldPlan} → ${u.newPlan}`;
    }).join(', '));

    // Return summary for monitoring
    /* istanbul ignore next */
    cov_7v84alcm7().s[40]++;
    return {
      processedCount: processedUsers.length,
      totalDocuments: documents.length,
      duration,
      changes: processedUsers
    };
  } catch (error) {
    const duration =
    /* istanbul ignore next */
    (cov_7v84alcm7().s[41]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_7v84alcm7().s[42]++;
    context.log.error(`Error processing plan changes (${duration}ms):`, error);
    /* istanbul ignore next */
    cov_7v84alcm7().s[43]++;
    throw error;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,