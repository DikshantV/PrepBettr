7fce458aa4cceff499417c6dfac5cb40
"use strict";

/* istanbul ignore next */
function cov_1pxl161w72() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/utils/resume-parser.ts";
  var hash = "94564416a2e07511f849df6a3669d825a549ab62";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/utils/resume-parser.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 42
        }
      },
      "2": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 4,
          column: 64
        }
      },
      "3": {
        start: {
          line: 5,
          column: 31
        },
        end: {
          line: 5,
          column: 74
        }
      },
      "4": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 22,
          column: 5
        }
      },
      "5": {
        start: {
          line: 12,
          column: 26
        },
        end: {
          line: 12,
          column: 48
        }
      },
      "6": {
        start: {
          line: 14,
          column: 31
        },
        end: {
          line: 14,
          column: 56
        }
      },
      "7": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 58
        }
      },
      "8": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 54
        }
      },
      "9": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 38
        }
      },
      "10": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 34,
          column: 5
        }
      },
      "11": {
        start: {
          line: 35,
          column: 15
        },
        end: {
          line: 35,
          column: 17
        }
      },
      "12": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 42,
          column: 5
        }
      },
      "13": {
        start: {
          line: 37,
          column: 22
        },
        end: {
          line: 37,
          column: 41
        }
      },
      "14": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 41,
          column: 9
        }
      },
      "15": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 35
        }
      },
      "16": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 18
        }
      },
      "17": {
        start: {
          line: 44,
          column: 23
        },
        end: {
          line: 44,
          column: 85
        }
      },
      "18": {
        start: {
          line: 45,
          column: 18
        },
        end: {
          line: 45,
          column: 49
        }
      },
      "19": {
        start: {
          line: 47,
          column: 26
        },
        end: {
          line: 50,
          column: 5
        }
      },
      "20": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 51,
          column: 18
        }
      },
      "21": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 58,
          column: 5
        }
      },
      "22": {
        start: {
          line: 53,
          column: 22
        },
        end: {
          line: 53,
          column: 41
        }
      },
      "23": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "24": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 36
        }
      },
      "25": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 18
        }
      },
      "26": {
        start: {
          line: 60,
          column: 24
        },
        end: {
          line: 60,
          column: 121
        }
      },
      "27": {
        start: {
          line: 61,
          column: 17
        },
        end: {
          line: 61,
          column: 19
        }
      },
      "28": {
        start: {
          line: 62,
          column: 4
        },
        end: {
          line: 69,
          column: 5
        }
      },
      "29": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 68,
          column: 26
        }
      },
      "30": {
        start: {
          line: 66,
          column: 26
        },
        end: {
          line: 66,
          column: 38
        }
      },
      "31": {
        start: {
          line: 67,
          column: 29
        },
        end: {
          line: 67,
          column: 66
        }
      },
      "32": {
        start: {
          line: 71,
          column: 28
        },
        end: {
          line: 71,
          column: 144
        }
      },
      "33": {
        start: {
          line: 72,
          column: 21
        },
        end: {
          line: 72,
          column: 23
        }
      },
      "34": {
        start: {
          line: 73,
          column: 4
        },
        end: {
          line: 87,
          column: 5
        }
      },
      "35": {
        start: {
          line: 74,
          column: 24
        },
        end: {
          line: 74,
          column: 42
        }
      },
      "36": {
        start: {
          line: 76,
          column: 27
        },
        end: {
          line: 76,
          column: 108
        }
      },
      "37": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 86,
          column: 9
        }
      },
      "38": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 85,
          column: 15
        }
      },
      "39": {
        start: {
          line: 79,
          column: 49
        },
        end: {
          line: 79,
          column: 88
        }
      },
      "40": {
        start: {
          line: 79,
          column: 79
        },
        end: {
          line: 79,
          column: 87
        }
      },
      "41": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 84,
          column: 18
        }
      },
      "42": {
        start: {
          line: 89,
          column: 27
        },
        end: {
          line: 89,
          column: 136
        }
      },
      "43": {
        start: {
          line: 90,
          column: 20
        },
        end: {
          line: 90,
          column: 22
        }
      },
      "44": {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 101,
          column: 5
        }
      },
      "45": {
        start: {
          line: 92,
          column: 24
        },
        end: {
          line: 92,
          column: 41
        }
      },
      "46": {
        start: {
          line: 93,
          column: 32
        },
        end: {
          line: 93,
          column: 113
        }
      },
      "47": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "48": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 99,
          column: 19
        }
      },
      "49": {
        start: {
          line: 102,
          column: 4
        },
        end: {
          line: 110,
          column: 6
        }
      },
      "50": {
        start: {
          line: 116,
          column: 4
        },
        end: {
          line: 217,
          column: 5
        }
      },
      "51": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 69
        }
      },
      "52": {
        start: {
          line: 119,
          column: 23
        },
        end: {
          line: 172,
          column: 1
        }
      },
      "53": {
        start: {
          line: 173,
          column: 25
        },
        end: {
          line: 173,
          column: 99
        }
      },
      "54": {
        start: {
          line: 174,
          column: 25
        },
        end: {
          line: 174,
          column: 40
        }
      },
      "55": {
        start: {
          line: 176,
          column: 27
        },
        end: {
          line: 176,
          column: 47
        }
      },
      "56": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 212,
          column: 10
        }
      },
      "57": {
        start: {
          line: 184,
          column: 112
        },
        end: {
          line: 193,
          column: 13
        }
      },
      "58": {
        start: {
          line: 194,
          column: 108
        },
        end: {
          line: 202,
          column: 13
        }
      },
      "59": {
        start: {
          line: 203,
          column: 107
        },
        end: {
          line: 211,
          column: 13
        }
      },
      "60": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 215,
          column: 54
        }
      },
      "61": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 216,
          column: 20
        }
      },
      "62": {
        start: {
          line: 223,
          column: 4
        },
        end: {
          line: 232,
          column: 6
        }
      },
      "63": {
        start: {
          line: 239,
          column: 4
        },
        end: {
          line: 284,
          column: 5
        }
      },
      "64": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 241,
          column: 69
        }
      },
      "65": {
        start: {
          line: 242,
          column: 23
        },
        end: {
          line: 260,
          column: 1
        }
      },
      "66": {
        start: {
          line: 255,
          column: 47
        },
        end: {
          line: 255,
          column: 82
        }
      },
      "67": {
        start: {
          line: 256,
          column: 45
        },
        end: {
          line: 256,
          column: 100
        }
      },
      "68": {
        start: {
          line: 257,
          column: 92
        },
        end: {
          line: 257,
          column: 101
        }
      },
      "69": {
        start: {
          line: 261,
          column: 30
        },
        end: {
          line: 261,
          column: 104
        }
      },
      "70": {
        start: {
          line: 262,
          column: 26
        },
        end: {
          line: 268,
          column: 25
        }
      },
      "71": {
        start: {
          line: 264,
          column: 22
        },
        end: {
          line: 264,
          column: 30
        }
      },
      "72": {
        start: {
          line: 265,
          column: 25
        },
        end: {
          line: 265,
          column: 37
        }
      },
      "73": {
        start: {
          line: 266,
          column: 22
        },
        end: {
          line: 266,
          column: 49
        }
      },
      "74": {
        start: {
          line: 267,
          column: 25
        },
        end: {
          line: 267,
          column: 38
        }
      },
      "75": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 269,
          column: 25
        }
      },
      "76": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 272,
          column: 70
        }
      },
      "77": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 283,
          column: 10
        }
      }
    },
    fnMap: {
      "0": {
        name: "parseResumeText",
        decl: {
          start: {
            line: 9,
            column: 15
          },
          end: {
            line: 9,
            column: 30
          }
        },
        loc: {
          start: {
            line: 9,
            column: 37
          },
          end: {
            line: 23,
            column: 1
          }
        },
        line: 9
      },
      "1": {
        name: "extractBasicInfo",
        decl: {
          start: {
            line: 27,
            column: 9
          },
          end: {
            line: 27,
            column: 25
          }
        },
        loc: {
          start: {
            line: 27,
            column: 32
          },
          end: {
            line: 111,
            column: 1
          }
        },
        line: 27
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 66,
            column: 17
          },
          end: {
            line: 66,
            column: 18
          }
        },
        loc: {
          start: {
            line: 66,
            column: 26
          },
          end: {
            line: 66,
            column: 38
          }
        },
        line: 66
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 67,
            column: 20
          },
          end: {
            line: 67,
            column: 21
          }
        },
        loc: {
          start: {
            line: 67,
            column: 29
          },
          end: {
            line: 67,
            column: 66
          }
        },
        line: 67
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 78,
            column: 52
          },
          end: {
            line: 78,
            column: 53
          }
        },
        loc: {
          start: {
            line: 78,
            column: 61
          },
          end: {
            line: 85,
            column: 13
          }
        },
        line: 78
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 79,
            column: 74
          },
          end: {
            line: 79,
            column: 75
          }
        },
        loc: {
          start: {
            line: 79,
            column: 79
          },
          end: {
            line: 79,
            column: 87
          }
        },
        line: 79
      },
      "6": {
        name: "extractWithAI",
        decl: {
          start: {
            line: 115,
            column: 15
          },
          end: {
            line: 115,
            column: 28
          }
        },
        loc: {
          start: {
            line: 115,
            column: 35
          },
          end: {
            line: 218,
            column: 1
          }
        },
        line: 115
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 184,
            column: 102
          },
          end: {
            line: 184,
            column: 103
          }
        },
        loc: {
          start: {
            line: 184,
            column: 112
          },
          end: {
            line: 193,
            column: 13
          }
        },
        line: 184
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 194,
            column: 98
          },
          end: {
            line: 194,
            column: 99
          }
        },
        loc: {
          start: {
            line: 194,
            column: 108
          },
          end: {
            line: 202,
            column: 13
          }
        },
        line: 194
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 203,
            column: 96
          },
          end: {
            line: 203,
            column: 97
          }
        },
        loc: {
          start: {
            line: 203,
            column: 107
          },
          end: {
            line: 211,
            column: 13
          }
        },
        line: 203
      },
      "10": {
        name: "mergeResumeData",
        decl: {
          start: {
            line: 222,
            column: 9
          },
          end: {
            line: 222,
            column: 24
          }
        },
        loc: {
          start: {
            line: 222,
            column: 44
          },
          end: {
            line: 233,
            column: 1
          }
        },
        line: 222
      },
      "11": {
        name: "generateInterviewQuestions",
        decl: {
          start: {
            line: 237,
            column: 15
          },
          end: {
            line: 237,
            column: 41
          }
        },
        loc: {
          start: {
            line: 237,
            column: 54
          },
          end: {
            line: 285,
            column: 1
          }
        },
        line: 237
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 255,
            column: 40
          },
          end: {
            line: 255,
            column: 41
          }
        },
        loc: {
          start: {
            line: 255,
            column: 47
          },
          end: {
            line: 255,
            column: 82
          }
        },
        line: 255
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 256,
            column: 38
          },
          end: {
            line: 256,
            column: 39
          }
        },
        loc: {
          start: {
            line: 256,
            column: 45
          },
          end: {
            line: 256,
            column: 100
          }
        },
        line: 256
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 257,
            column: 84
          },
          end: {
            line: 257,
            column: 85
          }
        },
        loc: {
          start: {
            line: 257,
            column: 92
          },
          end: {
            line: 257,
            column: 101
          }
        },
        line: 257
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 264,
            column: 17
          },
          end: {
            line: 264,
            column: 18
          }
        },
        loc: {
          start: {
            line: 264,
            column: 22
          },
          end: {
            line: 264,
            column: 30
          }
        },
        line: 264
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 265,
            column: 20
          },
          end: {
            line: 265,
            column: 21
          }
        },
        loc: {
          start: {
            line: 265,
            column: 25
          },
          end: {
            line: 265,
            column: 37
          }
        },
        line: 265
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 266,
            column: 17
          },
          end: {
            line: 266,
            column: 18
          }
        },
        loc: {
          start: {
            line: 266,
            column: 22
          },
          end: {
            line: 266,
            column: 49
          }
        },
        line: 266
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 267,
            column: 20
          },
          end: {
            line: 267,
            column: 21
          }
        },
        loc: {
          start: {
            line: 267,
            column: 25
          },
          end: {
            line: 267,
            column: 38
          }
        },
        line: 267
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "1": {
        loc: {
          start: {
            line: 45,
            column: 18
          },
          end: {
            line: 45,
            column: 49
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 45,
            column: 31
          },
          end: {
            line: 45,
            column: 44
          }
        }, {
          start: {
            line: 45,
            column: 47
          },
          end: {
            line: 45,
            column: 49
          }
        }],
        line: 45
      },
      "2": {
        loc: {
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "3": {
        loc: {
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "4": {
        loc: {
          start: {
            line: 67,
            column: 29
          },
          end: {
            line: 67,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 67,
            column: 29
          },
          end: {
            line: 67,
            column: 45
          }
        }, {
          start: {
            line: 67,
            column: 49
          },
          end: {
            line: 67,
            column: 66
          }
        }],
        line: 67
      },
      "5": {
        loc: {
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 87,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 87,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "6": {
        loc: {
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 86,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      },
      "7": {
        loc: {
          start: {
            line: 79,
            column: 32
          },
          end: {
            line: 79,
            column: 45
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 79,
            column: 43
          },
          end: {
            line: 79,
            column: 45
          }
        }],
        line: 79
      },
      "8": {
        loc: {
          start: {
            line: 81,
            column: 29
          },
          end: {
            line: 81,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 81,
            column: 29
          },
          end: {
            line: 81,
            column: 36
          }
        }, {
          start: {
            line: 81,
            column: 40
          },
          end: {
            line: 81,
            column: 57
          }
        }],
        line: 81
      },
      "9": {
        loc: {
          start: {
            line: 82,
            column: 30
          },
          end: {
            line: 82,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 82,
            column: 30
          },
          end: {
            line: 82,
            column: 38
          }
        }, {
          start: {
            line: 82,
            column: 42
          },
          end: {
            line: 82,
            column: 60
          }
        }],
        line: 82
      },
      "10": {
        loc: {
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "11": {
        loc: {
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "12": {
        loc: {
          start: {
            line: 97,
            column: 28
          },
          end: {
            line: 97,
            column: 114
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 97,
            column: 29
          },
          end: {
            line: 97,
            column: 101
          }
        }, {
          start: {
            line: 97,
            column: 106
          },
          end: {
            line: 97,
            column: 114
          }
        }],
        line: 97
      },
      "13": {
        loc: {
          start: {
            line: 97,
            column: 29
          },
          end: {
            line: 97,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 97,
            column: 83
          },
          end: {
            line: 97,
            column: 89
          }
        }, {
          start: {
            line: 97,
            column: 92
          },
          end: {
            line: 97,
            column: 101
          }
        }],
        line: 97
      },
      "14": {
        loc: {
          start: {
            line: 97,
            column: 29
          },
          end: {
            line: 97,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 97,
            column: 29
          },
          end: {
            line: 97,
            column: 63
          }
        }, {
          start: {
            line: 97,
            column: 67
          },
          end: {
            line: 97,
            column: 80
          }
        }],
        line: 97
      },
      "15": {
        loc: {
          start: {
            line: 179,
            column: 18
          },
          end: {
            line: 179,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 179,
            column: 18
          },
          end: {
            line: 179,
            column: 33
          }
        }, {
          start: {
            line: 179,
            column: 37
          },
          end: {
            line: 179,
            column: 39
          }
        }],
        line: 179
      },
      "16": {
        loc: {
          start: {
            line: 180,
            column: 19
          },
          end: {
            line: 180,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 180,
            column: 19
          },
          end: {
            line: 180,
            column: 35
          }
        }, {
          start: {
            line: 180,
            column: 39
          },
          end: {
            line: 180,
            column: 41
          }
        }],
        line: 180
      },
      "17": {
        loc: {
          start: {
            line: 181,
            column: 19
          },
          end: {
            line: 181,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 181,
            column: 19
          },
          end: {
            line: 181,
            column: 35
          }
        }, {
          start: {
            line: 181,
            column: 39
          },
          end: {
            line: 181,
            column: 41
          }
        }],
        line: 181
      },
      "18": {
        loc: {
          start: {
            line: 182,
            column: 21
          },
          end: {
            line: 182,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 182,
            column: 21
          },
          end: {
            line: 182,
            column: 39
          }
        }, {
          start: {
            line: 182,
            column: 43
          },
          end: {
            line: 182,
            column: 45
          }
        }],
        line: 182
      },
      "19": {
        loc: {
          start: {
            line: 183,
            column: 20
          },
          end: {
            line: 183,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 183,
            column: 55
          },
          end: {
            line: 183,
            column: 85
          }
        }, {
          start: {
            line: 183,
            column: 88
          },
          end: {
            line: 183,
            column: 90
          }
        }],
        line: 183
      },
      "20": {
        loc: {
          start: {
            line: 184,
            column: 24
          },
          end: {
            line: 193,
            column: 20
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 184,
            column: 63
          },
          end: {
            line: 193,
            column: 15
          }
        }, {
          start: {
            line: 193,
            column: 18
          },
          end: {
            line: 193,
            column: 20
          }
        }],
        line: 184
      },
      "21": {
        loc: {
          start: {
            line: 185,
            column: 25
          },
          end: {
            line: 185,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 185,
            column: 25
          },
          end: {
            line: 185,
            column: 36
          }
        }, {
          start: {
            line: 185,
            column: 40
          },
          end: {
            line: 185,
            column: 57
          }
        }],
        line: 185
      },
      "22": {
        loc: {
          start: {
            line: 186,
            column: 26
          },
          end: {
            line: 186,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 186,
            column: 26
          },
          end: {
            line: 186,
            column: 38
          }
        }, {
          start: {
            line: 186,
            column: 42
          },
          end: {
            line: 186,
            column: 60
          }
        }],
        line: 186
      },
      "23": {
        loc: {
          start: {
            line: 187,
            column: 27
          },
          end: {
            line: 187,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 187,
            column: 27
          },
          end: {
            line: 187,
            column: 40
          }
        }, {
          start: {
            line: 187,
            column: 44
          },
          end: {
            line: 187,
            column: 46
          }
        }],
        line: 187
      },
      "24": {
        loc: {
          start: {
            line: 188,
            column: 25
          },
          end: {
            line: 188,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 188,
            column: 25
          },
          end: {
            line: 188,
            column: 36
          }
        }, {
          start: {
            line: 188,
            column: 40
          },
          end: {
            line: 188,
            column: 42
          }
        }],
        line: 188
      },
      "25": {
        loc: {
          start: {
            line: 190,
            column: 29
          },
          end: {
            line: 190,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 190,
            column: 29
          },
          end: {
            line: 190,
            column: 44
          }
        }, {
          start: {
            line: 190,
            column: 48
          },
          end: {
            line: 190,
            column: 50
          }
        }],
        line: 190
      },
      "26": {
        loc: {
          start: {
            line: 191,
            column: 30
          },
          end: {
            line: 191,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 191,
            column: 64
          },
          end: {
            line: 191,
            column: 80
          }
        }, {
          start: {
            line: 191,
            column: 83
          },
          end: {
            line: 191,
            column: 85
          }
        }],
        line: 191
      },
      "27": {
        loc: {
          start: {
            line: 192,
            column: 30
          },
          end: {
            line: 192,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 192,
            column: 64
          },
          end: {
            line: 192,
            column: 80
          }
        }, {
          start: {
            line: 192,
            column: 83
          },
          end: {
            line: 192,
            column: 85
          }
        }],
        line: 192
      },
      "28": {
        loc: {
          start: {
            line: 194,
            column: 23
          },
          end: {
            line: 202,
            column: 20
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 194,
            column: 61
          },
          end: {
            line: 202,
            column: 15
          }
        }, {
          start: {
            line: 202,
            column: 18
          },
          end: {
            line: 202,
            column: 20
          }
        }],
        line: 194
      },
      "29": {
        loc: {
          start: {
            line: 195,
            column: 29
          },
          end: {
            line: 195,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 195,
            column: 29
          },
          end: {
            line: 195,
            column: 44
          }
        }, {
          start: {
            line: 195,
            column: 48
          },
          end: {
            line: 195,
            column: 69
          }
        }],
        line: 195
      },
      "30": {
        loc: {
          start: {
            line: 196,
            column: 24
          },
          end: {
            line: 196,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 196,
            column: 24
          },
          end: {
            line: 196,
            column: 34
          }
        }, {
          start: {
            line: 196,
            column: 38
          },
          end: {
            line: 196,
            column: 46
          }
        }],
        line: 196
      },
      "31": {
        loc: {
          start: {
            line: 197,
            column: 23
          },
          end: {
            line: 197,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 197,
            column: 23
          },
          end: {
            line: 197,
            column: 32
          }
        }, {
          start: {
            line: 197,
            column: 36
          },
          end: {
            line: 197,
            column: 52
          }
        }],
        line: 197
      },
      "32": {
        loc: {
          start: {
            line: 198,
            column: 27
          },
          end: {
            line: 198,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 198,
            column: 27
          },
          end: {
            line: 198,
            column: 40
          }
        }, {
          start: {
            line: 198,
            column: 44
          },
          end: {
            line: 198,
            column: 46
          }
        }],
        line: 198
      },
      "33": {
        loc: {
          start: {
            line: 199,
            column: 25
          },
          end: {
            line: 199,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 199,
            column: 25
          },
          end: {
            line: 199,
            column: 36
          }
        }, {
          start: {
            line: 199,
            column: 40
          },
          end: {
            line: 199,
            column: 42
          }
        }],
        line: 199
      },
      "34": {
        loc: {
          start: {
            line: 200,
            column: 21
          },
          end: {
            line: 200,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 200,
            column: 51
          },
          end: {
            line: 200,
            column: 58
          }
        }, {
          start: {
            line: 200,
            column: 61
          },
          end: {
            line: 200,
            column: 70
          }
        }],
        line: 200
      },
      "35": {
        loc: {
          start: {
            line: 201,
            column: 29
          },
          end: {
            line: 201,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 201,
            column: 29
          },
          end: {
            line: 201,
            column: 44
          }
        }, {
          start: {
            line: 201,
            column: 48
          },
          end: {
            line: 201,
            column: 50
          }
        }],
        line: 201
      },
      "36": {
        loc: {
          start: {
            line: 203,
            column: 22
          },
          end: {
            line: 211,
            column: 20
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 203,
            column: 59
          },
          end: {
            line: 211,
            column: 15
          }
        }, {
          start: {
            line: 211,
            column: 18
          },
          end: {
            line: 211,
            column: 20
          }
        }],
        line: 203
      },
      "37": {
        loc: {
          start: {
            line: 204,
            column: 22
          },
          end: {
            line: 204,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 204,
            column: 22
          },
          end: {
            line: 204,
            column: 31
          }
        }, {
          start: {
            line: 204,
            column: 35
          },
          end: {
            line: 204,
            column: 44
          }
        }],
        line: 204
      },
      "38": {
        loc: {
          start: {
            line: 205,
            column: 29
          },
          end: {
            line: 205,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 205,
            column: 29
          },
          end: {
            line: 205,
            column: 45
          }
        }, {
          start: {
            line: 205,
            column: 49
          },
          end: {
            line: 205,
            column: 51
          }
        }],
        line: 205
      },
      "39": {
        loc: {
          start: {
            line: 206,
            column: 30
          },
          end: {
            line: 206,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 206,
            column: 65
          },
          end: {
            line: 206,
            column: 82
          }
        }, {
          start: {
            line: 206,
            column: 85
          },
          end: {
            line: 206,
            column: 87
          }
        }],
        line: 206
      },
      "40": {
        loc: {
          start: {
            line: 207,
            column: 21
          },
          end: {
            line: 207,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 207,
            column: 21
          },
          end: {
            line: 207,
            column: 29
          }
        }, {
          start: {
            line: 207,
            column: 33
          },
          end: {
            line: 207,
            column: 35
          }
        }],
        line: 207
      },
      "41": {
        loc: {
          start: {
            line: 208,
            column: 24
          },
          end: {
            line: 208,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 208,
            column: 24
          },
          end: {
            line: 208,
            column: 35
          }
        }, {
          start: {
            line: 208,
            column: 39
          },
          end: {
            line: 208,
            column: 41
          }
        }],
        line: 208
      },
      "42": {
        loc: {
          start: {
            line: 209,
            column: 27
          },
          end: {
            line: 209,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 209,
            column: 27
          },
          end: {
            line: 209,
            column: 41
          }
        }, {
          start: {
            line: 209,
            column: 45
          },
          end: {
            line: 209,
            column: 47
          }
        }],
        line: 209
      },
      "43": {
        loc: {
          start: {
            line: 210,
            column: 25
          },
          end: {
            line: 210,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 210,
            column: 25
          },
          end: {
            line: 210,
            column: 37
          }
        }, {
          start: {
            line: 210,
            column: 41
          },
          end: {
            line: 210,
            column: 43
          }
        }],
        line: 210
      },
      "44": {
        loc: {
          start: {
            line: 224,
            column: 14
          },
          end: {
            line: 224,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 224,
            column: 14
          },
          end: {
            line: 224,
            column: 25
          }
        }, {
          start: {
            line: 224,
            column: 29
          },
          end: {
            line: 224,
            column: 43
          }
        }, {
          start: {
            line: 224,
            column: 47
          },
          end: {
            line: 224,
            column: 49
          }
        }],
        line: 224
      },
      "45": {
        loc: {
          start: {
            line: 225,
            column: 15
          },
          end: {
            line: 225,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 225,
            column: 15
          },
          end: {
            line: 225,
            column: 27
          }
        }, {
          start: {
            line: 225,
            column: 31
          },
          end: {
            line: 225,
            column: 46
          }
        }, {
          start: {
            line: 225,
            column: 50
          },
          end: {
            line: 225,
            column: 52
          }
        }],
        line: 225
      },
      "46": {
        loc: {
          start: {
            line: 226,
            column: 15
          },
          end: {
            line: 226,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 226,
            column: 15
          },
          end: {
            line: 226,
            column: 27
          }
        }, {
          start: {
            line: 226,
            column: 31
          },
          end: {
            line: 226,
            column: 46
          }
        }, {
          start: {
            line: 226,
            column: 50
          },
          end: {
            line: 226,
            column: 52
          }
        }],
        line: 226
      },
      "47": {
        loc: {
          start: {
            line: 227,
            column: 17
          },
          end: {
            line: 227,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 227,
            column: 17
          },
          end: {
            line: 227,
            column: 31
          }
        }, {
          start: {
            line: 227,
            column: 35
          },
          end: {
            line: 227,
            column: 37
          }
        }],
        line: 227
      },
      "48": {
        loc: {
          start: {
            line: 229,
            column: 20
          },
          end: {
            line: 229,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 229,
            column: 51
          },
          end: {
            line: 229,
            column: 68
          }
        }, {
          start: {
            line: 229,
            column: 71
          },
          end: {
            line: 229,
            column: 91
          }
        }],
        line: 229
      },
      "49": {
        loc: {
          start: {
            line: 230,
            column: 19
          },
          end: {
            line: 230,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 230,
            column: 49
          },
          end: {
            line: 230,
            column: 65
          }
        }, {
          start: {
            line: 230,
            column: 68
          },
          end: {
            line: 230,
            column: 87
          }
        }],
        line: 230
      },
      "50": {
        loc: {
          start: {
            line: 231,
            column: 18
          },
          end: {
            line: 231,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 231,
            column: 18
          },
          end: {
            line: 231,
            column: 33
          }
        }, {
          start: {
            line: 231,
            column: 37
          },
          end: {
            line: 231,
            column: 39
          }
        }],
        line: 231
      },
      "51": {
        loc: {
          start: {
            line: 257,
            column: 12
          },
          end: {
            line: 257,
            column: 134
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 257,
            column: 13
          },
          end: {
            line: 257,
            column: 113
          }
        }, {
          start: {
            line: 257,
            column: 118
          },
          end: {
            line: 257,
            column: 134
          }
        }],
        line: 257
      },
      "52": {
        loc: {
          start: {
            line: 257,
            column: 13
          },
          end: {
            line: 257,
            column: 113
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 257,
            column: 68
          },
          end: {
            line: 257,
            column: 74
          }
        }, {
          start: {
            line: 257,
            column: 77
          },
          end: {
            line: 257,
            column: 113
          }
        }],
        line: 257
      },
      "53": {
        loc: {
          start: {
            line: 257,
            column: 13
          },
          end: {
            line: 257,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 257,
            column: 13
          },
          end: {
            line: 257,
            column: 48
          }
        }, {
          start: {
            line: 257,
            column: 52
          },
          end: {
            line: 257,
            column: 65
          }
        }],
        line: 257
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0, 0],
      "45": [0, 0, 0],
      "46": [0, 0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/utils/resume-parser.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/utils/resume-parser.ts"],
      sourcesContent: ["import { WorkExperience, Education, Project } from '../services/azure-ai-service';\nimport { azureOpenAIService } from '../services/azure-openai-service';\n\nexport interface ParsedResumeData {\n  name?: string;\n  email?: string;\n  phone?: string;\n  skills: string[];\n  experience: WorkExperience[];\n  education: Education[];\n  projects?: Project[];\n  summary?: string;\n}\n\n/**\n * Enhanced resume parsing using both regex and AI\n */\nexport async function parseResumeText(text: string): Promise<ParsedResumeData> {\n  try {\n    // First, try basic regex extraction\n    const basicData = extractBasicInfo(text);\n    \n    // Then, enhance with AI-powered extraction\n    const aiEnhancedData = await extractWithAI(text);\n    \n    // Merge the results, preferring AI data when available\n    return mergeResumeData(basicData, aiEnhancedData);\n  } catch (error) {\n    console.error('Error parsing resume:', error);\n    // Fallback to basic regex parsing\n    return extractBasicInfo(text);\n  }\n}\n\n/**\n * Basic regex-based extraction (fallback)\n */\nfunction extractBasicInfo(text: string): ParsedResumeData {\n  // Extract name (improved patterns)\n  const namePatterns = [\n    /(?:Name[:\\s]+)([A-Z][a-zA-Z]+(?:\\s[A-Z][a-zA-Z]+)*)/i,\n    /^([A-Z][a-zA-Z]+(?:\\s[A-Z][a-zA-Z]+)+)/m, // First line name pattern\n    /([A-Z][a-zA-Z]+\\s+[A-Z][a-zA-Z]+)(?:\\s*\\n|\\s*$)/m, // Two-word name pattern\n  ];\n  \n  let name = '';\n  for (const pattern of namePatterns) {\n    const match = text.match(pattern);\n    if (match) {\n      name = match[1].trim();\n      break;\n    }\n  }\n\n  // Extract email\n  const emailMatch = text.match(/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/);\n  const email = emailMatch ? emailMatch[1] : '';\n\n  // Extract phone\n  const phonePatterns = [\n    /(?:Phone|Tel|Mobile)[:\\s]*([+]?[\\d\\s\\-\\(\\)]{10,})/i,\n    /([+]?[\\d\\s\\-\\(\\)]{10,})(?=\\s|$)/,\n  ];\n  \n  let phone = '';\n  for (const pattern of phonePatterns) {\n    const match = text.match(pattern);\n    if (match) {\n      phone = match[1].trim();\n      break;\n    }\n  }\n\n  // Extract skills with improved patterns\n  const skillsMatch = text.match(/(?:Skills?|Technical Skills?|Core Competencies)[:\\s]*([^]*?)(?=\\n\\s*[A-Z][^:]*:|$)/i);\n  let skills: string[] = [];\n  \n  if (skillsMatch) {\n    skills = skillsMatch[1]\n      .replace(/[\u2022\\-\\*]/g, ',') // Replace bullets with commas\n      .split(/[,\\n]/)\n      .map(skill => skill.trim())\n      .filter(skill => skill.length > 0 && skill.length < 50)\n      .slice(0, 20); // Limit to 20 skills\n  }\n\n  // Extract experience (basic)\n  const experienceMatch = text.match(/(?:Experience|Work Experience|Employment)[:\\s]*([^]*?)(?=\\n\\s*(?:Education|Skills?|Projects?)[:\\s]|$)/i);\n  let experience: WorkExperience[] = [];\n  \n  if (experienceMatch) {\n    const expText = experienceMatch[1];\n    // Try to extract company names and positions (basic pattern)\n    const jobMatches = expText.match(/([A-Z][^,\\n]+(?:Inc\\.|Corp\\.|LLC|Ltd\\.|Company))[,\\s]*([^,\\n]+)/g);\n    \n    if (jobMatches) {\n      experience = jobMatches.slice(0, 5).map(match => {\n        const [company, position = ''] = match.split(/[,\\n]/).map(s => s.trim());\n        return {\n          company: company || 'Unknown Company',\n          position: position || 'Unknown Position',\n          description: expText.substring(0, 200), // First 200 chars as description\n        };\n      });\n    }\n  }\n\n  // Extract education (basic)\n  const educationMatch = text.match(/(?:Education|Academic Background)[:\\s]*([^]*?)(?=\\n\\s*(?:Experience|Skills?|Projects?)[:\\s]|$)/i);\n  let education: Education[] = [];\n  \n  if (educationMatch) {\n    const eduText = educationMatch[1];\n    const universityMatch = eduText.match(/([^,\\n]*(?:University|College|Institute|School))[,\\s]*([^,\\n]*)/i);\n    \n    if (universityMatch) {\n      education = [{\n        institution: universityMatch[1].trim(),\n        degree: universityMatch[2]?.trim() || 'Degree',\n        field: 'Field of Study',\n      }];\n    }\n  }\n\n  return {\n    name,\n    email,\n    phone,\n    skills,\n    experience,\n    education,\n    projects: [], // Will be enhanced by AI\n  };\n}\n\n/**\n * AI-powered extraction using Azure OpenAI\n */\nasync function extractWithAI(text: string): Promise<ParsedResumeData> {\n  try {\n    // Ensure Azure OpenAI service is initialized\n    await azureOpenAIService.initialize();\n    \n    const prompt = `\nExtract structured information from this resume text and return it in valid JSON format. Follow this exact structure:\n\n{\n  \"name\": \"Full Name\",\n  \"email\": \"email@example.com\",\n  \"phone\": \"phone number\",\n  \"summary\": \"Professional summary or objective\",\n  \"skills\": [\"skill1\", \"skill2\", \"skill3\"],\n  \"experience\": [\n    {\n      \"company\": \"Company Name\",\n      \"position\": \"Job Title\",\n      \"startDate\": \"MM/YYYY or YYYY\",\n      \"endDate\": \"MM/YYYY or YYYY or Present\",\n      \"isCurrent\": false,\n      \"description\": \"Job description\",\n      \"achievements\": [\"achievement1\", \"achievement2\"],\n      \"technologies\": [\"tech1\", \"tech2\"]\n    }\n  ],\n  \"education\": [\n    {\n      \"institution\": \"School Name\",\n      \"degree\": \"Degree Type\",\n      \"field\": \"Field of Study\",\n      \"startDate\": \"YYYY\",\n      \"endDate\": \"YYYY\",\n      \"gpa\": 3.5\n    }\n  ],\n  \"projects\": [\n    {\n      \"name\": \"Project Name\",\n      \"description\": \"Project description\",\n      \"technologies\": [\"tech1\", \"tech2\"],\n      \"url\": \"project-url\",\n      \"github\": \"github-url\"\n    }\n  ]\n}\n\nRules:\n- Return ONLY valid JSON, no other text\n- If information is not available, use null or empty array\n- Extract actual data, don't make up information\n- For dates, use the format found in resume or standardize to MM/YYYY\n- For current positions, set isCurrent to true and endDate to null\n- Extract all skills mentioned (technical, soft skills, tools, technologies)\n- Include quantifiable achievements where mentioned\n\nResume text:\n${text}\n`;\n\n    const response = await azureOpenAIService.generateCompletion(prompt);\n    const jsonText = response.trim();\n    \n    // Try to parse the JSON response\n    const parsedData = JSON.parse(jsonText);\n    \n    // Validate and clean the data\n    return {\n      name: parsedData.name || '',\n      email: parsedData.email || '',\n      phone: parsedData.phone || '',\n      summary: parsedData.summary || '',\n      skills: Array.isArray(parsedData.skills) ? parsedData.skills.slice(0, 30) : [],\n      experience: Array.isArray(parsedData.experience) ? parsedData.experience.slice(0, 10).map((exp: any) => ({\n        company: exp.company || 'Unknown Company',\n        position: exp.position || 'Unknown Position',\n        startDate: exp.startDate || '',\n        endDate: exp.endDate || '',\n        isCurrent: Boolean(exp.isCurrent),\n        description: exp.description || '',\n        achievements: Array.isArray(exp.achievements) ? exp.achievements : [],\n        technologies: Array.isArray(exp.technologies) ? exp.technologies : [],\n      })) : [],\n      education: Array.isArray(parsedData.education) ? parsedData.education.slice(0, 5).map((edu: any) => ({\n        institution: edu.institution || 'Unknown Institution',\n        degree: edu.degree || 'Degree',\n        field: edu.field || 'Field of Study',\n        startDate: edu.startDate || '',\n        endDate: edu.endDate || '',\n        gpa: typeof edu.gpa === 'number' ? edu.gpa : undefined,\n        description: edu.description || '',\n      })) : [],\n      projects: Array.isArray(parsedData.projects) ? parsedData.projects.slice(0, 10).map((proj: any) => ({\n        name: proj.name || 'Project',\n        description: proj.description || '',\n        technologies: Array.isArray(proj.technologies) ? proj.technologies : [],\n        url: proj.url || '',\n        github: proj.github || '',\n        startDate: proj.startDate || '',\n        endDate: proj.endDate || '',\n      })) : [],\n    };\n    \n  } catch (error) {\n    console.error('AI extraction failed:', error);\n    throw error;\n  }\n}\n\n/**\n * Merge basic regex data with AI-enhanced data\n */\nfunction mergeResumeData(basicData: ParsedResumeData, aiData: ParsedResumeData): ParsedResumeData {\n  return {\n    name: aiData.name || basicData.name || '',\n    email: aiData.email || basicData.email || '',\n    phone: aiData.phone || basicData.phone || '',\n    summary: aiData.summary || '',\n    skills: [...new Set([...basicData.skills, ...aiData.skills])].slice(0, 30), // Merge and dedupe\n    experience: aiData.experience.length > 0 ? aiData.experience : basicData.experience,\n    education: aiData.education.length > 0 ? aiData.education : basicData.education,\n    projects: aiData.projects || [],\n  };\n}\n\n/**\n * Generate interview questions based on parsed resume data\n */\nexport async function generateInterviewQuestions(resumeData: ParsedResumeData): Promise<string[]> {\n  try {\n    // Ensure Azure OpenAI service is initialized\n    await azureOpenAIService.initialize();\n    \n    const prompt = `\nBased on the following resume information, generate 8-10 relevant interview questions that would be appropriate for this candidate. \n\nFocus on:\n- Technical skills mentioned\n- Work experience and achievements\n- Projects and technologies used\n- Career progression and goals\n- Behavioral questions based on their background\n\nResume Information:\nName: ${resumeData.name}\nSkills: ${resumeData.skills.join(', ')}\nExperience: ${resumeData.experience.map(exp => `${exp.position} at ${exp.company}`).join('; ')}\nEducation: ${resumeData.education.map(edu => `${edu.degree} in ${edu.field} from ${edu.institution}`).join('; ')}\nProjects: ${resumeData.projects?.map(proj => proj.name).join(', ') || 'None mentioned'}\n\nReturn only the questions, one per line, numbered 1-10. No additional text or explanations.\n`;\n\n    const questionsText = await azureOpenAIService.generateCompletion(prompt);\n    \n    const questions = questionsText\n      .split('\\n')\n      .map(q => q.trim())\n      .filter(q => q.length > 0)\n      .map(q => q.replace(/^\\d+\\.?\\s*/, '')) // Remove numbering\n      .filter(q => q.length > 10) // Filter out very short responses\n      .slice(0, 10); // Limit to 10 questions\n\n    return questions;\n  } catch (error) {\n    console.error('Error generating interview questions:', error);\n    // Return default questions as fallback\n    return [\n      'Tell me about yourself and your background.',\n      'What interests you most about this position?',\n      'Describe your experience with the technologies mentioned in your resume.',\n      'Tell me about a challenging project you worked on.',\n      'How do you stay updated with new technologies in your field?',\n      'Describe a time when you had to work under pressure.',\n      'What are your career goals for the next few years?',\n      'How do you approach problem-solving in your work?'\n    ];\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "94564416a2e07511f849df6a3669d825a549ab62"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1pxl161w72 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1pxl161w72();
cov_1pxl161w72().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1pxl161w72().s[1]++;
exports.parseResumeText = parseResumeText;
/* istanbul ignore next */
cov_1pxl161w72().s[2]++;
exports.generateInterviewQuestions = generateInterviewQuestions;
const azure_openai_service_1 =
/* istanbul ignore next */
(cov_1pxl161w72().s[3]++, require("../services/azure-openai-service"));
/**
 * Enhanced resume parsing using both regex and AI
 */
async function parseResumeText(text) {
  /* istanbul ignore next */
  cov_1pxl161w72().f[0]++;
  cov_1pxl161w72().s[4]++;
  try {
    // First, try basic regex extraction
    const basicData =
    /* istanbul ignore next */
    (cov_1pxl161w72().s[5]++, extractBasicInfo(text));
    // Then, enhance with AI-powered extraction
    const aiEnhancedData =
    /* istanbul ignore next */
    (cov_1pxl161w72().s[6]++, await extractWithAI(text));
    // Merge the results, preferring AI data when available
    /* istanbul ignore next */
    cov_1pxl161w72().s[7]++;
    return mergeResumeData(basicData, aiEnhancedData);
  } catch (error) {
    /* istanbul ignore next */
    cov_1pxl161w72().s[8]++;
    console.error('Error parsing resume:', error);
    // Fallback to basic regex parsing
    /* istanbul ignore next */
    cov_1pxl161w72().s[9]++;
    return extractBasicInfo(text);
  }
}
/**
 * Basic regex-based extraction (fallback)
 */
function extractBasicInfo(text) {
  /* istanbul ignore next */
  cov_1pxl161w72().f[1]++;
  var _a;
  // Extract name (improved patterns)
  const namePatterns =
  /* istanbul ignore next */
  (cov_1pxl161w72().s[10]++, [/(?:Name[:\s]+)([A-Z][a-zA-Z]+(?:\s[A-Z][a-zA-Z]+)*)/i, /^([A-Z][a-zA-Z]+(?:\s[A-Z][a-zA-Z]+)+)/m,
  // First line name pattern
  /([A-Z][a-zA-Z]+\s+[A-Z][a-zA-Z]+)(?:\s*\n|\s*$)/m // Two-word name pattern
  ]);
  let name =
  /* istanbul ignore next */
  (cov_1pxl161w72().s[11]++, '');
  /* istanbul ignore next */
  cov_1pxl161w72().s[12]++;
  for (const pattern of namePatterns) {
    const match =
    /* istanbul ignore next */
    (cov_1pxl161w72().s[13]++, text.match(pattern));
    /* istanbul ignore next */
    cov_1pxl161w72().s[14]++;
    if (match) {
      /* istanbul ignore next */
      cov_1pxl161w72().b[0][0]++;
      cov_1pxl161w72().s[15]++;
      name = match[1].trim();
      /* istanbul ignore next */
      cov_1pxl161w72().s[16]++;
      break;
    } else
    /* istanbul ignore next */
    {
      cov_1pxl161w72().b[0][1]++;
    }
  }
  // Extract email
  const emailMatch =
  /* istanbul ignore next */
  (cov_1pxl161w72().s[17]++, text.match(/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/));
  const email =
  /* istanbul ignore next */
  (cov_1pxl161w72().s[18]++, emailMatch ?
  /* istanbul ignore next */
  (cov_1pxl161w72().b[1][0]++, emailMatch[1]) :
  /* istanbul ignore next */
  (cov_1pxl161w72().b[1][1]++, ''));
  // Extract phone
  const phonePatterns =
  /* istanbul ignore next */
  (cov_1pxl161w72().s[19]++, [/(?:Phone|Tel|Mobile)[:\s]*([+]?[\d\s\-\(\)]{10,})/i, /([+]?[\d\s\-\(\)]{10,})(?=\s|$)/]);
  let phone =
  /* istanbul ignore next */
  (cov_1pxl161w72().s[20]++, '');
  /* istanbul ignore next */
  cov_1pxl161w72().s[21]++;
  for (const pattern of phonePatterns) {
    const match =
    /* istanbul ignore next */
    (cov_1pxl161w72().s[22]++, text.match(pattern));
    /* istanbul ignore next */
    cov_1pxl161w72().s[23]++;
    if (match) {
      /* istanbul ignore next */
      cov_1pxl161w72().b[2][0]++;
      cov_1pxl161w72().s[24]++;
      phone = match[1].trim();
      /* istanbul ignore next */
      cov_1pxl161w72().s[25]++;
      break;
    } else
    /* istanbul ignore next */
    {
      cov_1pxl161w72().b[2][1]++;
    }
  }
  // Extract skills with improved patterns
  const skillsMatch =
  /* istanbul ignore next */
  (cov_1pxl161w72().s[26]++, text.match(/(?:Skills?|Technical Skills?|Core Competencies)[:\s]*([^]*?)(?=\n\s*[A-Z][^:]*:|$)/i));
  let skills =
  /* istanbul ignore next */
  (cov_1pxl161w72().s[27]++, []);
  /* istanbul ignore next */
  cov_1pxl161w72().s[28]++;
  if (skillsMatch) {
    /* istanbul ignore next */
    cov_1pxl161w72().b[3][0]++;
    cov_1pxl161w72().s[29]++;
    skills = skillsMatch[1].replace(/[•\-\*]/g, ',') // Replace bullets with commas
    .split(/[,\n]/).map(skill => {
      /* istanbul ignore next */
      cov_1pxl161w72().f[2]++;
      cov_1pxl161w72().s[30]++;
      return skill.trim();
    }).filter(skill => {
      /* istanbul ignore next */
      cov_1pxl161w72().f[3]++;
      cov_1pxl161w72().s[31]++;
      return /* istanbul ignore next */(cov_1pxl161w72().b[4][0]++, skill.length > 0) &&
      /* istanbul ignore next */
      (cov_1pxl161w72().b[4][1]++, skill.length < 50);
    }).slice(0, 20); // Limit to 20 skills
  } else
  /* istanbul ignore next */
  {
    cov_1pxl161w72().b[3][1]++;
  }
  // Extract experience (basic)
  const experienceMatch =
  /* istanbul ignore next */
  (cov_1pxl161w72().s[32]++, text.match(/(?:Experience|Work Experience|Employment)[:\s]*([^]*?)(?=\n\s*(?:Education|Skills?|Projects?)[:\s]|$)/i));
  let experience =
  /* istanbul ignore next */
  (cov_1pxl161w72().s[33]++, []);
  /* istanbul ignore next */
  cov_1pxl161w72().s[34]++;
  if (experienceMatch) {
    /* istanbul ignore next */
    cov_1pxl161w72().b[5][0]++;
    const expText =
    /* istanbul ignore next */
    (cov_1pxl161w72().s[35]++, experienceMatch[1]);
    // Try to extract company names and positions (basic pattern)
    const jobMatches =
    /* istanbul ignore next */
    (cov_1pxl161w72().s[36]++, expText.match(/([A-Z][^,\n]+(?:Inc\.|Corp\.|LLC|Ltd\.|Company))[,\s]*([^,\n]+)/g));
    /* istanbul ignore next */
    cov_1pxl161w72().s[37]++;
    if (jobMatches) {
      /* istanbul ignore next */
      cov_1pxl161w72().b[6][0]++;
      cov_1pxl161w72().s[38]++;
      experience = jobMatches.slice(0, 5).map(match => {
        /* istanbul ignore next */
        cov_1pxl161w72().f[4]++;
        const [company, position =
        /* istanbul ignore next */
        (cov_1pxl161w72().b[7][0]++, '')] =
        /* istanbul ignore next */
        (cov_1pxl161w72().s[39]++, match.split(/[,\n]/).map(s => {
          /* istanbul ignore next */
          cov_1pxl161w72().f[5]++;
          cov_1pxl161w72().s[40]++;
          return s.trim();
        }));
        /* istanbul ignore next */
        cov_1pxl161w72().s[41]++;
        return {
          company:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[8][0]++, company) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[8][1]++, 'Unknown Company'),
          position:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[9][0]++, position) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[9][1]++, 'Unknown Position'),
          description: expText.substring(0, 200) // First 200 chars as description
        };
      });
    } else
    /* istanbul ignore next */
    {
      cov_1pxl161w72().b[6][1]++;
    }
  } else
  /* istanbul ignore next */
  {
    cov_1pxl161w72().b[5][1]++;
  }
  // Extract education (basic)
  const educationMatch =
  /* istanbul ignore next */
  (cov_1pxl161w72().s[42]++, text.match(/(?:Education|Academic Background)[:\s]*([^]*?)(?=\n\s*(?:Experience|Skills?|Projects?)[:\s]|$)/i));
  let education =
  /* istanbul ignore next */
  (cov_1pxl161w72().s[43]++, []);
  /* istanbul ignore next */
  cov_1pxl161w72().s[44]++;
  if (educationMatch) {
    /* istanbul ignore next */
    cov_1pxl161w72().b[10][0]++;
    const eduText =
    /* istanbul ignore next */
    (cov_1pxl161w72().s[45]++, educationMatch[1]);
    const universityMatch =
    /* istanbul ignore next */
    (cov_1pxl161w72().s[46]++, eduText.match(/([^,\n]*(?:University|College|Institute|School))[,\s]*([^,\n]*)/i));
    /* istanbul ignore next */
    cov_1pxl161w72().s[47]++;
    if (universityMatch) {
      /* istanbul ignore next */
      cov_1pxl161w72().b[11][0]++;
      cov_1pxl161w72().s[48]++;
      education = [{
        institution: universityMatch[1].trim(),
        degree:
        /* istanbul ignore next */
        (cov_1pxl161w72().b[12][0]++,
        /* istanbul ignore next */
        (cov_1pxl161w72().b[14][0]++, (_a = universityMatch[2]) === null) ||
        /* istanbul ignore next */
        (cov_1pxl161w72().b[14][1]++, _a === void 0) ?
        /* istanbul ignore next */
        (cov_1pxl161w72().b[13][0]++, void 0) :
        /* istanbul ignore next */
        (cov_1pxl161w72().b[13][1]++, _a.trim())) ||
        /* istanbul ignore next */
        (cov_1pxl161w72().b[12][1]++, 'Degree'),
        field: 'Field of Study'
      }];
    } else
    /* istanbul ignore next */
    {
      cov_1pxl161w72().b[11][1]++;
    }
  } else
  /* istanbul ignore next */
  {
    cov_1pxl161w72().b[10][1]++;
  }
  cov_1pxl161w72().s[49]++;
  return {
    name,
    email,
    phone,
    skills,
    experience,
    education,
    projects: [] // Will be enhanced by AI
  };
}
/**
 * AI-powered extraction using Azure OpenAI
 */
async function extractWithAI(text) {
  /* istanbul ignore next */
  cov_1pxl161w72().f[6]++;
  cov_1pxl161w72().s[50]++;
  try {
    /* istanbul ignore next */
    cov_1pxl161w72().s[51]++;
    // Ensure Azure OpenAI service is initialized
    await azure_openai_service_1.azureOpenAIService.initialize();
    const prompt =
    /* istanbul ignore next */
    (cov_1pxl161w72().s[52]++, `
Extract structured information from this resume text and return it in valid JSON format. Follow this exact structure:

{
  "name": "Full Name",
  "email": "email@example.com",
  "phone": "phone number",
  "summary": "Professional summary or objective",
  "skills": ["skill1", "skill2", "skill3"],
  "experience": [
    {
      "company": "Company Name",
      "position": "Job Title",
      "startDate": "MM/YYYY or YYYY",
      "endDate": "MM/YYYY or YYYY or Present",
      "isCurrent": false,
      "description": "Job description",
      "achievements": ["achievement1", "achievement2"],
      "technologies": ["tech1", "tech2"]
    }
  ],
  "education": [
    {
      "institution": "School Name",
      "degree": "Degree Type",
      "field": "Field of Study",
      "startDate": "YYYY",
      "endDate": "YYYY",
      "gpa": 3.5
    }
  ],
  "projects": [
    {
      "name": "Project Name",
      "description": "Project description",
      "technologies": ["tech1", "tech2"],
      "url": "project-url",
      "github": "github-url"
    }
  ]
}

Rules:
- Return ONLY valid JSON, no other text
- If information is not available, use null or empty array
- Extract actual data, don't make up information
- For dates, use the format found in resume or standardize to MM/YYYY
- For current positions, set isCurrent to true and endDate to null
- Extract all skills mentioned (technical, soft skills, tools, technologies)
- Include quantifiable achievements where mentioned

Resume text:
${text}
`);
    const response =
    /* istanbul ignore next */
    (cov_1pxl161w72().s[53]++, await azure_openai_service_1.azureOpenAIService.generateCompletion(prompt));
    const jsonText =
    /* istanbul ignore next */
    (cov_1pxl161w72().s[54]++, response.trim());
    // Try to parse the JSON response
    const parsedData =
    /* istanbul ignore next */
    (cov_1pxl161w72().s[55]++, JSON.parse(jsonText));
    // Validate and clean the data
    /* istanbul ignore next */
    cov_1pxl161w72().s[56]++;
    return {
      name:
      /* istanbul ignore next */
      (cov_1pxl161w72().b[15][0]++, parsedData.name) ||
      /* istanbul ignore next */
      (cov_1pxl161w72().b[15][1]++, ''),
      email:
      /* istanbul ignore next */
      (cov_1pxl161w72().b[16][0]++, parsedData.email) ||
      /* istanbul ignore next */
      (cov_1pxl161w72().b[16][1]++, ''),
      phone:
      /* istanbul ignore next */
      (cov_1pxl161w72().b[17][0]++, parsedData.phone) ||
      /* istanbul ignore next */
      (cov_1pxl161w72().b[17][1]++, ''),
      summary:
      /* istanbul ignore next */
      (cov_1pxl161w72().b[18][0]++, parsedData.summary) ||
      /* istanbul ignore next */
      (cov_1pxl161w72().b[18][1]++, ''),
      skills: Array.isArray(parsedData.skills) ?
      /* istanbul ignore next */
      (cov_1pxl161w72().b[19][0]++, parsedData.skills.slice(0, 30)) :
      /* istanbul ignore next */
      (cov_1pxl161w72().b[19][1]++, []),
      experience: Array.isArray(parsedData.experience) ?
      /* istanbul ignore next */
      (cov_1pxl161w72().b[20][0]++, parsedData.experience.slice(0, 10).map(exp => {
        /* istanbul ignore next */
        cov_1pxl161w72().f[7]++;
        cov_1pxl161w72().s[57]++;
        return {
          company:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[21][0]++, exp.company) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[21][1]++, 'Unknown Company'),
          position:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[22][0]++, exp.position) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[22][1]++, 'Unknown Position'),
          startDate:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[23][0]++, exp.startDate) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[23][1]++, ''),
          endDate:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[24][0]++, exp.endDate) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[24][1]++, ''),
          isCurrent: Boolean(exp.isCurrent),
          description:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[25][0]++, exp.description) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[25][1]++, ''),
          achievements: Array.isArray(exp.achievements) ?
          /* istanbul ignore next */
          (cov_1pxl161w72().b[26][0]++, exp.achievements) :
          /* istanbul ignore next */
          (cov_1pxl161w72().b[26][1]++, []),
          technologies: Array.isArray(exp.technologies) ?
          /* istanbul ignore next */
          (cov_1pxl161w72().b[27][0]++, exp.technologies) :
          /* istanbul ignore next */
          (cov_1pxl161w72().b[27][1]++, [])
        };
      })) :
      /* istanbul ignore next */
      (cov_1pxl161w72().b[20][1]++, []),
      education: Array.isArray(parsedData.education) ?
      /* istanbul ignore next */
      (cov_1pxl161w72().b[28][0]++, parsedData.education.slice(0, 5).map(edu => {
        /* istanbul ignore next */
        cov_1pxl161w72().f[8]++;
        cov_1pxl161w72().s[58]++;
        return {
          institution:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[29][0]++, edu.institution) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[29][1]++, 'Unknown Institution'),
          degree:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[30][0]++, edu.degree) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[30][1]++, 'Degree'),
          field:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[31][0]++, edu.field) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[31][1]++, 'Field of Study'),
          startDate:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[32][0]++, edu.startDate) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[32][1]++, ''),
          endDate:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[33][0]++, edu.endDate) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[33][1]++, ''),
          gpa: typeof edu.gpa === 'number' ?
          /* istanbul ignore next */
          (cov_1pxl161w72().b[34][0]++, edu.gpa) :
          /* istanbul ignore next */
          (cov_1pxl161w72().b[34][1]++, undefined),
          description:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[35][0]++, edu.description) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[35][1]++, '')
        };
      })) :
      /* istanbul ignore next */
      (cov_1pxl161w72().b[28][1]++, []),
      projects: Array.isArray(parsedData.projects) ?
      /* istanbul ignore next */
      (cov_1pxl161w72().b[36][0]++, parsedData.projects.slice(0, 10).map(proj => {
        /* istanbul ignore next */
        cov_1pxl161w72().f[9]++;
        cov_1pxl161w72().s[59]++;
        return {
          name:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[37][0]++, proj.name) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[37][1]++, 'Project'),
          description:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[38][0]++, proj.description) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[38][1]++, ''),
          technologies: Array.isArray(proj.technologies) ?
          /* istanbul ignore next */
          (cov_1pxl161w72().b[39][0]++, proj.technologies) :
          /* istanbul ignore next */
          (cov_1pxl161w72().b[39][1]++, []),
          url:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[40][0]++, proj.url) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[40][1]++, ''),
          github:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[41][0]++, proj.github) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[41][1]++, ''),
          startDate:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[42][0]++, proj.startDate) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[42][1]++, ''),
          endDate:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[43][0]++, proj.endDate) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[43][1]++, '')
        };
      })) :
      /* istanbul ignore next */
      (cov_1pxl161w72().b[36][1]++, [])
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_1pxl161w72().s[60]++;
    console.error('AI extraction failed:', error);
    /* istanbul ignore next */
    cov_1pxl161w72().s[61]++;
    throw error;
  }
}
/**
 * Merge basic regex data with AI-enhanced data
 */
function mergeResumeData(basicData, aiData) {
  /* istanbul ignore next */
  cov_1pxl161w72().f[10]++;
  cov_1pxl161w72().s[62]++;
  return {
    name:
    /* istanbul ignore next */
    (cov_1pxl161w72().b[44][0]++, aiData.name) ||
    /* istanbul ignore next */
    (cov_1pxl161w72().b[44][1]++, basicData.name) ||
    /* istanbul ignore next */
    (cov_1pxl161w72().b[44][2]++, ''),
    email:
    /* istanbul ignore next */
    (cov_1pxl161w72().b[45][0]++, aiData.email) ||
    /* istanbul ignore next */
    (cov_1pxl161w72().b[45][1]++, basicData.email) ||
    /* istanbul ignore next */
    (cov_1pxl161w72().b[45][2]++, ''),
    phone:
    /* istanbul ignore next */
    (cov_1pxl161w72().b[46][0]++, aiData.phone) ||
    /* istanbul ignore next */
    (cov_1pxl161w72().b[46][1]++, basicData.phone) ||
    /* istanbul ignore next */
    (cov_1pxl161w72().b[46][2]++, ''),
    summary:
    /* istanbul ignore next */
    (cov_1pxl161w72().b[47][0]++, aiData.summary) ||
    /* istanbul ignore next */
    (cov_1pxl161w72().b[47][1]++, ''),
    skills: [...new Set([...basicData.skills, ...aiData.skills])].slice(0, 30),
    // Merge and dedupe
    experience: aiData.experience.length > 0 ?
    /* istanbul ignore next */
    (cov_1pxl161w72().b[48][0]++, aiData.experience) :
    /* istanbul ignore next */
    (cov_1pxl161w72().b[48][1]++, basicData.experience),
    education: aiData.education.length > 0 ?
    /* istanbul ignore next */
    (cov_1pxl161w72().b[49][0]++, aiData.education) :
    /* istanbul ignore next */
    (cov_1pxl161w72().b[49][1]++, basicData.education),
    projects:
    /* istanbul ignore next */
    (cov_1pxl161w72().b[50][0]++, aiData.projects) ||
    /* istanbul ignore next */
    (cov_1pxl161w72().b[50][1]++, [])
  };
}
/**
 * Generate interview questions based on parsed resume data
 */
async function generateInterviewQuestions(resumeData) {
  /* istanbul ignore next */
  cov_1pxl161w72().f[11]++;
  var _a;
  /* istanbul ignore next */
  cov_1pxl161w72().s[63]++;
  try {
    /* istanbul ignore next */
    cov_1pxl161w72().s[64]++;
    // Ensure Azure OpenAI service is initialized
    await azure_openai_service_1.azureOpenAIService.initialize();
    const prompt =
    /* istanbul ignore next */
    (cov_1pxl161w72().s[65]++, `
Based on the following resume information, generate 8-10 relevant interview questions that would be appropriate for this candidate. 

Focus on:
- Technical skills mentioned
- Work experience and achievements
- Projects and technologies used
- Career progression and goals
- Behavioral questions based on their background

Resume Information:
Name: ${resumeData.name}
Skills: ${resumeData.skills.join(', ')}
Experience: ${resumeData.experience.map(exp => {
      /* istanbul ignore next */
      cov_1pxl161w72().f[12]++;
      cov_1pxl161w72().s[66]++;
      return `${exp.position} at ${exp.company}`;
    }).join('; ')}
Education: ${resumeData.education.map(edu => {
      /* istanbul ignore next */
      cov_1pxl161w72().f[13]++;
      cov_1pxl161w72().s[67]++;
      return `${edu.degree} in ${edu.field} from ${edu.institution}`;
    }).join('; ')}
Projects: ${
    /* istanbul ignore next */
    (cov_1pxl161w72().b[51][0]++,
    /* istanbul ignore next */
    (cov_1pxl161w72().b[53][0]++, (_a = resumeData.projects) === null) ||
    /* istanbul ignore next */
    (cov_1pxl161w72().b[53][1]++, _a === void 0) ?
    /* istanbul ignore next */
    (cov_1pxl161w72().b[52][0]++, void 0) :
    /* istanbul ignore next */
    (cov_1pxl161w72().b[52][1]++, _a.map(proj => {
      /* istanbul ignore next */
      cov_1pxl161w72().f[14]++;
      cov_1pxl161w72().s[68]++;
      return proj.name;
    }).join(', '))) ||
    /* istanbul ignore next */
    (cov_1pxl161w72().b[51][1]++, 'None mentioned')}

Return only the questions, one per line, numbered 1-10. No additional text or explanations.
`);
    const questionsText =
    /* istanbul ignore next */
    (cov_1pxl161w72().s[69]++, await azure_openai_service_1.azureOpenAIService.generateCompletion(prompt));
    const questions =
    /* istanbul ignore next */
    (cov_1pxl161w72().s[70]++, questionsText.split('\n').map(q => {
      /* istanbul ignore next */
      cov_1pxl161w72().f[15]++;
      cov_1pxl161w72().s[71]++;
      return q.trim();
    }).filter(q => {
      /* istanbul ignore next */
      cov_1pxl161w72().f[16]++;
      cov_1pxl161w72().s[72]++;
      return q.length > 0;
    }).map(q => {
      /* istanbul ignore next */
      cov_1pxl161w72().f[17]++;
      cov_1pxl161w72().s[73]++;
      return q.replace(/^\d+\.?\s*/, '');
    }) // Remove numbering
    .filter(q => {
      /* istanbul ignore next */
      cov_1pxl161w72().f[18]++;
      cov_1pxl161w72().s[74]++;
      return q.length > 10;
    }) // Filter out very short responses
    .slice(0, 10)); // Limit to 10 questions
    /* istanbul ignore next */
    cov_1pxl161w72().s[75]++;
    return questions;
  } catch (error) {
    /* istanbul ignore next */
    cov_1pxl161w72().s[76]++;
    console.error('Error generating interview questions:', error);
    // Return default questions as fallback
    /* istanbul ignore next */
    cov_1pxl161w72().s[77]++;
    return ['Tell me about yourself and your background.', 'What interests you most about this position?', 'Describe your experience with the technologies mentioned in your resume.', 'Tell me about a challenging project you worked on.', 'How do you stay updated with new technologies in your field?', 'Describe a time when you had to work under pressure.', 'What are your career goals for the next few years?', 'How do you approach problem-solving in your work?'];
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,