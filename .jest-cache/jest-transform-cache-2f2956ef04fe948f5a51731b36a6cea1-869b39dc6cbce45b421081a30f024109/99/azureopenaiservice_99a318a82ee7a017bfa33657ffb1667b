ea1c542e57cb5f9883e3969932cc6abf
"use strict";

/* istanbul ignore next */
function cov_28i4c9m45v() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/services/azure-openai-service.ts";
  var hash = "38d0da06642a5037d09396bd2661ad5a4cc1ffde";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/services/azure-openai-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 65
        }
      },
      "4": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 51
        }
      },
      "5": {
        start: {
          line: 9,
          column: 17
        },
        end: {
          line: 9,
          column: 46
        }
      },
      "6": {
        start: {
          line: 11,
          column: 24
        },
        end: {
          line: 11,
          column: 28
        }
      },
      "7": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 15,
          column: 1
        }
      },
      "8": {
        start: {
          line: 13,
          column: 24
        },
        end: {
          line: 13,
          column: 53
        }
      },
      "9": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 54
        }
      },
      "10": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 27
        }
      },
      "11": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 35
        }
      },
      "12": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 29
        }
      },
      "13": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 38
        }
      },
      "14": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 27,
          column: 10
        }
      },
      "15": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 36,
          column: 9
        }
      },
      "16": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 93
        }
      },
      "17": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 35,
          column: 25
        }
      },
      "18": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 104,
          column: 9
        }
      },
      "19": {
        start: {
          line: 38,
          column: 28
        },
        end: {
          line: 38,
          column: 53
        }
      },
      "20": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 42,
          column: 13
        }
      },
      "21": {
        start: {
          line: 40,
          column: 16
        },
        end: {
          line: 40,
          column: 74
        }
      },
      "22": {
        start: {
          line: 41,
          column: 16
        },
        end: {
          line: 41,
          column: 29
        }
      },
      "23": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 60
        }
      },
      "24": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 51,
          column: 15
        }
      },
      "25": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 99,
          column: 13
        }
      },
      "26": {
        start: {
          line: 54,
          column: 16
        },
        end: {
          line: 54,
          column: 102
        }
      },
      "27": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 59,
          column: 19
        }
      },
      "28": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 60,
          column: 42
        }
      },
      "29": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 61,
          column: 90
        }
      },
      "30": {
        start: {
          line: 62,
          column: 16
        },
        end: {
          line: 62,
          column: 28
        }
      },
      "31": {
        start: {
          line: 65,
          column: 16
        },
        end: {
          line: 65,
          column: 91
        }
      },
      "32": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 70,
          column: 19
        }
      },
      "33": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 97,
          column: 17
        }
      },
      "34": {
        start: {
          line: 72,
          column: 20
        },
        end: {
          line: 72,
          column: 68
        }
      },
      "35": {
        start: {
          line: 73,
          column: 20
        },
        end: {
          line: 73,
          column: 83
        }
      },
      "36": {
        start: {
          line: 74,
          column: 20
        },
        end: {
          line: 74,
          column: 95
        }
      },
      "37": {
        start: {
          line: 76,
          column: 21
        },
        end: {
          line: 97,
          column: 17
        }
      },
      "38": {
        start: {
          line: 77,
          column: 20
        },
        end: {
          line: 77,
          column: 66
        }
      },
      "39": {
        start: {
          line: 78,
          column: 20
        },
        end: {
          line: 78,
          column: 98
        }
      },
      "40": {
        start: {
          line: 79,
          column: 20
        },
        end: {
          line: 79,
          column: 79
        }
      },
      "41": {
        start: {
          line: 80,
          column: 20
        },
        end: {
          line: 80,
          column: 99
        }
      },
      "42": {
        start: {
          line: 81,
          column: 20
        },
        end: {
          line: 81,
          column: 53
        }
      },
      "43": {
        start: {
          line: 82,
          column: 20
        },
        end: {
          line: 82,
          column: 69
        }
      },
      "44": {
        start: {
          line: 83,
          column: 20
        },
        end: {
          line: 83,
          column: 82
        }
      },
      "45": {
        start: {
          line: 84,
          column: 20
        },
        end: {
          line: 84,
          column: 98
        }
      },
      "46": {
        start: {
          line: 85,
          column: 20
        },
        end: {
          line: 85,
          column: 91
        }
      },
      "47": {
        start: {
          line: 86,
          column: 20
        },
        end: {
          line: 86,
          column: 98
        }
      },
      "48": {
        start: {
          line: 88,
          column: 21
        },
        end: {
          line: 97,
          column: 17
        }
      },
      "49": {
        start: {
          line: 89,
          column: 20
        },
        end: {
          line: 89,
          column: 64
        }
      },
      "50": {
        start: {
          line: 90,
          column: 20
        },
        end: {
          line: 90,
          column: 92
        }
      },
      "51": {
        start: {
          line: 91,
          column: 20
        },
        end: {
          line: 91,
          column: 102
        }
      },
      "52": {
        start: {
          line: 94,
          column: 20
        },
        end: {
          line: 94,
          column: 92
        }
      },
      "53": {
        start: {
          line: 95,
          column: 20
        },
        end: {
          line: 95,
          column: 89
        }
      },
      "54": {
        start: {
          line: 96,
          column: 20
        },
        end: {
          line: 96,
          column: 87
        }
      },
      "55": {
        start: {
          line: 98,
          column: 16
        },
        end: {
          line: 98,
          column: 29
        }
      },
      "56": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 81
        }
      },
      "57": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 25
        }
      },
      "58": {
        start: {
          line: 111,
          column: 30
        },
        end: {
          line: 111,
          column: 70
        }
      },
      "59": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 115,
          column: 526
        }
      },
      "60": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 117,
          column: 76
        }
      },
      "61": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 127,
          column: 11
        }
      },
      "62": {
        start: {
          line: 133,
          column: 56
        },
        end: {
          line: 133,
          column: 77
        }
      },
      "63": {
        start: {
          line: 134,
          column: 25
        },
        end: {
          line: 145,
          column: 1
        }
      },
      "64": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 148,
          column: 9
        }
      },
      "65": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 147,
          column: 59
        }
      },
      "66": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 151,
          column: 9
        }
      },
      "67": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 58
        }
      },
      "68": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 154,
          column: 9
        }
      },
      "69": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 62
        }
      },
      "70": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 181,
          column: 9
        }
      },
      "71": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 163,
          column: 58
        }
      },
      "72": {
        start: {
          line: 164,
          column: 16
        },
        end: {
          line: 164,
          column: 22
        }
      },
      "73": {
        start: {
          line: 166,
          column: 16
        },
        end: {
          line: 172,
          column: 70
        }
      },
      "74": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 173,
          column: 22
        }
      },
      "75": {
        start: {
          line: 175,
          column: 16
        },
        end: {
          line: 180,
          column: 56
        }
      },
      "76": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 186,
          column: 69
        }
      },
      "77": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 187,
          column: 26
        }
      },
      "78": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 199,
          column: 11
        }
      },
      "79": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 202,
          column: 9
        }
      },
      "80": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 68
        }
      },
      "81": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 206,
          column: 10
        }
      },
      "82": {
        start: {
          line: 207,
          column: 31
        },
        end: {
          line: 207,
          column: 55
        }
      },
      "83": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 213,
          column: 11
        }
      },
      "84": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 214,
          column: 86
        }
      },
      "85": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 219,
          column: 10
        }
      },
      "86": {
        start: {
          line: 226,
          column: 57
        },
        end: {
          line: 226,
          column: 78
        }
      },
      "87": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 233,
          column: 11
        }
      },
      "88": {
        start: {
          line: 235,
          column: 23
        },
        end: {
          line: 235,
          column: 68
        }
      },
      "89": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 238,
          column: 9
        }
      },
      "90": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 73
        }
      },
      "91": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "92": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 235
        }
      },
      "93": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 68
        }
      },
      "94": {
        start: {
          line: 253,
          column: 56
        },
        end: {
          line: 253,
          column: 77
        }
      },
      "95": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 279,
          column: 9
        }
      },
      "96": {
        start: {
          line: 256,
          column: 16
        },
        end: {
          line: 264,
          column: 17
        }
      },
      "97": {
        start: {
          line: 257,
          column: 20
        },
        end: {
          line: 257,
          column: 178
        }
      },
      "98": {
        start: {
          line: 259,
          column: 21
        },
        end: {
          line: 264,
          column: 17
        }
      },
      "99": {
        start: {
          line: 260,
          column: 20
        },
        end: {
          line: 260,
          column: 188
        }
      },
      "100": {
        start: {
          line: 263,
          column: 20
        },
        end: {
          line: 263,
          column: 143
        }
      },
      "101": {
        start: {
          line: 266,
          column: 16
        },
        end: {
          line: 271,
          column: 17
        }
      },
      "102": {
        start: {
          line: 267,
          column: 20
        },
        end: {
          line: 267,
          column: 160
        }
      },
      "103": {
        start: {
          line: 270,
          column: 20
        },
        end: {
          line: 270,
          column: 172
        }
      },
      "104": {
        start: {
          line: 273,
          column: 16
        },
        end: {
          line: 278,
          column: 17
        }
      },
      "105": {
        start: {
          line: 274,
          column: 20
        },
        end: {
          line: 274,
          column: 136
        }
      },
      "106": {
        start: {
          line: 277,
          column: 20
        },
        end: {
          line: 277,
          column: 138
        }
      },
      "107": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 294,
          column: 11
        }
      },
      "108": {
        start: {
          line: 295,
          column: 8
        },
        end: {
          line: 297,
          column: 9
        }
      },
      "109": {
        start: {
          line: 296,
          column: 12
        },
        end: {
          line: 296,
          column: 68
        }
      },
      "110": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 332,
          column: 9
        }
      },
      "111": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 303,
          column: 15
        }
      },
      "112": {
        start: {
          line: 305,
          column: 45
        },
        end: {
          line: 305,
          column: 87
        }
      },
      "113": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 62
        }
      },
      "114": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 311,
          column: 15
        }
      },
      "115": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 313,
          column: 59
        }
      },
      "116": {
        start: {
          line: 315,
          column: 34
        },
        end: {
          line: 315,
          column: 71
        }
      },
      "117": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 316,
          column: 89
        }
      },
      "118": {
        start: {
          line: 318,
          column: 42
        },
        end: {
          line: 318,
          column: 84
        }
      },
      "119": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 319,
          column: 59
        }
      },
      "120": {
        start: {
          line: 320,
          column: 12
        },
        end: {
          line: 325,
          column: 15
        }
      },
      "121": {
        start: {
          line: 326,
          column: 12
        },
        end: {
          line: 331,
          column: 14
        }
      },
      "122": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 334,
          column: 79
        }
      },
      "123": {
        start: {
          line: 335,
          column: 8
        },
        end: {
          line: 338,
          column: 11
        }
      },
      "124": {
        start: {
          line: 339,
          column: 8
        },
        end: {
          line: 400,
          column: 9
        }
      },
      "125": {
        start: {
          line: 340,
          column: 31
        },
        end: {
          line: 350,
          column: 14
        }
      },
      "126": {
        start: {
          line: 341,
          column: 16
        },
        end: {
          line: 349,
          column: 19
        }
      },
      "127": {
        start: {
          line: 351,
          column: 38
        },
        end: {
          line: 351,
          column: 240
        }
      },
      "128": {
        start: {
          line: 352,
          column: 12
        },
        end: {
          line: 356,
          column: 15
        }
      },
      "129": {
        start: {
          line: 358,
          column: 12
        },
        end: {
          line: 358,
          column: 93
        }
      },
      "130": {
        start: {
          line: 359,
          column: 42
        },
        end: {
          line: 359,
          column: 89
        }
      },
      "131": {
        start: {
          line: 360,
          column: 41
        },
        end: {
          line: 360,
          column: 66
        }
      },
      "132": {
        start: {
          line: 361,
          column: 33
        },
        end: {
          line: 361,
          column: 73
        }
      },
      "133": {
        start: {
          line: 362,
          column: 12
        },
        end: {
          line: 368,
          column: 15
        }
      },
      "134": {
        start: {
          line: 369,
          column: 12
        },
        end: {
          line: 374,
          column: 15
        }
      },
      "135": {
        start: {
          line: 376,
          column: 12
        },
        end: {
          line: 376,
          column: 78
        }
      },
      "136": {
        start: {
          line: 377,
          column: 12
        },
        end: {
          line: 382,
          column: 14
        }
      },
      "137": {
        start: {
          line: 385,
          column: 12
        },
        end: {
          line: 385,
          column: 72
        }
      },
      "138": {
        start: {
          line: 387,
          column: 12
        },
        end: {
          line: 398,
          column: 13
        }
      },
      "139": {
        start: {
          line: 388,
          column: 41
        },
        end: {
          line: 388,
          column: 79
        }
      },
      "140": {
        start: {
          line: 389,
          column: 16
        },
        end: {
          line: 389,
          column: 96
        }
      },
      "141": {
        start: {
          line: 390,
          column: 45
        },
        end: {
          line: 390,
          column: 98
        }
      },
      "142": {
        start: {
          line: 391,
          column: 16
        },
        end: {
          line: 391,
          column: 82
        }
      },
      "143": {
        start: {
          line: 392,
          column: 16
        },
        end: {
          line: 397,
          column: 18
        }
      },
      "144": {
        start: {
          line: 399,
          column: 12
        },
        end: {
          line: 399,
          column: 59
        }
      },
      "145": {
        start: {
          line: 408,
          column: 8
        },
        end: {
          line: 428,
          column: 9
        }
      },
      "146": {
        start: {
          line: 408,
          column: 27
        },
        end: {
          line: 408,
          column: 28
        }
      },
      "147": {
        start: {
          line: 409,
          column: 12
        },
        end: {
          line: 427,
          column: 13
        }
      },
      "148": {
        start: {
          line: 410,
          column: 16
        },
        end: {
          line: 410,
          column: 41
        }
      },
      "149": {
        start: {
          line: 413,
          column: 16
        },
        end: {
          line: 413,
          column: 34
        }
      },
      "150": {
        start: {
          line: 415,
          column: 16
        },
        end: {
          line: 417,
          column: 17
        }
      },
      "151": {
        start: {
          line: 416,
          column: 20
        },
        end: {
          line: 416,
          column: 32
        }
      },
      "152": {
        start: {
          line: 418,
          column: 16
        },
        end: {
          line: 420,
          column: 17
        }
      },
      "153": {
        start: {
          line: 419,
          column: 20
        },
        end: {
          line: 419,
          column: 32
        }
      },
      "154": {
        start: {
          line: 422,
          column: 30
        },
        end: {
          line: 424,
          column: 54
        }
      },
      "155": {
        start: {
          line: 425,
          column: 16
        },
        end: {
          line: 425,
          column: 99
        }
      },
      "156": {
        start: {
          line: 426,
          column: 16
        },
        end: {
          line: 426,
          column: 73
        }
      },
      "157": {
        start: {
          line: 426,
          column: 45
        },
        end: {
          line: 426,
          column: 71
        }
      },
      "158": {
        start: {
          line: 429,
          column: 8
        },
        end: {
          line: 429,
          column: 24
        }
      },
      "159": {
        start: {
          line: 435,
          column: 25
        },
        end: {
          line: 435,
          column: 46
        }
      },
      "160": {
        start: {
          line: 436,
          column: 34
        },
        end: {
          line: 452,
          column: 9
        }
      },
      "161": {
        start: {
          line: 453,
          column: 26
        },
        end: {
          line: 453,
          column: 78
        }
      },
      "162": {
        start: {
          line: 454,
          column: 8
        },
        end: {
          line: 454,
          column: 71
        }
      },
      "163": {
        start: {
          line: 460,
          column: 25
        },
        end: {
          line: 460,
          column: 46
        }
      },
      "164": {
        start: {
          line: 461,
          column: 8
        },
        end: {
          line: 480,
          column: 9
        }
      },
      "165": {
        start: {
          line: 463,
          column: 16
        },
        end: {
          line: 467,
          column: 18
        }
      },
      "166": {
        start: {
          line: 469,
          column: 16
        },
        end: {
          line: 473,
          column: 18
        }
      },
      "167": {
        start: {
          line: 475,
          column: 16
        },
        end: {
          line: 479,
          column: 18
        }
      },
      "168": {
        start: {
          line: 487,
          column: 8
        },
        end: {
          line: 489,
          column: 9
        }
      },
      "169": {
        start: {
          line: 488,
          column: 12
        },
        end: {
          line: 488,
          column: 68
        }
      },
      "170": {
        start: {
          line: 490,
          column: 30
        },
        end: {
          line: 493,
          column: 9
        }
      },
      "171": {
        start: {
          line: 494,
          column: 8
        },
        end: {
          line: 506,
          column: 9
        }
      },
      "172": {
        start: {
          line: 495,
          column: 31
        },
        end: {
          line: 500,
          column: 14
        }
      },
      "173": {
        start: {
          line: 501,
          column: 12
        },
        end: {
          line: 501,
          column: 186
        }
      },
      "174": {
        start: {
          line: 504,
          column: 12
        },
        end: {
          line: 504,
          column: 74
        }
      },
      "175": {
        start: {
          line: 505,
          column: 12
        },
        end: {
          line: 505,
          column: 58
        }
      },
      "176": {
        start: {
          line: 512,
          column: 8
        },
        end: {
          line: 512,
          column: 77
        }
      },
      "177": {
        start: {
          line: 512,
          column: 54
        },
        end: {
          line: 512,
          column: 75
        }
      },
      "178": {
        start: {
          line: 518,
          column: 30
        },
        end: {
          line: 522,
          column: 9
        }
      },
      "179": {
        start: {
          line: 523,
          column: 8
        },
        end: {
          line: 523,
          column: 38
        }
      },
      "180": {
        start: {
          line: 524,
          column: 8
        },
        end: {
          line: 524,
          column: 55
        }
      },
      "181": {
        start: {
          line: 525,
          column: 8
        },
        end: {
          line: 525,
          column: 59
        }
      },
      "182": {
        start: {
          line: 526,
          column: 8
        },
        end: {
          line: 526,
          column: 55
        }
      },
      "183": {
        start: {
          line: 527,
          column: 8
        },
        end: {
          line: 535,
          column: 11
        }
      },
      "184": {
        start: {
          line: 542,
          column: 8
        },
        end: {
          line: 544,
          column: 9
        }
      },
      "185": {
        start: {
          line: 543,
          column: 12
        },
        end: {
          line: 543,
          column: 68
        }
      },
      "186": {
        start: {
          line: 545,
          column: 23
        },
        end: {
          line: 550,
          column: 29
        }
      },
      "187": {
        start: {
          line: 551,
          column: 8
        },
        end: {
          line: 568,
          column: 9
        }
      },
      "188": {
        start: {
          line: 552,
          column: 31
        },
        end: {
          line: 557,
          column: 14
        }
      },
      "189": {
        start: {
          line: 558,
          column: 29
        },
        end: {
          line: 558,
          column: 168
        }
      },
      "190": {
        start: {
          line: 559,
          column: 12
        },
        end: {
          line: 563,
          column: 29
        }
      },
      "191": {
        start: {
          line: 561,
          column: 26
        },
        end: {
          line: 561,
          column: 34
        }
      },
      "192": {
        start: {
          line: 562,
          column: 29
        },
        end: {
          line: 562,
          column: 41
        }
      },
      "193": {
        start: {
          line: 566,
          column: 12
        },
        end: {
          line: 566,
          column: 66
        }
      },
      "194": {
        start: {
          line: 567,
          column: 12
        },
        end: {
          line: 567,
          column: 60
        }
      },
      "195": {
        start: {
          line: 575,
          column: 8
        },
        end: {
          line: 577,
          column: 9
        }
      },
      "196": {
        start: {
          line: 576,
          column: 12
        },
        end: {
          line: 576,
          column: 68
        }
      },
      "197": {
        start: {
          line: 578,
          column: 23
        },
        end: {
          line: 595,
          column: 87
        }
      },
      "198": {
        start: {
          line: 596,
          column: 8
        },
        end: {
          line: 617,
          column: 9
        }
      },
      "199": {
        start: {
          line: 597,
          column: 31
        },
        end: {
          line: 607,
          column: 14
        }
      },
      "200": {
        start: {
          line: 598,
          column: 16
        },
        end: {
          line: 606,
          column: 19
        }
      },
      "201": {
        start: {
          line: 608,
          column: 35
        },
        end: {
          line: 608,
          column: 166
        }
      },
      "202": {
        start: {
          line: 609,
          column: 12
        },
        end: {
          line: 611,
          column: 13
        }
      },
      "203": {
        start: {
          line: 610,
          column: 16
        },
        end: {
          line: 610,
          column: 57
        }
      },
      "204": {
        start: {
          line: 612,
          column: 12
        },
        end: {
          line: 612,
          column: 34
        }
      },
      "205": {
        start: {
          line: 615,
          column: 12
        },
        end: {
          line: 615,
          column: 62
        }
      },
      "206": {
        start: {
          line: 616,
          column: 12
        },
        end: {
          line: 616,
          column: 24
        }
      },
      "207": {
        start: {
          line: 623,
          column: 8
        },
        end: {
          line: 623,
          column: 58
        }
      },
      "208": {
        start: {
          line: 630,
          column: 8
        },
        end: {
          line: 632,
          column: 9
        }
      },
      "209": {
        start: {
          line: 631,
          column: 12
        },
        end: {
          line: 631,
          column: 68
        }
      },
      "210": {
        start: {
          line: 633,
          column: 8
        },
        end: {
          line: 648,
          column: 9
        }
      },
      "211": {
        start: {
          line: 634,
          column: 31
        },
        end: {
          line: 642,
          column: 14
        }
      },
      "212": {
        start: {
          line: 643,
          column: 12
        },
        end: {
          line: 643,
          column: 189
        }
      },
      "213": {
        start: {
          line: 646,
          column: 12
        },
        end: {
          line: 646,
          column: 67
        }
      },
      "214": {
        start: {
          line: 647,
          column: 12
        },
        end: {
          line: 647,
          column: 61
        }
      },
      "215": {
        start: {
          line: 655,
          column: 8
        },
        end: {
          line: 657,
          column: 9
        }
      },
      "216": {
        start: {
          line: 656,
          column: 12
        },
        end: {
          line: 656,
          column: 68
        }
      },
      "217": {
        start: {
          line: 663,
          column: 13
        },
        end: {
          line: 663,
          column: 20
        }
      },
      "218": {
        start: {
          line: 664,
          column: 8
        },
        end: {
          line: 674,
          column: 11
        }
      },
      "219": {
        start: {
          line: 665,
          column: 12
        },
        end: {
          line: 673,
          column: 15
        }
      },
      "220": {
        start: {
          line: 680,
          column: 8
        },
        end: {
          line: 680,
          column: 27
        }
      },
      "221": {
        start: {
          line: 681,
          column: 8
        },
        end: {
          line: 681,
          column: 35
        }
      },
      "222": {
        start: {
          line: 682,
          column: 8
        },
        end: {
          line: 682,
          column: 38
        }
      },
      "223": {
        start: {
          line: 683,
          column: 8
        },
        end: {
          line: 683,
          column: 56
        }
      },
      "224": {
        start: {
          line: 686,
          column: 0
        },
        end: {
          line: 686,
          column: 48
        }
      },
      "225": {
        start: {
          line: 688,
          column: 0
        },
        end: {
          line: 688,
          column: 54
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 18
          },
          end: {
            line: 28,
            column: 5
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        },
        loc: {
          start: {
            line: 32,
            column: 23
          },
          end: {
            line: 105,
            column: 5
          }
        },
        line: 32
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 109,
            column: 4
          },
          end: {
            line: 109,
            column: 5
          }
        },
        loc: {
          start: {
            line: 109,
            column: 33
          },
          end: {
            line: 128,
            column: 5
          }
        },
        line: 109
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 132,
            column: 4
          },
          end: {
            line: 132,
            column: 5
          }
        },
        loc: {
          start: {
            line: 132,
            column: 22
          },
          end: {
            line: 188,
            column: 5
          }
        },
        line: 132
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 192,
            column: 4
          },
          end: {
            line: 192,
            column: 5
          }
        },
        loc: {
          start: {
            line: 192,
            column: 39
          },
          end: {
            line: 220,
            column: 5
          }
        },
        line: 192
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 224,
            column: 4
          },
          end: {
            line: 224,
            column: 5
          }
        },
        loc: {
          start: {
            line: 224,
            column: 24
          },
          end: {
            line: 248,
            column: 5
          }
        },
        line: 224
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 252,
            column: 4
          },
          end: {
            line: 252,
            column: 5
          }
        },
        loc: {
          start: {
            line: 252,
            column: 37
          },
          end: {
            line: 280,
            column: 5
          }
        },
        line: 252
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 284,
            column: 4
          },
          end: {
            line: 284,
            column: 5
          }
        },
        loc: {
          start: {
            line: 284,
            column: 44
          },
          end: {
            line: 401,
            column: 5
          }
        },
        line: 284
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 340,
            column: 59
          },
          end: {
            line: 340,
            column: 60
          }
        },
        loc: {
          start: {
            line: 340,
            column: 71
          },
          end: {
            line: 350,
            column: 13
          }
        },
        line: 340
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 405,
            column: 4
          },
          end: {
            line: 405,
            column: 5
          }
        },
        loc: {
          start: {
            line: 405,
            column: 72
          },
          end: {
            line: 430,
            column: 5
          }
        },
        line: 405
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 426,
            column: 34
          },
          end: {
            line: 426,
            column: 35
          }
        },
        loc: {
          start: {
            line: 426,
            column: 45
          },
          end: {
            line: 426,
            column: 71
          }
        },
        line: 426
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 434,
            column: 4
          },
          end: {
            line: 434,
            column: 5
          }
        },
        loc: {
          start: {
            line: 434,
            column: 38
          },
          end: {
            line: 455,
            column: 5
          }
        },
        line: 434
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 459,
            column: 4
          },
          end: {
            line: 459,
            column: 5
          }
        },
        loc: {
          start: {
            line: 459,
            column: 34
          },
          end: {
            line: 481,
            column: 5
          }
        },
        line: 459
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 485,
            column: 4
          },
          end: {
            line: 485,
            column: 5
          }
        },
        loc: {
          start: {
            line: 485,
            column: 37
          },
          end: {
            line: 507,
            column: 5
          }
        },
        line: 485
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 511,
            column: 4
          },
          end: {
            line: 511,
            column: 5
          }
        },
        loc: {
          start: {
            line: 511,
            column: 29
          },
          end: {
            line: 513,
            column: 5
          }
        },
        line: 511
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 512,
            column: 47
          },
          end: {
            line: 512,
            column: 48
          }
        },
        loc: {
          start: {
            line: 512,
            column: 54
          },
          end: {
            line: 512,
            column: 75
          }
        },
        line: 512
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 517,
            column: 4
          },
          end: {
            line: 517,
            column: 5
          }
        },
        loc: {
          start: {
            line: 517,
            column: 24
          },
          end: {
            line: 536,
            column: 5
          }
        },
        line: 517
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 540,
            column: 4
          },
          end: {
            line: 540,
            column: 5
          }
        },
        loc: {
          start: {
            line: 540,
            column: 40
          },
          end: {
            line: 569,
            column: 5
          }
        },
        line: 540
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 561,
            column: 21
          },
          end: {
            line: 561,
            column: 22
          }
        },
        loc: {
          start: {
            line: 561,
            column: 26
          },
          end: {
            line: 561,
            column: 34
          }
        },
        line: 561
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 562,
            column: 24
          },
          end: {
            line: 562,
            column: 25
          }
        },
        loc: {
          start: {
            line: 562,
            column: 29
          },
          end: {
            line: 562,
            column: 41
          }
        },
        line: 562
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 573,
            column: 4
          },
          end: {
            line: 573,
            column: 5
          }
        },
        loc: {
          start: {
            line: 573,
            column: 51
          },
          end: {
            line: 618,
            column: 5
          }
        },
        line: 573
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 597,
            column: 59
          },
          end: {
            line: 597,
            column: 60
          }
        },
        loc: {
          start: {
            line: 597,
            column: 71
          },
          end: {
            line: 607,
            column: 13
          }
        },
        line: 597
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 622,
            column: 4
          },
          end: {
            line: 622,
            column: 5
          }
        },
        loc: {
          start: {
            line: 622,
            column: 14
          },
          end: {
            line: 624,
            column: 5
          }
        },
        line: 622
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 628,
            column: 4
          },
          end: {
            line: 628,
            column: 5
          }
        },
        loc: {
          start: {
            line: 628,
            column: 37
          },
          end: {
            line: 649,
            column: 5
          }
        },
        line: 628
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 654,
            column: 4
          },
          end: {
            line: 654,
            column: 5
          }
        },
        loc: {
          start: {
            line: 654,
            column: 51
          },
          end: {
            line: 675,
            column: 5
          }
        },
        line: 654
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 664,
            column: 43
          },
          end: {
            line: 664,
            column: 44
          }
        },
        loc: {
          start: {
            line: 664,
            column: 55
          },
          end: {
            line: 674,
            column: 9
          }
        },
        line: 664
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 679,
            column: 4
          },
          end: {
            line: 679,
            column: 5
          }
        },
        loc: {
          start: {
            line: 679,
            column: 14
          },
          end: {
            line: 684,
            column: 5
          }
        },
        line: 679
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 12,
            column: 0
          },
          end: {
            line: 15,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 12,
            column: 0
          },
          end: {
            line: 15,
            column: 1
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 12
      },
      "4": {
        loc: {
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 36,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 36,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "5": {
        loc: {
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 42,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 42,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "6": {
        loc: {
          start: {
            line: 39,
            column: 16
          },
          end: {
            line: 39,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 39,
            column: 16
          },
          end: {
            line: 39,
            column: 39
          }
        }, {
          start: {
            line: 39,
            column: 43
          },
          end: {
            line: 39,
            column: 71
          }
        }],
        line: 39
      },
      "7": {
        loc: {
          start: {
            line: 71,
            column: 16
          },
          end: {
            line: 97,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 16
          },
          end: {
            line: 97,
            column: 17
          }
        }, {
          start: {
            line: 76,
            column: 21
          },
          end: {
            line: 97,
            column: 17
          }
        }],
        line: 71
      },
      "8": {
        loc: {
          start: {
            line: 76,
            column: 21
          },
          end: {
            line: 97,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 21
          },
          end: {
            line: 97,
            column: 17
          }
        }, {
          start: {
            line: 88,
            column: 21
          },
          end: {
            line: 97,
            column: 17
          }
        }],
        line: 76
      },
      "9": {
        loc: {
          start: {
            line: 88,
            column: 21
          },
          end: {
            line: 97,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 21
          },
          end: {
            line: 97,
            column: 17
          }
        }, {
          start: {
            line: 93,
            column: 21
          },
          end: {
            line: 97,
            column: 17
          }
        }],
        line: 88
      },
      "10": {
        loc: {
          start: {
            line: 94,
            column: 57
          },
          end: {
            line: 94,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 94,
            column: 57
          },
          end: {
            line: 94,
            column: 73
          }
        }, {
          start: {
            line: 94,
            column: 77
          },
          end: {
            line: 94,
            column: 86
          }
        }],
        line: 94
      },
      "11": {
        loc: {
          start: {
            line: 115,
            column: 34
          },
          end: {
            line: 115,
            column: 191
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 115,
            column: 181
          },
          end: {
            line: 115,
            column: 183
          }
        }, {
          start: {
            line: 115,
            column: 186
          },
          end: {
            line: 115,
            column: 191
          }
        }],
        line: 115
      },
      "12": {
        loc: {
          start: {
            line: 115,
            column: 34
          },
          end: {
            line: 115,
            column: 178
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 115,
            column: 34
          },
          end: {
            line: 115,
            column: 161
          }
        }, {
          start: {
            line: 115,
            column: 165
          },
          end: {
            line: 115,
            column: 178
          }
        }],
        line: 115
      },
      "13": {
        loc: {
          start: {
            line: 115,
            column: 40
          },
          end: {
            line: 115,
            column: 151
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 115,
            column: 104
          },
          end: {
            line: 115,
            column: 106
          }
        }, {
          start: {
            line: 115,
            column: 109
          },
          end: {
            line: 115,
            column: 151
          }
        }],
        line: 115
      },
      "14": {
        loc: {
          start: {
            line: 115,
            column: 40
          },
          end: {
            line: 115,
            column: 101
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 115,
            column: 40
          },
          end: {
            line: 115,
            column: 84
          }
        }, {
          start: {
            line: 115,
            column: 88
          },
          end: {
            line: 115,
            column: 101
          }
        }],
        line: 115
      },
      "15": {
        loc: {
          start: {
            line: 115,
            column: 215
          },
          end: {
            line: 115,
            column: 368
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 115,
            column: 362
          },
          end: {
            line: 115,
            column: 364
          }
        }, {
          start: {
            line: 115,
            column: 367
          },
          end: {
            line: 115,
            column: 368
          }
        }],
        line: 115
      },
      "16": {
        loc: {
          start: {
            line: 115,
            column: 215
          },
          end: {
            line: 115,
            column: 359
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 115,
            column: 215
          },
          end: {
            line: 115,
            column: 342
          }
        }, {
          start: {
            line: 115,
            column: 346
          },
          end: {
            line: 115,
            column: 359
          }
        }],
        line: 115
      },
      "17": {
        loc: {
          start: {
            line: 115,
            column: 221
          },
          end: {
            line: 115,
            column: 332
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 115,
            column: 285
          },
          end: {
            line: 115,
            column: 287
          }
        }, {
          start: {
            line: 115,
            column: 290
          },
          end: {
            line: 115,
            column: 332
          }
        }],
        line: 115
      },
      "18": {
        loc: {
          start: {
            line: 115,
            column: 221
          },
          end: {
            line: 115,
            column: 282
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 115,
            column: 221
          },
          end: {
            line: 115,
            column: 265
          }
        }, {
          start: {
            line: 115,
            column: 269
          },
          end: {
            line: 115,
            column: 282
          }
        }],
        line: 115
      },
      "19": {
        loc: {
          start: {
            line: 115,
            column: 384
          },
          end: {
            line: 115,
            column: 522
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 115,
            column: 515
          },
          end: {
            line: 115,
            column: 517
          }
        }, {
          start: {
            line: 115,
            column: 520
          },
          end: {
            line: 115,
            column: 522
          }
        }],
        line: 115
      },
      "20": {
        loc: {
          start: {
            line: 115,
            column: 384
          },
          end: {
            line: 115,
            column: 512
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 115,
            column: 384
          },
          end: {
            line: 115,
            column: 495
          }
        }, {
          start: {
            line: 115,
            column: 499
          },
          end: {
            line: 115,
            column: 512
          }
        }],
        line: 115
      },
      "21": {
        loc: {
          start: {
            line: 115,
            column: 390
          },
          end: {
            line: 115,
            column: 485
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 115,
            column: 446
          },
          end: {
            line: 115,
            column: 448
          }
        }, {
          start: {
            line: 115,
            column: 451
          },
          end: {
            line: 115,
            column: 485
          }
        }],
        line: 115
      },
      "22": {
        loc: {
          start: {
            line: 115,
            column: 390
          },
          end: {
            line: 115,
            column: 443
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 115,
            column: 390
          },
          end: {
            line: 115,
            column: 426
          }
        }, {
          start: {
            line: 115,
            column: 430
          },
          end: {
            line: 115,
            column: 443
          }
        }],
        line: 115
      },
      "23": {
        loc: {
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 146
      },
      "24": {
        loc: {
          start: {
            line: 149,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 149
      },
      "25": {
        loc: {
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 154,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 154,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      },
      "26": {
        loc: {
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 181,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 156,
            column: 12
          },
          end: {
            line: 164,
            column: 22
          }
        }, {
          start: {
            line: 165,
            column: 12
          },
          end: {
            line: 173,
            column: 22
          }
        }, {
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 180,
            column: 56
          }
        }],
        line: 155
      },
      "27": {
        loc: {
          start: {
            line: 198,
            column: 23
          },
          end: {
            line: 198,
            column: 122
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 198,
            column: 76
          },
          end: {
            line: 198,
            column: 82
          }
        }, {
          start: {
            line: 198,
            column: 85
          },
          end: {
            line: 198,
            column: 122
          }
        }],
        line: 198
      },
      "28": {
        loc: {
          start: {
            line: 198,
            column: 23
          },
          end: {
            line: 198,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 198,
            column: 23
          },
          end: {
            line: 198,
            column: 56
          }
        }, {
          start: {
            line: 198,
            column: 60
          },
          end: {
            line: 198,
            column: 73
          }
        }],
        line: 198
      },
      "29": {
        loc: {
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 202,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 202,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "30": {
        loc: {
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 200,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 200,
            column: 31
          }
        }, {
          start: {
            line: 200,
            column: 35
          },
          end: {
            line: 200,
            column: 47
          }
        }],
        line: 200
      },
      "31": {
        loc: {
          start: {
            line: 232,
            column: 23
          },
          end: {
            line: 232,
            column: 122
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 232,
            column: 76
          },
          end: {
            line: 232,
            column: 82
          }
        }, {
          start: {
            line: 232,
            column: 85
          },
          end: {
            line: 232,
            column: 122
          }
        }],
        line: 232
      },
      "32": {
        loc: {
          start: {
            line: 232,
            column: 23
          },
          end: {
            line: 232,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 232,
            column: 23
          },
          end: {
            line: 232,
            column: 56
          }
        }, {
          start: {
            line: 232,
            column: 60
          },
          end: {
            line: 232,
            column: 73
          }
        }],
        line: 232
      },
      "33": {
        loc: {
          start: {
            line: 236,
            column: 8
          },
          end: {
            line: 238,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 236,
            column: 8
          },
          end: {
            line: 238,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 236
      },
      "34": {
        loc: {
          start: {
            line: 240,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 240,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        }, {
          start: {
            line: 244,
            column: 13
          },
          end: {
            line: 247,
            column: 9
          }
        }],
        line: 240
      },
      "35": {
        loc: {
          start: {
            line: 254,
            column: 8
          },
          end: {
            line: 279,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 255,
            column: 12
          },
          end: {
            line: 264,
            column: 17
          }
        }, {
          start: {
            line: 265,
            column: 12
          },
          end: {
            line: 271,
            column: 17
          }
        }, {
          start: {
            line: 272,
            column: 12
          },
          end: {
            line: 278,
            column: 17
          }
        }],
        line: 254
      },
      "36": {
        loc: {
          start: {
            line: 256,
            column: 16
          },
          end: {
            line: 264,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 256,
            column: 16
          },
          end: {
            line: 264,
            column: 17
          }
        }, {
          start: {
            line: 259,
            column: 21
          },
          end: {
            line: 264,
            column: 17
          }
        }],
        line: 256
      },
      "37": {
        loc: {
          start: {
            line: 259,
            column: 21
          },
          end: {
            line: 264,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 259,
            column: 21
          },
          end: {
            line: 264,
            column: 17
          }
        }, {
          start: {
            line: 262,
            column: 21
          },
          end: {
            line: 264,
            column: 17
          }
        }],
        line: 259
      },
      "38": {
        loc: {
          start: {
            line: 266,
            column: 16
          },
          end: {
            line: 271,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 266,
            column: 16
          },
          end: {
            line: 271,
            column: 17
          }
        }, {
          start: {
            line: 269,
            column: 21
          },
          end: {
            line: 271,
            column: 17
          }
        }],
        line: 266
      },
      "39": {
        loc: {
          start: {
            line: 273,
            column: 16
          },
          end: {
            line: 278,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 273,
            column: 16
          },
          end: {
            line: 278,
            column: 17
          }
        }, {
          start: {
            line: 276,
            column: 21
          },
          end: {
            line: 278,
            column: 17
          }
        }],
        line: 273
      },
      "40": {
        loc: {
          start: {
            line: 293,
            column: 23
          },
          end: {
            line: 293,
            column: 122
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 293,
            column: 76
          },
          end: {
            line: 293,
            column: 82
          }
        }, {
          start: {
            line: 293,
            column: 85
          },
          end: {
            line: 293,
            column: 122
          }
        }],
        line: 293
      },
      "41": {
        loc: {
          start: {
            line: 293,
            column: 23
          },
          end: {
            line: 293,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 293,
            column: 23
          },
          end: {
            line: 293,
            column: 56
          }
        }, {
          start: {
            line: 293,
            column: 60
          },
          end: {
            line: 293,
            column: 73
          }
        }],
        line: 293
      },
      "42": {
        loc: {
          start: {
            line: 295,
            column: 8
          },
          end: {
            line: 297,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 295,
            column: 8
          },
          end: {
            line: 297,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 295
      },
      "43": {
        loc: {
          start: {
            line: 295,
            column: 12
          },
          end: {
            line: 295,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 295,
            column: 12
          },
          end: {
            line: 295,
            column: 31
          }
        }, {
          start: {
            line: 295,
            column: 35
          },
          end: {
            line: 295,
            column: 47
          }
        }],
        line: 295
      },
      "44": {
        loc: {
          start: {
            line: 299,
            column: 8
          },
          end: {
            line: 332,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 299,
            column: 8
          },
          end: {
            line: 332,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 299
      },
      "45": {
        loc: {
          start: {
            line: 351,
            column: 38
          },
          end: {
            line: 351,
            column: 240
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 351,
            column: 39
          },
          end: {
            line: 351,
            column: 170
          }
        }, {
          start: {
            line: 351,
            column: 175
          },
          end: {
            line: 351,
            column: 240
          }
        }],
        line: 351
      },
      "46": {
        loc: {
          start: {
            line: 351,
            column: 39
          },
          end: {
            line: 351,
            column: 170
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 351,
            column: 151
          },
          end: {
            line: 351,
            column: 157
          }
        }, {
          start: {
            line: 351,
            column: 160
          },
          end: {
            line: 351,
            column: 170
          }
        }],
        line: 351
      },
      "47": {
        loc: {
          start: {
            line: 351,
            column: 39
          },
          end: {
            line: 351,
            column: 148
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 351,
            column: 39
          },
          end: {
            line: 351,
            column: 131
          }
        }, {
          start: {
            line: 351,
            column: 135
          },
          end: {
            line: 351,
            column: 148
          }
        }],
        line: 351
      },
      "48": {
        loc: {
          start: {
            line: 351,
            column: 45
          },
          end: {
            line: 351,
            column: 121
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 351,
            column: 102
          },
          end: {
            line: 351,
            column: 108
          }
        }, {
          start: {
            line: 351,
            column: 111
          },
          end: {
            line: 351,
            column: 121
          }
        }],
        line: 351
      },
      "49": {
        loc: {
          start: {
            line: 351,
            column: 45
          },
          end: {
            line: 351,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 351,
            column: 45
          },
          end: {
            line: 351,
            column: 82
          }
        }, {
          start: {
            line: 351,
            column: 86
          },
          end: {
            line: 351,
            column: 99
          }
        }],
        line: 351
      },
      "50": {
        loc: {
          start: {
            line: 359,
            column: 42
          },
          end: {
            line: 359,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 359,
            column: 42
          },
          end: {
            line: 359,
            column: 84
          }
        }, {
          start: {
            line: 359,
            column: 88
          },
          end: {
            line: 359,
            column: 89
          }
        }],
        line: 359
      },
      "51": {
        loc: {
          start: {
            line: 361,
            column: 33
          },
          end: {
            line: 361,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 361,
            column: 33
          },
          end: {
            line: 361,
            column: 67
          }
        }, {
          start: {
            line: 361,
            column: 71
          },
          end: {
            line: 361,
            column: 73
          }
        }],
        line: 361
      },
      "52": {
        loc: {
          start: {
            line: 387,
            column: 12
          },
          end: {
            line: 398,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 387,
            column: 12
          },
          end: {
            line: 398,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 387
      },
      "53": {
        loc: {
          start: {
            line: 390,
            column: 46
          },
          end: {
            line: 390,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 390,
            column: 46
          },
          end: {
            line: 390,
            column: 88
          }
        }, {
          start: {
            line: 390,
            column: 92
          },
          end: {
            line: 390,
            column: 93
          }
        }],
        line: 390
      },
      "54": {
        loc: {
          start: {
            line: 405,
            column: 38
          },
          end: {
            line: 405,
            column: 52
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 405,
            column: 51
          },
          end: {
            line: 405,
            column: 52
          }
        }],
        line: 405
      },
      "55": {
        loc: {
          start: {
            line: 405,
            column: 54
          },
          end: {
            line: 405,
            column: 70
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 405,
            column: 66
          },
          end: {
            line: 405,
            column: 70
          }
        }],
        line: 405
      },
      "56": {
        loc: {
          start: {
            line: 415,
            column: 16
          },
          end: {
            line: 417,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 415,
            column: 16
          },
          end: {
            line: 417,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 415
      },
      "57": {
        loc: {
          start: {
            line: 415,
            column: 20
          },
          end: {
            line: 415,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 415,
            column: 20
          },
          end: {
            line: 415,
            column: 32
          }
        }, {
          start: {
            line: 415,
            column: 36
          },
          end: {
            line: 415,
            column: 85
          }
        }],
        line: 415
      },
      "58": {
        loc: {
          start: {
            line: 418,
            column: 16
          },
          end: {
            line: 420,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 418,
            column: 16
          },
          end: {
            line: 420,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 418
      },
      "59": {
        loc: {
          start: {
            line: 422,
            column: 30
          },
          end: {
            line: 424,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 423,
            column: 22
          },
          end: {
            line: 423,
            column: 124
          }
        }, {
          start: {
            line: 424,
            column: 22
          },
          end: {
            line: 424,
            column: 54
          }
        }],
        line: 422
      },
      "60": {
        loc: {
          start: {
            line: 423,
            column: 31
          },
          end: {
            line: 423,
            column: 116
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 423,
            column: 32
          },
          end: {
            line: 423,
            column: 107
          }
        }, {
          start: {
            line: 423,
            column: 112
          },
          end: {
            line: 423,
            column: 116
          }
        }],
        line: 423
      },
      "61": {
        loc: {
          start: {
            line: 423,
            column: 32
          },
          end: {
            line: 423,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 423,
            column: 81
          },
          end: {
            line: 423,
            column: 87
          }
        }, {
          start: {
            line: 423,
            column: 90
          },
          end: {
            line: 423,
            column: 107
          }
        }],
        line: 423
      },
      "62": {
        loc: {
          start: {
            line: 423,
            column: 32
          },
          end: {
            line: 423,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 423,
            column: 32
          },
          end: {
            line: 423,
            column: 61
          }
        }, {
          start: {
            line: 423,
            column: 65
          },
          end: {
            line: 423,
            column: 78
          }
        }],
        line: 423
      },
      "63": {
        loc: {
          start: {
            line: 453,
            column: 26
          },
          end: {
            line: 453,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 453,
            column: 26
          },
          end: {
            line: 453,
            column: 49
          }
        }, {
          start: {
            line: 453,
            column: 53
          },
          end: {
            line: 453,
            column: 78
          }
        }],
        line: 453
      },
      "64": {
        loc: {
          start: {
            line: 461,
            column: 8
          },
          end: {
            line: 480,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 462,
            column: 12
          },
          end: {
            line: 467,
            column: 18
          }
        }, {
          start: {
            line: 468,
            column: 12
          },
          end: {
            line: 473,
            column: 18
          }
        }, {
          start: {
            line: 474,
            column: 12
          },
          end: {
            line: 479,
            column: 18
          }
        }],
        line: 461
      },
      "65": {
        loc: {
          start: {
            line: 487,
            column: 8
          },
          end: {
            line: 489,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 487,
            column: 8
          },
          end: {
            line: 489,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 487
      },
      "66": {
        loc: {
          start: {
            line: 487,
            column: 12
          },
          end: {
            line: 487,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 487,
            column: 12
          },
          end: {
            line: 487,
            column: 31
          }
        }, {
          start: {
            line: 487,
            column: 35
          },
          end: {
            line: 487,
            column: 47
          }
        }],
        line: 487
      },
      "67": {
        loc: {
          start: {
            line: 501,
            column: 19
          },
          end: {
            line: 501,
            column: 185
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 501,
            column: 20
          },
          end: {
            line: 501,
            column: 151
          }
        }, {
          start: {
            line: 501,
            column: 156
          },
          end: {
            line: 501,
            column: 185
          }
        }],
        line: 501
      },
      "68": {
        loc: {
          start: {
            line: 501,
            column: 20
          },
          end: {
            line: 501,
            column: 151
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 501,
            column: 132
          },
          end: {
            line: 501,
            column: 138
          }
        }, {
          start: {
            line: 501,
            column: 141
          },
          end: {
            line: 501,
            column: 151
          }
        }],
        line: 501
      },
      "69": {
        loc: {
          start: {
            line: 501,
            column: 20
          },
          end: {
            line: 501,
            column: 129
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 501,
            column: 20
          },
          end: {
            line: 501,
            column: 112
          }
        }, {
          start: {
            line: 501,
            column: 116
          },
          end: {
            line: 501,
            column: 129
          }
        }],
        line: 501
      },
      "70": {
        loc: {
          start: {
            line: 501,
            column: 26
          },
          end: {
            line: 501,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 501,
            column: 83
          },
          end: {
            line: 501,
            column: 89
          }
        }, {
          start: {
            line: 501,
            column: 92
          },
          end: {
            line: 501,
            column: 102
          }
        }],
        line: 501
      },
      "71": {
        loc: {
          start: {
            line: 501,
            column: 26
          },
          end: {
            line: 501,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 501,
            column: 26
          },
          end: {
            line: 501,
            column: 63
          }
        }, {
          start: {
            line: 501,
            column: 67
          },
          end: {
            line: 501,
            column: 80
          }
        }],
        line: 501
      },
      "72": {
        loc: {
          start: {
            line: 542,
            column: 8
          },
          end: {
            line: 544,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 542,
            column: 8
          },
          end: {
            line: 544,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 542
      },
      "73": {
        loc: {
          start: {
            line: 542,
            column: 12
          },
          end: {
            line: 542,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 542,
            column: 12
          },
          end: {
            line: 542,
            column: 31
          }
        }, {
          start: {
            line: 542,
            column: 35
          },
          end: {
            line: 542,
            column: 47
          }
        }],
        line: 542
      },
      "74": {
        loc: {
          start: {
            line: 558,
            column: 29
          },
          end: {
            line: 558,
            column: 168
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 558,
            column: 30
          },
          end: {
            line: 558,
            column: 161
          }
        }, {
          start: {
            line: 558,
            column: 166
          },
          end: {
            line: 558,
            column: 168
          }
        }],
        line: 558
      },
      "75": {
        loc: {
          start: {
            line: 558,
            column: 30
          },
          end: {
            line: 558,
            column: 161
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 558,
            column: 142
          },
          end: {
            line: 558,
            column: 148
          }
        }, {
          start: {
            line: 558,
            column: 151
          },
          end: {
            line: 558,
            column: 161
          }
        }],
        line: 558
      },
      "76": {
        loc: {
          start: {
            line: 558,
            column: 30
          },
          end: {
            line: 558,
            column: 139
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 558,
            column: 30
          },
          end: {
            line: 558,
            column: 122
          }
        }, {
          start: {
            line: 558,
            column: 126
          },
          end: {
            line: 558,
            column: 139
          }
        }],
        line: 558
      },
      "77": {
        loc: {
          start: {
            line: 558,
            column: 36
          },
          end: {
            line: 558,
            column: 112
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 558,
            column: 93
          },
          end: {
            line: 558,
            column: 99
          }
        }, {
          start: {
            line: 558,
            column: 102
          },
          end: {
            line: 558,
            column: 112
          }
        }],
        line: 558
      },
      "78": {
        loc: {
          start: {
            line: 558,
            column: 36
          },
          end: {
            line: 558,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 558,
            column: 36
          },
          end: {
            line: 558,
            column: 73
          }
        }, {
          start: {
            line: 558,
            column: 77
          },
          end: {
            line: 558,
            column: 90
          }
        }],
        line: 558
      },
      "79": {
        loc: {
          start: {
            line: 575,
            column: 8
          },
          end: {
            line: 577,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 575,
            column: 8
          },
          end: {
            line: 577,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 575
      },
      "80": {
        loc: {
          start: {
            line: 575,
            column: 12
          },
          end: {
            line: 575,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 575,
            column: 12
          },
          end: {
            line: 575,
            column: 31
          }
        }, {
          start: {
            line: 575,
            column: 35
          },
          end: {
            line: 575,
            column: 47
          }
        }],
        line: 575
      },
      "81": {
        loc: {
          start: {
            line: 608,
            column: 35
          },
          end: {
            line: 608,
            column: 166
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 608,
            column: 147
          },
          end: {
            line: 608,
            column: 153
          }
        }, {
          start: {
            line: 608,
            column: 156
          },
          end: {
            line: 608,
            column: 166
          }
        }],
        line: 608
      },
      "82": {
        loc: {
          start: {
            line: 608,
            column: 35
          },
          end: {
            line: 608,
            column: 144
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 608,
            column: 35
          },
          end: {
            line: 608,
            column: 127
          }
        }, {
          start: {
            line: 608,
            column: 131
          },
          end: {
            line: 608,
            column: 144
          }
        }],
        line: 608
      },
      "83": {
        loc: {
          start: {
            line: 608,
            column: 41
          },
          end: {
            line: 608,
            column: 117
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 608,
            column: 98
          },
          end: {
            line: 608,
            column: 104
          }
        }, {
          start: {
            line: 608,
            column: 107
          },
          end: {
            line: 608,
            column: 117
          }
        }],
        line: 608
      },
      "84": {
        loc: {
          start: {
            line: 608,
            column: 41
          },
          end: {
            line: 608,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 608,
            column: 41
          },
          end: {
            line: 608,
            column: 78
          }
        }, {
          start: {
            line: 608,
            column: 82
          },
          end: {
            line: 608,
            column: 95
          }
        }],
        line: 608
      },
      "85": {
        loc: {
          start: {
            line: 609,
            column: 12
          },
          end: {
            line: 611,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 609,
            column: 12
          },
          end: {
            line: 611,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 609
      },
      "86": {
        loc: {
          start: {
            line: 623,
            column: 15
          },
          end: {
            line: 623,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 623,
            column: 15
          },
          end: {
            line: 623,
            column: 33
          }
        }, {
          start: {
            line: 623,
            column: 37
          },
          end: {
            line: 623,
            column: 57
          }
        }],
        line: 623
      },
      "87": {
        loc: {
          start: {
            line: 630,
            column: 8
          },
          end: {
            line: 632,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 630,
            column: 8
          },
          end: {
            line: 632,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 630
      },
      "88": {
        loc: {
          start: {
            line: 630,
            column: 12
          },
          end: {
            line: 630,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 630,
            column: 12
          },
          end: {
            line: 630,
            column: 31
          }
        }, {
          start: {
            line: 630,
            column: 35
          },
          end: {
            line: 630,
            column: 47
          }
        }],
        line: 630
      },
      "89": {
        loc: {
          start: {
            line: 643,
            column: 19
          },
          end: {
            line: 643,
            column: 188
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 643,
            column: 20
          },
          end: {
            line: 643,
            column: 151
          }
        }, {
          start: {
            line: 643,
            column: 156
          },
          end: {
            line: 643,
            column: 188
          }
        }],
        line: 643
      },
      "90": {
        loc: {
          start: {
            line: 643,
            column: 20
          },
          end: {
            line: 643,
            column: 151
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 643,
            column: 132
          },
          end: {
            line: 643,
            column: 138
          }
        }, {
          start: {
            line: 643,
            column: 141
          },
          end: {
            line: 643,
            column: 151
          }
        }],
        line: 643
      },
      "91": {
        loc: {
          start: {
            line: 643,
            column: 20
          },
          end: {
            line: 643,
            column: 129
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 643,
            column: 20
          },
          end: {
            line: 643,
            column: 112
          }
        }, {
          start: {
            line: 643,
            column: 116
          },
          end: {
            line: 643,
            column: 129
          }
        }],
        line: 643
      },
      "92": {
        loc: {
          start: {
            line: 643,
            column: 26
          },
          end: {
            line: 643,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 643,
            column: 83
          },
          end: {
            line: 643,
            column: 89
          }
        }, {
          start: {
            line: 643,
            column: 92
          },
          end: {
            line: 643,
            column: 102
          }
        }],
        line: 643
      },
      "93": {
        loc: {
          start: {
            line: 643,
            column: 26
          },
          end: {
            line: 643,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 643,
            column: 26
          },
          end: {
            line: 643,
            column: 63
          }
        }, {
          start: {
            line: 643,
            column: 67
          },
          end: {
            line: 643,
            column: 80
          }
        }],
        line: 643
      },
      "94": {
        loc: {
          start: {
            line: 654,
            column: 37
          },
          end: {
            line: 654,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 654,
            column: 47
          },
          end: {
            line: 654,
            column: 49
          }
        }],
        line: 654
      },
      "95": {
        loc: {
          start: {
            line: 655,
            column: 8
          },
          end: {
            line: 657,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 655,
            column: 8
          },
          end: {
            line: 657,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 655
      },
      "96": {
        loc: {
          start: {
            line: 655,
            column: 12
          },
          end: {
            line: 655,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 655,
            column: 12
          },
          end: {
            line: 655,
            column: 31
          }
        }, {
          start: {
            line: 655,
            column: 35
          },
          end: {
            line: 655,
            column: 47
          }
        }],
        line: 655
      },
      "97": {
        loc: {
          start: {
            line: 658,
            column: 16
          },
          end: {
            line: 658,
            column: 33
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 658,
            column: 30
          },
          end: {
            line: 658,
            column: 33
          }
        }],
        line: 658
      },
      "98": {
        loc: {
          start: {
            line: 659,
            column: 8
          },
          end: {
            line: 659,
            column: 24
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 659,
            column: 20
          },
          end: {
            line: 659,
            column: 24
          }
        }],
        line: 659
      },
      "99": {
        loc: {
          start: {
            line: 660,
            column: 8
          },
          end: {
            line: 660,
            column: 18
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 660,
            column: 15
          },
          end: {
            line: 660,
            column: 18
          }
        }],
        line: 660
      },
      "100": {
        loc: {
          start: {
            line: 661,
            column: 8
          },
          end: {
            line: 661,
            column: 30
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 661,
            column: 27
          },
          end: {
            line: 661,
            column: 30
          }
        }],
        line: 661
      },
      "101": {
        loc: {
          start: {
            line: 662,
            column: 8
          },
          end: {
            line: 662,
            column: 29
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 662,
            column: 26
          },
          end: {
            line: 662,
            column: 29
          }
        }],
        line: 662
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0],
      "55": [0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0],
      "78": [0, 0],
      "79": [0, 0],
      "80": [0, 0],
      "81": [0, 0],
      "82": [0, 0],
      "83": [0, 0],
      "84": [0, 0],
      "85": [0, 0],
      "86": [0, 0],
      "87": [0, 0],
      "88": [0, 0],
      "89": [0, 0],
      "90": [0, 0],
      "91": [0, 0],
      "92": [0, 0],
      "93": [0, 0],
      "94": [0],
      "95": [0, 0],
      "96": [0, 0],
      "97": [0],
      "98": [0],
      "99": [0],
      "100": [0],
      "101": [0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/services/azure-openai-service.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/services/azure-openai-service.ts"],
      sourcesContent: ["import OpenAI from 'openai';\nimport { InterviewContext } from '@/lib/types/voice';\n\n// Client-side safety check\nconst isClient = typeof window !== 'undefined';\n\n// Only import server-side dependencies when running on server\nlet fetchAzureSecrets: any = null;\n\nif (!isClient) {\n  const azureConfig = require('@/lib/azure-config');\n  fetchAzureSecrets = azureConfig.fetchAzureSecrets;\n}\n\nexport interface ConversationMessage {\n  role: 'system' | 'user' | 'assistant';\n  content: string;\n}\n\nexport interface GenerationResponse {\n  content: string;\n  questionNumber?: number;\n  isComplete?: boolean;\n  followUpSuggestions?: string[];\n}\n\nexport class AzureOpenAIService {\n  private client: OpenAI | null = null;\n  private isInitialized = false;\n  private deployment: string = '';\n  private conversationHistory: ConversationMessage[] = [];\n  private interviewContext: InterviewContext = { \n    type: 'general',\n    preliminaryCollected: false,\n    currentQuestionCount: 0,\n    maxQuestions: 10\n  };\n\n  /**\n   * Initialize the Azure OpenAI service\n   */\n  async initialize(): Promise<boolean> {\n    if (isClient) {\n      console.warn('[Azure OpenAI Service] Running on client side - service disabled');\n      return false;\n    }\n    \n    try {\n      const secrets = await fetchAzureSecrets();\n      \n      if (!secrets.azureOpenAIKey || !secrets.azureOpenAIEndpoint) {\n        console.warn('\u26A0\uFE0F Azure OpenAI credentials not available');\n        return false;\n      }\n\n      this.deployment = secrets.azureOpenAIDeployment;\n      this.client = new OpenAI({\n        apiKey: secrets.azureOpenAIKey,\n        baseURL: `${secrets.azureOpenAIEndpoint}/openai/deployments/${secrets.azureOpenAIDeployment}`,\n        defaultQuery: { 'api-version': '2025-01-01-preview' }, // Latest API version for gpt-4o support\n        defaultHeaders: {\n          'api-key': secrets.azureOpenAIKey,\n        },\n      });\n\n      // Test the connection with a simple request\n      try {\n        console.log(`\uD83D\uDD04 Testing Azure OpenAI connection with deployment: ${this.deployment}`);\n        await this.client.chat.completions.create({\n          model: this.deployment,\n          messages: [{ role: 'user', content: 'Test' }],\n          max_tokens: 5,\n        });\n        \n        this.isInitialized = true;\n        console.log('\u2705 Azure OpenAI Service initialized and tested successfully');\n        return true;\n      } catch (testError: any) {\n        console.error('\u274C Azure OpenAI connection test failed:', testError.message);\n        console.error('\uD83D\uDCCB Configuration details:', {\n          endpoint: secrets.azureOpenAIEndpoint,\n          deployment: this.deployment,\n          hasApiKey: !!secrets.azureOpenAIKey\n        });\n        \n        if (testError.status === 401) {\n          console.error('\uD83D\uDD10 Authentication Error (401):');\n          console.error('   \u2022 Your API key might be invalid or expired');\n          console.error('   \u2022 Check your Azure OpenAI resource for the correct key');\n        } else if (testError.status === 404) {\n          console.error('\uD83D\uDCCD Resource Not Found (404):');\n          console.error('   \u2022 The deployment \"' + this.deployment + '\" does not exist');\n          console.error('   \u2022 Your endpoint URL might be incorrect');\n          console.error('   \u2022 No deployments might exist in your Azure OpenAI resource');\n          console.error('\uD83D\uDCA1 To fix this:');\n          console.error('   1. Log into portal.azure.com');\n          console.error('   2. Navigate to your Azure OpenAI resource');\n          console.error('   3. Check the \"Model deployments\" or \"Deployments\" section');\n          console.error('   4. Create a deployment (e.g., gpt-35-turbo, gpt-4)');\n          console.error('   5. Update AZURE_OPENAI_DEPLOYMENT in your .env.local file');\n        } else if (testError.status === 403) {\n          console.error('\uD83D\uDEAB Access Forbidden (403):');\n          console.error('   \u2022 Your API key might not have the right permissions');\n          console.error('   \u2022 Your Azure OpenAI resource might not be properly configured');\n        } else {\n          console.error(`\u2753 Unexpected error (${testError.status || 'Unknown'}):`);\n          console.error('   \u2022 Check your Azure OpenAI resource configuration');\n          console.error('   \u2022 Verify your subscription and resource status');\n        }\n        return false;\n      }\n    } catch (error) {\n      console.error('\u274C Failed to initialize Azure OpenAI Service:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Set interview context for conversation management\n   */\n  setInterviewContext(context: Partial<InterviewContext>): void {\n    const previousState = { ...this.interviewContext };\n    \n    // Merge context while preserving defaults\n    this.interviewContext = { \n      ...this.interviewContext, \n      ...context,\n      // Ensure defaults are set if not provided\n      preliminaryCollected: context.preliminaryCollected ?? this.interviewContext.preliminaryCollected ?? false,\n      currentQuestionCount: context.currentQuestionCount ?? this.interviewContext.currentQuestionCount ?? 0,\n      maxQuestions: context.maxQuestions ?? this.interviewContext.maxQuestions ?? 10\n    };\n    \n    // Log state transition\n    console.log('\uD83D\uDCCB Interview context updated:', this.interviewContext);\n    console.debug('\uD83D\uDD04 [STATE_TRANSITION] Interview context changed', {\n      from: previousState,\n      to: this.interviewContext,\n      changes: {\n        preliminaryCollected: previousState.preliminaryCollected !== this.interviewContext.preliminaryCollected,\n        currentQuestionCount: previousState.currentQuestionCount !== this.interviewContext.currentQuestionCount,\n        maxQuestions: previousState.maxQuestions !== this.interviewContext.maxQuestions\n      },\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  /**\n   * Get system prompt based on interview context\n   */\n  private getSystemPrompt(): string {\n    const { type, position, company, difficulty } = this.interviewContext;\n    \n    let basePrompt = `You are an experienced AI interviewer conducting a ${type} interview. Your goal is to create an engaging, realistic interview experience that helps candidates prepare effectively.\n\nCore Interview Principles:\n1. Ask relevant, progressively challenging questions\n2. Provide thoughtful follow-ups based on candidate responses\n3. Maintain a professional yet conversational tone\n4. Show genuine interest in the candidate's experiences\n5. Adapt question difficulty based on their expertise level\n6. Give brief encouraging feedback when appropriate\n7. Keep responses concise (50-80 words) and ask one question at a time\n\n`;\n\n    if (position) {\n      basePrompt += `Target Position: ${position}\\n`;\n    }\n    if (company) {\n      basePrompt += `Company Context: ${company}\\n`;\n    }\n    if (difficulty) {\n      basePrompt += `Difficulty Level: ${difficulty}\\n`;\n    }\n\n    switch (type) {\n      case 'technical':\n        basePrompt += `\\nTechnical Interview Focus:\n- Start with foundational concepts, then progress to complex scenarios\n- Ask about specific technologies, algorithms, and system design\n- Explore problem-solving approaches and trade-offs\n- Include practical coding scenarios and architecture discussions\n- Ask \"How would you optimize this?\" or \"What challenges might arise?\"\n- Focus on real-world application of technical knowledge`;\n        break;\n      case 'behavioral':\n        basePrompt += `\\nBehavioral Interview Focus:\n- Use STAR method (Situation, Task, Action, Result) evaluation\n- Ask about leadership, teamwork, conflict resolution, and growth\n- Explore past experiences with specific examples\n- Ask follow-ups like \"What would you do differently?\" or \"What did you learn?\"\n- Focus on cultural fit, communication skills, and problem-solving approach\n- Include questions about handling failures and difficult situations`;\n        break;\n      default:\n        basePrompt += `\\nGeneral Interview Focus:\n- Balance background, experience, motivation, and role fit\n- Ask about career goals, interests, and what excites them about the opportunity\n- Explore their understanding of the role and company\n- Include questions about learning style and professional development\n- Ask about their greatest achievements and challenges`;\n    }\n\n    basePrompt += `\\n\\nInterview Style:\n- Be conversational and show active listening\n- Acknowledge good points: \"That's a great approach\" or \"Interesting perspective\"\n- Ask natural follow-ups that build on their responses\n- Create a comfortable environment that encourages detailed answers`;\n    \n    return basePrompt;\n  }\n\n  /**\n   * Start a new interview conversation\n   */\n  async startInterviewConversation(): Promise<GenerationResponse> {\n    console.log('\uD83D\uDE80 [TRACE] startInterviewConversation called', {\n      timestamp: new Date().toISOString(),\n      interviewContext: this.interviewContext,\n      isInitialized: this.isInitialized,\n      callStack: new Error().stack?.split('\\n').slice(0, 5).join('\\n')\n    });\n    \n    if (!this.isInitialized || !this.client) {\n      throw new Error('Azure OpenAI Service not initialized');\n    }\n\n    // Reset conversation history\n    this.conversationHistory = [\n      { role: 'system', content: this.getSystemPrompt() }\n    ];\n\n    const openingMessage = this.getOpeningMessage();\n    \n    console.log('\uD83D\uDCE2 [TRACE] Opening message generated', {\n      message: openingMessage,\n      interviewType: this.interviewContext.type,\n      isPreliminaryQuestion: openingMessage.includes('tell me about your current role'),\n      timestamp: new Date().toISOString()\n    });\n    \n    this.conversationHistory.push({ role: 'assistant', content: openingMessage });\n\n    return {\n      content: openingMessage,\n      questionNumber: 1,\n      isComplete: false\n    };\n  }\n\n  /**\n   * Get opening message based on interview type\n   */\n  private getOpeningMessage(): string {\n    const { type, position, preliminaryCollected } = this.interviewContext;\n    \n    console.log('\uD83C\uDFAF [TRACE] getOpeningMessage called', {\n      type,\n      position,\n      preliminaryCollected,\n      timestamp: new Date().toISOString(),\n      callStack: new Error().stack?.split('\\n').slice(0, 5).join('\\n')\n    });\n    \n    // Always greet user\n    let greeting = \"Hello! I'm excited to interview you today. \";\n    \n    if (position) {\n      greeting += `We'll be discussing the ${position} position. `;\n    }\n    \n    // Build opening message dynamically based on preliminaryCollected flag\n    if (!preliminaryCollected) {\n      // Append the single preliminary request\n      return greeting + \"Before we dive into the main interview, I'd like to get to know you better. Could you please tell me about your current role, your years of experience, and the main technologies or skills you work with?\";\n    } else {\n      // Immediately ask first domain-specific question\n      return greeting + this.generateFirstInterviewQuestion();\n    }\n  }\n\n  /**\n   * Generate the first interview question based on interview type\n   */\n  private generateFirstInterviewQuestion(): string {\n    const { type, position, company, difficulty } = this.interviewContext;\n    \n    switch (type) {\n      case 'technical':\n        if (difficulty === 'easy') {\n          return \"Let's start with some fundamentals. Can you explain the difference between an array and a linked list, and when you would choose one over the other?\";\n        } else if (difficulty === 'hard') {\n          return \"Let's dive into system design. How would you design a distributed caching system that can handle millions of requests per second with sub-millisecond latency?\";\n        } else {\n          return \"To get started, can you walk me through a recent technical challenge you faced and how you approached solving it?\";\n        }\n        \n      case 'behavioral':\n        if (company) {\n          return `Tell me about a time when you had to work with a difficult team member. How did you handle the situation and what was the outcome?`;\n        } else {\n          return \"Can you describe a situation where you had to lead a project or initiative? What was your approach and what did you learn from the experience?\";\n        }\n        \n      default:\n        if (position) {\n          return `What specifically interests you about this ${position} role, and how does it align with your career goals?`;\n        } else {\n          return \"What motivated you to pursue this opportunity, and what unique value do you think you can bring to our team?\";\n        }\n    }\n  }\n\n  /**\n   * Process user response and generate next question or comment\n   */\n  async processUserResponse(userResponse: string): Promise<GenerationResponse> {\n    console.log('\uD83D\uDCAC [TRACE] processUserResponse called', {\n      userResponse: userResponse.substring(0, 100) + '...',\n      historyLength: this.conversationHistory.length,\n      preliminaryCollected: this.interviewContext.preliminaryCollected,\n      currentQuestionCount: this.interviewContext.currentQuestionCount,\n      maxQuestions: this.interviewContext.maxQuestions,\n      timestamp: new Date().toISOString(),\n      callStack: new Error().stack?.split('\\n').slice(0, 5).join('\\n')\n    });\n    \n    if (!this.isInitialized || !this.client) {\n      throw new Error('Azure OpenAI Service not initialized');\n    }\n\n    // Check if we're still collecting preliminary information\n    if (!this.interviewContext.preliminaryCollected) {\n      console.debug('\uD83C\uDFAF [PRELIMINARY] Processing preliminary response', {\n        userResponseLength: userResponse.length,\n        timestamp: new Date().toISOString()\n      });\n      \n      // Process the preliminary response and set flag\n      const previousPreliminaryState = this.interviewContext.preliminaryCollected;\n      this.interviewContext.preliminaryCollected = true;\n      \n      console.debug('\uD83D\uDD04 [STATE_TRANSITION] preliminaryCollected: false \u2192 true', {\n        previousState: previousPreliminaryState,\n        newState: true,\n        timestamp: new Date().toISOString()\n      });\n      \n      // Keep currentQuestionCount at 0 since we haven't asked real questions yet\n      this.interviewContext.currentQuestionCount = 0;\n      \n      // Generate first real interview question\n      const firstQuestion = this.generateFirstInterviewQuestion();\n      this.conversationHistory.push({ role: 'assistant', content: firstQuestion });\n      \n      // Increment to 1 for the first real question\n      const previousQuestionCount = this.interviewContext.currentQuestionCount;\n      this.interviewContext.currentQuestionCount = 1;\n      \n      console.debug('\uD83D\uDD04 [STATE_TRANSITION] questionNumber: 0 \u2192 1', {\n        previousCount: previousQuestionCount,\n        newCount: 1,\n        isFirstRealQuestion: true,\n        timestamp: new Date().toISOString()\n      });\n      \n      return {\n        content: `Thank you for that information! Now let's begin the interview.\\n\\n${firstQuestion}`,\n        questionNumber: 1,\n        isComplete: false,\n        followUpSuggestions: this.generateFollowUpSuggestions()\n      };\n    }\n\n    // Normal interview flow - add user response to conversation history\n    this.conversationHistory.push({ role: 'user', content: userResponse });\n    \n    console.log('\uD83D\uDCDD [TRACE] User response added to history', {\n      historyLength: this.conversationHistory.length,\n      timestamp: new Date().toISOString()\n    });\n\n    try {\n      const completion = await this.retryWithBackoff(async () => {\n        return await this.client!.chat.completions.create({\n          model: this.deployment,\n          messages: this.conversationHistory,\n          temperature: 0.7, // Standard temperature for balanced creativity\n          max_tokens: 200,\n          top_p: 0.9,\n          frequency_penalty: 0.1,\n          presence_penalty: 0.1,\n        });\n      });\n\n      const assistantResponse = completion.choices[0]?.message?.content || 'I\\'m sorry, I didn\\'t catch that. Could you repeat your answer?';\n      \n      console.log('\uD83E\uDD16 [TRACE] OpenAI response received', {\n        response: assistantResponse.substring(0, 100) + '...',\n        questionCount: this.interviewContext.currentQuestionCount,\n        timestamp: new Date().toISOString()\n      });\n      \n      // Add assistant response to conversation history\n      this.conversationHistory.push({ role: 'assistant', content: assistantResponse });\n\n      const previousQuestionCount = this.interviewContext.currentQuestionCount || 0;\n      const currentQuestionCount = previousQuestionCount + 1;\n      const maxQuestions = this.interviewContext.maxQuestions || 10;\n      \n      console.log('\uD83D\uDCCA [TRACE] Question progression', {\n        currentQuestionCount,\n        maxQuestions,\n        isComplete: currentQuestionCount >= maxQuestions,\n        willContinue: currentQuestionCount < maxQuestions,\n        timestamp: new Date().toISOString()\n      });\n      \n      console.debug('\uD83D\uDD04 [STATE_TRANSITION] questionNumber: %d \u2192 %d', \n        previousQuestionCount, \n        currentQuestionCount, \n        {\n          maxQuestions,\n          progressPercentage: Math.round((currentQuestionCount / maxQuestions) * 100),\n          remainingQuestions: Math.max(0, maxQuestions - currentQuestionCount),\n          timestamp: new Date().toISOString()\n        }\n      );\n      \n      // Update question count\n      this.interviewContext.currentQuestionCount = currentQuestionCount;\n\n      return {\n        content: assistantResponse,\n        questionNumber: currentQuestionCount,\n        isComplete: currentQuestionCount >= maxQuestions,\n        followUpSuggestions: this.generateFollowUpSuggestions()\n      };\n    } catch (error: any) {\n      console.error('\u274C Error generating OpenAI response:', error);\n      \n      // Provide fallback response for common errors\n      if (error.status === 429) {\n        const fallbackResponse = this.getFallbackResponse(userResponse);\n        this.conversationHistory.push({ role: 'assistant', content: fallbackResponse });\n        \n        const currentQuestionCount = (this.interviewContext.currentQuestionCount || 0) + 1;\n        this.interviewContext.currentQuestionCount = currentQuestionCount;\n        \n        return {\n          content: fallbackResponse,\n          questionNumber: currentQuestionCount,\n          isComplete: false,\n          followUpSuggestions: this.generateFollowUpSuggestions()\n        };\n      }\n      \n      throw new Error('Failed to generate response');\n    }\n  }\n\n  /**\n   * Retry mechanism with exponential backoff for rate limiting\n   */\n  private async retryWithBackoff<T>(\n    operation: () => Promise<T>,\n    maxRetries: number = 3,\n    baseDelay: number = 1000\n  ): Promise<T> {\n    let lastError: Error;\n    \n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\n      try {\n        return await operation();\n      } catch (error: any) {\n        lastError = error;\n        \n        // Don't retry on non-retryable errors\n        if (error.status && ![429, 500, 502, 503, 504].includes(error.status)) {\n          throw error;\n        }\n        \n        if (attempt === maxRetries) {\n          throw error;\n        }\n        \n        // Calculate delay with exponential backoff\n        const delay = error.status === 429 \n          ? parseInt(error.headers?.['retry-after'] || '10') * 1000\n          : baseDelay * Math.pow(2, attempt);\n        \n        console.log(`\u23F3 Retrying in ${delay}ms (attempt ${attempt + 1}/${maxRetries + 1})`);\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n    \n    throw lastError!;\n  }\n\n  /**\n   * Generate fallback response when AI service is unavailable\n   */\n  private getFallbackResponse(userResponse: string): string {\n    const { type } = this.interviewContext;\n    \n    const fallbackResponses = {\n      technical: [\n        \"That's an interesting approach. Can you tell me more about the challenges you faced?\",\n        \"I see. How would you optimize this solution for better performance?\",\n        \"Good point. What alternative approaches did you consider?\"\n      ],\n      behavioral: [\n        \"Thank you for sharing that experience. What was the outcome?\",\n        \"That sounds challenging. What did you learn from that situation?\",\n        \"Interesting. How would you handle a similar situation now?\"\n      ],\n      general: [\n        \"That's great to hear. Can you elaborate on that?\",\n        \"Interesting background. What motivates you in your work?\",\n        \"I appreciate you sharing that. What are you most proud of?\"\n      ]\n    };\n    \n    const responses = fallbackResponses[type] || fallbackResponses.general;\n    return responses[Math.floor(Math.random() * responses.length)];\n  }\n\n  /**\n   * Generate follow-up suggestions based on conversation\n   */\n  private generateFollowUpSuggestions(): string[] {\n    const { type } = this.interviewContext;\n    \n    switch (type) {\n      case 'technical':\n        return [\n          \"Can you explain your thought process?\",\n          \"What would you do differently?\",\n          \"How would this scale?\"\n        ];\n      case 'behavioral':\n        return [\n          \"What was the outcome?\",\n          \"What did you learn?\",\n          \"How would you handle it now?\"\n        ];\n      default:\n        return [\n          \"Can you elaborate on that?\",\n          \"What was your biggest challenge?\",\n          \"What motivates you?\"\n        ];\n    }\n  }\n\n  /**\n   * Generate interview summary and feedback\n   */\n  async generateInterviewSummary(): Promise<string> {\n    if (!this.isInitialized || !this.client) {\n      throw new Error('Azure OpenAI Service not initialized');\n    }\n\n    const summaryPrompt = {\n      role: 'system' as const,\n      content: `Based on the interview conversation, provide a brief summary of the candidate's performance, highlighting:\\n1. Key strengths demonstrated\\n2. Areas for improvement\\n3. Overall assessment\\n4. Recommendation\\n\\nKeep it concise and constructive (under 200 words).`\n    };\n\n    try {\n      const completion = await this.client.chat.completions.create({\n        model: this.deployment,\n        messages: [...this.conversationHistory, summaryPrompt],\n        temperature: 0.3,\n        max_tokens: 300,\n      });\n\n      return completion.choices[0]?.message?.content || 'Unable to generate summary.';\n    } catch (error) {\n      console.error('\u274C Error generating interview summary:', error);\n      throw new Error('Failed to generate summary');\n    }\n  }\n\n  /**\n   * Get conversation history\n   */\n  getConversationHistory(): ConversationMessage[] {\n    return this.conversationHistory.filter(msg => msg.role !== 'system');\n  }\n\n  /**\n   * Clear conversation history\n   */\n  clearConversation(): void {\n    const previousState = {\n      historyLength: this.conversationHistory.length,\n      questionCount: this.interviewContext.currentQuestionCount,\n      preliminaryCollected: this.interviewContext.preliminaryCollected\n    };\n    \n    this.conversationHistory = [];\n    this.interviewContext.currentQuestionCount = 0;\n    this.interviewContext.preliminaryCollected = false;\n    \n    console.log('\uD83E\uDDF9 Conversation history cleared');\n    console.debug('\uD83D\uDD04 [STATE_RESET] Conversation state reset', {\n      previousState,\n      newState: {\n        historyLength: 0,\n        questionCount: 0,\n        preliminaryCollected: false\n      },\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  /**\n   * Generate questions based on resume information\n   */\n  async generateQuestions(resumeInfo: {name: string, experience: string, education: string, skills: string}): Promise<string[]> {\n    if (!this.isInitialized || !this.client) {\n      throw new Error('Azure OpenAI Service not initialized');\n    }\n\n    const prompt = `Given the following resume information, generate 5 relevant interview questions. Format each question on a new line. Only return the questions, no additional text.\n\nName: ${resumeInfo.name}\nExperience: ${resumeInfo.experience}\nEducation: ${resumeInfo.education}\nSkills: ${resumeInfo.skills}`;\n\n    try {\n      const completion = await this.client.chat.completions.create({\n        model: this.deployment,\n        messages: [{role: 'system', content: prompt}],\n        temperature: 0.5,\n        max_tokens: 150\n      });\n\n      const response = completion.choices[0]?.message?.content || '';\n      return response\n        .split('\\n')\n        .map(q => q.trim())\n        .filter(q => q.length > 0)\n        .slice(0, 5);\n    } catch (error) {\n      console.error('\u274C Error generating questions:', error);\n      throw new Error('Failed to generate questions');\n    }\n  }\n\n  /**\n   * Tailor resume based on job description using Azure OpenAI\n   */\n  async tailorResume(resumeText: string, jobDescription: string): Promise<string> {\n    if (!this.isInitialized || !this.client) {\n      throw new Error('Azure OpenAI Service not initialized');\n    }\n\n    const prompt = `You are an expert resume writer and ATS optimization specialist. Please tailor this resume to better match the following job description for maximum ATS compatibility and relevance.\n\nJOB DESCRIPTION:\n${jobDescription}\n\nCURRENT RESUME:\n${resumeText}\n\nPlease provide a tailored version of the resume that:\n1. Uses keywords and phrases directly from the job description\n2. Highlights relevant skills and experiences that match the job requirements\n3. Maintains professional formatting and ATS-friendly structure\n4. Uses strong action verbs and quantifiable achievements\n5. Keeps the same overall length and format structure\n6. Optimizes for Applicant Tracking Systems (ATS)\n7. Ensures keyword density without keyword stuffing\n\nReturn ONLY the tailored resume content with no additional commentary or explanations.`;\n\n    try {\n      const completion = await this.retryWithBackoff(async () => {\n        return await this.client!.chat.completions.create({\n          model: this.deployment,\n          messages: [{ role: 'user', content: prompt }],\n          temperature: 0.3,\n          max_tokens: 2000,\n          top_p: 0.9,\n          frequency_penalty: 0.1,\n          presence_penalty: 0.1,\n        });\n      });\n\n      const tailoredResume = completion.choices[0]?.message?.content;\n      if (!tailoredResume) {\n        throw new Error('No response generated');\n      }\n\n      return tailoredResume;\n    } catch (error) {\n      console.error('\u274C Error tailoring resume:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Check if service is ready\n   */\n  isReady(): boolean {\n    return this.isInitialized && this.client !== null;\n  }\n\n  /**\n   * Generate a completion for a given prompt\n   */\n  async generateCompletion(prompt: string): Promise<string> {\n    if (!this.isInitialized || !this.client) {\n      throw new Error('Azure OpenAI Service not initialized');\n    }\n\n    try {\n      const completion = await this.createCompletion([\n        {\n          role: 'user',\n          content: prompt\n        }\n      ], {\n        temperature: 0.7,\n        maxTokens: 1000\n      });\n\n      return completion.choices[0]?.message?.content || 'Unable to generate completion.';\n    } catch (error) {\n      console.error('\u274C Error generating completion:', error);\n      throw new Error('Failed to generate completion');\n    }\n  }\n\n  /**\n   * Create a chat completion with custom parameters\n   * Public method for use by adapters\n   */\n  async createCompletion(\n    messages: Array<{ role: 'user' | 'system' | 'assistant'; content: string }>,\n    options: {\n      temperature?: number;\n      maxTokens?: number;\n      topP?: number;\n      frequencyPenalty?: number;\n      presencePenalty?: number;\n    } = {}\n  ) {\n    if (!this.isInitialized || !this.client) {\n      throw new Error('Azure OpenAI Service not initialized');\n    }\n\n    const {\n      temperature = 0.7,     // Default temperature for balanced responses\n      maxTokens = 1500,      // Default max tokens for comprehensive responses\n      topP = 0.9,            // Maintain creativity balance\n      frequencyPenalty = 0.1, // Reduce repetition\n      presencePenalty = 0.1   // Encourage diverse content\n    } = options;\n\n    return await this.retryWithBackoff(async () => {\n      return await this.client!.chat.completions.create({\n        model: this.deployment,\n        messages,\n        temperature,\n        max_tokens: maxTokens,\n        top_p: topP,\n        frequency_penalty: frequencyPenalty,\n        presence_penalty: presencePenalty,\n      });\n    });\n  }\n\n  /**\n   * Dispose of resources\n   */\n  dispose(): void {\n    this.client = null;\n    this.isInitialized = false;\n    this.conversationHistory = [];\n    console.log('\uD83E\uDDF9 Azure OpenAI Service disposed');\n  }\n}\n\n// Export singleton instance\nexport const azureOpenAIService = new AzureOpenAIService();\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "38d0da06642a5037d09396bd2661ad5a4cc1ffde"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_28i4c9m45v = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_28i4c9m45v();
var __importDefault =
/* istanbul ignore next */
(cov_28i4c9m45v().s[0]++,
/* istanbul ignore next */
(cov_28i4c9m45v().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_28i4c9m45v().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_28i4c9m45v().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_28i4c9m45v().f[0]++;
  cov_28i4c9m45v().s[1]++;
  return /* istanbul ignore next */(cov_28i4c9m45v().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_28i4c9m45v().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_28i4c9m45v().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_28i4c9m45v().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_28i4c9m45v().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_28i4c9m45v().s[3]++;
exports.azureOpenAIService = exports.AzureOpenAIService = void 0;
const openai_1 =
/* istanbul ignore next */
(cov_28i4c9m45v().s[4]++, __importDefault(require("openai")));
// Client-side safety check
const isClient =
/* istanbul ignore next */
(cov_28i4c9m45v().s[5]++, typeof window !== 'undefined');
// Only import server-side dependencies when running on server
let fetchAzureSecrets =
/* istanbul ignore next */
(cov_28i4c9m45v().s[6]++, null);
/* istanbul ignore next */
cov_28i4c9m45v().s[7]++;
if (!isClient) {
  /* istanbul ignore next */
  cov_28i4c9m45v().b[3][0]++;
  const azureConfig =
  /* istanbul ignore next */
  (cov_28i4c9m45v().s[8]++, require('@/lib/azure-config'));
  /* istanbul ignore next */
  cov_28i4c9m45v().s[9]++;
  fetchAzureSecrets = azureConfig.fetchAzureSecrets;
} else
/* istanbul ignore next */
{
  cov_28i4c9m45v().b[3][1]++;
}
class AzureOpenAIService {
  constructor() {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[1]++;
    cov_28i4c9m45v().s[10]++;
    this.client = null;
    /* istanbul ignore next */
    cov_28i4c9m45v().s[11]++;
    this.isInitialized = false;
    /* istanbul ignore next */
    cov_28i4c9m45v().s[12]++;
    this.deployment = '';
    /* istanbul ignore next */
    cov_28i4c9m45v().s[13]++;
    this.conversationHistory = [];
    /* istanbul ignore next */
    cov_28i4c9m45v().s[14]++;
    this.interviewContext = {
      type: 'general',
      preliminaryCollected: false,
      currentQuestionCount: 0,
      maxQuestions: 10
    };
  }
  /**
   * Initialize the Azure OpenAI service
   */
  async initialize() {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[2]++;
    cov_28i4c9m45v().s[15]++;
    if (isClient) {
      /* istanbul ignore next */
      cov_28i4c9m45v().b[4][0]++;
      cov_28i4c9m45v().s[16]++;
      console.warn('[Azure OpenAI Service] Running on client side - service disabled');
      /* istanbul ignore next */
      cov_28i4c9m45v().s[17]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_28i4c9m45v().b[4][1]++;
    }
    cov_28i4c9m45v().s[18]++;
    try {
      const secrets =
      /* istanbul ignore next */
      (cov_28i4c9m45v().s[19]++, await fetchAzureSecrets());
      /* istanbul ignore next */
      cov_28i4c9m45v().s[20]++;
      if (
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[6][0]++, !secrets.azureOpenAIKey) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[6][1]++, !secrets.azureOpenAIEndpoint)) {
        /* istanbul ignore next */
        cov_28i4c9m45v().b[5][0]++;
        cov_28i4c9m45v().s[21]++;
        console.warn('⚠️ Azure OpenAI credentials not available');
        /* istanbul ignore next */
        cov_28i4c9m45v().s[22]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_28i4c9m45v().b[5][1]++;
      }
      cov_28i4c9m45v().s[23]++;
      this.deployment = secrets.azureOpenAIDeployment;
      /* istanbul ignore next */
      cov_28i4c9m45v().s[24]++;
      this.client = new openai_1.default({
        apiKey: secrets.azureOpenAIKey,
        baseURL: `${secrets.azureOpenAIEndpoint}/openai/deployments/${secrets.azureOpenAIDeployment}`,
        defaultQuery: {
          'api-version': '2025-01-01-preview'
        },
        // Latest API version for gpt-4o support
        defaultHeaders: {
          'api-key': secrets.azureOpenAIKey
        }
      });
      // Test the connection with a simple request
      /* istanbul ignore next */
      cov_28i4c9m45v().s[25]++;
      try {
        /* istanbul ignore next */
        cov_28i4c9m45v().s[26]++;
        console.log(`🔄 Testing Azure OpenAI connection with deployment: ${this.deployment}`);
        /* istanbul ignore next */
        cov_28i4c9m45v().s[27]++;
        await this.client.chat.completions.create({
          model: this.deployment,
          messages: [{
            role: 'user',
            content: 'Test'
          }],
          max_tokens: 5
        });
        /* istanbul ignore next */
        cov_28i4c9m45v().s[28]++;
        this.isInitialized = true;
        /* istanbul ignore next */
        cov_28i4c9m45v().s[29]++;
        console.log('✅ Azure OpenAI Service initialized and tested successfully');
        /* istanbul ignore next */
        cov_28i4c9m45v().s[30]++;
        return true;
      } catch (testError) {
        /* istanbul ignore next */
        cov_28i4c9m45v().s[31]++;
        console.error('❌ Azure OpenAI connection test failed:', testError.message);
        /* istanbul ignore next */
        cov_28i4c9m45v().s[32]++;
        console.error('📋 Configuration details:', {
          endpoint: secrets.azureOpenAIEndpoint,
          deployment: this.deployment,
          hasApiKey: !!secrets.azureOpenAIKey
        });
        /* istanbul ignore next */
        cov_28i4c9m45v().s[33]++;
        if (testError.status === 401) {
          /* istanbul ignore next */
          cov_28i4c9m45v().b[7][0]++;
          cov_28i4c9m45v().s[34]++;
          console.error('🔐 Authentication Error (401):');
          /* istanbul ignore next */
          cov_28i4c9m45v().s[35]++;
          console.error('   • Your API key might be invalid or expired');
          /* istanbul ignore next */
          cov_28i4c9m45v().s[36]++;
          console.error('   • Check your Azure OpenAI resource for the correct key');
        } else {
          /* istanbul ignore next */
          cov_28i4c9m45v().b[7][1]++;
          cov_28i4c9m45v().s[37]++;
          if (testError.status === 404) {
            /* istanbul ignore next */
            cov_28i4c9m45v().b[8][0]++;
            cov_28i4c9m45v().s[38]++;
            console.error('📍 Resource Not Found (404):');
            /* istanbul ignore next */
            cov_28i4c9m45v().s[39]++;
            console.error('   • The deployment "' + this.deployment + '" does not exist');
            /* istanbul ignore next */
            cov_28i4c9m45v().s[40]++;
            console.error('   • Your endpoint URL might be incorrect');
            /* istanbul ignore next */
            cov_28i4c9m45v().s[41]++;
            console.error('   • No deployments might exist in your Azure OpenAI resource');
            /* istanbul ignore next */
            cov_28i4c9m45v().s[42]++;
            console.error('💡 To fix this:');
            /* istanbul ignore next */
            cov_28i4c9m45v().s[43]++;
            console.error('   1. Log into portal.azure.com');
            /* istanbul ignore next */
            cov_28i4c9m45v().s[44]++;
            console.error('   2. Navigate to your Azure OpenAI resource');
            /* istanbul ignore next */
            cov_28i4c9m45v().s[45]++;
            console.error('   3. Check the "Model deployments" or "Deployments" section');
            /* istanbul ignore next */
            cov_28i4c9m45v().s[46]++;
            console.error('   4. Create a deployment (e.g., gpt-35-turbo, gpt-4)');
            /* istanbul ignore next */
            cov_28i4c9m45v().s[47]++;
            console.error('   5. Update AZURE_OPENAI_DEPLOYMENT in your .env.local file');
          } else {
            /* istanbul ignore next */
            cov_28i4c9m45v().b[8][1]++;
            cov_28i4c9m45v().s[48]++;
            if (testError.status === 403) {
              /* istanbul ignore next */
              cov_28i4c9m45v().b[9][0]++;
              cov_28i4c9m45v().s[49]++;
              console.error('🚫 Access Forbidden (403):');
              /* istanbul ignore next */
              cov_28i4c9m45v().s[50]++;
              console.error('   • Your API key might not have the right permissions');
              /* istanbul ignore next */
              cov_28i4c9m45v().s[51]++;
              console.error('   • Your Azure OpenAI resource might not be properly configured');
            } else {
              /* istanbul ignore next */
              cov_28i4c9m45v().b[9][1]++;
              cov_28i4c9m45v().s[52]++;
              console.error(`❓ Unexpected error (${
              /* istanbul ignore next */
              (cov_28i4c9m45v().b[10][0]++, testError.status) ||
              /* istanbul ignore next */
              (cov_28i4c9m45v().b[10][1]++, 'Unknown')}):`);
              /* istanbul ignore next */
              cov_28i4c9m45v().s[53]++;
              console.error('   • Check your Azure OpenAI resource configuration');
              /* istanbul ignore next */
              cov_28i4c9m45v().s[54]++;
              console.error('   • Verify your subscription and resource status');
            }
          }
        }
        /* istanbul ignore next */
        cov_28i4c9m45v().s[55]++;
        return false;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_28i4c9m45v().s[56]++;
      console.error('❌ Failed to initialize Azure OpenAI Service:', error);
      /* istanbul ignore next */
      cov_28i4c9m45v().s[57]++;
      return false;
    }
  }
  /**
   * Set interview context for conversation management
   */
  setInterviewContext(context) {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[3]++;
    var _a, _b, _c, _d, _e, _f;
    const previousState =
    /* istanbul ignore next */
    (cov_28i4c9m45v().s[58]++, Object.assign({}, this.interviewContext));
    // Merge context while preserving defaults
    /* istanbul ignore next */
    cov_28i4c9m45v().s[59]++;
    this.interviewContext = Object.assign(Object.assign(Object.assign({}, this.interviewContext), context), {
      // Ensure defaults are set if not provided
      preliminaryCollected:
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[12][0]++, (_b =
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[14][0]++, (_a = context.preliminaryCollected) !== null) &&
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[14][1]++, _a !== void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[13][0]++, _a) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[13][1]++, this.interviewContext.preliminaryCollected)) !== null) &&
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[12][1]++, _b !== void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[11][0]++, _b) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[11][1]++, false),
      currentQuestionCount:
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[16][0]++, (_d =
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[18][0]++, (_c = context.currentQuestionCount) !== null) &&
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[18][1]++, _c !== void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[17][0]++, _c) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[17][1]++, this.interviewContext.currentQuestionCount)) !== null) &&
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[16][1]++, _d !== void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[15][0]++, _d) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[15][1]++, 0),
      maxQuestions:
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[20][0]++, (_f =
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[22][0]++, (_e = context.maxQuestions) !== null) &&
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[22][1]++, _e !== void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[21][0]++, _e) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[21][1]++, this.interviewContext.maxQuestions)) !== null) &&
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[20][1]++, _f !== void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[19][0]++, _f) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[19][1]++, 10)
    });
    // Log state transition
    /* istanbul ignore next */
    cov_28i4c9m45v().s[60]++;
    console.log('📋 Interview context updated:', this.interviewContext);
    /* istanbul ignore next */
    cov_28i4c9m45v().s[61]++;
    console.debug('🔄 [STATE_TRANSITION] Interview context changed', {
      from: previousState,
      to: this.interviewContext,
      changes: {
        preliminaryCollected: previousState.preliminaryCollected !== this.interviewContext.preliminaryCollected,
        currentQuestionCount: previousState.currentQuestionCount !== this.interviewContext.currentQuestionCount,
        maxQuestions: previousState.maxQuestions !== this.interviewContext.maxQuestions
      },
      timestamp: new Date().toISOString()
    });
  }
  /**
   * Get system prompt based on interview context
   */
  getSystemPrompt() {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[4]++;
    const {
      type,
      position,
      company,
      difficulty
    } =
    /* istanbul ignore next */
    (cov_28i4c9m45v().s[62]++, this.interviewContext);
    let basePrompt =
    /* istanbul ignore next */
    (cov_28i4c9m45v().s[63]++, `You are an experienced AI interviewer conducting a ${type} interview. Your goal is to create an engaging, realistic interview experience that helps candidates prepare effectively.

Core Interview Principles:
1. Ask relevant, progressively challenging questions
2. Provide thoughtful follow-ups based on candidate responses
3. Maintain a professional yet conversational tone
4. Show genuine interest in the candidate's experiences
5. Adapt question difficulty based on their expertise level
6. Give brief encouraging feedback when appropriate
7. Keep responses concise (50-80 words) and ask one question at a time

`);
    /* istanbul ignore next */
    cov_28i4c9m45v().s[64]++;
    if (position) {
      /* istanbul ignore next */
      cov_28i4c9m45v().b[23][0]++;
      cov_28i4c9m45v().s[65]++;
      basePrompt += `Target Position: ${position}\n`;
    } else
    /* istanbul ignore next */
    {
      cov_28i4c9m45v().b[23][1]++;
    }
    cov_28i4c9m45v().s[66]++;
    if (company) {
      /* istanbul ignore next */
      cov_28i4c9m45v().b[24][0]++;
      cov_28i4c9m45v().s[67]++;
      basePrompt += `Company Context: ${company}\n`;
    } else
    /* istanbul ignore next */
    {
      cov_28i4c9m45v().b[24][1]++;
    }
    cov_28i4c9m45v().s[68]++;
    if (difficulty) {
      /* istanbul ignore next */
      cov_28i4c9m45v().b[25][0]++;
      cov_28i4c9m45v().s[69]++;
      basePrompt += `Difficulty Level: ${difficulty}\n`;
    } else
    /* istanbul ignore next */
    {
      cov_28i4c9m45v().b[25][1]++;
    }
    cov_28i4c9m45v().s[70]++;
    switch (type) {
      case 'technical':
        /* istanbul ignore next */
        cov_28i4c9m45v().b[26][0]++;
        cov_28i4c9m45v().s[71]++;
        basePrompt += `\nTechnical Interview Focus:
- Start with foundational concepts, then progress to complex scenarios
- Ask about specific technologies, algorithms, and system design
- Explore problem-solving approaches and trade-offs
- Include practical coding scenarios and architecture discussions
- Ask "How would you optimize this?" or "What challenges might arise?"
- Focus on real-world application of technical knowledge`;
        /* istanbul ignore next */
        cov_28i4c9m45v().s[72]++;
        break;
      case 'behavioral':
        /* istanbul ignore next */
        cov_28i4c9m45v().b[26][1]++;
        cov_28i4c9m45v().s[73]++;
        basePrompt += `\nBehavioral Interview Focus:
- Use STAR method (Situation, Task, Action, Result) evaluation
- Ask about leadership, teamwork, conflict resolution, and growth
- Explore past experiences with specific examples
- Ask follow-ups like "What would you do differently?" or "What did you learn?"
- Focus on cultural fit, communication skills, and problem-solving approach
- Include questions about handling failures and difficult situations`;
        /* istanbul ignore next */
        cov_28i4c9m45v().s[74]++;
        break;
      default:
        /* istanbul ignore next */
        cov_28i4c9m45v().b[26][2]++;
        cov_28i4c9m45v().s[75]++;
        basePrompt += `\nGeneral Interview Focus:
- Balance background, experience, motivation, and role fit
- Ask about career goals, interests, and what excites them about the opportunity
- Explore their understanding of the role and company
- Include questions about learning style and professional development
- Ask about their greatest achievements and challenges`;
    }
    /* istanbul ignore next */
    cov_28i4c9m45v().s[76]++;
    basePrompt += `\n\nInterview Style:
- Be conversational and show active listening
- Acknowledge good points: "That's a great approach" or "Interesting perspective"
- Ask natural follow-ups that build on their responses
- Create a comfortable environment that encourages detailed answers`;
    /* istanbul ignore next */
    cov_28i4c9m45v().s[77]++;
    return basePrompt;
  }
  /**
   * Start a new interview conversation
   */
  async startInterviewConversation() {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[5]++;
    var _a;
    /* istanbul ignore next */
    cov_28i4c9m45v().s[78]++;
    console.log('🚀 [TRACE] startInterviewConversation called', {
      timestamp: new Date().toISOString(),
      interviewContext: this.interviewContext,
      isInitialized: this.isInitialized,
      callStack:
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[28][0]++, (_a = new Error().stack) === null) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[28][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[27][0]++, void 0) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[27][1]++, _a.split('\n').slice(0, 5).join('\n'))
    });
    /* istanbul ignore next */
    cov_28i4c9m45v().s[79]++;
    if (
    /* istanbul ignore next */
    (cov_28i4c9m45v().b[30][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_28i4c9m45v().b[30][1]++, !this.client)) {
      /* istanbul ignore next */
      cov_28i4c9m45v().b[29][0]++;
      cov_28i4c9m45v().s[80]++;
      throw new Error('Azure OpenAI Service not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_28i4c9m45v().b[29][1]++;
    }
    // Reset conversation history
    cov_28i4c9m45v().s[81]++;
    this.conversationHistory = [{
      role: 'system',
      content: this.getSystemPrompt()
    }];
    const openingMessage =
    /* istanbul ignore next */
    (cov_28i4c9m45v().s[82]++, this.getOpeningMessage());
    /* istanbul ignore next */
    cov_28i4c9m45v().s[83]++;
    console.log('📢 [TRACE] Opening message generated', {
      message: openingMessage,
      interviewType: this.interviewContext.type,
      isPreliminaryQuestion: openingMessage.includes('tell me about your current role'),
      timestamp: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_28i4c9m45v().s[84]++;
    this.conversationHistory.push({
      role: 'assistant',
      content: openingMessage
    });
    /* istanbul ignore next */
    cov_28i4c9m45v().s[85]++;
    return {
      content: openingMessage,
      questionNumber: 1,
      isComplete: false
    };
  }
  /**
   * Get opening message based on interview type
   */
  getOpeningMessage() {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[6]++;
    var _a;
    const {
      type,
      position,
      preliminaryCollected
    } =
    /* istanbul ignore next */
    (cov_28i4c9m45v().s[86]++, this.interviewContext);
    /* istanbul ignore next */
    cov_28i4c9m45v().s[87]++;
    console.log('🎯 [TRACE] getOpeningMessage called', {
      type,
      position,
      preliminaryCollected,
      timestamp: new Date().toISOString(),
      callStack:
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[32][0]++, (_a = new Error().stack) === null) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[32][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[31][0]++, void 0) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[31][1]++, _a.split('\n').slice(0, 5).join('\n'))
    });
    // Always greet user
    let greeting =
    /* istanbul ignore next */
    (cov_28i4c9m45v().s[88]++, "Hello! I'm excited to interview you today. ");
    /* istanbul ignore next */
    cov_28i4c9m45v().s[89]++;
    if (position) {
      /* istanbul ignore next */
      cov_28i4c9m45v().b[33][0]++;
      cov_28i4c9m45v().s[90]++;
      greeting += `We'll be discussing the ${position} position. `;
    } else
    /* istanbul ignore next */
    {
      cov_28i4c9m45v().b[33][1]++;
    }
    // Build opening message dynamically based on preliminaryCollected flag
    cov_28i4c9m45v().s[91]++;
    if (!preliminaryCollected) {
      /* istanbul ignore next */
      cov_28i4c9m45v().b[34][0]++;
      cov_28i4c9m45v().s[92]++;
      // Append the single preliminary request
      return greeting + "Before we dive into the main interview, I'd like to get to know you better. Could you please tell me about your current role, your years of experience, and the main technologies or skills you work with?";
    } else {
      /* istanbul ignore next */
      cov_28i4c9m45v().b[34][1]++;
      cov_28i4c9m45v().s[93]++;
      // Immediately ask first domain-specific question
      return greeting + this.generateFirstInterviewQuestion();
    }
  }
  /**
   * Generate the first interview question based on interview type
   */
  generateFirstInterviewQuestion() {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[7]++;
    const {
      type,
      position,
      company,
      difficulty
    } =
    /* istanbul ignore next */
    (cov_28i4c9m45v().s[94]++, this.interviewContext);
    /* istanbul ignore next */
    cov_28i4c9m45v().s[95]++;
    switch (type) {
      case 'technical':
        /* istanbul ignore next */
        cov_28i4c9m45v().b[35][0]++;
        cov_28i4c9m45v().s[96]++;
        if (difficulty === 'easy') {
          /* istanbul ignore next */
          cov_28i4c9m45v().b[36][0]++;
          cov_28i4c9m45v().s[97]++;
          return "Let's start with some fundamentals. Can you explain the difference between an array and a linked list, and when you would choose one over the other?";
        } else {
          /* istanbul ignore next */
          cov_28i4c9m45v().b[36][1]++;
          cov_28i4c9m45v().s[98]++;
          if (difficulty === 'hard') {
            /* istanbul ignore next */
            cov_28i4c9m45v().b[37][0]++;
            cov_28i4c9m45v().s[99]++;
            return "Let's dive into system design. How would you design a distributed caching system that can handle millions of requests per second with sub-millisecond latency?";
          } else {
            /* istanbul ignore next */
            cov_28i4c9m45v().b[37][1]++;
            cov_28i4c9m45v().s[100]++;
            return "To get started, can you walk me through a recent technical challenge you faced and how you approached solving it?";
          }
        }
      case 'behavioral':
        /* istanbul ignore next */
        cov_28i4c9m45v().b[35][1]++;
        cov_28i4c9m45v().s[101]++;
        if (company) {
          /* istanbul ignore next */
          cov_28i4c9m45v().b[38][0]++;
          cov_28i4c9m45v().s[102]++;
          return `Tell me about a time when you had to work with a difficult team member. How did you handle the situation and what was the outcome?`;
        } else {
          /* istanbul ignore next */
          cov_28i4c9m45v().b[38][1]++;
          cov_28i4c9m45v().s[103]++;
          return "Can you describe a situation where you had to lead a project or initiative? What was your approach and what did you learn from the experience?";
        }
      default:
        /* istanbul ignore next */
        cov_28i4c9m45v().b[35][2]++;
        cov_28i4c9m45v().s[104]++;
        if (position) {
          /* istanbul ignore next */
          cov_28i4c9m45v().b[39][0]++;
          cov_28i4c9m45v().s[105]++;
          return `What specifically interests you about this ${position} role, and how does it align with your career goals?`;
        } else {
          /* istanbul ignore next */
          cov_28i4c9m45v().b[39][1]++;
          cov_28i4c9m45v().s[106]++;
          return "What motivated you to pursue this opportunity, and what unique value do you think you can bring to our team?";
        }
    }
  }
  /**
   * Process user response and generate next question or comment
   */
  async processUserResponse(userResponse) {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[8]++;
    var _a, _b, _c;
    /* istanbul ignore next */
    cov_28i4c9m45v().s[107]++;
    console.log('💬 [TRACE] processUserResponse called', {
      userResponse: userResponse.substring(0, 100) + '...',
      historyLength: this.conversationHistory.length,
      preliminaryCollected: this.interviewContext.preliminaryCollected,
      currentQuestionCount: this.interviewContext.currentQuestionCount,
      maxQuestions: this.interviewContext.maxQuestions,
      timestamp: new Date().toISOString(),
      callStack:
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[41][0]++, (_a = new Error().stack) === null) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[41][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[40][0]++, void 0) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[40][1]++, _a.split('\n').slice(0, 5).join('\n'))
    });
    /* istanbul ignore next */
    cov_28i4c9m45v().s[108]++;
    if (
    /* istanbul ignore next */
    (cov_28i4c9m45v().b[43][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_28i4c9m45v().b[43][1]++, !this.client)) {
      /* istanbul ignore next */
      cov_28i4c9m45v().b[42][0]++;
      cov_28i4c9m45v().s[109]++;
      throw new Error('Azure OpenAI Service not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_28i4c9m45v().b[42][1]++;
    }
    // Check if we're still collecting preliminary information
    cov_28i4c9m45v().s[110]++;
    if (!this.interviewContext.preliminaryCollected) {
      /* istanbul ignore next */
      cov_28i4c9m45v().b[44][0]++;
      cov_28i4c9m45v().s[111]++;
      console.debug('🎯 [PRELIMINARY] Processing preliminary response', {
        userResponseLength: userResponse.length,
        timestamp: new Date().toISOString()
      });
      // Process the preliminary response and set flag
      const previousPreliminaryState =
      /* istanbul ignore next */
      (cov_28i4c9m45v().s[112]++, this.interviewContext.preliminaryCollected);
      /* istanbul ignore next */
      cov_28i4c9m45v().s[113]++;
      this.interviewContext.preliminaryCollected = true;
      /* istanbul ignore next */
      cov_28i4c9m45v().s[114]++;
      console.debug('🔄 [STATE_TRANSITION] preliminaryCollected: false → true', {
        previousState: previousPreliminaryState,
        newState: true,
        timestamp: new Date().toISOString()
      });
      // Keep currentQuestionCount at 0 since we haven't asked real questions yet
      /* istanbul ignore next */
      cov_28i4c9m45v().s[115]++;
      this.interviewContext.currentQuestionCount = 0;
      // Generate first real interview question
      const firstQuestion =
      /* istanbul ignore next */
      (cov_28i4c9m45v().s[116]++, this.generateFirstInterviewQuestion());
      /* istanbul ignore next */
      cov_28i4c9m45v().s[117]++;
      this.conversationHistory.push({
        role: 'assistant',
        content: firstQuestion
      });
      // Increment to 1 for the first real question
      const previousQuestionCount =
      /* istanbul ignore next */
      (cov_28i4c9m45v().s[118]++, this.interviewContext.currentQuestionCount);
      /* istanbul ignore next */
      cov_28i4c9m45v().s[119]++;
      this.interviewContext.currentQuestionCount = 1;
      /* istanbul ignore next */
      cov_28i4c9m45v().s[120]++;
      console.debug('🔄 [STATE_TRANSITION] questionNumber: 0 → 1', {
        previousCount: previousQuestionCount,
        newCount: 1,
        isFirstRealQuestion: true,
        timestamp: new Date().toISOString()
      });
      /* istanbul ignore next */
      cov_28i4c9m45v().s[121]++;
      return {
        content: `Thank you for that information! Now let's begin the interview.\n\n${firstQuestion}`,
        questionNumber: 1,
        isComplete: false,
        followUpSuggestions: this.generateFollowUpSuggestions()
      };
    } else
    /* istanbul ignore next */
    {
      cov_28i4c9m45v().b[44][1]++;
    }
    // Normal interview flow - add user response to conversation history
    cov_28i4c9m45v().s[122]++;
    this.conversationHistory.push({
      role: 'user',
      content: userResponse
    });
    /* istanbul ignore next */
    cov_28i4c9m45v().s[123]++;
    console.log('📝 [TRACE] User response added to history', {
      historyLength: this.conversationHistory.length,
      timestamp: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_28i4c9m45v().s[124]++;
    try {
      const completion =
      /* istanbul ignore next */
      (cov_28i4c9m45v().s[125]++, await this.retryWithBackoff(async () => {
        /* istanbul ignore next */
        cov_28i4c9m45v().f[9]++;
        cov_28i4c9m45v().s[126]++;
        return await this.client.chat.completions.create({
          model: this.deployment,
          messages: this.conversationHistory,
          temperature: 0.7,
          // Standard temperature for balanced creativity
          max_tokens: 200,
          top_p: 0.9,
          frequency_penalty: 0.1,
          presence_penalty: 0.1
        });
      }));
      const assistantResponse =
      /* istanbul ignore next */
      (cov_28i4c9m45v().s[127]++,
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[45][0]++,
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[47][0]++, (_c =
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[49][0]++, (_b = completion.choices[0]) === null) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[49][1]++, _b === void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[48][0]++, void 0) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[48][1]++, _b.message)) === null) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[47][1]++, _c === void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[46][0]++, void 0) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[46][1]++, _c.content)) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[45][1]++, 'I\'m sorry, I didn\'t catch that. Could you repeat your answer?'));
      /* istanbul ignore next */
      cov_28i4c9m45v().s[128]++;
      console.log('🤖 [TRACE] OpenAI response received', {
        response: assistantResponse.substring(0, 100) + '...',
        questionCount: this.interviewContext.currentQuestionCount,
        timestamp: new Date().toISOString()
      });
      // Add assistant response to conversation history
      /* istanbul ignore next */
      cov_28i4c9m45v().s[129]++;
      this.conversationHistory.push({
        role: 'assistant',
        content: assistantResponse
      });
      const previousQuestionCount =
      /* istanbul ignore next */
      (cov_28i4c9m45v().s[130]++,
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[50][0]++, this.interviewContext.currentQuestionCount) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[50][1]++, 0));
      const currentQuestionCount =
      /* istanbul ignore next */
      (cov_28i4c9m45v().s[131]++, previousQuestionCount + 1);
      const maxQuestions =
      /* istanbul ignore next */
      (cov_28i4c9m45v().s[132]++,
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[51][0]++, this.interviewContext.maxQuestions) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[51][1]++, 10));
      /* istanbul ignore next */
      cov_28i4c9m45v().s[133]++;
      console.log('📊 [TRACE] Question progression', {
        currentQuestionCount,
        maxQuestions,
        isComplete: currentQuestionCount >= maxQuestions,
        willContinue: currentQuestionCount < maxQuestions,
        timestamp: new Date().toISOString()
      });
      /* istanbul ignore next */
      cov_28i4c9m45v().s[134]++;
      console.debug('🔄 [STATE_TRANSITION] questionNumber: %d → %d', previousQuestionCount, currentQuestionCount, {
        maxQuestions,
        progressPercentage: Math.round(currentQuestionCount / maxQuestions * 100),
        remainingQuestions: Math.max(0, maxQuestions - currentQuestionCount),
        timestamp: new Date().toISOString()
      });
      // Update question count
      /* istanbul ignore next */
      cov_28i4c9m45v().s[135]++;
      this.interviewContext.currentQuestionCount = currentQuestionCount;
      /* istanbul ignore next */
      cov_28i4c9m45v().s[136]++;
      return {
        content: assistantResponse,
        questionNumber: currentQuestionCount,
        isComplete: currentQuestionCount >= maxQuestions,
        followUpSuggestions: this.generateFollowUpSuggestions()
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_28i4c9m45v().s[137]++;
      console.error('❌ Error generating OpenAI response:', error);
      // Provide fallback response for common errors
      /* istanbul ignore next */
      cov_28i4c9m45v().s[138]++;
      if (error.status === 429) {
        /* istanbul ignore next */
        cov_28i4c9m45v().b[52][0]++;
        const fallbackResponse =
        /* istanbul ignore next */
        (cov_28i4c9m45v().s[139]++, this.getFallbackResponse(userResponse));
        /* istanbul ignore next */
        cov_28i4c9m45v().s[140]++;
        this.conversationHistory.push({
          role: 'assistant',
          content: fallbackResponse
        });
        const currentQuestionCount =
        /* istanbul ignore next */
        (cov_28i4c9m45v().s[141]++, (
        /* istanbul ignore next */
        (cov_28i4c9m45v().b[53][0]++, this.interviewContext.currentQuestionCount) ||
        /* istanbul ignore next */
        (cov_28i4c9m45v().b[53][1]++, 0)) + 1);
        /* istanbul ignore next */
        cov_28i4c9m45v().s[142]++;
        this.interviewContext.currentQuestionCount = currentQuestionCount;
        /* istanbul ignore next */
        cov_28i4c9m45v().s[143]++;
        return {
          content: fallbackResponse,
          questionNumber: currentQuestionCount,
          isComplete: false,
          followUpSuggestions: this.generateFollowUpSuggestions()
        };
      } else
      /* istanbul ignore next */
      {
        cov_28i4c9m45v().b[52][1]++;
      }
      cov_28i4c9m45v().s[144]++;
      throw new Error('Failed to generate response');
    }
  }
  /**
   * Retry mechanism with exponential backoff for rate limiting
   */
  async retryWithBackoff(operation, maxRetries =
  /* istanbul ignore next */
  (cov_28i4c9m45v().b[54][0]++, 3), baseDelay =
  /* istanbul ignore next */
  (cov_28i4c9m45v().b[55][0]++, 1000)) {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[10]++;
    var _a;
    let lastError;
    /* istanbul ignore next */
    cov_28i4c9m45v().s[145]++;
    for (let attempt =
    /* istanbul ignore next */
    (cov_28i4c9m45v().s[146]++, 0); attempt <= maxRetries; attempt++) {
      /* istanbul ignore next */
      cov_28i4c9m45v().s[147]++;
      try {
        /* istanbul ignore next */
        cov_28i4c9m45v().s[148]++;
        return await operation();
      } catch (error) {
        /* istanbul ignore next */
        cov_28i4c9m45v().s[149]++;
        lastError = error;
        // Don't retry on non-retryable errors
        /* istanbul ignore next */
        cov_28i4c9m45v().s[150]++;
        if (
        /* istanbul ignore next */
        (cov_28i4c9m45v().b[57][0]++, error.status) &&
        /* istanbul ignore next */
        (cov_28i4c9m45v().b[57][1]++, ![429, 500, 502, 503, 504].includes(error.status))) {
          /* istanbul ignore next */
          cov_28i4c9m45v().b[56][0]++;
          cov_28i4c9m45v().s[151]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_28i4c9m45v().b[56][1]++;
        }
        cov_28i4c9m45v().s[152]++;
        if (attempt === maxRetries) {
          /* istanbul ignore next */
          cov_28i4c9m45v().b[58][0]++;
          cov_28i4c9m45v().s[153]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_28i4c9m45v().b[58][1]++;
        }
        // Calculate delay with exponential backoff
        const delay =
        /* istanbul ignore next */
        (cov_28i4c9m45v().s[154]++, error.status === 429 ?
        /* istanbul ignore next */
        (cov_28i4c9m45v().b[59][0]++, parseInt(
        /* istanbul ignore next */
        (cov_28i4c9m45v().b[60][0]++,
        /* istanbul ignore next */
        (cov_28i4c9m45v().b[62][0]++, (_a = error.headers) === null) ||
        /* istanbul ignore next */
        (cov_28i4c9m45v().b[62][1]++, _a === void 0) ?
        /* istanbul ignore next */
        (cov_28i4c9m45v().b[61][0]++, void 0) :
        /* istanbul ignore next */
        (cov_28i4c9m45v().b[61][1]++, _a['retry-after'])) ||
        /* istanbul ignore next */
        (cov_28i4c9m45v().b[60][1]++, '10')) * 1000) :
        /* istanbul ignore next */
        (cov_28i4c9m45v().b[59][1]++, baseDelay * Math.pow(2, attempt)));
        /* istanbul ignore next */
        cov_28i4c9m45v().s[155]++;
        console.log(`⏳ Retrying in ${delay}ms (attempt ${attempt + 1}/${maxRetries + 1})`);
        /* istanbul ignore next */
        cov_28i4c9m45v().s[156]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_28i4c9m45v().f[11]++;
          cov_28i4c9m45v().s[157]++;
          return setTimeout(resolve, delay);
        });
      }
    }
    /* istanbul ignore next */
    cov_28i4c9m45v().s[158]++;
    throw lastError;
  }
  /**
   * Generate fallback response when AI service is unavailable
   */
  getFallbackResponse(userResponse) {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[12]++;
    const {
      type
    } =
    /* istanbul ignore next */
    (cov_28i4c9m45v().s[159]++, this.interviewContext);
    const fallbackResponses =
    /* istanbul ignore next */
    (cov_28i4c9m45v().s[160]++, {
      technical: ["That's an interesting approach. Can you tell me more about the challenges you faced?", "I see. How would you optimize this solution for better performance?", "Good point. What alternative approaches did you consider?"],
      behavioral: ["Thank you for sharing that experience. What was the outcome?", "That sounds challenging. What did you learn from that situation?", "Interesting. How would you handle a similar situation now?"],
      general: ["That's great to hear. Can you elaborate on that?", "Interesting background. What motivates you in your work?", "I appreciate you sharing that. What are you most proud of?"]
    });
    const responses =
    /* istanbul ignore next */
    (cov_28i4c9m45v().s[161]++,
    /* istanbul ignore next */
    (cov_28i4c9m45v().b[63][0]++, fallbackResponses[type]) ||
    /* istanbul ignore next */
    (cov_28i4c9m45v().b[63][1]++, fallbackResponses.general));
    /* istanbul ignore next */
    cov_28i4c9m45v().s[162]++;
    return responses[Math.floor(Math.random() * responses.length)];
  }
  /**
   * Generate follow-up suggestions based on conversation
   */
  generateFollowUpSuggestions() {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[13]++;
    const {
      type
    } =
    /* istanbul ignore next */
    (cov_28i4c9m45v().s[163]++, this.interviewContext);
    /* istanbul ignore next */
    cov_28i4c9m45v().s[164]++;
    switch (type) {
      case 'technical':
        /* istanbul ignore next */
        cov_28i4c9m45v().b[64][0]++;
        cov_28i4c9m45v().s[165]++;
        return ["Can you explain your thought process?", "What would you do differently?", "How would this scale?"];
      case 'behavioral':
        /* istanbul ignore next */
        cov_28i4c9m45v().b[64][1]++;
        cov_28i4c9m45v().s[166]++;
        return ["What was the outcome?", "What did you learn?", "How would you handle it now?"];
      default:
        /* istanbul ignore next */
        cov_28i4c9m45v().b[64][2]++;
        cov_28i4c9m45v().s[167]++;
        return ["Can you elaborate on that?", "What was your biggest challenge?", "What motivates you?"];
    }
  }
  /**
   * Generate interview summary and feedback
   */
  async generateInterviewSummary() {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[14]++;
    var _a, _b;
    /* istanbul ignore next */
    cov_28i4c9m45v().s[168]++;
    if (
    /* istanbul ignore next */
    (cov_28i4c9m45v().b[66][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_28i4c9m45v().b[66][1]++, !this.client)) {
      /* istanbul ignore next */
      cov_28i4c9m45v().b[65][0]++;
      cov_28i4c9m45v().s[169]++;
      throw new Error('Azure OpenAI Service not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_28i4c9m45v().b[65][1]++;
    }
    const summaryPrompt =
    /* istanbul ignore next */
    (cov_28i4c9m45v().s[170]++, {
      role: 'system',
      content: `Based on the interview conversation, provide a brief summary of the candidate's performance, highlighting:\n1. Key strengths demonstrated\n2. Areas for improvement\n3. Overall assessment\n4. Recommendation\n\nKeep it concise and constructive (under 200 words).`
    });
    /* istanbul ignore next */
    cov_28i4c9m45v().s[171]++;
    try {
      const completion =
      /* istanbul ignore next */
      (cov_28i4c9m45v().s[172]++, await this.client.chat.completions.create({
        model: this.deployment,
        messages: [...this.conversationHistory, summaryPrompt],
        temperature: 0.3,
        max_tokens: 300
      }));
      /* istanbul ignore next */
      cov_28i4c9m45v().s[173]++;
      return /* istanbul ignore next */(cov_28i4c9m45v().b[67][0]++,
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[69][0]++, (_b =
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[71][0]++, (_a = completion.choices[0]) === null) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[71][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[70][0]++, void 0) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[70][1]++, _a.message)) === null) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[69][1]++, _b === void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[68][0]++, void 0) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[68][1]++, _b.content)) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[67][1]++, 'Unable to generate summary.');
    } catch (error) {
      /* istanbul ignore next */
      cov_28i4c9m45v().s[174]++;
      console.error('❌ Error generating interview summary:', error);
      /* istanbul ignore next */
      cov_28i4c9m45v().s[175]++;
      throw new Error('Failed to generate summary');
    }
  }
  /**
   * Get conversation history
   */
  getConversationHistory() {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[15]++;
    cov_28i4c9m45v().s[176]++;
    return this.conversationHistory.filter(msg => {
      /* istanbul ignore next */
      cov_28i4c9m45v().f[16]++;
      cov_28i4c9m45v().s[177]++;
      return msg.role !== 'system';
    });
  }
  /**
   * Clear conversation history
   */
  clearConversation() {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[17]++;
    const previousState =
    /* istanbul ignore next */
    (cov_28i4c9m45v().s[178]++, {
      historyLength: this.conversationHistory.length,
      questionCount: this.interviewContext.currentQuestionCount,
      preliminaryCollected: this.interviewContext.preliminaryCollected
    });
    /* istanbul ignore next */
    cov_28i4c9m45v().s[179]++;
    this.conversationHistory = [];
    /* istanbul ignore next */
    cov_28i4c9m45v().s[180]++;
    this.interviewContext.currentQuestionCount = 0;
    /* istanbul ignore next */
    cov_28i4c9m45v().s[181]++;
    this.interviewContext.preliminaryCollected = false;
    /* istanbul ignore next */
    cov_28i4c9m45v().s[182]++;
    console.log('🧹 Conversation history cleared');
    /* istanbul ignore next */
    cov_28i4c9m45v().s[183]++;
    console.debug('🔄 [STATE_RESET] Conversation state reset', {
      previousState,
      newState: {
        historyLength: 0,
        questionCount: 0,
        preliminaryCollected: false
      },
      timestamp: new Date().toISOString()
    });
  }
  /**
   * Generate questions based on resume information
   */
  async generateQuestions(resumeInfo) {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[18]++;
    var _a, _b;
    /* istanbul ignore next */
    cov_28i4c9m45v().s[184]++;
    if (
    /* istanbul ignore next */
    (cov_28i4c9m45v().b[73][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_28i4c9m45v().b[73][1]++, !this.client)) {
      /* istanbul ignore next */
      cov_28i4c9m45v().b[72][0]++;
      cov_28i4c9m45v().s[185]++;
      throw new Error('Azure OpenAI Service not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_28i4c9m45v().b[72][1]++;
    }
    const prompt =
    /* istanbul ignore next */
    (cov_28i4c9m45v().s[186]++, `Given the following resume information, generate 5 relevant interview questions. Format each question on a new line. Only return the questions, no additional text.

Name: ${resumeInfo.name}
Experience: ${resumeInfo.experience}
Education: ${resumeInfo.education}
Skills: ${resumeInfo.skills}`);
    /* istanbul ignore next */
    cov_28i4c9m45v().s[187]++;
    try {
      const completion =
      /* istanbul ignore next */
      (cov_28i4c9m45v().s[188]++, await this.client.chat.completions.create({
        model: this.deployment,
        messages: [{
          role: 'system',
          content: prompt
        }],
        temperature: 0.5,
        max_tokens: 150
      }));
      const response =
      /* istanbul ignore next */
      (cov_28i4c9m45v().s[189]++,
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[74][0]++,
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[76][0]++, (_b =
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[78][0]++, (_a = completion.choices[0]) === null) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[78][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[77][0]++, void 0) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[77][1]++, _a.message)) === null) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[76][1]++, _b === void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[75][0]++, void 0) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[75][1]++, _b.content)) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[74][1]++, ''));
      /* istanbul ignore next */
      cov_28i4c9m45v().s[190]++;
      return response.split('\n').map(q => {
        /* istanbul ignore next */
        cov_28i4c9m45v().f[19]++;
        cov_28i4c9m45v().s[191]++;
        return q.trim();
      }).filter(q => {
        /* istanbul ignore next */
        cov_28i4c9m45v().f[20]++;
        cov_28i4c9m45v().s[192]++;
        return q.length > 0;
      }).slice(0, 5);
    } catch (error) {
      /* istanbul ignore next */
      cov_28i4c9m45v().s[193]++;
      console.error('❌ Error generating questions:', error);
      /* istanbul ignore next */
      cov_28i4c9m45v().s[194]++;
      throw new Error('Failed to generate questions');
    }
  }
  /**
   * Tailor resume based on job description using Azure OpenAI
   */
  async tailorResume(resumeText, jobDescription) {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[21]++;
    var _a, _b;
    /* istanbul ignore next */
    cov_28i4c9m45v().s[195]++;
    if (
    /* istanbul ignore next */
    (cov_28i4c9m45v().b[80][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_28i4c9m45v().b[80][1]++, !this.client)) {
      /* istanbul ignore next */
      cov_28i4c9m45v().b[79][0]++;
      cov_28i4c9m45v().s[196]++;
      throw new Error('Azure OpenAI Service not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_28i4c9m45v().b[79][1]++;
    }
    const prompt =
    /* istanbul ignore next */
    (cov_28i4c9m45v().s[197]++, `You are an expert resume writer and ATS optimization specialist. Please tailor this resume to better match the following job description for maximum ATS compatibility and relevance.

JOB DESCRIPTION:
${jobDescription}

CURRENT RESUME:
${resumeText}

Please provide a tailored version of the resume that:
1. Uses keywords and phrases directly from the job description
2. Highlights relevant skills and experiences that match the job requirements
3. Maintains professional formatting and ATS-friendly structure
4. Uses strong action verbs and quantifiable achievements
5. Keeps the same overall length and format structure
6. Optimizes for Applicant Tracking Systems (ATS)
7. Ensures keyword density without keyword stuffing

Return ONLY the tailored resume content with no additional commentary or explanations.`);
    /* istanbul ignore next */
    cov_28i4c9m45v().s[198]++;
    try {
      const completion =
      /* istanbul ignore next */
      (cov_28i4c9m45v().s[199]++, await this.retryWithBackoff(async () => {
        /* istanbul ignore next */
        cov_28i4c9m45v().f[22]++;
        cov_28i4c9m45v().s[200]++;
        return await this.client.chat.completions.create({
          model: this.deployment,
          messages: [{
            role: 'user',
            content: prompt
          }],
          temperature: 0.3,
          max_tokens: 2000,
          top_p: 0.9,
          frequency_penalty: 0.1,
          presence_penalty: 0.1
        });
      }));
      const tailoredResume =
      /* istanbul ignore next */
      (cov_28i4c9m45v().s[201]++,
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[82][0]++, (_b =
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[84][0]++, (_a = completion.choices[0]) === null) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[84][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[83][0]++, void 0) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[83][1]++, _a.message)) === null) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[82][1]++, _b === void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[81][0]++, void 0) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[81][1]++, _b.content));
      /* istanbul ignore next */
      cov_28i4c9m45v().s[202]++;
      if (!tailoredResume) {
        /* istanbul ignore next */
        cov_28i4c9m45v().b[85][0]++;
        cov_28i4c9m45v().s[203]++;
        throw new Error('No response generated');
      } else
      /* istanbul ignore next */
      {
        cov_28i4c9m45v().b[85][1]++;
      }
      cov_28i4c9m45v().s[204]++;
      return tailoredResume;
    } catch (error) {
      /* istanbul ignore next */
      cov_28i4c9m45v().s[205]++;
      console.error('❌ Error tailoring resume:', error);
      /* istanbul ignore next */
      cov_28i4c9m45v().s[206]++;
      throw error;
    }
  }
  /**
   * Check if service is ready
   */
  isReady() {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[23]++;
    cov_28i4c9m45v().s[207]++;
    return /* istanbul ignore next */(cov_28i4c9m45v().b[86][0]++, this.isInitialized) &&
    /* istanbul ignore next */
    (cov_28i4c9m45v().b[86][1]++, this.client !== null);
  }
  /**
   * Generate a completion for a given prompt
   */
  async generateCompletion(prompt) {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[24]++;
    var _a, _b;
    /* istanbul ignore next */
    cov_28i4c9m45v().s[208]++;
    if (
    /* istanbul ignore next */
    (cov_28i4c9m45v().b[88][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_28i4c9m45v().b[88][1]++, !this.client)) {
      /* istanbul ignore next */
      cov_28i4c9m45v().b[87][0]++;
      cov_28i4c9m45v().s[209]++;
      throw new Error('Azure OpenAI Service not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_28i4c9m45v().b[87][1]++;
    }
    cov_28i4c9m45v().s[210]++;
    try {
      const completion =
      /* istanbul ignore next */
      (cov_28i4c9m45v().s[211]++, await this.createCompletion([{
        role: 'user',
        content: prompt
      }], {
        temperature: 0.7,
        maxTokens: 1000
      }));
      /* istanbul ignore next */
      cov_28i4c9m45v().s[212]++;
      return /* istanbul ignore next */(cov_28i4c9m45v().b[89][0]++,
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[91][0]++, (_b =
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[93][0]++, (_a = completion.choices[0]) === null) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[93][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[92][0]++, void 0) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[92][1]++, _a.message)) === null) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[91][1]++, _b === void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[90][0]++, void 0) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[90][1]++, _b.content)) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[89][1]++, 'Unable to generate completion.');
    } catch (error) {
      /* istanbul ignore next */
      cov_28i4c9m45v().s[213]++;
      console.error('❌ Error generating completion:', error);
      /* istanbul ignore next */
      cov_28i4c9m45v().s[214]++;
      throw new Error('Failed to generate completion');
    }
  }
  /**
   * Create a chat completion with custom parameters
   * Public method for use by adapters
   */
  async createCompletion(messages, options =
  /* istanbul ignore next */
  (cov_28i4c9m45v().b[94][0]++, {})) {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[25]++;
    cov_28i4c9m45v().s[215]++;
    if (
    /* istanbul ignore next */
    (cov_28i4c9m45v().b[96][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_28i4c9m45v().b[96][1]++, !this.client)) {
      /* istanbul ignore next */
      cov_28i4c9m45v().b[95][0]++;
      cov_28i4c9m45v().s[216]++;
      throw new Error('Azure OpenAI Service not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_28i4c9m45v().b[95][1]++;
    }
    const {
      temperature =
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[97][0]++, 0.7),
      // Default temperature for balanced responses
      maxTokens =
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[98][0]++, 1500),
      // Default max tokens for comprehensive responses
      topP =
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[99][0]++, 0.9),
      // Maintain creativity balance
      frequencyPenalty =
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[100][0]++, 0.1),
      // Reduce repetition
      presencePenalty =
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[101][0]++, 0.1) // Encourage diverse content
    } =
    /* istanbul ignore next */
    (cov_28i4c9m45v().s[217]++, options);
    /* istanbul ignore next */
    cov_28i4c9m45v().s[218]++;
    return await this.retryWithBackoff(async () => {
      /* istanbul ignore next */
      cov_28i4c9m45v().f[26]++;
      cov_28i4c9m45v().s[219]++;
      return await this.client.chat.completions.create({
        model: this.deployment,
        messages,
        temperature,
        max_tokens: maxTokens,
        top_p: topP,
        frequency_penalty: frequencyPenalty,
        presence_penalty: presencePenalty
      });
    });
  }
  /**
   * Dispose of resources
   */
  dispose() {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[27]++;
    cov_28i4c9m45v().s[220]++;
    this.client = null;
    /* istanbul ignore next */
    cov_28i4c9m45v().s[221]++;
    this.isInitialized = false;
    /* istanbul ignore next */
    cov_28i4c9m45v().s[222]++;
    this.conversationHistory = [];
    /* istanbul ignore next */
    cov_28i4c9m45v().s[223]++;
    console.log('🧹 Azure OpenAI Service disposed');
  }
}
/* istanbul ignore next */
cov_28i4c9m45v().s[224]++;
exports.AzureOpenAIService = AzureOpenAIService;
// Export singleton instance
/* istanbul ignore next */
cov_28i4c9m45v().s[225]++;
exports.azureOpenAIService = new AzureOpenAIService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,