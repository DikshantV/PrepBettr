{"file":"/Users/dikshantvashistha/PrepBettr/tests/e2e/resume-url-extraction.test.ts","mappings":"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","names":[],"sources":["/Users/dikshantvashistha/PrepBettr/tests/e2e/resume-url-extraction.test.ts"],"sourcesContent":["/**\n * E2E Tests for Job Posting URL Extraction and Resume Tailoring\n * \n * Test Coverage:\n * 1. Valid LinkedIn/Indeed URLs with field extraction and resume tailoring\n * 2. Edge cases: invalid URLs, 404s, PDF links, non-job pages\n * 3. Authentication enforcement (401 for unauthenticated requests)\n * 4. End-to-end workflow testing\n */\n\nconst { test, expect } = require('@jest/globals');\nconst fetch = require('node-fetch');\n\n// Mock Firebase Admin for testing\njest.mock('firebase-admin', () => ({\n  initializeApp: jest.fn(() => ({\n    auth: () => ({\n      verifyIdToken: jest.fn()\n    })\n  })),\n  auth: () => ({\n    verifyIdToken: jest.fn()\n  }),\n  credential: {\n    cert: jest.fn()\n  }\n}));\n\n// Mock Azure OpenAI Service\njest.mock('@/lib/services/azure-openai-service', () => ({\n  azureOpenAIService: {\n    isReady: jest.fn(() => true),\n    initialize: jest.fn(() => Promise.resolve(true)),\n    processUserResponse: jest.fn((prompt) => Promise.resolve({\n      content: JSON.stringify({\n        jobTitle: \"Software Engineer\",\n        company: \"Tech Corp\",\n        location: \"San Francisco, CA\",\n        description: \"Join our engineering team to build amazing products.\",\n        requirements: [\"Bachelor's degree\", \"3+ years experience\", \"JavaScript\"],\n        keySkills: [\"React\", \"Node.js\", \"TypeScript\", \"AWS\"]\n      })\n    })),\n    tailorResume: jest.fn((resume, jobDesc) => Promise.resolve(\"Tailored resume content matching the job requirements\"))\n  }\n}));\n\n// Mock article extractor\njest.mock('@extractus/article-extractor', () => ({\n  extract: jest.fn((html) => ({\n    text: \"Software Engineer position at Tech Corp. We are looking for experienced developers with React and Node.js skills.\"\n  }))\n}));\n\n// Mock node-fetch\njest.mock('node-fetch');\n\n// Test configuration\nconst BASE_URL = process.env.BASE_URL || 'http://localhost:3000';\nconst TEST_SESSION_COOKIE = 'test-session-token';\n\n// Test data\nconst VALID_URLS = {\n  linkedin: 'https://www.linkedin.com/jobs/view/1234567890',\n  indeed: 'https://www.indeed.com/viewjob?jk=test-job-id'\n};\n\nconst INVALID_URLS = {\n  malformed: 'not-a-url',\n  pdf: 'https://example.com/job.pdf',\n  nonJob: 'https://google.com',\n  notFound: 'https://www.linkedin.com/jobs/view/nonexistent'\n};\n\nconst SAMPLE_RESUME = `\nJohn Doe\nSoftware Engineer\nEmail: john@example.com\n\nEXPERIENCE\n- Software Developer at ABC Corp (2020-2023)\n- Built web applications using React and Node.js\n- Collaborated with cross-functional teams\n\nSKILLS\nJavaScript, React, Node.js, Python, AWS\n`;\n\ndescribe('Job URL Extraction E2E Tests', () => {\n  \n  beforeEach(() => {\n    // Reset mocks before each test\n    jest.clearAllMocks();\n    \n    // Mock successful authentication by default\n    const mockFirebaseAdmin = require('firebase-admin');\n    mockFirebaseAdmin.auth().verifyIdToken.mockResolvedValue({\n      uid: 'test-user-id',\n      email: 'test@example.com'\n    });\n  });\n\n  describe('1. Valid URL Extraction Tests', () => {\n    \n    test('should extract job fields from LinkedIn URL and generate tailored resume', async () => {\n      // Mock successful HTTP response\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        headers: {\n          get: jest.fn((header) => {\n            if (header === 'content-type') return 'text/html; charset=utf-8';\n            return null;\n          })\n        },\n        text: () => Promise.resolve('<html><body>Software Engineer at Tech Corp - Join our team!</body></html>')\n      });\n\n      // Test URL extraction endpoint\n      const extractResponse = await fetch(`${BASE_URL}/api/resume/extract-url`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Cookie': `session=${TEST_SESSION_COOKIE}`\n        },\n        body: JSON.stringify({ url: VALID_URLS.linkedin })\n      });\n\n      expect(extractResponse.ok).toBe(true);\n      const extractData = await extractResponse.json();\n      \n      expect(extractData.success).toBe(true);\n      expect(extractData.data).toHaveProperty('jobTitle');\n      expect(extractData.data).toHaveProperty('company');\n      expect(extractData.data).toHaveProperty('location');\n      expect(extractData.data).toHaveProperty('description');\n      expect(extractData.data).toHaveProperty('requirements');\n      expect(extractData.data).toHaveProperty('keySkills');\n      expect(extractData.data).toHaveProperty('rawText');\n\n      // Test resume tailoring with extracted data\n      const tailorResponse = await fetch(`${BASE_URL}/api/resume/tailor`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Cookie': `session=${TEST_SESSION_COOKIE}`\n        },\n        body: JSON.stringify({\n          resumeText: SAMPLE_RESUME,\n          jobDescription: extractData.data.description\n        })\n      });\n\n      expect(tailorResponse.ok).toBe(true);\n      const tailorData = await tailorResponse.json();\n      \n      expect(tailorData.success).toBe(true);\n      expect(tailorData.tailoredResume).toContain('Tailored resume content');\n    });\n\n    test('should extract job fields from Indeed URL', async () => {\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        headers: {\n          get: jest.fn((header) => {\n            if (header === 'content-type') return 'text/html; charset=utf-8';\n            return null;\n          })\n        },\n        text: () => Promise.resolve('<html><body>Frontend Developer at StartupXYZ</body></html>')\n      });\n\n      const response = await fetch(`${BASE_URL}/api/resume/extract-url`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Cookie': `session=${TEST_SESSION_COOKIE}`\n        },\n        body: JSON.stringify({ url: VALID_URLS.indeed })\n      });\n\n      expect(response.ok).toBe(true);\n      const data = await response.json();\n      \n      expect(data.success).toBe(true);\n      expect(data.data).toHaveProperty('jobTitle');\n      expect(data.data).toHaveProperty('company');\n    });\n  });\n\n  describe('2. Edge Case Tests', () => {\n    \n    test('should reject malformed URLs', async () => {\n      const response = await fetch(`${BASE_URL}/api/resume/extract-url`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Cookie': `session=${TEST_SESSION_COOKIE}`\n        },\n        body: JSON.stringify({ url: INVALID_URLS.malformed })\n      });\n\n      expect(response.status).toBe(422);\n      const data = await response.json();\n      expect(data.error).toContain('Invalid URL');\n    });\n\n    test('should handle 404 responses', async () => {\n      fetch.mockResolvedValueOnce({\n        ok: false,\n        status: 404\n      });\n\n      const response = await fetch(`${BASE_URL}/api/resume/extract-url`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Cookie': `session=${TEST_SESSION_COOKIE}`\n        },\n        body: JSON.stringify({ url: INVALID_URLS.notFound })\n      });\n\n      expect(response.status).toBe(502);\n      const data = await response.json();\n      expect(data.error).toContain('Could not fetch job description');\n    });\n\n    test('should reject PDF links', async () => {\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        headers: {\n          get: jest.fn((header) => {\n            if (header === 'content-type') return 'application/pdf';\n            return null;\n          })\n        }\n      });\n\n      const response = await fetch(`${BASE_URL}/api/resume/extract-url`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Cookie': `session=${TEST_SESSION_COOKIE}`\n        },\n        body: JSON.stringify({ url: INVALID_URLS.pdf })\n      });\n\n      expect(response.status).toBe(422);\n      const data = await response.json();\n      expect(data.error).toContain('does not point to an HTML resource');\n    });\n\n    test('should handle non-job pages gracefully', async () => {\n      const mockExtract = require('@extractus/article-extractor').extract;\n      mockExtract.mockReturnValueOnce({\n        text: 'This is just a regular webpage with no job information.'\n      });\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        headers: {\n          get: jest.fn((header) => {\n            if (header === 'content-type') return 'text/html; charset=utf-8';\n            return null;\n          })\n        },\n        text: () => Promise.resolve('<html><body>Regular webpage content</body></html>')\n      });\n\n      const response = await fetch(`${BASE_URL}/api/resume/extract-url`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Cookie': `session=${TEST_SESSION_COOKIE}`\n        },\n        body: JSON.stringify({ url: INVALID_URLS.nonJob })\n      });\n\n      // Should still process but may return minimal data\n      expect(response.ok).toBe(true);\n      const data = await response.json();\n      expect(data.success).toBe(true);\n    });\n\n    test('should handle oversized content', async () => {\n      const largeContent = 'x'.repeat(300000); // 300KB content\n      \n      fetch.mockResolvedValueOnce({\n        ok: true,\n        headers: {\n          get: jest.fn((header) => {\n            if (header === 'content-type') return 'text/html; charset=utf-8';\n            return null;\n          })\n        },\n        text: () => Promise.resolve(largeContent)\n      });\n\n      const response = await fetch(`${BASE_URL}/api/resume/extract-url`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Cookie': `session=${TEST_SESSION_COOKIE}`\n        },\n        body: JSON.stringify({ url: VALID_URLS.linkedin })\n      });\n\n      expect(response.status).toBe(400);\n      const data = await response.json();\n      expect(data.error).toContain('Content size exceeds 256 kB');\n    });\n  });\n\n  describe('3. Authentication Tests', () => {\n    \n    test('should return 401 for requests without session cookie', async () => {\n      const response = await fetch(`${BASE_URL}/api/resume/extract-url`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ url: VALID_URLS.linkedin })\n      });\n\n      expect(response.status).toBe(401);\n      const data = await response.json();\n      expect(data.error).toContain('Authentication required');\n    });\n\n    test('should return 401 for invalid session tokens', async () => {\n      const mockFirebaseAdmin = require('firebase-admin');\n      mockFirebaseAdmin.auth().verifyIdToken.mockRejectedValueOnce(new Error('Invalid token'));\n\n      const response = await fetch(`${BASE_URL}/api/resume/extract-url`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Cookie': 'session=invalid-token'\n        },\n        body: JSON.stringify({ url: VALID_URLS.linkedin })\n      });\n\n      expect(response.status).toBe(401);\n      const data = await response.json();\n      expect(data.error).toContain('Invalid session');\n    });\n\n    test('should return 401 for unauthenticated resume tailoring requests', async () => {\n      const response = await fetch(`${BASE_URL}/api/resume/tailor`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          resumeText: SAMPLE_RESUME,\n          jobDescription: 'Test job description'\n        })\n      });\n\n      expect(response.status).toBe(401);\n      const data = await response.json();\n      expect(data.error).toContain('Authentication required');\n    });\n  });\n\n  describe('4. Resume Tailoring Validation Tests', () => {\n    \n    test('should require both resume text and job description', async () => {\n      const response = await fetch(`${BASE_URL}/api/resume/tailor`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Cookie': `session=${TEST_SESSION_COOKIE}`\n        },\n        body: JSON.stringify({\n          resumeText: SAMPLE_RESUME\n          // Missing jobDescription\n        })\n      });\n\n      expect(response.status).toBe(400);\n      const data = await response.json();\n      expect(data.error).toContain('Both resume text and job description are required');\n    });\n\n    test('should enforce text length limits', async () => {\n      const longText = 'x'.repeat(60000); // Exceeds 50k limit\n      \n      const response = await fetch(`${BASE_URL}/api/resume/tailor`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Cookie': `session=${TEST_SESSION_COOKIE}`\n        },\n        body: JSON.stringify({\n          resumeText: longText,\n          jobDescription: 'Test description'\n        })\n      });\n\n      expect(response.status).toBe(400);\n      const data = await response.json();\n      expect(data.error).toContain('Text length exceeds maximum limit');\n    });\n  });\n\n  describe('5. Service Availability Tests', () => {\n    \n    test('should handle Azure OpenAI service unavailability', async () => {\n      const mockAzureService = require('@/lib/services/azure-openai-service').azureOpenAIService;\n      mockAzureService.isReady.mockReturnValueOnce(false);\n\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        headers: {\n          get: jest.fn((header) => {\n            if (header === 'content-type') return 'text/html; charset=utf-8';\n            return null;\n          })\n        },\n        text: () => Promise.resolve('<html><body>Job content</body></html>')\n      });\n\n      const response = await fetch(`${BASE_URL}/api/resume/extract-url`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Cookie': `session=${TEST_SESSION_COOKIE}`\n        },\n        body: JSON.stringify({ url: VALID_URLS.linkedin })\n      });\n\n      expect(response.status).toBe(503);\n      const data = await response.json();\n      expect(data.error).toContain('Service temporarily unavailable');\n    });\n  });\n});\n\n// Utility functions for manual testing\nconst manualTestUtils = {\n  /**\n   * Test with real LinkedIn URL (for manual verification)\n   */\n  testRealLinkedInUrl: async (linkedinUrl, sessionCookie) => {\n    console.log('Testing real LinkedIn URL:', linkedinUrl);\n    \n    try {\n      const response = await fetch(`${BASE_URL}/api/resume/extract-url`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Cookie': `session=${sessionCookie}`\n        },\n        body: JSON.stringify({ url: linkedinUrl })\n      });\n\n      const data = await response.json();\n      console.log('Response status:', response.status);\n      console.log('Extracted data:', JSON.stringify(data, null, 2));\n      \n      return data;\n    } catch (error) {\n      console.error('Test failed:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Test with real Indeed URL (for manual verification)\n   */\n  testRealIndeedUrl: async (indeedUrl, sessionCookie) => {\n    console.log('Testing real Indeed URL:', indeedUrl);\n    \n    try {\n      const response = await fetch(`${BASE_URL}/api/resume/extract-url`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Cookie': `session=${sessionCookie}`\n        },\n        body: JSON.stringify({ url: indeedUrl })\n      });\n\n      const data = await response.json();\n      console.log('Response status:', response.status);\n      console.log('Extracted data:', JSON.stringify(data, null, 2));\n      \n      return data;\n    } catch (error) {\n      console.error('Test failed:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Test complete workflow: extraction + tailoring\n   */\n  testCompleteWorkflow: async (jobUrl, resumeText, sessionCookie) => {\n    console.log('Testing complete workflow...');\n    \n    try {\n      // Step 1: Extract job data\n      const extractResponse = await fetch(`${BASE_URL}/api/resume/extract-url`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Cookie': `session=${sessionCookie}`\n        },\n        body: JSON.stringify({ url: jobUrl })\n      });\n\n      const extractData = await extractResponse.json();\n      console.log('Extraction result:', extractData.success ? 'SUCCESS' : 'FAILED');\n      \n      if (!extractData.success) {\n        throw new Error('Failed to extract job data: ' + extractData.error);\n      }\n\n      // Step 2: Tailor resume\n      const tailorResponse = await fetch(`${BASE_URL}/api/resume/tailor`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Cookie': `session=${sessionCookie}`\n        },\n        body: JSON.stringify({\n          resumeText: resumeText,\n          jobDescription: extractData.data.description\n        })\n      });\n\n      const tailorData = await tailorResponse.json();\n      console.log('Tailoring result:', tailorData.success ? 'SUCCESS' : 'FAILED');\n      \n      console.log('Complete workflow result:', {\n        extraction: {\n          jobTitle: extractData.data.jobTitle,\n          company: extractData.data.company,\n          location: extractData.data.location,\n          keySkills: extractData.data.keySkills\n        },\n        tailoring: {\n          success: tailorData.success,\n          previewLength: tailorData.tailoredResume?.length || 0\n        }\n      });\n\n      return {\n        extractData,\n        tailorData\n      };\n    } catch (error) {\n      console.error('Workflow test failed:', error);\n      throw error;\n    }\n  }\n};\n\n// Export for manual testing\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = { manualTestUtils };\n}\n"],"version":3}