3f7cf4781fa0c17eaf1e542dcb99b0d3
"use strict";

/* istanbul ignore next */
function cov_29znruqmwq() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/middleware/error-handler.ts";
  var hash = "7b0225d6edee2e544659b356c965a23ac22d4127";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/middleware/error-handler.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 96
        }
      },
      "2": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 4,
          column: 44
        }
      },
      "3": {
        start: {
          line: 5,
          column: 17
        },
        end: {
          line: 5,
          column: 39
        }
      },
      "4": {
        start: {
          line: 6,
          column: 34
        },
        end: {
          line: 6,
          column: 79
        }
      },
      "5": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 17,
          column: 9
        }
      },
      "6": {
        start: {
          line: 10,
          column: 12
        },
        end: {
          line: 15,
          column: 15
        }
      },
      "7": {
        start: {
          line: 16,
          column: 12
        },
        end: {
          line: 16,
          column: 47
        }
      },
      "8": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 30,
          column: 10
        }
      },
      "9": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 29,
          column: 13
        }
      },
      "10": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 42
        }
      },
      "11": {
        start: {
          line: 28,
          column: 16
        },
        end: {
          line: 28,
          column: 52
        }
      },
      "12": {
        start: {
          line: 36,
          column: 25
        },
        end: {
          line: 36,
          column: 51
        }
      },
      "13": {
        start: {
          line: 37,
          column: 29
        },
        end: {
          line: 37,
          column: 68
        }
      },
      "14": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 46
        }
      },
      "15": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 64
        }
      },
      "16": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 51,
          column: 9
        }
      },
      "17": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 25
        }
      },
      "18": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "19": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 61,
          column: 14
        }
      },
      "20": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 73,
          column: 9
        }
      },
      "21": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 72,
          column: 14
        }
      },
      "22": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 84,
          column: 9
        }
      },
      "23": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 83,
          column: 14
        }
      },
      "24": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "25": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 94,
          column: 14
        }
      },
      "26": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 106,
          column: 9
        }
      },
      "27": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 105,
          column: 14
        }
      },
      "28": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 115,
          column: 10
        }
      },
      "29": {
        start: {
          line: 121,
          column: 20
        },
        end: {
          line: 121,
          column: 102
        }
      },
      "30": {
        start: {
          line: 122,
          column: 24
        },
        end: {
          line: 122,
          column: 77
        }
      },
      "31": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 134,
          column: 10
        }
      },
      "32": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 142,
          column: 29
        }
      },
      "33": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 29
        }
      },
      "34": {
        start: {
          line: 144,
          column: 30
        },
        end: {
          line: 144,
          column: 109
        }
      },
      "35": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 154,
          column: 9
        }
      },
      "36": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 153,
          column: 13
        }
      },
      "37": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 149,
          column: 43
        }
      },
      "38": {
        start: {
          line: 156,
          column: 29
        },
        end: {
          line: 156,
          column: 57
        }
      },
      "39": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 159,
          column: 9
        }
      },
      "40": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 158,
          column: 32
        }
      },
      "41": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 160,
          column: 25
        }
      },
      "42": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 167,
          column: 29
        }
      },
      "43": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 167,
          column: 29
        }
      },
      "44": {
        start: {
          line: 168,
          column: 20
        },
        end: {
          line: 168,
          column: 58
        }
      },
      "45": {
        start: {
          line: 170,
          column: 26
        },
        end: {
          line: 170,
          column: 106
        }
      },
      "46": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 173,
          column: 9
        }
      },
      "47": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 32
        }
      },
      "48": {
        start: {
          line: 175,
          column: 22
        },
        end: {
          line: 175,
          column: 93
        }
      },
      "49": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "50": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 25
        }
      },
      "51": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 179,
          column: 25
        }
      },
      "52": {
        start: {
          line: 186,
          column: 24
        },
        end: {
          line: 208,
          column: 9
        }
      },
      "53": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 210,
          column: 60
        }
      },
      "54": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 229,
          column: 9
        }
      },
      "55": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 217,
          column: 15
        }
      },
      "56": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 228,
          column: 15
        }
      },
      "57": {
        start: {
          line: 235,
          column: 25
        },
        end: {
          line: 242,
          column: 9
        }
      },
      "58": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 249,
          column: 9
        }
      },
      "59": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 248,
          column: 14
        }
      },
      "60": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 256,
          column: 11
        }
      },
      "61": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 268,
          column: 10
        }
      },
      "62": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 281,
          column: 10
        }
      },
      "63": {
        start: {
          line: 284,
          column: 0
        },
        end: {
          line: 284,
          column: 36
        }
      },
      "64": {
        start: {
          line: 287,
          column: 4
        },
        end: {
          line: 287,
          column: 50
        }
      },
      "65": {
        start: {
          line: 290,
          column: 0
        },
        end: {
          line: 290,
          column: 69
        }
      },
      "66": {
        start: {
          line: 291,
          column: 0
        },
        end: {
          line: 291,
          column: 69
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 42
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 37
          },
          end: {
            line: 31,
            column: 5
          }
        },
        line: 22
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 23,
            column: 15
          },
          end: {
            line: 23,
            column: 16
          }
        },
        loc: {
          start: {
            line: 23,
            column: 30
          },
          end: {
            line: 30,
            column: 9
          }
        },
        line: 23
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        loc: {
          start: {
            line: 35,
            column: 35
          },
          end: {
            line: 42,
            column: 5
          }
        },
        line: 35
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 46,
            column: 5
          }
        },
        loc: {
          start: {
            line: 46,
            column: 33
          },
          end: {
            line: 116,
            column: 5
          }
        },
        line: 46
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 120,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        },
        loc: {
          start: {
            line: 120,
            column: 43
          },
          end: {
            line: 135,
            column: 5
          }
        },
        line: 120
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 139,
            column: 4
          },
          end: {
            line: 139,
            column: 5
          }
        },
        loc: {
          start: {
            line: 139,
            column: 30
          },
          end: {
            line: 161,
            column: 5
          }
        },
        line: 139
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 165,
            column: 4
          },
          end: {
            line: 165,
            column: 5
          }
        },
        loc: {
          start: {
            line: 165,
            column: 29
          },
          end: {
            line: 180,
            column: 5
          }
        },
        line: 165
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 184,
            column: 4
          },
          end: {
            line: 184,
            column: 5
          }
        },
        loc: {
          start: {
            line: 184,
            column: 36
          },
          end: {
            line: 230,
            column: 5
          }
        },
        line: 184
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 234,
            column: 4
          },
          end: {
            line: 234,
            column: 5
          }
        },
        loc: {
          start: {
            line: 234,
            column: 47
          },
          end: {
            line: 257,
            column: 5
          }
        },
        line: 234
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 261,
            column: 4
          },
          end: {
            line: 261,
            column: 5
          }
        },
        loc: {
          start: {
            line: 261,
            column: 67
          },
          end: {
            line: 269,
            column: 5
          }
        },
        line: 261
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 273,
            column: 4
          },
          end: {
            line: 273,
            column: 5
          }
        },
        loc: {
          start: {
            line: 273,
            column: 58
          },
          end: {
            line: 282,
            column: 5
          }
        },
        line: 273
      },
      "12": {
        name: "withErrorHandler",
        decl: {
          start: {
            line: 286,
            column: 9
          },
          end: {
            line: 286,
            column: 25
          }
        },
        loc: {
          start: {
            line: 286,
            column: 35
          },
          end: {
            line: 288,
            column: 1
          }
        },
        line: 286
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 9,
            column: 8
          },
          end: {
            line: 17,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 9,
            column: 8
          },
          end: {
            line: 17,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 9
      },
      "1": {
        loc: {
          start: {
            line: 9,
            column: 12
          },
          end: {
            line: 9,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 9,
            column: 12
          },
          end: {
            line: 9,
            column: 30
          }
        }, {
          start: {
            line: 9,
            column: 34
          },
          end: {
            line: 9,
            column: 63
          }
        }],
        line: 9
      },
      "2": {
        loc: {
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 49
      },
      "3": {
        loc: {
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 49,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 49,
            column: 28
          }
        }, {
          start: {
            line: 49,
            column: 32
          },
          end: {
            line: 49,
            column: 65
          }
        }],
        line: 49
      },
      "4": {
        loc: {
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "5": {
        loc: {
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 53,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 53,
            column: 39
          }
        }, {
          start: {
            line: 53,
            column: 43
          },
          end: {
            line: 53,
            column: 69
          }
        }],
        line: 53
      },
      "6": {
        loc: {
          start: {
            line: 64,
            column: 8
          },
          end: {
            line: 73,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 8
          },
          end: {
            line: 73,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 64
      },
      "7": {
        loc: {
          start: {
            line: 64,
            column: 12
          },
          end: {
            line: 64,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 64,
            column: 12
          },
          end: {
            line: 64,
            column: 44
          }
        }, {
          start: {
            line: 64,
            column: 48
          },
          end: {
            line: 64,
            column: 73
          }
        }],
        line: 64
      },
      "8": {
        loc: {
          start: {
            line: 67,
            column: 25
          },
          end: {
            line: 67,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 67,
            column: 25
          },
          end: {
            line: 67,
            column: 38
          }
        }, {
          start: {
            line: 67,
            column: 42
          },
          end: {
            line: 67,
            column: 61
          }
        }],
        line: 67
      },
      "9": {
        loc: {
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "10": {
        loc: {
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 75,
            column: 183
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 75,
            column: 13
          },
          end: {
            line: 75,
            column: 98
          }
        }, {
          start: {
            line: 75,
            column: 104
          },
          end: {
            line: 75,
            column: 182
          }
        }],
        line: 75
      },
      "11": {
        loc: {
          start: {
            line: 75,
            column: 13
          },
          end: {
            line: 75,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 75,
            column: 62
          },
          end: {
            line: 75,
            column: 68
          }
        }, {
          start: {
            line: 75,
            column: 71
          },
          end: {
            line: 75,
            column: 98
          }
        }],
        line: 75
      },
      "12": {
        loc: {
          start: {
            line: 75,
            column: 13
          },
          end: {
            line: 75,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 75,
            column: 13
          },
          end: {
            line: 75,
            column: 42
          }
        }, {
          start: {
            line: 75,
            column: 46
          },
          end: {
            line: 75,
            column: 59
          }
        }],
        line: 75
      },
      "13": {
        loc: {
          start: {
            line: 75,
            column: 104
          },
          end: {
            line: 75,
            column: 182
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 75,
            column: 153
          },
          end: {
            line: 75,
            column: 159
          }
        }, {
          start: {
            line: 75,
            column: 162
          },
          end: {
            line: 75,
            column: 182
          }
        }],
        line: 75
      },
      "14": {
        loc: {
          start: {
            line: 75,
            column: 104
          },
          end: {
            line: 75,
            column: 150
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 75,
            column: 104
          },
          end: {
            line: 75,
            column: 133
          }
        }, {
          start: {
            line: 75,
            column: 137
          },
          end: {
            line: 75,
            column: 150
          }
        }],
        line: 75
      },
      "15": {
        loc: {
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "16": {
        loc: {
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 86,
            column: 185
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 13
          },
          end: {
            line: 86,
            column: 96
          }
        }, {
          start: {
            line: 86,
            column: 102
          },
          end: {
            line: 86,
            column: 184
          }
        }],
        line: 86
      },
      "17": {
        loc: {
          start: {
            line: 86,
            column: 13
          },
          end: {
            line: 86,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 86,
            column: 62
          },
          end: {
            line: 86,
            column: 68
          }
        }, {
          start: {
            line: 86,
            column: 71
          },
          end: {
            line: 86,
            column: 96
          }
        }],
        line: 86
      },
      "18": {
        loc: {
          start: {
            line: 86,
            column: 13
          },
          end: {
            line: 86,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 13
          },
          end: {
            line: 86,
            column: 42
          }
        }, {
          start: {
            line: 86,
            column: 46
          },
          end: {
            line: 86,
            column: 59
          }
        }],
        line: 86
      },
      "19": {
        loc: {
          start: {
            line: 86,
            column: 102
          },
          end: {
            line: 86,
            column: 184
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 86,
            column: 151
          },
          end: {
            line: 86,
            column: 157
          }
        }, {
          start: {
            line: 86,
            column: 160
          },
          end: {
            line: 86,
            column: 184
          }
        }],
        line: 86
      },
      "20": {
        loc: {
          start: {
            line: 86,
            column: 102
          },
          end: {
            line: 86,
            column: 148
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 102
          },
          end: {
            line: 86,
            column: 131
          }
        }, {
          start: {
            line: 86,
            column: 135
          },
          end: {
            line: 86,
            column: 148
          }
        }],
        line: 86
      },
      "21": {
        loc: {
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 106,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 106,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 97
      },
      "22": {
        loc: {
          start: {
            line: 97,
            column: 12
          },
          end: {
            line: 97,
            column: 184
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 97,
            column: 13
          },
          end: {
            line: 97,
            column: 98
          }
        }, {
          start: {
            line: 97,
            column: 104
          },
          end: {
            line: 97,
            column: 183
          }
        }],
        line: 97
      },
      "23": {
        loc: {
          start: {
            line: 97,
            column: 13
          },
          end: {
            line: 97,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 97,
            column: 62
          },
          end: {
            line: 97,
            column: 68
          }
        }, {
          start: {
            line: 97,
            column: 71
          },
          end: {
            line: 97,
            column: 98
          }
        }],
        line: 97
      },
      "24": {
        loc: {
          start: {
            line: 97,
            column: 13
          },
          end: {
            line: 97,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 97,
            column: 13
          },
          end: {
            line: 97,
            column: 42
          }
        }, {
          start: {
            line: 97,
            column: 46
          },
          end: {
            line: 97,
            column: 59
          }
        }],
        line: 97
      },
      "25": {
        loc: {
          start: {
            line: 97,
            column: 104
          },
          end: {
            line: 97,
            column: 183
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 97,
            column: 153
          },
          end: {
            line: 97,
            column: 159
          }
        }, {
          start: {
            line: 97,
            column: 162
          },
          end: {
            line: 97,
            column: 183
          }
        }],
        line: 97
      },
      "26": {
        loc: {
          start: {
            line: 97,
            column: 104
          },
          end: {
            line: 97,
            column: 150
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 97,
            column: 104
          },
          end: {
            line: 97,
            column: 133
          }
        }, {
          start: {
            line: 97,
            column: 137
          },
          end: {
            line: 97,
            column: 150
          }
        }],
        line: 97
      },
      "27": {
        loc: {
          start: {
            line: 109,
            column: 18
          },
          end: {
            line: 109,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 109,
            column: 18
          },
          end: {
            line: 109,
            column: 28
          }
        }, {
          start: {
            line: 109,
            column: 32
          },
          end: {
            line: 109,
            column: 47
          }
        }],
        line: 109
      },
      "28": {
        loc: {
          start: {
            line: 110,
            column: 21
          },
          end: {
            line: 110,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 110,
            column: 21
          },
          end: {
            line: 110,
            column: 34
          }
        }, {
          start: {
            line: 110,
            column: 38
          },
          end: {
            line: 110,
            column: 73
          }
        }],
        line: 110
      },
      "29": {
        loc: {
          start: {
            line: 121,
            column: 20
          },
          end: {
            line: 121,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 121,
            column: 74
          },
          end: {
            line: 121,
            column: 90
          }
        }, {
          start: {
            line: 121,
            column: 93
          },
          end: {
            line: 121,
            column: 102
          }
        }],
        line: 121
      },
      "30": {
        loc: {
          start: {
            line: 121,
            column: 21
          },
          end: {
            line: 121,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 121,
            column: 54
          },
          end: {
            line: 121,
            column: 60
          }
        }, {
          start: {
            line: 121,
            column: 63
          },
          end: {
            line: 121,
            column: 70
          }
        }],
        line: 121
      },
      "31": {
        loc: {
          start: {
            line: 121,
            column: 21
          },
          end: {
            line: 121,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 121,
            column: 21
          },
          end: {
            line: 121,
            column: 33
          }
        }, {
          start: {
            line: 121,
            column: 37
          },
          end: {
            line: 121,
            column: 51
          }
        }],
        line: 121
      },
      "32": {
        loc: {
          start: {
            line: 122,
            column: 24
          },
          end: {
            line: 122,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 122,
            column: 57
          },
          end: {
            line: 122,
            column: 63
          }
        }, {
          start: {
            line: 122,
            column: 66
          },
          end: {
            line: 122,
            column: 77
          }
        }],
        line: 122
      },
      "33": {
        loc: {
          start: {
            line: 122,
            column: 24
          },
          end: {
            line: 122,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 122,
            column: 24
          },
          end: {
            line: 122,
            column: 36
          }
        }, {
          start: {
            line: 122,
            column: 40
          },
          end: {
            line: 122,
            column: 54
          }
        }],
        line: 122
      },
      "34": {
        loc: {
          start: {
            line: 126,
            column: 20
          },
          end: {
            line: 126,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 126,
            column: 21
          },
          end: {
            line: 126,
            column: 75
          }
        }, {
          start: {
            line: 126,
            column: 80
          },
          end: {
            line: 126,
            column: 89
          }
        }],
        line: 126
      },
      "35": {
        loc: {
          start: {
            line: 126,
            column: 21
          },
          end: {
            line: 126,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 126,
            column: 54
          },
          end: {
            line: 126,
            column: 60
          }
        }, {
          start: {
            line: 126,
            column: 63
          },
          end: {
            line: 126,
            column: 75
          }
        }],
        line: 126
      },
      "36": {
        loc: {
          start: {
            line: 126,
            column: 21
          },
          end: {
            line: 126,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 126,
            column: 21
          },
          end: {
            line: 126,
            column: 33
          }
        }, {
          start: {
            line: 126,
            column: 37
          },
          end: {
            line: 126,
            column: 51
          }
        }],
        line: 126
      },
      "37": {
        loc: {
          start: {
            line: 127,
            column: 23
          },
          end: {
            line: 127,
            column: 115
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 127,
            column: 24
          },
          end: {
            line: 127,
            column: 101
          }
        }, {
          start: {
            line: 127,
            column: 106
          },
          end: {
            line: 127,
            column: 115
          }
        }],
        line: 127
      },
      "38": {
        loc: {
          start: {
            line: 127,
            column: 24
          },
          end: {
            line: 127,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 127,
            column: 65
          },
          end: {
            line: 127,
            column: 71
          }
        }, {
          start: {
            line: 127,
            column: 74
          },
          end: {
            line: 127,
            column: 101
          }
        }],
        line: 127
      },
      "39": {
        loc: {
          start: {
            line: 127,
            column: 24
          },
          end: {
            line: 127,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 127,
            column: 24
          },
          end: {
            line: 127,
            column: 40
          }
        }, {
          start: {
            line: 127,
            column: 44
          },
          end: {
            line: 127,
            column: 62
          }
        }],
        line: 127
      },
      "40": {
        loc: {
          start: {
            line: 128,
            column: 23
          },
          end: {
            line: 128,
            column: 113
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 128,
            column: 24
          },
          end: {
            line: 128,
            column: 99
          }
        }, {
          start: {
            line: 128,
            column: 104
          },
          end: {
            line: 128,
            column: 113
          }
        }],
        line: 128
      },
      "41": {
        loc: {
          start: {
            line: 128,
            column: 24
          },
          end: {
            line: 128,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 128,
            column: 65
          },
          end: {
            line: 128,
            column: 71
          }
        }, {
          start: {
            line: 128,
            column: 74
          },
          end: {
            line: 128,
            column: 99
          }
        }],
        line: 128
      },
      "42": {
        loc: {
          start: {
            line: 128,
            column: 24
          },
          end: {
            line: 128,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 128,
            column: 24
          },
          end: {
            line: 128,
            column: 40
          }
        }, {
          start: {
            line: 128,
            column: 44
          },
          end: {
            line: 128,
            column: 62
          }
        }],
        line: 128
      },
      "43": {
        loc: {
          start: {
            line: 129,
            column: 18
          },
          end: {
            line: 129,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 129,
            column: 19
          },
          end: {
            line: 129,
            column: 73
          }
        }, {
          start: {
            line: 129,
            column: 78
          },
          end: {
            line: 129,
            column: 87
          }
        }],
        line: 129
      },
      "44": {
        loc: {
          start: {
            line: 129,
            column: 19
          },
          end: {
            line: 129,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 129,
            column: 52
          },
          end: {
            line: 129,
            column: 58
          }
        }, {
          start: {
            line: 129,
            column: 61
          },
          end: {
            line: 129,
            column: 73
          }
        }],
        line: 129
      },
      "45": {
        loc: {
          start: {
            line: 129,
            column: 19
          },
          end: {
            line: 129,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 129,
            column: 19
          },
          end: {
            line: 129,
            column: 31
          }
        }, {
          start: {
            line: 129,
            column: 35
          },
          end: {
            line: 129,
            column: 49
          }
        }],
        line: 129
      },
      "46": {
        loc: {
          start: {
            line: 130,
            column: 20
          },
          end: {
            line: 130,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 130,
            column: 21
          },
          end: {
            line: 130,
            column: 73
          }
        }, {
          start: {
            line: 130,
            column: 78
          },
          end: {
            line: 130,
            column: 87
          }
        }],
        line: 130
      },
      "47": {
        loc: {
          start: {
            line: 130,
            column: 21
          },
          end: {
            line: 130,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 130,
            column: 54
          },
          end: {
            line: 130,
            column: 60
          }
        }, {
          start: {
            line: 130,
            column: 63
          },
          end: {
            line: 130,
            column: 73
          }
        }],
        line: 130
      },
      "48": {
        loc: {
          start: {
            line: 130,
            column: 21
          },
          end: {
            line: 130,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 130,
            column: 21
          },
          end: {
            line: 130,
            column: 33
          }
        }, {
          start: {
            line: 130,
            column: 37
          },
          end: {
            line: 130,
            column: 51
          }
        }],
        line: 130
      },
      "49": {
        loc: {
          start: {
            line: 131,
            column: 24
          },
          end: {
            line: 131,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 131,
            column: 24
          },
          end: {
            line: 131,
            column: 40
          }
        }, {
          start: {
            line: 131,
            column: 44
          },
          end: {
            line: 131,
            column: 47
          }
        }],
        line: 131
      },
      "50": {
        loc: {
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 142,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 142,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 141
      },
      "51": {
        loc: {
          start: {
            line: 144,
            column: 30
          },
          end: {
            line: 144,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 144,
            column: 92
          },
          end: {
            line: 144,
            column: 98
          }
        }, {
          start: {
            line: 144,
            column: 101
          },
          end: {
            line: 144,
            column: 109
          }
        }],
        line: 144
      },
      "52": {
        loc: {
          start: {
            line: 144,
            column: 30
          },
          end: {
            line: 144,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 144,
            column: 30
          },
          end: {
            line: 144,
            column: 72
          }
        }, {
          start: {
            line: 144,
            column: 76
          },
          end: {
            line: 144,
            column: 89
          }
        }],
        line: 144
      },
      "53": {
        loc: {
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 154,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 154,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "54": {
        loc: {
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 159,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 157,
            column: 8
          },
          end: {
            line: 159,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 157
      },
      "55": {
        loc: {
          start: {
            line: 166,
            column: 8
          },
          end: {
            line: 167,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 166,
            column: 8
          },
          end: {
            line: 167,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 166
      },
      "56": {
        loc: {
          start: {
            line: 168,
            column: 20
          },
          end: {
            line: 168,
            column: 58
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 168,
            column: 30
          },
          end: {
            line: 168,
            column: 46
          }
        }, {
          start: {
            line: 168,
            column: 49
          },
          end: {
            line: 168,
            column: 58
          }
        }],
        line: 168
      },
      "57": {
        loc: {
          start: {
            line: 170,
            column: 26
          },
          end: {
            line: 170,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 170,
            column: 59
          },
          end: {
            line: 170,
            column: 65
          }
        }, {
          start: {
            line: 170,
            column: 68
          },
          end: {
            line: 170,
            column: 106
          }
        }],
        line: 170
      },
      "58": {
        loc: {
          start: {
            line: 170,
            column: 26
          },
          end: {
            line: 170,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 170,
            column: 26
          },
          end: {
            line: 170,
            column: 38
          }
        }, {
          start: {
            line: 170,
            column: 42
          },
          end: {
            line: 170,
            column: 56
          }
        }],
        line: 170
      },
      "59": {
        loc: {
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 173,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 173,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 171
      },
      "60": {
        loc: {
          start: {
            line: 175,
            column: 22
          },
          end: {
            line: 175,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 175,
            column: 55
          },
          end: {
            line: 175,
            column: 61
          }
        }, {
          start: {
            line: 175,
            column: 64
          },
          end: {
            line: 175,
            column: 93
          }
        }],
        line: 175
      },
      "61": {
        loc: {
          start: {
            line: 175,
            column: 22
          },
          end: {
            line: 175,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 175,
            column: 22
          },
          end: {
            line: 175,
            column: 34
          }
        }, {
          start: {
            line: 175,
            column: 38
          },
          end: {
            line: 175,
            column: 52
          }
        }],
        line: 175
      },
      "62": {
        loc: {
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "63": {
        loc: {
          start: {
            line: 212,
            column: 8
          },
          end: {
            line: 229,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 212,
            column: 8
          },
          end: {
            line: 229,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 212
      },
      "64": {
        loc: {
          start: {
            line: 216,
            column: 31
          },
          end: {
            line: 216,
            column: 58
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 216,
            column: 53
          },
          end: {
            line: 216,
            column: 54
          }
        }, {
          start: {
            line: 216,
            column: 57
          },
          end: {
            line: 216,
            column: 58
          }
        }],
        line: 216
      },
      "65": {
        loc: {
          start: {
            line: 224,
            column: 31
          },
          end: {
            line: 224,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 224,
            column: 31
          },
          end: {
            line: 224,
            column: 41
          }
        }, {
          start: {
            line: 224,
            column: 45
          },
          end: {
            line: 224,
            column: 54
          }
        }],
        line: 224
      },
      "66": {
        loc: {
          start: {
            line: 225,
            column: 32
          },
          end: {
            line: 225,
            column: 117
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 225,
            column: 33
          },
          end: {
            line: 225,
            column: 107
          }
        }, {
          start: {
            line: 225,
            column: 112
          },
          end: {
            line: 225,
            column: 117
          }
        }],
        line: 225
      },
      "67": {
        loc: {
          start: {
            line: 225,
            column: 33
          },
          end: {
            line: 225,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 225,
            column: 85
          },
          end: {
            line: 225,
            column: 91
          }
        }, {
          start: {
            line: 225,
            column: 94
          },
          end: {
            line: 225,
            column: 107
          }
        }],
        line: 225
      },
      "68": {
        loc: {
          start: {
            line: 225,
            column: 33
          },
          end: {
            line: 225,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 225,
            column: 33
          },
          end: {
            line: 225,
            column: 65
          }
        }, {
          start: {
            line: 225,
            column: 69
          },
          end: {
            line: 225,
            column: 82
          }
        }],
        line: 225
      },
      "69": {
        loc: {
          start: {
            line: 226,
            column: 28
          },
          end: {
            line: 226,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 226,
            column: 28
          },
          end: {
            line: 226,
            column: 42
          }
        }, {
          start: {
            line: 226,
            column: 46
          },
          end: {
            line: 226,
            column: 55
          }
        }],
        line: 226
      },
      "70": {
        loc: {
          start: {
            line: 237,
            column: 25
          },
          end: {
            line: 237,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 237,
            column: 47
          },
          end: {
            line: 237,
            column: 60
          }
        }, {
          start: {
            line: 237,
            column: 63
          },
          end: {
            line: 237,
            column: 98
          }
        }],
        line: 237
      },
      "71": {
        loc: {
          start: {
            line: 238,
            column: 22
          },
          end: {
            line: 238,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 238,
            column: 22
          },
          end: {
            line: 238,
            column: 32
          }
        }, {
          start: {
            line: 238,
            column: 36
          },
          end: {
            line: 238,
            column: 52
          }
        }],
        line: 238
      },
      "72": {
        loc: {
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 249,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 249,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 244
      },
      "73": {
        loc: {
          start: {
            line: 244,
            column: 12
          },
          end: {
            line: 244,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 244,
            column: 12
          },
          end: {
            line: 244,
            column: 49
          }
        }, {
          start: {
            line: 244,
            column: 53
          },
          end: {
            line: 244,
            column: 73
          }
        }],
        line: 244
      },
      "74": {
        loc: {
          start: {
            line: 251,
            column: 20
          },
          end: {
            line: 251,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 251,
            column: 20
          },
          end: {
            line: 251,
            column: 36
          }
        }, {
          start: {
            line: 251,
            column: 40
          },
          end: {
            line: 251,
            column: 43
          }
        }],
        line: 251
      },
      "75": {
        loc: {
          start: {
            line: 254,
            column: 32
          },
          end: {
            line: 254,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 254,
            column: 32
          },
          end: {
            line: 254,
            column: 49
          }
        }, {
          start: {
            line: 254,
            column: 53
          },
          end: {
            line: 254,
            column: 62
          }
        }],
        line: 254
      },
      "76": {
        loc: {
          start: {
            line: 261,
            column: 43
          },
          end: {
            line: 261,
            column: 59
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 261,
            column: 56
          },
          end: {
            line: 261,
            column: 59
          }
        }],
        line: 261
      },
      "77": {
        loc: {
          start: {
            line: 266,
            column: 18
          },
          end: {
            line: 266,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 266,
            column: 18
          },
          end: {
            line: 266,
            column: 22
          }
        }, {
          start: {
            line: 266,
            column: 26
          },
          end: {
            line: 266,
            column: 45
          }
        }],
        line: 266
      },
      "78": {
        loc: {
          start: {
            line: 280,
            column: 19
          },
          end: {
            line: 280,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 280,
            column: 72
          },
          end: {
            line: 280,
            column: 78
          }
        }, {
          start: {
            line: 280,
            column: 81
          },
          end: {
            line: 280,
            column: 100
          }
        }],
        line: 280
      },
      "79": {
        loc: {
          start: {
            line: 280,
            column: 19
          },
          end: {
            line: 280,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 280,
            column: 19
          },
          end: {
            line: 280,
            column: 41
          }
        }, {
          start: {
            line: 280,
            column: 45
          },
          end: {
            line: 280,
            column: 69
          }
        }],
        line: 280
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0],
      "77": [0, 0],
      "78": [0, 0],
      "79": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/middleware/error-handler.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/middleware/error-handler.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { ApplicationInsights } from '@microsoft/applicationinsights-web';\n\nexport interface ErrorDetails {\n  userId?: string;\n  jobId?: string;\n  action?: string;\n  requestId?: string;\n  userAgent?: string;\n  path?: string;\n  method?: string;\n  statusCode?: number;\n  stack?: string;\n  timestamp: string;\n}\n\nexport interface ApiError extends Error {\n  statusCode?: number;\n  code?: string;\n  isOperational?: boolean;\n}\n\nexport class ErrorHandler {\n  private static appInsights?: ApplicationInsights;\n\n  static initialize(instrumentationKey?: string) {\n    if (instrumentationKey && typeof window !== 'undefined') {\n      this.appInsights = new ApplicationInsights({\n        config: {\n          instrumentationKey,\n          enableAutoRouteTracking: false,\n        }\n      });\n      this.appInsights.loadAppInsights();\n    }\n  }\n\n  /**\n   * Global error handler middleware for Next.js API routes\n   */\n  static withErrorHandler(\n    handler: (req: NextRequest) => Promise<NextResponse>\n  ) {\n    return async (req: NextRequest): Promise<NextResponse> => {\n      try {\n        return await handler(req);\n      } catch (error) {\n        return this.handleError(error, req);\n      }\n    };\n  }\n\n  /**\n   * Handle and log errors with structured logging\n   */\n  static handleError(error: any, req?: NextRequest): NextResponse {\n    const apiError = this.normalizeError(error);\n    const errorDetails = this.extractErrorDetails(apiError, req);\n\n    // Log the error\n    this.logError(apiError, errorDetails);\n\n    // Return appropriate response\n    return this.createErrorResponse(apiError, errorDetails);\n  }\n\n  /**\n   * Normalize different error types to ApiError\n   */\n  private static normalizeError(error: any): ApiError {\n    // Already an ApiError\n    if (error.statusCode && error.isOperational !== undefined) {\n      return error;\n    }\n\n    // Network/HTTP errors\n    if (error.code === 'ECONNRESET' || error.code === 'ENOTFOUND') {\n      return {\n        name: 'NetworkError',\n        message: 'Network connection failed',\n        statusCode: 503,\n        code: error.code,\n        isOperational: true,\n        stack: error.stack\n      };\n    }\n\n    // Validation errors\n    if (error.name === 'ValidationError' || error.name === 'ZodError') {\n      return {\n        name: 'ValidationError',\n        message: error.message || 'Validation failed',\n        statusCode: 400,\n        code: 'VALIDATION_ERROR',\n        isOperational: true,\n        stack: error.stack\n      };\n    }\n\n    // Authentication errors\n    if (error.message?.includes('unauthorized') || error.message?.includes('token')) {\n      return {\n        name: 'AuthenticationError',\n        message: 'Authentication failed',\n        statusCode: 401,\n        code: 'AUTH_ERROR',\n        isOperational: true,\n        stack: error.stack\n      };\n    }\n\n    // Rate limiting errors\n    if (error.message?.includes('rate limit') || error.message?.includes('throttled')) {\n      return {\n        name: 'RateLimitError',\n        message: 'Rate limit exceeded',\n        statusCode: 429,\n        code: 'RATE_LIMIT_ERROR',\n        isOperational: true,\n        stack: error.stack\n      };\n    }\n\n    // External service errors (Azure OpenAI, etc.)\n    if (error.message?.includes('Azure OpenAI') || error.message?.includes('OpenAI')) {\n      return {\n        name: 'ExternalServiceError',\n        message: 'External AI service error',\n        statusCode: 502,\n        code: 'AI_SERVICE_ERROR',\n        isOperational: true,\n        stack: error.stack\n      };\n    }\n\n    // Default to internal server error\n    return {\n      name: error.name || 'InternalError',\n      message: error.message || 'An internal server error occurred',\n      statusCode: 500,\n      code: 'INTERNAL_ERROR',\n      isOperational: false,\n      stack: error.stack\n    };\n  }\n\n  /**\n   * Extract error details from request and error\n   */\n  private static extractErrorDetails(error: ApiError, req?: NextRequest): ErrorDetails {\n    const url = req?.url ? new URL(req.url) : undefined;\n    const headers = req?.headers;\n\n    return {\n      userId: this.extractUserId(req),\n      jobId: this.extractJobId(req),\n      action: url?.pathname || 'unknown',\n      requestId: headers?.get('x-request-id') || undefined,\n      userAgent: headers?.get('user-agent') || undefined,\n      path: url?.pathname || undefined,\n      method: req?.method || undefined,\n      statusCode: error.statusCode || 500,\n      stack: error.stack,\n      timestamp: new Date().toISOString()\n    };\n  }\n\n  /**\n   * Extract user ID from request (cookies, headers, or body)\n   */\n  private static extractUserId(req?: NextRequest): string | undefined {\n    if (!req) return undefined;\n\n    // Try to get from cookies first\n    const sessionCookie = req.cookies.get('session')?.value;\n    if (sessionCookie) {\n      try {\n        // In a real implementation, you'd decode the session token\n        // For now, we'll just note that there's a session\n        return 'user_from_session';\n      } catch {\n        // Failed to decode session\n      }\n    }\n\n    // Try to get from headers\n    const userIdHeader = req.headers.get('x-user-id');\n    if (userIdHeader) {\n      return userIdHeader;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Extract job ID from request path or body\n   */\n  private static extractJobId(req?: NextRequest): string | undefined {\n    if (!req) return undefined;\n\n    const url = req.url ? new URL(req.url) : undefined;\n    \n    // Try to extract from path\n    const pathMatch = url?.pathname.match(/\\/jobs\\/([^\\/]+)/);\n    if (pathMatch) {\n      return pathMatch[1];\n    }\n\n    // Try to extract from query parameters\n    const jobId = url?.searchParams.get('jobId');\n    if (jobId) {\n      return jobId;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Log error with structured logging\n   */\n  private static logError(error: ApiError, details: ErrorDetails): void {\n    const logData = {\n      level: 'error',\n      message: `API Error: ${error.message}`,\n      properties: {\n        errorName: error.name,\n        errorCode: error.code,\n        statusCode: error.statusCode,\n        isOperational: error.isOperational,\n        userId: details.userId,\n        jobId: details.jobId,\n        action: details.action,\n        requestId: details.requestId,\n        userAgent: details.userAgent,\n        path: details.path,\n        method: details.method,\n        timestamp: details.timestamp\n      },\n      exception: {\n        message: error.message,\n        stack: error.stack,\n        name: error.name\n      }\n    };\n\n    // Log to console with structured format\n    console.error('API_ERROR', JSON.stringify(logData));\n\n    // Send to Application Insights if available\n    if (this.appInsights) {\n      this.appInsights.trackException({\n        exception: error,\n        properties: logData.properties,\n        severityLevel: error.isOperational ? 2 : 3 // Warning for operational, Error for programming errors\n      });\n\n      // Track custom metric for error rates\n      this.appInsights.trackMetric({\n        name: 'ApiError',\n        average: 1,\n        sampleCount: 1,\n        properties: {\n          errorCode: error.code || 'unknown',\n          statusCode: error.statusCode?.toString() || '500',\n          action: details.action || 'unknown'\n        }\n      });\n    }\n  }\n\n  /**\n   * Create appropriate error response\n   */\n  private static createErrorResponse(error: ApiError, details: ErrorDetails): NextResponse {\n    const response: {\n      error: {\n        message: string;\n        code: string;\n        timestamp: string;\n        requestId: string | undefined;\n        details?: {\n          stack?: string;\n          originalMessage: string;\n        };\n      };\n    } = {\n      error: {\n        message: error.isOperational ? error.message : 'An internal server error occurred',\n        code: error.code || 'INTERNAL_ERROR',\n        timestamp: details.timestamp,\n        requestId: details.requestId\n      }\n    };\n\n    // Don't expose internal error details in production\n    if (process.env.NODE_ENV !== 'production' && !error.isOperational) {\n      response.error.details = {\n        stack: error.stack,\n        originalMessage: error.message\n      };\n    }\n\n    return NextResponse.json(\n      response,\n      {\n        status: error.statusCode || 500,\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Request-ID': details.requestId || 'unknown'\n        }\n      }\n    );\n  }\n\n  /**\n   * Create an operational error (expected errors)\n   */\n  static createOperationalError(message: string, statusCode: number = 400, code?: string): ApiError {\n    return {\n      name: 'OperationalError',\n      message,\n      statusCode,\n      code: code || 'OPERATIONAL_ERROR',\n      isOperational: true\n    };\n  }\n\n  /**\n   * Create a programming error (unexpected errors)\n   */\n  static createProgrammingError(message: string, originalError?: Error): ApiError {\n    return {\n      name: 'ProgrammingError',\n      message,\n      statusCode: 500,\n      code: 'PROGRAMMING_ERROR',\n      isOperational: false,\n      stack: originalError?.stack\n    };\n  }\n}\n\n// Convenience function for wrapping API handlers\nexport function withErrorHandler(\n  handler: (req: NextRequest) => Promise<NextResponse>\n) {\n  return ErrorHandler.withErrorHandler(handler);\n}\n\n// Convenience functions for creating errors\nexport const createOperationalError = ErrorHandler.createOperationalError;\nexport const createProgrammingError = ErrorHandler.createProgrammingError;\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7b0225d6edee2e544659b356c965a23ac22d4127"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_29znruqmwq = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_29znruqmwq();
cov_29znruqmwq().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_29znruqmwq().s[1]++;
exports.createProgrammingError = exports.createOperationalError = exports.ErrorHandler = void 0;
/* istanbul ignore next */
cov_29znruqmwq().s[2]++;
exports.withErrorHandler = withErrorHandler;
const server_1 =
/* istanbul ignore next */
(cov_29znruqmwq().s[3]++, require("next/server"));
const applicationinsights_web_1 =
/* istanbul ignore next */
(cov_29znruqmwq().s[4]++, require("@microsoft/applicationinsights-web"));
class ErrorHandler {
  static initialize(instrumentationKey) {
    /* istanbul ignore next */
    cov_29znruqmwq().f[0]++;
    cov_29znruqmwq().s[5]++;
    if (
    /* istanbul ignore next */
    (cov_29znruqmwq().b[1][0]++, instrumentationKey) &&
    /* istanbul ignore next */
    (cov_29znruqmwq().b[1][1]++, typeof window !== 'undefined')) {
      /* istanbul ignore next */
      cov_29znruqmwq().b[0][0]++;
      cov_29znruqmwq().s[6]++;
      this.appInsights = new applicationinsights_web_1.ApplicationInsights({
        config: {
          instrumentationKey,
          enableAutoRouteTracking: false
        }
      });
      /* istanbul ignore next */
      cov_29znruqmwq().s[7]++;
      this.appInsights.loadAppInsights();
    } else
    /* istanbul ignore next */
    {
      cov_29znruqmwq().b[0][1]++;
    }
  }
  /**
   * Global error handler middleware for Next.js API routes
   */
  static withErrorHandler(handler) {
    /* istanbul ignore next */
    cov_29znruqmwq().f[1]++;
    cov_29znruqmwq().s[8]++;
    return async req => {
      /* istanbul ignore next */
      cov_29znruqmwq().f[2]++;
      cov_29znruqmwq().s[9]++;
      try {
        /* istanbul ignore next */
        cov_29znruqmwq().s[10]++;
        return await handler(req);
      } catch (error) {
        /* istanbul ignore next */
        cov_29znruqmwq().s[11]++;
        return this.handleError(error, req);
      }
    };
  }
  /**
   * Handle and log errors with structured logging
   */
  static handleError(error, req) {
    /* istanbul ignore next */
    cov_29znruqmwq().f[3]++;
    const apiError =
    /* istanbul ignore next */
    (cov_29znruqmwq().s[12]++, this.normalizeError(error));
    const errorDetails =
    /* istanbul ignore next */
    (cov_29znruqmwq().s[13]++, this.extractErrorDetails(apiError, req));
    // Log the error
    /* istanbul ignore next */
    cov_29znruqmwq().s[14]++;
    this.logError(apiError, errorDetails);
    // Return appropriate response
    /* istanbul ignore next */
    cov_29znruqmwq().s[15]++;
    return this.createErrorResponse(apiError, errorDetails);
  }
  /**
   * Normalize different error types to ApiError
   */
  static normalizeError(error) {
    /* istanbul ignore next */
    cov_29znruqmwq().f[4]++;
    var _a, _b, _c, _d, _e, _f;
    // Already an ApiError
    /* istanbul ignore next */
    cov_29znruqmwq().s[16]++;
    if (
    /* istanbul ignore next */
    (cov_29znruqmwq().b[3][0]++, error.statusCode) &&
    /* istanbul ignore next */
    (cov_29znruqmwq().b[3][1]++, error.isOperational !== undefined)) {
      /* istanbul ignore next */
      cov_29znruqmwq().b[2][0]++;
      cov_29znruqmwq().s[17]++;
      return error;
    } else
    /* istanbul ignore next */
    {
      cov_29znruqmwq().b[2][1]++;
    }
    // Network/HTTP errors
    cov_29znruqmwq().s[18]++;
    if (
    /* istanbul ignore next */
    (cov_29znruqmwq().b[5][0]++, error.code === 'ECONNRESET') ||
    /* istanbul ignore next */
    (cov_29znruqmwq().b[5][1]++, error.code === 'ENOTFOUND')) {
      /* istanbul ignore next */
      cov_29znruqmwq().b[4][0]++;
      cov_29znruqmwq().s[19]++;
      return {
        name: 'NetworkError',
        message: 'Network connection failed',
        statusCode: 503,
        code: error.code,
        isOperational: true,
        stack: error.stack
      };
    } else
    /* istanbul ignore next */
    {
      cov_29znruqmwq().b[4][1]++;
    }
    // Validation errors
    cov_29znruqmwq().s[20]++;
    if (
    /* istanbul ignore next */
    (cov_29znruqmwq().b[7][0]++, error.name === 'ValidationError') ||
    /* istanbul ignore next */
    (cov_29znruqmwq().b[7][1]++, error.name === 'ZodError')) {
      /* istanbul ignore next */
      cov_29znruqmwq().b[6][0]++;
      cov_29znruqmwq().s[21]++;
      return {
        name: 'ValidationError',
        message:
        /* istanbul ignore next */
        (cov_29znruqmwq().b[8][0]++, error.message) ||
        /* istanbul ignore next */
        (cov_29znruqmwq().b[8][1]++, 'Validation failed'),
        statusCode: 400,
        code: 'VALIDATION_ERROR',
        isOperational: true,
        stack: error.stack
      };
    } else
    /* istanbul ignore next */
    {
      cov_29znruqmwq().b[6][1]++;
    }
    // Authentication errors
    cov_29znruqmwq().s[22]++;
    if (
    /* istanbul ignore next */
    (cov_29znruqmwq().b[10][0]++,
    /* istanbul ignore next */
    (cov_29znruqmwq().b[12][0]++, (_a = error.message) === null) ||
    /* istanbul ignore next */
    (cov_29znruqmwq().b[12][1]++, _a === void 0) ?
    /* istanbul ignore next */
    (cov_29znruqmwq().b[11][0]++, void 0) :
    /* istanbul ignore next */
    (cov_29znruqmwq().b[11][1]++, _a.includes('unauthorized'))) ||
    /* istanbul ignore next */
    (cov_29znruqmwq().b[10][1]++,
    /* istanbul ignore next */
    (cov_29znruqmwq().b[14][0]++, (_b = error.message) === null) ||
    /* istanbul ignore next */
    (cov_29znruqmwq().b[14][1]++, _b === void 0) ?
    /* istanbul ignore next */
    (cov_29znruqmwq().b[13][0]++, void 0) :
    /* istanbul ignore next */
    (cov_29znruqmwq().b[13][1]++, _b.includes('token')))) {
      /* istanbul ignore next */
      cov_29znruqmwq().b[9][0]++;
      cov_29znruqmwq().s[23]++;
      return {
        name: 'AuthenticationError',
        message: 'Authentication failed',
        statusCode: 401,
        code: 'AUTH_ERROR',
        isOperational: true,
        stack: error.stack
      };
    } else
    /* istanbul ignore next */
    {
      cov_29znruqmwq().b[9][1]++;
    }
    // Rate limiting errors
    cov_29znruqmwq().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_29znruqmwq().b[16][0]++,
    /* istanbul ignore next */
    (cov_29znruqmwq().b[18][0]++, (_c = error.message) === null) ||
    /* istanbul ignore next */
    (cov_29znruqmwq().b[18][1]++, _c === void 0) ?
    /* istanbul ignore next */
    (cov_29znruqmwq().b[17][0]++, void 0) :
    /* istanbul ignore next */
    (cov_29znruqmwq().b[17][1]++, _c.includes('rate limit'))) ||
    /* istanbul ignore next */
    (cov_29znruqmwq().b[16][1]++,
    /* istanbul ignore next */
    (cov_29znruqmwq().b[20][0]++, (_d = error.message) === null) ||
    /* istanbul ignore next */
    (cov_29znruqmwq().b[20][1]++, _d === void 0) ?
    /* istanbul ignore next */
    (cov_29znruqmwq().b[19][0]++, void 0) :
    /* istanbul ignore next */
    (cov_29znruqmwq().b[19][1]++, _d.includes('throttled')))) {
      /* istanbul ignore next */
      cov_29znruqmwq().b[15][0]++;
      cov_29znruqmwq().s[25]++;
      return {
        name: 'RateLimitError',
        message: 'Rate limit exceeded',
        statusCode: 429,
        code: 'RATE_LIMIT_ERROR',
        isOperational: true,
        stack: error.stack
      };
    } else
    /* istanbul ignore next */
    {
      cov_29znruqmwq().b[15][1]++;
    }
    // External service errors (Azure OpenAI, etc.)
    cov_29znruqmwq().s[26]++;
    if (
    /* istanbul ignore next */
    (cov_29znruqmwq().b[22][0]++,
    /* istanbul ignore next */
    (cov_29znruqmwq().b[24][0]++, (_e = error.message) === null) ||
    /* istanbul ignore next */
    (cov_29znruqmwq().b[24][1]++, _e === void 0) ?
    /* istanbul ignore next */
    (cov_29znruqmwq().b[23][0]++, void 0) :
    /* istanbul ignore next */
    (cov_29znruqmwq().b[23][1]++, _e.includes('Azure OpenAI'))) ||
    /* istanbul ignore next */
    (cov_29znruqmwq().b[22][1]++,
    /* istanbul ignore next */
    (cov_29znruqmwq().b[26][0]++, (_f = error.message) === null) ||
    /* istanbul ignore next */
    (cov_29znruqmwq().b[26][1]++, _f === void 0) ?
    /* istanbul ignore next */
    (cov_29znruqmwq().b[25][0]++, void 0) :
    /* istanbul ignore next */
    (cov_29znruqmwq().b[25][1]++, _f.includes('OpenAI')))) {
      /* istanbul ignore next */
      cov_29znruqmwq().b[21][0]++;
      cov_29znruqmwq().s[27]++;
      return {
        name: 'ExternalServiceError',
        message: 'External AI service error',
        statusCode: 502,
        code: 'AI_SERVICE_ERROR',
        isOperational: true,
        stack: error.stack
      };
    } else
    /* istanbul ignore next */
    {
      cov_29znruqmwq().b[21][1]++;
    }
    // Default to internal server error
    cov_29znruqmwq().s[28]++;
    return {
      name:
      /* istanbul ignore next */
      (cov_29znruqmwq().b[27][0]++, error.name) ||
      /* istanbul ignore next */
      (cov_29znruqmwq().b[27][1]++, 'InternalError'),
      message:
      /* istanbul ignore next */
      (cov_29znruqmwq().b[28][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_29znruqmwq().b[28][1]++, 'An internal server error occurred'),
      statusCode: 500,
      code: 'INTERNAL_ERROR',
      isOperational: false,
      stack: error.stack
    };
  }
  /**
   * Extract error details from request and error
   */
  static extractErrorDetails(error, req) {
    /* istanbul ignore next */
    cov_29znruqmwq().f[5]++;
    const url =
    /* istanbul ignore next */
    (cov_29znruqmwq().s[29]++, (
    /* istanbul ignore next */
    (cov_29znruqmwq().b[31][0]++, req === null) ||
    /* istanbul ignore next */
    (cov_29znruqmwq().b[31][1]++, req === void 0) ?
    /* istanbul ignore next */
    (cov_29znruqmwq().b[30][0]++, void 0) :
    /* istanbul ignore next */
    (cov_29znruqmwq().b[30][1]++, req.url)) ?
    /* istanbul ignore next */
    (cov_29znruqmwq().b[29][0]++, new URL(req.url)) :
    /* istanbul ignore next */
    (cov_29znruqmwq().b[29][1]++, undefined));
    const headers =
    /* istanbul ignore next */
    (cov_29znruqmwq().s[30]++,
    /* istanbul ignore next */
    (cov_29znruqmwq().b[33][0]++, req === null) ||
    /* istanbul ignore next */
    (cov_29znruqmwq().b[33][1]++, req === void 0) ?
    /* istanbul ignore next */
    (cov_29znruqmwq().b[32][0]++, void 0) :
    /* istanbul ignore next */
    (cov_29znruqmwq().b[32][1]++, req.headers));
    /* istanbul ignore next */
    cov_29znruqmwq().s[31]++;
    return {
      userId: this.extractUserId(req),
      jobId: this.extractJobId(req),
      action:
      /* istanbul ignore next */
      (cov_29znruqmwq().b[34][0]++,
      /* istanbul ignore next */
      (cov_29znruqmwq().b[36][0]++, url === null) ||
      /* istanbul ignore next */
      (cov_29znruqmwq().b[36][1]++, url === void 0) ?
      /* istanbul ignore next */
      (cov_29znruqmwq().b[35][0]++, void 0) :
      /* istanbul ignore next */
      (cov_29znruqmwq().b[35][1]++, url.pathname)) ||
      /* istanbul ignore next */
      (cov_29znruqmwq().b[34][1]++, 'unknown'),
      requestId:
      /* istanbul ignore next */
      (cov_29znruqmwq().b[37][0]++,
      /* istanbul ignore next */
      (cov_29znruqmwq().b[39][0]++, headers === null) ||
      /* istanbul ignore next */
      (cov_29znruqmwq().b[39][1]++, headers === void 0) ?
      /* istanbul ignore next */
      (cov_29znruqmwq().b[38][0]++, void 0) :
      /* istanbul ignore next */
      (cov_29znruqmwq().b[38][1]++, headers.get('x-request-id'))) ||
      /* istanbul ignore next */
      (cov_29znruqmwq().b[37][1]++, undefined),
      userAgent:
      /* istanbul ignore next */
      (cov_29znruqmwq().b[40][0]++,
      /* istanbul ignore next */
      (cov_29znruqmwq().b[42][0]++, headers === null) ||
      /* istanbul ignore next */
      (cov_29znruqmwq().b[42][1]++, headers === void 0) ?
      /* istanbul ignore next */
      (cov_29znruqmwq().b[41][0]++, void 0) :
      /* istanbul ignore next */
      (cov_29znruqmwq().b[41][1]++, headers.get('user-agent'))) ||
      /* istanbul ignore next */
      (cov_29znruqmwq().b[40][1]++, undefined),
      path:
      /* istanbul ignore next */
      (cov_29znruqmwq().b[43][0]++,
      /* istanbul ignore next */
      (cov_29znruqmwq().b[45][0]++, url === null) ||
      /* istanbul ignore next */
      (cov_29znruqmwq().b[45][1]++, url === void 0) ?
      /* istanbul ignore next */
      (cov_29znruqmwq().b[44][0]++, void 0) :
      /* istanbul ignore next */
      (cov_29znruqmwq().b[44][1]++, url.pathname)) ||
      /* istanbul ignore next */
      (cov_29znruqmwq().b[43][1]++, undefined),
      method:
      /* istanbul ignore next */
      (cov_29znruqmwq().b[46][0]++,
      /* istanbul ignore next */
      (cov_29znruqmwq().b[48][0]++, req === null) ||
      /* istanbul ignore next */
      (cov_29znruqmwq().b[48][1]++, req === void 0) ?
      /* istanbul ignore next */
      (cov_29znruqmwq().b[47][0]++, void 0) :
      /* istanbul ignore next */
      (cov_29znruqmwq().b[47][1]++, req.method)) ||
      /* istanbul ignore next */
      (cov_29znruqmwq().b[46][1]++, undefined),
      statusCode:
      /* istanbul ignore next */
      (cov_29znruqmwq().b[49][0]++, error.statusCode) ||
      /* istanbul ignore next */
      (cov_29znruqmwq().b[49][1]++, 500),
      stack: error.stack,
      timestamp: new Date().toISOString()
    };
  }
  /**
   * Extract user ID from request (cookies, headers, or body)
   */
  static extractUserId(req) {
    /* istanbul ignore next */
    cov_29znruqmwq().f[6]++;
    var _a;
    /* istanbul ignore next */
    cov_29znruqmwq().s[32]++;
    if (!req) {
      /* istanbul ignore next */
      cov_29znruqmwq().b[50][0]++;
      cov_29znruqmwq().s[33]++;
      return undefined;
    } else
    /* istanbul ignore next */
    {
      cov_29znruqmwq().b[50][1]++;
    }
    // Try to get from cookies first
    const sessionCookie =
    /* istanbul ignore next */
    (cov_29znruqmwq().s[34]++,
    /* istanbul ignore next */
    (cov_29znruqmwq().b[52][0]++, (_a = req.cookies.get('session')) === null) ||
    /* istanbul ignore next */
    (cov_29znruqmwq().b[52][1]++, _a === void 0) ?
    /* istanbul ignore next */
    (cov_29znruqmwq().b[51][0]++, void 0) :
    /* istanbul ignore next */
    (cov_29znruqmwq().b[51][1]++, _a.value));
    /* istanbul ignore next */
    cov_29znruqmwq().s[35]++;
    if (sessionCookie) {
      /* istanbul ignore next */
      cov_29znruqmwq().b[53][0]++;
      cov_29znruqmwq().s[36]++;
      try {
        /* istanbul ignore next */
        cov_29znruqmwq().s[37]++;
        // In a real implementation, you'd decode the session token
        // For now, we'll just note that there's a session
        return 'user_from_session';
      } catch (_b) {
        // Failed to decode session
      }
    } else
    /* istanbul ignore next */
    {
      cov_29znruqmwq().b[53][1]++;
    }
    // Try to get from headers
    const userIdHeader =
    /* istanbul ignore next */
    (cov_29znruqmwq().s[38]++, req.headers.get('x-user-id'));
    /* istanbul ignore next */
    cov_29znruqmwq().s[39]++;
    if (userIdHeader) {
      /* istanbul ignore next */
      cov_29znruqmwq().b[54][0]++;
      cov_29znruqmwq().s[40]++;
      return userIdHeader;
    } else
    /* istanbul ignore next */
    {
      cov_29znruqmwq().b[54][1]++;
    }
    cov_29znruqmwq().s[41]++;
    return undefined;
  }
  /**
   * Extract job ID from request path or body
   */
  static extractJobId(req) {
    /* istanbul ignore next */
    cov_29znruqmwq().f[7]++;
    cov_29znruqmwq().s[42]++;
    if (!req) {
      /* istanbul ignore next */
      cov_29znruqmwq().b[55][0]++;
      cov_29znruqmwq().s[43]++;
      return undefined;
    } else
    /* istanbul ignore next */
    {
      cov_29znruqmwq().b[55][1]++;
    }
    const url =
    /* istanbul ignore next */
    (cov_29znruqmwq().s[44]++, req.url ?
    /* istanbul ignore next */
    (cov_29znruqmwq().b[56][0]++, new URL(req.url)) :
    /* istanbul ignore next */
    (cov_29znruqmwq().b[56][1]++, undefined));
    // Try to extract from path
    const pathMatch =
    /* istanbul ignore next */
    (cov_29znruqmwq().s[45]++,
    /* istanbul ignore next */
    (cov_29znruqmwq().b[58][0]++, url === null) ||
    /* istanbul ignore next */
    (cov_29znruqmwq().b[58][1]++, url === void 0) ?
    /* istanbul ignore next */
    (cov_29znruqmwq().b[57][0]++, void 0) :
    /* istanbul ignore next */
    (cov_29znruqmwq().b[57][1]++, url.pathname.match(/\/jobs\/([^\/]+)/)));
    /* istanbul ignore next */
    cov_29znruqmwq().s[46]++;
    if (pathMatch) {
      /* istanbul ignore next */
      cov_29znruqmwq().b[59][0]++;
      cov_29znruqmwq().s[47]++;
      return pathMatch[1];
    } else
    /* istanbul ignore next */
    {
      cov_29znruqmwq().b[59][1]++;
    }
    // Try to extract from query parameters
    const jobId =
    /* istanbul ignore next */
    (cov_29znruqmwq().s[48]++,
    /* istanbul ignore next */
    (cov_29znruqmwq().b[61][0]++, url === null) ||
    /* istanbul ignore next */
    (cov_29znruqmwq().b[61][1]++, url === void 0) ?
    /* istanbul ignore next */
    (cov_29znruqmwq().b[60][0]++, void 0) :
    /* istanbul ignore next */
    (cov_29znruqmwq().b[60][1]++, url.searchParams.get('jobId')));
    /* istanbul ignore next */
    cov_29znruqmwq().s[49]++;
    if (jobId) {
      /* istanbul ignore next */
      cov_29znruqmwq().b[62][0]++;
      cov_29znruqmwq().s[50]++;
      return jobId;
    } else
    /* istanbul ignore next */
    {
      cov_29znruqmwq().b[62][1]++;
    }
    cov_29znruqmwq().s[51]++;
    return undefined;
  }
  /**
   * Log error with structured logging
   */
  static logError(error, details) {
    /* istanbul ignore next */
    cov_29znruqmwq().f[8]++;
    var _a;
    const logData =
    /* istanbul ignore next */
    (cov_29znruqmwq().s[52]++, {
      level: 'error',
      message: `API Error: ${error.message}`,
      properties: {
        errorName: error.name,
        errorCode: error.code,
        statusCode: error.statusCode,
        isOperational: error.isOperational,
        userId: details.userId,
        jobId: details.jobId,
        action: details.action,
        requestId: details.requestId,
        userAgent: details.userAgent,
        path: details.path,
        method: details.method,
        timestamp: details.timestamp
      },
      exception: {
        message: error.message,
        stack: error.stack,
        name: error.name
      }
    });
    // Log to console with structured format
    /* istanbul ignore next */
    cov_29znruqmwq().s[53]++;
    console.error('API_ERROR', JSON.stringify(logData));
    // Send to Application Insights if available
    /* istanbul ignore next */
    cov_29znruqmwq().s[54]++;
    if (this.appInsights) {
      /* istanbul ignore next */
      cov_29znruqmwq().b[63][0]++;
      cov_29znruqmwq().s[55]++;
      this.appInsights.trackException({
        exception: error,
        properties: logData.properties,
        severityLevel: error.isOperational ?
        /* istanbul ignore next */
        (cov_29znruqmwq().b[64][0]++, 2) :
        /* istanbul ignore next */
        (cov_29znruqmwq().b[64][1]++, 3) // Warning for operational, Error for programming errors
      });
      // Track custom metric for error rates
      /* istanbul ignore next */
      cov_29znruqmwq().s[56]++;
      this.appInsights.trackMetric({
        name: 'ApiError',
        average: 1,
        sampleCount: 1,
        properties: {
          errorCode:
          /* istanbul ignore next */
          (cov_29znruqmwq().b[65][0]++, error.code) ||
          /* istanbul ignore next */
          (cov_29znruqmwq().b[65][1]++, 'unknown'),
          statusCode:
          /* istanbul ignore next */
          (cov_29znruqmwq().b[66][0]++,
          /* istanbul ignore next */
          (cov_29znruqmwq().b[68][0]++, (_a = error.statusCode) === null) ||
          /* istanbul ignore next */
          (cov_29znruqmwq().b[68][1]++, _a === void 0) ?
          /* istanbul ignore next */
          (cov_29znruqmwq().b[67][0]++, void 0) :
          /* istanbul ignore next */
          (cov_29znruqmwq().b[67][1]++, _a.toString())) ||
          /* istanbul ignore next */
          (cov_29znruqmwq().b[66][1]++, '500'),
          action:
          /* istanbul ignore next */
          (cov_29znruqmwq().b[69][0]++, details.action) ||
          /* istanbul ignore next */
          (cov_29znruqmwq().b[69][1]++, 'unknown')
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_29znruqmwq().b[63][1]++;
    }
  }
  /**
   * Create appropriate error response
   */
  static createErrorResponse(error, details) {
    /* istanbul ignore next */
    cov_29znruqmwq().f[9]++;
    const response =
    /* istanbul ignore next */
    (cov_29znruqmwq().s[57]++, {
      error: {
        message: error.isOperational ?
        /* istanbul ignore next */
        (cov_29znruqmwq().b[70][0]++, error.message) :
        /* istanbul ignore next */
        (cov_29znruqmwq().b[70][1]++, 'An internal server error occurred'),
        code:
        /* istanbul ignore next */
        (cov_29znruqmwq().b[71][0]++, error.code) ||
        /* istanbul ignore next */
        (cov_29znruqmwq().b[71][1]++, 'INTERNAL_ERROR'),
        timestamp: details.timestamp,
        requestId: details.requestId
      }
    });
    // Don't expose internal error details in production
    /* istanbul ignore next */
    cov_29znruqmwq().s[58]++;
    if (
    /* istanbul ignore next */
    (cov_29znruqmwq().b[73][0]++, process.env.NODE_ENV !== 'production') &&
    /* istanbul ignore next */
    (cov_29znruqmwq().b[73][1]++, !error.isOperational)) {
      /* istanbul ignore next */
      cov_29znruqmwq().b[72][0]++;
      cov_29znruqmwq().s[59]++;
      response.error.details = {
        stack: error.stack,
        originalMessage: error.message
      };
    } else
    /* istanbul ignore next */
    {
      cov_29znruqmwq().b[72][1]++;
    }
    cov_29znruqmwq().s[60]++;
    return server_1.NextResponse.json(response, {
      status:
      /* istanbul ignore next */
      (cov_29znruqmwq().b[74][0]++, error.statusCode) ||
      /* istanbul ignore next */
      (cov_29znruqmwq().b[74][1]++, 500),
      headers: {
        'Content-Type': 'application/json',
        'X-Request-ID':
        /* istanbul ignore next */
        (cov_29znruqmwq().b[75][0]++, details.requestId) ||
        /* istanbul ignore next */
        (cov_29znruqmwq().b[75][1]++, 'unknown')
      }
    });
  }
  /**
   * Create an operational error (expected errors)
   */
  static createOperationalError(message, statusCode =
  /* istanbul ignore next */
  (cov_29znruqmwq().b[76][0]++, 400), code) {
    /* istanbul ignore next */
    cov_29znruqmwq().f[10]++;
    cov_29znruqmwq().s[61]++;
    return {
      name: 'OperationalError',
      message,
      statusCode,
      code:
      /* istanbul ignore next */
      (cov_29znruqmwq().b[77][0]++, code) ||
      /* istanbul ignore next */
      (cov_29znruqmwq().b[77][1]++, 'OPERATIONAL_ERROR'),
      isOperational: true
    };
  }
  /**
   * Create a programming error (unexpected errors)
   */
  static createProgrammingError(message, originalError) {
    /* istanbul ignore next */
    cov_29znruqmwq().f[11]++;
    cov_29znruqmwq().s[62]++;
    return {
      name: 'ProgrammingError',
      message,
      statusCode: 500,
      code: 'PROGRAMMING_ERROR',
      isOperational: false,
      stack:
      /* istanbul ignore next */
      (cov_29znruqmwq().b[79][0]++, originalError === null) ||
      /* istanbul ignore next */
      (cov_29znruqmwq().b[79][1]++, originalError === void 0) ?
      /* istanbul ignore next */
      (cov_29znruqmwq().b[78][0]++, void 0) :
      /* istanbul ignore next */
      (cov_29znruqmwq().b[78][1]++, originalError.stack)
    };
  }
}
/* istanbul ignore next */
cov_29znruqmwq().s[63]++;
exports.ErrorHandler = ErrorHandler;
// Convenience function for wrapping API handlers
function withErrorHandler(handler) {
  /* istanbul ignore next */
  cov_29znruqmwq().f[12]++;
  cov_29znruqmwq().s[64]++;
  return ErrorHandler.withErrorHandler(handler);
}
// Convenience functions for creating errors
/* istanbul ignore next */
cov_29znruqmwq().s[65]++;
exports.createOperationalError = ErrorHandler.createOperationalError;
/* istanbul ignore next */
cov_29znruqmwq().s[66]++;
exports.createProgrammingError = ErrorHandler.createProgrammingError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,