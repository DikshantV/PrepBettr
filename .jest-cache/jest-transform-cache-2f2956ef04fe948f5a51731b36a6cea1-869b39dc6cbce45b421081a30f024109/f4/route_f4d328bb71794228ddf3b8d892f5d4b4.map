{"version":3,"names":["cov_1lzx122niq","actualCoverage","s","exports","GET","server_1","require","firebase_user_service_1","f","console","log","healthResult","firebaseUserService","healthCheck","response","service","timestamp","Date","toISOString","status","healthy","b","details","NextResponse","json","headers","error","Error","message","firebaseAuth","firestore"],"sources":["/Users/dikshantvashistha/PrepBettr/app/api/health/firebase/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { firebaseUserService } from '@/lib/services/firebase-user-service';\n\nexport async function GET() {\n  try {\n    console.log('üè• Firebase health check requested');\n    \n    // Perform comprehensive health check\n    const healthResult = await firebaseUserService.healthCheck();\n    \n    const response = {\n      service: 'firebase',\n      timestamp: new Date().toISOString(),\n      status: healthResult.healthy ? 'healthy' : 'unhealthy',\n      details: healthResult.details\n    };\n    \n    console.log('üè• Firebase health check result:', response);\n    \n    return NextResponse.json(response, {\n      status: healthResult.healthy ? 200 : 503,\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-cache'\n      }\n    });\n    \n  } catch (error) {\n    console.error('‚ùå Firebase health check failed:', error);\n    \n    return NextResponse.json({\n      service: 'firebase',\n      timestamp: new Date().toISOString(),\n      status: 'error',\n      error: error instanceof Error ? error.message : 'Unknown error',\n      details: {\n        firebaseAuth: 'error',\n        firestore: 'error'\n      }\n    }, {\n      status: 503,\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-cache'\n      }\n    });\n  }\n}\n"],"mappings":"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","ignoreList":[]}