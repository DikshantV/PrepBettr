{"version":3,"names":["cov_bhl4ux58n","actualCoverage","coreAuth","s","require","withTelemetry","CORS_HEADERS","handleVerifyToken","context","req","f","log","idToken","b","body","authHeader","headers","authorization","Authorization","token","replace","createErrorResponse","result","verifyIdToken","success","user","uid","status","JSON","stringify","email","verified","verificationMethod","claims","email_verified","name","picture","iss","custom_claims","aud","auth_time","iat","exp","error","errorCode","handleSessionCookie","method","toUpperCase","expiresIn","createSessionCookie","sessionCookie","expiresAt","Date","now","toISOString","query","verifySessionCookie","handlePermissions","requiredPermissions","authResult","permissionsResult","checkPermissions","hasPermissions","permissions","userPermissions","roles","userRoles","handleCustomClaims","setCustomUserClaims","message","targetUserId","claimsSet","Object","keys","handleHealthCheck","health","healthCheck","getAuthStatus","healthData","timestamp","services","authentication","firebaseInitialized","adminAppsCount","telemetryEnabled","version","consolidatedEndpoints","unifiedAuthHandler","startTime","url","res","action","response","toLowerCase","duration","code","service","telemetryWrappedHandler","module","exports","handlers","utils"],"sources":["index.js"],"sourcesContent":["/**\n * Unified Authentication Azure Function\n * \n * Consolidates all Firebase authentication endpoints into a single HTTP trigger.\n * Replaces: verifyToken, verifyPermissions, verifySessionCookie, createSessionCookie\n * \n * Routes:\n * - POST /api/unifiedAuth?action=verify         → Token verification\n * - POST /api/unifiedAuth?action=session        → Session cookie creation/validation  \n * - POST /api/unifiedAuth?action=permissions    → Permission checking\n * - POST /api/unifiedAuth?action=claims         → Custom claims management (admin)\n * - GET  /api/unifiedAuth?action=status         → Health check\n * \n * @version 2.0.0\n * @author PrepBettr Platform Team\n */\n\nconst coreAuth = require('../shared/core-auth');\nconst { withTelemetry } = require('../shared/core-auth/telemetry');\n\n// ===== CORS CONFIGURATION =====\n\nconst CORS_HEADERS = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n  'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Functions-Key',\n  'Content-Type': 'application/json'\n};\n\n// ===== REQUEST HANDLERS =====\n\n/**\n * Handle token verification requests\n */\nasync function handleVerifyToken(context, req) {\n  context.log('Processing token verification request');\n  \n  try {\n    const { idToken } = req.body || {};\n    const authHeader = req.headers.authorization || req.headers.Authorization;\n    \n    // Get token from body or Authorization header\n    const token = idToken || (authHeader ? authHeader.replace('Bearer ', '') : null);\n    \n    if (!token) {\n      return createErrorResponse(400, 'No token provided', 'MISSING_TOKEN');\n    }\n    \n    const result = await coreAuth.verifyIdToken(token);\n    \n    if (result.success) {\n      context.log(`Token verified successfully for user: ${result.user.uid}`);\n      \n      // Return format matching Firebase Cloud Function response\n      return {\n        status: 200,\n        headers: CORS_HEADERS,\n        body: JSON.stringify({\n          success: true,\n          uid: result.user.uid,\n          email: result.user.email,\n          verified: true,\n          verificationMethod: result.verificationMethod,\n          claims: {\n            uid: result.user.uid,\n            email: result.user.email,\n            email_verified: result.user.email_verified,\n            name: result.user.name,\n            picture: result.user.picture,\n            iss: `https://securetoken.google.com/${result.user.custom_claims?.aud || 'unknown'}`,\n            aud: result.user.custom_claims?.aud || 'unknown',\n            auth_time: result.user.auth_time,\n            iat: result.user.iat,\n            exp: result.user.exp\n          }\n        })\n      };\n    } else {\n      context.log(`Token verification failed: ${result.error}`);\n      return createErrorResponse(401, result.error, result.errorCode);\n    }\n    \n  } catch (error) {\n    context.log.error('Token verification error:', error);\n    return createErrorResponse(500, 'Token verification failed', 'VERIFICATION_ERROR');\n  }\n}\n\n/**\n * Handle session cookie operations (creation and validation)\n */\nasync function handleSessionCookie(context, req) {\n  const method = req.method.toUpperCase();\n  context.log(`Processing session cookie ${method} request`);\n  \n  try {\n    if (method === 'POST') {\n      // Create session cookie\n      const { idToken, expiresIn } = req.body || {};\n      \n      if (!idToken) {\n        return createErrorResponse(400, 'ID token is required', 'MISSING_TOKEN');\n      }\n      \n      const result = await coreAuth.createSessionCookie(idToken, { expiresIn });\n      \n      if (result.success) {\n        context.log('Session cookie created successfully');\n        \n        return {\n          status: 200,\n          headers: CORS_HEADERS,\n          body: JSON.stringify({\n            success: true,\n            sessionCookie: result.sessionCookie,\n            expiresIn: result.expiresIn,\n            expiresAt: new Date(Date.now() + result.expiresIn).toISOString(),\n            method: 'azure-unified-auth'\n          })\n        };\n      } else {\n        context.log(`Session cookie creation failed: ${result.error}`);\n        return createErrorResponse(400, result.error, 'SESSION_CREATION_FAILED');\n      }\n      \n    } else if (method === 'GET') {\n      // Verify session cookie\n      const sessionCookie = req.query.sessionCookie || req.headers['x-session-cookie'];\n      \n      if (!sessionCookie) {\n        return createErrorResponse(400, 'Session cookie is required', 'MISSING_COOKIE');\n      }\n      \n      const result = await coreAuth.verifySessionCookie(sessionCookie);\n      \n      if (result.success) {\n        context.log(`Session cookie verified for user: ${result.user.uid}`);\n        \n        return {\n          status: 200,\n          headers: CORS_HEADERS,\n          body: JSON.stringify({\n            success: true,\n            uid: result.user.uid,\n            email: result.user.email,\n            verified: true,\n            verificationMethod: result.verificationMethod,\n            claims: result.user\n          })\n        };\n      } else {\n        context.log(`Session cookie verification failed: ${result.error}`);\n        return createErrorResponse(401, result.error, result.errorCode);\n      }\n    }\n    \n    return createErrorResponse(405, 'Method not allowed', 'METHOD_NOT_ALLOWED');\n    \n  } catch (error) {\n    context.log.error('Session cookie operation error:', error);\n    return createErrorResponse(500, 'Session operation failed', 'SESSION_ERROR');\n  }\n}\n\n/**\n * Handle permission checking requests\n */\nasync function handlePermissions(context, req) {\n  context.log('Processing permissions check request');\n  \n  try {\n    const authHeader = req.headers.authorization || req.headers.Authorization;\n    const { requiredPermissions = [] } = req.body || {};\n    \n    if (!authHeader) {\n      return createErrorResponse(400, 'Authorization header is required', 'MISSING_AUTH');\n    }\n    \n    const token = authHeader.replace('Bearer ', '');\n    \n    // First verify the token\n    const authResult = await coreAuth.verifyIdToken(token);\n    if (!authResult.success || !authResult.user) {\n      return createErrorResponse(401, authResult.error, authResult.errorCode);\n    }\n    \n    // Check permissions\n    const permissionsResult = await coreAuth.checkPermissions(authResult.user, requiredPermissions);\n    \n    context.log(`Permission check for user ${authResult.user.uid}: ${permissionsResult.hasPermissions ? 'GRANTED' : 'DENIED'}`);\n    \n    return {\n      status: 200,\n      headers: CORS_HEADERS,\n      body: JSON.stringify({\n        success: true,\n        hasPermissions: permissionsResult.hasPermissions,\n        permissions: permissionsResult.userPermissions,\n        roles: permissionsResult.userRoles,\n        uid: authResult.user.uid,\n        requiredPermissions: permissionsResult.requiredPermissions\n      })\n    };\n    \n  } catch (error) {\n    context.log.error('Permission check error:', error);\n    return createErrorResponse(500, 'Permission check failed', 'PERMISSION_ERROR');\n  }\n}\n\n/**\n * Handle custom claims management (admin only)\n */\nasync function handleCustomClaims(context, req) {\n  context.log('Processing custom claims request');\n  \n  try {\n    const authHeader = req.headers.authorization || req.headers.Authorization;\n    const { uid, claims } = req.body || {};\n    \n    if (!authHeader) {\n      return createErrorResponse(400, 'Authorization header is required', 'MISSING_AUTH');\n    }\n    \n    if (!uid || !claims) {\n      return createErrorResponse(400, 'UID and claims are required', 'MISSING_PARAMETERS');\n    }\n    \n    const token = authHeader.replace('Bearer ', '');\n    \n    // Verify admin token\n    const authResult = await coreAuth.verifyIdToken(token);\n    if (!authResult.success || !authResult.user) {\n      return createErrorResponse(401, authResult.error, authResult.errorCode);\n    }\n    \n    // Set custom claims (includes admin permission check)\n    const result = await coreAuth.setCustomUserClaims(authResult.user, uid, claims);\n    \n    if (result.success) {\n      context.log(`Custom claims set successfully for user: ${uid}`);\n      \n      return {\n        status: 200,\n        headers: CORS_HEADERS,\n        body: JSON.stringify({\n          success: true,\n          message: 'Custom claims set successfully',\n          targetUserId: uid,\n          claimsSet: Object.keys(claims)\n        })\n      };\n    } else {\n      context.log(`Custom claims failed: ${result.error}`);\n      return createErrorResponse(403, result.error, 'CLAIMS_UPDATE_FAILED');\n    }\n    \n  } catch (error) {\n    context.log.error('Custom claims error:', error);\n    return createErrorResponse(500, 'Custom claims operation failed', 'CLAIMS_ERROR');\n  }\n}\n\n/**\n * Handle health check requests\n */\nasync function handleHealthCheck(context, req) {\n  context.log('Processing health check request');\n  \n  try {\n    const health = await coreAuth.healthCheck();\n    const status = coreAuth.getAuthStatus();\n    \n    const healthData = {\n      status: health.status,\n      timestamp: new Date().toISOString(),\n      services: health.services,\n      authentication: {\n        firebaseInitialized: status.firebaseInitialized,\n        adminAppsCount: status.adminAppsCount,\n        telemetryEnabled: status.telemetryEnabled\n      },\n      version: '2.0.0',\n      consolidatedEndpoints: ['verify', 'session', 'permissions', 'claims']\n    };\n    \n    if (health.error) {\n      healthData.error = health.error;\n    }\n    \n    return {\n      status: health.status === 'healthy' ? 200 : 503,\n      headers: CORS_HEADERS,\n      body: JSON.stringify(healthData)\n    };\n    \n  } catch (error) {\n    context.log.error('Health check error:', error);\n    return createErrorResponse(500, 'Health check failed', 'HEALTH_CHECK_ERROR');\n  }\n}\n\n// ===== MAIN FUNCTION =====\n\n/**\n * Main Azure Function handler with route-based switching\n */\nasync function unifiedAuthHandler(context, req) {\n  const startTime = Date.now();\n  context.log(`Unified Auth Function - ${req.method} ${req.url}`);\n  \n  // Handle preflight requests\n  if (req.method === 'OPTIONS') {\n    context.res = {\n      status: 204,\n      headers: CORS_HEADERS,\n      body: ''\n    };\n    return;\n  }\n  \n  try {\n    const action = req.query.action || 'status';\n    let response;\n    \n    context.log(`Processing action: ${action}`);\n    \n    switch (action.toLowerCase()) {\n      case 'verify':\n        response = await handleVerifyToken(context, req);\n        break;\n        \n      case 'session':\n        response = await handleSessionCookie(context, req);\n        break;\n        \n      case 'permissions':\n        response = await handlePermissions(context, req);\n        break;\n        \n      case 'claims':\n        response = await handleCustomClaims(context, req);\n        break;\n        \n      case 'status':\n      case 'health':\n        response = await handleHealthCheck(context, req);\n        break;\n        \n      default:\n        response = createErrorResponse(400, `Unknown action: ${action}`, 'UNKNOWN_ACTION');\n    }\n    \n    const duration = Date.now() - startTime;\n    context.log(`Request completed in ${duration}ms - Status: ${response.status}`);\n    \n    context.res = response;\n    \n  } catch (error) {\n    const duration = Date.now() - startTime;\n    context.log.error(`Unified Auth Function error (${duration}ms):`, error);\n    \n    context.res = createErrorResponse(500, 'Internal server error', 'INTERNAL_ERROR');\n  }\n}\n\n// ===== UTILITY FUNCTIONS =====\n\n/**\n * Create standardized error response\n */\nfunction createErrorResponse(status, message, code) {\n  return {\n    status,\n    headers: CORS_HEADERS,\n    body: JSON.stringify({\n      success: false,\n      error: message,\n      code,\n      timestamp: new Date().toISOString(),\n      service: 'azure-unified-auth'\n    })\n  };\n}\n\n// ===== TELEMETRY WRAPPER =====\n\n// Wrap main handler with telemetry\nconst telemetryWrappedHandler = withTelemetry('unified-auth', unifiedAuthHandler);\n\n// ===== EXPORTS =====\n\nmodule.exports = telemetryWrappedHandler;\n\n// ===== BACKWARD COMPATIBILITY =====\n\n// For testing and development\nmodule.exports.handlers = {\n  handleVerifyToken,\n  handleSessionCookie,\n  handlePermissions,\n  handleCustomClaims,\n  handleHealthCheck\n};\n\nmodule.exports.utils = {\n  createErrorResponse,\n  CORS_HEADERS\n};\n"],"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","ignoreList":[]}