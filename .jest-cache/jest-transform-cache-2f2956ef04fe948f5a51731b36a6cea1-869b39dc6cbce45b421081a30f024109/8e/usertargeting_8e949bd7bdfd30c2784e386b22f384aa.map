{"version":3,"names":["cov_25mhbiova0","actualCoverage","s","client_1","require","UserTargetingService","getInstance","f","instance","b","hashUserId","userId","hash","i","length","char","charCodeAt","Math","abs","isUserInRollout","rolloutConfig","percentage","combinedString","featureName","userBucket","getCurrentUserId","_a","auth","currentUser","uid","isCurrentUserInRollout","fallbackId","getAnonymousUserFallback","anonymousId","localStorage","getItem","Date","now","random","toString","substr","setItem","getCurrentUserRolloutStatus","autoApplyAzure","ROLLOUT_CONFIGS","portalIntegration","voiceInterview","voiceInterviewV2","premiumFeatures","newUI","updateRolloutPercentage","Error","console","log","exports","userTargetingService"],"sources":["/Users/dikshantvashistha/PrepBettr/lib/services/user-targeting.ts"],"sourcesContent":["import { auth } from '@/firebase/client';\n\nexport interface RolloutConfig {\n  percentage: number; // 0-100, percentage of users to include\n  featureName: string;\n}\n\nexport class UserTargetingService {\n  private static instance: UserTargetingService;\n\n  static getInstance(): UserTargetingService {\n    if (!UserTargetingService.instance) {\n      UserTargetingService.instance = new UserTargetingService();\n    }\n    return UserTargetingService.instance;\n  }\n\n  /**\n   * Simple hash function to create a consistent hash from user ID\n   */\n  private hashUserId(userId: string): number {\n    let hash = 0;\n    for (let i = 0; i < userId.length; i++) {\n      const char = userId.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return Math.abs(hash);\n  }\n\n  /**\n   * Determines if a user should be included in a feature rollout\n   * Uses consistent hashing to ensure the same user always gets the same result\n   */\n  isUserInRollout(userId: string, rolloutConfig: RolloutConfig): boolean {\n    if (rolloutConfig.percentage <= 0) return false;\n    if (rolloutConfig.percentage >= 100) return true;\n\n    // Create a feature-specific hash by combining userId and feature name\n    const combinedString = `${userId}-${rolloutConfig.featureName}`;\n    const hash = this.hashUserId(combinedString);\n    \n    // Use modulo to get a consistent percentage (0-99)\n    const userBucket = hash % 100;\n    \n    return userBucket < rolloutConfig.percentage;\n  }\n\n  /**\n   * Get the current user's ID\n   */\n  getCurrentUserId(): string | null {\n    return auth?.currentUser?.uid || null;\n  }\n\n  /**\n   * Check if current user is in a specific feature rollout\n   */\n  isCurrentUserInRollout(rolloutConfig: RolloutConfig): boolean {\n    const userId = this.getCurrentUserId();\n    if (!userId) {\n      // For anonymous users, use a fallback (could be device ID, session ID, etc.)\n      const fallbackId = this.getAnonymousUserFallback();\n      return this.isUserInRollout(fallbackId, rolloutConfig);\n    }\n    \n    return this.isUserInRollout(userId, rolloutConfig);\n  }\n\n  /**\n   * Generate a fallback ID for anonymous users\n   * This could be based on device fingerprinting, localStorage, etc.\n   */\n  private getAnonymousUserFallback(): string {\n    // Try to get or create a persistent anonymous ID\n    let anonymousId = localStorage.getItem('prep_anonymous_id');\n    \n    if (!anonymousId) {\n      // Generate a new anonymous ID\n      anonymousId = `anon_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      localStorage.setItem('prep_anonymous_id', anonymousId);\n    }\n    \n    return anonymousId;\n  }\n\n  /**\n   * Predefined rollout configurations\n   */\n  static ROLLOUT_CONFIGS = {\n    autoApplyAzure: {\n      percentage: 5, // Start with 5% rollout\n      featureName: 'autoApplyAzure'\n    } as RolloutConfig,\n    \n    portalIntegration: {\n      percentage: 5, // Start with 5% rollout\n      featureName: 'portalIntegration'\n    } as RolloutConfig,\n    \n    voiceInterview: {\n      percentage: 10, // Start with 10% rollout\n      featureName: 'voiceInterview'\n    } as RolloutConfig,\n    \n    voiceInterviewV2: {\n      percentage: 100, // Full rollout for Azure AI Foundry voice system\n      featureName: 'voiceInterviewV2'\n    } as RolloutConfig,\n    \n    premiumFeatures: {\n      percentage: 15, // Start with 15% rollout\n      featureName: 'premiumFeatures'\n    } as RolloutConfig,\n    \n    newUI: {\n      percentage: 20, // Start with 20% rollout\n      featureName: 'newUI'\n    } as RolloutConfig,\n  };\n\n  /**\n   * Get all rollout statuses for the current user\n   */\n  getCurrentUserRolloutStatus(): Record<string, boolean> {\n    return {\n      autoApplyAzure: this.isCurrentUserInRollout(UserTargetingService.ROLLOUT_CONFIGS.autoApplyAzure),\n      portalIntegration: this.isCurrentUserInRollout(UserTargetingService.ROLLOUT_CONFIGS.portalIntegration),\n      voiceInterview: this.isCurrentUserInRollout(UserTargetingService.ROLLOUT_CONFIGS.voiceInterview),\n      voiceInterviewV2: this.isCurrentUserInRollout(UserTargetingService.ROLLOUT_CONFIGS.voiceInterviewV2),\n      premiumFeatures: this.isCurrentUserInRollout(UserTargetingService.ROLLOUT_CONFIGS.premiumFeatures),\n      newUI: this.isCurrentUserInRollout(UserTargetingService.ROLLOUT_CONFIGS.newUI),\n    };\n  }\n\n  /**\n   * Update rollout percentage for a feature (for admin/testing purposes)\n   */\n  static updateRolloutPercentage(featureName: keyof typeof UserTargetingService.ROLLOUT_CONFIGS, percentage: number): void {\n    if (percentage < 0 || percentage > 100) {\n      throw new Error('Rollout percentage must be between 0 and 100');\n    }\n    \n    UserTargetingService.ROLLOUT_CONFIGS[featureName].percentage = percentage;\n    console.log(`Updated ${featureName} rollout to ${percentage}%`);\n  }\n}\n\n// Export singleton instance\nexport const userTargetingService = UserTargetingService.getInstance();\n"],"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","ignoreList":[]}