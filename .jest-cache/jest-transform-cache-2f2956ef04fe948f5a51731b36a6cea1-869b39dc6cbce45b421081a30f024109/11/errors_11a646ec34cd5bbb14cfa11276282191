43391a106e5b3c9c7d4c1e2c6948d2f4
"use strict";
// lib/errors.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.NETWORK_FAILURE_MESSAGE = void 0;
exports.createErrorResponse = createErrorResponse;
exports.createApiErrorResponse = createApiErrorResponse;
exports.logServerError = logServerError;
exports.isRetryableError = isRetryableError;
exports.mapErrorToResponse = mapErrorToResponse;
exports.getUserFriendlyErrorMessage = getUserFriendlyErrorMessage;
/**
 * Creates a standardized error response
 */
function createErrorResponse(error, status) {
    return {
        error,
        status
    };
}
/**
 * Creates a NextResponse error for API routes
 */
function createApiErrorResponse(error, status) {
    // Import NextResponse dynamically to avoid module issues
    const { NextResponse } = require('next/server');
    return NextResponse.json({ error }, { status });
}
/**
 * Logs server errors with context but never exposes sensitive information
 */
function logServerError(error, context, additionalContext) {
    const errorMessage = error instanceof Error ? error.message : error;
    const errorStack = error instanceof Error ? error.stack : undefined;
    // Create safe logging context (no sensitive data)
    const safeContext = Object.assign({ timestamp: context.timestamp || new Date().toISOString(), url: context.url, method: context.method, userId: context.userId ? `user_${context.userId.slice(-8)}` : 'anonymous', userAgent: context.userAgent ? context.userAgent.slice(0, 100) : undefined, ip: context.ip ? context.ip.replace(/\d+$/, 'xxx') : undefined }, additionalContext);
    console.error('Server Error:', {
        message: errorMessage,
        context: safeContext,
        stack: errorStack
    });
    // In production, you might want to send this to a logging service
    // like DataDog, Sentry, etc.
    if (process.env.NODE_ENV === 'production') {
        // Example: Send to external logging service
        // logger.error(errorMessage, safeContext);
    }
}
/**
 * Determines if an error should be retried
 */
function isRetryableError(status) {
    // Retry for 5xx errors and specific 4xx errors
    return status >= 500 || status === 408 || status === 429;
}
/**
 * Maps common error types to standard error responses
 */
function mapErrorToResponse(error) {
    // Network/Connection errors
    if (error.name === 'AbortError' || error.code === 'ECONNABORTED') {
        return createErrorResponse('Request timeout. Please try again.', 408);
    }
    if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {
        return createErrorResponse('Network error. Please check your connection.', 503);
    }
    // Azure OpenAI specific errors
    if (error.status) {
        switch (error.status) {
            case 401:
                return createErrorResponse('Service authentication failed. Please try again later.', 500);
            case 429:
                return createErrorResponse('Service temporarily unavailable due to high demand. Please try again later.', 429);
            case 400:
                return createErrorResponse('Invalid request format. Please check your input.', 400);
            default:
                if (error.status >= 500) {
                    return createErrorResponse('Service temporarily unavailable. Please try again later.', 500);
                }
        }
    }
    // Generic API errors
    if (error.message) {
        if (error.message.includes('API key') || error.message.includes('credentials')) {
            return createErrorResponse('Service configuration error. Please contact support.', 500);
        }
        if (error.message.includes('quota') || error.message.includes('limit') || error.message.includes('rate')) {
            return createErrorResponse('Service temporarily unavailable due to usage limits. Please try again later.', 429);
        }
        if (error.message.includes('not initialized')) {
            return createErrorResponse('Service is not properly configured. Please contact support.', 500);
        }
    }
    // Default error response
    return createErrorResponse('An unexpected error occurred. Please try again.', 500);
}
/**
 * Standard fallback message for network failures
 */
exports.NETWORK_FAILURE_MESSAGE = "Could not fetch job description from the provided URL.";
/**
 * Gets user-friendly error message for frontend display
 */
function getUserFriendlyErrorMessage(error, context) {
    if (error === null || error === void 0 ? void 0 : error.error) {
        return error.error;
    }
    if (context === 'url_extraction') {
        return exports.NETWORK_FAILURE_MESSAGE;
    }
    if (error === null || error === void 0 ? void 0 : error.message) {
        // Don't expose internal error messages to users
        if (error.message.includes('API key') ||
            error.message.includes('credentials') ||
            error.message.includes('internal') ||
            error.message.includes('database')) {
            return 'Service temporarily unavailable. Please try again later.';
        }
        return error.message;
    }
    return 'An unexpected error occurred. Please try again.';
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,