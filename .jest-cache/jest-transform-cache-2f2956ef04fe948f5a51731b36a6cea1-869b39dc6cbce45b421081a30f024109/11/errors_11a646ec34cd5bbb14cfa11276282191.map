{"file":"/Users/dikshantvashistha/PrepBettr/lib/errors.ts","mappings":"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","names":[],"sources":["/Users/dikshantvashistha/PrepBettr/lib/errors.ts"],"sourcesContent":["// lib/errors.ts\n\nexport interface StandardErrorResponse {\n  error: string;\n  status: number;\n}\n\nexport interface ServerErrorContext {\n  userId?: string;\n  url?: string;\n  method?: string;\n  timestamp?: string;\n  userAgent?: string;\n  ip?: string;\n  service?: string;\n  action?: string;\n}\n\n/**\n * Creates a standardized error response\n */\nexport function createErrorResponse(\n  error: string,\n  status: number\n): StandardErrorResponse {\n  return {\n    error,\n    status\n  };\n}\n\n/**\n * Creates a NextResponse error for API routes\n */\nexport function createApiErrorResponse(\n  error: string,\n  status: number\n) {\n  // Import NextResponse dynamically to avoid module issues\n  const { NextResponse } = require('next/server');\n  return NextResponse.json({ error }, { status });\n}\n\n/**\n * Logs server errors with context but never exposes sensitive information\n */\nexport function logServerError(\n  error: Error | string,\n  context: ServerErrorContext,\n  additionalContext?: Record<string, any>\n): void {\n  const errorMessage = error instanceof Error ? error.message : error;\n  const errorStack = error instanceof Error ? error.stack : undefined;\n  \n  // Create safe logging context (no sensitive data)\n  const safeContext = {\n    timestamp: context.timestamp || new Date().toISOString(),\n    url: context.url,\n    method: context.method,\n    userId: context.userId ? `user_${context.userId.slice(-8)}` : 'anonymous', // Only last 8 chars for privacy\n    userAgent: context.userAgent ? context.userAgent.slice(0, 100) : undefined, // Truncate UA\n    ip: context.ip ? context.ip.replace(/\\d+$/, 'xxx') : undefined, // Mask last IP octet\n    ...additionalContext\n  };\n\n  console.error('Server Error:', {\n    message: errorMessage,\n    context: safeContext,\n    stack: errorStack\n  });\n\n  // In production, you might want to send this to a logging service\n  // like DataDog, Sentry, etc.\n  if (process.env.NODE_ENV === 'production') {\n    // Example: Send to external logging service\n    // logger.error(errorMessage, safeContext);\n  }\n}\n\n/**\n * Determines if an error should be retried\n */\nexport function isRetryableError(status: number): boolean {\n  // Retry for 5xx errors and specific 4xx errors\n  return status >= 500 || status === 408 || status === 429;\n}\n\n/**\n * Maps common error types to standard error responses\n */\nexport function mapErrorToResponse(error: any): StandardErrorResponse {\n  // Network/Connection errors\n  if (error.name === 'AbortError' || error.code === 'ECONNABORTED') {\n    return createErrorResponse('Request timeout. Please try again.', 408);\n  }\n  \n  if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {\n    return createErrorResponse('Network error. Please check your connection.', 503);\n  }\n\n  // Azure OpenAI specific errors\n  if (error.status) {\n    switch (error.status) {\n      case 401:\n        return createErrorResponse('Service authentication failed. Please try again later.', 500);\n      case 429:\n        return createErrorResponse('Service temporarily unavailable due to high demand. Please try again later.', 429);\n      case 400:\n        return createErrorResponse('Invalid request format. Please check your input.', 400);\n      default:\n        if (error.status >= 500) {\n          return createErrorResponse('Service temporarily unavailable. Please try again later.', 500);\n        }\n    }\n  }\n\n  // Generic API errors\n  if (error.message) {\n    if (error.message.includes('API key') || error.message.includes('credentials')) {\n      return createErrorResponse('Service configuration error. Please contact support.', 500);\n    }\n    if (error.message.includes('quota') || error.message.includes('limit') || error.message.includes('rate')) {\n      return createErrorResponse('Service temporarily unavailable due to usage limits. Please try again later.', 429);\n    }\n    if (error.message.includes('not initialized')) {\n      return createErrorResponse('Service is not properly configured. Please contact support.', 500);\n    }\n  }\n\n  // Default error response\n  return createErrorResponse('An unexpected error occurred. Please try again.', 500);\n}\n\n/**\n * Standard fallback message for network failures\n */\nexport const NETWORK_FAILURE_MESSAGE = \"Could not fetch job description from the provided URL.\";\n\n/**\n * Gets user-friendly error message for frontend display\n */\nexport function getUserFriendlyErrorMessage(error: any, context?: string): string {\n  if (error?.error) {\n    return error.error;\n  }\n  \n  if (context === 'url_extraction') {\n    return NETWORK_FAILURE_MESSAGE;\n  }\n  \n  if (error?.message) {\n    // Don't expose internal error messages to users\n    if (error.message.includes('API key') || \n        error.message.includes('credentials') ||\n        error.message.includes('internal') ||\n        error.message.includes('database')) {\n      return 'Service temporarily unavailable. Please try again later.';\n    }\n    return error.message;\n  }\n\n  return 'An unexpected error occurred. Please try again.';\n}\n"],"version":3}