30ed011b8564d53e705bbd00217752d2
"use strict";

/* istanbul ignore next */
function cov_14z54fbpee() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/clients/foundry-client.ts";
  var hash = "4e71675b0885f6b0bef053c2534706f10d46e572";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/clients/foundry-client.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 35
        }
      },
      "4": {
        start: {
          line: 7,
          column: 21
        },
        end: {
          line: 7,
          column: 59
        }
      },
      "5": {
        start: {
          line: 8,
          column: 19
        },
        end: {
          line: 8,
          column: 45
        }
      },
      "6": {
        start: {
          line: 9,
          column: 22
        },
        end: {
          line: 9,
          column: 51
        }
      },
      "7": {
        start: {
          line: 10,
          column: 20
        },
        end: {
          line: 10,
          column: 47
        }
      },
      "8": {
        start: {
          line: 11,
          column: 25
        },
        end: {
          line: 11,
          column: 60
        }
      },
      "9": {
        start: {
          line: 13,
          column: 17
        },
        end: {
          line: 13,
          column: 46
        }
      },
      "10": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 16,
          column: 1
        }
      },
      "11": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 15,
          column: 103
        }
      },
      "12": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 43
        }
      },
      "13": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 41
        }
      },
      "14": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 37
        }
      },
      "15": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 81
        }
      },
      "16": {
        start: {
          line: 34,
          column: 36
        },
        end: {
          line: 34,
          column: 92
        }
      },
      "17": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 37,
          column: 9
        }
      },
      "18": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 83
        }
      },
      "19": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 156
        }
      },
      "20": {
        start: {
          line: 49,
          column: 24
        },
        end: {
          line: 49,
          column: 63
        }
      },
      "21": {
        start: {
          line: 51,
          column: 31
        },
        end: {
          line: 51,
          column: 71
        }
      },
      "22": {
        start: {
          line: 52,
          column: 20
        },
        end: {
          line: 52,
          column: 106
        }
      },
      "23": {
        start: {
          line: 53,
          column: 31
        },
        end: {
          line: 53,
          column: 42
        }
      },
      "24": {
        start: {
          line: 54,
          column: 23
        },
        end: {
          line: 54,
          column: 46
        }
      },
      "25": {
        start: {
          line: 55,
          column: 24
        },
        end: {
          line: 55,
          column: 58
        }
      },
      "26": {
        start: {
          line: 56,
          column: 21
        },
        end: {
          line: 56,
          column: 76
        }
      },
      "27": {
        start: {
          line: 57,
          column: 22
        },
        end: {
          line: 57,
          column: 23
        }
      },
      "28": {
        start: {
          line: 58,
          column: 20
        },
        end: {
          line: 58,
          column: 53
        }
      },
      "29": {
        start: {
          line: 59,
          column: 22
        },
        end: {
          line: 59,
          column: 32
        }
      },
      "30": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 103,
          column: 9
        }
      },
      "31": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 102,
          column: 13
        }
      },
      "32": {
        start: {
          line: 62,
          column: 35
        },
        end: {
          line: 62,
          column: 56
        }
      },
      "33": {
        start: {
          line: 63,
          column: 32
        },
        end: {
          line: 63,
          column: 88
        }
      },
      "34": {
        start: {
          line: 63,
          column: 49
        },
        end: {
          line: 63,
          column: 67
        }
      },
      "35": {
        start: {
          line: 64,
          column: 28
        },
        end: {
          line: 70,
          column: 18
        }
      },
      "36": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 71,
          column: 38
        }
      },
      "37": {
        start: {
          line: 72,
          column: 28
        },
        end: {
          line: 72,
          column: 44
        }
      },
      "38": {
        start: {
          line: 73,
          column: 27
        },
        end: {
          line: 73,
          column: 31
        }
      },
      "39": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 79,
          column: 17
        }
      },
      "40": {
        start: {
          line: 75,
          column: 20
        },
        end: {
          line: 75,
          column: 56
        }
      },
      "41": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 84,
          column: 17
        }
      },
      "42": {
        start: {
          line: 81,
          column: 20
        },
        end: {
          line: 81,
          column: 30
        }
      },
      "43": {
        start: {
          line: 82,
          column: 20
        },
        end: {
          line: 82,
          column: 72
        }
      },
      "44": {
        start: {
          line: 83,
          column: 20
        },
        end: {
          line: 83,
          column: 29
        }
      },
      "45": {
        start: {
          line: 85,
          column: 16
        },
        end: {
          line: 85,
          column: 57
        }
      },
      "46": {
        start: {
          line: 89,
          column: 16
        },
        end: {
          line: 93,
          column: 17
        }
      },
      "47": {
        start: {
          line: 90,
          column: 20
        },
        end: {
          line: 90,
          column: 30
        }
      },
      "48": {
        start: {
          line: 91,
          column: 20
        },
        end: {
          line: 91,
          column: 72
        }
      },
      "49": {
        start: {
          line: 92,
          column: 20
        },
        end: {
          line: 92,
          column: 29
        }
      },
      "50": {
        start: {
          line: 94,
          column: 16
        },
        end: {
          line: 94,
          column: 150
        }
      },
      "51": {
        start: {
          line: 98,
          column: 32
        },
        end: {
          line: 98,
          column: 50
        }
      },
      "52": {
        start: {
          line: 99,
          column: 16
        },
        end: {
          line: 101,
          column: 17
        }
      },
      "53": {
        start: {
          line: 100,
          column: 20
        },
        end: {
          line: 100,
          column: 100
        }
      },
      "54": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 68
        }
      },
      "55": {
        start: {
          line: 115,
          column: 65
        },
        end: {
          line: 115,
          column: 81
        }
      },
      "56": {
        start: {
          line: 116,
          column: 22
        },
        end: {
          line: 116,
          column: 92
        }
      },
      "57": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 117,
          column: 66
        }
      },
      "58": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 120,
          column: 65
        }
      },
      "59": {
        start: {
          line: 120,
          column: 40
        },
        end: {
          line: 120,
          column: 63
        }
      },
      "60": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 127,
          column: 30
        }
      },
      "61": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 30
        }
      },
      "62": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 136,
          column: 9
        }
      },
      "63": {
        start: {
          line: 129,
          column: 24
        },
        end: {
          line: 129,
          column: 66
        }
      },
      "64": {
        start: {
          line: 131,
          column: 23
        },
        end: {
          line: 131,
          column: 39
        }
      },
      "65": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 46
        }
      },
      "66": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 112
        }
      },
      "67": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 86
        }
      },
      "68": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 155,
          column: 9
        }
      },
      "69": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 84
        }
      },
      "70": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 182,
          column: 9
        }
      },
      "71": {
        start: {
          line: 157,
          column: 31
        },
        end: {
          line: 157,
          column: 70
        }
      },
      "72": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 158,
          column: 97
        }
      },
      "73": {
        start: {
          line: 159,
          column: 27
        },
        end: {
          line: 175,
          column: 14
        }
      },
      "74": {
        start: {
          line: 164,
          column: 58
        },
        end: {
          line: 164,
          column: 97
        }
      },
      "75": {
        start: {
          line: 165,
          column: 32
        },
        end: {
          line: 165,
          column: 104
        }
      },
      "76": {
        start: {
          line: 166,
          column: 32
        },
        end: {
          line: 166,
          column: 53
        }
      },
      "77": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 176,
          column: 75
        }
      },
      "78": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 26
        }
      },
      "79": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 81
        }
      },
      "80": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 24
        }
      },
      "81": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 190,
          column: 9
        }
      },
      "82": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 82
        }
      },
      "83": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 220,
          column: 9
        }
      },
      "84": {
        start: {
          line: 192,
          column: 31
        },
        end: {
          line: 192,
          column: 70
        }
      },
      "85": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 95
        }
      },
      "86": {
        start: {
          line: 194,
          column: 27
        },
        end: {
          line: 213,
          column: 14
        }
      },
      "87": {
        start: {
          line: 199,
          column: 58
        },
        end: {
          line: 199,
          column: 97
        }
      },
      "88": {
        start: {
          line: 200,
          column: 32
        },
        end: {
          line: 200,
          column: 110
        }
      },
      "89": {
        start: {
          line: 201,
          column: 32
        },
        end: {
          line: 203,
          column: 33
        }
      },
      "90": {
        start: {
          line: 202,
          column: 36
        },
        end: {
          line: 202,
          column: 90
        }
      },
      "91": {
        start: {
          line: 204,
          column: 32
        },
        end: {
          line: 204,
          column: 53
        }
      },
      "92": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 214,
          column: 73
        }
      },
      "93": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 26
        }
      },
      "94": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 218,
          column: 79
        }
      },
      "95": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 24
        }
      },
      "96": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 228,
          column: 9
        }
      },
      "97": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 79
        }
      },
      "98": {
        start: {
          line: 229,
          column: 23
        },
        end: {
          line: 229,
          column: 81
        }
      },
      "99": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 235,
          column: 9
        }
      },
      "100": {
        start: {
          line: 232,
          column: 12
        },
        end: {
          line: 232,
          column: 80
        }
      },
      "101": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 76
        }
      },
      "102": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 62
        }
      },
      "103": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 236,
          column: 43
        }
      },
      "104": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 244,
          column: 9
        }
      },
      "105": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 243,
          column: 77
        }
      },
      "106": {
        start: {
          line: 245,
          column: 23
        },
        end: {
          line: 245,
          column: 81
        }
      },
      "107": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 251,
          column: 9
        }
      },
      "108": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 248,
          column: 78
        }
      },
      "109": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 249,
          column: 72
        }
      },
      "110": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 62
        }
      },
      "111": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 252,
          column: 41
        }
      },
      "112": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 261,
          column: 9
        }
      },
      "113": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 259,
          column: 77
        }
      },
      "114": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 260,
          column: 25
        }
      },
      "115": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 272,
          column: 9
        }
      },
      "116": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 69
        }
      },
      "117": {
        start: {
          line: 264,
          column: 27
        },
        end: {
          line: 264,
          column: 57
        }
      },
      "118": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 266,
          column: 73
        }
      },
      "119": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 267,
          column: 24
        }
      },
      "120": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 270,
          column: 79
        }
      },
      "121": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 271,
          column: 25
        }
      },
      "122": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 279,
          column: 19
        }
      },
      "123": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 279,
          column: 19
        }
      },
      "124": {
        start: {
          line: 280,
          column: 8
        },
        end: {
          line: 280,
          column: 72
        }
      },
      "125": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 281,
          column: 43
        }
      },
      "126": {
        start: {
          line: 282,
          column: 8
        },
        end: {
          line: 282,
          column: 41
        }
      },
      "127": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 283,
          column: 37
        }
      },
      "128": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 292,
          column: 9
        }
      },
      "129": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 290,
          column: 75
        }
      },
      "130": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 291,
          column: 24
        }
      },
      "131": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 299,
          column: 9
        }
      },
      "132": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 294,
          column: 66
        }
      },
      "133": {
        start: {
          line: 297,
          column: 12
        },
        end: {
          line: 297,
          column: 83
        }
      },
      "134": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 298,
          column: 24
        }
      },
      "135": {
        start: {
          line: 302,
          column: 0
        },
        end: {
          line: 302,
          column: 46
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 18
          },
          end: {
            line: 28,
            column: 5
          }
        },
        line: 24
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        },
        loc: {
          start: {
            line: 32,
            column: 37
          },
          end: {
            line: 38,
            column: 5
          }
        },
        line: 32
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        },
        loc: {
          start: {
            line: 42,
            column: 24
          },
          end: {
            line: 44,
            column: 5
          }
        },
        line: 42
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        },
        loc: {
          start: {
            line: 48,
            column: 38
          },
          end: {
            line: 104,
            column: 5
          }
        },
        line: 48
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 63,
            column: 43
          },
          end: {
            line: 63,
            column: 44
          }
        },
        loc: {
          start: {
            line: 63,
            column: 49
          },
          end: {
            line: 63,
            column: 67
          }
        },
        line: 63
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 108,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        },
        loc: {
          start: {
            line: 108,
            column: 24
          },
          end: {
            line: 110,
            column: 5
          }
        },
        line: 108
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 114,
            column: 4
          },
          end: {
            line: 114,
            column: 5
          }
        },
        loc: {
          start: {
            line: 114,
            column: 27
          },
          end: {
            line: 118,
            column: 5
          }
        },
        line: 114
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 119,
            column: 5
          }
        },
        loc: {
          start: {
            line: 119,
            column: 14
          },
          end: {
            line: 121,
            column: 5
          }
        },
        line: 119
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 120,
            column: 27
          },
          end: {
            line: 120,
            column: 28
          }
        },
        loc: {
          start: {
            line: 120,
            column: 40
          },
          end: {
            line: 120,
            column: 63
          }
        },
        line: 120
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 125,
            column: 4
          },
          end: {
            line: 125,
            column: 5
          }
        },
        loc: {
          start: {
            line: 125,
            column: 31
          },
          end: {
            line: 137,
            column: 5
          }
        },
        line: 125
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 143,
            column: 4
          },
          end: {
            line: 143,
            column: 5
          }
        },
        loc: {
          start: {
            line: 143,
            column: 54
          },
          end: {
            line: 145,
            column: 5
          }
        },
        line: 143
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 152,
            column: 4
          },
          end: {
            line: 152,
            column: 5
          }
        },
        loc: {
          start: {
            line: 152,
            column: 33
          },
          end: {
            line: 183,
            column: 5
          }
        },
        line: 152
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 163,
            column: 41
          },
          end: {
            line: 163,
            column: 42
          }
        },
        loc: {
          start: {
            line: 163,
            column: 66
          },
          end: {
            line: 167,
            column: 29
          }
        },
        line: 163
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 187,
            column: 4
          },
          end: {
            line: 187,
            column: 5
          }
        },
        loc: {
          start: {
            line: 187,
            column: 31
          },
          end: {
            line: 221,
            column: 5
          }
        },
        line: 187
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 198,
            column: 41
          },
          end: {
            line: 198,
            column: 42
          }
        },
        loc: {
          start: {
            line: 198,
            column: 66
          },
          end: {
            line: 205,
            column: 29
          }
        },
        line: 198
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 225,
            column: 4
          },
          end: {
            line: 225,
            column: 5
          }
        },
        loc: {
          start: {
            line: 225,
            column: 50
          },
          end: {
            line: 237,
            column: 5
          }
        },
        line: 225
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 241,
            column: 4
          },
          end: {
            line: 241,
            column: 5
          }
        },
        loc: {
          start: {
            line: 241,
            column: 48
          },
          end: {
            line: 253,
            column: 5
          }
        },
        line: 241
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 257,
            column: 4
          },
          end: {
            line: 257,
            column: 5
          }
        },
        loc: {
          start: {
            line: 257,
            column: 34
          },
          end: {
            line: 273,
            column: 5
          }
        },
        line: 257
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 277,
            column: 4
          },
          end: {
            line: 277,
            column: 5
          }
        },
        loc: {
          start: {
            line: 277,
            column: 26
          },
          end: {
            line: 284,
            column: 5
          }
        },
        line: 277
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 288,
            column: 4
          },
          end: {
            line: 288,
            column: 5
          }
        },
        loc: {
          start: {
            line: 288,
            column: 36
          },
          end: {
            line: 300,
            column: 5
          }
        },
        line: 288
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 14,
            column: 0
          },
          end: {
            line: 16,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 14,
            column: 0
          },
          end: {
            line: 16,
            column: 1
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 14
      },
      "4": {
        loc: {
          start: {
            line: 32,
            column: 15
          },
          end: {
            line: 32,
            column: 35
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 32,
            column: 30
          },
          end: {
            line: 32,
            column: 35
          }
        }],
        line: 32
      },
      "5": {
        loc: {
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 37,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 37,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "6": {
        loc: {
          start: {
            line: 43,
            column: 142
          },
          end: {
            line: 43,
            column: 153
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 43,
            column: 142
          },
          end: {
            line: 43,
            column: 147
          }
        }, {
          start: {
            line: 43,
            column: 151
          },
          end: {
            line: 43,
            column: 153
          }
        }],
        line: 43
      },
      "7": {
        loc: {
          start: {
            line: 48,
            column: 24
          },
          end: {
            line: 48,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 48,
            column: 34
          },
          end: {
            line: 48,
            column: 36
          }
        }],
        line: 48
      },
      "8": {
        loc: {
          start: {
            line: 51,
            column: 31
          },
          end: {
            line: 51,
            column: 71
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 51,
            column: 54
          },
          end: {
            line: 51,
            column: 58
          }
        }, {
          start: {
            line: 51,
            column: 61
          },
          end: {
            line: 51,
            column: 71
          }
        }],
        line: 51
      },
      "9": {
        loc: {
          start: {
            line: 54,
            column: 23
          },
          end: {
            line: 54,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 54,
            column: 23
          },
          end: {
            line: 54,
            column: 37
          }
        }, {
          start: {
            line: 54,
            column: 41
          },
          end: {
            line: 54,
            column: 46
          }
        }],
        line: 54
      },
      "10": {
        loc: {
          start: {
            line: 56,
            column: 21
          },
          end: {
            line: 56,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 56,
            column: 36
          },
          end: {
            line: 56,
            column: 64
          }
        }, {
          start: {
            line: 56,
            column: 67
          },
          end: {
            line: 56,
            column: 76
          }
        }],
        line: 56
      },
      "11": {
        loc: {
          start: {
            line: 75,
            column: 27
          },
          end: {
            line: 75,
            column: 55
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 75,
            column: 33
          },
          end: {
            line: 75,
            column: 48
          }
        }, {
          start: {
            line: 75,
            column: 51
          },
          end: {
            line: 75,
            column: 55
          }
        }],
        line: 75
      },
      "12": {
        loc: {
          start: {
            line: 80,
            column: 16
          },
          end: {
            line: 84,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 16
          },
          end: {
            line: 84,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "13": {
        loc: {
          start: {
            line: 80,
            column: 20
          },
          end: {
            line: 80,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 80,
            column: 20
          },
          end: {
            line: 80,
            column: 27
          }
        }, {
          start: {
            line: 80,
            column: 31
          },
          end: {
            line: 80,
            column: 59
          }
        }, {
          start: {
            line: 80,
            column: 63
          },
          end: {
            line: 80,
            column: 76
          }
        }],
        line: 80
      },
      "14": {
        loc: {
          start: {
            line: 89,
            column: 16
          },
          end: {
            line: 93,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 16
          },
          end: {
            line: 93,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "15": {
        loc: {
          start: {
            line: 94,
            column: 84
          },
          end: {
            line: 94,
            column: 146
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 94,
            column: 85
          },
          end: {
            line: 94,
            column: 138
          }
        }, {
          start: {
            line: 94,
            column: 143
          },
          end: {
            line: 94,
            column: 146
          }
        }],
        line: 94
      },
      "16": {
        loc: {
          start: {
            line: 94,
            column: 85
          },
          end: {
            line: 94,
            column: 138
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 94,
            column: 118
          },
          end: {
            line: 94,
            column: 124
          }
        }, {
          start: {
            line: 94,
            column: 127
          },
          end: {
            line: 94,
            column: 138
          }
        }],
        line: 94
      },
      "17": {
        loc: {
          start: {
            line: 94,
            column: 85
          },
          end: {
            line: 94,
            column: 115
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 94,
            column: 85
          },
          end: {
            line: 94,
            column: 97
          }
        }, {
          start: {
            line: 94,
            column: 101
          },
          end: {
            line: 94,
            column: 115
          }
        }],
        line: 94
      },
      "18": {
        loc: {
          start: {
            line: 99,
            column: 16
          },
          end: {
            line: 101,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 16
          },
          end: {
            line: 101,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "19": {
        loc: {
          start: {
            line: 117,
            column: 15
          },
          end: {
            line: 117,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 117,
            column: 24
          },
          end: {
            line: 117,
            column: 57
          }
        }, {
          start: {
            line: 117,
            column: 60
          },
          end: {
            line: 117,
            column: 65
          }
        }],
        line: 117
      },
      "20": {
        loc: {
          start: {
            line: 126,
            column: 8
          },
          end: {
            line: 127,
            column: 30
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 8
          },
          end: {
            line: 127,
            column: 30
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 126
      },
      "21": {
        loc: {
          start: {
            line: 135,
            column: 39
          },
          end: {
            line: 135,
            column: 109
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 135,
            column: 40
          },
          end: {
            line: 135,
            column: 93
          }
        }, {
          start: {
            line: 135,
            column: 98
          },
          end: {
            line: 135,
            column: 109
          }
        }],
        line: 135
      },
      "22": {
        loc: {
          start: {
            line: 135,
            column: 40
          },
          end: {
            line: 135,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 135,
            column: 73
          },
          end: {
            line: 135,
            column: 79
          }
        }, {
          start: {
            line: 135,
            column: 82
          },
          end: {
            line: 135,
            column: 93
          }
        }],
        line: 135
      },
      "23": {
        loc: {
          start: {
            line: 135,
            column: 40
          },
          end: {
            line: 135,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 135,
            column: 40
          },
          end: {
            line: 135,
            column: 52
          }
        }, {
          start: {
            line: 135,
            column: 56
          },
          end: {
            line: 135,
            column: 70
          }
        }],
        line: 135
      },
      "24": {
        loc: {
          start: {
            line: 143,
            column: 32
          },
          end: {
            line: 143,
            column: 52
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 143,
            column: 44
          },
          end: {
            line: 143,
            column: 52
          }
        }],
        line: 143
      },
      "25": {
        loc: {
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 153
      },
      "26": {
        loc: {
          start: {
            line: 164,
            column: 58
          },
          end: {
            line: 164,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 164,
            column: 58
          },
          end: {
            line: 164,
            column: 91
          }
        }, {
          start: {
            line: 164,
            column: 95
          },
          end: {
            line: 164,
            column: 97
          }
        }],
        line: 164
      },
      "27": {
        loc: {
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 188
      },
      "28": {
        loc: {
          start: {
            line: 199,
            column: 58
          },
          end: {
            line: 199,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 199,
            column: 58
          },
          end: {
            line: 199,
            column: 91
          }
        }, {
          start: {
            line: 199,
            column: 95
          },
          end: {
            line: 199,
            column: 97
          }
        }],
        line: 199
      },
      "29": {
        loc: {
          start: {
            line: 201,
            column: 32
          },
          end: {
            line: 203,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 32
          },
          end: {
            line: 203,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 201
      },
      "30": {
        loc: {
          start: {
            line: 225,
            column: 28
          },
          end: {
            line: 225,
            column: 48
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 225,
            column: 43
          },
          end: {
            line: 225,
            column: 48
          }
        }],
        line: 225
      },
      "31": {
        loc: {
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 228,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 228,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 226
      },
      "32": {
        loc: {
          start: {
            line: 230,
            column: 8
          },
          end: {
            line: 235,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 230,
            column: 8
          },
          end: {
            line: 235,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 230
      },
      "33": {
        loc: {
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 231,
            column: 112
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 230,
            column: 24
          }
        }, {
          start: {
            line: 230,
            column: 28
          },
          end: {
            line: 230,
            column: 56
          }
        }, {
          start: {
            line: 230,
            column: 60
          },
          end: {
            line: 230,
            column: 82
          }
        }, {
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 231,
            column: 62
          }
        }, {
          start: {
            line: 231,
            column: 66
          },
          end: {
            line: 231,
            column: 112
          }
        }],
        line: 230
      },
      "34": {
        loc: {
          start: {
            line: 241,
            column: 26
          },
          end: {
            line: 241,
            column: 46
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 241,
            column: 41
          },
          end: {
            line: 241,
            column: 46
          }
        }],
        line: 241
      },
      "35": {
        loc: {
          start: {
            line: 242,
            column: 8
          },
          end: {
            line: 244,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 242,
            column: 8
          },
          end: {
            line: 244,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 242
      },
      "36": {
        loc: {
          start: {
            line: 246,
            column: 8
          },
          end: {
            line: 251,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 246,
            column: 8
          },
          end: {
            line: 251,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 246
      },
      "37": {
        loc: {
          start: {
            line: 246,
            column: 12
          },
          end: {
            line: 247,
            column: 112
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 246,
            column: 12
          },
          end: {
            line: 246,
            column: 24
          }
        }, {
          start: {
            line: 246,
            column: 28
          },
          end: {
            line: 246,
            column: 54
          }
        }, {
          start: {
            line: 246,
            column: 58
          },
          end: {
            line: 246,
            column: 80
          }
        }, {
          start: {
            line: 247,
            column: 12
          },
          end: {
            line: 247,
            column: 62
          }
        }, {
          start: {
            line: 247,
            column: 66
          },
          end: {
            line: 247,
            column: 112
          }
        }],
        line: 246
      },
      "38": {
        loc: {
          start: {
            line: 258,
            column: 8
          },
          end: {
            line: 261,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 258,
            column: 8
          },
          end: {
            line: 261,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 258
      },
      "39": {
        loc: {
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 279,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 279,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 278
      },
      "40": {
        loc: {
          start: {
            line: 289,
            column: 8
          },
          end: {
            line: 292,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 289,
            column: 8
          },
          end: {
            line: 292,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 289
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0, 0, 0, 0],
      "34": [0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0, 0, 0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/clients/foundry-client.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/clients/foundry-client.ts"],
      sourcesContent: ["import fetch from 'node-fetch';\nimport { DefaultAzureCredential } from '@azure/identity';\nimport { type TokenCredential } from '@azure/core-auth';\nimport { AIProjectClient } from '@azure/ai-projects';\nimport { AgentsClient } from '@azure/ai-agents';\nimport {\n  getFoundryConfig,\n  validateFoundryConfig,\n  type FoundryConfig,\n  type ConnectionSettings,\n} from '../config/foundry-config';\n\n// Client-side safety check\nconst isClient = typeof window !== 'undefined';\n\nif (isClient) {\n  console.warn('[Azure AI Foundry Client] Running on client side - clients will not be initialized');\n}\n\n/**\n * Unified Azure AI Foundry Client\n * \n * Combines HTTP request functionality with Azure SDK client factories.\n * Provides both low-level request() method and high-level SDK helpers.\n */\nexport class FoundryClientBase {\n  protected config!: FoundryConfig;\n  private projectsClientInstance: AIProjectClient | null = null;\n  private agentsClientInstance: AgentsClient | null = null;\n  private currentSdkConfig: FoundryConfig | null = null;\n\n  constructor() {}\n\n  /**\n   * Initialize configuration\n   */\n  async init(forceRefresh = false): Promise<void> {\n    this.config = await getFoundryConfig(forceRefresh);\n    const { isValid, errors } = validateFoundryConfig(this.config);\n    if (!isValid) {\n      throw new Error(`Invalid Foundry configuration: ${errors.join(', ')}`);\n    }\n  }\n\n  /**\n   * Build default headers with API key\n   */\n  protected buildHeaders(extra?: Record<string, string>): Record<string, string> {\n    return {\n      'Content-Type': 'application/json',\n      'api-key': this.config.apiKey, // Azure AI Foundry uses 'api-key' header\n      'User-Agent': 'PrepBettr/FoundryClient',\n      ...(extra || {}),\n    };\n  }\n\n  /**\n   * Core request helper with retry logic based on connection settings\n   */\n  public async request<T = any>(\n    path: string,\n    options: { method?: string; body?: any; headers?: Record<string, string> } = {}\n  ): Promise<{ status: number; data: T | null; raw: string }> {\n    const baseUrl = this.config.endpoint.replace(/\\/$/, '');\n    // Azure AI Foundry uses openai/deployments/{deployment-name} format\n    const normalizedPath = path.startsWith('/') ? path : `/${path}`;\n    const url = `${baseUrl}/openai/deployments/gpt-4o${normalizedPath}?api-version=2024-02-15-preview`;\n    const { connection } = this.config;\n\n    const method = options.method || 'GET';\n    const headers = this.buildHeaders(options.headers);\n    const body = options.body ? JSON.stringify(options.body) : undefined;\n\n    let attempt = 0;\n    const max = connection.retryPolicy.maxRetries;\n    const start = Date.now();\n\n    while (true) {\n      try {\n        const controller = new AbortController();\n        const timeout = setTimeout(() => controller.abort(), connection.timeout);\n\n        const res = await fetch(url, {\n          method,\n          headers,\n          body,\n          // @ts-ignore node-fetch v2 compatibility\n          signal: controller.signal,\n        } as any);\n\n        clearTimeout(timeout);\n\n        const raw = await res.text();\n        let data: any = null;\n        try {\n          data = raw ? JSON.parse(raw) : null;\n        } catch {\n          // non-JSON response\n        }\n\n        if (!res.ok && this.shouldRetry(res.status) && attempt < max) {\n          attempt++;\n          await this.delay(this.backoff(attempt, connection));\n          continue;\n        }\n\n        return { status: res.status, data, raw };\n      } catch (err: any) {\n        // AbortError / network errors\n        if (attempt < max) {\n          attempt++;\n          await this.delay(this.backoff(attempt, connection));\n          continue;\n        }\n        throw new Error(`Foundry request failed after ${attempt} retries: ${err?.message || err}`);\n      } finally {\n        // Optional: log slow requests\n        const elapsed = Date.now() - start;\n        if (elapsed > Math.max(2000, this.config.connection.timeout)) {\n           \n          console.warn(`[FoundryClient] Slow request ${method} ${url} took ${elapsed}ms`);\n        }\n      }\n    }\n  }\n\n  /**\n   * Basic retry policy on transient status codes\n   */\n  protected shouldRetry(status: number): boolean {\n    return [408, 409, 429, 500, 502, 503, 504].includes(status);\n  }\n\n  /**\n   * Exponential backoff with optional jitter\n   */\n  protected backoff(attempt: number, conn: ConnectionSettings): number {\n    const { baseDelay, maxDelay, exponentialBase, jitter } = conn.retryPolicy;\n    const delay = Math.min(maxDelay, baseDelay * Math.pow(exponentialBase, attempt - 1));\n    return jitter ? Math.floor(Math.random() * delay) : delay;\n    }\n\n  protected delay(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Validate connectivity to Foundry endpoint\n   */\n  async validateConnection(): Promise<{ ok: boolean; status?: number; error?: string }>\n  {\n    if (!this.config) await this.init();\n    try {\n      const res = await this.request('/', { method: 'GET' });\n      // Root might be 404 but still proves connectivity\n      const ok = res.status < 500;\n      return { ok, status: res.status };\n    } catch (err: any) {\n      return { ok: false, error: err?.message || String(err) };\n    }\n  }\n\n  /**\n   * Placeholder for text completion call via model inference.\n   * Implement with specific Foundry Inference API once finalized.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async completeText(_prompt: string, _modelKey = 'gpt-4o'): Promise<string> {\n    throw new Error('completeText not implemented yet for Foundry Inference API');\n  }\n\n  /**\n   * Azure SDK Client Methods\n   */\n\n  /**\n   * Create Azure AI Projects client with proper authentication\n   */\n  private createProjectsClient(config: FoundryConfig): AIProjectClient {\n    if (isClient) {\n      throw new Error('Projects client cannot be initialized on client side');\n    }\n\n    try {\n      const credential: TokenCredential = new DefaultAzureCredential();\n      console.log(`\uD83D\uDD27 Creating Azure AI Projects client for endpoint: ${config.endpoint}`);\n      \n      const client = new AIProjectClient(config.endpoint, credential, {\n        additionalPolicies: [{\n          policy: {\n            name: 'PrepBettrUserAgent',\n            sendRequest: async (request: any, next: any) => {\n              const existingUserAgent = request.headers.get('User-Agent') || '';\n              request.headers.set('User-Agent', `PrepBettr/1.0 ${existingUserAgent}`);\n              return next(request);\n            }\n          },\n          position: 'perCall'\n        }],\n        retryOptions: {\n          maxRetries: 3,\n          retryDelayInMs: 1000\n        }\n      });\n\n      console.log('\u2705 Azure AI Projects client created successfully');\n      return client;\n\n    } catch (error) {\n      console.error('\u274C Failed to create Azure AI Projects client:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create Azure AI Agents client with proper authentication\n   */\n  private createAgentsClient(config: FoundryConfig): AgentsClient {\n    if (isClient) {\n      throw new Error('Agents client cannot be initialized on client side');\n    }\n\n    try {\n      const credential: TokenCredential = new DefaultAzureCredential();\n      console.log(`\uD83E\uDD16 Creating Azure AI Agents client for project: ${config.projectId}`);\n      \n      const client = new AgentsClient(config.endpoint, credential, {\n        additionalPolicies: [{\n          policy: {\n            name: 'PrepBettrAgentUserAgent',\n            sendRequest: async (request: any, next: any) => {\n              const existingUserAgent = request.headers.get('User-Agent') || '';\n              request.headers.set('User-Agent', `PrepBettr-Agent/1.0 ${existingUserAgent}`);\n              \n              if (config.projectId) {\n                request.headers.set('X-Project-Id', config.projectId);\n              }\n              \n              return next(request);\n            }\n          },\n          position: 'perCall'\n        }],\n        retryOptions: {\n          maxRetries: 3,\n          retryDelayInMs: 1000\n        }\n      });\n\n      console.log('\u2705 Azure AI Agents client created successfully');\n      return client;\n\n    } catch (error) {\n      console.error('\u274C Failed to create Azure AI Agents client:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get or create Azure AI Projects client (singleton pattern)\n   */\n  async getProjectsClient(forceRefresh: boolean = false): Promise<AIProjectClient> {\n    if (isClient) {\n      throw new Error('Projects client is not available on client side');\n    }\n\n    const config = await getFoundryConfig(forceRefresh);\n    \n    if (forceRefresh || !this.projectsClientInstance || !this.currentSdkConfig || \n        this.currentSdkConfig.endpoint !== config.endpoint || this.currentSdkConfig.apiKey !== config.apiKey) {\n      \n      console.log('\uD83D\uDD04 Creating new Azure AI Projects client instance...');\n      this.projectsClientInstance = this.createProjectsClient(config);\n      this.currentSdkConfig = { ...config };\n    }\n\n    return this.projectsClientInstance;\n  }\n\n  /**\n   * Get or create Azure AI Agents client (singleton pattern)\n   */\n  async getAgentsClient(forceRefresh: boolean = false): Promise<AgentsClient> {\n    if (isClient) {\n      throw new Error('Agents client is not available on client side');\n    }\n\n    const config = await getFoundryConfig(forceRefresh);\n    \n    if (forceRefresh || !this.agentsClientInstance || !this.currentSdkConfig || \n        this.currentSdkConfig.endpoint !== config.endpoint || this.currentSdkConfig.apiKey !== config.apiKey) {\n      \n      console.log('\uD83D\uDD04 Creating new Azure AI Agents client instance...');\n      this.agentsClientInstance = this.createAgentsClient(config);\n      this.currentSdkConfig = { ...config };\n    }\n\n    return this.agentsClientInstance;\n  }\n\n  /**\n   * Test connection to Azure AI Foundry services\n   */\n  async testFoundryConnection(): Promise<boolean> {\n    if (isClient) {\n      console.warn('\u26A0\uFE0F Cannot test foundry connection on client side');\n      return false;\n    }\n\n    try {\n      console.log('\uD83D\uDD0D Testing Azure AI Foundry connection...');\n      const client = await this.getProjectsClient();\n      \n      // TODO: Add actual connection test based on Azure AI Projects SDK\n      console.log('\u2705 Azure AI Foundry connection test successful');\n      return true;\n\n    } catch (error) {\n      console.error('\u274C Azure AI Foundry connection test failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Clear SDK client instances (useful for testing or configuration updates)\n   */\n  clearFoundryClients(): void {\n    if (isClient) return;\n    \n    console.log('\uD83D\uDD04 Clearing Azure AI Foundry client instances...');\n    this.projectsClientInstance = null;\n    this.agentsClientInstance = null;\n    this.currentSdkConfig = null;\n  }\n\n  /**\n   * Get current foundry configuration (for debugging)\n   */\n  async getCurrentFoundryConfig(): Promise<FoundryConfig | null> {\n    if (isClient) {\n      console.warn('\u26A0\uFE0F Cannot access foundry config on client side');\n      return null;\n    }\n\n    try {\n      return await getFoundryConfig();\n    } catch (error) {\n      console.error('\u274C Failed to get current foundry configuration:', error);\n      return null;\n    }\n  }\n}\n\n/**\n * Type exports for external use\n */\nexport type FoundryClientOptions = {\n  endpoint?: string;\n  apiKey?: string;\n  projectId?: string;\n  forceRefresh?: boolean;\n};\n\nexport type FoundryRequestOptions = {\n  method?: string;\n  body?: any;\n  headers?: Record<string, string>;\n};\n\nexport type FoundryResponse<T = any> = {\n  status: number;\n  data: T | null;\n  raw: string;\n};\n\n// Re-export Azure SDK types for convenience\nexport type { AIProjectClient, AgentsClient };\n\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4e71675b0885f6b0bef053c2534706f10d46e572"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_14z54fbpee = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_14z54fbpee();
var __importDefault =
/* istanbul ignore next */
(cov_14z54fbpee().s[0]++,
/* istanbul ignore next */
(cov_14z54fbpee().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_14z54fbpee().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_14z54fbpee().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_14z54fbpee().f[0]++;
  cov_14z54fbpee().s[1]++;
  return /* istanbul ignore next */(cov_14z54fbpee().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_14z54fbpee().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_14z54fbpee().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_14z54fbpee().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_14z54fbpee().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_14z54fbpee().s[3]++;
exports.FoundryClientBase = void 0;
const node_fetch_1 =
/* istanbul ignore next */
(cov_14z54fbpee().s[4]++, __importDefault(require("node-fetch")));
const identity_1 =
/* istanbul ignore next */
(cov_14z54fbpee().s[5]++, require("@azure/identity"));
const ai_projects_1 =
/* istanbul ignore next */
(cov_14z54fbpee().s[6]++, require("@azure/ai-projects"));
const ai_agents_1 =
/* istanbul ignore next */
(cov_14z54fbpee().s[7]++, require("@azure/ai-agents"));
const foundry_config_1 =
/* istanbul ignore next */
(cov_14z54fbpee().s[8]++, require("../config/foundry-config"));
// Client-side safety check
const isClient =
/* istanbul ignore next */
(cov_14z54fbpee().s[9]++, typeof window !== 'undefined');
/* istanbul ignore next */
cov_14z54fbpee().s[10]++;
if (isClient) {
  /* istanbul ignore next */
  cov_14z54fbpee().b[3][0]++;
  cov_14z54fbpee().s[11]++;
  console.warn('[Azure AI Foundry Client] Running on client side - clients will not be initialized');
} else
/* istanbul ignore next */
{
  cov_14z54fbpee().b[3][1]++;
}
/**
 * Unified Azure AI Foundry Client
 *
 * Combines HTTP request functionality with Azure SDK client factories.
 * Provides both low-level request() method and high-level SDK helpers.
 */
class FoundryClientBase {
  constructor() {
    /* istanbul ignore next */
    cov_14z54fbpee().f[1]++;
    cov_14z54fbpee().s[12]++;
    this.projectsClientInstance = null;
    /* istanbul ignore next */
    cov_14z54fbpee().s[13]++;
    this.agentsClientInstance = null;
    /* istanbul ignore next */
    cov_14z54fbpee().s[14]++;
    this.currentSdkConfig = null;
  }
  /**
   * Initialize configuration
   */
  async init(forceRefresh =
  /* istanbul ignore next */
  (cov_14z54fbpee().b[4][0]++, false)) {
    /* istanbul ignore next */
    cov_14z54fbpee().f[2]++;
    cov_14z54fbpee().s[15]++;
    this.config = await (0, foundry_config_1.getFoundryConfig)(forceRefresh);
    const {
      isValid,
      errors
    } =
    /* istanbul ignore next */
    (cov_14z54fbpee().s[16]++, (0, foundry_config_1.validateFoundryConfig)(this.config));
    /* istanbul ignore next */
    cov_14z54fbpee().s[17]++;
    if (!isValid) {
      /* istanbul ignore next */
      cov_14z54fbpee().b[5][0]++;
      cov_14z54fbpee().s[18]++;
      throw new Error(`Invalid Foundry configuration: ${errors.join(', ')}`);
    } else
    /* istanbul ignore next */
    {
      cov_14z54fbpee().b[5][1]++;
    }
  }
  /**
   * Build default headers with API key
   */
  buildHeaders(extra) {
    /* istanbul ignore next */
    cov_14z54fbpee().f[3]++;
    cov_14z54fbpee().s[19]++;
    return Object.assign({
      'Content-Type': 'application/json',
      'api-key': this.config.apiKey,
      'User-Agent': 'PrepBettr/FoundryClient'
    },
    /* istanbul ignore next */
    (cov_14z54fbpee().b[6][0]++, extra) ||
    /* istanbul ignore next */
    (cov_14z54fbpee().b[6][1]++, {}));
  }
  /**
   * Core request helper with retry logic based on connection settings
   */
  async request(path, options =
  /* istanbul ignore next */
  (cov_14z54fbpee().b[7][0]++, {})) {
    /* istanbul ignore next */
    cov_14z54fbpee().f[4]++;
    const baseUrl =
    /* istanbul ignore next */
    (cov_14z54fbpee().s[20]++, this.config.endpoint.replace(/\/$/, ''));
    // Azure AI Foundry uses openai/deployments/{deployment-name} format
    const normalizedPath =
    /* istanbul ignore next */
    (cov_14z54fbpee().s[21]++, path.startsWith('/') ?
    /* istanbul ignore next */
    (cov_14z54fbpee().b[8][0]++, path) :
    /* istanbul ignore next */
    (cov_14z54fbpee().b[8][1]++, `/${path}`));
    const url =
    /* istanbul ignore next */
    (cov_14z54fbpee().s[22]++, `${baseUrl}/openai/deployments/gpt-4o${normalizedPath}?api-version=2024-02-15-preview`);
    const {
      connection
    } =
    /* istanbul ignore next */
    (cov_14z54fbpee().s[23]++, this.config);
    const method =
    /* istanbul ignore next */
    (cov_14z54fbpee().s[24]++,
    /* istanbul ignore next */
    (cov_14z54fbpee().b[9][0]++, options.method) ||
    /* istanbul ignore next */
    (cov_14z54fbpee().b[9][1]++, 'GET'));
    const headers =
    /* istanbul ignore next */
    (cov_14z54fbpee().s[25]++, this.buildHeaders(options.headers));
    const body =
    /* istanbul ignore next */
    (cov_14z54fbpee().s[26]++, options.body ?
    /* istanbul ignore next */
    (cov_14z54fbpee().b[10][0]++, JSON.stringify(options.body)) :
    /* istanbul ignore next */
    (cov_14z54fbpee().b[10][1]++, undefined));
    let attempt =
    /* istanbul ignore next */
    (cov_14z54fbpee().s[27]++, 0);
    const max =
    /* istanbul ignore next */
    (cov_14z54fbpee().s[28]++, connection.retryPolicy.maxRetries);
    const start =
    /* istanbul ignore next */
    (cov_14z54fbpee().s[29]++, Date.now());
    /* istanbul ignore next */
    cov_14z54fbpee().s[30]++;
    while (true) {
      /* istanbul ignore next */
      cov_14z54fbpee().s[31]++;
      try {
        const controller =
        /* istanbul ignore next */
        (cov_14z54fbpee().s[32]++, new AbortController());
        const timeout =
        /* istanbul ignore next */
        (cov_14z54fbpee().s[33]++, setTimeout(() => {
          /* istanbul ignore next */
          cov_14z54fbpee().f[5]++;
          cov_14z54fbpee().s[34]++;
          return controller.abort();
        }, connection.timeout));
        const res =
        /* istanbul ignore next */
        (cov_14z54fbpee().s[35]++, await (0, node_fetch_1.default)(url, {
          method,
          headers,
          body,
          // @ts-ignore node-fetch v2 compatibility
          signal: controller.signal
        }));
        /* istanbul ignore next */
        cov_14z54fbpee().s[36]++;
        clearTimeout(timeout);
        const raw =
        /* istanbul ignore next */
        (cov_14z54fbpee().s[37]++, await res.text());
        let data =
        /* istanbul ignore next */
        (cov_14z54fbpee().s[38]++, null);
        /* istanbul ignore next */
        cov_14z54fbpee().s[39]++;
        try {
          /* istanbul ignore next */
          cov_14z54fbpee().s[40]++;
          data = raw ?
          /* istanbul ignore next */
          (cov_14z54fbpee().b[11][0]++, JSON.parse(raw)) :
          /* istanbul ignore next */
          (cov_14z54fbpee().b[11][1]++, null);
        } catch (_a) {
          // non-JSON response
        }
        /* istanbul ignore next */
        cov_14z54fbpee().s[41]++;
        if (
        /* istanbul ignore next */
        (cov_14z54fbpee().b[13][0]++, !res.ok) &&
        /* istanbul ignore next */
        (cov_14z54fbpee().b[13][1]++, this.shouldRetry(res.status)) &&
        /* istanbul ignore next */
        (cov_14z54fbpee().b[13][2]++, attempt < max)) {
          /* istanbul ignore next */
          cov_14z54fbpee().b[12][0]++;
          cov_14z54fbpee().s[42]++;
          attempt++;
          /* istanbul ignore next */
          cov_14z54fbpee().s[43]++;
          await this.delay(this.backoff(attempt, connection));
          /* istanbul ignore next */
          cov_14z54fbpee().s[44]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_14z54fbpee().b[12][1]++;
        }
        cov_14z54fbpee().s[45]++;
        return {
          status: res.status,
          data,
          raw
        };
      } catch (err) {
        /* istanbul ignore next */
        cov_14z54fbpee().s[46]++;
        // AbortError / network errors
        if (attempt < max) {
          /* istanbul ignore next */
          cov_14z54fbpee().b[14][0]++;
          cov_14z54fbpee().s[47]++;
          attempt++;
          /* istanbul ignore next */
          cov_14z54fbpee().s[48]++;
          await this.delay(this.backoff(attempt, connection));
          /* istanbul ignore next */
          cov_14z54fbpee().s[49]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_14z54fbpee().b[14][1]++;
        }
        cov_14z54fbpee().s[50]++;
        throw new Error(`Foundry request failed after ${attempt} retries: ${
        /* istanbul ignore next */
        (cov_14z54fbpee().b[15][0]++,
        /* istanbul ignore next */
        (cov_14z54fbpee().b[17][0]++, err === null) ||
        /* istanbul ignore next */
        (cov_14z54fbpee().b[17][1]++, err === void 0) ?
        /* istanbul ignore next */
        (cov_14z54fbpee().b[16][0]++, void 0) :
        /* istanbul ignore next */
        (cov_14z54fbpee().b[16][1]++, err.message)) ||
        /* istanbul ignore next */
        (cov_14z54fbpee().b[15][1]++, err)}`);
      } finally {
        // Optional: log slow requests
        const elapsed =
        /* istanbul ignore next */
        (cov_14z54fbpee().s[51]++, Date.now() - start);
        /* istanbul ignore next */
        cov_14z54fbpee().s[52]++;
        if (elapsed > Math.max(2000, this.config.connection.timeout)) {
          /* istanbul ignore next */
          cov_14z54fbpee().b[18][0]++;
          cov_14z54fbpee().s[53]++;
          console.warn(`[FoundryClient] Slow request ${method} ${url} took ${elapsed}ms`);
        } else
        /* istanbul ignore next */
        {
          cov_14z54fbpee().b[18][1]++;
        }
      }
    }
  }
  /**
   * Basic retry policy on transient status codes
   */
  shouldRetry(status) {
    /* istanbul ignore next */
    cov_14z54fbpee().f[6]++;
    cov_14z54fbpee().s[54]++;
    return [408, 409, 429, 500, 502, 503, 504].includes(status);
  }
  /**
   * Exponential backoff with optional jitter
   */
  backoff(attempt, conn) {
    /* istanbul ignore next */
    cov_14z54fbpee().f[7]++;
    const {
      baseDelay,
      maxDelay,
      exponentialBase,
      jitter
    } =
    /* istanbul ignore next */
    (cov_14z54fbpee().s[55]++, conn.retryPolicy);
    const delay =
    /* istanbul ignore next */
    (cov_14z54fbpee().s[56]++, Math.min(maxDelay, baseDelay * Math.pow(exponentialBase, attempt - 1)));
    /* istanbul ignore next */
    cov_14z54fbpee().s[57]++;
    return jitter ?
    /* istanbul ignore next */
    (cov_14z54fbpee().b[19][0]++, Math.floor(Math.random() * delay)) :
    /* istanbul ignore next */
    (cov_14z54fbpee().b[19][1]++, delay);
  }
  delay(ms) {
    /* istanbul ignore next */
    cov_14z54fbpee().f[8]++;
    cov_14z54fbpee().s[58]++;
    return new Promise(resolve => {
      /* istanbul ignore next */
      cov_14z54fbpee().f[9]++;
      cov_14z54fbpee().s[59]++;
      return setTimeout(resolve, ms);
    });
  }
  /**
   * Validate connectivity to Foundry endpoint
   */
  async validateConnection() {
    /* istanbul ignore next */
    cov_14z54fbpee().f[10]++;
    cov_14z54fbpee().s[60]++;
    if (!this.config) {
      /* istanbul ignore next */
      cov_14z54fbpee().b[20][0]++;
      cov_14z54fbpee().s[61]++;
      await this.init();
    } else
    /* istanbul ignore next */
    {
      cov_14z54fbpee().b[20][1]++;
    }
    cov_14z54fbpee().s[62]++;
    try {
      const res =
      /* istanbul ignore next */
      (cov_14z54fbpee().s[63]++, await this.request('/', {
        method: 'GET'
      }));
      // Root might be 404 but still proves connectivity
      const ok =
      /* istanbul ignore next */
      (cov_14z54fbpee().s[64]++, res.status < 500);
      /* istanbul ignore next */
      cov_14z54fbpee().s[65]++;
      return {
        ok,
        status: res.status
      };
    } catch (err) {
      /* istanbul ignore next */
      cov_14z54fbpee().s[66]++;
      return {
        ok: false,
        error:
        /* istanbul ignore next */
        (cov_14z54fbpee().b[21][0]++,
        /* istanbul ignore next */
        (cov_14z54fbpee().b[23][0]++, err === null) ||
        /* istanbul ignore next */
        (cov_14z54fbpee().b[23][1]++, err === void 0) ?
        /* istanbul ignore next */
        (cov_14z54fbpee().b[22][0]++, void 0) :
        /* istanbul ignore next */
        (cov_14z54fbpee().b[22][1]++, err.message)) ||
        /* istanbul ignore next */
        (cov_14z54fbpee().b[21][1]++, String(err))
      };
    }
  }
  /**
   * Placeholder for text completion call via model inference.
   * Implement with specific Foundry Inference API once finalized.
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  async completeText(_prompt, _modelKey =
  /* istanbul ignore next */
  (cov_14z54fbpee().b[24][0]++, 'gpt-4o')) {
    /* istanbul ignore next */
    cov_14z54fbpee().f[11]++;
    cov_14z54fbpee().s[67]++;
    throw new Error('completeText not implemented yet for Foundry Inference API');
  }
  /**
   * Azure SDK Client Methods
   */
  /**
   * Create Azure AI Projects client with proper authentication
   */
  createProjectsClient(config) {
    /* istanbul ignore next */
    cov_14z54fbpee().f[12]++;
    cov_14z54fbpee().s[68]++;
    if (isClient) {
      /* istanbul ignore next */
      cov_14z54fbpee().b[25][0]++;
      cov_14z54fbpee().s[69]++;
      throw new Error('Projects client cannot be initialized on client side');
    } else
    /* istanbul ignore next */
    {
      cov_14z54fbpee().b[25][1]++;
    }
    cov_14z54fbpee().s[70]++;
    try {
      const credential =
      /* istanbul ignore next */
      (cov_14z54fbpee().s[71]++, new identity_1.DefaultAzureCredential());
      /* istanbul ignore next */
      cov_14z54fbpee().s[72]++;
      console.log(`🔧 Creating Azure AI Projects client for endpoint: ${config.endpoint}`);
      const client =
      /* istanbul ignore next */
      (cov_14z54fbpee().s[73]++, new ai_projects_1.AIProjectClient(config.endpoint, credential, {
        additionalPolicies: [{
          policy: {
            name: 'PrepBettrUserAgent',
            sendRequest: async (request, next) => {
              /* istanbul ignore next */
              cov_14z54fbpee().f[13]++;
              const existingUserAgent =
              /* istanbul ignore next */
              (cov_14z54fbpee().s[74]++,
              /* istanbul ignore next */
              (cov_14z54fbpee().b[26][0]++, request.headers.get('User-Agent')) ||
              /* istanbul ignore next */
              (cov_14z54fbpee().b[26][1]++, ''));
              /* istanbul ignore next */
              cov_14z54fbpee().s[75]++;
              request.headers.set('User-Agent', `PrepBettr/1.0 ${existingUserAgent}`);
              /* istanbul ignore next */
              cov_14z54fbpee().s[76]++;
              return next(request);
            }
          },
          position: 'perCall'
        }],
        retryOptions: {
          maxRetries: 3,
          retryDelayInMs: 1000
        }
      }));
      /* istanbul ignore next */
      cov_14z54fbpee().s[77]++;
      console.log('✅ Azure AI Projects client created successfully');
      /* istanbul ignore next */
      cov_14z54fbpee().s[78]++;
      return client;
    } catch (error) {
      /* istanbul ignore next */
      cov_14z54fbpee().s[79]++;
      console.error('❌ Failed to create Azure AI Projects client:', error);
      /* istanbul ignore next */
      cov_14z54fbpee().s[80]++;
      throw error;
    }
  }
  /**
   * Create Azure AI Agents client with proper authentication
   */
  createAgentsClient(config) {
    /* istanbul ignore next */
    cov_14z54fbpee().f[14]++;
    cov_14z54fbpee().s[81]++;
    if (isClient) {
      /* istanbul ignore next */
      cov_14z54fbpee().b[27][0]++;
      cov_14z54fbpee().s[82]++;
      throw new Error('Agents client cannot be initialized on client side');
    } else
    /* istanbul ignore next */
    {
      cov_14z54fbpee().b[27][1]++;
    }
    cov_14z54fbpee().s[83]++;
    try {
      const credential =
      /* istanbul ignore next */
      (cov_14z54fbpee().s[84]++, new identity_1.DefaultAzureCredential());
      /* istanbul ignore next */
      cov_14z54fbpee().s[85]++;
      console.log(`🤖 Creating Azure AI Agents client for project: ${config.projectId}`);
      const client =
      /* istanbul ignore next */
      (cov_14z54fbpee().s[86]++, new ai_agents_1.AgentsClient(config.endpoint, credential, {
        additionalPolicies: [{
          policy: {
            name: 'PrepBettrAgentUserAgent',
            sendRequest: async (request, next) => {
              /* istanbul ignore next */
              cov_14z54fbpee().f[15]++;
              const existingUserAgent =
              /* istanbul ignore next */
              (cov_14z54fbpee().s[87]++,
              /* istanbul ignore next */
              (cov_14z54fbpee().b[28][0]++, request.headers.get('User-Agent')) ||
              /* istanbul ignore next */
              (cov_14z54fbpee().b[28][1]++, ''));
              /* istanbul ignore next */
              cov_14z54fbpee().s[88]++;
              request.headers.set('User-Agent', `PrepBettr-Agent/1.0 ${existingUserAgent}`);
              /* istanbul ignore next */
              cov_14z54fbpee().s[89]++;
              if (config.projectId) {
                /* istanbul ignore next */
                cov_14z54fbpee().b[29][0]++;
                cov_14z54fbpee().s[90]++;
                request.headers.set('X-Project-Id', config.projectId);
              } else
              /* istanbul ignore next */
              {
                cov_14z54fbpee().b[29][1]++;
              }
              cov_14z54fbpee().s[91]++;
              return next(request);
            }
          },
          position: 'perCall'
        }],
        retryOptions: {
          maxRetries: 3,
          retryDelayInMs: 1000
        }
      }));
      /* istanbul ignore next */
      cov_14z54fbpee().s[92]++;
      console.log('✅ Azure AI Agents client created successfully');
      /* istanbul ignore next */
      cov_14z54fbpee().s[93]++;
      return client;
    } catch (error) {
      /* istanbul ignore next */
      cov_14z54fbpee().s[94]++;
      console.error('❌ Failed to create Azure AI Agents client:', error);
      /* istanbul ignore next */
      cov_14z54fbpee().s[95]++;
      throw error;
    }
  }
  /**
   * Get or create Azure AI Projects client (singleton pattern)
   */
  async getProjectsClient(forceRefresh =
  /* istanbul ignore next */
  (cov_14z54fbpee().b[30][0]++, false)) {
    /* istanbul ignore next */
    cov_14z54fbpee().f[16]++;
    cov_14z54fbpee().s[96]++;
    if (isClient) {
      /* istanbul ignore next */
      cov_14z54fbpee().b[31][0]++;
      cov_14z54fbpee().s[97]++;
      throw new Error('Projects client is not available on client side');
    } else
    /* istanbul ignore next */
    {
      cov_14z54fbpee().b[31][1]++;
    }
    const config =
    /* istanbul ignore next */
    (cov_14z54fbpee().s[98]++, await (0, foundry_config_1.getFoundryConfig)(forceRefresh));
    /* istanbul ignore next */
    cov_14z54fbpee().s[99]++;
    if (
    /* istanbul ignore next */
    (cov_14z54fbpee().b[33][0]++, forceRefresh) ||
    /* istanbul ignore next */
    (cov_14z54fbpee().b[33][1]++, !this.projectsClientInstance) ||
    /* istanbul ignore next */
    (cov_14z54fbpee().b[33][2]++, !this.currentSdkConfig) ||
    /* istanbul ignore next */
    (cov_14z54fbpee().b[33][3]++, this.currentSdkConfig.endpoint !== config.endpoint) ||
    /* istanbul ignore next */
    (cov_14z54fbpee().b[33][4]++, this.currentSdkConfig.apiKey !== config.apiKey)) {
      /* istanbul ignore next */
      cov_14z54fbpee().b[32][0]++;
      cov_14z54fbpee().s[100]++;
      console.log('🔄 Creating new Azure AI Projects client instance...');
      /* istanbul ignore next */
      cov_14z54fbpee().s[101]++;
      this.projectsClientInstance = this.createProjectsClient(config);
      /* istanbul ignore next */
      cov_14z54fbpee().s[102]++;
      this.currentSdkConfig = Object.assign({}, config);
    } else
    /* istanbul ignore next */
    {
      cov_14z54fbpee().b[32][1]++;
    }
    cov_14z54fbpee().s[103]++;
    return this.projectsClientInstance;
  }
  /**
   * Get or create Azure AI Agents client (singleton pattern)
   */
  async getAgentsClient(forceRefresh =
  /* istanbul ignore next */
  (cov_14z54fbpee().b[34][0]++, false)) {
    /* istanbul ignore next */
    cov_14z54fbpee().f[17]++;
    cov_14z54fbpee().s[104]++;
    if (isClient) {
      /* istanbul ignore next */
      cov_14z54fbpee().b[35][0]++;
      cov_14z54fbpee().s[105]++;
      throw new Error('Agents client is not available on client side');
    } else
    /* istanbul ignore next */
    {
      cov_14z54fbpee().b[35][1]++;
    }
    const config =
    /* istanbul ignore next */
    (cov_14z54fbpee().s[106]++, await (0, foundry_config_1.getFoundryConfig)(forceRefresh));
    /* istanbul ignore next */
    cov_14z54fbpee().s[107]++;
    if (
    /* istanbul ignore next */
    (cov_14z54fbpee().b[37][0]++, forceRefresh) ||
    /* istanbul ignore next */
    (cov_14z54fbpee().b[37][1]++, !this.agentsClientInstance) ||
    /* istanbul ignore next */
    (cov_14z54fbpee().b[37][2]++, !this.currentSdkConfig) ||
    /* istanbul ignore next */
    (cov_14z54fbpee().b[37][3]++, this.currentSdkConfig.endpoint !== config.endpoint) ||
    /* istanbul ignore next */
    (cov_14z54fbpee().b[37][4]++, this.currentSdkConfig.apiKey !== config.apiKey)) {
      /* istanbul ignore next */
      cov_14z54fbpee().b[36][0]++;
      cov_14z54fbpee().s[108]++;
      console.log('🔄 Creating new Azure AI Agents client instance...');
      /* istanbul ignore next */
      cov_14z54fbpee().s[109]++;
      this.agentsClientInstance = this.createAgentsClient(config);
      /* istanbul ignore next */
      cov_14z54fbpee().s[110]++;
      this.currentSdkConfig = Object.assign({}, config);
    } else
    /* istanbul ignore next */
    {
      cov_14z54fbpee().b[36][1]++;
    }
    cov_14z54fbpee().s[111]++;
    return this.agentsClientInstance;
  }
  /**
   * Test connection to Azure AI Foundry services
   */
  async testFoundryConnection() {
    /* istanbul ignore next */
    cov_14z54fbpee().f[18]++;
    cov_14z54fbpee().s[112]++;
    if (isClient) {
      /* istanbul ignore next */
      cov_14z54fbpee().b[38][0]++;
      cov_14z54fbpee().s[113]++;
      console.warn('⚠️ Cannot test foundry connection on client side');
      /* istanbul ignore next */
      cov_14z54fbpee().s[114]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_14z54fbpee().b[38][1]++;
    }
    cov_14z54fbpee().s[115]++;
    try {
      /* istanbul ignore next */
      cov_14z54fbpee().s[116]++;
      console.log('🔍 Testing Azure AI Foundry connection...');
      const client =
      /* istanbul ignore next */
      (cov_14z54fbpee().s[117]++, await this.getProjectsClient());
      // TODO: Add actual connection test based on Azure AI Projects SDK
      /* istanbul ignore next */
      cov_14z54fbpee().s[118]++;
      console.log('✅ Azure AI Foundry connection test successful');
      /* istanbul ignore next */
      cov_14z54fbpee().s[119]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_14z54fbpee().s[120]++;
      console.error('❌ Azure AI Foundry connection test failed:', error);
      /* istanbul ignore next */
      cov_14z54fbpee().s[121]++;
      return false;
    }
  }
  /**
   * Clear SDK client instances (useful for testing or configuration updates)
   */
  clearFoundryClients() {
    /* istanbul ignore next */
    cov_14z54fbpee().f[19]++;
    cov_14z54fbpee().s[122]++;
    if (isClient) {
      /* istanbul ignore next */
      cov_14z54fbpee().b[39][0]++;
      cov_14z54fbpee().s[123]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_14z54fbpee().b[39][1]++;
    }
    cov_14z54fbpee().s[124]++;
    console.log('🔄 Clearing Azure AI Foundry client instances...');
    /* istanbul ignore next */
    cov_14z54fbpee().s[125]++;
    this.projectsClientInstance = null;
    /* istanbul ignore next */
    cov_14z54fbpee().s[126]++;
    this.agentsClientInstance = null;
    /* istanbul ignore next */
    cov_14z54fbpee().s[127]++;
    this.currentSdkConfig = null;
  }
  /**
   * Get current foundry configuration (for debugging)
   */
  async getCurrentFoundryConfig() {
    /* istanbul ignore next */
    cov_14z54fbpee().f[20]++;
    cov_14z54fbpee().s[128]++;
    if (isClient) {
      /* istanbul ignore next */
      cov_14z54fbpee().b[40][0]++;
      cov_14z54fbpee().s[129]++;
      console.warn('⚠️ Cannot access foundry config on client side');
      /* istanbul ignore next */
      cov_14z54fbpee().s[130]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_14z54fbpee().b[40][1]++;
    }
    cov_14z54fbpee().s[131]++;
    try {
      /* istanbul ignore next */
      cov_14z54fbpee().s[132]++;
      return await (0, foundry_config_1.getFoundryConfig)();
    } catch (error) {
      /* istanbul ignore next */
      cov_14z54fbpee().s[133]++;
      console.error('❌ Failed to get current foundry configuration:', error);
      /* istanbul ignore next */
      cov_14z54fbpee().s[134]++;
      return null;
    }
  }
}
/* istanbul ignore next */
cov_14z54fbpee().s[135]++;
exports.FoundryClientBase = FoundryClientBase;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,