{"version":3,"names":["cov_1rcybfzxlm","actualCoverage","s","react_1","require","useUnifiedConfig_1","useFeatureFlags","f","flags","setFlags","useState","loading","setLoading","error","setError","useEffect","loadFlags","response","fetch","ok","b","Error","enhancedFlags","json","err","console","message","voiceInterview","premiumFeatures","newUI","rolloutStatus","getFeatureFlag","flagName","refreshFlags","newFlags","isVoiceInterviewEnabled","isPremiumFeaturesEnabled","isNewUIEnabled","exports","useUnifiedFeatureFlag","configKey","useUnifiedConfig","useUnifiedFeatureFlags","flagNames","results","reduce","acc"],"sources":["/Users/dikshantvashistha/PrepBettr/lib/hooks/useFeatureFlags.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useUnifiedConfig } from '@/lib/hooks/useUnifiedConfig';\n\n// Define types locally to avoid importing server-only modules\nexport interface FeatureFlags {\n  voiceInterview: boolean;\n  premiumFeatures: boolean;\n  newUI: boolean;\n}\n\nexport interface EnhancedFeatureFlags extends FeatureFlags {\n  rolloutStatus: {\n    voiceInterview: boolean;\n    premiumFeatures: boolean;\n    newUI: boolean;\n  };\n}\n\n/**\n * Client-safe feature flags hook that uses API calls instead of direct service imports\n * This avoids bundling server-only modules for the client\n */\nexport const useFeatureFlags = () => {\n  const [flags, setFlags] = useState<EnhancedFeatureFlags | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Load feature flags on component mount using API instead of direct service import\n  useEffect(() => {\n    const loadFlags = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Fetch from API endpoint instead of direct service import\n        const response = await fetch('/api/feature-flags');\n        if (!response.ok) {\n          throw new Error('Failed to fetch feature flags');\n        }\n        \n        const enhancedFlags = await response.json();\n        setFlags(enhancedFlags);\n        setLoading(false);\n      } catch (err) {\n        console.error('Error loading feature flags:', err);\n        setError(err instanceof Error ? err.message : 'Failed to load feature flags');\n        setLoading(false);\n\n        // Set default flags if loading fails\n        if (!flags) {\n          setFlags({\n            voiceInterview: false,\n            premiumFeatures: false,\n            newUI: false,\n            rolloutStatus: {\n              voiceInterview: false,\n              premiumFeatures: false,\n              newUI: false,\n            },\n          });\n        }\n      }\n    };\n\n    loadFlags();\n  }, []);\n\n  const getFeatureFlag = (flagName: keyof FeatureFlags): boolean => {\n    return flags?.[flagName] || false;\n  };\n\n  const refreshFlags = async (): Promise<void> => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await fetch('/api/feature-flags?refresh=true');\n      if (!response.ok) {\n        throw new Error('Failed to refresh feature flags');\n      }\n      \n      const newFlags = await response.json();\n      setFlags(newFlags);\n      setLoading(false);\n    } catch (err) {\n      console.error('Error refreshing feature flags:', err);\n      setError(err instanceof Error ? err.message : 'Failed to refresh feature flags');\n      setLoading(false);\n    }\n  };\n\n  return {\n    flags,\n    loading,\n    error,\n    getFeatureFlag,\n    refreshFlags,\n    // Convenience methods for specific flags\n    isVoiceInterviewEnabled: () => getFeatureFlag('voiceInterview'),\n    isPremiumFeaturesEnabled: () => getFeatureFlag('premiumFeatures'),\n    isNewUIEnabled: () => getFeatureFlag('newUI'),\n  };\n};\n\n/**\n * Simplified hook for individual feature flags using unified config directly\n * More performant for components that only need specific flags\n */\nexport const useUnifiedFeatureFlag = (flagName: keyof FeatureFlags) => {\n  const configKey = `features.${flagName}`;\n  return useUnifiedConfig<boolean>(configKey, false);\n};\n\n/**\n * Hook for getting multiple feature flags at once\n */\nexport const useUnifiedFeatureFlags = (flagNames: Array<keyof FeatureFlags>) => {\n  const results = flagNames.reduce((acc, flagName) => {\n    const configKey = `features.${flagName}`;\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    acc[flagName] = useUnifiedConfig<boolean>(configKey, false);\n    return acc;\n  }, {} as Record<keyof FeatureFlags, { value: boolean; loading: boolean; error: string | null }>);\n  \n  return results;\n};\n"],"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","ignoreList":[]}