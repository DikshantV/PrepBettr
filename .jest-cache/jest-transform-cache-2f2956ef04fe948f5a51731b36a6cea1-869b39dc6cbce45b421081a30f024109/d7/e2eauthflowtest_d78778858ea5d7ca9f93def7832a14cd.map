{"file":"/Users/dikshantvashistha/PrepBettr/lib/shared/auth/__tests__/e2e-auth-flow.test.ts","mappings":"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","names":[],"sources":["/Users/dikshantvashistha/PrepBettr/lib/shared/auth/__tests__/e2e-auth-flow.test.ts"],"sourcesContent":["/**\n * End-to-End Authentication Flow Tests\n * \n * Tests complete authentication flows across platforms\n */\n\nimport { \n  UnifiedAuth,\n  getUnifiedAuth,\n  verifyAuthHeader,\n  authSystemHealthCheck\n} from '../index';\n\n// Mock Firebase Admin\njest.mock('@/lib/firebase/admin', () => ({\n  getAdminAuth: jest.fn(() => ({\n    verifyIdToken: jest.fn(),\n    verifySessionCookie: jest.fn(),\n    getUser: jest.fn()\n  }))\n}));\n\ndescribe('End-to-End Authentication Flow', () => {\n  let auth: UnifiedAuth;\n  let mockFirebaseAuth: any;\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n    auth = getUnifiedAuth();\n    \n    const { getAdminAuth } = require('@/lib/firebase/admin');\n    mockFirebaseAuth = getAdminAuth();\n  });\n\n  describe('Complete Authentication Flow', () => {\n    it('should handle complete user authentication lifecycle', async () => {\n      // 1. Initialize authentication system\n      await auth.initialize();\n      expect(auth['initialized']).toBe(true);\n\n      // 2. Simulate user login with valid token\n      const mockUser = {\n        uid: 'user123',\n        email: 'user@example.com',\n        email_verified: true,\n        exp: Math.floor(Date.now() / 1000) + 3600,\n        custom_claims: { roles: ['user'] }\n      };\n\n      mockFirebaseAuth.verifyIdToken.mockResolvedValue(mockUser);\n\n      // 3. Verify token through unified system\n      const authResult = await verifyAuthHeader('Bearer valid-jwt-token');\n      expect(authResult.success).toBe(true);\n      expect(authResult.user?.uid).toBe('user123');\n      expect(authResult.user?.email).toBe('user@example.com');\n\n      // 4. Check metrics\n      const metrics = auth.getMetrics();\n      expect(metrics.totalRequests).toBe(1);\n      expect(metrics.successfulAuth).toBe(1);\n\n      // 5. Simulate role-based access\n      const hasUserRole = auth.hasRequiredRoles(authResult.user!, ['user']);\n      const hasAdminRole = auth.hasRequiredRoles(authResult.user!, ['admin']);\n      \n      expect(hasUserRole).toBe(true);\n      expect(hasAdminRole).toBe(false);\n    });\n\n    it('should handle authentication failure and recovery', async () => {\n      await auth.initialize();\n\n      // 1. Simulate invalid token\n      mockFirebaseAuth.verifyIdToken.mockRejectedValue(new Error('Invalid token'));\n      \n      const failedResult = await verifyAuthHeader('Bearer invalid-token');\n      expect(failedResult.success).toBe(false);\n\n      // 2. Check error metrics\n      let metrics = auth.getMetrics();\n      expect(metrics.failedAuth).toBe(1);\n\n      // 3. Simulate token refresh/recovery\n      mockFirebaseAuth.verifyIdToken.mockResolvedValue({\n        uid: 'user123',\n        email: 'user@example.com',\n        email_verified: true,\n        exp: Math.floor(Date.now() / 1000) + 3600\n      });\n\n      const recoveredResult = await verifyAuthHeader('Bearer refreshed-token');\n      expect(recoveredResult.success).toBe(true);\n\n      // 4. Verify recovery metrics\n      metrics = auth.getMetrics();\n      expect(metrics.successfulAuth).toBe(1);\n      expect(metrics.failedAuth).toBe(1);\n      expect(metrics.totalRequests).toBe(2);\n    });\n  });\n\n  describe('Cross-Platform Consistency', () => {\n    it('should provide consistent results across all adapters', async () => {\n      await auth.initialize();\n      \n      const mockUser = {\n        uid: 'consistent-user',\n        email: 'test@example.com',\n        email_verified: true,\n        exp: Math.floor(Date.now() / 1000) + 3600\n      };\n\n      mockFirebaseAuth.verifyIdToken.mockResolvedValue(mockUser);\n\n      // Test core verification\n      const coreResult = await auth.verifyToken('test-token');\n      expect(coreResult.valid).toBe(true);\n      expect(coreResult.user?.uid).toBe('consistent-user');\n\n      // Test utility function\n      const utilResult = await verifyAuthHeader('Bearer test-token');\n      expect(utilResult.success).toBe(true);\n      expect(utilResult.user?.uid).toBe('consistent-user');\n\n      // Results should be consistent\n      expect(coreResult.user?.uid).toBe(utilResult.user?.uid);\n      expect(coreResult.user?.email).toBe(utilResult.user?.email);\n    });\n  });\n\n  describe('Performance and Scalability', () => {\n    it('should handle concurrent authentication requests', async () => {\n      await auth.initialize();\n      \n      mockFirebaseAuth.verifyIdToken.mockResolvedValue({\n        uid: 'concurrent-user',\n        email: 'concurrent@example.com',\n        email_verified: true,\n        exp: Math.floor(Date.now() / 1000) + 3600\n      });\n\n      // Simulate multiple concurrent requests\n      const promises = Array.from({ length: 10 }, (_, i) => \n        verifyAuthHeader(`Bearer token-${i}`)\n      );\n\n      const results = await Promise.all(promises);\n\n      // All should succeed\n      results.forEach(result => {\n        expect(result.success).toBe(true);\n        expect(result.user?.uid).toBe('concurrent-user');\n      });\n\n      // Check metrics\n      const metrics = auth.getMetrics();\n      expect(metrics.totalRequests).toBe(10);\n      expect(metrics.successfulAuth).toBe(10);\n    });\n\n    it('should maintain performance under load', async () => {\n      await auth.initialize();\n      \n      mockFirebaseAuth.verifyIdToken.mockImplementation(async () => {\n        // Simulate some processing time\n        await new Promise(resolve => setTimeout(resolve, 10));\n        return {\n          uid: 'perf-user',\n          email: 'perf@example.com',\n          email_verified: true,\n          exp: Math.floor(Date.now() / 1000) + 3600\n        };\n      });\n\n      const startTime = Date.now();\n      \n      // Run 50 authentication requests\n      const promises = Array.from({ length: 50 }, () => \n        verifyAuthHeader('Bearer perf-token')\n      );\n\n      await Promise.all(promises);\n      \n      const endTime = Date.now();\n      const totalTime = endTime - startTime;\n\n      // Should complete within reasonable time (adjust threshold as needed)\n      expect(totalTime).toBeLessThan(2000); // 2 seconds for 50 requests\n\n      // Check performance metrics\n      const metrics = auth.getMetrics();\n      expect(metrics.averageVerificationTime).toBeGreaterThan(0);\n      expect(metrics.averageVerificationTime).toBeLessThan(100); // 100ms average\n    });\n  });\n\n  describe('Error Resilience', () => {\n    it('should recover from Firebase service outage', async () => {\n      await auth.initialize();\n\n      // 1. Simulate service outage\n      mockFirebaseAuth.verifyIdToken.mockRejectedValue(new Error('Service unavailable'));\n\n      const outageResult = await verifyAuthHeader('Bearer token-during-outage');\n      expect(outageResult.success).toBe(false);\n\n      // 2. Simulate service recovery\n      mockFirebaseAuth.verifyIdToken.mockResolvedValue({\n        uid: 'recovered-user',\n        email: 'recovered@example.com',\n        email_verified: true,\n        exp: Math.floor(Date.now() / 1000) + 3600\n      });\n\n      const recoveryResult = await verifyAuthHeader('Bearer token-after-recovery');\n      expect(recoveryResult.success).toBe(true);\n      expect(recoveryResult.user?.uid).toBe('recovered-user');\n    });\n\n    it('should handle malformed tokens gracefully', async () => {\n      await auth.initialize();\n\n      const malformedTests = [\n        'Bearer', // Missing token\n        'Bearer ', // Empty token\n        'Basic token', // Wrong auth type\n        'Bearer invalid..jwt', // Malformed JWT\n        '', // Empty header\n        'Bearer token-with-special-chars-!@#$%'\n      ];\n\n      for (const header of malformedTests) {\n        const result = await verifyAuthHeader(header);\n        expect(result.success).toBe(false);\n        // Should not throw errors\n      }\n    });\n  });\n\n  describe('Health Monitoring', () => {\n    it('should provide accurate system health status', async () => {\n      // 1. Check health before initialization\n      let health = await authSystemHealthCheck();\n      expect(health.healthy).toBe(false);\n\n      // 2. Initialize and check health\n      await auth.initialize();\n      health = await authSystemHealthCheck();\n      expect(health.healthy).toBe(true);\n      expect(health.core.details.initialized).toBe(true);\n      expect(health.core.details.firebase).toBe(true);\n\n      // 3. Check metrics are included\n      expect(health.metrics.core).toBeDefined();\n      expect(health.metrics.performance).toBeDefined();\n    });\n\n    it('should detect authentication system degradation', async () => {\n      await auth.initialize();\n\n      // Simulate some failures to trigger degradation\n      mockFirebaseAuth.verifyIdToken.mockRejectedValue(new Error('Intermittent failure'));\n\n      // Generate some failures\n      for (let i = 0; i < 5; i++) {\n        await verifyAuthHeader('Bearer failing-token');\n      }\n\n      const metrics = auth.getMetrics();\n      expect(metrics.failedAuth).toBe(5);\n      expect(metrics.totalRequests).toBe(5);\n\n      // Health check should still be healthy (system operational)\n      // but metrics should show the issues\n      const health = await authSystemHealthCheck();\n      expect(health.healthy).toBe(true); // System is up\n      expect(health.metrics.core.failedAuth).toBe(5); // But has failures\n    });\n  });\n\n  describe('Security Features', () => {\n    it('should handle token expiry correctly', async () => {\n      await auth.initialize();\n\n      // Simulate expired token\n      mockFirebaseAuth.verifyIdToken.mockRejectedValue({\n        code: 'auth/id-token-expired'\n      });\n\n      const result = await verifyAuthHeader('Bearer expired-token');\n      \n      expect(result.success).toBe(false);\n      expect(result.errorCode).toBe('EXPIRED_TOKEN');\n    });\n\n    it('should validate required roles strictly', async () => {\n      await auth.initialize();\n\n      const userWithRoles = {\n        uid: 'role-user',\n        email: 'role@example.com',\n        email_verified: true,\n        exp: Math.floor(Date.now() / 1000) + 3600,\n        custom_claims: { roles: ['user', 'editor'] }\n      };\n\n      mockFirebaseAuth.verifyIdToken.mockResolvedValue(userWithRoles);\n      const result = await verifyAuthHeader('Bearer role-token');\n      \n      expect(result.success).toBe(true);\n      \n      // Test various role combinations\n      expect(auth.hasRequiredRoles(result.user!, ['user'])).toBe(true);\n      expect(auth.hasRequiredRoles(result.user!, ['editor'])).toBe(true);\n      expect(auth.hasRequiredRoles(result.user!, ['admin'])).toBe(false);\n      expect(auth.hasRequiredRoles(result.user!, ['user', 'admin'])).toBe(true); // OR logic\n      expect(auth.hasRequiredRoles(result.user!, ['admin', 'superuser'])).toBe(false);\n    });\n  });\n});\n"],"version":3}