60eea7bf1895763abd21c06f1c398f1e
"use strict";

/* istanbul ignore next */
function cov_ytutdy1pu() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/agents/agent-factory.ts";
  var hash = "df777864579dd5eb67339af3d2fcd56c8a378ee3";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/agents/agent-factory.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 30
        }
      },
      "2": {
        start: {
          line: 4,
          column: 32
        },
        end: {
          line: 4,
          column: 66
        }
      },
      "3": {
        start: {
          line: 5,
          column: 33
        },
        end: {
          line: 5,
          column: 68
        }
      },
      "4": {
        start: {
          line: 6,
          column: 26
        },
        end: {
          line: 6,
          column: 54
        }
      },
      "5": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 40
        }
      },
      "6": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 43
        }
      },
      "7": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 29
        }
      },
      "8": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 28,
          column: 9
        }
      },
      "9": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 26,
          column: 13
        }
      },
      "10": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 112
        }
      },
      "11": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 27,
          column: 76
        }
      },
      "12": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 37
        }
      },
      "13": {
        start: {
          line: 39,
          column: 25
        },
        end: {
          line: 39,
          column: 64
        }
      },
      "14": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 43,
          column: 9
        }
      },
      "15": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 53
        }
      },
      "16": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "17": {
        start: {
          line: 48,
          column: 16
        },
        end: {
          line: 48,
          column: 106
        }
      },
      "18": {
        start: {
          line: 49,
          column: 16
        },
        end: {
          line: 49,
          column: 22
        }
      },
      "19": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 51,
          column: 108
        }
      },
      "20": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 52,
          column: 22
        }
      },
      "21": {
        start: {
          line: 54,
          column: 16
        },
        end: {
          line: 54,
          column: 94
        }
      },
      "22": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 55,
          column: 22
        }
      },
      "23": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 57,
          column: 63
        }
      },
      "24": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "25": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 61
        }
      },
      "26": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 49
        }
      },
      "27": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 21
        }
      },
      "28": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 75
        }
      },
      "29": {
        start: {
          line: 74,
          column: 33
        },
        end: {
          line: 74,
          column: 73
        }
      },
      "30": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 55
        }
      },
      "31": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 93,
          column: 10
        }
      },
      "32": {
        start: {
          line: 102,
          column: 23
        },
        end: {
          line: 102,
          column: 25
        }
      },
      "33": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "34": {
        start: {
          line: 105,
          column: 31
        },
        end: {
          line: 105,
          column: 33
        }
      },
      "35": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 112,
          column: 13
        }
      },
      "36": {
        start: {
          line: 108,
          column: 16
        },
        end: {
          line: 108,
          column: 45
        }
      },
      "37": {
        start: {
          line: 110,
          column: 17
        },
        end: {
          line: 112,
          column: 13
        }
      },
      "38": {
        start: {
          line: 111,
          column: 16
        },
        end: {
          line: 111,
          column: 45
        }
      },
      "39": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 67
        }
      },
      "40": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 124,
          column: 9
        }
      },
      "41": {
        start: {
          line: 117,
          column: 37
        },
        end: {
          line: 117,
          column: 39
        }
      },
      "42": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 122,
          column: 13
        }
      },
      "43": {
        start: {
          line: 120,
          column: 16
        },
        end: {
          line: 120,
          column: 184
        }
      },
      "44": {
        start: {
          line: 121,
          column: 16
        },
        end: {
          line: 121,
          column: 61
        }
      },
      "45": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 74
        }
      },
      "46": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 134,
          column: 9
        }
      },
      "47": {
        start: {
          line: 128,
          column: 35
        },
        end: {
          line: 128,
          column: 37
        }
      },
      "48": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 132,
          column: 13
        }
      },
      "49": {
        start: {
          line: 130,
          column: 16
        },
        end: {
          line: 130,
          column: 228
        }
      },
      "50": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 59
        }
      },
      "51": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 70
        }
      },
      "52": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 135,
          column: 22
        }
      },
      "53": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 141,
          column: 36
        }
      },
      "54": {
        start: {
          line: 147,
          column: 26
        },
        end: {
          line: 187,
          column: 9
        }
      },
      "55": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 188,
          column: 31
        }
      },
      "56": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 202,
          column: 66
        }
      },
      "57": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 203,
          column: 21
        }
      },
      "58": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 210,
          column: 29
        }
      },
      "59": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 29
        }
      },
      "60": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 211,
          column: 38
        }
      },
      "61": {
        start: {
          line: 214,
          column: 0
        },
        end: {
          line: 214,
          column: 36
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 14,
            column: 5
          }
        },
        loc: {
          start: {
            line: 14,
            column: 39
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 14
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 46
          },
          end: {
            line: 30,
            column: 5
          }
        },
        line: 22
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        loc: {
          start: {
            line: 38,
            column: 30
          },
          end: {
            line: 66,
            column: 5
          }
        },
        line: 38
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        },
        loc: {
          start: {
            line: 73,
            column: 24
          },
          end: {
            line: 75,
            column: 5
          }
        },
        line: 73
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 74,
            column: 25
          },
          end: {
            line: 74,
            column: 26
          }
        },
        loc: {
          start: {
            line: 74,
            column: 33
          },
          end: {
            line: 74,
            column: 73
          }
        },
        line: 74
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        loc: {
          start: {
            line: 79,
            column: 24
          },
          end: {
            line: 81,
            column: 5
          }
        },
        line: 79
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 88,
            column: 4
          },
          end: {
            line: 88,
            column: 5
          }
        },
        loc: {
          start: {
            line: 88,
            column: 35
          },
          end: {
            line: 94,
            column: 5
          }
        },
        line: 88
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 101,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        },
        loc: {
          start: {
            line: 101,
            column: 46
          },
          end: {
            line: 136,
            column: 5
          }
        },
        line: 101
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 140,
            column: 4
          },
          end: {
            line: 140,
            column: 5
          }
        },
        loc: {
          start: {
            line: 140,
            column: 17
          },
          end: {
            line: 142,
            column: 5
          }
        },
        line: 140
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 146,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        },
        loc: {
          start: {
            line: 146,
            column: 23
          },
          end: {
            line: 189,
            column: 5
          }
        },
        line: 146
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 195,
            column: 4
          },
          end: {
            line: 195,
            column: 5
          }
        },
        loc: {
          start: {
            line: 195,
            column: 40
          },
          end: {
            line: 204,
            column: 5
          }
        },
        line: 195
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 208,
            column: 4
          },
          end: {
            line: 208,
            column: 5
          }
        },
        loc: {
          start: {
            line: 208,
            column: 26
          },
          end: {
            line: 212,
            column: 5
          }
        },
        line: 208
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 28,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 28,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 23
      },
      "1": {
        loc: {
          start: {
            line: 24,
            column: 12
          },
          end: {
            line: 26,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 12
          },
          end: {
            line: 26,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "2": {
        loc: {
          start: {
            line: 24,
            column: 16
          },
          end: {
            line: 24,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 16
          },
          end: {
            line: 24,
            column: 30
          }
        }, {
          start: {
            line: 24,
            column: 34
          },
          end: {
            line: 24,
            column: 41
          }
        }],
        line: 24
      },
      "3": {
        loc: {
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 43,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 43,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "4": {
        loc: {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 49,
            column: 22
          }
        }, {
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 52,
            column: 22
          }
        }, {
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 55,
            column: 22
          }
        }, {
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 57,
            column: 63
          }
        }],
        line: 46
      },
      "5": {
        loc: {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "6": {
        loc: {
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "7": {
        loc: {
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 112,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 112,
            column: 13
          }
        }, {
          start: {
            line: 110,
            column: 17
          },
          end: {
            line: 112,
            column: 13
          }
        }],
        line: 107
      },
      "8": {
        loc: {
          start: {
            line: 110,
            column: 17
          },
          end: {
            line: 112,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 17
          },
          end: {
            line: 112,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "9": {
        loc: {
          start: {
            line: 110,
            column: 21
          },
          end: {
            line: 110,
            column: 110
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 110,
            column: 21
          },
          end: {
            line: 110,
            column: 62
          }
        }, {
          start: {
            line: 110,
            column: 66
          },
          end: {
            line: 110,
            column: 110
          }
        }],
        line: 110
      },
      "10": {
        loc: {
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 124,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 124,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "11": {
        loc: {
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 122,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 12
          },
          end: {
            line: 122,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      },
      "12": {
        loc: {
          start: {
            line: 119,
            column: 16
          },
          end: {
            line: 119,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 119,
            column: 16
          },
          end: {
            line: 119,
            column: 54
          }
        }, {
          start: {
            line: 119,
            column: 58
          },
          end: {
            line: 119,
            column: 96
          }
        }],
        line: 119
      },
      "13": {
        loc: {
          start: {
            line: 126,
            column: 8
          },
          end: {
            line: 134,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 8
          },
          end: {
            line: 134,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 126
      },
      "14": {
        loc: {
          start: {
            line: 126,
            column: 12
          },
          end: {
            line: 127,
            column: 128
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 126,
            column: 12
          },
          end: {
            line: 126,
            column: 50
          }
        }, {
          start: {
            line: 127,
            column: 13
          },
          end: {
            line: 127,
            column: 54
          }
        }, {
          start: {
            line: 127,
            column: 58
          },
          end: {
            line: 127,
            column: 102
          }
        }, {
          start: {
            line: 127,
            column: 106
          },
          end: {
            line: 127,
            column: 127
          }
        }],
        line: 126
      },
      "15": {
        loc: {
          start: {
            line: 129,
            column: 12
          },
          end: {
            line: 132,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 12
          },
          end: {
            line: 132,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 129
      },
      "16": {
        loc: {
          start: {
            line: 209,
            column: 8
          },
          end: {
            line: 210,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 209,
            column: 8
          },
          end: {
            line: 210,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 209
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0, 0, 0],
      "15": [0, 0],
      "16": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/agents/agent-factory.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/agents/agent-factory.ts"],
      sourcesContent: ["import { FoundryAgent } from '../types/agent-types';\nimport { TechnicalInterviewer } from './technical-interviewer';\nimport { BehavioralInterviewer } from './behavioral-interviewer';\nimport { IndustryExpert } from './industry-expert';\nimport type { FoundryClientBase } from '../clients/foundry-client';\nimport type { FoundryConfig } from '../config/foundry-config';\n\n/**\n * Available agent types in the system\n */\nexport type AgentType = 'technical' | 'behavioral' | 'industry';\n\n/**\n * Configuration options for agent creation\n */\nexport interface AgentFactoryConfig {\n  /** Override default model for the agent */\n  model?: string;\n  /** Override default temperature */\n  temperature?: number;\n  /** Override default max tokens */\n  maxTokens?: number;\n  /** Custom system instructions to append or replace */\n  customInstructions?: string;\n  /** Whether to replace or append custom instructions */\n  instructionsMode?: 'replace' | 'append';\n}\n\n/**\n * Factory class for creating and managing interview agents\n * \n * Implements the Factory pattern to provide a centralized way to create\n * different types of interview agents with optional configuration overrides.\n */\nexport class AgentFactory {\n  private static instance: AgentFactory;\n  private agentInstances: Map<string, FoundryAgent> = new Map();\n  private foundryClient: FoundryClientBase;\n  private config: FoundryConfig;\n\n  private constructor(foundryClient: FoundryClientBase, config: FoundryConfig) {\n    this.foundryClient = foundryClient;\n    this.config = config;\n  }\n\n  /**\n   * Get singleton instance of AgentFactory\n   */\n  public static getInstance(foundryClient?: FoundryClientBase, config?: FoundryConfig): AgentFactory {\n    if (!AgentFactory.instance) {\n      if (!foundryClient || !config) {\n        throw new Error('AgentFactory must be initialized with foundryClient and config on first call');\n      }\n      AgentFactory.instance = new AgentFactory(foundryClient, config);\n    }\n    return AgentFactory.instance;\n  }\n\n  /**\n   * Create an agent instance of the specified type\n   * \n   * @param type - The type of agent to create\n   * @param config - Optional configuration overrides\n   * @returns The created agent instance\n   */\n  public createAgent(type: AgentType, config?: AgentFactoryConfig): FoundryAgent {\n    const cacheKey = `${type}-${this.getConfigHash(config)}`;\n    \n    // Return cached instance if available\n    if (this.agentInstances.has(cacheKey)) {\n      return this.agentInstances.get(cacheKey)!;\n    }\n\n    let agent: FoundryAgent;\n\n    // Create agent based on type\n    switch (type) {\n      case 'technical':\n        agent = new TechnicalInterviewer(this.foundryClient, this.config);\n        break;\n      case 'behavioral':\n        agent = new BehavioralInterviewer(this.foundryClient, this.config);\n        break;\n      case 'industry':\n        agent = new IndustryExpert(this.foundryClient, this.config);\n        break;\n      default:\n        throw new Error(`Unknown agent type: ${type}`);\n    }\n\n    // Apply configuration overrides if provided\n    if (config) {\n      agent = this.applyConfigOverrides(agent, config);\n    }\n\n    // Cache the instance\n    this.agentInstances.set(cacheKey, agent);\n    \n    return agent;\n  }\n\n  /**\n   * Create multiple agents at once\n   * \n   * @param specs - Array of agent specifications with type and optional config\n   * @returns Array of created agent instances\n   */\n  public createAgents(specs: Array<{ type: AgentType; config?: AgentFactoryConfig }>): FoundryAgent[] {\n    return specs.map(spec => this.createAgent(spec.type, spec.config));\n  }\n\n  /**\n   * Get all available agent types\n   */\n  public getAvailableTypes(): AgentType[] {\n    return ['technical', 'behavioral', 'industry'];\n  }\n\n  /**\n   * Create a default interview agent set (one of each type)\n   * \n   * @param globalConfig - Global configuration to apply to all agents\n   * @returns Object containing all three agent types\n   */\n  public createDefaultSet(globalConfig?: AgentFactoryConfig): {\n    technical: FoundryAgent;\n    behavioral: FoundryAgent;\n    industry: FoundryAgent;\n  } {\n    return {\n      technical: this.createAgent('technical', globalConfig),\n      behavioral: this.createAgent('behavioral', globalConfig),\n      industry: this.createAgent('industry', globalConfig)\n    };\n  }\n\n  /**\n   * Create agents based on interview requirements\n   * \n   * @param requirements - Interview requirements specification\n   * @returns Array of appropriate agents for the requirements\n   */\n  public createAgentsForRequirements(requirements: {\n    includeTechnical?: boolean;\n    includeBehavioral?: boolean;\n    includeIndustry?: boolean;\n    experienceLevel?: 'entry' | 'mid' | 'senior' | 'executive';\n    industry?: string;\n    roleType?: 'individual-contributor' | 'management' | 'leadership';\n  }): FoundryAgent[] {\n    const agents: FoundryAgent[] = [];\n\n    // Always include technical for technical roles\n    if (requirements.includeTechnical !== false) {\n      const techConfig: AgentFactoryConfig = {};\n      \n      // Adjust technical difficulty based on experience level\n      if (requirements.experienceLevel === 'entry') {\n        techConfig.temperature = 0.3; // More predictable, foundational questions\n      } else if (requirements.experienceLevel === 'senior' || requirements.experienceLevel === 'executive') {\n        techConfig.temperature = 0.7; // More complex, system design focused\n      }\n      \n      agents.push(this.createAgent('technical', techConfig));\n    }\n\n    // Include behavioral for management and senior roles\n    if (requirements.includeBehavioral !== false) {\n      const behavioralConfig: AgentFactoryConfig = {};\n      \n      // Adjust behavioral focus based on role type\n      if (requirements.roleType === 'management' || requirements.roleType === 'leadership') {\n        behavioralConfig.customInstructions = '\\n\\nFOCUS ON LEADERSHIP: Emphasize leadership scenarios, team management, strategic decision-making, and organizational impact.';\n        behavioralConfig.instructionsMode = 'append';\n      }\n      \n      agents.push(this.createAgent('behavioral', behavioralConfig));\n    }\n\n    // Include industry expert for senior roles and specific industries\n    if (requirements.includeIndustry !== false && \n        (requirements.experienceLevel === 'senior' || requirements.experienceLevel === 'executive' || requirements.industry)) {\n      const industryConfig: AgentFactoryConfig = {};\n      \n      if (requirements.industry) {\n        industryConfig.customInstructions = `\\n\\nINDUSTRY FOCUS: Prioritize questions specific to the ${requirements.industry} industry, including sector-specific regulations, competitive dynamics, and emerging trends.`;\n        industryConfig.instructionsMode = 'append';\n      }\n      \n      agents.push(this.createAgent('industry', industryConfig));\n    }\n\n    return agents;\n  }\n\n  /**\n   * Clear cached agent instances (useful for testing or configuration changes)\n   */\n  public clearCache(): void {\n    this.agentInstances.clear();\n  }\n\n  /**\n   * Get information about a specific agent type\n   */\n  public getAgentInfo(type: AgentType): {\n    type: AgentType;\n    name: string;\n    description: string;\n    defaultModel: string;\n    capabilities: string[];\n  } {\n    const agentInfo = {\n      technical: {\n        type: 'technical' as AgentType,\n        name: 'Technical Interviewer',\n        description: 'Specializes in coding challenges, system design, and technical problem-solving assessment',\n        defaultModel: 'gpt-4.5',\n        capabilities: [\n          'Coding problems and algorithms',\n          'System design and architecture',\n          'Technology stack assessment',\n          'Problem-solving methodology',\n          'Code review and best practices'\n        ]\n      },\n      behavioral: {\n        type: 'behavioral' as AgentType,\n        name: 'Behavioral Interviewer',\n        description: 'Focuses on soft skills, leadership potential, and cultural fit assessment',\n        defaultModel: 'gpt-4o',\n        capabilities: [\n          'STAR method behavioral questions',\n          'Leadership and teamwork assessment',\n          'Conflict resolution scenarios',\n          'Communication skills evaluation',\n          'Cultural fit and motivation'\n        ]\n      },\n      industry: {\n        type: 'industry' as AgentType,\n        name: 'Industry Expert',\n        description: 'Evaluates industry knowledge, market awareness, and strategic thinking',\n        defaultModel: 'llama-4',\n        capabilities: [\n          'Industry trends and insights',\n          'Regulatory and compliance knowledge',\n          'Competitive landscape analysis',\n          'Business strategy evaluation',\n          'Market dynamics understanding'\n        ]\n      }\n    };\n\n    return agentInfo[type];\n  }\n\n  /**\n   * Apply configuration overrides to an agent\n   * Note: This is a simplified implementation. In a real scenario, you might\n   * need to create a new instance with the overrides applied at construction time.\n   */\n  private applyConfigOverrides(agent: FoundryAgent, config: AgentFactoryConfig): FoundryAgent {\n    // For now, we return the agent as-is since our BaseAgent doesn't support\n    // runtime configuration changes. In a full implementation, you would either:\n    // 1. Make agent configurations mutable\n    // 2. Create a wrapper/decorator pattern\n    // 3. Recreate the agent with new config\n    \n    // This is a placeholder for the concept\n    console.log(`Applied config overrides to agent:`, config);\n    return agent;\n  }\n\n  /**\n   * Generate a hash for configuration to use in caching\n   */\n  private getConfigHash(config?: AgentFactoryConfig): string {\n    if (!config) return 'default';\n    return JSON.stringify(config);\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "df777864579dd5eb67339af3d2fcd56c8a378ee3"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_ytutdy1pu = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_ytutdy1pu();
cov_ytutdy1pu().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_ytutdy1pu().s[1]++;
exports.AgentFactory = void 0;
const technical_interviewer_1 =
/* istanbul ignore next */
(cov_ytutdy1pu().s[2]++, require("./technical-interviewer"));
const behavioral_interviewer_1 =
/* istanbul ignore next */
(cov_ytutdy1pu().s[3]++, require("./behavioral-interviewer"));
const industry_expert_1 =
/* istanbul ignore next */
(cov_ytutdy1pu().s[4]++, require("./industry-expert"));
/**
 * Factory class for creating and managing interview agents
 *
 * Implements the Factory pattern to provide a centralized way to create
 * different types of interview agents with optional configuration overrides.
 */
class AgentFactory {
  constructor(foundryClient, config) {
    /* istanbul ignore next */
    cov_ytutdy1pu().f[0]++;
    cov_ytutdy1pu().s[5]++;
    this.agentInstances = new Map();
    /* istanbul ignore next */
    cov_ytutdy1pu().s[6]++;
    this.foundryClient = foundryClient;
    /* istanbul ignore next */
    cov_ytutdy1pu().s[7]++;
    this.config = config;
  }
  /**
   * Get singleton instance of AgentFactory
   */
  static getInstance(foundryClient, config) {
    /* istanbul ignore next */
    cov_ytutdy1pu().f[1]++;
    cov_ytutdy1pu().s[8]++;
    if (!AgentFactory.instance) {
      /* istanbul ignore next */
      cov_ytutdy1pu().b[0][0]++;
      cov_ytutdy1pu().s[9]++;
      if (
      /* istanbul ignore next */
      (cov_ytutdy1pu().b[2][0]++, !foundryClient) ||
      /* istanbul ignore next */
      (cov_ytutdy1pu().b[2][1]++, !config)) {
        /* istanbul ignore next */
        cov_ytutdy1pu().b[1][0]++;
        cov_ytutdy1pu().s[10]++;
        throw new Error('AgentFactory must be initialized with foundryClient and config on first call');
      } else
      /* istanbul ignore next */
      {
        cov_ytutdy1pu().b[1][1]++;
      }
      cov_ytutdy1pu().s[11]++;
      AgentFactory.instance = new AgentFactory(foundryClient, config);
    } else
    /* istanbul ignore next */
    {
      cov_ytutdy1pu().b[0][1]++;
    }
    cov_ytutdy1pu().s[12]++;
    return AgentFactory.instance;
  }
  /**
   * Create an agent instance of the specified type
   *
   * @param type - The type of agent to create
   * @param config - Optional configuration overrides
   * @returns The created agent instance
   */
  createAgent(type, config) {
    /* istanbul ignore next */
    cov_ytutdy1pu().f[2]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_ytutdy1pu().s[13]++, `${type}-${this.getConfigHash(config)}`);
    // Return cached instance if available
    /* istanbul ignore next */
    cov_ytutdy1pu().s[14]++;
    if (this.agentInstances.has(cacheKey)) {
      /* istanbul ignore next */
      cov_ytutdy1pu().b[3][0]++;
      cov_ytutdy1pu().s[15]++;
      return this.agentInstances.get(cacheKey);
    } else
    /* istanbul ignore next */
    {
      cov_ytutdy1pu().b[3][1]++;
    }
    let agent;
    // Create agent based on type
    /* istanbul ignore next */
    cov_ytutdy1pu().s[16]++;
    switch (type) {
      case 'technical':
        /* istanbul ignore next */
        cov_ytutdy1pu().b[4][0]++;
        cov_ytutdy1pu().s[17]++;
        agent = new technical_interviewer_1.TechnicalInterviewer(this.foundryClient, this.config);
        /* istanbul ignore next */
        cov_ytutdy1pu().s[18]++;
        break;
      case 'behavioral':
        /* istanbul ignore next */
        cov_ytutdy1pu().b[4][1]++;
        cov_ytutdy1pu().s[19]++;
        agent = new behavioral_interviewer_1.BehavioralInterviewer(this.foundryClient, this.config);
        /* istanbul ignore next */
        cov_ytutdy1pu().s[20]++;
        break;
      case 'industry':
        /* istanbul ignore next */
        cov_ytutdy1pu().b[4][2]++;
        cov_ytutdy1pu().s[21]++;
        agent = new industry_expert_1.IndustryExpert(this.foundryClient, this.config);
        /* istanbul ignore next */
        cov_ytutdy1pu().s[22]++;
        break;
      default:
        /* istanbul ignore next */
        cov_ytutdy1pu().b[4][3]++;
        cov_ytutdy1pu().s[23]++;
        throw new Error(`Unknown agent type: ${type}`);
    }
    // Apply configuration overrides if provided
    /* istanbul ignore next */
    cov_ytutdy1pu().s[24]++;
    if (config) {
      /* istanbul ignore next */
      cov_ytutdy1pu().b[5][0]++;
      cov_ytutdy1pu().s[25]++;
      agent = this.applyConfigOverrides(agent, config);
    } else
    /* istanbul ignore next */
    {
      cov_ytutdy1pu().b[5][1]++;
    }
    // Cache the instance
    cov_ytutdy1pu().s[26]++;
    this.agentInstances.set(cacheKey, agent);
    /* istanbul ignore next */
    cov_ytutdy1pu().s[27]++;
    return agent;
  }
  /**
   * Create multiple agents at once
   *
   * @param specs - Array of agent specifications with type and optional config
   * @returns Array of created agent instances
   */
  createAgents(specs) {
    /* istanbul ignore next */
    cov_ytutdy1pu().f[3]++;
    cov_ytutdy1pu().s[28]++;
    return specs.map(spec => {
      /* istanbul ignore next */
      cov_ytutdy1pu().f[4]++;
      cov_ytutdy1pu().s[29]++;
      return this.createAgent(spec.type, spec.config);
    });
  }
  /**
   * Get all available agent types
   */
  getAvailableTypes() {
    /* istanbul ignore next */
    cov_ytutdy1pu().f[5]++;
    cov_ytutdy1pu().s[30]++;
    return ['technical', 'behavioral', 'industry'];
  }
  /**
   * Create a default interview agent set (one of each type)
   *
   * @param globalConfig - Global configuration to apply to all agents
   * @returns Object containing all three agent types
   */
  createDefaultSet(globalConfig) {
    /* istanbul ignore next */
    cov_ytutdy1pu().f[6]++;
    cov_ytutdy1pu().s[31]++;
    return {
      technical: this.createAgent('technical', globalConfig),
      behavioral: this.createAgent('behavioral', globalConfig),
      industry: this.createAgent('industry', globalConfig)
    };
  }
  /**
   * Create agents based on interview requirements
   *
   * @param requirements - Interview requirements specification
   * @returns Array of appropriate agents for the requirements
   */
  createAgentsForRequirements(requirements) {
    /* istanbul ignore next */
    cov_ytutdy1pu().f[7]++;
    const agents =
    /* istanbul ignore next */
    (cov_ytutdy1pu().s[32]++, []);
    // Always include technical for technical roles
    /* istanbul ignore next */
    cov_ytutdy1pu().s[33]++;
    if (requirements.includeTechnical !== false) {
      /* istanbul ignore next */
      cov_ytutdy1pu().b[6][0]++;
      const techConfig =
      /* istanbul ignore next */
      (cov_ytutdy1pu().s[34]++, {});
      // Adjust technical difficulty based on experience level
      /* istanbul ignore next */
      cov_ytutdy1pu().s[35]++;
      if (requirements.experienceLevel === 'entry') {
        /* istanbul ignore next */
        cov_ytutdy1pu().b[7][0]++;
        cov_ytutdy1pu().s[36]++;
        techConfig.temperature = 0.3; // More predictable, foundational questions
      } else {
        /* istanbul ignore next */
        cov_ytutdy1pu().b[7][1]++;
        cov_ytutdy1pu().s[37]++;
        if (
        /* istanbul ignore next */
        (cov_ytutdy1pu().b[9][0]++, requirements.experienceLevel === 'senior') ||
        /* istanbul ignore next */
        (cov_ytutdy1pu().b[9][1]++, requirements.experienceLevel === 'executive')) {
          /* istanbul ignore next */
          cov_ytutdy1pu().b[8][0]++;
          cov_ytutdy1pu().s[38]++;
          techConfig.temperature = 0.7; // More complex, system design focused
        } else
        /* istanbul ignore next */
        {
          cov_ytutdy1pu().b[8][1]++;
        }
      }
      /* istanbul ignore next */
      cov_ytutdy1pu().s[39]++;
      agents.push(this.createAgent('technical', techConfig));
    } else
    /* istanbul ignore next */
    {
      cov_ytutdy1pu().b[6][1]++;
    }
    // Include behavioral for management and senior roles
    cov_ytutdy1pu().s[40]++;
    if (requirements.includeBehavioral !== false) {
      /* istanbul ignore next */
      cov_ytutdy1pu().b[10][0]++;
      const behavioralConfig =
      /* istanbul ignore next */
      (cov_ytutdy1pu().s[41]++, {});
      // Adjust behavioral focus based on role type
      /* istanbul ignore next */
      cov_ytutdy1pu().s[42]++;
      if (
      /* istanbul ignore next */
      (cov_ytutdy1pu().b[12][0]++, requirements.roleType === 'management') ||
      /* istanbul ignore next */
      (cov_ytutdy1pu().b[12][1]++, requirements.roleType === 'leadership')) {
        /* istanbul ignore next */
        cov_ytutdy1pu().b[11][0]++;
        cov_ytutdy1pu().s[43]++;
        behavioralConfig.customInstructions = '\n\nFOCUS ON LEADERSHIP: Emphasize leadership scenarios, team management, strategic decision-making, and organizational impact.';
        /* istanbul ignore next */
        cov_ytutdy1pu().s[44]++;
        behavioralConfig.instructionsMode = 'append';
      } else
      /* istanbul ignore next */
      {
        cov_ytutdy1pu().b[11][1]++;
      }
      cov_ytutdy1pu().s[45]++;
      agents.push(this.createAgent('behavioral', behavioralConfig));
    } else
    /* istanbul ignore next */
    {
      cov_ytutdy1pu().b[10][1]++;
    }
    // Include industry expert for senior roles and specific industries
    cov_ytutdy1pu().s[46]++;
    if (
    /* istanbul ignore next */
    (cov_ytutdy1pu().b[14][0]++, requirements.includeIndustry !== false) && (
    /* istanbul ignore next */
    (cov_ytutdy1pu().b[14][1]++, requirements.experienceLevel === 'senior') ||
    /* istanbul ignore next */
    (cov_ytutdy1pu().b[14][2]++, requirements.experienceLevel === 'executive') ||
    /* istanbul ignore next */
    (cov_ytutdy1pu().b[14][3]++, requirements.industry))) {
      /* istanbul ignore next */
      cov_ytutdy1pu().b[13][0]++;
      const industryConfig =
      /* istanbul ignore next */
      (cov_ytutdy1pu().s[47]++, {});
      /* istanbul ignore next */
      cov_ytutdy1pu().s[48]++;
      if (requirements.industry) {
        /* istanbul ignore next */
        cov_ytutdy1pu().b[15][0]++;
        cov_ytutdy1pu().s[49]++;
        industryConfig.customInstructions = `\n\nINDUSTRY FOCUS: Prioritize questions specific to the ${requirements.industry} industry, including sector-specific regulations, competitive dynamics, and emerging trends.`;
        /* istanbul ignore next */
        cov_ytutdy1pu().s[50]++;
        industryConfig.instructionsMode = 'append';
      } else
      /* istanbul ignore next */
      {
        cov_ytutdy1pu().b[15][1]++;
      }
      cov_ytutdy1pu().s[51]++;
      agents.push(this.createAgent('industry', industryConfig));
    } else
    /* istanbul ignore next */
    {
      cov_ytutdy1pu().b[13][1]++;
    }
    cov_ytutdy1pu().s[52]++;
    return agents;
  }
  /**
   * Clear cached agent instances (useful for testing or configuration changes)
   */
  clearCache() {
    /* istanbul ignore next */
    cov_ytutdy1pu().f[8]++;
    cov_ytutdy1pu().s[53]++;
    this.agentInstances.clear();
  }
  /**
   * Get information about a specific agent type
   */
  getAgentInfo(type) {
    /* istanbul ignore next */
    cov_ytutdy1pu().f[9]++;
    const agentInfo =
    /* istanbul ignore next */
    (cov_ytutdy1pu().s[54]++, {
      technical: {
        type: 'technical',
        name: 'Technical Interviewer',
        description: 'Specializes in coding challenges, system design, and technical problem-solving assessment',
        defaultModel: 'gpt-4.5',
        capabilities: ['Coding problems and algorithms', 'System design and architecture', 'Technology stack assessment', 'Problem-solving methodology', 'Code review and best practices']
      },
      behavioral: {
        type: 'behavioral',
        name: 'Behavioral Interviewer',
        description: 'Focuses on soft skills, leadership potential, and cultural fit assessment',
        defaultModel: 'gpt-4o',
        capabilities: ['STAR method behavioral questions', 'Leadership and teamwork assessment', 'Conflict resolution scenarios', 'Communication skills evaluation', 'Cultural fit and motivation']
      },
      industry: {
        type: 'industry',
        name: 'Industry Expert',
        description: 'Evaluates industry knowledge, market awareness, and strategic thinking',
        defaultModel: 'llama-4',
        capabilities: ['Industry trends and insights', 'Regulatory and compliance knowledge', 'Competitive landscape analysis', 'Business strategy evaluation', 'Market dynamics understanding']
      }
    });
    /* istanbul ignore next */
    cov_ytutdy1pu().s[55]++;
    return agentInfo[type];
  }
  /**
   * Apply configuration overrides to an agent
   * Note: This is a simplified implementation. In a real scenario, you might
   * need to create a new instance with the overrides applied at construction time.
   */
  applyConfigOverrides(agent, config) {
    /* istanbul ignore next */
    cov_ytutdy1pu().f[10]++;
    cov_ytutdy1pu().s[56]++;
    // For now, we return the agent as-is since our BaseAgent doesn't support
    // runtime configuration changes. In a full implementation, you would either:
    // 1. Make agent configurations mutable
    // 2. Create a wrapper/decorator pattern
    // 3. Recreate the agent with new config
    // This is a placeholder for the concept
    console.log(`Applied config overrides to agent:`, config);
    /* istanbul ignore next */
    cov_ytutdy1pu().s[57]++;
    return agent;
  }
  /**
   * Generate a hash for configuration to use in caching
   */
  getConfigHash(config) {
    /* istanbul ignore next */
    cov_ytutdy1pu().f[11]++;
    cov_ytutdy1pu().s[58]++;
    if (!config) {
      /* istanbul ignore next */
      cov_ytutdy1pu().b[16][0]++;
      cov_ytutdy1pu().s[59]++;
      return 'default';
    } else
    /* istanbul ignore next */
    {
      cov_ytutdy1pu().b[16][1]++;
    }
    cov_ytutdy1pu().s[60]++;
    return JSON.stringify(config);
  }
}
/* istanbul ignore next */
cov_ytutdy1pu().s[61]++;
exports.AgentFactory = AgentFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,