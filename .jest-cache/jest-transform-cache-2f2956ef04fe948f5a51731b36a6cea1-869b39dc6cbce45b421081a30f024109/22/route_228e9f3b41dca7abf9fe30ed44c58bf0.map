{"version":3,"names":["exports","POST","cov_1ee9ppme9a","s","GET","server_1","require","SpeechSDK","__importStar","logger_1","error_utils_1","request","f","handleAsyncError","logger","api","formData","audioFile","get","b","NextResponse","json","error","status","validTypes","includes","type","warn","join","speechKey","process","env","NEXT_PUBLIC_SPEECH_KEY","AZURE_SPEECH_KEY","speechRegion","NEXT_PUBLIC_SPEECH_REGION","AZURE_SPEECH_REGION","audioBuffer","arrayBuffer","audioData","Uint8Array","speechConfig","SpeechConfig","fromSubscription","speechRecognitionLanguage","setProperty","PropertyId","SpeechServiceConnection_EnableAudioLogging","audioFormat","AudioStreamFormat","getWaveFormatPCM","audioStream","AudioInputStream","createPushStream","write","buffer","close","audioConfig","AudioConfig","fromStreamInput","recognizer","SpeechRecognizer","result","Promise","resolve","reject","recognizeOnceAsync","reason","ResultReason","RecognizedSpeech","transcript","text","trim","response","transcriptLength","length","audioSize","size","confidence","duration","NoMatch","errorMessage","Error","String","message","service","timestamp","Date","toISOString"],"sources":["/Users/dikshantvashistha/PrepBettr/app/api/voice/stream/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport * as SpeechSDK from 'microsoft-cognitiveservices-speech-sdk';\nimport { logger } from '@/lib/utils/logger';\nimport { handleAsyncError } from '@/lib/utils/error-utils';\n\n/**\n * Azure Speech-to-Text API Endpoint\n * Converts audio blobs to text using Azure Speech Services\n */\nexport async function POST(request: NextRequest) {\n  return handleAsyncError(\n    async () => {\n      logger.api.request('POST /api/voice/stream', 'Processing audio for speech-to-text');\n\n    try {\n      const formData = await request.formData();\n      const audioFile = formData.get('audio') as File;\n\n      if (!audioFile) {\n        return NextResponse.json(\n          { error: 'No audio file provided' },\n          { status: 400 }\n        );\n      }\n\n      // Validate audio file\n      const validTypes = ['audio/wav', 'audio/webm', 'audio/mp4', 'audio/ogg'];\n      if (!validTypes.includes(audioFile.type)) {\n        logger.warn('Invalid audio type received', { type: audioFile.type });\n        return NextResponse.json(\n          { error: `Invalid audio type: ${audioFile.type}. Supported: ${validTypes.join(', ')}` },\n          { status: 400 }\n        );\n      }\n\n      // Get Azure Speech credentials\n      const speechKey = process.env.NEXT_PUBLIC_SPEECH_KEY || process.env.AZURE_SPEECH_KEY;\n      const speechRegion = process.env.NEXT_PUBLIC_SPEECH_REGION || process.env.AZURE_SPEECH_REGION;\n\n      if (!speechKey || !speechRegion) {\n        logger.error('Azure Speech Service credentials not found');\n        return NextResponse.json(\n          { error: 'Speech service configuration error' },\n          { status: 500 }\n        );\n      }\n\n      // Convert File to ArrayBuffer\n      const audioBuffer = await audioFile.arrayBuffer();\n      const audioData = new Uint8Array(audioBuffer);\n\n      // Configure Azure Speech SDK\n      const speechConfig = SpeechSDK.SpeechConfig.fromSubscription(speechKey, speechRegion);\n      speechConfig.speechRecognitionLanguage = 'en-US';\n      speechConfig.setProperty(SpeechSDK.PropertyId.SpeechServiceConnection_EnableAudioLogging, \"false\");\n\n      // Create audio stream from buffer\n      const audioFormat = SpeechSDK.AudioStreamFormat.getWaveFormatPCM(16000, 16, 1);\n      const audioStream = SpeechSDK.AudioInputStream.createPushStream(audioFormat);\n      \n      // Push audio data to stream\n      audioStream.write(audioData.buffer);\n      audioStream.close();\n\n      const audioConfig = SpeechSDK.AudioConfig.fromStreamInput(audioStream);\n      const recognizer = new SpeechSDK.SpeechRecognizer(speechConfig, audioConfig);\n\n      // Perform speech recognition\n      const result = await new Promise<SpeechSDK.SpeechRecognitionResult>((resolve, reject) => {\n        recognizer.recognizeOnceAsync(\n          (result) => {\n            recognizer.close();\n            resolve(result);\n          },\n          (error) => {\n            recognizer.close();\n            reject(error);\n          }\n        );\n      });\n\n      // Process recognition result\n      if (result.reason === SpeechSDK.ResultReason.RecognizedSpeech) {\n        const transcript = result.text.trim();\n        \n        logger.api.response('POST /api/voice/stream', 200, {\n          transcriptLength: transcript.length,\n          audioSize: audioFile.size\n        });\n\n        return NextResponse.json({\n          text: transcript,\n          confidence: 0.95, // Azure doesn't always provide confidence, use default\n          duration: audioFile.size / 16000 // Rough estimation\n        });\n      } else if (result.reason === SpeechSDK.ResultReason.NoMatch) {\n        logger.warn('No speech detected in audio', { audioSize: audioFile.size });\n        return NextResponse.json({\n          text: '',\n          confidence: 0,\n          error: 'No speech detected'\n        });\n      } else {\n        const errorMessage = `Speech recognition failed: ${result.reason}`;\n        logger.error(errorMessage, { reason: result.reason });\n        return NextResponse.json(\n          { error: errorMessage },\n          { status: 422 }\n        );\n      }\n\n    } catch (error) {\n      logger.error('Speech-to-text processing failed', error instanceof Error ? error : new Error(String(error)));\n      \n      // Provide helpful error responses\n      if (error instanceof Error) {\n        if (error.message.includes('authentication')) {\n          return NextResponse.json(\n            { error: 'Speech service authentication failed' },\n            { status: 401 }\n          );\n        }\n        if (error.message.includes('quota')) {\n          return NextResponse.json(\n            { error: 'Speech service quota exceeded' },\n            { status: 429 }\n          );\n        }\n      }\n\n      return NextResponse.json(\n        { error: 'Internal speech processing error' },\n        { status: 500 }\n      );\n    }\n  },\n  'POST /api/voice/stream'\n  );\n}\n\n/**\n * Health check endpoint for speech service\n */\nexport async function GET() {\n  return NextResponse.json({\n    service: 'Azure Speech-to-Text',\n    status: 'available',\n    timestamp: new Date().toISOString()\n  });\n}\n"],"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","ignoreList":[]}