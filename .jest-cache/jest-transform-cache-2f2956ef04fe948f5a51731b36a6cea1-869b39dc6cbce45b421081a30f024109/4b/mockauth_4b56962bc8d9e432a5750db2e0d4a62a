6f3d251a992ef65979f63a098142ea9a
/* istanbul ignore next */
function cov_2l0jd7vr92() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/mock-auth.js";
  var hash = "3297b6539e5e48517a132eaed9853f4521c81281";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/mock-auth.js",
    statementMap: {
      "0": {
        start: {
          line: 9,
          column: 19
        },
        end: {
          line: 24,
          column: 1
        }
      },
      "1": {
        start: {
          line: 27,
          column: 22
        },
        end: {
          line: 27,
          column: 26
        }
      },
      "2": {
        start: {
          line: 28,
          column: 24
        },
        end: {
          line: 28,
          column: 26
        }
      },
      "3": {
        start: {
          line: 33,
          column: 24
        },
        end: {
          line: 91,
          column: 1
        }
      },
      "4": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 38,
          column: 57
        }
      },
      "5": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 41,
          column: 60
        }
      },
      "6": {
        start: {
          line: 41,
          column: 33
        },
        end: {
          line: 41,
          column: 58
        }
      },
      "7": {
        start: {
          line: 44,
          column: 21
        },
        end: {
          line: 44,
          column: 78
        }
      },
      "8": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 45,
          column: 31
        }
      },
      "9": {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 46,
          column: 36
        }
      },
      "10": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 48,
          column: 57
        }
      },
      "11": {
        start: {
          line: 51,
          column: 4
        },
        end: {
          line: 51,
          column: 62
        }
      },
      "12": {
        start: {
          line: 51,
          column: 42
        },
        end: {
          line: 51,
          column: 60
        }
      },
      "13": {
        start: {
          line: 53,
          column: 4
        },
        end: {
          line: 59,
          column: 6
        }
      },
      "14": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 64,
          column: 43
        }
      },
      "15": {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 65,
          column: 27
        }
      },
      "16": {
        start: {
          line: 66,
          column: 4
        },
        end: {
          line: 66,
          column: 32
        }
      },
      "17": {
        start: {
          line: 69,
          column: 4
        },
        end: {
          line: 69,
          column: 58
        }
      },
      "18": {
        start: {
          line: 69,
          column: 42
        },
        end: {
          line: 69,
          column: 56
        }
      },
      "19": {
        start: {
          line: 74,
          column: 4
        },
        end: {
          line: 74,
          column: 59
        }
      },
      "20": {
        start: {
          line: 75,
          column: 4
        },
        end: {
          line: 75,
          column: 37
        }
      },
      "21": {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 78,
          column: 30
        }
      },
      "22": {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 83,
          column: 6
        }
      },
      "23": {
        start: {
          line: 82,
          column: 6
        },
        end: {
          line: 82,
          column: 86
        }
      },
      "24": {
        start: {
          line: 82,
          column: 63
        },
        end: {
          line: 82,
          column: 84
        }
      },
      "25": {
        start: {
          line: 88,
          column: 4
        },
        end: {
          line: 88,
          column: 63
        }
      },
      "26": {
        start: {
          line: 89,
          column: 4
        },
        end: {
          line: 89,
          column: 52
        }
      },
      "27": {
        start: {
          line: 96,
          column: 34
        },
        end: {
          line: 103,
          column: 1
        }
      },
      "28": {
        start: {
          line: 98,
          column: 4
        },
        end: {
          line: 98,
          column: 74
        }
      },
      "29": {
        start: {
          line: 101,
          column: 4
        },
        end: {
          line: 101,
          column: 63
        }
      },
      "30": {
        start: {
          line: 109,
          column: 2
        },
        end: {
          line: 111,
          column: 3
        }
      },
      "31": {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 110,
          column: 59
        }
      },
      "32": {
        start: {
          line: 113,
          column: 17
        },
        end: {
          line: 117,
          column: 3
        }
      },
      "33": {
        start: {
          line: 119,
          column: 14
        },
        end: {
          line: 119,
          column: 43
        }
      },
      "34": {
        start: {
          line: 120,
          column: 18
        },
        end: {
          line: 140,
          column: 3
        }
      },
      "35": {
        start: {
          line: 143,
          column: 24
        },
        end: {
          line: 143,
          column: 116
        }
      },
      "36": {
        start: {
          line: 143,
          column: 79
        },
        end: {
          line: 143,
          column: 115
        }
      },
      "37": {
        start: {
          line: 144,
          column: 25
        },
        end: {
          line: 144,
          column: 118
        }
      },
      "38": {
        start: {
          line: 144,
          column: 81
        },
        end: {
          line: 144,
          column: 117
        }
      },
      "39": {
        start: {
          line: 145,
          column: 24
        },
        end: {
          line: 145,
          column: 87
        }
      },
      "40": {
        start: {
          line: 147,
          column: 14
        },
        end: {
          line: 147,
          column: 67
        }
      },
      "41": {
        start: {
          line: 148,
          column: 2
        },
        end: {
          line: 152,
          column: 5
        }
      },
      "42": {
        start: {
          line: 154,
          column: 2
        },
        end: {
          line: 154,
          column: 13
        }
      },
      "43": {
        start: {
          line: 161,
          column: 32
        },
        end: {
          line: 164,
          column: 3
        }
      },
      "44": {
        start: {
          line: 166,
          column: 24
        },
        end: {
          line: 166,
          column: 62
        }
      },
      "45": {
        start: {
          line: 167,
          column: 20
        },
        end: {
          line: 167,
          column: 68
        }
      },
      "46": {
        start: {
          line: 169,
          column: 2
        },
        end: {
          line: 169,
          column: 62
        }
      },
      "47": {
        start: {
          line: 176,
          column: 2
        },
        end: {
          line: 176,
          column: 70
        }
      },
      "48": {
        start: {
          line: 178,
          column: 2
        },
        end: {
          line: 186,
          column: 4
        }
      },
      "49": {
        start: {
          line: 179,
          column: 16
        },
        end: {
          line: 179,
          column: 24
        }
      },
      "50": {
        start: {
          line: 180,
          column: 26
        },
        end: {
          line: 180,
          column: 44
        }
      },
      "51": {
        start: {
          line: 181,
          column: 27
        },
        end: {
          line: 181,
          column: 31
        }
      },
      "52": {
        start: {
          line: 183,
          column: 6
        },
        end: {
          line: 183,
          column: 70
        }
      },
      "53": {
        start: {
          line: 184,
          column: 6
        },
        end: {
          line: 184,
          column: 31
        }
      },
      "54": {
        start: {
          line: 192,
          column: 31
        },
        end: {
          line: 228,
          column: 1
        }
      },
      "55": {
        start: {
          line: 195,
          column: 18
        },
        end: {
          line: 195,
          column: 39
        }
      },
      "56": {
        start: {
          line: 198,
          column: 4
        },
        end: {
          line: 213,
          column: 5
        }
      },
      "57": {
        start: {
          line: 199,
          column: 6
        },
        end: {
          line: 208,
          column: 9
        }
      },
      "58": {
        start: {
          line: 210,
          column: 6
        },
        end: {
          line: 210,
          column: 55
        }
      },
      "59": {
        start: {
          line: 212,
          column: 6
        },
        end: {
          line: 212,
          column: 61
        }
      },
      "60": {
        start: {
          line: 218,
          column: 4
        },
        end: {
          line: 226,
          column: 5
        }
      },
      "61": {
        start: {
          line: 219,
          column: 6
        },
        end: {
          line: 221,
          column: 9
        }
      },
      "62": {
        start: {
          line: 223,
          column: 6
        },
        end: {
          line: 223,
          column: 59
        }
      },
      "63": {
        start: {
          line: 225,
          column: 6
        },
        end: {
          line: 225,
          column: 63
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 37,
            column: 19
          },
          end: {
            line: 37,
            column: 20
          }
        },
        loc: {
          start: {
            line: 37,
            column: 45
          },
          end: {
            line: 60,
            column: 3
          }
        },
        line: 37
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 41,
            column: 22
          },
          end: {
            line: 41,
            column: 23
          }
        },
        loc: {
          start: {
            line: 41,
            column: 33
          },
          end: {
            line: 41,
            column: 58
          }
        },
        line: 41
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 51,
            column: 30
          },
          end: {
            line: 51,
            column: 31
          }
        },
        loc: {
          start: {
            line: 51,
            column: 42
          },
          end: {
            line: 51,
            column: 60
          }
        },
        line: 51
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 63,
            column: 11
          },
          end: {
            line: 63,
            column: 12
          }
        },
        loc: {
          start: {
            line: 63,
            column: 23
          },
          end: {
            line: 70,
            column: 3
          }
        },
        line: 63
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 69,
            column: 30
          },
          end: {
            line: 69,
            column: 31
          }
        },
        loc: {
          start: {
            line: 69,
            column: 42
          },
          end: {
            line: 69,
            column: 56
          }
        },
        line: 69
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 73,
            column: 22
          },
          end: {
            line: 73,
            column: 23
          }
        },
        loc: {
          start: {
            line: 73,
            column: 36
          },
          end: {
            line: 84,
            column: 3
          }
        },
        line: 73
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 81,
            column: 11
          },
          end: {
            line: 81,
            column: 12
          }
        },
        loc: {
          start: {
            line: 81,
            column: 17
          },
          end: {
            line: 83,
            column: 5
          }
        },
        line: 81
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 82,
            column: 51
          },
          end: {
            line: 82,
            column: 52
          }
        },
        loc: {
          start: {
            line: 82,
            column: 63
          },
          end: {
            line: 82,
            column: 84
          }
        },
        line: 82
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 87,
            column: 14
          },
          end: {
            line: 87,
            column: 15
          }
        },
        loc: {
          start: {
            line: 87,
            column: 52
          },
          end: {
            line: 90,
            column: 3
          }
        },
        line: 87
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 97,
            column: 23
          },
          end: {
            line: 97,
            column: 24
          }
        },
        loc: {
          start: {
            line: 97,
            column: 35
          },
          end: {
            line: 99,
            column: 3
          }
        },
        line: 97
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 100,
            column: 12
          },
          end: {
            line: 100,
            column: 13
          }
        },
        loc: {
          start: {
            line: 100,
            column: 23
          },
          end: {
            line: 102,
            column: 3
          }
        },
        line: 100
      },
      "11": {
        name: "generateMockJWT",
        decl: {
          start: {
            line: 108,
            column: 9
          },
          end: {
            line: 108,
            column: 24
          }
        },
        loc: {
          start: {
            line: 108,
            column: 31
          },
          end: {
            line: 155,
            column: 1
          }
        },
        line: 108
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 143,
            column: 72
          },
          end: {
            line: 143,
            column: 73
          }
        },
        loc: {
          start: {
            line: 143,
            column: 79
          },
          end: {
            line: 143,
            column: 115
          }
        },
        line: 143
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 144,
            column: 74
          },
          end: {
            line: 144,
            column: 75
          }
        },
        loc: {
          start: {
            line: 144,
            column: 81
          },
          end: {
            line: 144,
            column: 117
          }
        },
        line: 144
      },
      "14": {
        name: "shouldUseMockAuth",
        decl: {
          start: {
            line: 160,
            column: 16
          },
          end: {
            line: 160,
            column: 33
          }
        },
        loc: {
          start: {
            line: 160,
            column: 36
          },
          end: {
            line: 170,
            column: 1
          }
        },
        line: 160
      },
      "15": {
        name: "getMockFirebaseServices",
        decl: {
          start: {
            line: 175,
            column: 16
          },
          end: {
            line: 175,
            column: 39
          }
        },
        loc: {
          start: {
            line: 175,
            column: 42
          },
          end: {
            line: 187,
            column: 1
          }
        },
        line: 175
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 179,
            column: 10
          },
          end: {
            line: 179,
            column: 11
          }
        },
        loc: {
          start: {
            line: 179,
            column: 16
          },
          end: {
            line: 179,
            column: 24
          }
        },
        line: 179
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 180,
            column: 20
          },
          end: {
            line: 180,
            column: 21
          }
        },
        loc: {
          start: {
            line: 180,
            column: 26
          },
          end: {
            line: 180,
            column: 44
          }
        },
        line: 180
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 181,
            column: 21
          },
          end: {
            line: 181,
            column: 22
          }
        },
        loc: {
          start: {
            line: 181,
            column: 27
          },
          end: {
            line: 181,
            column: 31
          }
        },
        line: 181
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 182,
            column: 29
          },
          end: {
            line: 182,
            column: 30
          }
        },
        loc: {
          start: {
            line: 182,
            column: 41
          },
          end: {
            line: 185,
            column: 5
          }
        },
        line: 182
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 194,
            column: 14
          },
          end: {
            line: 194,
            column: 15
          }
        },
        loc: {
          start: {
            line: 194,
            column: 30
          },
          end: {
            line: 214,
            column: 3
          }
        },
        line: 194
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 217,
            column: 16
          },
          end: {
            line: 217,
            column: 17
          }
        },
        loc: {
          start: {
            line: 217,
            column: 28
          },
          end: {
            line: 227,
            column: 3
          }
        },
        line: 217
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 87,
            column: 27
          },
          end: {
            line: 87,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 87,
            column: 42
          },
          end: {
            line: 87,
            column: 47
          }
        }],
        line: 87
      },
      "1": {
        loc: {
          start: {
            line: 89,
            column: 27
          },
          end: {
            line: 89,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 89,
            column: 27
          },
          end: {
            line: 89,
            column: 31
          }
        }, {
          start: {
            line: 89,
            column: 35
          },
          end: {
            line: 89,
            column: 50
          }
        }],
        line: 89
      },
      "2": {
        loc: {
          start: {
            line: 109,
            column: 2
          },
          end: {
            line: 111,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 109,
            column: 2
          },
          end: {
            line: 111,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 109
      },
      "3": {
        loc: {
          start: {
            line: 162,
            column: 4
          },
          end: {
            line: 163,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 162,
            column: 4
          },
          end: {
            line: 162,
            column: 44
          }
        }, {
          start: {
            line: 163,
            column: 4
          },
          end: {
            line: 163,
            column: 47
          }
        }],
        line: 162
      },
      "4": {
        loc: {
          start: {
            line: 169,
            column: 9
          },
          end: {
            line: 169,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 169,
            column: 9
          },
          end: {
            line: 169,
            column: 31
          }
        }, {
          start: {
            line: 169,
            column: 35
          },
          end: {
            line: 169,
            column: 44
          }
        }, {
          start: {
            line: 169,
            column: 48
          },
          end: {
            line: 169,
            column: 61
          }
        }],
        line: 169
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0]
    },
    inputSourceMap: null,
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3297b6539e5e48517a132eaed9853f4521c81281"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2l0jd7vr92 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2l0jd7vr92();
/**
 * Mock Authentication Service
 * 
 * Provides a fallback authentication system when Firebase is not properly configured
 * This allows development to continue without proper Firebase credentials
 */

// Mock user data
const MOCK_USERS =
/* istanbul ignore next */
(cov_2l0jd7vr92().s[0]++, [{
  uid: 'mock-user-1',
  email: 'demo@prepbettr.com',
  displayName: 'Demo User',
  emailVerified: true,
  photoURL: 'https://via.placeholder.com/150/2563eb/ffffff?text=DU'
}, {
  uid: 'mock-user-2',
  email: 'test@prepbettr.com',
  displayName: 'Test User',
  emailVerified: true,
  photoURL: 'https://via.placeholder.com/150/059669/ffffff?text=TU'
}]);

// Current mock user session
let currentMockUser =
/* istanbul ignore next */
(cov_2l0jd7vr92().s[1]++, null);
let mockAuthListeners =
/* istanbul ignore next */
(cov_2l0jd7vr92().s[2]++, []);

/**
 * Mock Firebase Auth Methods
 */
export const mockAuth =
/* istanbul ignore next */
(cov_2l0jd7vr92().s[3]++, {
  currentUser: null,
  // Mock sign in with popup (Google)
  signInWithPopup: async (auth, provider) => {
    /* istanbul ignore next */
    cov_2l0jd7vr92().f[0]++;
    cov_2l0jd7vr92().s[4]++;
    console.log('🔒 Mock: Simulating Google sign-in...');

    // Simulate loading delay
    /* istanbul ignore next */
    cov_2l0jd7vr92().s[5]++;
    await new Promise(resolve => {
      /* istanbul ignore next */
      cov_2l0jd7vr92().f[1]++;
      cov_2l0jd7vr92().s[6]++;
      return setTimeout(resolve, 1500);
    });

    // Select a random mock user
    const mockUser =
    /* istanbul ignore next */
    (cov_2l0jd7vr92().s[7]++, MOCK_USERS[Math.floor(Math.random() * MOCK_USERS.length)]);
    /* istanbul ignore next */
    cov_2l0jd7vr92().s[8]++;
    currentMockUser = mockUser;
    /* istanbul ignore next */
    cov_2l0jd7vr92().s[9]++;
    mockAuth.currentUser = mockUser;
    /* istanbul ignore next */
    cov_2l0jd7vr92().s[10]++;
    console.log('🔒 Mock: Sign-in successful', mockUser);

    // Notify listeners
    /* istanbul ignore next */
    cov_2l0jd7vr92().s[11]++;
    mockAuthListeners.forEach(listener => {
      /* istanbul ignore next */
      cov_2l0jd7vr92().f[2]++;
      cov_2l0jd7vr92().s[12]++;
      return listener(mockUser);
    });
    /* istanbul ignore next */
    cov_2l0jd7vr92().s[13]++;
    return {
      user: mockUser,
      credential: {
        accessToken: 'mock-access-token',
        idToken: generateMockJWT(mockUser)
      }
    };
  },
  // Mock sign out
  signOut: async () => {
    /* istanbul ignore next */
    cov_2l0jd7vr92().f[3]++;
    cov_2l0jd7vr92().s[14]++;
    console.log('🔒 Mock: Signing out...');
    /* istanbul ignore next */
    cov_2l0jd7vr92().s[15]++;
    currentMockUser = null;
    /* istanbul ignore next */
    cov_2l0jd7vr92().s[16]++;
    mockAuth.currentUser = null;

    // Notify listeners
    /* istanbul ignore next */
    cov_2l0jd7vr92().s[17]++;
    mockAuthListeners.forEach(listener => {
      /* istanbul ignore next */
      cov_2l0jd7vr92().f[4]++;
      cov_2l0jd7vr92().s[18]++;
      return listener(null);
    });
  },
  // Mock auth state listener
  onAuthStateChanged: callback => {
    /* istanbul ignore next */
    cov_2l0jd7vr92().f[5]++;
    cov_2l0jd7vr92().s[19]++;
    console.log('🔒 Mock: Auth state listener registered');
    /* istanbul ignore next */
    cov_2l0jd7vr92().s[20]++;
    mockAuthListeners.push(callback);

    // Immediately call with current user
    /* istanbul ignore next */
    cov_2l0jd7vr92().s[21]++;
    callback(currentMockUser);

    // Return unsubscribe function
    /* istanbul ignore next */
    cov_2l0jd7vr92().s[22]++;
    return () => {
      /* istanbul ignore next */
      cov_2l0jd7vr92().f[6]++;
      cov_2l0jd7vr92().s[23]++;
      mockAuthListeners = mockAuthListeners.filter(listener => {
        /* istanbul ignore next */
        cov_2l0jd7vr92().f[7]++;
        cov_2l0jd7vr92().s[24]++;
        return listener !== callback;
      });
    };
  },
  // Mock get ID token
  getIdToken: async (user, forceRefresh =
  /* istanbul ignore next */
  (cov_2l0jd7vr92().b[0][0]++, false)) => {
    /* istanbul ignore next */
    cov_2l0jd7vr92().f[8]++;
    cov_2l0jd7vr92().s[25]++;
    console.log('🔒 Mock: Getting ID token', {
      forceRefresh
    });
    /* istanbul ignore next */
    cov_2l0jd7vr92().s[26]++;
    return generateMockJWT(
    /* istanbul ignore next */
    (cov_2l0jd7vr92().b[1][0]++, user) ||
    /* istanbul ignore next */
    (cov_2l0jd7vr92().b[1][1]++, currentMockUser));
  }
});

/**
 * Mock Google Auth Provider
 */
export const mockGoogleProvider =
/* istanbul ignore next */
(cov_2l0jd7vr92().s[27]++, {
  setCustomParameters: params => {
    /* istanbul ignore next */
    cov_2l0jd7vr92().f[9]++;
    cov_2l0jd7vr92().s[28]++;
    console.log('🔒 Mock: Google provider custom parameters set', params);
  },
  addScope: scope => {
    /* istanbul ignore next */
    cov_2l0jd7vr92().f[10]++;
    cov_2l0jd7vr92().s[29]++;
    console.log('🔒 Mock: Google provider scope added', scope);
  }
});

/**
 * Generate a mock JWT token for testing
 */
function generateMockJWT(user) {
  /* istanbul ignore next */
  cov_2l0jd7vr92().f[11]++;
  cov_2l0jd7vr92().s[30]++;
  if (!user) {
    /* istanbul ignore next */
    cov_2l0jd7vr92().b[2][0]++;
    cov_2l0jd7vr92().s[31]++;
    throw new Error('No user provided for JWT generation');
  } else
  /* istanbul ignore next */
  {
    cov_2l0jd7vr92().b[2][1]++;
  }
  const header =
  /* istanbul ignore next */
  (cov_2l0jd7vr92().s[32]++, {
    alg: 'RS256',
    kid: 'mock-key-id',
    typ: 'JWT'
  });
  const now =
  /* istanbul ignore next */
  (cov_2l0jd7vr92().s[33]++, Math.floor(Date.now() / 1000));
  const payload =
  /* istanbul ignore next */
  (cov_2l0jd7vr92().s[34]++, {
    iss: 'https://securetoken.google.com/prepbettr',
    aud: 'prepbettr',
    auth_time: now - 60,
    user_id: user.uid,
    uid: user.uid,
    sub: user.uid,
    iat: now,
    exp: now + 60 * 60,
    // 1 hour
    email: user.email,
    email_verified: user.emailVerified,
    name: user.displayName,
    picture: user.photoURL,
    firebase: {
      identities: {
        'google.com': [user.uid],
        email: [user.email]
      },
      sign_in_provider: 'google.com'
    }
  });

  // Create a mock JWT (base64url encoded header.payload.signature)
  const encodedHeader =
  /* istanbul ignore next */
  (cov_2l0jd7vr92().s[35]++, btoa(JSON.stringify(header)).replace(/[+\/=]/g, m => {
    /* istanbul ignore next */
    cov_2l0jd7vr92().f[12]++;
    cov_2l0jd7vr92().s[36]++;
    return {
      '+': '-',
      '/': '_',
      '=': ''
    }[m];
  }));
  const encodedPayload =
  /* istanbul ignore next */
  (cov_2l0jd7vr92().s[37]++, btoa(JSON.stringify(payload)).replace(/[+\/=]/g, m => {
    /* istanbul ignore next */
    cov_2l0jd7vr92().f[13]++;
    cov_2l0jd7vr92().s[38]++;
    return {
      '+': '-',
      '/': '_',
      '=': ''
    }[m];
  }));
  const mockSignature =
  /* istanbul ignore next */
  (cov_2l0jd7vr92().s[39]++, 'mock-signature-' + Math.random().toString(36).substring(2, 15));
  const jwt =
  /* istanbul ignore next */
  (cov_2l0jd7vr92().s[40]++, `${encodedHeader}.${encodedPayload}.${mockSignature}`);
  /* istanbul ignore next */
  cov_2l0jd7vr92().s[41]++;
  console.log('🔒 Mock: Generated JWT token', {
    user: user.email,
    expires: new Date(payload.exp * 1000).toISOString(),
    tokenPreview: jwt.substring(0, 50) + '...'
  });
  /* istanbul ignore next */
  cov_2l0jd7vr92().s[42]++;
  return jwt;
}

/**
 * Check if we should use mock authentication
 */
export function shouldUseMockAuth() {
  /* istanbul ignore next */
  cov_2l0jd7vr92().f[14]++;
  const hasRealFirebaseConfig =
  /* istanbul ignore next */
  (cov_2l0jd7vr92().s[43]++, !!(
  /* istanbul ignore next */
  (cov_2l0jd7vr92().b[3][0]++, process.env.NEXT_PUBLIC_FIREBASE_API_KEY) ||
  /* istanbul ignore next */
  (cov_2l0jd7vr92().b[3][1]++, process.env.NEXT_PUBLIC_FIREBASE_CLIENT_KEY)));
  const isDevelopment =
  /* istanbul ignore next */
  (cov_2l0jd7vr92().s[44]++, process.env.NODE_ENV === 'development');
  const forceMock =
  /* istanbul ignore next */
  (cov_2l0jd7vr92().s[45]++, process.env.NEXT_PUBLIC_USE_MOCK_AUTH === 'true');
  /* istanbul ignore next */
  cov_2l0jd7vr92().s[46]++;
  return /* istanbul ignore next */(cov_2l0jd7vr92().b[4][0]++, !hasRealFirebaseConfig) ||
  /* istanbul ignore next */
  (cov_2l0jd7vr92().b[4][1]++, forceMock) ||
  /* istanbul ignore next */
  (cov_2l0jd7vr92().b[4][2]++, isDevelopment);
}

/**
 * Get mock authentication services
 */
export function getMockFirebaseServices() {
  /* istanbul ignore next */
  cov_2l0jd7vr92().f[15]++;
  cov_2l0jd7vr92().s[47]++;
  console.log('🔒 Mock: Using mock Firebase authentication services');
  /* istanbul ignore next */
  cov_2l0jd7vr92().s[48]++;
  return {
    auth: () => {
      /* istanbul ignore next */
      cov_2l0jd7vr92().f[16]++;
      cov_2l0jd7vr92().s[49]++;
      return mockAuth;
    },
    googleProvider: () => {
      /* istanbul ignore next */
      cov_2l0jd7vr92().f[17]++;
      cov_2l0jd7vr92().s[50]++;
      return mockGoogleProvider;
    },
    isFirebaseReady: () => {
      /* istanbul ignore next */
      cov_2l0jd7vr92().f[18]++;
      cov_2l0jd7vr92().s[51]++;
      return true;
    },
    initializeFirebaseAsync: async () => {
      /* istanbul ignore next */
      cov_2l0jd7vr92().f[19]++;
      cov_2l0jd7vr92().s[52]++;
      console.log('🔒 Mock: Firebase async initialization completed');
      /* istanbul ignore next */
      cov_2l0jd7vr92().s[53]++;
      return Promise.resolve();
    }
  };
}

/**
 * Session management for mock auth
 */
export const mockAuthSession =
/* istanbul ignore next */
(cov_2l0jd7vr92().s[54]++, {
  // Set mock session cookie
  setSession: async user => {
    /* istanbul ignore next */
    cov_2l0jd7vr92().f[20]++;
    const token =
    /* istanbul ignore next */
    (cov_2l0jd7vr92().s[55]++, generateMockJWT(user));

    // Set session cookie via API
    /* istanbul ignore next */
    cov_2l0jd7vr92().s[56]++;
    try {
      /* istanbul ignore next */
      cov_2l0jd7vr92().s[57]++;
      await fetch('/api/auth/signin', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          idToken: token,
          mock: true
        })
      });
      /* istanbul ignore next */
      cov_2l0jd7vr92().s[58]++;
      console.log('🔒 Mock: Session set successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_2l0jd7vr92().s[59]++;
      console.error('🔒 Mock: Failed to set session', error);
    }
  },
  // Clear mock session cookie
  clearSession: async () => {
    /* istanbul ignore next */
    cov_2l0jd7vr92().f[21]++;
    cov_2l0jd7vr92().s[60]++;
    try {
      /* istanbul ignore next */
      cov_2l0jd7vr92().s[61]++;
      await fetch('/api/auth/signout', {
        method: 'POST'
      });
      /* istanbul ignore next */
      cov_2l0jd7vr92().s[62]++;
      console.log('🔒 Mock: Session cleared successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_2l0jd7vr92().s[63]++;
      console.error('🔒 Mock: Failed to clear session', error);
    }
  }
});
export default {
  mockAuth,
  mockGoogleProvider,
  shouldUseMockAuth,
  getMockFirebaseServices,
  mockAuthSession
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,