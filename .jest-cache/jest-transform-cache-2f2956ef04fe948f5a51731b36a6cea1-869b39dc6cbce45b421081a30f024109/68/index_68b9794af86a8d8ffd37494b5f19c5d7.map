{"version":3,"names":["cov_1pwd3cutoc","actualCoverage","app","s","require","queueService","automationLogger","autoApplyMetrics","OpenAI","fetchAzureSecrets","v4","uuidv4","headlessBrowserService","azureCosmosService","azureOpenAIClient","initializeAzureOpenAI","f","b","secrets","azureOpenAIKey","azureOpenAIEndpoint","console","warn","apiKey","baseURL","azureOpenAIDeployment","defaultQuery","defaultHeaders","log","error","storageQueue","queueName","connection","handler","queueItem","context","applicationData","JSON","parse","userId","jobId","jobListing","requestId","autoApply","logInfo","userProfile","getUserProfile","Error","existingApplication","checkExistingApplication","logWarning","relevancyScore","calculateJobRelevancy","autoApplySettings","getUserAutoApplySettings","autoApplyThreshold","threshold","todayApplications","getTodayApplicationCount","dailyApplicationLimit","dailyLimit","trackVolumeMetrics","dailyApplications","userTier","coverLetter","generateCoverLetter","tailoredResume","tailorResume","resume","applicationResult","submitJobApplication","success","logApplicationSubmitted","trackApplicationAttempt","applicationId","portal","jobPortal","name","duration","automationDetails","attempts","method","updatedTodayApplications","sendApplicationSubmittedNotification","id","jobTitle","title","company","appliedAt","Date","autoApplied","coverLetterUsed","resumeTailored","followUpEnabled","scheduleFollowUp","followUpSchedule","logError","message","errorMessage","client","calculateFallbackRelevancy","prompt","description","requirements","join","skills","experience","map","exp","position","targetRoles","completion","chat","completions","create","model","messages","role","content","temperature","max_tokens","scoreText","choices","trim","score","parseInt","isNaN","Math","max","min","jobText","toLowerCase","matchedSkills","filter","skill","includes","length","generateFallbackCoverLetter","summary","slice","originalResume","easy_apply","final_url","headlessResult","applyToJob","timeout","screenshots","retryOnFailure","applicationRecord","status","applicationMethod","jobUrl","formData","screenshotPath","createdAt","updatedAt","_partitionKey","storeJobApplication","reason","requiresManualAction","followUpMessage","type","scheduledDate","now","initialDays","toISOString","addMessage","queues","FOLLOW_UP_REMINDERS","visibilityTimeout","email","technologies","secondDays","initialize","existingApplications","queryDocuments","value","today","setHours","createDocument","jobNotificationIntegration","notifyApplicationSubmitted","module","exports"],"sources":["index.js"],"sourcesContent":["const { app } = require('@azure/functions');\nconst queueService = require('../lib/services/queue-service');\nconst automationLogger = require('../lib/services/automation-logs');\nconst autoApplyMetrics = require('../lib/utils/auto-apply-metrics');\nconst OpenAI = require('openai');\nconst { fetchAzureSecrets } = require('../lib/azure-config');\nconst { v4: uuidv4 } = require('uuid');\nconst headlessBrowserService = require('../lib/services/headless-browser-service');\nconst { azureCosmosService } = require('../../lib/services/azure-cosmos-service');\n\n// Azure OpenAI client - will be initialized from Key Vault secrets\nlet azureOpenAIClient = null;\n\n/**\n * Initialize Azure OpenAI client\n */\nasync function initializeAzureOpenAI() {\n    if (azureOpenAIClient) {\n        return azureOpenAIClient;\n    }\n\n    try {\n        const secrets = await fetchAzureSecrets();\n        \n        if (!secrets.azureOpenAIKey || !secrets.azureOpenAIEndpoint) {\n            console.warn('⚠️ Azure OpenAI credentials not available, using fallback');\n            return null;\n        }\n\n        azureOpenAIClient = new OpenAI({\n            apiKey: secrets.azureOpenAIKey,\n            baseURL: `${secrets.azureOpenAIEndpoint}/openai/deployments/${secrets.azureOpenAIDeployment}`,\n            defaultQuery: { 'api-version': '2024-08-01-preview' },\n            defaultHeaders: {\n                'api-key': secrets.azureOpenAIKey,\n            },\n        });\n\n        console.log('✅ Azure OpenAI client initialized for application worker');\n        return azureOpenAIClient;\n    } catch (error) {\n        console.error('❌ Failed to initialize Azure OpenAI client:', error);\n        return null;\n    }\n}\n\n// Queue trigger function for processing job applications\napp.storageQueue('applicationWorker', {\n    queueName: 'process-applications',\n    connection: 'AzureWebJobsStorage',\n    handler: async (queueItem, context) => {\n        context.log('Application Worker processing queue item:', queueItem);\n\n        try {\n            const applicationData = typeof queueItem === 'string' ? JSON.parse(queueItem) : queueItem;\n            const { userId, jobId, jobListing, requestId, autoApply } = applicationData;\n\n            await automationLogger.logInfo(\n                'application_processing_started',\n                `Starting application processing for job ${jobId}`,\n                { userId, jobId, requestId, autoApply }\n            );\n\n            // Get user profile and preferences\n            const userProfile = await getUserProfile(userId);\n            if (!userProfile) {\n                throw new Error(`User profile not found for user ${userId}`);\n            }\n\n            // Check if user has already applied to this job\n            const existingApplication = await checkExistingApplication(userId, jobId);\n            if (existingApplication) {\n                context.log(`User ${userId} has already applied to job ${jobId}`);\n                await automationLogger.logWarning(\n                    'application_duplicate_skipped',\n                    'Skipping duplicate application',\n                    { userId, jobId }\n                );\n                return;\n            }\n\n            // Calculate job relevancy if not already done\n            let relevancyScore = jobListing.relevancyScore;\n            if (!relevancyScore) {\n                relevancyScore = await calculateJobRelevancy(jobListing, userProfile);\n                jobListing.relevancyScore = relevancyScore;\n            }\n\n            // Check if job meets auto-apply threshold\n            if (autoApply) {\n                const autoApplySettings = await getUserAutoApplySettings(userId);\n                if (relevancyScore < autoApplySettings.autoApplyThreshold) {\n                    context.log(`Job relevancy score ${relevancyScore} below threshold ${autoApplySettings.autoApplyThreshold}`);\n                    await automationLogger.logInfo(\n                        'application_skipped_threshold',\n                        `Job skipped due to low relevancy score: ${relevancyScore}`,\n                        { userId, jobId, relevancyScore, threshold: autoApplySettings.autoApplyThreshold }\n                    );\n                    return;\n                }\n\n            // Check daily application limit\n            const todayApplications = await getTodayApplicationCount(userId);\n            if (todayApplications >= autoApplySettings.dailyApplicationLimit) {\n                context.log(`User ${userId} has reached daily application limit`);\n                await automationLogger.logWarning(\n                    'application_daily_limit_reached',\n                    'Daily application limit reached',\n                    { userId, todayApplications, dailyLimit: autoApplySettings.dailyApplicationLimit }\n                );\n                \n                // Track volume metrics\n                autoApplyMetrics.trackVolumeMetrics({\n                    userId,\n                    dailyApplications: todayApplications,\n                    dailyLimit: autoApplySettings.dailyApplicationLimit,\n                    userTier: 'free' // Would come from user profile\n                });\n                \n                return;\n            }\n            }\n\n            // Generate cover letter\n            const coverLetter = await generateCoverLetter(jobListing, userProfile);\n            \n            // Tailor resume for the job\n            const tailoredResume = await tailorResume(userProfile.resume, jobListing);\n\n            // Submit application\n            const applicationResult = await submitJobApplication({\n                userId,\n                jobId,\n                jobListing,\n                userProfile,\n                coverLetter,\n                resume: tailoredResume,\n                relevancyScore\n            });\n\n            if (applicationResult.success) {\n                // Log successful application\n                await automationLogger.logApplicationSubmitted(userId, jobId, applicationResult);\n                \n                // Track successful application metrics\n                autoApplyMetrics.trackApplicationAttempt({\n                    applicationId: applicationResult.applicationId,\n                    userId,\n                    jobId,\n                    portal: jobListing.jobPortal?.name || 'Unknown',\n                    success: true,\n                    duration: applicationResult.automationDetails?.duration,\n                    attempts: applicationResult.automationDetails?.attempts || 1,\n                    method: applicationResult.automationDetails?.method || 'headless_browser'\n                });\n                \n                // Track daily volume\n                const updatedTodayApplications = await getTodayApplicationCount(userId);\n                autoApplyMetrics.trackVolumeMetrics({\n                    userId,\n                    dailyApplications: updatedTodayApplications,\n                    dailyLimit: autoApplySettings.dailyApplicationLimit,\n                    userTier: 'free' // Would come from user profile\n                });\n\n                // Send application submitted notification\n                await sendApplicationSubmittedNotification(userId, {\n                    id: applicationResult.applicationId,\n                    userId,\n                    jobId,\n                    jobTitle: jobListing.title,\n                    company: jobListing.company,\n                    appliedAt: new Date(),\n                    autoApplied: autoApply,\n                    coverLetterUsed: !!coverLetter,\n                    resumeTailored: !!tailoredResume,\n                    relevancyScore\n                });\n\n                // Schedule follow-up reminder if enabled\n                const autoApplySettings = await getUserAutoApplySettings(userId);\n                if (autoApplySettings.followUpEnabled) {\n                    await scheduleFollowUp(userId, applicationResult.applicationId, autoApplySettings.followUpSchedule);\n                }\n\n                context.log(`Successfully processed application for job ${jobId}`);\n            } else {\n                await automationLogger.logError(\n                    'application_submission_failed',\n                    new Error(applicationResult.message),\n                    { userId, jobId, applicationResult }\n                );\n                \n                // Track failed application metrics\n                autoApplyMetrics.trackApplicationAttempt({\n                    applicationId: applicationResult.applicationId,\n                    userId,\n                    jobId,\n                    portal: jobListing.jobPortal?.name || 'Unknown',\n                    success: false,\n                    duration: applicationResult.automationDetails?.duration,\n                    attempts: applicationResult.automationDetails?.attempts || 1,\n                    errorMessage: applicationResult.message,\n                    method: applicationResult.automationDetails?.method || 'headless_browser'\n                });\n            }\n\n        } catch (error) {\n            context.log('Error processing application:', error);\n            await automationLogger.logError(\n                'application_processing_error',\n                error,\n                { queueItem }\n            );\n            \n            // Re-throw to trigger Azure Functions retry logic\n            throw error;\n        }\n    }\n});\n\n/**\n * Calculate job relevancy score using AI\n */\nasync function calculateJobRelevancy(jobListing, userProfile) {\n    try {\n        const client = await initializeAzureOpenAI();\n        \n        if (!client) {\n            console.warn('Azure OpenAI client not available, using fallback scoring');\n            return calculateFallbackRelevancy(jobListing, userProfile);\n        }\n        \n        const prompt = `\n            Analyze the relevancy between this job posting and the candidate's profile:\n            \n            JOB TITLE: ${jobListing.title}\n            COMPANY: ${jobListing.company}\n            JOB DESCRIPTION: ${jobListing.description}\n            REQUIREMENTS: ${jobListing.requirements?.join(', ')}\n            \n            CANDIDATE PROFILE:\n            Skills: ${userProfile.skills?.join(', ')}\n            Experience: ${userProfile.experience?.map(exp => `${exp.position} at ${exp.company}`).join(', ')}\n            Target Roles: ${userProfile.targetRoles?.join(', ')}\n            \n            Calculate a relevancy score from 0-100 based on:\n            1. Skills match (40% weight)\n            2. Role alignment (30% weight) \n            3. Experience level match (20% weight)\n            4. Job requirements match (10% weight)\n            \n            Return only a number between 0-100.\n        `;\n\n        const completion = await client.chat.completions.create({\n            model: 'gpt-35-turbo', // Using the deployment name\n            messages: [{ role: 'user', content: prompt }],\n            temperature: 0.1,\n            max_tokens: 50\n        });\n        \n        const scoreText = completion.choices[0]?.message?.content?.trim() || '';\n        const score = parseInt(scoreText);\n        \n        return isNaN(score) ? 50 : Math.max(0, Math.min(100, score));\n    } catch (error) {\n        console.error('Error calculating job relevancy with Azure OpenAI:', error);\n        return calculateFallbackRelevancy(jobListing, userProfile);\n    }\n}\n\n/**\n * Fallback relevancy calculation using keyword matching\n */\nfunction calculateFallbackRelevancy(jobListing, userProfile) {\n    const jobText = `${jobListing.title} ${jobListing.description} ${jobListing.requirements?.join(' ')}`.toLowerCase();\n    const matchedSkills = userProfile.skills?.filter(skill => jobText.includes(skill.toLowerCase())) || [];\n    return Math.min(90, (matchedSkills.length / (userProfile.skills?.length || 1)) * 100);\n}\n\n/**\n * Generate AI-powered cover letter\n */\nasync function generateCoverLetter(jobListing, userProfile) {\n    try {\n        const client = await initializeAzureOpenAI();\n        \n        if (!client) {\n            console.warn('Azure OpenAI client not available, using fallback cover letter');\n            return generateFallbackCoverLetter(jobListing, userProfile);\n        }\n        \n        const prompt = `\n            Generate a professional cover letter for this job application:\n            \n            JOB DETAILS:\n            Position: ${jobListing.title}\n            Company: ${jobListing.company}\n            Description: ${jobListing.description}\n            Requirements: ${jobListing.requirements?.join(', ')}\n            \n            CANDIDATE PROFILE:\n            Name: ${userProfile.name}\n            Skills: ${userProfile.skills?.join(', ')}\n            Experience: ${userProfile.experience?.map(exp => `${exp.position} at ${exp.company}`).join(', ')}\n            Summary: ${userProfile.summary}\n            \n            Requirements:\n            1. Professional tone and format\n            2. Highlight relevant skills and experience\n            3. Show enthusiasm for the role and company\n            4. Keep it concise (3-4 paragraphs)\n            5. Include specific examples when possible\n            6. Address any skill gaps positively\n            \n            Return only the cover letter text, no additional formatting or explanations.\n        `;\n\n        const completion = await client.chat.completions.create({\n            model: 'gpt-4o', // Using gpt-4o for better content generation\n            messages: [{ role: 'user', content: prompt }],\n            temperature: 0.7,\n            max_tokens: 1000\n        });\n        \n        return completion.choices[0]?.message?.content?.trim() || generateFallbackCoverLetter(jobListing, userProfile);\n\n    } catch (error) {\n        console.error('Error generating cover letter with Azure OpenAI:', error);\n        return generateFallbackCoverLetter(jobListing, userProfile);\n    }\n}\n\n/**\n * Generate fallback cover letter\n */\nfunction generateFallbackCoverLetter(jobListing, userProfile) {\n    return `Dear Hiring Manager,\n\nI am writing to express my strong interest in the ${jobListing.title} position at ${jobListing.company}. With my background in ${userProfile.skills?.slice(0, 3).join(', ')}, I am confident that I would be a valuable addition to your team.\n\nIn my previous roles, I have gained extensive experience in ${userProfile.skills?.slice(0, 2).join(' and ')}, which directly aligns with the requirements outlined in your job posting. I am particularly excited about the opportunity to contribute to ${jobListing.company}'s innovative work in this space.\n\nI would welcome the opportunity to discuss how my skills and enthusiasm can contribute to your team's success. Thank you for considering my application.\n\nBest regards,\n${userProfile.name}`;\n}\n\n/**\n * Tailor resume for specific job\n */\nasync function tailorResume(originalResume, jobListing) {\n    try {\n        const client = await initializeAzureOpenAI();\n        \n        if (!client) {\n            console.warn('Azure OpenAI client not available, returning original resume');\n            return originalResume;\n        }\n        \n        const prompt = `\n            Tailor this resume for the specific job posting to maximize ATS compatibility and relevance:\n            \n            JOB DESCRIPTION:\n            ${jobListing.description}\n            REQUIREMENTS: ${jobListing.requirements?.join(', ')}\n            \n            ORIGINAL RESUME:\n            ${originalResume}\n            \n            Instructions:\n            1. Optimize keywords for ATS systems\n            2. Highlight most relevant experience first\n            3. Include specific skills mentioned in job description\n            4. Quantify achievements where possible\n            5. Maintain professional formatting\n            6. Keep same overall structure and length\n            \n            Return only the tailored resume content.\n        `;\n\n        const completion = await client.chat.completions.create({\n            model: 'gpt-4o', // Using gpt-4o for better content generation\n            messages: [{ role: 'user', content: prompt }],\n            temperature: 0.7,\n            max_tokens: 2000\n        });\n        \n        return completion.choices[0]?.message?.content?.trim() || originalResume;\n\n    } catch (error) {\n        console.error('Error tailoring resume with Azure OpenAI:', error);\n        return originalResume; // Return original if tailoring fails\n    }\n}\n\n/**\n * Submit job application to the appropriate portal\n */\nasync function submitJobApplication(applicationData) {\n    try {\n        const { userId, jobId, jobListing, userProfile, coverLetter, resume, relevancyScore } = applicationData;\n        \n        // Check if this is a TheirStack job with easy_apply enabled\n        if (jobListing.easy_apply && \n            (jobListing.jobPortal?.name === 'TheirStack' || jobListing.final_url)) {\n            \n            await automationLogger.logInfo(\n                'headless_application_initiated',\n                `Initiating headless application for job ${jobId}`,\n                { userId, jobId, portal: jobListing.jobPortal?.name }\n            );\n\n            // Use headless browser automation for easy apply jobs\n            const headlessResult = await headlessBrowserService.applyToJob(\n                jobListing, \n                {\n                    ...userProfile,\n                    resume, // Use tailored resume\n                    coverLetter\n                },\n                {\n                    timeout: 120000, // 2 minute timeout for complex forms\n                    screenshots: true,\n                    retryOnFailure: true\n                }\n            );\n\n            if (headlessResult.success) {\n                // Store successful application in Azure Cosmos DB\n                const applicationRecord = {\n                    id: headlessResult.applicationId,\n                    userId,\n                    jobId,\n                    status: 'applied',\n                    appliedAt: new Date(),\n                    applicationMethod: 'headless_automation',\n                    portal: jobListing.jobPortal?.name || 'Unknown',\n                    jobTitle: jobListing.title,\n                    company: jobListing.company,\n                    jobUrl: jobListing.final_url,\n                    coverLetter,\n                    tailoredResume: resume,\n                    relevancyScore,\n                    automationDetails: {\n                        duration: headlessResult.duration,\n                        attempts: headlessResult.attempts,\n                        formData: headlessResult.formData,\n                        screenshotPath: headlessResult.screenshotPath\n                    },\n                    createdAt: new Date(),\n                    updatedAt: new Date(),\n                    _partitionKey: userId\n                };\n\n                await storeJobApplication(applicationRecord);\n\n                return {\n                    success: true,\n                    message: 'Application submitted successfully via headless automation',\n                    applicationId: headlessResult.applicationId,\n                    automationDetails: {\n                        duration: headlessResult.duration,\n                        attempts: headlessResult.attempts,\n                        method: 'headless_browser'\n                    }\n                };\n            } else {\n                // Headless automation failed, log and potentially fallback\n                await automationLogger.logError(\n                    'headless_application_failed',\n                    new Error(headlessResult.message),\n                    { \n                        userId, \n                        jobId, \n                        duration: headlessResult.duration,\n                        attempts: headlessResult.attempts \n                    }\n                );\n\n                return {\n                    success: false,\n                    message: `Headless application failed: ${headlessResult.message}`,\n                    applicationId: headlessResult.applicationId,\n                    automationDetails: {\n                        duration: headlessResult.duration,\n                        attempts: headlessResult.attempts,\n                        method: 'headless_browser',\n                        error: headlessResult.message\n                    }\n                };\n            }\n        }\n        \n        // Fallback to traditional application methods for non-easy-apply jobs\n        const applicationId = uuidv4();\n        \n        // For now, store as manual application pending user action\n        const applicationRecord = {\n            id: applicationId,\n            userId,\n            jobId,\n            status: 'pending_manual',\n            appliedAt: new Date(),\n            applicationMethod: 'manual_required',\n            portal: jobListing.jobPortal?.name || 'Unknown',\n            jobTitle: jobListing.title,\n            company: jobListing.company,\n            jobUrl: jobListing.final_url,\n            coverLetter,\n            tailoredResume: resume,\n            relevancyScore,\n            reason: 'Job does not support easy apply - manual application required',\n            createdAt: new Date(),\n            updatedAt: new Date(),\n            _partitionKey: userId\n        };\n\n        await storeJobApplication(applicationRecord);\n\n        return {\n            success: false, // Mark as false since manual action required\n            message: 'Job requires manual application - stored for user review',\n            applicationId,\n            requiresManualAction: true\n        };\n\n    } catch (error) {\n        console.error('Error submitting job application:', error);\n        \n        await automationLogger.logError(\n            'application_submission_error',\n            error,\n            { applicationData }\n        );\n\n        return {\n            success: false,\n            message: error.message || 'Internal error during application submission'\n        };\n    }\n}\n\n/**\n * Schedule follow-up reminder\n */\nasync function scheduleFollowUp(userId, applicationId, followUpSchedule) {\n    try {\n        const followUpMessage = {\n            userId,\n            applicationId,\n            type: 'initial_follow_up',\n            scheduledDate: new Date(Date.now() + (followUpSchedule.initialDays * 24 * 60 * 60 * 1000)).toISOString(),\n            createdAt: new Date().toISOString()\n        };\n\n        await queueService.addMessage(\n            queueService.queues.FOLLOW_UP_REMINDERS,\n            followUpMessage,\n            {\n                visibilityTimeout: followUpSchedule.initialDays * 24 * 60 * 60 // Delay until follow-up date\n            }\n        );\n\n        console.log(`Follow-up scheduled for application ${applicationId}`);\n    } catch (error) {\n        console.error('Error scheduling follow-up:', error);\n    }\n}\n\n// Utility functions (TODO: Implement with proper data storage)\n\nasync function getUserProfile(userId) {\n    // Mock user profile\n    return {\n        id: userId,\n        name: 'John Doe',\n        email: 'john.doe@example.com',\n        skills: ['JavaScript', 'React', 'TypeScript', 'Node.js', 'Python'],\n        experience: [\n            { position: 'Frontend Developer', company: 'Tech Corp', technologies: ['React', 'TypeScript'] }\n        ],\n        targetRoles: ['Frontend Developer', 'Full Stack Developer'],\n        summary: 'Experienced frontend developer with expertise in React applications',\n        resume: 'Detailed resume content would be stored here...'\n    };\n}\n\nasync function getUserAutoApplySettings(userId) {\n    return {\n        autoApplyThreshold: 75,\n        dailyApplicationLimit: 5,\n        followUpEnabled: true,\n        followUpSchedule: {\n            initialDays: 3,\n            secondDays: 7\n        }\n    };\n}\n\nasync function checkExistingApplication(userId, jobId) {\n    try {\n        await azureCosmosService.initialize();\n        \n        // Query for existing application by userId and jobId\n        const existingApplications = await azureCosmosService.queryDocuments(\n            'applications',\n            'SELECT * FROM c WHERE c.userId = @userId AND c.jobId = @jobId',\n            [\n                { name: '@userId', value: userId },\n                { name: '@jobId', value: jobId }\n            ]\n        );\n        \n        return existingApplications.length > 0 ? existingApplications[0] : null;\n    } catch (error) {\n        console.error('Error checking existing application:', error);\n        return null; // Return null on error to allow application to proceed\n    }\n}\n\nasync function getTodayApplicationCount(userId) {\n    try {\n        await azureCosmosService.initialize();\n        \n        // Get start of today in UTC\n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n        \n        const todayApplications = await azureCosmosService.queryDocuments(\n            'applications',\n            'SELECT VALUE COUNT(1) FROM c WHERE c.userId = @userId AND c.appliedAt >= @today',\n            [\n                { name: '@userId', value: userId },\n                { name: '@today', value: today }\n            ]\n        );\n        \n        return todayApplications[0] || 0;\n    } catch (error) {\n        console.error('Error getting today application count:', error);\n        return 0; // Return 0 on error to allow applications\n    }\n}\n\nasync function storeJobApplication(applicationData) {\n    try {\n        // Store application in Azure Cosmos DB\n        await azureCosmosService.initialize();\n        const applicationId = await azureCosmosService.createDocument('applications', applicationData);\n        \n        console.log(`✅ Job application stored in Cosmos DB: ${applicationId}`);\n        return applicationId;\n    } catch (error) {\n        console.error('❌ Failed to store job application in Cosmos DB:', error);\n        throw error;\n    }\n}\n\n/**\n * Send application submitted notification\n */\nasync function sendApplicationSubmittedNotification(userId, applicationData) {\n    try {\n        // Import notification integration service\n        const { jobNotificationIntegration } = require('../../lib/services/job-notification-integration');\n        \n        // Send application submitted notification\n        await jobNotificationIntegration.notifyApplicationSubmitted(userId, applicationData);\n        \n        console.log(`Application submitted notification sent for user ${userId}, application ${applicationData.id}`);\n    } catch (error) {\n        console.error('Error sending application submitted notification:', error);\n        // Don't throw error here to avoid breaking the application workflow\n    }\n}\n\n// Export functions for use in tests and other modules\nmodule.exports = {\n    submitJobApplication,\n    calculateJobRelevancy,\n    generateCoverLetter,\n    tailorResume,\n    initializeAzureOpenAI\n};\n"],"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","ignoreList":[]}