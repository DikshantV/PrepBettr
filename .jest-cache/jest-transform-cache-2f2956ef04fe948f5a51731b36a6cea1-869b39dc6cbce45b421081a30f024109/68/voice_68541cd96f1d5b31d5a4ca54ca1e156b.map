{"version":3,"names":["cov_1bwjpqxo28","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","branchMap","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage"],"sources":["/Users/dikshantvashistha/PrepBettr/lib/types/voice.ts"],"sourcesContent":["/**\n * TypeScript interfaces for voice conversation system\n */\n\n/**\n * Response interface for conversation start action\n */\nexport interface ConversationStartResponse {\n  success: boolean;\n  message: string;\n  questionNumber: number;\n  isComplete: boolean;\n  hasAudio: boolean;\n  audioData: number[] | null;\n}\n\n/**\n * Response interface for conversation process action\n */\nexport interface ConversationProcessResponse {\n  success: boolean;\n  message: string;\n  questionNumber: number;\n  isComplete: boolean;\n  followUpSuggestions?: string[];\n  hasAudio: boolean;\n  audioData: number[] | null;\n}\n\n/**\n * Enhanced SavedMessage interface for conversation messages\n * Includes optional metadata for better message tracking\n */\nexport interface SavedMessage {\n  role: \"user\" | \"system\" | \"assistant\";\n  content: string;\n  timestamp?: string;\n  questionNumber?: number;\n  audioData?: number[] | null;\n  hasAudio?: boolean;\n}\n\n/**\n * Interview context interface for conversation initialization\n */\nexport interface InterviewContext {\n  type: 'technical' | 'behavioral' | 'general';\n  position?: string;\n  company?: string;\n  difficulty?: 'easy' | 'medium' | 'hard';\n  preliminaryCollected?: boolean; // Default: false - Indicates if preliminary info has been collected\n  currentQuestionCount?: number; // Current number of questions asked in the interview\n  maxQuestions?: number; // Default: 10 - Maximum number of questions for the interview\n  userName?: string;\n  userId?: string;\n  interviewId?: string;\n  feedbackId?: string;\n  questions?: string[];\n}\n\n/**\n * Voice conversation API request body\n */\nexport interface VoiceConversationRequest {\n  action: 'start' | 'process' | 'summary' | 'clear';\n  userTranscript?: string;\n  interviewContext?: Partial<InterviewContext>;\n}\n\n/**\n * Audio processing result interface\n */\nexport interface AudioProcessingResult {\n  success: boolean;\n  audioBlob?: Blob;\n  duration?: number;\n  sampleRate?: number;\n  channels?: number;\n  error?: string;\n}\n\n/**\n * Speech-to-text response interface\n */\nexport interface SpeechToTextResponse {\n  success: boolean;\n  text: string;\n  confidence?: number;\n  language?: string;\n  duration?: number;\n  error?: string;\n}\n\n/**\n * Text-to-speech request interface\n */\nexport interface TextToSpeechRequest {\n  text: string;\n  voice?: string;\n  speed?: number;\n  pitch?: number;\n  outputFormat?: 'audio/wav' | 'audio/mp3' | 'audio/ogg';\n}\n"],"mappings":";;AAAA;;;AAAA;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;IAAA;IAAAE,KAAA;IAAAC,SAAA;IAAAC,CAAA;MAAA;IAAA;IAAAC,CAAA;IAAAC,CAAA;IAAAC,cAAA;MAAAC,IAAA;MAAAC,QAAA;MAAAC,KAAA;MAAAC,OAAA;MAAAC,cAAA;MAAAC,OAAA;IAAA;IAAAC,eAAA;IAAAtB,IAAA;EAAA;EAAA,IAAAuB,QAAA,GAAAtB,MAAA,CAAAE,GAAA,MAAAF,MAAA,CAAAE,GAAA;EAAA,KAAAoB,QAAA,CAAAxB,IAAA,KAAAwB,QAAA,CAAAxB,IAAA,EAAAC,IAAA,KAAAA,IAAA;IAAAuB,QAAA,CAAAxB,IAAA,IAAAK,YAAA;EAAA;EAAA,IAAAoB,cAAA,GAAAD,QAAA,CAAAxB,IAAA;EAAA","ignoreList":[]}