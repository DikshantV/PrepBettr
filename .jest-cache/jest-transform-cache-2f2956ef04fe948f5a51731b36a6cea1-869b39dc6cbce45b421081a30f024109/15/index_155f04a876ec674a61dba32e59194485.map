{"version":3,"names":["cov_2gkgqyz0r8","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","branchMap","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage"],"sources":["/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/types/index.ts"],"sourcesContent":["/**\n * Azure AI Foundry Type Definitions\n * \n * This module exports TypeScript type definitions for Azure AI Foundry services,\n * including custom types for PrepBettr-specific use cases and re-exports from\n * the Azure AI SDK packages.\n */\n\n// Re-export types from Azure AI Projects SDK\nexport type {\n  AIProjectClient,\n} from '@azure/ai-projects';\n\nexport type {\n  AgentsClient,\n} from '@azure/ai-agents';\n\n// Re-export authentication types\nexport type {\n  AzureKeyCredential,\n  TokenCredential,\n} from '@azure/core-auth';\n\n// Re-export common Azure types\nexport type {\n  DefaultAzureCredential,\n} from '@azure/identity';\n\n/**\n * Configuration interface for Azure AI Foundry\n */\nexport interface FoundryConfig {\n  endpoint: string;\n  apiKey: string;\n  projectId: string;\n  resourceGroup: string;\n  region?: string;\n  deploymentName?: string;\n}\n\n/**\n * Azure AI Foundry Chat Completion Request\n * (Custom type for PrepBettr-specific use cases)\n */\nexport interface FoundryChatRequest {\n  messages: FoundryChatMessage[];\n  model?: string;\n  temperature?: number;\n  maxTokens?: number;\n  stream?: boolean;\n  metadata?: Record<string, any>;\n}\n\n/**\n * Chat message interface for Azure AI Foundry\n */\nexport interface FoundryChatMessage {\n  role: 'system' | 'user' | 'assistant';\n  content: string;\n  metadata?: Record<string, any>;\n}\n\n/**\n * Azure AI Foundry Chat Completion Response\n */\nexport interface FoundryChatResponse {\n  id: string;\n  choices: FoundryChatChoice[];\n  usage?: FoundryUsage;\n  metadata?: Record<string, any>;\n  created: number;\n}\n\n/**\n * Chat completion choice\n */\nexport interface FoundryChatChoice {\n  index: number;\n  message: FoundryChatMessage;\n  finishReason: 'stop' | 'length' | 'content_filter' | null;\n}\n\n/**\n * Token usage information\n */\nexport interface FoundryUsage {\n  promptTokens: number;\n  completionTokens: number;\n  totalTokens: number;\n}\n\n/**\n * Azure AI Agent Definition\n */\nexport interface FoundryAgent {\n  id: string;\n  name: string;\n  description?: string;\n  model: string;\n  instructions?: string;\n  tools?: FoundryTool[];\n  metadata?: Record<string, any>;\n  createdAt: string;\n  updatedAt: string;\n}\n\n/**\n * Azure AI Agent Tool Definition\n */\nexport interface FoundryTool {\n  type: 'function' | 'code_interpreter' | 'retrieval';\n  function?: FoundryFunction;\n  metadata?: Record<string, any>;\n}\n\n/**\n * Function tool definition\n */\nexport interface FoundryFunction {\n  name: string;\n  description?: string;\n  parameters?: Record<string, any>;\n}\n\n/**\n * Foundry Project Information\n */\nexport interface FoundryProject {\n  id: string;\n  name: string;\n  description?: string;\n  resourceGroup: string;\n  region: string;\n  createdAt: string;\n  updatedAt: string;\n  metadata?: Record<string, any>;\n}\n\n/**\n * Foundry Model Deployment\n */\nexport interface FoundryModelDeployment {\n  id: string;\n  name: string;\n  model: string;\n  version?: string;\n  status: 'pending' | 'running' | 'failed' | 'succeeded';\n  endpoint?: string;\n  createdAt: string;\n  updatedAt: string;\n  metadata?: Record<string, any>;\n}\n\n/**\n * Error types for Azure AI Foundry operations\n */\nexport interface FoundryError {\n  code: string;\n  message: string;\n  details?: Record<string, any>;\n  timestamp: string;\n}\n\n/**\n * Connection status for Azure AI Foundry services\n */\nexport interface FoundryConnectionStatus {\n  isConnected: boolean;\n  lastChecked: string;\n  latency?: number;\n  error?: FoundryError;\n}\n\n/**\n * Health check result for foundry services\n */\nexport interface FoundryHealthCheck {\n  status: 'healthy' | 'unhealthy' | 'degraded';\n  services: {\n    projects: FoundryConnectionStatus;\n    agents: FoundryConnectionStatus;\n  };\n  timestamp: string;\n}\n\n/**\n * Foundry service options for requests\n */\nexport interface FoundryRequestOptions {\n  timeout?: number;\n  retries?: number;\n  metadata?: Record<string, any>;\n  signal?: AbortSignal;\n}\n\n/**\n * PrepBettr-specific interview context for foundry agents\n */\nexport interface PrepBettrInterviewContext {\n  candidateName: string;\n  jobRole: string;\n  companyName?: string;\n  resumeContent?: string;\n  questionsList?: string[];\n  difficulty?: 'beginner' | 'intermediate' | 'advanced';\n  interviewType?: 'technical' | 'behavioral' | 'mixed';\n}\n\n/**\n * PrepBettr foundry agent response\n */\nexport interface PrepBettrFoundryResponse {\n  response: string;\n  nextQuestions?: string[];\n  feedback?: string;\n  confidence?: number;\n  metadata?: {\n    processingTime: number;\n    tokensUsed: number;\n    context: PrepBettrInterviewContext;\n  };\n}\n\n// TODO: Add more types as needed:\n// - Streaming response types\n// - Batch processing types  \n// - Model fine-tuning types\n// - Evaluation and metrics types\n// - Integration-specific types for PrepBettr workflows\n"],"mappings":";;AAAA;;;;;;;AAAA;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;IAAA;IAAAE,KAAA;IAAAC,SAAA;IAAAC,CAAA;MAAA;IAAA;IAAAC,CAAA;IAAAC,CAAA;IAAAC,cAAA;MAAAC,IAAA;MAAAC,QAAA;MAAAC,KAAA;MAAAC,OAAA;MAAAC,cAAA;MAAAC,OAAA;IAAA;IAAAC,eAAA;IAAAtB,IAAA;EAAA;EAAA,IAAAuB,QAAA,GAAAtB,MAAA,CAAAE,GAAA,MAAAF,MAAA,CAAAE,GAAA;EAAA,KAAAoB,QAAA,CAAAxB,IAAA,KAAAwB,QAAA,CAAAxB,IAAA,EAAAC,IAAA,KAAAA,IAAA;IAAAuB,QAAA,CAAAxB,IAAA,IAAAK,YAAA;EAAA;EAAA,IAAAoB,cAAA,GAAAD,QAAA,CAAAxB,IAAA;EAAA;;;;;;;;;;;;;AA+NA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]}