{"file":"/Users/dikshantvashistha/PrepBettr/lib/services/config-monitoring-service.ts","mappings":"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","names":[],"sources":["/Users/dikshantvashistha/PrepBettr/lib/services/config-monitoring-service.ts"],"sourcesContent":["/**\n * Configuration Monitoring Service\n * \n * Provides comprehensive monitoring, metrics, and alerting for the\n * unified configuration system with Application Insights integration.\n */\n\nimport { TelemetryClient } from 'applicationinsights';\nimport { logServerError } from '@/lib/errors';\nimport { azureCosmosService } from './azure-cosmos-service';\n\n// ===== INTERFACES =====\n\nexport interface ConfigMetrics {\n  requestCount: number;\n  cacheHits: number;\n  cacheMisses: number;\n  avgLatency: number;\n  errorCount: number;\n  driftDetected: number;\n  syncFailures: number;\n}\n\nexport interface ConfigAlert {\n  id: string;\n  type: 'drift' | 'sync_failure' | 'high_latency' | 'error_rate' | 'cache_performance';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  message: string;\n  metadata: Record<string, any>;\n  timestamp: Date;\n  resolved: boolean;\n  environment: string;\n}\n\nexport interface HealthCheckResult {\n  service: string;\n  status: 'healthy' | 'degraded' | 'unhealthy';\n  timestamp: Date;\n  metrics: ConfigMetrics;\n  alerts: ConfigAlert[];\n  details?: Record<string, any>;\n}\n\n// ===== MONITORING SERVICE =====\n\nclass ConfigMonitoringService {\n  private telemetryClient: TelemetryClient | null = null;\n  private metrics: ConfigMetrics = {\n    requestCount: 0,\n    cacheHits: 0,\n    cacheMisses: 0,\n    avgLatency: 0,\n    errorCount: 0,\n    driftDetected: 0,\n    syncFailures: 0\n  };\n  \n  private latencyBuffer: number[] = [];\n  private readonly LATENCY_BUFFER_SIZE = 100;\n  private readonly ALERT_THRESHOLDS = {\n    HIGH_LATENCY_MS: 1000,\n    ERROR_RATE_THRESHOLD: 0.05, // 5%\n    CACHE_HIT_RATIO_MIN: 0.8,   // 80%\n    MAX_DRIFT_COUNT: 5\n  };\n\n  constructor() {\n    this.initializeTelemetry();\n  }\n\n  // ===== INITIALIZATION =====\n\n  private initializeTelemetry(): void {\n    try {\n      const appInsightsKey = process.env.APPLICATIONINSIGHTS_CONNECTION_STRING;\n      \n      if (appInsightsKey) {\n        // Application Insights is typically initialized globally\n        // This service uses the global instance if available\n        const appInsights = require('applicationinsights');\n        \n        if (appInsights.defaultClient) {\n          this.telemetryClient = appInsights.defaultClient;\n          console.log('✅ Config monitoring connected to Application Insights');\n        } else {\n          appInsights.setup(appInsightsKey)\n            .setAutoCollectRequests(true)\n            .setAutoCollectPerformance(true)\n            .setAutoCollectExceptions(true)\n            .setAutoCollectDependencies(true)\n            .setAutoCollectConsole(true, true)\n            .setUseDiskRetryCaching(true)\n            .start();\n            \n          this.telemetryClient = appInsights.defaultClient;\n          console.log('✅ Config monitoring initialized Application Insights');\n        }\n      } else {\n        console.warn('⚠️ Application Insights connection string not found - monitoring disabled');\n      }\n    } catch (error) {\n      console.error('❌ Failed to initialize Application Insights:', error);\n      logServerError(error as Error, { service: 'config-monitoring', action: 'initialize' });\n    }\n  }\n\n  // ===== METRICS TRACKING =====\n\n  /**\n   * Track configuration request with timing\n   */\n  trackConfigRequest(key: string, operation: 'get' | 'set' | 'getAll', latency: number, success: boolean): void {\n    this.metrics.requestCount++;\n    \n    // Update latency metrics\n    this.latencyBuffer.push(latency);\n    if (this.latencyBuffer.length > this.LATENCY_BUFFER_SIZE) {\n      this.latencyBuffer.shift();\n    }\n    this.metrics.avgLatency = this.latencyBuffer.reduce((a, b) => a + b, 0) / this.latencyBuffer.length;\n    \n    // Track errors\n    if (!success) {\n      this.metrics.errorCount++;\n    }\n    \n    // Send to Application Insights\n    if (this.telemetryClient) {\n      this.telemetryClient.trackRequest({\n        name: `Config-${operation}`,\n        url: `config://${key}`,\n        duration: latency,\n        resultCode: success ? '200' : '500',\n        success,\n        properties: {\n          configKey: key,\n          operation,\n          service: 'unified-config'\n        },\n        measurements: {\n          latency,\n          cacheHitRatio: this.getCacheHitRatio(),\n          requestCount: this.metrics.requestCount\n        }\n      });\n      \n      // Track custom metric\n      this.telemetryClient.trackMetric({\n        name: 'Config.Request.Latency',\n        value: latency,\n        properties: {\n          operation,\n          key: key.split('.')[0] // Track by namespace\n        }\n      });\n    }\n    \n    // Check for alerts\n    this.checkLatencyAlert(latency);\n    this.checkErrorRateAlert();\n  }\n\n  /**\n   * Track cache hit/miss\n   */\n  trackCacheHit(hit: boolean, key: string): void {\n    if (hit) {\n      this.metrics.cacheHits++;\n    } else {\n      this.metrics.cacheMisses++;\n    }\n    \n    if (this.telemetryClient) {\n      this.telemetryClient.trackEvent({\n        name: 'Config.Cache.Access',\n        properties: {\n          hit: hit.toString(),\n          key: key.split('.')[0],\n          service: 'unified-config'\n        },\n        measurements: {\n          hitRatio: this.getCacheHitRatio(),\n          totalCacheAccess: this.metrics.cacheHits + this.metrics.cacheMisses\n        }\n      });\n    }\n    \n    // Check cache performance alert\n    this.checkCachePerformanceAlert();\n  }\n\n  /**\n   * Track configuration drift detection\n   */\n  trackDriftDetection(driftedKeys: string[], totalChecked: number): void {\n    this.metrics.driftDetected = driftedKeys.length;\n    \n    if (this.telemetryClient) {\n      this.telemetryClient.trackEvent({\n        name: 'Config.Drift.Detection',\n        properties: {\n          driftedKeys: driftedKeys.join(','),\n          service: 'unified-config'\n        },\n        measurements: {\n          driftCount: driftedKeys.length,\n          totalChecked,\n          driftRatio: driftedKeys.length / totalChecked\n        }\n      });\n    }\n    \n    // Alert if drift detected\n    if (driftedKeys.length > 0) {\n      this.createAlert('drift', 'high', `Configuration drift detected in ${driftedKeys.length} keys: ${driftedKeys.join(', ')}`, {\n        driftedKeys,\n        totalChecked\n      });\n    }\n  }\n\n  /**\n   * Track Firebase sync operations\n   */\n  trackSyncOperation(success: boolean, keysSync: number, duration: number, error?: string): void {\n    if (!success) {\n      this.metrics.syncFailures++;\n    }\n    \n    if (this.telemetryClient) {\n      this.telemetryClient.trackDependency({\n        dependencyTypeName: 'Firebase',\n        name: 'Config.Sync',\n        data: `Sync ${keysSync} keys`,\n        duration,\n        success,\n        properties: {\n          keysSync: keysSync.toString(),\n          service: 'config-sync',\n          error: error || ''\n        }\n      });\n      \n      this.telemetryClient.trackMetric({\n        name: 'Config.Sync.KeyCount',\n        value: keysSync,\n        properties: {\n          success: success.toString()\n        }\n      });\n    }\n    \n    // Alert on sync failures\n    if (!success) {\n      this.createAlert('sync_failure', 'medium', `Firebase sync failed: ${error || 'Unknown error'}`, {\n        keysSync,\n        duration,\n        error\n      });\n    }\n  }\n\n  /**\n   * Track configuration changes\n   */\n  trackConfigChange(key: string, oldValue: any, newValue: any, changedBy: string, environment: string): void {\n    if (this.telemetryClient) {\n      this.telemetryClient.trackEvent({\n        name: 'Config.Change',\n        properties: {\n          key,\n          changedBy,\n          environment,\n          service: 'unified-config',\n          hasOldValue: (oldValue !== null && oldValue !== undefined).toString(),\n          valueType: typeof newValue\n        },\n        measurements: {\n          changeTimestamp: Date.now()\n        }\n      });\n    }\n  }\n\n  // ===== ALERTING =====\n\n  /**\n   * Create and process alerts\n   */\n  private async createAlert(type: ConfigAlert['type'], severity: ConfigAlert['severity'], message: string, metadata: Record<string, any>): Promise<void> {\n    const alert: ConfigAlert = {\n      id: `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      type,\n      severity,\n      message,\n      metadata,\n      timestamp: new Date(),\n      resolved: false,\n      environment: process.env.NODE_ENV || 'development'\n    };\n    \n    // Store alert in Cosmos DB\n    try {\n      await azureCosmosService.createDocument('configAlerts', {\n        ...alert,\n        _partitionKey: alert.type\n      });\n    } catch (error) {\n      console.error('Failed to store alert:', error);\n    }\n    \n    // Send to Application Insights as exception for high/critical severity\n    if (this.telemetryClient && (severity === 'high' || severity === 'critical')) {\n      this.telemetryClient.trackException({\n        exception: new Error(`Config Alert [${severity.toUpperCase()}]: ${message}`),\n        properties: {\n          alertId: alert.id,\n          alertType: type,\n          severity,\n          environment: alert.environment,\n          service: 'unified-config'\n        },\n        measurements: metadata\n      });\n    }\n    \n    // Send to notification channels\n    await this.sendAlertNotification(alert);\n    \n    console.warn(`🚨 Config Alert [${severity.toUpperCase()}]: ${message}`);\n  }\n\n  /**\n   * Check for latency alerts\n   */\n  private checkLatencyAlert(latency: number): void {\n    if (latency > this.ALERT_THRESHOLDS.HIGH_LATENCY_MS) {\n      this.createAlert('high_latency', 'medium', `High configuration latency detected: ${latency}ms`, {\n        latency,\n        threshold: this.ALERT_THRESHOLDS.HIGH_LATENCY_MS\n      });\n    }\n  }\n\n  /**\n   * Check for error rate alerts\n   */\n  private checkErrorRateAlert(): void {\n    const errorRate = this.metrics.requestCount > 0 ? this.metrics.errorCount / this.metrics.requestCount : 0;\n    \n    if (errorRate > this.ALERT_THRESHOLDS.ERROR_RATE_THRESHOLD && this.metrics.requestCount > 10) {\n      this.createAlert('error_rate', 'high', `High configuration error rate: ${(errorRate * 100).toFixed(2)}%`, {\n        errorRate,\n        errorCount: this.metrics.errorCount,\n        requestCount: this.metrics.requestCount\n      });\n    }\n  }\n\n  /**\n   * Check for cache performance alerts\n   */\n  private checkCachePerformanceAlert(): void {\n    const hitRatio = this.getCacheHitRatio();\n    const totalRequests = this.metrics.cacheHits + this.metrics.cacheMisses;\n    \n    if (hitRatio < this.ALERT_THRESHOLDS.CACHE_HIT_RATIO_MIN && totalRequests > 50) {\n      this.createAlert('cache_performance', 'medium', `Low cache hit ratio: ${(hitRatio * 100).toFixed(2)}%`, {\n        hitRatio,\n        cacheHits: this.metrics.cacheHits,\n        cacheMisses: this.metrics.cacheMisses\n      });\n    }\n  }\n\n  // ===== NOTIFICATIONS =====\n\n  /**\n   * Send alert notifications to configured channels\n   */\n  private async sendAlertNotification(alert: ConfigAlert): Promise<void> {\n    try {\n      // Slack webhook notification\n      const slackWebhook = process.env.SLACK_WEBHOOK_URL;\n      if (slackWebhook && (alert.severity === 'high' || alert.severity === 'critical')) {\n        await this.sendSlackNotification(alert, slackWebhook);\n      }\n      \n      // Email notification (could be implemented)\n      // await this.sendEmailNotification(alert);\n      \n      // Microsoft Teams notification (could be implemented)\n      // await this.sendTeamsNotification(alert);\n      \n    } catch (error) {\n      console.error('Failed to send alert notification:', error);\n    }\n  }\n\n  /**\n   * Send Slack notification\n   */\n  private async sendSlackNotification(alert: ConfigAlert, webhookUrl: string): Promise<void> {\n    const payload = {\n      text: `🚨 Configuration Alert: ${alert.message}`,\n      attachments: [\n        {\n          color: this.getAlertColor(alert.severity),\n          fields: [\n            { title: 'Alert Type', value: alert.type, short: true },\n            { title: 'Severity', value: alert.severity.toUpperCase(), short: true },\n            { title: 'Environment', value: alert.environment, short: true },\n            { title: 'Timestamp', value: alert.timestamp.toISOString(), short: true }\n          ],\n          footer: 'PrepBettr Config Monitoring'\n        }\n      ]\n    };\n    \n    const response = await fetch(webhookUrl, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(payload)\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Slack notification failed: ${response.statusText}`);\n    }\n  }\n\n  /**\n   * Get alert color for Slack\n   */\n  private getAlertColor(severity: ConfigAlert['severity']): string {\n    switch (severity) {\n      case 'critical': return 'danger';\n      case 'high': return 'warning';\n      case 'medium': return 'warning';\n      case 'low': return 'good';\n      default: return 'good';\n    }\n  }\n\n  // ===== HEALTH CHECK =====\n\n  /**\n   * Perform comprehensive health check\n   */\n  async healthCheck(): Promise<HealthCheckResult> {\n    const alerts = await this.getActiveAlerts();\n    const status = this.calculateHealthStatus(alerts);\n    \n    return {\n      service: 'unified-config',\n      status,\n      timestamp: new Date(),\n      metrics: { ...this.metrics },\n      alerts,\n      details: {\n        cacheHitRatio: this.getCacheHitRatio(),\n        avgLatency: this.metrics.avgLatency,\n        errorRate: this.metrics.requestCount > 0 ? this.metrics.errorCount / this.metrics.requestCount : 0,\n        uptime: process.uptime()\n      }\n    };\n  }\n\n  /**\n   * Get active alerts\n   */\n  private async getActiveAlerts(): Promise<ConfigAlert[]> {\n    try {\n      const alerts = await azureCosmosService.queryDocuments<ConfigAlert>(\n        'configAlerts',\n        'SELECT * FROM c WHERE c.resolved = false AND c.timestamp >= @cutoff ORDER BY c.timestamp DESC',\n        [{ name: '@cutoff', value: new Date(Date.now() - 24 * 60 * 60 * 1000) }] // Last 24 hours\n      );\n      return alerts.slice(0, 10); // Limit to 10 most recent\n    } catch (error) {\n      console.error('Failed to get active alerts:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Calculate overall health status\n   */\n  private calculateHealthStatus(alerts: ConfigAlert[]): 'healthy' | 'degraded' | 'unhealthy' {\n    const criticalAlerts = alerts.filter(a => a.severity === 'critical');\n    const highAlerts = alerts.filter(a => a.severity === 'high');\n    \n    if (criticalAlerts.length > 0) return 'unhealthy';\n    if (highAlerts.length > 2) return 'unhealthy';\n    if (alerts.length > 5) return 'degraded';\n    \n    // Check metrics\n    const errorRate = this.metrics.requestCount > 0 ? this.metrics.errorCount / this.metrics.requestCount : 0;\n    const cacheHitRatio = this.getCacheHitRatio();\n    \n    if (errorRate > 0.1 || cacheHitRatio < 0.5 || this.metrics.avgLatency > 2000) {\n      return 'degraded';\n    }\n    \n    return 'healthy';\n  }\n\n  // ===== UTILITY METHODS =====\n\n  /**\n   * Get current cache hit ratio\n   */\n  private getCacheHitRatio(): number {\n    const total = this.metrics.cacheHits + this.metrics.cacheMisses;\n    return total > 0 ? this.metrics.cacheHits / total : 0;\n  }\n\n  /**\n   * Get current metrics\n   */\n  getMetrics(): ConfigMetrics {\n    return { ...this.metrics };\n  }\n\n  /**\n   * Reset metrics (for testing or periodic reset)\n   */\n  resetMetrics(): void {\n    this.metrics = {\n      requestCount: 0,\n      cacheHits: 0,\n      cacheMisses: 0,\n      avgLatency: 0,\n      errorCount: 0,\n      driftDetected: 0,\n      syncFailures: 0\n    };\n    this.latencyBuffer = [];\n  }\n\n  /**\n   * Flush telemetry data\n   */\n  flush(): Promise<void> {\n    return new Promise((resolve) => {\n      if (this.telemetryClient) {\n        this.telemetryClient.flush();\n        // Flush is synchronous, so we can resolve immediately\n        resolve();\n      } else {\n        resolve();\n      }\n    });\n  }\n}\n\n// ===== SINGLETON INSTANCE =====\n\nexport const configMonitoringService = new ConfigMonitoringService();\nexport default configMonitoringService;\n"],"version":3}