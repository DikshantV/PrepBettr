e025b070163561147f6e6a4ec08e59c0
"use strict";

/* istanbul ignore next */
function cov_q7knbqum6() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/services/azure-blob-storage.ts";
  var hash = "c76069f10e2d819bf64c8f57d5c9638ca4686c30";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/services/azure-blob-storage.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 20
        },
        end: {
          line: 8,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 91
        }
      },
      "2": {
        start: {
          line: 3,
          column: 31
        },
        end: {
          line: 3,
          column: 91
        }
      },
      "3": {
        start: {
          line: 4,
          column: 12
        },
        end: {
          line: 4,
          column: 35
        }
      },
      "4": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 5,
          column: 213
        }
      },
      "5": {
        start: {
          line: 5,
          column: 194
        },
        end: {
          line: 5,
          column: 206
        }
      },
      "6": {
        start: {
          line: 6,
          column: 23
        },
        end: {
          line: 6,
          column: 162
        }
      },
      "7": {
        start: {
          line: 6,
          column: 53
        },
        end: {
          line: 6,
          column: 159
        }
      },
      "8": {
        start: {
          line: 6,
          column: 101
        },
        end: {
          line: 6,
          column: 155
        }
      },
      "9": {
        start: {
          line: 7,
          column: 45
        },
        end: {
          line: 7,
          column: 126
        }
      },
      "10": {
        start: {
          line: 7,
          column: 83
        },
        end: {
          line: 7,
          column: 114
        }
      },
      "11": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 62
        }
      },
      "12": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 10,
          column: 34
        }
      },
      "13": {
        start: {
          line: 11,
          column: 23
        },
        end: {
          line: 11,
          column: 53
        }
      },
      "14": {
        start: {
          line: 12,
          column: 23
        },
        end: {
          line: 12,
          column: 58
        }
      },
      "15": {
        start: {
          line: 13,
          column: 17
        },
        end: {
          line: 13,
          column: 40
        }
      },
      "16": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 38
        }
      },
      "17": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 27
        }
      },
      "18": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 23,
          column: 10
        }
      },
      "19": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 53,
          column: 9
        }
      },
      "20": {
        start: {
          line: 31,
          column: 28
        },
        end: {
          line: 31,
          column: 73
        }
      },
      "21": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 36,
          column: 14
        }
      },
      "22": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 40,
          column: 13
        }
      },
      "23": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 38,
          column: 102
        }
      },
      "24": {
        start: {
          line: 39,
          column: 16
        },
        end: {
          line: 39,
          column: 29
        }
      },
      "25": {
        start: {
          line: 42,
          column: 40
        },
        end: {
          line: 42,
          column: 134
        }
      },
      "26": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 155
        }
      },
      "27": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 41
        }
      },
      "28": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 68
        }
      },
      "29": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 24
        }
      },
      "30": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 79
        }
      },
      "31": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 105
        }
      },
      "32": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 25
        }
      },
      "33": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "34": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 74
        }
      },
      "35": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "36": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 69,
          column: 13
        }
      },
      "37": {
        start: {
          line: 65,
          column: 40
        },
        end: {
          line: 65,
          column: 96
        }
      },
      "38": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 68,
          column: 19
        }
      },
      "39": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 71
        }
      },
      "40": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 24
        }
      },
      "41": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 71
        }
      },
      "42": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "43": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 74
        }
      },
      "44": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "45": {
        start: {
          line: 90,
          column: 29
        },
        end: {
          line: 90,
          column: 66
        }
      },
      "46": {
        start: {
          line: 91,
          column: 34
        },
        end: {
          line: 91,
          column: 57
        }
      },
      "47": {
        start: {
          line: 92,
          column: 36
        },
        end: {
          line: 92,
          column: 92
        }
      },
      "48": {
        start: {
          line: 93,
          column: 36
        },
        end: {
          line: 93,
          column: 80
        }
      },
      "49": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 105,
          column: 15
        }
      },
      "50": {
        start: {
          line: 106,
          column: 28
        },
        end: {
          line: 106,
          column: 47
        }
      },
      "51": {
        start: {
          line: 108,
          column: 27
        },
        end: {
          line: 108,
          column: 93
        }
      },
      "52": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 80
        }
      },
      "53": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 114,
          column: 14
        }
      },
      "54": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 83
        }
      },
      "55": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 124,
          column: 15
        }
      },
      "56": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 24
        }
      },
      "57": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 134,
          column: 9
        }
      },
      "58": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 74
        }
      },
      "59": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 165,
          column: 9
        }
      },
      "60": {
        start: {
          line: 136,
          column: 32
        },
        end: {
          line: 136,
          column: 76
        }
      },
      "61": {
        start: {
          line: 137,
          column: 30
        },
        end: {
          line: 137,
          column: 40
        }
      },
      "62": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 67
        }
      },
      "63": {
        start: {
          line: 139,
          column: 40
        },
        end: {
          line: 139,
          column: 134
        }
      },
      "64": {
        start: {
          line: 141,
          column: 34
        },
        end: {
          line: 141,
          column: 57
        }
      },
      "65": {
        start: {
          line: 142,
          column: 31
        },
        end: {
          line: 148,
          column: 13
        }
      },
      "66": {
        start: {
          line: 149,
          column: 29
        },
        end: {
          line: 149,
          column: 112
        }
      },
      "67": {
        start: {
          line: 150,
          column: 27
        },
        end: {
          line: 150,
          column: 126
        }
      },
      "68": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 154,
          column: 14
        }
      },
      "69": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 157,
          column: 64
        }
      },
      "70": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 163,
          column: 15
        }
      },
      "71": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 164,
          column: 24
        }
      },
      "72": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 174,
          column: 9
        }
      },
      "73": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 88
        }
      },
      "74": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 173,
          column: 19
        }
      },
      "75": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 191,
          column: 9
        }
      },
      "76": {
        start: {
          line: 176,
          column: 34
        },
        end: {
          line: 176,
          column: 57
        }
      },
      "77": {
        start: {
          line: 177,
          column: 36
        },
        end: {
          line: 177,
          column: 92
        }
      },
      "78": {
        start: {
          line: 178,
          column: 36
        },
        end: {
          line: 178,
          column: 80
        }
      },
      "79": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 51
        }
      },
      "80": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 81
        }
      },
      "81": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 85
        }
      },
      "82": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 189,
          column: 15
        }
      },
      "83": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 199,
          column: 9
        }
      },
      "84": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 198,
          column: 74
        }
      },
      "85": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 216,
          column: 9
        }
      },
      "86": {
        start: {
          line: 201,
          column: 34
        },
        end: {
          line: 201,
          column: 57
        }
      },
      "87": {
        start: {
          line: 202,
          column: 36
        },
        end: {
          line: 202,
          column: 92
        }
      },
      "88": {
        start: {
          line: 203,
          column: 36
        },
        end: {
          line: 203,
          column: 80
        }
      },
      "89": {
        start: {
          line: 204,
          column: 31
        },
        end: {
          line: 204,
          column: 68
        }
      },
      "90": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 211,
          column: 14
        }
      },
      "91": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 214,
          column: 61
        }
      },
      "92": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 24
        }
      },
      "93": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 224,
          column: 9
        }
      },
      "94": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 74
        }
      },
      "95": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 261,
          column: 9
        }
      },
      "96": {
        start: {
          line: 226,
          column: 29
        },
        end: {
          line: 226,
          column: 66
        }
      },
      "97": {
        start: {
          line: 227,
          column: 36
        },
        end: {
          line: 227,
          column: 110
        }
      },
      "98": {
        start: {
          line: 228,
          column: 36
        },
        end: {
          line: 228,
          column: 80
        }
      },
      "99": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 241,
          column: 15
        }
      },
      "100": {
        start: {
          line: 242,
          column: 28
        },
        end: {
          line: 242,
          column: 47
        }
      },
      "101": {
        start: {
          line: 244,
          column: 30
        },
        end: {
          line: 244,
          column: 135
        }
      },
      "102": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 89
        }
      },
      "103": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 249,
          column: 14
        }
      },
      "104": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 252,
          column: 92
        }
      },
      "105": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 259,
          column: 15
        }
      },
      "106": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 260,
          column: 24
        }
      },
      "107": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 269,
          column: 9
        }
      },
      "108": {
        start: {
          line: 268,
          column: 12
        },
        end: {
          line: 268,
          column: 74
        }
      },
      "109": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 304,
          column: 9
        }
      },
      "110": {
        start: {
          line: 271,
          column: 29
        },
        end: {
          line: 271,
          column: 66
        }
      },
      "111": {
        start: {
          line: 272,
          column: 34
        },
        end: {
          line: 272,
          column: 64
        }
      },
      "112": {
        start: {
          line: 273,
          column: 36
        },
        end: {
          line: 273,
          column: 92
        }
      },
      "113": {
        start: {
          line: 274,
          column: 36
        },
        end: {
          line: 274,
          column: 80
        }
      },
      "114": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 282,
          column: 15
        }
      },
      "115": {
        start: {
          line: 283,
          column: 28
        },
        end: {
          line: 283,
          column: 47
        }
      },
      "116": {
        start: {
          line: 285,
          column: 30
        },
        end: {
          line: 285,
          column: 96
        }
      },
      "117": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 286,
          column: 108
        }
      },
      "118": {
        start: {
          line: 287,
          column: 12
        },
        end: {
          line: 291,
          column: 14
        }
      },
      "119": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 294,
          column: 108
        }
      },
      "120": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 302,
          column: 15
        }
      },
      "121": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 303,
          column: 24
        }
      },
      "122": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 312,
          column: 9
        }
      },
      "123": {
        start: {
          line: 311,
          column: 12
        },
        end: {
          line: 311,
          column: 74
        }
      },
      "124": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 335,
          column: 9
        }
      },
      "125": {
        start: {
          line: 314,
          column: 32
        },
        end: {
          line: 314,
          column: 76
        }
      },
      "126": {
        start: {
          line: 315,
          column: 30
        },
        end: {
          line: 315,
          column: 40
        }
      },
      "127": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 316,
          column: 67
        }
      },
      "128": {
        start: {
          line: 317,
          column: 40
        },
        end: {
          line: 317,
          column: 134
        }
      },
      "129": {
        start: {
          line: 318,
          column: 31
        },
        end: {
          line: 324,
          column: 13
        }
      },
      "130": {
        start: {
          line: 325,
          column: 29
        },
        end: {
          line: 325,
          column: 112
        }
      },
      "131": {
        start: {
          line: 326,
          column: 27
        },
        end: {
          line: 326,
          column: 126
        }
      },
      "132": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 330,
          column: 14
        }
      },
      "133": {
        start: {
          line: 333,
          column: 12
        },
        end: {
          line: 333,
          column: 78
        }
      },
      "134": {
        start: {
          line: 334,
          column: 12
        },
        end: {
          line: 334,
          column: 24
        }
      },
      "135": {
        start: {
          line: 341,
          column: 8
        },
        end: {
          line: 344,
          column: 9
        }
      },
      "136": {
        start: {
          line: 342,
          column: 12
        },
        end: {
          line: 342,
          column: 88
        }
      },
      "137": {
        start: {
          line: 343,
          column: 12
        },
        end: {
          line: 343,
          column: 19
        }
      },
      "138": {
        start: {
          line: 345,
          column: 8
        },
        end: {
          line: 362,
          column: 9
        }
      },
      "139": {
        start: {
          line: 346,
          column: 34
        },
        end: {
          line: 346,
          column: 64
        }
      },
      "140": {
        start: {
          line: 347,
          column: 36
        },
        end: {
          line: 347,
          column: 92
        }
      },
      "141": {
        start: {
          line: 348,
          column: 36
        },
        end: {
          line: 348,
          column: 80
        }
      },
      "142": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 349,
          column: 51
        }
      },
      "143": {
        start: {
          line: 350,
          column: 12
        },
        end: {
          line: 350,
          column: 109
        }
      },
      "144": {
        start: {
          line: 353,
          column: 12
        },
        end: {
          line: 353,
          column: 110
        }
      },
      "145": {
        start: {
          line: 354,
          column: 12
        },
        end: {
          line: 360,
          column: 15
        }
      },
      "146": {
        start: {
          line: 369,
          column: 8
        },
        end: {
          line: 372,
          column: 9
        }
      },
      "147": {
        start: {
          line: 370,
          column: 12
        },
        end: {
          line: 370,
          column: 88
        }
      },
      "148": {
        start: {
          line: 371,
          column: 12
        },
        end: {
          line: 371,
          column: 22
        }
      },
      "149": {
        start: {
          line: 373,
          column: 34
        },
        end: {
          line: 373,
          column: 36
        }
      },
      "150": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 421,
          column: 9
        }
      },
      "151": {
        start: {
          line: 376,
          column: 12
        },
        end: {
          line: 410,
          column: 13
        }
      },
      "152": {
        start: {
          line: 377,
          column: 16
        },
        end: {
          line: 409,
          column: 17
        }
      },
      "153": {
        start: {
          line: 378,
          column: 44
        },
        end: {
          line: 378,
          column: 100
        }
      },
      "154": {
        start: {
          line: 379,
          column: 42
        },
        end: {
          line: 379,
          column: 44
        }
      },
      "155": {
        start: {
          line: 380,
          column: 20
        },
        end: {
          line: 395,
          column: 21
        }
      },
      "156": {
        start: {
          line: 382,
          column: 24
        },
        end: {
          line: 387,
          column: 25
        }
      },
      "157": {
        start: {
          line: 382,
          column: 38
        },
        end: {
          line: 382,
          column: 42
        }
      },
      "158": {
        start: {
          line: 382,
          column: 50
        },
        end: {
          line: 382,
          column: 134
        }
      },
      "159": {
        start: {
          line: 383,
          column: 28
        },
        end: {
          line: 383,
          column: 42
        }
      },
      "160": {
        start: {
          line: 384,
          column: 28
        },
        end: {
          line: 384,
          column: 39
        }
      },
      "161": {
        start: {
          line: 385,
          column: 41
        },
        end: {
          line: 385,
          column: 43
        }
      },
      "162": {
        start: {
          line: 386,
          column: 28
        },
        end: {
          line: 386,
          column: 58
        }
      },
      "163": {
        start: {
          line: 389,
          column: 36
        },
        end: {
          line: 389,
          column: 59
        }
      },
      "164": {
        start: {
          line: 391,
          column: 24
        },
        end: {
          line: 394,
          column: 61
        }
      },
      "165": {
        start: {
          line: 392,
          column: 28
        },
        end: {
          line: 392,
          column: 82
        }
      },
      "166": {
        start: {
          line: 392,
          column: 64
        },
        end: {
          line: 392,
          column: 82
        }
      },
      "167": {
        start: {
          line: 394,
          column: 34
        },
        end: {
          line: 394,
          column: 59
        }
      },
      "168": {
        start: {
          line: 394,
          column: 43
        },
        end: {
          line: 394,
          column: 59
        }
      },
      "169": {
        start: {
          line: 397,
          column: 20
        },
        end: {
          line: 405,
          column: 21
        }
      },
      "170": {
        start: {
          line: 398,
          column: 47
        },
        end: {
          line: 401,
          column: 26
        }
      },
      "171": {
        start: {
          line: 399,
          column: 52
        },
        end: {
          line: 399,
          column: 96
        }
      },
      "172": {
        start: {
          line: 400,
          column: 28
        },
        end: {
          line: 400,
          column: 67
        }
      },
      "173": {
        start: {
          line: 402,
          column: 24
        },
        end: {
          line: 402,
          column: 58
        }
      },
      "174": {
        start: {
          line: 403,
          column: 24
        },
        end: {
          line: 403,
          column: 62
        }
      },
      "175": {
        start: {
          line: 404,
          column: 24
        },
        end: {
          line: 404,
          column: 130
        }
      },
      "176": {
        start: {
          line: 408,
          column: 20
        },
        end: {
          line: 408,
          column: 100
        }
      },
      "177": {
        start: {
          line: 411,
          column: 12
        },
        end: {
          line: 411,
          column: 37
        }
      },
      "178": {
        start: {
          line: 414,
          column: 12
        },
        end: {
          line: 414,
          column: 93
        }
      },
      "179": {
        start: {
          line: 415,
          column: 12
        },
        end: {
          line: 419,
          column: 15
        }
      },
      "180": {
        start: {
          line: 420,
          column: 12
        },
        end: {
          line: 420,
          column: 37
        }
      },
      "181": {
        start: {
          line: 428,
          column: 8
        },
        end: {
          line: 430,
          column: 9
        }
      },
      "182": {
        start: {
          line: 429,
          column: 12
        },
        end: {
          line: 429,
          column: 74
        }
      },
      "183": {
        start: {
          line: 431,
          column: 8
        },
        end: {
          line: 455,
          column: 9
        }
      },
      "184": {
        start: {
          line: 432,
          column: 34
        },
        end: {
          line: 432,
          column: 64
        }
      },
      "185": {
        start: {
          line: 433,
          column: 36
        },
        end: {
          line: 433,
          column: 92
        }
      },
      "186": {
        start: {
          line: 434,
          column: 30
        },
        end: {
          line: 434,
          column: 32
        }
      },
      "187": {
        start: {
          line: 435,
          column: 12
        },
        end: {
          line: 449,
          column: 13
        }
      },
      "188": {
        start: {
          line: 436,
          column: 16
        },
        end: {
          line: 441,
          column: 17
        }
      },
      "189": {
        start: {
          line: 436,
          column: 30
        },
        end: {
          line: 436,
          column: 34
        }
      },
      "190": {
        start: {
          line: 436,
          column: 41
        },
        end: {
          line: 436,
          column: 111
        }
      },
      "191": {
        start: {
          line: 437,
          column: 20
        },
        end: {
          line: 437,
          column: 34
        }
      },
      "192": {
        start: {
          line: 438,
          column: 20
        },
        end: {
          line: 438,
          column: 31
        }
      },
      "193": {
        start: {
          line: 439,
          column: 33
        },
        end: {
          line: 439,
          column: 35
        }
      },
      "194": {
        start: {
          line: 440,
          column: 20
        },
        end: {
          line: 440,
          column: 46
        }
      },
      "195": {
        start: {
          line: 443,
          column: 28
        },
        end: {
          line: 443,
          column: 51
        }
      },
      "196": {
        start: {
          line: 445,
          column: 16
        },
        end: {
          line: 448,
          column: 53
        }
      },
      "197": {
        start: {
          line: 446,
          column: 20
        },
        end: {
          line: 446,
          column: 74
        }
      },
      "198": {
        start: {
          line: 446,
          column: 56
        },
        end: {
          line: 446,
          column: 74
        }
      },
      "199": {
        start: {
          line: 448,
          column: 26
        },
        end: {
          line: 448,
          column: 51
        }
      },
      "200": {
        start: {
          line: 448,
          column: 35
        },
        end: {
          line: 448,
          column: 51
        }
      },
      "201": {
        start: {
          line: 450,
          column: 12
        },
        end: {
          line: 450,
          column: 29
        }
      },
      "202": {
        start: {
          line: 453,
          column: 12
        },
        end: {
          line: 453,
          column: 93
        }
      },
      "203": {
        start: {
          line: 454,
          column: 12
        },
        end: {
          line: 454,
          column: 24
        }
      },
      "204": {
        start: {
          line: 461,
          column: 8
        },
        end: {
          line: 463,
          column: 9
        }
      },
      "205": {
        start: {
          line: 462,
          column: 12
        },
        end: {
          line: 462,
          column: 74
        }
      },
      "206": {
        start: {
          line: 464,
          column: 23
        },
        end: {
          line: 464,
          column: 25
        }
      },
      "207": {
        start: {
          line: 465,
          column: 8
        },
        end: {
          line: 481,
          column: 9
        }
      },
      "208": {
        start: {
          line: 466,
          column: 12
        },
        end: {
          line: 475,
          column: 13
        }
      },
      "209": {
        start: {
          line: 467,
          column: 16
        },
        end: {
          line: 474,
          column: 17
        }
      },
      "210": {
        start: {
          line: 468,
          column: 34
        },
        end: {
          line: 468,
          column: 81
        }
      },
      "211": {
        start: {
          line: 469,
          column: 20
        },
        end: {
          line: 469,
          column: 50
        }
      },
      "212": {
        start: {
          line: 472,
          column: 20
        },
        end: {
          line: 472,
          column: 96
        }
      },
      "213": {
        start: {
          line: 473,
          column: 20
        },
        end: {
          line: 473,
          column: 47
        }
      },
      "214": {
        start: {
          line: 476,
          column: 12
        },
        end: {
          line: 476,
          column: 26
        }
      },
      "215": {
        start: {
          line: 479,
          column: 12
        },
        end: {
          line: 479,
          column: 67
        }
      },
      "216": {
        start: {
          line: 480,
          column: 12
        },
        end: {
          line: 480,
          column: 24
        }
      },
      "217": {
        start: {
          line: 485,
          column: 0
        },
        end: {
          line: 485,
          column: 57
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 52
          },
          end: {
            line: 2,
            column: 53
          }
        },
        loc: {
          start: {
            line: 2,
            column: 65
          },
          end: {
            line: 8,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 5,
            column: 180
          },
          end: {
            line: 5,
            column: 181
          }
        },
        loc: {
          start: {
            line: 5,
            column: 192
          },
          end: {
            line: 5,
            column: 208
          }
        },
        line: 5
      },
      "2": {
        name: "verb",
        decl: {
          start: {
            line: 6,
            column: 13
          },
          end: {
            line: 6,
            column: 17
          }
        },
        loc: {
          start: {
            line: 6,
            column: 21
          },
          end: {
            line: 6,
            column: 164
          }
        },
        line: 6
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 39
          }
        },
        loc: {
          start: {
            line: 6,
            column: 51
          },
          end: {
            line: 6,
            column: 161
          }
        },
        line: 6
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 6,
            column: 72
          },
          end: {
            line: 6,
            column: 73
          }
        },
        loc: {
          start: {
            line: 6,
            column: 99
          },
          end: {
            line: 6,
            column: 157
          }
        },
        line: 6
      },
      "5": {
        name: "settle",
        decl: {
          start: {
            line: 7,
            column: 13
          },
          end: {
            line: 7,
            column: 19
          }
        },
        loc: {
          start: {
            line: 7,
            column: 43
          },
          end: {
            line: 7,
            column: 128
          }
        },
        line: 7
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 7,
            column: 69
          },
          end: {
            line: 7,
            column: 70
          }
        },
        loc: {
          start: {
            line: 7,
            column: 81
          },
          end: {
            line: 7,
            column: 116
          }
        },
        line: 7
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 18
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 15
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        loc: {
          start: {
            line: 28,
            column: 23
          },
          end: {
            line: 54,
            column: 5
          }
        },
        line: 28
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 58,
            column: 4
          },
          end: {
            line: 58,
            column: 5
          }
        },
        loc: {
          start: {
            line: 58,
            column: 28
          },
          end: {
            line: 75,
            column: 5
          }
        },
        line: 58
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        loc: {
          start: {
            line: 79,
            column: 14
          },
          end: {
            line: 81,
            column: 5
          }
        },
        line: 79
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 85,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        },
        loc: {
          start: {
            line: 85,
            column: 63
          },
          end: {
            line: 127,
            column: 5
          }
        },
        line: 85
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 131,
            column: 4
          },
          end: {
            line: 131,
            column: 5
          }
        },
        loc: {
          start: {
            line: 131,
            column: 52
          },
          end: {
            line: 166,
            column: 5
          }
        },
        line: 131
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 170,
            column: 4
          },
          end: {
            line: 170,
            column: 5
          }
        },
        loc: {
          start: {
            line: 170,
            column: 33
          },
          end: {
            line: 192,
            column: 5
          }
        },
        line: 170
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 196,
            column: 4
          },
          end: {
            line: 196,
            column: 5
          }
        },
        loc: {
          start: {
            line: 196,
            column: 32
          },
          end: {
            line: 217,
            column: 5
          }
        },
        line: 196
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 221,
            column: 4
          },
          end: {
            line: 221,
            column: 5
          }
        },
        loc: {
          start: {
            line: 221,
            column: 71
          },
          end: {
            line: 262,
            column: 5
          }
        },
        line: 221
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 266,
            column: 4
          },
          end: {
            line: 266,
            column: 5
          }
        },
        loc: {
          start: {
            line: 266,
            column: 91
          },
          end: {
            line: 305,
            column: 5
          }
        },
        line: 266
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 309,
            column: 4
          },
          end: {
            line: 309,
            column: 5
          }
        },
        loc: {
          start: {
            line: 309,
            column: 79
          },
          end: {
            line: 336,
            column: 5
          }
        },
        line: 309
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 340,
            column: 4
          },
          end: {
            line: 340,
            column: 5
          }
        },
        loc: {
          start: {
            line: 340,
            column: 46
          },
          end: {
            line: 363,
            column: 5
          }
        },
        line: 340
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 367,
            column: 4
          },
          end: {
            line: 367,
            column: 5
          }
        },
        loc: {
          start: {
            line: 367,
            column: 37
          },
          end: {
            line: 422,
            column: 5
          }
        },
        line: 367
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 398,
            column: 65
          },
          end: {
            line: 398,
            column: 66
          }
        },
        loc: {
          start: {
            line: 398,
            column: 85
          },
          end: {
            line: 401,
            column: 25
          }
        },
        line: 398
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 426,
            column: 4
          },
          end: {
            line: 426,
            column: 5
          }
        },
        loc: {
          start: {
            line: 426,
            column: 47
          },
          end: {
            line: 456,
            column: 5
          }
        },
        line: 426
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 460,
            column: 4
          },
          end: {
            line: 460,
            column: 5
          }
        },
        loc: {
          start: {
            line: 460,
            column: 35
          },
          end: {
            line: 482,
            column: 5
          }
        },
        line: 460
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 20
          },
          end: {
            line: 8,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 21
          },
          end: {
            line: 2,
            column: 25
          }
        }, {
          start: {
            line: 2,
            column: 29
          },
          end: {
            line: 2,
            column: 47
          }
        }, {
          start: {
            line: 2,
            column: 52
          },
          end: {
            line: 8,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 91
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 91
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 5,
            column: 11
          },
          end: {
            line: 5,
            column: 212
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 15
          },
          end: {
            line: 5,
            column: 24
          }
        }, {
          start: {
            line: 5,
            column: 28
          },
          end: {
            line: 5,
            column: 211
          }
        }],
        line: 5
      },
      "3": {
        loc: {
          start: {
            line: 5,
            column: 32
          },
          end: {
            line: 5,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 65
          },
          end: {
            line: 5,
            column: 76
          }
        }, {
          start: {
            line: 5,
            column: 79
          },
          end: {
            line: 5,
            column: 99
          }
        }],
        line: 5
      },
      "4": {
        loc: {
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 6,
            column: 161
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 6,
            column: 30
          },
          end: {
            line: 6,
            column: 34
          }
        }, {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 161
          }
        }],
        line: 6
      },
      "5": {
        loc: {
          start: {
            line: 33,
            column: 29
          },
          end: {
            line: 33,
            column: 108
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 33,
            column: 29
          },
          end: {
            line: 33,
            column: 67
          }
        }, {
          start: {
            line: 33,
            column: 71
          },
          end: {
            line: 33,
            column: 102
          }
        }, {
          start: {
            line: 33,
            column: 106
          },
          end: {
            line: 33,
            column: 108
          }
        }],
        line: 33
      },
      "6": {
        loc: {
          start: {
            line: 34,
            column: 28
          },
          end: {
            line: 34,
            column: 105
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 34,
            column: 28
          },
          end: {
            line: 34,
            column: 65
          }
        }, {
          start: {
            line: 34,
            column: 69
          },
          end: {
            line: 34,
            column: 99
          }
        }, {
          start: {
            line: 34,
            column: 103
          },
          end: {
            line: 34,
            column: 105
          }
        }],
        line: 34
      },
      "7": {
        loc: {
          start: {
            line: 37,
            column: 12
          },
          end: {
            line: 40,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 37,
            column: 12
          },
          end: {
            line: 40,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 37
      },
      "8": {
        loc: {
          start: {
            line: 37,
            column: 16
          },
          end: {
            line: 37,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 37,
            column: 16
          },
          end: {
            line: 37,
            column: 40
          }
        }, {
          start: {
            line: 37,
            column: 44
          },
          end: {
            line: 37,
            column: 67
          }
        }],
        line: 37
      },
      "9": {
        loc: {
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 8
          },
          end: {
            line: 61,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "10": {
        loc: {
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 59,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 59,
            column: 35
          }
        }, {
          start: {
            line: 59,
            column: 39
          },
          end: {
            line: 59,
            column: 51
          }
        }],
        line: 59
      },
      "11": {
        loc: {
          start: {
            line: 80,
            column: 15
          },
          end: {
            line: 80,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 80,
            column: 15
          },
          end: {
            line: 80,
            column: 46
          }
        }, {
          start: {
            line: 80,
            column: 50
          },
          end: {
            line: 80,
            column: 70
          }
        }],
        line: 80
      },
      "12": {
        loc: {
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "13": {
        loc: {
          start: {
            line: 131,
            column: 35
          },
          end: {
            line: 131,
            column: 50
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 131,
            column: 49
          },
          end: {
            line: 131,
            column: 50
          }
        }],
        line: 131
      },
      "14": {
        loc: {
          start: {
            line: 132,
            column: 8
          },
          end: {
            line: 134,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 132,
            column: 8
          },
          end: {
            line: 134,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 132
      },
      "15": {
        loc: {
          start: {
            line: 132,
            column: 12
          },
          end: {
            line: 132,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 132,
            column: 12
          },
          end: {
            line: 132,
            column: 27
          }
        }, {
          start: {
            line: 132,
            column: 31
          },
          end: {
            line: 132,
            column: 43
          }
        }],
        line: 132
      },
      "16": {
        loc: {
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 174,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 174,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 171
      },
      "17": {
        loc: {
          start: {
            line: 197,
            column: 8
          },
          end: {
            line: 199,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 197,
            column: 8
          },
          end: {
            line: 199,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 197
      },
      "18": {
        loc: {
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 222
      },
      "19": {
        loc: {
          start: {
            line: 266,
            column: 76
          },
          end: {
            line: 266,
            column: 89
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 266,
            column: 87
          },
          end: {
            line: 266,
            column: 89
          }
        }],
        line: 266
      },
      "20": {
        loc: {
          start: {
            line: 267,
            column: 8
          },
          end: {
            line: 269,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 267,
            column: 8
          },
          end: {
            line: 269,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 267
      },
      "21": {
        loc: {
          start: {
            line: 309,
            column: 62
          },
          end: {
            line: 309,
            column: 77
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 309,
            column: 76
          },
          end: {
            line: 309,
            column: 77
          }
        }],
        line: 309
      },
      "22": {
        loc: {
          start: {
            line: 310,
            column: 8
          },
          end: {
            line: 312,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 310,
            column: 8
          },
          end: {
            line: 312,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 310
      },
      "23": {
        loc: {
          start: {
            line: 310,
            column: 12
          },
          end: {
            line: 310,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 310,
            column: 12
          },
          end: {
            line: 310,
            column: 27
          }
        }, {
          start: {
            line: 310,
            column: 31
          },
          end: {
            line: 310,
            column: 43
          }
        }],
        line: 310
      },
      "24": {
        loc: {
          start: {
            line: 341,
            column: 8
          },
          end: {
            line: 344,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 341,
            column: 8
          },
          end: {
            line: 344,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 341
      },
      "25": {
        loc: {
          start: {
            line: 369,
            column: 8
          },
          end: {
            line: 372,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 369,
            column: 8
          },
          end: {
            line: 372,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 369
      },
      "26": {
        loc: {
          start: {
            line: 392,
            column: 28
          },
          end: {
            line: 392,
            column: 82
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 392,
            column: 28
          },
          end: {
            line: 392,
            column: 82
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 392
      },
      "27": {
        loc: {
          start: {
            line: 392,
            column: 32
          },
          end: {
            line: 392,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 392,
            column: 32
          },
          end: {
            line: 392,
            column: 35
          }
        }, {
          start: {
            line: 392,
            column: 39
          },
          end: {
            line: 392,
            column: 42
          }
        }, {
          start: {
            line: 392,
            column: 47
          },
          end: {
            line: 392,
            column: 61
          }
        }],
        line: 392
      },
      "28": {
        loc: {
          start: {
            line: 394,
            column: 34
          },
          end: {
            line: 394,
            column: 59
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 394,
            column: 34
          },
          end: {
            line: 394,
            column: 59
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 394
      },
      "29": {
        loc: {
          start: {
            line: 397,
            column: 20
          },
          end: {
            line: 405,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 397,
            column: 20
          },
          end: {
            line: 405,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 397
      },
      "30": {
        loc: {
          start: {
            line: 428,
            column: 8
          },
          end: {
            line: 430,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 428,
            column: 8
          },
          end: {
            line: 430,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 428
      },
      "31": {
        loc: {
          start: {
            line: 446,
            column: 20
          },
          end: {
            line: 446,
            column: 74
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 446,
            column: 20
          },
          end: {
            line: 446,
            column: 74
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 446
      },
      "32": {
        loc: {
          start: {
            line: 446,
            column: 24
          },
          end: {
            line: 446,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 446,
            column: 24
          },
          end: {
            line: 446,
            column: 27
          }
        }, {
          start: {
            line: 446,
            column: 31
          },
          end: {
            line: 446,
            column: 34
          }
        }, {
          start: {
            line: 446,
            column: 39
          },
          end: {
            line: 446,
            column: 53
          }
        }],
        line: 446
      },
      "33": {
        loc: {
          start: {
            line: 448,
            column: 26
          },
          end: {
            line: 448,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 448,
            column: 26
          },
          end: {
            line: 448,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 448
      },
      "34": {
        loc: {
          start: {
            line: 461,
            column: 8
          },
          end: {
            line: 463,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 461,
            column: 8
          },
          end: {
            line: 463,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 461
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0],
      "20": [0, 0],
      "21": [0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0, 0],
      "33": [0, 0],
      "34": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/services/azure-blob-storage.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/services/azure-blob-storage.ts"],
      sourcesContent: ["import { BlobServiceClient, BlobSASPermissions, generateBlobSASQueryParameters, StorageSharedKeyCredential, BlobSASSignatureValues, SASProtocol } from '@azure/storage-blob';\nimport { fetchAzureSecrets } from '@/azure/lib/azure-config';\nimport { logServerError } from '@/lib/errors';\n\ninterface AzureBlobConfig {\n  accountName: string;\n  accountKey: string;\n  containerName: string;\n}\n\ninterface UploadResult {\n  blobUrl: string;\n  blobName: string;\n  sasUrl?: string;\n}\n\ninterface SASTokenResult {\n  sasUrl: string;\n  expiresOn: Date;\n}\n\nclass AzureBlobStorageService {\n  private blobServiceClient: BlobServiceClient | null = null;\n  private config: AzureBlobConfig | null = null;\n  \n  // Container configurations\n  private readonly containers = {\n    resumes: 'user-resumes',\n    profilePictures: 'profile-pictures', \n    documents: 'user-documents'\n  };\n\n  /**\n   * Initialize the Azure Blob Storage service\n   */\n  async initialize(): Promise<boolean> {\n    try {\n      // Get Azure configuration from Key Vault or environment\n      const secrets = await fetchAzureSecrets();\n      \n      this.config = {\n        accountName: process.env.AZURE_STORAGE_ACCOUNT_NAME || secrets.azureStorageAccountName || '',\n        accountKey: process.env.AZURE_STORAGE_ACCOUNT_KEY || secrets.azureStorageAccountKey || '',\n        containerName: 'legacy' // Keeping for compatibility, but we use containers object now\n      };\n\n      if (!this.config.accountName || !this.config.accountKey) {\n        console.warn('\u26A0\uFE0F Azure Blob Storage credentials not found, falling back to Firebase');\n        return false;\n      }\n\n      // Create blob service client\n      const sharedKeyCredential = new StorageSharedKeyCredential(\n        this.config.accountName, \n        this.config.accountKey\n      );\n\n      this.blobServiceClient = new BlobServiceClient(\n        `https://${this.config.accountName}.blob.core.windows.net`,\n        sharedKeyCredential\n      );\n\n      // Ensure container exists\n      await this.ensureContainer();\n\n      console.log('\u2705 Azure Blob Storage service initialized');\n      return true;\n    } catch (error) {\n      console.error('\u274C Failed to initialize Azure Blob Storage:', error);\n      logServerError(error as Error, { service: 'azure-blob-storage', action: 'initialize' });\n      return false;\n    }\n  }\n\n  /**\n   * Ensure all containers exist\n   */\n  private async ensureContainer(): Promise<void> {\n    if (!this.blobServiceClient || !this.config) {\n      throw new Error('Azure Blob Storage service not initialized');\n    }\n\n    try {\n      // Ensure all containers exist\n      for (const containerName of Object.values(this.containers)) {\n        const containerClient = this.blobServiceClient.getContainerClient(containerName);\n        await containerClient.createIfNotExists({\n          access: 'container' // Allow container-level access\n        });\n      }\n    } catch (error) {\n      console.error('Failed to ensure containers exist:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Check if service is ready\n   */\n  isReady(): boolean {\n    return this.blobServiceClient !== null && this.config !== null;\n  }\n\n  /**\n   * Upload resume file to Azure Blob Storage\n   */\n  async uploadResume(\n    userId: string,\n    fileBuffer: Buffer,\n    fileName: string,\n    mimeType: string\n  ): Promise<UploadResult> {\n    if (!this.isReady()) {\n      throw new Error('Azure Blob Storage service not initialized');\n    }\n\n    try {\n      const blobName = `${userId}/${Date.now()}-${fileName}`;\n      const containerName = this.containers.resumes;\n      const containerClient = this.blobServiceClient!.getContainerClient(containerName);\n      const blockBlobClient = containerClient.getBlockBlobClient(blobName);\n\n      // Upload the file with metadata\n      await blockBlobClient.uploadData(fileBuffer, {\n        blobHTTPHeaders: {\n          blobContentType: mimeType\n        },\n        metadata: {\n          userId,\n          originalFileName: fileName,\n          uploadDate: new Date().toISOString(),\n          mimeType\n        }\n      });\n\n      const blobUrl = blockBlobClient.url;\n      \n      // Generate SAS URL for temporary access\n      const sasUrl = await this.generateSASUrlForContainer(containerName, blobName, 24);\n\n      console.log(`\u2705 Resume uploaded to Azure Blob Storage: ${blobName}`);\n      \n      return {\n        blobUrl,\n        blobName,\n        sasUrl: sasUrl.sasUrl\n      };\n    } catch (error) {\n      console.error('Failed to upload resume to Azure Blob Storage:', error);\n      logServerError(error as Error, { \n        service: 'azure-blob-storage', \n        action: 'upload', \n        userId\n      }, {\n        fileName: fileName.substring(0, 50) // Truncate for privacy\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Generate SAS URL for temporary access to blob\n   */\n  async generateSASUrl(blobName: string, expiryHours: number = 1): Promise<SASTokenResult> {\n    if (!this.isReady() || !this.config) {\n      throw new Error('Azure Blob Storage service not initialized');\n    }\n\n    try {\n      const permissions = BlobSASPermissions.parse('r'); // Read-only permission\n      const expiresOn = new Date();\n      expiresOn.setHours(expiresOn.getHours() + expiryHours);\n\n      const sharedKeyCredential = new StorageSharedKeyCredential(\n        this.config.accountName,\n        this.config.accountKey\n      );\n\n      // This method is deprecated - use generateSASUrlForContainer instead\n      const containerName = this.containers.resumes; // Default to resumes container\n      const sasOptions: BlobSASSignatureValues = {\n        containerName,\n        blobName,\n        permissions,\n        expiresOn,\n        protocol: SASProtocol.Https\n      };\n\n      const sasToken = generateBlobSASQueryParameters(sasOptions, sharedKeyCredential);\n      const sasUrl = `https://${this.config.accountName}.blob.core.windows.net/${containerName}/${blobName}?${sasToken}`;\n\n      return {\n        sasUrl,\n        expiresOn\n      };\n    } catch (error) {\n      console.error('Failed to generate SAS URL:', error);\n      logServerError(error as Error, { \n        service: 'azure-blob-storage', \n        action: 'generate-sas'\n      }, {\n        blobName: blobName.substring(0, 50) \n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Delete resume from Azure Blob Storage\n   */\n  async deleteResume(blobName: string): Promise<void> {\n    if (!this.isReady()) {\n      console.warn('Azure Blob Storage service not initialized, skipping delete');\n      return;\n    }\n\n    try {\n      const containerName = this.containers.resumes;\n      const containerClient = this.blobServiceClient!.getContainerClient(containerName);\n      const blockBlobClient = containerClient.getBlockBlobClient(blobName);\n      \n      await blockBlobClient.deleteIfExists();\n      console.log(`\u2705 Resume deleted from Azure Blob Storage: ${blobName}`);\n    } catch (error) {\n      console.error('Failed to delete resume from Azure Blob Storage:', error);\n      logServerError(error as Error, { \n        service: 'azure-blob-storage', \n        action: 'delete'\n      }, {\n        blobName: blobName.substring(0, 50) \n      });\n      // Don't throw - we don't want to block the operation if deletion fails\n    }\n  }\n\n  /**\n   * Get blob info\n   */\n  async getBlobInfo(blobName: string): Promise<any> {\n    if (!this.isReady()) {\n      throw new Error('Azure Blob Storage service not initialized');\n    }\n\n    try {\n      const containerName = this.containers.resumes; // Default to resumes container\n      const containerClient = this.blobServiceClient!.getContainerClient(containerName);\n      const blockBlobClient = containerClient.getBlockBlobClient(blobName);\n      \n      const properties = await blockBlobClient.getProperties();\n      return {\n        blobName,\n        contentLength: properties.contentLength,\n        contentType: properties.contentType,\n        lastModified: properties.lastModified,\n        metadata: properties.metadata\n      };\n    } catch (error) {\n      console.error('Failed to get blob info:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Upload profile picture to Azure Blob Storage\n   */\n  async uploadProfilePicture(\n    userId: string,\n    fileBuffer: Buffer,\n    fileName: string,\n    mimeType: string\n  ): Promise<UploadResult> {\n    if (!this.isReady()) {\n      throw new Error('Azure Blob Storage service not initialized');\n    }\n\n    try {\n      const blobName = `${userId}/${Date.now()}-${fileName}`;\n      const containerClient = this.blobServiceClient!.getContainerClient(this.containers.profilePictures);\n      const blockBlobClient = containerClient.getBlockBlobClient(blobName);\n\n      // Upload the file with metadata\n      await blockBlobClient.uploadData(fileBuffer, {\n        blobHTTPHeaders: {\n          blobContentType: mimeType\n        },\n        metadata: {\n          userId,\n          originalFileName: fileName,\n          uploadDate: new Date().toISOString(),\n          mimeType,\n          fileType: 'profile-picture'\n        }\n      });\n\n      const blobUrl = blockBlobClient.url;\n      \n      // Generate public URL (no SAS needed for profile pictures)\n      const publicUrl = `https://${this.config!.accountName}.blob.core.windows.net/${this.containers.profilePictures}/${blobName}`;\n\n      console.log(`\u2705 Profile picture uploaded to Azure Blob Storage: ${blobName}`);\n      \n      return {\n        blobUrl: publicUrl,\n        blobName,\n      };\n    } catch (error) {\n      console.error('Failed to upload profile picture to Azure Blob Storage:', error);\n      logServerError(error as Error, { \n        service: 'azure-blob-storage', \n        action: 'upload-profile', \n        userId\n      }, {\n        fileName: fileName.substring(0, 50)\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Upload general file to Azure Blob Storage\n   */\n  async uploadFile(\n    containerType: keyof typeof this.containers,\n    userId: string,\n    fileBuffer: Buffer,\n    fileName: string,\n    mimeType: string,\n    metadata: Record<string, string> = {}\n  ): Promise<UploadResult> {\n    if (!this.isReady()) {\n      throw new Error('Azure Blob Storage service not initialized');\n    }\n\n    try {\n      const blobName = `${userId}/${Date.now()}-${fileName}`;\n      const containerName = this.containers[containerType];\n      const containerClient = this.blobServiceClient!.getContainerClient(containerName);\n      const blockBlobClient = containerClient.getBlockBlobClient(blobName);\n\n      // Upload the file with metadata\n      await blockBlobClient.uploadData(fileBuffer, {\n        blobHTTPHeaders: {\n          blobContentType: mimeType\n        },\n        metadata: {\n          userId,\n          originalFileName: fileName,\n          uploadDate: new Date().toISOString(),\n          mimeType,\n          containerType,\n          ...metadata\n        }\n      });\n\n      const blobUrl = blockBlobClient.url;\n      \n      // Generate SAS URL for secure access\n      const sasResult = await this.generateSASUrlForContainer(containerName, blobName, 24);\n\n      console.log(`\u2705 File uploaded to Azure Blob Storage: ${blobName} in container ${containerName}`);\n      \n      return {\n        blobUrl,\n        blobName,\n        sasUrl: sasResult.sasUrl\n      };\n    } catch (error) {\n      console.error(`Failed to upload file to Azure Blob Storage container ${containerType}:`, error);\n      logServerError(error as Error, { \n        service: 'azure-blob-storage', \n        action: 'upload-file', \n        userId\n      }, {\n        fileName: fileName.substring(0, 50),\n        containerType\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Generate SAS URL for specific container and blob\n   */\n  private async generateSASUrlForContainer(\n    containerName: string,\n    blobName: string, \n    expiryHours: number = 1\n  ): Promise<SASTokenResult> {\n    if (!this.isReady() || !this.config) {\n      throw new Error('Azure Blob Storage service not initialized');\n    }\n\n    try {\n      const permissions = BlobSASPermissions.parse('r'); // Read-only permission\n      const expiresOn = new Date();\n      expiresOn.setHours(expiresOn.getHours() + expiryHours);\n\n      const sharedKeyCredential = new StorageSharedKeyCredential(\n        this.config.accountName,\n        this.config.accountKey\n      );\n\n      const sasOptions: BlobSASSignatureValues = {\n        containerName,\n        blobName,\n        permissions,\n        expiresOn,\n        protocol: SASProtocol.Https\n      };\n\n      const sasToken = generateBlobSASQueryParameters(sasOptions, sharedKeyCredential);\n      const sasUrl = `https://${this.config.accountName}.blob.core.windows.net/${containerName}/${blobName}?${sasToken}`;\n\n      return {\n        sasUrl,\n        expiresOn\n      };\n    } catch (error) {\n      console.error('Failed to generate SAS URL for container:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete file from specific container\n   */\n  async deleteFile(containerType: keyof typeof this.containers, blobName: string): Promise<void> {\n    if (!this.isReady()) {\n      console.warn('Azure Blob Storage service not initialized, skipping delete');\n      return;\n    }\n\n    try {\n      const containerName = this.containers[containerType];\n      const containerClient = this.blobServiceClient!.getContainerClient(containerName);\n      const blockBlobClient = containerClient.getBlockBlobClient(blobName);\n      \n      await blockBlobClient.deleteIfExists();\n      console.log(`\u2705 File deleted from Azure Blob Storage: ${blobName} in container ${containerName}`);\n    } catch (error) {\n      console.error(`Failed to delete file from Azure Blob Storage container ${containerType}:`, error);\n      logServerError(error as Error, { \n        service: 'azure-blob-storage', \n        action: 'delete-file'\n      }, {\n        blobName: blobName.substring(0, 50),\n        containerType\n      });\n      // Don't throw - we don't want to block the operation if deletion fails\n    }\n  }\n\n  /**\n   * Delete all files for a user (GDPR compliance)\n   */\n  async deleteAllUserFiles(userId: string): Promise<string[]> {\n    if (!this.isReady()) {\n      console.warn('Azure Blob Storage service not initialized, skipping delete');\n      return [];\n    }\n\n    const deletedContainers: string[] = [];\n\n    try {\n      // Delete from all containers\n      for (const [containerType, containerName] of Object.entries(this.containers)) {\n        try {\n          const containerClient = this.blobServiceClient!.getContainerClient(containerName);\n          const blobsToDelete: string[] = [];\n          \n          // List all blobs for this user in this container\n          for await (const blob of containerClient.listBlobsFlat({ prefix: `${userId}/` })) {\n            blobsToDelete.push(blob.name);\n          }\n\n          // Delete all user blobs in this container\n          if (blobsToDelete.length > 0) {\n            const deletePromises = blobsToDelete.map(async (blobName) => {\n              const blockBlobClient = containerClient.getBlockBlobClient(blobName);\n              await blockBlobClient.deleteIfExists();\n            });\n            \n            await Promise.all(deletePromises);\n            deletedContainers.push(containerType);\n            console.log(`\u2705 Deleted ${blobsToDelete.length} files for user ${userId} from container ${containerName}`);\n          }\n        } catch (error) {\n          console.error(`Failed to delete files from container ${containerName}:`, error);\n        }\n      }\n\n      return deletedContainers;\n    } catch (error) {\n      console.error('Failed to delete all user files from Azure Blob Storage:', error);\n      logServerError(error as Error, { \n        service: 'azure-blob-storage', \n        action: 'delete-all-user-files',\n        userId\n      });\n      return deletedContainers;\n    }\n  }\n\n  /**\n   * List blobs for a user in specific container\n   */\n  async listUserBlobs(\n    containerType: keyof typeof this.containers, \n    userId: string\n  ): Promise<string[]> {\n    if (!this.isReady()) {\n      throw new Error('Azure Blob Storage service not initialized');\n    }\n\n    try {\n      const containerName = this.containers[containerType];\n      const containerClient = this.blobServiceClient!.getContainerClient(containerName);\n      const blobNames: string[] = [];\n      \n      for await (const blob of containerClient.listBlobsFlat({ prefix: `${userId}/` })) {\n        blobNames.push(blob.name);\n      }\n\n      return blobNames;\n    } catch (error) {\n      console.error(`Failed to list user blobs in container ${containerType}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * List all blobs for a user across all containers\n   */\n  async listAllUserBlobs(userId: string): Promise<Record<string, string[]>> {\n    if (!this.isReady()) {\n      throw new Error('Azure Blob Storage service not initialized');\n    }\n\n    const result: Record<string, string[]> = {};\n\n    try {\n      for (const [containerType, containerName] of Object.entries(this.containers)) {\n        try {\n          const blobs = await this.listUserBlobs(containerType as keyof typeof this.containers, userId);\n          result[containerType] = blobs;\n        } catch (error) {\n          console.error(`Failed to list blobs in container ${containerType}:`, error);\n          result[containerType] = [];\n        }\n      }\n\n      return result;\n    } catch (error) {\n      console.error('Failed to list all user blobs:', error);\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nexport const azureBlobStorage = new AzureBlobStorageService();\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c76069f10e2d819bf64c8f57d5c9638ca4686c30"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_q7knbqum6 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_q7knbqum6();
var __asyncValues =
/* istanbul ignore next */
(cov_q7knbqum6().s[0]++,
/* istanbul ignore next */
(cov_q7knbqum6().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_q7knbqum6().b[0][1]++, this.__asyncValues) ||
/* istanbul ignore next */
(cov_q7knbqum6().b[0][2]++, function (o) {
  /* istanbul ignore next */
  cov_q7knbqum6().f[0]++;
  cov_q7knbqum6().s[1]++;
  if (!Symbol.asyncIterator) {
    /* istanbul ignore next */
    cov_q7knbqum6().b[1][0]++;
    cov_q7knbqum6().s[2]++;
    throw new TypeError("Symbol.asyncIterator is not defined.");
  } else
  /* istanbul ignore next */
  {
    cov_q7knbqum6().b[1][1]++;
  }
  var m =
    /* istanbul ignore next */
    (cov_q7knbqum6().s[3]++, o[Symbol.asyncIterator]),
    i;
  /* istanbul ignore next */
  cov_q7knbqum6().s[4]++;
  return m ?
  /* istanbul ignore next */
  (cov_q7knbqum6().b[2][0]++, m.call(o)) :
  /* istanbul ignore next */
  (cov_q7knbqum6().b[2][1]++, o = typeof __values === "function" ?
  /* istanbul ignore next */
  (cov_q7knbqum6().b[3][0]++, __values(o)) :
  /* istanbul ignore next */
  (cov_q7knbqum6().b[3][1]++, o[Symbol.iterator]()), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    /* istanbul ignore next */
    cov_q7knbqum6().f[1]++;
    cov_q7knbqum6().s[5]++;
    return this;
  }, i);
  function verb(n) {
    /* istanbul ignore next */
    cov_q7knbqum6().f[2]++;
    cov_q7knbqum6().s[6]++;
    i[n] =
    /* istanbul ignore next */
    (cov_q7knbqum6().b[4][0]++, o[n]) &&
    /* istanbul ignore next */
    (cov_q7knbqum6().b[4][1]++, function (v) {
      /* istanbul ignore next */
      cov_q7knbqum6().f[3]++;
      cov_q7knbqum6().s[7]++;
      return new Promise(function (resolve, reject) {
        /* istanbul ignore next */
        cov_q7knbqum6().f[4]++;
        cov_q7knbqum6().s[8]++;
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    });
  }
  function settle(resolve, reject, d, v) {
    /* istanbul ignore next */
    cov_q7knbqum6().f[5]++;
    cov_q7knbqum6().s[9]++;
    Promise.resolve(v).then(function (v) {
      /* istanbul ignore next */
      cov_q7knbqum6().f[6]++;
      cov_q7knbqum6().s[10]++;
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
}));
/* istanbul ignore next */
cov_q7knbqum6().s[11]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_q7knbqum6().s[12]++;
exports.azureBlobStorage = void 0;
const storage_blob_1 =
/* istanbul ignore next */
(cov_q7knbqum6().s[13]++, require("@azure/storage-blob"));
const azure_config_1 =
/* istanbul ignore next */
(cov_q7knbqum6().s[14]++, require("@/azure/lib/azure-config"));
const errors_1 =
/* istanbul ignore next */
(cov_q7knbqum6().s[15]++, require("@/lib/errors"));
class AzureBlobStorageService {
  constructor() {
    /* istanbul ignore next */
    cov_q7knbqum6().f[7]++;
    cov_q7knbqum6().s[16]++;
    this.blobServiceClient = null;
    /* istanbul ignore next */
    cov_q7knbqum6().s[17]++;
    this.config = null;
    // Container configurations
    /* istanbul ignore next */
    cov_q7knbqum6().s[18]++;
    this.containers = {
      resumes: 'user-resumes',
      profilePictures: 'profile-pictures',
      documents: 'user-documents'
    };
  }
  /**
   * Initialize the Azure Blob Storage service
   */
  async initialize() {
    /* istanbul ignore next */
    cov_q7knbqum6().f[8]++;
    cov_q7knbqum6().s[19]++;
    try {
      // Get Azure configuration from Key Vault or environment
      const secrets =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[20]++, await (0, azure_config_1.fetchAzureSecrets)());
      /* istanbul ignore next */
      cov_q7knbqum6().s[21]++;
      this.config = {
        accountName:
        /* istanbul ignore next */
        (cov_q7knbqum6().b[5][0]++, process.env.AZURE_STORAGE_ACCOUNT_NAME) ||
        /* istanbul ignore next */
        (cov_q7knbqum6().b[5][1]++, secrets.azureStorageAccountName) ||
        /* istanbul ignore next */
        (cov_q7knbqum6().b[5][2]++, ''),
        accountKey:
        /* istanbul ignore next */
        (cov_q7knbqum6().b[6][0]++, process.env.AZURE_STORAGE_ACCOUNT_KEY) ||
        /* istanbul ignore next */
        (cov_q7knbqum6().b[6][1]++, secrets.azureStorageAccountKey) ||
        /* istanbul ignore next */
        (cov_q7knbqum6().b[6][2]++, ''),
        containerName: 'legacy' // Keeping for compatibility, but we use containers object now
      };
      /* istanbul ignore next */
      cov_q7knbqum6().s[22]++;
      if (
      /* istanbul ignore next */
      (cov_q7knbqum6().b[8][0]++, !this.config.accountName) ||
      /* istanbul ignore next */
      (cov_q7knbqum6().b[8][1]++, !this.config.accountKey)) {
        /* istanbul ignore next */
        cov_q7knbqum6().b[7][0]++;
        cov_q7knbqum6().s[23]++;
        console.warn('⚠️ Azure Blob Storage credentials not found, falling back to Firebase');
        /* istanbul ignore next */
        cov_q7knbqum6().s[24]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_q7knbqum6().b[7][1]++;
      }
      // Create blob service client
      const sharedKeyCredential =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[25]++, new storage_blob_1.StorageSharedKeyCredential(this.config.accountName, this.config.accountKey));
      /* istanbul ignore next */
      cov_q7knbqum6().s[26]++;
      this.blobServiceClient = new storage_blob_1.BlobServiceClient(`https://${this.config.accountName}.blob.core.windows.net`, sharedKeyCredential);
      // Ensure container exists
      /* istanbul ignore next */
      cov_q7knbqum6().s[27]++;
      await this.ensureContainer();
      /* istanbul ignore next */
      cov_q7knbqum6().s[28]++;
      console.log('✅ Azure Blob Storage service initialized');
      /* istanbul ignore next */
      cov_q7knbqum6().s[29]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_q7knbqum6().s[30]++;
      console.error('❌ Failed to initialize Azure Blob Storage:', error);
      /* istanbul ignore next */
      cov_q7knbqum6().s[31]++;
      (0, errors_1.logServerError)(error, {
        service: 'azure-blob-storage',
        action: 'initialize'
      });
      /* istanbul ignore next */
      cov_q7knbqum6().s[32]++;
      return false;
    }
  }
  /**
   * Ensure all containers exist
   */
  async ensureContainer() {
    /* istanbul ignore next */
    cov_q7knbqum6().f[9]++;
    cov_q7knbqum6().s[33]++;
    if (
    /* istanbul ignore next */
    (cov_q7knbqum6().b[10][0]++, !this.blobServiceClient) ||
    /* istanbul ignore next */
    (cov_q7knbqum6().b[10][1]++, !this.config)) {
      /* istanbul ignore next */
      cov_q7knbqum6().b[9][0]++;
      cov_q7knbqum6().s[34]++;
      throw new Error('Azure Blob Storage service not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_q7knbqum6().b[9][1]++;
    }
    cov_q7knbqum6().s[35]++;
    try {
      /* istanbul ignore next */
      cov_q7knbqum6().s[36]++;
      // Ensure all containers exist
      for (const containerName of Object.values(this.containers)) {
        const containerClient =
        /* istanbul ignore next */
        (cov_q7knbqum6().s[37]++, this.blobServiceClient.getContainerClient(containerName));
        /* istanbul ignore next */
        cov_q7knbqum6().s[38]++;
        await containerClient.createIfNotExists({
          access: 'container' // Allow container-level access
        });
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_q7knbqum6().s[39]++;
      console.error('Failed to ensure containers exist:', error);
      /* istanbul ignore next */
      cov_q7knbqum6().s[40]++;
      throw error;
    }
  }
  /**
   * Check if service is ready
   */
  isReady() {
    /* istanbul ignore next */
    cov_q7knbqum6().f[10]++;
    cov_q7knbqum6().s[41]++;
    return /* istanbul ignore next */(cov_q7knbqum6().b[11][0]++, this.blobServiceClient !== null) &&
    /* istanbul ignore next */
    (cov_q7knbqum6().b[11][1]++, this.config !== null);
  }
  /**
   * Upload resume file to Azure Blob Storage
   */
  async uploadResume(userId, fileBuffer, fileName, mimeType) {
    /* istanbul ignore next */
    cov_q7knbqum6().f[11]++;
    cov_q7knbqum6().s[42]++;
    if (!this.isReady()) {
      /* istanbul ignore next */
      cov_q7knbqum6().b[12][0]++;
      cov_q7knbqum6().s[43]++;
      throw new Error('Azure Blob Storage service not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_q7knbqum6().b[12][1]++;
    }
    cov_q7knbqum6().s[44]++;
    try {
      const blobName =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[45]++, `${userId}/${Date.now()}-${fileName}`);
      const containerName =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[46]++, this.containers.resumes);
      const containerClient =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[47]++, this.blobServiceClient.getContainerClient(containerName));
      const blockBlobClient =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[48]++, containerClient.getBlockBlobClient(blobName));
      // Upload the file with metadata
      /* istanbul ignore next */
      cov_q7knbqum6().s[49]++;
      await blockBlobClient.uploadData(fileBuffer, {
        blobHTTPHeaders: {
          blobContentType: mimeType
        },
        metadata: {
          userId,
          originalFileName: fileName,
          uploadDate: new Date().toISOString(),
          mimeType
        }
      });
      const blobUrl =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[50]++, blockBlobClient.url);
      // Generate SAS URL for temporary access
      const sasUrl =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[51]++, await this.generateSASUrlForContainer(containerName, blobName, 24));
      /* istanbul ignore next */
      cov_q7knbqum6().s[52]++;
      console.log(`✅ Resume uploaded to Azure Blob Storage: ${blobName}`);
      /* istanbul ignore next */
      cov_q7knbqum6().s[53]++;
      return {
        blobUrl,
        blobName,
        sasUrl: sasUrl.sasUrl
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_q7knbqum6().s[54]++;
      console.error('Failed to upload resume to Azure Blob Storage:', error);
      /* istanbul ignore next */
      cov_q7knbqum6().s[55]++;
      (0, errors_1.logServerError)(error, {
        service: 'azure-blob-storage',
        action: 'upload',
        userId
      }, {
        fileName: fileName.substring(0, 50) // Truncate for privacy
      });
      /* istanbul ignore next */
      cov_q7knbqum6().s[56]++;
      throw error;
    }
  }
  /**
   * Generate SAS URL for temporary access to blob
   */
  async generateSASUrl(blobName, expiryHours =
  /* istanbul ignore next */
  (cov_q7knbqum6().b[13][0]++, 1)) {
    /* istanbul ignore next */
    cov_q7knbqum6().f[12]++;
    cov_q7knbqum6().s[57]++;
    if (
    /* istanbul ignore next */
    (cov_q7knbqum6().b[15][0]++, !this.isReady()) ||
    /* istanbul ignore next */
    (cov_q7knbqum6().b[15][1]++, !this.config)) {
      /* istanbul ignore next */
      cov_q7knbqum6().b[14][0]++;
      cov_q7knbqum6().s[58]++;
      throw new Error('Azure Blob Storage service not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_q7knbqum6().b[14][1]++;
    }
    cov_q7knbqum6().s[59]++;
    try {
      const permissions =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[60]++, storage_blob_1.BlobSASPermissions.parse('r')); // Read-only permission
      const expiresOn =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[61]++, new Date());
      /* istanbul ignore next */
      cov_q7knbqum6().s[62]++;
      expiresOn.setHours(expiresOn.getHours() + expiryHours);
      const sharedKeyCredential =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[63]++, new storage_blob_1.StorageSharedKeyCredential(this.config.accountName, this.config.accountKey));
      // This method is deprecated - use generateSASUrlForContainer instead
      const containerName =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[64]++, this.containers.resumes); // Default to resumes container
      const sasOptions =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[65]++, {
        containerName,
        blobName,
        permissions,
        expiresOn,
        protocol: storage_blob_1.SASProtocol.Https
      });
      const sasToken =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[66]++, (0, storage_blob_1.generateBlobSASQueryParameters)(sasOptions, sharedKeyCredential));
      const sasUrl =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[67]++, `https://${this.config.accountName}.blob.core.windows.net/${containerName}/${blobName}?${sasToken}`);
      /* istanbul ignore next */
      cov_q7knbqum6().s[68]++;
      return {
        sasUrl,
        expiresOn
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_q7knbqum6().s[69]++;
      console.error('Failed to generate SAS URL:', error);
      /* istanbul ignore next */
      cov_q7knbqum6().s[70]++;
      (0, errors_1.logServerError)(error, {
        service: 'azure-blob-storage',
        action: 'generate-sas'
      }, {
        blobName: blobName.substring(0, 50)
      });
      /* istanbul ignore next */
      cov_q7knbqum6().s[71]++;
      throw error;
    }
  }
  /**
   * Delete resume from Azure Blob Storage
   */
  async deleteResume(blobName) {
    /* istanbul ignore next */
    cov_q7knbqum6().f[13]++;
    cov_q7knbqum6().s[72]++;
    if (!this.isReady()) {
      /* istanbul ignore next */
      cov_q7knbqum6().b[16][0]++;
      cov_q7knbqum6().s[73]++;
      console.warn('Azure Blob Storage service not initialized, skipping delete');
      /* istanbul ignore next */
      cov_q7knbqum6().s[74]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_q7knbqum6().b[16][1]++;
    }
    cov_q7knbqum6().s[75]++;
    try {
      const containerName =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[76]++, this.containers.resumes);
      const containerClient =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[77]++, this.blobServiceClient.getContainerClient(containerName));
      const blockBlobClient =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[78]++, containerClient.getBlockBlobClient(blobName));
      /* istanbul ignore next */
      cov_q7knbqum6().s[79]++;
      await blockBlobClient.deleteIfExists();
      /* istanbul ignore next */
      cov_q7knbqum6().s[80]++;
      console.log(`✅ Resume deleted from Azure Blob Storage: ${blobName}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_q7knbqum6().s[81]++;
      console.error('Failed to delete resume from Azure Blob Storage:', error);
      /* istanbul ignore next */
      cov_q7knbqum6().s[82]++;
      (0, errors_1.logServerError)(error, {
        service: 'azure-blob-storage',
        action: 'delete'
      }, {
        blobName: blobName.substring(0, 50)
      });
      // Don't throw - we don't want to block the operation if deletion fails
    }
  }
  /**
   * Get blob info
   */
  async getBlobInfo(blobName) {
    /* istanbul ignore next */
    cov_q7knbqum6().f[14]++;
    cov_q7knbqum6().s[83]++;
    if (!this.isReady()) {
      /* istanbul ignore next */
      cov_q7knbqum6().b[17][0]++;
      cov_q7knbqum6().s[84]++;
      throw new Error('Azure Blob Storage service not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_q7knbqum6().b[17][1]++;
    }
    cov_q7knbqum6().s[85]++;
    try {
      const containerName =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[86]++, this.containers.resumes); // Default to resumes container
      const containerClient =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[87]++, this.blobServiceClient.getContainerClient(containerName));
      const blockBlobClient =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[88]++, containerClient.getBlockBlobClient(blobName));
      const properties =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[89]++, await blockBlobClient.getProperties());
      /* istanbul ignore next */
      cov_q7knbqum6().s[90]++;
      return {
        blobName,
        contentLength: properties.contentLength,
        contentType: properties.contentType,
        lastModified: properties.lastModified,
        metadata: properties.metadata
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_q7knbqum6().s[91]++;
      console.error('Failed to get blob info:', error);
      /* istanbul ignore next */
      cov_q7knbqum6().s[92]++;
      throw error;
    }
  }
  /**
   * Upload profile picture to Azure Blob Storage
   */
  async uploadProfilePicture(userId, fileBuffer, fileName, mimeType) {
    /* istanbul ignore next */
    cov_q7knbqum6().f[15]++;
    cov_q7knbqum6().s[93]++;
    if (!this.isReady()) {
      /* istanbul ignore next */
      cov_q7knbqum6().b[18][0]++;
      cov_q7knbqum6().s[94]++;
      throw new Error('Azure Blob Storage service not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_q7knbqum6().b[18][1]++;
    }
    cov_q7knbqum6().s[95]++;
    try {
      const blobName =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[96]++, `${userId}/${Date.now()}-${fileName}`);
      const containerClient =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[97]++, this.blobServiceClient.getContainerClient(this.containers.profilePictures));
      const blockBlobClient =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[98]++, containerClient.getBlockBlobClient(blobName));
      // Upload the file with metadata
      /* istanbul ignore next */
      cov_q7knbqum6().s[99]++;
      await blockBlobClient.uploadData(fileBuffer, {
        blobHTTPHeaders: {
          blobContentType: mimeType
        },
        metadata: {
          userId,
          originalFileName: fileName,
          uploadDate: new Date().toISOString(),
          mimeType,
          fileType: 'profile-picture'
        }
      });
      const blobUrl =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[100]++, blockBlobClient.url);
      // Generate public URL (no SAS needed for profile pictures)
      const publicUrl =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[101]++, `https://${this.config.accountName}.blob.core.windows.net/${this.containers.profilePictures}/${blobName}`);
      /* istanbul ignore next */
      cov_q7knbqum6().s[102]++;
      console.log(`✅ Profile picture uploaded to Azure Blob Storage: ${blobName}`);
      /* istanbul ignore next */
      cov_q7knbqum6().s[103]++;
      return {
        blobUrl: publicUrl,
        blobName
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_q7knbqum6().s[104]++;
      console.error('Failed to upload profile picture to Azure Blob Storage:', error);
      /* istanbul ignore next */
      cov_q7knbqum6().s[105]++;
      (0, errors_1.logServerError)(error, {
        service: 'azure-blob-storage',
        action: 'upload-profile',
        userId
      }, {
        fileName: fileName.substring(0, 50)
      });
      /* istanbul ignore next */
      cov_q7knbqum6().s[106]++;
      throw error;
    }
  }
  /**
   * Upload general file to Azure Blob Storage
   */
  async uploadFile(containerType, userId, fileBuffer, fileName, mimeType, metadata =
  /* istanbul ignore next */
  (cov_q7knbqum6().b[19][0]++, {})) {
    /* istanbul ignore next */
    cov_q7knbqum6().f[16]++;
    cov_q7knbqum6().s[107]++;
    if (!this.isReady()) {
      /* istanbul ignore next */
      cov_q7knbqum6().b[20][0]++;
      cov_q7knbqum6().s[108]++;
      throw new Error('Azure Blob Storage service not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_q7knbqum6().b[20][1]++;
    }
    cov_q7knbqum6().s[109]++;
    try {
      const blobName =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[110]++, `${userId}/${Date.now()}-${fileName}`);
      const containerName =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[111]++, this.containers[containerType]);
      const containerClient =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[112]++, this.blobServiceClient.getContainerClient(containerName));
      const blockBlobClient =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[113]++, containerClient.getBlockBlobClient(blobName));
      // Upload the file with metadata
      /* istanbul ignore next */
      cov_q7knbqum6().s[114]++;
      await blockBlobClient.uploadData(fileBuffer, {
        blobHTTPHeaders: {
          blobContentType: mimeType
        },
        metadata: Object.assign({
          userId,
          originalFileName: fileName,
          uploadDate: new Date().toISOString(),
          mimeType,
          containerType
        }, metadata)
      });
      const blobUrl =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[115]++, blockBlobClient.url);
      // Generate SAS URL for secure access
      const sasResult =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[116]++, await this.generateSASUrlForContainer(containerName, blobName, 24));
      /* istanbul ignore next */
      cov_q7knbqum6().s[117]++;
      console.log(`✅ File uploaded to Azure Blob Storage: ${blobName} in container ${containerName}`);
      /* istanbul ignore next */
      cov_q7knbqum6().s[118]++;
      return {
        blobUrl,
        blobName,
        sasUrl: sasResult.sasUrl
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_q7knbqum6().s[119]++;
      console.error(`Failed to upload file to Azure Blob Storage container ${containerType}:`, error);
      /* istanbul ignore next */
      cov_q7knbqum6().s[120]++;
      (0, errors_1.logServerError)(error, {
        service: 'azure-blob-storage',
        action: 'upload-file',
        userId
      }, {
        fileName: fileName.substring(0, 50),
        containerType
      });
      /* istanbul ignore next */
      cov_q7knbqum6().s[121]++;
      throw error;
    }
  }
  /**
   * Generate SAS URL for specific container and blob
   */
  async generateSASUrlForContainer(containerName, blobName, expiryHours =
  /* istanbul ignore next */
  (cov_q7knbqum6().b[21][0]++, 1)) {
    /* istanbul ignore next */
    cov_q7knbqum6().f[17]++;
    cov_q7knbqum6().s[122]++;
    if (
    /* istanbul ignore next */
    (cov_q7knbqum6().b[23][0]++, !this.isReady()) ||
    /* istanbul ignore next */
    (cov_q7knbqum6().b[23][1]++, !this.config)) {
      /* istanbul ignore next */
      cov_q7knbqum6().b[22][0]++;
      cov_q7knbqum6().s[123]++;
      throw new Error('Azure Blob Storage service not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_q7knbqum6().b[22][1]++;
    }
    cov_q7knbqum6().s[124]++;
    try {
      const permissions =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[125]++, storage_blob_1.BlobSASPermissions.parse('r')); // Read-only permission
      const expiresOn =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[126]++, new Date());
      /* istanbul ignore next */
      cov_q7knbqum6().s[127]++;
      expiresOn.setHours(expiresOn.getHours() + expiryHours);
      const sharedKeyCredential =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[128]++, new storage_blob_1.StorageSharedKeyCredential(this.config.accountName, this.config.accountKey));
      const sasOptions =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[129]++, {
        containerName,
        blobName,
        permissions,
        expiresOn,
        protocol: storage_blob_1.SASProtocol.Https
      });
      const sasToken =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[130]++, (0, storage_blob_1.generateBlobSASQueryParameters)(sasOptions, sharedKeyCredential));
      const sasUrl =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[131]++, `https://${this.config.accountName}.blob.core.windows.net/${containerName}/${blobName}?${sasToken}`);
      /* istanbul ignore next */
      cov_q7knbqum6().s[132]++;
      return {
        sasUrl,
        expiresOn
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_q7knbqum6().s[133]++;
      console.error('Failed to generate SAS URL for container:', error);
      /* istanbul ignore next */
      cov_q7knbqum6().s[134]++;
      throw error;
    }
  }
  /**
   * Delete file from specific container
   */
  async deleteFile(containerType, blobName) {
    /* istanbul ignore next */
    cov_q7knbqum6().f[18]++;
    cov_q7knbqum6().s[135]++;
    if (!this.isReady()) {
      /* istanbul ignore next */
      cov_q7knbqum6().b[24][0]++;
      cov_q7knbqum6().s[136]++;
      console.warn('Azure Blob Storage service not initialized, skipping delete');
      /* istanbul ignore next */
      cov_q7knbqum6().s[137]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_q7knbqum6().b[24][1]++;
    }
    cov_q7knbqum6().s[138]++;
    try {
      const containerName =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[139]++, this.containers[containerType]);
      const containerClient =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[140]++, this.blobServiceClient.getContainerClient(containerName));
      const blockBlobClient =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[141]++, containerClient.getBlockBlobClient(blobName));
      /* istanbul ignore next */
      cov_q7knbqum6().s[142]++;
      await blockBlobClient.deleteIfExists();
      /* istanbul ignore next */
      cov_q7knbqum6().s[143]++;
      console.log(`✅ File deleted from Azure Blob Storage: ${blobName} in container ${containerName}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_q7knbqum6().s[144]++;
      console.error(`Failed to delete file from Azure Blob Storage container ${containerType}:`, error);
      /* istanbul ignore next */
      cov_q7knbqum6().s[145]++;
      (0, errors_1.logServerError)(error, {
        service: 'azure-blob-storage',
        action: 'delete-file'
      }, {
        blobName: blobName.substring(0, 50),
        containerType
      });
      // Don't throw - we don't want to block the operation if deletion fails
    }
  }
  /**
   * Delete all files for a user (GDPR compliance)
   */
  async deleteAllUserFiles(userId) {
    /* istanbul ignore next */
    cov_q7knbqum6().f[19]++;
    var _a, e_1, _b, _c;
    /* istanbul ignore next */
    cov_q7knbqum6().s[146]++;
    if (!this.isReady()) {
      /* istanbul ignore next */
      cov_q7knbqum6().b[25][0]++;
      cov_q7knbqum6().s[147]++;
      console.warn('Azure Blob Storage service not initialized, skipping delete');
      /* istanbul ignore next */
      cov_q7knbqum6().s[148]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_q7knbqum6().b[25][1]++;
    }
    const deletedContainers =
    /* istanbul ignore next */
    (cov_q7knbqum6().s[149]++, []);
    /* istanbul ignore next */
    cov_q7knbqum6().s[150]++;
    try {
      /* istanbul ignore next */
      cov_q7knbqum6().s[151]++;
      // Delete from all containers
      for (const [containerType, containerName] of Object.entries(this.containers)) {
        /* istanbul ignore next */
        cov_q7knbqum6().s[152]++;
        try {
          const containerClient =
          /* istanbul ignore next */
          (cov_q7knbqum6().s[153]++, this.blobServiceClient.getContainerClient(containerName));
          const blobsToDelete =
          /* istanbul ignore next */
          (cov_q7knbqum6().s[154]++, []);
          /* istanbul ignore next */
          cov_q7knbqum6().s[155]++;
          try {
            /* istanbul ignore next */
            cov_q7knbqum6().s[156]++;
            // List all blobs for this user in this container
            for (var _d =
              /* istanbul ignore next */
              (cov_q7knbqum6().s[157]++, true), _e =
              /* istanbul ignore next */
              (cov_q7knbqum6().s[158]++, e_1 = void 0, __asyncValues(containerClient.listBlobsFlat({
                prefix: `${userId}/`
              }))), _f; _f = await _e.next(), _a = _f.done, !_a; _d = true) {
              /* istanbul ignore next */
              cov_q7knbqum6().s[159]++;
              _c = _f.value;
              /* istanbul ignore next */
              cov_q7knbqum6().s[160]++;
              _d = false;
              const blob =
              /* istanbul ignore next */
              (cov_q7knbqum6().s[161]++, _c);
              /* istanbul ignore next */
              cov_q7knbqum6().s[162]++;
              blobsToDelete.push(blob.name);
            }
          } catch (e_1_1) {
            /* istanbul ignore next */
            cov_q7knbqum6().s[163]++;
            e_1 = {
              error: e_1_1
            };
          } finally {
            /* istanbul ignore next */
            cov_q7knbqum6().s[164]++;
            try {
              /* istanbul ignore next */
              cov_q7knbqum6().s[165]++;
              if (
              /* istanbul ignore next */
              (cov_q7knbqum6().b[27][0]++, !_d) &&
              /* istanbul ignore next */
              (cov_q7knbqum6().b[27][1]++, !_a) &&
              /* istanbul ignore next */
              (cov_q7knbqum6().b[27][2]++, _b = _e.return)) {
                /* istanbul ignore next */
                cov_q7knbqum6().b[26][0]++;
                cov_q7knbqum6().s[166]++;
                await _b.call(_e);
              } else
              /* istanbul ignore next */
              {
                cov_q7knbqum6().b[26][1]++;
              }
            } finally {
              /* istanbul ignore next */
              cov_q7knbqum6().s[167]++;
              if (e_1) {
                /* istanbul ignore next */
                cov_q7knbqum6().b[28][0]++;
                cov_q7knbqum6().s[168]++;
                throw e_1.error;
              } else
              /* istanbul ignore next */
              {
                cov_q7knbqum6().b[28][1]++;
              }
            }
          }
          // Delete all user blobs in this container
          /* istanbul ignore next */
          cov_q7knbqum6().s[169]++;
          if (blobsToDelete.length > 0) {
            /* istanbul ignore next */
            cov_q7knbqum6().b[29][0]++;
            const deletePromises =
            /* istanbul ignore next */
            (cov_q7knbqum6().s[170]++, blobsToDelete.map(async blobName => {
              /* istanbul ignore next */
              cov_q7knbqum6().f[20]++;
              const blockBlobClient =
              /* istanbul ignore next */
              (cov_q7knbqum6().s[171]++, containerClient.getBlockBlobClient(blobName));
              /* istanbul ignore next */
              cov_q7knbqum6().s[172]++;
              await blockBlobClient.deleteIfExists();
            }));
            /* istanbul ignore next */
            cov_q7knbqum6().s[173]++;
            await Promise.all(deletePromises);
            /* istanbul ignore next */
            cov_q7knbqum6().s[174]++;
            deletedContainers.push(containerType);
            /* istanbul ignore next */
            cov_q7knbqum6().s[175]++;
            console.log(`✅ Deleted ${blobsToDelete.length} files for user ${userId} from container ${containerName}`);
          } else
          /* istanbul ignore next */
          {
            cov_q7knbqum6().b[29][1]++;
          }
        } catch (error) {
          /* istanbul ignore next */
          cov_q7knbqum6().s[176]++;
          console.error(`Failed to delete files from container ${containerName}:`, error);
        }
      }
      /* istanbul ignore next */
      cov_q7knbqum6().s[177]++;
      return deletedContainers;
    } catch (error) {
      /* istanbul ignore next */
      cov_q7knbqum6().s[178]++;
      console.error('Failed to delete all user files from Azure Blob Storage:', error);
      /* istanbul ignore next */
      cov_q7knbqum6().s[179]++;
      (0, errors_1.logServerError)(error, {
        service: 'azure-blob-storage',
        action: 'delete-all-user-files',
        userId
      });
      /* istanbul ignore next */
      cov_q7knbqum6().s[180]++;
      return deletedContainers;
    }
  }
  /**
   * List blobs for a user in specific container
   */
  async listUserBlobs(containerType, userId) {
    /* istanbul ignore next */
    cov_q7knbqum6().f[21]++;
    var _a, e_2, _b, _c;
    /* istanbul ignore next */
    cov_q7knbqum6().s[181]++;
    if (!this.isReady()) {
      /* istanbul ignore next */
      cov_q7knbqum6().b[30][0]++;
      cov_q7knbqum6().s[182]++;
      throw new Error('Azure Blob Storage service not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_q7knbqum6().b[30][1]++;
    }
    cov_q7knbqum6().s[183]++;
    try {
      const containerName =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[184]++, this.containers[containerType]);
      const containerClient =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[185]++, this.blobServiceClient.getContainerClient(containerName));
      const blobNames =
      /* istanbul ignore next */
      (cov_q7knbqum6().s[186]++, []);
      /* istanbul ignore next */
      cov_q7knbqum6().s[187]++;
      try {
        /* istanbul ignore next */
        cov_q7knbqum6().s[188]++;
        for (var _d =
          /* istanbul ignore next */
          (cov_q7knbqum6().s[189]++, true), _e =
          /* istanbul ignore next */
          (cov_q7knbqum6().s[190]++, __asyncValues(containerClient.listBlobsFlat({
            prefix: `${userId}/`
          }))), _f; _f = await _e.next(), _a = _f.done, !_a; _d = true) {
          /* istanbul ignore next */
          cov_q7knbqum6().s[191]++;
          _c = _f.value;
          /* istanbul ignore next */
          cov_q7knbqum6().s[192]++;
          _d = false;
          const blob =
          /* istanbul ignore next */
          (cov_q7knbqum6().s[193]++, _c);
          /* istanbul ignore next */
          cov_q7knbqum6().s[194]++;
          blobNames.push(blob.name);
        }
      } catch (e_2_1) {
        /* istanbul ignore next */
        cov_q7knbqum6().s[195]++;
        e_2 = {
          error: e_2_1
        };
      } finally {
        /* istanbul ignore next */
        cov_q7knbqum6().s[196]++;
        try {
          /* istanbul ignore next */
          cov_q7knbqum6().s[197]++;
          if (
          /* istanbul ignore next */
          (cov_q7knbqum6().b[32][0]++, !_d) &&
          /* istanbul ignore next */
          (cov_q7knbqum6().b[32][1]++, !_a) &&
          /* istanbul ignore next */
          (cov_q7knbqum6().b[32][2]++, _b = _e.return)) {
            /* istanbul ignore next */
            cov_q7knbqum6().b[31][0]++;
            cov_q7knbqum6().s[198]++;
            await _b.call(_e);
          } else
          /* istanbul ignore next */
          {
            cov_q7knbqum6().b[31][1]++;
          }
        } finally {
          /* istanbul ignore next */
          cov_q7knbqum6().s[199]++;
          if (e_2) {
            /* istanbul ignore next */
            cov_q7knbqum6().b[33][0]++;
            cov_q7knbqum6().s[200]++;
            throw e_2.error;
          } else
          /* istanbul ignore next */
          {
            cov_q7knbqum6().b[33][1]++;
          }
        }
      }
      /* istanbul ignore next */
      cov_q7knbqum6().s[201]++;
      return blobNames;
    } catch (error) {
      /* istanbul ignore next */
      cov_q7knbqum6().s[202]++;
      console.error(`Failed to list user blobs in container ${containerType}:`, error);
      /* istanbul ignore next */
      cov_q7knbqum6().s[203]++;
      throw error;
    }
  }
  /**
   * List all blobs for a user across all containers
   */
  async listAllUserBlobs(userId) {
    /* istanbul ignore next */
    cov_q7knbqum6().f[22]++;
    cov_q7knbqum6().s[204]++;
    if (!this.isReady()) {
      /* istanbul ignore next */
      cov_q7knbqum6().b[34][0]++;
      cov_q7knbqum6().s[205]++;
      throw new Error('Azure Blob Storage service not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_q7knbqum6().b[34][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_q7knbqum6().s[206]++, {});
    /* istanbul ignore next */
    cov_q7knbqum6().s[207]++;
    try {
      /* istanbul ignore next */
      cov_q7knbqum6().s[208]++;
      for (const [containerType, containerName] of Object.entries(this.containers)) {
        /* istanbul ignore next */
        cov_q7knbqum6().s[209]++;
        try {
          const blobs =
          /* istanbul ignore next */
          (cov_q7knbqum6().s[210]++, await this.listUserBlobs(containerType, userId));
          /* istanbul ignore next */
          cov_q7knbqum6().s[211]++;
          result[containerType] = blobs;
        } catch (error) {
          /* istanbul ignore next */
          cov_q7knbqum6().s[212]++;
          console.error(`Failed to list blobs in container ${containerType}:`, error);
          /* istanbul ignore next */
          cov_q7knbqum6().s[213]++;
          result[containerType] = [];
        }
      }
      /* istanbul ignore next */
      cov_q7knbqum6().s[214]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_q7knbqum6().s[215]++;
      console.error('Failed to list all user blobs:', error);
      /* istanbul ignore next */
      cov_q7knbqum6().s[216]++;
      throw error;
    }
  }
}
// Export singleton instance
/* istanbul ignore next */
cov_q7knbqum6().s[217]++;
exports.azureBlobStorage = new AzureBlobStorageService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,