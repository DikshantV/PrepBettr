{"version":3,"names":["cov_2ecg0ha5vh","actualCoverage","s","storage_blob_1","require","identity_1","api_1","IStorageService_1","TRACER_NAME","AzureBlobStorageService","constructor","storageAccountName","containerName","f","isInitialized","blobServiceUrl","credential","process","env","AZURE_STORAGE_CONNECTION_STRING","b","StorageSharedKeyCredential","AZURE_STORAGE_ACCOUNT_KEY","DefaultAzureCredential","blobServiceClient","BlobServiceClient","containerClient","getContainerClient","initialize","tracer","trace","getTracer","span","startSpan","createIfNotExists","setStatus","code","error","recordException","message","StorageError","StorageProvider","Azure","end","upload","file","path","mimeType","blockBlobClient","getBlockBlobClient","setAttributes","size","length","blobHTTPHeaders","blobContentType","fileMeta","provider","url","createdAt","Date","download","setAttribute","buffer","downloadToBuffer","delete","getPublicUrl","options","permissions","BlobSASPermissions","read","accessType","write","expiryDate","setSeconds","getSeconds","expiresIn","sasQueryParameters","generateBlobSASQueryParameters","blobName","startsOn","expiresOn","toString","exports"],"sources":["/Users/dikshantvashistha/PrepBettr/lib/storage/providers/AzureBlobStorageService.ts"],"sourcesContent":["import {\n  BlobServiceClient,\n  ContainerClient,\n  StorageSharedKeyCredential,\n  BlobSASPermissions,\n  generateBlobSASQueryParameters,\n} from '@azure/storage-blob';\nimport { DefaultAzureCredential } from '@azure/identity';\nimport { trace } from '@opentelemetry/api';\n\nimport { IStorageService, FileMeta, SignedUrlOptions, StorageProvider, StorageError } from '../IStorageService';\nimport { getConfiguration } from '@/lib/azure-config';\n\nconst TRACER_NAME = 'AzureBlobStorageService';\n\nexport class AzureBlobStorageService implements IStorageService {\n  private containerClient: ContainerClient;\n  private storageAccountName: string;\n  private isInitialized = false;\n\n  constructor(storageAccountName: string, private containerName: string) {\n    this.storageAccountName = storageAccountName;\n    const blobServiceUrl = `https://${this.storageAccountName}.blob.core.windows.net`;\n\n    // Use DefaultAzureCredential in production, fallback to connection string for local dev\n    const credential = process.env.AZURE_STORAGE_CONNECTION_STRING\n      ? new StorageSharedKeyCredential(this.storageAccountName, process.env.AZURE_STORAGE_ACCOUNT_KEY!)\n      : new DefaultAzureCredential();\n\n    const blobServiceClient = new BlobServiceClient(blobServiceUrl, credential);\n    this.containerClient = blobServiceClient.getContainerClient(this.containerName);\n  }\n\n  async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    const tracer = trace.getTracer(TRACER_NAME);\n    const span = tracer.startSpan('initialize');\n\n    try {\n      await this.containerClient.createIfNotExists(); // Private access by default\n      this.isInitialized = true;\n      span.setStatus({ code: 1 }); // OK\n    } catch (error) {\n      span.recordException(error as Error);\n      span.setStatus({ code: 2, message: (error as Error).message }); // ERROR\n      throw new StorageError('Failed to initialize Azure Blob Storage container', StorageProvider.Azure, error);\n    } finally {\n      span.end();\n    }\n  }\n\n  async upload(file: Buffer, path: string, mimeType?: string): Promise<FileMeta> {\n    await this.initialize();\n    const blockBlobClient = this.containerClient.getBlockBlobClient(path);\n\n    const tracer = trace.getTracer(TRACER_NAME);\n    const span = tracer.startSpan('upload');\n    span.setAttributes({ path, mimeType, size: file.length });\n\n    try {\n      await blockBlobClient.upload(file, file.length, { blobHTTPHeaders: { blobContentType: mimeType } });\n      const fileMeta: FileMeta = {\n        provider: StorageProvider.Azure,\n        url: blockBlobClient.url,\n        path,\n        size: file.length,\n        mimeType: mimeType || 'application/octet-stream',\n        createdAt: new Date(),\n      };\n      span.setStatus({ code: 1 });\n      return fileMeta;\n    } catch (error) {\n      span.recordException(error as Error);\n      span.setStatus({ code: 2, message: (error as Error).message });\n      throw new StorageError(`Failed to upload to Azure Blob Storage: ${path}`, StorageProvider.Azure, error);\n    } finally {\n      span.end();\n    }\n  }\n\n  async download(path: string): Promise<Buffer> {\n    await this.initialize();\n    const blockBlobClient = this.containerClient.getBlockBlobClient(path);\n\n    const tracer = trace.getTracer(TRACER_NAME);\n    const span = tracer.startSpan('download');\n    span.setAttribute('path', path);\n\n    try {\n      const buffer = await blockBlobClient.downloadToBuffer();\n      span.setStatus({ code: 1 });\n      return buffer;\n    } catch (error) {\n      span.recordException(error as Error);\n      span.setStatus({ code: 2, message: (error as Error).message });\n      throw new StorageError(`Failed to download from Azure Blob Storage: ${path}`, StorageProvider.Azure, error);\n    } finally {\n      span.end();\n    }\n  }\n\n  async delete(path: string): Promise<void> {\n    await this.initialize();\n    const blockBlobClient = this.containerClient.getBlockBlobClient(path);\n\n    const tracer = trace.getTracer(TRACER_NAME);\n    const span = tracer.startSpan('delete');\n    span.setAttribute('path', path);\n\n    try {\n      await blockBlobClient.delete();\n      span.setStatus({ code: 1 });\n    } catch (error) {\n      span.recordException(error as Error);\n      span.setStatus({ code: 2, message: (error as Error).message });\n      throw new StorageError(`Failed to delete from Azure Blob Storage: ${path}`, StorageProvider.Azure, error);\n    } finally {\n      span.end();\n    }\n  }\n\n  async getPublicUrl(path: string, options?: SignedUrlOptions): Promise<string> {\n    await this.initialize();\n    const blockBlobClient = this.containerClient.getBlockBlobClient(path);\n\n    const permissions = new BlobSASPermissions();\n    permissions.read = options?.accessType === 'read' || !options?.accessType;\n    permissions.write = options?.accessType === 'write';\n\n    const expiryDate = new Date();\n    expiryDate.setSeconds(expiryDate.getSeconds() + (options?.expiresIn || 3600)); // Default to 1 hour\n\n    const sasQueryParameters = generateBlobSASQueryParameters(\n      {\n        containerName: this.containerName,\n        blobName: path,\n        permissions,\n        startsOn: new Date(),\n        expiresOn: expiryDate,\n      },\n      this.containerClient.credential as StorageSharedKeyCredential\n    );\n\n    return `${blockBlobClient.url}?${sasQueryParameters.toString()}`;\n  }\n}\n\n"],"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","ignoreList":[]}