88be7a75ad096c1e0376fd81260a562f
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.theirStackCreditsService = exports.TheirStackCreditsService = void 0;
exports.getCurrentTheirStackCredits = getCurrentTheirStackCredits;
exports.getTheirStackCreditsSummary = getTheirStackCreditsSummary;
exports.getTheirStackCreditsHealth = getTheirStackCreditsHealth;
const admin_1 = require("@/lib/firebase/admin");
class TheirStackCreditsService {
    constructor() {
        this.firestore = null;
        this.initializeFirestore();
    }
    static getInstance() {
        if (!TheirStackCreditsService.instance) {
            TheirStackCreditsService.instance = new TheirStackCreditsService();
        }
        return TheirStackCreditsService.instance;
    }
    async initializeFirestore() {
        try {
            this.firestore = await (0, admin_1.getAdminFirestore)();
        }
        catch (error) {
            console.error('❌ Failed to initialize Firestore for TheirStack credits service:', error);
        }
    }
    /**
     * Get current month's credit usage
     */
    async getCurrentCredits() {
        const currentMonth = new Date().toISOString().slice(0, 7);
        return this.getCreditsForMonth(currentMonth);
    }
    /**
     * Get credits usage for a specific month
     */
    async getCreditsForMonth(month) {
        var _a, _b, _c;
        if (!this.firestore) {
            await this.initializeFirestore();
        }
        try {
            const docRef = this.firestore
                .collection('usage')
                .doc('theirstackCredits')
                .collection('monthly')
                .doc(month);
            const doc = await docRef.get();
            const creditsUsed = doc.exists ? (((_a = doc.data()) === null || _a === void 0 ? void 0 : _a.creditsUsed) || 0) : 0;
            const creditsRemaining = Math.max(0, TheirStackCreditsService.FREE_TIER_LIMIT - creditsUsed);
            // Generate warning message if needed
            let warning;
            const isOverLimit = creditsUsed >= TheirStackCreditsService.EMERGENCY_LIMIT;
            if (isOverLimit) {
                warning = `⚠️ Emergency limit exceeded (${creditsUsed}/${TheirStackCreditsService.EMERGENCY_LIMIT})`;
            }
            else if (creditsUsed >= TheirStackCreditsService.FREE_TIER_LIMIT * TheirStackCreditsService.WARNING_THRESHOLD) {
                const percentage = Math.round((creditsUsed / TheirStackCreditsService.FREE_TIER_LIMIT) * 100);
                warning = `⚠️ ${percentage}% of free tier used (${creditsUsed}/${TheirStackCreditsService.FREE_TIER_LIMIT})`;
            }
            return {
                month,
                creditsUsed,
                creditsRemaining,
                lastUpdated: doc.exists ? (((_c = (_b = doc.data()) === null || _b === void 0 ? void 0 : _b.lastUpdated) === null || _c === void 0 ? void 0 : _c.toDate()) || new Date()) : new Date(),
                warning,
                isOverLimit
            };
        }
        catch (error) {
            console.error('❌ Failed to get TheirStack credits for month:', month, error);
            // Return default data on error
            return {
                month,
                creditsUsed: 0,
                creditsRemaining: TheirStackCreditsService.FREE_TIER_LIMIT,
                lastUpdated: new Date(),
                isOverLimit: false
            };
        }
    }
    /**
     * Get comprehensive credits summary including historical data
     */
    async getCreditsSummary() {
        const currentMonth = new Date().toISOString().slice(0, 7);
        const previousMonth = this.getPreviousMonth(currentMonth);
        const [currentMonthData, previousMonthData, yearToDateCredits, averageMonthlyCredits] = await Promise.all([
            this.getCreditsForMonth(currentMonth),
            this.getCreditsForMonth(previousMonth),
            this.getYearToDateCredits(),
            this.getAverageMonthlyCredits()
        ]);
        return {
            currentMonth: currentMonthData,
            previousMonth: previousMonthData.creditsUsed > 0 ? previousMonthData : null,
            yearToDate: yearToDateCredits,
            averageMonthly: averageMonthlyCredits
        };
    }
    /**
     * Get total credits used in current year
     */
    async getYearToDateCredits() {
        if (!this.firestore) {
            await this.initializeFirestore();
        }
        try {
            const currentYear = new Date().getFullYear();
            const yearStart = `${currentYear}-01`;
            const yearEnd = `${currentYear}-12`;
            const snapshot = await this.firestore
                .collection('usage')
                .doc('theirstackCredits')
                .collection('monthly')
                .where('month', '>=', yearStart)
                .where('month', '<=', yearEnd)
                .get();
            let totalCredits = 0;
            snapshot.docs.forEach((doc) => {
                var _a;
                totalCredits += ((_a = doc.data()) === null || _a === void 0 ? void 0 : _a.creditsUsed) || 0;
            });
            return totalCredits;
        }
        catch (error) {
            console.error('❌ Failed to get year-to-date credits:', error);
            return 0;
        }
    }
    /**
     * Get average monthly credits usage (last 6 months)
     */
    async getAverageMonthlyCredits() {
        if (!this.firestore) {
            await this.initializeFirestore();
        }
        try {
            // Get last 6 months
            const months = [];
            const now = new Date();
            for (let i = 0; i < 6; i++) {
                const date = new Date(now.getFullYear(), now.getMonth() - i, 1);
                months.push(date.toISOString().slice(0, 7));
            }
            const snapshot = await this.firestore
                .collection('usage')
                .doc('theirstackCredits')
                .collection('monthly')
                .where('month', 'in', months)
                .get();
            let totalCredits = 0;
            let monthsWithData = 0;
            snapshot.docs.forEach((doc) => {
                var _a;
                const credits = ((_a = doc.data()) === null || _a === void 0 ? void 0 : _a.creditsUsed) || 0;
                if (credits > 0) {
                    totalCredits += credits;
                    monthsWithData++;
                }
            });
            return monthsWithData > 0 ? Math.round(totalCredits / monthsWithData) : 0;
        }
        catch (error) {
            console.error('❌ Failed to get average monthly credits:', error);
            return 0;
        }
    }
    /**
     * Check if credits are approaching limits and return alert level
     */
    getCreditAlertLevel(creditsUsed) {
        if (creditsUsed >= TheirStackCreditsService.EMERGENCY_LIMIT) {
            return 'emergency';
        }
        else if (creditsUsed >= TheirStackCreditsService.FREE_TIER_LIMIT) {
            return 'danger';
        }
        else if (creditsUsed >= TheirStackCreditsService.FREE_TIER_LIMIT * TheirStackCreditsService.WARNING_THRESHOLD) {
            return 'warning';
        }
        return 'none';
    }
    /**
     * Get credits health status for dashboard
     */
    async getCreditsHealthStatus() {
        const currentCredits = await this.getCurrentCredits();
        const percentage = Math.round((currentCredits.creditsUsed / TheirStackCreditsService.FREE_TIER_LIMIT) * 100);
        let status;
        let message;
        if (currentCredits.isOverLimit) {
            status = 'emergency';
            message = `Emergency limit exceeded! ${currentCredits.creditsUsed} credits used this month.`;
        }
        else if (currentCredits.creditsUsed >= TheirStackCreditsService.FREE_TIER_LIMIT) {
            status = 'critical';
            message = `Free tier limit exceeded! ${currentCredits.creditsUsed}/${TheirStackCreditsService.FREE_TIER_LIMIT} credits used (${percentage}%).`;
        }
        else if (percentage >= 80) {
            status = 'warning';
            message = `Approaching free tier limit: ${currentCredits.creditsUsed}/${TheirStackCreditsService.FREE_TIER_LIMIT} credits used (${percentage}%).`;
        }
        else {
            status = 'healthy';
            message = `Credits usage is healthy: ${currentCredits.creditsUsed}/${TheirStackCreditsService.FREE_TIER_LIMIT} credits used (${percentage}%).`;
        }
        return {
            status,
            message,
            creditsUsed: currentCredits.creditsUsed,
            creditsRemaining: currentCredits.creditsRemaining,
            percentage
        };
    }
    /**
     * Get historical credits data for charts (last 12 months)
     */
    async getHistoricalCreditsData() {
        if (!this.firestore) {
            await this.initializeFirestore();
        }
        try {
            // Get last 12 months
            const months = [];
            const now = new Date();
            for (let i = 11; i >= 0; i--) {
                const date = new Date(now.getFullYear(), now.getMonth() - i, 1);
                months.push(date.toISOString().slice(0, 7));
            }
            const snapshot = await this.firestore
                .collection('usage')
                .doc('theirstackCredits')
                .collection('monthly')
                .where('month', 'in', months)
                .get();
            // Create a map for quick lookup
            const dataMap = new Map();
            snapshot.docs.forEach((doc) => {
                const data = doc.data();
                dataMap.set(data.month, data.creditsUsed || 0);
            });
            // Build the historical data array
            return months.map(month => ({
                month,
                creditsUsed: dataMap.get(month) || 0,
                date: new Date(`${month}-01`)
            }));
        }
        catch (error) {
            console.error('❌ Failed to get historical credits data:', error);
            return [];
        }
    }
    /**
     * Helper method to get previous month string
     */
    getPreviousMonth(month) {
        const [year, monthNum] = month.split('-').map(Number);
        const date = new Date(year, monthNum - 2, 1); // monthNum - 2 because Date months are 0-indexed
        return date.toISOString().slice(0, 7);
    }
    /**
     * Get credits configuration for display
     */
    static getCreditsConfiguration() {
        return {
            freeTierLimit: TheirStackCreditsService.FREE_TIER_LIMIT,
            warningThreshold: Math.round(TheirStackCreditsService.FREE_TIER_LIMIT * TheirStackCreditsService.WARNING_THRESHOLD),
            emergencyLimit: TheirStackCreditsService.EMERGENCY_LIMIT,
            warningPercentage: TheirStackCreditsService.WARNING_THRESHOLD * 100
        };
    }
}
exports.TheirStackCreditsService = TheirStackCreditsService;
// Credit limits
TheirStackCreditsService.FREE_TIER_LIMIT = 200;
TheirStackCreditsService.WARNING_THRESHOLD = 0.8; // 80%
TheirStackCreditsService.EMERGENCY_LIMIT = 500;
// Export convenience functions
exports.theirStackCreditsService = TheirStackCreditsService.getInstance();
async function getCurrentTheirStackCredits() {
    return exports.theirStackCreditsService.getCurrentCredits();
}
async function getTheirStackCreditsSummary() {
    return exports.theirStackCreditsService.getCreditsSummary();
}
async function getTheirStackCreditsHealth() {
    return exports.theirStackCreditsService.getCreditsHealthStatus();
}
exports.default = TheirStackCreditsService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,