6e52d7f8a24ad88da6321114325a326a
"use strict";
"use server";

/* istanbul ignore next */
function cov_15wcsvsff0() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/services/cloud-functions-verification.ts";
  var hash = "d1006b275da4dd49e22294d2126cc1c92c1eea57";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/services/cloud-functions-verification.ts",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "1": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 4,
          column: 44
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 68
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 54
        }
      },
      "4": {
        start: {
          line: 7,
          column: 33
        },
        end: {
          line: 7,
          column: 81
        }
      },
      "5": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 15,
          column: 88
        }
      },
      "6": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 67
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 46,
          column: 9
        }
      },
      "8": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 45,
          column: 13
        }
      },
      "9": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 80
        }
      },
      "10": {
        start: {
          line: 26,
          column: 36
        },
        end: {
          line: 26,
          column: 108
        }
      },
      "11": {
        start: {
          line: 27,
          column: 16
        },
        end: {
          line: 40,
          column: 17
        }
      },
      "12": {
        start: {
          line: 28,
          column: 20
        },
        end: {
          line: 36,
          column: 22
        }
      },
      "13": {
        start: {
          line: 39,
          column: 20
        },
        end: {
          line: 39,
          column: 95
        }
      },
      "14": {
        start: {
          line: 43,
          column: 16
        },
        end: {
          line: 43,
          column: 106
        }
      },
      "15": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "16": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 85
        }
      },
      "17": {
        start: {
          line: 50,
          column: 29
        },
        end: {
          line: 60,
          column: 14
        }
      },
      "18": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 64,
          column: 13
        }
      },
      "19": {
        start: {
          line: 62,
          column: 34
        },
        end: {
          line: 62,
          column: 97
        }
      },
      "20": {
        start: {
          line: 62,
          column: 69
        },
        end: {
          line: 62,
          column: 95
        }
      },
      "21": {
        start: {
          line: 63,
          column: 16
        },
        end: {
          line: 63,
          column: 78
        }
      },
      "22": {
        start: {
          line: 65,
          column: 27
        },
        end: {
          line: 65,
          column: 48
        }
      },
      "23": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 70,
          column: 14
        }
      },
      "24": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 96
        }
      },
      "25": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 78,
          column: 14
        }
      },
      "26": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 116,
          column: 9
        }
      },
      "27": {
        start: {
          line: 86,
          column: 29
        },
        end: {
          line: 96,
          column: 14
        }
      },
      "28": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 99,
          column: 13
        }
      },
      "29": {
        start: {
          line: 98,
          column: 16
        },
        end: {
          line: 98,
          column: 84
        }
      },
      "30": {
        start: {
          line: 100,
          column: 27
        },
        end: {
          line: 100,
          column: 48
        }
      },
      "31": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 106,
          column: 14
        }
      },
      "32": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 68
        }
      },
      "33": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 115,
          column: 14
        }
      },
      "34": {
        start: {
          line: 120,
          column: 0
        },
        end: {
          line: 120,
          column: 77
        }
      },
      "35": {
        start: {
          line: 123,
          column: 4
        },
        end: {
          line: 123,
          column: 90
        }
      },
      "36": {
        start: {
          line: 126,
          column: 4
        },
        end: {
          line: 126,
          column: 96
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 18
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 13
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 78
          },
          end: {
            line: 80,
            column: 5
          }
        },
        line: 21
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 62,
            column: 62
          },
          end: {
            line: 62,
            column: 63
          }
        },
        loc: {
          start: {
            line: 62,
            column: 69
          },
          end: {
            line: 62,
            column: 95
          }
        },
        line: 62
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        loc: {
          start: {
            line: 84,
            column: 62
          },
          end: {
            line: 117,
            column: 5
          }
        },
        line: 84
      },
      "4": {
        name: "verifyTokenWithCloudFunction",
        decl: {
          start: {
            line: 122,
            column: 15
          },
          end: {
            line: 122,
            column: 43
          }
        },
        loc: {
          start: {
            line: 122,
            column: 53
          },
          end: {
            line: 124,
            column: 1
          }
        },
        line: 122
      },
      "5": {
        name: "verifyUserPermissions",
        decl: {
          start: {
            line: 125,
            column: 15
          },
          end: {
            line: 125,
            column: 36
          }
        },
        loc: {
          start: {
            line: 125,
            column: 59
          },
          end: {
            line: 127,
            column: 1
          }
        },
        line: 125
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 35
          },
          end: {
            line: 15,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 14,
            column: 35
          },
          end: {
            line: 14,
            column: 69
          }
        }, {
          start: {
            line: 15,
            column: 12
          },
          end: {
            line: 15,
            column: 87
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 21,
            column: 48
          },
          end: {
            line: 21,
            column: 76
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 21,
            column: 63
          },
          end: {
            line: 21,
            column: 76
          }
        }],
        line: 21
      },
      "2": {
        loc: {
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 23
      },
      "3": {
        loc: {
          start: {
            line: 27,
            column: 16
          },
          end: {
            line: 40,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 16
          },
          end: {
            line: 40,
            column: 17
          }
        }, {
          start: {
            line: 38,
            column: 21
          },
          end: {
            line: 40,
            column: 17
          }
        }],
        line: 27
      },
      "4": {
        loc: {
          start: {
            line: 27,
            column: 20
          },
          end: {
            line: 27,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 20
          },
          end: {
            line: 27,
            column: 37
          }
        }, {
          start: {
            line: 27,
            column: 41
          },
          end: {
            line: 27,
            column: 60
          }
        }],
        line: 27
      },
      "5": {
        loc: {
          start: {
            line: 39,
            column: 36
          },
          end: {
            line: 39,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 39,
            column: 36
          },
          end: {
            line: 39,
            column: 53
          }
        }, {
          start: {
            line: 39,
            column: 57
          },
          end: {
            line: 39,
            column: 93
          }
        }],
        line: 39
      },
      "6": {
        loc: {
          start: {
            line: 61,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 61,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 61
      },
      "7": {
        loc: {
          start: {
            line: 63,
            column: 32
          },
          end: {
            line: 63,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 63,
            column: 32
          },
          end: {
            line: 63,
            column: 47
          }
        }, {
          start: {
            line: 63,
            column: 51
          },
          end: {
            line: 63,
            column: 76
          }
        }],
        line: 63
      },
      "8": {
        loc: {
          start: {
            line: 77,
            column: 23
          },
          end: {
            line: 77,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 77,
            column: 48
          },
          end: {
            line: 77,
            column: 61
          }
        }, {
          start: {
            line: 77,
            column: 64
          },
          end: {
            line: 77,
            column: 79
          }
        }],
        line: 77
      },
      "9": {
        loc: {
          start: {
            line: 97,
            column: 12
          },
          end: {
            line: 99,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 97,
            column: 12
          },
          end: {
            line: 99,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 97
      },
      "10": {
        loc: {
          start: {
            line: 114,
            column: 23
          },
          end: {
            line: 114,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 114,
            column: 48
          },
          end: {
            line: 114,
            column: 61
          }
        }, {
          start: {
            line: 114,
            column: 64
          },
          end: {
            line: 114,
            column: 79
          }
        }],
        line: 114
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/services/cloud-functions-verification.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/services/cloud-functions-verification.ts"],
      sourcesContent: ["\"use server\";\n\nimport { azureFunctionsClient } from '@/lib/services/azure-functions-client';\n\n/**\n * Cloud Functions verification service\n * Uses Azure Functions as primary, Firebase Cloud Functions as fallback\n */\nclass CloudFunctionsVerificationService {\n  private readonly CLOUD_FUNCTIONS_URL = process.env.FIREBASE_FUNCTIONS_URL || \n    `https://us-central1-${process.env.FIREBASE_PROJECT_ID}.cloudfunctions.net`;\n  private readonly AZURE_FUNCTIONS_URL = process.env.AZURE_FUNCTIONS_URL;\n\n  /**\n   * Verify token using Azure Functions (primary) or Firebase Cloud Functions (fallback)\n   */\n  async verifyTokenWithCloudFunction(idToken: string, functionName: string = 'verifyToken'): Promise<CloudFunctionResult> {\n    // Try Azure Functions first\n    if (this.AZURE_FUNCTIONS_URL) {\n      try {\n        console.log('Attempting token verification via Azure Function');\n        const azureResult = await azureFunctionsClient.verifyToken(idToken);\n        \n        if (azureResult.valid && azureResult.decoded) {\n          return {\n            success: true,\n            data: {\n              valid: true,\n              decoded: azureResult.decoded,\n              method: 'azure-function'\n            },\n            error: null\n          };\n        } else {\n          throw new Error(azureResult.error || 'Azure Function verification failed');\n        }\n      } catch (azureError) {\n        console.warn('Azure Function verification failed, falling back to Firebase:', azureError);\n        // Continue to Firebase fallback\n      }\n    }\n    \n    // Fallback to Firebase Cloud Functions\n    try {\n      console.log('Attempting token verification via Firebase Cloud Function');\n      const response = await fetch(`${this.CLOUD_FUNCTIONS_URL}/${functionName}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${idToken}`, // Send token in header\n        },\n        body: JSON.stringify({\n          idToken,\n          timestamp: Date.now()\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ error: 'Network error' }));\n        throw new Error(errorData.error || `HTTP ${response.status}`);\n      }\n\n      const result = await response.json();\n      return {\n        success: true,\n        data: { ...result, method: 'firebase-cloud-function' },\n        error: null\n      };\n    } catch (error) {\n      console.error('Both Azure and Firebase Cloud Function verification failed:', error);\n      return {\n        success: false,\n        data: null,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Verify user permissions using Cloud Function\n   */\n  async verifyUserPermissions(idToken: string, requiredPermissions: string[]): Promise<PermissionResult> {\n    try {\n      const response = await fetch(`${this.CLOUD_FUNCTIONS_URL}/verifyPermissions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${idToken}`,\n        },\n        body: JSON.stringify({\n          requiredPermissions,\n          timestamp: Date.now()\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Permission check failed: HTTP ${response.status}`);\n      }\n\n      const result = await response.json();\n      return {\n        success: true,\n        hasPermissions: result.hasPermissions,\n        permissions: result.permissions,\n        error: null\n      };\n    } catch (error) {\n      console.error('Permission verification failed:', error);\n      return {\n        success: false,\n        hasPermissions: false,\n        permissions: [],\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n}\n\n\n// Types\ninterface CloudFunctionResult {\n  success: boolean;\n  data: any | null;\n  error: string | null;\n}\n\ninterface PermissionResult {\n  success: boolean;\n  hasPermissions: boolean;\n  permissions: string[];\n  error: string | null;\n}\n\n// Export singleton instance\nexport const cloudFunctionsVerification = new CloudFunctionsVerificationService();\n\n// Helper functions\nexport async function verifyTokenWithCloudFunction(idToken: string): Promise<CloudFunctionResult> {\n  return await cloudFunctionsVerification.verifyTokenWithCloudFunction(idToken);\n}\n\nexport async function verifyUserPermissions(idToken: string, permissions: string[]): Promise<PermissionResult> {\n  return await cloudFunctionsVerification.verifyUserPermissions(idToken, permissions);\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d1006b275da4dd49e22294d2126cc1c92c1eea57"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_15wcsvsff0 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_15wcsvsff0();
cov_15wcsvsff0().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_15wcsvsff0().s[1]++;
exports.cloudFunctionsVerification = void 0;
/* istanbul ignore next */
cov_15wcsvsff0().s[2]++;
exports.verifyTokenWithCloudFunction = verifyTokenWithCloudFunction;
/* istanbul ignore next */
cov_15wcsvsff0().s[3]++;
exports.verifyUserPermissions = verifyUserPermissions;
const azure_functions_client_1 =
/* istanbul ignore next */
(cov_15wcsvsff0().s[4]++, require("@/lib/services/azure-functions-client"));
/**
 * Cloud Functions verification service
 * Uses Azure Functions as primary, Firebase Cloud Functions as fallback
 */
class CloudFunctionsVerificationService {
  constructor() {
    /* istanbul ignore next */
    cov_15wcsvsff0().f[0]++;
    cov_15wcsvsff0().s[5]++;
    this.CLOUD_FUNCTIONS_URL =
    /* istanbul ignore next */
    (cov_15wcsvsff0().b[0][0]++, process.env.FIREBASE_FUNCTIONS_URL) ||
    /* istanbul ignore next */
    (cov_15wcsvsff0().b[0][1]++, `https://us-central1-${process.env.FIREBASE_PROJECT_ID}.cloudfunctions.net`);
    /* istanbul ignore next */
    cov_15wcsvsff0().s[6]++;
    this.AZURE_FUNCTIONS_URL = process.env.AZURE_FUNCTIONS_URL;
  }
  /**
   * Verify token using Azure Functions (primary) or Firebase Cloud Functions (fallback)
   */
  async verifyTokenWithCloudFunction(idToken, functionName =
  /* istanbul ignore next */
  (cov_15wcsvsff0().b[1][0]++, 'verifyToken')) {
    /* istanbul ignore next */
    cov_15wcsvsff0().f[1]++;
    cov_15wcsvsff0().s[7]++;
    // Try Azure Functions first
    if (this.AZURE_FUNCTIONS_URL) {
      /* istanbul ignore next */
      cov_15wcsvsff0().b[2][0]++;
      cov_15wcsvsff0().s[8]++;
      try {
        /* istanbul ignore next */
        cov_15wcsvsff0().s[9]++;
        console.log('Attempting token verification via Azure Function');
        const azureResult =
        /* istanbul ignore next */
        (cov_15wcsvsff0().s[10]++, await azure_functions_client_1.azureFunctionsClient.verifyToken(idToken));
        /* istanbul ignore next */
        cov_15wcsvsff0().s[11]++;
        if (
        /* istanbul ignore next */
        (cov_15wcsvsff0().b[4][0]++, azureResult.valid) &&
        /* istanbul ignore next */
        (cov_15wcsvsff0().b[4][1]++, azureResult.decoded)) {
          /* istanbul ignore next */
          cov_15wcsvsff0().b[3][0]++;
          cov_15wcsvsff0().s[12]++;
          return {
            success: true,
            data: {
              valid: true,
              decoded: azureResult.decoded,
              method: 'azure-function'
            },
            error: null
          };
        } else {
          /* istanbul ignore next */
          cov_15wcsvsff0().b[3][1]++;
          cov_15wcsvsff0().s[13]++;
          throw new Error(
          /* istanbul ignore next */
          (cov_15wcsvsff0().b[5][0]++, azureResult.error) ||
          /* istanbul ignore next */
          (cov_15wcsvsff0().b[5][1]++, 'Azure Function verification failed'));
        }
      } catch (azureError) {
        /* istanbul ignore next */
        cov_15wcsvsff0().s[14]++;
        console.warn('Azure Function verification failed, falling back to Firebase:', azureError);
        // Continue to Firebase fallback
      }
    } else
    /* istanbul ignore next */
    {
      cov_15wcsvsff0().b[2][1]++;
    }
    // Fallback to Firebase Cloud Functions
    cov_15wcsvsff0().s[15]++;
    try {
      /* istanbul ignore next */
      cov_15wcsvsff0().s[16]++;
      console.log('Attempting token verification via Firebase Cloud Function');
      const response =
      /* istanbul ignore next */
      (cov_15wcsvsff0().s[17]++, await fetch(`${this.CLOUD_FUNCTIONS_URL}/${functionName}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${idToken}` // Send token in header
        },
        body: JSON.stringify({
          idToken,
          timestamp: Date.now()
        })
      }));
      /* istanbul ignore next */
      cov_15wcsvsff0().s[18]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_15wcsvsff0().b[6][0]++;
        const errorData =
        /* istanbul ignore next */
        (cov_15wcsvsff0().s[19]++, await response.json().catch(() => {
          /* istanbul ignore next */
          cov_15wcsvsff0().f[2]++;
          cov_15wcsvsff0().s[20]++;
          return {
            error: 'Network error'
          };
        }));
        /* istanbul ignore next */
        cov_15wcsvsff0().s[21]++;
        throw new Error(
        /* istanbul ignore next */
        (cov_15wcsvsff0().b[7][0]++, errorData.error) ||
        /* istanbul ignore next */
        (cov_15wcsvsff0().b[7][1]++, `HTTP ${response.status}`));
      } else
      /* istanbul ignore next */
      {
        cov_15wcsvsff0().b[6][1]++;
      }
      const result =
      /* istanbul ignore next */
      (cov_15wcsvsff0().s[22]++, await response.json());
      /* istanbul ignore next */
      cov_15wcsvsff0().s[23]++;
      return {
        success: true,
        data: Object.assign(Object.assign({}, result), {
          method: 'firebase-cloud-function'
        }),
        error: null
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_15wcsvsff0().s[24]++;
      console.error('Both Azure and Firebase Cloud Function verification failed:', error);
      /* istanbul ignore next */
      cov_15wcsvsff0().s[25]++;
      return {
        success: false,
        data: null,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_15wcsvsff0().b[8][0]++, error.message) :
        /* istanbul ignore next */
        (cov_15wcsvsff0().b[8][1]++, 'Unknown error')
      };
    }
  }
  /**
   * Verify user permissions using Cloud Function
   */
  async verifyUserPermissions(idToken, requiredPermissions) {
    /* istanbul ignore next */
    cov_15wcsvsff0().f[3]++;
    cov_15wcsvsff0().s[26]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_15wcsvsff0().s[27]++, await fetch(`${this.CLOUD_FUNCTIONS_URL}/verifyPermissions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${idToken}`
        },
        body: JSON.stringify({
          requiredPermissions,
          timestamp: Date.now()
        })
      }));
      /* istanbul ignore next */
      cov_15wcsvsff0().s[28]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_15wcsvsff0().b[9][0]++;
        cov_15wcsvsff0().s[29]++;
        throw new Error(`Permission check failed: HTTP ${response.status}`);
      } else
      /* istanbul ignore next */
      {
        cov_15wcsvsff0().b[9][1]++;
      }
      const result =
      /* istanbul ignore next */
      (cov_15wcsvsff0().s[30]++, await response.json());
      /* istanbul ignore next */
      cov_15wcsvsff0().s[31]++;
      return {
        success: true,
        hasPermissions: result.hasPermissions,
        permissions: result.permissions,
        error: null
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_15wcsvsff0().s[32]++;
      console.error('Permission verification failed:', error);
      /* istanbul ignore next */
      cov_15wcsvsff0().s[33]++;
      return {
        success: false,
        hasPermissions: false,
        permissions: [],
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_15wcsvsff0().b[10][0]++, error.message) :
        /* istanbul ignore next */
        (cov_15wcsvsff0().b[10][1]++, 'Unknown error')
      };
    }
  }
}
// Export singleton instance
/* istanbul ignore next */
cov_15wcsvsff0().s[34]++;
exports.cloudFunctionsVerification = new CloudFunctionsVerificationService();
// Helper functions
async function verifyTokenWithCloudFunction(idToken) {
  /* istanbul ignore next */
  cov_15wcsvsff0().f[4]++;
  cov_15wcsvsff0().s[35]++;
  return await exports.cloudFunctionsVerification.verifyTokenWithCloudFunction(idToken);
}
async function verifyUserPermissions(idToken, permissions) {
  /* istanbul ignore next */
  cov_15wcsvsff0().f[5]++;
  cov_15wcsvsff0().s[36]++;
  return await exports.cloudFunctionsVerification.verifyUserPermissions(idToken, permissions);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,