{"version":3,"names":["cov_1x26zyqn7v","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","branchMap","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage"],"sources":["/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/types/agent-types.ts"],"sourcesContent":["/**\n * Agent Types for Azure AI Foundry\n * \n * Unified type definitions for interview agents and questions\n */\n\n// ===== CORE INTERFACES =====\n\nexport interface Question {\n  id: string;\n  text: string;\n  type: 'technical' | 'behavioral' | 'industry' | 'general';\n  category?: 'technical' | 'behavioral' | 'industry' | 'general'; // alias for compatibility\n  difficulty: 'easy' | 'medium' | 'hard';\n  expectedDuration?: number; // in seconds\n  expectedAnswer?: string;\n  followUpQuestions?: string[];\n  tags?: string[];\n  metadata?: {\n    skill?: string;\n    topic?: string;\n    scenario?: string;\n    category?: string;\n    keywords?: string[];\n    estimatedTime?: number;\n  };\n}\n\nexport interface CandidateProfile {\n  name?: string;\n  experience: string;\n  skills: string[];\n  targetRole: string;\n  industry: string;\n  resumeContent?: string;\n  previousRoles?: string[];\n  yearsExperience?: number;\n  education?: string;\n  certifications?: string[];\n}\n\nexport interface CompanyInfo {\n  name?: string;\n  industry?: string;\n  size?: string;\n  description?: string;\n}\n\nexport interface SessionHistory {\n  previousQuestions: Question[];\n  previousAnswers?: Array<{\n    questionId: string;\n    answer: string;\n    timestamp: number;\n  }>;\n}\n\nexport interface InterviewContext {\n  sessionId: string;\n  candidateName: string;\n  role: string;\n  experienceLevel: 'entry' | 'mid' | 'senior' | 'executive';\n  industry?: string;\n  resumeContent?: string;\n  candidateProfile: CandidateProfile;\n  jobRole?: string;\n  companyInfo?: CompanyInfo;\n  sessionHistory?: SessionHistory;\n  interviewConfig: {\n    duration: number; // total interview duration in minutes\n    focusAreas: string[];\n    difficulty: 'entry' | 'mid' | 'senior' | 'expert';\n    includeFollowUps: boolean;\n  };\n  previousQuestions: Question[];\n  previousAnswers: Array<{\n    questionId: string;\n    answer: string;\n    timestamp: number;\n  }>;\n  currentPhase: 'technical' | 'behavioral' | 'industry' | 'wrap-up';\n  responses?: {\n    questionId: string;\n    response: string;\n    timestamp: Date;\n  }[];\n  metadata: Record<string, any>;\n}\n\nexport interface SessionState {\n  sessionId: string;\n  currentAgent: string;\n  phase: 'technical' | 'behavioral' | 'industry' | 'completed';\n  startTime: Date;\n  lastActivity: Date;\n  context: InterviewContext;\n  agentQueue: string[];\n  completedAgents: string[];\n  metadata: {\n    totalQuestions: number;\n    averageResponseTime: number;\n    completionPercentage: number;\n  };\n}\n\nexport interface AgentMetadata {\n  id: string;\n  name: string;\n  description: string;\n  version: string;\n  supportedPhases: string[];\n  capabilities: string[];\n  modelRequirements: {\n    minimumTokens: number;\n    preferredModels: string[];\n  };\n  tags: string[];\n  // Legacy compatibility fields\n  specialty?: string;\n  modelPreference?: string;\n  maxQuestions?: number;\n  averageDuration?: number; // in minutes\n}\n\nexport interface AgentConfig {\n  agentId: string;\n  model: string;\n  systemInstructions: string;\n  temperature: number;\n  maxTokens: number;\n}\n\nexport interface FoundryAgent {\n  id: string;\n  name: string;\n  type: 'technical' | 'behavioral' | 'industry' | 'general';\n  metadata: AgentMetadata;\n  generateQuestions(context: InterviewContext): Promise<Question[]>;\n  processResponse(response: string, context: InterviewContext): Promise<string>;\n  isComplete(context: InterviewContext): boolean;\n}\n"],"mappings":";;AAAA;;;;;AAAA;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;IAAA;IAAAE,KAAA;IAAAC,SAAA;IAAAC,CAAA;MAAA;IAAA;IAAAC,CAAA;IAAAC,CAAA;IAAAC,cAAA;MAAAC,IAAA;MAAAC,QAAA;MAAAC,KAAA;MAAAC,OAAA;MAAAC,cAAA;MAAAC,OAAA;IAAA;IAAAC,eAAA;IAAAtB,IAAA;EAAA;EAAA,IAAAuB,QAAA,GAAAtB,MAAA,CAAAE,GAAA,MAAAF,MAAA,CAAAE,GAAA;EAAA,KAAAoB,QAAA,CAAAxB,IAAA,KAAAwB,QAAA,CAAAxB,IAAA,EAAAC,IAAA,KAAAA,IAAA;IAAAuB,QAAA,CAAAxB,IAAA,IAAAK,YAAA;EAAA;EAAA,IAAAoB,cAAA,GAAAD,QAAA,CAAAxB,IAAA;EAAA","ignoreList":[]}