fbb565fd1dd7a621f21485f6020b5723
"use strict";

/* istanbul ignore next */
function cov_1gxi8lc4pa() {
  var path = "/Users/dikshantvashistha/PrepBettr/app/api/health/auth/route.ts";
  var hash = "128d82b7a12e3d389499f05e0314ec14aee18a50";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/app/api/health/auth/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 18
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 39
        }
      },
      "3": {
        start: {
          line: 5,
          column: 32
        },
        end: {
          line: 5,
          column: 79
        }
      },
      "4": {
        start: {
          line: 7,
          column: 22
        },
        end: {
          line: 7,
          column: 46
        }
      },
      "5": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 65
        }
      },
      "6": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 38,
          column: 5
        }
      },
      "7": {
        start: {
          line: 10,
          column: 29
        },
        end: {
          line: 10,
          column: 92
        }
      },
      "8": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 81
        }
      },
      "9": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 25,
          column: 11
        }
      },
      "10": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 76
        }
      },
      "11": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 37,
          column: 28
        }
      }
    },
    fnMap: {
      "0": {
        name: "GET",
        decl: {
          start: {
            line: 6,
            column: 15
          },
          end: {
            line: 6,
            column: 18
          }
        },
        loc: {
          start: {
            line: 6,
            column: 28
          },
          end: {
            line: 39,
            column: 1
          }
        },
        line: 6
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 13,
            column: 20
          },
          end: {
            line: 13,
            column: 66
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 43
          },
          end: {
            line: 13,
            column: 52
          }
        }, {
          start: {
            line: 13,
            column: 55
          },
          end: {
            line: 13,
            column: 66
          }
        }],
        line: 13
      },
      "1": {
        loc: {
          start: {
            line: 24,
            column: 20
          },
          end: {
            line: 24,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 24,
            column: 43
          },
          end: {
            line: 24,
            column: 46
          }
        }, {
          start: {
            line: 24,
            column: 49
          },
          end: {
            line: 24,
            column: 52
          }
        }],
        line: 24
      },
      "2": {
        loc: {
          start: {
            line: 32,
            column: 19
          },
          end: {
            line: 32,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 32,
            column: 44
          },
          end: {
            line: 32,
            column: 57
          }
        }, {
          start: {
            line: 32,
            column: 60
          },
          end: {
            line: 32,
            column: 75
          }
        }],
        line: 32
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/app/api/health/auth/route.ts",
      mappings: ";;AAGA,kBAqCC;AAxCD,wCAAwD;AACxD,gFAA2E;AAEpE,KAAK,UAAU,GAAG,CAAC,OAAoB;IAC5C,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;IAC3C,OAAO,CAAC,GAAG,CAAC,OAAO,SAAS,+BAA+B,CAAC,CAAC;IAE7D,IAAI,CAAC;QACH,MAAM,YAAY,GAAG,MAAM,2CAAmB,CAAC,WAAW,EAAE,CAAC;QAE7D,OAAO,CAAC,GAAG,CAAC,OAAO,SAAS,6BAA6B,EAAE,YAAY,CAAC,CAAC;QAEzE,OAAO,qBAAY,CAAC,IAAI,CAAC;YACvB,MAAM,EAAE,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW;YACtD,SAAS;YACT,MAAM,EAAE;gBACN,YAAY,EAAE,YAAY,CAAC,OAAO,CAAC,YAAY;gBAC/C,SAAS,EAAE,YAAY,CAAC,OAAO,CAAC,SAAS;aAC1C;YACD,QAAQ,EAAE;gBACR,IAAI,EAAE,uBAAuB;gBAC7B,OAAO,EAAE,OAAO;aACjB;SACF,EAAE;YACD,MAAM,EAAE,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG;SACzC,CAAC,CAAC;IAEL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,OAAO,SAAS,6BAA6B,EAAE,KAAK,CAAC,CAAC;QAEpE,OAAO,qBAAY,CAAC,IAAI,CAAC;YACvB,MAAM,EAAE,OAAO;YACf,SAAS;YACT,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;YAC/D,MAAM,EAAE;gBACN,YAAY,EAAE,OAAO;gBACrB,SAAS,EAAE,OAAO;aACnB;SACF,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;IACtB,CAAC;AACH,CAAC",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/app/api/health/auth/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { firebaseUserService } from '@/lib/services/firebase-user-service';\n\nexport async function GET(request: NextRequest) {\n  const timestamp = new Date().toISOString();\n  console.log(`\uD83C\uDFE5 [${timestamp}] Auth health check requested`);\n  \n  try {\n    const healthResult = await firebaseUserService.healthCheck();\n    \n    console.log(`\uD83C\uDFE5 [${timestamp}] Auth health check result:`, healthResult);\n    \n    return NextResponse.json({\n      status: healthResult.healthy ? 'healthy' : 'unhealthy',\n      timestamp,\n      checks: {\n        firebaseAuth: healthResult.details.firebaseAuth,\n        firestore: healthResult.details.firestore,\n      },\n      services: {\n        name: 'PrepBettr Auth System',\n        version: '1.0.0'\n      }\n    }, { \n      status: healthResult.healthy ? 200 : 503 \n    });\n    \n  } catch (error) {\n    console.error(`\uD83C\uDFE5 [${timestamp}] Auth health check failed:`, error);\n    \n    return NextResponse.json({\n      status: 'error',\n      timestamp,\n      error: error instanceof Error ? error.message : 'Unknown error',\n      checks: {\n        firebaseAuth: 'error',\n        firestore: 'error'\n      }\n    }, { status: 500 });\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "128d82b7a12e3d389499f05e0314ec14aee18a50"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1gxi8lc4pa = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1gxi8lc4pa();
cov_1gxi8lc4pa().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1gxi8lc4pa().s[1]++;
exports.GET = GET;
const server_1 =
/* istanbul ignore next */
(cov_1gxi8lc4pa().s[2]++, require("next/server"));
const firebase_user_service_1 =
/* istanbul ignore next */
(cov_1gxi8lc4pa().s[3]++, require("@/lib/services/firebase-user-service"));
async function GET(request) {
  /* istanbul ignore next */
  cov_1gxi8lc4pa().f[0]++;
  const timestamp =
  /* istanbul ignore next */
  (cov_1gxi8lc4pa().s[4]++, new Date().toISOString());
  /* istanbul ignore next */
  cov_1gxi8lc4pa().s[5]++;
  console.log(`üè• [${timestamp}] Auth health check requested`);
  /* istanbul ignore next */
  cov_1gxi8lc4pa().s[6]++;
  try {
    const healthResult =
    /* istanbul ignore next */
    (cov_1gxi8lc4pa().s[7]++, await firebase_user_service_1.firebaseUserService.healthCheck());
    /* istanbul ignore next */
    cov_1gxi8lc4pa().s[8]++;
    console.log(`üè• [${timestamp}] Auth health check result:`, healthResult);
    /* istanbul ignore next */
    cov_1gxi8lc4pa().s[9]++;
    return server_1.NextResponse.json({
      status: healthResult.healthy ?
      /* istanbul ignore next */
      (cov_1gxi8lc4pa().b[0][0]++, 'healthy') :
      /* istanbul ignore next */
      (cov_1gxi8lc4pa().b[0][1]++, 'unhealthy'),
      timestamp,
      checks: {
        firebaseAuth: healthResult.details.firebaseAuth,
        firestore: healthResult.details.firestore
      },
      services: {
        name: 'PrepBettr Auth System',
        version: '1.0.0'
      }
    }, {
      status: healthResult.healthy ?
      /* istanbul ignore next */
      (cov_1gxi8lc4pa().b[1][0]++, 200) :
      /* istanbul ignore next */
      (cov_1gxi8lc4pa().b[1][1]++, 503)
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1gxi8lc4pa().s[10]++;
    console.error(`üè• [${timestamp}] Auth health check failed:`, error);
    /* istanbul ignore next */
    cov_1gxi8lc4pa().s[11]++;
    return server_1.NextResponse.json({
      status: 'error',
      timestamp,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1gxi8lc4pa().b[2][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1gxi8lc4pa().b[2][1]++, 'Unknown error'),
      checks: {
        firebaseAuth: 'error',
        firestore: 'error'
      }
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHBvcnRzIiwiR0VUIiwic2VydmVyXzEiLCJjb3ZfMWd4aThsYzRwYSIsInMiLCJyZXF1aXJlIiwiZmlyZWJhc2VfdXNlcl9zZXJ2aWNlXzEiLCJyZXF1ZXN0IiwiZiIsInRpbWVzdGFtcCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsImNvbnNvbGUiLCJsb2ciLCJoZWFsdGhSZXN1bHQiLCJmaXJlYmFzZVVzZXJTZXJ2aWNlIiwiaGVhbHRoQ2hlY2siLCJOZXh0UmVzcG9uc2UiLCJqc29uIiwic3RhdHVzIiwiaGVhbHRoeSIsImIiLCJjaGVja3MiLCJmaXJlYmFzZUF1dGgiLCJkZXRhaWxzIiwiZmlyZXN0b3JlIiwic2VydmljZXMiLCJuYW1lIiwidmVyc2lvbiIsImVycm9yIiwiRXJyb3IiLCJtZXNzYWdlIl0sInNvdXJjZXMiOlsiL1VzZXJzL2Rpa3NoYW50dmFzaGlzdGhhL1ByZXBCZXR0ci9hcHAvYXBpL2hlYWx0aC9hdXRoL3JvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgeyBmaXJlYmFzZVVzZXJTZXJ2aWNlIH0gZnJvbSAnQC9saWIvc2VydmljZXMvZmlyZWJhc2UtdXNlci1zZXJ2aWNlJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gIGNvbnNvbGUubG9nKGDwn4+lIFske3RpbWVzdGFtcH1dIEF1dGggaGVhbHRoIGNoZWNrIHJlcXVlc3RlZGApO1xuICBcbiAgdHJ5IHtcbiAgICBjb25zdCBoZWFsdGhSZXN1bHQgPSBhd2FpdCBmaXJlYmFzZVVzZXJTZXJ2aWNlLmhlYWx0aENoZWNrKCk7XG4gICAgXG4gICAgY29uc29sZS5sb2coYPCfj6UgWyR7dGltZXN0YW1wfV0gQXV0aCBoZWFsdGggY2hlY2sgcmVzdWx0OmAsIGhlYWx0aFJlc3VsdCk7XG4gICAgXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgIHN0YXR1czogaGVhbHRoUmVzdWx0LmhlYWx0aHkgPyAnaGVhbHRoeScgOiAndW5oZWFsdGh5JyxcbiAgICAgIHRpbWVzdGFtcCxcbiAgICAgIGNoZWNrczoge1xuICAgICAgICBmaXJlYmFzZUF1dGg6IGhlYWx0aFJlc3VsdC5kZXRhaWxzLmZpcmViYXNlQXV0aCxcbiAgICAgICAgZmlyZXN0b3JlOiBoZWFsdGhSZXN1bHQuZGV0YWlscy5maXJlc3RvcmUsXG4gICAgICB9LFxuICAgICAgc2VydmljZXM6IHtcbiAgICAgICAgbmFtZTogJ1ByZXBCZXR0ciBBdXRoIFN5c3RlbScsXG4gICAgICAgIHZlcnNpb246ICcxLjAuMCdcbiAgICAgIH1cbiAgICB9LCB7IFxuICAgICAgc3RhdHVzOiBoZWFsdGhSZXN1bHQuaGVhbHRoeSA/IDIwMCA6IDUwMyBcbiAgICB9KTtcbiAgICBcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKGDwn4+lIFske3RpbWVzdGFtcH1dIEF1dGggaGVhbHRoIGNoZWNrIGZhaWxlZDpgLCBlcnJvcik7XG4gICAgXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgIHN0YXR1czogJ2Vycm9yJyxcbiAgICAgIHRpbWVzdGFtcCxcbiAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJyxcbiAgICAgIGNoZWNrczoge1xuICAgICAgICBmaXJlYmFzZUF1dGg6ICdlcnJvcicsXG4gICAgICAgIGZpcmVzdG9yZTogJ2Vycm9yJ1xuICAgICAgfVxuICAgIH0sIHsgc3RhdHVzOiA1MDAgfSk7XG4gIH1cbn0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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