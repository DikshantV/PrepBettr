3a7b1136529e46f98ad757684b22a74e
/* istanbul ignore next */
function cov_1pwd3cutoc() {
  var path = "/Users/dikshantvashistha/PrepBettr/azure/applicationWorker/index.js";
  var hash = "8b059e097d7e7ef8b200a457f6642bd1095d1135";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/azure/applicationWorker/index.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 16
        },
        end: {
          line: 1,
          column: 43
        }
      },
      "1": {
        start: {
          line: 2,
          column: 21
        },
        end: {
          line: 2,
          column: 61
        }
      },
      "2": {
        start: {
          line: 3,
          column: 25
        },
        end: {
          line: 3,
          column: 67
        }
      },
      "3": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 32
        }
      },
      "4": {
        start: {
          line: 5,
          column: 30
        },
        end: {
          line: 5,
          column: 60
        }
      },
      "5": {
        start: {
          line: 6,
          column: 23
        },
        end: {
          line: 6,
          column: 38
        }
      },
      "6": {
        start: {
          line: 7,
          column: 31
        },
        end: {
          line: 7,
          column: 82
        }
      },
      "7": {
        start: {
          line: 8,
          column: 31
        },
        end: {
          line: 8,
          column: 81
        }
      },
      "8": {
        start: {
          line: 11,
          column: 24
        },
        end: {
          line: 11,
          column: 28
        }
      },
      "9": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 19,
          column: 5
        }
      },
      "10": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 33
        }
      },
      "11": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 43,
          column: 5
        }
      },
      "12": {
        start: {
          line: 22,
          column: 24
        },
        end: {
          line: 22,
          column: 49
        }
      },
      "13": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 27,
          column: 9
        }
      },
      "14": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 86
        }
      },
      "15": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 24
        }
      },
      "16": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 36,
          column: 11
        }
      },
      "17": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 80
        }
      },
      "18": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 33
        }
      },
      "19": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 76
        }
      },
      "20": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 20
        }
      },
      "21": {
        start: {
          line: 47,
          column: 0
        },
        end: {
          line: 176,
          column: 3
        }
      },
      "22": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 76
        }
      },
      "23": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 174,
          column: 9
        }
      },
      "24": {
        start: {
          line: 54,
          column: 36
        },
        end: {
          line: 54,
          column: 101
        }
      },
      "25": {
        start: {
          line: 55,
          column: 72
        },
        end: {
          line: 55,
          column: 87
        }
      },
      "26": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 61,
          column: 14
        }
      },
      "27": {
        start: {
          line: 64,
          column: 32
        },
        end: {
          line: 64,
          column: 60
        }
      },
      "28": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 67,
          column: 13
        }
      },
      "29": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 66,
          column: 77
        }
      },
      "30": {
        start: {
          line: 70,
          column: 40
        },
        end: {
          line: 70,
          column: 85
        }
      },
      "31": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 79,
          column: 13
        }
      },
      "32": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 72,
          column: 82
        }
      },
      "33": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 77,
          column: 18
        }
      },
      "34": {
        start: {
          line: 78,
          column: 16
        },
        end: {
          line: 78,
          column: 23
        }
      },
      "35": {
        start: {
          line: 82,
          column: 33
        },
        end: {
          line: 82,
          column: 58
        }
      },
      "36": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 86,
          column: 13
        }
      },
      "37": {
        start: {
          line: 84,
          column: 16
        },
        end: {
          line: 84,
          column: 86
        }
      },
      "38": {
        start: {
          line: 85,
          column: 16
        },
        end: {
          line: 85,
          column: 59
        }
      },
      "39": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 112,
          column: 13
        }
      },
      "40": {
        start: {
          line: 90,
          column: 42
        },
        end: {
          line: 90,
          column: 80
        }
      },
      "41": {
        start: {
          line: 91,
          column: 16
        },
        end: {
          line: 99,
          column: 17
        }
      },
      "42": {
        start: {
          line: 92,
          column: 20
        },
        end: {
          line: 92,
          column: 129
        }
      },
      "43": {
        start: {
          line: 93,
          column: 20
        },
        end: {
          line: 97,
          column: 22
        }
      },
      "44": {
        start: {
          line: 98,
          column: 20
        },
        end: {
          line: 98,
          column: 27
        }
      },
      "45": {
        start: {
          line: 102,
          column: 42
        },
        end: {
          line: 102,
          column: 80
        }
      },
      "46": {
        start: {
          line: 103,
          column: 16
        },
        end: {
          line: 111,
          column: 17
        }
      },
      "47": {
        start: {
          line: 104,
          column: 20
        },
        end: {
          line: 104,
          column: 86
        }
      },
      "48": {
        start: {
          line: 105,
          column: 20
        },
        end: {
          line: 109,
          column: 22
        }
      },
      "49": {
        start: {
          line: 110,
          column: 20
        },
        end: {
          line: 110,
          column: 27
        }
      },
      "50": {
        start: {
          line: 115,
          column: 32
        },
        end: {
          line: 115,
          column: 82
        }
      },
      "51": {
        start: {
          line: 118,
          column: 35
        },
        end: {
          line: 118,
          column: 85
        }
      },
      "52": {
        start: {
          line: 121,
          column: 38
        },
        end: {
          line: 129,
          column: 14
        }
      },
      "53": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 162,
          column: 13
        }
      },
      "54": {
        start: {
          line: 133,
          column: 16
        },
        end: {
          line: 133,
          column: 97
        }
      },
      "55": {
        start: {
          line: 136,
          column: 16
        },
        end: {
          line: 147,
          column: 19
        }
      },
      "56": {
        start: {
          line: 150,
          column: 42
        },
        end: {
          line: 150,
          column: 80
        }
      },
      "57": {
        start: {
          line: 151,
          column: 16
        },
        end: {
          line: 153,
          column: 17
        }
      },
      "58": {
        start: {
          line: 152,
          column: 20
        },
        end: {
          line: 152,
          column: 120
        }
      },
      "59": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 155,
          column: 83
        }
      },
      "60": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 161,
          column: 18
        }
      },
      "61": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 64
        }
      },
      "62": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 170,
          column: 14
        }
      },
      "63": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 173,
          column: 24
        }
      },
      "64": {
        start: {
          line: 182,
          column: 4
        },
        end: {
          line: 226,
          column: 5
        }
      },
      "65": {
        start: {
          line: 183,
          column: 23
        },
        end: {
          line: 183,
          column: 52
        }
      },
      "66": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 188,
          column: 9
        }
      },
      "67": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 86
        }
      },
      "68": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 187,
          column: 71
        }
      },
      "69": {
        start: {
          line: 190,
          column: 23
        },
        end: {
          line: 210,
          column: 9
        }
      },
      "70": {
        start: {
          line: 200,
          column: 61
        },
        end: {
          line: 200,
          column: 96
        }
      },
      "71": {
        start: {
          line: 212,
          column: 27
        },
        end: {
          line: 217,
          column: 10
        }
      },
      "72": {
        start: {
          line: 219,
          column: 26
        },
        end: {
          line: 219,
          column: 79
        }
      },
      "73": {
        start: {
          line: 220,
          column: 22
        },
        end: {
          line: 220,
          column: 41
        }
      },
      "74": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 222,
          column: 69
        }
      },
      "75": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 224,
          column: 83
        }
      },
      "76": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 225,
          column: 67
        }
      },
      "77": {
        start: {
          line: 233,
          column: 20
        },
        end: {
          line: 233,
          column: 119
        }
      },
      "78": {
        start: {
          line: 234,
          column: 26
        },
        end: {
          line: 234,
          column: 106
        }
      },
      "79": {
        start: {
          line: 234,
          column: 62
        },
        end: {
          line: 234,
          column: 99
        }
      },
      "80": {
        start: {
          line: 235,
          column: 4
        },
        end: {
          line: 235,
          column: 90
        }
      },
      "81": {
        start: {
          line: 242,
          column: 4
        },
        end: {
          line: 288,
          column: 5
        }
      },
      "82": {
        start: {
          line: 243,
          column: 23
        },
        end: {
          line: 243,
          column: 52
        }
      },
      "83": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 248,
          column: 9
        }
      },
      "84": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 91
        }
      },
      "85": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 247,
          column: 72
        }
      },
      "86": {
        start: {
          line: 250,
          column: 23
        },
        end: {
          line: 274,
          column: 9
        }
      },
      "87": {
        start: {
          line: 262,
          column: 61
        },
        end: {
          line: 262,
          column: 96
        }
      },
      "88": {
        start: {
          line: 276,
          column: 27
        },
        end: {
          line: 281,
          column: 10
        }
      },
      "89": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 283,
          column: 119
        }
      },
      "90": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 286,
          column: 81
        }
      },
      "91": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 287,
          column: 68
        }
      },
      "92": {
        start: {
          line: 295,
          column: 4
        },
        end: {
          line: 304,
          column: 21
        }
      },
      "93": {
        start: {
          line: 311,
          column: 4
        },
        end: {
          line: 352,
          column: 5
        }
      },
      "94": {
        start: {
          line: 312,
          column: 23
        },
        end: {
          line: 312,
          column: 52
        }
      },
      "95": {
        start: {
          line: 314,
          column: 8
        },
        end: {
          line: 317,
          column: 9
        }
      },
      "96": {
        start: {
          line: 315,
          column: 12
        },
        end: {
          line: 315,
          column: 89
        }
      },
      "97": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 316,
          column: 34
        }
      },
      "98": {
        start: {
          line: 319,
          column: 23
        },
        end: {
          line: 338,
          column: 9
        }
      },
      "99": {
        start: {
          line: 340,
          column: 27
        },
        end: {
          line: 345,
          column: 10
        }
      },
      "100": {
        start: {
          line: 347,
          column: 8
        },
        end: {
          line: 347,
          column: 81
        }
      },
      "101": {
        start: {
          line: 350,
          column: 8
        },
        end: {
          line: 350,
          column: 74
        }
      },
      "102": {
        start: {
          line: 351,
          column: 8
        },
        end: {
          line: 351,
          column: 30
        }
      },
      "103": {
        start: {
          line: 359,
          column: 4
        },
        end: {
          line: 499,
          column: 5
        }
      },
      "104": {
        start: {
          line: 360,
          column: 96
        },
        end: {
          line: 360,
          column: 111
        }
      },
      "105": {
        start: {
          line: 363,
          column: 8
        },
        end: {
          line: 451,
          column: 9
        }
      },
      "106": {
        start: {
          line: 366,
          column: 12
        },
        end: {
          line: 370,
          column: 14
        }
      },
      "107": {
        start: {
          line: 373,
          column: 35
        },
        end: {
          line: 385,
          column: 13
        }
      },
      "108": {
        start: {
          line: 387,
          column: 12
        },
        end: {
          line: 450,
          column: 13
        }
      },
      "109": {
        start: {
          line: 389,
          column: 42
        },
        end: {
          line: 412,
          column: 17
        }
      },
      "110": {
        start: {
          line: 414,
          column: 16
        },
        end: {
          line: 414,
          column: 61
        }
      },
      "111": {
        start: {
          line: 416,
          column: 16
        },
        end: {
          line: 425,
          column: 18
        }
      },
      "112": {
        start: {
          line: 428,
          column: 16
        },
        end: {
          line: 437,
          column: 18
        }
      },
      "113": {
        start: {
          line: 439,
          column: 16
        },
        end: {
          line: 449,
          column: 18
        }
      },
      "114": {
        start: {
          line: 454,
          column: 30
        },
        end: {
          line: 454,
          column: 38
        }
      },
      "115": {
        start: {
          line: 457,
          column: 34
        },
        end: {
          line: 475,
          column: 9
        }
      },
      "116": {
        start: {
          line: 477,
          column: 8
        },
        end: {
          line: 477,
          column: 53
        }
      },
      "117": {
        start: {
          line: 479,
          column: 8
        },
        end: {
          line: 484,
          column: 10
        }
      },
      "118": {
        start: {
          line: 487,
          column: 8
        },
        end: {
          line: 487,
          column: 66
        }
      },
      "119": {
        start: {
          line: 489,
          column: 8
        },
        end: {
          line: 493,
          column: 10
        }
      },
      "120": {
        start: {
          line: 495,
          column: 8
        },
        end: {
          line: 498,
          column: 10
        }
      },
      "121": {
        start: {
          line: 506,
          column: 4
        },
        end: {
          line: 526,
          column: 5
        }
      },
      "122": {
        start: {
          line: 507,
          column: 32
        },
        end: {
          line: 513,
          column: 9
        }
      },
      "123": {
        start: {
          line: 515,
          column: 8
        },
        end: {
          line: 521,
          column: 10
        }
      },
      "124": {
        start: {
          line: 523,
          column: 8
        },
        end: {
          line: 523,
          column: 76
        }
      },
      "125": {
        start: {
          line: 525,
          column: 8
        },
        end: {
          line: 525,
          column: 60
        }
      },
      "126": {
        start: {
          line: 533,
          column: 4
        },
        end: {
          line: 544,
          column: 6
        }
      },
      "127": {
        start: {
          line: 548,
          column: 4
        },
        end: {
          line: 556,
          column: 6
        }
      },
      "128": {
        start: {
          line: 560,
          column: 4
        },
        end: {
          line: 577,
          column: 5
        }
      },
      "129": {
        start: {
          line: 561,
          column: 8
        },
        end: {
          line: 561,
          column: 46
        }
      },
      "130": {
        start: {
          line: 564,
          column: 37
        },
        end: {
          line: 571,
          column: 9
        }
      },
      "131": {
        start: {
          line: 573,
          column: 8
        },
        end: {
          line: 573,
          column: 80
        }
      },
      "132": {
        start: {
          line: 575,
          column: 8
        },
        end: {
          line: 575,
          column: 69
        }
      },
      "133": {
        start: {
          line: 576,
          column: 8
        },
        end: {
          line: 576,
          column: 20
        }
      },
      "134": {
        start: {
          line: 581,
          column: 4
        },
        end: {
          line: 601,
          column: 5
        }
      },
      "135": {
        start: {
          line: 582,
          column: 8
        },
        end: {
          line: 582,
          column: 46
        }
      },
      "136": {
        start: {
          line: 585,
          column: 22
        },
        end: {
          line: 585,
          column: 32
        }
      },
      "137": {
        start: {
          line: 586,
          column: 8
        },
        end: {
          line: 586,
          column: 35
        }
      },
      "138": {
        start: {
          line: 588,
          column: 34
        },
        end: {
          line: 595,
          column: 9
        }
      },
      "139": {
        start: {
          line: 597,
          column: 8
        },
        end: {
          line: 597,
          column: 41
        }
      },
      "140": {
        start: {
          line: 599,
          column: 8
        },
        end: {
          line: 599,
          column: 71
        }
      },
      "141": {
        start: {
          line: 600,
          column: 8
        },
        end: {
          line: 600,
          column: 17
        }
      },
      "142": {
        start: {
          line: 605,
          column: 4
        },
        end: {
          line: 615,
          column: 5
        }
      },
      "143": {
        start: {
          line: 607,
          column: 8
        },
        end: {
          line: 607,
          column: 46
        }
      },
      "144": {
        start: {
          line: 608,
          column: 30
        },
        end: {
          line: 608,
          column: 102
        }
      },
      "145": {
        start: {
          line: 610,
          column: 8
        },
        end: {
          line: 610,
          column: 79
        }
      },
      "146": {
        start: {
          line: 611,
          column: 8
        },
        end: {
          line: 611,
          column: 29
        }
      },
      "147": {
        start: {
          line: 613,
          column: 8
        },
        end: {
          line: 613,
          column: 80
        }
      },
      "148": {
        start: {
          line: 614,
          column: 8
        },
        end: {
          line: 614,
          column: 20
        }
      },
      "149": {
        start: {
          line: 622,
          column: 4
        },
        end: {
          line: 633,
          column: 5
        }
      },
      "150": {
        start: {
          line: 624,
          column: 47
        },
        end: {
          line: 624,
          column: 105
        }
      },
      "151": {
        start: {
          line: 627,
          column: 8
        },
        end: {
          line: 627,
          column: 93
        }
      },
      "152": {
        start: {
          line: 629,
          column: 8
        },
        end: {
          line: 629,
          column: 117
        }
      },
      "153": {
        start: {
          line: 631,
          column: 8
        },
        end: {
          line: 631,
          column: 82
        }
      }
    },
    fnMap: {
      "0": {
        name: "initializeAzureOpenAI",
        decl: {
          start: {
            line: 16,
            column: 15
          },
          end: {
            line: 16,
            column: 36
          }
        },
        loc: {
          start: {
            line: 16,
            column: 39
          },
          end: {
            line: 44,
            column: 1
          }
        },
        line: 16
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 50,
            column: 13
          },
          end: {
            line: 50,
            column: 14
          }
        },
        loc: {
          start: {
            line: 50,
            column: 43
          },
          end: {
            line: 175,
            column: 5
          }
        },
        line: 50
      },
      "2": {
        name: "calculateJobRelevancy",
        decl: {
          start: {
            line: 181,
            column: 15
          },
          end: {
            line: 181,
            column: 36
          }
        },
        loc: {
          start: {
            line: 181,
            column: 62
          },
          end: {
            line: 227,
            column: 1
          }
        },
        line: 181
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 200,
            column: 54
          },
          end: {
            line: 200,
            column: 55
          }
        },
        loc: {
          start: {
            line: 200,
            column: 61
          },
          end: {
            line: 200,
            column: 96
          }
        },
        line: 200
      },
      "4": {
        name: "calculateFallbackRelevancy",
        decl: {
          start: {
            line: 232,
            column: 9
          },
          end: {
            line: 232,
            column: 35
          }
        },
        loc: {
          start: {
            line: 232,
            column: 61
          },
          end: {
            line: 236,
            column: 1
          }
        },
        line: 232
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 234,
            column: 53
          },
          end: {
            line: 234,
            column: 54
          }
        },
        loc: {
          start: {
            line: 234,
            column: 62
          },
          end: {
            line: 234,
            column: 99
          }
        },
        line: 234
      },
      "6": {
        name: "generateCoverLetter",
        decl: {
          start: {
            line: 241,
            column: 15
          },
          end: {
            line: 241,
            column: 34
          }
        },
        loc: {
          start: {
            line: 241,
            column: 60
          },
          end: {
            line: 289,
            column: 1
          }
        },
        line: 241
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 262,
            column: 54
          },
          end: {
            line: 262,
            column: 55
          }
        },
        loc: {
          start: {
            line: 262,
            column: 61
          },
          end: {
            line: 262,
            column: 96
          }
        },
        line: 262
      },
      "8": {
        name: "generateFallbackCoverLetter",
        decl: {
          start: {
            line: 294,
            column: 9
          },
          end: {
            line: 294,
            column: 36
          }
        },
        loc: {
          start: {
            line: 294,
            column: 62
          },
          end: {
            line: 305,
            column: 1
          }
        },
        line: 294
      },
      "9": {
        name: "tailorResume",
        decl: {
          start: {
            line: 310,
            column: 15
          },
          end: {
            line: 310,
            column: 27
          }
        },
        loc: {
          start: {
            line: 310,
            column: 56
          },
          end: {
            line: 353,
            column: 1
          }
        },
        line: 310
      },
      "10": {
        name: "submitJobApplication",
        decl: {
          start: {
            line: 358,
            column: 15
          },
          end: {
            line: 358,
            column: 35
          }
        },
        loc: {
          start: {
            line: 358,
            column: 53
          },
          end: {
            line: 500,
            column: 1
          }
        },
        line: 358
      },
      "11": {
        name: "scheduleFollowUp",
        decl: {
          start: {
            line: 505,
            column: 15
          },
          end: {
            line: 505,
            column: 31
          }
        },
        loc: {
          start: {
            line: 505,
            column: 73
          },
          end: {
            line: 527,
            column: 1
          }
        },
        line: 505
      },
      "12": {
        name: "getUserProfile",
        decl: {
          start: {
            line: 531,
            column: 15
          },
          end: {
            line: 531,
            column: 29
          }
        },
        loc: {
          start: {
            line: 531,
            column: 38
          },
          end: {
            line: 545,
            column: 1
          }
        },
        line: 531
      },
      "13": {
        name: "getUserAutoApplySettings",
        decl: {
          start: {
            line: 547,
            column: 15
          },
          end: {
            line: 547,
            column: 39
          }
        },
        loc: {
          start: {
            line: 547,
            column: 48
          },
          end: {
            line: 557,
            column: 1
          }
        },
        line: 547
      },
      "14": {
        name: "checkExistingApplication",
        decl: {
          start: {
            line: 559,
            column: 15
          },
          end: {
            line: 559,
            column: 39
          }
        },
        loc: {
          start: {
            line: 559,
            column: 55
          },
          end: {
            line: 578,
            column: 1
          }
        },
        line: 559
      },
      "15": {
        name: "getTodayApplicationCount",
        decl: {
          start: {
            line: 580,
            column: 15
          },
          end: {
            line: 580,
            column: 39
          }
        },
        loc: {
          start: {
            line: 580,
            column: 48
          },
          end: {
            line: 602,
            column: 1
          }
        },
        line: 580
      },
      "16": {
        name: "storeJobApplication",
        decl: {
          start: {
            line: 604,
            column: 15
          },
          end: {
            line: 604,
            column: 34
          }
        },
        loc: {
          start: {
            line: 604,
            column: 52
          },
          end: {
            line: 616,
            column: 1
          }
        },
        line: 604
      },
      "17": {
        name: "sendApplicationSubmittedNotification",
        decl: {
          start: {
            line: 621,
            column: 15
          },
          end: {
            line: 621,
            column: 51
          }
        },
        loc: {
          start: {
            line: 621,
            column: 77
          },
          end: {
            line: 634,
            column: 1
          }
        },
        line: 621
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      },
      "1": {
        loc: {
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 27,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 27,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "2": {
        loc: {
          start: {
            line: 24,
            column: 12
          },
          end: {
            line: 24,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 12
          },
          end: {
            line: 24,
            column: 35
          }
        }, {
          start: {
            line: 24,
            column: 39
          },
          end: {
            line: 24,
            column: 67
          }
        }],
        line: 24
      },
      "3": {
        loc: {
          start: {
            line: 54,
            column: 36
          },
          end: {
            line: 54,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 54,
            column: 68
          },
          end: {
            line: 54,
            column: 89
          }
        }, {
          start: {
            line: 54,
            column: 92
          },
          end: {
            line: 54,
            column: 101
          }
        }],
        line: 54
      },
      "4": {
        loc: {
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "5": {
        loc: {
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 79,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 79,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "6": {
        loc: {
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 86,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 86,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "7": {
        loc: {
          start: {
            line: 89,
            column: 12
          },
          end: {
            line: 112,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 12
          },
          end: {
            line: 112,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "8": {
        loc: {
          start: {
            line: 91,
            column: 16
          },
          end: {
            line: 99,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 16
          },
          end: {
            line: 99,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "9": {
        loc: {
          start: {
            line: 103,
            column: 16
          },
          end: {
            line: 111,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 16
          },
          end: {
            line: 111,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      },
      "10": {
        loc: {
          start: {
            line: 131,
            column: 12
          },
          end: {
            line: 162,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 12
          },
          end: {
            line: 162,
            column: 13
          }
        }, {
          start: {
            line: 156,
            column: 19
          },
          end: {
            line: 162,
            column: 13
          }
        }],
        line: 131
      },
      "11": {
        loc: {
          start: {
            line: 151,
            column: 16
          },
          end: {
            line: 153,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 16
          },
          end: {
            line: 153,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "12": {
        loc: {
          start: {
            line: 185,
            column: 8
          },
          end: {
            line: 188,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 185,
            column: 8
          },
          end: {
            line: 188,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 185
      },
      "13": {
        loc: {
          start: {
            line: 219,
            column: 26
          },
          end: {
            line: 219,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 219,
            column: 26
          },
          end: {
            line: 219,
            column: 73
          }
        }, {
          start: {
            line: 219,
            column: 77
          },
          end: {
            line: 219,
            column: 79
          }
        }],
        line: 219
      },
      "14": {
        loc: {
          start: {
            line: 222,
            column: 15
          },
          end: {
            line: 222,
            column: 68
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 222,
            column: 30
          },
          end: {
            line: 222,
            column: 32
          }
        }, {
          start: {
            line: 222,
            column: 35
          },
          end: {
            line: 222,
            column: 68
          }
        }],
        line: 222
      },
      "15": {
        loc: {
          start: {
            line: 234,
            column: 26
          },
          end: {
            line: 234,
            column: 106
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 234,
            column: 26
          },
          end: {
            line: 234,
            column: 100
          }
        }, {
          start: {
            line: 234,
            column: 104
          },
          end: {
            line: 234,
            column: 106
          }
        }],
        line: 234
      },
      "16": {
        loc: {
          start: {
            line: 235,
            column: 49
          },
          end: {
            line: 235,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 235,
            column: 49
          },
          end: {
            line: 235,
            column: 75
          }
        }, {
          start: {
            line: 235,
            column: 79
          },
          end: {
            line: 235,
            column: 80
          }
        }],
        line: 235
      },
      "17": {
        loc: {
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 248,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 248,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 245
      },
      "18": {
        loc: {
          start: {
            line: 283,
            column: 15
          },
          end: {
            line: 283,
            column: 118
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 283,
            column: 15
          },
          end: {
            line: 283,
            column: 62
          }
        }, {
          start: {
            line: 283,
            column: 66
          },
          end: {
            line: 283,
            column: 118
          }
        }],
        line: 283
      },
      "19": {
        loc: {
          start: {
            line: 314,
            column: 8
          },
          end: {
            line: 317,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 314,
            column: 8
          },
          end: {
            line: 317,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 314
      },
      "20": {
        loc: {
          start: {
            line: 347,
            column: 15
          },
          end: {
            line: 347,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 347,
            column: 15
          },
          end: {
            line: 347,
            column: 62
          }
        }, {
          start: {
            line: 347,
            column: 66
          },
          end: {
            line: 347,
            column: 80
          }
        }],
        line: 347
      },
      "21": {
        loc: {
          start: {
            line: 363,
            column: 8
          },
          end: {
            line: 451,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 363,
            column: 8
          },
          end: {
            line: 451,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 363
      },
      "22": {
        loc: {
          start: {
            line: 363,
            column: 12
          },
          end: {
            line: 364,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 363,
            column: 12
          },
          end: {
            line: 363,
            column: 33
          }
        }, {
          start: {
            line: 364,
            column: 13
          },
          end: {
            line: 364,
            column: 56
          }
        }, {
          start: {
            line: 364,
            column: 60
          },
          end: {
            line: 364,
            column: 80
          }
        }],
        line: 363
      },
      "23": {
        loc: {
          start: {
            line: 387,
            column: 12
          },
          end: {
            line: 450,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 387,
            column: 12
          },
          end: {
            line: 450,
            column: 13
          }
        }, {
          start: {
            line: 426,
            column: 19
          },
          end: {
            line: 450,
            column: 13
          }
        }],
        line: 387
      },
      "24": {
        loc: {
          start: {
            line: 396,
            column: 28
          },
          end: {
            line: 396,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 396,
            column: 28
          },
          end: {
            line: 396,
            column: 54
          }
        }, {
          start: {
            line: 396,
            column: 58
          },
          end: {
            line: 396,
            column: 67
          }
        }],
        line: 396
      },
      "25": {
        loc: {
          start: {
            line: 464,
            column: 20
          },
          end: {
            line: 464,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 464,
            column: 20
          },
          end: {
            line: 464,
            column: 46
          }
        }, {
          start: {
            line: 464,
            column: 50
          },
          end: {
            line: 464,
            column: 59
          }
        }],
        line: 464
      },
      "26": {
        loc: {
          start: {
            line: 497,
            column: 21
          },
          end: {
            line: 497,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 497,
            column: 21
          },
          end: {
            line: 497,
            column: 34
          }
        }, {
          start: {
            line: 497,
            column: 38
          },
          end: {
            line: 497,
            column: 84
          }
        }],
        line: 497
      },
      "27": {
        loc: {
          start: {
            line: 573,
            column: 15
          },
          end: {
            line: 573,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 573,
            column: 49
          },
          end: {
            line: 573,
            column: 72
          }
        }, {
          start: {
            line: 573,
            column: 75
          },
          end: {
            line: 573,
            column: 79
          }
        }],
        line: 573
      },
      "28": {
        loc: {
          start: {
            line: 597,
            column: 15
          },
          end: {
            line: 597,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 597,
            column: 15
          },
          end: {
            line: 597,
            column: 35
          }
        }, {
          start: {
            line: 597,
            column: 39
          },
          end: {
            line: 597,
            column: 40
          }
        }],
        line: 597
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0]
    },
    inputSourceMap: null,
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8b059e097d7e7ef8b200a457f6642bd1095d1135"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1pwd3cutoc = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1pwd3cutoc();
const {
  app
} =
/* istanbul ignore next */
(cov_1pwd3cutoc().s[0]++, require('@azure/functions'));
const queueService =
/* istanbul ignore next */
(cov_1pwd3cutoc().s[1]++, require('../lib/services/queue-service'));
const automationLogger =
/* istanbul ignore next */
(cov_1pwd3cutoc().s[2]++, require('../lib/services/automation-logs'));
const OpenAI =
/* istanbul ignore next */
(cov_1pwd3cutoc().s[3]++, require('openai'));
const {
  fetchAzureSecrets
} =
/* istanbul ignore next */
(cov_1pwd3cutoc().s[4]++, require('../lib/azure-config'));
const {
  v4: uuidv4
} =
/* istanbul ignore next */
(cov_1pwd3cutoc().s[5]++, require('uuid'));
const headlessBrowserService =
/* istanbul ignore next */
(cov_1pwd3cutoc().s[6]++, require('../lib/services/headless-browser-service'));
const {
  azureCosmosService
} =
/* istanbul ignore next */
(cov_1pwd3cutoc().s[7]++, require('../../lib/services/azure-cosmos-service'));

// Azure OpenAI client - will be initialized from Key Vault secrets
let azureOpenAIClient =
/* istanbul ignore next */
(cov_1pwd3cutoc().s[8]++, null);

/**
 * Initialize Azure OpenAI client
 */
async function initializeAzureOpenAI() {
  /* istanbul ignore next */
  cov_1pwd3cutoc().f[0]++;
  cov_1pwd3cutoc().s[9]++;
  if (azureOpenAIClient) {
    /* istanbul ignore next */
    cov_1pwd3cutoc().b[0][0]++;
    cov_1pwd3cutoc().s[10]++;
    return azureOpenAIClient;
  } else
  /* istanbul ignore next */
  {
    cov_1pwd3cutoc().b[0][1]++;
  }
  cov_1pwd3cutoc().s[11]++;
  try {
    const secrets =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[12]++, await fetchAzureSecrets());
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[13]++;
    if (
    /* istanbul ignore next */
    (cov_1pwd3cutoc().b[2][0]++, !secrets.azureOpenAIKey) ||
    /* istanbul ignore next */
    (cov_1pwd3cutoc().b[2][1]++, !secrets.azureOpenAIEndpoint)) {
      /* istanbul ignore next */
      cov_1pwd3cutoc().b[1][0]++;
      cov_1pwd3cutoc().s[14]++;
      console.warn('⚠️ Azure OpenAI credentials not available, using fallback');
      /* istanbul ignore next */
      cov_1pwd3cutoc().s[15]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1pwd3cutoc().b[1][1]++;
    }
    cov_1pwd3cutoc().s[16]++;
    azureOpenAIClient = new OpenAI({
      apiKey: secrets.azureOpenAIKey,
      baseURL: `${secrets.azureOpenAIEndpoint}/openai/deployments/${secrets.azureOpenAIDeployment}`,
      defaultQuery: {
        'api-version': '2024-08-01-preview'
      },
      defaultHeaders: {
        'api-key': secrets.azureOpenAIKey
      }
    });
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[17]++;
    console.log('✅ Azure OpenAI client initialized for application worker');
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[18]++;
    return azureOpenAIClient;
  } catch (error) {
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[19]++;
    console.error('❌ Failed to initialize Azure OpenAI client:', error);
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[20]++;
    return null;
  }
}

// Queue trigger function for processing job applications
/* istanbul ignore next */
cov_1pwd3cutoc().s[21]++;
app.storageQueue('applicationWorker', {
  queueName: 'process-applications',
  connection: 'AzureWebJobsStorage',
  handler: async (queueItem, context) => {
    /* istanbul ignore next */
    cov_1pwd3cutoc().f[1]++;
    cov_1pwd3cutoc().s[22]++;
    context.log('Application Worker processing queue item:', queueItem);
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[23]++;
    try {
      const applicationData =
      /* istanbul ignore next */
      (cov_1pwd3cutoc().s[24]++, typeof queueItem === 'string' ?
      /* istanbul ignore next */
      (cov_1pwd3cutoc().b[3][0]++, JSON.parse(queueItem)) :
      /* istanbul ignore next */
      (cov_1pwd3cutoc().b[3][1]++, queueItem));
      const {
        userId,
        jobId,
        jobListing,
        requestId,
        autoApply
      } =
      /* istanbul ignore next */
      (cov_1pwd3cutoc().s[25]++, applicationData);
      /* istanbul ignore next */
      cov_1pwd3cutoc().s[26]++;
      await automationLogger.logInfo('application_processing_started', `Starting application processing for job ${jobId}`, {
        userId,
        jobId,
        requestId,
        autoApply
      });

      // Get user profile and preferences
      const userProfile =
      /* istanbul ignore next */
      (cov_1pwd3cutoc().s[27]++, await getUserProfile(userId));
      /* istanbul ignore next */
      cov_1pwd3cutoc().s[28]++;
      if (!userProfile) {
        /* istanbul ignore next */
        cov_1pwd3cutoc().b[4][0]++;
        cov_1pwd3cutoc().s[29]++;
        throw new Error(`User profile not found for user ${userId}`);
      } else
      /* istanbul ignore next */
      {
        cov_1pwd3cutoc().b[4][1]++;
      }

      // Check if user has already applied to this job
      const existingApplication =
      /* istanbul ignore next */
      (cov_1pwd3cutoc().s[30]++, await checkExistingApplication(userId, jobId));
      /* istanbul ignore next */
      cov_1pwd3cutoc().s[31]++;
      if (existingApplication) {
        /* istanbul ignore next */
        cov_1pwd3cutoc().b[5][0]++;
        cov_1pwd3cutoc().s[32]++;
        context.log(`User ${userId} has already applied to job ${jobId}`);
        /* istanbul ignore next */
        cov_1pwd3cutoc().s[33]++;
        await automationLogger.logWarning('application_duplicate_skipped', 'Skipping duplicate application', {
          userId,
          jobId
        });
        /* istanbul ignore next */
        cov_1pwd3cutoc().s[34]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1pwd3cutoc().b[5][1]++;
      }

      // Calculate job relevancy if not already done
      let relevancyScore =
      /* istanbul ignore next */
      (cov_1pwd3cutoc().s[35]++, jobListing.relevancyScore);
      /* istanbul ignore next */
      cov_1pwd3cutoc().s[36]++;
      if (!relevancyScore) {
        /* istanbul ignore next */
        cov_1pwd3cutoc().b[6][0]++;
        cov_1pwd3cutoc().s[37]++;
        relevancyScore = await calculateJobRelevancy(jobListing, userProfile);
        /* istanbul ignore next */
        cov_1pwd3cutoc().s[38]++;
        jobListing.relevancyScore = relevancyScore;
      } else
      /* istanbul ignore next */
      {
        cov_1pwd3cutoc().b[6][1]++;
      }

      // Check if job meets auto-apply threshold
      cov_1pwd3cutoc().s[39]++;
      if (autoApply) {
        /* istanbul ignore next */
        cov_1pwd3cutoc().b[7][0]++;
        const autoApplySettings =
        /* istanbul ignore next */
        (cov_1pwd3cutoc().s[40]++, await getUserAutoApplySettings(userId));
        /* istanbul ignore next */
        cov_1pwd3cutoc().s[41]++;
        if (relevancyScore < autoApplySettings.autoApplyThreshold) {
          /* istanbul ignore next */
          cov_1pwd3cutoc().b[8][0]++;
          cov_1pwd3cutoc().s[42]++;
          context.log(`Job relevancy score ${relevancyScore} below threshold ${autoApplySettings.autoApplyThreshold}`);
          /* istanbul ignore next */
          cov_1pwd3cutoc().s[43]++;
          await automationLogger.logInfo('application_skipped_threshold', `Job skipped due to low relevancy score: ${relevancyScore}`, {
            userId,
            jobId,
            relevancyScore,
            threshold: autoApplySettings.autoApplyThreshold
          });
          /* istanbul ignore next */
          cov_1pwd3cutoc().s[44]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_1pwd3cutoc().b[8][1]++;
        }

        // Check daily application limit
        const todayApplications =
        /* istanbul ignore next */
        (cov_1pwd3cutoc().s[45]++, await getTodayApplicationCount(userId));
        /* istanbul ignore next */
        cov_1pwd3cutoc().s[46]++;
        if (todayApplications >= autoApplySettings.dailyApplicationLimit) {
          /* istanbul ignore next */
          cov_1pwd3cutoc().b[9][0]++;
          cov_1pwd3cutoc().s[47]++;
          context.log(`User ${userId} has reached daily application limit`);
          /* istanbul ignore next */
          cov_1pwd3cutoc().s[48]++;
          await automationLogger.logWarning('application_daily_limit_reached', 'Daily application limit reached', {
            userId,
            todayApplications,
            dailyLimit: autoApplySettings.dailyApplicationLimit
          });
          /* istanbul ignore next */
          cov_1pwd3cutoc().s[49]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_1pwd3cutoc().b[9][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_1pwd3cutoc().b[7][1]++;
      }

      // Generate cover letter
      const coverLetter =
      /* istanbul ignore next */
      (cov_1pwd3cutoc().s[50]++, await generateCoverLetter(jobListing, userProfile));

      // Tailor resume for the job
      const tailoredResume =
      /* istanbul ignore next */
      (cov_1pwd3cutoc().s[51]++, await tailorResume(userProfile.resume, jobListing));

      // Submit application
      const applicationResult =
      /* istanbul ignore next */
      (cov_1pwd3cutoc().s[52]++, await submitJobApplication({
        userId,
        jobId,
        jobListing,
        userProfile,
        coverLetter,
        resume: tailoredResume,
        relevancyScore
      }));
      /* istanbul ignore next */
      cov_1pwd3cutoc().s[53]++;
      if (applicationResult.success) {
        /* istanbul ignore next */
        cov_1pwd3cutoc().b[10][0]++;
        cov_1pwd3cutoc().s[54]++;
        // Log successful application
        await automationLogger.logApplicationSubmitted(userId, jobId, applicationResult);

        // Send application submitted notification
        /* istanbul ignore next */
        cov_1pwd3cutoc().s[55]++;
        await sendApplicationSubmittedNotification(userId, {
          id: applicationResult.applicationId,
          userId,
          jobId,
          jobTitle: jobListing.title,
          company: jobListing.company,
          appliedAt: new Date(),
          autoApplied: autoApply,
          coverLetterUsed: !!coverLetter,
          resumeTailored: !!tailoredResume,
          relevancyScore
        });

        // Schedule follow-up reminder if enabled
        const autoApplySettings =
        /* istanbul ignore next */
        (cov_1pwd3cutoc().s[56]++, await getUserAutoApplySettings(userId));
        /* istanbul ignore next */
        cov_1pwd3cutoc().s[57]++;
        if (autoApplySettings.followUpEnabled) {
          /* istanbul ignore next */
          cov_1pwd3cutoc().b[11][0]++;
          cov_1pwd3cutoc().s[58]++;
          await scheduleFollowUp(userId, applicationResult.applicationId, autoApplySettings.followUpSchedule);
        } else
        /* istanbul ignore next */
        {
          cov_1pwd3cutoc().b[11][1]++;
        }
        cov_1pwd3cutoc().s[59]++;
        context.log(`Successfully processed application for job ${jobId}`);
      } else {
        /* istanbul ignore next */
        cov_1pwd3cutoc().b[10][1]++;
        cov_1pwd3cutoc().s[60]++;
        await automationLogger.logError('application_submission_failed', new Error(applicationResult.message), {
          userId,
          jobId,
          applicationResult
        });
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1pwd3cutoc().s[61]++;
      context.log('Error processing application:', error);
      /* istanbul ignore next */
      cov_1pwd3cutoc().s[62]++;
      await automationLogger.logError('application_processing_error', error, {
        queueItem
      });

      // Re-throw to trigger Azure Functions retry logic
      /* istanbul ignore next */
      cov_1pwd3cutoc().s[63]++;
      throw error;
    }
  }
});

/**
 * Calculate job relevancy score using AI
 */
async function calculateJobRelevancy(jobListing, userProfile) {
  /* istanbul ignore next */
  cov_1pwd3cutoc().f[2]++;
  cov_1pwd3cutoc().s[64]++;
  try {
    const client =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[65]++, await initializeAzureOpenAI());
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[66]++;
    if (!client) {
      /* istanbul ignore next */
      cov_1pwd3cutoc().b[12][0]++;
      cov_1pwd3cutoc().s[67]++;
      console.warn('Azure OpenAI client not available, using fallback scoring');
      /* istanbul ignore next */
      cov_1pwd3cutoc().s[68]++;
      return calculateFallbackRelevancy(jobListing, userProfile);
    } else
    /* istanbul ignore next */
    {
      cov_1pwd3cutoc().b[12][1]++;
    }
    const prompt =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[69]++, `
            Analyze the relevancy between this job posting and the candidate's profile:
            
            JOB TITLE: ${jobListing.title}
            COMPANY: ${jobListing.company}
            JOB DESCRIPTION: ${jobListing.description}
            REQUIREMENTS: ${jobListing.requirements?.join(', ')}
            
            CANDIDATE PROFILE:
            Skills: ${userProfile.skills?.join(', ')}
            Experience: ${userProfile.experience?.map(exp => {
      /* istanbul ignore next */
      cov_1pwd3cutoc().f[3]++;
      cov_1pwd3cutoc().s[70]++;
      return `${exp.position} at ${exp.company}`;
    }).join(', ')}
            Target Roles: ${userProfile.targetRoles?.join(', ')}
            
            Calculate a relevancy score from 0-100 based on:
            1. Skills match (40% weight)
            2. Role alignment (30% weight) 
            3. Experience level match (20% weight)
            4. Job requirements match (10% weight)
            
            Return only a number between 0-100.
        `);
    const completion =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[71]++, await client.chat.completions.create({
      model: 'gpt-35-turbo',
      // Using the deployment name
      messages: [{
        role: 'user',
        content: prompt
      }],
      temperature: 0.1,
      max_tokens: 50
    }));
    const scoreText =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[72]++,
    /* istanbul ignore next */
    (cov_1pwd3cutoc().b[13][0]++, completion.choices[0]?.message?.content?.trim()) ||
    /* istanbul ignore next */
    (cov_1pwd3cutoc().b[13][1]++, ''));
    const score =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[73]++, parseInt(scoreText));
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[74]++;
    return isNaN(score) ?
    /* istanbul ignore next */
    (cov_1pwd3cutoc().b[14][0]++, 50) :
    /* istanbul ignore next */
    (cov_1pwd3cutoc().b[14][1]++, Math.max(0, Math.min(100, score)));
  } catch (error) {
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[75]++;
    console.error('Error calculating job relevancy with Azure OpenAI:', error);
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[76]++;
    return calculateFallbackRelevancy(jobListing, userProfile);
  }
}

/**
 * Fallback relevancy calculation using keyword matching
 */
function calculateFallbackRelevancy(jobListing, userProfile) {
  /* istanbul ignore next */
  cov_1pwd3cutoc().f[4]++;
  const jobText =
  /* istanbul ignore next */
  (cov_1pwd3cutoc().s[77]++, `${jobListing.title} ${jobListing.description} ${jobListing.requirements?.join(' ')}`.toLowerCase());
  const matchedSkills =
  /* istanbul ignore next */
  (cov_1pwd3cutoc().s[78]++,
  /* istanbul ignore next */
  (cov_1pwd3cutoc().b[15][0]++, userProfile.skills?.filter(skill => {
    /* istanbul ignore next */
    cov_1pwd3cutoc().f[5]++;
    cov_1pwd3cutoc().s[79]++;
    return jobText.includes(skill.toLowerCase());
  })) ||
  /* istanbul ignore next */
  (cov_1pwd3cutoc().b[15][1]++, []));
  /* istanbul ignore next */
  cov_1pwd3cutoc().s[80]++;
  return Math.min(90, matchedSkills.length / (
  /* istanbul ignore next */
  (cov_1pwd3cutoc().b[16][0]++, userProfile.skills?.length) ||
  /* istanbul ignore next */
  (cov_1pwd3cutoc().b[16][1]++, 1)) * 100);
}

/**
 * Generate AI-powered cover letter
 */
async function generateCoverLetter(jobListing, userProfile) {
  /* istanbul ignore next */
  cov_1pwd3cutoc().f[6]++;
  cov_1pwd3cutoc().s[81]++;
  try {
    const client =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[82]++, await initializeAzureOpenAI());
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[83]++;
    if (!client) {
      /* istanbul ignore next */
      cov_1pwd3cutoc().b[17][0]++;
      cov_1pwd3cutoc().s[84]++;
      console.warn('Azure OpenAI client not available, using fallback cover letter');
      /* istanbul ignore next */
      cov_1pwd3cutoc().s[85]++;
      return generateFallbackCoverLetter(jobListing, userProfile);
    } else
    /* istanbul ignore next */
    {
      cov_1pwd3cutoc().b[17][1]++;
    }
    const prompt =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[86]++, `
            Generate a professional cover letter for this job application:
            
            JOB DETAILS:
            Position: ${jobListing.title}
            Company: ${jobListing.company}
            Description: ${jobListing.description}
            Requirements: ${jobListing.requirements?.join(', ')}
            
            CANDIDATE PROFILE:
            Name: ${userProfile.name}
            Skills: ${userProfile.skills?.join(', ')}
            Experience: ${userProfile.experience?.map(exp => {
      /* istanbul ignore next */
      cov_1pwd3cutoc().f[7]++;
      cov_1pwd3cutoc().s[87]++;
      return `${exp.position} at ${exp.company}`;
    }).join(', ')}
            Summary: ${userProfile.summary}
            
            Requirements:
            1. Professional tone and format
            2. Highlight relevant skills and experience
            3. Show enthusiasm for the role and company
            4. Keep it concise (3-4 paragraphs)
            5. Include specific examples when possible
            6. Address any skill gaps positively
            
            Return only the cover letter text, no additional formatting or explanations.
        `);
    const completion =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[88]++, await client.chat.completions.create({
      model: 'gpt-4o',
      // Using gpt-4o for better content generation
      messages: [{
        role: 'user',
        content: prompt
      }],
      temperature: 0.7,
      max_tokens: 1000
    }));
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[89]++;
    return /* istanbul ignore next */(cov_1pwd3cutoc().b[18][0]++, completion.choices[0]?.message?.content?.trim()) ||
    /* istanbul ignore next */
    (cov_1pwd3cutoc().b[18][1]++, generateFallbackCoverLetter(jobListing, userProfile));
  } catch (error) {
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[90]++;
    console.error('Error generating cover letter with Azure OpenAI:', error);
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[91]++;
    return generateFallbackCoverLetter(jobListing, userProfile);
  }
}

/**
 * Generate fallback cover letter
 */
function generateFallbackCoverLetter(jobListing, userProfile) {
  /* istanbul ignore next */
  cov_1pwd3cutoc().f[8]++;
  cov_1pwd3cutoc().s[92]++;
  return `Dear Hiring Manager,

I am writing to express my strong interest in the ${jobListing.title} position at ${jobListing.company}. With my background in ${userProfile.skills?.slice(0, 3).join(', ')}, I am confident that I would be a valuable addition to your team.

In my previous roles, I have gained extensive experience in ${userProfile.skills?.slice(0, 2).join(' and ')}, which directly aligns with the requirements outlined in your job posting. I am particularly excited about the opportunity to contribute to ${jobListing.company}'s innovative work in this space.

I would welcome the opportunity to discuss how my skills and enthusiasm can contribute to your team's success. Thank you for considering my application.

Best regards,
${userProfile.name}`;
}

/**
 * Tailor resume for specific job
 */
async function tailorResume(originalResume, jobListing) {
  /* istanbul ignore next */
  cov_1pwd3cutoc().f[9]++;
  cov_1pwd3cutoc().s[93]++;
  try {
    const client =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[94]++, await initializeAzureOpenAI());
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[95]++;
    if (!client) {
      /* istanbul ignore next */
      cov_1pwd3cutoc().b[19][0]++;
      cov_1pwd3cutoc().s[96]++;
      console.warn('Azure OpenAI client not available, returning original resume');
      /* istanbul ignore next */
      cov_1pwd3cutoc().s[97]++;
      return originalResume;
    } else
    /* istanbul ignore next */
    {
      cov_1pwd3cutoc().b[19][1]++;
    }
    const prompt =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[98]++, `
            Tailor this resume for the specific job posting to maximize ATS compatibility and relevance:
            
            JOB DESCRIPTION:
            ${jobListing.description}
            REQUIREMENTS: ${jobListing.requirements?.join(', ')}
            
            ORIGINAL RESUME:
            ${originalResume}
            
            Instructions:
            1. Optimize keywords for ATS systems
            2. Highlight most relevant experience first
            3. Include specific skills mentioned in job description
            4. Quantify achievements where possible
            5. Maintain professional formatting
            6. Keep same overall structure and length
            
            Return only the tailored resume content.
        `);
    const completion =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[99]++, await client.chat.completions.create({
      model: 'gpt-4o',
      // Using gpt-4o for better content generation
      messages: [{
        role: 'user',
        content: prompt
      }],
      temperature: 0.7,
      max_tokens: 2000
    }));
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[100]++;
    return /* istanbul ignore next */(cov_1pwd3cutoc().b[20][0]++, completion.choices[0]?.message?.content?.trim()) ||
    /* istanbul ignore next */
    (cov_1pwd3cutoc().b[20][1]++, originalResume);
  } catch (error) {
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[101]++;
    console.error('Error tailoring resume with Azure OpenAI:', error);
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[102]++;
    return originalResume; // Return original if tailoring fails
  }
}

/**
 * Submit job application to the appropriate portal
 */
async function submitJobApplication(applicationData) {
  /* istanbul ignore next */
  cov_1pwd3cutoc().f[10]++;
  cov_1pwd3cutoc().s[103]++;
  try {
    const {
      userId,
      jobId,
      jobListing,
      userProfile,
      coverLetter,
      resume,
      relevancyScore
    } =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[104]++, applicationData);

    // Check if this is a TheirStack job with easy_apply enabled
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[105]++;
    if (
    /* istanbul ignore next */
    (cov_1pwd3cutoc().b[22][0]++, jobListing.easy_apply) && (
    /* istanbul ignore next */
    (cov_1pwd3cutoc().b[22][1]++, jobListing.jobPortal?.name === 'TheirStack') ||
    /* istanbul ignore next */
    (cov_1pwd3cutoc().b[22][2]++, jobListing.final_url))) {
      /* istanbul ignore next */
      cov_1pwd3cutoc().b[21][0]++;
      cov_1pwd3cutoc().s[106]++;
      await automationLogger.logInfo('headless_application_initiated', `Initiating headless application for job ${jobId}`, {
        userId,
        jobId,
        portal: jobListing.jobPortal?.name
      });

      // Use headless browser automation for easy apply jobs
      const headlessResult =
      /* istanbul ignore next */
      (cov_1pwd3cutoc().s[107]++, await headlessBrowserService.applyToJob(jobListing, {
        ...userProfile,
        resume,
        // Use tailored resume
        coverLetter
      }, {
        timeout: 120000,
        // 2 minute timeout for complex forms
        screenshots: true,
        retryOnFailure: true
      }));
      /* istanbul ignore next */
      cov_1pwd3cutoc().s[108]++;
      if (headlessResult.success) {
        /* istanbul ignore next */
        cov_1pwd3cutoc().b[23][0]++;
        // Store successful application in Azure Cosmos DB
        const applicationRecord =
        /* istanbul ignore next */
        (cov_1pwd3cutoc().s[109]++, {
          id: headlessResult.applicationId,
          userId,
          jobId,
          status: 'applied',
          appliedAt: new Date(),
          applicationMethod: 'headless_automation',
          portal:
          /* istanbul ignore next */
          (cov_1pwd3cutoc().b[24][0]++, jobListing.jobPortal?.name) ||
          /* istanbul ignore next */
          (cov_1pwd3cutoc().b[24][1]++, 'Unknown'),
          jobTitle: jobListing.title,
          company: jobListing.company,
          jobUrl: jobListing.final_url,
          coverLetter,
          tailoredResume: resume,
          relevancyScore,
          automationDetails: {
            duration: headlessResult.duration,
            attempts: headlessResult.attempts,
            formData: headlessResult.formData,
            screenshotPath: headlessResult.screenshotPath
          },
          createdAt: new Date(),
          updatedAt: new Date(),
          _partitionKey: userId
        });
        /* istanbul ignore next */
        cov_1pwd3cutoc().s[110]++;
        await storeJobApplication(applicationRecord);
        /* istanbul ignore next */
        cov_1pwd3cutoc().s[111]++;
        return {
          success: true,
          message: 'Application submitted successfully via headless automation',
          applicationId: headlessResult.applicationId,
          automationDetails: {
            duration: headlessResult.duration,
            attempts: headlessResult.attempts,
            method: 'headless_browser'
          }
        };
      } else {
        /* istanbul ignore next */
        cov_1pwd3cutoc().b[23][1]++;
        cov_1pwd3cutoc().s[112]++;
        // Headless automation failed, log and potentially fallback
        await automationLogger.logError('headless_application_failed', new Error(headlessResult.message), {
          userId,
          jobId,
          duration: headlessResult.duration,
          attempts: headlessResult.attempts
        });
        /* istanbul ignore next */
        cov_1pwd3cutoc().s[113]++;
        return {
          success: false,
          message: `Headless application failed: ${headlessResult.message}`,
          applicationId: headlessResult.applicationId,
          automationDetails: {
            duration: headlessResult.duration,
            attempts: headlessResult.attempts,
            method: 'headless_browser',
            error: headlessResult.message
          }
        };
      }
    } else
    /* istanbul ignore next */
    {
      cov_1pwd3cutoc().b[21][1]++;
    }

    // Fallback to traditional application methods for non-easy-apply jobs
    const applicationId =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[114]++, uuidv4());

    // For now, store as manual application pending user action
    const applicationRecord =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[115]++, {
      id: applicationId,
      userId,
      jobId,
      status: 'pending_manual',
      appliedAt: new Date(),
      applicationMethod: 'manual_required',
      portal:
      /* istanbul ignore next */
      (cov_1pwd3cutoc().b[25][0]++, jobListing.jobPortal?.name) ||
      /* istanbul ignore next */
      (cov_1pwd3cutoc().b[25][1]++, 'Unknown'),
      jobTitle: jobListing.title,
      company: jobListing.company,
      jobUrl: jobListing.final_url,
      coverLetter,
      tailoredResume: resume,
      relevancyScore,
      reason: 'Job does not support easy apply - manual application required',
      createdAt: new Date(),
      updatedAt: new Date(),
      _partitionKey: userId
    });
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[116]++;
    await storeJobApplication(applicationRecord);
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[117]++;
    return {
      success: false,
      // Mark as false since manual action required
      message: 'Job requires manual application - stored for user review',
      applicationId,
      requiresManualAction: true
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[118]++;
    console.error('Error submitting job application:', error);
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[119]++;
    await automationLogger.logError('application_submission_error', error, {
      applicationData
    });
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[120]++;
    return {
      success: false,
      message:
      /* istanbul ignore next */
      (cov_1pwd3cutoc().b[26][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_1pwd3cutoc().b[26][1]++, 'Internal error during application submission')
    };
  }
}

/**
 * Schedule follow-up reminder
 */
async function scheduleFollowUp(userId, applicationId, followUpSchedule) {
  /* istanbul ignore next */
  cov_1pwd3cutoc().f[11]++;
  cov_1pwd3cutoc().s[121]++;
  try {
    const followUpMessage =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[122]++, {
      userId,
      applicationId,
      type: 'initial_follow_up',
      scheduledDate: new Date(Date.now() + followUpSchedule.initialDays * 24 * 60 * 60 * 1000).toISOString(),
      createdAt: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[123]++;
    await queueService.addMessage(queueService.queues.FOLLOW_UP_REMINDERS, followUpMessage, {
      visibilityTimeout: followUpSchedule.initialDays * 24 * 60 * 60 // Delay until follow-up date
    });
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[124]++;
    console.log(`Follow-up scheduled for application ${applicationId}`);
  } catch (error) {
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[125]++;
    console.error('Error scheduling follow-up:', error);
  }
}

// Utility functions (TODO: Implement with proper data storage)

async function getUserProfile(userId) {
  /* istanbul ignore next */
  cov_1pwd3cutoc().f[12]++;
  cov_1pwd3cutoc().s[126]++;
  // Mock user profile
  return {
    id: userId,
    name: 'John Doe',
    email: 'john.doe@example.com',
    skills: ['JavaScript', 'React', 'TypeScript', 'Node.js', 'Python'],
    experience: [{
      position: 'Frontend Developer',
      company: 'Tech Corp',
      technologies: ['React', 'TypeScript']
    }],
    targetRoles: ['Frontend Developer', 'Full Stack Developer'],
    summary: 'Experienced frontend developer with expertise in React applications',
    resume: 'Detailed resume content would be stored here...'
  };
}
async function getUserAutoApplySettings(userId) {
  /* istanbul ignore next */
  cov_1pwd3cutoc().f[13]++;
  cov_1pwd3cutoc().s[127]++;
  return {
    autoApplyThreshold: 75,
    dailyApplicationLimit: 5,
    followUpEnabled: true,
    followUpSchedule: {
      initialDays: 3,
      secondDays: 7
    }
  };
}
async function checkExistingApplication(userId, jobId) {
  /* istanbul ignore next */
  cov_1pwd3cutoc().f[14]++;
  cov_1pwd3cutoc().s[128]++;
  try {
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[129]++;
    await azureCosmosService.initialize();

    // Query for existing application by userId and jobId
    const existingApplications =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[130]++, await azureCosmosService.queryDocuments('applications', 'SELECT * FROM c WHERE c.userId = @userId AND c.jobId = @jobId', [{
      name: '@userId',
      value: userId
    }, {
      name: '@jobId',
      value: jobId
    }]));
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[131]++;
    return existingApplications.length > 0 ?
    /* istanbul ignore next */
    (cov_1pwd3cutoc().b[27][0]++, existingApplications[0]) :
    /* istanbul ignore next */
    (cov_1pwd3cutoc().b[27][1]++, null);
  } catch (error) {
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[132]++;
    console.error('Error checking existing application:', error);
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[133]++;
    return null; // Return null on error to allow application to proceed
  }
}
async function getTodayApplicationCount(userId) {
  /* istanbul ignore next */
  cov_1pwd3cutoc().f[15]++;
  cov_1pwd3cutoc().s[134]++;
  try {
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[135]++;
    await azureCosmosService.initialize();

    // Get start of today in UTC
    const today =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[136]++, new Date());
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[137]++;
    today.setHours(0, 0, 0, 0);
    const todayApplications =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[138]++, await azureCosmosService.queryDocuments('applications', 'SELECT VALUE COUNT(1) FROM c WHERE c.userId = @userId AND c.appliedAt >= @today', [{
      name: '@userId',
      value: userId
    }, {
      name: '@today',
      value: today
    }]));
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[139]++;
    return /* istanbul ignore next */(cov_1pwd3cutoc().b[28][0]++, todayApplications[0]) ||
    /* istanbul ignore next */
    (cov_1pwd3cutoc().b[28][1]++, 0);
  } catch (error) {
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[140]++;
    console.error('Error getting today application count:', error);
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[141]++;
    return 0; // Return 0 on error to allow applications
  }
}
async function storeJobApplication(applicationData) {
  /* istanbul ignore next */
  cov_1pwd3cutoc().f[16]++;
  cov_1pwd3cutoc().s[142]++;
  try {
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[143]++;
    // Store application in Azure Cosmos DB
    await azureCosmosService.initialize();
    const applicationId =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[144]++, await azureCosmosService.createDocument('applications', applicationData));
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[145]++;
    console.log(`✅ Job application stored in Cosmos DB: ${applicationId}`);
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[146]++;
    return applicationId;
  } catch (error) {
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[147]++;
    console.error('❌ Failed to store job application in Cosmos DB:', error);
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[148]++;
    throw error;
  }
}

/**
 * Send application submitted notification
 */
async function sendApplicationSubmittedNotification(userId, applicationData) {
  /* istanbul ignore next */
  cov_1pwd3cutoc().f[17]++;
  cov_1pwd3cutoc().s[149]++;
  try {
    // Import notification integration service
    const {
      jobNotificationIntegration
    } =
    /* istanbul ignore next */
    (cov_1pwd3cutoc().s[150]++, require('../../lib/services/job-notification-integration'));

    // Send application submitted notification
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[151]++;
    await jobNotificationIntegration.notifyApplicationSubmitted(userId, applicationData);
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[152]++;
    console.log(`Application submitted notification sent for user ${userId}, application ${applicationData.id}`);
  } catch (error) {
    /* istanbul ignore next */
    cov_1pwd3cutoc().s[153]++;
    console.error('Error sending application submitted notification:', error);
    // Don't throw error here to avoid breaking the application workflow
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,