{"version":3,"names":["cov_1y9wffz43f","actualCoverage","getGoogleAuthUrl","baseUrl","b","f","clientId","s","process","env","NEXT_PUBLIC_FIREBASE_API_KEY","redirectUri","scope","join","params","URLSearchParams","client_id","redirect_uri","response_type","access_type","prompt","toString","exchangeGoogleCode","code","clientSecret","response","fetch","method","headers","body","client_secret","grant_type","ok","Error","status","json","error","console","getGoogleUserInfo","accessToken","createMockFirebaseToken","googleUser","header","alg","typ","now","Math","floor","Date","payload","iss","aud","auth_time","user_id","id","uid","sub","iat","exp","email","email_verified","verified_email","name","picture","firebase","identities","sign_in_provider","encodedHeader","Buffer","from","JSON","stringify","encodedPayload"],"sources":["server-auth.js"],"sourcesContent":["/**\n * Server-Side Google OAuth Implementation\n * \n * Bypasses Firebase client-side authentication issues by handling\n * Google OAuth directly on the server side\n */\n\n/**\n * Generate Google OAuth URL for server-side authentication\n */\nexport function getGoogleAuthUrl(baseUrl = 'http://localhost:3000') {\n  const clientId = process.env.NEXT_PUBLIC_FIREBASE_API_KEY \n    ? '660242808945-YOUR_GOOGLE_CLIENT_ID.apps.googleusercontent.com' // You'll need to get this from Google Cloud Console\n    : 'demo-client-id';\n\n  const redirectUri = `${baseUrl}/api/auth/google/callback`;\n  \n  const scope = [\n    'openid',\n    'email', \n    'profile'\n  ].join(' ');\n\n  const params = new URLSearchParams({\n    client_id: clientId,\n    redirect_uri: redirectUri,\n    response_type: 'code',\n    scope: scope,\n    access_type: 'offline',\n    prompt: 'consent'\n  });\n\n  return `https://accounts.google.com/o/oauth2/v2/auth?${params.toString()}`;\n}\n\n/**\n * Exchange Google OAuth code for tokens\n */\nexport async function exchangeGoogleCode(code, baseUrl = 'http://localhost:3000') {\n  const clientId = '660242808945-YOUR_GOOGLE_CLIENT_ID.apps.googleusercontent.com';\n  const clientSecret = 'YOUR_GOOGLE_CLIENT_SECRET'; // You'll need to get this from Google Cloud Console\n  const redirectUri = `${baseUrl}/api/auth/google/callback`;\n\n  try {\n    const response = await fetch('https://oauth2.googleapis.com/token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: new URLSearchParams({\n        client_id: clientId,\n        client_secret: clientSecret,\n        code: code,\n        grant_type: 'authorization_code',\n        redirect_uri: redirectUri,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Google OAuth token exchange failed: ${response.status}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Google OAuth token exchange error:', error);\n    throw error;\n  }\n}\n\n/**\n * Get user info from Google\n */\nexport async function getGoogleUserInfo(accessToken) {\n  try {\n    const response = await fetch('https://www.googleapis.com/oauth2/v2/userinfo', {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`Google user info fetch failed: ${response.status}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Google user info fetch error:', error);\n    throw error;\n  }\n}\n\n/**\n * Create a mock Firebase ID token for server-side auth\n */\nexport function createMockFirebaseToken(googleUser) {\n  const header = {\n    alg: 'none',\n    typ: 'JWT'\n  };\n\n  const now = Math.floor(Date.now() / 1000);\n  const payload = {\n    iss: 'https://securetoken.google.com/prepbettr',\n    aud: 'prepbettr',\n    auth_time: now,\n    user_id: googleUser.id,\n    uid: googleUser.id,\n    sub: googleUser.id,\n    iat: now,\n    exp: now + (60 * 60), // 1 hour\n    email: googleUser.email,\n    email_verified: googleUser.verified_email,\n    name: googleUser.name,\n    picture: googleUser.picture,\n    firebase: {\n      identities: {\n        'google.com': [googleUser.id],\n        email: [googleUser.email]\n      },\n      sign_in_provider: 'google.com'\n    }\n  };\n\n  // Create a mock JWT without signature (for development)\n  const encodedHeader = Buffer.from(JSON.stringify(header)).toString('base64url');\n  const encodedPayload = Buffer.from(JSON.stringify(payload)).toString('base64url');\n  \n  return `${encodedHeader}.${encodedPayload}.mock-signature`;\n}"],"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","ignoreList":[]}