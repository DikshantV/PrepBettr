760ac4364a9f3d3d71275ffb93d5ed90
/* istanbul ignore next */
function cov_1y9wffz43f() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/server-auth.js";
  var hash = "16746fc41049f17dac63cbfe0ff833048ac8885c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/server-auth.js",
    statementMap: {
      "0": {
        start: {
          line: 12,
          column: 19
        },
        end: {
          line: 14,
          column: 22
        }
      },
      "1": {
        start: {
          line: 16,
          column: 22
        },
        end: {
          line: 16,
          column: 59
        }
      },
      "2": {
        start: {
          line: 18,
          column: 16
        },
        end: {
          line: 22,
          column: 13
        }
      },
      "3": {
        start: {
          line: 24,
          column: 17
        },
        end: {
          line: 31,
          column: 4
        }
      },
      "4": {
        start: {
          line: 33,
          column: 2
        },
        end: {
          line: 33,
          column: 77
        }
      },
      "5": {
        start: {
          line: 40,
          column: 19
        },
        end: {
          line: 40,
          column: 82
        }
      },
      "6": {
        start: {
          line: 41,
          column: 23
        },
        end: {
          line: 41,
          column: 50
        }
      },
      "7": {
        start: {
          line: 42,
          column: 22
        },
        end: {
          line: 42,
          column: 59
        }
      },
      "8": {
        start: {
          line: 44,
          column: 2
        },
        end: {
          line: 67,
          column: 3
        }
      },
      "9": {
        start: {
          line: 45,
          column: 21
        },
        end: {
          line: 57,
          column: 6
        }
      },
      "10": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 61,
          column: 5
        }
      },
      "11": {
        start: {
          line: 60,
          column: 6
        },
        end: {
          line: 60,
          column: 80
        }
      },
      "12": {
        start: {
          line: 63,
          column: 4
        },
        end: {
          line: 63,
          column: 33
        }
      },
      "13": {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 65,
          column: 63
        }
      },
      "14": {
        start: {
          line: 66,
          column: 4
        },
        end: {
          line: 66,
          column: 16
        }
      },
      "15": {
        start: {
          line: 74,
          column: 2
        },
        end: {
          line: 89,
          column: 3
        }
      },
      "16": {
        start: {
          line: 75,
          column: 21
        },
        end: {
          line: 79,
          column: 6
        }
      },
      "17": {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 83,
          column: 5
        }
      },
      "18": {
        start: {
          line: 82,
          column: 6
        },
        end: {
          line: 82,
          column: 75
        }
      },
      "19": {
        start: {
          line: 85,
          column: 4
        },
        end: {
          line: 85,
          column: 33
        }
      },
      "20": {
        start: {
          line: 87,
          column: 4
        },
        end: {
          line: 87,
          column: 58
        }
      },
      "21": {
        start: {
          line: 88,
          column: 4
        },
        end: {
          line: 88,
          column: 16
        }
      },
      "22": {
        start: {
          line: 96,
          column: 17
        },
        end: {
          line: 99,
          column: 3
        }
      },
      "23": {
        start: {
          line: 101,
          column: 14
        },
        end: {
          line: 101,
          column: 43
        }
      },
      "24": {
        start: {
          line: 102,
          column: 18
        },
        end: {
          line: 122,
          column: 3
        }
      },
      "25": {
        start: {
          line: 125,
          column: 24
        },
        end: {
          line: 125,
          column: 81
        }
      },
      "26": {
        start: {
          line: 126,
          column: 25
        },
        end: {
          line: 126,
          column: 83
        }
      },
      "27": {
        start: {
          line: 128,
          column: 2
        },
        end: {
          line: 128,
          column: 61
        }
      }
    },
    fnMap: {
      "0": {
        name: "getGoogleAuthUrl",
        decl: {
          start: {
            line: 11,
            column: 16
          },
          end: {
            line: 11,
            column: 32
          }
        },
        loc: {
          start: {
            line: 11,
            column: 68
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 11
      },
      "1": {
        name: "exchangeGoogleCode",
        decl: {
          start: {
            line: 39,
            column: 22
          },
          end: {
            line: 39,
            column: 40
          }
        },
        loc: {
          start: {
            line: 39,
            column: 82
          },
          end: {
            line: 68,
            column: 1
          }
        },
        line: 39
      },
      "2": {
        name: "getGoogleUserInfo",
        decl: {
          start: {
            line: 73,
            column: 22
          },
          end: {
            line: 73,
            column: 39
          }
        },
        loc: {
          start: {
            line: 73,
            column: 53
          },
          end: {
            line: 90,
            column: 1
          }
        },
        line: 73
      },
      "3": {
        name: "createMockFirebaseToken",
        decl: {
          start: {
            line: 95,
            column: 16
          },
          end: {
            line: 95,
            column: 39
          }
        },
        loc: {
          start: {
            line: 95,
            column: 52
          },
          end: {
            line: 129,
            column: 1
          }
        },
        line: 95
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 11,
            column: 33
          },
          end: {
            line: 11,
            column: 66
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 11,
            column: 43
          },
          end: {
            line: 11,
            column: 66
          }
        }],
        line: 11
      },
      "1": {
        loc: {
          start: {
            line: 12,
            column: 19
          },
          end: {
            line: 14,
            column: 22
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 6
          },
          end: {
            line: 13,
            column: 69
          }
        }, {
          start: {
            line: 14,
            column: 6
          },
          end: {
            line: 14,
            column: 22
          }
        }],
        line: 12
      },
      "2": {
        loc: {
          start: {
            line: 39,
            column: 47
          },
          end: {
            line: 39,
            column: 80
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 39,
            column: 57
          },
          end: {
            line: 39,
            column: 80
          }
        }],
        line: 39
      },
      "3": {
        loc: {
          start: {
            line: 59,
            column: 4
          },
          end: {
            line: 61,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 4
          },
          end: {
            line: 61,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "4": {
        loc: {
          start: {
            line: 81,
            column: 4
          },
          end: {
            line: 83,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 4
          },
          end: {
            line: 83,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0]
    },
    inputSourceMap: null,
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "16746fc41049f17dac63cbfe0ff833048ac8885c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1y9wffz43f = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1y9wffz43f();
/**
 * Server-Side Google OAuth Implementation
 * 
 * Bypasses Firebase client-side authentication issues by handling
 * Google OAuth directly on the server side
 */

/**
 * Generate Google OAuth URL for server-side authentication
 */
export function getGoogleAuthUrl(baseUrl =
/* istanbul ignore next */
(cov_1y9wffz43f().b[0][0]++, 'http://localhost:3000')) {
  /* istanbul ignore next */
  cov_1y9wffz43f().f[0]++;
  const clientId =
  /* istanbul ignore next */
  (cov_1y9wffz43f().s[0]++, process.env.NEXT_PUBLIC_FIREBASE_API_KEY ?
  /* istanbul ignore next */
  (cov_1y9wffz43f().b[1][0]++, '660242808945-YOUR_GOOGLE_CLIENT_ID.apps.googleusercontent.com' // You'll need to get this from Google Cloud Console
  ) :
  /* istanbul ignore next */
  (cov_1y9wffz43f().b[1][1]++, 'demo-client-id'));
  const redirectUri =
  /* istanbul ignore next */
  (cov_1y9wffz43f().s[1]++, `${baseUrl}/api/auth/google/callback`);
  const scope =
  /* istanbul ignore next */
  (cov_1y9wffz43f().s[2]++, ['openid', 'email', 'profile'].join(' '));
  const params =
  /* istanbul ignore next */
  (cov_1y9wffz43f().s[3]++, new URLSearchParams({
    client_id: clientId,
    redirect_uri: redirectUri,
    response_type: 'code',
    scope: scope,
    access_type: 'offline',
    prompt: 'consent'
  }));
  /* istanbul ignore next */
  cov_1y9wffz43f().s[4]++;
  return `https://accounts.google.com/o/oauth2/v2/auth?${params.toString()}`;
}

/**
 * Exchange Google OAuth code for tokens
 */
export async function exchangeGoogleCode(code, baseUrl =
/* istanbul ignore next */
(cov_1y9wffz43f().b[2][0]++, 'http://localhost:3000')) {
  /* istanbul ignore next */
  cov_1y9wffz43f().f[1]++;
  const clientId =
  /* istanbul ignore next */
  (cov_1y9wffz43f().s[5]++, '660242808945-YOUR_GOOGLE_CLIENT_ID.apps.googleusercontent.com');
  const clientSecret =
  /* istanbul ignore next */
  (cov_1y9wffz43f().s[6]++, 'YOUR_GOOGLE_CLIENT_SECRET'); // You'll need to get this from Google Cloud Console
  const redirectUri =
  /* istanbul ignore next */
  (cov_1y9wffz43f().s[7]++, `${baseUrl}/api/auth/google/callback`);
  /* istanbul ignore next */
  cov_1y9wffz43f().s[8]++;
  try {
    const response =
    /* istanbul ignore next */
    (cov_1y9wffz43f().s[9]++, await fetch('https://oauth2.googleapis.com/token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
      },
      body: new URLSearchParams({
        client_id: clientId,
        client_secret: clientSecret,
        code: code,
        grant_type: 'authorization_code',
        redirect_uri: redirectUri
      })
    }));
    /* istanbul ignore next */
    cov_1y9wffz43f().s[10]++;
    if (!response.ok) {
      /* istanbul ignore next */
      cov_1y9wffz43f().b[3][0]++;
      cov_1y9wffz43f().s[11]++;
      throw new Error(`Google OAuth token exchange failed: ${response.status}`);
    } else
    /* istanbul ignore next */
    {
      cov_1y9wffz43f().b[3][1]++;
    }
    cov_1y9wffz43f().s[12]++;
    return await response.json();
  } catch (error) {
    /* istanbul ignore next */
    cov_1y9wffz43f().s[13]++;
    console.error('Google OAuth token exchange error:', error);
    /* istanbul ignore next */
    cov_1y9wffz43f().s[14]++;
    throw error;
  }
}

/**
 * Get user info from Google
 */
export async function getGoogleUserInfo(accessToken) {
  /* istanbul ignore next */
  cov_1y9wffz43f().f[2]++;
  cov_1y9wffz43f().s[15]++;
  try {
    const response =
    /* istanbul ignore next */
    (cov_1y9wffz43f().s[16]++, await fetch('https://www.googleapis.com/oauth2/v2/userinfo', {
      headers: {
        'Authorization': `Bearer ${accessToken}`
      }
    }));
    /* istanbul ignore next */
    cov_1y9wffz43f().s[17]++;
    if (!response.ok) {
      /* istanbul ignore next */
      cov_1y9wffz43f().b[4][0]++;
      cov_1y9wffz43f().s[18]++;
      throw new Error(`Google user info fetch failed: ${response.status}`);
    } else
    /* istanbul ignore next */
    {
      cov_1y9wffz43f().b[4][1]++;
    }
    cov_1y9wffz43f().s[19]++;
    return await response.json();
  } catch (error) {
    /* istanbul ignore next */
    cov_1y9wffz43f().s[20]++;
    console.error('Google user info fetch error:', error);
    /* istanbul ignore next */
    cov_1y9wffz43f().s[21]++;
    throw error;
  }
}

/**
 * Create a mock Firebase ID token for server-side auth
 */
export function createMockFirebaseToken(googleUser) {
  /* istanbul ignore next */
  cov_1y9wffz43f().f[3]++;
  const header =
  /* istanbul ignore next */
  (cov_1y9wffz43f().s[22]++, {
    alg: 'none',
    typ: 'JWT'
  });
  const now =
  /* istanbul ignore next */
  (cov_1y9wffz43f().s[23]++, Math.floor(Date.now() / 1000));
  const payload =
  /* istanbul ignore next */
  (cov_1y9wffz43f().s[24]++, {
    iss: 'https://securetoken.google.com/prepbettr',
    aud: 'prepbettr',
    auth_time: now,
    user_id: googleUser.id,
    uid: googleUser.id,
    sub: googleUser.id,
    iat: now,
    exp: now + 60 * 60,
    // 1 hour
    email: googleUser.email,
    email_verified: googleUser.verified_email,
    name: googleUser.name,
    picture: googleUser.picture,
    firebase: {
      identities: {
        'google.com': [googleUser.id],
        email: [googleUser.email]
      },
      sign_in_provider: 'google.com'
    }
  });

  // Create a mock JWT without signature (for development)
  const encodedHeader =
  /* istanbul ignore next */
  (cov_1y9wffz43f().s[25]++, Buffer.from(JSON.stringify(header)).toString('base64url'));
  const encodedPayload =
  /* istanbul ignore next */
  (cov_1y9wffz43f().s[26]++, Buffer.from(JSON.stringify(payload)).toString('base64url'));
  /* istanbul ignore next */
  cov_1y9wffz43f().s[27]++;
  return `${encodedHeader}.${encodedPayload}.mock-signature`;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMXk5d2ZmejQzZiIsImFjdHVhbENvdmVyYWdlIiwiZ2V0R29vZ2xlQXV0aFVybCIsImJhc2VVcmwiLCJiIiwiZiIsImNsaWVudElkIiwicyIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19GSVJFQkFTRV9BUElfS0VZIiwicmVkaXJlY3RVcmkiLCJzY29wZSIsImpvaW4iLCJwYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJjbGllbnRfaWQiLCJyZWRpcmVjdF91cmkiLCJyZXNwb25zZV90eXBlIiwiYWNjZXNzX3R5cGUiLCJwcm9tcHQiLCJ0b1N0cmluZyIsImV4Y2hhbmdlR29vZ2xlQ29kZSIsImNvZGUiLCJjbGllbnRTZWNyZXQiLCJyZXNwb25zZSIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsImJvZHkiLCJjbGllbnRfc2VjcmV0IiwiZ3JhbnRfdHlwZSIsIm9rIiwiRXJyb3IiLCJzdGF0dXMiLCJqc29uIiwiZXJyb3IiLCJjb25zb2xlIiwiZ2V0R29vZ2xlVXNlckluZm8iLCJhY2Nlc3NUb2tlbiIsImNyZWF0ZU1vY2tGaXJlYmFzZVRva2VuIiwiZ29vZ2xlVXNlciIsImhlYWRlciIsImFsZyIsInR5cCIsIm5vdyIsIk1hdGgiLCJmbG9vciIsIkRhdGUiLCJwYXlsb2FkIiwiaXNzIiwiYXVkIiwiYXV0aF90aW1lIiwidXNlcl9pZCIsImlkIiwidWlkIiwic3ViIiwiaWF0IiwiZXhwIiwiZW1haWwiLCJlbWFpbF92ZXJpZmllZCIsInZlcmlmaWVkX2VtYWlsIiwibmFtZSIsInBpY3R1cmUiLCJmaXJlYmFzZSIsImlkZW50aXRpZXMiLCJzaWduX2luX3Byb3ZpZGVyIiwiZW5jb2RlZEhlYWRlciIsIkJ1ZmZlciIsImZyb20iLCJKU09OIiwic3RyaW5naWZ5IiwiZW5jb2RlZFBheWxvYWQiXSwic291cmNlcyI6WyJzZXJ2ZXItYXV0aC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFNlcnZlci1TaWRlIEdvb2dsZSBPQXV0aCBJbXBsZW1lbnRhdGlvblxuICogXG4gKiBCeXBhc3NlcyBGaXJlYmFzZSBjbGllbnQtc2lkZSBhdXRoZW50aWNhdGlvbiBpc3N1ZXMgYnkgaGFuZGxpbmdcbiAqIEdvb2dsZSBPQXV0aCBkaXJlY3RseSBvbiB0aGUgc2VydmVyIHNpZGVcbiAqL1xuXG4vKipcbiAqIEdlbmVyYXRlIEdvb2dsZSBPQXV0aCBVUkwgZm9yIHNlcnZlci1zaWRlIGF1dGhlbnRpY2F0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRHb29nbGVBdXRoVXJsKGJhc2VVcmwgPSAnaHR0cDovL2xvY2FsaG9zdDozMDAwJykge1xuICBjb25zdCBjbGllbnRJZCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0ZJUkVCQVNFX0FQSV9LRVkgXG4gICAgPyAnNjYwMjQyODA4OTQ1LVlPVVJfR09PR0xFX0NMSUVOVF9JRC5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbScgLy8gWW91J2xsIG5lZWQgdG8gZ2V0IHRoaXMgZnJvbSBHb29nbGUgQ2xvdWQgQ29uc29sZVxuICAgIDogJ2RlbW8tY2xpZW50LWlkJztcblxuICBjb25zdCByZWRpcmVjdFVyaSA9IGAke2Jhc2VVcmx9L2FwaS9hdXRoL2dvb2dsZS9jYWxsYmFja2A7XG4gIFxuICBjb25zdCBzY29wZSA9IFtcbiAgICAnb3BlbmlkJyxcbiAgICAnZW1haWwnLCBcbiAgICAncHJvZmlsZSdcbiAgXS5qb2luKCcgJyk7XG5cbiAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh7XG4gICAgY2xpZW50X2lkOiBjbGllbnRJZCxcbiAgICByZWRpcmVjdF91cmk6IHJlZGlyZWN0VXJpLFxuICAgIHJlc3BvbnNlX3R5cGU6ICdjb2RlJyxcbiAgICBzY29wZTogc2NvcGUsXG4gICAgYWNjZXNzX3R5cGU6ICdvZmZsaW5lJyxcbiAgICBwcm9tcHQ6ICdjb25zZW50J1xuICB9KTtcblxuICByZXR1cm4gYGh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi92Mi9hdXRoPyR7cGFyYW1zLnRvU3RyaW5nKCl9YDtcbn1cblxuLyoqXG4gKiBFeGNoYW5nZSBHb29nbGUgT0F1dGggY29kZSBmb3IgdG9rZW5zXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBleGNoYW5nZUdvb2dsZUNvZGUoY29kZSwgYmFzZVVybCA9ICdodHRwOi8vbG9jYWxob3N0OjMwMDAnKSB7XG4gIGNvbnN0IGNsaWVudElkID0gJzY2MDI0MjgwODk0NS1ZT1VSX0dPT0dMRV9DTElFTlRfSUQuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20nO1xuICBjb25zdCBjbGllbnRTZWNyZXQgPSAnWU9VUl9HT09HTEVfQ0xJRU5UX1NFQ1JFVCc7IC8vIFlvdSdsbCBuZWVkIHRvIGdldCB0aGlzIGZyb20gR29vZ2xlIENsb3VkIENvbnNvbGVcbiAgY29uc3QgcmVkaXJlY3RVcmkgPSBgJHtiYXNlVXJsfS9hcGkvYXV0aC9nb29nbGUvY2FsbGJhY2tgO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnaHR0cHM6Ly9vYXV0aDIuZ29vZ2xlYXBpcy5jb20vdG9rZW4nLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLFxuICAgICAgfSxcbiAgICAgIGJvZHk6IG5ldyBVUkxTZWFyY2hQYXJhbXMoe1xuICAgICAgICBjbGllbnRfaWQ6IGNsaWVudElkLFxuICAgICAgICBjbGllbnRfc2VjcmV0OiBjbGllbnRTZWNyZXQsXG4gICAgICAgIGNvZGU6IGNvZGUsXG4gICAgICAgIGdyYW50X3R5cGU6ICdhdXRob3JpemF0aW9uX2NvZGUnLFxuICAgICAgICByZWRpcmVjdF91cmk6IHJlZGlyZWN0VXJpLFxuICAgICAgfSksXG4gICAgfSk7XG5cbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEdvb2dsZSBPQXV0aCB0b2tlbiBleGNoYW5nZSBmYWlsZWQ6ICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xuICAgIH1cblxuICAgIHJldHVybiBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignR29vZ2xlIE9BdXRoIHRva2VuIGV4Y2hhbmdlIGVycm9yOicsIGVycm9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG4vKipcbiAqIEdldCB1c2VyIGluZm8gZnJvbSBHb29nbGVcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEdvb2dsZVVzZXJJbmZvKGFjY2Vzc1Rva2VuKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YyL3VzZXJpbmZvJywge1xuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHthY2Nlc3NUb2tlbn1gLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgR29vZ2xlIHVzZXIgaW5mbyBmZXRjaCBmYWlsZWQ6ICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xuICAgIH1cblxuICAgIHJldHVybiBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignR29vZ2xlIHVzZXIgaW5mbyBmZXRjaCBlcnJvcjonLCBlcnJvcik7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBtb2NrIEZpcmViYXNlIElEIHRva2VuIGZvciBzZXJ2ZXItc2lkZSBhdXRoXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNb2NrRmlyZWJhc2VUb2tlbihnb29nbGVVc2VyKSB7XG4gIGNvbnN0IGhlYWRlciA9IHtcbiAgICBhbGc6ICdub25lJyxcbiAgICB0eXA6ICdKV1QnXG4gIH07XG5cbiAgY29uc3Qgbm93ID0gTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XG4gIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgaXNzOiAnaHR0cHM6Ly9zZWN1cmV0b2tlbi5nb29nbGUuY29tL3ByZXBiZXR0cicsXG4gICAgYXVkOiAncHJlcGJldHRyJyxcbiAgICBhdXRoX3RpbWU6IG5vdyxcbiAgICB1c2VyX2lkOiBnb29nbGVVc2VyLmlkLFxuICAgIHVpZDogZ29vZ2xlVXNlci5pZCxcbiAgICBzdWI6IGdvb2dsZVVzZXIuaWQsXG4gICAgaWF0OiBub3csXG4gICAgZXhwOiBub3cgKyAoNjAgKiA2MCksIC8vIDEgaG91clxuICAgIGVtYWlsOiBnb29nbGVVc2VyLmVtYWlsLFxuICAgIGVtYWlsX3ZlcmlmaWVkOiBnb29nbGVVc2VyLnZlcmlmaWVkX2VtYWlsLFxuICAgIG5hbWU6IGdvb2dsZVVzZXIubmFtZSxcbiAgICBwaWN0dXJlOiBnb29nbGVVc2VyLnBpY3R1cmUsXG4gICAgZmlyZWJhc2U6IHtcbiAgICAgIGlkZW50aXRpZXM6IHtcbiAgICAgICAgJ2dvb2dsZS5jb20nOiBbZ29vZ2xlVXNlci5pZF0sXG4gICAgICAgIGVtYWlsOiBbZ29vZ2xlVXNlci5lbWFpbF1cbiAgICAgIH0sXG4gICAgICBzaWduX2luX3Byb3ZpZGVyOiAnZ29vZ2xlLmNvbSdcbiAgICB9XG4gIH07XG5cbiAgLy8gQ3JlYXRlIGEgbW9jayBKV1Qgd2l0aG91dCBzaWduYXR1cmUgKGZvciBkZXZlbG9wbWVudClcbiAgY29uc3QgZW5jb2RlZEhlYWRlciA9IEJ1ZmZlci5mcm9tKEpTT04uc3RyaW5naWZ5KGhlYWRlcikpLnRvU3RyaW5nKCdiYXNlNjR1cmwnKTtcbiAgY29uc3QgZW5jb2RlZFBheWxvYWQgPSBCdWZmZXIuZnJvbShKU09OLnN0cmluZ2lmeShwYXlsb2FkKSkudG9TdHJpbmcoJ2Jhc2U2NHVybCcpO1xuICBcbiAgcmV0dXJuIGAke2VuY29kZWRIZWFkZXJ9LiR7ZW5jb2RlZFBheWxvYWR9Lm1vY2stc2lnbmF0dXJlYDtcbn0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBZVk7SUFBQUEsY0FBQSxZQUFBQSxDQUFBO01BQUEsT0FBQUMsY0FBQTtJQUFBO0VBQUE7RUFBQSxPQUFBQSxjQUFBO0FBQUE7QUFBQUQsY0FBQTtBQWZaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLFNBQVNFLGdCQUFnQkEsQ0FBQ0MsT0FBTztBQUFBO0FBQUEsQ0FBQUgsY0FBQSxHQUFBSSxDQUFBLFVBQUcsdUJBQXVCLEdBQUU7RUFBQTtFQUFBSixjQUFBLEdBQUFLLENBQUE7RUFDbEUsTUFBTUMs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QUNYQyxHQUFHLEVBQUU7RUFDUCxDQUFDO0VBRUQsTUFBTUMsR0FBRztFQUFBO0VBQUEsQ0FBQTdDLGNBQUEsR0FBQU8sQ0FBQSxRQUFHdUMsSUFBSSxDQUFDQyxLQUFLLENBQUNDLElBQUksQ0FBQ0gsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7RUFDekMsTUFBTUksT0FBTztFQUFBO0VBQUEsQ0FBQWpELGNBQUEsR0FBQU8sQ0FBQSxRQUFHO0lBQ2QyQyxHQUFHLEVBQUUsMENBQTBDO0lBQy9DQyxHQUFHLEVBQUUsV0FBVztJQUNoQkMsU0FBUyxFQUFFUCxHQUFHO0lBQ2RRLE9BQU8sRUFBRVosVUFBVSxDQUFDYSxFQUFFO0lBQ3RCQyxHQUFHLEVBQUVkLFVBQVUsQ0FBQ2EsRUFBRTtJQUNsQkUsR0FBRyxFQUFFZixVQUFVLENBQUNhLEVBQUU7SUFDbEJHLEdBQUcsRUFBRVosR0FBRztJQUNSYSxHQUFHLEVBQUViLEdBQUcsR0FBSSxFQUFFLEdBQUcsRUFBRztJQUFFO0lBQ3RCYyxLQUFLLEVBQUVsQixVQUFVLENBQUNrQixLQUFLO0lBQ3ZCQyxjQUFjLEVBQUVuQixVQUFVLENBQUNvQixjQUFjO0lBQ3pDQyxJQUFJLEVBQUVyQixVQUFVLENBQUNxQixJQUFJO0lBQ3JCQyxPQUFPLEVBQUV0QixVQUFVLENBQUNzQixPQUFPO0lBQzNCQyxRQUFRLEVBQUU7TUFDUkMsVUFBVSxFQUFFO1FBQ1YsWUFBWSxFQUFFLENBQUN4QixVQUFVLENBQUNhLEVBQUUsQ0FBQztRQUM3QkssS0FBSyxFQUFFLENBQUNsQixVQUFVLENBQUNrQixLQUFLO01BQzFCLENBQUM7TUFDRE8sZ0JBQWdCLEVBQUU7SUFDcEI7RUFDRixDQUFDOztFQUVEO0VBQ0EsTUFBTUMsYUFBYTtFQUFBO0VBQUEsQ0FBQW5FLGNBQUEsR0FBQU8sQ0FBQSxRQUFHNkQsTUFBTSxDQUFDQyxJQUFJLENBQUNDLElBQUksQ0FBQ0MsU0FBUyxDQUFDN0IsTUFBTSxDQUFDLENBQUMsQ0FBQ3JCLFFBQVEsQ0FBQyxXQUFXLENBQUM7RUFDL0UsTUFBTW1ELGNBQWM7RUFBQTtFQUFBLENBQUF4RSxjQUFBLEdBQUFPLENBQUEsUUFBRzZELE1BQU0sQ0FBQ0MsSUFBSSxDQUFDQyxJQUFJLENBQUNDLFNBQVMsQ0FBQ3RCLE9BQU8sQ0FBQyxDQUFDLENBQUM1QixRQUFRLENBQUMsV0FBVyxDQUFDO0VBQUM7RUFBQXJCLGNBQUEsR0FBQU8sQ0FBQTtFQUVsRixPQUFPLEdBQUc0RCxhQUFhLElBQUlLLGNBQWMsaUJBQWlCO0FBQzVEIiwiaWdub3JlTGlzdCI6W119