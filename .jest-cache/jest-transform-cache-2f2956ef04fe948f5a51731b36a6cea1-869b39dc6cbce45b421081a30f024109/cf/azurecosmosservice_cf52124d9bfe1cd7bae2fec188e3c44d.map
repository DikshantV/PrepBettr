{"version":3,"names":["cov_sxfha54ly","actualCoverage","s","cosmos_1","require","environment_loader_1","AzureCosmosService","constructor","f","client","database","containers","Map","initialized","initialize","b","cosmosConfig","getCosmosDbConfig","connectionString","Error","CosmosClient","databases","createIfNotExists","id","containerDefinitions","partitionKey","containerDef","container","set","console","log","error","getContainer","containerName","get","createUser","userData","document","Object","assign","userId","_partitionKey","resource","items","create","getUser","item","read","code","updateUser","updates","existing","updated","updatedAt","Date","replace","createInterview","interviewData","now","Math","random","toString","substr","getInterview","interviewId","getUserInterviews","querySpec","query","parameters","name","value","resources","fetchAll","getPublicInterviews","limit","getPublicInterviewsExcludingUser","excludeUserId","updateInterview","deleteInterview","delete","createFeedback","feedbackData","getFeedbackByInterview","saveResume","resumeData","upsert","getUserResume","deleteUserResume","getUserUsage","initializeUserUsage","usageData","interviews","count","resumes","incrementUsage","type","checkUsageLimit","usage","createJobListing","jobData","getActiveJobListings","createApplication","applicationData","getUserApplications","createDataDeletionRequest","requestData","deleteAllUserData","deletedCollections","collections","collectionName","push","length","createNotificationEvent","eventData","updateNotificationEvent","eventId","getUserNotificationEvents","createErrorEvent","errorData","featureName","getErrorEvents","timeWindowMinutes","cutoffTime","getErrorEventCount","createErrorBudget","budgetData","createEmailVerification","verificationData","getEmailVerification","email","updateEmailVerification","verificationId","saveProfile","profileData","getProfile","updateProfile","newProfile","queryDocuments","queryOptions","createDocument","getDocument","documentId","updateDocument","deleteDocument","batchCreate","documents","batchSize","i","batch","slice","Promise","all","map","doc","batchDelete","documentIds","catch","err","healthCheck","status","timestamp","exports","azureCosmosService","default"],"sources":["/Users/dikshantvashistha/PrepBettr/lib/services/azure-cosmos-service.ts"],"sourcesContent":["import { CosmosClient, Database, Container } from '@azure/cosmos';\nimport { DefaultAzureCredential } from '@azure/identity';\nimport { getCosmosDbConfig } from '@/lib/config/environment-loader';\n\n// Data interfaces\nexport interface UserDocument {\n  id: string;\n  userId: string;\n  email: string;\n  displayName?: string;\n  profilePictureUrl?: string;\n  profilePictureBlobName?: string;\n  plan: 'free' | 'premium';\n  createdAt: Date;\n  updatedAt: Date;\n  _partitionKey?: string;\n}\n\nexport interface InterviewDocument {\n  id: string;\n  userId: string;\n  jobTitle: string;\n  company: string;\n  jobDescription?: string;\n  questions: Array<{\n    question: string;\n    answer?: string;\n    category: string;\n    difficulty: 'easy' | 'medium' | 'hard';\n  }>;\n  createdAt: Date;\n  updatedAt: Date;\n  finalized: boolean;\n  feedbackGenerated?: boolean;\n  _partitionKey?: string;\n}\n\nexport interface FeedbackDocument {\n  id: string;\n  userId: string;\n  interviewId: string;\n  overallScore: number;\n  strengths: string[];\n  improvements: string[];\n  detailedFeedback: string;\n  createdAt: Date;\n  _partitionKey?: string;\n}\n\nexport interface ResumeDocument {\n  id: string;\n  userId: string;\n  fileName: string;\n  fileUrl: string;\n  filePath?: string;\n  blobName?: string;\n  sasUrl?: string;\n  extractedData: {\n    personalInfo?: any;\n    summary?: string;\n    skills: string[];\n    experience: any[];\n    education: any[];\n    projects?: any[];\n    certifications?: any[];\n    languages?: string[];\n  };\n  interviewQuestions: string[];\n  metadata: {\n    fileSize: number;\n    uploadDate: Date;\n    lastModified: Date;\n    mimeType: string;\n    storageProvider: 'azure' | 'firebase';\n  };\n  _partitionKey?: string;\n}\n\nexport interface UsageDocument {\n  id: string;\n  userId: string;\n  interviews: {\n    count: number;\n    limit: number;\n    lastReset?: Date;\n  };\n  resumes: {\n    count: number;\n    limit: number;\n    lastReset?: Date;\n  };\n  updatedAt: Date;\n  _partitionKey?: string;\n}\n\nexport interface JobListingDocument {\n  id: string;\n  company: string;\n  position: string;\n  location?: string;\n  requirements?: string[];\n  isActive: boolean;\n  discoveredBy: string[];\n  postedDate: Date;\n  _partitionKey?: string;\n}\n\nexport interface ApplicationDocument {\n  id: string;\n  userId: string;\n  jobId: string;\n  status: string;\n  appliedAt: Date;\n  coverLetter?: string;\n  tailoredResume?: string;\n  relevancyScore?: number;\n  applicationMethod?: 'headless_automation' | 'manual_required' | 'api_integration';\n  portal?: string;\n  jobTitle?: string;\n  company?: string;\n  jobUrl?: string;\n  reason?: string;\n  automationDetails?: {\n    duration?: number;\n    attempts?: number;\n    formData?: Record<string, any>;\n    screenshotPath?: string;\n    portalType?: string;\n    screeningAnswers?: Record<string, any>;\n    resumeUploaded?: boolean;\n  };\n  createdAt?: Date;\n  updatedAt?: Date;\n  _partitionKey?: string;\n}\n\nexport interface AutoApplySettingsDocument {\n  id: string;\n  userId: string;\n  preferences: any;\n  isActive: boolean;\n  updatedAt: Date;\n  _partitionKey?: string;\n}\n\nexport interface AutomationLogDocument {\n  id: string;\n  userId: string;\n  action: string;\n  status: string;\n  timestamp: Date;\n  details?: any;\n  _partitionKey?: string;\n}\n\nexport interface SubscriptionEventDocument {\n  id: string;\n  userId?: string;\n  eventType: string;\n  data: any;\n  processed: boolean;\n  timestamp: Date;\n  _partitionKey?: string;\n}\n\nexport interface DataDeletionRequestDocument {\n  id: string;\n  userId: string;\n  requestedBy: string;\n  requestDate: Date;\n  status: 'pending' | 'processing' | 'completed' | 'failed';\n  reason?: string;\n  deletedData?: string[];\n  _partitionKey?: string;\n}\n\nexport interface DataProtectionAuditLogDocument {\n  id: string;\n  userId: string;\n  action: string;\n  timestamp: Date;\n  details?: any;\n  _partitionKey?: string;\n}\n\nexport interface NotificationEventDocument {\n  id: string;\n  userId: string;\n  type: string;\n  channel: string;\n  recipient: string;\n  subject: string;\n  content: string;\n  templateUsed?: string;\n  metadata?: any;\n  status: string;\n  createdAt: Date;\n  sentAt?: Date;\n  updatedAt?: Date;\n  error?: string;\n  messageId?: string;\n  jobId?: string;\n  applicationId?: string;\n  _partitionKey?: string;\n}\n\nexport interface ErrorEventDocument {\n  id: string;\n  featureName: string;\n  errorType: string;\n  errorMessage: string;\n  userId?: string;\n  userAgent?: string;\n  timestamp: Date;\n  severity: string;\n  metadata?: any;\n  _partitionKey?: string;\n}\n\nexport interface ErrorBudgetDocument {\n  id: string;\n  featureName: string;\n  breachedAt: Date;\n  errorCount: number;\n  threshold: number;\n  timeWindow: number;\n  action: string;\n  _partitionKey?: string;\n}\n\nexport interface EmailVerificationDocument {\n  id: string;\n  userId: string;\n  email: string;\n  code: string;\n  type: string;\n  expiresAt: Date;\n  verified: boolean;\n  attempts: number;\n  createdAt: Date;\n  verifiedAt?: Date;\n  _partitionKey?: string;\n}\n\nexport interface ProfileDocument {\n  id: string;\n  userId: string;\n  name?: string;\n  email?: string;\n  about?: string;\n  phone?: string;\n  workplace?: string;\n  skills?: string[];\n  experience?: string;\n  dateOfBirth?: string;\n  image?: string;\n  createdAt?: Date;\n  updatedAt: Date;\n  _partitionKey?: string;\n}\n\nclass AzureCosmosService {\n  private client: CosmosClient | null = null;\n  private database: Database | null = null;\n  private containers: Map<string, Container> = new Map();\n  private initialized = false;\n\n  constructor() {\n    // Client initialization is now deferred to initialize() method\n    // to use the unified environment loader\n  }\n\n  async initialize(): Promise<void> {\n    if (this.initialized) return;\n\n    try {\n      // Load Cosmos DB configuration from unified environment loader\n      const cosmosConfig = await getCosmosDbConfig();\n      \n      if (!cosmosConfig.connectionString) {\n        throw new Error('Cosmos DB connection string not available in configuration');\n      }\n      \n      // Initialize Cosmos client with configuration\n      this.client = new CosmosClient(cosmosConfig.connectionString);\n      \n      // Create or get database\n      const { database } = await this.client.databases.createIfNotExists({\n        id: cosmosConfig.database\n      });\n      \n      this.database = database;\n\n      // Define containers with their partition keys\n      const containerDefinitions = [\n        { id: 'users', partitionKey: '/userId' },\n        { id: 'interviews', partitionKey: '/userId' },\n        { id: 'feedback', partitionKey: '/userId' },\n        { id: 'resumes', partitionKey: '/userId' },\n        { id: 'usage', partitionKey: '/userId' },\n        { id: 'jobListings', partitionKey: '/id' },\n        { id: 'applications', partitionKey: '/userId' },\n        { id: 'autoApplySettings', partitionKey: '/userId' },\n        { id: 'automationLogs', partitionKey: '/userId' },\n        { id: 'subscriptionEvents', partitionKey: '/id' },\n        { id: 'dataDeletionRequests', partitionKey: '/userId' },\n        { id: 'dataProtectionAuditLog', partitionKey: '/userId' },\n        { id: 'notificationEvents', partitionKey: '/userId' },\n        { id: 'featureErrors', partitionKey: '/featureName' },\n        { id: 'errorBudgets', partitionKey: '/featureName' },\n        { id: 'emailVerifications', partitionKey: '/userId' },\n        { id: 'profiles', partitionKey: '/userId' }\n      ];\n\n      // Create containers\n      if (!this.database) {\n        throw new Error('Database initialization failed');\n      }\n      \n      for (const containerDef of containerDefinitions) {\n        const { container } = await this.database.containers.createIfNotExists({\n          id: containerDef.id,\n          partitionKey: containerDef.partitionKey\n        });\n        this.containers.set(containerDef.id, container);\n      }\n\n      this.initialized = true;\n      console.log('✅ Azure Cosmos DB service initialized');\n    } catch (error) {\n      console.error('❌ Failed to initialize Azure Cosmos DB:', error);\n      throw error;\n    }\n  }\n\n  private getContainer(containerName: string): Container {\n    const container = this.containers.get(containerName);\n    if (!container) {\n      throw new Error(`Container ${containerName} not found. Make sure initialize() was called.`);\n    }\n    return container;\n  }\n\n  // Users operations\n  async createUser(userData: Omit<UserDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('users');\n    \n    const document: UserDocument = {\n      id: userData.userId,\n      ...userData,\n      _partitionKey: userData.userId\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async getUser(userId: string): Promise<UserDocument | null> {\n    await this.initialize();\n    const container = this.getContainer('users');\n    \n    try {\n      const { resource } = await container.item(userId, userId).read<UserDocument>();\n      return resource || null;\n    } catch (error: any) {\n      if (error.code === 404) return null;\n      throw error;\n    }\n  }\n\n  async updateUser(userId: string, updates: Partial<UserDocument>): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('users');\n    \n    const { resource: existing } = await container.item(userId, userId).read<UserDocument>();\n    if (!existing) throw new Error('User not found');\n    \n    const updated = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n      _partitionKey: userId\n    };\n    \n    await container.item(userId, userId).replace(updated);\n  }\n\n  // Interviews operations\n  async createInterview(interviewData: Omit<InterviewDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('interviews');\n    \n    const id = `interview_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: InterviewDocument = {\n      id,\n      ...interviewData,\n      _partitionKey: interviewData.userId\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async getInterview(interviewId: string, userId: string): Promise<InterviewDocument | null> {\n    await this.initialize();\n    const container = this.getContainer('interviews');\n    \n    try {\n      const { resource } = await container.item(interviewId, userId).read<InterviewDocument>();\n      return resource || null;\n    } catch (error: any) {\n      if (error.code === 404) return null;\n      throw error;\n    }\n  }\n\n  async getUserInterviews(userId: string): Promise<InterviewDocument[]> {\n    await this.initialize();\n    const container = this.getContainer('interviews');\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.userId = @userId ORDER BY c.createdAt DESC',\n      parameters: [{ name: '@userId', value: userId }]\n    };\n    \n    const { resources } = await container.items.query<InterviewDocument>(querySpec).fetchAll();\n    return resources;\n  }\n\n  async getPublicInterviews(userId: string, limit: number = 20): Promise<InterviewDocument[]> {\n    await this.initialize();\n    const container = this.getContainer('interviews');\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.userId = @userId AND c.finalized = true ORDER BY c.createdAt DESC OFFSET 0 LIMIT @limit',\n      parameters: [\n        { name: '@userId', value: userId },\n        { name: '@limit', value: limit }\n      ]\n    };\n    \n    const { resources } = await container.items.query<InterviewDocument>(querySpec).fetchAll();\n    return resources;\n  }\n\n  async getPublicInterviewsExcludingUser(excludeUserId: string, limit: number = 20): Promise<InterviewDocument[]> {\n    await this.initialize();\n    const container = this.getContainer('interviews');\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.finalized = true AND c.userId != @excludeUserId ORDER BY c.createdAt DESC OFFSET 0 LIMIT @limit',\n      parameters: [\n        { name: '@excludeUserId', value: excludeUserId },\n        { name: '@limit', value: limit }\n      ]\n    };\n    \n    const { resources } = await container.items.query<InterviewDocument>(querySpec).fetchAll();\n    return resources;\n  }\n\n  async updateInterview(interviewId: string, userId: string, updates: Partial<InterviewDocument>): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('interviews');\n    \n    const { resource: existing } = await container.item(interviewId, userId).read<InterviewDocument>();\n    if (!existing) throw new Error('Interview not found');\n    \n    const updated = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n      _partitionKey: userId\n    };\n    \n    await container.item(interviewId, userId).replace(updated);\n  }\n\n  async deleteInterview(interviewId: string, userId: string): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('interviews');\n    await container.item(interviewId, userId).delete();\n  }\n\n  // Feedback operations\n  async createFeedback(feedbackData: Omit<FeedbackDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('feedback');\n    \n    const id = `feedback_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: FeedbackDocument = {\n      id,\n      ...feedbackData,\n      _partitionKey: feedbackData.userId\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async getFeedbackByInterview(interviewId: string, userId: string): Promise<FeedbackDocument | null> {\n    await this.initialize();\n    const container = this.getContainer('feedback');\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.interviewId = @interviewId AND c.userId = @userId',\n      parameters: [\n        { name: '@interviewId', value: interviewId },\n        { name: '@userId', value: userId }\n      ]\n    };\n    \n    const { resources } = await container.items.query<FeedbackDocument>(querySpec).fetchAll();\n    return resources[0] || null;\n  }\n\n  // Resume operations\n  async saveResume(resumeData: Omit<ResumeDocument, '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('resumes');\n    \n    const document: ResumeDocument = {\n      ...resumeData,\n      _partitionKey: resumeData.userId\n    };\n    \n    const { resource } = await container.items.upsert(document);\n    return resource!.id;\n  }\n\n  async getUserResume(userId: string): Promise<ResumeDocument | null> {\n    await this.initialize();\n    const container = this.getContainer('resumes');\n    \n    try {\n      const { resource } = await container.item(userId, userId).read<ResumeDocument>();\n      return resource || null;\n    } catch (error: any) {\n      if (error.code === 404) return null;\n      throw error;\n    }\n  }\n\n  async deleteUserResume(userId: string): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('resumes');\n    \n    try {\n      await container.item(userId, userId).delete();\n    } catch (error: any) {\n      if (error.code === 404) return; // Already deleted\n      throw error;\n    }\n  }\n\n  // Usage operations\n  async getUserUsage(userId: string): Promise<UsageDocument | null> {\n    await this.initialize();\n    const container = this.getContainer('usage');\n    \n    try {\n      const { resource } = await container.item(userId, userId).read<UsageDocument>();\n      return resource || null;\n    } catch (error: any) {\n      if (error.code === 404) return null;\n      throw error;\n    }\n  }\n\n  async initializeUserUsage(userId: string): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('usage');\n    \n    const usageData: UsageDocument = {\n      id: userId,\n      userId,\n      interviews: { count: 0, limit: 3 },\n      resumes: { count: 0, limit: 2 },\n      updatedAt: new Date(),\n      _partitionKey: userId\n    };\n    \n    await container.items.upsert(usageData);\n  }\n\n  async incrementUsage(userId: string, type: 'interviews' | 'resumes'): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('usage');\n    \n    const { resource: existing } = await container.item(userId, userId).read<UsageDocument>();\n    if (!existing) {\n      await this.initializeUserUsage(userId);\n      return this.incrementUsage(userId, type);\n    }\n    \n    const updated = {\n      ...existing,\n      [type]: {\n        ...existing[type],\n        count: existing[type].count + 1\n      },\n      updatedAt: new Date(),\n      _partitionKey: userId\n    };\n    \n    await container.item(userId, userId).replace(updated);\n  }\n\n  async checkUsageLimit(userId: string, type: 'interviews' | 'resumes'): Promise<boolean> {\n    const usage = await this.getUserUsage(userId);\n    \n    if (!usage) {\n      await this.initializeUserUsage(userId);\n      return true;\n    }\n    \n    return usage[type].count < usage[type].limit;\n  }\n\n  // Job-related operations\n  async createJobListing(jobData: Omit<JobListingDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('jobListings');\n    \n    const id = `job_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: JobListingDocument = {\n      id,\n      ...jobData,\n      _partitionKey: id\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async getActiveJobListings(userId: string): Promise<JobListingDocument[]> {\n    await this.initialize();\n    const container = this.getContainer('jobListings');\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.isActive = true AND (ARRAY_CONTAINS(c.discoveredBy, @userId) OR ARRAY_LENGTH(c.discoveredBy) = 0) ORDER BY c.postedDate DESC',\n      parameters: [{ name: '@userId', value: userId }]\n    };\n    \n    const { resources } = await container.items.query<JobListingDocument>(querySpec).fetchAll();\n    return resources;\n  }\n\n  // Applications operations\n  async createApplication(applicationData: Omit<ApplicationDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('applications');\n    \n    const id = `app_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: ApplicationDocument = {\n      id,\n      ...applicationData,\n      _partitionKey: applicationData.userId\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async getUserApplications(userId: string): Promise<ApplicationDocument[]> {\n    await this.initialize();\n    const container = this.getContainer('applications');\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.userId = @userId ORDER BY c.appliedAt DESC',\n      parameters: [{ name: '@userId', value: userId }]\n    };\n    \n    const { resources } = await container.items.query<ApplicationDocument>(querySpec).fetchAll();\n    return resources;\n  }\n\n  // GDPR operations\n  async createDataDeletionRequest(requestData: Omit<DataDeletionRequestDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('dataDeletionRequests');\n    \n    const id = `del_req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: DataDeletionRequestDocument = {\n      id,\n      ...requestData,\n      _partitionKey: requestData.userId\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async deleteAllUserData(userId: string): Promise<string[]> {\n    await this.initialize();\n    const deletedCollections: string[] = [];\n    \n    const collections = [\n      'users', 'interviews', 'feedback', 'resumes', 'usage', \n      'applications', 'autoApplySettings', 'automationLogs', 'dataDeletionRequests'\n    ];\n    \n    for (const collectionName of collections) {\n      try {\n        const container = this.getContainer(collectionName);\n        \n        if (collectionName === 'users' || collectionName === 'resumes' || collectionName === 'usage') {\n          // These use userId as document ID\n          try {\n            await container.item(userId, userId).delete();\n            deletedCollections.push(collectionName);\n          } catch (error: any) {\n            if (error.code !== 404) throw error;\n          }\n        } else {\n          // Query and delete all documents for this user\n          const querySpec = {\n            query: 'SELECT c.id FROM c WHERE c.userId = @userId',\n            parameters: [{ name: '@userId', value: userId }]\n          };\n          \n          const { resources } = await container.items.query(querySpec).fetchAll();\n          \n          if (resources.length > 0) {\n            for (const item of resources) {\n              await container.item(item.id, userId).delete();\n            }\n            deletedCollections.push(collectionName);\n          }\n        }\n      } catch (error) {\n        console.error(`Error deleting from ${collectionName}:`, error);\n      }\n    }\n    \n    return deletedCollections;\n  }\n\n  // Notification Events operations\n  async createNotificationEvent(eventData: Omit<NotificationEventDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('notificationEvents');\n    \n    const id = `notify_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: NotificationEventDocument = {\n      id,\n      ...eventData,\n      _partitionKey: eventData.userId\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async updateNotificationEvent(eventId: string, userId: string, updates: Partial<NotificationEventDocument>): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('notificationEvents');\n    \n    const { resource: existing } = await container.item(eventId, userId).read<NotificationEventDocument>();\n    if (!existing) throw new Error('Notification event not found');\n    \n    const updated = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n      _partitionKey: userId\n    };\n    \n    await container.item(eventId, userId).replace(updated);\n  }\n\n  async getUserNotificationEvents(userId: string, limit: number = 50): Promise<NotificationEventDocument[]> {\n    await this.initialize();\n    const container = this.getContainer('notificationEvents');\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.userId = @userId ORDER BY c.createdAt DESC OFFSET 0 LIMIT @limit',\n      parameters: [\n        { name: '@userId', value: userId },\n        { name: '@limit', value: limit }\n      ]\n    };\n    \n    const { resources } = await container.items.query<NotificationEventDocument>(querySpec).fetchAll();\n    return resources;\n  }\n\n  // Error Events operations for monitoring\n  async createErrorEvent(errorData: Omit<ErrorEventDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('featureErrors');\n    \n    const id = `error_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: ErrorEventDocument = {\n      id,\n      ...errorData,\n      _partitionKey: errorData.featureName\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async getErrorEvents(featureName: string, timeWindowMinutes: number, limit: number = 100): Promise<ErrorEventDocument[]> {\n    await this.initialize();\n    const container = this.getContainer('featureErrors');\n    \n    const cutoffTime = new Date(Date.now() - timeWindowMinutes * 60 * 1000);\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.featureName = @featureName AND c.timestamp >= @cutoffTime ORDER BY c.timestamp DESC OFFSET 0 LIMIT @limit',\n      parameters: [\n        { name: '@featureName', value: featureName },\n        { name: '@cutoffTime', value: cutoffTime },\n        { name: '@limit', value: limit }\n      ]\n    };\n    \n    const { resources } = await container.items.query<ErrorEventDocument>(querySpec).fetchAll();\n    return resources;\n  }\n\n  async getErrorEventCount(featureName: string, timeWindowMinutes: number): Promise<number> {\n    await this.initialize();\n    const container = this.getContainer('featureErrors');\n    \n    const cutoffTime = new Date(Date.now() - timeWindowMinutes * 60 * 1000);\n    \n    const querySpec = {\n      query: 'SELECT VALUE COUNT(1) FROM c WHERE c.featureName = @featureName AND c.timestamp >= @cutoffTime',\n      parameters: [\n        { name: '@featureName', value: featureName },\n        { name: '@cutoffTime', value: cutoffTime }\n      ]\n    };\n    \n    const { resources } = await container.items.query<number>(querySpec).fetchAll();\n    return resources[0] || 0;\n  }\n\n  // Error Budget operations\n  async createErrorBudget(budgetData: Omit<ErrorBudgetDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('errorBudgets');\n    \n    const id = `budget_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: ErrorBudgetDocument = {\n      id,\n      ...budgetData,\n      _partitionKey: budgetData.featureName\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  // Email Verification operations\n  async createEmailVerification(verificationData: Omit<EmailVerificationDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('emailVerifications');\n    \n    const id = `verify_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: EmailVerificationDocument = {\n      id,\n      ...verificationData,\n      _partitionKey: verificationData.userId\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async getEmailVerification(userId: string, email: string, type: string): Promise<EmailVerificationDocument | null> {\n    await this.initialize();\n    const container = this.getContainer('emailVerifications');\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.userId = @userId AND c.email = @email AND c.type = @type AND c.verified = false ORDER BY c.createdAt DESC',\n      parameters: [\n        { name: '@userId', value: userId },\n        { name: '@email', value: email },\n        { name: '@type', value: type }\n      ]\n    };\n    \n    const { resources } = await container.items.query<EmailVerificationDocument>(querySpec).fetchAll();\n    return resources[0] || null;\n  }\n\n  async updateEmailVerification(verificationId: string, userId: string, updates: Partial<EmailVerificationDocument>): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('emailVerifications');\n    \n    const { resource: existing } = await container.item(verificationId, userId).read<EmailVerificationDocument>();\n    if (!existing) throw new Error('Email verification not found');\n    \n    const updated = {\n      ...existing,\n      ...updates,\n      _partitionKey: userId\n    };\n    \n    await container.item(verificationId, userId).replace(updated);\n  }\n\n  // Profile operations (for Firestore profiles collection)\n  async saveProfile(profileData: Omit<ProfileDocument, '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('profiles');\n    \n    const document: ProfileDocument = {\n      ...profileData,\n      _partitionKey: profileData.userId\n    };\n    \n    const { resource } = await container.items.upsert(document);\n    return resource!.id;\n  }\n\n  async getProfile(userId: string): Promise<ProfileDocument | null> {\n    await this.initialize();\n    const container = this.getContainer('profiles');\n    \n    try {\n      const { resource } = await container.item(userId, userId).read<ProfileDocument>();\n      return resource || null;\n    } catch (error: any) {\n      if (error.code === 404) return null;\n      throw error;\n    }\n  }\n\n  async updateProfile(userId: string, updates: Partial<ProfileDocument>): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('profiles');\n    \n    const { resource: existing } = await container.item(userId, userId).read<ProfileDocument>();\n    if (!existing) {\n      // Create new profile if doesn't exist\n      const newProfile: ProfileDocument = {\n        id: userId,\n        userId,\n        ...updates,\n        updatedAt: new Date(),\n        _partitionKey: userId\n      };\n      await container.items.create(newProfile);\n    } else {\n      const updated = {\n        ...existing,\n        ...updates,\n        updatedAt: new Date(),\n        _partitionKey: userId\n      };\n      await container.item(userId, userId).replace(updated);\n    }\n  }\n\n  // Generic query operations for complex Firestore-like queries\n  async queryDocuments<T>(\n    containerName: string,\n    query: string,\n    parameters: Array<{ name: string; value: any }>,\n    partitionKey?: string\n  ): Promise<T[]> {\n    await this.initialize();\n    const container = this.getContainer(containerName);\n    \n    const querySpec = { query, parameters };\n    const queryOptions = partitionKey ? { partitionKey } : {};\n    \n    const { resources } = await container.items\n      .query<T>(querySpec, queryOptions)\n      .fetchAll();\n    \n    return resources;\n  }\n\n  // Generic document operations\n  async createDocument<T extends { _partitionKey?: string }>(containerName: string, document: T): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer(containerName);\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async getDocument<T = any>(containerName: string, documentId: string, partitionKey: string): Promise<T | null> {\n    await this.initialize();\n    const container = this.getContainer(containerName);\n    \n    try {\n      const { resource } = await container.item(documentId, partitionKey).read();\n      return (resource as T) || null;\n    } catch (error: any) {\n      if (error.code === 404) return null;\n      throw error;\n    }\n  }\n\n  async updateDocument<T = any>(containerName: string, documentId: string, partitionKey: string, updates: Partial<T>): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer(containerName);\n    \n    const { resource: existing } = await container.item(documentId, partitionKey).read();\n    if (!existing) throw new Error('Document not found');\n    \n    const updated = {\n      ...existing,\n      ...updates\n    };\n    \n    await container.item(documentId, partitionKey).replace(updated);\n  }\n\n  async deleteDocument(containerName: string, documentId: string, partitionKey: string): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer(containerName);\n    \n    try {\n      await container.item(documentId, partitionKey).delete();\n    } catch (error: any) {\n      if (error.code !== 404) throw error;\n      // Document already deleted, ignore 404\n    }\n  }\n\n  // Batch operations for efficiency\n  async batchCreate<T extends { id: string; _partitionKey?: string }>(\n    containerName: string, \n    documents: T[]\n  ): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer(containerName);\n    \n    // Process in smaller batches to avoid limits\n    const batchSize = 25;\n    for (let i = 0; i < documents.length; i += batchSize) {\n      const batch = documents.slice(i, i + batchSize);\n      await Promise.all(batch.map(doc => container.items.create(doc)));\n    }\n  }\n\n  async batchDelete(containerName: string, documentIds: Array<{ id: string; partitionKey: string }>): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer(containerName);\n    \n    // Process in smaller batches\n    const batchSize = 25;\n    for (let i = 0; i < documentIds.length; i += batchSize) {\n      const batch = documentIds.slice(i, i + batchSize);\n      await Promise.all(batch.map(({ id, partitionKey }) => \n        container.item(id, partitionKey).delete().catch(err => {\n          if (err.code !== 404) throw err;\n          // Ignore 404s for already deleted documents\n        })\n      ));\n    }\n  }\n\n  // Health check\n  async healthCheck(): Promise<{ status: 'healthy' | 'unhealthy'; timestamp: Date }> {\n    try {\n      await this.initialize();\n      const container = this.getContainer('users');\n      \n      // Simple read operation to test connectivity\n      const querySpec = { query: 'SELECT VALUE COUNT(1) FROM c', parameters: [] };\n      await container.items.query(querySpec).fetchAll();\n      \n      return { status: 'healthy', timestamp: new Date() };\n    } catch (error) {\n      console.error('Azure Cosmos DB health check failed:', error);\n      return { status: 'unhealthy', timestamp: new Date() };\n    }\n  }\n}\n\n// Export singleton instance\nexport const azureCosmosService = new AzureCosmosService();\nexport default azureCosmosService;\n"],"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","ignoreList":[]}