{"version":3,"names":["cov_1p5u1l0aza","actualCoverage","QueueServiceClient","s","require","DefaultAzureCredential","QueueService","constructor","f","queueServiceClient","queues","SEARCH_JOBS","PROCESS_APPLICATIONS","FOLLOW_UP_REMINDERS","AUTOMATION_LOGS","initialize","b","connectionString","process","env","AzureWebJobsStorage","Error","fromConnectionString","queueName","Object","values","queueClient","getQueueClient","createIfNotExists","console","log","error","addMessage","message","options","messageText","JSON","stringify","base64Message","Buffer","from","toString","sendMessage","visibilityTimeoutInSeconds","visibilityTimeout","messageTimeToLiveInSeconds","timeToLive","receiveMessages","response","numberOfMessages","receivedMessageItems","map","item","id","messageId","popReceipt","dequeueCount","data","parse","insertionTime","expirationTime","timeNextVisible","deleteMessage","updateMessage","getQueueLength","properties","getProperties","approximateMessagesCount","module","exports"],"sources":["queue-service.js"],"sourcesContent":["const { QueueServiceClient } = require('@azure/storage-queue');\nconst { DefaultAzureCredential } = require('@azure/identity');\n\nclass QueueService {\n    constructor() {\n        this.queueServiceClient = null;\n        this.queues = {\n            SEARCH_JOBS: 'search-jobs',\n            PROCESS_APPLICATIONS: 'process-applications',\n            FOLLOW_UP_REMINDERS: 'follow-up-reminders',\n            AUTOMATION_LOGS: 'automation-logs'\n        };\n    }\n\n    async initialize() {\n        if (this.queueServiceClient) {\n            return;\n        }\n\n        const connectionString = process.env.AzureWebJobsStorage;\n        if (!connectionString) {\n            throw new Error('AzureWebJobsStorage connection string is required');\n        }\n\n        this.queueServiceClient = QueueServiceClient.fromConnectionString(connectionString);\n\n        // Create queues if they don't exist\n        for (const queueName of Object.values(this.queues)) {\n            try {\n                const queueClient = this.queueServiceClient.getQueueClient(queueName);\n                await queueClient.createIfNotExists();\n                console.log(`Queue ${queueName} is ready`);\n            } catch (error) {\n                console.error(`Error creating queue ${queueName}:`, error);\n            }\n        }\n    }\n\n    async addMessage(queueName, message, options = {}) {\n        if (!this.queueServiceClient) {\n            await this.initialize();\n        }\n\n        const queueClient = this.queueServiceClient.getQueueClient(queueName);\n        const messageText = typeof message === 'string' ? message : JSON.stringify(message);\n        \n        const base64Message = Buffer.from(messageText).toString('base64');\n        \n        return await queueClient.sendMessage(base64Message, {\n            visibilityTimeoutInSeconds: options.visibilityTimeout || 0,\n            messageTimeToLiveInSeconds: options.timeToLive || 604800 // 7 days default\n        });\n    }\n\n    async receiveMessages(queueName, options = {}) {\n        if (!this.queueServiceClient) {\n            await this.initialize();\n        }\n\n        const queueClient = this.queueServiceClient.getQueueClient(queueName);\n        const response = await queueClient.receiveMessages({\n            numberOfMessages: options.numberOfMessages || 1,\n            visibilityTimeoutInSeconds: options.visibilityTimeout || 30\n        });\n\n        return response.receivedMessageItems.map(item => ({\n            id: item.messageId,\n            popReceipt: item.popReceipt,\n            dequeueCount: item.dequeueCount,\n            data: JSON.parse(Buffer.from(item.messageText, 'base64').toString()),\n            insertionTime: item.insertionTime,\n            expirationTime: item.expirationTime,\n            timeNextVisible: item.timeNextVisible\n        }));\n    }\n\n    async deleteMessage(queueName, messageId, popReceipt) {\n        if (!this.queueServiceClient) {\n            await this.initialize();\n        }\n\n        const queueClient = this.queueServiceClient.getQueueClient(queueName);\n        return await queueClient.deleteMessage(messageId, popReceipt);\n    }\n\n    async updateMessage(queueName, messageId, popReceipt, message, visibilityTimeout = 0) {\n        if (!this.queueServiceClient) {\n            await this.initialize();\n        }\n\n        const queueClient = this.queueServiceClient.getQueueClient(queueName);\n        const messageText = typeof message === 'string' ? message : JSON.stringify(message);\n        const base64Message = Buffer.from(messageText).toString('base64');\n        \n        return await queueClient.updateMessage(messageId, popReceipt, base64Message, visibilityTimeout);\n    }\n\n    async getQueueLength(queueName) {\n        if (!this.queueServiceClient) {\n            await this.initialize();\n        }\n\n        const queueClient = this.queueServiceClient.getQueueClient(queueName);\n        const properties = await queueClient.getProperties();\n        return properties.approximateMessagesCount;\n    }\n}\n\nmodule.exports = new QueueService();\n"],"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","ignoreList":[]}