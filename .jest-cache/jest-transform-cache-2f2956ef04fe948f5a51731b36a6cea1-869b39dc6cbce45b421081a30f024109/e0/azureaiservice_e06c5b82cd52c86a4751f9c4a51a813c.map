{"version":3,"names":["cov_1i0a9ol08h","actualCoverage","s","identity_1","require","core_auth_1","ai_form_recognizer_1","openai_1","errors_1","AzureAIService","constructor","f","openAIClient","formRecognizerClient","initialized","openAIEndpoint","b","process","env","AZURE_OPENAI_ENDPOINT","openAIApiKey","AZURE_OPENAI_API_KEY","formRecognizerEndpoint","AZURE_FORM_RECOGNIZER_ENDPOINT","formRecognizerApiKey","AZURE_FORM_RECOGNIZER_API_KEY","initialize","AzureOpenAI","endpoint","apiKey","console","log","DocumentAnalysisClient","AzureKeyCredential","DefaultAzureCredential","error","logServerError","service","action","extractResumeData","fileBuffer","mimeType","Error","poller","beginAnalyzeDocument","result","pollUntilDone","extractedText","content","structuredData","structureResumeData","extractResumeDataWithOpenAI","basicData","personalInfo","skills","experience","education","projects","certifications","languages","deploymentName","AZURE_OPENAI_DEPLOYMENT_NAME","prompt","chat","completions","create","model","messages","role","temperature","max_tokens","response","_b","_a","choices","message","JSON","parse","generateInterviewQuestions","resumeData","options","maxQuestions","difficulty","resumeContext","buildResumeContext","jobContext","jobTitle","company","jobDescription","questions","length","generateInterviewFeedback","answers","qaContent","map","q","i","join","interviewType","feedback","generateCoverLetter","parts","name","push","summary","expText","exp","position","startDate","endDate","description","eduText","edu","degree","field","institution","projText","proj","healthCheck","status","openAI","formRecognizer","isHealthy","timestamp","Date","details","exports","azureAIService","default"],"sources":["/Users/dikshantvashistha/PrepBettr/lib/services/azure-ai-service.ts"],"sourcesContent":["import { DefaultAzureCredential } from '@azure/identity';\nimport { AzureKeyCredential } from '@azure/core-auth';\nimport { DocumentAnalysisClient } from '@azure/ai-form-recognizer';\nimport { OpenAI, AzureOpenAI } from 'openai';\nimport { logServerError } from '@/lib/errors';\n\nexport interface ExtractedResumeData {\n  personalInfo: {\n    name?: string;\n    email?: string;\n    phone?: string;\n    address?: string;\n    linkedin?: string;\n    github?: string;\n  };\n  summary?: string;\n  skills: string[];\n  experience: WorkExperience[];\n  education: Education[];\n  projects: Project[];\n  certifications: Certification[];\n  languages: string[];\n}\n\nexport interface WorkExperience {\n  company: string;\n  position: string;\n  startDate?: string;\n  endDate?: string;\n  isCurrent?: boolean;\n  description: string;\n  achievements?: string[];\n  technologies?: string[];\n}\n\nexport interface Education {\n  institution: string;\n  degree: string;\n  field: string;\n  startDate?: string;\n  endDate?: string;\n  gpa?: number;\n  description?: string;\n}\n\nexport interface Project {\n  name: string;\n  description: string;\n  technologies?: string[];\n  url?: string;\n  github?: string;\n  startDate?: string;\n  endDate?: string;\n}\n\nexport interface Certification {\n  name: string;\n  issuer: string;\n  date?: string;\n  expiryDate?: string;\n  credentialId?: string;\n  url?: string;\n}\n\nexport interface InterviewQuestionGenerationOptions {\n  jobTitle?: string;\n  company?: string;\n  jobDescription?: string;\n  maxQuestions?: number;\n  difficulty?: 'easy' | 'medium' | 'hard' | 'mixed';\n  categories?: string[];\n}\n\nexport interface FeedbackGenerationOptions {\n  jobTitle?: string;\n  company?: string;\n  interviewType?: string;\n}\n\nexport interface GeneratedFeedback {\n  overallScore: number;\n  strengths: string[];\n  improvements: string[];\n  detailedFeedback: string;\n  categoryScores: {\n    technical: number;\n    communication: number;\n    problemSolving: number;\n    experience: number;\n  };\n}\n\nclass AzureAIService {\n  private openAIClient: AzureOpenAI | null = null;\n  private formRecognizerClient: DocumentAnalysisClient | null = null;\n  private initialized = false;\n  private openAIEndpoint: string;\n  private openAIApiKey: string;\n  private formRecognizerEndpoint: string;\n  private formRecognizerApiKey: string;\n\n  constructor() {\n    this.openAIEndpoint = process.env.AZURE_OPENAI_ENDPOINT || '';\n    this.openAIApiKey = process.env.AZURE_OPENAI_API_KEY || '';\n    this.formRecognizerEndpoint = process.env.AZURE_FORM_RECOGNIZER_ENDPOINT || '';\n    this.formRecognizerApiKey = process.env.AZURE_FORM_RECOGNIZER_API_KEY || '';\n  }\n\n  async initialize(): Promise<void> {\n    if (this.initialized) return;\n\n    try {\n      // Initialize Azure OpenAI\n      if (this.openAIEndpoint && this.openAIApiKey) {\n        this.openAIClient = new AzureOpenAI({\n          endpoint: this.openAIEndpoint,\n          apiKey: this.openAIApiKey,\n        });\n        console.log('‚úÖ Azure OpenAI client initialized');\n      }\n\n      // Initialize Azure Form Recognizer\n      if (this.formRecognizerEndpoint && this.formRecognizerApiKey) {\n        this.formRecognizerClient = new DocumentAnalysisClient(\n          this.formRecognizerEndpoint,\n          new AzureKeyCredential(this.formRecognizerApiKey)\n        );\n        console.log('‚úÖ Azure Form Recognizer client initialized');\n      } else if (this.formRecognizerEndpoint) {\n        // Use managed identity\n        this.formRecognizerClient = new DocumentAnalysisClient(\n          this.formRecognizerEndpoint,\n          new DefaultAzureCredential()\n        );\n        console.log('‚úÖ Azure Form Recognizer client initialized with managed identity');\n      }\n\n      this.initialized = true;\n      console.log('‚úÖ Azure AI service initialized');\n    } catch (error) {\n      console.error('‚ùå Failed to initialize Azure AI service:', error);\n      logServerError(error as Error, { service: 'azure-ai', action: 'initialize' });\n      throw error;\n    }\n  }\n\n  /**\n   * Extract resume data using Azure Form Recognizer\n   */\n  async extractResumeData(fileBuffer: Buffer, mimeType: string): Promise<ExtractedResumeData> {\n    await this.initialize();\n\n    if (!this.formRecognizerClient) {\n      throw new Error('Azure Form Recognizer not configured');\n    }\n\n    try {\n      console.log('üîç Extracting resume data with Azure Form Recognizer...');\n\n      // Use the general document model for resume analysis\n      const poller = await this.formRecognizerClient.beginAnalyzeDocument(\n        'prebuilt-document',\n        fileBuffer\n      );\n      \n      const result = await poller.pollUntilDone();\n\n      // Extract text content\n      const extractedText = result.content || '';\n      \n      // Use OpenAI to structure the extracted text into resume data\n      const structuredData = await this.structureResumeData(extractedText);\n      \n      console.log('‚úÖ Resume data extracted successfully');\n      return structuredData;\n    } catch (error) {\n      console.error('‚ùå Failed to extract resume data:', error);\n      logServerError(error as Error, { service: 'azure-ai', action: 'extract-resume' });\n      \n      // Fallback: try with OpenAI only using text extraction\n      if (this.openAIClient) {\n        return this.extractResumeDataWithOpenAI(fileBuffer);\n      }\n      \n      throw error;\n    }\n  }\n\n  /**\n   * Fallback resume extraction using OpenAI only\n   */\n  private async extractResumeDataWithOpenAI(fileBuffer: Buffer): Promise<ExtractedResumeData> {\n    console.log('üîÑ Falling back to OpenAI-only resume extraction...');\n    \n    // For now, return a basic structure and let the text-based extraction handle it\n    // In a real implementation, you'd need to first extract text from the PDF/DOC\n    const basicData: ExtractedResumeData = {\n      personalInfo: {},\n      skills: [],\n      experience: [],\n      education: [],\n      projects: [],\n      certifications: [],\n      languages: []\n    };\n\n    return basicData;\n  }\n\n  /**\n   * Structure extracted text into resume data using OpenAI\n   */\n  private async structureResumeData(extractedText: string): Promise<ExtractedResumeData> {\n    if (!this.openAIClient) {\n      throw new Error('Azure OpenAI not configured');\n    }\n\n    const deploymentName = process.env.AZURE_OPENAI_DEPLOYMENT_NAME || 'gpt-4';\n\n    const prompt = `\nPlease analyze the following resume text and extract structured information. Return the data as a JSON object with the following structure:\n\n{\n  \"personalInfo\": {\n    \"name\": \"\",\n    \"email\": \"\",\n    \"phone\": \"\",\n    \"address\": \"\",\n    \"linkedin\": \"\",\n    \"github\": \"\"\n  },\n  \"summary\": \"\",\n  \"skills\": [],\n  \"experience\": [\n    {\n      \"company\": \"\",\n      \"position\": \"\",\n      \"startDate\": \"\",\n      \"endDate\": \"\",\n      \"isCurrent\": false,\n      \"description\": \"\",\n      \"achievements\": [],\n      \"technologies\": []\n    }\n  ],\n  \"education\": [\n    {\n      \"institution\": \"\",\n      \"degree\": \"\",\n      \"field\": \"\",\n      \"startDate\": \"\",\n      \"endDate\": \"\",\n      \"gpa\": 0,\n      \"description\": \"\"\n    }\n  ],\n  \"projects\": [\n    {\n      \"name\": \"\",\n      \"description\": \"\",\n      \"technologies\": [],\n      \"url\": \"\",\n      \"github\": \"\",\n      \"startDate\": \"\",\n      \"endDate\": \"\"\n    }\n  ],\n  \"certifications\": [\n    {\n      \"name\": \"\",\n      \"issuer\": \"\",\n      \"date\": \"\",\n      \"expiryDate\": \"\",\n      \"credentialId\": \"\",\n      \"url\": \"\"\n    }\n  ],\n  \"languages\": []\n}\n\nResume text:\n${extractedText}\n\nPlease extract and structure the information accurately. If some information is not available, use empty strings or arrays.\n`;\n\n    try {\n      const result = await this.openAIClient.chat.completions.create({\n        model: deploymentName,\n        messages: [\n          {\n            role: 'system',\n            content: 'You are an expert resume parser. Extract structured data from resume text and return valid JSON only.'\n          },\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        temperature: 0.1,\n        max_tokens: 2000\n      });\n\n      const response = result.choices[0]?.message?.content;\n      if (!response) {\n        throw new Error('No response from OpenAI');\n      }\n\n      // Parse the JSON response\n      const structuredData = JSON.parse(response);\n      return structuredData as ExtractedResumeData;\n    } catch (error) {\n      console.error('Failed to structure resume data with OpenAI:', error);\n      logServerError(error as Error, { service: 'azure-ai', action: 'structure-resume' });\n      throw error;\n    }\n  }\n\n  /**\n   * Generate interview questions based on resume data and job details\n   */\n  async generateInterviewQuestions(\n    resumeData: ExtractedResumeData,\n    options: InterviewQuestionGenerationOptions = {}\n  ): Promise<string[]> {\n    await this.initialize();\n\n    if (!this.openAIClient) {\n      throw new Error('Azure OpenAI not configured');\n    }\n\n    try {\n      console.log('ü§ñ Generating interview questions with Azure OpenAI...');\n\n      const deploymentName = process.env.AZURE_OPENAI_DEPLOYMENT_NAME || 'gpt-4';\n      const maxQuestions = options.maxQuestions || 10;\n      const difficulty = options.difficulty || 'mixed';\n\n      const resumeContext = this.buildResumeContext(resumeData);\n      const jobContext = options.jobTitle || options.company || options.jobDescription \n        ? `Job: ${options.jobTitle} at ${options.company}\\nDescription: ${options.jobDescription}` \n        : '';\n\n      const prompt = `\nBased on the following resume and job information, generate ${maxQuestions} interview questions with ${difficulty} difficulty level.\n\n${resumeContext}\n\n${jobContext}\n\nGenerate questions that:\n1. Test technical skills mentioned in the resume\n2. Explore experience and achievements\n3. Assess problem-solving abilities\n4. Evaluate cultural fit and motivation\n5. Are relevant to the job role (if provided)\n\nReturn only a JSON array of questions as strings, no additional text.\nExample format: [\"Question 1\", \"Question 2\", ...]\n`;\n\n      const result = await this.openAIClient.chat.completions.create({\n        model: deploymentName,\n        messages: [\n          {\n            role: 'system',\n            content: 'You are an expert interviewer. Generate relevant, challenging interview questions based on resume data and job requirements. Return only valid JSON array.'\n          },\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        temperature: 0.7,\n        max_tokens: 1500\n      });\n\n      const response = result.choices[0]?.message?.content;\n      if (!response) {\n        throw new Error('No response from OpenAI');\n      }\n\n      const questions = JSON.parse(response);\n      console.log(`‚úÖ Generated ${questions.length} interview questions`);\n      return questions;\n    } catch (error) {\n      console.error('‚ùå Failed to generate interview questions:', error);\n      logServerError(error as Error, { service: 'azure-ai', action: 'generate-questions' });\n      throw error;\n    }\n  }\n\n  /**\n   * Generate interview feedback based on questions and answers\n   */\n  async generateInterviewFeedback(\n    questions: string[],\n    answers: string[],\n    options: FeedbackGenerationOptions = {}\n  ): Promise<GeneratedFeedback> {\n    await this.initialize();\n\n    if (!this.openAIClient) {\n      throw new Error('Azure OpenAI not configured');\n    }\n\n    try {\n      console.log('üìä Generating interview feedback with Azure OpenAI...');\n\n      const deploymentName = process.env.AZURE_OPENAI_DEPLOYMENT_NAME || 'gpt-4';\n\n      // Combine questions and answers\n      const qaContent = questions.map((q, i) => `Q: ${q}\\nA: ${answers[i] || 'No answer provided'}`).join('\\n\\n');\n\n      const jobContext = options.jobTitle || options.company || options.interviewType\n        ? `Job Context: ${options.jobTitle} at ${options.company} (${options.interviewType})`\n        : '';\n\n      const prompt = `\nAnalyze the following interview questions and answers, then provide comprehensive feedback.\n\n${jobContext}\n\nInterview Content:\n${qaContent}\n\nPlease provide feedback in the following JSON format:\n{\n  \"overallScore\": 0-100,\n  \"strengths\": [\"strength1\", \"strength2\", ...],\n  \"improvements\": [\"improvement1\", \"improvement2\", ...],\n  \"detailedFeedback\": \"Detailed paragraph feedback\",\n  \"categoryScores\": {\n    \"technical\": 0-100,\n    \"communication\": 0-100,\n    \"problemSolving\": 0-100,\n    \"experience\": 0-100\n  }\n}\n\nEvaluate based on:\n- Technical knowledge and accuracy\n- Communication clarity and structure\n- Problem-solving approach\n- Relevant experience demonstration\n- Overall interview performance\n\nProvide constructive, actionable feedback.\n`;\n\n      const result = await this.openAIClient.chat.completions.create({\n        model: deploymentName,\n        messages: [\n          {\n            role: 'system',\n            content: 'You are an expert interview evaluator. Provide comprehensive, constructive feedback on interview performance. Return only valid JSON.'\n          },\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        temperature: 0.3,\n        max_tokens: 2000\n      });\n\n      const response = result.choices[0]?.message?.content;\n      if (!response) {\n        throw new Error('No response from OpenAI');\n      }\n\n      const feedback = JSON.parse(response);\n      console.log('‚úÖ Generated interview feedback successfully');\n      return feedback as GeneratedFeedback;\n    } catch (error) {\n      console.error('‚ùå Failed to generate interview feedback:', error);\n      logServerError(error as Error, { service: 'azure-ai', action: 'generate-feedback' });\n      throw error;\n    }\n  }\n\n  /**\n   * Generate cover letter based on resume and job description\n   */\n  async generateCoverLetter(\n    resumeData: ExtractedResumeData,\n    jobTitle: string,\n    company: string,\n    jobDescription?: string\n  ): Promise<string> {\n    await this.initialize();\n\n    if (!this.openAIClient) {\n      throw new Error('Azure OpenAI not configured');\n    }\n\n    try {\n      console.log('üìù Generating cover letter with Azure OpenAI...');\n\n      const deploymentName = process.env.AZURE_OPENAI_DEPLOYMENT_NAME || 'gpt-4';\n      const resumeContext = this.buildResumeContext(resumeData);\n\n      const prompt = `\nWrite a professional cover letter for the following job application:\n\nPosition: ${jobTitle}\nCompany: ${company}\nJob Description: ${jobDescription || 'Not provided'}\n\nCandidate Information:\n${resumeContext}\n\nWrite a compelling cover letter that:\n1. Opens with enthusiasm for the specific role and company\n2. Highlights relevant experience and achievements from the resume\n3. Demonstrates knowledge of the company/role\n4. Shows how the candidate's skills match the job requirements\n5. Closes with a strong call to action\n\nKeep it professional, concise (3-4 paragraphs), and personalized.\nReturn only the cover letter text, no additional formatting or explanations.\n`;\n\n      const result = await this.openAIClient.chat.completions.create({\n        model: deploymentName,\n        messages: [\n          {\n            role: 'system',\n            content: 'You are an expert career coach and professional writer. Write compelling, personalized cover letters that help candidates stand out.'\n          },\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        temperature: 0.6,\n        max_tokens: 1500\n      });\n\n      const response = result.choices[0]?.message?.content;\n      if (!response) {\n        throw new Error('No response from OpenAI');\n      }\n\n      console.log('‚úÖ Generated cover letter successfully');\n      return response;\n    } catch (error) {\n      console.error('‚ùå Failed to generate cover letter:', error);\n      logServerError(error as Error, { service: 'azure-ai', action: 'generate-cover-letter' });\n      throw error;\n    }\n  }\n\n  /**\n   * Build resume context string for prompts\n   */\n  private buildResumeContext(resumeData: ExtractedResumeData): string {\n    const parts: string[] = [];\n\n    // Personal info\n    if (resumeData.personalInfo.name) {\n      parts.push(`Name: ${resumeData.personalInfo.name}`);\n    }\n\n    // Summary\n    if (resumeData.summary) {\n      parts.push(`Summary: ${resumeData.summary}`);\n    }\n\n    // Skills\n    if (resumeData.skills.length > 0) {\n      parts.push(`Skills: ${resumeData.skills.join(', ')}`);\n    }\n\n    // Experience\n    if (resumeData.experience.length > 0) {\n      const expText = resumeData.experience.map(exp => \n        `${exp.position} at ${exp.company} (${exp.startDate} - ${exp.endDate || 'Present'}): ${exp.description}`\n      ).join('\\n');\n      parts.push(`Experience:\\n${expText}`);\n    }\n\n    // Education\n    if (resumeData.education.length > 0) {\n      const eduText = resumeData.education.map(edu => \n        `${edu.degree} in ${edu.field} from ${edu.institution}`\n      ).join('\\n');\n      parts.push(`Education:\\n${eduText}`);\n    }\n\n    // Projects\n    if (resumeData.projects.length > 0) {\n      const projText = resumeData.projects.map(proj => \n        `${proj.name}: ${proj.description}`\n      ).join('\\n');\n      parts.push(`Projects:\\n${projText}`);\n    }\n\n    return parts.join('\\n\\n');\n  }\n\n  /**\n   * Health check for Azure AI services\n   */\n  async healthCheck(): Promise<{ status: 'healthy' | 'unhealthy'; timestamp: Date; details: any }> {\n    try {\n      await this.initialize();\n      \n      const status = {\n        openAI: !!this.openAIClient,\n        formRecognizer: !!this.formRecognizerClient,\n        initialized: this.initialized\n      };\n\n      // Try a simple OpenAI call if available\n      if (this.openAIClient) {\n        try {\n          const deploymentName = process.env.AZURE_OPENAI_DEPLOYMENT_NAME || 'gpt-4';\n          await this.openAIClient.chat.completions.create({\n            model: deploymentName,\n            messages: [\n              { role: 'user', content: 'Hello' }\n            ],\n            max_tokens: 5\n          });\n          status.openAI = true;\n        } catch (error) {\n          status.openAI = false;\n        }\n      }\n\n      const isHealthy = status.initialized && (status.openAI || status.formRecognizer);\n      \n      return { \n        status: isHealthy ? 'healthy' : 'unhealthy', \n        timestamp: new Date(),\n        details: status\n      };\n    } catch (error) {\n      console.error('Azure AI health check failed:', error);\n      return { \n        status: 'unhealthy', \n        timestamp: new Date(),\n        details: { error: error instanceof Error ? error.message : 'Unknown error' }\n      };\n    }\n  }\n}\n\n// Export singleton instance\nexport const azureAIService = new AzureAIService();\nexport default azureAIService;\n"],"mappingswGQ;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;;AAxGR,MAAAC,UAAA;AAAA;AAAA,CAAAH,cAAA,GAAAE,CAAA,OAAAE,OAAA;AACA,MAAAC,WAAA;AAAA;AAAA,CAAAL,cAAA,GAAAE,CAAA,OAAAE,OAAA;AACA,MAAAE,oBAAA;AAAA;AAAA,CAAAN,cAAA,GAAAE,CAAA,OAAAE,OAAA;AACA,MAAAG,QAAA;AAAA;AAAA,CAAAP,cAAA,GAAAE,CAAA,OAAAE,OAAA;AACA,MAAAI,QAAA;AAAA;AAAA,CAAAR,cAAA,GAAAE,CAAA,OAAAE,OAAA;AAwFA,MAAMK,cAAc;EASlBC,YAAA;IAAA;IAAAV,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAE,CAAA;IARQ,KAAAU,YAAY,GAAuB,IAAI;IAAC;IAAAZ,cAAA,GAAAE,CAAA;IACxC,KAAAW,oBAAoB,GAAkC,IAAI;IAAC;IAAAb,cAAA,GAAAE,CAAA;IAC3D,KAAAY,WAAW,GAAG,KAAK;IAAC;IAAAd,cAAA,GAAAE,CAAA;IAO1B,IAAI,CAACa,cAAc;IAAG;IAAA,CAAAf,cAAA,GAAAgB,CAAA,UAAAC,OAAO,CAACC,GAAG,CAACC,qBAAqB;IAAA;IAAA,CAAAnB,cAAA,GAAAgB,CAAA,UAAI,EAAE;IAAC;IAAAhB,cAAA,GAAAE,CAAA;IAC9D,IAAI,CAACkB,YAAY;IAAG;IAAA,CAAApB,cAAA,GAAAgB,CAAA,UAAAC,OAAO,CAACC,GAAG,CAACG,oBAAoB;IAAA;IAAA,CAAArB,cAAA,GAAAgB,CAAA,UAAI,EAAE;IAAC;IAAAhB,cAAA,GAAAE,CAAA;IAC3D,IAAI,CAACoB,sBAAsB;IAAG;IAAA,CAAAtB,cAAA,GAAAgB,CAAA,UAAAC,OAAO,CAACC,GAAG,CAACK,8BAA8B;IAAA;IAAA,CAAAvB,cAAA,GAAAgB,CAAA,UAAI,EAAE;IAAC;IAAAhB,cAAA,GAAAE,CAAA;IAC/E,IAAI,CAACsB,oBAAoB;IAAG;IAAA,CAAAxB,cAAA,GAAAgB,CAAA,UAAAC,OAAO,CAACC,GAAG,CAACO,6BAA6B;IAAA;IAAA,CAAAzB,cAAA,GAAAgB,CAAA,UAAI,EAAE;EAC7E;EAEA,MAAMU,UAAUA,CAAA;IAAA;IAAA1B,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAE,CAAA;IACd,IAAI,IAAI,CAACY,WAAW,EAAE;MAAA;MAAAd,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAE,CAAA;MAAA;IAAA,CAAO;IAAA;IAAA;MAAAF,cAAA,GAAAgB,CAAA;IAAA;IAAAhB,cAAA,GAAAE,CAAA;IAE7B,IAAI;MAAA;MAAAF,cAAA,GAAAE,CAAA;MACF;MACA;MAAI;MAAA,CAAAF,cAAA,GAAAgB,CAAA,cAAI,CAACD,cAAc;MAAA;MAAA,CAAAf,cAAA,GAAAgB,CAAA,UAAI,IAAI,CAACI,YAAY,GAAE;QAAA;QAAApB,cAAA,GAAAgB,CAAA;QAAAhB,cAAA,GAAAE,CAAA;QAC5C,IAAI,CAACU,YAAY,GAAG,IAAIL,QAAA,CAAAoB,WAAW,CAAC;UAClCC,QAAQ,EAAE,IAAI,CAACb,cAAc;UAC7Bc,MAAM,EAAE,IAAI,CAACT;SACd,CAAC;QAAC;QAAApB,cAAA,GAAAE,CAAA;QACH4B,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;MAClD,CAAC;MAAA;MAAA;QAAA/B,cAAA,GAAAgB,CAAA;MAAA;MAED;MAAAhB,cAAA,GAAAE,CAAA;MACA;MAAI;MAAA,CAAAF,cAAA,GAAAgB,CAAA,cAAI,CAACM,sBAAsB;MAAA;MAAA,CAAAtB,cAAA,GAAAgB,CAAA,UAAI,IAAI,CAACQ,oBAAoB,GAAE;QAAA;QAAAxB,cAAA,GAAAgB,CAAA;QAAAhB,cAAA,GAAAE,CAAA;QAC5D,IAAI,CAACW,oBAAoB,GAAG,IAAIP,oBAAA,CAAA0B,sBAAsB,CACpD,IAAI,CAACV,sBAAsB,EAC3B,IAAIjB,WAAA,CAAA4B,kBAAkB,CAAC,IAAI,CAACT,oBAAoB,CAAC,CAClD;QAAC;QAAAxB,cAAA,GAAAE,CAAA;QACF4B,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;MAC3D,CAAC,MAAM;QAAA;QAAA/B,cAAA,GAAAgB,CAAA;QAAAhB,cAAA,GAAAE,CAAA;QAAA,IAAI,IAAI,CAACoB,sBAAsB,EAAE;UAAA;UAAAtB,cAAA,GAAAgB,CAAA;UAAAhB,cAAA,GAAAE,CAAA;UACtC;UACA,IAAI,CAACW,oBAAoB,GAAG,IAAIP,oBAAA,CAAA0B,sBAAsB,CACpD,IAAI,CAACV,sBAAsB,EAC3B,IAAInB,UAAA,CAAA+B,sBAAsB,EAAE,CAC7B;UAAC;UAAAlC,cAAA,GAAAE,CAAA;UACF4B,OAAO,CAACC,GAAG,CAAC,kEAAkE,CAAC;QACjF,CAAC;QAAA;QAAA;UAAA/B,cAAA,GAAAgB,CAAA;QAAA;MAAD;MAAC;MAAAhB,cAAA,GAAAE,CAAA;MAED,IAAI,CAACY,WAAW,GAAG,IAAI;MAAC;MAAAd,cAAA,GAAAE,CAAA;MACxB4B,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;IAC/C,CAAC,CAAC,OAAOI,KAAK,EAAE;MAAA;MAAAnC,cAAA,GAAAE,CAAA;MACd4B,OAAO,CAACK,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;MAAC;MAAAnC,cAAA,GAAAE,CAAA;MACjE,IAAAM,QAAA,CAAA4B,cAAc,EAACD,KAAc,EAAE;QAAEE,OAAO,EAAE,UAAU;QAAEC,MAAM,EAAE;MAAY,CAAE,CAAC;MAAC;MAAAtC,cAAA,GAAAE,CAAA;MAC9E,MAAMiC,KAAK;IACb;EACF;EAEA;;;EAGA,MAAMI,iBAAiBA,CAACC,UAAkB,EAAEC,QAAgB;IAAA;IAAAzC,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAE,CAAA;IAC1D,MAAM,IAAI,CAACwB,UAAU,EAAE;IAAC;IAAA1B,cAAA,GAAAE,CAAA;IAExB,IAAI,CAAC,IAAI,CAACW,oBAAoB,EAAE;MAAA;MAAAb,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAE,CAAA;MAC9B,MAAM,IAAIwC,KAAK,CAAC,sCAAsC,CAAC;IACzD,CAAC;IAAA;IAAA;MAAA1C,cAAA,GAAAgB,CAAA;IAAA;IAAAhB,cAAA,GAAAE,CAAA;IAED,IAAI;MAAA;MAAAF,cAAA,GAAAE,CAAA;MACF4B,OAAO,CAACC,GAAG,CAAC,yDAAyD,CAAC;MAEtE;MACA,MAAMY,MAAM;MAAA;MAAA,CAAA3C,cAAA,GAAAE,CAAA,QAAG,MAAM,IAAI,CAACW,oBAAoB,CAAC+B,oBAAoB,CACjE,mBAAmB,EACnBJ,UAAU,CACX;MAED,MAAMK,MAAM;MAAA;MAAA,CAAA7C,cAAA,GAAAE,CAAA,QAAG,MAAMyC,MAAM,CAACG,aAAa,EAAE;MAE3C;MACA,MAAMC,aAAa;MAAA;MAAA,CAAA/C,cAAA,GAAAE,CAAA;MAAG;MAAA,CAAAF,cAAA,GAAAgB,CAAA,WAAA6B,MAAM,CAACG,OAAO;MAAA;MAAA,CAAAhD,cAAA,GAAAgB,CAAA,WAAI,EAAE;MAE1C;MACA,MAAMiC,cAAc;MAAA;MAAA,CAAAjD,cAAA,GAAAE,CAAA,QAAG,MAAM,IAAI,CAACgD,mBAAmB,CAACH,aAAa,CAAC;MAAC;MAAA/C,cAAA,GAAAE,CAAA;MAErE4B,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;MAAC;MAAA/B,cAAA,GAAAE,CAAA;MACpD,OAAO+C,cAAc;IACvB,CAAC,CAAC,OAAOd,KAAK,EAAE;MAAA;MAAAnC,cAAA,GAAAE,CAAA;MACd4B,OAAO,CAACK,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAAC;MAAAnC,cAAA,GAAAE,CAAA;MACzD,IAAAM,QAAA,CAAA4B,cAAc,EAACD,KAAc,EAAE;QAAEE,OAAO,EAAE,UAAU;QAAEC,MAAM,EAAE;MAAgB,CAAE,CAAC;MAEjF;MAAA;MAAAtC,cAAA,GAAAE,CAAA;MACA,IAAI,IAAI,CAACU,YAAY,EAAE;QAAA;QAAAZ,cAAA,GAAAgB,CAAA;QAAAhB,cAAA,GAAAE,CAAA;QACrB,OAAO,IAAI,CAACiD,2BAA2B,CAACX,UAAU,CAAC;MACrD,CAAC;MAAA;MAAA;QAAAxC,cAAA,GAAAgB,CAAA;MAAA;MAAAhB,cAAA,GAAAE,CAAA;MAED,MAAMiC,KAAK;IACb;EACF;EAEA;;;EAGQ,MAAMgB,2BAA2BA,CAACX,UAAkB;IAAA;IAAAxC,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAE,CAAA;IAC1D4B,OAAO,CAACC,GAAG,CAAC,qDAAqD,CAAC;IAElE;IACA;IACA,MAAMqB,SAAS;IAAA;IAAA,CAAApD,cAAA,GAAAE,CAAA,QAAwB;MACrCmD,YAAY,EAAE,EAAE;MAChBC,MAAM,EAAE,EAAE;MACVC,UAAU,EAAE,EAAE;MACdC,SAAS,EAAE,EAAE;MACbC,QAAQ,EAAE,EAAE;MACZC,cAAc,EAAE,EAAE;MAClBC,SAAS,EAAE;KACZ;IAAC;IAAA3D,cAAA,GAAAE,CAAA;IAEF,OAAOkD,SAAS;EAClB;EAEA;;;EAGQ,MAAMF,mBAAmBA,CAACH,aAAqB;IAAA;IAAA/C,cAAA,GAAAW,CAAA;;;;IACrD,IAAI,CAAC,IAAI,CAACC,YAAY,EAAE;MAAA;MAAAZ,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAE,CAAA;MACtB,MAAM,IAAIwC,KAAK,CAAC,6BAA6B,CAAC;IAChD,CAAC;IAAA;IAAA;MAAA1C,cAAA,GAAAgB,CAAA;IAAA;IAED,MAAM4C,cAAc;IAAA;IAAA,CAAA5D,cAAA,GAAAE,CAAA;IAAG;IAAA,CAAAF,cAAA,GAAAgB,CAAA,WAAAC,OAAO,CAACC,GAAG,CAAC2C,4BAA4B;IAAA;IAAA,CAAA7D,cAAA,GAAAgB,CAAA,WAAI,OAAO;IAE1E,MAAM8C,MAAM;IAAA;IAAA,CAAA9D,cAAA,GAAAE,CAAA,QAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8DjB6C,aAAa;;;CAGd;IAAC;IAAA/C,cAAA,GAAAE,CAAA;IAEE,IAAI;MACF,MAAM2C,MAAM;MAAA;MAAA,CAAA7C,cAAA,GAAAE,CAAA,QAAG,MAAM,IAAI,CAACU,YAAY,CAACmD,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC;QAC7DC,KAAK,EAAEN,cAAc;QACrBO,QAAQ,EAAE,CACR;UACEC,IAAI,EAAE,QAAQ;UACdpB,OAAO,EAAE;SACV,EACD;UACEoB,IAAI,EAAE,MAAM;UACZpB,OAAO,EAAEc;SACV,CACF;QACDO,WAAW,EAAE,GAAG;QAChBC,UAAU,EAAE;OACb,CAAC;MAEF,MAAMC,QAAQ;MAAA;MAAA,CAAAvE,cAAA,GAAAE,CAAA;MAAG;MAAA,CAAAF,cAAA,GAAAgB,CAAA,YAAAwD,EAAA;MAAA;MAAA,CAAAxE,cAAA,GAAAgB,CAAA,YAAAyD,EAAA,GAAA5B,MAAM,CAAC6B,OAAO,CAAC,CAAC,CAAC;MAAA;MAAA,CAAA1E,cAAA,GAAAgB,CAAA,WAAAyD,EAAA;MAAA;MAAA,CAAAzE,cAAA,GAAAgB,CAAA;MAAA;MAAA,CAAAhB,cAAA,GAAAgB,CAAA,WAAAyD,EAAA,CAAEE,OAAO;MAAA;MAAA,CAAA3E,cAAA,GAAAgB,CAAA,WAAAwD,EAAA;MAAA;MAAA,CAAAxE,cAAA,GAAAgB,CAAA;MAAA;MAAA,CAAAhB,cAAA,GAAAgB,CAAA,WAAAwD,EAAA,CAAExB,OAAO;MAAC;MAAAhD,cAAA,GAAAE,CAAA;MACrD,IAAI,CAACqE,QAAQ,EAAE;QAAA;QAAAvE,cAAA,GAAAgB,CAAA;QAAAhB,cAAA,GAAAE,CAAA;QACb,MAAM,IAAIwC,KAAK,CAAC,yBAAyB,CAAC;MAC5C,CAAC;MAAA;MAAA;QAAA1C,cAAA,GAAAgB,CAAA;MAAA;MAED;MACA,MAAMiC,cAAc;MAAA;MAAA,CAAAjD,cAAA,GAAAE,CAAA,QAAG0E,IAAI,CAACC,KAAK,CAACN,QAAQ,CAAC;MAAC;MAAAvE,cAAA,GAAAE,CAAA;MAC5C,OAAO+C,cAAqC;IAC9C,CAAC,CAAC,OAAOd,KAAK,EAAE;MAAA;MAAAnC,cAAA,GAAAE,CAAA;MACd4B,OAAO,CAACK,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAAC;MAAC;MAAAnC,cAAA,GAAAE,CAAA;MACrE,IAAAM,QAAA,CAAA4B,cAAc,EAACD,KAAc,EAAE;QAAEE,OAAO,EAAE,UAAU;QAAEC,MAAM,EAAE;MAAkB,CAAE,CAAC;MAAC;MAAAtC,cAAA,GAAAE,CAAA;MACpF,MAAMiC,KAAK;IACb;EACF;EAEA;;;EAGA,MAAM2C,0BAA0BA,CAC9BC,UAA+B,EAC/BC,OAAA;EAAA;EAAA,CAAAhF,cAAA,GAAAgB,CAAA,WAA8C,EAAE;IAAA;IAAAhB,cAAA,GAAAW,CAAA;;;;IAEhD,MAAM,IAAI,CAACe,UAAU,EAAE;IAAC;IAAA1B,cAAA,GAAAE,CAAA;IAExB,IAAI,CAAC,IAAI,CAACU,YAAY,EAAE;MAAA;MAAAZ,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAE,CAAA;MACtB,MAAM,IAAIwC,KAAK,CAAC,6BAA6B,CAAC;IAChD,CAAC;IAAA;IAAA;MAAA1C,cAAA,GAAAgB,CAAA;IAAA;IAAAhB,cAAA,GAAAE,CAAA;IAED,IAAI;MAAA;MAAAF,cAAA,GAAAE,CAAA;MACF4B,OAAO,CAACC,GAAG,CAAC,wDAAwD,CAAC;MAErE,MAAM6B,cAAc;MAAA;MAAA,CAAA5D,cAAA,GAAAE,CAAA;MAAG;MAAA,CAAAF,cAAA,GAAAgB,CAAA,WAAAC,OAAO,CAACC,GAAG,CAAC2C,4BAA4B;MAAA;MAAA,CAAA7D,cAAA,GAAAgB,CAAA,WAAI,OAAO;MAC1E,MAAMiE,YAAY;MAAA;MAAA,CAAAjF,cAAA,GAAAE,CAAA;MAAG;MAAA,CAAAF,cAAA,GAAAgB,CAAA,WAAAgE,OAAO,CAACC,YAAY;MAAA;MAAA,CAAAjF,cAAA,GAAAgB,CAAA,WAAI,EAAE;MAC/C,MAAMkE,UAAU;MAAA;MAAA,CAAAlF,cAAA,GAAAE,CAAA;MAAG;MAAA,CAAAF,cAAA,GAAAgB,CAAA,WAAAgE,OAAO,CAACE,UAAU;MAAA;MAAA,CAAAlF,cAAA,GAAAgB,CAAA,WAAI,OAAO;MAEhD,MAAMmE,aAAa;MAAA;MAAA,CAAAnF,cAAA,GAAAE,CAAA,QAAG,IAAI,CAACkF,kBAAkB,CAACL,UAAU,CAAC;MACzD,MAAMM,UAAU;MAAA;MAAA,CAAArF,cAAA,GAAAE,CAAA;MAAG;MAAA,CAAAF,cAAA,GAAAgB,CAAA,WAAAgE,OAAO,CAACM,QAAQ;MAAA;MAAA,CAAAtF,cAAA,GAAAgB,CAAA,WAAIgE,OAAO,CAACO,OAAO;MAAA;MAAA,CAAAvF,cAAA,GAAAgB,CAAA,WAAIgE,OAAO,CAACQ,cAAc;MAAA;MAAA,CAAAxF,cAAA,GAAAgB,CAAA,WAC5E,QAAQgE,OAAO,CAACM,QAAQ,OAAON,OAAO,CAACO,OAAO,kBAAkBP,OAAO,CAACQ,cAAc,EAAE;MAAA;MAAA,CAAAxF,cAAA,GAAAgB,CAAA,WACxF,EAAE;MAEN,MAAM8C,MAAM;MAAA;MAAA,CAAA9D,cAAA,GAAAE,CAAA,QAAG;8DACyC+E,YAAY,6BAA6BC,UAAU;;EAE/GC,aAAa;;EAEbE,UAAU;;;;;;;;;;;CAWX;MAEK,MAAMxC,MAAM;MAAA;MAAA,CAAA7C,cAAA,GAAAE,CAAA,QAAG,MAAM,IAAI,CAACU,YAAY,CAACmD,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC;QAC7DC,KAAK,EAAEN,cAAc;QACrBO,QAAQ,EAAE,CACR;UACEC,IAAI,EAAE,QAAQ;UACdpB,OAAO,EAAE;SACV,EACD;UACEoB,IAAI,EAAE,MAAM;UACZpB,OAAO,EAAEc;SACV,CACF;QACDO,WAAW,EAAE,GAAG;QAChBC,UAAU,EAAE;OACb,CAAC;MAEF,MAAMC,QAAQ;MAAA;MAAA,CAAAvE,cAAA,GAAAE,CAAA;MAAG;MAAA,CAAAF,cAAA,GAAAgB,CAAA,YAAAwD,EAAA;MAAA;MAAA,CAAAxE,cAAA,GAAAgB,CAAA,YAAAyD,EAAA,GAAA5B,MAAM,CAAC6B,OAAO,CAAC,CAAC,CAAC;MAAA;MAAA,CAAA1E,cAAA,GAAAgB,CAAA,WAAAyD,EAAA;MAAA;MAAA,CAAAzE,cAAA,GAAAgB,CAAA;MAAA;MAAA,CAAAhB,cAAA,GAAAgB,CAAA,WAAAyD,EAAA,CAAEE,OAAO;MAAA;MAAA,CAAA3E,cAAA,GAAAgB,CAAA,WAAAwD,EAAA;MAAA;MAAA,CAAAxE,cAAA,GAAAgB,CAAA;MAAA;MAAA,CAAAhB,cAAA,GAAAgB,CAAA,WAAAwD,EAAA,CAAExB,OAAO;MAAC;MAAAhD,cAAA,GAAAE,CAAA;MACrD,IAAI,CAACqE,QAAQ,EAAE;QAAA;QAAAvE,cAAA,GAAAgB,CAAA;QAAAhB,cAAA,GAAAE,CAAA;QACb,MAAM,IAAIwC,KAAK,CAAC,yBAAyB,CAAC;MAC5C,CAAC;MAAA;MAAA;QAAA1C,cAAA,GAAAgB,CAAA;MAAA;MAED,MAAMyE,SAAS;MAAA;MAAA,CAAAzF,cAAA,GAAAE,CAAA,QAAG0E,IAAI,CAACC,KAAK,CAACN,QAAQ,CAAC;MAAC;MAAAvE,cAAA,GAAAE,CAAA;MACvC4B,OAAO,CAACC,GAAG,CAAC,eAAe0D,SAAS,CAACC,MAAM,sBAAsB,CAAC;MAAC;MAAA1F,cAAA,GAAAE,CAAA;MACnE,OAAOuF,SAAS;IAClB,CAAC,CAAC,OAAOtD,KAAK,EAAE;MAAA;MAAAnC,cAAA,GAAAE,CAAA;MACd4B,OAAO,CAACK,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;MAAC;MAAAnC,cAAA,GAAAE,CAAA;MAClE,IAAAM,QAAA,CAAA4B,cAAc,EAACD,KAAc,EAAE;QAAEE,OAAO,EAAE,UAAU;QAAEC,MAAM,EAAE;MAAoB,CAAE,CAAC;MAAC;MAAAtC,cAAA,GAAAE,CAAA;MACtF,MAAMiC,KAAK;IACb;EACF;EAEA;;;EAGA,MAAMwD,yBAAyBA,CAC7BF,SAAmB,EACnBG,OAAiB,EACjBZ,OAAA;EAAA;EAAA,CAAAhF,cAAA,GAAAgB,CAAA,WAAqC,EAAE;IAAA;IAAAhB,cAAA,GAAAW,CAAA;;;;IAEvC,MAAM,IAAI,CAACe,UAAU,EAAE;IAAC;IAAA1B,cAAA,GAAAE,CAAA;IAExB,IAAI,CAAC,IAAI,CAACU,YAAY,EAAE;MAAA;MAAAZ,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAE,CAAA;MACtB,MAAM,IAAIwC,KAAK,CAAC,6BAA6B,CAAC;IAChD,CAAC;IAAA;IAAA;MAAA1C,cAAA,GAAAgB,CAAA;IAAA;IAAAhB,cAAA,GAAAE,CAAA;IAED,IAAI;MAAA;MAAAF,cAAA,GAAAE,CAAA;MACF4B,OAAO,CAACC,GAAG,CAAC,uDAAuD,CAAC;MAEpE,MAAM6B,cAAc;MAAA;MAAA,CAAA5D,cAAA,GAAAE,CAAA;MAAG;MAAA,CAAAF,cAAA,GAAAgB,CAAA,WAAAC,OAAO,CAACC,GAAG,CAAC2C,4BAA4B;MAAA;MAAA,CAAA7D,cAAA,GAAAgB,CAAA,WAAI,OAAO;MAE1E;MACA,MAAM6E,SAAS;MAAA;MAAA,CAAA7F,cAAA,GAAAE,CAAA,QAAGuF,SAAS,CAACK,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QAAA;QAAAhG,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAE,CAAA;QAAA,aAAM6F,CAAC;QAAQ;QAAA,CAAA/F,cAAA,GAAAgB,CAAA,WAAA4E,OAAO,CAACI,CAAC,CAAC;QAAA;QAAA,CAAAhG,cAAA,GAAAgB,CAAA,WAAI,oBAAoB,GAAE;MAAF,CAAE,CAAC,CAACiF,IAAI,CAAC,MAAM,CAAC;MAE3G,MAAMZ,UAAU;MAAA;MAAA,CAAArF,cAAA,GAAAE,CAAA;MAAG;MAAA,CAAAF,cAAA,GAAAgB,CAAA,WAAAgE,OAAO,CAACM,QAAQ;MAAA;MAAA,CAAAtF,cAAA,GAAAgB,CAAA,WAAIgE,OAAO,CAACO,OAAO;MAAA;MAAA,CAAAvF,cAAA,GAAAgB,CAAA,WAAIgE,OAAO,CAACkB,aAAa;MAAA;MAAA,CAAAlG,cAAA,GAAAgB,CAAA,WAC3E,gBAAgBgE,OAAO,CAACM,QAAQ,OAAON,OAAO,CAACO,OAAO,KAAKP,OAAO,CAACkB,aAAa,GAAG;MAAA;MAAA,CAAAlG,cAAA,GAAAgB,CAAA,WACnF,EAAE;MAEN,MAAM8C,MAAM;MAAA;MAAA,CAAA9D,cAAA,GAAAE,CAAA,QAAG;;;EAGnBmF,UAAU;;;EAGVQ,SAAS;;;;;;;;;;;;;;;;;;;;;;;;CAwBV;MAEK,MAAMhD,MAAM;MAAA;MAAA,CAAA7C,cAAA,GAAAE,CAAA,QAAG,MAAM,IAAI,CAACU,YAAY,CAACmD,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC;QAC7DC,KAAK,EAAEN,cAAc;QACrBO,QAAQ,EAAE,CACR;UACEC,IAAI,EAAE,QAAQ;UACdpB,OAAO,EAAE;SACV,EACD;UACEoB,IAAI,EAAE,MAAM;UACZpB,OAAO,EAAEc;SACV,CACF;QACDO,WAAW,EAAE,GAAG;QAChBC,UAAU,EAAE;OACb,CAAC;MAEF,MAAMC,QAAQ;MAAA;MAAA,CAAAvE,cAAA,GAAAE,CAAA;MAAG;MAAA,CAAAF,cAAA,GAAAgB,CAAA,YAAAwD,EAAA;MAAA;MAAA,CAAAxE,cAAA,GAAAgB,CAAA,YAAAyD,EAAA,GAAA5B,MAAM,CAAC6B,OAAO,CAAC,CAAC,CAAC;MAAA;MAAA,CAAA1E,cAAA,GAAAgB,CAAA,WAAAyD,EAAA;MAAA;MAAA,CAAAzE,cAAA,GAAAgB,CAAA;MAAA;MAAA,CAAAhB,cAAA,GAAAgB,CAAA,WAAAyD,EAAA,CAAEE,OAAO;MAAA;MAAA,CAAA3E,cAAA,GAAAgB,CAAA,WAAAwD,EAAA;MAAA;MAAA,CAAAxE,cAAA,GAAAgB,CAAA;MAAA;MAAA,CAAAhB,cAAA,GAAAgB,CAAA,WAAAwD,EAAA,CAAExB,OAAO;MAAC;MAAAhD,cAAA,GAAAE,CAAA;MACrD,IAAI,CAACqE,QAAQ,EAAE;QAAA;QAAAvE,cAAA,GAAAgB,CAAA;QAAAhB,cAAA,GAAAE,CAAA;QACb,MAAM,IAAIwC,KAAK,CAAC,yBAAyB,CAAC;MAC5C,CAAC;MAAA;MAAA;QAAA1C,cAAA,GAAAgB,CAAA;MAAA;MAED,MAAMmF,QAAQ;MAAA;MAAA,CAAAnG,cAAA,GAAAE,CAAA,QAAG0E,IAAI,CAACC,KAAK,CAACN,QAAQ,CAAC;MAAC;MAAAvE,cAAA,GAAAE,CAAA;MACtC4B,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;MAAC;MAAA/B,cAAA,GAAAE,CAAA;MAC3D,OAAOiG,QAA6B;IACtC,CAAC,CAAC,OAAOhE,KAAK,EAAE;MAAA;MAAAnC,cAAA,GAAAE,CAAA;MACd4B,OAAO,CAACK,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;MAAC;MAAAnC,cAAA,GAAAE,CAAA;MACjE,IAAAM,QAAA,CAAA4B,cAAc,EAACD,KAAc,EAAE;QAAEE,OAAO,EAAE,UAAU;QAAEC,MAAM,EAAE;MAAmB,CAAE,CAAC;MAAC;MAAAtC,cAAA,GAAAE,CAAA;MACrF,MAAMiC,KAAK;IACb;EACF;EAEA;;;EAGA,MAAMiE,mBAAmBA,CACvBrB,UAA+B,EAC/BO,QAAgB,EAChBC,OAAe,EACfC,cAAuB;IAAA;IAAAxF,cAAA,GAAAW,CAAA;;;;IAEvB,MAAM,IAAI,CAACe,UAAU,EAAE;IAAC;IAAA1B,cAAA,GAAAE,CAAA;IAExB,IAAI,CAAC,IAAI,CAACU,YAAY,EAAE;MAAA;MAAAZ,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAE,CAAA;MACtB,MAAM,IAAIwC,KAAK,CAAC,6BAA6B,CAAC;IAChD,CAAC;IAAA;IAAA;MAAA1C,cAAA,GAAAgB,CAAA;IAAA;IAAAhB,cAAA,GAAAE,CAAA;IAED,IAAI;MAAA;MAAAF,cAAA,GAAAE,CAAA;MACF4B,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;MAE9D,MAAM6B,cAAc;MAAA;MAAA,CAAA5D,cAAA,GAAAE,CAAA;MAAG;MAAA,CAAAF,cAAA,GAAAgB,CAAA,WAAAC,OAAO,CAACC,GAAG,CAAC2C,4BAA4B;MAAA;MAAA,CAAA7D,cAAA,GAAAgB,CAAA,WAAI,OAAO;MAC1E,MAAMmE,aAAa;MAAA;MAAA,CAAAnF,cAAA,GAAAE,CAAA,SAAG,IAAI,CAACkF,kBAAkB,CAACL,UAAU,CAAC;MAEzD,MAAMjB,MAAM;MAAA;MAAA,CAAA9D,cAAA,GAAAE,CAAA,SAAG;;;YAGToF,QAAQ;WACTC,OAAO;;MACC;MAAA,CAAAvF,cAAA,GAAAgB,CAAA,WAAAwE,cAAc;MAAA;MAAA,CAAAxF,cAAA,GAAAgB,CAAA,WAAI,cAAc;;;EAGjDmE,aAAa;;;;;;;;;;;CAWd;MAEK,MAAMtC,MAAM;MAAA;MAAA,CAAA7C,cAAA,GAAAE,CAAA,SAAG,MAAM,IAAI,CAACU,YAAY,CAACmD,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC;QAC7DC,KAAK,EAAEN,cAAc;QACrBO,QAAQ,EAAE,CACR;UACEC,IAAI,EAAE,QAAQ;UACdpB,OAAO,EAAE;SACV,EACD;UACEoB,IAAI,EAAE,MAAM;UACZpB,OAAO,EAAEc;SACV,CACF;QACDO,WAAW,EAAE,GAAG;QAChBC,UAAU,EAAE;OACb,CAAC;MAEF,MAAMC,QAAQ;MAAA;MAAA,CAAAvE,cAAA,GAAAE,CAAA;MAAG;MAAA,CAAAF,cAAA,GAAAgB,CAAA,YAAAwD,EAAA;MAAA;MAAA,CAAAxE,cAAA,GAAAgB,CAAA,YAAAyD,EAAA,GAAA5B,MAAM,CAAC6B,OAAO,CAAC,CAAC,CAAC;MAAA;MAAA,CAAA1E,cAAA,GAAAgB,CAAA,WAAAyD,EAAA;MAAA;MAAA,CAAAzE,cAAA,GAAAgB,CAAA;MAAA;MAAA,CAAAhB,cAAA,GAAAgB,CAAA,WAAAyD,EAAA,CAAEE,OAAO;MAAA;MAAA,CAAA3E,cAAA,GAAAgB,CAAA,WAAAwD,EAAA;MAAA;MAAA,CAAAxE,cAAA,GAAAgB,CAAA;MAAA;MAAA,CAAAhB,cAAA,GAAAgB,CAAA,WAAAwD,EAAA,CAAExB,OAAO;MAAC;MAAAhD,cAAA,GAAAE,CAAA;MACrD,IAAI,CAACqE,QAAQ,EAAE;QAAA;QAAAvE,cAAA,GAAAgB,CAAA;QAAAhB,cAAA,GAAAE,CAAA;QACb,MAAM,IAAIwC,KAAK,CAAC,yBAAyB,CAAC;MAC5C,CAAC;MAAA;MAAA;QAAA1C,cAAA,GAAAgB,CAAA;MAAA;MAAAhB,cAAA,GAAAE,CAAA;MAED4B,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;MAAC;MAAA/B,cAAA,GAAAE,CAAA;MACrD,OAAOqE,QAAQ;IACjB,CAAC,CAAC,OAAOpC,KAAK,EAAE;MAAA;MAAAnC,cAAA,GAAAE,CAAA;MACd4B,OAAO,CAACK,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAAC;MAAAnC,cAAA,GAAAE,CAAA;MAC3D,IAAAM,QAAA,CAAA4B,cAAc,EAACD,KAAc,EAAE;QAAEE,OAAO,EAAE,UAAU;QAAEC,MAAM,EAAE;MAAuB,CAAE,CAAC;MAAC;MAAAtC,cAAA,GAAAE,CAAA;MACzF,MAAMiC,KAAK;IACb;EACF;EAEA;;;EAGQiD,kBAAkBA,CAACL,UAA+B;IAAA;IAAA/E,cAAA,GAAAW,CAAA;IACxD,MAAM0F,KAAK;IAAA;IAAA,CAAArG,cAAA,GAAAE,CAAA,SAAa,EAAE;IAE1B;IAAA;IAAAF,cAAA,GAAAE,CAAA;IACA,IAAI6E,UAAU,CAAC1B,YAAY,CAACiD,IAAI,EAAE;MAAA;MAAAtG,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAE,CAAA;MAChCmG,KAAK,CAACE,IAAI,CAAC,SAASxB,UAAU,CAAC1B,YAAY,CAACiD,IAAI,EAAE,CAAC;IACrD,CAAC;IAAA;IAAA;MAAAtG,cAAA,GAAAgB,CAAA;IAAA;IAED;IAAAhB,cAAA,GAAAE,CAAA;IACA,IAAI6E,UAAU,CAACyB,OAAO,EAAE;MAAA;MAAAxG,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAE,CAAA;MACtBmG,KAAK,CAACE,IAAI,CAAC,YAAYxB,UAAU,CAACyB,OAAO,EAAE,CAAC;IAC9C,CAAC;IAAA;IAAA;MAAAxG,cAAA,GAAAgB,CAAA;IAAA;IAED;IAAAhB,cAAA,GAAAE,CAAA;IACA,IAAI6E,UAAU,CAACzB,MAAM,CAACoC,MAAM,GAAG,CAAC,EAAE;MAAA;MAAA1F,cAAA,GAAAgB,CAAA;MAAAhB,cAAA,GAAAE,CAAA;MAChCmG,KAAK,CAACE,IAAI,CAAC,WAAWxB,UAAU,CAACzB,MAAM,CAAC2C,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;IACvD,CAAC;IAAA;IAAA;MAAAjG,cAAA,GAAAgB,CAAA;IAAA;IAED;IAAAhB,cAAA,GAAAE,CAAA;IACA,IAAI6E,UAAU,CAACxB,UAAU,CAACmC,MAAM,GAAG,CAAC,EAAE;MAAA;MAAA1F,cAAA,GAAAgB,CAAA;MACpC,MAAMyF,OAAO;MAAA;MAAA,CAAAzG,cAAA,GAAAE,CAAA,SAAG6E,UAAU,CAACxB,UAAU,CAACuC,GAAG,CAACY,GAAG,IAC3C;QAAA;QAAA1G,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAE,CAAA;QAAA,UAAGwG,GAAG,CAACC,QAAQ,OAAOD,GAAG,CAACnB,OAAO,KAAKmB,GAAG,CAACE,SAAS;QAAM;QAAA,CAAA5G,cAAA,GAAAgB,CAAA,WAAA0F,GAAG,CAACG,OAAO;QAAA;QAAA,CAAA7G,cAAA,GAAAgB,CAAA,WAAI,SAAS,OAAM0F,GAAG,CAACI,WAAW,EAAE;MAAF,CAAE,CACzG,CAACb,IAAI,CAAC,IAAI,CAAC;MAAC;MAAAjG,cAAA,GAAAE,CAAA;MACbmG,KAAK,CAACE,IAAI,CAAC,gBAAgBE,OAAO,EAAE,CAAC;IACvC,CAAC;IAAA;IAAA;MAAAzG,cAAA,GAAAgB,CAAA;IAAA;IAED;IAAAhB,cAAA,GAAAE,CAAA;IACA,IAAI6E,UAAU,CAACvB,SAAS,CAACkC,MAAM,GAAG,CAAC,EAAE;MAAA;MAAA1F,cAAA,GAAAgB,CAAA;MACnC,MAAM+F,OAAO;MAAA;MAAA,CAAA/G,cAAA,GAAAE,CAAA,SAAG6E,UAAU,CAACvB,SAAS,CAACsC,GAAG,CAACkB,GAAG,IAC1C;QAAA;QAAAhH,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAE,CAAA;QAAA,UAAG8G,GAAG,CAACC,MAAM,OAAOD,GAAG,CAACE,KAAK,SAASF,GAAG,CAACG,WAAW,EAAE;MAAF,CAAE,CACxD,CAAClB,IAAI,CAAC,IAAI,CAAC;MAAC;MAAAjG,cAAA,GAAAE,CAAA;MACbmG,KAAK,CAACE,IAAI,CAAC,eAAeQ,OAAO,EAAE,CAAC;IACtC,CAAC;IAAA;IAAA;MAAA/G,cAAA,GAAAgB,CAAA;IAAA;IAED;IAAAhB,cAAA,GAAAE,CAAA;IACA,IAAI6E,UAAU,CAACtB,QAAQ,CAACiC,MAAM,GAAG,CAAC,EAAE;MAAA;MAAA1F,cAAA,GAAAgB,CAAA;MAClC,MAAMoG,QAAQ;MAAA;MAAA,CAAApH,cAAA,GAAAE,CAAA,SAAG6E,UAAU,CAACtB,QAAQ,CAACqC,GAAG,CAACuB,IAAI,IAC3C;QAAA;QAAArH,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAE,CAAA;QAAA,UAAGmH,IAAI,CAACf,IAAI,KAAKe,IAAI,CAACP,WAAW,EAAE;MAAF,CAAE,CACpC,CAACb,IAAI,CAAC,IAAI,CAAC;MAAC;MAAAjG,cAAA,GAAAE,CAAA;MACbmG,KAAK,CAACE,IAAI,CAAC,cAAca,QAAQ,EAAE,CAAC;IACtC,CAAC;IAAA;IAAA;MAAApH,cAAA,GAAAgB,CAAA;IAAA;IAAAhB,cAAA,GAAAE,CAAA;IAED,OAAOmG,KAAK,CAACJ,IAAI,CAAC,MAAM,CAAC;EAC3B;EAEA;;;EAGA,MAAMqB,WAAWA,CAAA;IAAA;IAAAtH,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAE,CAAA;IACf,IAAI;MAAA;MAAAF,cAAA,GAAAE,CAAA;MACF,MAAM,IAAI,CAACwB,UAAU,EAAE;MAEvB,MAAM6F,MAAM;MAAA;MAAA,CAAAvH,cAAA,GAAAE,CAAA,SAAG;QACbsH,MAAM,EAAE,CAAC,CAAC,IAAI,CAAC5G,YAAY;QAC3B6G,cAAc,EAAE,CAAC,CAAC,IAAI,CAAC5G,oBAAoB;QAC3CC,WAAW,EAAE,IAAI,CAACA;OACnB;MAED;MAAA;MAAAd,cAAA,GAAAE,CAAA;MACA,IAAI,IAAI,CAACU,YAAY,EAAE;QAAA;QAAAZ,cAAA,GAAAgB,CAAA;QAAAhB,cAAA,GAAAE,CAAA;QACrB,IAAI;UACF,MAAM0D,cAAc;UAAA;UAAA,CAAA5D,cAAA,GAAAE,CAAA;UAAG;UAAA,CAAAF,cAAA,GAAAgB,CAAA,WAAAC,OAAO,CAACC,GAAG,CAAC2C,4BAA4B;UAAA;UAAA,CAAA7D,cAAA,GAAAgB,CAAA,WAAI,OAAO;UAAC;UAAAhB,cAAA,GAAAE,CAAA;UAC3E,MAAM,IAAI,CAACU,YAAY,CAACmD,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC;YAC9CC,KAAK,EAAEN,cAAc;YACrBO,QAAQ,EAAE,CACR;cAAEC,IAAI,EAAE,MAAM;cAAEpB,OAAO,EAAE;YAAO,CAAE,CACnC;YACDsB,UAAU,EAAE;WACb,CAAC;UAAC;UAAAtE,cAAA,GAAAE,CAAA;UACHqH,MAAM,CAACC,MAAM,GAAG,IAAI;QACtB,CAAC,CAAC,OAAOrF,KAAK,EAAE;UAAA;UAAAnC,cAAA,GAAAE,CAAA;UACdqH,MAAM,CAACC,MAAM,GAAG,KAAK;QACvB;MACF,CAAC;MAAA;MAAA;QAAAxH,cAAA,GAAAgB,CAAA;MAAA;MAED,MAAM0G,SAAS;MAAA;MAAA,CAAA1H,cAAA,GAAAE,CAAA;MAAG;MAAA,CAAAF,cAAA,GAAAgB,CAAA,WAAAuG,MAAM,CAACzG,WAAW;MAAK;MAAA,CAAAd,cAAA,GAAAgB,CAAA,WAAAuG,MAAM,CAACC,MAAM;MAAA;MAAA,CAAAxH,cAAA,GAAAgB,CAAA,WAAIuG,MAAM,CAACE,cAAc,EAAC;MAAC;MAAAzH,cAAA,GAAAE,CAAA;MAEjF,OAAO;QACLqH,MAAM,EAAEG,SAAS;QAAA;QAAA,CAAA1H,cAAA,GAAAgB,CAAA,WAAG,SAAS;QAAA;QAAA,CAAAhB,cAAA,GAAAgB,CAAA,WAAG,WAAW;QAC3C2G,SAAS,EAAE,IAAIC,IAAI,EAAE;QACrBC,OAAO,EAAEN;OACV;IACH,CAAC,CAAC,OAAOpF,KAAK,EAAE;MAAA;MAAAnC,cAAA,GAAAE,CAAA;MACd4B,OAAO,CAACK,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MAAC;MAAAnC,cAAA,GAAAE,CAAA;MACtD,OAAO;QACLqH,MAAM,EAAE,WAAW;QACnBI,SAAS,EAAE,IAAIC,IAAI,EAAE;QACrBC,OAAO,EAAE;UAAE1F,KAAK,EAAEA,KAAK,YAAYO,KAAK;UAAA;UAAA,CAAA1C,cAAA,GAAAgB,CAAA,WAAGmB,KAAK,CAACwC,OAAO;UAAA;UAAA,CAAA3E,cAAA,GAAAgB,CAAA,WAAG,eAAe;QAAA;OAC3E;IACH;EACF;;AAGF;AAAA;AAAAhB,cAAA,GAAAE,CAAA;AACa4H,OAAA,CAAAC,cAAc,GAAG,IAAItH,cAAc,EAAE;AAAC;AAAAT,cAAA,GAAAE,CAAA;AACnD4H,OAAA,CAAAE,OAAA,GAAeF,OAAA,CAAAC,cAAc","ignoreList":[]}