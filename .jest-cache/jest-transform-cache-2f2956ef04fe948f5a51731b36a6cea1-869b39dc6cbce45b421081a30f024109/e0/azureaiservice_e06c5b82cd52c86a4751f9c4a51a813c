92cec5d0869a45721d7422c36c6ba570
"use strict";

/* istanbul ignore next */
function cov_1i0a9ol08h() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/services/azure-ai-service.ts";
  var hash = "b2d1ef83094dab08272c37dd2afb928bc025ebe3";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/services/azure-ai-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 32
        }
      },
      "2": {
        start: {
          line: 4,
          column: 19
        },
        end: {
          line: 4,
          column: 45
        }
      },
      "3": {
        start: {
          line: 5,
          column: 20
        },
        end: {
          line: 5,
          column: 47
        }
      },
      "4": {
        start: {
          line: 6,
          column: 29
        },
        end: {
          line: 6,
          column: 65
        }
      },
      "5": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 34
        }
      },
      "6": {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 8,
          column: 40
        }
      },
      "7": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 33
        }
      },
      "8": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 41
        }
      },
      "9": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 33
        }
      },
      "10": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 70
        }
      },
      "11": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 67
        }
      },
      "12": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 87
        }
      },
      "13": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 84
        }
      },
      "14": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 21,
          column: 19
        }
      },
      "15": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 21,
          column: 19
        }
      },
      "16": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 48,
          column: 9
        }
      },
      "17": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 30,
          column: 13
        }
      },
      "18": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 28,
          column: 19
        }
      },
      "19": {
        start: {
          line: 29,
          column: 16
        },
        end: {
          line: 29,
          column: 65
        }
      },
      "20": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 40,
          column: 13
        }
      },
      "21": {
        start: {
          line: 33,
          column: 16
        },
        end: {
          line: 33,
          column: 184
        }
      },
      "22": {
        start: {
          line: 34,
          column: 16
        },
        end: {
          line: 34,
          column: 74
        }
      },
      "23": {
        start: {
          line: 36,
          column: 17
        },
        end: {
          line: 40,
          column: 13
        }
      },
      "24": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 38,
          column: 162
        }
      },
      "25": {
        start: {
          line: 39,
          column: 16
        },
        end: {
          line: 39,
          column: 96
        }
      },
      "26": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 36
        }
      },
      "27": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 58
        }
      },
      "28": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 77
        }
      },
      "29": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 95
        }
      },
      "30": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 24
        }
      },
      "31": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 32
        }
      },
      "32": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "33": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 68
        }
      },
      "34": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "35": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 83
        }
      },
      "36": {
        start: {
          line: 61,
          column: 27
        },
        end: {
          line: 61,
          column: 112
        }
      },
      "37": {
        start: {
          line: 62,
          column: 27
        },
        end: {
          line: 62,
          column: 55
        }
      },
      "38": {
        start: {
          line: 64,
          column: 34
        },
        end: {
          line: 64,
          column: 54
        }
      },
      "39": {
        start: {
          line: 66,
          column: 35
        },
        end: {
          line: 66,
          column: 80
        }
      },
      "40": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 64
        }
      },
      "41": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 34
        }
      },
      "42": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 69
        }
      },
      "43": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 99
        }
      },
      "44": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 76,
          column: 13
        }
      },
      "45": {
        start: {
          line: 75,
          column: 16
        },
        end: {
          line: 75,
          column: 68
        }
      },
      "46": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 24
        }
      },
      "47": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 75
        }
      },
      "48": {
        start: {
          line: 87,
          column: 26
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "49": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 96,
          column: 25
        }
      },
      "50": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "51": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 59
        }
      },
      "52": {
        start: {
          line: 106,
          column: 31
        },
        end: {
          line: 106,
          column: 82
        }
      },
      "53": {
        start: {
          line: 107,
          column: 23
        },
        end: {
          line: 172,
          column: 1
        }
      },
      "54": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 201,
          column: 9
        }
      },
      "55": {
        start: {
          line: 174,
          column: 27
        },
        end: {
          line: 188,
          column: 14
        }
      },
      "56": {
        start: {
          line: 189,
          column: 29
        },
        end: {
          line: 189,
          column: 156
        }
      },
      "57": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 192,
          column: 13
        }
      },
      "58": {
        start: {
          line: 191,
          column: 16
        },
        end: {
          line: 191,
          column: 59
        }
      },
      "59": {
        start: {
          line: 194,
          column: 35
        },
        end: {
          line: 194,
          column: 55
        }
      },
      "60": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 195,
          column: 34
        }
      },
      "61": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 198,
          column: 81
        }
      },
      "62": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 199,
          column: 101
        }
      },
      "63": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 200,
          column: 24
        }
      },
      "64": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 208,
          column: 32
        }
      },
      "65": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 211,
          column: 9
        }
      },
      "66": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 59
        }
      },
      "67": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 265,
          column: 9
        }
      },
      "68": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 213,
          column: 82
        }
      },
      "69": {
        start: {
          line: 214,
          column: 35
        },
        end: {
          line: 214,
          column: 86
        }
      },
      "70": {
        start: {
          line: 215,
          column: 33
        },
        end: {
          line: 215,
          column: 59
        }
      },
      "71": {
        start: {
          line: 216,
          column: 31
        },
        end: {
          line: 216,
          column: 60
        }
      },
      "72": {
        start: {
          line: 217,
          column: 34
        },
        end: {
          line: 217,
          column: 69
        }
      },
      "73": {
        start: {
          line: 218,
          column: 31
        },
        end: {
          line: 220,
          column: 20
        }
      },
      "74": {
        start: {
          line: 221,
          column: 27
        },
        end: {
          line: 237,
          column: 1
        }
      },
      "75": {
        start: {
          line: 238,
          column: 27
        },
        end: {
          line: 252,
          column: 14
        }
      },
      "76": {
        start: {
          line: 253,
          column: 29
        },
        end: {
          line: 253,
          column: 156
        }
      },
      "77": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 256,
          column: 13
        }
      },
      "78": {
        start: {
          line: 255,
          column: 16
        },
        end: {
          line: 255,
          column: 59
        }
      },
      "79": {
        start: {
          line: 257,
          column: 30
        },
        end: {
          line: 257,
          column: 50
        }
      },
      "80": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 258,
          column: 79
        }
      },
      "81": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 259,
          column: 29
        }
      },
      "82": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 262,
          column: 78
        }
      },
      "83": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 103
        }
      },
      "84": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 264,
          column: 24
        }
      },
      "85": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 272,
          column: 32
        }
      },
      "86": {
        start: {
          line: 273,
          column: 8
        },
        end: {
          line: 275,
          column: 9
        }
      },
      "87": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 274,
          column: 59
        }
      },
      "88": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 342,
          column: 9
        }
      },
      "89": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 277,
          column: 81
        }
      },
      "90": {
        start: {
          line: 278,
          column: 35
        },
        end: {
          line: 278,
          column: 86
        }
      },
      "91": {
        start: {
          line: 280,
          column: 30
        },
        end: {
          line: 280,
          column: 119
        }
      },
      "92": {
        start: {
          line: 280,
          column: 54
        },
        end: {
          line: 280,
          column: 105
        }
      },
      "93": {
        start: {
          line: 281,
          column: 31
        },
        end: {
          line: 283,
          column: 20
        }
      },
      "94": {
        start: {
          line: 284,
          column: 27
        },
        end: {
          line: 314,
          column: 1
        }
      },
      "95": {
        start: {
          line: 315,
          column: 27
        },
        end: {
          line: 329,
          column: 14
        }
      },
      "96": {
        start: {
          line: 330,
          column: 29
        },
        end: {
          line: 330,
          column: 156
        }
      },
      "97": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 333,
          column: 13
        }
      },
      "98": {
        start: {
          line: 332,
          column: 16
        },
        end: {
          line: 332,
          column: 59
        }
      },
      "99": {
        start: {
          line: 334,
          column: 29
        },
        end: {
          line: 334,
          column: 49
        }
      },
      "100": {
        start: {
          line: 335,
          column: 12
        },
        end: {
          line: 335,
          column: 71
        }
      },
      "101": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 336,
          column: 28
        }
      },
      "102": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 339,
          column: 77
        }
      },
      "103": {
        start: {
          line: 340,
          column: 12
        },
        end: {
          line: 340,
          column: 102
        }
      },
      "104": {
        start: {
          line: 341,
          column: 12
        },
        end: {
          line: 341,
          column: 24
        }
      },
      "105": {
        start: {
          line: 349,
          column: 8
        },
        end: {
          line: 349,
          column: 32
        }
      },
      "106": {
        start: {
          line: 350,
          column: 8
        },
        end: {
          line: 352,
          column: 9
        }
      },
      "107": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 351,
          column: 59
        }
      },
      "108": {
        start: {
          line: 353,
          column: 8
        },
        end: {
          line: 403,
          column: 9
        }
      },
      "109": {
        start: {
          line: 354,
          column: 12
        },
        end: {
          line: 354,
          column: 75
        }
      },
      "110": {
        start: {
          line: 355,
          column: 35
        },
        end: {
          line: 355,
          column: 86
        }
      },
      "111": {
        start: {
          line: 356,
          column: 34
        },
        end: {
          line: 356,
          column: 69
        }
      },
      "112": {
        start: {
          line: 357,
          column: 27
        },
        end: {
          line: 376,
          column: 1
        }
      },
      "113": {
        start: {
          line: 377,
          column: 27
        },
        end: {
          line: 391,
          column: 14
        }
      },
      "114": {
        start: {
          line: 392,
          column: 29
        },
        end: {
          line: 392,
          column: 156
        }
      },
      "115": {
        start: {
          line: 393,
          column: 12
        },
        end: {
          line: 395,
          column: 13
        }
      },
      "116": {
        start: {
          line: 394,
          column: 16
        },
        end: {
          line: 394,
          column: 59
        }
      },
      "117": {
        start: {
          line: 396,
          column: 12
        },
        end: {
          line: 396,
          column: 65
        }
      },
      "118": {
        start: {
          line: 397,
          column: 12
        },
        end: {
          line: 397,
          column: 28
        }
      },
      "119": {
        start: {
          line: 400,
          column: 12
        },
        end: {
          line: 400,
          column: 71
        }
      },
      "120": {
        start: {
          line: 401,
          column: 12
        },
        end: {
          line: 401,
          column: 106
        }
      },
      "121": {
        start: {
          line: 402,
          column: 12
        },
        end: {
          line: 402,
          column: 24
        }
      },
      "122": {
        start: {
          line: 409,
          column: 22
        },
        end: {
          line: 409,
          column: 24
        }
      },
      "123": {
        start: {
          line: 411,
          column: 8
        },
        end: {
          line: 413,
          column: 9
        }
      },
      "124": {
        start: {
          line: 412,
          column: 12
        },
        end: {
          line: 412,
          column: 64
        }
      },
      "125": {
        start: {
          line: 415,
          column: 8
        },
        end: {
          line: 417,
          column: 9
        }
      },
      "126": {
        start: {
          line: 416,
          column: 12
        },
        end: {
          line: 416,
          column: 57
        }
      },
      "127": {
        start: {
          line: 419,
          column: 8
        },
        end: {
          line: 421,
          column: 9
        }
      },
      "128": {
        start: {
          line: 420,
          column: 12
        },
        end: {
          line: 420,
          column: 66
        }
      },
      "129": {
        start: {
          line: 423,
          column: 8
        },
        end: {
          line: 426,
          column: 9
        }
      },
      "130": {
        start: {
          line: 424,
          column: 28
        },
        end: {
          line: 424,
          column: 177
        }
      },
      "131": {
        start: {
          line: 424,
          column: 61
        },
        end: {
          line: 424,
          column: 165
        }
      },
      "132": {
        start: {
          line: 425,
          column: 12
        },
        end: {
          line: 425,
          column: 50
        }
      },
      "133": {
        start: {
          line: 428,
          column: 8
        },
        end: {
          line: 431,
          column: 9
        }
      },
      "134": {
        start: {
          line: 429,
          column: 28
        },
        end: {
          line: 429,
          column: 127
        }
      },
      "135": {
        start: {
          line: 429,
          column: 60
        },
        end: {
          line: 429,
          column: 115
        }
      },
      "136": {
        start: {
          line: 430,
          column: 12
        },
        end: {
          line: 430,
          column: 49
        }
      },
      "137": {
        start: {
          line: 433,
          column: 8
        },
        end: {
          line: 436,
          column: 9
        }
      },
      "138": {
        start: {
          line: 434,
          column: 29
        },
        end: {
          line: 434,
          column: 108
        }
      },
      "139": {
        start: {
          line: 434,
          column: 61
        },
        end: {
          line: 434,
          column: 96
        }
      },
      "140": {
        start: {
          line: 435,
          column: 12
        },
        end: {
          line: 435,
          column: 49
        }
      },
      "141": {
        start: {
          line: 437,
          column: 8
        },
        end: {
          line: 437,
          column: 34
        }
      },
      "142": {
        start: {
          line: 443,
          column: 8
        },
        end: {
          line: 481,
          column: 9
        }
      },
      "143": {
        start: {
          line: 444,
          column: 12
        },
        end: {
          line: 444,
          column: 36
        }
      },
      "144": {
        start: {
          line: 445,
          column: 27
        },
        end: {
          line: 449,
          column: 13
        }
      },
      "145": {
        start: {
          line: 451,
          column: 12
        },
        end: {
          line: 466,
          column: 13
        }
      },
      "146": {
        start: {
          line: 452,
          column: 16
        },
        end: {
          line: 465,
          column: 17
        }
      },
      "147": {
        start: {
          line: 453,
          column: 43
        },
        end: {
          line: 453,
          column: 94
        }
      },
      "148": {
        start: {
          line: 454,
          column: 20
        },
        end: {
          line: 460,
          column: 23
        }
      },
      "149": {
        start: {
          line: 461,
          column: 20
        },
        end: {
          line: 461,
          column: 41
        }
      },
      "150": {
        start: {
          line: 464,
          column: 20
        },
        end: {
          line: 464,
          column: 42
        }
      },
      "151": {
        start: {
          line: 467,
          column: 30
        },
        end: {
          line: 467,
          column: 92
        }
      },
      "152": {
        start: {
          line: 468,
          column: 12
        },
        end: {
          line: 472,
          column: 14
        }
      },
      "153": {
        start: {
          line: 475,
          column: 12
        },
        end: {
          line: 475,
          column: 66
        }
      },
      "154": {
        start: {
          line: 476,
          column: 12
        },
        end: {
          line: 480,
          column: 14
        }
      },
      "155": {
        start: {
          line: 485,
          column: 0
        },
        end: {
          line: 485,
          column: 46
        }
      },
      "156": {
        start: {
          line: 486,
          column: 0
        },
        end: {
          line: 486,
          column: 41
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        loc: {
          start: {
            line: 10,
            column: 18
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 23
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 19
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 53,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        },
        loc: {
          start: {
            line: 53,
            column: 50
          },
          end: {
            line: 79,
            column: 5
          }
        },
        line: 53
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 83,
            column: 5
          }
        },
        loc: {
          start: {
            line: 83,
            column: 50
          },
          end: {
            line: 97,
            column: 5
          }
        },
        line: 83
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 101,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        },
        loc: {
          start: {
            line: 101,
            column: 45
          },
          end: {
            line: 202,
            column: 5
          }
        },
        line: 101
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 206,
            column: 4
          },
          end: {
            line: 206,
            column: 5
          }
        },
        loc: {
          start: {
            line: 206,
            column: 63
          },
          end: {
            line: 266,
            column: 5
          }
        },
        line: 206
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 270,
            column: 4
          },
          end: {
            line: 270,
            column: 5
          }
        },
        loc: {
          start: {
            line: 270,
            column: 70
          },
          end: {
            line: 343,
            column: 5
          }
        },
        line: 270
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 280,
            column: 44
          },
          end: {
            line: 280,
            column: 45
          }
        },
        loc: {
          start: {
            line: 280,
            column: 54
          },
          end: {
            line: 280,
            column: 105
          }
        },
        line: 280
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 347,
            column: 4
          },
          end: {
            line: 347,
            column: 5
          }
        },
        loc: {
          start: {
            line: 347,
            column: 77
          },
          end: {
            line: 404,
            column: 5
          }
        },
        line: 347
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 408,
            column: 4
          },
          end: {
            line: 408,
            column: 5
          }
        },
        loc: {
          start: {
            line: 408,
            column: 35
          },
          end: {
            line: 438,
            column: 5
          }
        },
        line: 408
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 424,
            column: 54
          },
          end: {
            line: 424,
            column: 55
          }
        },
        loc: {
          start: {
            line: 424,
            column: 61
          },
          end: {
            line: 424,
            column: 165
          }
        },
        line: 424
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 429,
            column: 53
          },
          end: {
            line: 429,
            column: 54
          }
        },
        loc: {
          start: {
            line: 429,
            column: 60
          },
          end: {
            line: 429,
            column: 115
          }
        },
        line: 429
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 434,
            column: 53
          },
          end: {
            line: 434,
            column: 54
          }
        },
        loc: {
          start: {
            line: 434,
            column: 61
          },
          end: {
            line: 434,
            column: 96
          }
        },
        line: 434
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 442,
            column: 4
          },
          end: {
            line: 442,
            column: 5
          }
        },
        loc: {
          start: {
            line: 442,
            column: 24
          },
          end: {
            line: 482,
            column: 5
          }
        },
        line: 442
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 30
          },
          end: {
            line: 14,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 14,
            column: 30
          },
          end: {
            line: 14,
            column: 63
          }
        }, {
          start: {
            line: 14,
            column: 67
          },
          end: {
            line: 14,
            column: 69
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 15,
            column: 28
          },
          end: {
            line: 15,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 15,
            column: 28
          },
          end: {
            line: 15,
            column: 60
          }
        }, {
          start: {
            line: 15,
            column: 64
          },
          end: {
            line: 15,
            column: 66
          }
        }],
        line: 15
      },
      "2": {
        loc: {
          start: {
            line: 16,
            column: 38
          },
          end: {
            line: 16,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 38
          },
          end: {
            line: 16,
            column: 80
          }
        }, {
          start: {
            line: 16,
            column: 84
          },
          end: {
            line: 16,
            column: 86
          }
        }],
        line: 16
      },
      "3": {
        loc: {
          start: {
            line: 17,
            column: 36
          },
          end: {
            line: 17,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 17,
            column: 36
          },
          end: {
            line: 17,
            column: 77
          }
        }, {
          start: {
            line: 17,
            column: 81
          },
          end: {
            line: 17,
            column: 83
          }
        }],
        line: 17
      },
      "4": {
        loc: {
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 21,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 21,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      },
      "5": {
        loc: {
          start: {
            line: 24,
            column: 12
          },
          end: {
            line: 30,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 12
          },
          end: {
            line: 30,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "6": {
        loc: {
          start: {
            line: 24,
            column: 16
          },
          end: {
            line: 24,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 16
          },
          end: {
            line: 24,
            column: 35
          }
        }, {
          start: {
            line: 24,
            column: 39
          },
          end: {
            line: 24,
            column: 56
          }
        }],
        line: 24
      },
      "7": {
        loc: {
          start: {
            line: 32,
            column: 12
          },
          end: {
            line: 40,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 12
          },
          end: {
            line: 40,
            column: 13
          }
        }, {
          start: {
            line: 36,
            column: 17
          },
          end: {
            line: 40,
            column: 13
          }
        }],
        line: 32
      },
      "8": {
        loc: {
          start: {
            line: 32,
            column: 16
          },
          end: {
            line: 32,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 32,
            column: 16
          },
          end: {
            line: 32,
            column: 43
          }
        }, {
          start: {
            line: 32,
            column: 47
          },
          end: {
            line: 32,
            column: 72
          }
        }],
        line: 32
      },
      "9": {
        loc: {
          start: {
            line: 36,
            column: 17
          },
          end: {
            line: 40,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 17
          },
          end: {
            line: 40,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "10": {
        loc: {
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 57,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "11": {
        loc: {
          start: {
            line: 64,
            column: 34
          },
          end: {
            line: 64,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 64,
            column: 34
          },
          end: {
            line: 64,
            column: 48
          }
        }, {
          start: {
            line: 64,
            column: 52
          },
          end: {
            line: 64,
            column: 54
          }
        }],
        line: 64
      },
      "12": {
        loc: {
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 76,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 76,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "13": {
        loc: {
          start: {
            line: 103,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      },
      "14": {
        loc: {
          start: {
            line: 106,
            column: 31
          },
          end: {
            line: 106,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 106,
            column: 31
          },
          end: {
            line: 106,
            column: 71
          }
        }, {
          start: {
            line: 106,
            column: 75
          },
          end: {
            line: 106,
            column: 82
          }
        }],
        line: 106
      },
      "15": {
        loc: {
          start: {
            line: 189,
            column: 29
          },
          end: {
            line: 189,
            column: 156
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 189,
            column: 137
          },
          end: {
            line: 189,
            column: 143
          }
        }, {
          start: {
            line: 189,
            column: 146
          },
          end: {
            line: 189,
            column: 156
          }
        }],
        line: 189
      },
      "16": {
        loc: {
          start: {
            line: 189,
            column: 29
          },
          end: {
            line: 189,
            column: 134
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 189,
            column: 29
          },
          end: {
            line: 189,
            column: 117
          }
        }, {
          start: {
            line: 189,
            column: 121
          },
          end: {
            line: 189,
            column: 134
          }
        }],
        line: 189
      },
      "17": {
        loc: {
          start: {
            line: 189,
            column: 35
          },
          end: {
            line: 189,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 189,
            column: 88
          },
          end: {
            line: 189,
            column: 94
          }
        }, {
          start: {
            line: 189,
            column: 97
          },
          end: {
            line: 189,
            column: 107
          }
        }],
        line: 189
      },
      "18": {
        loc: {
          start: {
            line: 189,
            column: 35
          },
          end: {
            line: 189,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 189,
            column: 35
          },
          end: {
            line: 189,
            column: 68
          }
        }, {
          start: {
            line: 189,
            column: 72
          },
          end: {
            line: 189,
            column: 85
          }
        }],
        line: 189
      },
      "19": {
        loc: {
          start: {
            line: 190,
            column: 12
          },
          end: {
            line: 192,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 190,
            column: 12
          },
          end: {
            line: 192,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 190
      },
      "20": {
        loc: {
          start: {
            line: 206,
            column: 49
          },
          end: {
            line: 206,
            column: 61
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 206,
            column: 59
          },
          end: {
            line: 206,
            column: 61
          }
        }],
        line: 206
      },
      "21": {
        loc: {
          start: {
            line: 209,
            column: 8
          },
          end: {
            line: 211,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 209,
            column: 8
          },
          end: {
            line: 211,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 209
      },
      "22": {
        loc: {
          start: {
            line: 214,
            column: 35
          },
          end: {
            line: 214,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 214,
            column: 35
          },
          end: {
            line: 214,
            column: 75
          }
        }, {
          start: {
            line: 214,
            column: 79
          },
          end: {
            line: 214,
            column: 86
          }
        }],
        line: 214
      },
      "23": {
        loc: {
          start: {
            line: 215,
            column: 33
          },
          end: {
            line: 215,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 215,
            column: 33
          },
          end: {
            line: 215,
            column: 53
          }
        }, {
          start: {
            line: 215,
            column: 57
          },
          end: {
            line: 215,
            column: 59
          }
        }],
        line: 215
      },
      "24": {
        loc: {
          start: {
            line: 216,
            column: 31
          },
          end: {
            line: 216,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 216,
            column: 31
          },
          end: {
            line: 216,
            column: 49
          }
        }, {
          start: {
            line: 216,
            column: 53
          },
          end: {
            line: 216,
            column: 60
          }
        }],
        line: 216
      },
      "25": {
        loc: {
          start: {
            line: 218,
            column: 31
          },
          end: {
            line: 220,
            column: 20
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 219,
            column: 18
          },
          end: {
            line: 219,
            column: 106
          }
        }, {
          start: {
            line: 220,
            column: 18
          },
          end: {
            line: 220,
            column: 20
          }
        }],
        line: 218
      },
      "26": {
        loc: {
          start: {
            line: 218,
            column: 31
          },
          end: {
            line: 218,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 218,
            column: 31
          },
          end: {
            line: 218,
            column: 47
          }
        }, {
          start: {
            line: 218,
            column: 51
          },
          end: {
            line: 218,
            column: 66
          }
        }, {
          start: {
            line: 218,
            column: 70
          },
          end: {
            line: 218,
            column: 92
          }
        }],
        line: 218
      },
      "27": {
        loc: {
          start: {
            line: 253,
            column: 29
          },
          end: {
            line: 253,
            column: 156
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 253,
            column: 137
          },
          end: {
            line: 253,
            column: 143
          }
        }, {
          start: {
            line: 253,
            column: 146
          },
          end: {
            line: 253,
            column: 156
          }
        }],
        line: 253
      },
      "28": {
        loc: {
          start: {
            line: 253,
            column: 29
          },
          end: {
            line: 253,
            column: 134
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 253,
            column: 29
          },
          end: {
            line: 253,
            column: 117
          }
        }, {
          start: {
            line: 253,
            column: 121
          },
          end: {
            line: 253,
            column: 134
          }
        }],
        line: 253
      },
      "29": {
        loc: {
          start: {
            line: 253,
            column: 35
          },
          end: {
            line: 253,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 253,
            column: 88
          },
          end: {
            line: 253,
            column: 94
          }
        }, {
          start: {
            line: 253,
            column: 97
          },
          end: {
            line: 253,
            column: 107
          }
        }],
        line: 253
      },
      "30": {
        loc: {
          start: {
            line: 253,
            column: 35
          },
          end: {
            line: 253,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 253,
            column: 35
          },
          end: {
            line: 253,
            column: 68
          }
        }, {
          start: {
            line: 253,
            column: 72
          },
          end: {
            line: 253,
            column: 85
          }
        }],
        line: 253
      },
      "31": {
        loc: {
          start: {
            line: 254,
            column: 12
          },
          end: {
            line: 256,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 254,
            column: 12
          },
          end: {
            line: 256,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 254
      },
      "32": {
        loc: {
          start: {
            line: 270,
            column: 56
          },
          end: {
            line: 270,
            column: 68
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 270,
            column: 66
          },
          end: {
            line: 270,
            column: 68
          }
        }],
        line: 270
      },
      "33": {
        loc: {
          start: {
            line: 273,
            column: 8
          },
          end: {
            line: 275,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 273,
            column: 8
          },
          end: {
            line: 275,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 273
      },
      "34": {
        loc: {
          start: {
            line: 278,
            column: 35
          },
          end: {
            line: 278,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 278,
            column: 35
          },
          end: {
            line: 278,
            column: 75
          }
        }, {
          start: {
            line: 278,
            column: 79
          },
          end: {
            line: 278,
            column: 86
          }
        }],
        line: 278
      },
      "35": {
        loc: {
          start: {
            line: 280,
            column: 69
          },
          end: {
            line: 280,
            column: 103
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 280,
            column: 69
          },
          end: {
            line: 280,
            column: 79
          }
        }, {
          start: {
            line: 280,
            column: 83
          },
          end: {
            line: 280,
            column: 103
          }
        }],
        line: 280
      },
      "36": {
        loc: {
          start: {
            line: 281,
            column: 31
          },
          end: {
            line: 283,
            column: 20
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 282,
            column: 18
          },
          end: {
            line: 282,
            column: 101
          }
        }, {
          start: {
            line: 283,
            column: 18
          },
          end: {
            line: 283,
            column: 20
          }
        }],
        line: 281
      },
      "37": {
        loc: {
          start: {
            line: 281,
            column: 31
          },
          end: {
            line: 281,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 281,
            column: 31
          },
          end: {
            line: 281,
            column: 47
          }
        }, {
          start: {
            line: 281,
            column: 51
          },
          end: {
            line: 281,
            column: 66
          }
        }, {
          start: {
            line: 281,
            column: 70
          },
          end: {
            line: 281,
            column: 91
          }
        }],
        line: 281
      },
      "38": {
        loc: {
          start: {
            line: 330,
            column: 29
          },
          end: {
            line: 330,
            column: 156
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 330,
            column: 137
          },
          end: {
            line: 330,
            column: 143
          }
        }, {
          start: {
            line: 330,
            column: 146
          },
          end: {
            line: 330,
            column: 156
          }
        }],
        line: 330
      },
      "39": {
        loc: {
          start: {
            line: 330,
            column: 29
          },
          end: {
            line: 330,
            column: 134
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 330,
            column: 29
          },
          end: {
            line: 330,
            column: 117
          }
        }, {
          start: {
            line: 330,
            column: 121
          },
          end: {
            line: 330,
            column: 134
          }
        }],
        line: 330
      },
      "40": {
        loc: {
          start: {
            line: 330,
            column: 35
          },
          end: {
            line: 330,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 330,
            column: 88
          },
          end: {
            line: 330,
            column: 94
          }
        }, {
          start: {
            line: 330,
            column: 97
          },
          end: {
            line: 330,
            column: 107
          }
        }],
        line: 330
      },
      "41": {
        loc: {
          start: {
            line: 330,
            column: 35
          },
          end: {
            line: 330,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 330,
            column: 35
          },
          end: {
            line: 330,
            column: 68
          }
        }, {
          start: {
            line: 330,
            column: 72
          },
          end: {
            line: 330,
            column: 85
          }
        }],
        line: 330
      },
      "42": {
        loc: {
          start: {
            line: 331,
            column: 12
          },
          end: {
            line: 333,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 331,
            column: 12
          },
          end: {
            line: 333,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 331
      },
      "43": {
        loc: {
          start: {
            line: 350,
            column: 8
          },
          end: {
            line: 352,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 350,
            column: 8
          },
          end: {
            line: 352,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 350
      },
      "44": {
        loc: {
          start: {
            line: 355,
            column: 35
          },
          end: {
            line: 355,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 355,
            column: 35
          },
          end: {
            line: 355,
            column: 75
          }
        }, {
          start: {
            line: 355,
            column: 79
          },
          end: {
            line: 355,
            column: 86
          }
        }],
        line: 355
      },
      "45": {
        loc: {
          start: {
            line: 362,
            column: 19
          },
          end: {
            line: 362,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 362,
            column: 19
          },
          end: {
            line: 362,
            column: 33
          }
        }, {
          start: {
            line: 362,
            column: 37
          },
          end: {
            line: 362,
            column: 51
          }
        }],
        line: 362
      },
      "46": {
        loc: {
          start: {
            line: 392,
            column: 29
          },
          end: {
            line: 392,
            column: 156
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 392,
            column: 137
          },
          end: {
            line: 392,
            column: 143
          }
        }, {
          start: {
            line: 392,
            column: 146
          },
          end: {
            line: 392,
            column: 156
          }
        }],
        line: 392
      },
      "47": {
        loc: {
          start: {
            line: 392,
            column: 29
          },
          end: {
            line: 392,
            column: 134
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 392,
            column: 29
          },
          end: {
            line: 392,
            column: 117
          }
        }, {
          start: {
            line: 392,
            column: 121
          },
          end: {
            line: 392,
            column: 134
          }
        }],
        line: 392
      },
      "48": {
        loc: {
          start: {
            line: 392,
            column: 35
          },
          end: {
            line: 392,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 392,
            column: 88
          },
          end: {
            line: 392,
            column: 94
          }
        }, {
          start: {
            line: 392,
            column: 97
          },
          end: {
            line: 392,
            column: 107
          }
        }],
        line: 392
      },
      "49": {
        loc: {
          start: {
            line: 392,
            column: 35
          },
          end: {
            line: 392,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 392,
            column: 35
          },
          end: {
            line: 392,
            column: 68
          }
        }, {
          start: {
            line: 392,
            column: 72
          },
          end: {
            line: 392,
            column: 85
          }
        }],
        line: 392
      },
      "50": {
        loc: {
          start: {
            line: 393,
            column: 12
          },
          end: {
            line: 395,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 393,
            column: 12
          },
          end: {
            line: 395,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 393
      },
      "51": {
        loc: {
          start: {
            line: 411,
            column: 8
          },
          end: {
            line: 413,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 411,
            column: 8
          },
          end: {
            line: 413,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 411
      },
      "52": {
        loc: {
          start: {
            line: 415,
            column: 8
          },
          end: {
            line: 417,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 415,
            column: 8
          },
          end: {
            line: 417,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 415
      },
      "53": {
        loc: {
          start: {
            line: 419,
            column: 8
          },
          end: {
            line: 421,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 419,
            column: 8
          },
          end: {
            line: 421,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 419
      },
      "54": {
        loc: {
          start: {
            line: 423,
            column: 8
          },
          end: {
            line: 426,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 423,
            column: 8
          },
          end: {
            line: 426,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 423
      },
      "55": {
        loc: {
          start: {
            line: 424,
            column: 118
          },
          end: {
            line: 424,
            column: 142
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 424,
            column: 118
          },
          end: {
            line: 424,
            column: 129
          }
        }, {
          start: {
            line: 424,
            column: 133
          },
          end: {
            line: 424,
            column: 142
          }
        }],
        line: 424
      },
      "56": {
        loc: {
          start: {
            line: 428,
            column: 8
          },
          end: {
            line: 431,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 428,
            column: 8
          },
          end: {
            line: 431,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 428
      },
      "57": {
        loc: {
          start: {
            line: 433,
            column: 8
          },
          end: {
            line: 436,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 433,
            column: 8
          },
          end: {
            line: 436,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 433
      },
      "58": {
        loc: {
          start: {
            line: 451,
            column: 12
          },
          end: {
            line: 466,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 451,
            column: 12
          },
          end: {
            line: 466,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 451
      },
      "59": {
        loc: {
          start: {
            line: 453,
            column: 43
          },
          end: {
            line: 453,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 453,
            column: 43
          },
          end: {
            line: 453,
            column: 83
          }
        }, {
          start: {
            line: 453,
            column: 87
          },
          end: {
            line: 453,
            column: 94
          }
        }],
        line: 453
      },
      "60": {
        loc: {
          start: {
            line: 467,
            column: 30
          },
          end: {
            line: 467,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 467,
            column: 30
          },
          end: {
            line: 467,
            column: 48
          }
        }, {
          start: {
            line: 467,
            column: 53
          },
          end: {
            line: 467,
            column: 66
          }
        }, {
          start: {
            line: 467,
            column: 70
          },
          end: {
            line: 467,
            column: 91
          }
        }],
        line: 467
      },
      "61": {
        loc: {
          start: {
            line: 469,
            column: 24
          },
          end: {
            line: 469,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 469,
            column: 36
          },
          end: {
            line: 469,
            column: 45
          }
        }, {
          start: {
            line: 469,
            column: 48
          },
          end: {
            line: 469,
            column: 59
          }
        }],
        line: 469
      },
      "62": {
        loc: {
          start: {
            line: 479,
            column: 34
          },
          end: {
            line: 479,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 479,
            column: 59
          },
          end: {
            line: 479,
            column: 72
          }
        }, {
          start: {
            line: 479,
            column: 75
          },
          end: {
            line: 479,
            column: 90
          }
        }],
        line: 479
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0, 0],
      "61": [0, 0],
      "62": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/services/azure-ai-service.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/services/azure-ai-service.ts"],
      sourcesContent: ["import { DefaultAzureCredential } from '@azure/identity';\nimport { AzureKeyCredential } from '@azure/core-auth';\nimport { DocumentAnalysisClient } from '@azure/ai-form-recognizer';\nimport { OpenAI, AzureOpenAI } from 'openai';\nimport { logServerError } from '@/lib/errors';\n\nexport interface ExtractedResumeData {\n  personalInfo: {\n    name?: string;\n    email?: string;\n    phone?: string;\n    address?: string;\n    linkedin?: string;\n    github?: string;\n  };\n  summary?: string;\n  skills: string[];\n  experience: WorkExperience[];\n  education: Education[];\n  projects: Project[];\n  certifications: Certification[];\n  languages: string[];\n}\n\nexport interface WorkExperience {\n  company: string;\n  position: string;\n  startDate?: string;\n  endDate?: string;\n  isCurrent?: boolean;\n  description: string;\n  achievements?: string[];\n  technologies?: string[];\n}\n\nexport interface Education {\n  institution: string;\n  degree: string;\n  field: string;\n  startDate?: string;\n  endDate?: string;\n  gpa?: number;\n  description?: string;\n}\n\nexport interface Project {\n  name: string;\n  description: string;\n  technologies?: string[];\n  url?: string;\n  github?: string;\n  startDate?: string;\n  endDate?: string;\n}\n\nexport interface Certification {\n  name: string;\n  issuer: string;\n  date?: string;\n  expiryDate?: string;\n  credentialId?: string;\n  url?: string;\n}\n\nexport interface InterviewQuestionGenerationOptions {\n  jobTitle?: string;\n  company?: string;\n  jobDescription?: string;\n  maxQuestions?: number;\n  difficulty?: 'easy' | 'medium' | 'hard' | 'mixed';\n  categories?: string[];\n}\n\nexport interface FeedbackGenerationOptions {\n  jobTitle?: string;\n  company?: string;\n  interviewType?: string;\n}\n\nexport interface GeneratedFeedback {\n  overallScore: number;\n  strengths: string[];\n  improvements: string[];\n  detailedFeedback: string;\n  categoryScores: {\n    technical: number;\n    communication: number;\n    problemSolving: number;\n    experience: number;\n  };\n}\n\nclass AzureAIService {\n  private openAIClient: AzureOpenAI | null = null;\n  private formRecognizerClient: DocumentAnalysisClient | null = null;\n  private initialized = false;\n  private openAIEndpoint: string;\n  private openAIApiKey: string;\n  private formRecognizerEndpoint: string;\n  private formRecognizerApiKey: string;\n\n  constructor() {\n    this.openAIEndpoint = process.env.AZURE_OPENAI_ENDPOINT || '';\n    this.openAIApiKey = process.env.AZURE_OPENAI_API_KEY || '';\n    this.formRecognizerEndpoint = process.env.AZURE_FORM_RECOGNIZER_ENDPOINT || '';\n    this.formRecognizerApiKey = process.env.AZURE_FORM_RECOGNIZER_API_KEY || '';\n  }\n\n  async initialize(): Promise<void> {\n    if (this.initialized) return;\n\n    try {\n      // Initialize Azure OpenAI\n      if (this.openAIEndpoint && this.openAIApiKey) {\n        this.openAIClient = new AzureOpenAI({\n          endpoint: this.openAIEndpoint,\n          apiKey: this.openAIApiKey,\n        });\n        console.log('\u2705 Azure OpenAI client initialized');\n      }\n\n      // Initialize Azure Form Recognizer\n      if (this.formRecognizerEndpoint && this.formRecognizerApiKey) {\n        this.formRecognizerClient = new DocumentAnalysisClient(\n          this.formRecognizerEndpoint,\n          new AzureKeyCredential(this.formRecognizerApiKey)\n        );\n        console.log('\u2705 Azure Form Recognizer client initialized');\n      } else if (this.formRecognizerEndpoint) {\n        // Use managed identity\n        this.formRecognizerClient = new DocumentAnalysisClient(\n          this.formRecognizerEndpoint,\n          new DefaultAzureCredential()\n        );\n        console.log('\u2705 Azure Form Recognizer client initialized with managed identity');\n      }\n\n      this.initialized = true;\n      console.log('\u2705 Azure AI service initialized');\n    } catch (error) {\n      console.error('\u274C Failed to initialize Azure AI service:', error);\n      logServerError(error as Error, { service: 'azure-ai', action: 'initialize' });\n      throw error;\n    }\n  }\n\n  /**\n   * Extract resume data using Azure Form Recognizer\n   */\n  async extractResumeData(fileBuffer: Buffer, mimeType: string): Promise<ExtractedResumeData> {\n    await this.initialize();\n\n    if (!this.formRecognizerClient) {\n      throw new Error('Azure Form Recognizer not configured');\n    }\n\n    try {\n      console.log('\uD83D\uDD0D Extracting resume data with Azure Form Recognizer...');\n\n      // Use the general document model for resume analysis\n      const poller = await this.formRecognizerClient.beginAnalyzeDocument(\n        'prebuilt-document',\n        fileBuffer\n      );\n      \n      const result = await poller.pollUntilDone();\n\n      // Extract text content\n      const extractedText = result.content || '';\n      \n      // Use OpenAI to structure the extracted text into resume data\n      const structuredData = await this.structureResumeData(extractedText);\n      \n      console.log('\u2705 Resume data extracted successfully');\n      return structuredData;\n    } catch (error) {\n      console.error('\u274C Failed to extract resume data:', error);\n      logServerError(error as Error, { service: 'azure-ai', action: 'extract-resume' });\n      \n      // Fallback: try with OpenAI only using text extraction\n      if (this.openAIClient) {\n        return this.extractResumeDataWithOpenAI(fileBuffer);\n      }\n      \n      throw error;\n    }\n  }\n\n  /**\n   * Fallback resume extraction using OpenAI only\n   */\n  private async extractResumeDataWithOpenAI(fileBuffer: Buffer): Promise<ExtractedResumeData> {\n    console.log('\uD83D\uDD04 Falling back to OpenAI-only resume extraction...');\n    \n    // For now, return a basic structure and let the text-based extraction handle it\n    // In a real implementation, you'd need to first extract text from the PDF/DOC\n    const basicData: ExtractedResumeData = {\n      personalInfo: {},\n      skills: [],\n      experience: [],\n      education: [],\n      projects: [],\n      certifications: [],\n      languages: []\n    };\n\n    return basicData;\n  }\n\n  /**\n   * Structure extracted text into resume data using OpenAI\n   */\n  private async structureResumeData(extractedText: string): Promise<ExtractedResumeData> {\n    if (!this.openAIClient) {\n      throw new Error('Azure OpenAI not configured');\n    }\n\n    const deploymentName = process.env.AZURE_OPENAI_DEPLOYMENT_NAME || 'gpt-4';\n\n    const prompt = `\nPlease analyze the following resume text and extract structured information. Return the data as a JSON object with the following structure:\n\n{\n  \"personalInfo\": {\n    \"name\": \"\",\n    \"email\": \"\",\n    \"phone\": \"\",\n    \"address\": \"\",\n    \"linkedin\": \"\",\n    \"github\": \"\"\n  },\n  \"summary\": \"\",\n  \"skills\": [],\n  \"experience\": [\n    {\n      \"company\": \"\",\n      \"position\": \"\",\n      \"startDate\": \"\",\n      \"endDate\": \"\",\n      \"isCurrent\": false,\n      \"description\": \"\",\n      \"achievements\": [],\n      \"technologies\": []\n    }\n  ],\n  \"education\": [\n    {\n      \"institution\": \"\",\n      \"degree\": \"\",\n      \"field\": \"\",\n      \"startDate\": \"\",\n      \"endDate\": \"\",\n      \"gpa\": 0,\n      \"description\": \"\"\n    }\n  ],\n  \"projects\": [\n    {\n      \"name\": \"\",\n      \"description\": \"\",\n      \"technologies\": [],\n      \"url\": \"\",\n      \"github\": \"\",\n      \"startDate\": \"\",\n      \"endDate\": \"\"\n    }\n  ],\n  \"certifications\": [\n    {\n      \"name\": \"\",\n      \"issuer\": \"\",\n      \"date\": \"\",\n      \"expiryDate\": \"\",\n      \"credentialId\": \"\",\n      \"url\": \"\"\n    }\n  ],\n  \"languages\": []\n}\n\nResume text:\n${extractedText}\n\nPlease extract and structure the information accurately. If some information is not available, use empty strings or arrays.\n`;\n\n    try {\n      const result = await this.openAIClient.chat.completions.create({\n        model: deploymentName,\n        messages: [\n          {\n            role: 'system',\n            content: 'You are an expert resume parser. Extract structured data from resume text and return valid JSON only.'\n          },\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        temperature: 0.1,\n        max_tokens: 2000\n      });\n\n      const response = result.choices[0]?.message?.content;\n      if (!response) {\n        throw new Error('No response from OpenAI');\n      }\n\n      // Parse the JSON response\n      const structuredData = JSON.parse(response);\n      return structuredData as ExtractedResumeData;\n    } catch (error) {\n      console.error('Failed to structure resume data with OpenAI:', error);\n      logServerError(error as Error, { service: 'azure-ai', action: 'structure-resume' });\n      throw error;\n    }\n  }\n\n  /**\n   * Generate interview questions based on resume data and job details\n   */\n  async generateInterviewQuestions(\n    resumeData: ExtractedResumeData,\n    options: InterviewQuestionGenerationOptions = {}\n  ): Promise<string[]> {\n    await this.initialize();\n\n    if (!this.openAIClient) {\n      throw new Error('Azure OpenAI not configured');\n    }\n\n    try {\n      console.log('\uD83E\uDD16 Generating interview questions with Azure OpenAI...');\n\n      const deploymentName = process.env.AZURE_OPENAI_DEPLOYMENT_NAME || 'gpt-4';\n      const maxQuestions = options.maxQuestions || 10;\n      const difficulty = options.difficulty || 'mixed';\n\n      const resumeContext = this.buildResumeContext(resumeData);\n      const jobContext = options.jobTitle || options.company || options.jobDescription \n        ? `Job: ${options.jobTitle} at ${options.company}\\nDescription: ${options.jobDescription}` \n        : '';\n\n      const prompt = `\nBased on the following resume and job information, generate ${maxQuestions} interview questions with ${difficulty} difficulty level.\n\n${resumeContext}\n\n${jobContext}\n\nGenerate questions that:\n1. Test technical skills mentioned in the resume\n2. Explore experience and achievements\n3. Assess problem-solving abilities\n4. Evaluate cultural fit and motivation\n5. Are relevant to the job role (if provided)\n\nReturn only a JSON array of questions as strings, no additional text.\nExample format: [\"Question 1\", \"Question 2\", ...]\n`;\n\n      const result = await this.openAIClient.chat.completions.create({\n        model: deploymentName,\n        messages: [\n          {\n            role: 'system',\n            content: 'You are an expert interviewer. Generate relevant, challenging interview questions based on resume data and job requirements. Return only valid JSON array.'\n          },\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        temperature: 0.7,\n        max_tokens: 1500\n      });\n\n      const response = result.choices[0]?.message?.content;\n      if (!response) {\n        throw new Error('No response from OpenAI');\n      }\n\n      const questions = JSON.parse(response);\n      console.log(`\u2705 Generated ${questions.length} interview questions`);\n      return questions;\n    } catch (error) {\n      console.error('\u274C Failed to generate interview questions:', error);\n      logServerError(error as Error, { service: 'azure-ai', action: 'generate-questions' });\n      throw error;\n    }\n  }\n\n  /**\n   * Generate interview feedback based on questions and answers\n   */\n  async generateInterviewFeedback(\n    questions: string[],\n    answers: string[],\n    options: FeedbackGenerationOptions = {}\n  ): Promise<GeneratedFeedback> {\n    await this.initialize();\n\n    if (!this.openAIClient) {\n      throw new Error('Azure OpenAI not configured');\n    }\n\n    try {\n      console.log('\uD83D\uDCCA Generating interview feedback with Azure OpenAI...');\n\n      const deploymentName = process.env.AZURE_OPENAI_DEPLOYMENT_NAME || 'gpt-4';\n\n      // Combine questions and answers\n      const qaContent = questions.map((q, i) => `Q: ${q}\\nA: ${answers[i] || 'No answer provided'}`).join('\\n\\n');\n\n      const jobContext = options.jobTitle || options.company || options.interviewType\n        ? `Job Context: ${options.jobTitle} at ${options.company} (${options.interviewType})`\n        : '';\n\n      const prompt = `\nAnalyze the following interview questions and answers, then provide comprehensive feedback.\n\n${jobContext}\n\nInterview Content:\n${qaContent}\n\nPlease provide feedback in the following JSON format:\n{\n  \"overallScore\": 0-100,\n  \"strengths\": [\"strength1\", \"strength2\", ...],\n  \"improvements\": [\"improvement1\", \"improvement2\", ...],\n  \"detailedFeedback\": \"Detailed paragraph feedback\",\n  \"categoryScores\": {\n    \"technical\": 0-100,\n    \"communication\": 0-100,\n    \"problemSolving\": 0-100,\n    \"experience\": 0-100\n  }\n}\n\nEvaluate based on:\n- Technical knowledge and accuracy\n- Communication clarity and structure\n- Problem-solving approach\n- Relevant experience demonstration\n- Overall interview performance\n\nProvide constructive, actionable feedback.\n`;\n\n      const result = await this.openAIClient.chat.completions.create({\n        model: deploymentName,\n        messages: [\n          {\n            role: 'system',\n            content: 'You are an expert interview evaluator. Provide comprehensive, constructive feedback on interview performance. Return only valid JSON.'\n          },\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        temperature: 0.3,\n        max_tokens: 2000\n      });\n\n      const response = result.choices[0]?.message?.content;\n      if (!response) {\n        throw new Error('No response from OpenAI');\n      }\n\n      const feedback = JSON.parse(response);\n      console.log('\u2705 Generated interview feedback successfully');\n      return feedback as GeneratedFeedback;\n    } catch (error) {\n      console.error('\u274C Failed to generate interview feedback:', error);\n      logServerError(error as Error, { service: 'azure-ai', action: 'generate-feedback' });\n      throw error;\n    }\n  }\n\n  /**\n   * Generate cover letter based on resume and job description\n   */\n  async generateCoverLetter(\n    resumeData: ExtractedResumeData,\n    jobTitle: string,\n    company: string,\n    jobDescription?: string\n  ): Promise<string> {\n    await this.initialize();\n\n    if (!this.openAIClient) {\n      throw new Error('Azure OpenAI not configured');\n    }\n\n    try {\n      console.log('\uD83D\uDCDD Generating cover letter with Azure OpenAI...');\n\n      const deploymentName = process.env.AZURE_OPENAI_DEPLOYMENT_NAME || 'gpt-4';\n      const resumeContext = this.buildResumeContext(resumeData);\n\n      const prompt = `\nWrite a professional cover letter for the following job application:\n\nPosition: ${jobTitle}\nCompany: ${company}\nJob Description: ${jobDescription || 'Not provided'}\n\nCandidate Information:\n${resumeContext}\n\nWrite a compelling cover letter that:\n1. Opens with enthusiasm for the specific role and company\n2. Highlights relevant experience and achievements from the resume\n3. Demonstrates knowledge of the company/role\n4. Shows how the candidate's skills match the job requirements\n5. Closes with a strong call to action\n\nKeep it professional, concise (3-4 paragraphs), and personalized.\nReturn only the cover letter text, no additional formatting or explanations.\n`;\n\n      const result = await this.openAIClient.chat.completions.create({\n        model: deploymentName,\n        messages: [\n          {\n            role: 'system',\n            content: 'You are an expert career coach and professional writer. Write compelling, personalized cover letters that help candidates stand out.'\n          },\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        temperature: 0.6,\n        max_tokens: 1500\n      });\n\n      const response = result.choices[0]?.message?.content;\n      if (!response) {\n        throw new Error('No response from OpenAI');\n      }\n\n      console.log('\u2705 Generated cover letter successfully');\n      return response;\n    } catch (error) {\n      console.error('\u274C Failed to generate cover letter:', error);\n      logServerError(error as Error, { service: 'azure-ai', action: 'generate-cover-letter' });\n      throw error;\n    }\n  }\n\n  /**\n   * Build resume context string for prompts\n   */\n  private buildResumeContext(resumeData: ExtractedResumeData): string {\n    const parts: string[] = [];\n\n    // Personal info\n    if (resumeData.personalInfo.name) {\n      parts.push(`Name: ${resumeData.personalInfo.name}`);\n    }\n\n    // Summary\n    if (resumeData.summary) {\n      parts.push(`Summary: ${resumeData.summary}`);\n    }\n\n    // Skills\n    if (resumeData.skills.length > 0) {\n      parts.push(`Skills: ${resumeData.skills.join(', ')}`);\n    }\n\n    // Experience\n    if (resumeData.experience.length > 0) {\n      const expText = resumeData.experience.map(exp => \n        `${exp.position} at ${exp.company} (${exp.startDate} - ${exp.endDate || 'Present'}): ${exp.description}`\n      ).join('\\n');\n      parts.push(`Experience:\\n${expText}`);\n    }\n\n    // Education\n    if (resumeData.education.length > 0) {\n      const eduText = resumeData.education.map(edu => \n        `${edu.degree} in ${edu.field} from ${edu.institution}`\n      ).join('\\n');\n      parts.push(`Education:\\n${eduText}`);\n    }\n\n    // Projects\n    if (resumeData.projects.length > 0) {\n      const projText = resumeData.projects.map(proj => \n        `${proj.name}: ${proj.description}`\n      ).join('\\n');\n      parts.push(`Projects:\\n${projText}`);\n    }\n\n    return parts.join('\\n\\n');\n  }\n\n  /**\n   * Health check for Azure AI services\n   */\n  async healthCheck(): Promise<{ status: 'healthy' | 'unhealthy'; timestamp: Date; details: any }> {\n    try {\n      await this.initialize();\n      \n      const status = {\n        openAI: !!this.openAIClient,\n        formRecognizer: !!this.formRecognizerClient,\n        initialized: this.initialized\n      };\n\n      // Try a simple OpenAI call if available\n      if (this.openAIClient) {\n        try {\n          const deploymentName = process.env.AZURE_OPENAI_DEPLOYMENT_NAME || 'gpt-4';\n          await this.openAIClient.chat.completions.create({\n            model: deploymentName,\n            messages: [\n              { role: 'user', content: 'Hello' }\n            ],\n            max_tokens: 5\n          });\n          status.openAI = true;\n        } catch (error) {\n          status.openAI = false;\n        }\n      }\n\n      const isHealthy = status.initialized && (status.openAI || status.formRecognizer);\n      \n      return { \n        status: isHealthy ? 'healthy' : 'unhealthy', \n        timestamp: new Date(),\n        details: status\n      };\n    } catch (error) {\n      console.error('Azure AI health check failed:', error);\n      return { \n        status: 'unhealthy', \n        timestamp: new Date(),\n        details: { error: error instanceof Error ? error.message : 'Unknown error' }\n      };\n    }\n  }\n}\n\n// Export singleton instance\nexport const azureAIService = new AzureAIService();\nexport default azureAIService;\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b2d1ef83094dab08272c37dd2afb928bc025ebe3"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1i0a9ol08h = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1i0a9ol08h();
cov_1i0a9ol08h().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1i0a9ol08h().s[1]++;
exports.azureAIService = void 0;
const identity_1 =
/* istanbul ignore next */
(cov_1i0a9ol08h().s[2]++, require("@azure/identity"));
const core_auth_1 =
/* istanbul ignore next */
(cov_1i0a9ol08h().s[3]++, require("@azure/core-auth"));
const ai_form_recognizer_1 =
/* istanbul ignore next */
(cov_1i0a9ol08h().s[4]++, require("@azure/ai-form-recognizer"));
const openai_1 =
/* istanbul ignore next */
(cov_1i0a9ol08h().s[5]++, require("openai"));
const errors_1 =
/* istanbul ignore next */
(cov_1i0a9ol08h().s[6]++, require("@/lib/errors"));
class AzureAIService {
  constructor() {
    /* istanbul ignore next */
    cov_1i0a9ol08h().f[0]++;
    cov_1i0a9ol08h().s[7]++;
    this.openAIClient = null;
    /* istanbul ignore next */
    cov_1i0a9ol08h().s[8]++;
    this.formRecognizerClient = null;
    /* istanbul ignore next */
    cov_1i0a9ol08h().s[9]++;
    this.initialized = false;
    /* istanbul ignore next */
    cov_1i0a9ol08h().s[10]++;
    this.openAIEndpoint =
    /* istanbul ignore next */
    (cov_1i0a9ol08h().b[0][0]++, process.env.AZURE_OPENAI_ENDPOINT) ||
    /* istanbul ignore next */
    (cov_1i0a9ol08h().b[0][1]++, '');
    /* istanbul ignore next */
    cov_1i0a9ol08h().s[11]++;
    this.openAIApiKey =
    /* istanbul ignore next */
    (cov_1i0a9ol08h().b[1][0]++, process.env.AZURE_OPENAI_API_KEY) ||
    /* istanbul ignore next */
    (cov_1i0a9ol08h().b[1][1]++, '');
    /* istanbul ignore next */
    cov_1i0a9ol08h().s[12]++;
    this.formRecognizerEndpoint =
    /* istanbul ignore next */
    (cov_1i0a9ol08h().b[2][0]++, process.env.AZURE_FORM_RECOGNIZER_ENDPOINT) ||
    /* istanbul ignore next */
    (cov_1i0a9ol08h().b[2][1]++, '');
    /* istanbul ignore next */
    cov_1i0a9ol08h().s[13]++;
    this.formRecognizerApiKey =
    /* istanbul ignore next */
    (cov_1i0a9ol08h().b[3][0]++, process.env.AZURE_FORM_RECOGNIZER_API_KEY) ||
    /* istanbul ignore next */
    (cov_1i0a9ol08h().b[3][1]++, '');
  }
  async initialize() {
    /* istanbul ignore next */
    cov_1i0a9ol08h().f[1]++;
    cov_1i0a9ol08h().s[14]++;
    if (this.initialized) {
      /* istanbul ignore next */
      cov_1i0a9ol08h().b[4][0]++;
      cov_1i0a9ol08h().s[15]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1i0a9ol08h().b[4][1]++;
    }
    cov_1i0a9ol08h().s[16]++;
    try {
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[17]++;
      // Initialize Azure OpenAI
      if (
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[6][0]++, this.openAIEndpoint) &&
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[6][1]++, this.openAIApiKey)) {
        /* istanbul ignore next */
        cov_1i0a9ol08h().b[5][0]++;
        cov_1i0a9ol08h().s[18]++;
        this.openAIClient = new openai_1.AzureOpenAI({
          endpoint: this.openAIEndpoint,
          apiKey: this.openAIApiKey
        });
        /* istanbul ignore next */
        cov_1i0a9ol08h().s[19]++;
        console.log('✅ Azure OpenAI client initialized');
      } else
      /* istanbul ignore next */
      {
        cov_1i0a9ol08h().b[5][1]++;
      }
      // Initialize Azure Form Recognizer
      cov_1i0a9ol08h().s[20]++;
      if (
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[8][0]++, this.formRecognizerEndpoint) &&
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[8][1]++, this.formRecognizerApiKey)) {
        /* istanbul ignore next */
        cov_1i0a9ol08h().b[7][0]++;
        cov_1i0a9ol08h().s[21]++;
        this.formRecognizerClient = new ai_form_recognizer_1.DocumentAnalysisClient(this.formRecognizerEndpoint, new core_auth_1.AzureKeyCredential(this.formRecognizerApiKey));
        /* istanbul ignore next */
        cov_1i0a9ol08h().s[22]++;
        console.log('✅ Azure Form Recognizer client initialized');
      } else {
        /* istanbul ignore next */
        cov_1i0a9ol08h().b[7][1]++;
        cov_1i0a9ol08h().s[23]++;
        if (this.formRecognizerEndpoint) {
          /* istanbul ignore next */
          cov_1i0a9ol08h().b[9][0]++;
          cov_1i0a9ol08h().s[24]++;
          // Use managed identity
          this.formRecognizerClient = new ai_form_recognizer_1.DocumentAnalysisClient(this.formRecognizerEndpoint, new identity_1.DefaultAzureCredential());
          /* istanbul ignore next */
          cov_1i0a9ol08h().s[25]++;
          console.log('✅ Azure Form Recognizer client initialized with managed identity');
        } else
        /* istanbul ignore next */
        {
          cov_1i0a9ol08h().b[9][1]++;
        }
      }
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[26]++;
      this.initialized = true;
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[27]++;
      console.log('✅ Azure AI service initialized');
    } catch (error) {
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[28]++;
      console.error('❌ Failed to initialize Azure AI service:', error);
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[29]++;
      (0, errors_1.logServerError)(error, {
        service: 'azure-ai',
        action: 'initialize'
      });
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[30]++;
      throw error;
    }
  }
  /**
   * Extract resume data using Azure Form Recognizer
   */
  async extractResumeData(fileBuffer, mimeType) {
    /* istanbul ignore next */
    cov_1i0a9ol08h().f[2]++;
    cov_1i0a9ol08h().s[31]++;
    await this.initialize();
    /* istanbul ignore next */
    cov_1i0a9ol08h().s[32]++;
    if (!this.formRecognizerClient) {
      /* istanbul ignore next */
      cov_1i0a9ol08h().b[10][0]++;
      cov_1i0a9ol08h().s[33]++;
      throw new Error('Azure Form Recognizer not configured');
    } else
    /* istanbul ignore next */
    {
      cov_1i0a9ol08h().b[10][1]++;
    }
    cov_1i0a9ol08h().s[34]++;
    try {
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[35]++;
      console.log('🔍 Extracting resume data with Azure Form Recognizer...');
      // Use the general document model for resume analysis
      const poller =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().s[36]++, await this.formRecognizerClient.beginAnalyzeDocument('prebuilt-document', fileBuffer));
      const result =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().s[37]++, await poller.pollUntilDone());
      // Extract text content
      const extractedText =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().s[38]++,
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[11][0]++, result.content) ||
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[11][1]++, ''));
      // Use OpenAI to structure the extracted text into resume data
      const structuredData =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().s[39]++, await this.structureResumeData(extractedText));
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[40]++;
      console.log('✅ Resume data extracted successfully');
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[41]++;
      return structuredData;
    } catch (error) {
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[42]++;
      console.error('❌ Failed to extract resume data:', error);
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[43]++;
      (0, errors_1.logServerError)(error, {
        service: 'azure-ai',
        action: 'extract-resume'
      });
      // Fallback: try with OpenAI only using text extraction
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[44]++;
      if (this.openAIClient) {
        /* istanbul ignore next */
        cov_1i0a9ol08h().b[12][0]++;
        cov_1i0a9ol08h().s[45]++;
        return this.extractResumeDataWithOpenAI(fileBuffer);
      } else
      /* istanbul ignore next */
      {
        cov_1i0a9ol08h().b[12][1]++;
      }
      cov_1i0a9ol08h().s[46]++;
      throw error;
    }
  }
  /**
   * Fallback resume extraction using OpenAI only
   */
  async extractResumeDataWithOpenAI(fileBuffer) {
    /* istanbul ignore next */
    cov_1i0a9ol08h().f[3]++;
    cov_1i0a9ol08h().s[47]++;
    console.log('🔄 Falling back to OpenAI-only resume extraction...');
    // For now, return a basic structure and let the text-based extraction handle it
    // In a real implementation, you'd need to first extract text from the PDF/DOC
    const basicData =
    /* istanbul ignore next */
    (cov_1i0a9ol08h().s[48]++, {
      personalInfo: {},
      skills: [],
      experience: [],
      education: [],
      projects: [],
      certifications: [],
      languages: []
    });
    /* istanbul ignore next */
    cov_1i0a9ol08h().s[49]++;
    return basicData;
  }
  /**
   * Structure extracted text into resume data using OpenAI
   */
  async structureResumeData(extractedText) {
    /* istanbul ignore next */
    cov_1i0a9ol08h().f[4]++;
    var _a, _b;
    /* istanbul ignore next */
    cov_1i0a9ol08h().s[50]++;
    if (!this.openAIClient) {
      /* istanbul ignore next */
      cov_1i0a9ol08h().b[13][0]++;
      cov_1i0a9ol08h().s[51]++;
      throw new Error('Azure OpenAI not configured');
    } else
    /* istanbul ignore next */
    {
      cov_1i0a9ol08h().b[13][1]++;
    }
    const deploymentName =
    /* istanbul ignore next */
    (cov_1i0a9ol08h().s[52]++,
    /* istanbul ignore next */
    (cov_1i0a9ol08h().b[14][0]++, process.env.AZURE_OPENAI_DEPLOYMENT_NAME) ||
    /* istanbul ignore next */
    (cov_1i0a9ol08h().b[14][1]++, 'gpt-4'));
    const prompt =
    /* istanbul ignore next */
    (cov_1i0a9ol08h().s[53]++, `
Please analyze the following resume text and extract structured information. Return the data as a JSON object with the following structure:

{
  "personalInfo": {
    "name": "",
    "email": "",
    "phone": "",
    "address": "",
    "linkedin": "",
    "github": ""
  },
  "summary": "",
  "skills": [],
  "experience": [
    {
      "company": "",
      "position": "",
      "startDate": "",
      "endDate": "",
      "isCurrent": false,
      "description": "",
      "achievements": [],
      "technologies": []
    }
  ],
  "education": [
    {
      "institution": "",
      "degree": "",
      "field": "",
      "startDate": "",
      "endDate": "",
      "gpa": 0,
      "description": ""
    }
  ],
  "projects": [
    {
      "name": "",
      "description": "",
      "technologies": [],
      "url": "",
      "github": "",
      "startDate": "",
      "endDate": ""
    }
  ],
  "certifications": [
    {
      "name": "",
      "issuer": "",
      "date": "",
      "expiryDate": "",
      "credentialId": "",
      "url": ""
    }
  ],
  "languages": []
}

Resume text:
${extractedText}

Please extract and structure the information accurately. If some information is not available, use empty strings or arrays.
`);
    /* istanbul ignore next */
    cov_1i0a9ol08h().s[54]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().s[55]++, await this.openAIClient.chat.completions.create({
        model: deploymentName,
        messages: [{
          role: 'system',
          content: 'You are an expert resume parser. Extract structured data from resume text and return valid JSON only.'
        }, {
          role: 'user',
          content: prompt
        }],
        temperature: 0.1,
        max_tokens: 2000
      }));
      const response =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().s[56]++,
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[16][0]++, (_b =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[18][0]++, (_a = result.choices[0]) === null) ||
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[18][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[17][0]++, void 0) :
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[17][1]++, _a.message)) === null) ||
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[16][1]++, _b === void 0) ?
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[15][0]++, void 0) :
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[15][1]++, _b.content));
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[57]++;
      if (!response) {
        /* istanbul ignore next */
        cov_1i0a9ol08h().b[19][0]++;
        cov_1i0a9ol08h().s[58]++;
        throw new Error('No response from OpenAI');
      } else
      /* istanbul ignore next */
      {
        cov_1i0a9ol08h().b[19][1]++;
      }
      // Parse the JSON response
      const structuredData =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().s[59]++, JSON.parse(response));
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[60]++;
      return structuredData;
    } catch (error) {
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[61]++;
      console.error('Failed to structure resume data with OpenAI:', error);
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[62]++;
      (0, errors_1.logServerError)(error, {
        service: 'azure-ai',
        action: 'structure-resume'
      });
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[63]++;
      throw error;
    }
  }
  /**
   * Generate interview questions based on resume data and job details
   */
  async generateInterviewQuestions(resumeData, options =
  /* istanbul ignore next */
  (cov_1i0a9ol08h().b[20][0]++, {})) {
    /* istanbul ignore next */
    cov_1i0a9ol08h().f[5]++;
    var _a, _b;
    /* istanbul ignore next */
    cov_1i0a9ol08h().s[64]++;
    await this.initialize();
    /* istanbul ignore next */
    cov_1i0a9ol08h().s[65]++;
    if (!this.openAIClient) {
      /* istanbul ignore next */
      cov_1i0a9ol08h().b[21][0]++;
      cov_1i0a9ol08h().s[66]++;
      throw new Error('Azure OpenAI not configured');
    } else
    /* istanbul ignore next */
    {
      cov_1i0a9ol08h().b[21][1]++;
    }
    cov_1i0a9ol08h().s[67]++;
    try {
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[68]++;
      console.log('🤖 Generating interview questions with Azure OpenAI...');
      const deploymentName =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().s[69]++,
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[22][0]++, process.env.AZURE_OPENAI_DEPLOYMENT_NAME) ||
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[22][1]++, 'gpt-4'));
      const maxQuestions =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().s[70]++,
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[23][0]++, options.maxQuestions) ||
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[23][1]++, 10));
      const difficulty =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().s[71]++,
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[24][0]++, options.difficulty) ||
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[24][1]++, 'mixed'));
      const resumeContext =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().s[72]++, this.buildResumeContext(resumeData));
      const jobContext =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().s[73]++,
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[26][0]++, options.jobTitle) ||
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[26][1]++, options.company) ||
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[26][2]++, options.jobDescription) ?
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[25][0]++, `Job: ${options.jobTitle} at ${options.company}\nDescription: ${options.jobDescription}`) :
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[25][1]++, ''));
      const prompt =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().s[74]++, `
Based on the following resume and job information, generate ${maxQuestions} interview questions with ${difficulty} difficulty level.

${resumeContext}

${jobContext}

Generate questions that:
1. Test technical skills mentioned in the resume
2. Explore experience and achievements
3. Assess problem-solving abilities
4. Evaluate cultural fit and motivation
5. Are relevant to the job role (if provided)

Return only a JSON array of questions as strings, no additional text.
Example format: ["Question 1", "Question 2", ...]
`);
      const result =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().s[75]++, await this.openAIClient.chat.completions.create({
        model: deploymentName,
        messages: [{
          role: 'system',
          content: 'You are an expert interviewer. Generate relevant, challenging interview questions based on resume data and job requirements. Return only valid JSON array.'
        }, {
          role: 'user',
          content: prompt
        }],
        temperature: 0.7,
        max_tokens: 1500
      }));
      const response =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().s[76]++,
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[28][0]++, (_b =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[30][0]++, (_a = result.choices[0]) === null) ||
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[30][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[29][0]++, void 0) :
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[29][1]++, _a.message)) === null) ||
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[28][1]++, _b === void 0) ?
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[27][0]++, void 0) :
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[27][1]++, _b.content));
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[77]++;
      if (!response) {
        /* istanbul ignore next */
        cov_1i0a9ol08h().b[31][0]++;
        cov_1i0a9ol08h().s[78]++;
        throw new Error('No response from OpenAI');
      } else
      /* istanbul ignore next */
      {
        cov_1i0a9ol08h().b[31][1]++;
      }
      const questions =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().s[79]++, JSON.parse(response));
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[80]++;
      console.log(`✅ Generated ${questions.length} interview questions`);
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[81]++;
      return questions;
    } catch (error) {
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[82]++;
      console.error('❌ Failed to generate interview questions:', error);
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[83]++;
      (0, errors_1.logServerError)(error, {
        service: 'azure-ai',
        action: 'generate-questions'
      });
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[84]++;
      throw error;
    }
  }
  /**
   * Generate interview feedback based on questions and answers
   */
  async generateInterviewFeedback(questions, answers, options =
  /* istanbul ignore next */
  (cov_1i0a9ol08h().b[32][0]++, {})) {
    /* istanbul ignore next */
    cov_1i0a9ol08h().f[6]++;
    var _a, _b;
    /* istanbul ignore next */
    cov_1i0a9ol08h().s[85]++;
    await this.initialize();
    /* istanbul ignore next */
    cov_1i0a9ol08h().s[86]++;
    if (!this.openAIClient) {
      /* istanbul ignore next */
      cov_1i0a9ol08h().b[33][0]++;
      cov_1i0a9ol08h().s[87]++;
      throw new Error('Azure OpenAI not configured');
    } else
    /* istanbul ignore next */
    {
      cov_1i0a9ol08h().b[33][1]++;
    }
    cov_1i0a9ol08h().s[88]++;
    try {
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[89]++;
      console.log('📊 Generating interview feedback with Azure OpenAI...');
      const deploymentName =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().s[90]++,
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[34][0]++, process.env.AZURE_OPENAI_DEPLOYMENT_NAME) ||
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[34][1]++, 'gpt-4'));
      // Combine questions and answers
      const qaContent =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().s[91]++, questions.map((q, i) => {
        /* istanbul ignore next */
        cov_1i0a9ol08h().f[7]++;
        cov_1i0a9ol08h().s[92]++;
        return `Q: ${q}\nA: ${
        /* istanbul ignore next */
        (cov_1i0a9ol08h().b[35][0]++, answers[i]) ||
        /* istanbul ignore next */
        (cov_1i0a9ol08h().b[35][1]++, 'No answer provided')}`;
      }).join('\n\n'));
      const jobContext =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().s[93]++,
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[37][0]++, options.jobTitle) ||
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[37][1]++, options.company) ||
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[37][2]++, options.interviewType) ?
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[36][0]++, `Job Context: ${options.jobTitle} at ${options.company} (${options.interviewType})`) :
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[36][1]++, ''));
      const prompt =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().s[94]++, `
Analyze the following interview questions and answers, then provide comprehensive feedback.

${jobContext}

Interview Content:
${qaContent}

Please provide feedback in the following JSON format:
{
  "overallScore": 0-100,
  "strengths": ["strength1", "strength2", ...],
  "improvements": ["improvement1", "improvement2", ...],
  "detailedFeedback": "Detailed paragraph feedback",
  "categoryScores": {
    "technical": 0-100,
    "communication": 0-100,
    "problemSolving": 0-100,
    "experience": 0-100
  }
}

Evaluate based on:
- Technical knowledge and accuracy
- Communication clarity and structure
- Problem-solving approach
- Relevant experience demonstration
- Overall interview performance

Provide constructive, actionable feedback.
`);
      const result =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().s[95]++, await this.openAIClient.chat.completions.create({
        model: deploymentName,
        messages: [{
          role: 'system',
          content: 'You are an expert interview evaluator. Provide comprehensive, constructive feedback on interview performance. Return only valid JSON.'
        }, {
          role: 'user',
          content: prompt
        }],
        temperature: 0.3,
        max_tokens: 2000
      }));
      const response =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().s[96]++,
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[39][0]++, (_b =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[41][0]++, (_a = result.choices[0]) === null) ||
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[41][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[40][0]++, void 0) :
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[40][1]++, _a.message)) === null) ||
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[39][1]++, _b === void 0) ?
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[38][0]++, void 0) :
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[38][1]++, _b.content));
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[97]++;
      if (!response) {
        /* istanbul ignore next */
        cov_1i0a9ol08h().b[42][0]++;
        cov_1i0a9ol08h().s[98]++;
        throw new Error('No response from OpenAI');
      } else
      /* istanbul ignore next */
      {
        cov_1i0a9ol08h().b[42][1]++;
      }
      const feedback =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().s[99]++, JSON.parse(response));
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[100]++;
      console.log('✅ Generated interview feedback successfully');
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[101]++;
      return feedback;
    } catch (error) {
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[102]++;
      console.error('❌ Failed to generate interview feedback:', error);
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[103]++;
      (0, errors_1.logServerError)(error, {
        service: 'azure-ai',
        action: 'generate-feedback'
      });
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[104]++;
      throw error;
    }
  }
  /**
   * Generate cover letter based on resume and job description
   */
  async generateCoverLetter(resumeData, jobTitle, company, jobDescription) {
    /* istanbul ignore next */
    cov_1i0a9ol08h().f[8]++;
    var _a, _b;
    /* istanbul ignore next */
    cov_1i0a9ol08h().s[105]++;
    await this.initialize();
    /* istanbul ignore next */
    cov_1i0a9ol08h().s[106]++;
    if (!this.openAIClient) {
      /* istanbul ignore next */
      cov_1i0a9ol08h().b[43][0]++;
      cov_1i0a9ol08h().s[107]++;
      throw new Error('Azure OpenAI not configured');
    } else
    /* istanbul ignore next */
    {
      cov_1i0a9ol08h().b[43][1]++;
    }
    cov_1i0a9ol08h().s[108]++;
    try {
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[109]++;
      console.log('📝 Generating cover letter with Azure OpenAI...');
      const deploymentName =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().s[110]++,
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[44][0]++, process.env.AZURE_OPENAI_DEPLOYMENT_NAME) ||
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[44][1]++, 'gpt-4'));
      const resumeContext =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().s[111]++, this.buildResumeContext(resumeData));
      const prompt =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().s[112]++, `
Write a professional cover letter for the following job application:

Position: ${jobTitle}
Company: ${company}
Job Description: ${
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[45][0]++, jobDescription) ||
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[45][1]++, 'Not provided')}

Candidate Information:
${resumeContext}

Write a compelling cover letter that:
1. Opens with enthusiasm for the specific role and company
2. Highlights relevant experience and achievements from the resume
3. Demonstrates knowledge of the company/role
4. Shows how the candidate's skills match the job requirements
5. Closes with a strong call to action

Keep it professional, concise (3-4 paragraphs), and personalized.
Return only the cover letter text, no additional formatting or explanations.
`);
      const result =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().s[113]++, await this.openAIClient.chat.completions.create({
        model: deploymentName,
        messages: [{
          role: 'system',
          content: 'You are an expert career coach and professional writer. Write compelling, personalized cover letters that help candidates stand out.'
        }, {
          role: 'user',
          content: prompt
        }],
        temperature: 0.6,
        max_tokens: 1500
      }));
      const response =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().s[114]++,
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[47][0]++, (_b =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[49][0]++, (_a = result.choices[0]) === null) ||
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[49][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[48][0]++, void 0) :
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[48][1]++, _a.message)) === null) ||
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[47][1]++, _b === void 0) ?
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[46][0]++, void 0) :
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[46][1]++, _b.content));
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[115]++;
      if (!response) {
        /* istanbul ignore next */
        cov_1i0a9ol08h().b[50][0]++;
        cov_1i0a9ol08h().s[116]++;
        throw new Error('No response from OpenAI');
      } else
      /* istanbul ignore next */
      {
        cov_1i0a9ol08h().b[50][1]++;
      }
      cov_1i0a9ol08h().s[117]++;
      console.log('✅ Generated cover letter successfully');
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[118]++;
      return response;
    } catch (error) {
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[119]++;
      console.error('❌ Failed to generate cover letter:', error);
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[120]++;
      (0, errors_1.logServerError)(error, {
        service: 'azure-ai',
        action: 'generate-cover-letter'
      });
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[121]++;
      throw error;
    }
  }
  /**
   * Build resume context string for prompts
   */
  buildResumeContext(resumeData) {
    /* istanbul ignore next */
    cov_1i0a9ol08h().f[9]++;
    const parts =
    /* istanbul ignore next */
    (cov_1i0a9ol08h().s[122]++, []);
    // Personal info
    /* istanbul ignore next */
    cov_1i0a9ol08h().s[123]++;
    if (resumeData.personalInfo.name) {
      /* istanbul ignore next */
      cov_1i0a9ol08h().b[51][0]++;
      cov_1i0a9ol08h().s[124]++;
      parts.push(`Name: ${resumeData.personalInfo.name}`);
    } else
    /* istanbul ignore next */
    {
      cov_1i0a9ol08h().b[51][1]++;
    }
    // Summary
    cov_1i0a9ol08h().s[125]++;
    if (resumeData.summary) {
      /* istanbul ignore next */
      cov_1i0a9ol08h().b[52][0]++;
      cov_1i0a9ol08h().s[126]++;
      parts.push(`Summary: ${resumeData.summary}`);
    } else
    /* istanbul ignore next */
    {
      cov_1i0a9ol08h().b[52][1]++;
    }
    // Skills
    cov_1i0a9ol08h().s[127]++;
    if (resumeData.skills.length > 0) {
      /* istanbul ignore next */
      cov_1i0a9ol08h().b[53][0]++;
      cov_1i0a9ol08h().s[128]++;
      parts.push(`Skills: ${resumeData.skills.join(', ')}`);
    } else
    /* istanbul ignore next */
    {
      cov_1i0a9ol08h().b[53][1]++;
    }
    // Experience
    cov_1i0a9ol08h().s[129]++;
    if (resumeData.experience.length > 0) {
      /* istanbul ignore next */
      cov_1i0a9ol08h().b[54][0]++;
      const expText =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().s[130]++, resumeData.experience.map(exp => {
        /* istanbul ignore next */
        cov_1i0a9ol08h().f[10]++;
        cov_1i0a9ol08h().s[131]++;
        return `${exp.position} at ${exp.company} (${exp.startDate} - ${
        /* istanbul ignore next */
        (cov_1i0a9ol08h().b[55][0]++, exp.endDate) ||
        /* istanbul ignore next */
        (cov_1i0a9ol08h().b[55][1]++, 'Present')}): ${exp.description}`;
      }).join('\n'));
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[132]++;
      parts.push(`Experience:\n${expText}`);
    } else
    /* istanbul ignore next */
    {
      cov_1i0a9ol08h().b[54][1]++;
    }
    // Education
    cov_1i0a9ol08h().s[133]++;
    if (resumeData.education.length > 0) {
      /* istanbul ignore next */
      cov_1i0a9ol08h().b[56][0]++;
      const eduText =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().s[134]++, resumeData.education.map(edu => {
        /* istanbul ignore next */
        cov_1i0a9ol08h().f[11]++;
        cov_1i0a9ol08h().s[135]++;
        return `${edu.degree} in ${edu.field} from ${edu.institution}`;
      }).join('\n'));
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[136]++;
      parts.push(`Education:\n${eduText}`);
    } else
    /* istanbul ignore next */
    {
      cov_1i0a9ol08h().b[56][1]++;
    }
    // Projects
    cov_1i0a9ol08h().s[137]++;
    if (resumeData.projects.length > 0) {
      /* istanbul ignore next */
      cov_1i0a9ol08h().b[57][0]++;
      const projText =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().s[138]++, resumeData.projects.map(proj => {
        /* istanbul ignore next */
        cov_1i0a9ol08h().f[12]++;
        cov_1i0a9ol08h().s[139]++;
        return `${proj.name}: ${proj.description}`;
      }).join('\n'));
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[140]++;
      parts.push(`Projects:\n${projText}`);
    } else
    /* istanbul ignore next */
    {
      cov_1i0a9ol08h().b[57][1]++;
    }
    cov_1i0a9ol08h().s[141]++;
    return parts.join('\n\n');
  }
  /**
   * Health check for Azure AI services
   */
  async healthCheck() {
    /* istanbul ignore next */
    cov_1i0a9ol08h().f[13]++;
    cov_1i0a9ol08h().s[142]++;
    try {
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[143]++;
      await this.initialize();
      const status =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().s[144]++, {
        openAI: !!this.openAIClient,
        formRecognizer: !!this.formRecognizerClient,
        initialized: this.initialized
      });
      // Try a simple OpenAI call if available
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[145]++;
      if (this.openAIClient) {
        /* istanbul ignore next */
        cov_1i0a9ol08h().b[58][0]++;
        cov_1i0a9ol08h().s[146]++;
        try {
          const deploymentName =
          /* istanbul ignore next */
          (cov_1i0a9ol08h().s[147]++,
          /* istanbul ignore next */
          (cov_1i0a9ol08h().b[59][0]++, process.env.AZURE_OPENAI_DEPLOYMENT_NAME) ||
          /* istanbul ignore next */
          (cov_1i0a9ol08h().b[59][1]++, 'gpt-4'));
          /* istanbul ignore next */
          cov_1i0a9ol08h().s[148]++;
          await this.openAIClient.chat.completions.create({
            model: deploymentName,
            messages: [{
              role: 'user',
              content: 'Hello'
            }],
            max_tokens: 5
          });
          /* istanbul ignore next */
          cov_1i0a9ol08h().s[149]++;
          status.openAI = true;
        } catch (error) {
          /* istanbul ignore next */
          cov_1i0a9ol08h().s[150]++;
          status.openAI = false;
        }
      } else
      /* istanbul ignore next */
      {
        cov_1i0a9ol08h().b[58][1]++;
      }
      const isHealthy =
      /* istanbul ignore next */
      (cov_1i0a9ol08h().s[151]++,
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[60][0]++, status.initialized) && (
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[60][1]++, status.openAI) ||
      /* istanbul ignore next */
      (cov_1i0a9ol08h().b[60][2]++, status.formRecognizer)));
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[152]++;
      return {
        status: isHealthy ?
        /* istanbul ignore next */
        (cov_1i0a9ol08h().b[61][0]++, 'healthy') :
        /* istanbul ignore next */
        (cov_1i0a9ol08h().b[61][1]++, 'unhealthy'),
        timestamp: new Date(),
        details: status
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[153]++;
      console.error('Azure AI health check failed:', error);
      /* istanbul ignore next */
      cov_1i0a9ol08h().s[154]++;
      return {
        status: 'unhealthy',
        timestamp: new Date(),
        details: {
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_1i0a9ol08h().b[62][0]++, error.message) :
          /* istanbul ignore next */
          (cov_1i0a9ol08h().b[62][1]++, 'Unknown error')
        }
      };
    }
  }
}
// Export singleton instance
/* istanbul ignore next */
cov_1i0a9ol08h().s[155]++;
exports.azureAIService = new AzureAIService();
/* istanbul ignore next */
cov_1i0a9ol08h().s[156]++;
exports.default = exports.azureAIService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,