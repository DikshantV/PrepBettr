87be7799adccafb3c8afc8ec1166f6ee
"use strict";
/**
 * Complete User Interview Flow Integration Test
 *
 * Tests end-to-end user journey from signup through interview completion,
 * validating Azure service integrations and data consistency.
 *
 * @version 2.0.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
const test_1 = require("@playwright/test");
const faker_1 = require("@faker-js/faker");
// Test data generators
const generateTestUser = () => ({
    email: faker_1.faker.internet.email(),
    password: faker_1.faker.internet.password({ length: 12, memorable: true }),
    name: faker_1.faker.person.fullName(),
    jobTitle: faker_1.faker.person.jobTitle(),
    company: faker_1.faker.company.name()
});
const TEST_RESUME_PATH = './tests/fixtures/sample-resume.pdf';
// Page Object Model for better maintainability
class AuthPage {
    constructor(page) {
        this.page = page;
    }
    async goto() {
        await this.page.goto('/auth/signin');
    }
    async signUp(user) {
        await this.page.click('[data-testid="signup-tab"]');
        await this.page.fill('[data-testid="email-input"]', user.email);
        await this.page.fill('[data-testid="password-input"]', user.password);
        await this.page.fill('[data-testid="name-input"]', user.name);
        // Wait for signup button and click
        await this.page.click('[data-testid="signup-button"]');
        // Wait for signup completion
        await this.page.waitForURL('/dashboard');
    }
    async signIn(email, password) {
        await this.page.fill('[data-testid="email-input"]', email);
        await this.page.fill('[data-testid="password-input"]', password);
        await this.page.click('[data-testid="signin-button"]');
        // Wait for sign in completion
        await this.page.waitForURL('/dashboard');
    }
    async signOut() {
        await this.page.click('[data-testid="user-menu"]');
        await this.page.click('[data-testid="signout-button"]');
        await this.page.waitForURL('/');
    }
}
class InterviewPage {
    constructor(page) {
        this.page = page;
    }
    async goto() {
        await this.page.goto('/interview');
    }
    async startVoiceInterview(jobTitle, company) {
        await this.page.click('[data-testid="start-interview-button"]');
        // Configure interview settings
        await this.page.fill('[data-testid="job-title-input"]', jobTitle);
        await this.page.fill('[data-testid="company-input"]', company);
        await this.page.selectOption('[data-testid="difficulty-select"]', 'medium');
        // Start the interview
        await this.page.click('[data-testid="begin-interview-button"]');
        // Wait for SignalR connection and initial AI response
        await this.page.waitForSelector('[data-testid="interview-active"]');
        await this.page.waitForSelector('[data-testid="ai-response"]', { timeout: 10000 });
    }
    async simulateVoiceResponse(response) {
        // Simulate microphone input (in real scenario, this would be actual voice)
        await this.page.evaluate((text) => {
            // Mock speech recognition result
            window.dispatchEvent(new CustomEvent('mock-speech-result', {
                detail: { transcript: text, confidence: 0.95 }
            }));
        }, response);
        // Wait for AI to process and respond
        await this.page.waitForSelector('[data-testid="ai-thinking"]');
        await this.page.waitForSelector('[data-testid="ai-response"]', { timeout: 15000 });
    }
    async endInterview() {
        await this.page.click('[data-testid="end-interview-button"]');
        await this.page.waitForSelector('[data-testid="interview-summary"]');
    }
    async getInterviewSummary() {
        const summary = await this.page.textContent('[data-testid="interview-summary"]');
        return summary;
    }
}
class ProfilePage {
    constructor(page) {
        this.page = page;
    }
    async goto() {
        await this.page.goto('/profile');
    }
    async uploadResume(filePath) {
        await this.page.setInputFiles('[data-testid="resume-upload"]', filePath);
        // Wait for upload completion
        await this.page.waitForSelector('[data-testid="upload-success"]', { timeout: 30000 });
        // Wait for AI processing
        await this.page.waitForSelector('[data-testid="resume-processed"]', { timeout: 60000 });
    }
    async getGeneratedQuestions() {
        const questions = await this.page.locator('[data-testid="generated-question"]').allTextContents();
        return questions;
    }
}
// Test suite
test_1.test.describe('Complete User Interview Flow', () => {
    let testUser;
    let authPage;
    let interviewPage;
    let profilePage;
    test_1.test.beforeEach(async ({ page }) => {
        testUser = generateTestUser();
        authPage = new AuthPage(page);
        interviewPage = new InterviewPage(page);
        profilePage = new ProfilePage(page);
        // Set up test environment
        await page.addInitScript(() => {
            // Mock browser APIs for testing
            window.navigator.mediaDevices = {
                getUserMedia: () => Promise.resolve(new MediaStream()),
                enumerateDevices: () => Promise.resolve([])
            };
            // Mock WebRTC APIs
            window.RTCPeerConnection = class MockRTCPeerConnection {
                createOffer() { return Promise.resolve({}); }
                createAnswer() { return Promise.resolve({}); }
                setLocalDescription() { return Promise.resolve(); }
                setRemoteDescription() { return Promise.resolve(); }
                addIceCandidate() { return Promise.resolve(); }
                close() { }
            };
        });
    });
    (0, test_1.test)('complete user journey: signup → profile setup → interview session', async ({ page }) => {
        // Step 1: User Sign Up
        test_1.test.step('User signs up with Firebase Auth', async () => {
            await authPage.goto();
            await authPage.signUp(testUser);
            // Verify user is redirected to dashboard
            await (0, test_1.expect)(page).toHaveURL('/dashboard');
            // Verify user profile data is synced to Cosmos DB
            const userProfile = await page.evaluate(() => {
                return fetch('/api/profile')
                    .then(res => res.json())
                    .catch(() => null);
            });
            (0, test_1.expect)(userProfile).toBeTruthy();
            (0, test_1.expect)(userProfile.email).toBe(testUser.email);
        });
        // Step 2: Profile Setup and Resume Upload
        test_1.test.step('User uploads resume and gets AI-generated questions', async () => {
            await profilePage.goto();
            // Upload resume to Azure Blob Storage
            await profilePage.uploadResume(TEST_RESUME_PATH);
            // Verify resume is processed and stored
            await (0, test_1.expect)(page.locator('[data-testid="resume-processed"]')).toBeVisible();
            // Verify AI-generated questions are created
            const questions = await profilePage.getGeneratedQuestions();
            (0, test_1.expect)(questions.length).toBeGreaterThan(0);
            // Verify questions are stored in Cosmos DB
            const storedQuestions = await page.evaluate(() => {
                return fetch('/api/profile/questions')
                    .then(res => res.json())
                    .catch(() => []);
            });
            (0, test_1.expect)(storedQuestions.length).toBeGreaterThan(0);
        });
        // Step 3: Interview Session Lifecycle
        test_1.test.step('Complete interview session with voice interaction', async () => {
            await interviewPage.goto();
            // Start voice interview
            await interviewPage.startVoiceInterview(testUser.jobTitle, testUser.company);
            // Verify SignalR connection is established
            await (0, test_1.expect)(page.locator('[data-testid="connection-status"]')).toContainText('Connected');
            // Verify initial AI response
            await (0, test_1.expect)(page.locator('[data-testid="ai-response"]')).toBeVisible();
            // Simulate conversation flow
            const responses = [
                "Hello, I'm excited to be here for this interview.",
                "I have 5 years of experience in software development, primarily working with React and Node.js.",
                "My biggest achievement was leading a team of 4 developers to successfully launch a customer portal that increased user engagement by 40%.",
                "I'm passionate about creating user-friendly applications and continuously learning new technologies."
            ];
            for (const response of responses) {
                await interviewPage.simulateVoiceResponse(response);
                // Verify each response is processed
                await (0, test_1.expect)(page.locator('[data-testid="ai-response"]')).toBeVisible();
                // Add small delay to simulate natural conversation flow
                await page.waitForTimeout(2000);
            }
            // End the interview
            await interviewPage.endInterview();
            // Verify interview summary is generated
            const summary = await interviewPage.getInterviewSummary();
            (0, test_1.expect)(summary).toBeTruthy();
            (0, test_1.expect)(summary).toContain('interview');
        });
        // Step 4: Data Consistency Verification
        test_1.test.step('Verify cross-service data consistency', async () => {
            // Verify interview data is stored in Cosmos DB
            const interviewData = await page.evaluate(() => {
                return fetch('/api/interviews/recent')
                    .then(res => res.json())
                    .catch(() => null);
            });
            (0, test_1.expect)(interviewData).toBeTruthy();
            (0, test_1.expect)(interviewData.userId).toBeTruthy();
            (0, test_1.expect)(interviewData.status).toBe('completed');
            // Verify usage quotas are updated
            const usageData = await page.evaluate(() => {
                return fetch('/api/usage')
                    .then(res => res.json())
                    .catch(() => null);
            });
            (0, test_1.expect)(usageData).toBeTruthy();
            (0, test_1.expect)(usageData.interviews.count).toBeGreaterThan(0);
            // Verify telemetry data is captured
            const telemetryEvents = await page.evaluate(() => {
                var _a, _b;
                return ((_b = (_a = window.appInsights) === null || _a === void 0 ? void 0 : _a.getEvents) === null || _b === void 0 ? void 0 : _b.call(_a)) || [];
            });
            (0, test_1.expect)(telemetryEvents.length).toBeGreaterThan(0);
        });
    });
    (0, test_1.test)('user authentication state persistence', async ({ page }) => {
        test_1.test.step('Sign up and verify session persistence', async () => {
            await authPage.goto();
            await authPage.signUp(testUser);
            // Verify session cookie is set
            const cookies = await page.context().cookies();
            const sessionCookie = cookies.find(c => c.name.includes('session'));
            (0, test_1.expect)(sessionCookie).toBeTruthy();
            // Refresh page and verify user remains authenticated
            await page.reload();
            await (0, test_1.expect)(page.locator('[data-testid="user-menu"]')).toBeVisible();
            // Sign out and verify session is cleared
            await authPage.signOut();
            const cookiesAfterSignOut = await page.context().cookies();
            const sessionCookieAfter = cookiesAfterSignOut.find(c => c.name.includes('session'));
            (0, test_1.expect)(sessionCookieAfter).toBeFalsy();
        });
    });
    (0, test_1.test)('error handling and recovery', async ({ page }) => {
        test_1.test.step('Handle network failures gracefully', async () => {
            await authPage.goto();
            await authPage.signUp(testUser);
            // Simulate network failure during interview
            await interviewPage.goto();
            // Intercept and fail API requests
            await page.route('/api/interview/**', route => {
                route.abort('failed');
            });
            await interviewPage.startVoiceInterview(testUser.jobTitle, testUser.company);
            // Verify error handling
            await (0, test_1.expect)(page.locator('[data-testid="error-message"]')).toBeVisible();
            await (0, test_1.expect)(page.locator('[data-testid="retry-button"]')).toBeVisible();
            // Restore network and retry
            await page.unroute('/api/interview/**');
            await page.click('[data-testid="retry-button"]');
            // Verify recovery
            await (0, test_1.expect)(page.locator('[data-testid="interview-active"]')).toBeVisible();
        });
    });
    (0, test_1.test)('performance benchmarks', async ({ page }) => {
        test_1.test.step('Measure critical path performance', async () => {
            const performanceMetrics = {
                signupTime: 0,
                resumeUploadTime: 0,
                interviewStartTime: 0,
                aiResponseTime: 0
            };
            // Measure signup performance
            const signupStart = Date.now();
            await authPage.goto();
            await authPage.signUp(testUser);
            performanceMetrics.signupTime = Date.now() - signupStart;
            // Measure resume upload performance
            const uploadStart = Date.now();
            await profilePage.goto();
            await profilePage.uploadResume(TEST_RESUME_PATH);
            performanceMetrics.resumeUploadTime = Date.now() - uploadStart;
            // Measure interview start performance
            const interviewStart = Date.now();
            await interviewPage.goto();
            await interviewPage.startVoiceInterview(testUser.jobTitle, testUser.company);
            performanceMetrics.interviewStartTime = Date.now() - interviewStart;
            // Measure AI response performance
            const aiStart = Date.now();
            await interviewPage.simulateVoiceResponse("Tell me about yourself.");
            performanceMetrics.aiResponseTime = Date.now() - aiStart;
            // Verify performance benchmarks
            (0, test_1.expect)(performanceMetrics.signupTime).toBeLessThan(5000); // < 5 seconds
            (0, test_1.expect)(performanceMetrics.resumeUploadTime).toBeLessThan(30000); // < 30 seconds
            (0, test_1.expect)(performanceMetrics.interviewStartTime).toBeLessThan(10000); // < 10 seconds
            (0, test_1.expect)(performanceMetrics.aiResponseTime).toBeLessThan(15000); // < 15 seconds
            console.log('Performance Metrics:', performanceMetrics);
        });
    });
    (0, test_1.test)('mobile responsive behavior', async ({ page, isMobile }) => {
        if (!isMobile) {
            test_1.test.skip('Mobile-specific test');
        }
        test_1.test.step('Verify mobile interview experience', async () => {
            await authPage.goto();
            await authPage.signUp(testUser);
            // Verify mobile-optimized interface
            await interviewPage.goto();
            await (0, test_1.expect)(page.locator('[data-testid="mobile-interview-ui"]')).toBeVisible();
            // Verify touch interactions work
            await page.tap('[data-testid="start-interview-button"]');
            await (0, test_1.expect)(page.locator('[data-testid="interview-config"]')).toBeVisible();
            // Verify mobile voice controls
            await page.tap('[data-testid="voice-button"]');
            await (0, test_1.expect)(page.locator('[data-testid="listening-indicator"]')).toBeVisible();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,