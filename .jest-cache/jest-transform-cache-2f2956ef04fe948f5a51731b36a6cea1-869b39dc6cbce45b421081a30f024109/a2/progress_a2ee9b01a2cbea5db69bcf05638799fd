54d11155fcec40d256a59402b739acb7
/* istanbul ignore next */
"use strict";
"use client";

/* istanbul ignore next */
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Progress = void 0;
var
/* istanbul ignore next */
React = _interopRequireWildcard(require("react"));
var
/* istanbul ignore next */
_utils = require("@/lib/utils");
/* istanbul ignore next */
var _jsxRuntime = require("react/jsx-runtime");
function cov_3sss2aqhn() {
  var path = "/Users/dikshantvashistha/PrepBettr/components/ui/progress.tsx";
  var hash = "8e48c5d3e1b383126ea93b5c4242e57abb554f59";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/components/ui/progress.tsx",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 17
        },
        end: {
          line: 29,
          column: 2
        }
      },
      "1": {
        start: {
          line: 13,
          column: 2
        },
        end: {
          line: 28,
          column: 8
        }
      },
      "2": {
        start: {
          line: 30,
          column: 0
        },
        end: {
          line: 30,
          column: 33
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 12,
            column: 2
          },
          end: {
            line: 12,
            column: 3
          }
        },
        loc: {
          start: {
            line: 13,
            column: 2
          },
          end: {
            line: 28,
            column: 8
          }
        },
        line: 13
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 26,
            column: 48
          },
          end: {
            line: 26,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 26,
            column: 48
          },
          end: {
            line: 26,
            column: 53
          }
        }, {
          start: {
            line: 26,
            column: 57
          },
          end: {
            line: 26,
            column: 58
          }
        }],
        line: 26
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8e48c5d3e1b383126ea93b5c4242e57abb554f59"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_3sss2aqhn = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_3sss2aqhn();
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
const Progress =
/* istanbul ignore next */
exports.Progress = (cov_3sss2aqhn().s[0]++, /*#__PURE__*/React.forwardRef(({
  className,
  value,
  indicatorClassName,
  ...props
}, ref) => {
  /* istanbul ignore next */
  cov_3sss2aqhn().f[0]++;
  cov_3sss2aqhn().s[1]++;
  return /*#__PURE__*/ /* istanbul ignore next */(0, _jsxRuntime.jsx)(
  /* istanbul ignore next */
  "div",
  /* istanbul ignore next */
  {
    ref: ref,
    className:
    /* istanbul ignore next */
    (0,
    /* istanbul ignore next */
    _utils.
    /* istanbul ignore next */
    cn)("relative h-4 w-full overflow-hidden rounded-full bg-secondary", className),
    ...props,
    children: /*#__PURE__*/
    /* istanbul ignore next */
    (0, _jsxRuntime.jsx)(
    /* istanbul ignore next */
    "div",
    /* istanbul ignore next */
    {
      className:
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _utils.
      /* istanbul ignore next */
      cn)("h-full w-full flex-1 bg-primary transition-all", indicatorClassName),
      style: {
        transform: `translateX(-${100 - (
        /* istanbul ignore next */
        (cov_3sss2aqhn().b[0][0]++, value) ||
        /* istanbul ignore next */
        (cov_3sss2aqhn().b[0][1]++, 0))}%)`
      }
    })
  });
}));
/* istanbul ignore next */
cov_3sss2aqhn().s[2]++;
Progress.displayName = "Progress";
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlByb2dyZXNzIiwiUmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfdXRpbHMiLCJfanN4UnVudGltZSIsImNvdl8zc3NzMmFxaG4iLCJwYXRoIiwiaGFzaCIsImdsb2JhbCIsIkZ1bmN0aW9uIiwiZ2N2IiwiY292ZXJhZ2VEYXRhIiwic3RhdGVtZW50TWFwIiwic3RhcnQiLCJsaW5lIiwiY29sdW1uIiwiZW5kIiwiZm5NYXAiLCJuYW1lIiwiZGVjbCIsImxvYyIsImJyYW5jaE1hcCIsInR5cGUiLCJsb2NhdGlvbnMiLCJzIiwiZiIsImIiLCJfY292ZXJhZ2VTY2hlbWEiLCJjb3ZlcmFnZSIsImFjdHVhbENvdmVyYWdlIiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZm9yd2FyZFJlZiIsImNsYXNzTmFtZSIsImluZGljYXRvckNsYXNzTmFtZSIsInByb3BzIiwicmVmIiwianN4IiwiY24iLCJjaGlsZHJlbiIsInN0eWxlIiwidHJhbnNmb3JtIiwiZGlzcGxheU5hbWUiXSwic291cmNlcyI6WyJwcm9ncmVzcy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCJcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IGNuIH0gZnJvbSBcIkAvbGliL3V0aWxzXCJcblxuY29uc3QgUHJvZ3Jlc3MgPSBSZWFjdC5mb3J3YXJkUmVmPFxuICBIVE1MRGl2RWxlbWVudCxcbiAgUmVhY3QuSFRNTEF0dHJpYnV0ZXM8SFRNTERpdkVsZW1lbnQ+ICYge1xuICAgIHZhbHVlPzogbnVtYmVyXG4gICAgaW5kaWNhdG9yQ2xhc3NOYW1lPzogc3RyaW5nXG4gIH1cbj4oKHsgY2xhc3NOYW1lLCB2YWx1ZSwgaW5kaWNhdG9yQ2xhc3NOYW1lLCAuLi5wcm9wcyB9LCByZWYpID0+IChcbiAgPGRpdlxuICAgIHJlZj17cmVmfVxuICAgIGNsYXNzTmFtZT17Y24oXG4gICAgICBcInJlbGF0aXZlIGgtNCB3LWZ1bGwgb3ZlcmZsb3ctaGlkZGVuIHJvdW5kZWQtZnVsbCBiZy1zZWNvbmRhcnlcIixcbiAgICAgIGNsYXNzTmFtZVxuICAgICl9XG4gICAgey4uLnByb3BzfVxuICA+XG4gICAgPGRpdlxuICAgICAgY2xhc3NOYW1lPXtjbihcbiAgICAgICAgXCJoLWZ1bGwgdy1mdWxsIGZsZXgtMSBiZy1wcmltYXJ5IHRyYW5zaXRpb24tYWxsXCIsXG4gICAgICAgIGluZGljYXRvckNsYXNzTmFtZVxuICAgICAgKX1cbiAgICAgIHN0eWxlPXt7IHRyYW5zZm9ybTogYHRyYW5zbGF0ZVgoLSR7MTAwIC0gKHZhbHVlIHx8IDApfSUpYCB9fVxuICAgIC8+XG4gIDwvZGl2PlxuKSlcblByb2dyZXNzLmRpc3BsYXlOYW1lID0gXCJQcm9ncmVzc1wiXG5cbmV4cG9ydCB7IFByb2dyZXNzIH1cbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxZQUFZOztBQUFBO0FBQUFBLE1BQUEsQ0FBQUMsY0FBQSxDQUFBQyxPQUFBO0VBQUFDLEtBQUE7QUFBQTtBQUFBRCxPQUFBLENBQUFFLFFBQUE7QUFFWjtBQUFBO0FBQUFDLEtBQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBO0FBQUE7QUFBQUMsTUFBQSxHQUFBRCxPQUFBO0FBQWdDO0FBQUEsSUFBQUUsV0FBQSxHQUFBRixPQUFBO0FBQUEsU0FBQUcsY0FBQTtFQUFBLElBQUFDLElBQUE7RUFBQSxJQUFBQyxJQUFBO0VBQUEsSUFBQUMsTUFBQSxPQUFBQyxRQUFBO0VBQUEsSUFBQUMsR0FBQTtFQUFBLElBQUFDLFlBQUE7SUFBQUwsSUFBQTtJQUFBTSxZQUFBO01BQUE7UUFBQUMsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO0lBQUE7SUFBQUUsS0FBQTtNQUFBO1FBQUFDLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtJQUFBO0lBQUFPLFNBQUE7TUFBQTtRQUFBRCxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7SUFBQTtJQUFBVSxDQUFBO01BQUE7TUFBQTtNQUFBO0lBQUE7SUFBQUMsQ0FBQTtNQUFBO0lBQUE7SUFBQUMsQ0FBQTtNQUFBO0lBQUE7SUFBQUMsZUFBQTtJQUFBcEIsSUFBQTtFQUFBO0VBQUEsSUFBQXFCLFFB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