{"file":"/Users/dikshantvashistha/PrepBettr/tests/integration/user-interview-flow.test.ts","mappings":"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","names":[],"sources":["/Users/dikshantvashistha/PrepBettr/tests/integration/user-interview-flow.test.ts"],"sourcesContent":["/**\n * Complete User Interview Flow Integration Test\n * \n * Tests end-to-end user journey from signup through interview completion,\n * validating Azure service integrations and data consistency.\n * \n * @version 2.0.0\n */\n\nimport { test, expect, Page } from '@playwright/test';\nimport { faker } from '@faker-js/faker';\n\n// Test data generators\nconst generateTestUser = () => ({\n  email: faker.internet.email(),\n  password: faker.internet.password({ length: 12, memorable: true }),\n  name: faker.person.fullName(),\n  jobTitle: faker.person.jobTitle(),\n  company: faker.company.name()\n});\n\nconst TEST_RESUME_PATH = './tests/fixtures/sample-resume.pdf';\n\n// Page Object Model for better maintainability\nclass AuthPage {\n  constructor(private page: Page) {}\n\n  async goto() {\n    await this.page.goto('/auth/signin');\n  }\n\n  async signUp(user: any) {\n    await this.page.click('[data-testid=\"signup-tab\"]');\n    await this.page.fill('[data-testid=\"email-input\"]', user.email);\n    await this.page.fill('[data-testid=\"password-input\"]', user.password);\n    await this.page.fill('[data-testid=\"name-input\"]', user.name);\n    \n    // Wait for signup button and click\n    await this.page.click('[data-testid=\"signup-button\"]');\n    \n    // Wait for signup completion\n    await this.page.waitForURL('/dashboard');\n  }\n\n  async signIn(email: string, password: string) {\n    await this.page.fill('[data-testid=\"email-input\"]', email);\n    await this.page.fill('[data-testid=\"password-input\"]', password);\n    await this.page.click('[data-testid=\"signin-button\"]');\n    \n    // Wait for sign in completion\n    await this.page.waitForURL('/dashboard');\n  }\n\n  async signOut() {\n    await this.page.click('[data-testid=\"user-menu\"]');\n    await this.page.click('[data-testid=\"signout-button\"]');\n    await this.page.waitForURL('/');\n  }\n}\n\nclass InterviewPage {\n  constructor(private page: Page) {}\n\n  async goto() {\n    await this.page.goto('/interview');\n  }\n\n  async startVoiceInterview(jobTitle: string, company: string) {\n    await this.page.click('[data-testid=\"start-interview-button\"]');\n    \n    // Configure interview settings\n    await this.page.fill('[data-testid=\"job-title-input\"]', jobTitle);\n    await this.page.fill('[data-testid=\"company-input\"]', company);\n    await this.page.selectOption('[data-testid=\"difficulty-select\"]', 'medium');\n    \n    // Start the interview\n    await this.page.click('[data-testid=\"begin-interview-button\"]');\n    \n    // Wait for SignalR connection and initial AI response\n    await this.page.waitForSelector('[data-testid=\"interview-active\"]');\n    await this.page.waitForSelector('[data-testid=\"ai-response\"]', { timeout: 10000 });\n  }\n\n  async simulateVoiceResponse(response: string) {\n    // Simulate microphone input (in real scenario, this would be actual voice)\n    await this.page.evaluate((text) => {\n      // Mock speech recognition result\n      window.dispatchEvent(new CustomEvent('mock-speech-result', {\n        detail: { transcript: text, confidence: 0.95 }\n      }));\n    }, response);\n\n    // Wait for AI to process and respond\n    await this.page.waitForSelector('[data-testid=\"ai-thinking\"]');\n    await this.page.waitForSelector('[data-testid=\"ai-response\"]', { timeout: 15000 });\n  }\n\n  async endInterview() {\n    await this.page.click('[data-testid=\"end-interview-button\"]');\n    await this.page.waitForSelector('[data-testid=\"interview-summary\"]');\n  }\n\n  async getInterviewSummary() {\n    const summary = await this.page.textContent('[data-testid=\"interview-summary\"]');\n    return summary;\n  }\n}\n\nclass ProfilePage {\n  constructor(private page: Page) {}\n\n  async goto() {\n    await this.page.goto('/profile');\n  }\n\n  async uploadResume(filePath: string) {\n    await this.page.setInputFiles('[data-testid=\"resume-upload\"]', filePath);\n    \n    // Wait for upload completion\n    await this.page.waitForSelector('[data-testid=\"upload-success\"]', { timeout: 30000 });\n    \n    // Wait for AI processing\n    await this.page.waitForSelector('[data-testid=\"resume-processed\"]', { timeout: 60000 });\n  }\n\n  async getGeneratedQuestions() {\n    const questions = await this.page.locator('[data-testid=\"generated-question\"]').allTextContents();\n    return questions;\n  }\n}\n\n// Test suite\ntest.describe('Complete User Interview Flow', () => {\n  let testUser: ReturnType<typeof generateTestUser>;\n  let authPage: AuthPage;\n  let interviewPage: InterviewPage;\n  let profilePage: ProfilePage;\n\n  test.beforeEach(async ({ page }) => {\n    testUser = generateTestUser();\n    authPage = new AuthPage(page);\n    interviewPage = new InterviewPage(page);\n    profilePage = new ProfilePage(page);\n\n    // Set up test environment\n    await page.addInitScript(() => {\n      // Mock browser APIs for testing\n      window.navigator.mediaDevices = {\n        getUserMedia: () => Promise.resolve(new MediaStream()),\n        enumerateDevices: () => Promise.resolve([])\n      };\n      \n      // Mock WebRTC APIs\n      window.RTCPeerConnection = class MockRTCPeerConnection {\n        createOffer() { return Promise.resolve({}); }\n        createAnswer() { return Promise.resolve({}); }\n        setLocalDescription() { return Promise.resolve(); }\n        setRemoteDescription() { return Promise.resolve(); }\n        addIceCandidate() { return Promise.resolve(); }\n        close() {}\n      };\n    });\n  });\n\n  test('complete user journey: signup → profile setup → interview session', async ({ page }) => {\n    // Step 1: User Sign Up\n    test.step('User signs up with Firebase Auth', async () => {\n      await authPage.goto();\n      await authPage.signUp(testUser);\n      \n      // Verify user is redirected to dashboard\n      await expect(page).toHaveURL('/dashboard');\n      \n      // Verify user profile data is synced to Cosmos DB\n      const userProfile = await page.evaluate(() => {\n        return fetch('/api/profile')\n          .then(res => res.json())\n          .catch(() => null);\n      });\n      \n      expect(userProfile).toBeTruthy();\n      expect(userProfile.email).toBe(testUser.email);\n    });\n\n    // Step 2: Profile Setup and Resume Upload\n    test.step('User uploads resume and gets AI-generated questions', async () => {\n      await profilePage.goto();\n      \n      // Upload resume to Azure Blob Storage\n      await profilePage.uploadResume(TEST_RESUME_PATH);\n      \n      // Verify resume is processed and stored\n      await expect(page.locator('[data-testid=\"resume-processed\"]')).toBeVisible();\n      \n      // Verify AI-generated questions are created\n      const questions = await profilePage.getGeneratedQuestions();\n      expect(questions.length).toBeGreaterThan(0);\n      \n      // Verify questions are stored in Cosmos DB\n      const storedQuestions = await page.evaluate(() => {\n        return fetch('/api/profile/questions')\n          .then(res => res.json())\n          .catch(() => []);\n      });\n      \n      expect(storedQuestions.length).toBeGreaterThan(0);\n    });\n\n    // Step 3: Interview Session Lifecycle\n    test.step('Complete interview session with voice interaction', async () => {\n      await interviewPage.goto();\n      \n      // Start voice interview\n      await interviewPage.startVoiceInterview(testUser.jobTitle, testUser.company);\n      \n      // Verify SignalR connection is established\n      await expect(page.locator('[data-testid=\"connection-status\"]')).toContainText('Connected');\n      \n      // Verify initial AI response\n      await expect(page.locator('[data-testid=\"ai-response\"]')).toBeVisible();\n      \n      // Simulate conversation flow\n      const responses = [\n        \"Hello, I'm excited to be here for this interview.\",\n        \"I have 5 years of experience in software development, primarily working with React and Node.js.\",\n        \"My biggest achievement was leading a team of 4 developers to successfully launch a customer portal that increased user engagement by 40%.\",\n        \"I'm passionate about creating user-friendly applications and continuously learning new technologies.\"\n      ];\n\n      for (const response of responses) {\n        await interviewPage.simulateVoiceResponse(response);\n        \n        // Verify each response is processed\n        await expect(page.locator('[data-testid=\"ai-response\"]')).toBeVisible();\n        \n        // Add small delay to simulate natural conversation flow\n        await page.waitForTimeout(2000);\n      }\n      \n      // End the interview\n      await interviewPage.endInterview();\n      \n      // Verify interview summary is generated\n      const summary = await interviewPage.getInterviewSummary();\n      expect(summary).toBeTruthy();\n      expect(summary).toContain('interview');\n    });\n\n    // Step 4: Data Consistency Verification\n    test.step('Verify cross-service data consistency', async () => {\n      // Verify interview data is stored in Cosmos DB\n      const interviewData = await page.evaluate(() => {\n        return fetch('/api/interviews/recent')\n          .then(res => res.json())\n          .catch(() => null);\n      });\n      \n      expect(interviewData).toBeTruthy();\n      expect(interviewData.userId).toBeTruthy();\n      expect(interviewData.status).toBe('completed');\n      \n      // Verify usage quotas are updated\n      const usageData = await page.evaluate(() => {\n        return fetch('/api/usage')\n          .then(res => res.json())\n          .catch(() => null);\n      });\n      \n      expect(usageData).toBeTruthy();\n      expect(usageData.interviews.count).toBeGreaterThan(0);\n      \n      // Verify telemetry data is captured\n      const telemetryEvents = await page.evaluate(() => {\n        return window.appInsights?.getEvents?.() || [];\n      });\n      \n      expect(telemetryEvents.length).toBeGreaterThan(0);\n    });\n  });\n\n  test('user authentication state persistence', async ({ page }) => {\n    test.step('Sign up and verify session persistence', async () => {\n      await authPage.goto();\n      await authPage.signUp(testUser);\n      \n      // Verify session cookie is set\n      const cookies = await page.context().cookies();\n      const sessionCookie = cookies.find(c => c.name.includes('session'));\n      expect(sessionCookie).toBeTruthy();\n      \n      // Refresh page and verify user remains authenticated\n      await page.reload();\n      await expect(page.locator('[data-testid=\"user-menu\"]')).toBeVisible();\n      \n      // Sign out and verify session is cleared\n      await authPage.signOut();\n      const cookiesAfterSignOut = await page.context().cookies();\n      const sessionCookieAfter = cookiesAfterSignOut.find(c => c.name.includes('session'));\n      expect(sessionCookieAfter).toBeFalsy();\n    });\n  });\n\n  test('error handling and recovery', async ({ page }) => {\n    test.step('Handle network failures gracefully', async () => {\n      await authPage.goto();\n      await authPage.signUp(testUser);\n      \n      // Simulate network failure during interview\n      await interviewPage.goto();\n      \n      // Intercept and fail API requests\n      await page.route('/api/interview/**', route => {\n        route.abort('failed');\n      });\n      \n      await interviewPage.startVoiceInterview(testUser.jobTitle, testUser.company);\n      \n      // Verify error handling\n      await expect(page.locator('[data-testid=\"error-message\"]')).toBeVisible();\n      await expect(page.locator('[data-testid=\"retry-button\"]')).toBeVisible();\n      \n      // Restore network and retry\n      await page.unroute('/api/interview/**');\n      await page.click('[data-testid=\"retry-button\"]');\n      \n      // Verify recovery\n      await expect(page.locator('[data-testid=\"interview-active\"]')).toBeVisible();\n    });\n  });\n\n  test('performance benchmarks', async ({ page }) => {\n    test.step('Measure critical path performance', async () => {\n      const performanceMetrics = {\n        signupTime: 0,\n        resumeUploadTime: 0,\n        interviewStartTime: 0,\n        aiResponseTime: 0\n      };\n\n      // Measure signup performance\n      const signupStart = Date.now();\n      await authPage.goto();\n      await authPage.signUp(testUser);\n      performanceMetrics.signupTime = Date.now() - signupStart;\n\n      // Measure resume upload performance\n      const uploadStart = Date.now();\n      await profilePage.goto();\n      await profilePage.uploadResume(TEST_RESUME_PATH);\n      performanceMetrics.resumeUploadTime = Date.now() - uploadStart;\n\n      // Measure interview start performance\n      const interviewStart = Date.now();\n      await interviewPage.goto();\n      await interviewPage.startVoiceInterview(testUser.jobTitle, testUser.company);\n      performanceMetrics.interviewStartTime = Date.now() - interviewStart;\n\n      // Measure AI response performance\n      const aiStart = Date.now();\n      await interviewPage.simulateVoiceResponse(\"Tell me about yourself.\");\n      performanceMetrics.aiResponseTime = Date.now() - aiStart;\n\n      // Verify performance benchmarks\n      expect(performanceMetrics.signupTime).toBeLessThan(5000); // < 5 seconds\n      expect(performanceMetrics.resumeUploadTime).toBeLessThan(30000); // < 30 seconds\n      expect(performanceMetrics.interviewStartTime).toBeLessThan(10000); // < 10 seconds\n      expect(performanceMetrics.aiResponseTime).toBeLessThan(15000); // < 15 seconds\n\n      console.log('Performance Metrics:', performanceMetrics);\n    });\n  });\n\n  test('mobile responsive behavior', async ({ page, isMobile }) => {\n    if (!isMobile) {\n      test.skip('Mobile-specific test');\n    }\n\n    test.step('Verify mobile interview experience', async () => {\n      await authPage.goto();\n      await authPage.signUp(testUser);\n      \n      // Verify mobile-optimized interface\n      await interviewPage.goto();\n      await expect(page.locator('[data-testid=\"mobile-interview-ui\"]')).toBeVisible();\n      \n      // Verify touch interactions work\n      await page.tap('[data-testid=\"start-interview-button\"]');\n      await expect(page.locator('[data-testid=\"interview-config\"]')).toBeVisible();\n      \n      // Verify mobile voice controls\n      await page.tap('[data-testid=\"voice-button\"]');\n      await expect(page.locator('[data-testid=\"listening-indicator\"]')).toBeVisible();\n    });\n  });\n});\n"],"version":3}