5b2190ae5049fae939ff5ae4754a93bc
"use strict";

/* istanbul ignore next */
function cov_16bgpj9l5d() {
  var path = "/Users/dikshantvashistha/PrepBettr/app/api/voice/tts/route.ts";
  var hash = "0d69fdbeca05eadb3b911b8caca70887bb274e1f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/app/api/voice/tts/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 12,
          column: 3
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 3,
          column: 26
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "3": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 52
        }
      },
      "4": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 7,
          column: 5
        }
      },
      "5": {
        start: {
          line: 6,
          column: 6
        },
        end: {
          line: 6,
          column: 68
        }
      },
      "6": {
        start: {
          line: 6,
          column: 51
        },
        end: {
          line: 6,
          column: 63
        }
      },
      "7": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 39
        }
      },
      "8": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "9": {
        start: {
          line: 10,
          column: 26
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "10": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 17
        }
      },
      "11": {
        start: {
          line: 13,
          column: 25
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "12": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 72
        }
      },
      "13": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 21
        }
      },
      "14": {
        start: {
          line: 18,
          column: 19
        },
        end: {
          line: 34,
          column: 4
        }
      },
      "15": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "16": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 24,
          column: 10
        }
      },
      "17": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 23
        }
      },
      "18": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "19": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "20": {
        start: {
          line: 22,
          column: 77
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "21": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 22
        }
      },
      "22": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 26
        }
      },
      "23": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 33,
          column: 6
        }
      },
      "24": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "25": {
        start: {
          line: 28,
          column: 35
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "26": {
        start: {
          line: 29,
          column: 21
        },
        end: {
          line: 29,
          column: 23
        }
      },
      "27": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "28": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "29": {
        start: {
          line: 30,
          column: 38
        },
        end: {
          line: 30,
          column: 50
        }
      },
      "30": {
        start: {
          line: 30,
          column: 56
        },
        end: {
          line: 30,
          column: 57
        }
      },
      "31": {
        start: {
          line: 30,
          column: 78
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "32": {
        start: {
          line: 30,
          column: 102
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "33": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 40
        }
      },
      "34": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 22
        }
      },
      "35": {
        start: {
          line: 35,
          column: 0
        },
        end: {
          line: 35,
          column: 62
        }
      },
      "36": {
        start: {
          line: 36,
          column: 0
        },
        end: {
          line: 36,
          column: 20
        }
      },
      "37": {
        start: {
          line: 37,
          column: 0
        },
        end: {
          line: 37,
          column: 18
        }
      },
      "38": {
        start: {
          line: 38,
          column: 0
        },
        end: {
          line: 38,
          column: 26
        }
      },
      "39": {
        start: {
          line: 39,
          column: 17
        },
        end: {
          line: 39,
          column: 39
        }
      },
      "40": {
        start: {
          line: 40,
          column: 18
        },
        end: {
          line: 40,
          column: 81
        }
      },
      "41": {
        start: {
          line: 41,
          column: 17
        },
        end: {
          line: 41,
          column: 46
        }
      },
      "42": {
        start: {
          line: 42,
          column: 22
        },
        end: {
          line: 42,
          column: 56
        }
      },
      "43": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 150,
          column: 30
        }
      },
      "44": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 149,
          column: 9
        }
      },
      "45": {
        start: {
          line: 51,
          column: 25
        },
        end: {
          line: 51,
          column: 45
        }
      },
      "46": {
        start: {
          line: 52,
          column: 86
        },
        end: {
          line: 52,
          column: 90
        }
      },
      "47": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 115
        }
      },
      "48": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 56,
          column: 13
        }
      },
      "49": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 55,
          column: 98
        }
      },
      "50": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 59,
          column: 13
        }
      },
      "51": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 58,
          column: 117
        }
      },
      "52": {
        start: {
          line: 61,
          column: 30
        },
        end: {
          line: 61,
          column: 96
        }
      },
      "53": {
        start: {
          line: 62,
          column: 33
        },
        end: {
          line: 62,
          column: 105
        }
      },
      "54": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 66,
          column: 13
        }
      },
      "55": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 64,
          column: 84
        }
      },
      "56": {
        start: {
          line: 65,
          column: 16
        },
        end: {
          line: 65,
          column: 116
        }
      },
      "57": {
        start: {
          line: 68,
          column: 33
        },
        end: {
          line: 68,
          column: 97
        }
      },
      "58": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 58
        }
      },
      "59": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 121
        }
      },
      "60": {
        start: {
          line: 72,
          column: 32
        },
        end: {
          line: 72,
          column: 88
        }
      },
      "61": {
        start: {
          line: 74,
          column: 25
        },
        end: {
          line: 82,
          column: 14
        }
      },
      "62": {
        start: {
          line: 84,
          column: 27
        },
        end: {
          line: 92,
          column: 14
        }
      },
      "63": {
        start: {
          line: 85,
          column: 16
        },
        end: {
          line: 91,
          column: 19
        }
      },
      "64": {
        start: {
          line: 86,
          column: 20
        },
        end: {
          line: 86,
          column: 40
        }
      },
      "65": {
        start: {
          line: 87,
          column: 20
        },
        end: {
          line: 87,
          column: 36
        }
      },
      "66": {
        start: {
          line: 89,
          column: 20
        },
        end: {
          line: 89,
          column: 40
        }
      },
      "67": {
        start: {
          line: 90,
          column: 20
        },
        end: {
          line: 90,
          column: 34
        }
      },
      "68": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 132,
          column: 13
        }
      },
      "69": {
        start: {
          line: 95,
          column: 34
        },
        end: {
          line: 95,
          column: 50
        }
      },
      "70": {
        start: {
          line: 96,
          column: 16
        },
        end: {
          line: 100,
          column: 19
        }
      },
      "71": {
        start: {
          line: 102,
          column: 16
        },
        end: {
          line: 112,
          column: 19
        }
      },
      "72": {
        start: {
          line: 114,
          column: 17
        },
        end: {
          line: 132,
          column: 13
        }
      },
      "73": {
        start: {
          line: 115,
          column: 44
        },
        end: {
          line: 115,
          column: 92
        }
      },
      "74": {
        start: {
          line: 116,
          column: 37
        },
        end: {
          line: 116,
          column: 120
        }
      },
      "75": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 117,
          column: 52
        }
      },
      "76": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 125,
          column: 17
        }
      },
      "77": {
        start: {
          line: 119,
          column: 20
        },
        end: {
          line: 121,
          column: 21
        }
      },
      "78": {
        start: {
          line: 120,
          column: 24
        },
        end: {
          line: 120,
          column: 126
        }
      },
      "79": {
        start: {
          line: 122,
          column: 20
        },
        end: {
          line: 124,
          column: 21
        }
      },
      "80": {
        start: {
          line: 123,
          column: 24
        },
        end: {
          line: 123,
          column: 119
        }
      },
      "81": {
        start: {
          line: 126,
          column: 16
        },
        end: {
          line: 126,
          column: 105
        }
      },
      "82": {
        start: {
          line: 129,
          column: 37
        },
        end: {
          line: 129,
          column: 79
        }
      },
      "83": {
        start: {
          line: 130,
          column: 16
        },
        end: {
          line: 130,
          column: 52
        }
      },
      "84": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 92
        }
      },
      "85": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 129
        }
      },
      "86": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 147,
          column: 13
        }
      },
      "87": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 140,
          column: 17
        }
      },
      "88": {
        start: {
          line: 139,
          column: 20
        },
        end: {
          line: 139,
          column: 122
        }
      },
      "89": {
        start: {
          line: 141,
          column: 16
        },
        end: {
          line: 143,
          column: 17
        }
      },
      "90": {
        start: {
          line: 142,
          column: 20
        },
        end: {
          line: 142,
          column: 115
        }
      },
      "91": {
        start: {
          line: 144,
          column: 16
        },
        end: {
          line: 146,
          column: 17
        }
      },
      "92": {
        start: {
          line: 145,
          column: 20
        },
        end: {
          line: 145,
          column: 108
        }
      },
      "93": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 107
        }
      },
      "94": {
        start: {
          line: 156,
          column: 4
        },
        end: {
          line: 198,
          column: 7
        }
      },
      "95": {
        start: {
          line: 204,
          column: 4
        },
        end: {
          line: 211,
          column: 7
        }
      },
      "96": {
        start: {
          line: 217,
          column: 4
        },
        end: {
          line: 222,
          column: 33
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 2,
            column: 75
          }
        },
        loc: {
          start: {
            line: 2,
            column: 96
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 39
          }
        },
        loc: {
          start: {
            line: 6,
            column: 49
          },
          end: {
            line: 6,
            column: 65
          }
        },
        line: 6
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 9,
            column: 7
          }
        },
        loc: {
          start: {
            line: 9,
            column: 28
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 9
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 13,
            column: 81
          }
        },
        loc: {
          start: {
            line: 13,
            column: 95
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 13
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 15,
            column: 6
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 15
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 18,
            column: 51
          },
          end: {
            line: 18,
            column: 52
          }
        },
        loc: {
          start: {
            line: 18,
            column: 63
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 18
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 19,
            column: 19
          }
        },
        loc: {
          start: {
            line: 19,
            column: 30
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 19
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 20,
            column: 49
          }
        },
        loc: {
          start: {
            line: 20,
            column: 61
          },
          end: {
            line: 24,
            column: 9
          }
        },
        line: 20
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 12
          }
        },
        loc: {
          start: {
            line: 27,
            column: 26
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 27
      },
      "9": {
        name: "POST",
        decl: {
          start: {
            line: 47,
            column: 15
          },
          end: {
            line: 47,
            column: 19
          }
        },
        loc: {
          start: {
            line: 47,
            column: 29
          },
          end: {
            line: 151,
            column: 1
          }
        },
        line: 47
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 48,
            column: 47
          },
          end: {
            line: 48,
            column: 48
          }
        },
        loc: {
          start: {
            line: 48,
            column: 59
          },
          end: {
            line: 150,
            column: 5
          }
        },
        line: 48
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 84,
            column: 45
          },
          end: {
            line: 84,
            column: 46
          }
        },
        loc: {
          start: {
            line: 84,
            column: 66
          },
          end: {
            line: 92,
            column: 13
          }
        },
        line: 84
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 85,
            column: 49
          },
          end: {
            line: 85,
            column: 50
          }
        },
        loc: {
          start: {
            line: 85,
            column: 61
          },
          end: {
            line: 88,
            column: 17
          }
        },
        line: 85
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 88,
            column: 19
          },
          end: {
            line: 88,
            column: 20
          }
        },
        loc: {
          start: {
            line: 88,
            column: 30
          },
          end: {
            line: 91,
            column: 17
          }
        },
        line: 88
      },
      "14": {
        name: "GET",
        decl: {
          start: {
            line: 155,
            column: 15
          },
          end: {
            line: 155,
            column: 18
          }
        },
        loc: {
          start: {
            line: 155,
            column: 21
          },
          end: {
            line: 199,
            column: 1
          }
        },
        line: 155
      },
      "15": {
        name: "OPTIONS",
        decl: {
          start: {
            line: 203,
            column: 15
          },
          end: {
            line: 203,
            column: 22
          }
        },
        loc: {
          start: {
            line: 203,
            column: 25
          },
          end: {
            line: 212,
            column: 1
          }
        },
        line: 203
      },
      "16": {
        name: "escapeXml",
        decl: {
          start: {
            line: 216,
            column: 9
          },
          end: {
            line: 216,
            column: 18
          }
        },
        loc: {
          start: {
            line: 216,
            column: 25
          },
          end: {
            line: 223,
            column: 1
          }
        },
        line: 216
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 12,
            column: 3
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 9,
            column: 1
          }
        }, {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 5
      },
      "4": {
        loc: {
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 13
          }
        }, {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "5": {
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 47
          }
        }, {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "6": {
        loc: {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 63
          }
        }, {
          start: {
            line: 5,
            column: 67
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "7": {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "8": {
        loc: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 17,
            column: 2
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 30
          }
        }, {
          start: {
            line: 13,
            column: 34
          },
          end: {
            line: 13,
            column: 57
          }
        }, {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "9": {
        loc: {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 15,
            column: 1
          }
        }, {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "10": {
        loc: {
          start: {
            line: 18,
            column: 19
          },
          end: {
            line: 34,
            column: 4
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 18,
            column: 24
          }
        }, {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 45
          }
        }, {
          start: {
            line: 18,
            column: 50
          },
          end: {
            line: 34,
            column: 4
          }
        }],
        line: 18
      },
      "11": {
        loc: {
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 20,
            column: 44
          }
        }, {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 24,
            column: 9
          }
        }],
        line: 20
      },
      "12": {
        loc: {
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "13": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "14": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 15
          }
        }, {
          start: {
            line: 28,
            column: 19
          },
          end: {
            line: 28,
            column: 33
          }
        }],
        line: 28
      },
      "15": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "16": {
        loc: {
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "17": {
        loc: {
          start: {
            line: 52,
            column: 26
          },
          end: {
            line: 52,
            column: 52
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 52,
            column: 34
          },
          end: {
            line: 52,
            column: 52
          }
        }],
        line: 52
      },
      "18": {
        loc: {
          start: {
            line: 52,
            column: 54
          },
          end: {
            line: 52,
            column: 66
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 52,
            column: 61
          },
          end: {
            line: 52,
            column: 66
          }
        }],
        line: 52
      },
      "19": {
        loc: {
          start: {
            line: 52,
            column: 68
          },
          end: {
            line: 52,
            column: 81
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 52,
            column: 76
          },
          end: {
            line: 52,
            column: 81
          }
        }],
        line: 52
      },
      "20": {
        loc: {
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "21": {
        loc: {
          start: {
            line: 54,
            column: 16
          },
          end: {
            line: 54,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 54,
            column: 16
          },
          end: {
            line: 54,
            column: 21
          }
        }, {
          start: {
            line: 54,
            column: 25
          },
          end: {
            line: 54,
            column: 37
          }
        }],
        line: 54
      },
      "22": {
        loc: {
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 59,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 59,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "23": {
        loc: {
          start: {
            line: 61,
            column: 30
          },
          end: {
            line: 61,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 61,
            column: 30
          },
          end: {
            line: 61,
            column: 64
          }
        }, {
          start: {
            line: 61,
            column: 68
          },
          end: {
            line: 61,
            column: 96
          }
        }],
        line: 61
      },
      "24": {
        loc: {
          start: {
            line: 62,
            column: 33
          },
          end: {
            line: 62,
            column: 105
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 33
          },
          end: {
            line: 62,
            column: 70
          }
        }, {
          start: {
            line: 62,
            column: 74
          },
          end: {
            line: 62,
            column: 105
          }
        }],
        line: 62
      },
      "25": {
        loc: {
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 66,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 66,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "26": {
        loc: {
          start: {
            line: 63,
            column: 16
          },
          end: {
            line: 63,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 63,
            column: 16
          },
          end: {
            line: 63,
            column: 26
          }
        }, {
          start: {
            line: 63,
            column: 30
          },
          end: {
            line: 63,
            column: 43
          }
        }],
        line: 63
      },
      "27": {
        loc: {
          start: {
            line: 94,
            column: 12
          },
          end: {
            line: 132,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 12
          },
          end: {
            line: 132,
            column: 13
          }
        }, {
          start: {
            line: 114,
            column: 17
          },
          end: {
            line: 132,
            column: 13
          }
        }],
        line: 94
      },
      "28": {
        loc: {
          start: {
            line: 114,
            column: 17
          },
          end: {
            line: 132,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 17
          },
          end: {
            line: 132,
            column: 13
          }
        }, {
          start: {
            line: 128,
            column: 17
          },
          end: {
            line: 132,
            column: 13
          }
        }],
        line: 114
      },
      "29": {
        loc: {
          start: {
            line: 118,
            column: 16
          },
          end: {
            line: 125,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 16
          },
          end: {
            line: 125,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "30": {
        loc: {
          start: {
            line: 119,
            column: 20
          },
          end: {
            line: 121,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 20
          },
          end: {
            line: 121,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      },
      "31": {
        loc: {
          start: {
            line: 119,
            column: 24
          },
          end: {
            line: 119,
            column: 130
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 119,
            column: 92
          },
          end: {
            line: 119,
            column: 98
          }
        }, {
          start: {
            line: 119,
            column: 101
          },
          end: {
            line: 119,
            column: 130
          }
        }],
        line: 119
      },
      "32": {
        loc: {
          start: {
            line: 119,
            column: 24
          },
          end: {
            line: 119,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 119,
            column: 24
          },
          end: {
            line: 119,
            column: 72
          }
        }, {
          start: {
            line: 119,
            column: 76
          },
          end: {
            line: 119,
            column: 89
          }
        }],
        line: 119
      },
      "33": {
        loc: {
          start: {
            line: 122,
            column: 20
          },
          end: {
            line: 124,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 20
          },
          end: {
            line: 124,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 122
      },
      "34": {
        loc: {
          start: {
            line: 122,
            column: 24
          },
          end: {
            line: 122,
            column: 121
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 122,
            column: 92
          },
          end: {
            line: 122,
            column: 98
          }
        }, {
          start: {
            line: 122,
            column: 101
          },
          end: {
            line: 122,
            column: 121
          }
        }],
        line: 122
      },
      "35": {
        loc: {
          start: {
            line: 122,
            column: 24
          },
          end: {
            line: 122,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 122,
            column: 24
          },
          end: {
            line: 122,
            column: 72
          }
        }, {
          start: {
            line: 122,
            column: 76
          },
          end: {
            line: 122,
            column: 89
          }
        }],
        line: 122
      },
      "36": {
        loc: {
          start: {
            line: 135,
            column: 70
          },
          end: {
            line: 135,
            column: 127
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 135,
            column: 95
          },
          end: {
            line: 135,
            column: 100
          }
        }, {
          start: {
            line: 135,
            column: 103
          },
          end: {
            line: 135,
            column: 127
          }
        }],
        line: 135
      },
      "37": {
        loc: {
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 147,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 147,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "38": {
        loc: {
          start: {
            line: 138,
            column: 16
          },
          end: {
            line: 140,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 138,
            column: 16
          },
          end: {
            line: 140,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 138
      },
      "39": {
        loc: {
          start: {
            line: 141,
            column: 16
          },
          end: {
            line: 143,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 141,
            column: 16
          },
          end: {
            line: 143,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 141
      },
      "40": {
        loc: {
          start: {
            line: 141,
            column: 20
          },
          end: {
            line: 141,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 141,
            column: 20
          },
          end: {
            line: 141,
            column: 51
          }
        }, {
          start: {
            line: 141,
            column: 55
          },
          end: {
            line: 141,
            column: 91
          }
        }],
        line: 141
      },
      "41": {
        loc: {
          start: {
            line: 144,
            column: 16
          },
          end: {
            line: 146,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 16
          },
          end: {
            line: 146,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0],
      "18": [0],
      "19": [0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/app/api/voice/tts/route.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/app/api/voice/tts/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport * as SpeechSDK from 'microsoft-cognitiveservices-speech-sdk';\nimport { logger } from '@/lib/utils/logger';\nimport { handleAsyncError } from '@/lib/utils/error-utils';\n\ninterface TTSRequest {\n  text: string;\n  voice?: string;\n  rate?: string;\n  pitch?: string;\n}\n\n/**\n * Azure Text-to-Speech API Endpoint\n * Converts text to speech using Azure Speech Services\n */\nexport async function POST(request: NextRequest) {\n  return handleAsyncError(\n    async () => {\n    try {\n      const body: TTSRequest = await request.json();\n      const { text, voice = 'en-US-SaraNeural', rate = '1.0', pitch = '0Hz' } = body;\n\n      logger.api.request('POST /api/voice/tts', `Converting text to speech (${text.length} chars)`);\n\n      if (!text || !text.trim()) {\n        return NextResponse.json(\n          { error: 'Text is required' },\n          { status: 400 }\n        );\n      }\n\n      if (text.length > 5000) {\n        return NextResponse.json(\n          { error: 'Text too long (max 5000 characters)' },\n          { status: 400 }\n        );\n      }\n\n      // Get Azure Speech credentials\n      const speechKey = process.env.NEXT_PUBLIC_SPEECH_KEY || process.env.AZURE_SPEECH_KEY;\n      const speechRegion = process.env.NEXT_PUBLIC_SPEECH_REGION || process.env.AZURE_SPEECH_REGION;\n\n      if (!speechKey || !speechRegion) {\n        logger.error('Azure Speech Service credentials not found');\n        return NextResponse.json(\n          { error: 'Speech service configuration error' },\n          { status: 500 }\n        );\n      }\n\n      // Configure Azure Speech SDK\n      const speechConfig = SpeechSDK.SpeechConfig.fromSubscription(speechKey, speechRegion);\n      speechConfig.speechSynthesisVoiceName = voice;\n      speechConfig.speechSynthesisOutputFormat = SpeechSDK.SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3;\n\n      // Create synthesizer with null audio config to get raw audio data\n      const synthesizer = new SpeechSDK.SpeechSynthesizer(speechConfig, undefined);\n\n      // Create SSML for better control\n      const ssml = `\n        <speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\" xml:lang=\"en-US\">\n          <voice name=\"${voice}\">\n            <prosody rate=\"${rate}\" pitch=\"${pitch}\">\n              ${escapeXml(text)}\n            </prosody>\n          </voice>\n        </speak>\n      `.trim();\n\n      // Synthesize speech\n      const result = await new Promise<SpeechSDK.SpeechSynthesisResult>((resolve, reject) => {\n        synthesizer.speakSsmlAsync(\n          ssml,\n          (result) => {\n            synthesizer.close();\n            resolve(result);\n          },\n          (error) => {\n            synthesizer.close();\n            reject(error);\n          }\n        );\n      });\n\n      // Process synthesis result\n      if (result.reason === SpeechSDK.ResultReason.SynthesizingAudioCompleted) {\n        const audioData = result.audioData;\n        \n        logger.api.response('POST /api/voice/tts', 200, {\n          textLength: text.length,\n          audioSize: audioData.byteLength,\n          voice: voice\n        });\n\n        // Return audio as blob\n        return new NextResponse(audioData, {\n          status: 200,\n          headers: {\n            'Content-Type': 'audio/mpeg',\n            'Content-Length': audioData.byteLength.toString(),\n            'Cache-Control': 'public, max-age=3600', // Cache for 1 hour\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',\n            'Access-Control-Allow-Headers': 'Content-Type'\n          }\n        });\n\n      } else if (result.reason === SpeechSDK.ResultReason.Canceled) {\n        const cancellationDetails = SpeechSDK.CancellationDetails.fromResult(result);\n        const errorMessage = `TTS canceled: ${cancellationDetails.reason} - ${cancellationDetails.errorDetails}`;\n        \n        logger.error(errorMessage);\n        \n        if (cancellationDetails.reason === SpeechSDK.CancellationReason.Error) {\n          if (cancellationDetails.errorDetails?.includes('authentication')) {\n            return NextResponse.json(\n              { error: 'Speech service authentication failed' },\n              { status: 401 }\n            );\n          }\n          if (cancellationDetails.errorDetails?.includes('quota')) {\n            return NextResponse.json(\n              { error: 'Speech service quota exceeded' },\n              { status: 429 }\n            );\n          }\n        }\n\n        return NextResponse.json(\n          { error: 'Speech synthesis failed' },\n          { status: 422 }\n        );\n\n      } else {\n        const errorMessage = `TTS failed with reason: ${result.reason}`;\n        logger.error(errorMessage);\n        return NextResponse.json(\n          { error: errorMessage },\n          { status: 422 }\n        );\n      }\n\n    } catch (error) {\n      logger.error('Text-to-speech processing failed', error instanceof Error ? error : new Error(String(error)));\n\n      // Provide helpful error responses\n      if (error instanceof Error) {\n        if (error.message.includes('authentication')) {\n          return NextResponse.json(\n            { error: 'Speech service authentication failed' },\n            { status: 401 }\n          );\n        }\n        if (error.message.includes('quota') || error.message.includes('rate limit')) {\n          return NextResponse.json(\n            { error: 'Speech service quota exceeded' },\n            { status: 429 }\n          );\n        }\n        if (error.message.includes('timeout')) {\n          return NextResponse.json(\n            { error: 'Speech service timeout' },\n            { status: 408 }\n          );\n        }\n      }\n\n      return NextResponse.json(\n        { error: 'Internal TTS processing error' },\n        { status: 500 }\n      );\n    }\n  },\n  'POST /api/voice/tts'\n  );\n}\n\n/**\n * GET endpoint to list available voices\n */\nexport async function GET() {\n  return NextResponse.json({\n    service: 'Azure Text-to-Speech',\n    status: 'available',\n    availableVoices: [\n      {\n        name: 'en-US-SaraNeural',\n        displayName: 'Sara (Neural)',\n        gender: 'Female',\n        language: 'en-US'\n      },\n      {\n        name: 'en-US-JennyNeural',\n        displayName: 'Jenny (Neural)',\n        gender: 'Female', \n        language: 'en-US'\n      },\n      {\n        name: 'en-US-AriaNeural',\n        displayName: 'Aria (Neural)',\n        gender: 'Female',\n        language: 'en-US'\n      },\n      {\n        name: 'en-US-ChristopherNeural',\n        displayName: 'Christopher (Neural)',\n        gender: 'Male',\n        language: 'en-US'\n      },\n      {\n        name: 'en-US-EricNeural',\n        displayName: 'Eric (Neural)', \n        gender: 'Male',\n        language: 'en-US'\n      },\n      {\n        name: 'en-US-GuyNeural',\n        displayName: 'Guy (Neural)',\n        gender: 'Male',\n        language: 'en-US'\n      }\n    ],\n    timestamp: new Date().toISOString()\n  });\n}\n\n/**\n * Handle CORS preflight requests\n */\nexport async function OPTIONS() {\n  return new NextResponse(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type'\n    }\n  });\n}\n\n/**\n * Escape XML special characters for SSML\n */\nfunction escapeXml(text: string): string {\n  return text\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&apos;');\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0d69fdbeca05eadb3b911b8caca70887bb274e1f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_16bgpj9l5d = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_16bgpj9l5d();
var __createBinding =
/* istanbul ignore next */
(cov_16bgpj9l5d().s[0]++,
/* istanbul ignore next */
(cov_16bgpj9l5d().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_16bgpj9l5d().b[0][1]++, this.__createBinding) ||
/* istanbul ignore next */
(cov_16bgpj9l5d().b[0][2]++, Object.create ?
/* istanbul ignore next */
(cov_16bgpj9l5d().b[1][0]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_16bgpj9l5d().f[0]++;
  cov_16bgpj9l5d().s[1]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_16bgpj9l5d().b[2][0]++;
    cov_16bgpj9l5d().s[2]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_16bgpj9l5d().b[2][1]++;
  }
  var desc =
  /* istanbul ignore next */
  (cov_16bgpj9l5d().s[3]++, Object.getOwnPropertyDescriptor(m, k));
  /* istanbul ignore next */
  cov_16bgpj9l5d().s[4]++;
  if (
  /* istanbul ignore next */
  (cov_16bgpj9l5d().b[4][0]++, !desc) ||
  /* istanbul ignore next */
  (cov_16bgpj9l5d().b[4][1]++, "get" in desc ?
  /* istanbul ignore next */
  (cov_16bgpj9l5d().b[5][0]++, !m.__esModule) :
  /* istanbul ignore next */
  (cov_16bgpj9l5d().b[5][1]++,
  /* istanbul ignore next */
  (cov_16bgpj9l5d().b[6][0]++, desc.writable) ||
  /* istanbul ignore next */
  (cov_16bgpj9l5d().b[6][1]++, desc.configurable)))) {
    /* istanbul ignore next */
    cov_16bgpj9l5d().b[3][0]++;
    cov_16bgpj9l5d().s[5]++;
    desc = {
      enumerable: true,
      get: function () {
        /* istanbul ignore next */
        cov_16bgpj9l5d().f[1]++;
        cov_16bgpj9l5d().s[6]++;
        return m[k];
      }
    };
  } else
  /* istanbul ignore next */
  {
    cov_16bgpj9l5d().b[3][1]++;
  }
  cov_16bgpj9l5d().s[7]++;
  Object.defineProperty(o, k2, desc);
}) :
/* istanbul ignore next */
(cov_16bgpj9l5d().b[1][1]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_16bgpj9l5d().f[2]++;
  cov_16bgpj9l5d().s[8]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_16bgpj9l5d().b[7][0]++;
    cov_16bgpj9l5d().s[9]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_16bgpj9l5d().b[7][1]++;
  }
  cov_16bgpj9l5d().s[10]++;
  o[k2] = m[k];
})));
var __setModuleDefault =
/* istanbul ignore next */
(cov_16bgpj9l5d().s[11]++,
/* istanbul ignore next */
(cov_16bgpj9l5d().b[8][0]++, this) &&
/* istanbul ignore next */
(cov_16bgpj9l5d().b[8][1]++, this.__setModuleDefault) ||
/* istanbul ignore next */
(cov_16bgpj9l5d().b[8][2]++, Object.create ?
/* istanbul ignore next */
(cov_16bgpj9l5d().b[9][0]++, function (o, v) {
  /* istanbul ignore next */
  cov_16bgpj9l5d().f[3]++;
  cov_16bgpj9l5d().s[12]++;
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
}) :
/* istanbul ignore next */
(cov_16bgpj9l5d().b[9][1]++, function (o, v) {
  /* istanbul ignore next */
  cov_16bgpj9l5d().f[4]++;
  cov_16bgpj9l5d().s[13]++;
  o["default"] = v;
})));
var __importStar =
/* istanbul ignore next */
(cov_16bgpj9l5d().s[14]++,
/* istanbul ignore next */
(cov_16bgpj9l5d().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_16bgpj9l5d().b[10][1]++, this.__importStar) ||
/* istanbul ignore next */
(cov_16bgpj9l5d().b[10][2]++, function () {
  /* istanbul ignore next */
  cov_16bgpj9l5d().f[5]++;
  cov_16bgpj9l5d().s[15]++;
  var ownKeys = function (o) {
    /* istanbul ignore next */
    cov_16bgpj9l5d().f[6]++;
    cov_16bgpj9l5d().s[16]++;
    ownKeys =
    /* istanbul ignore next */
    (cov_16bgpj9l5d().b[11][0]++, Object.getOwnPropertyNames) ||
    /* istanbul ignore next */
    (cov_16bgpj9l5d().b[11][1]++, function (o) {
      /* istanbul ignore next */
      cov_16bgpj9l5d().f[7]++;
      var ar =
      /* istanbul ignore next */
      (cov_16bgpj9l5d().s[17]++, []);
      /* istanbul ignore next */
      cov_16bgpj9l5d().s[18]++;
      for (var k in o) {
        /* istanbul ignore next */
        cov_16bgpj9l5d().s[19]++;
        if (Object.prototype.hasOwnProperty.call(o, k)) {
          /* istanbul ignore next */
          cov_16bgpj9l5d().b[12][0]++;
          cov_16bgpj9l5d().s[20]++;
          ar[ar.length] = k;
        } else
        /* istanbul ignore next */
        {
          cov_16bgpj9l5d().b[12][1]++;
        }
      }
      /* istanbul ignore next */
      cov_16bgpj9l5d().s[21]++;
      return ar;
    });
    /* istanbul ignore next */
    cov_16bgpj9l5d().s[22]++;
    return ownKeys(o);
  };
  /* istanbul ignore next */
  cov_16bgpj9l5d().s[23]++;
  return function (mod) {
    /* istanbul ignore next */
    cov_16bgpj9l5d().f[8]++;
    cov_16bgpj9l5d().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_16bgpj9l5d().b[14][0]++, mod) &&
    /* istanbul ignore next */
    (cov_16bgpj9l5d().b[14][1]++, mod.__esModule)) {
      /* istanbul ignore next */
      cov_16bgpj9l5d().b[13][0]++;
      cov_16bgpj9l5d().s[25]++;
      return mod;
    } else
    /* istanbul ignore next */
    {
      cov_16bgpj9l5d().b[13][1]++;
    }
    var result =
    /* istanbul ignore next */
    (cov_16bgpj9l5d().s[26]++, {});
    /* istanbul ignore next */
    cov_16bgpj9l5d().s[27]++;
    if (mod != null) {
      /* istanbul ignore next */
      cov_16bgpj9l5d().b[15][0]++;
      cov_16bgpj9l5d().s[28]++;
      for (var k =
        /* istanbul ignore next */
        (cov_16bgpj9l5d().s[29]++, ownKeys(mod)), i =
        /* istanbul ignore next */
        (cov_16bgpj9l5d().s[30]++, 0); i < k.length; i++) {
        /* istanbul ignore next */
        cov_16bgpj9l5d().s[31]++;
        if (k[i] !== "default") {
          /* istanbul ignore next */
          cov_16bgpj9l5d().b[16][0]++;
          cov_16bgpj9l5d().s[32]++;
          __createBinding(result, mod, k[i]);
        } else
        /* istanbul ignore next */
        {
          cov_16bgpj9l5d().b[16][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_16bgpj9l5d().b[15][1]++;
    }
    cov_16bgpj9l5d().s[33]++;
    __setModuleDefault(result, mod);
    /* istanbul ignore next */
    cov_16bgpj9l5d().s[34]++;
    return result;
  };
}()));
/* istanbul ignore next */
cov_16bgpj9l5d().s[35]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_16bgpj9l5d().s[36]++;
exports.POST = POST;
/* istanbul ignore next */
cov_16bgpj9l5d().s[37]++;
exports.GET = GET;
/* istanbul ignore next */
cov_16bgpj9l5d().s[38]++;
exports.OPTIONS = OPTIONS;
const server_1 =
/* istanbul ignore next */
(cov_16bgpj9l5d().s[39]++, require("next/server"));
const SpeechSDK =
/* istanbul ignore next */
(cov_16bgpj9l5d().s[40]++, __importStar(require("microsoft-cognitiveservices-speech-sdk")));
const logger_1 =
/* istanbul ignore next */
(cov_16bgpj9l5d().s[41]++, require("@/lib/utils/logger"));
const error_utils_1 =
/* istanbul ignore next */
(cov_16bgpj9l5d().s[42]++, require("@/lib/utils/error-utils"));
/**
 * Azure Text-to-Speech API Endpoint
 * Converts text to speech using Azure Speech Services
 */
async function POST(request) {
  /* istanbul ignore next */
  cov_16bgpj9l5d().f[9]++;
  cov_16bgpj9l5d().s[43]++;
  return (0, error_utils_1.handleAsyncError)(async () => {
    /* istanbul ignore next */
    cov_16bgpj9l5d().f[10]++;
    var _a, _b;
    /* istanbul ignore next */
    cov_16bgpj9l5d().s[44]++;
    try {
      const body =
      /* istanbul ignore next */
      (cov_16bgpj9l5d().s[45]++, await request.json());
      const {
        text,
        voice =
        /* istanbul ignore next */
        (cov_16bgpj9l5d().b[17][0]++, 'en-US-SaraNeural'),
        rate =
        /* istanbul ignore next */
        (cov_16bgpj9l5d().b[18][0]++, '1.0'),
        pitch =
        /* istanbul ignore next */
        (cov_16bgpj9l5d().b[19][0]++, '0Hz')
      } =
      /* istanbul ignore next */
      (cov_16bgpj9l5d().s[46]++, body);
      /* istanbul ignore next */
      cov_16bgpj9l5d().s[47]++;
      logger_1.logger.api.request('POST /api/voice/tts', `Converting text to speech (${text.length} chars)`);
      /* istanbul ignore next */
      cov_16bgpj9l5d().s[48]++;
      if (
      /* istanbul ignore next */
      (cov_16bgpj9l5d().b[21][0]++, !text) ||
      /* istanbul ignore next */
      (cov_16bgpj9l5d().b[21][1]++, !text.trim())) {
        /* istanbul ignore next */
        cov_16bgpj9l5d().b[20][0]++;
        cov_16bgpj9l5d().s[49]++;
        return server_1.NextResponse.json({
          error: 'Text is required'
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_16bgpj9l5d().b[20][1]++;
      }
      cov_16bgpj9l5d().s[50]++;
      if (text.length > 5000) {
        /* istanbul ignore next */
        cov_16bgpj9l5d().b[22][0]++;
        cov_16bgpj9l5d().s[51]++;
        return server_1.NextResponse.json({
          error: 'Text too long (max 5000 characters)'
        }, {
          status: 400
        });
      } else
      /* istanbul ignore next */
      {
        cov_16bgpj9l5d().b[22][1]++;
      }
      // Get Azure Speech credentials
      const speechKey =
      /* istanbul ignore next */
      (cov_16bgpj9l5d().s[52]++,
      /* istanbul ignore next */
      (cov_16bgpj9l5d().b[23][0]++, process.env.NEXT_PUBLIC_SPEECH_KEY) ||
      /* istanbul ignore next */
      (cov_16bgpj9l5d().b[23][1]++, process.env.AZURE_SPEECH_KEY));
      const speechRegion =
      /* istanbul ignore next */
      (cov_16bgpj9l5d().s[53]++,
      /* istanbul ignore next */
      (cov_16bgpj9l5d().b[24][0]++, process.env.NEXT_PUBLIC_SPEECH_REGION) ||
      /* istanbul ignore next */
      (cov_16bgpj9l5d().b[24][1]++, process.env.AZURE_SPEECH_REGION));
      /* istanbul ignore next */
      cov_16bgpj9l5d().s[54]++;
      if (
      /* istanbul ignore next */
      (cov_16bgpj9l5d().b[26][0]++, !speechKey) ||
      /* istanbul ignore next */
      (cov_16bgpj9l5d().b[26][1]++, !speechRegion)) {
        /* istanbul ignore next */
        cov_16bgpj9l5d().b[25][0]++;
        cov_16bgpj9l5d().s[55]++;
        logger_1.logger.error('Azure Speech Service credentials not found');
        /* istanbul ignore next */
        cov_16bgpj9l5d().s[56]++;
        return server_1.NextResponse.json({
          error: 'Speech service configuration error'
        }, {
          status: 500
        });
      } else
      /* istanbul ignore next */
      {
        cov_16bgpj9l5d().b[25][1]++;
      }
      // Configure Azure Speech SDK
      const speechConfig =
      /* istanbul ignore next */
      (cov_16bgpj9l5d().s[57]++, SpeechSDK.SpeechConfig.fromSubscription(speechKey, speechRegion));
      /* istanbul ignore next */
      cov_16bgpj9l5d().s[58]++;
      speechConfig.speechSynthesisVoiceName = voice;
      /* istanbul ignore next */
      cov_16bgpj9l5d().s[59]++;
      speechConfig.speechSynthesisOutputFormat = SpeechSDK.SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3;
      // Create synthesizer with null audio config to get raw audio data
      const synthesizer =
      /* istanbul ignore next */
      (cov_16bgpj9l5d().s[60]++, new SpeechSDK.SpeechSynthesizer(speechConfig, undefined));
      // Create SSML for better control
      const ssml =
      /* istanbul ignore next */
      (cov_16bgpj9l5d().s[61]++, `
        <speak version="1.0" xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="en-US">
          <voice name="${voice}">
            <prosody rate="${rate}" pitch="${pitch}">
              ${escapeXml(text)}
            </prosody>
          </voice>
        </speak>
      `.trim());
      // Synthesize speech
      const result =
      /* istanbul ignore next */
      (cov_16bgpj9l5d().s[62]++, await new Promise((resolve, reject) => {
        /* istanbul ignore next */
        cov_16bgpj9l5d().f[11]++;
        cov_16bgpj9l5d().s[63]++;
        synthesizer.speakSsmlAsync(ssml, result => {
          /* istanbul ignore next */
          cov_16bgpj9l5d().f[12]++;
          cov_16bgpj9l5d().s[64]++;
          synthesizer.close();
          /* istanbul ignore next */
          cov_16bgpj9l5d().s[65]++;
          resolve(result);
        }, error => {
          /* istanbul ignore next */
          cov_16bgpj9l5d().f[13]++;
          cov_16bgpj9l5d().s[66]++;
          synthesizer.close();
          /* istanbul ignore next */
          cov_16bgpj9l5d().s[67]++;
          reject(error);
        });
      }));
      // Process synthesis result
      /* istanbul ignore next */
      cov_16bgpj9l5d().s[68]++;
      if (result.reason === SpeechSDK.ResultReason.SynthesizingAudioCompleted) {
        /* istanbul ignore next */
        cov_16bgpj9l5d().b[27][0]++;
        const audioData =
        /* istanbul ignore next */
        (cov_16bgpj9l5d().s[69]++, result.audioData);
        /* istanbul ignore next */
        cov_16bgpj9l5d().s[70]++;
        logger_1.logger.api.response('POST /api/voice/tts', 200, {
          textLength: text.length,
          audioSize: audioData.byteLength,
          voice: voice
        });
        // Return audio as blob
        /* istanbul ignore next */
        cov_16bgpj9l5d().s[71]++;
        return new server_1.NextResponse(audioData, {
          status: 200,
          headers: {
            'Content-Type': 'audio/mpeg',
            'Content-Length': audioData.byteLength.toString(),
            'Cache-Control': 'public, max-age=3600',
            // Cache for 1 hour
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',
            'Access-Control-Allow-Headers': 'Content-Type'
          }
        });
      } else {
        /* istanbul ignore next */
        cov_16bgpj9l5d().b[27][1]++;
        cov_16bgpj9l5d().s[72]++;
        if (result.reason === SpeechSDK.ResultReason.Canceled) {
          /* istanbul ignore next */
          cov_16bgpj9l5d().b[28][0]++;
          const cancellationDetails =
          /* istanbul ignore next */
          (cov_16bgpj9l5d().s[73]++, SpeechSDK.CancellationDetails.fromResult(result));
          const errorMessage =
          /* istanbul ignore next */
          (cov_16bgpj9l5d().s[74]++, `TTS canceled: ${cancellationDetails.reason} - ${cancellationDetails.errorDetails}`);
          /* istanbul ignore next */
          cov_16bgpj9l5d().s[75]++;
          logger_1.logger.error(errorMessage);
          /* istanbul ignore next */
          cov_16bgpj9l5d().s[76]++;
          if (cancellationDetails.reason === SpeechSDK.CancellationReason.Error) {
            /* istanbul ignore next */
            cov_16bgpj9l5d().b[29][0]++;
            cov_16bgpj9l5d().s[77]++;
            if (
            /* istanbul ignore next */
            (cov_16bgpj9l5d().b[32][0]++, (_a = cancellationDetails.errorDetails) === null) ||
            /* istanbul ignore next */
            (cov_16bgpj9l5d().b[32][1]++, _a === void 0) ?
            /* istanbul ignore next */
            (cov_16bgpj9l5d().b[31][0]++, void 0) :
            /* istanbul ignore next */
            (cov_16bgpj9l5d().b[31][1]++, _a.includes('authentication'))) {
              /* istanbul ignore next */
              cov_16bgpj9l5d().b[30][0]++;
              cov_16bgpj9l5d().s[78]++;
              return server_1.NextResponse.json({
                error: 'Speech service authentication failed'
              }, {
                status: 401
              });
            } else
            /* istanbul ignore next */
            {
              cov_16bgpj9l5d().b[30][1]++;
            }
            cov_16bgpj9l5d().s[79]++;
            if (
            /* istanbul ignore next */
            (cov_16bgpj9l5d().b[35][0]++, (_b = cancellationDetails.errorDetails) === null) ||
            /* istanbul ignore next */
            (cov_16bgpj9l5d().b[35][1]++, _b === void 0) ?
            /* istanbul ignore next */
            (cov_16bgpj9l5d().b[34][0]++, void 0) :
            /* istanbul ignore next */
            (cov_16bgpj9l5d().b[34][1]++, _b.includes('quota'))) {
              /* istanbul ignore next */
              cov_16bgpj9l5d().b[33][0]++;
              cov_16bgpj9l5d().s[80]++;
              return server_1.NextResponse.json({
                error: 'Speech service quota exceeded'
              }, {
                status: 429
              });
            } else
            /* istanbul ignore next */
            {
              cov_16bgpj9l5d().b[33][1]++;
            }
          } else
          /* istanbul ignore next */
          {
            cov_16bgpj9l5d().b[29][1]++;
          }
          cov_16bgpj9l5d().s[81]++;
          return server_1.NextResponse.json({
            error: 'Speech synthesis failed'
          }, {
            status: 422
          });
        } else {
          /* istanbul ignore next */
          cov_16bgpj9l5d().b[28][1]++;
          const errorMessage =
          /* istanbul ignore next */
          (cov_16bgpj9l5d().s[82]++, `TTS failed with reason: ${result.reason}`);
          /* istanbul ignore next */
          cov_16bgpj9l5d().s[83]++;
          logger_1.logger.error(errorMessage);
          /* istanbul ignore next */
          cov_16bgpj9l5d().s[84]++;
          return server_1.NextResponse.json({
            error: errorMessage
          }, {
            status: 422
          });
        }
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_16bgpj9l5d().s[85]++;
      logger_1.logger.error('Text-to-speech processing failed', error instanceof Error ?
      /* istanbul ignore next */
      (cov_16bgpj9l5d().b[36][0]++, error) :
      /* istanbul ignore next */
      (cov_16bgpj9l5d().b[36][1]++, new Error(String(error))));
      // Provide helpful error responses
      /* istanbul ignore next */
      cov_16bgpj9l5d().s[86]++;
      if (error instanceof Error) {
        /* istanbul ignore next */
        cov_16bgpj9l5d().b[37][0]++;
        cov_16bgpj9l5d().s[87]++;
        if (error.message.includes('authentication')) {
          /* istanbul ignore next */
          cov_16bgpj9l5d().b[38][0]++;
          cov_16bgpj9l5d().s[88]++;
          return server_1.NextResponse.json({
            error: 'Speech service authentication failed'
          }, {
            status: 401
          });
        } else
        /* istanbul ignore next */
        {
          cov_16bgpj9l5d().b[38][1]++;
        }
        cov_16bgpj9l5d().s[89]++;
        if (
        /* istanbul ignore next */
        (cov_16bgpj9l5d().b[40][0]++, error.message.includes('quota')) ||
        /* istanbul ignore next */
        (cov_16bgpj9l5d().b[40][1]++, error.message.includes('rate limit'))) {
          /* istanbul ignore next */
          cov_16bgpj9l5d().b[39][0]++;
          cov_16bgpj9l5d().s[90]++;
          return server_1.NextResponse.json({
            error: 'Speech service quota exceeded'
          }, {
            status: 429
          });
        } else
        /* istanbul ignore next */
        {
          cov_16bgpj9l5d().b[39][1]++;
        }
        cov_16bgpj9l5d().s[91]++;
        if (error.message.includes('timeout')) {
          /* istanbul ignore next */
          cov_16bgpj9l5d().b[41][0]++;
          cov_16bgpj9l5d().s[92]++;
          return server_1.NextResponse.json({
            error: 'Speech service timeout'
          }, {
            status: 408
          });
        } else
        /* istanbul ignore next */
        {
          cov_16bgpj9l5d().b[41][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_16bgpj9l5d().b[37][1]++;
      }
      cov_16bgpj9l5d().s[93]++;
      return server_1.NextResponse.json({
        error: 'Internal TTS processing error'
      }, {
        status: 500
      });
    }
  }, 'POST /api/voice/tts');
}
/**
 * GET endpoint to list available voices
 */
async function GET() {
  /* istanbul ignore next */
  cov_16bgpj9l5d().f[14]++;
  cov_16bgpj9l5d().s[94]++;
  return server_1.NextResponse.json({
    service: 'Azure Text-to-Speech',
    status: 'available',
    availableVoices: [{
      name: 'en-US-SaraNeural',
      displayName: 'Sara (Neural)',
      gender: 'Female',
      language: 'en-US'
    }, {
      name: 'en-US-JennyNeural',
      displayName: 'Jenny (Neural)',
      gender: 'Female',
      language: 'en-US'
    }, {
      name: 'en-US-AriaNeural',
      displayName: 'Aria (Neural)',
      gender: 'Female',
      language: 'en-US'
    }, {
      name: 'en-US-ChristopherNeural',
      displayName: 'Christopher (Neural)',
      gender: 'Male',
      language: 'en-US'
    }, {
      name: 'en-US-EricNeural',
      displayName: 'Eric (Neural)',
      gender: 'Male',
      language: 'en-US'
    }, {
      name: 'en-US-GuyNeural',
      displayName: 'Guy (Neural)',
      gender: 'Male',
      language: 'en-US'
    }],
    timestamp: new Date().toISOString()
  });
}
/**
 * Handle CORS preflight requests
 */
async function OPTIONS() {
  /* istanbul ignore next */
  cov_16bgpj9l5d().f[15]++;
  cov_16bgpj9l5d().s[95]++;
  return new server_1.NextResponse(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type'
    }
  });
}
/**
 * Escape XML special characters for SSML
 */
function escapeXml(text) {
  /* istanbul ignore next */
  cov_16bgpj9l5d().f[16]++;
  cov_16bgpj9l5d().s[96]++;
  return text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&apos;');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,