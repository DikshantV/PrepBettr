{"file":"/Users/dikshantvashistha/PrepBettr/lib/azure-config-browser.ts","mappings":";AAAA,yCAAyC;AACzC,oGAAoG;;AAoBpG,8CAyDC;AAKD,wCAyBC;AAKD,8BAEC;AAKD,gCAGC;AA5GD,IAAI,aAAa,GAAwB,IAAI,CAAC;AAE9C;;;GAGG;AACI,KAAK,UAAU,iBAAiB;IACrC,qCAAqC;IACrC,IAAI,aAAa,EAAE,CAAC;QAClB,OAAO,aAAa,CAAC;IACvB,CAAC;IAED,IAAI,CAAC;QACH,OAAO,CAAC,GAAG,CAAC,8DAA8D,CAAC,CAAC;QAE5E,MAAM,OAAO,GAAG;YACd,SAAS,EAAE,OAAO,CAAC,GAAG,CAAC,sBAAsB,IAAI,EAAE;YACnD,cAAc,EAAE,OAAO,CAAC,GAAG,CAAC,2BAA2B,IAAI,EAAE;YAC7D,cAAc,EAAE,OAAO,CAAC,GAAG,CAAC,gCAAgC,IAAI,EAAE;YAClE,mBAAmB,EAAE,OAAO,CAAC,GAAG,CAAC,iCAAiC,IAAI,EAAE;YACxE,qBAAqB,EAAE,OAAO,CAAC,GAAG,CAAC,mCAAmC,IAAI,QAAQ;YAClF,0BAA0B,EAAE,OAAO,CAAC,GAAG,CAAC,yCAAyC,IAAI,cAAc;YACnG,0BAA0B,EAAE,OAAO,CAAC,GAAG,CAAC,yCAAyC,IAAI,QAAQ;YAC7F,8BAA8B,EAAE,OAAO,CAAC,GAAG,CAAC,8CAA8C;YAC1F,sBAAsB,EAAE,OAAO,CAAC,GAAG,CAAC,qCAAqC;SAC1E,CAAC;QAEF,+CAA+C;QAC/C,IAAI,CAAC,OAAO,CAAC,SAAS,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC;YAClD,OAAO,CAAC,IAAI,CAAC,kEAAkE,CAAC,CAAC;QACnF,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,cAAc,IAAI,CAAC,OAAO,CAAC,mBAAmB,EAAE,CAAC;YAC5D,OAAO,CAAC,IAAI,CAAC,kEAAkE,CAAC,CAAC;QACnF,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,8BAA8B,IAAI,CAAC,OAAO,CAAC,sBAAsB,EAAE,CAAC;YAC/E,OAAO,CAAC,IAAI,CAAC,6EAA6E,CAAC,CAAC;QAC9F,CAAC;QAED,aAAa,GAAG,OAAO,CAAC;QACxB,OAAO,CAAC,GAAG,CAAC,yDAAyD,CAAC,CAAC;QACvE,OAAO,aAAa,CAAC;IAEvB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,uCAAuC,EAAE,KAAK,CAAC,CAAC;QAE9D,mCAAmC;QACnC,MAAM,eAAe,GAAG;YACtB,SAAS,EAAE,EAAE;YACb,cAAc,EAAE,EAAE;YAClB,cAAc,EAAE,EAAE;YAClB,mBAAmB,EAAE,EAAE;YACvB,qBAAqB,EAAE,QAAQ;YAC/B,0BAA0B,EAAE,cAAc;YAC1C,0BAA0B,EAAE,QAAQ;YACpC,8BAA8B,EAAE,SAAS;YACzC,sBAAsB,EAAE,SAAS;SAClC,CAAC;QAEF,aAAa,GAAG,eAAe,CAAC;QAChC,OAAO,aAAa,CAAC;IACvB,CAAC;AACH,CAAC;AAED;;GAEG;AACH,SAAgB,cAAc;IAC5B,OAAO;QACL,WAAW,EAAE,SAAS;QACtB,eAAe,EAAE,CAAC,CAAC,aAAa;QAChC,aAAa,EAAE;YACb,SAAS,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,sBAAsB;YAC/C,cAAc,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,2BAA2B;YACzD,cAAc,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,gCAAgC;YAC9D,mBAAmB,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,iCAAiC;YACpE,qBAAqB,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,mCAAmC;YACxE,0BAA0B,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,yCAAyC;YACnF,0BAA0B,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,yCAAyC;YACnF,8BAA8B,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,8CAA8C;YAC5F,sBAAsB,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,qCAAqC;SAC5E;QACD,WAAW,EAAE;YACX,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,mCAAmC;YACxD,UAAU,EAAE,OAAO,CAAC,GAAG,CAAC,yCAAyC,IAAI,cAAc;YACnF,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,yCAAyC,IAAI,QAAQ;SACzE;QACD,gBAAgB,EAAE;YAChB,gBAAgB,EAAE,OAAO,CAAC,GAAG,CAAC,8CAA8C;YAC5E,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,qCAAqC;SAC5D;KACF,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,SAAgB,SAAS;IACvB,OAAO,OAAO,MAAM,KAAK,WAAW,CAAC;AACvC,CAAC;AAED;;GAEG;AACH,SAAgB,UAAU;IACxB,aAAa,GAAG,IAAI,CAAC;IACrB,OAAO,CAAC,GAAG,CAAC,sCAAsC,CAAC,CAAC;AACtD,CAAC","names":[],"sources":["/Users/dikshantvashistha/PrepBettr/lib/azure-config-browser.ts"],"sourcesContent":["// Browser-compatible Azure configuration\n// This file only uses environment variables and doesn't import server-only Azure Identity libraries\n\ninterface AzureSecrets {\n  speechKey: string;\n  speechEndpoint: string;\n  azureOpenAIKey: string;\n  azureOpenAIEndpoint: string;\n  azureOpenAIDeployment: string;\n  azureOpenAIGpt35Deployment?: string; // gpt-35-turbo deployment\n  azureOpenAIGpt4oDeployment?: string; // gpt-4o deployment\n  azureAppConfigConnectionString?: string; // Azure App Configuration connection string\n  azureAppConfigEndpoint?: string; // Azure App Configuration endpoint\n}\n\nlet cachedSecrets: AzureSecrets | null = null;\n\n/**\n * Fetch Azure secrets from environment variables (browser-safe version)\n * This function only uses NEXT_PUBLIC_ environment variables available in the browser\n */\nexport async function fetchAzureSecrets(): Promise<AzureSecrets> {\n  // Return cached secrets if available\n  if (cachedSecrets) {\n    return cachedSecrets;\n  }\n\n  try {\n    console.log('üîë Loading Azure configuration from environment variables...');\n    \n    const secrets = {\n      speechKey: process.env.NEXT_PUBLIC_SPEECH_KEY || '',\n      speechEndpoint: process.env.NEXT_PUBLIC_SPEECH_ENDPOINT || '',\n      azureOpenAIKey: process.env.NEXT_PUBLIC_AZURE_OPENAI_API_KEY || '',\n      azureOpenAIEndpoint: process.env.NEXT_PUBLIC_AZURE_OPENAI_ENDPOINT || '',\n      azureOpenAIDeployment: process.env.NEXT_PUBLIC_AZURE_OPENAI_DEPLOYMENT || 'gpt-4o',\n      azureOpenAIGpt35Deployment: process.env.NEXT_PUBLIC_AZURE_OPENAI_GPT35_DEPLOYMENT || 'gpt-35-turbo',\n      azureOpenAIGpt4oDeployment: process.env.NEXT_PUBLIC_AZURE_OPENAI_GPT4O_DEPLOYMENT || 'gpt-4o',\n      azureAppConfigConnectionString: process.env.NEXT_PUBLIC_AZURE_APP_CONFIG_CONNECTION_STRING,\n      azureAppConfigEndpoint: process.env.NEXT_PUBLIC_AZURE_APP_CONFIG_ENDPOINT\n    };\n\n    // Validate that required secrets are available\n    if (!secrets.speechKey || !secrets.speechEndpoint) {\n      console.warn('‚ö†Ô∏è Azure Speech credentials not available in browser environment');\n    }\n\n    if (!secrets.azureOpenAIKey || !secrets.azureOpenAIEndpoint) {\n      console.warn('‚ö†Ô∏è Azure OpenAI credentials not available in browser environment');\n    }\n\n    if (!secrets.azureAppConfigConnectionString && !secrets.azureAppConfigEndpoint) {\n      console.warn('‚ö†Ô∏è Azure App Configuration credentials not available in browser environment');\n    }\n\n    cachedSecrets = secrets;\n    console.log('‚úÖ Azure configuration loaded from environment variables');\n    return cachedSecrets;\n    \n  } catch (error) {\n    console.error('‚ùå Failed to load Azure configuration:', error);\n    \n    // Return empty secrets as fallback\n    const fallbackSecrets = {\n      speechKey: '',\n      speechEndpoint: '',\n      azureOpenAIKey: '',\n      azureOpenAIEndpoint: '',\n      azureOpenAIDeployment: 'gpt-4o',\n      azureOpenAIGpt35Deployment: 'gpt-35-turbo',\n      azureOpenAIGpt4oDeployment: 'gpt-4o',\n      azureAppConfigConnectionString: undefined,\n      azureAppConfigEndpoint: undefined\n    };\n    \n    cachedSecrets = fallbackSecrets;\n    return cachedSecrets;\n  }\n}\n\n/**\n * Get current Azure configuration (for debugging)\n */\nexport function getAzureConfig() {\n  return {\n    environment: 'browser',\n    hasSecretsCache: !!cachedSecrets,\n    configuration: {\n      speechKey: !!process.env.NEXT_PUBLIC_SPEECH_KEY,\n      speechEndpoint: !!process.env.NEXT_PUBLIC_SPEECH_ENDPOINT,\n      azureOpenAIKey: !!process.env.NEXT_PUBLIC_AZURE_OPENAI_API_KEY,\n      azureOpenAIEndpoint: !!process.env.NEXT_PUBLIC_AZURE_OPENAI_ENDPOINT,\n      azureOpenAIDeployment: !!process.env.NEXT_PUBLIC_AZURE_OPENAI_DEPLOYMENT,\n      azureOpenAIGpt35Deployment: !!process.env.NEXT_PUBLIC_AZURE_OPENAI_GPT35_DEPLOYMENT,\n      azureOpenAIGpt4oDeployment: !!process.env.NEXT_PUBLIC_AZURE_OPENAI_GPT4O_DEPLOYMENT,\n      azureAppConfigConnectionString: !!process.env.NEXT_PUBLIC_AZURE_APP_CONFIG_CONNECTION_STRING,\n      azureAppConfigEndpoint: !!process.env.NEXT_PUBLIC_AZURE_APP_CONFIG_ENDPOINT\n    },\n    deployments: {\n      default: process.env.NEXT_PUBLIC_AZURE_OPENAI_DEPLOYMENT,\n      gpt35Turbo: process.env.NEXT_PUBLIC_AZURE_OPENAI_GPT35_DEPLOYMENT || 'gpt-35-turbo',\n      gpt4o: process.env.NEXT_PUBLIC_AZURE_OPENAI_GPT4O_DEPLOYMENT || 'gpt-4o'\n    },\n    appConfiguration: {\n      connectionString: process.env.NEXT_PUBLIC_AZURE_APP_CONFIG_CONNECTION_STRING,\n      endpoint: process.env.NEXT_PUBLIC_AZURE_APP_CONFIG_ENDPOINT\n    }\n  };\n}\n\n/**\n * Check if we're running in a browser environment\n */\nexport function isBrowser(): boolean {\n  return typeof window !== 'undefined';\n}\n\n/**\n * Clear cached secrets (useful for testing or re-initialization)\n */\nexport function clearCache(): void {\n  cachedSecrets = null;\n  console.log('üßπ Azure configuration cache cleared');\n}\n"],"version":3}