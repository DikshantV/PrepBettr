b48af14a41a83f85664161116f6d940c
"use strict";
// Browser-compatible Azure configuration
// This file only uses environment variables and doesn't import server-only Azure Identity libraries
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchAzureSecrets = fetchAzureSecrets;
exports.getAzureConfig = getAzureConfig;
exports.isBrowser = isBrowser;
exports.clearCache = clearCache;
let cachedSecrets = null;
/**
 * Fetch Azure secrets from environment variables (browser-safe version)
 * This function only uses NEXT_PUBLIC_ environment variables available in the browser
 */
async function fetchAzureSecrets() {
    // Return cached secrets if available
    if (cachedSecrets) {
        return cachedSecrets;
    }
    try {
        console.log('üîë Loading Azure configuration from environment variables...');
        const secrets = {
            speechKey: process.env.NEXT_PUBLIC_SPEECH_KEY || '',
            speechEndpoint: process.env.NEXT_PUBLIC_SPEECH_ENDPOINT || '',
            azureOpenAIKey: process.env.NEXT_PUBLIC_AZURE_OPENAI_API_KEY || '',
            azureOpenAIEndpoint: process.env.NEXT_PUBLIC_AZURE_OPENAI_ENDPOINT || '',
            azureOpenAIDeployment: process.env.NEXT_PUBLIC_AZURE_OPENAI_DEPLOYMENT || 'gpt-4o',
            azureOpenAIGpt35Deployment: process.env.NEXT_PUBLIC_AZURE_OPENAI_GPT35_DEPLOYMENT || 'gpt-35-turbo',
            azureOpenAIGpt4oDeployment: process.env.NEXT_PUBLIC_AZURE_OPENAI_GPT4O_DEPLOYMENT || 'gpt-4o',
            azureAppConfigConnectionString: process.env.NEXT_PUBLIC_AZURE_APP_CONFIG_CONNECTION_STRING,
            azureAppConfigEndpoint: process.env.NEXT_PUBLIC_AZURE_APP_CONFIG_ENDPOINT
        };
        // Validate that required secrets are available
        if (!secrets.speechKey || !secrets.speechEndpoint) {
            console.warn('‚ö†Ô∏è Azure Speech credentials not available in browser environment');
        }
        if (!secrets.azureOpenAIKey || !secrets.azureOpenAIEndpoint) {
            console.warn('‚ö†Ô∏è Azure OpenAI credentials not available in browser environment');
        }
        if (!secrets.azureAppConfigConnectionString && !secrets.azureAppConfigEndpoint) {
            console.warn('‚ö†Ô∏è Azure App Configuration credentials not available in browser environment');
        }
        cachedSecrets = secrets;
        console.log('‚úÖ Azure configuration loaded from environment variables');
        return cachedSecrets;
    }
    catch (error) {
        console.error('‚ùå Failed to load Azure configuration:', error);
        // Return empty secrets as fallback
        const fallbackSecrets = {
            speechKey: '',
            speechEndpoint: '',
            azureOpenAIKey: '',
            azureOpenAIEndpoint: '',
            azureOpenAIDeployment: 'gpt-4o',
            azureOpenAIGpt35Deployment: 'gpt-35-turbo',
            azureOpenAIGpt4oDeployment: 'gpt-4o',
            azureAppConfigConnectionString: undefined,
            azureAppConfigEndpoint: undefined
        };
        cachedSecrets = fallbackSecrets;
        return cachedSecrets;
    }
}
/**
 * Get current Azure configuration (for debugging)
 */
function getAzureConfig() {
    return {
        environment: 'browser',
        hasSecretsCache: !!cachedSecrets,
        configuration: {
            speechKey: !!process.env.NEXT_PUBLIC_SPEECH_KEY,
            speechEndpoint: !!process.env.NEXT_PUBLIC_SPEECH_ENDPOINT,
            azureOpenAIKey: !!process.env.NEXT_PUBLIC_AZURE_OPENAI_API_KEY,
            azureOpenAIEndpoint: !!process.env.NEXT_PUBLIC_AZURE_OPENAI_ENDPOINT,
            azureOpenAIDeployment: !!process.env.NEXT_PUBLIC_AZURE_OPENAI_DEPLOYMENT,
            azureOpenAIGpt35Deployment: !!process.env.NEXT_PUBLIC_AZURE_OPENAI_GPT35_DEPLOYMENT,
            azureOpenAIGpt4oDeployment: !!process.env.NEXT_PUBLIC_AZURE_OPENAI_GPT4O_DEPLOYMENT,
            azureAppConfigConnectionString: !!process.env.NEXT_PUBLIC_AZURE_APP_CONFIG_CONNECTION_STRING,
            azureAppConfigEndpoint: !!process.env.NEXT_PUBLIC_AZURE_APP_CONFIG_ENDPOINT
        },
        deployments: {
            default: process.env.NEXT_PUBLIC_AZURE_OPENAI_DEPLOYMENT,
            gpt35Turbo: process.env.NEXT_PUBLIC_AZURE_OPENAI_GPT35_DEPLOYMENT || 'gpt-35-turbo',
            gpt4o: process.env.NEXT_PUBLIC_AZURE_OPENAI_GPT4O_DEPLOYMENT || 'gpt-4o'
        },
        appConfiguration: {
            connectionString: process.env.NEXT_PUBLIC_AZURE_APP_CONFIG_CONNECTION_STRING,
            endpoint: process.env.NEXT_PUBLIC_AZURE_APP_CONFIG_ENDPOINT
        }
    };
}
/**
 * Check if we're running in a browser environment
 */
function isBrowser() {
    return typeof window !== 'undefined';
}
/**
 * Clear cached secrets (useful for testing or re-initialization)
 */
function clearCache() {
    cachedSecrets = null;
    console.log('üßπ Azure configuration cache cleared');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,