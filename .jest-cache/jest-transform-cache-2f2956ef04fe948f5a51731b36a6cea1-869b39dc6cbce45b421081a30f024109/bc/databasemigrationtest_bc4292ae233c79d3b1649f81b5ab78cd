b3ceb1e97acf522076204e6b02706ad7
"use strict";
/**
 * Database Migration Test Suite
 *
 * Comprehensive tests for Firestore to Azure Cosmos DB migration
 * including unit tests, integration tests, and validation scenarios.
 */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock dependencies
globals_1.jest.mock('../lib/firebase/admin');
globals_1.jest.mock('../lib/services/azure-cosmos-service');
globals_1.jest.mock('../lib/azure-config');
const database_migration_1 = require("../scripts/database-migration");
const dual_write_service_1 = require("../lib/services/dual-write-service");
const azure_cosmos_service_1 = require("../lib/services/azure-cosmos-service");
const admin_1 = require("../lib/firebase/admin");
const mockFirestore = {
    collection: globals_1.jest.fn(),
    batch: globals_1.jest.fn()
};
const mockCollection = {
    doc: globals_1.jest.fn(),
    get: globals_1.jest.fn(),
    add: globals_1.jest.fn(),
    where: globals_1.jest.fn(),
    orderBy: globals_1.jest.fn(),
    limit: globals_1.jest.fn(),
    offset: globals_1.jest.fn(),
    count: globals_1.jest.fn(),
    startAfter: globals_1.jest.fn()
};
const mockDoc = {
    get: globals_1.jest.fn(),
    set: globals_1.jest.fn(),
    update: globals_1.jest.fn(),
    delete: globals_1.jest.fn(),
    exists: false,
    id: 'test-doc-id',
    data: globals_1.jest.fn()
};
const mockSnapshot = {
    docs: [],
    empty: true,
    size: 0,
    data: globals_1.jest.fn()
};
const mockBatch = {
    set: globals_1.jest.fn(),
    update: globals_1.jest.fn(),
    delete: globals_1.jest.fn(),
    commit: globals_1.jest.fn()
};
// Test data fixtures
const sampleInterviewDoc = {
    id: 'interview-123',
    userId: 'user-456',
    questions: ['Q1', 'Q2', 'Q3'],
    responses: ['A1', 'A2', 'A3'],
    createdAt: new Date('2023-01-01'),
    finalized: false,
    metadata: {
        duration: 1800,
        aiModel: 'gpt-4'
    }
};
const sampleResumeDoc = {
    id: 'resume-789',
    userId: 'user-456',
    filename: 'resume.pdf',
    extractedData: {
        skills: ['JavaScript', 'React', 'Node.js'],
        experience: [
            {
                company: 'Tech Corp',
                role: 'Developer',
                duration: '2 years'
            }
        ],
        education: []
    },
    metadata: {
        fileSize: 204800,
        uploadDate: new Date('2023-01-15'),
        mimeType: 'application/pdf',
        storageProvider: 'firebase'
    },
    createdAt: new Date('2023-01-15')
};
(0, globals_1.describe)('DatabaseMigrationService', () => {
    let migrationService;
    (0, globals_1.beforeAll)(() => {
        // Setup global mocks
        admin_1.getAdminFirestore.mockReturnValue(mockFirestore);
        mockFirestore.collection.mockReturnValue(mockCollection);
        mockCollection.doc.mockReturnValue(mockDoc);
        mockCollection.get.mockReturnValue(Promise.resolve(mockSnapshot));
        mockCollection.count.mockReturnValue({ get: () => Promise.resolve(mockSnapshot) });
        mockFirestore.batch.mockReturnValue(mockBatch);
    });
    (0, globals_1.beforeEach)(() => {
        migrationService = new database_migration_1.DatabaseMigrationService();
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.describe)('Collection Mapping', () => {
        (0, globals_1.it)('should have correct collection mappings', () => {
            const mappings = migrationService.collectionMappings;
            (0, globals_1.expect)(mappings).toEqual({
                'interviews': 'interviews',
                'feedback': 'feedback',
                'resumes': 'resumes',
                'usage': 'usage',
                'autoApplySettings': 'autoApplySettings',
                'applications': 'applications',
                'jobListings': 'jobListings',
                'automationLogs': 'automationLogs',
                'subscription_events': 'subscriptionEvents'
            });
        });
        (0, globals_1.it)('should throw error for unmapped collection', async () => {
            await (0, globals_1.expect)(migrationService.migrateCollection('unmapped-collection')).rejects.toThrow('No mapping found for collection: unmapped-collection');
        });
    });
    (0, globals_1.describe)('Document Transformation', () => {
        (0, globals_1.it)('should transform interview document correctly', async () => {
            const transformed = await migrationService.transformDocumentForCosmos({ id: sampleInterviewDoc.id, data: () => sampleInterviewDoc }, 'interviews');
            (0, globals_1.expect)(transformed).toEqual(Object.assign(Object.assign({ id: sampleInterviewDoc.id }, sampleInterviewDoc), { _partitionKey: sampleInterviewDoc.userId, status: 'active', metadata: Object.assign(Object.assign({}, sampleInterviewDoc.metadata), { migratedFrom: 'firestore' }), _migrated: {
                    from: 'firestore',
                    timestamp: globals_1.expect.any(Date),
                    originalId: sampleInterviewDoc.id,
                    checksum: globals_1.expect.any(String)
                } }));
        });
        (0, globals_1.it)('should transform resume document correctly', async () => {
            const transformed = await migrationService.transformDocumentForCosmos({ id: sampleResumeDoc.id, data: () => sampleResumeDoc }, 'resumes');
            (0, globals_1.expect)(transformed).toEqual(Object.assign(Object.assign({ id: sampleResumeDoc.id }, sampleResumeDoc), { _partitionKey: sampleResumeDoc.userId, interviewQuestions: [], _migrated: {
                    from: 'firestore',
                    timestamp: globals_1.expect.any(Date),
                    originalId: sampleResumeDoc.id,
                    checksum: globals_1.expect.any(String)
                } }));
        });
        (0, globals_1.it)('should calculate consistent checksum', () => {
            const data = { field1: 'value1', field2: 'value2' };
            const checksum1 = migrationService.calculateChecksum(data);
            const checksum2 = migrationService.calculateChecksum(data);
            (0, globals_1.expect)(checksum1).toBe(checksum2);
            (0, globals_1.expect)(checksum1).toHaveLength(64); // SHA-256 hex string
        });
    });
    (0, globals_1.describe)('Partition Key Generation', () => {
        (0, globals_1.it)('should generate correct partition keys for user-based collections', () => {
            const userData = { userId: 'user-123' };
            const partitionKey = migrationService.getPartitionKey(userData, 'interviews');
            (0, globals_1.expect)(partitionKey).toBe('user-123');
        });
        (0, globals_1.it)('should generate correct partition keys for system collections', () => {
            const jobData = { id: 'job-456' };
            const partitionKey = migrationService.getPartitionKey(jobData, 'jobListings');
            (0, globals_1.expect)(partitionKey).toBe('job-456');
        });
        (0, globals_1.it)('should fallback to default partition key', () => {
            const emptyData = {};
            const partitionKey = migrationService.getPartitionKey(emptyData, 'interviews');
            (0, globals_1.expect)(partitionKey).toBe('default');
        });
    });
    (0, globals_1.describe)('Migration Process', () => {
        (0, globals_1.beforeEach)(() => {
            // Mock Firestore responses
            mockSnapshot.data.mockReturnValue({ count: 5 });
            mockSnapshot.docs = Array(5).fill(null).map((_, index) => ({
                id: `doc-${index}`,
                data: () => (Object.assign(Object.assign({}, sampleInterviewDoc), { id: `doc-${index}` }))
            }));
            // Mock Cosmos DB responses
            azure_cosmos_service_1.azureCosmosService.initialize = globals_1.jest.fn().mockResolvedValue(undefined);
            azure_cosmos_service_1.azureCosmosService.createDocument = globals_1.jest.fn().mockResolvedValue(undefined);
            azure_cosmos_service_1.azureCosmosService.getDocument = globals_1.jest.fn().mockResolvedValue(null);
            azure_cosmos_service_1.azureCosmosService.queryDocuments = globals_1.jest.fn().mockResolvedValue([]);
        });
        (0, globals_1.it)('should perform dry run migration', async () => {
            const result = await migrationService.migrateCollection('interviews', {
                dryRun: true,
                batchSize: 2
            });
            (0, globals_1.expect)(result.collection).toBe('interviews');
            (0, globals_1.expect)(result.total).toBe(5);
            (0, globals_1.expect)(result.migrated).toBe(5);
            (0, globals_1.expect)(result.failed).toBe(0);
            // Should not actually call Cosmos DB create
            (0, globals_1.expect)(azure_cosmos_service_1.azureCosmosService.createDocument).not.toHaveBeenCalled();
        });
        (0, globals_1.it)('should handle migration errors gracefully', async () => {
            // Mock one document creation failure
            azure_cosmos_service_1.azureCosmosService.createDocument = globals_1.jest.fn()
                .mockResolvedValueOnce(undefined) // First call succeeds
                .mockRejectedValueOnce(new Error('Cosmos DB error')); // Second call fails
            const result = await migrationService.migrateCollection('interviews', {
                batchSize: 2
            });
            (0, globals_1.expect)(result.migrated).toBe(1);
            (0, globals_1.expect)(result.failed).toBe(1);
            (0, globals_1.expect)(result.errors).toHaveLength(1);
            (0, globals_1.expect)(result.errors[0].error).toBe('Cosmos DB error');
        });
        (0, globals_1.it)('should validate only without migration', async () => {
            azure_cosmos_service_1.azureCosmosService.queryDocuments = globals_1.jest.fn().mockResolvedValue([0]); // Mock count query
            const result = await migrationService.migrateCollection('interviews', {
                validateOnly: true
            });
            (0, globals_1.expect)(result.total).toBe(0);
            (0, globals_1.expect)(result.migrated).toBe(0);
            (0, globals_1.expect)(azure_cosmos_service_1.azureCosmosService.createDocument).not.toHaveBeenCalled();
        });
    });
    (0, globals_1.describe)('Validation', () => {
        (0, globals_1.beforeEach)(() => {
            mockSnapshot.data.mockReturnValue({ count: 3 });
            azure_cosmos_service_1.azureCosmosService.queryDocuments = globals_1.jest.fn().mockResolvedValue([3]); // Mock count
        });
        (0, globals_1.it)('should validate equal document counts', async () => {
            const validation = await migrationService.validateMigration('interviews');
            (0, globals_1.expect)(validation.collection).toBe('interviews');
            (0, globals_1.expect)(validation.counts.firestore).toBe(3);
            (0, globals_1.expect)(validation.counts.cosmos).toBe(3);
        });
        (0, globals_1.it)('should detect count mismatches', async () => {
            azure_cosmos_service_1.azureCosmosService.queryDocuments = globals_1.jest.fn().mockResolvedValue([2]); // Different count
            const validation = await migrationService.validateMigration('interviews');
            (0, globals_1.expect)(validation.counts.firestore).toBe(3);
            (0, globals_1.expect)(validation.counts.cosmos).toBe(2);
            (0, globals_1.expect)(validation.isValid).toBe(false);
        });
    });
    (0, globals_1.describe)('Document Comparison', () => {
        (0, globals_1.it)('should detect identical documents', () => {
            const doc1 = { field1: 'value1', field2: 'value2' };
            const doc2 = { field1: 'value1', field2: 'value2' };
            const differences = migrationService.compareDocuments(doc1, doc2);
            (0, globals_1.expect)(differences).toHaveLength(0);
        });
        (0, globals_1.it)('should detect value differences', () => {
            const doc1 = { field1: 'value1', field2: 'value2' };
            const doc2 = { field1: 'value1', field2: 'different' };
            const differences = migrationService.compareDocuments(doc1, doc2);
            (0, globals_1.expect)(differences).toContain('Value mismatch for key: field2');
        });
        (0, globals_1.it)('should detect missing fields', () => {
            const doc1 = { field1: 'value1', field2: 'value2' };
            const doc2 = { field1: 'value1' };
            const differences = migrationService.compareDocuments(doc1, doc2);
            (0, globals_1.expect)(differences).toContain('Missing key in Cosmos: field2');
        });
        (0, globals_1.it)('should ignore Cosmos-specific fields', () => {
            const firestoreDoc = { field1: 'value1' };
            const cosmosDoc = { field1: 'value1', _partitionKey: 'pk', _migrated: {} };
            const differences = migrationService.compareDocuments(firestoreDoc, cosmosDoc);
            (0, globals_1.expect)(differences).toHaveLength(0);
        });
        (0, globals_1.it)('should handle date comparisons', () => {
            const date = new Date('2023-01-01');
            const doc1 = { timestamp: date };
            const doc2 = { timestamp: new Date(date.getTime()) };
            const isEqual = migrationService.deepEqual(doc1.timestamp, doc2.timestamp);
            (0, globals_1.expect)(isEqual).toBe(true);
        });
    });
    (0, globals_1.describe)('Rollback', () => {
        (0, globals_1.beforeEach)(() => {
            azure_cosmos_service_1.azureCosmosService.queryDocuments = globals_1.jest.fn().mockResolvedValue([
                {
                    id: 'doc-1',
                    field1: 'value1',
                    _partitionKey: 'user-123',
                    _migrated: { from: 'firestore' }
                },
                {
                    id: 'doc-2',
                    field1: 'value2',
                    _partitionKey: 'user-456',
                    _migrated: { from: 'firestore' }
                }
            ]);
            mockBatch.commit.mockResolvedValue(undefined);
        });
        (0, globals_1.it)('should rollback migrated documents', async () => {
            await migrationService.rollbackCollection('interviews');
            (0, globals_1.expect)(azure_cosmos_service_1.azureCosmosService.queryDocuments).toHaveBeenCalledWith('interviews', 'SELECT * FROM c WHERE c._migrated.from = "firestore"', []);
            (0, globals_1.expect)(mockBatch.set).toHaveBeenCalledTimes(2);
            (0, globals_1.expect)(mockBatch.commit).toHaveBeenCalled();
        });
        (0, globals_1.it)('should handle large rollbacks in batches', async () => {
            // Mock 1000 documents
            const largeBatch = Array(1000).fill(null).map((_, index) => ({
                id: `doc-${index}`,
                field1: `value${index}`,
                _partitionKey: `user-${index}`,
                _migrated: { from: 'firestore' }
            }));
            azure_cosmos_service_1.azureCosmosService.queryDocuments = globals_1.jest.fn().mockResolvedValue(largeBatch);
            await migrationService.rollbackCollection('interviews');
            // Should commit twice (500 + 500)
            (0, globals_1.expect)(mockBatch.commit).toHaveBeenCalledTimes(2);
        });
    });
});
(0, globals_1.describe)('DualWriteService', () => {
    let dualWriteService;
    (0, globals_1.beforeAll)(() => {
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.beforeEach)(() => {
        dualWriteService = new dual_write_service_1.DualWriteService({
            readPreference: 'firestore-first',
            writeMode: 'dual',
            validateWrites: false,
            failOnWriteError: false,
            migrationProgress: {}
        });
        // Reset mocks
        mockDoc.set.mockResolvedValue(undefined);
        azure_cosmos_service_1.azureCosmosService.createDocument = globals_1.jest.fn().mockResolvedValue(undefined);
        azure_cosmos_service_1.azureCosmosService.updateDocument = globals_1.jest.fn().mockResolvedValue(undefined);
        azure_cosmos_service_1.azureCosmosService.deleteDocument = globals_1.jest.fn().mockResolvedValue(undefined);
    });
    (0, globals_1.describe)('Configuration', () => {
        (0, globals_1.it)('should initialize with default configuration', () => {
            const service = new dual_write_service_1.DualWriteService();
            const config = service.getConfig();
            (0, globals_1.expect)(config.readPreference).toBe('firestore-first');
            (0, globals_1.expect)(config.writeMode).toBe('dual');
            (0, globals_1.expect)(config.validateWrites).toBe(false);
        });
        (0, globals_1.it)('should accept custom configuration', () => {
            const service = new dual_write_service_1.DualWriteService({
                readPreference: 'cosmos',
                writeMode: 'cosmos-only'
            });
            const config = service.getConfig();
            (0, globals_1.expect)(config.readPreference).toBe('cosmos');
            (0, globals_1.expect)(config.writeMode).toBe('cosmos-only');
        });
        (0, globals_1.it)('should update configuration', () => {
            dualWriteService.updateConfig({
                readPreference: 'cosmos-first'
            });
            (0, globals_1.expect)(dualWriteService.getConfig().readPreference).toBe('cosmos-first');
        });
    });
    (0, globals_1.describe)('Dual Write Operations', () => {
        (0, globals_1.it)('should write to both databases in dual mode', async () => {
            var _a, _b;
            const testData = { userId: 'user-123', content: 'test' };
            const result = await dualWriteService.createDocument('interviews', testData, 'doc-123');
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)((_a = result.firestore) === null || _a === void 0 ? void 0 : _a.success).toBe(true);
            (0, globals_1.expect)((_b = result.cosmos) === null || _b === void 0 ? void 0 : _b.success).toBe(true);
            (0, globals_1.expect)(mockDoc.set).toHaveBeenCalledWith(testData);
            (0, globals_1.expect)(azure_cosmos_service_1.azureCosmosService.createDocument).toHaveBeenCalled();
        });
        (0, globals_1.it)('should handle Firestore write failure', async () => {
            var _a, _b, _c;
            mockDoc.set.mockRejectedValueOnce(new Error('Firestore error'));
            const result = await dualWriteService.createDocument('interviews', { userId: 'user-123' });
            (0, globals_1.expect)((_a = result.firestore) === null || _a === void 0 ? void 0 : _a.success).toBe(false);
            (0, globals_1.expect)((_b = result.firestore) === null || _b === void 0 ? void 0 : _b.error).toBe('Firestore error');
            (0, globals_1.expect)((_c = result.cosmos) === null || _c === void 0 ? void 0 : _c.success).toBe(true);
        });
        (0, globals_1.it)('should handle Cosmos write failure', async () => {
            var _a, _b, _c;
            azure_cosmos_service_1.azureCosmosService.createDocument = globals_1.jest.fn().mockRejectedValueOnce(new Error('Cosmos error'));
            const result = await dualWriteService.createDocument('interviews', { userId: 'user-123' });
            (0, globals_1.expect)((_a = result.firestore) === null || _a === void 0 ? void 0 : _a.success).toBe(true);
            (0, globals_1.expect)((_b = result.cosmos) === null || _b === void 0 ? void 0 : _b.success).toBe(false);
            (0, globals_1.expect)((_c = result.cosmos) === null || _c === void 0 ? void 0 : _c.error).toBe('Cosmos error');
        });
        (0, globals_1.it)('should determine primary database based on migration progress', async () => {
            var _a, _b;
            // Collection with 25% migration progress - Firestore should be primary
            dualWriteService.updateConfig({
                migrationProgress: { interviews: 25 }
            });
            const result = await dualWriteService.createDocument('interviews', { userId: 'user-123' });
            (0, globals_1.expect)(result.primarySuccess).toBe((_a = result.firestore) === null || _a === void 0 ? void 0 : _a.success);
            // Collection with 75% migration progress - Cosmos should be primary
            dualWriteService.updateConfig({
                migrationProgress: { interviews: 75 }
            });
            const result2 = await dualWriteService.createDocument('interviews', { userId: 'user-123' });
            (0, globals_1.expect)(result2.primarySuccess).toBe((_b = result2.cosmos) === null || _b === void 0 ? void 0 : _b.success);
        });
    });
    (0, globals_1.describe)('Read Operations', () => {
        (0, globals_1.beforeEach)(() => {
            mockDoc.exists = true;
            mockDoc.data.mockReturnValue({ userId: 'user-123', content: 'test' });
            azure_cosmos_service_1.azureCosmosService.getDocument = globals_1.jest.fn().mockResolvedValue({
                id: 'doc-123',
                userId: 'user-123',
                content: 'test',
                _partitionKey: 'user-123'
            });
        });
        (0, globals_1.it)('should read from Firestore first', async () => {
            dualWriteService.updateConfig({ readPreference: 'firestore-first' });
            const doc = await dualWriteService.getDocument('interviews', 'doc-123');
            (0, globals_1.expect)(doc).toEqual({
                id: 'doc-123',
                userId: 'user-123',
                content: 'test'
            });
            (0, globals_1.expect)(mockDoc.get).toHaveBeenCalled();
            (0, globals_1.expect)(azure_cosmos_service_1.azureCosmosService.getDocument).not.toHaveBeenCalled();
        });
        (0, globals_1.it)('should fallback to Cosmos on Firestore failure', async () => {
            dualWriteService.updateConfig({ readPreference: 'firestore-first' });
            mockDoc.get.mockRejectedValueOnce(new Error('Firestore error'));
            const doc = await dualWriteService.getDocument('interviews', 'doc-123');
            (0, globals_1.expect)(doc).toEqual({
                id: 'doc-123',
                userId: 'user-123',
                content: 'test'
            });
            (0, globals_1.expect)(azure_cosmos_service_1.azureCosmosService.getDocument).toHaveBeenCalled();
        });
        (0, globals_1.it)('should read from Cosmos first', async () => {
            dualWriteService.updateConfig({ readPreference: 'cosmos-first' });
            const doc = await dualWriteService.getDocument('interviews', 'doc-123', 'user-123');
            (0, globals_1.expect)(doc).toEqual({
                id: 'doc-123',
                userId: 'user-123',
                content: 'test'
            });
            (0, globals_1.expect)(azure_cosmos_service_1.azureCosmosService.getDocument).toHaveBeenCalled();
        });
    });
    (0, globals_1.describe)('Health Check', () => {
        (0, globals_1.it)('should check both database health', async () => {
            const health = await dualWriteService.healthCheck();
            (0, globals_1.expect)(health).toEqual({
                firestore: true,
                cosmos: true,
                config: globals_1.expect.any(Object)
            });
        });
        (0, globals_1.it)('should handle database failures in health check', async () => {
            azure_cosmos_service_1.azureCosmosService.initialize = globals_1.jest.fn().mockRejectedValueOnce(new Error('Cosmos offline'));
            const health = await dualWriteService.healthCheck();
            (0, globals_1.expect)(health.firestore).toBe(true);
            (0, globals_1.expect)(health.cosmos).toBe(false);
        });
    });
});
(0, globals_1.describe)('Integration Tests', () => {
    (0, globals_1.describe)('End-to-End Migration Workflow', () => {
        let migrationService;
        let dualWriteService;
        (0, globals_1.beforeEach)(() => {
            migrationService = new database_migration_1.DatabaseMigrationService();
            dualWriteService = new dual_write_service_1.DualWriteService();
            // Setup comprehensive mocks for integration testing
            mockSnapshot.data.mockReturnValue({ count: 2 });
            mockSnapshot.docs = [
                {
                    id: 'interview-1',
                    data: () => (Object.assign(Object.assign({}, sampleInterviewDoc), { id: 'interview-1' }))
                },
                {
                    id: 'interview-2',
                    data: () => (Object.assign(Object.assign({}, sampleInterviewDoc), { id: 'interview-2', userId: 'user-789' }))
                }
            ];
            azure_cosmos_service_1.azureCosmosService.initialize = globals_1.jest.fn().mockResolvedValue(undefined);
            azure_cosmos_service_1.azureCosmosService.createDocument = globals_1.jest.fn().mockResolvedValue(undefined);
            azure_cosmos_service_1.azureCosmosService.queryDocuments = globals_1.jest.fn().mockResolvedValue([2]);
        });
        (0, globals_1.it)('should complete full migration workflow', async () => {
            // Step 1: Validate pre-migration state
            const preValidation = await migrationService.validateMigration('interviews');
            (0, globals_1.expect)(preValidation.counts.firestore).toBe(2);
            (0, globals_1.expect)(preValidation.counts.cosmos).toBe(2);
            // Step 2: Perform migration
            const migrationResult = await migrationService.migrateCollection('interviews', {
                batchSize: 10
            });
            (0, globals_1.expect)(migrationResult.migrated).toBe(2);
            (0, globals_1.expect)(migrationResult.failed).toBe(0);
            // Step 3: Validate post-migration state
            azure_cosmos_service_1.azureCosmosService.queryDocuments = globals_1.jest.fn().mockResolvedValue([2]); // Same count
            const postValidation = await migrationService.validateMigration('interviews');
            (0, globals_1.expect)(postValidation.isValid).toBe(true);
        });
        (0, globals_1.it)('should handle partial migration and dual-write setup', async () => {
            // Simulate partial migration (1 success, 1 failure)
            azure_cosmos_service_1.azureCosmosService.createDocument = globals_1.jest.fn()
                .mockResolvedValueOnce(undefined)
                .mockRejectedValueOnce(new Error('Cosmos error'));
            const result = await migrationService.migrateCollection('interviews');
            (0, globals_1.expect)(result.migrated).toBe(1);
            (0, globals_1.expect)(result.failed).toBe(1);
            // Setup dual-write with 50% progress
            dualWriteService.updateConfig({
                migrationProgress: { interviews: 50 }
            });
            // New writes should go to both systems
            const writeResult = await dualWriteService.createDocument('interviews', {
                userId: 'user-new',
                content: 'new interview'
            });
            (0, globals_1.expect)(writeResult.success).toBe(true);
        });
    });
    (0, globals_1.describe)('Error Recovery Scenarios', () => {
        (0, globals_1.it)('should handle network failures during migration', async () => {
            const migrationService = new database_migration_1.DatabaseMigrationService();
            // Simulate intermittent failures
            let callCount = 0;
            azure_cosmos_service_1.azureCosmosService.createDocument = globals_1.jest.fn().mockImplementation(() => {
                callCount++;
                if (callCount === 2) {
                    throw new Error('Network timeout');
                }
                return Promise.resolve();
            });
            mockSnapshot.docs = Array(3).fill(null).map((_, index) => ({
                id: `doc-${index}`,
                data: () => (Object.assign(Object.assign({}, sampleInterviewDoc), { id: `doc-${index}` }))
            }));
            const result = await migrationService.migrateCollection('interviews');
            (0, globals_1.expect)(result.migrated).toBe(2);
            (0, globals_1.expect)(result.failed).toBe(1);
            (0, globals_1.expect)(result.errors[0].error).toBe('Network timeout');
        });
        (0, globals_1.it)('should maintain data consistency during dual-write failures', async () => {
            var _a;
            const dualWriteService = new dual_write_service_1.DualWriteService({
                failOnWriteError: false
            });
            // Simulate Cosmos failure
            azure_cosmos_service_1.azureCosmosService.createDocument = globals_1.jest.fn().mockRejectedValue(new Error('Cosmos down'));
            const result = await dualWriteService.createDocument('interviews', {
                userId: 'user-123',
                content: 'test'
            });
            // Should still succeed because Firestore write succeeded
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.primarySuccess).toBe(true); // Firestore is primary
            (0, globals_1.expect)((_a = result.cosmos) === null || _a === void 0 ? void 0 : _a.success).toBe(false);
        });
    });
    (0, globals_1.describe)('Performance Tests', () => {
        (0, globals_1.it)('should handle large batch migrations efficiently', async () => {
            const migrationService = new database_migration_1.DatabaseMigrationService();
            // Mock large dataset (1000 documents)
            const largeBatch = Array(1000).fill(null).map((_, index) => ({
                id: `doc-${index}`,
                data: () => (Object.assign(Object.assign({}, sampleInterviewDoc), { id: `doc-${index}` }))
            }));
            mockSnapshot.data.mockReturnValue({ count: 1000 });
            mockSnapshot.docs = largeBatch;
            mockCollection.orderBy.mockReturnValue(mockCollection);
            mockCollection.limit.mockReturnValue(mockCollection);
            mockCollection.get.mockResolvedValue(mockSnapshot);
            const startTime = Date.now();
            const result = await migrationService.migrateCollection('interviews', {
                batchSize: 100,
                dryRun: true // Don't actually create documents
            });
            const duration = Date.now() - startTime;
            (0, globals_1.expect)(result.migrated).toBe(1000);
            (0, globals_1.expect)(duration).toBeLessThan(5000); // Should complete within 5 seconds for dry run
        });
    });
});
(0, globals_1.describe)('Data Integrity Tests', () => {
    (0, globals_1.describe)('Field Validation', () => {
        (0, globals_1.it)('should preserve all original fields during transformation', async () => {
            const migrationService = new database_migration_1.DatabaseMigrationService();
            const originalDoc = {
                id: 'test-doc',
                data: () => ({
                    stringField: 'test',
                    numberField: 42,
                    booleanField: true,
                    dateField: new Date('2023-01-01'),
                    arrayField: ['item1', 'item2'],
                    objectField: { nested: 'value' },
                    nullField: null,
                    undefinedField: undefined
                })
            };
            const transformed = await migrationService.transformDocumentForCosmos(originalDoc, 'interviews');
            const { _partitionKey, _migrated } = transformed, dataFields = __rest(transformed, ["_partitionKey", "_migrated"]);
            const originalData = originalDoc.data();
            // All original fields should be preserved
            for (const [key, value] of Object.entries(originalData)) {
                if (value !== undefined) { // undefined fields are not preserved in JSON
                    (0, globals_1.expect)(dataFields[key]).toEqual(value);
                }
            }
        });
    });
    (0, globals_1.describe)('Checksum Validation', () => {
        (0, globals_1.it)('should detect data corruption through checksum mismatch', async () => {
            const migrationService = new database_migration_1.DatabaseMigrationService();
            const originalData = { field1: 'value1', field2: 'value2' };
            const corruptedData = { field1: 'corrupted', field2: 'value2' };
            const originalChecksum = migrationService.calculateChecksum(originalData);
            const corruptedChecksum = migrationService.calculateChecksum(corruptedData);
            (0, globals_1.expect)(originalChecksum).not.toBe(corruptedChecksum);
        });
        (0, globals_1.it)('should handle special characters and unicode in checksum calculation', () => {
            const migrationService = new database_migration_1.DatabaseMigrationService();
            const dataWithUnicode = {
                emoji: '🚀 🎉 ✅',
                chinese: '你好世界',
                special: '!@#$%^&*()_+-=[]{}|;:,.<>?'
            };
            const checksum = migrationService.calculateChecksum(dataWithUnicode);
            (0, globals_1.expect)(checksum).toMatch(/^[a-f0-9]{64}$/); // Valid SHA-256 hex
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,