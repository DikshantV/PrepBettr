{"file":"/Users/dikshantvashistha/PrepBettr/tests/database-migration.test.ts","mappings":"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","names":[],"sources":["/Users/dikshantvashistha/PrepBettr/tests/database-migration.test.ts"],"sourcesContent":["/**\n * Database Migration Test Suite\n * \n * Comprehensive tests for Firestore to Azure Cosmos DB migration\n * including unit tests, integration tests, and validation scenarios.\n */\n\nimport { describe, beforeAll, beforeEach, afterAll, afterEach, it, expect, jest } from '@jest/globals';\nimport { DatabaseMigrationService } from '../scripts/database-migration';\nimport { DualWriteService } from '../lib/services/dual-write-service';\nimport { azureCosmosService } from '../lib/services/azure-cosmos-service';\nimport { getAdminFirestore } from '../lib/firebase/admin';\n\n// Mock dependencies\njest.mock('../lib/firebase/admin');\njest.mock('../lib/services/azure-cosmos-service');\njest.mock('../lib/azure-config');\n\nconst mockFirestore = {\n  collection: jest.fn(),\n  batch: jest.fn()\n};\n\nconst mockCollection = {\n  doc: jest.fn(),\n  get: jest.fn(),\n  add: jest.fn(),\n  where: jest.fn(),\n  orderBy: jest.fn(),\n  limit: jest.fn(),\n  offset: jest.fn(),\n  count: jest.fn(),\n  startAfter: jest.fn()\n};\n\nconst mockDoc = {\n  get: jest.fn(),\n  set: jest.fn(),\n  update: jest.fn(),\n  delete: jest.fn(),\n  exists: false,\n  id: 'test-doc-id',\n  data: jest.fn()\n};\n\nconst mockSnapshot = {\n  docs: [],\n  empty: true,\n  size: 0,\n  data: jest.fn()\n};\n\nconst mockBatch = {\n  set: jest.fn(),\n  update: jest.fn(),\n  delete: jest.fn(),\n  commit: jest.fn()\n};\n\n// Test data fixtures\nconst sampleInterviewDoc = {\n  id: 'interview-123',\n  userId: 'user-456',\n  questions: ['Q1', 'Q2', 'Q3'],\n  responses: ['A1', 'A2', 'A3'],\n  createdAt: new Date('2023-01-01'),\n  finalized: false,\n  metadata: {\n    duration: 1800,\n    aiModel: 'gpt-4'\n  }\n};\n\nconst sampleResumeDoc = {\n  id: 'resume-789',\n  userId: 'user-456',\n  filename: 'resume.pdf',\n  extractedData: {\n    skills: ['JavaScript', 'React', 'Node.js'],\n    experience: [\n      {\n        company: 'Tech Corp',\n        role: 'Developer',\n        duration: '2 years'\n      }\n    ],\n    education: []\n  },\n  metadata: {\n    fileSize: 204800,\n    uploadDate: new Date('2023-01-15'),\n    mimeType: 'application/pdf',\n    storageProvider: 'firebase'\n  },\n  createdAt: new Date('2023-01-15')\n};\n\ndescribe('DatabaseMigrationService', () => {\n  let migrationService: DatabaseMigrationService;\n\n  beforeAll(() => {\n    // Setup global mocks\n    (getAdminFirestore as jest.Mock).mockReturnValue(mockFirestore);\n    \n    mockFirestore.collection.mockReturnValue(mockCollection);\n    mockCollection.doc.mockReturnValue(mockDoc);\n    mockCollection.get.mockReturnValue(Promise.resolve(mockSnapshot));\n    mockCollection.count.mockReturnValue({ get: () => Promise.resolve(mockSnapshot) });\n    mockFirestore.batch.mockReturnValue(mockBatch);\n  });\n\n  beforeEach(() => {\n    migrationService = new DatabaseMigrationService();\n    jest.clearAllMocks();\n  });\n\n  describe('Collection Mapping', () => {\n    it('should have correct collection mappings', () => {\n      const mappings = (migrationService as any).collectionMappings;\n      \n      expect(mappings).toEqual({\n        'interviews': 'interviews',\n        'feedback': 'feedback',\n        'resumes': 'resumes',\n        'usage': 'usage',\n        'autoApplySettings': 'autoApplySettings',\n        'applications': 'applications',\n        'jobListings': 'jobListings',\n        'automationLogs': 'automationLogs',\n        'subscription_events': 'subscriptionEvents'\n      });\n    });\n\n    it('should throw error for unmapped collection', async () => {\n      await expect(\n        migrationService.migrateCollection('unmapped-collection')\n      ).rejects.toThrow('No mapping found for collection: unmapped-collection');\n    });\n  });\n\n  describe('Document Transformation', () => {\n    it('should transform interview document correctly', async () => {\n      const transformed = await (migrationService as any).transformDocumentForCosmos(\n        { id: sampleInterviewDoc.id, data: () => sampleInterviewDoc },\n        'interviews'\n      );\n\n      expect(transformed).toEqual({\n        id: sampleInterviewDoc.id,\n        ...sampleInterviewDoc,\n        _partitionKey: sampleInterviewDoc.userId,\n        status: 'active', // finalized: false -> status: 'active'\n        metadata: {\n          ...sampleInterviewDoc.metadata,\n          migratedFrom: 'firestore'\n        },\n        _migrated: {\n          from: 'firestore',\n          timestamp: expect.any(Date),\n          originalId: sampleInterviewDoc.id,\n          checksum: expect.any(String)\n        }\n      });\n    });\n\n    it('should transform resume document correctly', async () => {\n      const transformed = await (migrationService as any).transformDocumentForCosmos(\n        { id: sampleResumeDoc.id, data: () => sampleResumeDoc },\n        'resumes'\n      );\n\n      expect(transformed).toEqual({\n        id: sampleResumeDoc.id,\n        ...sampleResumeDoc,\n        _partitionKey: sampleResumeDoc.userId,\n        interviewQuestions: [], // Added default empty array\n        _migrated: {\n          from: 'firestore',\n          timestamp: expect.any(Date),\n          originalId: sampleResumeDoc.id,\n          checksum: expect.any(String)\n        }\n      });\n    });\n\n    it('should calculate consistent checksum', () => {\n      const data = { field1: 'value1', field2: 'value2' };\n      const checksum1 = (migrationService as any).calculateChecksum(data);\n      const checksum2 = (migrationService as any).calculateChecksum(data);\n      \n      expect(checksum1).toBe(checksum2);\n      expect(checksum1).toHaveLength(64); // SHA-256 hex string\n    });\n  });\n\n  describe('Partition Key Generation', () => {\n    it('should generate correct partition keys for user-based collections', () => {\n      const userData = { userId: 'user-123' };\n      \n      const partitionKey = (migrationService as any).getPartitionKey(userData, 'interviews');\n      expect(partitionKey).toBe('user-123');\n    });\n\n    it('should generate correct partition keys for system collections', () => {\n      const jobData = { id: 'job-456' };\n      \n      const partitionKey = (migrationService as any).getPartitionKey(jobData, 'jobListings');\n      expect(partitionKey).toBe('job-456');\n    });\n\n    it('should fallback to default partition key', () => {\n      const emptyData = {};\n      \n      const partitionKey = (migrationService as any).getPartitionKey(emptyData, 'interviews');\n      expect(partitionKey).toBe('default');\n    });\n  });\n\n  describe('Migration Process', () => {\n    beforeEach(() => {\n      // Mock Firestore responses\n      mockSnapshot.data.mockReturnValue({ count: 5 });\n      mockSnapshot.docs = Array(5).fill(null).map((_, index) => ({\n        id: `doc-${index}`,\n        data: () => ({ ...sampleInterviewDoc, id: `doc-${index}` })\n      }));\n      \n      // Mock Cosmos DB responses\n      azureCosmosService.initialize = jest.fn().mockResolvedValue(undefined);\n      azureCosmosService.createDocument = jest.fn().mockResolvedValue(undefined);\n      azureCosmosService.getDocument = jest.fn().mockResolvedValue(null);\n      azureCosmosService.queryDocuments = jest.fn().mockResolvedValue([]);\n    });\n\n    it('should perform dry run migration', async () => {\n      const result = await migrationService.migrateCollection('interviews', {\n        dryRun: true,\n        batchSize: 2\n      });\n\n      expect(result.collection).toBe('interviews');\n      expect(result.total).toBe(5);\n      expect(result.migrated).toBe(5);\n      expect(result.failed).toBe(0);\n      \n      // Should not actually call Cosmos DB create\n      expect(azureCosmosService.createDocument).not.toHaveBeenCalled();\n    });\n\n    it('should handle migration errors gracefully', async () => {\n      // Mock one document creation failure\n      azureCosmosService.createDocument = jest.fn()\n        .mockResolvedValueOnce(undefined) // First call succeeds\n        .mockRejectedValueOnce(new Error('Cosmos DB error')); // Second call fails\n\n      const result = await migrationService.migrateCollection('interviews', {\n        batchSize: 2\n      });\n\n      expect(result.migrated).toBe(1);\n      expect(result.failed).toBe(1);\n      expect(result.errors).toHaveLength(1);\n      expect(result.errors[0].error).toBe('Cosmos DB error');\n    });\n\n    it('should validate only without migration', async () => {\n      azureCosmosService.queryDocuments = jest.fn().mockResolvedValue([0]); // Mock count query\n      \n      const result = await migrationService.migrateCollection('interviews', {\n        validateOnly: true\n      });\n\n      expect(result.total).toBe(0);\n      expect(result.migrated).toBe(0);\n      expect(azureCosmosService.createDocument).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('Validation', () => {\n    beforeEach(() => {\n      mockSnapshot.data.mockReturnValue({ count: 3 });\n      azureCosmosService.queryDocuments = jest.fn().mockResolvedValue([3]); // Mock count\n    });\n\n    it('should validate equal document counts', async () => {\n      const validation = await migrationService.validateMigration('interviews');\n      \n      expect(validation.collection).toBe('interviews');\n      expect(validation.counts.firestore).toBe(3);\n      expect(validation.counts.cosmos).toBe(3);\n    });\n\n    it('should detect count mismatches', async () => {\n      azureCosmosService.queryDocuments = jest.fn().mockResolvedValue([2]); // Different count\n      \n      const validation = await migrationService.validateMigration('interviews');\n      \n      expect(validation.counts.firestore).toBe(3);\n      expect(validation.counts.cosmos).toBe(2);\n      expect(validation.isValid).toBe(false);\n    });\n  });\n\n  describe('Document Comparison', () => {\n    it('should detect identical documents', () => {\n      const doc1 = { field1: 'value1', field2: 'value2' };\n      const doc2 = { field1: 'value1', field2: 'value2' };\n      \n      const differences = (migrationService as any).compareDocuments(doc1, doc2);\n      expect(differences).toHaveLength(0);\n    });\n\n    it('should detect value differences', () => {\n      const doc1 = { field1: 'value1', field2: 'value2' };\n      const doc2 = { field1: 'value1', field2: 'different' };\n      \n      const differences = (migrationService as any).compareDocuments(doc1, doc2);\n      expect(differences).toContain('Value mismatch for key: field2');\n    });\n\n    it('should detect missing fields', () => {\n      const doc1 = { field1: 'value1', field2: 'value2' };\n      const doc2 = { field1: 'value1' };\n      \n      const differences = (migrationService as any).compareDocuments(doc1, doc2);\n      expect(differences).toContain('Missing key in Cosmos: field2');\n    });\n\n    it('should ignore Cosmos-specific fields', () => {\n      const firestoreDoc = { field1: 'value1' };\n      const cosmosDoc = { field1: 'value1', _partitionKey: 'pk', _migrated: {} };\n      \n      const differences = (migrationService as any).compareDocuments(firestoreDoc, cosmosDoc);\n      expect(differences).toHaveLength(0);\n    });\n\n    it('should handle date comparisons', () => {\n      const date = new Date('2023-01-01');\n      const doc1 = { timestamp: date };\n      const doc2 = { timestamp: new Date(date.getTime()) };\n      \n      const isEqual = (migrationService as any).deepEqual(doc1.timestamp, doc2.timestamp);\n      expect(isEqual).toBe(true);\n    });\n  });\n\n  describe('Rollback', () => {\n    beforeEach(() => {\n      azureCosmosService.queryDocuments = jest.fn().mockResolvedValue([\n        {\n          id: 'doc-1',\n          field1: 'value1',\n          _partitionKey: 'user-123',\n          _migrated: { from: 'firestore' }\n        },\n        {\n          id: 'doc-2',\n          field1: 'value2',\n          _partitionKey: 'user-456',\n          _migrated: { from: 'firestore' }\n        }\n      ]);\n\n      mockBatch.commit.mockResolvedValue(undefined);\n    });\n\n    it('should rollback migrated documents', async () => {\n      await migrationService.rollbackCollection('interviews');\n      \n      expect(azureCosmosService.queryDocuments).toHaveBeenCalledWith(\n        'interviews',\n        'SELECT * FROM c WHERE c._migrated.from = \"firestore\"',\n        []\n      );\n\n      expect(mockBatch.set).toHaveBeenCalledTimes(2);\n      expect(mockBatch.commit).toHaveBeenCalled();\n    });\n\n    it('should handle large rollbacks in batches', async () => {\n      // Mock 1000 documents\n      const largeBatch = Array(1000).fill(null).map((_, index) => ({\n        id: `doc-${index}`,\n        field1: `value${index}`,\n        _partitionKey: `user-${index}`,\n        _migrated: { from: 'firestore' }\n      }));\n\n      azureCosmosService.queryDocuments = jest.fn().mockResolvedValue(largeBatch);\n\n      await migrationService.rollbackCollection('interviews');\n      \n      // Should commit twice (500 + 500)\n      expect(mockBatch.commit).toHaveBeenCalledTimes(2);\n    });\n  });\n});\n\ndescribe('DualWriteService', () => {\n  let dualWriteService: DualWriteService;\n\n  beforeAll(() => {\n    jest.clearAllMocks();\n  });\n\n  beforeEach(() => {\n    dualWriteService = new DualWriteService({\n      readPreference: 'firestore-first',\n      writeMode: 'dual',\n      validateWrites: false,\n      failOnWriteError: false,\n      migrationProgress: {}\n    });\n\n    // Reset mocks\n    mockDoc.set.mockResolvedValue(undefined);\n    azureCosmosService.createDocument = jest.fn().mockResolvedValue(undefined);\n    azureCosmosService.updateDocument = jest.fn().mockResolvedValue(undefined);\n    azureCosmosService.deleteDocument = jest.fn().mockResolvedValue(undefined);\n  });\n\n  describe('Configuration', () => {\n    it('should initialize with default configuration', () => {\n      const service = new DualWriteService();\n      const config = service.getConfig();\n      \n      expect(config.readPreference).toBe('firestore-first');\n      expect(config.writeMode).toBe('dual');\n      expect(config.validateWrites).toBe(false);\n    });\n\n    it('should accept custom configuration', () => {\n      const service = new DualWriteService({\n        readPreference: 'cosmos',\n        writeMode: 'cosmos-only'\n      });\n      \n      const config = service.getConfig();\n      expect(config.readPreference).toBe('cosmos');\n      expect(config.writeMode).toBe('cosmos-only');\n    });\n\n    it('should update configuration', () => {\n      dualWriteService.updateConfig({\n        readPreference: 'cosmos-first'\n      });\n      \n      expect(dualWriteService.getConfig().readPreference).toBe('cosmos-first');\n    });\n  });\n\n  describe('Dual Write Operations', () => {\n    it('should write to both databases in dual mode', async () => {\n      const testData = { userId: 'user-123', content: 'test' };\n      \n      const result = await dualWriteService.createDocument('interviews', testData, 'doc-123');\n      \n      expect(result.success).toBe(true);\n      expect(result.firestore?.success).toBe(true);\n      expect(result.cosmos?.success).toBe(true);\n      \n      expect(mockDoc.set).toHaveBeenCalledWith(testData);\n      expect(azureCosmosService.createDocument).toHaveBeenCalled();\n    });\n\n    it('should handle Firestore write failure', async () => {\n      mockDoc.set.mockRejectedValueOnce(new Error('Firestore error'));\n      \n      const result = await dualWriteService.createDocument('interviews', { userId: 'user-123' });\n      \n      expect(result.firestore?.success).toBe(false);\n      expect(result.firestore?.error).toBe('Firestore error');\n      expect(result.cosmos?.success).toBe(true);\n    });\n\n    it('should handle Cosmos write failure', async () => {\n      azureCosmosService.createDocument = jest.fn().mockRejectedValueOnce(new Error('Cosmos error'));\n      \n      const result = await dualWriteService.createDocument('interviews', { userId: 'user-123' });\n      \n      expect(result.firestore?.success).toBe(true);\n      expect(result.cosmos?.success).toBe(false);\n      expect(result.cosmos?.error).toBe('Cosmos error');\n    });\n\n    it('should determine primary database based on migration progress', async () => {\n      // Collection with 25% migration progress - Firestore should be primary\n      dualWriteService.updateConfig({\n        migrationProgress: { interviews: 25 }\n      });\n      \n      const result = await dualWriteService.createDocument('interviews', { userId: 'user-123' });\n      expect(result.primarySuccess).toBe(result.firestore?.success);\n      \n      // Collection with 75% migration progress - Cosmos should be primary\n      dualWriteService.updateConfig({\n        migrationProgress: { interviews: 75 }\n      });\n      \n      const result2 = await dualWriteService.createDocument('interviews', { userId: 'user-123' });\n      expect(result2.primarySuccess).toBe(result2.cosmos?.success);\n    });\n  });\n\n  describe('Read Operations', () => {\n    beforeEach(() => {\n      mockDoc.exists = true;\n      mockDoc.data.mockReturnValue({ userId: 'user-123', content: 'test' });\n      azureCosmosService.getDocument = jest.fn().mockResolvedValue({\n        id: 'doc-123',\n        userId: 'user-123',\n        content: 'test',\n        _partitionKey: 'user-123'\n      });\n    });\n\n    it('should read from Firestore first', async () => {\n      dualWriteService.updateConfig({ readPreference: 'firestore-first' });\n      \n      const doc = await dualWriteService.getDocument('interviews', 'doc-123');\n      \n      expect(doc).toEqual({\n        id: 'doc-123',\n        userId: 'user-123',\n        content: 'test'\n      });\n      \n      expect(mockDoc.get).toHaveBeenCalled();\n      expect(azureCosmosService.getDocument).not.toHaveBeenCalled();\n    });\n\n    it('should fallback to Cosmos on Firestore failure', async () => {\n      dualWriteService.updateConfig({ readPreference: 'firestore-first' });\n      mockDoc.get.mockRejectedValueOnce(new Error('Firestore error'));\n      \n      const doc = await dualWriteService.getDocument('interviews', 'doc-123');\n      \n      expect(doc).toEqual({\n        id: 'doc-123',\n        userId: 'user-123',\n        content: 'test'\n      });\n      \n      expect(azureCosmosService.getDocument).toHaveBeenCalled();\n    });\n\n    it('should read from Cosmos first', async () => {\n      dualWriteService.updateConfig({ readPreference: 'cosmos-first' });\n      \n      const doc = await dualWriteService.getDocument('interviews', 'doc-123', 'user-123');\n      \n      expect(doc).toEqual({\n        id: 'doc-123',\n        userId: 'user-123',\n        content: 'test'\n      });\n      \n      expect(azureCosmosService.getDocument).toHaveBeenCalled();\n    });\n  });\n\n  describe('Health Check', () => {\n    it('should check both database health', async () => {\n      const health = await dualWriteService.healthCheck();\n      \n      expect(health).toEqual({\n        firestore: true,\n        cosmos: true,\n        config: expect.any(Object)\n      });\n    });\n\n    it('should handle database failures in health check', async () => {\n      azureCosmosService.initialize = jest.fn().mockRejectedValueOnce(new Error('Cosmos offline'));\n      \n      const health = await dualWriteService.healthCheck();\n      \n      expect(health.firestore).toBe(true);\n      expect(health.cosmos).toBe(false);\n    });\n  });\n});\n\ndescribe('Integration Tests', () => {\n  describe('End-to-End Migration Workflow', () => {\n    let migrationService: DatabaseMigrationService;\n    let dualWriteService: DualWriteService;\n\n    beforeEach(() => {\n      migrationService = new DatabaseMigrationService();\n      dualWriteService = new DualWriteService();\n      \n      // Setup comprehensive mocks for integration testing\n      mockSnapshot.data.mockReturnValue({ count: 2 });\n      mockSnapshot.docs = [\n        {\n          id: 'interview-1',\n          data: () => ({ ...sampleInterviewDoc, id: 'interview-1' })\n        },\n        {\n          id: 'interview-2', \n          data: () => ({ ...sampleInterviewDoc, id: 'interview-2', userId: 'user-789' })\n        }\n      ];\n\n      azureCosmosService.initialize = jest.fn().mockResolvedValue(undefined);\n      azureCosmosService.createDocument = jest.fn().mockResolvedValue(undefined);\n      azureCosmosService.queryDocuments = jest.fn().mockResolvedValue([2]);\n    });\n\n    it('should complete full migration workflow', async () => {\n      // Step 1: Validate pre-migration state\n      const preValidation = await migrationService.validateMigration('interviews');\n      expect(preValidation.counts.firestore).toBe(2);\n      expect(preValidation.counts.cosmos).toBe(2);\n\n      // Step 2: Perform migration\n      const migrationResult = await migrationService.migrateCollection('interviews', {\n        batchSize: 10\n      });\n\n      expect(migrationResult.migrated).toBe(2);\n      expect(migrationResult.failed).toBe(0);\n\n      // Step 3: Validate post-migration state\n      azureCosmosService.queryDocuments = jest.fn().mockResolvedValue([2]); // Same count\n      const postValidation = await migrationService.validateMigration('interviews');\n      expect(postValidation.isValid).toBe(true);\n    });\n\n    it('should handle partial migration and dual-write setup', async () => {\n      // Simulate partial migration (1 success, 1 failure)\n      azureCosmosService.createDocument = jest.fn()\n        .mockResolvedValueOnce(undefined)\n        .mockRejectedValueOnce(new Error('Cosmos error'));\n\n      const result = await migrationService.migrateCollection('interviews');\n      \n      expect(result.migrated).toBe(1);\n      expect(result.failed).toBe(1);\n\n      // Setup dual-write with 50% progress\n      dualWriteService.updateConfig({\n        migrationProgress: { interviews: 50 }\n      });\n\n      // New writes should go to both systems\n      const writeResult = await dualWriteService.createDocument('interviews', {\n        userId: 'user-new',\n        content: 'new interview'\n      });\n\n      expect(writeResult.success).toBe(true);\n    });\n  });\n\n  describe('Error Recovery Scenarios', () => {\n    it('should handle network failures during migration', async () => {\n      const migrationService = new DatabaseMigrationService();\n      \n      // Simulate intermittent failures\n      let callCount = 0;\n      azureCosmosService.createDocument = jest.fn().mockImplementation(() => {\n        callCount++;\n        if (callCount === 2) {\n          throw new Error('Network timeout');\n        }\n        return Promise.resolve();\n      });\n\n      mockSnapshot.docs = Array(3).fill(null).map((_, index) => ({\n        id: `doc-${index}`,\n        data: () => ({ ...sampleInterviewDoc, id: `doc-${index}` })\n      }));\n\n      const result = await migrationService.migrateCollection('interviews');\n      \n      expect(result.migrated).toBe(2);\n      expect(result.failed).toBe(1);\n      expect(result.errors[0].error).toBe('Network timeout');\n    });\n\n    it('should maintain data consistency during dual-write failures', async () => {\n      const dualWriteService = new DualWriteService({\n        failOnWriteError: false\n      });\n\n      // Simulate Cosmos failure\n      azureCosmosService.createDocument = jest.fn().mockRejectedValue(new Error('Cosmos down'));\n\n      const result = await dualWriteService.createDocument('interviews', {\n        userId: 'user-123',\n        content: 'test'\n      });\n\n      // Should still succeed because Firestore write succeeded\n      expect(result.success).toBe(true);\n      expect(result.primarySuccess).toBe(true); // Firestore is primary\n      expect(result.cosmos?.success).toBe(false);\n    });\n  });\n\n  describe('Performance Tests', () => {\n    it('should handle large batch migrations efficiently', async () => {\n      const migrationService = new DatabaseMigrationService();\n      \n      // Mock large dataset (1000 documents)\n      const largeBatch = Array(1000).fill(null).map((_, index) => ({\n        id: `doc-${index}`,\n        data: () => ({ ...sampleInterviewDoc, id: `doc-${index}` })\n      }));\n\n      mockSnapshot.data.mockReturnValue({ count: 1000 });\n      mockSnapshot.docs = largeBatch;\n      mockCollection.orderBy.mockReturnValue(mockCollection);\n      mockCollection.limit.mockReturnValue(mockCollection);\n      mockCollection.get.mockResolvedValue(mockSnapshot);\n\n      const startTime = Date.now();\n      const result = await migrationService.migrateCollection('interviews', {\n        batchSize: 100,\n        dryRun: true // Don't actually create documents\n      });\n      const duration = Date.now() - startTime;\n\n      expect(result.migrated).toBe(1000);\n      expect(duration).toBeLessThan(5000); // Should complete within 5 seconds for dry run\n    });\n  });\n});\n\ndescribe('Data Integrity Tests', () => {\n  describe('Field Validation', () => {\n    it('should preserve all original fields during transformation', async () => {\n      const migrationService = new DatabaseMigrationService();\n      const originalDoc = {\n        id: 'test-doc',\n        data: () => ({\n          stringField: 'test',\n          numberField: 42,\n          booleanField: true,\n          dateField: new Date('2023-01-01'),\n          arrayField: ['item1', 'item2'],\n          objectField: { nested: 'value' },\n          nullField: null,\n          undefinedField: undefined\n        })\n      };\n\n      const transformed = await (migrationService as any).transformDocumentForCosmos(\n        originalDoc,\n        'interviews'\n      );\n\n      const { _partitionKey, _migrated, ...dataFields } = transformed;\n      const originalData = originalDoc.data();\n\n      // All original fields should be preserved\n      for (const [key, value] of Object.entries(originalData)) {\n        if (value !== undefined) { // undefined fields are not preserved in JSON\n          expect(dataFields[key]).toEqual(value);\n        }\n      }\n    });\n  });\n\n  describe('Checksum Validation', () => {\n    it('should detect data corruption through checksum mismatch', async () => {\n      const migrationService = new DatabaseMigrationService();\n      const originalData = { field1: 'value1', field2: 'value2' };\n      const corruptedData = { field1: 'corrupted', field2: 'value2' };\n\n      const originalChecksum = (migrationService as any).calculateChecksum(originalData);\n      const corruptedChecksum = (migrationService as any).calculateChecksum(corruptedData);\n\n      expect(originalChecksum).not.toBe(corruptedChecksum);\n    });\n\n    it('should handle special characters and unicode in checksum calculation', () => {\n      const migrationService = new DatabaseMigrationService();\n      const dataWithUnicode = {\n        emoji: '🚀 🎉 ✅',\n        chinese: '你好世界',\n        special: '!@#$%^&*()_+-=[]{}|;:,.<>?'\n      };\n\n      const checksum = (migrationService as any).calculateChecksum(dataWithUnicode);\n      expect(checksum).toMatch(/^[a-f0-9]{64}$/); // Valid SHA-256 hex\n    });\n  });\n});\n"],"version":3}