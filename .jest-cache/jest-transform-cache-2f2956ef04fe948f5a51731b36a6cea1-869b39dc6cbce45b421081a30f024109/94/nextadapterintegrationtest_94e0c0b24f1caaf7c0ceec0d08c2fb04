20f36e804b05ab88e59693bb41a2af82
"use strict";
/**
 * Integration Tests for Next.js Unified Auth Middleware
 *
 * Validates the Next.js adapter in a simulated environment
 */
Object.defineProperty(exports, "__esModule", { value: true });
// Mock dependencies
jest.mock('@/lib/firebase/admin', () => ({
    getAdminAuth: jest.fn(() => ({
        verifyIdToken: jest.fn()
    }))
}));
const server_1 = require("next/server");
const next_auth_1 = require("../adapters/next-auth");
const core_1 = require("../core");
describe('Next.js Auth Middleware Integration', () => {
    let mockFirebaseAuth;
    beforeEach(async () => {
        jest.clearAllMocks();
        const auth = (0, core_1.getUnifiedAuth)();
        await auth.initialize();
        const { getAdminAuth } = require('@/lib/firebase/admin');
        mockFirebaseAuth = getAdminAuth();
    });
    describe('nextAuthMiddleware', () => {
        it('should succeed with valid token', async () => {
            var _a;
            mockFirebaseAuth.verifyIdToken.mockResolvedValue({ uid: 'test-user' });
            const request = new server_1.NextRequest('https://test.com/api/protected', {
                headers: { Authorization: 'Bearer valid-token' }
            });
            const result = await (0, next_auth_1.nextAuthMiddleware)(request);
            expect(result.success).toBe(true);
            expect((_a = result.user) === null || _a === void 0 ? void 0 : _a.uid).toBe('test-user');
            expect(result.response).toBeUndefined();
        });
        it('should fail with missing token and return 401 response', async () => {
            var _a;
            const request = new server_1.NextRequest('https://test.com/api/protected');
            const result = await (0, next_auth_1.nextAuthMiddleware)(request);
            expect(result.success).toBe(false);
            expect((_a = result.response) === null || _a === void 0 ? void 0 : _a.status).toBe(401);
        });
        it('should fail with invalid token and return 401 response', async () => {
            var _a;
            mockFirebaseAuth.verifyIdToken.mockRejectedValue(new Error('Invalid'));
            const request = new server_1.NextRequest('https://test.com/api/protected', {
                headers: { Authorization: 'Bearer invalid-token' }
            });
            const result = await (0, next_auth_1.nextAuthMiddleware)(request);
            expect(result.success).toBe(false);
            expect((_a = result.response) === null || _a === void 0 ? void 0 : _a.status).toBe(401);
        });
        it('should handle role-based access control', async () => {
            var _a;
            mockFirebaseAuth.verifyIdToken.mockResolvedValue({
                uid: 'admin-user',
                custom_claims: { roles: ['admin'] }
            });
            const request = new server_1.NextRequest('https://test.com/api/admin', {
                headers: { Authorization: 'Bearer admin-token' }
            });
            // Should succeed with correct role
            const successResult = await (0, next_auth_1.nextAuthMiddleware)(request, { requiredRoles: ['admin'] });
            expect(successResult.success).toBe(true);
            // Should fail with missing role
            const failureResult = await (0, next_auth_1.nextAuthMiddleware)(request, { requiredRoles: ['superuser'] });
            expect(failureResult.success).toBe(false);
            expect((_a = failureResult.response) === null || _a === void 0 ? void 0 : _a.status).toBe(403);
        });
    });
    describe('withNextAuth HOF', () => {
        it('should call handler with authenticated user', async () => {
            mockFirebaseAuth.verifyIdToken.mockResolvedValue({ uid: 'test-user' });
            const handler = jest.fn((req, user) => {
                expect(user.uid).toBe('test-user');
                return new Response('Success');
            });
            const request = new server_1.NextRequest('https://test.com/api/protected', {
                headers: { Authorization: 'Bearer valid-token' }
            });
            const protectedHandler = (0, next_auth_1.withNextAuth)(handler);
            await protectedHandler(request);
            expect(handler).toHaveBeenCalled();
        });
        it('should not call handler on authentication failure', async () => {
            mockFirebaseAuth.verifyIdToken.mockRejectedValue(new Error('Invalid'));
            const handler = jest.fn();
            const request = new server_1.NextRequest('https://test.com/api/protected', {
                headers: { Authorization: 'Bearer invalid-token' }
            });
            const protectedHandler = (0, next_auth_1.withNextAuth)(handler);
            const response = await protectedHandler(request);
            expect(handler).not.toHaveBeenCalled();
            expect(response.status).toBe(401);
        });
        it('should skip authentication when specified', async () => {
            const handler = jest.fn();
            const request = new server_1.NextRequest('https://test.com/api/public');
            const publicHandler = (0, next_auth_1.withNextAuth)(handler, { skipAuth: true });
            await publicHandler(request);
            expect(handler).toHaveBeenCalledWith(request, null, expect.anything());
        });
    });
    describe('withNextAdminAuth HOF', () => {
        it('should grant access to admin users', async () => {
            mockFirebaseAuth.verifyIdToken.mockResolvedValue({
                uid: 'admin-user',
                custom_claims: { roles: ['admin'] }
            });
            const handler = jest.fn();
            const request = new server_1.NextRequest('https://test.com/api/admin', {
                headers: { Authorization: 'Bearer admin-token' }
            });
            const adminHandler = (0, next_auth_1.withNextAdminAuth)(handler);
            await adminHandler(request);
            expect(handler).toHaveBeenCalled();
        });
        it('should deny access to non-admin users', async () => {
            mockFirebaseAuth.verifyIdToken.mockResolvedValue({ uid: 'non-admin' });
            const handler = jest.fn();
            const request = new server_1.NextRequest('https://test.com/api/admin', {
                headers: { Authorization: 'Bearer user-token' }
            });
            const adminHandler = (0, next_auth_1.withNextAdminAuth)(handler);
            const response = await adminHandler(request);
            expect(handler).not.toHaveBeenCalled();
            expect(response.status).toBe(403);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,