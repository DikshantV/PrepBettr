{"file":"/Users/dikshantvashistha/PrepBettr/lib/shared/auth/__tests__/next-adapter.integration.test.ts","mappings":"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","names":[],"sources":["/Users/dikshantvashistha/PrepBettr/lib/shared/auth/__tests__/next-adapter.integration.test.ts"],"sourcesContent":["/**\n * Integration Tests for Next.js Unified Auth Middleware\n * \n * Validates the Next.js adapter in a simulated environment\n */\n\nimport { NextRequest } from 'next/server';\nimport { \n  nextAuthMiddleware,\n  withNextAuth,\n  withNextAdminAuth\n} from '../adapters/next-auth';\nimport { getUnifiedAuth } from '../core';\n\n// Mock dependencies\njest.mock('@/lib/firebase/admin', () => ({\n  getAdminAuth: jest.fn(() => ({\n    verifyIdToken: jest.fn()\n  }))\n}));\n\ndescribe('Next.js Auth Middleware Integration', () => {\n  let mockFirebaseAuth: any;\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n    const auth = getUnifiedAuth();\n    await auth.initialize();\n    \n    const { getAdminAuth } = require('@/lib/firebase/admin');\n    mockFirebaseAuth = getAdminAuth();\n  });\n\n  describe('nextAuthMiddleware', () => {\n    it('should succeed with valid token', async () => {\n      mockFirebaseAuth.verifyIdToken.mockResolvedValue({ uid: 'test-user' });\n      \n      const request = new NextRequest('https://test.com/api/protected', {\n        headers: { Authorization: 'Bearer valid-token' }\n      });\n\n      const result = await nextAuthMiddleware(request);\n\n      expect(result.success).toBe(true);\n      expect(result.user?.uid).toBe('test-user');\n      expect(result.response).toBeUndefined();\n    });\n\n    it('should fail with missing token and return 401 response', async () => {\n      const request = new NextRequest('https://test.com/api/protected');\n      const result = await nextAuthMiddleware(request);\n\n      expect(result.success).toBe(false);\n      expect(result.response?.status).toBe(401);\n    });\n\n    it('should fail with invalid token and return 401 response', async () => {\n      mockFirebaseAuth.verifyIdToken.mockRejectedValue(new Error('Invalid'));\n      \n      const request = new NextRequest('https://test.com/api/protected', {\n        headers: { Authorization: 'Bearer invalid-token' }\n      });\n\n      const result = await nextAuthMiddleware(request);\n\n      expect(result.success).toBe(false);\n      expect(result.response?.status).toBe(401);\n    });\n\n    it('should handle role-based access control', async () => {\n      mockFirebaseAuth.verifyIdToken.mockResolvedValue({\n        uid: 'admin-user',\n        custom_claims: { roles: ['admin'] }\n      });\n\n      const request = new NextRequest('https://test.com/api/admin', {\n        headers: { Authorization: 'Bearer admin-token' }\n      });\n\n      // Should succeed with correct role\n      const successResult = await nextAuthMiddleware(request, { requiredRoles: ['admin'] });\n      expect(successResult.success).toBe(true);\n\n      // Should fail with missing role\n      const failureResult = await nextAuthMiddleware(request, { requiredRoles: ['superuser'] });\n      expect(failureResult.success).toBe(false);\n      expect(failureResult.response?.status).toBe(403);\n    });\n  });\n\n  describe('withNextAuth HOF', () => {\n    it('should call handler with authenticated user', async () => {\n      mockFirebaseAuth.verifyIdToken.mockResolvedValue({ uid: 'test-user' });\n      \n      const handler = jest.fn((req, user) => {\n        expect(user.uid).toBe('test-user');\n        return new Response('Success');\n      });\n\n      const request = new NextRequest('https://test.com/api/protected', {\n        headers: { Authorization: 'Bearer valid-token' }\n      });\n\n      const protectedHandler = withNextAuth(handler);\n      await protectedHandler(request);\n\n      expect(handler).toHaveBeenCalled();\n    });\n\n    it('should not call handler on authentication failure', async () => {\n      mockFirebaseAuth.verifyIdToken.mockRejectedValue(new Error('Invalid'));\n      \n      const handler = jest.fn();\n\n      const request = new NextRequest('https://test.com/api/protected', {\n        headers: { Authorization: 'Bearer invalid-token' }\n      });\n\n      const protectedHandler = withNextAuth(handler);\n      const response = await protectedHandler(request);\n\n      expect(handler).not.toHaveBeenCalled();\n      expect(response.status).toBe(401);\n    });\n\n    it('should skip authentication when specified', async () => {\n      const handler = jest.fn();\n      const request = new NextRequest('https://test.com/api/public');\n\n      const publicHandler = withNextAuth(handler, { skipAuth: true });\n      await publicHandler(request);\n\n      expect(handler).toHaveBeenCalledWith(request, null, expect.anything());\n    });\n  });\n\n  describe('withNextAdminAuth HOF', () => {\n    it('should grant access to admin users', async () => {\n      mockFirebaseAuth.verifyIdToken.mockResolvedValue({\n        uid: 'admin-user',\n        custom_claims: { roles: ['admin'] }\n      });\n\n      const handler = jest.fn();\n      const request = new NextRequest('https://test.com/api/admin', {\n        headers: { Authorization: 'Bearer admin-token' }\n      });\n\n      const adminHandler = withNextAdminAuth(handler);\n      await adminHandler(request);\n\n      expect(handler).toHaveBeenCalled();\n    });\n\n    it('should deny access to non-admin users', async () => {\n      mockFirebaseAuth.verifyIdToken.mockResolvedValue({ uid: 'non-admin' });\n\n      const handler = jest.fn();\n      const request = new NextRequest('https://test.com/api/admin', {\n        headers: { Authorization: 'Bearer user-token' }\n      });\n\n      const adminHandler = withNextAdminAuth(handler);\n      const response = await adminHandler(request);\n\n      expect(handler).not.toHaveBeenCalled();\n      expect(response.status).toBe(403);\n    });\n  });\n});\n"],"version":3}