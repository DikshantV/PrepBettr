{"file":"/Users/dikshantvashistha/PrepBettr/lib/firebase/admin.ts","mappings":"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","names":[],"sources":["/Users/dikshantvashistha/PrepBettr/lib/firebase/admin.ts"],"sourcesContent":["/**\n * Firebase Admin SDK Configuration\n * \n * Real Firebase Admin SDK implementation with Azure Key Vault integration\n */\n\n// Client-side safety check\nconst isClient = typeof window !== 'undefined';\n\nif (isClient) {\n  console.warn('[Firebase Admin] Running on client side - using fallback implementations');\n}\n\n// Only import server-side dependencies when running on server\nlet admin: any = null;\nlet getConfiguration: any = null;\n\nif (!isClient) {\n  admin = require('firebase-admin');\n  const azureConfig = require('@/lib/azure-config');\n  getConfiguration = azureConfig.getConfiguration;\n}\n\n// Global Firebase Admin app instance\nlet adminApp: any = null;\nlet adminAuth: any = null;\n\n/**\n * Initialize Firebase Admin SDK\n */\nasync function initializeFirebaseAdmin(): Promise<any> {\n  if (isClient) {\n    throw new Error('Firebase Admin SDK not available on client side');\n  }\n  \n  if (adminApp) {\n    return adminApp;\n  }\n\n  try {\n    console.log('ðŸ”¥ Starting Firebase Admin SDK initialization...');\n    \n    // Check if Firebase Admin is already initialized\n    const existingApps = admin.apps;\n    if (existingApps.length > 0) {\n      console.log('ðŸ”¥ Found existing Firebase Admin app, reusing...');\n      adminApp = existingApps[0];\n      return adminApp;\n    }\n\n    // Get Firebase configuration from Azure Key Vault or environment variables\n    let config: Record<string, string> = {};\n    try {\n      config = await getConfiguration();\n    } catch (configError) {\n      console.warn('ðŸ”¥ Failed to get config from Azure, using environment variables:', configError);\n      config = {};\n    }\n    \n    const firebaseConfig = {\n      projectId: config['FIREBASE_PROJECT_ID'] || process.env.FIREBASE_PROJECT_ID || process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID || 'prepbettr',\n      clientEmail: config['FIREBASE_CLIENT_EMAIL'] || process.env.FIREBASE_CLIENT_EMAIL,\n      privateKey: config['FIREBASE_PRIVATE_KEY'] || process.env.FIREBASE_PRIVATE_KEY\n    };\n\n    console.log('ðŸ”¥ Firebase config loaded:', {\n      projectId: firebaseConfig.projectId,\n      hasClientEmail: !!firebaseConfig.clientEmail,\n      hasPrivateKey: !!firebaseConfig.privateKey && firebaseConfig.privateKey.length > 0\n    });\n\n    // Validate project ID\n    if (!firebaseConfig.projectId || firebaseConfig.projectId === 'prepbettr') {\n      console.warn('ðŸ”¥ Using default project ID - this may cause authentication issues');\n    }\n    \n    // Initialize Firebase Admin SDK\n    if (firebaseConfig.clientEmail && firebaseConfig.privateKey) {\n      console.log('ðŸ”¥ Initializing with service account credentials...');\n      \n      // Clean up private key format (handle escaped newlines)\n      let cleanPrivateKey = firebaseConfig.privateKey;\n      if (cleanPrivateKey.includes('\\\\n')) {\n        cleanPrivateKey = cleanPrivateKey.replace(/\\\\n/g, '\\n');\n      }\n      \n      // Validate private key format\n      if (!cleanPrivateKey.includes('-----BEGIN PRIVATE KEY-----')) {\n        throw new Error('Invalid private key format - missing BEGIN marker');\n      }\n      if (!cleanPrivateKey.includes('-----END PRIVATE KEY-----')) {\n        throw new Error('Invalid private key format - missing END marker');\n      }\n      \n      adminApp = admin.initializeApp({\n        credential: admin.credential.cert({\n          projectId: firebaseConfig.projectId,\n          clientEmail: firebaseConfig.clientEmail,\n          privateKey: cleanPrivateKey\n        }),\n        projectId: firebaseConfig.projectId\n      });\n    } else {\n      console.warn('ðŸ”¥ Missing service account credentials, initializing with project ID only');\n      \n      adminApp = admin.initializeApp({\n        projectId: firebaseConfig.projectId\n      });\n    }\n\n    console.log('ðŸ”¥ Firebase Admin SDK initialized successfully');\n    return adminApp;\n    \n  } catch (error) {\n    console.error('ðŸ”¥ Failed to initialize Firebase Admin SDK:', error);\n    \n    // Create a minimal fallback for development\n    console.warn('ðŸ”¥ Creating minimal fallback Firebase Admin instance');\n    \n    try {\n      // Use the default project ID as fallback\n      const fallbackProjectId = process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID || process.env.FIREBASE_PROJECT_ID || 'prepbettr-dev';\n      \n      adminApp = admin.initializeApp({\n        projectId: fallbackProjectId\n      });\n      \n      console.log('ðŸ”¥ Fallback Firebase Admin instance created');\n      return adminApp;\n    } catch (fallbackError) {\n      console.error('ðŸ”¥ Failed to create fallback Firebase Admin instance:', fallbackError);\n      throw new Error(`Firebase Admin SDK initialization completely failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n}\n\n/**\n * Get Firebase Admin Auth instance\n */\nexport async function getAdminAuth(): Promise<any> {\n  if (isClient) {\n    throw new Error('Firebase Admin SDK not available on client side');\n  }\n  \n  if (adminAuth) {\n    return adminAuth;\n  }\n\n  const app = await initializeFirebaseAdmin();\n  adminAuth = admin.auth(app);\n  return adminAuth;\n}\n\nexport async function getAdminFirestore() {\n  if (isClient) {\n    throw new Error('Firebase Admin SDK not available on client side');\n  }\n  \n  // Get or initialize the Firebase Admin app\n  const app = await initializeFirebaseAdmin();\n  \n  // Return the real Firestore instance\n  return admin.firestore(app);\n}\n\nexport async function getAdminRemoteConfig() {\n  if (isClient) {\n    throw new Error('Firebase Admin SDK not available on client side');\n  }\n  \n  return {\n    getTemplate: async () => ({ parameters: {} }),\n    publishTemplate: async () => {},\n    getParameter: async () => ({ defaultValue: null }),\n    setParameter: async () => {}\n  };\n}\n\nexport async function verifyIdToken(token: string) {\n  if (isClient) {\n    throw new Error('Firebase Admin SDK not available on client side');\n  }\n  \n  console.warn('Firebase Admin verifyIdToken deprecated - use unified auth system');\n  return {\n    uid: 'mock-user-id',\n    email: 'mock@example.com'\n  };\n}\n\nexport async function getDBService() {\n  return getAdminFirestore();\n}\n"],"version":3}