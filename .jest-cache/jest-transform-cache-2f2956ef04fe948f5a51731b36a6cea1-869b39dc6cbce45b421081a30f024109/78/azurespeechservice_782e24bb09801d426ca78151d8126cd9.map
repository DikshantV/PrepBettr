{"version":3,"names":["SpeechSDK","cov_1n6p3s9sft","s","__importStar","require","azure_config_browser_1","AzureSpeechService","constructor","f","speechConfig","recognizer","synthesizer","isInitialized","initialize","secrets","fetchAzureSecrets","b","speechKey","speechEndpoint","console","warn","region","_a","match","SpeechConfig","fromSubscription","speechRecognitionLanguage","speechSynthesisVoiceName","log","error","startContinuousRecognition","onRecognized","onError","audioConfig","AudioConfig","fromDefaultMicrophoneInput","SpeechRecognizer","recognized","e","result","reason","ResultReason","RecognizedSpeech","text","confidence","properties","getProperty","PropertyId","SpeechServiceResponse_JsonResult","canceled","CancellationReason","Error","errorDetails","stopContinuousRecognition","sessionStopped","startContinuousRecognitionAsync","errorMessage","message","String","stopContinuousRecognitionAsync","close","synthesizeSpeech","options","onAudioChunk","fromStreamOutput","write","buffer","byteLength","fromDefaultSpeakerOutput","SpeechSynthesizer","voiceName","rate","pitch","ssml","Promise","resolve","reject","audioChunks","synthesisStarted","onSynthesisStart","call","synthesizing","audioData","push","slice","speakSsmlAsync","SynthesizingAudioCompleted","length","totalLength","reduce","sum","chunk","combined","Uint8Array","offset","forEach","set","isReady","dispose","exports","azureSpeechService"],"sources":["/Users/dikshantvashistha/PrepBettr/azure/lib/services/azure-speech-service.ts"],"sourcesContent":["import * as SpeechSDK from 'microsoft-cognitiveservices-speech-sdk';\nimport { fetchAzureSecrets } from '../../../lib/azure-config-browser';\n\nexport interface SpeechRecognitionResult {\n  text: string;\n  confidence: number;\n  reason: string;\n}\n\nexport interface SpeechSynthesisOptions {\n  voiceName?: string;\n  rate?: string;\n  pitch?: string;\n  onAudioChunk?: (chunk: ArrayBuffer) => void;\n  onSynthesisStart?: () => void;\n}\n\nexport class AzureSpeechService {\n  private speechConfig: SpeechSDK.SpeechConfig | null = null;\n  private recognizer: SpeechSDK.SpeechRecognizer | null = null;\n  private synthesizer: SpeechSDK.SpeechSynthesizer | null = null;\n  private isInitialized = false;\n\n  /**\n   * Initialize the Azure Speech Service\n   */\n  async initialize(): Promise<boolean> {\n    try {\n      const secrets = await fetchAzureSecrets();\n      \n      if (!secrets.speechKey || !secrets.speechEndpoint) {\n        console.warn('‚ö†Ô∏è Azure Speech credentials not available');\n        return false;\n      }\n\n      // Extract region from endpoint (e.g., https://westus.api.cognitive.microsoft.com -> westus)\n      const region = secrets.speechEndpoint.match(/https:\\/\\/([^.]+)/)?.[1] || 'westus';\n\n      this.speechConfig = SpeechSDK.SpeechConfig.fromSubscription(secrets.speechKey, region);\n      this.speechConfig.speechRecognitionLanguage = 'en-US';\n      this.speechConfig.speechSynthesisVoiceName = 'en-US-SaraNeural';\n\n      this.isInitialized = true;\n      console.log('‚úÖ Azure Speech Service initialized');\n      return true;\n    } catch (error) {\n      console.error('‚ùå Failed to initialize Azure Speech Service:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Start continuous speech recognition\n   */\n  async startContinuousRecognition(\n    onRecognized: (result: SpeechRecognitionResult) => void,\n    onError?: (error: string) => void\n  ): Promise<boolean> {\n    if (!this.isInitialized || !this.speechConfig) {\n      console.error('‚ùå Azure Speech Service not initialized');\n      return false;\n    }\n\n    try {\n      const audioConfig = SpeechSDK.AudioConfig.fromDefaultMicrophoneInput();\n      this.recognizer = new SpeechSDK.SpeechRecognizer(this.speechConfig, audioConfig);\n\n      this.recognizer.recognized = (s, e) => {\n        if (e.result.reason === SpeechSDK.ResultReason.RecognizedSpeech && e.result.text) {\n          onRecognized({\n            text: e.result.text,\n            confidence: e.result.properties?.getProperty(SpeechSDK.PropertyId.SpeechServiceResponse_JsonResult) ? 1.0 : 0.8,\n            reason: 'RecognizedSpeech'\n          });\n        }\n      };\n\n      this.recognizer.canceled = (s, e) => {\n        console.log(`‚ùå Recognition canceled: ${e.reason}`);\n        if (e.reason === SpeechSDK.CancellationReason.Error && onError) {\n          onError(e.errorDetails || 'Unknown error');\n        }\n        this.stopContinuousRecognition();\n      };\n\n      this.recognizer.sessionStopped = (s, e) => {\n        console.log('üõë Recognition session stopped');\n        this.stopContinuousRecognition();\n      };\n\n      await this.recognizer.startContinuousRecognitionAsync();\n      console.log('üé§ Started continuous speech recognition');\n      return true;\n    } catch (error) {\n      console.error('‚ùå Failed to start speech recognition:', error);\n      if (onError) {\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        onError(errorMessage || 'Failed to start speech recognition');\n      }\n      return false;\n    }\n  }\n\n  /**\n   * Stop continuous speech recognition\n   */\n  async stopContinuousRecognition(): Promise<void> {\n    if (this.recognizer) {\n      try {\n        await this.recognizer.stopContinuousRecognitionAsync();\n        this.recognizer.close();\n        this.recognizer = null;\n        console.log('üõë Stopped speech recognition');\n      } catch (error) {\n        console.error('‚ùå Error stopping speech recognition:', error);\n      }\n    }\n  }\n\n  /**\n   * Synthesize speech from text\n   */\n  async synthesizeSpeech(\n    text: string,\n    options: SpeechSynthesisOptions = {}\n  ): Promise<ArrayBuffer | null> {\n    if (!this.isInitialized || !this.speechConfig) {\n      console.error('‚ùå Azure Speech Service not initialized');\n      return null;\n    }\n\n    try {\n      // Use streaming audio output if callback is provided\n      const audioConfig = options.onAudioChunk\n        ? SpeechSDK.AudioConfig.fromStreamOutput({\n            write: (buffer: ArrayBuffer) => {\n              console.log(`üîä Streaming audio chunk: ${buffer.byteLength} bytes`);\n              options.onAudioChunk!(buffer);\n            },\n            close: () => console.log('üîä Audio stream closed')\n          })\n        : SpeechSDK.AudioConfig.fromDefaultSpeakerOutput();\n        \n      this.synthesizer = new SpeechSDK.SpeechSynthesizer(this.speechConfig, audioConfig);\n\n      const voiceName = options.voiceName || 'en-US-SaraNeural';\n      const rate = options.rate || '1.0';\n      const pitch = options.pitch || '0Hz';\n\n      const ssml = `\n        <speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\" xml:lang=\"en-US\">\n          <voice name=\"${voiceName}\">\n            <prosody rate=\"${rate}\" pitch=\"${pitch}\">\n              ${text}\n            </prosody>\n          </voice>\n        </speak>\n      `;\n\n      return new Promise((resolve, reject) => {\n        const audioChunks: ArrayBuffer[] = [];\n        \n        // Set up streaming events if callback provided\n        if (options.onAudioChunk) {\n          this.synthesizer!.synthesisStarted = (s, e) => {\n            console.log('üîä Streaming synthesis started');\n            options.onSynthesisStart?.();\n          };\n          \n          this.synthesizer!.synthesizing = (s, e) => {\n            if (e.result.audioData && e.result.audioData.byteLength > 0) {\n              console.log(`üîä Synthesizing chunk: ${e.result.audioData.byteLength} bytes`);\n              audioChunks.push(e.result.audioData.slice(0));\n              options.onAudioChunk!(e.result.audioData.slice(0));\n            }\n          };\n        }\n\n        this.synthesizer!.speakSsmlAsync(\n          ssml,\n          (result) => {\n            if (result.reason === SpeechSDK.ResultReason.SynthesizingAudioCompleted) {\n              console.log('‚úÖ Speech synthesis completed');\n              \n              // If streaming was used, combine chunks, otherwise use result data\n              if (options.onAudioChunk && audioChunks.length > 0) {\n                const totalLength = audioChunks.reduce((sum, chunk) => sum + chunk.byteLength, 0);\n                const combined = new Uint8Array(totalLength);\n                let offset = 0;\n                audioChunks.forEach(chunk => {\n                  combined.set(new Uint8Array(chunk), offset);\n                  offset += chunk.byteLength;\n                });\n                resolve(combined.buffer);\n              } else {\n                resolve(result.audioData);\n              }\n            } else {\n              console.error('‚ùå Speech synthesis failed:', result.errorDetails);\n              reject(new Error(result.errorDetails || 'Speech synthesis failed'));\n            }\n            this.synthesizer?.close();\n            this.synthesizer = null;\n          },\n          (error) => {\n            console.error('‚ùå Speech synthesis error:', error);\n            reject(error);\n            this.synthesizer?.close();\n            this.synthesizer = null;\n          }\n        );\n      });\n    } catch (error) {\n      console.error('‚ùå Failed to synthesize speech:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Check if the service is initialized and ready\n   */\n  isReady(): boolean {\n    return this.isInitialized && this.speechConfig !== null;\n  }\n\n  /**\n   * Clean up resources\n   */\n  dispose(): void {\n    this.stopContinuousRecognition();\n    if (this.synthesizer) {\n      this.synthesizer.close();\n      this.synthesizer = null;\n    }\n    this.speechConfig = null;\n    this.isInitialized = false;\n    console.log('üßπ Azure Speech Service disposed');\n  }\n}\n\n// Export singleton instance\nexport const azureSpeechService = new AzureSpeechService();\n"],"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","ignoreList":[]}