1fd818decf78a51e2c4ff489a6fdedd9
"use strict";

/**
 * Azure Functions Client
 *
 * This service provides a client interface for interacting with Azure Functions
 * including job automation, Firebase replacements (auth, GDPR), and other services.
 */
/* istanbul ignore next */
function cov_2kc2sxyqst() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/services/azure-functions-client.ts";
  var hash = "04d667eaa046d93f0ec43d789a46780f5a9bc66b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/services/azure-functions-client.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 62
        }
      },
      "1": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 69
        }
      },
      "2": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 68
        }
      },
      "3": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 65
        }
      },
      "4": {
        start: {
          line: 15,
          column: 40
        },
        end: {
          line: 15,
          column: 83
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 18,
          column: 9
        }
      },
      "6": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 43,
          column: 9
        }
      },
      "7": {
        start: {
          line: 25,
          column: 29
        },
        end: {
          line: 32,
          column: 14
        }
      },
      "8": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 35,
          column: 13
        }
      },
      "9": {
        start: {
          line: 34,
          column: 16
        },
        end: {
          line: 34,
          column: 74
        }
      },
      "10": {
        start: {
          line: 36,
          column: 27
        },
        end: {
          line: 36,
          column: 48
        }
      },
      "11": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 57
        }
      },
      "12": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 26
        }
      },
      "13": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 65
        }
      },
      "14": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 24
        }
      },
      "15": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 65,
          column: 9
        }
      },
      "16": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 52,
          column: 13
        }
      },
      "17": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 51,
          column: 65
        }
      },
      "18": {
        start: {
          line: 53,
          column: 32
        },
        end: {
          line: 53,
          column: 94
        }
      },
      "19": {
        start: {
          line: 54,
          column: 39
        },
        end: {
          line: 54,
          column: 157
        }
      },
      "20": {
        start: {
          line: 55,
          column: 32
        },
        end: {
          line: 55,
          column: 98
        }
      },
      "21": {
        start: {
          line: 56,
          column: 27
        },
        end: {
          line: 58,
          column: 14
        }
      },
      "22": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 55
        }
      },
      "23": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 26
        }
      },
      "24": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 67
        }
      },
      "25": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 24
        }
      },
      "26": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "27": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 74,
          column: 13
        }
      },
      "28": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 73,
          column: 65
        }
      },
      "29": {
        start: {
          line: 75,
          column: 32
        },
        end: {
          line: 75,
          column: 93
        }
      },
      "30": {
        start: {
          line: 76,
          column: 36
        },
        end: {
          line: 76,
          column: 118
        }
      },
      "31": {
        start: {
          line: 78,
          column: 34
        },
        end: {
          line: 78,
          column: 65
        }
      },
      "32": {
        start: {
          line: 79,
          column: 24
        },
        end: {
          line: 79,
          column: 34
        }
      },
      "33": {
        start: {
          line: 80,
          column: 33
        },
        end: {
          line: 80,
          column: 106
        }
      },
      "34": {
        start: {
          line: 81,
          column: 32
        },
        end: {
          line: 81,
          column: 95
        }
      },
      "35": {
        start: {
          line: 82,
          column: 27
        },
        end: {
          line: 84,
          column: 14
        }
      },
      "36": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 56
        }
      },
      "37": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 26
        }
      },
      "38": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 64
        }
      },
      "39": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 24
        }
      },
      "40": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 116,
          column: 9
        }
      },
      "41": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 100,
          column: 13
        }
      },
      "42": {
        start: {
          line: 99,
          column: 16
        },
        end: {
          line: 99,
          column: 65
        }
      },
      "43": {
        start: {
          line: 101,
          column: 27
        },
        end: {
          line: 101,
          column: 89
        }
      },
      "44": {
        start: {
          line: 102,
          column: 26
        },
        end: {
          line: 102,
          column: 28
        }
      },
      "45": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 110,
          column: 13
        }
      },
      "46": {
        start: {
          line: 104,
          column: 36
        },
        end: {
          line: 104,
          column: 85
        }
      },
      "47": {
        start: {
          line: 105,
          column: 35
        },
        end: {
          line: 105,
          column: 68
        }
      },
      "48": {
        start: {
          line: 106,
          column: 16
        },
        end: {
          line: 109,
          column: 18
        }
      },
      "49": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 25
        }
      },
      "50": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 63
        }
      },
      "51": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 22
        }
      },
      "52": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 137,
          column: 9
        }
      },
      "53": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 77
        }
      },
      "54": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 132,
          column: 15
        }
      },
      "55": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 63
        }
      },
      "56": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 24
        }
      },
      "57": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 152,
          column: 9
        }
      },
      "58": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 146,
          column: 66
        }
      },
      "59": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 147,
          column: 82
        }
      },
      "60": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 64
        }
      },
      "61": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 24
        }
      },
      "62": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 167,
          column: 9
        }
      },
      "63": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 161,
          column: 71
        }
      },
      "64": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 162,
          column: 22
        }
      },
      "65": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 68
        }
      },
      "66": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 22
        }
      },
      "67": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 191,
          column: 9
        }
      },
      "68": {
        start: {
          line: 174,
          column: 29
        },
        end: {
          line: 179,
          column: 14
        }
      },
      "69": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 182,
          column: 13
        }
      },
      "70": {
        start: {
          line: 181,
          column: 16
        },
        end: {
          line: 181,
          column: 87
        }
      },
      "71": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 41
        }
      },
      "72": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 57
        }
      },
      "73": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 190,
          column: 14
        }
      },
      "74": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 239,
          column: 9
        }
      },
      "75": {
        start: {
          line: 199,
          column: 35
        },
        end: {
          line: 199,
          column: 119
        }
      },
      "76": {
        start: {
          line: 200,
          column: 29
        },
        end: {
          line: 202,
          column: 58
        }
      },
      "77": {
        start: {
          line: 203,
          column: 29
        },
        end: {
          line: 211,
          column: 14
        }
      },
      "78": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 214,
          column: 13
        }
      },
      "79": {
        start: {
          line: 213,
          column: 16
        },
        end: {
          line: 213,
          column: 74
        }
      },
      "80": {
        start: {
          line: 215,
          column: 27
        },
        end: {
          line: 215,
          column: 48
        }
      },
      "81": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 225,
          column: 13
        }
      },
      "82": {
        start: {
          line: 218,
          column: 16
        },
        end: {
          line: 224,
          column: 18
        }
      },
      "83": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 231,
          column: 14
        }
      },
      "84": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 59
        }
      },
      "85": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 238,
          column: 14
        }
      },
      "86": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 270,
          column: 9
        }
      },
      "87": {
        start: {
          line: 246,
          column: 29
        },
        end: {
          line: 256,
          column: 14
        }
      },
      "88": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 260,
          column: 13
        }
      },
      "89": {
        start: {
          line: 258,
          column: 34
        },
        end: {
          line: 258,
          column: 55
        }
      },
      "90": {
        start: {
          line: 259,
          column: 16
        },
        end: {
          line: 259,
          column: 97
        }
      },
      "91": {
        start: {
          line: 261,
          column: 27
        },
        end: {
          line: 261,
          column: 48
        }
      },
      "92": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 262,
          column: 26
        }
      },
      "93": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 265,
          column: 67
        }
      },
      "94": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 269,
          column: 14
        }
      },
      "95": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 303,
          column: 9
        }
      },
      "96": {
        start: {
          line: 277,
          column: 29
        },
        end: {
          line: 288,
          column: 14
        }
      },
      "97": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 292,
          column: 13
        }
      },
      "98": {
        start: {
          line: 290,
          column: 34
        },
        end: {
          line: 290,
          column: 55
        }
      },
      "99": {
        start: {
          line: 291,
          column: 16
        },
        end: {
          line: 291,
          column: 97
        }
      },
      "100": {
        start: {
          line: 293,
          column: 27
        },
        end: {
          line: 293,
          column: 48
        }
      },
      "101": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 294,
          column: 26
        }
      },
      "102": {
        start: {
          line: 297,
          column: 12
        },
        end: {
          line: 297,
          column: 68
        }
      },
      "103": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 302,
          column: 14
        }
      },
      "104": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 327,
          column: 9
        }
      },
      "105": {
        start: {
          line: 310,
          column: 29
        },
        end: {
          line: 315,
          column: 14
        }
      },
      "106": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 318,
          column: 13
        }
      },
      "107": {
        start: {
          line: 317,
          column: 16
        },
        end: {
          line: 317,
          column: 74
        }
      },
      "108": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 319,
          column: 41
        }
      },
      "109": {
        start: {
          line: 322,
          column: 12
        },
        end: {
          line: 322,
          column: 73
        }
      },
      "110": {
        start: {
          line: 323,
          column: 12
        },
        end: {
          line: 326,
          column: 14
        }
      },
      "111": {
        start: {
          line: 333,
          column: 8
        },
        end: {
          line: 350,
          column: 9
        }
      },
      "112": {
        start: {
          line: 334,
          column: 29
        },
        end: {
          line: 341,
          column: 14
        }
      },
      "113": {
        start: {
          line: 342,
          column: 12
        },
        end: {
          line: 344,
          column: 13
        }
      },
      "114": {
        start: {
          line: 343,
          column: 16
        },
        end: {
          line: 343,
          column: 74
        }
      },
      "115": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 345,
          column: 41
        }
      },
      "116": {
        start: {
          line: 348,
          column: 12
        },
        end: {
          line: 348,
          column: 74
        }
      },
      "117": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 349,
          column: 24
        }
      },
      "118": {
        start: {
          line: 356,
          column: 8
        },
        end: {
          line: 356,
          column: 78
        }
      },
      "119": {
        start: {
          line: 359,
          column: 0
        },
        end: {
          line: 359,
          column: 52
        }
      },
      "120": {
        start: {
          line: 361,
          column: 0
        },
        end: {
          line: 361,
          column: 58
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 18
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 11
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        loc: {
          start: {
            line: 23,
            column: 36
          },
          end: {
            line: 44,
            column: 5
          }
        },
        line: 23
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        },
        loc: {
          start: {
            line: 48,
            column: 39
          },
          end: {
            line: 66,
            column: 5
          }
        },
        line: 48
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 70,
            column: 4
          },
          end: {
            line: 70,
            column: 5
          }
        },
        loc: {
          start: {
            line: 70,
            column: 36
          },
          end: {
            line: 92,
            column: 5
          }
        },
        line: 70
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 96,
            column: 4
          },
          end: {
            line: 96,
            column: 5
          }
        },
        loc: {
          start: {
            line: 96,
            column: 26
          },
          end: {
            line: 117,
            column: 5
          }
        },
        line: 96
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 121,
            column: 4
          },
          end: {
            line: 121,
            column: 5
          }
        },
        loc: {
          start: {
            line: 121,
            column: 44
          },
          end: {
            line: 138,
            column: 5
          }
        },
        line: 121
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 142,
            column: 4
          },
          end: {
            line: 142,
            column: 5
          }
        },
        loc: {
          start: {
            line: 142,
            column: 35
          },
          end: {
            line: 153,
            column: 5
          }
        },
        line: 142
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 157,
            column: 4
          },
          end: {
            line: 157,
            column: 5
          }
        },
        loc: {
          start: {
            line: 157,
            column: 48
          },
          end: {
            line: 168,
            column: 5
          }
        },
        line: 157
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 172,
            column: 4
          },
          end: {
            line: 172,
            column: 5
          }
        },
        loc: {
          start: {
            line: 172,
            column: 24
          },
          end: {
            line: 192,
            column: 5
          }
        },
        line: 172
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 196,
            column: 4
          },
          end: {
            line: 196,
            column: 5
          }
        },
        loc: {
          start: {
            line: 196,
            column: 29
          },
          end: {
            line: 240,
            column: 5
          }
        },
        line: 196
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 244,
            column: 4
          },
          end: {
            line: 244,
            column: 5
          }
        },
        loc: {
          start: {
            line: 244,
            column: 50
          },
          end: {
            line: 271,
            column: 5
          }
        },
        line: 244
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 275,
            column: 4
          },
          end: {
            line: 275,
            column: 5
          }
        },
        loc: {
          start: {
            line: 275,
            column: 57
          },
          end: {
            line: 304,
            column: 5
          }
        },
        line: 275
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 308,
            column: 4
          },
          end: {
            line: 308,
            column: 5
          }
        },
        loc: {
          start: {
            line: 308,
            column: 45
          },
          end: {
            line: 328,
            column: 5
          }
        },
        line: 308
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 332,
            column: 4
          },
          end: {
            line: 332,
            column: 5
          }
        },
        loc: {
          start: {
            line: 332,
            column: 38
          },
          end: {
            line: 351,
            column: 5
          }
        },
        line: 332
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 355,
            column: 4
          },
          end: {
            line: 355,
            column: 5
          }
        },
        loc: {
          start: {
            line: 355,
            column: 24
          },
          end: {
            line: 357,
            column: 5
          }
        },
        line: 355
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 12,
            column: 30
          },
          end: {
            line: 12,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 12,
            column: 30
          },
          end: {
            line: 12,
            column: 61
          }
        }, {
          start: {
            line: 12,
            column: 65
          },
          end: {
            line: 12,
            column: 67
          }
        }],
        line: 12
      },
      "1": {
        loc: {
          start: {
            line: 13,
            column: 27
          },
          end: {
            line: 13,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 27
          },
          end: {
            line: 13,
            column: 58
          }
        }, {
          start: {
            line: 13,
            column: 62
          },
          end: {
            line: 13,
            column: 64
          }
        }],
        line: 13
      },
      "2": {
        loc: {
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 18,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 18,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 16
      },
      "3": {
        loc: {
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 35,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 35,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "4": {
        loc: {
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 52,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 52,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "5": {
        loc: {
          start: {
            line: 57,
            column: 44
          },
          end: {
            line: 57,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 57,
            column: 64
          },
          end: {
            line: 57,
            column: 66
          }
        }, {
          start: {
            line: 57,
            column: 69
          },
          end: {
            line: 57,
            column: 70
          }
        }],
        line: 57
      },
      "6": {
        loc: {
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 74,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 74,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "7": {
        loc: {
          start: {
            line: 98,
            column: 12
          },
          end: {
            line: 100,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 12
          },
          end: {
            line: 100,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "8": {
        loc: {
          start: {
            line: 157,
            column: 36
          },
          end: {
            line: 157,
            column: 46
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 157,
            column: 44
          },
          end: {
            line: 157,
            column: 46
          }
        }],
        line: 157
      },
      "9": {
        loc: {
          start: {
            line: 180,
            column: 12
          },
          end: {
            line: 182,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 12
          },
          end: {
            line: 182,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "10": {
        loc: {
          start: {
            line: 189,
            column: 23
          },
          end: {
            line: 189,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 189,
            column: 48
          },
          end: {
            line: 189,
            column: 61
          }
        }, {
          start: {
            line: 189,
            column: 64
          },
          end: {
            line: 189,
            column: 79
          }
        }],
        line: 189
      },
      "11": {
        loc: {
          start: {
            line: 199,
            column: 35
          },
          end: {
            line: 199,
            column: 119
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 199,
            column: 35
          },
          end: {
            line: 199,
            column: 69
          }
        }, {
          start: {
            line: 199,
            column: 73
          },
          end: {
            line: 199,
            column: 119
          }
        }],
        line: 199
      },
      "12": {
        loc: {
          start: {
            line: 200,
            column: 29
          },
          end: {
            line: 202,
            column: 58
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 201,
            column: 18
          },
          end: {
            line: 201,
            column: 65
          }
        }, {
          start: {
            line: 202,
            column: 18
          },
          end: {
            line: 202,
            column: 58
          }
        }],
        line: 200
      },
      "13": {
        loc: {
          start: {
            line: 210,
            column: 37
          },
          end: {
            line: 210,
            column: 68
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 210,
            column: 54
          },
          end: {
            line: 210,
            column: 56
          }
        }, {
          start: {
            line: 210,
            column: 59
          },
          end: {
            line: 210,
            column: 68
          }
        }],
        line: 210
      },
      "14": {
        loc: {
          start: {
            line: 212,
            column: 12
          },
          end: {
            line: 214,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 212,
            column: 12
          },
          end: {
            line: 214,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 212
      },
      "15": {
        loc: {
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 225,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 225,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 217
      },
      "16": {
        loc: {
          start: {
            line: 217,
            column: 16
          },
          end: {
            line: 217,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 217,
            column: 16
          },
          end: {
            line: 217,
            column: 30
          }
        }, {
          start: {
            line: 217,
            column: 34
          },
          end: {
            line: 217,
            column: 48
          }
        }],
        line: 217
      },
      "17": {
        loc: {
          start: {
            line: 227,
            column: 23
          },
          end: {
            line: 227,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 227,
            column: 23
          },
          end: {
            line: 227,
            column: 37
          }
        }, {
          start: {
            line: 227,
            column: 41
          },
          end: {
            line: 227,
            column: 46
          }
        }],
        line: 227
      },
      "18": {
        loc: {
          start: {
            line: 230,
            column: 26
          },
          end: {
            line: 230,
            column: 69
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 230,
            column: 43
          },
          end: {
            line: 230,
            column: 55
          }
        }, {
          start: {
            line: 230,
            column: 58
          },
          end: {
            line: 230,
            column: 69
          }
        }],
        line: 230
      },
      "19": {
        loc: {
          start: {
            line: 237,
            column: 23
          },
          end: {
            line: 237,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 237,
            column: 48
          },
          end: {
            line: 237,
            column: 61
          }
        }, {
          start: {
            line: 237,
            column: 64
          },
          end: {
            line: 237,
            column: 79
          }
        }],
        line: 237
      },
      "20": {
        loc: {
          start: {
            line: 254,
            column: 31
          },
          end: {
            line: 254,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 254,
            column: 31
          },
          end: {
            line: 254,
            column: 40
          }
        }, {
          start: {
            line: 254,
            column: 44
          },
          end: {
            line: 254,
            column: 63
          }
        }],
        line: 254
      },
      "21": {
        loc: {
          start: {
            line: 257,
            column: 12
          },
          end: {
            line: 260,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 257,
            column: 12
          },
          end: {
            line: 260,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 257
      },
      "22": {
        loc: {
          start: {
            line: 268,
            column: 23
          },
          end: {
            line: 268,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 268,
            column: 48
          },
          end: {
            line: 268,
            column: 61
          }
        }, {
          start: {
            line: 268,
            column: 64
          },
          end: {
            line: 268,
            column: 79
          }
        }],
        line: 268
      },
      "23": {
        loc: {
          start: {
            line: 289,
            column: 12
          },
          end: {
            line: 292,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 289,
            column: 12
          },
          end: {
            line: 292,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 289
      },
      "24": {
        loc: {
          start: {
            line: 301,
            column: 25
          },
          end: {
            line: 301,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 301,
            column: 50
          },
          end: {
            line: 301,
            column: 63
          }
        }, {
          start: {
            line: 301,
            column: 66
          },
          end: {
            line: 301,
            column: 81
          }
        }],
        line: 301
      },
      "25": {
        loc: {
          start: {
            line: 316,
            column: 12
          },
          end: {
            line: 318,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 316,
            column: 12
          },
          end: {
            line: 318,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 316
      },
      "26": {
        loc: {
          start: {
            line: 325,
            column: 23
          },
          end: {
            line: 325,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 325,
            column: 48
          },
          end: {
            line: 325,
            column: 61
          }
        }, {
          start: {
            line: 325,
            column: 64
          },
          end: {
            line: 325,
            column: 79
          }
        }],
        line: 325
      },
      "27": {
        loc: {
          start: {
            line: 342,
            column: 12
          },
          end: {
            line: 344,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 342,
            column: 12
          },
          end: {
            line: 344,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 342
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/services/azure-functions-client.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/services/azure-functions-client.ts"],
      sourcesContent: ["/**\n * Azure Functions Client\n * \n * This service provides a client interface for interacting with Azure Functions\n * including job automation, Firebase replacements (auth, GDPR), and other services.\n */\n\n// import { QueueServiceClient } from '@azure/storage-queue';\n\n// Firebase-replacement interfaces\ninterface TokenVerificationRequest {\n  token: string;\n}\n\ninterface TokenVerificationResponse {\n  valid: boolean;\n  decoded?: any;\n  uid?: string;\n  email?: string;\n  error?: string;\n  endpoint?: string;\n}\n\ninterface SessionCookieRequest {\n  idToken: string;\n  expiresIn?: number;\n}\n\ninterface SessionCookieResponse {\n  sessionCookie: string;\n  error?: string;\n}\n\ninterface GDPRDeletionRequest {\n  userId: string;\n  userEmail: string;\n  reason: string;\n}\n\ninterface GDPRDeletionResponse {\n  requestId: string;\n  status: 'pending' | 'processing' | 'completed' | 'failed';\n  message: string;\n}\n\n// Job automation interfaces\ninterface SearchRequest {\n  userId: string;\n  filters: JobSearchFilters;\n  immediate?: boolean;\n  priority?: 'high' | 'normal' | 'low';\n}\n\ninterface ApplicationRequest {\n  userId: string;\n  jobId: string;\n  jobListing: any;\n  autoApply?: boolean;\n}\n\ninterface FollowUpRequest {\n  userId: string;\n  applicationId: string;\n  type: 'initial_follow_up' | 'second_follow_up' | 'thank_you' | 'status_check';\n  scheduledDate: string;\n}\n\ninterface JobSearchFilters {\n  keywords: string[];\n  locations: string[];\n  jobTypes: string[];\n  workArrangements: string[];\n  portals: string[];\n  minimumRelevancyScore: number;\n  datePosted?: 'past-24-hours' | 'past-week' | 'past-month' | 'any';\n}\n\nexport class AzureFunctionsClient {\n  private queueServiceClient: any; // QueueServiceClient;\n  private functionAppUrl: string;\n  private functionKey: string;\n\n  constructor() {\n    this.functionAppUrl = process.env.AZURE_FUNCTIONS_URL || '';\n    this.functionKey = process.env.AZURE_FUNCTIONS_KEY || '';\n    \n    // Initialize queue client for direct queue operations\n    const storageConnectionString = process.env.AZURE_STORAGE_CONNECTION_STRING;\n    if (storageConnectionString) {\n      // this.queueServiceClient = QueueServiceClient.fromConnectionString(storageConnectionString);\n    }\n  }\n\n  /**\n   * Trigger a manual job search for a user\n   */\n  async triggerJobSearch(request: SearchRequest) {\n    try {\n      const response = await fetch(`${this.functionAppUrl}/api/searchSchedulerHttp`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-functions-key': this.functionKey\n        },\n        body: JSON.stringify(request)\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const result = await response.json();\n      console.log('Job search triggered:', result);\n      return result;\n\n    } catch (error) {\n      console.error('Error triggering job search:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Queue a job application for processing\n   */\n  async queueJobApplication(request: ApplicationRequest) {\n    try {\n      if (!this.queueServiceClient) {\n        throw new Error('Queue service not initialized');\n      }\n\n      const queueClient = this.queueServiceClient.getQueueClient('process-applications');\n      \n      const applicationMessage = {\n        ...request,\n        requestId: this.generateRequestId(),\n        queuedAt: new Date().toISOString()\n      };\n\n      const messageText = Buffer.from(JSON.stringify(applicationMessage)).toString('base64');\n      \n      const result = await queueClient.sendMessage(messageText, {\n        visibilityTimeoutInSeconds: request.autoApply ? 30 : 0\n      });\n\n      console.log('Application queued:', result);\n      return result;\n\n    } catch (error) {\n      console.error('Error queuing job application:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Schedule a follow-up reminder\n   */\n  async scheduleFollowUp(request: FollowUpRequest) {\n    try {\n      if (!this.queueServiceClient) {\n        throw new Error('Queue service not initialized');\n      }\n\n      const queueClient = this.queueServiceClient.getQueueClient('follow-up-reminders');\n      \n      const followUpMessage = {\n        ...request,\n        createdAt: new Date().toISOString()\n      };\n\n      // Calculate delay until scheduled date\n      const scheduledTime = new Date(request.scheduledDate);\n      const now = new Date();\n      const delaySeconds = Math.max(0, Math.floor((scheduledTime.getTime() - now.getTime()) / 1000));\n\n      const messageText = Buffer.from(JSON.stringify(followUpMessage)).toString('base64');\n      \n      const result = await queueClient.sendMessage(messageText, {\n        visibilityTimeoutInSeconds: delaySeconds\n      });\n\n      console.log('Follow-up scheduled:', result);\n      return result;\n\n    } catch (error) {\n      console.error('Error scheduling follow-up:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get queue statistics for monitoring\n   */\n  async getQueueStats() {\n    try {\n      if (!this.queueServiceClient) {\n        throw new Error('Queue service not initialized');\n      }\n\n      const queues = ['search-jobs', 'process-applications', 'follow-up-reminders'];\n      const stats: Record<string, any> = {};\n\n      for (const queueName of queues) {\n        const queueClient = this.queueServiceClient.getQueueClient(queueName);\n        const properties = await queueClient.getProperties();\n        \n        stats[queueName] = {\n          messageCount: properties.approximateMessagesCount,\n          metadata: properties.metadata\n        };\n      }\n\n      return stats;\n\n    } catch (error) {\n      console.error('Error getting queue stats:', error);\n      return {};\n    }\n  }\n\n  /**\n   * Enable auto-apply for a user by updating their settings\n   */\n  async enableAutoApply(userId: string, settings: {\n    filters: JobSearchFilters;\n    autoApplyThreshold: number;\n    dailyApplicationLimit: number;\n    followUpEnabled: boolean;\n  }) {\n    try {\n      // This would typically update the user's settings in the database\n      // and then trigger an immediate job search\n      \n      console.log(`Enabling auto-apply for user ${userId}:`, settings);\n      \n      // Trigger initial job search with auto-apply enabled\n      return await this.triggerJobSearch({\n        userId,\n        filters: settings.filters,\n        immediate: true,\n        priority: 'high'\n      });\n\n    } catch (error) {\n      console.error('Error enabling auto-apply:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Disable auto-apply for a user\n   */\n  async disableAutoApply(userId: string) {\n    try {\n      // This would update the user's settings in the database\n      // The timer function will automatically stop scheduling searches\n      \n      console.log(`Auto-apply disabled for user ${userId}`);\n      return { success: true, message: 'Auto-apply disabled successfully' };\n\n    } catch (error) {\n      console.error('Error disabling auto-apply:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get automation logs for a user\n   */\n  async getAutomationLogs(userId: string, limit: number = 50) {\n    try {\n      // This would query the automation logs from storage or Application Insights\n      // For now, return empty array as logs are processed in real-time\n      \n      console.log(`Fetching automation logs for user ${userId}`);\n      return [];\n\n    } catch (error) {\n      console.error('Error fetching automation logs:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Health check for Azure Functions\n   */\n  async healthCheck() {\n    try {\n      const response = await fetch(`${this.functionAppUrl}/api/health`, {\n        method: 'GET',\n        headers: {\n          'x-functions-key': this.functionKey\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`Health check failed with status: ${response.status}`);\n      }\n\n      return await response.json();\n\n    } catch (error) {\n      console.error('Health check failed:', error);\n      return { \n        status: 'unhealthy', \n        error: error instanceof Error ? error.message : 'Unknown error' \n      };\n    }\n  }\n\n  /**\n   * Verify Firebase ID token using Azure Function (Unified Auth Endpoint)\n   */\n  async verifyToken(token: string): Promise<TokenVerificationResponse> {\n    try {\n      // Check feature flag for unified auth endpoint\n      const useUnifiedAuth = process.env.AUTH_ENDPOINT === 'v2' || process.env.NEXT_PUBLIC_AUTH_ENDPOINT === 'v2';\n      \n      const endpoint = useUnifiedAuth \n        ? `${this.functionAppUrl}/api/auth?action=verify`\n        : `${this.functionAppUrl}/api/verifyToken`;\n      \n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-functions-key': this.functionKey,\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify(useUnifiedAuth ? {} : { token })\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const result = await response.json();\n      \n      // Normalize response format between legacy and unified endpoints\n      if (useUnifiedAuth && result.success) {\n        return {\n          valid: result.verified,\n          decoded: result.claims,\n          uid: result.uid,\n          email: result.email,\n          endpoint: 'unified-v2'\n        };\n      }\n      \n      return {\n        valid: result.success || false,\n        decoded: result.claims,\n        error: result.error,\n        endpoint: useUnifiedAuth ? 'unified-v2' : 'legacy-v1'\n      };\n\n    } catch (error) {\n      console.error('Error verifying token:', error);\n      return {\n        valid: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Create session cookie using Azure Function\n   */\n  async createSessionCookie(idToken: string, expiresIn?: number): Promise<SessionCookieResponse> {\n    try {\n      const response = await fetch(`${this.functionAppUrl}/api/createSessionCookie`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-functions-key': this.functionKey\n        },\n        body: JSON.stringify({ \n          idToken,\n          expiresIn: expiresIn || 24 * 60 * 60 * 1000 // 24 hours default\n        })\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);\n      }\n\n      const result = await response.json();\n      return result;\n\n    } catch (error) {\n      console.error('Error creating session cookie:', error);\n      return {\n        sessionCookie: '',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Request GDPR data deletion using Azure Function\n   */\n  async requestGDPRDeletion(userId: string, userEmail: string, reason: string): Promise<GDPRDeletionResponse> {\n    try {\n      const response = await fetch(`${this.functionAppUrl}/api/deleteUserData`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-functions-key': this.functionKey\n        },\n        body: JSON.stringify({\n          userId,\n          userEmail,\n          reason\n        })\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);\n      }\n\n      const result = await response.json();\n      return result;\n\n    } catch (error) {\n      console.error('Error requesting GDPR deletion:', error);\n      return {\n        requestId: '',\n        status: 'failed',\n        message: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Check GDPR deletion status\n   */\n  async checkGDPRDeletionStatus(requestId: string) {\n    try {\n      const response = await fetch(`${this.functionAppUrl}/api/deleteUserData?requestId=${requestId}`, {\n        method: 'GET',\n        headers: {\n          'x-functions-key': this.functionKey\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n\n    } catch (error) {\n      console.error('Error checking GDPR deletion status:', error);\n      return {\n        status: 'unknown',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Trigger scheduled deletions manually (admin function)\n   */\n  async triggerScheduledDeletions() {\n    try {\n      const response = await fetch(`${this.functionAppUrl}/api/processScheduledDeletions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-functions-key': this.functionKey\n        },\n        body: JSON.stringify({ manual: true })\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n\n    } catch (error) {\n      console.error('Error triggering scheduled deletions:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Generate a unique request ID\n   */\n  private generateRequestId(): string {\n    return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n}\n\n// Export a singleton instance\nexport const azureFunctionsClient = new AzureFunctionsClient();\n\n// Example usage:\n/*\nimport { azureFunctionsClient } from '@/lib/services/azure-functions-client';\n\n// Firebase replacements\n// Verify token\nconst tokenResult = await azureFunctionsClient.verifyToken(idToken);\nif (tokenResult.valid) {\n  console.log('User:', tokenResult.decoded);\n}\n\n// Create session cookie\nconst sessionResult = await azureFunctionsClient.createSessionCookie(idToken, 24 * 60 * 60 * 1000);\nif (sessionResult.sessionCookie) {\n  // Set cookie in response\n  response.setHeader('Set-Cookie', `session=${sessionResult.sessionCookie}; HttpOnly; Secure`);\n}\n\n// Request GDPR deletion\nconst deletionResult = await azureFunctionsClient.requestGDPRDeletion(\n  'user123',\n  'user@example.com',\n  'User requested account deletion'\n);\n\n// Job automation\n// Trigger manual job search\nawait azureFunctionsClient.triggerJobSearch({\n  userId: 'user123',\n  filters: {\n    keywords: ['React', 'Frontend'],\n    locations: ['San Francisco', 'Remote'],\n    jobTypes: ['full-time'],\n    workArrangements: ['remote', 'hybrid'],\n    portals: ['LinkedIn', 'Indeed'],\n    minimumRelevancyScore: 75\n  },\n  immediate: true\n});\n\n// Enable auto-apply\nawait azureFunctionsClient.enableAutoApply('user123', {\n  filters: userFilters,\n  autoApplyThreshold: 80,\n  dailyApplicationLimit: 5,\n  followUpEnabled: true\n});\n\n// Queue specific job application\nawait azureFunctionsClient.queueJobApplication({\n  userId: 'user123',\n  jobId: 'job456',\n  jobListing: jobData,\n  autoApply: false\n});\n*/\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "04d667eaa046d93f0ec43d789a46780f5a9bc66b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2kc2sxyqst = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2kc2sxyqst();
cov_2kc2sxyqst().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2kc2sxyqst().s[1]++;
exports.azureFunctionsClient = exports.AzureFunctionsClient = void 0;
class AzureFunctionsClient {
  constructor() {
    /* istanbul ignore next */
    cov_2kc2sxyqst().f[0]++;
    cov_2kc2sxyqst().s[2]++;
    this.functionAppUrl =
    /* istanbul ignore next */
    (cov_2kc2sxyqst().b[0][0]++, process.env.AZURE_FUNCTIONS_URL) ||
    /* istanbul ignore next */
    (cov_2kc2sxyqst().b[0][1]++, '');
    /* istanbul ignore next */
    cov_2kc2sxyqst().s[3]++;
    this.functionKey =
    /* istanbul ignore next */
    (cov_2kc2sxyqst().b[1][0]++, process.env.AZURE_FUNCTIONS_KEY) ||
    /* istanbul ignore next */
    (cov_2kc2sxyqst().b[1][1]++, '');
    // Initialize queue client for direct queue operations
    const storageConnectionString =
    /* istanbul ignore next */
    (cov_2kc2sxyqst().s[4]++, process.env.AZURE_STORAGE_CONNECTION_STRING);
    /* istanbul ignore next */
    cov_2kc2sxyqst().s[5]++;
    if (storageConnectionString) {
      /* istanbul ignore next */
      cov_2kc2sxyqst().b[2][0]++;
    } // this.queueServiceClient = QueueServiceClient.fromConnectionString(storageConnectionString);
    else
    /* istanbul ignore next */
    {
      cov_2kc2sxyqst().b[2][1]++;
    }
  }
  /**
   * Trigger a manual job search for a user
   */
  async triggerJobSearch(request) {
    /* istanbul ignore next */
    cov_2kc2sxyqst().f[1]++;
    cov_2kc2sxyqst().s[6]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_2kc2sxyqst().s[7]++, await fetch(`${this.functionAppUrl}/api/searchSchedulerHttp`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-functions-key': this.functionKey
        },
        body: JSON.stringify(request)
      }));
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[8]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_2kc2sxyqst().b[3][0]++;
        cov_2kc2sxyqst().s[9]++;
        throw new Error(`HTTP error! status: ${response.status}`);
      } else
      /* istanbul ignore next */
      {
        cov_2kc2sxyqst().b[3][1]++;
      }
      const result =
      /* istanbul ignore next */
      (cov_2kc2sxyqst().s[10]++, await response.json());
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[11]++;
      console.log('Job search triggered:', result);
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[12]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[13]++;
      console.error('Error triggering job search:', error);
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[14]++;
      throw error;
    }
  }
  /**
   * Queue a job application for processing
   */
  async queueJobApplication(request) {
    /* istanbul ignore next */
    cov_2kc2sxyqst().f[2]++;
    cov_2kc2sxyqst().s[15]++;
    try {
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[16]++;
      if (!this.queueServiceClient) {
        /* istanbul ignore next */
        cov_2kc2sxyqst().b[4][0]++;
        cov_2kc2sxyqst().s[17]++;
        throw new Error('Queue service not initialized');
      } else
      /* istanbul ignore next */
      {
        cov_2kc2sxyqst().b[4][1]++;
      }
      const queueClient =
      /* istanbul ignore next */
      (cov_2kc2sxyqst().s[18]++, this.queueServiceClient.getQueueClient('process-applications'));
      const applicationMessage =
      /* istanbul ignore next */
      (cov_2kc2sxyqst().s[19]++, Object.assign(Object.assign({}, request), {
        requestId: this.generateRequestId(),
        queuedAt: new Date().toISOString()
      }));
      const messageText =
      /* istanbul ignore next */
      (cov_2kc2sxyqst().s[20]++, Buffer.from(JSON.stringify(applicationMessage)).toString('base64'));
      const result =
      /* istanbul ignore next */
      (cov_2kc2sxyqst().s[21]++, await queueClient.sendMessage(messageText, {
        visibilityTimeoutInSeconds: request.autoApply ?
        /* istanbul ignore next */
        (cov_2kc2sxyqst().b[5][0]++, 30) :
        /* istanbul ignore next */
        (cov_2kc2sxyqst().b[5][1]++, 0)
      }));
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[22]++;
      console.log('Application queued:', result);
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[23]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[24]++;
      console.error('Error queuing job application:', error);
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[25]++;
      throw error;
    }
  }
  /**
   * Schedule a follow-up reminder
   */
  async scheduleFollowUp(request) {
    /* istanbul ignore next */
    cov_2kc2sxyqst().f[3]++;
    cov_2kc2sxyqst().s[26]++;
    try {
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[27]++;
      if (!this.queueServiceClient) {
        /* istanbul ignore next */
        cov_2kc2sxyqst().b[6][0]++;
        cov_2kc2sxyqst().s[28]++;
        throw new Error('Queue service not initialized');
      } else
      /* istanbul ignore next */
      {
        cov_2kc2sxyqst().b[6][1]++;
      }
      const queueClient =
      /* istanbul ignore next */
      (cov_2kc2sxyqst().s[29]++, this.queueServiceClient.getQueueClient('follow-up-reminders'));
      const followUpMessage =
      /* istanbul ignore next */
      (cov_2kc2sxyqst().s[30]++, Object.assign(Object.assign({}, request), {
        createdAt: new Date().toISOString()
      }));
      // Calculate delay until scheduled date
      const scheduledTime =
      /* istanbul ignore next */
      (cov_2kc2sxyqst().s[31]++, new Date(request.scheduledDate));
      const now =
      /* istanbul ignore next */
      (cov_2kc2sxyqst().s[32]++, new Date());
      const delaySeconds =
      /* istanbul ignore next */
      (cov_2kc2sxyqst().s[33]++, Math.max(0, Math.floor((scheduledTime.getTime() - now.getTime()) / 1000)));
      const messageText =
      /* istanbul ignore next */
      (cov_2kc2sxyqst().s[34]++, Buffer.from(JSON.stringify(followUpMessage)).toString('base64'));
      const result =
      /* istanbul ignore next */
      (cov_2kc2sxyqst().s[35]++, await queueClient.sendMessage(messageText, {
        visibilityTimeoutInSeconds: delaySeconds
      }));
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[36]++;
      console.log('Follow-up scheduled:', result);
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[37]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[38]++;
      console.error('Error scheduling follow-up:', error);
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[39]++;
      throw error;
    }
  }
  /**
   * Get queue statistics for monitoring
   */
  async getQueueStats() {
    /* istanbul ignore next */
    cov_2kc2sxyqst().f[4]++;
    cov_2kc2sxyqst().s[40]++;
    try {
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[41]++;
      if (!this.queueServiceClient) {
        /* istanbul ignore next */
        cov_2kc2sxyqst().b[7][0]++;
        cov_2kc2sxyqst().s[42]++;
        throw new Error('Queue service not initialized');
      } else
      /* istanbul ignore next */
      {
        cov_2kc2sxyqst().b[7][1]++;
      }
      const queues =
      /* istanbul ignore next */
      (cov_2kc2sxyqst().s[43]++, ['search-jobs', 'process-applications', 'follow-up-reminders']);
      const stats =
      /* istanbul ignore next */
      (cov_2kc2sxyqst().s[44]++, {});
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[45]++;
      for (const queueName of queues) {
        const queueClient =
        /* istanbul ignore next */
        (cov_2kc2sxyqst().s[46]++, this.queueServiceClient.getQueueClient(queueName));
        const properties =
        /* istanbul ignore next */
        (cov_2kc2sxyqst().s[47]++, await queueClient.getProperties());
        /* istanbul ignore next */
        cov_2kc2sxyqst().s[48]++;
        stats[queueName] = {
          messageCount: properties.approximateMessagesCount,
          metadata: properties.metadata
        };
      }
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[49]++;
      return stats;
    } catch (error) {
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[50]++;
      console.error('Error getting queue stats:', error);
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[51]++;
      return {};
    }
  }
  /**
   * Enable auto-apply for a user by updating their settings
   */
  async enableAutoApply(userId, settings) {
    /* istanbul ignore next */
    cov_2kc2sxyqst().f[5]++;
    cov_2kc2sxyqst().s[52]++;
    try {
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[53]++;
      // This would typically update the user's settings in the database
      // and then trigger an immediate job search
      console.log(`Enabling auto-apply for user ${userId}:`, settings);
      // Trigger initial job search with auto-apply enabled
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[54]++;
      return await this.triggerJobSearch({
        userId,
        filters: settings.filters,
        immediate: true,
        priority: 'high'
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[55]++;
      console.error('Error enabling auto-apply:', error);
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[56]++;
      throw error;
    }
  }
  /**
   * Disable auto-apply for a user
   */
  async disableAutoApply(userId) {
    /* istanbul ignore next */
    cov_2kc2sxyqst().f[6]++;
    cov_2kc2sxyqst().s[57]++;
    try {
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[58]++;
      // This would update the user's settings in the database
      // The timer function will automatically stop scheduling searches
      console.log(`Auto-apply disabled for user ${userId}`);
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[59]++;
      return {
        success: true,
        message: 'Auto-apply disabled successfully'
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[60]++;
      console.error('Error disabling auto-apply:', error);
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[61]++;
      throw error;
    }
  }
  /**
   * Get automation logs for a user
   */
  async getAutomationLogs(userId, limit =
  /* istanbul ignore next */
  (cov_2kc2sxyqst().b[8][0]++, 50)) {
    /* istanbul ignore next */
    cov_2kc2sxyqst().f[7]++;
    cov_2kc2sxyqst().s[62]++;
    try {
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[63]++;
      // This would query the automation logs from storage or Application Insights
      // For now, return empty array as logs are processed in real-time
      console.log(`Fetching automation logs for user ${userId}`);
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[64]++;
      return [];
    } catch (error) {
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[65]++;
      console.error('Error fetching automation logs:', error);
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[66]++;
      return [];
    }
  }
  /**
   * Health check for Azure Functions
   */
  async healthCheck() {
    /* istanbul ignore next */
    cov_2kc2sxyqst().f[8]++;
    cov_2kc2sxyqst().s[67]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_2kc2sxyqst().s[68]++, await fetch(`${this.functionAppUrl}/api/health`, {
        method: 'GET',
        headers: {
          'x-functions-key': this.functionKey
        }
      }));
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[69]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_2kc2sxyqst().b[9][0]++;
        cov_2kc2sxyqst().s[70]++;
        throw new Error(`Health check failed with status: ${response.status}`);
      } else
      /* istanbul ignore next */
      {
        cov_2kc2sxyqst().b[9][1]++;
      }
      cov_2kc2sxyqst().s[71]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[72]++;
      console.error('Health check failed:', error);
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[73]++;
      return {
        status: 'unhealthy',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_2kc2sxyqst().b[10][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2kc2sxyqst().b[10][1]++, 'Unknown error')
      };
    }
  }
  /**
   * Verify Firebase ID token using Azure Function (Unified Auth Endpoint)
   */
  async verifyToken(token) {
    /* istanbul ignore next */
    cov_2kc2sxyqst().f[9]++;
    cov_2kc2sxyqst().s[74]++;
    try {
      // Check feature flag for unified auth endpoint
      const useUnifiedAuth =
      /* istanbul ignore next */
      (cov_2kc2sxyqst().s[75]++,
      /* istanbul ignore next */
      (cov_2kc2sxyqst().b[11][0]++, process.env.AUTH_ENDPOINT === 'v2') ||
      /* istanbul ignore next */
      (cov_2kc2sxyqst().b[11][1]++, process.env.NEXT_PUBLIC_AUTH_ENDPOINT === 'v2'));
      const endpoint =
      /* istanbul ignore next */
      (cov_2kc2sxyqst().s[76]++, useUnifiedAuth ?
      /* istanbul ignore next */
      (cov_2kc2sxyqst().b[12][0]++, `${this.functionAppUrl}/api/auth?action=verify`) :
      /* istanbul ignore next */
      (cov_2kc2sxyqst().b[12][1]++, `${this.functionAppUrl}/api/verifyToken`));
      const response =
      /* istanbul ignore next */
      (cov_2kc2sxyqst().s[77]++, await fetch(endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-functions-key': this.functionKey,
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(useUnifiedAuth ?
        /* istanbul ignore next */
        (cov_2kc2sxyqst().b[13][0]++, {}) :
        /* istanbul ignore next */
        (cov_2kc2sxyqst().b[13][1]++, {
          token
        }))
      }));
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[78]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_2kc2sxyqst().b[14][0]++;
        cov_2kc2sxyqst().s[79]++;
        throw new Error(`HTTP error! status: ${response.status}`);
      } else
      /* istanbul ignore next */
      {
        cov_2kc2sxyqst().b[14][1]++;
      }
      const result =
      /* istanbul ignore next */
      (cov_2kc2sxyqst().s[80]++, await response.json());
      // Normalize response format between legacy and unified endpoints
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[81]++;
      if (
      /* istanbul ignore next */
      (cov_2kc2sxyqst().b[16][0]++, useUnifiedAuth) &&
      /* istanbul ignore next */
      (cov_2kc2sxyqst().b[16][1]++, result.success)) {
        /* istanbul ignore next */
        cov_2kc2sxyqst().b[15][0]++;
        cov_2kc2sxyqst().s[82]++;
        return {
          valid: result.verified,
          decoded: result.claims,
          uid: result.uid,
          email: result.email,
          endpoint: 'unified-v2'
        };
      } else
      /* istanbul ignore next */
      {
        cov_2kc2sxyqst().b[15][1]++;
      }
      cov_2kc2sxyqst().s[83]++;
      return {
        valid:
        /* istanbul ignore next */
        (cov_2kc2sxyqst().b[17][0]++, result.success) ||
        /* istanbul ignore next */
        (cov_2kc2sxyqst().b[17][1]++, false),
        decoded: result.claims,
        error: result.error,
        endpoint: useUnifiedAuth ?
        /* istanbul ignore next */
        (cov_2kc2sxyqst().b[18][0]++, 'unified-v2') :
        /* istanbul ignore next */
        (cov_2kc2sxyqst().b[18][1]++, 'legacy-v1')
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[84]++;
      console.error('Error verifying token:', error);
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[85]++;
      return {
        valid: false,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_2kc2sxyqst().b[19][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2kc2sxyqst().b[19][1]++, 'Unknown error')
      };
    }
  }
  /**
   * Create session cookie using Azure Function
   */
  async createSessionCookie(idToken, expiresIn) {
    /* istanbul ignore next */
    cov_2kc2sxyqst().f[10]++;
    cov_2kc2sxyqst().s[86]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_2kc2sxyqst().s[87]++, await fetch(`${this.functionAppUrl}/api/createSessionCookie`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-functions-key': this.functionKey
        },
        body: JSON.stringify({
          idToken,
          expiresIn:
          /* istanbul ignore next */
          (cov_2kc2sxyqst().b[20][0]++, expiresIn) ||
          /* istanbul ignore next */
          (cov_2kc2sxyqst().b[20][1]++, 24 * 60 * 60 * 1000) // 24 hours default
        })
      }));
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[88]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_2kc2sxyqst().b[21][0]++;
        const errorText =
        /* istanbul ignore next */
        (cov_2kc2sxyqst().s[89]++, await response.text());
        /* istanbul ignore next */
        cov_2kc2sxyqst().s[90]++;
        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
      } else
      /* istanbul ignore next */
      {
        cov_2kc2sxyqst().b[21][1]++;
      }
      const result =
      /* istanbul ignore next */
      (cov_2kc2sxyqst().s[91]++, await response.json());
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[92]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[93]++;
      console.error('Error creating session cookie:', error);
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[94]++;
      return {
        sessionCookie: '',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_2kc2sxyqst().b[22][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2kc2sxyqst().b[22][1]++, 'Unknown error')
      };
    }
  }
  /**
   * Request GDPR data deletion using Azure Function
   */
  async requestGDPRDeletion(userId, userEmail, reason) {
    /* istanbul ignore next */
    cov_2kc2sxyqst().f[11]++;
    cov_2kc2sxyqst().s[95]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_2kc2sxyqst().s[96]++, await fetch(`${this.functionAppUrl}/api/deleteUserData`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-functions-key': this.functionKey
        },
        body: JSON.stringify({
          userId,
          userEmail,
          reason
        })
      }));
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[97]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_2kc2sxyqst().b[23][0]++;
        const errorText =
        /* istanbul ignore next */
        (cov_2kc2sxyqst().s[98]++, await response.text());
        /* istanbul ignore next */
        cov_2kc2sxyqst().s[99]++;
        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
      } else
      /* istanbul ignore next */
      {
        cov_2kc2sxyqst().b[23][1]++;
      }
      const result =
      /* istanbul ignore next */
      (cov_2kc2sxyqst().s[100]++, await response.json());
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[101]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[102]++;
      console.error('Error requesting GDPR deletion:', error);
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[103]++;
      return {
        requestId: '',
        status: 'failed',
        message: error instanceof Error ?
        /* istanbul ignore next */
        (cov_2kc2sxyqst().b[24][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2kc2sxyqst().b[24][1]++, 'Unknown error')
      };
    }
  }
  /**
   * Check GDPR deletion status
   */
  async checkGDPRDeletionStatus(requestId) {
    /* istanbul ignore next */
    cov_2kc2sxyqst().f[12]++;
    cov_2kc2sxyqst().s[104]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_2kc2sxyqst().s[105]++, await fetch(`${this.functionAppUrl}/api/deleteUserData?requestId=${requestId}`, {
        method: 'GET',
        headers: {
          'x-functions-key': this.functionKey
        }
      }));
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[106]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_2kc2sxyqst().b[25][0]++;
        cov_2kc2sxyqst().s[107]++;
        throw new Error(`HTTP error! status: ${response.status}`);
      } else
      /* istanbul ignore next */
      {
        cov_2kc2sxyqst().b[25][1]++;
      }
      cov_2kc2sxyqst().s[108]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[109]++;
      console.error('Error checking GDPR deletion status:', error);
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[110]++;
      return {
        status: 'unknown',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_2kc2sxyqst().b[26][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2kc2sxyqst().b[26][1]++, 'Unknown error')
      };
    }
  }
  /**
   * Trigger scheduled deletions manually (admin function)
   */
  async triggerScheduledDeletions() {
    /* istanbul ignore next */
    cov_2kc2sxyqst().f[13]++;
    cov_2kc2sxyqst().s[111]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_2kc2sxyqst().s[112]++, await fetch(`${this.functionAppUrl}/api/processScheduledDeletions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-functions-key': this.functionKey
        },
        body: JSON.stringify({
          manual: true
        })
      }));
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[113]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_2kc2sxyqst().b[27][0]++;
        cov_2kc2sxyqst().s[114]++;
        throw new Error(`HTTP error! status: ${response.status}`);
      } else
      /* istanbul ignore next */
      {
        cov_2kc2sxyqst().b[27][1]++;
      }
      cov_2kc2sxyqst().s[115]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[116]++;
      console.error('Error triggering scheduled deletions:', error);
      /* istanbul ignore next */
      cov_2kc2sxyqst().s[117]++;
      throw error;
    }
  }
  /**
   * Generate a unique request ID
   */
  generateRequestId() {
    /* istanbul ignore next */
    cov_2kc2sxyqst().f[14]++;
    cov_2kc2sxyqst().s[118]++;
    return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
}
/* istanbul ignore next */
cov_2kc2sxyqst().s[119]++;
exports.AzureFunctionsClient = AzureFunctionsClient;
// Export a singleton instance
/* istanbul ignore next */
cov_2kc2sxyqst().s[120]++;
exports.azureFunctionsClient = new AzureFunctionsClient();
// Example usage:
/*
import { azureFunctionsClient } from '@/lib/services/azure-functions-client';

// Firebase replacements
// Verify token
const tokenResult = await azureFunctionsClient.verifyToken(idToken);
if (tokenResult.valid) {
  console.log('User:', tokenResult.decoded);
}

// Create session cookie
const sessionResult = await azureFunctionsClient.createSessionCookie(idToken, 24 * 60 * 60 * 1000);
if (sessionResult.sessionCookie) {
  // Set cookie in response
  response.setHeader('Set-Cookie', `session=${sessionResult.sessionCookie}; HttpOnly; Secure`);
}

// Request GDPR deletion
const deletionResult = await azureFunctionsClient.requestGDPRDeletion(
  'user123',
  'user@example.com',
  'User requested account deletion'
);

// Job automation
// Trigger manual job search
await azureFunctionsClient.triggerJobSearch({
  userId: 'user123',
  filters: {
    keywords: ['React', 'Frontend'],
    locations: ['San Francisco', 'Remote'],
    jobTypes: ['full-time'],
    workArrangements: ['remote', 'hybrid'],
    portals: ['LinkedIn', 'Indeed'],
    minimumRelevancyScore: 75
  },
  immediate: true
});

// Enable auto-apply
await azureFunctionsClient.enableAutoApply('user123', {
  filters: userFilters,
  autoApplyThreshold: 80,
  dailyApplicationLimit: 5,
  followUpEnabled: true
});

// Queue specific job application
await azureFunctionsClient.queueJobApplication({
  userId: 'user123',
  jobId: 'job456',
  jobListing: jobData,
  autoApply: false
});
*/
//# sourceMappingURL=data:application/json;charset=utf-8;base64,