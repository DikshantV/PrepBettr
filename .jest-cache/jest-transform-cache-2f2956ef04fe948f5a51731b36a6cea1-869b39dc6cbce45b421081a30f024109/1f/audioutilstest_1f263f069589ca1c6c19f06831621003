7dcdce3d4a90aeeb45aa3b9005b0c7b7
"use strict";

/* istanbul ignore next */
function cov_t6ava1fuc() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/audio-utils.test.ts";
  var hash = "c2f5c18f3a4e5eee3a16f8bbb99c13f94e987290";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/audio-utils.test.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 22
        },
        end: {
          line: 3,
          column: 46
        }
      },
      "2": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 208,
          column: 3
        }
      },
      "3": {
        start: {
          line: 5,
          column: 23
        },
        end: {
          line: 5,
          column: 28
        }
      },
      "4": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 80,
          column: 7
        }
      },
      "5": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 12,
          column: 11
        }
      },
      "6": {
        start: {
          line: 8,
          column: 31
        },
        end: {
          line: 8,
          column: 50
        }
      },
      "7": {
        start: {
          line: 9,
          column: 27
        },
        end: {
          line: 9,
          column: 88
        }
      },
      "8": {
        start: {
          line: 10,
          column: 12
        },
        end: {
          line: 10,
          column: 47
        }
      },
      "9": {
        start: {
          line: 11,
          column: 12
        },
        end: {
          line: 11,
          column: 42
        }
      },
      "10": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 18,
          column: 11
        }
      },
      "11": {
        start: {
          line: 14,
          column: 31
        },
        end: {
          line: 14,
          column: 52
        }
      },
      "12": {
        start: {
          line: 15,
          column: 27
        },
        end: {
          line: 15,
          column: 88
        }
      },
      "13": {
        start: {
          line: 16,
          column: 12
        },
        end: {
          line: 16,
          column: 47
        }
      },
      "14": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 17,
          column: 44
        }
      },
      "15": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 37,
          column: 11
        }
      },
      "16": {
        start: {
          line: 21,
          column: 35
        },
        end: {
          line: 21,
          column: 63
        }
      },
      "17": {
        start: {
          line: 22,
          column: 38
        },
        end: {
          line: 22,
          column: 66
        }
      },
      "18": {
        start: {
          line: 23,
          column: 33
        },
        end: {
          line: 23,
          column: 67
        }
      },
      "19": {
        start: {
          line: 24,
          column: 30
        },
        end: {
          line: 24,
          column: 60
        }
      },
      "20": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 28,
          column: 13
        }
      },
      "21": {
        start: {
          line: 26,
          column: 25
        },
        end: {
          line: 26,
          column: 26
        }
      },
      "22": {
        start: {
          line: 27,
          column: 16
        },
        end: {
          line: 27,
          column: 53
        }
      },
      "23": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 32,
          column: 13
        }
      },
      "24": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 39
        }
      },
      "25": {
        start: {
          line: 31,
          column: 16
        },
        end: {
          line: 31,
          column: 82
        }
      },
      "26": {
        start: {
          line: 33,
          column: 27
        },
        end: {
          line: 33,
          column: 87
        }
      },
      "27": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 35,
          column: 65
        }
      },
      "28": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 75
        }
      },
      "29": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 48,
          column: 11
        }
      },
      "30": {
        start: {
          line: 39,
          column: 28
        },
        end: {
          line: 39,
          column: 54
        }
      },
      "31": {
        start: {
          line: 40,
          column: 30
        },
        end: {
          line: 40,
          column: 55
        }
      },
      "32": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 44,
          column: 13
        }
      },
      "33": {
        start: {
          line: 42,
          column: 25
        },
        end: {
          line: 42,
          column: 26
        }
      },
      "34": {
        start: {
          line: 43,
          column: 16
        },
        end: {
          line: 43,
          column: 82
        }
      },
      "35": {
        start: {
          line: 45,
          column: 27
        },
        end: {
          line: 45,
          column: 87
        }
      },
      "36": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 66
        }
      },
      "37": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 59,
          column: 11
        }
      },
      "38": {
        start: {
          line: 50,
          column: 28
        },
        end: {
          line: 50,
          column: 54
        }
      },
      "39": {
        start: {
          line: 51,
          column: 30
        },
        end: {
          line: 51,
          column: 55
        }
      },
      "40": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 55,
          column: 13
        }
      },
      "41": {
        start: {
          line: 53,
          column: 25
        },
        end: {
          line: 53,
          column: 26
        }
      },
      "42": {
        start: {
          line: 54,
          column: 16
        },
        end: {
          line: 54,
          column: 53
        }
      },
      "43": {
        start: {
          line: 56,
          column: 27
        },
        end: {
          line: 56,
          column: 87
        }
      },
      "44": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 48
        }
      },
      "45": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 79,
          column: 11
        }
      },
      "46": {
        start: {
          line: 61,
          column: 30
        },
        end: {
          line: 61,
          column: 50
        }
      },
      "47": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 78,
          column: 15
        }
      },
      "48": {
        start: {
          line: 63,
          column: 39
        },
        end: {
          line: 63,
          column: 79
        }
      },
      "49": {
        start: {
          line: 64,
          column: 38
        },
        end: {
          line: 64,
          column: 66
        }
      },
      "50": {
        start: {
          line: 65,
          column: 37
        },
        end: {
          line: 65,
          column: 67
        }
      },
      "51": {
        start: {
          line: 66,
          column: 34
        },
        end: {
          line: 66,
          column: 64
        }
      },
      "52": {
        start: {
          line: 68,
          column: 16
        },
        end: {
          line: 70,
          column: 17
        }
      },
      "53": {
        start: {
          line: 68,
          column: 29
        },
        end: {
          line: 68,
          column: 30
        }
      },
      "54": {
        start: {
          line: 69,
          column: 20
        },
        end: {
          line: 69,
          column: 37
        }
      },
      "55": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 74,
          column: 17
        }
      },
      "56": {
        start: {
          line: 72,
          column: 29
        },
        end: {
          line: 72,
          column: 43
        }
      },
      "57": {
        start: {
          line: 73,
          column: 20
        },
        end: {
          line: 73,
          column: 86
        }
      },
      "58": {
        start: {
          line: 75,
          column: 31
        },
        end: {
          line: 75,
          column: 91
        }
      },
      "59": {
        start: {
          line: 77,
          column: 16
        },
        end: {
          line: 77,
          column: 92
        }
      },
      "60": {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 135,
          column: 7
        }
      },
      "61": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 87,
          column: 11
        }
      },
      "62": {
        start: {
          line: 83,
          column: 32
        },
        end: {
          line: 83,
          column: 34
        }
      },
      "63": {
        start: {
          line: 84,
          column: 27
        },
        end: {
          line: 84,
          column: 99
        }
      },
      "64": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 85,
          column: 48
        }
      },
      "65": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 42
        }
      },
      "66": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 115,
          column: 11
        }
      },
      "67": {
        start: {
          line: 89,
          column: 30
        },
        end: {
          line: 89,
          column: 34
        }
      },
      "68": {
        start: {
          line: 90,
          column: 27
        },
        end: {
          line: 90,
          column: 29
        }
      },
      "69": {
        start: {
          line: 92,
          column: 33
        },
        end: {
          line: 92,
          column: 60
        }
      },
      "70": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 95,
          column: 13
        }
      },
      "71": {
        start: {
          line: 93,
          column: 25
        },
        end: {
          line: 93,
          column: 26
        }
      },
      "72": {
        start: {
          line: 94,
          column: 16
        },
        end: {
          line: 94,
          column: 56
        }
      },
      "73": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 38
        }
      },
      "74": {
        start: {
          line: 97,
          column: 33
        },
        end: {
          line: 97,
          column: 60
        }
      },
      "75": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 100,
          column: 13
        }
      },
      "76": {
        start: {
          line: 98,
          column: 25
        },
        end: {
          line: 98,
          column: 26
        }
      },
      "77": {
        start: {
          line: 99,
          column: 16
        },
        end: {
          line: 99,
          column: 56
        }
      },
      "78": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 103,
          column: 13
        }
      },
      "79": {
        start: {
          line: 101,
          column: 25
        },
        end: {
          line: 101,
          column: 38
        }
      },
      "80": {
        start: {
          line: 102,
          column: 16
        },
        end: {
          line: 102,
          column: 85
        }
      },
      "81": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 38
        }
      },
      "82": {
        start: {
          line: 105,
          column: 32
        },
        end: {
          line: 105,
          column: 59
        }
      },
      "83": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 108,
          column: 13
        }
      },
      "84": {
        start: {
          line: 106,
          column: 25
        },
        end: {
          line: 106,
          column: 26
        }
      },
      "85": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 107,
          column: 84
        }
      },
      "86": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 37
        }
      },
      "87": {
        start: {
          line: 110,
          column: 27
        },
        end: {
          line: 110,
          column: 94
        }
      },
      "88": {
        start: {
          line: 112,
          column: 34
        },
        end: {
          line: 112,
          column: 86
        }
      },
      "89": {
        start: {
          line: 112,
          column: 64
        },
        end: {
          line: 112,
          column: 82
        }
      },
      "90": {
        start: {
          line: 113,
          column: 33
        },
        end: {
          line: 113,
          column: 85
        }
      },
      "91": {
        start: {
          line: 113,
          column: 63
        },
        end: {
          line: 113,
          column: 81
        }
      },
      "92": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 61
        }
      },
      "93": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 134,
          column: 11
        }
      },
      "94": {
        start: {
          line: 117,
          column: 27
        },
        end: {
          line: 117,
          column: 29
        }
      },
      "95": {
        start: {
          line: 118,
          column: 30
        },
        end: {
          line: 118,
          column: 34
        }
      },
      "96": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 126,
          column: 13
        }
      },
      "97": {
        start: {
          line: 120,
          column: 25
        },
        end: {
          line: 120,
          column: 26
        }
      },
      "98": {
        start: {
          line: 121,
          column: 30
        },
        end: {
          line: 121,
          column: 57
        }
      },
      "99": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 124,
          column: 17
        }
      },
      "100": {
        start: {
          line: 122,
          column: 29
        },
        end: {
          line: 122,
          column: 30
        }
      },
      "101": {
        start: {
          line: 123,
          column: 20
        },
        end: {
          line: 123,
          column: 100
        }
      },
      "102": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 125,
          column: 35
        }
      },
      "103": {
        start: {
          line: 127,
          column: 27
        },
        end: {
          line: 127,
          column: 94
        }
      },
      "104": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 53
        }
      },
      "105": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 133,
          column: 15
        }
      },
      "106": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 59
        }
      },
      "107": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 132,
          column: 56
        }
      },
      "108": {
        start: {
          line: 136,
          column: 4
        },
        end: {
          line: 163,
          column: 7
        }
      },
      "109": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 140,
          column: 11
        }
      },
      "110": {
        start: {
          line: 138,
          column: 31
        },
        end: {
          line: 138,
          column: 50
        }
      },
      "111": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 72
        }
      },
      "112": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 144,
          column: 11
        }
      },
      "113": {
        start: {
          line: 142,
          column: 32
        },
        end: {
          line: 142,
          column: 54
        }
      },
      "114": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 73
        }
      },
      "115": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 155,
          column: 11
        }
      },
      "116": {
        start: {
          line: 146,
          column: 28
        },
        end: {
          line: 146,
          column: 32
        }
      },
      "117": {
        start: {
          line: 147,
          column: 30
        },
        end: {
          line: 147,
          column: 55
        }
      },
      "118": {
        start: {
          line: 148,
          column: 30
        },
        end: {
          line: 148,
          column: 33
        }
      },
      "119": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 151,
          column: 13
        }
      },
      "120": {
        start: {
          line: 149,
          column: 25
        },
        end: {
          line: 149,
          column: 26
        }
      },
      "121": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 150,
          column: 75
        }
      },
      "122": {
        start: {
          line: 152,
          column: 24
        },
        end: {
          line: 152,
          column: 66
        }
      },
      "123": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 65
        }
      },
      "124": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 162,
          column: 11
        }
      },
      "125": {
        start: {
          line: 157,
          column: 30
        },
        end: {
          line: 157,
          column: 52
        }
      },
      "126": {
        start: {
          line: 158,
          column: 30
        },
        end: {
          line: 158,
          column: 33
        }
      },
      "127": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 159,
          column: 38
        }
      },
      "128": {
        start: {
          line: 160,
          column: 24
        },
        end: {
          line: 160,
          column: 66
        }
      },
      "129": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 161,
          column: 40
        }
      },
      "130": {
        start: {
          line: 164,
          column: 4
        },
        end: {
          line: 180,
          column: 7
        }
      },
      "131": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 167,
          column: 11
        }
      },
      "132": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 72
        }
      },
      "133": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 170,
          column: 11
        }
      },
      "134": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 169,
          column: 74
        }
      },
      "135": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 175,
          column: 11
        }
      },
      "136": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 80
        }
      },
      "137": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 173,
          column: 78
        }
      },
      "138": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 79
        }
      },
      "139": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 179,
          column: 11
        }
      },
      "140": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 77
        }
      },
      "141": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 178,
          column: 76
        }
      },
      "142": {
        start: {
          line: 181,
          column: 4
        },
        end: {
          line: 197,
          column: 7
        }
      },
      "143": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 184,
          column: 11
        }
      },
      "144": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 72
        }
      },
      "145": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 187,
          column: 11
        }
      },
      "146": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 74
        }
      },
      "147": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 192,
          column: 11
        }
      },
      "148": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 79
        }
      },
      "149": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 78
        }
      },
      "150": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 79
        }
      },
      "151": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 196,
          column: 11
        }
      },
      "152": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 78
        }
      },
      "153": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 195,
          column: 76
        }
      },
      "154": {
        start: {
          line: 198,
          column: 4
        },
        end: {
          line: 207,
          column: 7
        }
      },
      "155": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 206,
          column: 11
        }
      },
      "156": {
        start: {
          line: 200,
          column: 31
        },
        end: {
          line: 200,
          column: 64
        }
      },
      "157": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 205,
          column: 15
        }
      },
      "158": {
        start: {
          line: 202,
          column: 27
        },
        end: {
          line: 202,
          column: 72
        }
      },
      "159": {
        start: {
          line: 203,
          column: 37
        },
        end: {
          line: 203,
          column: 73
        }
      },
      "160": {
        start: {
          line: 204,
          column: 16
        },
        end: {
          line: 204,
          column: 65
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 4,
            column: 28
          },
          end: {
            line: 4,
            column: 29
          }
        },
        loc: {
          start: {
            line: 4,
            column: 34
          },
          end: {
            line: 208,
            column: 1
          }
        },
        line: 4
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 35
          },
          end: {
            line: 6,
            column: 36
          }
        },
        loc: {
          start: {
            line: 6,
            column: 41
          },
          end: {
            line: 80,
            column: 5
          }
        },
        line: 6
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 7,
            column: 63
          },
          end: {
            line: 7,
            column: 64
          }
        },
        loc: {
          start: {
            line: 7,
            column: 69
          },
          end: {
            line: 12,
            column: 9
          }
        },
        line: 7
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 13,
            column: 88
          },
          end: {
            line: 13,
            column: 89
          }
        },
        loc: {
          start: {
            line: 13,
            column: 94
          },
          end: {
            line: 18,
            column: 9
          }
        },
        line: 13
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 19,
            column: 62
          },
          end: {
            line: 19,
            column: 63
          }
        },
        loc: {
          start: {
            line: 19,
            column: 68
          },
          end: {
            line: 37,
            column: 9
          }
        },
        line: 19
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 38,
            column: 65
          },
          end: {
            line: 38,
            column: 66
          }
        },
        loc: {
          start: {
            line: 38,
            column: 71
          },
          end: {
            line: 48,
            column: 9
          }
        },
        line: 38
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 49,
            column: 46
          },
          end: {
            line: 49,
            column: 47
          }
        },
        loc: {
          start: {
            line: 49,
            column: 52
          },
          end: {
            line: 59,
            column: 9
          }
        },
        line: 49
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 60,
            column: 68
          },
          end: {
            line: 60,
            column: 69
          }
        },
        loc: {
          start: {
            line: 60,
            column: 74
          },
          end: {
            line: 79,
            column: 9
          }
        },
        line: 60
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 62,
            column: 30
          },
          end: {
            line: 62,
            column: 31
          }
        },
        loc: {
          start: {
            line: 62,
            column: 49
          },
          end: {
            line: 78,
            column: 13
          }
        },
        line: 62
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 81,
            column: 45
          },
          end: {
            line: 81,
            column: 46
          }
        },
        loc: {
          start: {
            line: 81,
            column: 51
          },
          end: {
            line: 135,
            column: 5
          }
        },
        line: 81
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 82,
            column: 47
          },
          end: {
            line: 82,
            column: 48
          }
        },
        loc: {
          start: {
            line: 82,
            column: 53
          },
          end: {
            line: 87,
            column: 9
          }
        },
        line: 82
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 88,
            column: 55
          },
          end: {
            line: 88,
            column: 56
          }
        },
        loc: {
          start: {
            line: 88,
            column: 61
          },
          end: {
            line: 115,
            column: 9
          }
        },
        line: 88
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 112,
            column: 48
          },
          end: {
            line: 112,
            column: 49
          }
        },
        loc: {
          start: {
            line: 112,
            column: 64
          },
          end: {
            line: 112,
            column: 82
          }
        },
        line: 112
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 113,
            column: 47
          },
          end: {
            line: 113,
            column: 48
          }
        },
        loc: {
          start: {
            line: 113,
            column: 63
          },
          end: {
            line: 113,
            column: 81
          }
        },
        line: 113
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 116,
            column: 61
          },
          end: {
            line: 116,
            column: 62
          }
        },
        loc: {
          start: {
            line: 116,
            column: 67
          },
          end: {
            line: 134,
            column: 9
          }
        },
        line: 116
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 130,
            column: 27
          },
          end: {
            line: 130,
            column: 28
          }
        },
        loc: {
          start: {
            line: 130,
            column: 36
          },
          end: {
            line: 133,
            column: 13
          }
        },
        line: 130
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 136,
            column: 29
          },
          end: {
            line: 136,
            column: 30
          }
        },
        loc: {
          start: {
            line: 136,
            column: 35
          },
          end: {
            line: 163,
            column: 5
          }
        },
        line: 136
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 137,
            column: 46
          },
          end: {
            line: 137,
            column: 47
          }
        },
        loc: {
          start: {
            line: 137,
            column: 52
          },
          end: {
            line: 140,
            column: 9
          }
        },
        line: 137
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 141,
            column: 47
          },
          end: {
            line: 141,
            column: 48
          }
        },
        loc: {
          start: {
            line: 141,
            column: 53
          },
          end: {
            line: 144,
            column: 9
          }
        },
        line: 141
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 145,
            column: 57
          },
          end: {
            line: 145,
            column: 58
          }
        },
        loc: {
          start: {
            line: 145,
            column: 63
          },
          end: {
            line: 155,
            column: 9
          }
        },
        line: 145
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 156,
            column: 63
          },
          end: {
            line: 156,
            column: 64
          }
        },
        loc: {
          start: {
            line: 156,
            column: 69
          },
          end: {
            line: 162,
            column: 9
          }
        },
        line: 156
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 164,
            column: 30
          },
          end: {
            line: 164,
            column: 31
          }
        },
        loc: {
          start: {
            line: 164,
            column: 36
          },
          end: {
            line: 180,
            column: 5
          }
        },
        line: 164
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 165,
            column: 48
          },
          end: {
            line: 165,
            column: 49
          }
        },
        loc: {
          start: {
            line: 165,
            column: 54
          },
          end: {
            line: 167,
            column: 9
          }
        },
        line: 165
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 168,
            column: 46
          },
          end: {
            line: 168,
            column: 47
          }
        },
        loc: {
          start: {
            line: 168,
            column: 52
          },
          end: {
            line: 170,
            column: 9
          }
        },
        line: 168
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 171,
            column: 60
          },
          end: {
            line: 171,
            column: 61
          }
        },
        loc: {
          start: {
            line: 171,
            column: 66
          },
          end: {
            line: 175,
            column: 9
          }
        },
        line: 171
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 176,
            column: 63
          },
          end: {
            line: 176,
            column: 64
          }
        },
        loc: {
          start: {
            line: 176,
            column: 69
          },
          end: {
            line: 179,
            column: 9
          }
        },
        line: 176
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 181,
            column: 30
          },
          end: {
            line: 181,
            column: 31
          }
        },
        loc: {
          start: {
            line: 181,
            column: 36
          },
          end: {
            line: 197,
            column: 5
          }
        },
        line: 181
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 182,
            column: 47
          },
          end: {
            line: 182,
            column: 48
          }
        },
        loc: {
          start: {
            line: 182,
            column: 53
          },
          end: {
            line: 184,
            column: 9
          }
        },
        line: 182
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 185,
            column: 39
          },
          end: {
            line: 185,
            column: 40
          }
        },
        loc: {
          start: {
            line: 185,
            column: 45
          },
          end: {
            line: 187,
            column: 9
          }
        },
        line: 185
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 188,
            column: 51
          },
          end: {
            line: 188,
            column: 52
          }
        },
        loc: {
          start: {
            line: 188,
            column: 57
          },
          end: {
            line: 192,
            column: 9
          }
        },
        line: 188
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 193,
            column: 51
          },
          end: {
            line: 193,
            column: 52
          }
        },
        loc: {
          start: {
            line: 193,
            column: 57
          },
          end: {
            line: 196,
            column: 9
          }
        },
        line: 193
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 198,
            column: 49
          },
          end: {
            line: 198,
            column: 50
          }
        },
        loc: {
          start: {
            line: 198,
            column: 55
          },
          end: {
            line: 207,
            column: 5
          }
        },
        line: 198
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 199,
            column: 67
          },
          end: {
            line: 199,
            column: 68
          }
        },
        loc: {
          start: {
            line: 199,
            column: 73
          },
          end: {
            line: 206,
            column: 9
          }
        },
        line: 199
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 201,
            column: 31
          },
          end: {
            line: 201,
            column: 32
          }
        },
        loc: {
          start: {
            line: 201,
            column: 46
          },
          end: {
            line: 205,
            column: 13
          }
        },
        line: 201
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0
    },
    b: {},
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/audio-utils.test.ts",
      mappings: ";;AAAA,+CAMuB;AAEvB,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,MAAM,UAAU,GAAG,KAAK,CAAC,CAAC,oBAAoB;IAE9C,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAClC,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;YAC1D,MAAM,UAAU,GAAG,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC;YACvC,MAAM,MAAM,GAAG,IAAA,gCAAkB,EAAC,UAAU,EAAE,UAAU,CAAC,CAAC;YAC1D,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2EAA2E,EAAE,GAAG,EAAE;YACnF,MAAM,UAAU,GAAG,IAAI,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,mBAAmB;YAC7D,MAAM,MAAM,GAAG,IAAA,gCAAkB,EAAC,UAAU,EAAE,UAAU,CAAC,CAAC;YAC1D,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;YACzD,6DAA6D;YAC7D,MAAM,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,cAAc;YACnE,MAAM,iBAAiB,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,cAAc;YACtE,MAAM,YAAY,GAAG,cAAc,GAAG,iBAAiB,CAAC;YAExD,MAAM,SAAS,GAAG,IAAI,YAAY,CAAC,YAAY,CAAC,CAAC;YAEjD,oDAAoD;YACpD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,EAAE,CAAC,EAAE,EAAE,CAAC;gBACxC,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC,mBAAmB;YAC3D,CAAC;YAED,wDAAwD;YACxD,KAAK,IAAI,CAAC,GAAG,cAAc,EAAE,CAAC,GAAG,YAAY,EAAE,CAAC,EAAE,EAAE,CAAC;gBACnD,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,UAAU,CAAC,GAAG,GAAG,CAAC,CAAC,kBAAkB;YACvF,CAAC;YAED,MAAM,MAAM,GAAG,IAAA,gCAAkB,EAAC,SAAS,EAAE,UAAU,CAAC,CAAC;YAEzD,0CAA0C;YAC1C,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YACrD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,iBAAiB,GAAG,GAAG,CAAC,CAAC,CAAC,oBAAoB;QACtF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oDAAoD,EAAE,GAAG,EAAE;YAC5D,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC,WAAW;YACvD,MAAM,SAAS,GAAG,IAAI,YAAY,CAAC,OAAO,CAAC,CAAC;YAE5C,4CAA4C;YAC5C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC;gBACjC,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,UAAU,CAAC,GAAG,GAAG,CAAC;YACpE,CAAC;YAED,MAAM,MAAM,GAAG,IAAA,gCAAkB,EAAC,SAAS,EAAE,UAAU,CAAC,CAAC;YAEzD,2CAA2C;YAC3C,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;YACzC,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC,WAAW;YACvD,MAAM,SAAS,GAAG,IAAI,YAAY,CAAC,OAAO,CAAC,CAAC;YAE5C,oBAAoB;YACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC;gBACjC,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC,mBAAmB;YAC3D,CAAC;YAED,MAAM,MAAM,GAAG,IAAA,gCAAkB,EAAC,SAAS,EAAE,UAAU,CAAC,CAAC;YAEzD,mEAAmE;YACnE,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uDAAuD,EAAE,GAAG,EAAE;YAC/D,MAAM,SAAS,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,yCAAyC;YAEjF,SAAS,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE;gBAClC,MAAM,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,eAAe,CAAC,CAAC;gBAChE,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,GAAG,CAAC,CAAC;gBACnD,MAAM,YAAY,GAAG,cAAc,GAAG,aAAa,CAAC;gBAEpD,MAAM,SAAS,GAAG,IAAI,YAAY,CAAC,YAAY,CAAC,CAAC;gBAEjD,cAAc;gBACd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,EAAE,CAAC,EAAE,EAAE,CAAC;oBACxC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;gBACnB,CAAC;gBAED,aAAa;gBACb,KAAK,IAAI,CAAC,GAAG,cAAc,EAAE,CAAC,GAAG,YAAY,EAAE,CAAC,EAAE,EAAE,CAAC;oBACnD,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,UAAU,CAAC,GAAG,GAAG,CAAC;gBACpE,CAAC;gBAED,MAAM,MAAM,GAAG,IAAA,gCAAkB,EAAC,SAAS,EAAE,UAAU,CAAC,CAAC;gBAEzD,kCAAkC;gBAClC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,mBAAmB,CAAC,aAAa,GAAG,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,2BAA2B;YAC1G,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,8BAA8B,EAAE,GAAG,EAAE;QAC5C,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC1C,MAAM,WAAW,GAAmB,EAAE,CAAC;YACvC,MAAM,MAAM,GAAG,IAAA,0CAA4B,EAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YACrE,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;YACpC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;YAClD,MAAM,SAAS,GAAG,IAAI,CAAC;YACvB,MAAM,MAAM,GAAmB,EAAE,CAAC;YAElC,gFAAgF;YAChF,MAAM,YAAY,GAAG,IAAI,YAAY,CAAC,SAAS,CAAC,CAAC;YACjD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE,CAAC;gBACnC,YAAY,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC;YAC1C,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAE1B,MAAM,YAAY,GAAG,IAAI,YAAY,CAAC,SAAS,CAAC,CAAC;YACjD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;gBACvC,YAAY,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC;YAC1C,CAAC;YACD,KAAK,IAAI,CAAC,GAAG,SAAS,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC/C,YAAY,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,UAAU,CAAC,GAAG,GAAG,CAAC;YACvE,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAE1B,MAAM,WAAW,GAAG,IAAI,YAAY,CAAC,SAAS,CAAC,CAAC;YAChD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE,CAAC;gBACnC,WAAW,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,GAAG,UAAU,CAAC,GAAG,GAAG,CAAC;YACtE,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAEzB,MAAM,MAAM,GAAG,IAAA,0CAA4B,EAAC,MAAM,EAAE,UAAU,CAAC,CAAC;YAEhE,iDAAiD;YACjD,MAAM,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,GAAG,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC3E,MAAM,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,GAAG,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC1E,MAAM,CAAC,YAAY,CAAC,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;YACxD,MAAM,MAAM,GAAmB,EAAE,CAAC;YAClC,MAAM,SAAS,GAAG,IAAI,CAAC;YAEvB,2CAA2C;YAC3C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC3B,MAAM,KAAK,GAAG,IAAI,YAAY,CAAC,SAAS,CAAC,CAAC;gBAC1C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE,CAAC;oBACnC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,SAAS,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC,GAAG,GAAG,CAAC;gBAClF,CAAC;gBACD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACrB,CAAC;YAED,MAAM,MAAM,GAAG,IAAA,0CAA4B,EAAC,MAAM,EAAE,UAAU,CAAC,CAAC;YAEhE,2CAA2C;YAC3C,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACrB,MAAM,CAAC,KAAK,CAAC,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;gBAC3C,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;YACzC,MAAM,UAAU,GAAG,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,IAAA,0BAAY,EAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC1C,MAAM,WAAW,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC;YAC3C,MAAM,CAAC,IAAA,0BAAY,EAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;YACpD,MAAM,OAAO,GAAG,IAAI,CAAC;YACrB,MAAM,SAAS,GAAG,IAAI,YAAY,CAAC,OAAO,CAAC,CAAC;YAC5C,MAAM,SAAS,GAAG,GAAG,CAAC;YAEtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC;gBACjC,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,SAAS,CAAC;YAC7D,CAAC;YAED,MAAM,GAAG,GAAG,IAAA,0BAAY,EAAC,SAAS,CAAC,CAAC;YACpC,+DAA+D;YAC/D,MAAM,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;YAC1D,MAAM,SAAS,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC;YACzC,MAAM,SAAS,GAAG,GAAG,CAAC;YACtB,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAE1B,MAAM,GAAG,GAAG,IAAA,0BAAY,EAAC,SAAS,CAAC,CAAC;YACpC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,EAAE,CAAC,mCAAmC,EAAE,GAAG,EAAE;YAC3C,MAAM,CAAC,IAAA,2BAAa,EAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;YACzC,MAAM,CAAC,IAAA,2BAAa,EAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;YACvD,MAAM,CAAC,IAAA,2BAAa,EAAC,GAAG,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,yBAAyB;YAC3E,MAAM,CAAC,IAAA,2BAAa,EAAC,GAAG,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,IAAA,2BAAa,EAAC,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;YAC1D,MAAM,CAAC,IAAA,2BAAa,EAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YAC9C,MAAM,CAAC,IAAA,2BAAa,EAAC,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC1C,MAAM,CAAC,IAAA,2BAAa,EAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0BAA0B,EAAE,GAAG,EAAE;YAClC,MAAM,CAAC,IAAA,2BAAa,EAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;YAC9C,MAAM,CAAC,IAAA,2BAAa,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAChD,MAAM,CAAC,IAAA,2BAAa,EAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,IAAA,2BAAa,EAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;YAC9C,MAAM,CAAC,IAAA,2BAAa,EAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,IAAA,2BAAa,EAAC,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAChD,EAAE,CAAC,sDAAsD,EAAE,GAAG,EAAE;YAC9D,MAAM,UAAU,GAAG,CAAC,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAErD,UAAU,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;gBAC/B,MAAM,EAAE,GAAG,IAAA,2BAAa,EAAC,WAAW,CAAC,CAAC;gBACtC,MAAM,YAAY,GAAG,IAAA,2BAAa,EAAC,EAAE,CAAC,CAAC;gBACvC,MAAM,CAAC,YAAY,CAAC,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YACnD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/audio-utils.test.ts"],
      sourcesContent: ["import { \n  trimInitialSilence, \n  trimInitialSilenceFromChunks,\n  calculateRMS, \n  rmsToDecibels, \n  decibelsToRMS \n} from './audio-utils';\n\ndescribe('Audio Utilities', () => {\n  const sampleRate = 16000; // 16kHz sample rate\n  \n  describe('trimInitialSilence', () => {\n    it('should return original audio when array is empty', () => {\n      const emptyArray = new Float32Array(0);\n      const result = trimInitialSilence(emptyArray, sampleRate);\n      expect(result).toEqual(emptyArray);\n      expect(result.length).toBe(0);\n    });\n\n    it('should return original audio when window size is larger than audio length', () => {\n      const shortArray = new Float32Array(100); // Very short audio\n      const result = trimInitialSilence(shortArray, sampleRate);\n      expect(result).toEqual(shortArray);\n      expect(result.length).toBe(100);\n    });\n\n    it('should trim silence from the beginning of audio', () => {\n      // Create audio with 0.5 seconds of silence, then non-silence\n      const silenceSamples = Math.floor(sampleRate * 0.5); // 0.5 seconds\n      const nonSilenceSamples = Math.floor(sampleRate * 0.5); // 0.5 seconds\n      const totalSamples = silenceSamples + nonSilenceSamples;\n      \n      const audioData = new Float32Array(totalSamples);\n      \n      // Fill first half with silence (very low amplitude)\n      for (let i = 0; i < silenceSamples; i++) {\n        audioData[i] = Math.random() * 0.001; // Very quiet noise\n      }\n      \n      // Fill second half with actual audio (higher amplitude)\n      for (let i = silenceSamples; i < totalSamples; i++) {\n        audioData[i] = Math.sin(2 * Math.PI * 440 * i / sampleRate) * 0.3; // 440Hz sine wave\n      }\n      \n      const result = trimInitialSilence(audioData, sampleRate);\n      \n      // Should have trimmed most of the silence\n      expect(result.length).toBeLessThan(audioData.length);\n      expect(result.length).toBeGreaterThan(nonSilenceSamples * 0.9); // Allow some margin\n    });\n\n    it('should not trim audio that starts with non-silence', () => {\n      const samples = Math.floor(sampleRate * 1); // 1 second\n      const audioData = new Float32Array(samples);\n      \n      // Fill with non-silent audio from the start\n      for (let i = 0; i < samples; i++) {\n        audioData[i] = Math.sin(2 * Math.PI * 440 * i / sampleRate) * 0.3;\n      }\n      \n      const result = trimInitialSilence(audioData, sampleRate);\n      \n      // Should return most of the original audio\n      expect(result.length).toBeGreaterThan(samples * 0.95);\n    });\n\n    it('should handle all-silence audio', () => {\n      const samples = Math.floor(sampleRate * 1); // 1 second\n      const audioData = new Float32Array(samples);\n      \n      // Fill with silence\n      for (let i = 0; i < samples; i++) {\n        audioData[i] = Math.random() * 0.001; // Very quiet noise\n      }\n      \n      const result = trimInitialSilence(audioData, sampleRate);\n      \n      // Should return original or nearly original since it's all silence\n      expect(result.length).toBe(samples);\n    });\n\n    it('should detect speech after variable silence durations', () => {\n      const testCases = [0.1, 0.3, 0.5, 1.0]; // Different silence durations in seconds\n      \n      testCases.forEach(silenceDuration => {\n        const silenceSamples = Math.floor(sampleRate * silenceDuration);\n        const speechSamples = Math.floor(sampleRate * 0.5);\n        const totalSamples = silenceSamples + speechSamples;\n        \n        const audioData = new Float32Array(totalSamples);\n        \n        // Add silence\n        for (let i = 0; i < silenceSamples; i++) {\n          audioData[i] = 0;\n        }\n        \n        // Add speech\n        for (let i = silenceSamples; i < totalSamples; i++) {\n          audioData[i] = Math.sin(2 * Math.PI * 440 * i / sampleRate) * 0.5;\n        }\n        \n        const result = trimInitialSilence(audioData, sampleRate);\n        \n        // Should have trimmed the silence\n        expect(result.length).toBeLessThanOrEqual(speechSamples + sampleRate * 0.2); // Allow window size margin\n      });\n    });\n  });\n\n  describe('trimInitialSilenceFromChunks', () => {\n    it('should handle empty chunks array', () => {\n      const emptyChunks: Float32Array[] = [];\n      const result = trimInitialSilenceFromChunks(emptyChunks, sampleRate);\n      expect(result).toEqual(emptyChunks);\n      expect(result.length).toBe(0);\n    });\n\n    it('should trim silence from multiple chunks', () => {\n      const chunkSize = 4096;\n      const chunks: Float32Array[] = [];\n      \n      // Create 3 chunks: first is silence, second is partial silence, third is speech\n      const silenceChunk = new Float32Array(chunkSize);\n      for (let i = 0; i < chunkSize; i++) {\n        silenceChunk[i] = Math.random() * 0.001;\n      }\n      chunks.push(silenceChunk);\n      \n      const partialChunk = new Float32Array(chunkSize);\n      for (let i = 0; i < chunkSize / 2; i++) {\n        partialChunk[i] = Math.random() * 0.001;\n      }\n      for (let i = chunkSize / 2; i < chunkSize; i++) {\n        partialChunk[i] = Math.sin(2 * Math.PI * 440 * i / sampleRate) * 0.3;\n      }\n      chunks.push(partialChunk);\n      \n      const speechChunk = new Float32Array(chunkSize);\n      for (let i = 0; i < chunkSize; i++) {\n        speechChunk[i] = Math.sin(2 * Math.PI * 440 * i / sampleRate) * 0.3;\n      }\n      chunks.push(speechChunk);\n      \n      const result = trimInitialSilenceFromChunks(chunks, sampleRate);\n      \n      // Should have fewer total samples after trimming\n      const originalTotal = chunks.reduce((sum, chunk) => sum + chunk.length, 0);\n      const trimmedTotal = result.reduce((sum, chunk) => sum + chunk.length, 0);\n      expect(trimmedTotal).toBeLessThan(originalTotal);\n    });\n\n    it('should maintain chunk structure after trimming', () => {\n      const chunks: Float32Array[] = [];\n      const chunkSize = 4096;\n      \n      // Create chunks with speech from the start\n      for (let i = 0; i < 3; i++) {\n        const chunk = new Float32Array(chunkSize);\n        for (let j = 0; j < chunkSize; j++) {\n          chunk[j] = Math.sin(2 * Math.PI * 440 * (i * chunkSize + j) / sampleRate) * 0.3;\n        }\n        chunks.push(chunk);\n      }\n      \n      const result = trimInitialSilenceFromChunks(chunks, sampleRate);\n      \n      // Should return chunks (may be re-chunked)\n      expect(result.length).toBeGreaterThan(0);\n      result.forEach(chunk => {\n        expect(chunk).toBeInstanceOf(Float32Array);\n        expect(chunk.length).toBeGreaterThan(0);\n      });\n    });\n  });\n\n  describe('calculateRMS', () => {\n    it('should return 0 for empty array', () => {\n      const emptyArray = new Float32Array(0);\n      expect(calculateRMS(emptyArray)).toBe(0);\n    });\n\n    it('should return 0 for silent audio', () => {\n      const silentAudio = new Float32Array(1000);\n      expect(calculateRMS(silentAudio)).toBe(0);\n    });\n\n    it('should calculate correct RMS for sine wave', () => {\n      const samples = 1000;\n      const audioData = new Float32Array(samples);\n      const amplitude = 0.5;\n      \n      for (let i = 0; i < samples; i++) {\n        audioData[i] = Math.sin(2 * Math.PI * i / 100) * amplitude;\n      }\n      \n      const rms = calculateRMS(audioData);\n      // RMS of sine wave should be approximately amplitude / sqrt(2)\n      expect(rms).toBeCloseTo(amplitude / Math.sqrt(2), 2);\n    });\n\n    it('should calculate correct RMS for constant signal', () => {\n      const audioData = new Float32Array(1000);\n      const amplitude = 0.5;\n      audioData.fill(amplitude);\n      \n      const rms = calculateRMS(audioData);\n      expect(rms).toBe(amplitude);\n    });\n  });\n\n  describe('rmsToDecibels', () => {\n    it('should return -Infinity for 0 RMS', () => {\n      expect(rmsToDecibels(0)).toBe(-Infinity);\n    });\n\n    it('should return 0 dB for RMS of 1', () => {\n      expect(rmsToDecibels(1)).toBeCloseTo(0, 5);\n    });\n\n    it('should return negative dB for RMS less than 1', () => {\n      expect(rmsToDecibels(0.5)).toBeCloseTo(-6.02, 1); // -6dB is half amplitude\n      expect(rmsToDecibels(0.1)).toBeCloseTo(-20, 1);\n      expect(rmsToDecibels(0.01)).toBeCloseTo(-40, 1);\n    });\n\n    it('should return positive dB for RMS greater than 1', () => {\n      expect(rmsToDecibels(2)).toBeCloseTo(6.02, 1);\n      expect(rmsToDecibels(10)).toBeCloseTo(20, 1);\n    });\n  });\n\n  describe('decibelsToRMS', () => {\n    it('should return 0 for -Infinity dB', () => {\n      expect(decibelsToRMS(-Infinity)).toBe(0);\n    });\n\n    it('should return 1 for 0 dB', () => {\n      expect(decibelsToRMS(0)).toBeCloseTo(1, 5);\n    });\n\n    it('should convert negative dB correctly', () => {\n      expect(decibelsToRMS(-6)).toBeCloseTo(0.501, 2);\n      expect(decibelsToRMS(-20)).toBeCloseTo(0.1, 2);\n      expect(decibelsToRMS(-40)).toBeCloseTo(0.01, 3);\n    });\n\n    it('should convert positive dB correctly', () => {\n      expect(decibelsToRMS(6)).toBeCloseTo(1.995, 2);\n      expect(decibelsToRMS(20)).toBeCloseTo(10, 1);\n    });\n  });\n\n  describe('RMS and dB conversion round-trip', () => {\n    it('should maintain values through round-trip conversion', () => {\n      const testValues = [0.001, 0.01, 0.1, 0.5, 1, 2, 10];\n      \n      testValues.forEach(originalRMS => {\n        const dB = rmsToDecibels(originalRMS);\n        const convertedRMS = decibelsToRMS(dB);\n        expect(convertedRMS).toBeCloseTo(originalRMS, 5);\n      });\n    });\n  });\n});\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c2f5c18f3a4e5eee3a16f8bbb99c13f94e987290"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_t6ava1fuc = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_t6ava1fuc();
cov_t6ava1fuc().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const audio_utils_1 =
/* istanbul ignore next */
(cov_t6ava1fuc().s[1]++, require("./audio-utils"));
/* istanbul ignore next */
cov_t6ava1fuc().s[2]++;
describe('Audio Utilities', () => {
  /* istanbul ignore next */
  cov_t6ava1fuc().f[0]++;
  const sampleRate =
  /* istanbul ignore next */
  (cov_t6ava1fuc().s[3]++, 16000); // 16kHz sample rate
  /* istanbul ignore next */
  cov_t6ava1fuc().s[4]++;
  describe('trimInitialSilence', () => {
    /* istanbul ignore next */
    cov_t6ava1fuc().f[1]++;
    cov_t6ava1fuc().s[5]++;
    it('should return original audio when array is empty', () => {
      /* istanbul ignore next */
      cov_t6ava1fuc().f[2]++;
      const emptyArray =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[6]++, new Float32Array(0));
      const result =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[7]++, (0, audio_utils_1.trimInitialSilence)(emptyArray, sampleRate));
      /* istanbul ignore next */
      cov_t6ava1fuc().s[8]++;
      expect(result).toEqual(emptyArray);
      /* istanbul ignore next */
      cov_t6ava1fuc().s[9]++;
      expect(result.length).toBe(0);
    });
    /* istanbul ignore next */
    cov_t6ava1fuc().s[10]++;
    it('should return original audio when window size is larger than audio length', () => {
      /* istanbul ignore next */
      cov_t6ava1fuc().f[3]++;
      const shortArray =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[11]++, new Float32Array(100)); // Very short audio
      const result =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[12]++, (0, audio_utils_1.trimInitialSilence)(shortArray, sampleRate));
      /* istanbul ignore next */
      cov_t6ava1fuc().s[13]++;
      expect(result).toEqual(shortArray);
      /* istanbul ignore next */
      cov_t6ava1fuc().s[14]++;
      expect(result.length).toBe(100);
    });
    /* istanbul ignore next */
    cov_t6ava1fuc().s[15]++;
    it('should trim silence from the beginning of audio', () => {
      /* istanbul ignore next */
      cov_t6ava1fuc().f[4]++;
      // Create audio with 0.5 seconds of silence, then non-silence
      const silenceSamples =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[16]++, Math.floor(sampleRate * 0.5)); // 0.5 seconds
      const nonSilenceSamples =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[17]++, Math.floor(sampleRate * 0.5)); // 0.5 seconds
      const totalSamples =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[18]++, silenceSamples + nonSilenceSamples);
      const audioData =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[19]++, new Float32Array(totalSamples));
      // Fill first half with silence (very low amplitude)
      /* istanbul ignore next */
      cov_t6ava1fuc().s[20]++;
      for (let i =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[21]++, 0); i < silenceSamples; i++) {
        /* istanbul ignore next */
        cov_t6ava1fuc().s[22]++;
        audioData[i] = Math.random() * 0.001; // Very quiet noise
      }
      // Fill second half with actual audio (higher amplitude)
      /* istanbul ignore next */
      cov_t6ava1fuc().s[23]++;
      for (let i =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[24]++, silenceSamples); i < totalSamples; i++) {
        /* istanbul ignore next */
        cov_t6ava1fuc().s[25]++;
        audioData[i] = Math.sin(2 * Math.PI * 440 * i / sampleRate) * 0.3; // 440Hz sine wave
      }
      const result =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[26]++, (0, audio_utils_1.trimInitialSilence)(audioData, sampleRate));
      // Should have trimmed most of the silence
      /* istanbul ignore next */
      cov_t6ava1fuc().s[27]++;
      expect(result.length).toBeLessThan(audioData.length);
      /* istanbul ignore next */
      cov_t6ava1fuc().s[28]++;
      expect(result.length).toBeGreaterThan(nonSilenceSamples * 0.9); // Allow some margin
    });
    /* istanbul ignore next */
    cov_t6ava1fuc().s[29]++;
    it('should not trim audio that starts with non-silence', () => {
      /* istanbul ignore next */
      cov_t6ava1fuc().f[5]++;
      const samples =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[30]++, Math.floor(sampleRate * 1)); // 1 second
      const audioData =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[31]++, new Float32Array(samples));
      // Fill with non-silent audio from the start
      /* istanbul ignore next */
      cov_t6ava1fuc().s[32]++;
      for (let i =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[33]++, 0); i < samples; i++) {
        /* istanbul ignore next */
        cov_t6ava1fuc().s[34]++;
        audioData[i] = Math.sin(2 * Math.PI * 440 * i / sampleRate) * 0.3;
      }
      const result =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[35]++, (0, audio_utils_1.trimInitialSilence)(audioData, sampleRate));
      // Should return most of the original audio
      /* istanbul ignore next */
      cov_t6ava1fuc().s[36]++;
      expect(result.length).toBeGreaterThan(samples * 0.95);
    });
    /* istanbul ignore next */
    cov_t6ava1fuc().s[37]++;
    it('should handle all-silence audio', () => {
      /* istanbul ignore next */
      cov_t6ava1fuc().f[6]++;
      const samples =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[38]++, Math.floor(sampleRate * 1)); // 1 second
      const audioData =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[39]++, new Float32Array(samples));
      // Fill with silence
      /* istanbul ignore next */
      cov_t6ava1fuc().s[40]++;
      for (let i =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[41]++, 0); i < samples; i++) {
        /* istanbul ignore next */
        cov_t6ava1fuc().s[42]++;
        audioData[i] = Math.random() * 0.001; // Very quiet noise
      }
      const result =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[43]++, (0, audio_utils_1.trimInitialSilence)(audioData, sampleRate));
      // Should return original or nearly original since it's all silence
      /* istanbul ignore next */
      cov_t6ava1fuc().s[44]++;
      expect(result.length).toBe(samples);
    });
    /* istanbul ignore next */
    cov_t6ava1fuc().s[45]++;
    it('should detect speech after variable silence durations', () => {
      /* istanbul ignore next */
      cov_t6ava1fuc().f[7]++;
      const testCases =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[46]++, [0.1, 0.3, 0.5, 1.0]); // Different silence durations in seconds
      /* istanbul ignore next */
      cov_t6ava1fuc().s[47]++;
      testCases.forEach(silenceDuration => {
        /* istanbul ignore next */
        cov_t6ava1fuc().f[8]++;
        const silenceSamples =
        /* istanbul ignore next */
        (cov_t6ava1fuc().s[48]++, Math.floor(sampleRate * silenceDuration));
        const speechSamples =
        /* istanbul ignore next */
        (cov_t6ava1fuc().s[49]++, Math.floor(sampleRate * 0.5));
        const totalSamples =
        /* istanbul ignore next */
        (cov_t6ava1fuc().s[50]++, silenceSamples + speechSamples);
        const audioData =
        /* istanbul ignore next */
        (cov_t6ava1fuc().s[51]++, new Float32Array(totalSamples));
        // Add silence
        /* istanbul ignore next */
        cov_t6ava1fuc().s[52]++;
        for (let i =
        /* istanbul ignore next */
        (cov_t6ava1fuc().s[53]++, 0); i < silenceSamples; i++) {
          /* istanbul ignore next */
          cov_t6ava1fuc().s[54]++;
          audioData[i] = 0;
        }
        // Add speech
        /* istanbul ignore next */
        cov_t6ava1fuc().s[55]++;
        for (let i =
        /* istanbul ignore next */
        (cov_t6ava1fuc().s[56]++, silenceSamples); i < totalSamples; i++) {
          /* istanbul ignore next */
          cov_t6ava1fuc().s[57]++;
          audioData[i] = Math.sin(2 * Math.PI * 440 * i / sampleRate) * 0.5;
        }
        const result =
        /* istanbul ignore next */
        (cov_t6ava1fuc().s[58]++, (0, audio_utils_1.trimInitialSilence)(audioData, sampleRate));
        // Should have trimmed the silence
        /* istanbul ignore next */
        cov_t6ava1fuc().s[59]++;
        expect(result.length).toBeLessThanOrEqual(speechSamples + sampleRate * 0.2); // Allow window size margin
      });
    });
  });
  /* istanbul ignore next */
  cov_t6ava1fuc().s[60]++;
  describe('trimInitialSilenceFromChunks', () => {
    /* istanbul ignore next */
    cov_t6ava1fuc().f[9]++;
    cov_t6ava1fuc().s[61]++;
    it('should handle empty chunks array', () => {
      /* istanbul ignore next */
      cov_t6ava1fuc().f[10]++;
      const emptyChunks =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[62]++, []);
      const result =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[63]++, (0, audio_utils_1.trimInitialSilenceFromChunks)(emptyChunks, sampleRate));
      /* istanbul ignore next */
      cov_t6ava1fuc().s[64]++;
      expect(result).toEqual(emptyChunks);
      /* istanbul ignore next */
      cov_t6ava1fuc().s[65]++;
      expect(result.length).toBe(0);
    });
    /* istanbul ignore next */
    cov_t6ava1fuc().s[66]++;
    it('should trim silence from multiple chunks', () => {
      /* istanbul ignore next */
      cov_t6ava1fuc().f[11]++;
      const chunkSize =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[67]++, 4096);
      const chunks =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[68]++, []);
      // Create 3 chunks: first is silence, second is partial silence, third is speech
      const silenceChunk =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[69]++, new Float32Array(chunkSize));
      /* istanbul ignore next */
      cov_t6ava1fuc().s[70]++;
      for (let i =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[71]++, 0); i < chunkSize; i++) {
        /* istanbul ignore next */
        cov_t6ava1fuc().s[72]++;
        silenceChunk[i] = Math.random() * 0.001;
      }
      /* istanbul ignore next */
      cov_t6ava1fuc().s[73]++;
      chunks.push(silenceChunk);
      const partialChunk =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[74]++, new Float32Array(chunkSize));
      /* istanbul ignore next */
      cov_t6ava1fuc().s[75]++;
      for (let i =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[76]++, 0); i < chunkSize / 2; i++) {
        /* istanbul ignore next */
        cov_t6ava1fuc().s[77]++;
        partialChunk[i] = Math.random() * 0.001;
      }
      /* istanbul ignore next */
      cov_t6ava1fuc().s[78]++;
      for (let i =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[79]++, chunkSize / 2); i < chunkSize; i++) {
        /* istanbul ignore next */
        cov_t6ava1fuc().s[80]++;
        partialChunk[i] = Math.sin(2 * Math.PI * 440 * i / sampleRate) * 0.3;
      }
      /* istanbul ignore next */
      cov_t6ava1fuc().s[81]++;
      chunks.push(partialChunk);
      const speechChunk =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[82]++, new Float32Array(chunkSize));
      /* istanbul ignore next */
      cov_t6ava1fuc().s[83]++;
      for (let i =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[84]++, 0); i < chunkSize; i++) {
        /* istanbul ignore next */
        cov_t6ava1fuc().s[85]++;
        speechChunk[i] = Math.sin(2 * Math.PI * 440 * i / sampleRate) * 0.3;
      }
      /* istanbul ignore next */
      cov_t6ava1fuc().s[86]++;
      chunks.push(speechChunk);
      const result =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[87]++, (0, audio_utils_1.trimInitialSilenceFromChunks)(chunks, sampleRate));
      // Should have fewer total samples after trimming
      const originalTotal =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[88]++, chunks.reduce((sum, chunk) => {
        /* istanbul ignore next */
        cov_t6ava1fuc().f[12]++;
        cov_t6ava1fuc().s[89]++;
        return sum + chunk.length;
      }, 0));
      const trimmedTotal =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[90]++, result.reduce((sum, chunk) => {
        /* istanbul ignore next */
        cov_t6ava1fuc().f[13]++;
        cov_t6ava1fuc().s[91]++;
        return sum + chunk.length;
      }, 0));
      /* istanbul ignore next */
      cov_t6ava1fuc().s[92]++;
      expect(trimmedTotal).toBeLessThan(originalTotal);
    });
    /* istanbul ignore next */
    cov_t6ava1fuc().s[93]++;
    it('should maintain chunk structure after trimming', () => {
      /* istanbul ignore next */
      cov_t6ava1fuc().f[14]++;
      const chunks =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[94]++, []);
      const chunkSize =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[95]++, 4096);
      // Create chunks with speech from the start
      /* istanbul ignore next */
      cov_t6ava1fuc().s[96]++;
      for (let i =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[97]++, 0); i < 3; i++) {
        const chunk =
        /* istanbul ignore next */
        (cov_t6ava1fuc().s[98]++, new Float32Array(chunkSize));
        /* istanbul ignore next */
        cov_t6ava1fuc().s[99]++;
        for (let j =
        /* istanbul ignore next */
        (cov_t6ava1fuc().s[100]++, 0); j < chunkSize; j++) {
          /* istanbul ignore next */
          cov_t6ava1fuc().s[101]++;
          chunk[j] = Math.sin(2 * Math.PI * 440 * (i * chunkSize + j) / sampleRate) * 0.3;
        }
        /* istanbul ignore next */
        cov_t6ava1fuc().s[102]++;
        chunks.push(chunk);
      }
      const result =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[103]++, (0, audio_utils_1.trimInitialSilenceFromChunks)(chunks, sampleRate));
      // Should return chunks (may be re-chunked)
      /* istanbul ignore next */
      cov_t6ava1fuc().s[104]++;
      expect(result.length).toBeGreaterThan(0);
      /* istanbul ignore next */
      cov_t6ava1fuc().s[105]++;
      result.forEach(chunk => {
        /* istanbul ignore next */
        cov_t6ava1fuc().f[15]++;
        cov_t6ava1fuc().s[106]++;
        expect(chunk).toBeInstanceOf(Float32Array);
        /* istanbul ignore next */
        cov_t6ava1fuc().s[107]++;
        expect(chunk.length).toBeGreaterThan(0);
      });
    });
  });
  /* istanbul ignore next */
  cov_t6ava1fuc().s[108]++;
  describe('calculateRMS', () => {
    /* istanbul ignore next */
    cov_t6ava1fuc().f[16]++;
    cov_t6ava1fuc().s[109]++;
    it('should return 0 for empty array', () => {
      /* istanbul ignore next */
      cov_t6ava1fuc().f[17]++;
      const emptyArray =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[110]++, new Float32Array(0));
      /* istanbul ignore next */
      cov_t6ava1fuc().s[111]++;
      expect((0, audio_utils_1.calculateRMS)(emptyArray)).toBe(0);
    });
    /* istanbul ignore next */
    cov_t6ava1fuc().s[112]++;
    it('should return 0 for silent audio', () => {
      /* istanbul ignore next */
      cov_t6ava1fuc().f[18]++;
      const silentAudio =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[113]++, new Float32Array(1000));
      /* istanbul ignore next */
      cov_t6ava1fuc().s[114]++;
      expect((0, audio_utils_1.calculateRMS)(silentAudio)).toBe(0);
    });
    /* istanbul ignore next */
    cov_t6ava1fuc().s[115]++;
    it('should calculate correct RMS for sine wave', () => {
      /* istanbul ignore next */
      cov_t6ava1fuc().f[19]++;
      const samples =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[116]++, 1000);
      const audioData =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[117]++, new Float32Array(samples));
      const amplitude =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[118]++, 0.5);
      /* istanbul ignore next */
      cov_t6ava1fuc().s[119]++;
      for (let i =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[120]++, 0); i < samples; i++) {
        /* istanbul ignore next */
        cov_t6ava1fuc().s[121]++;
        audioData[i] = Math.sin(2 * Math.PI * i / 100) * amplitude;
      }
      const rms =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[122]++, (0, audio_utils_1.calculateRMS)(audioData));
      // RMS of sine wave should be approximately amplitude / sqrt(2)
      /* istanbul ignore next */
      cov_t6ava1fuc().s[123]++;
      expect(rms).toBeCloseTo(amplitude / Math.sqrt(2), 2);
    });
    /* istanbul ignore next */
    cov_t6ava1fuc().s[124]++;
    it('should calculate correct RMS for constant signal', () => {
      /* istanbul ignore next */
      cov_t6ava1fuc().f[20]++;
      const audioData =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[125]++, new Float32Array(1000));
      const amplitude =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[126]++, 0.5);
      /* istanbul ignore next */
      cov_t6ava1fuc().s[127]++;
      audioData.fill(amplitude);
      const rms =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[128]++, (0, audio_utils_1.calculateRMS)(audioData));
      /* istanbul ignore next */
      cov_t6ava1fuc().s[129]++;
      expect(rms).toBe(amplitude);
    });
  });
  /* istanbul ignore next */
  cov_t6ava1fuc().s[130]++;
  describe('rmsToDecibels', () => {
    /* istanbul ignore next */
    cov_t6ava1fuc().f[21]++;
    cov_t6ava1fuc().s[131]++;
    it('should return -Infinity for 0 RMS', () => {
      /* istanbul ignore next */
      cov_t6ava1fuc().f[22]++;
      cov_t6ava1fuc().s[132]++;
      expect((0, audio_utils_1.rmsToDecibels)(0)).toBe(-Infinity);
    });
    /* istanbul ignore next */
    cov_t6ava1fuc().s[133]++;
    it('should return 0 dB for RMS of 1', () => {
      /* istanbul ignore next */
      cov_t6ava1fuc().f[23]++;
      cov_t6ava1fuc().s[134]++;
      expect((0, audio_utils_1.rmsToDecibels)(1)).toBeCloseTo(0, 5);
    });
    /* istanbul ignore next */
    cov_t6ava1fuc().s[135]++;
    it('should return negative dB for RMS less than 1', () => {
      /* istanbul ignore next */
      cov_t6ava1fuc().f[24]++;
      cov_t6ava1fuc().s[136]++;
      expect((0, audio_utils_1.rmsToDecibels)(0.5)).toBeCloseTo(-6.02, 1); // -6dB is half amplitude
      /* istanbul ignore next */
      cov_t6ava1fuc().s[137]++;
      expect((0, audio_utils_1.rmsToDecibels)(0.1)).toBeCloseTo(-20, 1);
      /* istanbul ignore next */
      cov_t6ava1fuc().s[138]++;
      expect((0, audio_utils_1.rmsToDecibels)(0.01)).toBeCloseTo(-40, 1);
    });
    /* istanbul ignore next */
    cov_t6ava1fuc().s[139]++;
    it('should return positive dB for RMS greater than 1', () => {
      /* istanbul ignore next */
      cov_t6ava1fuc().f[25]++;
      cov_t6ava1fuc().s[140]++;
      expect((0, audio_utils_1.rmsToDecibels)(2)).toBeCloseTo(6.02, 1);
      /* istanbul ignore next */
      cov_t6ava1fuc().s[141]++;
      expect((0, audio_utils_1.rmsToDecibels)(10)).toBeCloseTo(20, 1);
    });
  });
  /* istanbul ignore next */
  cov_t6ava1fuc().s[142]++;
  describe('decibelsToRMS', () => {
    /* istanbul ignore next */
    cov_t6ava1fuc().f[26]++;
    cov_t6ava1fuc().s[143]++;
    it('should return 0 for -Infinity dB', () => {
      /* istanbul ignore next */
      cov_t6ava1fuc().f[27]++;
      cov_t6ava1fuc().s[144]++;
      expect((0, audio_utils_1.decibelsToRMS)(-Infinity)).toBe(0);
    });
    /* istanbul ignore next */
    cov_t6ava1fuc().s[145]++;
    it('should return 1 for 0 dB', () => {
      /* istanbul ignore next */
      cov_t6ava1fuc().f[28]++;
      cov_t6ava1fuc().s[146]++;
      expect((0, audio_utils_1.decibelsToRMS)(0)).toBeCloseTo(1, 5);
    });
    /* istanbul ignore next */
    cov_t6ava1fuc().s[147]++;
    it('should convert negative dB correctly', () => {
      /* istanbul ignore next */
      cov_t6ava1fuc().f[29]++;
      cov_t6ava1fuc().s[148]++;
      expect((0, audio_utils_1.decibelsToRMS)(-6)).toBeCloseTo(0.501, 2);
      /* istanbul ignore next */
      cov_t6ava1fuc().s[149]++;
      expect((0, audio_utils_1.decibelsToRMS)(-20)).toBeCloseTo(0.1, 2);
      /* istanbul ignore next */
      cov_t6ava1fuc().s[150]++;
      expect((0, audio_utils_1.decibelsToRMS)(-40)).toBeCloseTo(0.01, 3);
    });
    /* istanbul ignore next */
    cov_t6ava1fuc().s[151]++;
    it('should convert positive dB correctly', () => {
      /* istanbul ignore next */
      cov_t6ava1fuc().f[30]++;
      cov_t6ava1fuc().s[152]++;
      expect((0, audio_utils_1.decibelsToRMS)(6)).toBeCloseTo(1.995, 2);
      /* istanbul ignore next */
      cov_t6ava1fuc().s[153]++;
      expect((0, audio_utils_1.decibelsToRMS)(20)).toBeCloseTo(10, 1);
    });
  });
  /* istanbul ignore next */
  cov_t6ava1fuc().s[154]++;
  describe('RMS and dB conversion round-trip', () => {
    /* istanbul ignore next */
    cov_t6ava1fuc().f[31]++;
    cov_t6ava1fuc().s[155]++;
    it('should maintain values through round-trip conversion', () => {
      /* istanbul ignore next */
      cov_t6ava1fuc().f[32]++;
      const testValues =
      /* istanbul ignore next */
      (cov_t6ava1fuc().s[156]++, [0.001, 0.01, 0.1, 0.5, 1, 2, 10]);
      /* istanbul ignore next */
      cov_t6ava1fuc().s[157]++;
      testValues.forEach(originalRMS => {
        /* istanbul ignore next */
        cov_t6ava1fuc().f[33]++;
        const dB =
        /* istanbul ignore next */
        (cov_t6ava1fuc().s[158]++, (0, audio_utils_1.rmsToDecibels)(originalRMS));
        const convertedRMS =
        /* istanbul ignore next */
        (cov_t6ava1fuc().s[159]++, (0, audio_utils_1.decibelsToRMS)(dB));
        /* istanbul ignore next */
        cov_t6ava1fuc().s[160]++;
        expect(convertedRMS).toBeCloseTo(originalRMS, 5);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,