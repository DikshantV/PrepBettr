{"version":3,"names":["cov_1d0al2qbns","actualCoverage","default","appInsights","s","require","AutoApplyMetrics","constructor","f","initialized","telemetryClient","initializeTelemetry","defaultClient","b","console","log","warn","error","trackApplicationAttempt","params","applicationId","userId","jobId","portal","success","duration","attempts","errorMessage","method","trackMetric","toString","trackEvent","trackBrowserMetrics","activeBrowsers","maxBrowsers","memoryUsage","cpuUsage","queueLength","browserLaunchTime","undefined","trackScreeningMetrics","questionsAnswered","correctAnswers","aiConfidence","accuracy","trackTheirStackMetrics","creditsUsed","searchResults","responseTime","statusCode","costInUSD","trackVolumeMetrics","dailyApplications","dailyLimit","monthlyApplications","monthlyLimit","userTier","dailyUsagePercentage","trackPortalMetrics","applicationAttempts","successfulApplications","averageTime","commonErrors","successRate","successes","name","value","properties","measurements","timestamp","Date","toISOString","environment","process","env","NODE_ENV","trackException","exception","source","message","trackingError","getHealthStatus","module","exports"],"sources":["auto-apply-metrics.js"],"sourcesContent":["const { default: appInsights } = require('applicationinsights');\n\n/**\n * Shared telemetry utilities for Auto-Apply metrics\n * Provides standardized metric names and dimensions for monitoring\n */\nclass AutoApplyMetrics {\n    constructor() {\n        this.initialized = false;\n        this.telemetryClient = null;\n        this.initializeTelemetry();\n    }\n\n    initializeTelemetry() {\n        try {\n            if (appInsights.defaultClient) {\n                this.telemetryClient = appInsights.defaultClient;\n                this.initialized = true;\n                console.log('✅ Auto-Apply metrics telemetry client initialized');\n            } else {\n                console.warn('⚠️ Application Insights not available for Auto-Apply metrics');\n            }\n        } catch (error) {\n            console.error('❌ Failed to initialize Auto-Apply telemetry:', error);\n        }\n    }\n\n    /**\n     * Track application attempt result\n     * @param {Object} params - Application metrics parameters\n     */\n    trackApplicationAttempt(params) {\n        const {\n            applicationId,\n            userId,\n            jobId,\n            portal,\n            success,\n            duration,\n            attempts,\n            errorMessage,\n            method = 'headless_browser'\n        } = params;\n\n        // Track success/failure metric\n        this.trackMetric('AutoApply.Application.Success', success ? 1 : 0, {\n            applicationId,\n            userId,\n            jobId,\n            portal,\n            method,\n            attempts: attempts?.toString(),\n            errorMessage: errorMessage || 'none'\n        });\n\n        // Track duration\n        if (duration) {\n            this.trackMetric('AutoApply.Application.DurationMs', duration, {\n                applicationId,\n                portal,\n                success: success.toString(),\n                method\n            });\n        }\n\n        // Track custom event with detailed context\n        this.trackEvent(success ? 'AutoApply.Application.Success' : 'AutoApply.Application.Failed', {\n            applicationId,\n            userId,\n            jobId,\n            portal,\n            method,\n            attempts: attempts?.toString(),\n            duration: duration?.toString(),\n            errorMessage: errorMessage || 'none'\n        }, {\n            duration,\n            attempts: attempts || 1,\n            success: success ? 1 : 0\n        });\n    }\n\n    /**\n     * Track browser resource usage\n     * @param {Object} params - Browser metrics parameters\n     */\n    trackBrowserMetrics(params) {\n        const {\n            applicationId,\n            activeBrowsers,\n            maxBrowsers,\n            memoryUsage,\n            cpuUsage,\n            queueLength,\n            browserLaunchTime\n        } = params;\n\n        if (activeBrowsers !== undefined) {\n            this.trackMetric('AutoApply.Browser.ActiveCount', activeBrowsers, {\n                applicationId,\n                maxBrowsers: maxBrowsers?.toString()\n            });\n        }\n\n        if (memoryUsage) {\n            this.trackMetric('AutoApply.Browser.MemoryMb', memoryUsage, {\n                applicationId\n            });\n        }\n\n        if (cpuUsage) {\n            this.trackMetric('AutoApply.Browser.CPU', cpuUsage, {\n                applicationId\n            });\n        }\n\n        if (queueLength !== undefined) {\n            this.trackMetric('AutoApply.Queue.Length', queueLength, {\n                applicationId\n            });\n        }\n\n        if (browserLaunchTime) {\n            this.trackMetric('AutoApply.Browser.LaunchTimeMs', browserLaunchTime, {\n                applicationId\n            });\n        }\n    }\n\n    /**\n     * Track screening question accuracy\n     * @param {Object} params - Screening metrics parameters\n     */\n    trackScreeningMetrics(params) {\n        const {\n            applicationId,\n            questionsAnswered,\n            correctAnswers,\n            aiConfidence,\n            portal\n        } = params;\n\n        if (questionsAnswered && correctAnswers !== undefined) {\n            const accuracy = (correctAnswers / questionsAnswered) * 100;\n            this.trackMetric('AutoApply.Screening.Accuracy', accuracy, {\n                applicationId,\n                portal,\n                questionsAnswered: questionsAnswered.toString(),\n                correctAnswers: correctAnswers.toString()\n            });\n        }\n\n        if (aiConfidence) {\n            this.trackMetric('AutoApply.Screening.AIConfidence', aiConfidence, {\n                applicationId,\n                portal\n            });\n        }\n\n        this.trackEvent('AutoApply.Screening.Completed', {\n            applicationId,\n            portal,\n            questionsAnswered: questionsAnswered?.toString(),\n            correctAnswers: correctAnswers?.toString(),\n            aiConfidence: aiConfidence?.toString()\n        }, {\n            questionsAnswered: questionsAnswered || 0,\n            correctAnswers: correctAnswers || 0,\n            aiConfidence: aiConfidence || 0\n        });\n    }\n\n    /**\n     * Track TheirStack API usage and costs\n     * @param {Object} params - TheirStack metrics parameters\n     */\n    trackTheirStackMetrics(params) {\n        const {\n            userId,\n            creditsUsed,\n            searchResults,\n            responseTime,\n            success,\n            statusCode,\n            costInUSD\n        } = params;\n\n        if (creditsUsed) {\n            this.trackMetric('AutoApply.TheirStack.CreditsUsed', creditsUsed, {\n                userId,\n                success: success?.toString(),\n                statusCode: statusCode?.toString()\n            });\n        }\n\n        if (costInUSD) {\n            this.trackMetric('AutoApply.TheirStack.CostUSD', costInUSD, {\n                userId,\n                creditsUsed: creditsUsed?.toString()\n            });\n        }\n\n        if (responseTime) {\n            this.trackMetric('AutoApply.TheirStack.ResponseTimeMs', responseTime, {\n                userId,\n                success: success?.toString()\n            });\n        }\n\n        if (searchResults !== undefined) {\n            this.trackMetric('AutoApply.TheirStack.ResultsCount', searchResults, {\n                userId,\n                creditsUsed: creditsUsed?.toString()\n            });\n        }\n    }\n\n    /**\n     * Track daily application volume and limits\n     * @param {Object} params - Volume metrics parameters\n     */\n    trackVolumeMetrics(params) {\n        const {\n            userId,\n            dailyApplications,\n            dailyLimit,\n            monthlyApplications,\n            monthlyLimit,\n            userTier\n        } = params;\n\n        if (dailyApplications !== undefined) {\n            this.trackMetric('AutoApply.Volume.DailyApplications', dailyApplications, {\n                userId,\n                userTier,\n                dailyLimit: dailyLimit?.toString()\n            });\n        }\n\n        if (monthlyApplications !== undefined) {\n            this.trackMetric('AutoApply.Volume.MonthlyApplications', monthlyApplications, {\n                userId,\n                userTier,\n                monthlyLimit: monthlyLimit?.toString()\n            });\n        }\n\n        // Track usage percentage\n        if (dailyApplications && dailyLimit) {\n            const dailyUsagePercentage = (dailyApplications / dailyLimit) * 100;\n            this.trackMetric('AutoApply.Volume.DailyUsagePercent', dailyUsagePercentage, {\n                userId,\n                userTier\n            });\n        }\n    }\n\n    /**\n     * Track portal-specific success rates\n     * @param {Object} params - Portal metrics parameters\n     */\n    trackPortalMetrics(params) {\n        const {\n            portal,\n            applicationAttempts,\n            successfulApplications,\n            averageTime,\n            commonErrors\n        } = params;\n\n        if (applicationAttempts && successfulApplications !== undefined) {\n            const successRate = (successfulApplications / applicationAttempts) * 100;\n            this.trackMetric('AutoApply.Portal.SuccessRate', successRate, {\n                portal,\n                attempts: applicationAttempts.toString(),\n                successes: successfulApplications.toString()\n            });\n        }\n\n        if (averageTime) {\n            this.trackMetric('AutoApply.Portal.AverageTimeMs', averageTime, {\n                portal\n            });\n        }\n\n        this.trackEvent('AutoApply.Portal.Summary', {\n            portal,\n            applicationAttempts: applicationAttempts?.toString(),\n            successfulApplications: successfulApplications?.toString(),\n            averageTime: averageTime?.toString(),\n            commonErrors: commonErrors || 'none'\n        }, {\n            applicationAttempts: applicationAttempts || 0,\n            successfulApplications: successfulApplications || 0,\n            averageTime: averageTime || 0\n        });\n    }\n\n    /**\n     * Generic metric tracking with proper error handling\n     */\n    trackMetric(name, value, properties = {}, measurements = {}) {\n        if (!this.initialized || !this.telemetryClient) {\n            console.warn(`⚠️ Cannot track metric ${name}: telemetry not initialized`);\n            return;\n        }\n\n        try {\n            this.telemetryClient.trackMetric({\n                name,\n                value,\n                properties: {\n                    ...properties,\n                    timestamp: new Date().toISOString(),\n                    environment: process.env.NODE_ENV || 'development'\n                },\n                measurements\n            });\n\n            console.log(`📊 Tracked metric: ${name} = ${value}`, properties);\n        } catch (error) {\n            console.error(`❌ Error tracking metric ${name}:`, error);\n        }\n    }\n\n    /**\n     * Generic event tracking with proper error handling\n     */\n    trackEvent(name, properties = {}, measurements = {}) {\n        if (!this.initialized || !this.telemetryClient) {\n            console.warn(`⚠️ Cannot track event ${name}: telemetry not initialized`);\n            return;\n        }\n\n        try {\n            this.telemetryClient.trackEvent({\n                name,\n                properties: {\n                    ...properties,\n                    timestamp: new Date().toISOString(),\n                    environment: process.env.NODE_ENV || 'development'\n                },\n                measurements\n            });\n\n            console.log(`📝 Tracked event: ${name}`, properties);\n        } catch (error) {\n            console.error(`❌ Error tracking event ${name}:`, error);\n        }\n    }\n\n    /**\n     * Track exception with context\n     */\n    trackException(error, properties = {}) {\n        if (!this.initialized || !this.telemetryClient) {\n            console.warn(`⚠️ Cannot track exception: telemetry not initialized`);\n            return;\n        }\n\n        try {\n            this.telemetryClient.trackException({\n                exception: error,\n                properties: {\n                    ...properties,\n                    timestamp: new Date().toISOString(),\n                    environment: process.env.NODE_ENV || 'development',\n                    source: 'auto-apply'\n                }\n            });\n\n            console.log(`❌ Tracked exception: ${error.message}`, properties);\n        } catch (trackingError) {\n            console.error(`❌ Error tracking exception:`, trackingError);\n        }\n    }\n\n    /**\n     * Get health status of the metrics system\n     */\n    getHealthStatus() {\n        return {\n            initialized: this.initialized,\n            telemetryClient: !!this.telemetryClient,\n            timestamp: new Date().toISOString()\n        };\n    }\n}\n\n// Export singleton instance\nmodule.exports = new AutoApplyMetrics();\n"],"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","ignoreList":[]}