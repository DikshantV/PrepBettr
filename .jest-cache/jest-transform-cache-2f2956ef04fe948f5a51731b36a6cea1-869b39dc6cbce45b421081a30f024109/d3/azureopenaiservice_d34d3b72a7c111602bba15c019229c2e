f5c051c1820df25f54273beecb8df063
"use strict";

/* istanbul ignore next */
function cov_28i4c9m45v() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/services/azure-openai-service.ts";
  var hash = "d57ec872d4e1bd06ff55f55c56665cf94e716bf5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/services/azure-openai-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 65
        }
      },
      "2": {
        start: {
          line: 4,
          column: 28
        },
        end: {
          line: 4,
          column: 87
        }
      },
      "3": {
        start: {
          line: 6,
          column: 17
        },
        end: {
          line: 6,
          column: 46
        }
      },
      "4": {
        start: {
          line: 8,
          column: 24
        },
        end: {
          line: 8,
          column: 28
        }
      },
      "5": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 12,
          column: 1
        }
      },
      "6": {
        start: {
          line: 10,
          column: 24
        },
        end: {
          line: 10,
          column: 53
        }
      },
      "7": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 54
        }
      },
      "8": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 27
        }
      },
      "9": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 35
        }
      },
      "10": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 29
        }
      },
      "11": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 38
        }
      },
      "12": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 24,
          column: 10
        }
      },
      "13": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "14": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 31,
          column: 93
        }
      },
      "15": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 25
        }
      },
      "16": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "17": {
        start: {
          line: 35,
          column: 28
        },
        end: {
          line: 35,
          column: 53
        }
      },
      "18": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 39,
          column: 13
        }
      },
      "19": {
        start: {
          line: 37,
          column: 16
        },
        end: {
          line: 37,
          column: 74
        }
      },
      "20": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 38,
          column: 29
        }
      },
      "21": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 60
        }
      },
      "22": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 74
        }
      },
      "23": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 37
        }
      },
      "24": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 90,
          column: 13
        }
      },
      "25": {
        start: {
          line: 45,
          column: 16
        },
        end: {
          line: 45,
          column: 102
        }
      },
      "26": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 50,
          column: 19
        }
      },
      "27": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 51,
          column: 42
        }
      },
      "28": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 52,
          column: 90
        }
      },
      "29": {
        start: {
          line: 53,
          column: 16
        },
        end: {
          line: 53,
          column: 28
        }
      },
      "30": {
        start: {
          line: 56,
          column: 16
        },
        end: {
          line: 56,
          column: 91
        }
      },
      "31": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 61,
          column: 19
        }
      },
      "32": {
        start: {
          line: 62,
          column: 16
        },
        end: {
          line: 88,
          column: 17
        }
      },
      "33": {
        start: {
          line: 63,
          column: 20
        },
        end: {
          line: 63,
          column: 68
        }
      },
      "34": {
        start: {
          line: 64,
          column: 20
        },
        end: {
          line: 64,
          column: 83
        }
      },
      "35": {
        start: {
          line: 65,
          column: 20
        },
        end: {
          line: 65,
          column: 95
        }
      },
      "36": {
        start: {
          line: 67,
          column: 21
        },
        end: {
          line: 88,
          column: 17
        }
      },
      "37": {
        start: {
          line: 68,
          column: 20
        },
        end: {
          line: 68,
          column: 66
        }
      },
      "38": {
        start: {
          line: 69,
          column: 20
        },
        end: {
          line: 69,
          column: 98
        }
      },
      "39": {
        start: {
          line: 70,
          column: 20
        },
        end: {
          line: 70,
          column: 79
        }
      },
      "40": {
        start: {
          line: 71,
          column: 20
        },
        end: {
          line: 71,
          column: 99
        }
      },
      "41": {
        start: {
          line: 72,
          column: 20
        },
        end: {
          line: 72,
          column: 53
        }
      },
      "42": {
        start: {
          line: 73,
          column: 20
        },
        end: {
          line: 73,
          column: 69
        }
      },
      "43": {
        start: {
          line: 74,
          column: 20
        },
        end: {
          line: 74,
          column: 82
        }
      },
      "44": {
        start: {
          line: 75,
          column: 20
        },
        end: {
          line: 75,
          column: 98
        }
      },
      "45": {
        start: {
          line: 76,
          column: 20
        },
        end: {
          line: 76,
          column: 91
        }
      },
      "46": {
        start: {
          line: 77,
          column: 20
        },
        end: {
          line: 77,
          column: 98
        }
      },
      "47": {
        start: {
          line: 79,
          column: 21
        },
        end: {
          line: 88,
          column: 17
        }
      },
      "48": {
        start: {
          line: 80,
          column: 20
        },
        end: {
          line: 80,
          column: 64
        }
      },
      "49": {
        start: {
          line: 81,
          column: 20
        },
        end: {
          line: 81,
          column: 92
        }
      },
      "50": {
        start: {
          line: 82,
          column: 20
        },
        end: {
          line: 82,
          column: 102
        }
      },
      "51": {
        start: {
          line: 85,
          column: 20
        },
        end: {
          line: 85,
          column: 92
        }
      },
      "52": {
        start: {
          line: 86,
          column: 20
        },
        end: {
          line: 86,
          column: 89
        }
      },
      "53": {
        start: {
          line: 87,
          column: 20
        },
        end: {
          line: 87,
          column: 87
        }
      },
      "54": {
        start: {
          line: 89,
          column: 16
        },
        end: {
          line: 89,
          column: 29
        }
      },
      "55": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 81
        }
      },
      "56": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 25
        }
      },
      "57": {
        start: {
          line: 102,
          column: 30
        },
        end: {
          line: 102,
          column: 70
        }
      },
      "58": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 106,
          column: 526
        }
      },
      "59": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 108,
          column: 76
        }
      },
      "60": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 118,
          column: 11
        }
      },
      "61": {
        start: {
          line: 124,
          column: 56
        },
        end: {
          line: 124,
          column: 77
        }
      },
      "62": {
        start: {
          line: 125,
          column: 25
        },
        end: {
          line: 136,
          column: 1
        }
      },
      "63": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 139,
          column: 9
        }
      },
      "64": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 59
        }
      },
      "65": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "66": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 58
        }
      },
      "67": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 145,
          column: 9
        }
      },
      "68": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 62
        }
      },
      "69": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 172,
          column: 9
        }
      },
      "70": {
        start: {
          line: 148,
          column: 16
        },
        end: {
          line: 154,
          column: 58
        }
      },
      "71": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 155,
          column: 22
        }
      },
      "72": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 163,
          column: 70
        }
      },
      "73": {
        start: {
          line: 164,
          column: 16
        },
        end: {
          line: 164,
          column: 22
        }
      },
      "74": {
        start: {
          line: 166,
          column: 16
        },
        end: {
          line: 171,
          column: 56
        }
      },
      "75": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 177,
          column: 69
        }
      },
      "76": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 178,
          column: 26
        }
      },
      "77": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 190,
          column: 11
        }
      },
      "78": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 193,
          column: 9
        }
      },
      "79": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 68
        }
      },
      "80": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 197,
          column: 10
        }
      },
      "81": {
        start: {
          line: 198,
          column: 31
        },
        end: {
          line: 198,
          column: 55
        }
      },
      "82": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 204,
          column: 11
        }
      },
      "83": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 205,
          column: 86
        }
      },
      "84": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 210,
          column: 10
        }
      },
      "85": {
        start: {
          line: 217,
          column: 57
        },
        end: {
          line: 217,
          column: 78
        }
      },
      "86": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 224,
          column: 11
        }
      },
      "87": {
        start: {
          line: 226,
          column: 23
        },
        end: {
          line: 226,
          column: 68
        }
      },
      "88": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 229,
          column: 9
        }
      },
      "89": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 73
        }
      },
      "90": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 238,
          column: 9
        }
      },
      "91": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 235
        }
      },
      "92": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 68
        }
      },
      "93": {
        start: {
          line: 244,
          column: 56
        },
        end: {
          line: 244,
          column: 77
        }
      },
      "94": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 270,
          column: 9
        }
      },
      "95": {
        start: {
          line: 247,
          column: 16
        },
        end: {
          line: 255,
          column: 17
        }
      },
      "96": {
        start: {
          line: 248,
          column: 20
        },
        end: {
          line: 248,
          column: 178
        }
      },
      "97": {
        start: {
          line: 250,
          column: 21
        },
        end: {
          line: 255,
          column: 17
        }
      },
      "98": {
        start: {
          line: 251,
          column: 20
        },
        end: {
          line: 251,
          column: 188
        }
      },
      "99": {
        start: {
          line: 254,
          column: 20
        },
        end: {
          line: 254,
          column: 143
        }
      },
      "100": {
        start: {
          line: 257,
          column: 16
        },
        end: {
          line: 262,
          column: 17
        }
      },
      "101": {
        start: {
          line: 258,
          column: 20
        },
        end: {
          line: 258,
          column: 160
        }
      },
      "102": {
        start: {
          line: 261,
          column: 20
        },
        end: {
          line: 261,
          column: 172
        }
      },
      "103": {
        start: {
          line: 264,
          column: 16
        },
        end: {
          line: 269,
          column: 17
        }
      },
      "104": {
        start: {
          line: 265,
          column: 20
        },
        end: {
          line: 265,
          column: 136
        }
      },
      "105": {
        start: {
          line: 268,
          column: 20
        },
        end: {
          line: 268,
          column: 138
        }
      },
      "106": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 285,
          column: 11
        }
      },
      "107": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 288,
          column: 9
        }
      },
      "108": {
        start: {
          line: 287,
          column: 12
        },
        end: {
          line: 287,
          column: 68
        }
      },
      "109": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 323,
          column: 9
        }
      },
      "110": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 294,
          column: 15
        }
      },
      "111": {
        start: {
          line: 296,
          column: 45
        },
        end: {
          line: 296,
          column: 87
        }
      },
      "112": {
        start: {
          line: 297,
          column: 12
        },
        end: {
          line: 297,
          column: 62
        }
      },
      "113": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 302,
          column: 15
        }
      },
      "114": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 304,
          column: 59
        }
      },
      "115": {
        start: {
          line: 306,
          column: 34
        },
        end: {
          line: 306,
          column: 71
        }
      },
      "116": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 307,
          column: 89
        }
      },
      "117": {
        start: {
          line: 309,
          column: 42
        },
        end: {
          line: 309,
          column: 84
        }
      },
      "118": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 310,
          column: 59
        }
      },
      "119": {
        start: {
          line: 311,
          column: 12
        },
        end: {
          line: 316,
          column: 15
        }
      },
      "120": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 322,
          column: 14
        }
      },
      "121": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 325,
          column: 79
        }
      },
      "122": {
        start: {
          line: 326,
          column: 8
        },
        end: {
          line: 329,
          column: 11
        }
      },
      "123": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 391,
          column: 9
        }
      },
      "124": {
        start: {
          line: 331,
          column: 31
        },
        end: {
          line: 341,
          column: 14
        }
      },
      "125": {
        start: {
          line: 332,
          column: 16
        },
        end: {
          line: 340,
          column: 19
        }
      },
      "126": {
        start: {
          line: 342,
          column: 38
        },
        end: {
          line: 342,
          column: 240
        }
      },
      "127": {
        start: {
          line: 343,
          column: 12
        },
        end: {
          line: 347,
          column: 15
        }
      },
      "128": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 349,
          column: 93
        }
      },
      "129": {
        start: {
          line: 350,
          column: 42
        },
        end: {
          line: 350,
          column: 89
        }
      },
      "130": {
        start: {
          line: 351,
          column: 41
        },
        end: {
          line: 351,
          column: 66
        }
      },
      "131": {
        start: {
          line: 352,
          column: 33
        },
        end: {
          line: 352,
          column: 73
        }
      },
      "132": {
        start: {
          line: 353,
          column: 12
        },
        end: {
          line: 359,
          column: 15
        }
      },
      "133": {
        start: {
          line: 360,
          column: 12
        },
        end: {
          line: 365,
          column: 15
        }
      },
      "134": {
        start: {
          line: 367,
          column: 12
        },
        end: {
          line: 367,
          column: 78
        }
      },
      "135": {
        start: {
          line: 368,
          column: 12
        },
        end: {
          line: 373,
          column: 14
        }
      },
      "136": {
        start: {
          line: 376,
          column: 12
        },
        end: {
          line: 376,
          column: 72
        }
      },
      "137": {
        start: {
          line: 378,
          column: 12
        },
        end: {
          line: 389,
          column: 13
        }
      },
      "138": {
        start: {
          line: 379,
          column: 41
        },
        end: {
          line: 379,
          column: 79
        }
      },
      "139": {
        start: {
          line: 380,
          column: 16
        },
        end: {
          line: 380,
          column: 96
        }
      },
      "140": {
        start: {
          line: 381,
          column: 45
        },
        end: {
          line: 381,
          column: 98
        }
      },
      "141": {
        start: {
          line: 382,
          column: 16
        },
        end: {
          line: 382,
          column: 82
        }
      },
      "142": {
        start: {
          line: 383,
          column: 16
        },
        end: {
          line: 388,
          column: 18
        }
      },
      "143": {
        start: {
          line: 390,
          column: 12
        },
        end: {
          line: 390,
          column: 59
        }
      },
      "144": {
        start: {
          line: 399,
          column: 8
        },
        end: {
          line: 419,
          column: 9
        }
      },
      "145": {
        start: {
          line: 399,
          column: 27
        },
        end: {
          line: 399,
          column: 28
        }
      },
      "146": {
        start: {
          line: 400,
          column: 12
        },
        end: {
          line: 418,
          column: 13
        }
      },
      "147": {
        start: {
          line: 401,
          column: 16
        },
        end: {
          line: 401,
          column: 41
        }
      },
      "148": {
        start: {
          line: 404,
          column: 16
        },
        end: {
          line: 404,
          column: 34
        }
      },
      "149": {
        start: {
          line: 406,
          column: 16
        },
        end: {
          line: 408,
          column: 17
        }
      },
      "150": {
        start: {
          line: 407,
          column: 20
        },
        end: {
          line: 407,
          column: 32
        }
      },
      "151": {
        start: {
          line: 409,
          column: 16
        },
        end: {
          line: 411,
          column: 17
        }
      },
      "152": {
        start: {
          line: 410,
          column: 20
        },
        end: {
          line: 410,
          column: 32
        }
      },
      "153": {
        start: {
          line: 413,
          column: 30
        },
        end: {
          line: 415,
          column: 54
        }
      },
      "154": {
        start: {
          line: 416,
          column: 16
        },
        end: {
          line: 416,
          column: 99
        }
      },
      "155": {
        start: {
          line: 417,
          column: 16
        },
        end: {
          line: 417,
          column: 73
        }
      },
      "156": {
        start: {
          line: 417,
          column: 45
        },
        end: {
          line: 417,
          column: 71
        }
      },
      "157": {
        start: {
          line: 420,
          column: 8
        },
        end: {
          line: 420,
          column: 24
        }
      },
      "158": {
        start: {
          line: 426,
          column: 25
        },
        end: {
          line: 426,
          column: 46
        }
      },
      "159": {
        start: {
          line: 427,
          column: 34
        },
        end: {
          line: 443,
          column: 9
        }
      },
      "160": {
        start: {
          line: 444,
          column: 26
        },
        end: {
          line: 444,
          column: 78
        }
      },
      "161": {
        start: {
          line: 445,
          column: 8
        },
        end: {
          line: 445,
          column: 71
        }
      },
      "162": {
        start: {
          line: 451,
          column: 25
        },
        end: {
          line: 451,
          column: 46
        }
      },
      "163": {
        start: {
          line: 452,
          column: 8
        },
        end: {
          line: 471,
          column: 9
        }
      },
      "164": {
        start: {
          line: 454,
          column: 16
        },
        end: {
          line: 458,
          column: 18
        }
      },
      "165": {
        start: {
          line: 460,
          column: 16
        },
        end: {
          line: 464,
          column: 18
        }
      },
      "166": {
        start: {
          line: 466,
          column: 16
        },
        end: {
          line: 470,
          column: 18
        }
      },
      "167": {
        start: {
          line: 478,
          column: 8
        },
        end: {
          line: 480,
          column: 9
        }
      },
      "168": {
        start: {
          line: 479,
          column: 12
        },
        end: {
          line: 479,
          column: 68
        }
      },
      "169": {
        start: {
          line: 481,
          column: 30
        },
        end: {
          line: 484,
          column: 9
        }
      },
      "170": {
        start: {
          line: 485,
          column: 8
        },
        end: {
          line: 497,
          column: 9
        }
      },
      "171": {
        start: {
          line: 486,
          column: 31
        },
        end: {
          line: 491,
          column: 14
        }
      },
      "172": {
        start: {
          line: 492,
          column: 12
        },
        end: {
          line: 492,
          column: 186
        }
      },
      "173": {
        start: {
          line: 495,
          column: 12
        },
        end: {
          line: 495,
          column: 74
        }
      },
      "174": {
        start: {
          line: 496,
          column: 12
        },
        end: {
          line: 496,
          column: 58
        }
      },
      "175": {
        start: {
          line: 503,
          column: 8
        },
        end: {
          line: 503,
          column: 77
        }
      },
      "176": {
        start: {
          line: 503,
          column: 54
        },
        end: {
          line: 503,
          column: 75
        }
      },
      "177": {
        start: {
          line: 509,
          column: 30
        },
        end: {
          line: 513,
          column: 9
        }
      },
      "178": {
        start: {
          line: 514,
          column: 8
        },
        end: {
          line: 514,
          column: 38
        }
      },
      "179": {
        start: {
          line: 515,
          column: 8
        },
        end: {
          line: 515,
          column: 55
        }
      },
      "180": {
        start: {
          line: 516,
          column: 8
        },
        end: {
          line: 516,
          column: 59
        }
      },
      "181": {
        start: {
          line: 517,
          column: 8
        },
        end: {
          line: 517,
          column: 55
        }
      },
      "182": {
        start: {
          line: 518,
          column: 8
        },
        end: {
          line: 526,
          column: 11
        }
      },
      "183": {
        start: {
          line: 533,
          column: 8
        },
        end: {
          line: 535,
          column: 9
        }
      },
      "184": {
        start: {
          line: 534,
          column: 12
        },
        end: {
          line: 534,
          column: 68
        }
      },
      "185": {
        start: {
          line: 536,
          column: 23
        },
        end: {
          line: 541,
          column: 29
        }
      },
      "186": {
        start: {
          line: 542,
          column: 8
        },
        end: {
          line: 559,
          column: 9
        }
      },
      "187": {
        start: {
          line: 543,
          column: 31
        },
        end: {
          line: 548,
          column: 14
        }
      },
      "188": {
        start: {
          line: 549,
          column: 29
        },
        end: {
          line: 549,
          column: 168
        }
      },
      "189": {
        start: {
          line: 550,
          column: 12
        },
        end: {
          line: 554,
          column: 29
        }
      },
      "190": {
        start: {
          line: 552,
          column: 26
        },
        end: {
          line: 552,
          column: 34
        }
      },
      "191": {
        start: {
          line: 553,
          column: 29
        },
        end: {
          line: 553,
          column: 41
        }
      },
      "192": {
        start: {
          line: 557,
          column: 12
        },
        end: {
          line: 557,
          column: 66
        }
      },
      "193": {
        start: {
          line: 558,
          column: 12
        },
        end: {
          line: 558,
          column: 60
        }
      },
      "194": {
        start: {
          line: 566,
          column: 8
        },
        end: {
          line: 568,
          column: 9
        }
      },
      "195": {
        start: {
          line: 567,
          column: 12
        },
        end: {
          line: 567,
          column: 68
        }
      },
      "196": {
        start: {
          line: 569,
          column: 23
        },
        end: {
          line: 586,
          column: 87
        }
      },
      "197": {
        start: {
          line: 587,
          column: 8
        },
        end: {
          line: 608,
          column: 9
        }
      },
      "198": {
        start: {
          line: 588,
          column: 31
        },
        end: {
          line: 598,
          column: 14
        }
      },
      "199": {
        start: {
          line: 589,
          column: 16
        },
        end: {
          line: 597,
          column: 19
        }
      },
      "200": {
        start: {
          line: 599,
          column: 35
        },
        end: {
          line: 599,
          column: 166
        }
      },
      "201": {
        start: {
          line: 600,
          column: 12
        },
        end: {
          line: 602,
          column: 13
        }
      },
      "202": {
        start: {
          line: 601,
          column: 16
        },
        end: {
          line: 601,
          column: 57
        }
      },
      "203": {
        start: {
          line: 603,
          column: 12
        },
        end: {
          line: 603,
          column: 34
        }
      },
      "204": {
        start: {
          line: 606,
          column: 12
        },
        end: {
          line: 606,
          column: 62
        }
      },
      "205": {
        start: {
          line: 607,
          column: 12
        },
        end: {
          line: 607,
          column: 24
        }
      },
      "206": {
        start: {
          line: 614,
          column: 8
        },
        end: {
          line: 614,
          column: 58
        }
      },
      "207": {
        start: {
          line: 621,
          column: 8
        },
        end: {
          line: 623,
          column: 9
        }
      },
      "208": {
        start: {
          line: 622,
          column: 12
        },
        end: {
          line: 622,
          column: 68
        }
      },
      "209": {
        start: {
          line: 624,
          column: 8
        },
        end: {
          line: 639,
          column: 9
        }
      },
      "210": {
        start: {
          line: 625,
          column: 31
        },
        end: {
          line: 633,
          column: 14
        }
      },
      "211": {
        start: {
          line: 634,
          column: 12
        },
        end: {
          line: 634,
          column: 189
        }
      },
      "212": {
        start: {
          line: 637,
          column: 12
        },
        end: {
          line: 637,
          column: 67
        }
      },
      "213": {
        start: {
          line: 638,
          column: 12
        },
        end: {
          line: 638,
          column: 61
        }
      },
      "214": {
        start: {
          line: 646,
          column: 8
        },
        end: {
          line: 648,
          column: 9
        }
      },
      "215": {
        start: {
          line: 647,
          column: 12
        },
        end: {
          line: 647,
          column: 68
        }
      },
      "216": {
        start: {
          line: 654,
          column: 13
        },
        end: {
          line: 654,
          column: 20
        }
      },
      "217": {
        start: {
          line: 655,
          column: 8
        },
        end: {
          line: 665,
          column: 11
        }
      },
      "218": {
        start: {
          line: 656,
          column: 12
        },
        end: {
          line: 664,
          column: 15
        }
      },
      "219": {
        start: {
          line: 671,
          column: 8
        },
        end: {
          line: 671,
          column: 27
        }
      },
      "220": {
        start: {
          line: 672,
          column: 8
        },
        end: {
          line: 672,
          column: 35
        }
      },
      "221": {
        start: {
          line: 673,
          column: 8
        },
        end: {
          line: 673,
          column: 38
        }
      },
      "222": {
        start: {
          line: 674,
          column: 8
        },
        end: {
          line: 674,
          column: 56
        }
      },
      "223": {
        start: {
          line: 677,
          column: 0
        },
        end: {
          line: 677,
          column: 48
        }
      },
      "224": {
        start: {
          line: 679,
          column: 0
        },
        end: {
          line: 679,
          column: 54
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 14,
            column: 5
          }
        },
        loc: {
          start: {
            line: 14,
            column: 18
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 14
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        loc: {
          start: {
            line: 29,
            column: 23
          },
          end: {
            line: 96,
            column: 5
          }
        },
        line: 29
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 100,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        },
        loc: {
          start: {
            line: 100,
            column: 33
          },
          end: {
            line: 119,
            column: 5
          }
        },
        line: 100
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 123,
            column: 4
          },
          end: {
            line: 123,
            column: 5
          }
        },
        loc: {
          start: {
            line: 123,
            column: 22
          },
          end: {
            line: 179,
            column: 5
          }
        },
        line: 123
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 183,
            column: 4
          },
          end: {
            line: 183,
            column: 5
          }
        },
        loc: {
          start: {
            line: 183,
            column: 39
          },
          end: {
            line: 211,
            column: 5
          }
        },
        line: 183
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 215,
            column: 4
          },
          end: {
            line: 215,
            column: 5
          }
        },
        loc: {
          start: {
            line: 215,
            column: 24
          },
          end: {
            line: 239,
            column: 5
          }
        },
        line: 215
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 243,
            column: 4
          },
          end: {
            line: 243,
            column: 5
          }
        },
        loc: {
          start: {
            line: 243,
            column: 37
          },
          end: {
            line: 271,
            column: 5
          }
        },
        line: 243
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 275,
            column: 4
          },
          end: {
            line: 275,
            column: 5
          }
        },
        loc: {
          start: {
            line: 275,
            column: 44
          },
          end: {
            line: 392,
            column: 5
          }
        },
        line: 275
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 331,
            column: 59
          },
          end: {
            line: 331,
            column: 60
          }
        },
        loc: {
          start: {
            line: 331,
            column: 71
          },
          end: {
            line: 341,
            column: 13
          }
        },
        line: 331
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 396,
            column: 4
          },
          end: {
            line: 396,
            column: 5
          }
        },
        loc: {
          start: {
            line: 396,
            column: 72
          },
          end: {
            line: 421,
            column: 5
          }
        },
        line: 396
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 417,
            column: 34
          },
          end: {
            line: 417,
            column: 35
          }
        },
        loc: {
          start: {
            line: 417,
            column: 45
          },
          end: {
            line: 417,
            column: 71
          }
        },
        line: 417
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 425,
            column: 4
          },
          end: {
            line: 425,
            column: 5
          }
        },
        loc: {
          start: {
            line: 425,
            column: 38
          },
          end: {
            line: 446,
            column: 5
          }
        },
        line: 425
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 450,
            column: 4
          },
          end: {
            line: 450,
            column: 5
          }
        },
        loc: {
          start: {
            line: 450,
            column: 34
          },
          end: {
            line: 472,
            column: 5
          }
        },
        line: 450
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 476,
            column: 4
          },
          end: {
            line: 476,
            column: 5
          }
        },
        loc: {
          start: {
            line: 476,
            column: 37
          },
          end: {
            line: 498,
            column: 5
          }
        },
        line: 476
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 502,
            column: 4
          },
          end: {
            line: 502,
            column: 5
          }
        },
        loc: {
          start: {
            line: 502,
            column: 29
          },
          end: {
            line: 504,
            column: 5
          }
        },
        line: 502
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 503,
            column: 47
          },
          end: {
            line: 503,
            column: 48
          }
        },
        loc: {
          start: {
            line: 503,
            column: 54
          },
          end: {
            line: 503,
            column: 75
          }
        },
        line: 503
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 508,
            column: 4
          },
          end: {
            line: 508,
            column: 5
          }
        },
        loc: {
          start: {
            line: 508,
            column: 24
          },
          end: {
            line: 527,
            column: 5
          }
        },
        line: 508
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 531,
            column: 4
          },
          end: {
            line: 531,
            column: 5
          }
        },
        loc: {
          start: {
            line: 531,
            column: 40
          },
          end: {
            line: 560,
            column: 5
          }
        },
        line: 531
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 552,
            column: 21
          },
          end: {
            line: 552,
            column: 22
          }
        },
        loc: {
          start: {
            line: 552,
            column: 26
          },
          end: {
            line: 552,
            column: 34
          }
        },
        line: 552
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 553,
            column: 24
          },
          end: {
            line: 553,
            column: 25
          }
        },
        loc: {
          start: {
            line: 553,
            column: 29
          },
          end: {
            line: 553,
            column: 41
          }
        },
        line: 553
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 564,
            column: 4
          },
          end: {
            line: 564,
            column: 5
          }
        },
        loc: {
          start: {
            line: 564,
            column: 51
          },
          end: {
            line: 609,
            column: 5
          }
        },
        line: 564
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 588,
            column: 59
          },
          end: {
            line: 588,
            column: 60
          }
        },
        loc: {
          start: {
            line: 588,
            column: 71
          },
          end: {
            line: 598,
            column: 13
          }
        },
        line: 588
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 613,
            column: 4
          },
          end: {
            line: 613,
            column: 5
          }
        },
        loc: {
          start: {
            line: 613,
            column: 14
          },
          end: {
            line: 615,
            column: 5
          }
        },
        line: 613
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 619,
            column: 4
          },
          end: {
            line: 619,
            column: 5
          }
        },
        loc: {
          start: {
            line: 619,
            column: 37
          },
          end: {
            line: 640,
            column: 5
          }
        },
        line: 619
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 645,
            column: 4
          },
          end: {
            line: 645,
            column: 5
          }
        },
        loc: {
          start: {
            line: 645,
            column: 51
          },
          end: {
            line: 666,
            column: 5
          }
        },
        line: 645
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 655,
            column: 43
          },
          end: {
            line: 655,
            column: 44
          }
        },
        loc: {
          start: {
            line: 655,
            column: 55
          },
          end: {
            line: 665,
            column: 9
          }
        },
        line: 655
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 670,
            column: 4
          },
          end: {
            line: 670,
            column: 5
          }
        },
        loc: {
          start: {
            line: 670,
            column: 14
          },
          end: {
            line: 675,
            column: 5
          }
        },
        line: 670
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 9,
            column: 0
          },
          end: {
            line: 12,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 9,
            column: 0
          },
          end: {
            line: 12,
            column: 1
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 9
      },
      "1": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "2": {
        loc: {
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 39,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 39,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "3": {
        loc: {
          start: {
            line: 36,
            column: 16
          },
          end: {
            line: 36,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 16
          },
          end: {
            line: 36,
            column: 39
          }
        }, {
          start: {
            line: 36,
            column: 43
          },
          end: {
            line: 36,
            column: 71
          }
        }],
        line: 36
      },
      "4": {
        loc: {
          start: {
            line: 62,
            column: 16
          },
          end: {
            line: 88,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 16
          },
          end: {
            line: 88,
            column: 17
          }
        }, {
          start: {
            line: 67,
            column: 21
          },
          end: {
            line: 88,
            column: 17
          }
        }],
        line: 62
      },
      "5": {
        loc: {
          start: {
            line: 67,
            column: 21
          },
          end: {
            line: 88,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 21
          },
          end: {
            line: 88,
            column: 17
          }
        }, {
          start: {
            line: 79,
            column: 21
          },
          end: {
            line: 88,
            column: 17
          }
        }],
        line: 67
      },
      "6": {
        loc: {
          start: {
            line: 79,
            column: 21
          },
          end: {
            line: 88,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 21
          },
          end: {
            line: 88,
            column: 17
          }
        }, {
          start: {
            line: 84,
            column: 21
          },
          end: {
            line: 88,
            column: 17
          }
        }],
        line: 79
      },
      "7": {
        loc: {
          start: {
            line: 85,
            column: 57
          },
          end: {
            line: 85,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 85,
            column: 57
          },
          end: {
            line: 85,
            column: 73
          }
        }, {
          start: {
            line: 85,
            column: 77
          },
          end: {
            line: 85,
            column: 86
          }
        }],
        line: 85
      },
      "8": {
        loc: {
          start: {
            line: 106,
            column: 34
          },
          end: {
            line: 106,
            column: 191
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 106,
            column: 181
          },
          end: {
            line: 106,
            column: 183
          }
        }, {
          start: {
            line: 106,
            column: 186
          },
          end: {
            line: 106,
            column: 191
          }
        }],
        line: 106
      },
      "9": {
        loc: {
          start: {
            line: 106,
            column: 34
          },
          end: {
            line: 106,
            column: 178
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 106,
            column: 34
          },
          end: {
            line: 106,
            column: 161
          }
        }, {
          start: {
            line: 106,
            column: 165
          },
          end: {
            line: 106,
            column: 178
          }
        }],
        line: 106
      },
      "10": {
        loc: {
          start: {
            line: 106,
            column: 40
          },
          end: {
            line: 106,
            column: 151
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 106,
            column: 104
          },
          end: {
            line: 106,
            column: 106
          }
        }, {
          start: {
            line: 106,
            column: 109
          },
          end: {
            line: 106,
            column: 151
          }
        }],
        line: 106
      },
      "11": {
        loc: {
          start: {
            line: 106,
            column: 40
          },
          end: {
            line: 106,
            column: 101
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 106,
            column: 40
          },
          end: {
            line: 106,
            column: 84
          }
        }, {
          start: {
            line: 106,
            column: 88
          },
          end: {
            line: 106,
            column: 101
          }
        }],
        line: 106
      },
      "12": {
        loc: {
          start: {
            line: 106,
            column: 215
          },
          end: {
            line: 106,
            column: 368
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 106,
            column: 362
          },
          end: {
            line: 106,
            column: 364
          }
        }, {
          start: {
            line: 106,
            column: 367
          },
          end: {
            line: 106,
            column: 368
          }
        }],
        line: 106
      },
      "13": {
        loc: {
          start: {
            line: 106,
            column: 215
          },
          end: {
            line: 106,
            column: 359
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 106,
            column: 215
          },
          end: {
            line: 106,
            column: 342
          }
        }, {
          start: {
            line: 106,
            column: 346
          },
          end: {
            line: 106,
            column: 359
          }
        }],
        line: 106
      },
      "14": {
        loc: {
          start: {
            line: 106,
            column: 221
          },
          end: {
            line: 106,
            column: 332
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 106,
            column: 285
          },
          end: {
            line: 106,
            column: 287
          }
        }, {
          start: {
            line: 106,
            column: 290
          },
          end: {
            line: 106,
            column: 332
          }
        }],
        line: 106
      },
      "15": {
        loc: {
          start: {
            line: 106,
            column: 221
          },
          end: {
            line: 106,
            column: 282
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 106,
            column: 221
          },
          end: {
            line: 106,
            column: 265
          }
        }, {
          start: {
            line: 106,
            column: 269
          },
          end: {
            line: 106,
            column: 282
          }
        }],
        line: 106
      },
      "16": {
        loc: {
          start: {
            line: 106,
            column: 384
          },
          end: {
            line: 106,
            column: 522
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 106,
            column: 515
          },
          end: {
            line: 106,
            column: 517
          }
        }, {
          start: {
            line: 106,
            column: 520
          },
          end: {
            line: 106,
            column: 522
          }
        }],
        line: 106
      },
      "17": {
        loc: {
          start: {
            line: 106,
            column: 384
          },
          end: {
            line: 106,
            column: 512
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 106,
            column: 384
          },
          end: {
            line: 106,
            column: 495
          }
        }, {
          start: {
            line: 106,
            column: 499
          },
          end: {
            line: 106,
            column: 512
          }
        }],
        line: 106
      },
      "18": {
        loc: {
          start: {
            line: 106,
            column: 390
          },
          end: {
            line: 106,
            column: 485
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 106,
            column: 446
          },
          end: {
            line: 106,
            column: 448
          }
        }, {
          start: {
            line: 106,
            column: 451
          },
          end: {
            line: 106,
            column: 485
          }
        }],
        line: 106
      },
      "19": {
        loc: {
          start: {
            line: 106,
            column: 390
          },
          end: {
            line: 106,
            column: 443
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 106,
            column: 390
          },
          end: {
            line: 106,
            column: 426
          }
        }, {
          start: {
            line: 106,
            column: 430
          },
          end: {
            line: 106,
            column: 443
          }
        }],
        line: 106
      },
      "20": {
        loc: {
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "21": {
        loc: {
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "22": {
        loc: {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 145,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 145,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "23": {
        loc: {
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 147,
            column: 12
          },
          end: {
            line: 155,
            column: 22
          }
        }, {
          start: {
            line: 156,
            column: 12
          },
          end: {
            line: 164,
            column: 22
          }
        }, {
          start: {
            line: 165,
            column: 12
          },
          end: {
            line: 171,
            column: 56
          }
        }],
        line: 146
      },
      "24": {
        loc: {
          start: {
            line: 189,
            column: 23
          },
          end: {
            line: 189,
            column: 122
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 189,
            column: 76
          },
          end: {
            line: 189,
            column: 82
          }
        }, {
          start: {
            line: 189,
            column: 85
          },
          end: {
            line: 189,
            column: 122
          }
        }],
        line: 189
      },
      "25": {
        loc: {
          start: {
            line: 189,
            column: 23
          },
          end: {
            line: 189,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 189,
            column: 23
          },
          end: {
            line: 189,
            column: 56
          }
        }, {
          start: {
            line: 189,
            column: 60
          },
          end: {
            line: 189,
            column: 73
          }
        }],
        line: 189
      },
      "26": {
        loc: {
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "27": {
        loc: {
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 191,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 191,
            column: 12
          },
          end: {
            line: 191,
            column: 31
          }
        }, {
          start: {
            line: 191,
            column: 35
          },
          end: {
            line: 191,
            column: 47
          }
        }],
        line: 191
      },
      "28": {
        loc: {
          start: {
            line: 223,
            column: 23
          },
          end: {
            line: 223,
            column: 122
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 223,
            column: 76
          },
          end: {
            line: 223,
            column: 82
          }
        }, {
          start: {
            line: 223,
            column: 85
          },
          end: {
            line: 223,
            column: 122
          }
        }],
        line: 223
      },
      "29": {
        loc: {
          start: {
            line: 223,
            column: 23
          },
          end: {
            line: 223,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 223,
            column: 23
          },
          end: {
            line: 223,
            column: 56
          }
        }, {
          start: {
            line: 223,
            column: 60
          },
          end: {
            line: 223,
            column: 73
          }
        }],
        line: 223
      },
      "30": {
        loc: {
          start: {
            line: 227,
            column: 8
          },
          end: {
            line: 229,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 227,
            column: 8
          },
          end: {
            line: 229,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 227
      },
      "31": {
        loc: {
          start: {
            line: 231,
            column: 8
          },
          end: {
            line: 238,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 231,
            column: 8
          },
          end: {
            line: 238,
            column: 9
          }
        }, {
          start: {
            line: 235,
            column: 13
          },
          end: {
            line: 238,
            column: 9
          }
        }],
        line: 231
      },
      "32": {
        loc: {
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 270,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 246,
            column: 12
          },
          end: {
            line: 255,
            column: 17
          }
        }, {
          start: {
            line: 256,
            column: 12
          },
          end: {
            line: 262,
            column: 17
          }
        }, {
          start: {
            line: 263,
            column: 12
          },
          end: {
            line: 269,
            column: 17
          }
        }],
        line: 245
      },
      "33": {
        loc: {
          start: {
            line: 247,
            column: 16
          },
          end: {
            line: 255,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 247,
            column: 16
          },
          end: {
            line: 255,
            column: 17
          }
        }, {
          start: {
            line: 250,
            column: 21
          },
          end: {
            line: 255,
            column: 17
          }
        }],
        line: 247
      },
      "34": {
        loc: {
          start: {
            line: 250,
            column: 21
          },
          end: {
            line: 255,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 250,
            column: 21
          },
          end: {
            line: 255,
            column: 17
          }
        }, {
          start: {
            line: 253,
            column: 21
          },
          end: {
            line: 255,
            column: 17
          }
        }],
        line: 250
      },
      "35": {
        loc: {
          start: {
            line: 257,
            column: 16
          },
          end: {
            line: 262,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 257,
            column: 16
          },
          end: {
            line: 262,
            column: 17
          }
        }, {
          start: {
            line: 260,
            column: 21
          },
          end: {
            line: 262,
            column: 17
          }
        }],
        line: 257
      },
      "36": {
        loc: {
          start: {
            line: 264,
            column: 16
          },
          end: {
            line: 269,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 264,
            column: 16
          },
          end: {
            line: 269,
            column: 17
          }
        }, {
          start: {
            line: 267,
            column: 21
          },
          end: {
            line: 269,
            column: 17
          }
        }],
        line: 264
      },
      "37": {
        loc: {
          start: {
            line: 284,
            column: 23
          },
          end: {
            line: 284,
            column: 122
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 284,
            column: 76
          },
          end: {
            line: 284,
            column: 82
          }
        }, {
          start: {
            line: 284,
            column: 85
          },
          end: {
            line: 284,
            column: 122
          }
        }],
        line: 284
      },
      "38": {
        loc: {
          start: {
            line: 284,
            column: 23
          },
          end: {
            line: 284,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 284,
            column: 23
          },
          end: {
            line: 284,
            column: 56
          }
        }, {
          start: {
            line: 284,
            column: 60
          },
          end: {
            line: 284,
            column: 73
          }
        }],
        line: 284
      },
      "39": {
        loc: {
          start: {
            line: 286,
            column: 8
          },
          end: {
            line: 288,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 286,
            column: 8
          },
          end: {
            line: 288,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 286
      },
      "40": {
        loc: {
          start: {
            line: 286,
            column: 12
          },
          end: {
            line: 286,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 286,
            column: 12
          },
          end: {
            line: 286,
            column: 31
          }
        }, {
          start: {
            line: 286,
            column: 35
          },
          end: {
            line: 286,
            column: 47
          }
        }],
        line: 286
      },
      "41": {
        loc: {
          start: {
            line: 290,
            column: 8
          },
          end: {
            line: 323,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 290,
            column: 8
          },
          end: {
            line: 323,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 290
      },
      "42": {
        loc: {
          start: {
            line: 342,
            column: 38
          },
          end: {
            line: 342,
            column: 240
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 342,
            column: 39
          },
          end: {
            line: 342,
            column: 170
          }
        }, {
          start: {
            line: 342,
            column: 175
          },
          end: {
            line: 342,
            column: 240
          }
        }],
        line: 342
      },
      "43": {
        loc: {
          start: {
            line: 342,
            column: 39
          },
          end: {
            line: 342,
            column: 170
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 342,
            column: 151
          },
          end: {
            line: 342,
            column: 157
          }
        }, {
          start: {
            line: 342,
            column: 160
          },
          end: {
            line: 342,
            column: 170
          }
        }],
        line: 342
      },
      "44": {
        loc: {
          start: {
            line: 342,
            column: 39
          },
          end: {
            line: 342,
            column: 148
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 342,
            column: 39
          },
          end: {
            line: 342,
            column: 131
          }
        }, {
          start: {
            line: 342,
            column: 135
          },
          end: {
            line: 342,
            column: 148
          }
        }],
        line: 342
      },
      "45": {
        loc: {
          start: {
            line: 342,
            column: 45
          },
          end: {
            line: 342,
            column: 121
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 342,
            column: 102
          },
          end: {
            line: 342,
            column: 108
          }
        }, {
          start: {
            line: 342,
            column: 111
          },
          end: {
            line: 342,
            column: 121
          }
        }],
        line: 342
      },
      "46": {
        loc: {
          start: {
            line: 342,
            column: 45
          },
          end: {
            line: 342,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 342,
            column: 45
          },
          end: {
            line: 342,
            column: 82
          }
        }, {
          start: {
            line: 342,
            column: 86
          },
          end: {
            line: 342,
            column: 99
          }
        }],
        line: 342
      },
      "47": {
        loc: {
          start: {
            line: 350,
            column: 42
          },
          end: {
            line: 350,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 350,
            column: 42
          },
          end: {
            line: 350,
            column: 84
          }
        }, {
          start: {
            line: 350,
            column: 88
          },
          end: {
            line: 350,
            column: 89
          }
        }],
        line: 350
      },
      "48": {
        loc: {
          start: {
            line: 352,
            column: 33
          },
          end: {
            line: 352,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 352,
            column: 33
          },
          end: {
            line: 352,
            column: 67
          }
        }, {
          start: {
            line: 352,
            column: 71
          },
          end: {
            line: 352,
            column: 73
          }
        }],
        line: 352
      },
      "49": {
        loc: {
          start: {
            line: 378,
            column: 12
          },
          end: {
            line: 389,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 378,
            column: 12
          },
          end: {
            line: 389,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 378
      },
      "50": {
        loc: {
          start: {
            line: 381,
            column: 46
          },
          end: {
            line: 381,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 381,
            column: 46
          },
          end: {
            line: 381,
            column: 88
          }
        }, {
          start: {
            line: 381,
            column: 92
          },
          end: {
            line: 381,
            column: 93
          }
        }],
        line: 381
      },
      "51": {
        loc: {
          start: {
            line: 396,
            column: 38
          },
          end: {
            line: 396,
            column: 52
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 396,
            column: 51
          },
          end: {
            line: 396,
            column: 52
          }
        }],
        line: 396
      },
      "52": {
        loc: {
          start: {
            line: 396,
            column: 54
          },
          end: {
            line: 396,
            column: 70
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 396,
            column: 66
          },
          end: {
            line: 396,
            column: 70
          }
        }],
        line: 396
      },
      "53": {
        loc: {
          start: {
            line: 406,
            column: 16
          },
          end: {
            line: 408,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 406,
            column: 16
          },
          end: {
            line: 408,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 406
      },
      "54": {
        loc: {
          start: {
            line: 406,
            column: 20
          },
          end: {
            line: 406,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 406,
            column: 20
          },
          end: {
            line: 406,
            column: 32
          }
        }, {
          start: {
            line: 406,
            column: 36
          },
          end: {
            line: 406,
            column: 85
          }
        }],
        line: 406
      },
      "55": {
        loc: {
          start: {
            line: 409,
            column: 16
          },
          end: {
            line: 411,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 409,
            column: 16
          },
          end: {
            line: 411,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 409
      },
      "56": {
        loc: {
          start: {
            line: 413,
            column: 30
          },
          end: {
            line: 415,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 414,
            column: 22
          },
          end: {
            line: 414,
            column: 124
          }
        }, {
          start: {
            line: 415,
            column: 22
          },
          end: {
            line: 415,
            column: 54
          }
        }],
        line: 413
      },
      "57": {
        loc: {
          start: {
            line: 414,
            column: 31
          },
          end: {
            line: 414,
            column: 116
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 414,
            column: 32
          },
          end: {
            line: 414,
            column: 107
          }
        }, {
          start: {
            line: 414,
            column: 112
          },
          end: {
            line: 414,
            column: 116
          }
        }],
        line: 414
      },
      "58": {
        loc: {
          start: {
            line: 414,
            column: 32
          },
          end: {
            line: 414,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 414,
            column: 81
          },
          end: {
            line: 414,
            column: 87
          }
        }, {
          start: {
            line: 414,
            column: 90
          },
          end: {
            line: 414,
            column: 107
          }
        }],
        line: 414
      },
      "59": {
        loc: {
          start: {
            line: 414,
            column: 32
          },
          end: {
            line: 414,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 414,
            column: 32
          },
          end: {
            line: 414,
            column: 61
          }
        }, {
          start: {
            line: 414,
            column: 65
          },
          end: {
            line: 414,
            column: 78
          }
        }],
        line: 414
      },
      "60": {
        loc: {
          start: {
            line: 444,
            column: 26
          },
          end: {
            line: 444,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 444,
            column: 26
          },
          end: {
            line: 444,
            column: 49
          }
        }, {
          start: {
            line: 444,
            column: 53
          },
          end: {
            line: 444,
            column: 78
          }
        }],
        line: 444
      },
      "61": {
        loc: {
          start: {
            line: 452,
            column: 8
          },
          end: {
            line: 471,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 453,
            column: 12
          },
          end: {
            line: 458,
            column: 18
          }
        }, {
          start: {
            line: 459,
            column: 12
          },
          end: {
            line: 464,
            column: 18
          }
        }, {
          start: {
            line: 465,
            column: 12
          },
          end: {
            line: 470,
            column: 18
          }
        }],
        line: 452
      },
      "62": {
        loc: {
          start: {
            line: 478,
            column: 8
          },
          end: {
            line: 480,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 478,
            column: 8
          },
          end: {
            line: 480,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 478
      },
      "63": {
        loc: {
          start: {
            line: 478,
            column: 12
          },
          end: {
            line: 478,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 478,
            column: 12
          },
          end: {
            line: 478,
            column: 31
          }
        }, {
          start: {
            line: 478,
            column: 35
          },
          end: {
            line: 478,
            column: 47
          }
        }],
        line: 478
      },
      "64": {
        loc: {
          start: {
            line: 492,
            column: 19
          },
          end: {
            line: 492,
            column: 185
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 492,
            column: 20
          },
          end: {
            line: 492,
            column: 151
          }
        }, {
          start: {
            line: 492,
            column: 156
          },
          end: {
            line: 492,
            column: 185
          }
        }],
        line: 492
      },
      "65": {
        loc: {
          start: {
            line: 492,
            column: 20
          },
          end: {
            line: 492,
            column: 151
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 492,
            column: 132
          },
          end: {
            line: 492,
            column: 138
          }
        }, {
          start: {
            line: 492,
            column: 141
          },
          end: {
            line: 492,
            column: 151
          }
        }],
        line: 492
      },
      "66": {
        loc: {
          start: {
            line: 492,
            column: 20
          },
          end: {
            line: 492,
            column: 129
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 492,
            column: 20
          },
          end: {
            line: 492,
            column: 112
          }
        }, {
          start: {
            line: 492,
            column: 116
          },
          end: {
            line: 492,
            column: 129
          }
        }],
        line: 492
      },
      "67": {
        loc: {
          start: {
            line: 492,
            column: 26
          },
          end: {
            line: 492,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 492,
            column: 83
          },
          end: {
            line: 492,
            column: 89
          }
        }, {
          start: {
            line: 492,
            column: 92
          },
          end: {
            line: 492,
            column: 102
          }
        }],
        line: 492
      },
      "68": {
        loc: {
          start: {
            line: 492,
            column: 26
          },
          end: {
            line: 492,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 492,
            column: 26
          },
          end: {
            line: 492,
            column: 63
          }
        }, {
          start: {
            line: 492,
            column: 67
          },
          end: {
            line: 492,
            column: 80
          }
        }],
        line: 492
      },
      "69": {
        loc: {
          start: {
            line: 533,
            column: 8
          },
          end: {
            line: 535,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 533,
            column: 8
          },
          end: {
            line: 535,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 533
      },
      "70": {
        loc: {
          start: {
            line: 533,
            column: 12
          },
          end: {
            line: 533,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 533,
            column: 12
          },
          end: {
            line: 533,
            column: 31
          }
        }, {
          start: {
            line: 533,
            column: 35
          },
          end: {
            line: 533,
            column: 47
          }
        }],
        line: 533
      },
      "71": {
        loc: {
          start: {
            line: 549,
            column: 29
          },
          end: {
            line: 549,
            column: 168
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 549,
            column: 30
          },
          end: {
            line: 549,
            column: 161
          }
        }, {
          start: {
            line: 549,
            column: 166
          },
          end: {
            line: 549,
            column: 168
          }
        }],
        line: 549
      },
      "72": {
        loc: {
          start: {
            line: 549,
            column: 30
          },
          end: {
            line: 549,
            column: 161
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 549,
            column: 142
          },
          end: {
            line: 549,
            column: 148
          }
        }, {
          start: {
            line: 549,
            column: 151
          },
          end: {
            line: 549,
            column: 161
          }
        }],
        line: 549
      },
      "73": {
        loc: {
          start: {
            line: 549,
            column: 30
          },
          end: {
            line: 549,
            column: 139
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 549,
            column: 30
          },
          end: {
            line: 549,
            column: 122
          }
        }, {
          start: {
            line: 549,
            column: 126
          },
          end: {
            line: 549,
            column: 139
          }
        }],
        line: 549
      },
      "74": {
        loc: {
          start: {
            line: 549,
            column: 36
          },
          end: {
            line: 549,
            column: 112
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 549,
            column: 93
          },
          end: {
            line: 549,
            column: 99
          }
        }, {
          start: {
            line: 549,
            column: 102
          },
          end: {
            line: 549,
            column: 112
          }
        }],
        line: 549
      },
      "75": {
        loc: {
          start: {
            line: 549,
            column: 36
          },
          end: {
            line: 549,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 549,
            column: 36
          },
          end: {
            line: 549,
            column: 73
          }
        }, {
          start: {
            line: 549,
            column: 77
          },
          end: {
            line: 549,
            column: 90
          }
        }],
        line: 549
      },
      "76": {
        loc: {
          start: {
            line: 566,
            column: 8
          },
          end: {
            line: 568,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 566,
            column: 8
          },
          end: {
            line: 568,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 566
      },
      "77": {
        loc: {
          start: {
            line: 566,
            column: 12
          },
          end: {
            line: 566,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 566,
            column: 12
          },
          end: {
            line: 566,
            column: 31
          }
        }, {
          start: {
            line: 566,
            column: 35
          },
          end: {
            line: 566,
            column: 47
          }
        }],
        line: 566
      },
      "78": {
        loc: {
          start: {
            line: 599,
            column: 35
          },
          end: {
            line: 599,
            column: 166
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 599,
            column: 147
          },
          end: {
            line: 599,
            column: 153
          }
        }, {
          start: {
            line: 599,
            column: 156
          },
          end: {
            line: 599,
            column: 166
          }
        }],
        line: 599
      },
      "79": {
        loc: {
          start: {
            line: 599,
            column: 35
          },
          end: {
            line: 599,
            column: 144
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 599,
            column: 35
          },
          end: {
            line: 599,
            column: 127
          }
        }, {
          start: {
            line: 599,
            column: 131
          },
          end: {
            line: 599,
            column: 144
          }
        }],
        line: 599
      },
      "80": {
        loc: {
          start: {
            line: 599,
            column: 41
          },
          end: {
            line: 599,
            column: 117
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 599,
            column: 98
          },
          end: {
            line: 599,
            column: 104
          }
        }, {
          start: {
            line: 599,
            column: 107
          },
          end: {
            line: 599,
            column: 117
          }
        }],
        line: 599
      },
      "81": {
        loc: {
          start: {
            line: 599,
            column: 41
          },
          end: {
            line: 599,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 599,
            column: 41
          },
          end: {
            line: 599,
            column: 78
          }
        }, {
          start: {
            line: 599,
            column: 82
          },
          end: {
            line: 599,
            column: 95
          }
        }],
        line: 599
      },
      "82": {
        loc: {
          start: {
            line: 600,
            column: 12
          },
          end: {
            line: 602,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 600,
            column: 12
          },
          end: {
            line: 602,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 600
      },
      "83": {
        loc: {
          start: {
            line: 614,
            column: 15
          },
          end: {
            line: 614,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 614,
            column: 15
          },
          end: {
            line: 614,
            column: 33
          }
        }, {
          start: {
            line: 614,
            column: 37
          },
          end: {
            line: 614,
            column: 57
          }
        }],
        line: 614
      },
      "84": {
        loc: {
          start: {
            line: 621,
            column: 8
          },
          end: {
            line: 623,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 621,
            column: 8
          },
          end: {
            line: 623,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 621
      },
      "85": {
        loc: {
          start: {
            line: 621,
            column: 12
          },
          end: {
            line: 621,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 621,
            column: 12
          },
          end: {
            line: 621,
            column: 31
          }
        }, {
          start: {
            line: 621,
            column: 35
          },
          end: {
            line: 621,
            column: 47
          }
        }],
        line: 621
      },
      "86": {
        loc: {
          start: {
            line: 634,
            column: 19
          },
          end: {
            line: 634,
            column: 188
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 634,
            column: 20
          },
          end: {
            line: 634,
            column: 151
          }
        }, {
          start: {
            line: 634,
            column: 156
          },
          end: {
            line: 634,
            column: 188
          }
        }],
        line: 634
      },
      "87": {
        loc: {
          start: {
            line: 634,
            column: 20
          },
          end: {
            line: 634,
            column: 151
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 634,
            column: 132
          },
          end: {
            line: 634,
            column: 138
          }
        }, {
          start: {
            line: 634,
            column: 141
          },
          end: {
            line: 634,
            column: 151
          }
        }],
        line: 634
      },
      "88": {
        loc: {
          start: {
            line: 634,
            column: 20
          },
          end: {
            line: 634,
            column: 129
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 634,
            column: 20
          },
          end: {
            line: 634,
            column: 112
          }
        }, {
          start: {
            line: 634,
            column: 116
          },
          end: {
            line: 634,
            column: 129
          }
        }],
        line: 634
      },
      "89": {
        loc: {
          start: {
            line: 634,
            column: 26
          },
          end: {
            line: 634,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 634,
            column: 83
          },
          end: {
            line: 634,
            column: 89
          }
        }, {
          start: {
            line: 634,
            column: 92
          },
          end: {
            line: 634,
            column: 102
          }
        }],
        line: 634
      },
      "90": {
        loc: {
          start: {
            line: 634,
            column: 26
          },
          end: {
            line: 634,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 634,
            column: 26
          },
          end: {
            line: 634,
            column: 63
          }
        }, {
          start: {
            line: 634,
            column: 67
          },
          end: {
            line: 634,
            column: 80
          }
        }],
        line: 634
      },
      "91": {
        loc: {
          start: {
            line: 645,
            column: 37
          },
          end: {
            line: 645,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 645,
            column: 47
          },
          end: {
            line: 645,
            column: 49
          }
        }],
        line: 645
      },
      "92": {
        loc: {
          start: {
            line: 646,
            column: 8
          },
          end: {
            line: 648,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 646,
            column: 8
          },
          end: {
            line: 648,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 646
      },
      "93": {
        loc: {
          start: {
            line: 646,
            column: 12
          },
          end: {
            line: 646,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 646,
            column: 12
          },
          end: {
            line: 646,
            column: 31
          }
        }, {
          start: {
            line: 646,
            column: 35
          },
          end: {
            line: 646,
            column: 47
          }
        }],
        line: 646
      },
      "94": {
        loc: {
          start: {
            line: 649,
            column: 16
          },
          end: {
            line: 649,
            column: 33
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 649,
            column: 30
          },
          end: {
            line: 649,
            column: 33
          }
        }],
        line: 649
      },
      "95": {
        loc: {
          start: {
            line: 650,
            column: 8
          },
          end: {
            line: 650,
            column: 24
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 650,
            column: 20
          },
          end: {
            line: 650,
            column: 24
          }
        }],
        line: 650
      },
      "96": {
        loc: {
          start: {
            line: 651,
            column: 8
          },
          end: {
            line: 651,
            column: 18
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 651,
            column: 15
          },
          end: {
            line: 651,
            column: 18
          }
        }],
        line: 651
      },
      "97": {
        loc: {
          start: {
            line: 652,
            column: 8
          },
          end: {
            line: 652,
            column: 30
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 652,
            column: 27
          },
          end: {
            line: 652,
            column: 30
          }
        }],
        line: 652
      },
      "98": {
        loc: {
          start: {
            line: 653,
            column: 8
          },
          end: {
            line: 653,
            column: 29
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 653,
            column: 26
          },
          end: {
            line: 653,
            column: 29
          }
        }],
        line: 653
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0],
      "52": [0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0],
      "78": [0, 0],
      "79": [0, 0],
      "80": [0, 0],
      "81": [0, 0],
      "82": [0, 0],
      "83": [0, 0],
      "84": [0, 0],
      "85": [0, 0],
      "86": [0, 0],
      "87": [0, 0],
      "88": [0, 0],
      "89": [0, 0],
      "90": [0, 0],
      "91": [0],
      "92": [0, 0],
      "93": [0, 0],
      "94": [0],
      "95": [0],
      "96": [0],
      "97": [0],
      "98": [0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/services/azure-openai-service.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/services/azure-openai-service.ts"],
      sourcesContent: ["import { MigrationOpenAIClient as OpenAI } from '@/lib/azure-ai-foundry/clients/migration-wrapper';\nimport { InterviewContext } from '@/lib/types/voice';\n\n// Client-side safety check\nconst isClient = typeof window !== 'undefined';\n\n// Only import server-side dependencies when running on server\nlet fetchAzureSecrets: any = null;\n\nif (!isClient) {\n  const azureConfig = require('@/lib/azure-config');\n  fetchAzureSecrets = azureConfig.fetchAzureSecrets;\n}\n\nexport interface ConversationMessage {\n  role: 'system' | 'user' | 'assistant';\n  content: string;\n}\n\nexport interface GenerationResponse {\n  content: string;\n  questionNumber?: number;\n  isComplete?: boolean;\n  followUpSuggestions?: string[];\n}\n\nexport class AzureOpenAIService {\n  private client: OpenAI | null = null;\n  private isInitialized = false;\n  private deployment: string = '';\n  private conversationHistory: ConversationMessage[] = [];\n  private interviewContext: InterviewContext = { \n    type: 'general',\n    preliminaryCollected: false,\n    currentQuestionCount: 0,\n    maxQuestions: 10\n  };\n\n  /**\n   * Initialize the Azure OpenAI service\n   */\n  async initialize(): Promise<boolean> {\n    if (isClient) {\n      console.warn('[Azure OpenAI Service] Running on client side - service disabled');\n      return false;\n    }\n    \n    try {\n      const secrets = await fetchAzureSecrets();\n      \n      if (!secrets.azureOpenAIKey || !secrets.azureOpenAIEndpoint) {\n        console.warn('\u26A0\uFE0F Azure OpenAI credentials not available');\n        return false;\n      }\n\n      this.deployment = secrets.azureOpenAIDeployment;\n      this.client = new OpenAI();\n      await this.client.init(); // Initialize the migration client\n\n      // Test the connection with a simple request\n      try {\n        console.log(`\uD83D\uDD04 Testing Azure OpenAI connection with deployment: ${this.deployment}`);\n        await this.client.chat.completions.create({\n          model: this.deployment,\n          messages: [{ role: 'user', content: 'Test' }],\n          max_tokens: 5,\n        });\n        \n        this.isInitialized = true;\n        console.log('\u2705 Azure OpenAI Service initialized and tested successfully');\n        return true;\n      } catch (testError: any) {\n        console.error('\u274C Azure OpenAI connection test failed:', testError.message);\n        console.error('\uD83D\uDCCB Configuration details:', {\n          endpoint: secrets.azureOpenAIEndpoint,\n          deployment: this.deployment,\n          hasApiKey: !!secrets.azureOpenAIKey\n        });\n        \n        if (testError.status === 401) {\n          console.error('\uD83D\uDD10 Authentication Error (401):');\n          console.error('   \u2022 Your API key might be invalid or expired');\n          console.error('   \u2022 Check your Azure OpenAI resource for the correct key');\n        } else if (testError.status === 404) {\n          console.error('\uD83D\uDCCD Resource Not Found (404):');\n          console.error('   \u2022 The deployment \"' + this.deployment + '\" does not exist');\n          console.error('   \u2022 Your endpoint URL might be incorrect');\n          console.error('   \u2022 No deployments might exist in your Azure OpenAI resource');\n          console.error('\uD83D\uDCA1 To fix this:');\n          console.error('   1. Log into portal.azure.com');\n          console.error('   2. Navigate to your Azure OpenAI resource');\n          console.error('   3. Check the \"Model deployments\" or \"Deployments\" section');\n          console.error('   4. Create a deployment (e.g., gpt-35-turbo, gpt-4)');\n          console.error('   5. Update AZURE_OPENAI_DEPLOYMENT in your .env.local file');\n        } else if (testError.status === 403) {\n          console.error('\uD83D\uDEAB Access Forbidden (403):');\n          console.error('   \u2022 Your API key might not have the right permissions');\n          console.error('   \u2022 Your Azure OpenAI resource might not be properly configured');\n        } else {\n          console.error(`\u2753 Unexpected error (${testError.status || 'Unknown'}):`);\n          console.error('   \u2022 Check your Azure OpenAI resource configuration');\n          console.error('   \u2022 Verify your subscription and resource status');\n        }\n        return false;\n      }\n    } catch (error) {\n      console.error('\u274C Failed to initialize Azure OpenAI Service:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Set interview context for conversation management\n   */\n  setInterviewContext(context: Partial<InterviewContext>): void {\n    const previousState = { ...this.interviewContext };\n    \n    // Merge context while preserving defaults\n    this.interviewContext = { \n      ...this.interviewContext, \n      ...context,\n      // Ensure defaults are set if not provided\n      preliminaryCollected: context.preliminaryCollected ?? this.interviewContext.preliminaryCollected ?? false,\n      currentQuestionCount: context.currentQuestionCount ?? this.interviewContext.currentQuestionCount ?? 0,\n      maxQuestions: context.maxQuestions ?? this.interviewContext.maxQuestions ?? 10\n    };\n    \n    // Log state transition\n    console.log('\uD83D\uDCCB Interview context updated:', this.interviewContext);\n    console.debug('\uD83D\uDD04 [STATE_TRANSITION] Interview context changed', {\n      from: previousState,\n      to: this.interviewContext,\n      changes: {\n        preliminaryCollected: previousState.preliminaryCollected !== this.interviewContext.preliminaryCollected,\n        currentQuestionCount: previousState.currentQuestionCount !== this.interviewContext.currentQuestionCount,\n        maxQuestions: previousState.maxQuestions !== this.interviewContext.maxQuestions\n      },\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  /**\n   * Get system prompt based on interview context\n   */\n  private getSystemPrompt(): string {\n    const { type, position, company, difficulty } = this.interviewContext;\n    \n    let basePrompt = `You are an experienced AI interviewer conducting a ${type} interview. Your goal is to create an engaging, realistic interview experience that helps candidates prepare effectively.\n\nCore Interview Principles:\n1. Ask relevant, progressively challenging questions\n2. Provide thoughtful follow-ups based on candidate responses\n3. Maintain a professional yet conversational tone\n4. Show genuine interest in the candidate's experiences\n5. Adapt question difficulty based on their expertise level\n6. Give brief encouraging feedback when appropriate\n7. Keep responses concise (50-80 words) and ask one question at a time\n\n`;\n\n    if (position) {\n      basePrompt += `Target Position: ${position}\\n`;\n    }\n    if (company) {\n      basePrompt += `Company Context: ${company}\\n`;\n    }\n    if (difficulty) {\n      basePrompt += `Difficulty Level: ${difficulty}\\n`;\n    }\n\n    switch (type) {\n      case 'technical':\n        basePrompt += `\\nTechnical Interview Focus:\n- Start with foundational concepts, then progress to complex scenarios\n- Ask about specific technologies, algorithms, and system design\n- Explore problem-solving approaches and trade-offs\n- Include practical coding scenarios and architecture discussions\n- Ask \"How would you optimize this?\" or \"What challenges might arise?\"\n- Focus on real-world application of technical knowledge`;\n        break;\n      case 'behavioral':\n        basePrompt += `\\nBehavioral Interview Focus:\n- Use STAR method (Situation, Task, Action, Result) evaluation\n- Ask about leadership, teamwork, conflict resolution, and growth\n- Explore past experiences with specific examples\n- Ask follow-ups like \"What would you do differently?\" or \"What did you learn?\"\n- Focus on cultural fit, communication skills, and problem-solving approach\n- Include questions about handling failures and difficult situations`;\n        break;\n      default:\n        basePrompt += `\\nGeneral Interview Focus:\n- Balance background, experience, motivation, and role fit\n- Ask about career goals, interests, and what excites them about the opportunity\n- Explore their understanding of the role and company\n- Include questions about learning style and professional development\n- Ask about their greatest achievements and challenges`;\n    }\n\n    basePrompt += `\\n\\nInterview Style:\n- Be conversational and show active listening\n- Acknowledge good points: \"That's a great approach\" or \"Interesting perspective\"\n- Ask natural follow-ups that build on their responses\n- Create a comfortable environment that encourages detailed answers`;\n    \n    return basePrompt;\n  }\n\n  /**\n   * Start a new interview conversation\n   */\n  async startInterviewConversation(): Promise<GenerationResponse> {\n    console.log('\uD83D\uDE80 [TRACE] startInterviewConversation called', {\n      timestamp: new Date().toISOString(),\n      interviewContext: this.interviewContext,\n      isInitialized: this.isInitialized,\n      callStack: new Error().stack?.split('\\n').slice(0, 5).join('\\n')\n    });\n    \n    if (!this.isInitialized || !this.client) {\n      throw new Error('Azure OpenAI Service not initialized');\n    }\n\n    // Reset conversation history\n    this.conversationHistory = [\n      { role: 'system', content: this.getSystemPrompt() }\n    ];\n\n    const openingMessage = this.getOpeningMessage();\n    \n    console.log('\uD83D\uDCE2 [TRACE] Opening message generated', {\n      message: openingMessage,\n      interviewType: this.interviewContext.type,\n      isPreliminaryQuestion: openingMessage.includes('tell me about your current role'),\n      timestamp: new Date().toISOString()\n    });\n    \n    this.conversationHistory.push({ role: 'assistant', content: openingMessage });\n\n    return {\n      content: openingMessage,\n      questionNumber: 1,\n      isComplete: false\n    };\n  }\n\n  /**\n   * Get opening message based on interview type\n   */\n  private getOpeningMessage(): string {\n    const { type, position, preliminaryCollected } = this.interviewContext;\n    \n    console.log('\uD83C\uDFAF [TRACE] getOpeningMessage called', {\n      type,\n      position,\n      preliminaryCollected,\n      timestamp: new Date().toISOString(),\n      callStack: new Error().stack?.split('\\n').slice(0, 5).join('\\n')\n    });\n    \n    // Always greet user\n    let greeting = \"Hello! I'm excited to interview you today. \";\n    \n    if (position) {\n      greeting += `We'll be discussing the ${position} position. `;\n    }\n    \n    // Build opening message dynamically based on preliminaryCollected flag\n    if (!preliminaryCollected) {\n      // Append the single preliminary request\n      return greeting + \"Before we dive into the main interview, I'd like to get to know you better. Could you please tell me about your current role, your years of experience, and the main technologies or skills you work with?\";\n    } else {\n      // Immediately ask first domain-specific question\n      return greeting + this.generateFirstInterviewQuestion();\n    }\n  }\n\n  /**\n   * Generate the first interview question based on interview type\n   */\n  private generateFirstInterviewQuestion(): string {\n    const { type, position, company, difficulty } = this.interviewContext;\n    \n    switch (type) {\n      case 'technical':\n        if (difficulty === 'easy') {\n          return \"Let's start with some fundamentals. Can you explain the difference between an array and a linked list, and when you would choose one over the other?\";\n        } else if (difficulty === 'hard') {\n          return \"Let's dive into system design. How would you design a distributed caching system that can handle millions of requests per second with sub-millisecond latency?\";\n        } else {\n          return \"To get started, can you walk me through a recent technical challenge you faced and how you approached solving it?\";\n        }\n        \n      case 'behavioral':\n        if (company) {\n          return `Tell me about a time when you had to work with a difficult team member. How did you handle the situation and what was the outcome?`;\n        } else {\n          return \"Can you describe a situation where you had to lead a project or initiative? What was your approach and what did you learn from the experience?\";\n        }\n        \n      default:\n        if (position) {\n          return `What specifically interests you about this ${position} role, and how does it align with your career goals?`;\n        } else {\n          return \"What motivated you to pursue this opportunity, and what unique value do you think you can bring to our team?\";\n        }\n    }\n  }\n\n  /**\n   * Process user response and generate next question or comment\n   */\n  async processUserResponse(userResponse: string): Promise<GenerationResponse> {\n    console.log('\uD83D\uDCAC [TRACE] processUserResponse called', {\n      userResponse: userResponse.substring(0, 100) + '...',\n      historyLength: this.conversationHistory.length,\n      preliminaryCollected: this.interviewContext.preliminaryCollected,\n      currentQuestionCount: this.interviewContext.currentQuestionCount,\n      maxQuestions: this.interviewContext.maxQuestions,\n      timestamp: new Date().toISOString(),\n      callStack: new Error().stack?.split('\\n').slice(0, 5).join('\\n')\n    });\n    \n    if (!this.isInitialized || !this.client) {\n      throw new Error('Azure OpenAI Service not initialized');\n    }\n\n    // Check if we're still collecting preliminary information\n    if (!this.interviewContext.preliminaryCollected) {\n      console.debug('\uD83C\uDFAF [PRELIMINARY] Processing preliminary response', {\n        userResponseLength: userResponse.length,\n        timestamp: new Date().toISOString()\n      });\n      \n      // Process the preliminary response and set flag\n      const previousPreliminaryState = this.interviewContext.preliminaryCollected;\n      this.interviewContext.preliminaryCollected = true;\n      \n      console.debug('\uD83D\uDD04 [STATE_TRANSITION] preliminaryCollected: false \u2192 true', {\n        previousState: previousPreliminaryState,\n        newState: true,\n        timestamp: new Date().toISOString()\n      });\n      \n      // Keep currentQuestionCount at 0 since we haven't asked real questions yet\n      this.interviewContext.currentQuestionCount = 0;\n      \n      // Generate first real interview question\n      const firstQuestion = this.generateFirstInterviewQuestion();\n      this.conversationHistory.push({ role: 'assistant', content: firstQuestion });\n      \n      // Increment to 1 for the first real question\n      const previousQuestionCount = this.interviewContext.currentQuestionCount;\n      this.interviewContext.currentQuestionCount = 1;\n      \n      console.debug('\uD83D\uDD04 [STATE_TRANSITION] questionNumber: 0 \u2192 1', {\n        previousCount: previousQuestionCount,\n        newCount: 1,\n        isFirstRealQuestion: true,\n        timestamp: new Date().toISOString()\n      });\n      \n      return {\n        content: `Thank you for that information! Now let's begin the interview.\\n\\n${firstQuestion}`,\n        questionNumber: 1,\n        isComplete: false,\n        followUpSuggestions: this.generateFollowUpSuggestions()\n      };\n    }\n\n    // Normal interview flow - add user response to conversation history\n    this.conversationHistory.push({ role: 'user', content: userResponse });\n    \n    console.log('\uD83D\uDCDD [TRACE] User response added to history', {\n      historyLength: this.conversationHistory.length,\n      timestamp: new Date().toISOString()\n    });\n\n    try {\n      const completion = await this.retryWithBackoff(async () => {\n        return await this.client!.chat.completions.create({\n          model: this.deployment,\n          messages: this.conversationHistory,\n          temperature: 0.7, // Standard temperature for balanced creativity\n          max_tokens: 200,\n          top_p: 0.9,\n          frequency_penalty: 0.1,\n          presence_penalty: 0.1,\n        });\n      });\n\n      const assistantResponse = completion.choices[0]?.message?.content || 'I\\'m sorry, I didn\\'t catch that. Could you repeat your answer?';\n      \n      console.log('\uD83E\uDD16 [TRACE] OpenAI response received', {\n        response: assistantResponse.substring(0, 100) + '...',\n        questionCount: this.interviewContext.currentQuestionCount,\n        timestamp: new Date().toISOString()\n      });\n      \n      // Add assistant response to conversation history\n      this.conversationHistory.push({ role: 'assistant', content: assistantResponse });\n\n      const previousQuestionCount = this.interviewContext.currentQuestionCount || 0;\n      const currentQuestionCount = previousQuestionCount + 1;\n      const maxQuestions = this.interviewContext.maxQuestions || 10;\n      \n      console.log('\uD83D\uDCCA [TRACE] Question progression', {\n        currentQuestionCount,\n        maxQuestions,\n        isComplete: currentQuestionCount >= maxQuestions,\n        willContinue: currentQuestionCount < maxQuestions,\n        timestamp: new Date().toISOString()\n      });\n      \n      console.debug('\uD83D\uDD04 [STATE_TRANSITION] questionNumber: %d \u2192 %d', \n        previousQuestionCount, \n        currentQuestionCount, \n        {\n          maxQuestions,\n          progressPercentage: Math.round((currentQuestionCount / maxQuestions) * 100),\n          remainingQuestions: Math.max(0, maxQuestions - currentQuestionCount),\n          timestamp: new Date().toISOString()\n        }\n      );\n      \n      // Update question count\n      this.interviewContext.currentQuestionCount = currentQuestionCount;\n\n      return {\n        content: assistantResponse,\n        questionNumber: currentQuestionCount,\n        isComplete: currentQuestionCount >= maxQuestions,\n        followUpSuggestions: this.generateFollowUpSuggestions()\n      };\n    } catch (error: any) {\n      console.error('\u274C Error generating OpenAI response:', error);\n      \n      // Provide fallback response for common errors\n      if (error.status === 429) {\n        const fallbackResponse = this.getFallbackResponse(userResponse);\n        this.conversationHistory.push({ role: 'assistant', content: fallbackResponse });\n        \n        const currentQuestionCount = (this.interviewContext.currentQuestionCount || 0) + 1;\n        this.interviewContext.currentQuestionCount = currentQuestionCount;\n        \n        return {\n          content: fallbackResponse,\n          questionNumber: currentQuestionCount,\n          isComplete: false,\n          followUpSuggestions: this.generateFollowUpSuggestions()\n        };\n      }\n      \n      throw new Error('Failed to generate response');\n    }\n  }\n\n  /**\n   * Retry mechanism with exponential backoff for rate limiting\n   */\n  private async retryWithBackoff<T>(\n    operation: () => Promise<T>,\n    maxRetries: number = 3,\n    baseDelay: number = 1000\n  ): Promise<T> {\n    let lastError: Error;\n    \n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\n      try {\n        return await operation();\n      } catch (error: any) {\n        lastError = error;\n        \n        // Don't retry on non-retryable errors\n        if (error.status && ![429, 500, 502, 503, 504].includes(error.status)) {\n          throw error;\n        }\n        \n        if (attempt === maxRetries) {\n          throw error;\n        }\n        \n        // Calculate delay with exponential backoff\n        const delay = error.status === 429 \n          ? parseInt(error.headers?.['retry-after'] || '10') * 1000\n          : baseDelay * Math.pow(2, attempt);\n        \n        console.log(`\u23F3 Retrying in ${delay}ms (attempt ${attempt + 1}/${maxRetries + 1})`);\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n    \n    throw lastError!;\n  }\n\n  /**\n   * Generate fallback response when AI service is unavailable\n   */\n  private getFallbackResponse(userResponse: string): string {\n    const { type } = this.interviewContext;\n    \n    const fallbackResponses = {\n      technical: [\n        \"That's an interesting approach. Can you tell me more about the challenges you faced?\",\n        \"I see. How would you optimize this solution for better performance?\",\n        \"Good point. What alternative approaches did you consider?\"\n      ],\n      behavioral: [\n        \"Thank you for sharing that experience. What was the outcome?\",\n        \"That sounds challenging. What did you learn from that situation?\",\n        \"Interesting. How would you handle a similar situation now?\"\n      ],\n      general: [\n        \"That's great to hear. Can you elaborate on that?\",\n        \"Interesting background. What motivates you in your work?\",\n        \"I appreciate you sharing that. What are you most proud of?\"\n      ]\n    };\n    \n    const responses = fallbackResponses[type] || fallbackResponses.general;\n    return responses[Math.floor(Math.random() * responses.length)];\n  }\n\n  /**\n   * Generate follow-up suggestions based on conversation\n   */\n  private generateFollowUpSuggestions(): string[] {\n    const { type } = this.interviewContext;\n    \n    switch (type) {\n      case 'technical':\n        return [\n          \"Can you explain your thought process?\",\n          \"What would you do differently?\",\n          \"How would this scale?\"\n        ];\n      case 'behavioral':\n        return [\n          \"What was the outcome?\",\n          \"What did you learn?\",\n          \"How would you handle it now?\"\n        ];\n      default:\n        return [\n          \"Can you elaborate on that?\",\n          \"What was your biggest challenge?\",\n          \"What motivates you?\"\n        ];\n    }\n  }\n\n  /**\n   * Generate interview summary and feedback\n   */\n  async generateInterviewSummary(): Promise<string> {\n    if (!this.isInitialized || !this.client) {\n      throw new Error('Azure OpenAI Service not initialized');\n    }\n\n    const summaryPrompt = {\n      role: 'system' as const,\n      content: `Based on the interview conversation, provide a brief summary of the candidate's performance, highlighting:\\n1. Key strengths demonstrated\\n2. Areas for improvement\\n3. Overall assessment\\n4. Recommendation\\n\\nKeep it concise and constructive (under 200 words).`\n    };\n\n    try {\n      const completion = await this.client.chat.completions.create({\n        model: this.deployment,\n        messages: [...this.conversationHistory, summaryPrompt],\n        temperature: 0.3,\n        max_tokens: 300,\n      });\n\n      return completion.choices[0]?.message?.content || 'Unable to generate summary.';\n    } catch (error) {\n      console.error('\u274C Error generating interview summary:', error);\n      throw new Error('Failed to generate summary');\n    }\n  }\n\n  /**\n   * Get conversation history\n   */\n  getConversationHistory(): ConversationMessage[] {\n    return this.conversationHistory.filter(msg => msg.role !== 'system');\n  }\n\n  /**\n   * Clear conversation history\n   */\n  clearConversation(): void {\n    const previousState = {\n      historyLength: this.conversationHistory.length,\n      questionCount: this.interviewContext.currentQuestionCount,\n      preliminaryCollected: this.interviewContext.preliminaryCollected\n    };\n    \n    this.conversationHistory = [];\n    this.interviewContext.currentQuestionCount = 0;\n    this.interviewContext.preliminaryCollected = false;\n    \n    console.log('\uD83E\uDDF9 Conversation history cleared');\n    console.debug('\uD83D\uDD04 [STATE_RESET] Conversation state reset', {\n      previousState,\n      newState: {\n        historyLength: 0,\n        questionCount: 0,\n        preliminaryCollected: false\n      },\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  /**\n   * Generate questions based on resume information\n   */\n  async generateQuestions(resumeInfo: {name: string, experience: string, education: string, skills: string}): Promise<string[]> {\n    if (!this.isInitialized || !this.client) {\n      throw new Error('Azure OpenAI Service not initialized');\n    }\n\n    const prompt = `Given the following resume information, generate 5 relevant interview questions. Format each question on a new line. Only return the questions, no additional text.\n\nName: ${resumeInfo.name}\nExperience: ${resumeInfo.experience}\nEducation: ${resumeInfo.education}\nSkills: ${resumeInfo.skills}`;\n\n    try {\n      const completion = await this.client.chat.completions.create({\n        model: this.deployment,\n        messages: [{role: 'system', content: prompt}],\n        temperature: 0.5,\n        max_tokens: 150\n      });\n\n      const response = completion.choices[0]?.message?.content || '';\n      return response\n        .split('\\n')\n        .map(q => q.trim())\n        .filter(q => q.length > 0)\n        .slice(0, 5);\n    } catch (error) {\n      console.error('\u274C Error generating questions:', error);\n      throw new Error('Failed to generate questions');\n    }\n  }\n\n  /**\n   * Tailor resume based on job description using Azure OpenAI\n   */\n  async tailorResume(resumeText: string, jobDescription: string): Promise<string> {\n    if (!this.isInitialized || !this.client) {\n      throw new Error('Azure OpenAI Service not initialized');\n    }\n\n    const prompt = `You are an expert resume writer and ATS optimization specialist. Please tailor this resume to better match the following job description for maximum ATS compatibility and relevance.\n\nJOB DESCRIPTION:\n${jobDescription}\n\nCURRENT RESUME:\n${resumeText}\n\nPlease provide a tailored version of the resume that:\n1. Uses keywords and phrases directly from the job description\n2. Highlights relevant skills and experiences that match the job requirements\n3. Maintains professional formatting and ATS-friendly structure\n4. Uses strong action verbs and quantifiable achievements\n5. Keeps the same overall length and format structure\n6. Optimizes for Applicant Tracking Systems (ATS)\n7. Ensures keyword density without keyword stuffing\n\nReturn ONLY the tailored resume content with no additional commentary or explanations.`;\n\n    try {\n      const completion = await this.retryWithBackoff(async () => {\n        return await this.client!.chat.completions.create({\n          model: this.deployment,\n          messages: [{ role: 'user', content: prompt }],\n          temperature: 0.3,\n          max_tokens: 2000,\n          top_p: 0.9,\n          frequency_penalty: 0.1,\n          presence_penalty: 0.1,\n        });\n      });\n\n      const tailoredResume = completion.choices[0]?.message?.content;\n      if (!tailoredResume) {\n        throw new Error('No response generated');\n      }\n\n      return tailoredResume;\n    } catch (error) {\n      console.error('\u274C Error tailoring resume:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Check if service is ready\n   */\n  isReady(): boolean {\n    return this.isInitialized && this.client !== null;\n  }\n\n  /**\n   * Generate a completion for a given prompt\n   */\n  async generateCompletion(prompt: string): Promise<string> {\n    if (!this.isInitialized || !this.client) {\n      throw new Error('Azure OpenAI Service not initialized');\n    }\n\n    try {\n      const completion = await this.createCompletion([\n        {\n          role: 'user',\n          content: prompt\n        }\n      ], {\n        temperature: 0.7,\n        maxTokens: 1000\n      });\n\n      return completion.choices[0]?.message?.content || 'Unable to generate completion.';\n    } catch (error) {\n      console.error('\u274C Error generating completion:', error);\n      throw new Error('Failed to generate completion');\n    }\n  }\n\n  /**\n   * Create a chat completion with custom parameters\n   * Public method for use by adapters\n   */\n  async createCompletion(\n    messages: Array<{ role: 'user' | 'system' | 'assistant'; content: string }>,\n    options: {\n      temperature?: number;\n      maxTokens?: number;\n      topP?: number;\n      frequencyPenalty?: number;\n      presencePenalty?: number;\n    } = {}\n  ) {\n    if (!this.isInitialized || !this.client) {\n      throw new Error('Azure OpenAI Service not initialized');\n    }\n\n    const {\n      temperature = 0.7,     // Default temperature for balanced responses\n      maxTokens = 1500,      // Default max tokens for comprehensive responses\n      topP = 0.9,            // Maintain creativity balance\n      frequencyPenalty = 0.1, // Reduce repetition\n      presencePenalty = 0.1   // Encourage diverse content\n    } = options;\n\n    return await this.retryWithBackoff(async () => {\n      return await this.client!.chat.completions.create({\n        model: this.deployment,\n        messages,\n        temperature,\n        max_tokens: maxTokens,\n        top_p: topP,\n        frequency_penalty: frequencyPenalty,\n        presence_penalty: presencePenalty,\n      });\n    });\n  }\n\n  /**\n   * Dispose of resources\n   */\n  dispose(): void {\n    this.client = null;\n    this.isInitialized = false;\n    this.conversationHistory = [];\n    console.log('\uD83E\uDDF9 Azure OpenAI Service disposed');\n  }\n}\n\n// Export singleton instance\nexport const azureOpenAIService = new AzureOpenAIService();\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d57ec872d4e1bd06ff55f55c56665cf94e716bf5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_28i4c9m45v = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_28i4c9m45v();
cov_28i4c9m45v().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_28i4c9m45v().s[1]++;
exports.azureOpenAIService = exports.AzureOpenAIService = void 0;
const migration_wrapper_1 =
/* istanbul ignore next */
(cov_28i4c9m45v().s[2]++, require("@/lib/azure-ai-foundry/clients/migration-wrapper"));
// Client-side safety check
const isClient =
/* istanbul ignore next */
(cov_28i4c9m45v().s[3]++, typeof window !== 'undefined');
// Only import server-side dependencies when running on server
let fetchAzureSecrets =
/* istanbul ignore next */
(cov_28i4c9m45v().s[4]++, null);
/* istanbul ignore next */
cov_28i4c9m45v().s[5]++;
if (!isClient) {
  /* istanbul ignore next */
  cov_28i4c9m45v().b[0][0]++;
  const azureConfig =
  /* istanbul ignore next */
  (cov_28i4c9m45v().s[6]++, require('@/lib/azure-config'));
  /* istanbul ignore next */
  cov_28i4c9m45v().s[7]++;
  fetchAzureSecrets = azureConfig.fetchAzureSecrets;
} else
/* istanbul ignore next */
{
  cov_28i4c9m45v().b[0][1]++;
}
class AzureOpenAIService {
  constructor() {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[0]++;
    cov_28i4c9m45v().s[8]++;
    this.client = null;
    /* istanbul ignore next */
    cov_28i4c9m45v().s[9]++;
    this.isInitialized = false;
    /* istanbul ignore next */
    cov_28i4c9m45v().s[10]++;
    this.deployment = '';
    /* istanbul ignore next */
    cov_28i4c9m45v().s[11]++;
    this.conversationHistory = [];
    /* istanbul ignore next */
    cov_28i4c9m45v().s[12]++;
    this.interviewContext = {
      type: 'general',
      preliminaryCollected: false,
      currentQuestionCount: 0,
      maxQuestions: 10
    };
  }
  /**
   * Initialize the Azure OpenAI service
   */
  async initialize() {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[1]++;
    cov_28i4c9m45v().s[13]++;
    if (isClient) {
      /* istanbul ignore next */
      cov_28i4c9m45v().b[1][0]++;
      cov_28i4c9m45v().s[14]++;
      console.warn('[Azure OpenAI Service] Running on client side - service disabled');
      /* istanbul ignore next */
      cov_28i4c9m45v().s[15]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_28i4c9m45v().b[1][1]++;
    }
    cov_28i4c9m45v().s[16]++;
    try {
      const secrets =
      /* istanbul ignore next */
      (cov_28i4c9m45v().s[17]++, await fetchAzureSecrets());
      /* istanbul ignore next */
      cov_28i4c9m45v().s[18]++;
      if (
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[3][0]++, !secrets.azureOpenAIKey) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[3][1]++, !secrets.azureOpenAIEndpoint)) {
        /* istanbul ignore next */
        cov_28i4c9m45v().b[2][0]++;
        cov_28i4c9m45v().s[19]++;
        console.warn('⚠️ Azure OpenAI credentials not available');
        /* istanbul ignore next */
        cov_28i4c9m45v().s[20]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_28i4c9m45v().b[2][1]++;
      }
      cov_28i4c9m45v().s[21]++;
      this.deployment = secrets.azureOpenAIDeployment;
      /* istanbul ignore next */
      cov_28i4c9m45v().s[22]++;
      this.client = new migration_wrapper_1.MigrationOpenAIClient();
      /* istanbul ignore next */
      cov_28i4c9m45v().s[23]++;
      await this.client.init(); // Initialize the migration client
      // Test the connection with a simple request
      /* istanbul ignore next */
      cov_28i4c9m45v().s[24]++;
      try {
        /* istanbul ignore next */
        cov_28i4c9m45v().s[25]++;
        console.log(`🔄 Testing Azure OpenAI connection with deployment: ${this.deployment}`);
        /* istanbul ignore next */
        cov_28i4c9m45v().s[26]++;
        await this.client.chat.completions.create({
          model: this.deployment,
          messages: [{
            role: 'user',
            content: 'Test'
          }],
          max_tokens: 5
        });
        /* istanbul ignore next */
        cov_28i4c9m45v().s[27]++;
        this.isInitialized = true;
        /* istanbul ignore next */
        cov_28i4c9m45v().s[28]++;
        console.log('✅ Azure OpenAI Service initialized and tested successfully');
        /* istanbul ignore next */
        cov_28i4c9m45v().s[29]++;
        return true;
      } catch (testError) {
        /* istanbul ignore next */
        cov_28i4c9m45v().s[30]++;
        console.error('❌ Azure OpenAI connection test failed:', testError.message);
        /* istanbul ignore next */
        cov_28i4c9m45v().s[31]++;
        console.error('📋 Configuration details:', {
          endpoint: secrets.azureOpenAIEndpoint,
          deployment: this.deployment,
          hasApiKey: !!secrets.azureOpenAIKey
        });
        /* istanbul ignore next */
        cov_28i4c9m45v().s[32]++;
        if (testError.status === 401) {
          /* istanbul ignore next */
          cov_28i4c9m45v().b[4][0]++;
          cov_28i4c9m45v().s[33]++;
          console.error('🔐 Authentication Error (401):');
          /* istanbul ignore next */
          cov_28i4c9m45v().s[34]++;
          console.error('   • Your API key might be invalid or expired');
          /* istanbul ignore next */
          cov_28i4c9m45v().s[35]++;
          console.error('   • Check your Azure OpenAI resource for the correct key');
        } else {
          /* istanbul ignore next */
          cov_28i4c9m45v().b[4][1]++;
          cov_28i4c9m45v().s[36]++;
          if (testError.status === 404) {
            /* istanbul ignore next */
            cov_28i4c9m45v().b[5][0]++;
            cov_28i4c9m45v().s[37]++;
            console.error('📍 Resource Not Found (404):');
            /* istanbul ignore next */
            cov_28i4c9m45v().s[38]++;
            console.error('   • The deployment "' + this.deployment + '" does not exist');
            /* istanbul ignore next */
            cov_28i4c9m45v().s[39]++;
            console.error('   • Your endpoint URL might be incorrect');
            /* istanbul ignore next */
            cov_28i4c9m45v().s[40]++;
            console.error('   • No deployments might exist in your Azure OpenAI resource');
            /* istanbul ignore next */
            cov_28i4c9m45v().s[41]++;
            console.error('💡 To fix this:');
            /* istanbul ignore next */
            cov_28i4c9m45v().s[42]++;
            console.error('   1. Log into portal.azure.com');
            /* istanbul ignore next */
            cov_28i4c9m45v().s[43]++;
            console.error('   2. Navigate to your Azure OpenAI resource');
            /* istanbul ignore next */
            cov_28i4c9m45v().s[44]++;
            console.error('   3. Check the "Model deployments" or "Deployments" section');
            /* istanbul ignore next */
            cov_28i4c9m45v().s[45]++;
            console.error('   4. Create a deployment (e.g., gpt-35-turbo, gpt-4)');
            /* istanbul ignore next */
            cov_28i4c9m45v().s[46]++;
            console.error('   5. Update AZURE_OPENAI_DEPLOYMENT in your .env.local file');
          } else {
            /* istanbul ignore next */
            cov_28i4c9m45v().b[5][1]++;
            cov_28i4c9m45v().s[47]++;
            if (testError.status === 403) {
              /* istanbul ignore next */
              cov_28i4c9m45v().b[6][0]++;
              cov_28i4c9m45v().s[48]++;
              console.error('🚫 Access Forbidden (403):');
              /* istanbul ignore next */
              cov_28i4c9m45v().s[49]++;
              console.error('   • Your API key might not have the right permissions');
              /* istanbul ignore next */
              cov_28i4c9m45v().s[50]++;
              console.error('   • Your Azure OpenAI resource might not be properly configured');
            } else {
              /* istanbul ignore next */
              cov_28i4c9m45v().b[6][1]++;
              cov_28i4c9m45v().s[51]++;
              console.error(`❓ Unexpected error (${
              /* istanbul ignore next */
              (cov_28i4c9m45v().b[7][0]++, testError.status) ||
              /* istanbul ignore next */
              (cov_28i4c9m45v().b[7][1]++, 'Unknown')}):`);
              /* istanbul ignore next */
              cov_28i4c9m45v().s[52]++;
              console.error('   • Check your Azure OpenAI resource configuration');
              /* istanbul ignore next */
              cov_28i4c9m45v().s[53]++;
              console.error('   • Verify your subscription and resource status');
            }
          }
        }
        /* istanbul ignore next */
        cov_28i4c9m45v().s[54]++;
        return false;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_28i4c9m45v().s[55]++;
      console.error('❌ Failed to initialize Azure OpenAI Service:', error);
      /* istanbul ignore next */
      cov_28i4c9m45v().s[56]++;
      return false;
    }
  }
  /**
   * Set interview context for conversation management
   */
  setInterviewContext(context) {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[2]++;
    var _a, _b, _c, _d, _e, _f;
    const previousState =
    /* istanbul ignore next */
    (cov_28i4c9m45v().s[57]++, Object.assign({}, this.interviewContext));
    // Merge context while preserving defaults
    /* istanbul ignore next */
    cov_28i4c9m45v().s[58]++;
    this.interviewContext = Object.assign(Object.assign(Object.assign({}, this.interviewContext), context), {
      // Ensure defaults are set if not provided
      preliminaryCollected:
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[9][0]++, (_b =
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[11][0]++, (_a = context.preliminaryCollected) !== null) &&
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[11][1]++, _a !== void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[10][0]++, _a) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[10][1]++, this.interviewContext.preliminaryCollected)) !== null) &&
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[9][1]++, _b !== void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[8][0]++, _b) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[8][1]++, false),
      currentQuestionCount:
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[13][0]++, (_d =
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[15][0]++, (_c = context.currentQuestionCount) !== null) &&
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[15][1]++, _c !== void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[14][0]++, _c) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[14][1]++, this.interviewContext.currentQuestionCount)) !== null) &&
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[13][1]++, _d !== void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[12][0]++, _d) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[12][1]++, 0),
      maxQuestions:
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[17][0]++, (_f =
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[19][0]++, (_e = context.maxQuestions) !== null) &&
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[19][1]++, _e !== void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[18][0]++, _e) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[18][1]++, this.interviewContext.maxQuestions)) !== null) &&
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[17][1]++, _f !== void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[16][0]++, _f) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[16][1]++, 10)
    });
    // Log state transition
    /* istanbul ignore next */
    cov_28i4c9m45v().s[59]++;
    console.log('📋 Interview context updated:', this.interviewContext);
    /* istanbul ignore next */
    cov_28i4c9m45v().s[60]++;
    console.debug('🔄 [STATE_TRANSITION] Interview context changed', {
      from: previousState,
      to: this.interviewContext,
      changes: {
        preliminaryCollected: previousState.preliminaryCollected !== this.interviewContext.preliminaryCollected,
        currentQuestionCount: previousState.currentQuestionCount !== this.interviewContext.currentQuestionCount,
        maxQuestions: previousState.maxQuestions !== this.interviewContext.maxQuestions
      },
      timestamp: new Date().toISOString()
    });
  }
  /**
   * Get system prompt based on interview context
   */
  getSystemPrompt() {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[3]++;
    const {
      type,
      position,
      company,
      difficulty
    } =
    /* istanbul ignore next */
    (cov_28i4c9m45v().s[61]++, this.interviewContext);
    let basePrompt =
    /* istanbul ignore next */
    (cov_28i4c9m45v().s[62]++, `You are an experienced AI interviewer conducting a ${type} interview. Your goal is to create an engaging, realistic interview experience that helps candidates prepare effectively.

Core Interview Principles:
1. Ask relevant, progressively challenging questions
2. Provide thoughtful follow-ups based on candidate responses
3. Maintain a professional yet conversational tone
4. Show genuine interest in the candidate's experiences
5. Adapt question difficulty based on their expertise level
6. Give brief encouraging feedback when appropriate
7. Keep responses concise (50-80 words) and ask one question at a time

`);
    /* istanbul ignore next */
    cov_28i4c9m45v().s[63]++;
    if (position) {
      /* istanbul ignore next */
      cov_28i4c9m45v().b[20][0]++;
      cov_28i4c9m45v().s[64]++;
      basePrompt += `Target Position: ${position}\n`;
    } else
    /* istanbul ignore next */
    {
      cov_28i4c9m45v().b[20][1]++;
    }
    cov_28i4c9m45v().s[65]++;
    if (company) {
      /* istanbul ignore next */
      cov_28i4c9m45v().b[21][0]++;
      cov_28i4c9m45v().s[66]++;
      basePrompt += `Company Context: ${company}\n`;
    } else
    /* istanbul ignore next */
    {
      cov_28i4c9m45v().b[21][1]++;
    }
    cov_28i4c9m45v().s[67]++;
    if (difficulty) {
      /* istanbul ignore next */
      cov_28i4c9m45v().b[22][0]++;
      cov_28i4c9m45v().s[68]++;
      basePrompt += `Difficulty Level: ${difficulty}\n`;
    } else
    /* istanbul ignore next */
    {
      cov_28i4c9m45v().b[22][1]++;
    }
    cov_28i4c9m45v().s[69]++;
    switch (type) {
      case 'technical':
        /* istanbul ignore next */
        cov_28i4c9m45v().b[23][0]++;
        cov_28i4c9m45v().s[70]++;
        basePrompt += `\nTechnical Interview Focus:
- Start with foundational concepts, then progress to complex scenarios
- Ask about specific technologies, algorithms, and system design
- Explore problem-solving approaches and trade-offs
- Include practical coding scenarios and architecture discussions
- Ask "How would you optimize this?" or "What challenges might arise?"
- Focus on real-world application of technical knowledge`;
        /* istanbul ignore next */
        cov_28i4c9m45v().s[71]++;
        break;
      case 'behavioral':
        /* istanbul ignore next */
        cov_28i4c9m45v().b[23][1]++;
        cov_28i4c9m45v().s[72]++;
        basePrompt += `\nBehavioral Interview Focus:
- Use STAR method (Situation, Task, Action, Result) evaluation
- Ask about leadership, teamwork, conflict resolution, and growth
- Explore past experiences with specific examples
- Ask follow-ups like "What would you do differently?" or "What did you learn?"
- Focus on cultural fit, communication skills, and problem-solving approach
- Include questions about handling failures and difficult situations`;
        /* istanbul ignore next */
        cov_28i4c9m45v().s[73]++;
        break;
      default:
        /* istanbul ignore next */
        cov_28i4c9m45v().b[23][2]++;
        cov_28i4c9m45v().s[74]++;
        basePrompt += `\nGeneral Interview Focus:
- Balance background, experience, motivation, and role fit
- Ask about career goals, interests, and what excites them about the opportunity
- Explore their understanding of the role and company
- Include questions about learning style and professional development
- Ask about their greatest achievements and challenges`;
    }
    /* istanbul ignore next */
    cov_28i4c9m45v().s[75]++;
    basePrompt += `\n\nInterview Style:
- Be conversational and show active listening
- Acknowledge good points: "That's a great approach" or "Interesting perspective"
- Ask natural follow-ups that build on their responses
- Create a comfortable environment that encourages detailed answers`;
    /* istanbul ignore next */
    cov_28i4c9m45v().s[76]++;
    return basePrompt;
  }
  /**
   * Start a new interview conversation
   */
  async startInterviewConversation() {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[4]++;
    var _a;
    /* istanbul ignore next */
    cov_28i4c9m45v().s[77]++;
    console.log('🚀 [TRACE] startInterviewConversation called', {
      timestamp: new Date().toISOString(),
      interviewContext: this.interviewContext,
      isInitialized: this.isInitialized,
      callStack:
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[25][0]++, (_a = new Error().stack) === null) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[25][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[24][0]++, void 0) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[24][1]++, _a.split('\n').slice(0, 5).join('\n'))
    });
    /* istanbul ignore next */
    cov_28i4c9m45v().s[78]++;
    if (
    /* istanbul ignore next */
    (cov_28i4c9m45v().b[27][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_28i4c9m45v().b[27][1]++, !this.client)) {
      /* istanbul ignore next */
      cov_28i4c9m45v().b[26][0]++;
      cov_28i4c9m45v().s[79]++;
      throw new Error('Azure OpenAI Service not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_28i4c9m45v().b[26][1]++;
    }
    // Reset conversation history
    cov_28i4c9m45v().s[80]++;
    this.conversationHistory = [{
      role: 'system',
      content: this.getSystemPrompt()
    }];
    const openingMessage =
    /* istanbul ignore next */
    (cov_28i4c9m45v().s[81]++, this.getOpeningMessage());
    /* istanbul ignore next */
    cov_28i4c9m45v().s[82]++;
    console.log('📢 [TRACE] Opening message generated', {
      message: openingMessage,
      interviewType: this.interviewContext.type,
      isPreliminaryQuestion: openingMessage.includes('tell me about your current role'),
      timestamp: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_28i4c9m45v().s[83]++;
    this.conversationHistory.push({
      role: 'assistant',
      content: openingMessage
    });
    /* istanbul ignore next */
    cov_28i4c9m45v().s[84]++;
    return {
      content: openingMessage,
      questionNumber: 1,
      isComplete: false
    };
  }
  /**
   * Get opening message based on interview type
   */
  getOpeningMessage() {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[5]++;
    var _a;
    const {
      type,
      position,
      preliminaryCollected
    } =
    /* istanbul ignore next */
    (cov_28i4c9m45v().s[85]++, this.interviewContext);
    /* istanbul ignore next */
    cov_28i4c9m45v().s[86]++;
    console.log('🎯 [TRACE] getOpeningMessage called', {
      type,
      position,
      preliminaryCollected,
      timestamp: new Date().toISOString(),
      callStack:
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[29][0]++, (_a = new Error().stack) === null) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[29][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[28][0]++, void 0) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[28][1]++, _a.split('\n').slice(0, 5).join('\n'))
    });
    // Always greet user
    let greeting =
    /* istanbul ignore next */
    (cov_28i4c9m45v().s[87]++, "Hello! I'm excited to interview you today. ");
    /* istanbul ignore next */
    cov_28i4c9m45v().s[88]++;
    if (position) {
      /* istanbul ignore next */
      cov_28i4c9m45v().b[30][0]++;
      cov_28i4c9m45v().s[89]++;
      greeting += `We'll be discussing the ${position} position. `;
    } else
    /* istanbul ignore next */
    {
      cov_28i4c9m45v().b[30][1]++;
    }
    // Build opening message dynamically based on preliminaryCollected flag
    cov_28i4c9m45v().s[90]++;
    if (!preliminaryCollected) {
      /* istanbul ignore next */
      cov_28i4c9m45v().b[31][0]++;
      cov_28i4c9m45v().s[91]++;
      // Append the single preliminary request
      return greeting + "Before we dive into the main interview, I'd like to get to know you better. Could you please tell me about your current role, your years of experience, and the main technologies or skills you work with?";
    } else {
      /* istanbul ignore next */
      cov_28i4c9m45v().b[31][1]++;
      cov_28i4c9m45v().s[92]++;
      // Immediately ask first domain-specific question
      return greeting + this.generateFirstInterviewQuestion();
    }
  }
  /**
   * Generate the first interview question based on interview type
   */
  generateFirstInterviewQuestion() {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[6]++;
    const {
      type,
      position,
      company,
      difficulty
    } =
    /* istanbul ignore next */
    (cov_28i4c9m45v().s[93]++, this.interviewContext);
    /* istanbul ignore next */
    cov_28i4c9m45v().s[94]++;
    switch (type) {
      case 'technical':
        /* istanbul ignore next */
        cov_28i4c9m45v().b[32][0]++;
        cov_28i4c9m45v().s[95]++;
        if (difficulty === 'easy') {
          /* istanbul ignore next */
          cov_28i4c9m45v().b[33][0]++;
          cov_28i4c9m45v().s[96]++;
          return "Let's start with some fundamentals. Can you explain the difference between an array and a linked list, and when you would choose one over the other?";
        } else {
          /* istanbul ignore next */
          cov_28i4c9m45v().b[33][1]++;
          cov_28i4c9m45v().s[97]++;
          if (difficulty === 'hard') {
            /* istanbul ignore next */
            cov_28i4c9m45v().b[34][0]++;
            cov_28i4c9m45v().s[98]++;
            return "Let's dive into system design. How would you design a distributed caching system that can handle millions of requests per second with sub-millisecond latency?";
          } else {
            /* istanbul ignore next */
            cov_28i4c9m45v().b[34][1]++;
            cov_28i4c9m45v().s[99]++;
            return "To get started, can you walk me through a recent technical challenge you faced and how you approached solving it?";
          }
        }
      case 'behavioral':
        /* istanbul ignore next */
        cov_28i4c9m45v().b[32][1]++;
        cov_28i4c9m45v().s[100]++;
        if (company) {
          /* istanbul ignore next */
          cov_28i4c9m45v().b[35][0]++;
          cov_28i4c9m45v().s[101]++;
          return `Tell me about a time when you had to work with a difficult team member. How did you handle the situation and what was the outcome?`;
        } else {
          /* istanbul ignore next */
          cov_28i4c9m45v().b[35][1]++;
          cov_28i4c9m45v().s[102]++;
          return "Can you describe a situation where you had to lead a project or initiative? What was your approach and what did you learn from the experience?";
        }
      default:
        /* istanbul ignore next */
        cov_28i4c9m45v().b[32][2]++;
        cov_28i4c9m45v().s[103]++;
        if (position) {
          /* istanbul ignore next */
          cov_28i4c9m45v().b[36][0]++;
          cov_28i4c9m45v().s[104]++;
          return `What specifically interests you about this ${position} role, and how does it align with your career goals?`;
        } else {
          /* istanbul ignore next */
          cov_28i4c9m45v().b[36][1]++;
          cov_28i4c9m45v().s[105]++;
          return "What motivated you to pursue this opportunity, and what unique value do you think you can bring to our team?";
        }
    }
  }
  /**
   * Process user response and generate next question or comment
   */
  async processUserResponse(userResponse) {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[7]++;
    var _a, _b, _c;
    /* istanbul ignore next */
    cov_28i4c9m45v().s[106]++;
    console.log('💬 [TRACE] processUserResponse called', {
      userResponse: userResponse.substring(0, 100) + '...',
      historyLength: this.conversationHistory.length,
      preliminaryCollected: this.interviewContext.preliminaryCollected,
      currentQuestionCount: this.interviewContext.currentQuestionCount,
      maxQuestions: this.interviewContext.maxQuestions,
      timestamp: new Date().toISOString(),
      callStack:
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[38][0]++, (_a = new Error().stack) === null) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[38][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[37][0]++, void 0) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[37][1]++, _a.split('\n').slice(0, 5).join('\n'))
    });
    /* istanbul ignore next */
    cov_28i4c9m45v().s[107]++;
    if (
    /* istanbul ignore next */
    (cov_28i4c9m45v().b[40][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_28i4c9m45v().b[40][1]++, !this.client)) {
      /* istanbul ignore next */
      cov_28i4c9m45v().b[39][0]++;
      cov_28i4c9m45v().s[108]++;
      throw new Error('Azure OpenAI Service not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_28i4c9m45v().b[39][1]++;
    }
    // Check if we're still collecting preliminary information
    cov_28i4c9m45v().s[109]++;
    if (!this.interviewContext.preliminaryCollected) {
      /* istanbul ignore next */
      cov_28i4c9m45v().b[41][0]++;
      cov_28i4c9m45v().s[110]++;
      console.debug('🎯 [PRELIMINARY] Processing preliminary response', {
        userResponseLength: userResponse.length,
        timestamp: new Date().toISOString()
      });
      // Process the preliminary response and set flag
      const previousPreliminaryState =
      /* istanbul ignore next */
      (cov_28i4c9m45v().s[111]++, this.interviewContext.preliminaryCollected);
      /* istanbul ignore next */
      cov_28i4c9m45v().s[112]++;
      this.interviewContext.preliminaryCollected = true;
      /* istanbul ignore next */
      cov_28i4c9m45v().s[113]++;
      console.debug('🔄 [STATE_TRANSITION] preliminaryCollected: false → true', {
        previousState: previousPreliminaryState,
        newState: true,
        timestamp: new Date().toISOString()
      });
      // Keep currentQuestionCount at 0 since we haven't asked real questions yet
      /* istanbul ignore next */
      cov_28i4c9m45v().s[114]++;
      this.interviewContext.currentQuestionCount = 0;
      // Generate first real interview question
      const firstQuestion =
      /* istanbul ignore next */
      (cov_28i4c9m45v().s[115]++, this.generateFirstInterviewQuestion());
      /* istanbul ignore next */
      cov_28i4c9m45v().s[116]++;
      this.conversationHistory.push({
        role: 'assistant',
        content: firstQuestion
      });
      // Increment to 1 for the first real question
      const previousQuestionCount =
      /* istanbul ignore next */
      (cov_28i4c9m45v().s[117]++, this.interviewContext.currentQuestionCount);
      /* istanbul ignore next */
      cov_28i4c9m45v().s[118]++;
      this.interviewContext.currentQuestionCount = 1;
      /* istanbul ignore next */
      cov_28i4c9m45v().s[119]++;
      console.debug('🔄 [STATE_TRANSITION] questionNumber: 0 → 1', {
        previousCount: previousQuestionCount,
        newCount: 1,
        isFirstRealQuestion: true,
        timestamp: new Date().toISOString()
      });
      /* istanbul ignore next */
      cov_28i4c9m45v().s[120]++;
      return {
        content: `Thank you for that information! Now let's begin the interview.\n\n${firstQuestion}`,
        questionNumber: 1,
        isComplete: false,
        followUpSuggestions: this.generateFollowUpSuggestions()
      };
    } else
    /* istanbul ignore next */
    {
      cov_28i4c9m45v().b[41][1]++;
    }
    // Normal interview flow - add user response to conversation history
    cov_28i4c9m45v().s[121]++;
    this.conversationHistory.push({
      role: 'user',
      content: userResponse
    });
    /* istanbul ignore next */
    cov_28i4c9m45v().s[122]++;
    console.log('📝 [TRACE] User response added to history', {
      historyLength: this.conversationHistory.length,
      timestamp: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_28i4c9m45v().s[123]++;
    try {
      const completion =
      /* istanbul ignore next */
      (cov_28i4c9m45v().s[124]++, await this.retryWithBackoff(async () => {
        /* istanbul ignore next */
        cov_28i4c9m45v().f[8]++;
        cov_28i4c9m45v().s[125]++;
        return await this.client.chat.completions.create({
          model: this.deployment,
          messages: this.conversationHistory,
          temperature: 0.7,
          // Standard temperature for balanced creativity
          max_tokens: 200,
          top_p: 0.9,
          frequency_penalty: 0.1,
          presence_penalty: 0.1
        });
      }));
      const assistantResponse =
      /* istanbul ignore next */
      (cov_28i4c9m45v().s[126]++,
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[42][0]++,
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[44][0]++, (_c =
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[46][0]++, (_b = completion.choices[0]) === null) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[46][1]++, _b === void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[45][0]++, void 0) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[45][1]++, _b.message)) === null) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[44][1]++, _c === void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[43][0]++, void 0) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[43][1]++, _c.content)) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[42][1]++, 'I\'m sorry, I didn\'t catch that. Could you repeat your answer?'));
      /* istanbul ignore next */
      cov_28i4c9m45v().s[127]++;
      console.log('🤖 [TRACE] OpenAI response received', {
        response: assistantResponse.substring(0, 100) + '...',
        questionCount: this.interviewContext.currentQuestionCount,
        timestamp: new Date().toISOString()
      });
      // Add assistant response to conversation history
      /* istanbul ignore next */
      cov_28i4c9m45v().s[128]++;
      this.conversationHistory.push({
        role: 'assistant',
        content: assistantResponse
      });
      const previousQuestionCount =
      /* istanbul ignore next */
      (cov_28i4c9m45v().s[129]++,
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[47][0]++, this.interviewContext.currentQuestionCount) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[47][1]++, 0));
      const currentQuestionCount =
      /* istanbul ignore next */
      (cov_28i4c9m45v().s[130]++, previousQuestionCount + 1);
      const maxQuestions =
      /* istanbul ignore next */
      (cov_28i4c9m45v().s[131]++,
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[48][0]++, this.interviewContext.maxQuestions) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[48][1]++, 10));
      /* istanbul ignore next */
      cov_28i4c9m45v().s[132]++;
      console.log('📊 [TRACE] Question progression', {
        currentQuestionCount,
        maxQuestions,
        isComplete: currentQuestionCount >= maxQuestions,
        willContinue: currentQuestionCount < maxQuestions,
        timestamp: new Date().toISOString()
      });
      /* istanbul ignore next */
      cov_28i4c9m45v().s[133]++;
      console.debug('🔄 [STATE_TRANSITION] questionNumber: %d → %d', previousQuestionCount, currentQuestionCount, {
        maxQuestions,
        progressPercentage: Math.round(currentQuestionCount / maxQuestions * 100),
        remainingQuestions: Math.max(0, maxQuestions - currentQuestionCount),
        timestamp: new Date().toISOString()
      });
      // Update question count
      /* istanbul ignore next */
      cov_28i4c9m45v().s[134]++;
      this.interviewContext.currentQuestionCount = currentQuestionCount;
      /* istanbul ignore next */
      cov_28i4c9m45v().s[135]++;
      return {
        content: assistantResponse,
        questionNumber: currentQuestionCount,
        isComplete: currentQuestionCount >= maxQuestions,
        followUpSuggestions: this.generateFollowUpSuggestions()
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_28i4c9m45v().s[136]++;
      console.error('❌ Error generating OpenAI response:', error);
      // Provide fallback response for common errors
      /* istanbul ignore next */
      cov_28i4c9m45v().s[137]++;
      if (error.status === 429) {
        /* istanbul ignore next */
        cov_28i4c9m45v().b[49][0]++;
        const fallbackResponse =
        /* istanbul ignore next */
        (cov_28i4c9m45v().s[138]++, this.getFallbackResponse(userResponse));
        /* istanbul ignore next */
        cov_28i4c9m45v().s[139]++;
        this.conversationHistory.push({
          role: 'assistant',
          content: fallbackResponse
        });
        const currentQuestionCount =
        /* istanbul ignore next */
        (cov_28i4c9m45v().s[140]++, (
        /* istanbul ignore next */
        (cov_28i4c9m45v().b[50][0]++, this.interviewContext.currentQuestionCount) ||
        /* istanbul ignore next */
        (cov_28i4c9m45v().b[50][1]++, 0)) + 1);
        /* istanbul ignore next */
        cov_28i4c9m45v().s[141]++;
        this.interviewContext.currentQuestionCount = currentQuestionCount;
        /* istanbul ignore next */
        cov_28i4c9m45v().s[142]++;
        return {
          content: fallbackResponse,
          questionNumber: currentQuestionCount,
          isComplete: false,
          followUpSuggestions: this.generateFollowUpSuggestions()
        };
      } else
      /* istanbul ignore next */
      {
        cov_28i4c9m45v().b[49][1]++;
      }
      cov_28i4c9m45v().s[143]++;
      throw new Error('Failed to generate response');
    }
  }
  /**
   * Retry mechanism with exponential backoff for rate limiting
   */
  async retryWithBackoff(operation, maxRetries =
  /* istanbul ignore next */
  (cov_28i4c9m45v().b[51][0]++, 3), baseDelay =
  /* istanbul ignore next */
  (cov_28i4c9m45v().b[52][0]++, 1000)) {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[9]++;
    var _a;
    let lastError;
    /* istanbul ignore next */
    cov_28i4c9m45v().s[144]++;
    for (let attempt =
    /* istanbul ignore next */
    (cov_28i4c9m45v().s[145]++, 0); attempt <= maxRetries; attempt++) {
      /* istanbul ignore next */
      cov_28i4c9m45v().s[146]++;
      try {
        /* istanbul ignore next */
        cov_28i4c9m45v().s[147]++;
        return await operation();
      } catch (error) {
        /* istanbul ignore next */
        cov_28i4c9m45v().s[148]++;
        lastError = error;
        // Don't retry on non-retryable errors
        /* istanbul ignore next */
        cov_28i4c9m45v().s[149]++;
        if (
        /* istanbul ignore next */
        (cov_28i4c9m45v().b[54][0]++, error.status) &&
        /* istanbul ignore next */
        (cov_28i4c9m45v().b[54][1]++, ![429, 500, 502, 503, 504].includes(error.status))) {
          /* istanbul ignore next */
          cov_28i4c9m45v().b[53][0]++;
          cov_28i4c9m45v().s[150]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_28i4c9m45v().b[53][1]++;
        }
        cov_28i4c9m45v().s[151]++;
        if (attempt === maxRetries) {
          /* istanbul ignore next */
          cov_28i4c9m45v().b[55][0]++;
          cov_28i4c9m45v().s[152]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_28i4c9m45v().b[55][1]++;
        }
        // Calculate delay with exponential backoff
        const delay =
        /* istanbul ignore next */
        (cov_28i4c9m45v().s[153]++, error.status === 429 ?
        /* istanbul ignore next */
        (cov_28i4c9m45v().b[56][0]++, parseInt(
        /* istanbul ignore next */
        (cov_28i4c9m45v().b[57][0]++,
        /* istanbul ignore next */
        (cov_28i4c9m45v().b[59][0]++, (_a = error.headers) === null) ||
        /* istanbul ignore next */
        (cov_28i4c9m45v().b[59][1]++, _a === void 0) ?
        /* istanbul ignore next */
        (cov_28i4c9m45v().b[58][0]++, void 0) :
        /* istanbul ignore next */
        (cov_28i4c9m45v().b[58][1]++, _a['retry-after'])) ||
        /* istanbul ignore next */
        (cov_28i4c9m45v().b[57][1]++, '10')) * 1000) :
        /* istanbul ignore next */
        (cov_28i4c9m45v().b[56][1]++, baseDelay * Math.pow(2, attempt)));
        /* istanbul ignore next */
        cov_28i4c9m45v().s[154]++;
        console.log(`⏳ Retrying in ${delay}ms (attempt ${attempt + 1}/${maxRetries + 1})`);
        /* istanbul ignore next */
        cov_28i4c9m45v().s[155]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_28i4c9m45v().f[10]++;
          cov_28i4c9m45v().s[156]++;
          return setTimeout(resolve, delay);
        });
      }
    }
    /* istanbul ignore next */
    cov_28i4c9m45v().s[157]++;
    throw lastError;
  }
  /**
   * Generate fallback response when AI service is unavailable
   */
  getFallbackResponse(userResponse) {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[11]++;
    const {
      type
    } =
    /* istanbul ignore next */
    (cov_28i4c9m45v().s[158]++, this.interviewContext);
    const fallbackResponses =
    /* istanbul ignore next */
    (cov_28i4c9m45v().s[159]++, {
      technical: ["That's an interesting approach. Can you tell me more about the challenges you faced?", "I see. How would you optimize this solution for better performance?", "Good point. What alternative approaches did you consider?"],
      behavioral: ["Thank you for sharing that experience. What was the outcome?", "That sounds challenging. What did you learn from that situation?", "Interesting. How would you handle a similar situation now?"],
      general: ["That's great to hear. Can you elaborate on that?", "Interesting background. What motivates you in your work?", "I appreciate you sharing that. What are you most proud of?"]
    });
    const responses =
    /* istanbul ignore next */
    (cov_28i4c9m45v().s[160]++,
    /* istanbul ignore next */
    (cov_28i4c9m45v().b[60][0]++, fallbackResponses[type]) ||
    /* istanbul ignore next */
    (cov_28i4c9m45v().b[60][1]++, fallbackResponses.general));
    /* istanbul ignore next */
    cov_28i4c9m45v().s[161]++;
    return responses[Math.floor(Math.random() * responses.length)];
  }
  /**
   * Generate follow-up suggestions based on conversation
   */
  generateFollowUpSuggestions() {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[12]++;
    const {
      type
    } =
    /* istanbul ignore next */
    (cov_28i4c9m45v().s[162]++, this.interviewContext);
    /* istanbul ignore next */
    cov_28i4c9m45v().s[163]++;
    switch (type) {
      case 'technical':
        /* istanbul ignore next */
        cov_28i4c9m45v().b[61][0]++;
        cov_28i4c9m45v().s[164]++;
        return ["Can you explain your thought process?", "What would you do differently?", "How would this scale?"];
      case 'behavioral':
        /* istanbul ignore next */
        cov_28i4c9m45v().b[61][1]++;
        cov_28i4c9m45v().s[165]++;
        return ["What was the outcome?", "What did you learn?", "How would you handle it now?"];
      default:
        /* istanbul ignore next */
        cov_28i4c9m45v().b[61][2]++;
        cov_28i4c9m45v().s[166]++;
        return ["Can you elaborate on that?", "What was your biggest challenge?", "What motivates you?"];
    }
  }
  /**
   * Generate interview summary and feedback
   */
  async generateInterviewSummary() {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[13]++;
    var _a, _b;
    /* istanbul ignore next */
    cov_28i4c9m45v().s[167]++;
    if (
    /* istanbul ignore next */
    (cov_28i4c9m45v().b[63][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_28i4c9m45v().b[63][1]++, !this.client)) {
      /* istanbul ignore next */
      cov_28i4c9m45v().b[62][0]++;
      cov_28i4c9m45v().s[168]++;
      throw new Error('Azure OpenAI Service not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_28i4c9m45v().b[62][1]++;
    }
    const summaryPrompt =
    /* istanbul ignore next */
    (cov_28i4c9m45v().s[169]++, {
      role: 'system',
      content: `Based on the interview conversation, provide a brief summary of the candidate's performance, highlighting:\n1. Key strengths demonstrated\n2. Areas for improvement\n3. Overall assessment\n4. Recommendation\n\nKeep it concise and constructive (under 200 words).`
    });
    /* istanbul ignore next */
    cov_28i4c9m45v().s[170]++;
    try {
      const completion =
      /* istanbul ignore next */
      (cov_28i4c9m45v().s[171]++, await this.client.chat.completions.create({
        model: this.deployment,
        messages: [...this.conversationHistory, summaryPrompt],
        temperature: 0.3,
        max_tokens: 300
      }));
      /* istanbul ignore next */
      cov_28i4c9m45v().s[172]++;
      return /* istanbul ignore next */(cov_28i4c9m45v().b[64][0]++,
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[66][0]++, (_b =
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[68][0]++, (_a = completion.choices[0]) === null) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[68][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[67][0]++, void 0) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[67][1]++, _a.message)) === null) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[66][1]++, _b === void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[65][0]++, void 0) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[65][1]++, _b.content)) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[64][1]++, 'Unable to generate summary.');
    } catch (error) {
      /* istanbul ignore next */
      cov_28i4c9m45v().s[173]++;
      console.error('❌ Error generating interview summary:', error);
      /* istanbul ignore next */
      cov_28i4c9m45v().s[174]++;
      throw new Error('Failed to generate summary');
    }
  }
  /**
   * Get conversation history
   */
  getConversationHistory() {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[14]++;
    cov_28i4c9m45v().s[175]++;
    return this.conversationHistory.filter(msg => {
      /* istanbul ignore next */
      cov_28i4c9m45v().f[15]++;
      cov_28i4c9m45v().s[176]++;
      return msg.role !== 'system';
    });
  }
  /**
   * Clear conversation history
   */
  clearConversation() {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[16]++;
    const previousState =
    /* istanbul ignore next */
    (cov_28i4c9m45v().s[177]++, {
      historyLength: this.conversationHistory.length,
      questionCount: this.interviewContext.currentQuestionCount,
      preliminaryCollected: this.interviewContext.preliminaryCollected
    });
    /* istanbul ignore next */
    cov_28i4c9m45v().s[178]++;
    this.conversationHistory = [];
    /* istanbul ignore next */
    cov_28i4c9m45v().s[179]++;
    this.interviewContext.currentQuestionCount = 0;
    /* istanbul ignore next */
    cov_28i4c9m45v().s[180]++;
    this.interviewContext.preliminaryCollected = false;
    /* istanbul ignore next */
    cov_28i4c9m45v().s[181]++;
    console.log('🧹 Conversation history cleared');
    /* istanbul ignore next */
    cov_28i4c9m45v().s[182]++;
    console.debug('🔄 [STATE_RESET] Conversation state reset', {
      previousState,
      newState: {
        historyLength: 0,
        questionCount: 0,
        preliminaryCollected: false
      },
      timestamp: new Date().toISOString()
    });
  }
  /**
   * Generate questions based on resume information
   */
  async generateQuestions(resumeInfo) {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[17]++;
    var _a, _b;
    /* istanbul ignore next */
    cov_28i4c9m45v().s[183]++;
    if (
    /* istanbul ignore next */
    (cov_28i4c9m45v().b[70][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_28i4c9m45v().b[70][1]++, !this.client)) {
      /* istanbul ignore next */
      cov_28i4c9m45v().b[69][0]++;
      cov_28i4c9m45v().s[184]++;
      throw new Error('Azure OpenAI Service not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_28i4c9m45v().b[69][1]++;
    }
    const prompt =
    /* istanbul ignore next */
    (cov_28i4c9m45v().s[185]++, `Given the following resume information, generate 5 relevant interview questions. Format each question on a new line. Only return the questions, no additional text.

Name: ${resumeInfo.name}
Experience: ${resumeInfo.experience}
Education: ${resumeInfo.education}
Skills: ${resumeInfo.skills}`);
    /* istanbul ignore next */
    cov_28i4c9m45v().s[186]++;
    try {
      const completion =
      /* istanbul ignore next */
      (cov_28i4c9m45v().s[187]++, await this.client.chat.completions.create({
        model: this.deployment,
        messages: [{
          role: 'system',
          content: prompt
        }],
        temperature: 0.5,
        max_tokens: 150
      }));
      const response =
      /* istanbul ignore next */
      (cov_28i4c9m45v().s[188]++,
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[71][0]++,
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[73][0]++, (_b =
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[75][0]++, (_a = completion.choices[0]) === null) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[75][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[74][0]++, void 0) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[74][1]++, _a.message)) === null) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[73][1]++, _b === void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[72][0]++, void 0) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[72][1]++, _b.content)) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[71][1]++, ''));
      /* istanbul ignore next */
      cov_28i4c9m45v().s[189]++;
      return response.split('\n').map(q => {
        /* istanbul ignore next */
        cov_28i4c9m45v().f[18]++;
        cov_28i4c9m45v().s[190]++;
        return q.trim();
      }).filter(q => {
        /* istanbul ignore next */
        cov_28i4c9m45v().f[19]++;
        cov_28i4c9m45v().s[191]++;
        return q.length > 0;
      }).slice(0, 5);
    } catch (error) {
      /* istanbul ignore next */
      cov_28i4c9m45v().s[192]++;
      console.error('❌ Error generating questions:', error);
      /* istanbul ignore next */
      cov_28i4c9m45v().s[193]++;
      throw new Error('Failed to generate questions');
    }
  }
  /**
   * Tailor resume based on job description using Azure OpenAI
   */
  async tailorResume(resumeText, jobDescription) {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[20]++;
    var _a, _b;
    /* istanbul ignore next */
    cov_28i4c9m45v().s[194]++;
    if (
    /* istanbul ignore next */
    (cov_28i4c9m45v().b[77][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_28i4c9m45v().b[77][1]++, !this.client)) {
      /* istanbul ignore next */
      cov_28i4c9m45v().b[76][0]++;
      cov_28i4c9m45v().s[195]++;
      throw new Error('Azure OpenAI Service not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_28i4c9m45v().b[76][1]++;
    }
    const prompt =
    /* istanbul ignore next */
    (cov_28i4c9m45v().s[196]++, `You are an expert resume writer and ATS optimization specialist. Please tailor this resume to better match the following job description for maximum ATS compatibility and relevance.

JOB DESCRIPTION:
${jobDescription}

CURRENT RESUME:
${resumeText}

Please provide a tailored version of the resume that:
1. Uses keywords and phrases directly from the job description
2. Highlights relevant skills and experiences that match the job requirements
3. Maintains professional formatting and ATS-friendly structure
4. Uses strong action verbs and quantifiable achievements
5. Keeps the same overall length and format structure
6. Optimizes for Applicant Tracking Systems (ATS)
7. Ensures keyword density without keyword stuffing

Return ONLY the tailored resume content with no additional commentary or explanations.`);
    /* istanbul ignore next */
    cov_28i4c9m45v().s[197]++;
    try {
      const completion =
      /* istanbul ignore next */
      (cov_28i4c9m45v().s[198]++, await this.retryWithBackoff(async () => {
        /* istanbul ignore next */
        cov_28i4c9m45v().f[21]++;
        cov_28i4c9m45v().s[199]++;
        return await this.client.chat.completions.create({
          model: this.deployment,
          messages: [{
            role: 'user',
            content: prompt
          }],
          temperature: 0.3,
          max_tokens: 2000,
          top_p: 0.9,
          frequency_penalty: 0.1,
          presence_penalty: 0.1
        });
      }));
      const tailoredResume =
      /* istanbul ignore next */
      (cov_28i4c9m45v().s[200]++,
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[79][0]++, (_b =
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[81][0]++, (_a = completion.choices[0]) === null) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[81][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[80][0]++, void 0) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[80][1]++, _a.message)) === null) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[79][1]++, _b === void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[78][0]++, void 0) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[78][1]++, _b.content));
      /* istanbul ignore next */
      cov_28i4c9m45v().s[201]++;
      if (!tailoredResume) {
        /* istanbul ignore next */
        cov_28i4c9m45v().b[82][0]++;
        cov_28i4c9m45v().s[202]++;
        throw new Error('No response generated');
      } else
      /* istanbul ignore next */
      {
        cov_28i4c9m45v().b[82][1]++;
      }
      cov_28i4c9m45v().s[203]++;
      return tailoredResume;
    } catch (error) {
      /* istanbul ignore next */
      cov_28i4c9m45v().s[204]++;
      console.error('❌ Error tailoring resume:', error);
      /* istanbul ignore next */
      cov_28i4c9m45v().s[205]++;
      throw error;
    }
  }
  /**
   * Check if service is ready
   */
  isReady() {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[22]++;
    cov_28i4c9m45v().s[206]++;
    return /* istanbul ignore next */(cov_28i4c9m45v().b[83][0]++, this.isInitialized) &&
    /* istanbul ignore next */
    (cov_28i4c9m45v().b[83][1]++, this.client !== null);
  }
  /**
   * Generate a completion for a given prompt
   */
  async generateCompletion(prompt) {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[23]++;
    var _a, _b;
    /* istanbul ignore next */
    cov_28i4c9m45v().s[207]++;
    if (
    /* istanbul ignore next */
    (cov_28i4c9m45v().b[85][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_28i4c9m45v().b[85][1]++, !this.client)) {
      /* istanbul ignore next */
      cov_28i4c9m45v().b[84][0]++;
      cov_28i4c9m45v().s[208]++;
      throw new Error('Azure OpenAI Service not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_28i4c9m45v().b[84][1]++;
    }
    cov_28i4c9m45v().s[209]++;
    try {
      const completion =
      /* istanbul ignore next */
      (cov_28i4c9m45v().s[210]++, await this.createCompletion([{
        role: 'user',
        content: prompt
      }], {
        temperature: 0.7,
        maxTokens: 1000
      }));
      /* istanbul ignore next */
      cov_28i4c9m45v().s[211]++;
      return /* istanbul ignore next */(cov_28i4c9m45v().b[86][0]++,
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[88][0]++, (_b =
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[90][0]++, (_a = completion.choices[0]) === null) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[90][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[89][0]++, void 0) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[89][1]++, _a.message)) === null) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[88][1]++, _b === void 0) ?
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[87][0]++, void 0) :
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[87][1]++, _b.content)) ||
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[86][1]++, 'Unable to generate completion.');
    } catch (error) {
      /* istanbul ignore next */
      cov_28i4c9m45v().s[212]++;
      console.error('❌ Error generating completion:', error);
      /* istanbul ignore next */
      cov_28i4c9m45v().s[213]++;
      throw new Error('Failed to generate completion');
    }
  }
  /**
   * Create a chat completion with custom parameters
   * Public method for use by adapters
   */
  async createCompletion(messages, options =
  /* istanbul ignore next */
  (cov_28i4c9m45v().b[91][0]++, {})) {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[24]++;
    cov_28i4c9m45v().s[214]++;
    if (
    /* istanbul ignore next */
    (cov_28i4c9m45v().b[93][0]++, !this.isInitialized) ||
    /* istanbul ignore next */
    (cov_28i4c9m45v().b[93][1]++, !this.client)) {
      /* istanbul ignore next */
      cov_28i4c9m45v().b[92][0]++;
      cov_28i4c9m45v().s[215]++;
      throw new Error('Azure OpenAI Service not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_28i4c9m45v().b[92][1]++;
    }
    const {
      temperature =
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[94][0]++, 0.7),
      // Default temperature for balanced responses
      maxTokens =
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[95][0]++, 1500),
      // Default max tokens for comprehensive responses
      topP =
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[96][0]++, 0.9),
      // Maintain creativity balance
      frequencyPenalty =
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[97][0]++, 0.1),
      // Reduce repetition
      presencePenalty =
      /* istanbul ignore next */
      (cov_28i4c9m45v().b[98][0]++, 0.1) // Encourage diverse content
    } =
    /* istanbul ignore next */
    (cov_28i4c9m45v().s[216]++, options);
    /* istanbul ignore next */
    cov_28i4c9m45v().s[217]++;
    return await this.retryWithBackoff(async () => {
      /* istanbul ignore next */
      cov_28i4c9m45v().f[25]++;
      cov_28i4c9m45v().s[218]++;
      return await this.client.chat.completions.create({
        model: this.deployment,
        messages,
        temperature,
        max_tokens: maxTokens,
        top_p: topP,
        frequency_penalty: frequencyPenalty,
        presence_penalty: presencePenalty
      });
    });
  }
  /**
   * Dispose of resources
   */
  dispose() {
    /* istanbul ignore next */
    cov_28i4c9m45v().f[26]++;
    cov_28i4c9m45v().s[219]++;
    this.client = null;
    /* istanbul ignore next */
    cov_28i4c9m45v().s[220]++;
    this.isInitialized = false;
    /* istanbul ignore next */
    cov_28i4c9m45v().s[221]++;
    this.conversationHistory = [];
    /* istanbul ignore next */
    cov_28i4c9m45v().s[222]++;
    console.log('🧹 Azure OpenAI Service disposed');
  }
}
/* istanbul ignore next */
cov_28i4c9m45v().s[223]++;
exports.AzureOpenAIService = AzureOpenAIService;
// Export singleton instance
/* istanbul ignore next */
cov_28i4c9m45v().s[224]++;
exports.azureOpenAIService = new AzureOpenAIService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMjhpNGM5bTQ1diIsImFjdHVhbENvdmVyYWdlIiwicyIsIm1pZ3JhdGlvbl93cmFwcGVyXzEiLCJyZXF1aXJlIiwiaXNDbGllbnQiLCJ3aW5kb3ciLCJmZXRjaEF6dXJlU2VjcmV0cyIsImIiLCJhenVyZUNvbmZpZyIsIkF6dXJlT3BlbkFJU2VydmljZSIsImNvbnN0cnVjdG9yIiwiZiIsImNsaWVudCIsImlzSW5pdGlhbGl6ZWQiLCJkZXBsb3ltZW50IiwiY29udmVyc2F0aW9uSGlzdG9yeSIsImludGVydmlld0NvbnRleHQiLCJ0eXBlIiwicHJlbGltaW5hcnlDb2xsZWN0ZWQiLCJjdXJyZW50UXVlc3Rpb25Db3VudCIsIm1heFF1ZXN0aW9ucyIsImluaXRpYWxpemUiLCJjb25zb2xlIiwid2FybiIsInNlY3JldHMiLCJhenVyZU9wZW5BSUtleSIsImF6dXJlT3BlbkFJRW5kcG9pbnQiLCJhenVyZU9wZW5BSURlcGxveW1lbnQiLCJNaWdyYXRpb25PcGVuQUlDbGllbnQiLCJpbml0IiwibG9nIiwiY2hhdCIsImNvbXBsZXRpb25zIiwiY3JlYXRlIiwibW9kZWwiLCJtZXNzYWdlcyIsInJvbGUiLCJjb250ZW50IiwibWF4X3Rva2VucyIsInRlc3RFcnJvciIsImVycm9yIiwibWVzc2FnZSIsImVuZHBvaW50IiwiaGFzQXBpS2V5Iiwic3RhdHVzIiwic2V0SW50ZXJ2aWV3Q29udGV4dCIsImNvbnRleHQiLCJwcmV2aW91c1N0YXRlIiwiT2JqZWN0IiwiYXNzaWduIiwiX2IiLCJfYSIsIl9kIiwiX2MiLCJfZiIsIl9lIiwiZGVidWciLCJmcm9tIiwidG8iLCJjaGFuZ2VzIiwidGltZXN0YW1wIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwiZ2V0U3lzdGVtUHJvbXB0IiwicG9zaXRpb24iLCJjb21wYW55IiwiZGlmZmljdWx0eSIsImJhc2VQcm9tcHQiLCJzdGFydEludGVydmlld0NvbnZlcnNhdGlvbiIsImNhbGxTdGFjayIsIkVycm9yIiwic3RhY2siLCJzcGxpdCIsInNsaWNlIiwiam9pbiIsIm9wZW5pbmdNZXNzYWdlIiwiZ2V0T3BlbmluZ01lc3NhZ2UiLCJpbnRlcnZpZXdUeXBlIiwiaXNQcmVsaW1pbmFyeVF1ZXN0aW9uIiwiaW5jbHVkZXMiLCJwdXNoIiwicXVlc3Rpb25OdW1iZXIiLCJpc0NvbXBsZXRlIiwiZ3JlZXRpbmciLCJnZW5lcmF0ZUZpcnN0SW50ZXJ2aWV3UXVlc3Rpb24iLCJwcm9jZXNzVXNlclJlc3BvbnNlIiwidXNlclJlc3BvbnNlIiwic3Vic3RyaW5nIiwiaGlzdG9yeUxlbmd0aCIsImxlbmd0aCIsInVzZXJSZXNwb25zZUxlbmd0aCIsInByZXZpb3VzUHJlbGltaW5hcnlTdGF0ZSIsIm5ld1N0YXRlIiwiZmlyc3RRdWVzdGlvbiIsInByZXZpb3VzUXVlc3Rpb25Db3VudCIsInByZXZpb3VzQ291bnQiLCJuZXdDb3VudCIsImlzRmlyc3RSZWFsUXVlc3Rpb24iLCJmb2xsb3dVcFN1Z2dlc3Rpb25zIiwiZ2VuZXJhdGVGb2xsb3dVcFN1Z2dlc3Rpb25zIiwiY29tcGxldGlvbiIsInJldHJ5V2l0aEJhY2tvZmYiLCJ0ZW1wZXJhdHVyZSIsInRvcF9wIiwiZnJlcXVlbmN5X3BlbmFsdHkiLCJwcmVzZW5jZV9wZW5hbHR5IiwiYXNzaXN0YW50UmVzcG9uc2UiLCJjaG9pY2VzIiwicmVzcG9uc2UiLCJxdWVzdGlvbkNvdW50Iiwid2lsbENvbnRpbnVlIiwicHJvZ3Jlc3NQZXJjZW50YWdlIiwiTWF0aCIsInJvdW5kIiwicmVtYWluaW5nUXVlc3Rpb25zIiwibWF4IiwiZmFsbGJhY2tSZXNwb25zZSIsImdldEZhbGxiYWNrUmVzcG9uc2UiLCJvcGVyYXRpb24iLCJtYXhSZXRyaWVzIiwiYmFzZURlbGF5IiwibGFzdEVycm9yIiwiYXR0ZW1wdCIsImRlbGF5IiwicGFyc2VJbnQiLCJoZWFkZXJzIiwicG93IiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwiZmFsbGJhY2tSZXNwb25zZXMiLCJ0ZWNobmljYWwiLCJiZWhhdmlvcmFsIiwiZ2VuZXJhbCIsInJlc3BvbnNlcyIsImZsb29yIiwicmFuZG9tIiwiZ2VuZXJhdGVJbnRlcnZpZXdTdW1tYXJ5Iiwic3VtbWFyeVByb21wdCIsImdldENvbnZlcnNhdGlvbkhpc3RvcnkiLCJmaWx0ZXIiLCJtc2ciLCJjbGVhckNvbnZlcnNhdGlvbiIsImdlbmVyYXRlUXVlc3Rpb25zIiwicmVzdW1lSW5mbyIsInByb21wdCIsIm5hbWUiLCJleHBlcmllbmNlIiwiZWR1Y2F0aW9uIiwic2tpbGxzIiwibWFwIiwicSIsInRyaW0iLCJ0YWlsb3JSZXN1bWUiLCJyZXN1bWVUZXh0Iiwiam9iRGVzY3JpcHRpb24iLCJ0YWlsb3JlZFJlc3VtZSIsImlzUmVhZHkiLCJnZW5lcmF0ZUNvbXBsZXRpb24iLCJjcmVhdGVDb21wbGV0aW9uIiwibWF4VG9rZW5zIiwib3B0aW9ucyIsInRvcFAiLCJmcmVxdWVuY3lQZW5hbHR5IiwicHJlc2VuY2VQZW5hbHR5IiwiZGlzcG9zZSIsImV4cG9ydHMiLCJhenVyZU9wZW5BSVNlcnZpY2UiXSwic291cmNlcyI6WyIvVXNlcnMvZGlrc2hhbnR2YXNoaXN0aGEvUHJlcEJldHRyL2xpYi9zZXJ2aWNlcy9henVyZS1vcGVuYWktc2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNaWdyYXRpb25PcGVuQUlDbGllbnQgYXMgT3BlbkFJIH0gZnJvbSAnQC9saWIvYXp1cmUtYWktZm91bmRyeS9jbGllbnRzL21pZ3JhdGlvbi13cmFwcGVyJztcbmltcG9ydCB7IEludGVydmlld0NvbnRleHQgfSBmcm9tICdAL2xpYi90eXBlcy92b2ljZSc7XG5cbi8vIENsaWVudC1zaWRlIHNhZmV0eSBjaGVja1xuY29uc3QgaXNDbGllbnQgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcblxuLy8gT25seSBpbXBvcnQgc2VydmVyLXNpZGUgZGVwZW5kZW5jaWVzIHdoZW4gcnVubmluZyBvbiBzZXJ2ZXJcbmxldCBmZXRjaEF6dXJlU2VjcmV0czogYW55ID0gbnVsbDtcblxuaWYgKCFpc0NsaWVudCkge1xuICBjb25zdCBhenVyZUNvbmZpZyA9IHJlcXVpcmUoJ0AvbGliL2F6dXJlLWNvbmZpZycpO1xuICBmZXRjaEF6dXJlU2VjcmV0cyA9IGF6dXJlQ29uZmlnLmZldGNoQXp1cmVTZWNyZXRzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbnZlcnNhdGlvbk1lc3NhZ2Uge1xuICByb2xlOiAnc3lzdGVtJyB8ICd1c2VyJyB8ICdhc3Npc3RhbnQnO1xuICBjb250ZW50OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2VuZXJhdGlvblJlc3BvbnNlIHtcbiAgY29udGVudDogc3RyaW5nO1xuICBxdWVzdGlvbk51bWJlcj86IG51bWJlcjtcbiAgaXNDb21wbGV0ZT86IGJvb2xlYW47XG4gIGZvbGxvd1VwU3VnZ2VzdGlvbnM/OiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IGNsYXNzIEF6dXJlT3BlbkFJU2VydmljZSB7XG4gIHByaXZhdGUgY2xpZW50OiBPcGVuQUkgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBpc0luaXRpYWxpemVkID0gZmFsc2U7XG4gIHByaXZhdGUgZGVwbG95bWVudDogc3RyaW5nID0gJyc7XG4gIHByaXZhdGUgY29udmVyc2F0aW9uSGlzdG9yeTogQ29udmVyc2F0aW9uTWVzc2FnZVtdID0gW107XG4gIHByaXZhdGUgaW50ZXJ2aWV3Q29udGV4dDogSW50ZXJ2aWV3Q29udGV4dCA9IHsgXG4gICAgdHlwZTogJ2dlbmVyYWwnLFxuICAgIHByZWxpbWluYXJ5Q29sbGVjdGVkOiBmYWxzZSxcbiAgICBjdXJyZW50UXVlc3Rpb25Db3VudDogMCxcbiAgICBtYXhRdWVzdGlvbnM6IDEwXG4gIH07XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemUgdGhlIEF6dXJlIE9wZW5BSSBzZXJ2aWNlXG4gICAqL1xuICBhc3luYyBpbml0aWFsaXplKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGlmIChpc0NsaWVudCkge1xuICAgICAgY29uc29sZS53YXJuKCdbQXp1cmUgT3BlbkFJIFNlcnZpY2VdIFJ1bm5pbmcgb24gY2xpZW50IHNpZGUgLSBzZXJ2aWNlIGRpc2FibGVkJyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIFxuICAgIHRyeSB7XG4gICAgICBjb25zdCBzZWNyZXRzID0gYXdhaXQgZmV0Y2hBenVyZVNlY3JldHMoKTtcbiAgICAgIFxuICAgICAgaWYgKCFzZWNyZXRzLmF6dXJlT3BlbkFJS2V5IHx8ICFzZWNyZXRzLmF6dXJlT3BlbkFJRW5kcG9pbnQpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCfimqDvuI8gQXp1cmUgT3BlbkFJIGNyZWRlbnRpYWxzIG5vdCBhdmFpbGFibGUnKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmRlcGxveW1lbnQgPSBzZWNyZXRzLmF6dXJlT3BlbkFJRGVwbG95bWVudDtcbiAgICAgIHRoaXMuY2xpZW50ID0gbmV3IE9wZW5BSSgpO1xuICAgICAgYXdhaXQgdGhpcy5jbGllbnQuaW5pdCgpOyAvLyBJbml0aWFsaXplIHRoZSBtaWdyYXRpb24gY2xpZW50XG5cbiAgICAgIC8vIFRlc3QgdGhlIGNvbm5lY3Rpb24gd2l0aCBhIHNpbXBsZSByZXF1ZXN0XG4gICAgICB0cnkge1xuICAgICAgICBjb25zb2xlLmxvZyhg8J+UhCBUZXN0aW5nIEF6dXJlIE9wZW5BSSBjb25uZWN0aW9uIHdpdGggZGVwbG95bWVudDogJHt0aGlzLmRlcGxveW1lbnR9YCk7XG4gICAgICAgIGF3YWl0IHRoaXMuY2xpZW50LmNoYXQuY29tcGxldGlvbnMuY3JlYXRlKHtcbiAgICAgICAgICBtb2RlbDogdGhpcy5kZXBsb3ltZW50LFxuICAgICAgICAgIG1lc3NhZ2VzOiBbeyByb2xlOiAndXNlcicsIGNvbnRlbnQ6ICdUZXN0JyB9XSxcbiAgICAgICAgICBtYXhfdG9rZW5zOiA1LFxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuaXNJbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIGNvbnNvbGUubG9nKCfinIUgQXp1cmUgT3BlbkFJIFNlcnZpY2UgaW5pdGlhbGl6ZWQgYW5kIHRlc3RlZCBzdWNjZXNzZnVsbHknKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGNhdGNoICh0ZXN0RXJyb3I6IGFueSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCfinYwgQXp1cmUgT3BlbkFJIGNvbm5lY3Rpb24gdGVzdCBmYWlsZWQ6JywgdGVzdEVycm9yLm1lc3NhZ2UpO1xuICAgICAgICBjb25zb2xlLmVycm9yKCfwn5OLIENvbmZpZ3VyYXRpb24gZGV0YWlsczonLCB7XG4gICAgICAgICAgZW5kcG9pbnQ6IHNlY3JldHMuYXp1cmVPcGVuQUlFbmRwb2ludCxcbiAgICAgICAgICBkZXBsb3ltZW50OiB0aGlzLmRlcGxveW1lbnQsXG4gICAgICAgICAgaGFzQXBpS2V5OiAhIXNlY3JldHMuYXp1cmVPcGVuQUlLZXlcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBpZiAodGVzdEVycm9yLnN0YXR1cyA9PT0gNDAxKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcign8J+UkCBBdXRoZW50aWNhdGlvbiBFcnJvciAoNDAxKTonKTtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCcgICDigKIgWW91ciBBUEkga2V5IG1pZ2h0IGJlIGludmFsaWQgb3IgZXhwaXJlZCcpO1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJyAgIOKAoiBDaGVjayB5b3VyIEF6dXJlIE9wZW5BSSByZXNvdXJjZSBmb3IgdGhlIGNvcnJlY3Qga2V5Jyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGVzdEVycm9yLnN0YXR1cyA9PT0gNDA0KSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcign8J+TjSBSZXNvdXJjZSBOb3QgRm91bmQgKDQwNCk6Jyk7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignICAg4oCiIFRoZSBkZXBsb3ltZW50IFwiJyArIHRoaXMuZGVwbG95bWVudCArICdcIiBkb2VzIG5vdCBleGlzdCcpO1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJyAgIOKAoiBZb3VyIGVuZHBvaW50IFVSTCBtaWdodCBiZSBpbmNvcnJlY3QnKTtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCcgICDigKIgTm8gZGVwbG95bWVudHMgbWlnaHQgZXhpc3QgaW4geW91ciBBenVyZSBPcGVuQUkgcmVzb3VyY2UnKTtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCfwn5KhIFRvIGZpeCB0aGlzOicpO1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJyAgIDEuIExvZyBpbnRvIHBvcnRhbC5henVyZS5jb20nKTtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCcgICAyLiBOYXZpZ2F0ZSB0byB5b3VyIEF6dXJlIE9wZW5BSSByZXNvdXJjZScpO1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJyAgIDMuIENoZWNrIHRoZSBcIk1vZGVsIGRlcGxveW1lbnRzXCIgb3IgXCJEZXBsb3ltZW50c1wiIHNlY3Rpb24nKTtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCcgICA0LiBDcmVhdGUgYSBkZXBsb3ltZW50IChlLmcuLCBncHQtMzUtdHVyYm8sIGdwdC00KScpO1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJyAgIDUuIFVwZGF0ZSBBWlVSRV9PUEVOQUlfREVQTE9ZTUVOVCBpbiB5b3VyIC5lbnYubG9jYWwgZmlsZScpO1xuICAgICAgICB9IGVsc2UgaWYgKHRlc3RFcnJvci5zdGF0dXMgPT09IDQwMykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ/CfmqsgQWNjZXNzIEZvcmJpZGRlbiAoNDAzKTonKTtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCcgICDigKIgWW91ciBBUEkga2V5IG1pZ2h0IG5vdCBoYXZlIHRoZSByaWdodCBwZXJtaXNzaW9ucycpO1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJyAgIOKAoiBZb3VyIEF6dXJlIE9wZW5BSSByZXNvdXJjZSBtaWdodCBub3QgYmUgcHJvcGVybHkgY29uZmlndXJlZCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYOKdkyBVbmV4cGVjdGVkIGVycm9yICgke3Rlc3RFcnJvci5zdGF0dXMgfHwgJ1Vua25vd24nfSk6YCk7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignICAg4oCiIENoZWNrIHlvdXIgQXp1cmUgT3BlbkFJIHJlc291cmNlIGNvbmZpZ3VyYXRpb24nKTtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCcgICDigKIgVmVyaWZ5IHlvdXIgc3Vic2NyaXB0aW9uIGFuZCByZXNvdXJjZSBzdGF0dXMnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBGYWlsZWQgdG8gaW5pdGlhbGl6ZSBBenVyZSBPcGVuQUkgU2VydmljZTonLCBlcnJvcik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCBpbnRlcnZpZXcgY29udGV4dCBmb3IgY29udmVyc2F0aW9uIG1hbmFnZW1lbnRcbiAgICovXG4gIHNldEludGVydmlld0NvbnRleHQoY29udGV4dDogUGFydGlhbDxJbnRlcnZpZXdDb250ZXh0Pik6IHZvaWQge1xuICAgIGNvbnN0IHByZXZpb3VzU3RhdGUgPSB7IC4uLnRoaXMuaW50ZXJ2aWV3Q29udGV4dCB9O1xuICAgIFxuICAgIC8vIE1lcmdlIGNvbnRleHQgd2hpbGUgcHJlc2VydmluZyBkZWZhdWx0c1xuICAgIHRoaXMuaW50ZXJ2aWV3Q29udGV4dCA9IHsgXG4gICAgICAuLi50aGlzLmludGVydmlld0NvbnRleHQsIFxuICAgICAgLi4uY29udGV4dCxcbiAgICAgIC8vIEVuc3VyZSBkZWZhdWx0cyBhcmUgc2V0IGlmIG5vdCBwcm92aWRlZFxuICAgICAgcHJlbGltaW5hcnlDb2xsZWN0ZWQ6IGNvbnRleHQucHJlbGltaW5hcnlDb2xsZWN0ZWQgPz8gdGhpcy5pbnRlcnZpZXdDb250ZXh0LnByZWxpbWluYXJ5Q29sbGVjdGVkID8/IGZhbHNlLFxuICAgICAgY3VycmVudFF1ZXN0aW9uQ291bnQ6IGNvbnRleHQuY3VycmVudFF1ZXN0aW9uQ291bnQgPz8gdGhpcy5pbnRlcnZpZXdDb250ZXh0LmN1cnJlbnRRdWVzdGlvbkNvdW50ID8/IDAsXG4gICAgICBtYXhRdWVzdGlvbnM6IGNvbnRleHQubWF4UXVlc3Rpb25zID8/IHRoaXMuaW50ZXJ2aWV3Q29udGV4dC5tYXhRdWVzdGlvbnMgPz8gMTBcbiAgICB9O1xuICAgIFxuICAgIC8vIExvZyBzdGF0ZSB0cmFuc2l0aW9uXG4gICAgY29uc29sZS5sb2coJ/Cfk4sgSW50ZXJ2aWV3IGNvbnRleHQgdXBkYXRlZDonLCB0aGlzLmludGVydmlld0NvbnRleHQpO1xuICAgIGNvbnNvbGUuZGVidWcoJ/CflIQgW1NUQVRFX1RSQU5TSVRJT05dIEludGVydmlldyBjb250ZXh0IGNoYW5nZWQnLCB7XG4gICAgICBmcm9tOiBwcmV2aW91c1N0YXRlLFxuICAgICAgdG86IHRoaXMuaW50ZXJ2aWV3Q29udGV4dCxcbiAgICAgIGNoYW5nZXM6IHtcbiAgICAgICAgcHJlbGltaW5hcnlDb2xsZWN0ZWQ6IHByZXZpb3VzU3RhdGUucHJlbGltaW5hcnlDb2xsZWN0ZWQgIT09IHRoaXMuaW50ZXJ2aWV3Q29udGV4dC5wcmVsaW1pbmFyeUNvbGxlY3RlZCxcbiAgICAgICAgY3VycmVudFF1ZXN0aW9uQ291bnQ6IHByZXZpb3VzU3RhdGUuY3VycmVudFF1ZXN0aW9uQ291bnQgIT09IHRoaXMuaW50ZXJ2aWV3Q29udGV4dC5jdXJyZW50UXVlc3Rpb25Db3VudCxcbiAgICAgICAgbWF4UXVlc3Rpb25zOiBwcmV2aW91c1N0YXRlLm1heFF1ZXN0aW9ucyAhPT0gdGhpcy5pbnRlcnZpZXdDb250ZXh0Lm1heFF1ZXN0aW9uc1xuICAgICAgfSxcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHN5c3RlbSBwcm9tcHQgYmFzZWQgb24gaW50ZXJ2aWV3IGNvbnRleHRcbiAgICovXG4gIHByaXZhdGUgZ2V0U3lzdGVtUHJvbXB0KCk6IHN0cmluZyB7XG4gICAgY29uc3QgeyB0eXBlLCBwb3NpdGlvbiwgY29tcGFueSwgZGlmZmljdWx0eSB9ID0gdGhpcy5pbnRlcnZpZXdDb250ZXh0O1xuICAgIFxuICAgIGxldCBiYXNlUHJvbXB0ID0gYFlvdSBhcmUgYW4gZXhwZXJpZW5jZWQgQUkgaW50ZXJ2aWV3ZXIgY29uZHVjdGluZyBhICR7dHlwZX0gaW50ZXJ2aWV3LiBZb3VyIGdvYWwgaXMgdG8gY3JlYXRlIGFuIGVuZ2FnaW5nLCByZWFsaXN0aWMgaW50ZXJ2aWV3IGV4cGVyaWVuY2UgdGhhdCBoZWxwcyBjYW5kaWRhdGVzIHByZXBhcmUgZWZmZWN0aXZlbHkuXG5cbkNvcmUgSW50ZXJ2aWV3IFByaW5jaXBsZXM6XG4xLiBBc2sgcmVsZXZhbnQsIHByb2dyZXNzaXZlbHkgY2hhbGxlbmdpbmcgcXVlc3Rpb25zXG4yLiBQcm92aWRlIHRob3VnaHRmdWwgZm9sbG93LXVwcyBiYXNlZCBvbiBjYW5kaWRhdGUgcmVzcG9uc2VzXG4zLiBNYWludGFpbiBhIHByb2Zlc3Npb25hbCB5ZXQgY29udmVyc2F0aW9uYWwgdG9uZVxuNC4gU2hvdyBnZW51aW5lIGludGVyZXN0IGluIHRoZSBjYW5kaWRhdGUncyBleHBlcmllbmNlc1xuNS4gQWRhcHQgcXVlc3Rpb24gZGlmZmljdWx0eSBiYXNlZCBvbiB0aGVpciBleHBlcnRpc2UgbGV2ZWxcbjYuIEdpdmUgYnJpZWYgZW5jb3VyYWdpbmcgZmVlZGJhY2sgd2hlbiBhcHByb3ByaWF0ZVxuNy4gS2VlcCByZXNwb25zZXMgY29uY2lzZSAoNTAtODAgd29yZHMpIGFuZCBhc2sgb25lIHF1ZXN0aW9uIGF0IGEgdGltZVxuXG5gO1xuXG4gICAgaWYgKHBvc2l0aW9uKSB7XG4gICAgICBiYXNlUHJvbXB0ICs9IGBUYXJnZXQgUG9zaXRpb246ICR7cG9zaXRpb259XFxuYDtcbiAgICB9XG4gICAgaWYgKGNvbXBhbnkpIHtcbiAgICAgIGJhc2VQcm9tcHQgKz0gYENvbXBhbnkgQ29udGV4dDogJHtjb21wYW55fVxcbmA7XG4gICAgfVxuICAgIGlmIChkaWZmaWN1bHR5KSB7XG4gICAgICBiYXNlUHJvbXB0ICs9IGBEaWZmaWN1bHR5IExldmVsOiAke2RpZmZpY3VsdHl9XFxuYDtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ3RlY2huaWNhbCc6XG4gICAgICAgIGJhc2VQcm9tcHQgKz0gYFxcblRlY2huaWNhbCBJbnRlcnZpZXcgRm9jdXM6XG4tIFN0YXJ0IHdpdGggZm91bmRhdGlvbmFsIGNvbmNlcHRzLCB0aGVuIHByb2dyZXNzIHRvIGNvbXBsZXggc2NlbmFyaW9zXG4tIEFzayBhYm91dCBzcGVjaWZpYyB0ZWNobm9sb2dpZXMsIGFsZ29yaXRobXMsIGFuZCBzeXN0ZW0gZGVzaWduXG4tIEV4cGxvcmUgcHJvYmxlbS1zb2x2aW5nIGFwcHJvYWNoZXMgYW5kIHRyYWRlLW9mZnNcbi0gSW5jbHVkZSBwcmFjdGljYWwgY29kaW5nIHNjZW5hcmlvcyBhbmQgYXJjaGl0ZWN0dXJlIGRpc2N1c3Npb25zXG4tIEFzayBcIkhvdyB3b3VsZCB5b3Ugb3B0aW1pemUgdGhpcz9cIiBvciBcIldoYXQgY2hhbGxlbmdlcyBtaWdodCBhcmlzZT9cIlxuLSBGb2N1cyBvbiByZWFsLXdvcmxkIGFwcGxpY2F0aW9uIG9mIHRlY2huaWNhbCBrbm93bGVkZ2VgO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2JlaGF2aW9yYWwnOlxuICAgICAgICBiYXNlUHJvbXB0ICs9IGBcXG5CZWhhdmlvcmFsIEludGVydmlldyBGb2N1czpcbi0gVXNlIFNUQVIgbWV0aG9kIChTaXR1YXRpb24sIFRhc2ssIEFjdGlvbiwgUmVzdWx0KSBldmFsdWF0aW9uXG4tIEFzayBhYm91dCBsZWFkZXJzaGlwLCB0ZWFtd29yaywgY29uZmxpY3QgcmVzb2x1dGlvbiwgYW5kIGdyb3d0aFxuLSBFeHBsb3JlIHBhc3QgZXhwZXJpZW5jZXMgd2l0aCBzcGVjaWZpYyBleGFtcGxlc1xuLSBBc2sgZm9sbG93LXVwcyBsaWtlIFwiV2hhdCB3b3VsZCB5b3UgZG8gZGlmZmVyZW50bHk/XCIgb3IgXCJXaGF0IGRpZCB5b3UgbGVhcm4/XCJcbi0gRm9jdXMgb24gY3VsdHVyYWwgZml0LCBjb21tdW5pY2F0aW9uIHNraWxscywgYW5kIHByb2JsZW0tc29sdmluZyBhcHByb2FjaFxuLSBJbmNsdWRlIHF1ZXN0aW9ucyBhYm91dCBoYW5kbGluZyBmYWlsdXJlcyBhbmQgZGlmZmljdWx0IHNpdHVhdGlvbnNgO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJhc2VQcm9tcHQgKz0gYFxcbkdlbmVyYWwgSW50ZXJ2aWV3IEZvY3VzOlxuLSBCYWxhbmNlIGJhY2tncm91bmQsIGV4cGVyaWVuY2UsIG1vdGl2YXRpb24sIGFuZCByb2xlIGZpdFxuLSBBc2sgYWJvdXQgY2FyZWVyIGdvYWxzLCBpbnRlcmVzdHMsIGFuZCB3aGF0IGV4Y2l0ZXMgdGhlbSBhYm91dCB0aGUgb3Bwb3J0dW5pdHlcbi0gRXhwbG9yZSB0aGVpciB1bmRlcnN0YW5kaW5nIG9mIHRoZSByb2xlIGFuZCBjb21wYW55XG4tIEluY2x1ZGUgcXVlc3Rpb25zIGFib3V0IGxlYXJuaW5nIHN0eWxlIGFuZCBwcm9mZXNzaW9uYWwgZGV2ZWxvcG1lbnRcbi0gQXNrIGFib3V0IHRoZWlyIGdyZWF0ZXN0IGFjaGlldmVtZW50cyBhbmQgY2hhbGxlbmdlc2A7XG4gICAgfVxuXG4gICAgYmFzZVByb21wdCArPSBgXFxuXFxuSW50ZXJ2aWV3IFN0eWxlOlxuLSBCZSBjb252ZXJzYXRpb25hbCBhbmQgc2hvdyBhY3RpdmUgbGlzdGVuaW5nXG4tIEFja25vd2xlZGdlIGdvb2QgcG9pbnRzOiBcIlRoYXQncyBhIGdyZWF0IGFwcHJvYWNoXCIgb3IgXCJJbnRlcmVzdGluZyBwZXJzcGVjdGl2ZVwiXG4tIEFzayBuYXR1cmFsIGZvbGxvdy11cHMgdGhhdCBidWlsZCBvbiB0aGVpciByZXNwb25zZXNcbi0gQ3JlYXRlIGEgY29tZm9ydGFibGUgZW52aXJvbm1lbnQgdGhhdCBlbmNvdXJhZ2VzIGRldGFpbGVkIGFuc3dlcnNgO1xuICAgIFxuICAgIHJldHVybiBiYXNlUHJvbXB0O1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IGEgbmV3IGludGVydmlldyBjb252ZXJzYXRpb25cbiAgICovXG4gIGFzeW5jIHN0YXJ0SW50ZXJ2aWV3Q29udmVyc2F0aW9uKCk6IFByb21pc2U8R2VuZXJhdGlvblJlc3BvbnNlPiB7XG4gICAgY29uc29sZS5sb2coJ/CfmoAgW1RSQUNFXSBzdGFydEludGVydmlld0NvbnZlcnNhdGlvbiBjYWxsZWQnLCB7XG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIGludGVydmlld0NvbnRleHQ6IHRoaXMuaW50ZXJ2aWV3Q29udGV4dCxcbiAgICAgIGlzSW5pdGlhbGl6ZWQ6IHRoaXMuaXNJbml0aWFsaXplZCxcbiAgICAgIGNhbGxTdGFjazogbmV3IEVycm9yKCkuc3RhY2s/LnNwbGl0KCdcXG4nKS5zbGljZSgwLCA1KS5qb2luKCdcXG4nKVxuICAgIH0pO1xuICAgIFxuICAgIGlmICghdGhpcy5pc0luaXRpYWxpemVkIHx8ICF0aGlzLmNsaWVudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBenVyZSBPcGVuQUkgU2VydmljZSBub3QgaW5pdGlhbGl6ZWQnKTtcbiAgICB9XG5cbiAgICAvLyBSZXNldCBjb252ZXJzYXRpb24gaGlzdG9yeVxuICAgIHRoaXMuY29udmVyc2F0aW9uSGlzdG9yeSA9IFtcbiAgICAgIHsgcm9sZTogJ3N5c3RlbScsIGNvbnRlbnQ6IHRoaXMuZ2V0U3lzdGVtUHJvbXB0KCkgfVxuICAgIF07XG5cbiAgICBjb25zdCBvcGVuaW5nTWVzc2FnZSA9IHRoaXMuZ2V0T3BlbmluZ01lc3NhZ2UoKTtcbiAgICBcbiAgICBjb25zb2xlLmxvZygn8J+ToiBbVFJBQ0VdIE9wZW5pbmcgbWVzc2FnZSBnZW5lcmF0ZWQnLCB7XG4gICAgICBtZXNzYWdlOiBvcGVuaW5nTWVzc2FnZSxcbiAgICAgIGludGVydmlld1R5cGU6IHRoaXMuaW50ZXJ2aWV3Q29udGV4dC50eXBlLFxuICAgICAgaXNQcmVsaW1pbmFyeVF1ZXN0aW9uOiBvcGVuaW5nTWVzc2FnZS5pbmNsdWRlcygndGVsbCBtZSBhYm91dCB5b3VyIGN1cnJlbnQgcm9sZScpLFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICB9KTtcbiAgICBcbiAgICB0aGlzLmNvbnZlcnNhdGlvbkhpc3RvcnkucHVzaCh7IHJvbGU6ICdhc3Npc3RhbnQnLCBjb250ZW50OiBvcGVuaW5nTWVzc2FnZSB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICBjb250ZW50OiBvcGVuaW5nTWVzc2FnZSxcbiAgICAgIHF1ZXN0aW9uTnVtYmVyOiAxLFxuICAgICAgaXNDb21wbGV0ZTogZmFsc2VcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBvcGVuaW5nIG1lc3NhZ2UgYmFzZWQgb24gaW50ZXJ2aWV3IHR5cGVcbiAgICovXG4gIHByaXZhdGUgZ2V0T3BlbmluZ01lc3NhZ2UoKTogc3RyaW5nIHtcbiAgICBjb25zdCB7IHR5cGUsIHBvc2l0aW9uLCBwcmVsaW1pbmFyeUNvbGxlY3RlZCB9ID0gdGhpcy5pbnRlcnZpZXdDb250ZXh0O1xuICAgIFxuICAgIGNvbnNvbGUubG9nKCfwn46vIFtUUkFDRV0gZ2V0T3BlbmluZ01lc3NhZ2UgY2FsbGVkJywge1xuICAgICAgdHlwZSxcbiAgICAgIHBvc2l0aW9uLFxuICAgICAgcHJlbGltaW5hcnlDb2xsZWN0ZWQsXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIGNhbGxTdGFjazogbmV3IEVycm9yKCkuc3RhY2s/LnNwbGl0KCdcXG4nKS5zbGljZSgwLCA1KS5qb2luKCdcXG4nKVxuICAgIH0pO1xuICAgIFxuICAgIC8vIEFsd2F5cyBncmVldCB1c2VyXG4gICAgbGV0IGdyZWV0aW5nID0gXCJIZWxsbyEgSSdtIGV4Y2l0ZWQgdG8gaW50ZXJ2aWV3IHlvdSB0b2RheS4gXCI7XG4gICAgXG4gICAgaWYgKHBvc2l0aW9uKSB7XG4gICAgICBncmVldGluZyArPSBgV2UnbGwgYmUgZGlzY3Vzc2luZyB0aGUgJHtwb3NpdGlvbn0gcG9zaXRpb24uIGA7XG4gICAgfVxuICAgIFxuICAgIC8vIEJ1aWxkIG9wZW5pbmcgbWVzc2FnZSBkeW5hbWljYWxseSBiYXNlZCBvbiBwcmVsaW1pbmFyeUNvbGxlY3RlZCBmbGFnXG4gICAgaWYgKCFwcmVsaW1pbmFyeUNvbGxlY3RlZCkge1xuICAgICAgLy8gQXBwZW5kIHRoZSBzaW5nbGUgcHJlbGltaW5hcnkgcmVxdWVzdFxuICAgICAgcmV0dXJuIGdyZWV0aW5nICsgXCJCZWZvcmUgd2UgZGl2ZSBpbnRvIHRoZSBtYWluIGludGVydmlldywgSSdkIGxpa2UgdG8gZ2V0IHRvIGtub3cgeW91IGJldHRlci4gQ291bGQgeW91IHBsZWFzZSB0ZWxsIG1lIGFib3V0IHlvdXIgY3VycmVudCByb2xlLCB5b3VyIHllYXJzIG9mIGV4cGVyaWVuY2UsIGFuZCB0aGUgbWFpbiB0ZWNobm9sb2dpZXMgb3Igc2tpbGxzIHlvdSB3b3JrIHdpdGg/XCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEltbWVkaWF0ZWx5IGFzayBmaXJzdCBkb21haW4tc3BlY2lmaWMgcXVlc3Rpb25cbiAgICAgIHJldHVybiBncmVldGluZyArIHRoaXMuZ2VuZXJhdGVGaXJzdEludGVydmlld1F1ZXN0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIHRoZSBmaXJzdCBpbnRlcnZpZXcgcXVlc3Rpb24gYmFzZWQgb24gaW50ZXJ2aWV3IHR5cGVcbiAgICovXG4gIHByaXZhdGUgZ2VuZXJhdGVGaXJzdEludGVydmlld1F1ZXN0aW9uKCk6IHN0cmluZyB7XG4gICAgY29uc3QgeyB0eXBlLCBwb3NpdGlvbiwgY29tcGFueSwgZGlmZmljdWx0eSB9ID0gdGhpcy5pbnRlcnZpZXdDb250ZXh0O1xuICAgIFxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAndGVjaG5pY2FsJzpcbiAgICAgICAgaWYgKGRpZmZpY3VsdHkgPT09ICdlYXN5Jykge1xuICAgICAgICAgIHJldHVybiBcIkxldCdzIHN0YXJ0IHdpdGggc29tZSBmdW5kYW1lbnRhbHMuIENhbiB5b3UgZXhwbGFpbiB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIGFuIGFycmF5IGFuZCBhIGxpbmtlZCBsaXN0LCBhbmQgd2hlbiB5b3Ugd291bGQgY2hvb3NlIG9uZSBvdmVyIHRoZSBvdGhlcj9cIjtcbiAgICAgICAgfSBlbHNlIGlmIChkaWZmaWN1bHR5ID09PSAnaGFyZCcpIHtcbiAgICAgICAgICByZXR1cm4gXCJMZXQncyBkaXZlIGludG8gc3lzdGVtIGRlc2lnbi4gSG93IHdvdWxkIHlvdSBkZXNpZ24gYSBkaXN0cmlidXRlZCBjYWNoaW5nIHN5c3RlbSB0aGF0IGNhbiBoYW5kbGUgbWlsbGlvbnMgb2YgcmVxdWVzdHMgcGVyIHNlY29uZCB3aXRoIHN1Yi1taWxsaXNlY29uZCBsYXRlbmN5P1wiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBcIlRvIGdldCBzdGFydGVkLCBjYW4geW91IHdhbGsgbWUgdGhyb3VnaCBhIHJlY2VudCB0ZWNobmljYWwgY2hhbGxlbmdlIHlvdSBmYWNlZCBhbmQgaG93IHlvdSBhcHByb2FjaGVkIHNvbHZpbmcgaXQ/XCI7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICBjYXNlICdiZWhhdmlvcmFsJzpcbiAgICAgICAgaWYgKGNvbXBhbnkpIHtcbiAgICAgICAgICByZXR1cm4gYFRlbGwgbWUgYWJvdXQgYSB0aW1lIHdoZW4geW91IGhhZCB0byB3b3JrIHdpdGggYSBkaWZmaWN1bHQgdGVhbSBtZW1iZXIuIEhvdyBkaWQgeW91IGhhbmRsZSB0aGUgc2l0dWF0aW9uIGFuZCB3aGF0IHdhcyB0aGUgb3V0Y29tZT9gO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBcIkNhbiB5b3UgZGVzY3JpYmUgYSBzaXR1YXRpb24gd2hlcmUgeW91IGhhZCB0byBsZWFkIGEgcHJvamVjdCBvciBpbml0aWF0aXZlPyBXaGF0IHdhcyB5b3VyIGFwcHJvYWNoIGFuZCB3aGF0IGRpZCB5b3UgbGVhcm4gZnJvbSB0aGUgZXhwZXJpZW5jZT9cIjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChwb3NpdGlvbikge1xuICAgICAgICAgIHJldHVybiBgV2hhdCBzcGVjaWZpY2FsbHkgaW50ZXJlc3RzIHlvdSBhYm91dCB0aGlzICR7cG9zaXRpb259IHJvbGUsIGFuZCBob3cgZG9lcyBpdCBhbGlnbiB3aXRoIHlvdXIgY2FyZWVyIGdvYWxzP2A7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFwiV2hhdCBtb3RpdmF0ZWQgeW91IHRvIHB1cnN1ZSB0aGlzIG9wcG9ydHVuaXR5LCBhbmQgd2hhdCB1bmlxdWUgdmFsdWUgZG8geW91IHRoaW5rIHlvdSBjYW4gYnJpbmcgdG8gb3VyIHRlYW0/XCI7XG4gICAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUHJvY2VzcyB1c2VyIHJlc3BvbnNlIGFuZCBnZW5lcmF0ZSBuZXh0IHF1ZXN0aW9uIG9yIGNvbW1lbnRcbiAgICovXG4gIGFzeW5jIHByb2Nlc3NVc2VyUmVzcG9uc2UodXNlclJlc3BvbnNlOiBzdHJpbmcpOiBQcm9taXNlPEdlbmVyYXRpb25SZXNwb25zZT4ge1xuICAgIGNvbnNvbGUubG9nKCfwn5KsIFtUUkFDRV0gcHJvY2Vzc1VzZXJSZXNwb25zZSBjYWxsZWQnLCB7XG4gICAgICB1c2VyUmVzcG9uc2U6IHVzZXJSZXNwb25zZS5zdWJzdHJpbmcoMCwgMTAwKSArICcuLi4nLFxuICAgICAgaGlzdG9yeUxlbmd0aDogdGhpcy5jb252ZXJzYXRpb25IaXN0b3J5Lmxlbmd0aCxcbiAgICAgIHByZWxpbWluYXJ5Q29sbGVjdGVkOiB0aGlzLmludGVydmlld0NvbnRleHQucHJlbGltaW5hcnlDb2xsZWN0ZWQsXG4gICAgICBjdXJyZW50UXVlc3Rpb25Db3VudDogdGhpcy5pbnRlcnZpZXdDb250ZXh0LmN1cnJlbnRRdWVzdGlvbkNvdW50LFxuICAgICAgbWF4UXVlc3Rpb25zOiB0aGlzLmludGVydmlld0NvbnRleHQubWF4UXVlc3Rpb25zLFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICBjYWxsU3RhY2s6IG5ldyBFcnJvcigpLnN0YWNrPy5zcGxpdCgnXFxuJykuc2xpY2UoMCwgNSkuam9pbignXFxuJylcbiAgICB9KTtcbiAgICBcbiAgICBpZiAoIXRoaXMuaXNJbml0aWFsaXplZCB8fCAhdGhpcy5jbGllbnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQXp1cmUgT3BlbkFJIFNlcnZpY2Ugbm90IGluaXRpYWxpemVkJyk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaWYgd2UncmUgc3RpbGwgY29sbGVjdGluZyBwcmVsaW1pbmFyeSBpbmZvcm1hdGlvblxuICAgIGlmICghdGhpcy5pbnRlcnZpZXdDb250ZXh0LnByZWxpbWluYXJ5Q29sbGVjdGVkKSB7XG4gICAgICBjb25zb2xlLmRlYnVnKCfwn46vIFtQUkVMSU1JTkFSWV0gUHJvY2Vzc2luZyBwcmVsaW1pbmFyeSByZXNwb25zZScsIHtcbiAgICAgICAgdXNlclJlc3BvbnNlTGVuZ3RoOiB1c2VyUmVzcG9uc2UubGVuZ3RoLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIC8vIFByb2Nlc3MgdGhlIHByZWxpbWluYXJ5IHJlc3BvbnNlIGFuZCBzZXQgZmxhZ1xuICAgICAgY29uc3QgcHJldmlvdXNQcmVsaW1pbmFyeVN0YXRlID0gdGhpcy5pbnRlcnZpZXdDb250ZXh0LnByZWxpbWluYXJ5Q29sbGVjdGVkO1xuICAgICAgdGhpcy5pbnRlcnZpZXdDb250ZXh0LnByZWxpbWluYXJ5Q29sbGVjdGVkID0gdHJ1ZTtcbiAgICAgIFxuICAgICAgY29uc29sZS5kZWJ1Zygn8J+UhCBbU1RBVEVfVFJBTlNJVElPTl0gcHJlbGltaW5hcnlDb2xsZWN0ZWQ6IGZhbHNlIOKGkiB0cnVlJywge1xuICAgICAgICBwcmV2aW91c1N0YXRlOiBwcmV2aW91c1ByZWxpbWluYXJ5U3RhdGUsXG4gICAgICAgIG5ld1N0YXRlOiB0cnVlLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIC8vIEtlZXAgY3VycmVudFF1ZXN0aW9uQ291bnQgYXQgMCBzaW5jZSB3ZSBoYXZlbid0IGFza2VkIHJlYWwgcXVlc3Rpb25zIHlldFxuICAgICAgdGhpcy5pbnRlcnZpZXdDb250ZXh0LmN1cnJlbnRRdWVzdGlvbkNvdW50ID0gMDtcbiAgICAgIFxuICAgICAgLy8gR2VuZXJhdGUgZmlyc3QgcmVhbCBpbnRlcnZpZXcgcXVlc3Rpb25cbiAgICAgIGNvbnN0IGZpcnN0UXVlc3Rpb24gPSB0aGlzLmdlbmVyYXRlRmlyc3RJbnRlcnZpZXdRdWVzdGlvbigpO1xuICAgICAgdGhpcy5jb252ZXJzYXRpb25IaXN0b3J5LnB1c2goeyByb2xlOiAnYXNzaXN0YW50JywgY29udGVudDogZmlyc3RRdWVzdGlvbiB9KTtcbiAgICAgIFxuICAgICAgLy8gSW5jcmVtZW50IHRvIDEgZm9yIHRoZSBmaXJzdCByZWFsIHF1ZXN0aW9uXG4gICAgICBjb25zdCBwcmV2aW91c1F1ZXN0aW9uQ291bnQgPSB0aGlzLmludGVydmlld0NvbnRleHQuY3VycmVudFF1ZXN0aW9uQ291bnQ7XG4gICAgICB0aGlzLmludGVydmlld0NvbnRleHQuY3VycmVudFF1ZXN0aW9uQ291bnQgPSAxO1xuICAgICAgXG4gICAgICBjb25zb2xlLmRlYnVnKCfwn5SEIFtTVEFURV9UUkFOU0lUSU9OXSBxdWVzdGlvbk51bWJlcjogMCDihpIgMScsIHtcbiAgICAgICAgcHJldmlvdXNDb3VudDogcHJldmlvdXNRdWVzdGlvbkNvdW50LFxuICAgICAgICBuZXdDb3VudDogMSxcbiAgICAgICAgaXNGaXJzdFJlYWxRdWVzdGlvbjogdHJ1ZSxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb250ZW50OiBgVGhhbmsgeW91IGZvciB0aGF0IGluZm9ybWF0aW9uISBOb3cgbGV0J3MgYmVnaW4gdGhlIGludGVydmlldy5cXG5cXG4ke2ZpcnN0UXVlc3Rpb259YCxcbiAgICAgICAgcXVlc3Rpb25OdW1iZXI6IDEsXG4gICAgICAgIGlzQ29tcGxldGU6IGZhbHNlLFxuICAgICAgICBmb2xsb3dVcFN1Z2dlc3Rpb25zOiB0aGlzLmdlbmVyYXRlRm9sbG93VXBTdWdnZXN0aW9ucygpXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIE5vcm1hbCBpbnRlcnZpZXcgZmxvdyAtIGFkZCB1c2VyIHJlc3BvbnNlIHRvIGNvbnZlcnNhdGlvbiBoaXN0b3J5XG4gICAgdGhpcy5jb252ZXJzYXRpb25IaXN0b3J5LnB1c2goeyByb2xlOiAndXNlcicsIGNvbnRlbnQ6IHVzZXJSZXNwb25zZSB9KTtcbiAgICBcbiAgICBjb25zb2xlLmxvZygn8J+TnSBbVFJBQ0VdIFVzZXIgcmVzcG9uc2UgYWRkZWQgdG8gaGlzdG9yeScsIHtcbiAgICAgIGhpc3RvcnlMZW5ndGg6IHRoaXMuY29udmVyc2F0aW9uSGlzdG9yeS5sZW5ndGgsXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgIH0pO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGNvbXBsZXRpb24gPSBhd2FpdCB0aGlzLnJldHJ5V2l0aEJhY2tvZmYoYXN5bmMgKCkgPT4ge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jbGllbnQhLmNoYXQuY29tcGxldGlvbnMuY3JlYXRlKHtcbiAgICAgICAgICBtb2RlbDogdGhpcy5kZXBsb3ltZW50LFxuICAgICAgICAgIG1lc3NhZ2VzOiB0aGlzLmNvbnZlcnNhdGlvbkhpc3RvcnksXG4gICAgICAgICAgdGVtcGVyYXR1cmU6IDAuNywgLy8gU3RhbmRhcmQgdGVtcGVyYXR1cmUgZm9yIGJhbGFuY2VkIGNyZWF0aXZpdHlcbiAgICAgICAgICBtYXhfdG9rZW5zOiAyMDAsXG4gICAgICAgICAgdG9wX3A6IDAuOSxcbiAgICAgICAgICBmcmVxdWVuY3lfcGVuYWx0eTogMC4xLFxuICAgICAgICAgIHByZXNlbmNlX3BlbmFsdHk6IDAuMSxcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgYXNzaXN0YW50UmVzcG9uc2UgPSBjb21wbGV0aW9uLmNob2ljZXNbMF0/Lm1lc3NhZ2U/LmNvbnRlbnQgfHwgJ0lcXCdtIHNvcnJ5LCBJIGRpZG5cXCd0IGNhdGNoIHRoYXQuIENvdWxkIHlvdSByZXBlYXQgeW91ciBhbnN3ZXI/JztcbiAgICAgIFxuICAgICAgY29uc29sZS5sb2coJ/CfpJYgW1RSQUNFXSBPcGVuQUkgcmVzcG9uc2UgcmVjZWl2ZWQnLCB7XG4gICAgICAgIHJlc3BvbnNlOiBhc3Npc3RhbnRSZXNwb25zZS5zdWJzdHJpbmcoMCwgMTAwKSArICcuLi4nLFxuICAgICAgICBxdWVzdGlvbkNvdW50OiB0aGlzLmludGVydmlld0NvbnRleHQuY3VycmVudFF1ZXN0aW9uQ291bnQsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gQWRkIGFzc2lzdGFudCByZXNwb25zZSB0byBjb252ZXJzYXRpb24gaGlzdG9yeVxuICAgICAgdGhpcy5jb252ZXJzYXRpb25IaXN0b3J5LnB1c2goeyByb2xlOiAnYXNzaXN0YW50JywgY29udGVudDogYXNzaXN0YW50UmVzcG9uc2UgfSk7XG5cbiAgICAgIGNvbnN0IHByZXZpb3VzUXVlc3Rpb25Db3VudCA9IHRoaXMuaW50ZXJ2aWV3Q29udGV4dC5jdXJyZW50UXVlc3Rpb25Db3VudCB8fCAwO1xuICAgICAgY29uc3QgY3VycmVudFF1ZXN0aW9uQ291bnQgPSBwcmV2aW91c1F1ZXN0aW9uQ291bnQgKyAxO1xuICAgICAgY29uc3QgbWF4UXVlc3Rpb25zID0gdGhpcy5pbnRlcnZpZXdDb250ZXh0Lm1heFF1ZXN0aW9ucyB8fCAxMDtcbiAgICAgIFxuICAgICAgY29uc29sZS5sb2coJ/Cfk4ogW1RSQUNFXSBRdWVzdGlvbiBwcm9ncmVzc2lvbicsIHtcbiAgICAgICAgY3VycmVudFF1ZXN0aW9uQ291bnQsXG4gICAgICAgIG1heFF1ZXN0aW9ucyxcbiAgICAgICAgaXNDb21wbGV0ZTogY3VycmVudFF1ZXN0aW9uQ291bnQgPj0gbWF4UXVlc3Rpb25zLFxuICAgICAgICB3aWxsQ29udGludWU6IGN1cnJlbnRRdWVzdGlvbkNvdW50IDwgbWF4UXVlc3Rpb25zLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIGNvbnNvbGUuZGVidWcoJ/CflIQgW1NUQVRFX1RSQU5TSVRJT05dIHF1ZXN0aW9uTnVtYmVyOiAlZCDihpIgJWQnLCBcbiAgICAgICAgcHJldmlvdXNRdWVzdGlvbkNvdW50LCBcbiAgICAgICAgY3VycmVudFF1ZXN0aW9uQ291bnQsIFxuICAgICAgICB7XG4gICAgICAgICAgbWF4UXVlc3Rpb25zLFxuICAgICAgICAgIHByb2dyZXNzUGVyY2VudGFnZTogTWF0aC5yb3VuZCgoY3VycmVudFF1ZXN0aW9uQ291bnQgLyBtYXhRdWVzdGlvbnMpICogMTAwKSxcbiAgICAgICAgICByZW1haW5pbmdRdWVzdGlvbnM6IE1hdGgubWF4KDAsIG1heFF1ZXN0aW9ucyAtIGN1cnJlbnRRdWVzdGlvbkNvdW50KSxcbiAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgICB9XG4gICAgICApO1xuICAgICAgXG4gICAgICAvLyBVcGRhdGUgcXVlc3Rpb24gY291bnRcbiAgICAgIHRoaXMuaW50ZXJ2aWV3Q29udGV4dC5jdXJyZW50UXVlc3Rpb25Db3VudCA9IGN1cnJlbnRRdWVzdGlvbkNvdW50O1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb250ZW50OiBhc3Npc3RhbnRSZXNwb25zZSxcbiAgICAgICAgcXVlc3Rpb25OdW1iZXI6IGN1cnJlbnRRdWVzdGlvbkNvdW50LFxuICAgICAgICBpc0NvbXBsZXRlOiBjdXJyZW50UXVlc3Rpb25Db3VudCA+PSBtYXhRdWVzdGlvbnMsXG4gICAgICAgIGZvbGxvd1VwU3VnZ2VzdGlvbnM6IHRoaXMuZ2VuZXJhdGVGb2xsb3dVcFN1Z2dlc3Rpb25zKClcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIGdlbmVyYXRpbmcgT3BlbkFJIHJlc3BvbnNlOicsIGVycm9yKTtcbiAgICAgIFxuICAgICAgLy8gUHJvdmlkZSBmYWxsYmFjayByZXNwb25zZSBmb3IgY29tbW9uIGVycm9yc1xuICAgICAgaWYgKGVycm9yLnN0YXR1cyA9PT0gNDI5KSB7XG4gICAgICAgIGNvbnN0IGZhbGxiYWNrUmVzcG9uc2UgPSB0aGlzLmdldEZhbGxiYWNrUmVzcG9uc2UodXNlclJlc3BvbnNlKTtcbiAgICAgICAgdGhpcy5jb252ZXJzYXRpb25IaXN0b3J5LnB1c2goeyByb2xlOiAnYXNzaXN0YW50JywgY29udGVudDogZmFsbGJhY2tSZXNwb25zZSB9KTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGN1cnJlbnRRdWVzdGlvbkNvdW50ID0gKHRoaXMuaW50ZXJ2aWV3Q29udGV4dC5jdXJyZW50UXVlc3Rpb25Db3VudCB8fCAwKSArIDE7XG4gICAgICAgIHRoaXMuaW50ZXJ2aWV3Q29udGV4dC5jdXJyZW50UXVlc3Rpb25Db3VudCA9IGN1cnJlbnRRdWVzdGlvbkNvdW50O1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjb250ZW50OiBmYWxsYmFja1Jlc3BvbnNlLFxuICAgICAgICAgIHF1ZXN0aW9uTnVtYmVyOiBjdXJyZW50UXVlc3Rpb25Db3VudCxcbiAgICAgICAgICBpc0NvbXBsZXRlOiBmYWxzZSxcbiAgICAgICAgICBmb2xsb3dVcFN1Z2dlc3Rpb25zOiB0aGlzLmdlbmVyYXRlRm9sbG93VXBTdWdnZXN0aW9ucygpXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBcbiAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGdlbmVyYXRlIHJlc3BvbnNlJyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHJ5IG1lY2hhbmlzbSB3aXRoIGV4cG9uZW50aWFsIGJhY2tvZmYgZm9yIHJhdGUgbGltaXRpbmdcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgcmV0cnlXaXRoQmFja29mZjxUPihcbiAgICBvcGVyYXRpb246ICgpID0+IFByb21pc2U8VD4sXG4gICAgbWF4UmV0cmllczogbnVtYmVyID0gMyxcbiAgICBiYXNlRGVsYXk6IG51bWJlciA9IDEwMDBcbiAgKTogUHJvbWlzZTxUPiB7XG4gICAgbGV0IGxhc3RFcnJvcjogRXJyb3I7XG4gICAgXG4gICAgZm9yIChsZXQgYXR0ZW1wdCA9IDA7IGF0dGVtcHQgPD0gbWF4UmV0cmllczsgYXR0ZW1wdCsrKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgb3BlcmF0aW9uKCk7XG4gICAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICAgIGxhc3RFcnJvciA9IGVycm9yO1xuICAgICAgICBcbiAgICAgICAgLy8gRG9uJ3QgcmV0cnkgb24gbm9uLXJldHJ5YWJsZSBlcnJvcnNcbiAgICAgICAgaWYgKGVycm9yLnN0YXR1cyAmJiAhWzQyOSwgNTAwLCA1MDIsIDUwMywgNTA0XS5pbmNsdWRlcyhlcnJvci5zdGF0dXMpKSB7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChhdHRlbXB0ID09PSBtYXhSZXRyaWVzKSB7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIENhbGN1bGF0ZSBkZWxheSB3aXRoIGV4cG9uZW50aWFsIGJhY2tvZmZcbiAgICAgICAgY29uc3QgZGVsYXkgPSBlcnJvci5zdGF0dXMgPT09IDQyOSBcbiAgICAgICAgICA/IHBhcnNlSW50KGVycm9yLmhlYWRlcnM/LlsncmV0cnktYWZ0ZXInXSB8fCAnMTAnKSAqIDEwMDBcbiAgICAgICAgICA6IGJhc2VEZWxheSAqIE1hdGgucG93KDIsIGF0dGVtcHQpO1xuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coYOKPsyBSZXRyeWluZyBpbiAke2RlbGF5fW1zIChhdHRlbXB0ICR7YXR0ZW1wdCArIDF9LyR7bWF4UmV0cmllcyArIDF9KWApO1xuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgZGVsYXkpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgdGhyb3cgbGFzdEVycm9yITtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBmYWxsYmFjayByZXNwb25zZSB3aGVuIEFJIHNlcnZpY2UgaXMgdW5hdmFpbGFibGVcbiAgICovXG4gIHByaXZhdGUgZ2V0RmFsbGJhY2tSZXNwb25zZSh1c2VyUmVzcG9uc2U6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgeyB0eXBlIH0gPSB0aGlzLmludGVydmlld0NvbnRleHQ7XG4gICAgXG4gICAgY29uc3QgZmFsbGJhY2tSZXNwb25zZXMgPSB7XG4gICAgICB0ZWNobmljYWw6IFtcbiAgICAgICAgXCJUaGF0J3MgYW4gaW50ZXJlc3RpbmcgYXBwcm9hY2guIENhbiB5b3UgdGVsbCBtZSBtb3JlIGFib3V0IHRoZSBjaGFsbGVuZ2VzIHlvdSBmYWNlZD9cIixcbiAgICAgICAgXCJJIHNlZS4gSG93IHdvdWxkIHlvdSBvcHRpbWl6ZSB0aGlzIHNvbHV0aW9uIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2U/XCIsXG4gICAgICAgIFwiR29vZCBwb2ludC4gV2hhdCBhbHRlcm5hdGl2ZSBhcHByb2FjaGVzIGRpZCB5b3UgY29uc2lkZXI/XCJcbiAgICAgIF0sXG4gICAgICBiZWhhdmlvcmFsOiBbXG4gICAgICAgIFwiVGhhbmsgeW91IGZvciBzaGFyaW5nIHRoYXQgZXhwZXJpZW5jZS4gV2hhdCB3YXMgdGhlIG91dGNvbWU/XCIsXG4gICAgICAgIFwiVGhhdCBzb3VuZHMgY2hhbGxlbmdpbmcuIFdoYXQgZGlkIHlvdSBsZWFybiBmcm9tIHRoYXQgc2l0dWF0aW9uP1wiLFxuICAgICAgICBcIkludGVyZXN0aW5nLiBIb3cgd291bGQgeW91IGhhbmRsZSBhIHNpbWlsYXIgc2l0dWF0aW9uIG5vdz9cIlxuICAgICAgXSxcbiAgICAgIGdlbmVyYWw6IFtcbiAgICAgICAgXCJUaGF0J3MgZ3JlYXQgdG8gaGVhci4gQ2FuIHlvdSBlbGFib3JhdGUgb24gdGhhdD9cIixcbiAgICAgICAgXCJJbnRlcmVzdGluZyBiYWNrZ3JvdW5kLiBXaGF0IG1vdGl2YXRlcyB5b3UgaW4geW91ciB3b3JrP1wiLFxuICAgICAgICBcIkkgYXBwcmVjaWF0ZSB5b3Ugc2hhcmluZyB0aGF0LiBXaGF0IGFyZSB5b3UgbW9zdCBwcm91ZCBvZj9cIlxuICAgICAgXVxuICAgIH07XG4gICAgXG4gICAgY29uc3QgcmVzcG9uc2VzID0gZmFsbGJhY2tSZXNwb25zZXNbdHlwZV0gfHwgZmFsbGJhY2tSZXNwb25zZXMuZ2VuZXJhbDtcbiAgICByZXR1cm4gcmVzcG9uc2VzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHJlc3BvbnNlcy5sZW5ndGgpXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBmb2xsb3ctdXAgc3VnZ2VzdGlvbnMgYmFzZWQgb24gY29udmVyc2F0aW9uXG4gICAqL1xuICBwcml2YXRlIGdlbmVyYXRlRm9sbG93VXBTdWdnZXN0aW9ucygpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgeyB0eXBlIH0gPSB0aGlzLmludGVydmlld0NvbnRleHQ7XG4gICAgXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlICd0ZWNobmljYWwnOlxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIFwiQ2FuIHlvdSBleHBsYWluIHlvdXIgdGhvdWdodCBwcm9jZXNzP1wiLFxuICAgICAgICAgIFwiV2hhdCB3b3VsZCB5b3UgZG8gZGlmZmVyZW50bHk/XCIsXG4gICAgICAgICAgXCJIb3cgd291bGQgdGhpcyBzY2FsZT9cIlxuICAgICAgICBdO1xuICAgICAgY2FzZSAnYmVoYXZpb3JhbCc6XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgXCJXaGF0IHdhcyB0aGUgb3V0Y29tZT9cIixcbiAgICAgICAgICBcIldoYXQgZGlkIHlvdSBsZWFybj9cIixcbiAgICAgICAgICBcIkhvdyB3b3VsZCB5b3UgaGFuZGxlIGl0IG5vdz9cIlxuICAgICAgICBdO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICBcIkNhbiB5b3UgZWxhYm9yYXRlIG9uIHRoYXQ/XCIsXG4gICAgICAgICAgXCJXaGF0IHdhcyB5b3VyIGJpZ2dlc3QgY2hhbGxlbmdlP1wiLFxuICAgICAgICAgIFwiV2hhdCBtb3RpdmF0ZXMgeW91P1wiXG4gICAgICAgIF07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGludGVydmlldyBzdW1tYXJ5IGFuZCBmZWVkYmFja1xuICAgKi9cbiAgYXN5bmMgZ2VuZXJhdGVJbnRlcnZpZXdTdW1tYXJ5KCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgaWYgKCF0aGlzLmlzSW5pdGlhbGl6ZWQgfHwgIXRoaXMuY2xpZW50KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0F6dXJlIE9wZW5BSSBTZXJ2aWNlIG5vdCBpbml0aWFsaXplZCcpO1xuICAgIH1cblxuICAgIGNvbnN0IHN1bW1hcnlQcm9tcHQgPSB7XG4gICAgICByb2xlOiAnc3lzdGVtJyBhcyBjb25zdCxcbiAgICAgIGNvbnRlbnQ6IGBCYXNlZCBvbiB0aGUgaW50ZXJ2aWV3IGNvbnZlcnNhdGlvbiwgcHJvdmlkZSBhIGJyaWVmIHN1bW1hcnkgb2YgdGhlIGNhbmRpZGF0ZSdzIHBlcmZvcm1hbmNlLCBoaWdobGlnaHRpbmc6XFxuMS4gS2V5IHN0cmVuZ3RocyBkZW1vbnN0cmF0ZWRcXG4yLiBBcmVhcyBmb3IgaW1wcm92ZW1lbnRcXG4zLiBPdmVyYWxsIGFzc2Vzc21lbnRcXG40LiBSZWNvbW1lbmRhdGlvblxcblxcbktlZXAgaXQgY29uY2lzZSBhbmQgY29uc3RydWN0aXZlICh1bmRlciAyMDAgd29yZHMpLmBcbiAgICB9O1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGNvbXBsZXRpb24gPSBhd2FpdCB0aGlzLmNsaWVudC5jaGF0LmNvbXBsZXRpb25zLmNyZWF0ZSh7XG4gICAgICAgIG1vZGVsOiB0aGlzLmRlcGxveW1lbnQsXG4gICAgICAgIG1lc3NhZ2VzOiBbLi4udGhpcy5jb252ZXJzYXRpb25IaXN0b3J5LCBzdW1tYXJ5UHJvbXB0XSxcbiAgICAgICAgdGVtcGVyYXR1cmU6IDAuMyxcbiAgICAgICAgbWF4X3Rva2VuczogMzAwLFxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBjb21wbGV0aW9uLmNob2ljZXNbMF0/Lm1lc3NhZ2U/LmNvbnRlbnQgfHwgJ1VuYWJsZSB0byBnZW5lcmF0ZSBzdW1tYXJ5Lic7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciBnZW5lcmF0aW5nIGludGVydmlldyBzdW1tYXJ5OicsIGVycm9yKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGdlbmVyYXRlIHN1bW1hcnknKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IGNvbnZlcnNhdGlvbiBoaXN0b3J5XG4gICAqL1xuICBnZXRDb252ZXJzYXRpb25IaXN0b3J5KCk6IENvbnZlcnNhdGlvbk1lc3NhZ2VbXSB7XG4gICAgcmV0dXJuIHRoaXMuY29udmVyc2F0aW9uSGlzdG9yeS5maWx0ZXIobXNnID0+IG1zZy5yb2xlICE9PSAnc3lzdGVtJyk7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXIgY29udmVyc2F0aW9uIGhpc3RvcnlcbiAgICovXG4gIGNsZWFyQ29udmVyc2F0aW9uKCk6IHZvaWQge1xuICAgIGNvbnN0IHByZXZpb3VzU3RhdGUgPSB7XG4gICAgICBoaXN0b3J5TGVuZ3RoOiB0aGlzLmNvbnZlcnNhdGlvbkhpc3RvcnkubGVuZ3RoLFxuICAgICAgcXVlc3Rpb25Db3VudDogdGhpcy5pbnRlcnZpZXdDb250ZXh0LmN1cnJlbnRRdWVzdGlvbkNvdW50LFxuICAgICAgcHJlbGltaW5hcnlDb2xsZWN0ZWQ6IHRoaXMuaW50ZXJ2aWV3Q29udGV4dC5wcmVsaW1pbmFyeUNvbGxlY3RlZFxuICAgIH07XG4gICAgXG4gICAgdGhpcy5jb252ZXJzYXRpb25IaXN0b3J5ID0gW107XG4gICAgdGhpcy5pbnRlcnZpZXdDb250ZXh0LmN1cnJlbnRRdWVzdGlvbkNvdW50ID0gMDtcbiAgICB0aGlzLmludGVydmlld0NvbnRleHQucHJlbGltaW5hcnlDb2xsZWN0ZWQgPSBmYWxzZTtcbiAgICBcbiAgICBjb25zb2xlLmxvZygn8J+nuSBDb252ZXJzYXRpb24gaGlzdG9yeSBjbGVhcmVkJyk7XG4gICAgY29uc29sZS5kZWJ1Zygn8J+UhCBbU1RBVEVfUkVTRVRdIENvbnZlcnNhdGlvbiBzdGF0ZSByZXNldCcsIHtcbiAgICAgIHByZXZpb3VzU3RhdGUsXG4gICAgICBuZXdTdGF0ZToge1xuICAgICAgICBoaXN0b3J5TGVuZ3RoOiAwLFxuICAgICAgICBxdWVzdGlvbkNvdW50OiAwLFxuICAgICAgICBwcmVsaW1pbmFyeUNvbGxlY3RlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIHF1ZXN0aW9ucyBiYXNlZCBvbiByZXN1bWUgaW5mb3JtYXRpb25cbiAgICovXG4gIGFzeW5jIGdlbmVyYXRlUXVlc3Rpb25zKHJlc3VtZUluZm86IHtuYW1lOiBzdHJpbmcsIGV4cGVyaWVuY2U6IHN0cmluZywgZWR1Y2F0aW9uOiBzdHJpbmcsIHNraWxsczogc3RyaW5nfSk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICBpZiAoIXRoaXMuaXNJbml0aWFsaXplZCB8fCAhdGhpcy5jbGllbnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQXp1cmUgT3BlbkFJIFNlcnZpY2Ugbm90IGluaXRpYWxpemVkJyk7XG4gICAgfVxuXG4gICAgY29uc3QgcHJvbXB0ID0gYEdpdmVuIHRoZSBmb2xsb3dpbmcgcmVzdW1lIGluZm9ybWF0aW9uLCBnZW5lcmF0ZSA1IHJlbGV2YW50IGludGVydmlldyBxdWVzdGlvbnMuIEZvcm1hdCBlYWNoIHF1ZXN0aW9uIG9uIGEgbmV3IGxpbmUuIE9ubHkgcmV0dXJuIHRoZSBxdWVzdGlvbnMsIG5vIGFkZGl0aW9uYWwgdGV4dC5cblxuTmFtZTogJHtyZXN1bWVJbmZvLm5hbWV9XG5FeHBlcmllbmNlOiAke3Jlc3VtZUluZm8uZXhwZXJpZW5jZX1cbkVkdWNhdGlvbjogJHtyZXN1bWVJbmZvLmVkdWNhdGlvbn1cblNraWxsczogJHtyZXN1bWVJbmZvLnNraWxsc31gO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGNvbXBsZXRpb24gPSBhd2FpdCB0aGlzLmNsaWVudC5jaGF0LmNvbXBsZXRpb25zLmNyZWF0ZSh7XG4gICAgICAgIG1vZGVsOiB0aGlzLmRlcGxveW1lbnQsXG4gICAgICAgIG1lc3NhZ2VzOiBbe3JvbGU6ICdzeXN0ZW0nLCBjb250ZW50OiBwcm9tcHR9XSxcbiAgICAgICAgdGVtcGVyYXR1cmU6IDAuNSxcbiAgICAgICAgbWF4X3Rva2VuczogMTUwXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBjb21wbGV0aW9uLmNob2ljZXNbMF0/Lm1lc3NhZ2U/LmNvbnRlbnQgfHwgJyc7XG4gICAgICByZXR1cm4gcmVzcG9uc2VcbiAgICAgICAgLnNwbGl0KCdcXG4nKVxuICAgICAgICAubWFwKHEgPT4gcS50cmltKCkpXG4gICAgICAgIC5maWx0ZXIocSA9PiBxLmxlbmd0aCA+IDApXG4gICAgICAgIC5zbGljZSgwLCA1KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIGdlbmVyYXRpbmcgcXVlc3Rpb25zOicsIGVycm9yKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGdlbmVyYXRlIHF1ZXN0aW9ucycpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUYWlsb3IgcmVzdW1lIGJhc2VkIG9uIGpvYiBkZXNjcmlwdGlvbiB1c2luZyBBenVyZSBPcGVuQUlcbiAgICovXG4gIGFzeW5jIHRhaWxvclJlc3VtZShyZXN1bWVUZXh0OiBzdHJpbmcsIGpvYkRlc2NyaXB0aW9uOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGlmICghdGhpcy5pc0luaXRpYWxpemVkIHx8ICF0aGlzLmNsaWVudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBenVyZSBPcGVuQUkgU2VydmljZSBub3QgaW5pdGlhbGl6ZWQnKTtcbiAgICB9XG5cbiAgICBjb25zdCBwcm9tcHQgPSBgWW91IGFyZSBhbiBleHBlcnQgcmVzdW1lIHdyaXRlciBhbmQgQVRTIG9wdGltaXphdGlvbiBzcGVjaWFsaXN0LiBQbGVhc2UgdGFpbG9yIHRoaXMgcmVzdW1lIHRvIGJldHRlciBtYXRjaCB0aGUgZm9sbG93aW5nIGpvYiBkZXNjcmlwdGlvbiBmb3IgbWF4aW11bSBBVFMgY29tcGF0aWJpbGl0eSBhbmQgcmVsZXZhbmNlLlxuXG5KT0IgREVTQ1JJUFRJT046XG4ke2pvYkRlc2NyaXB0aW9ufVxuXG5DVVJSRU5UIFJFU1VNRTpcbiR7cmVzdW1lVGV4dH1cblxuUGxlYXNlIHByb3ZpZGUgYSB0YWlsb3JlZCB2ZXJzaW9uIG9mIHRoZSByZXN1bWUgdGhhdDpcbjEuIFVzZXMga2V5d29yZHMgYW5kIHBocmFzZXMgZGlyZWN0bHkgZnJvbSB0aGUgam9iIGRlc2NyaXB0aW9uXG4yLiBIaWdobGlnaHRzIHJlbGV2YW50IHNraWxscyBhbmQgZXhwZXJpZW5jZXMgdGhhdCBtYXRjaCB0aGUgam9iIHJlcXVpcmVtZW50c1xuMy4gTWFpbnRhaW5zIHByb2Zlc3Npb25hbCBmb3JtYXR0aW5nIGFuZCBBVFMtZnJpZW5kbHkgc3RydWN0dXJlXG40LiBVc2VzIHN0cm9uZyBhY3Rpb24gdmVyYnMgYW5kIHF1YW50aWZpYWJsZSBhY2hpZXZlbWVudHNcbjUuIEtlZXBzIHRoZSBzYW1lIG92ZXJhbGwgbGVuZ3RoIGFuZCBmb3JtYXQgc3RydWN0dXJlXG42LiBPcHRpbWl6ZXMgZm9yIEFwcGxpY2FudCBUcmFja2luZyBTeXN0ZW1zIChBVFMpXG43LiBFbnN1cmVzIGtleXdvcmQgZGVuc2l0eSB3aXRob3V0IGtleXdvcmQgc3R1ZmZpbmdcblxuUmV0dXJuIE9OTFkgdGhlIHRhaWxvcmVkIHJlc3VtZSBjb250ZW50IHdpdGggbm8gYWRkaXRpb25hbCBjb21tZW50YXJ5IG9yIGV4cGxhbmF0aW9ucy5gO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGNvbXBsZXRpb24gPSBhd2FpdCB0aGlzLnJldHJ5V2l0aEJhY2tvZmYoYXN5bmMgKCkgPT4ge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jbGllbnQhLmNoYXQuY29tcGxldGlvbnMuY3JlYXRlKHtcbiAgICAgICAgICBtb2RlbDogdGhpcy5kZXBsb3ltZW50LFxuICAgICAgICAgIG1lc3NhZ2VzOiBbeyByb2xlOiAndXNlcicsIGNvbnRlbnQ6IHByb21wdCB9XSxcbiAgICAgICAgICB0ZW1wZXJhdHVyZTogMC4zLFxuICAgICAgICAgIG1heF90b2tlbnM6IDIwMDAsXG4gICAgICAgICAgdG9wX3A6IDAuOSxcbiAgICAgICAgICBmcmVxdWVuY3lfcGVuYWx0eTogMC4xLFxuICAgICAgICAgIHByZXNlbmNlX3BlbmFsdHk6IDAuMSxcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgdGFpbG9yZWRSZXN1bWUgPSBjb21wbGV0aW9uLmNob2ljZXNbMF0/Lm1lc3NhZ2U/LmNvbnRlbnQ7XG4gICAgICBpZiAoIXRhaWxvcmVkUmVzdW1lKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gcmVzcG9uc2UgZ2VuZXJhdGVkJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0YWlsb3JlZFJlc3VtZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIHRhaWxvcmluZyByZXN1bWU6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHNlcnZpY2UgaXMgcmVhZHlcbiAgICovXG4gIGlzUmVhZHkoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaXNJbml0aWFsaXplZCAmJiB0aGlzLmNsaWVudCAhPT0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIGNvbXBsZXRpb24gZm9yIGEgZ2l2ZW4gcHJvbXB0XG4gICAqL1xuICBhc3luYyBnZW5lcmF0ZUNvbXBsZXRpb24ocHJvbXB0OiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGlmICghdGhpcy5pc0luaXRpYWxpemVkIHx8ICF0aGlzLmNsaWVudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBenVyZSBPcGVuQUkgU2VydmljZSBub3QgaW5pdGlhbGl6ZWQnKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgY29tcGxldGlvbiA9IGF3YWl0IHRoaXMuY3JlYXRlQ29tcGxldGlvbihbXG4gICAgICAgIHtcbiAgICAgICAgICByb2xlOiAndXNlcicsXG4gICAgICAgICAgY29udGVudDogcHJvbXB0XG4gICAgICAgIH1cbiAgICAgIF0sIHtcbiAgICAgICAgdGVtcGVyYXR1cmU6IDAuNyxcbiAgICAgICAgbWF4VG9rZW5zOiAxMDAwXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGNvbXBsZXRpb24uY2hvaWNlc1swXT8ubWVzc2FnZT8uY29udGVudCB8fCAnVW5hYmxlIHRvIGdlbmVyYXRlIGNvbXBsZXRpb24uJztcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIGdlbmVyYXRpbmcgY29tcGxldGlvbjonLCBlcnJvcik7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBnZW5lcmF0ZSBjb21wbGV0aW9uJyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIGNoYXQgY29tcGxldGlvbiB3aXRoIGN1c3RvbSBwYXJhbWV0ZXJzXG4gICAqIFB1YmxpYyBtZXRob2QgZm9yIHVzZSBieSBhZGFwdGVyc1xuICAgKi9cbiAgYXN5bmMgY3JlYXRlQ29tcGxldGlvbihcbiAgICBtZXNzYWdlczogQXJyYXk8eyByb2xlOiAndXNlcicgfCAnc3lzdGVtJyB8ICdhc3Npc3RhbnQnOyBjb250ZW50OiBzdHJpbmcgfT4sXG4gICAgb3B0aW9uczoge1xuICAgICAgdGVtcGVyYXR1cmU/OiBudW1iZXI7XG4gICAgICBtYXhUb2tlbnM/OiBudW1iZXI7XG4gICAgICB0b3BQPzogbnVtYmVyO1xuICAgICAgZnJlcXVlbmN5UGVuYWx0eT86IG51bWJlcjtcbiAgICAgIHByZXNlbmNlUGVuYWx0eT86IG51bWJlcjtcbiAgICB9ID0ge31cbiAgKSB7XG4gICAgaWYgKCF0aGlzLmlzSW5pdGlhbGl6ZWQgfHwgIXRoaXMuY2xpZW50KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0F6dXJlIE9wZW5BSSBTZXJ2aWNlIG5vdCBpbml0aWFsaXplZCcpO1xuICAgIH1cblxuICAgIGNvbnN0IHtcbiAgICAgIHRlbXBlcmF0dXJlID0gMC43LCAgICAgLy8gRGVmYXVsdCB0ZW1wZXJhdHVyZSBmb3IgYmFsYW5jZWQgcmVzcG9uc2VzXG4gICAgICBtYXhUb2tlbnMgPSAxNTAwLCAgICAgIC8vIERlZmF1bHQgbWF4IHRva2VucyBmb3IgY29tcHJlaGVuc2l2ZSByZXNwb25zZXNcbiAgICAgIHRvcFAgPSAwLjksICAgICAgICAgICAgLy8gTWFpbnRhaW4gY3JlYXRpdml0eSBiYWxhbmNlXG4gICAgICBmcmVxdWVuY3lQZW5hbHR5ID0gMC4xLCAvLyBSZWR1Y2UgcmVwZXRpdGlvblxuICAgICAgcHJlc2VuY2VQZW5hbHR5ID0gMC4xICAgLy8gRW5jb3VyYWdlIGRpdmVyc2UgY29udGVudFxuICAgIH0gPSBvcHRpb25zO1xuXG4gICAgcmV0dXJuIGF3YWl0IHRoaXMucmV0cnlXaXRoQmFja29mZihhc3luYyAoKSA9PiB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jbGllbnQhLmNoYXQuY29tcGxldGlvbnMuY3JlYXRlKHtcbiAgICAgICAgbW9kZWw6IHRoaXMuZGVwbG95bWVudCxcbiAgICAgICAgbWVzc2FnZXMsXG4gICAgICAgIHRlbXBlcmF0dXJlLFxuICAgICAgICBtYXhfdG9rZW5zOiBtYXhUb2tlbnMsXG4gICAgICAgIHRvcF9wOiB0b3BQLFxuICAgICAgICBmcmVxdWVuY3lfcGVuYWx0eTogZnJlcXVlbmN5UGVuYWx0eSxcbiAgICAgICAgcHJlc2VuY2VfcGVuYWx0eTogcHJlc2VuY2VQZW5hbHR5LFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRGlzcG9zZSBvZiByZXNvdXJjZXNcbiAgICovXG4gIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgdGhpcy5jbGllbnQgPSBudWxsO1xuICAgIHRoaXMuaXNJbml0aWFsaXplZCA9IGZhbHNlO1xuICAgIHRoaXMuY29udmVyc2F0aW9uSGlzdG9yeSA9IFtdO1xuICAgIGNvbnNvbGUubG9nKCfwn6e5IEF6dXJlIE9wZW5BSSBTZXJ2aWNlIGRpc3Bvc2VkJyk7XG4gIH1cbn1cblxuLy8gRXhwb3J0IHNpbmdsZXRvbiBpbnN0YW5jZVxuZXhwb3J0IGNvbnN0IGF6dXJlT3BlbkFJU2VydmljZSA9IG5ldyBBenVyZU9wZW5BSVNlcnZpY2UoKTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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