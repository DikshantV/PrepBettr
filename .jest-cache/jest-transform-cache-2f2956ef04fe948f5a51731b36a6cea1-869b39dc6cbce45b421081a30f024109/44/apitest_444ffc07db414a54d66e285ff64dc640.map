{"file":"/Users/dikshantvashistha/PrepBettr/tests/api/resume/tailor/api.test.ts","mappings":"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","names":[],"sources":["/Users/dikshantvashistha/PrepBettr/tests/api/resume/tailor/api.test.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { POST } from '@/app/api/resume/tailor/route';\nimport { firebaseVerification } from '@/lib/services/firebase-verification';\nimport { azureOpenAIService } from '@/lib/services/azure-openai-service';\n\n// Mock the dependencies\njest.mock('@/lib/services/firebase-verification');\njest.mock('@/lib/services/azure-openai-service');\n\ndescribe('/api/resume/tailor endpoint', () => {\n  let mockFirebaseVerification;\n  let mockAzureOpenAIService;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockFirebaseVerification = firebaseVerification;\n    mockAzureOpenAIService = azureOpenAIService;\n  });\n\n  const createMockRequest = (sessionValue, body) => {\n    const request = {\n      cookies: {\n        get: jest.fn().mockReturnValue(sessionValue ? { value: sessionValue } : undefined),\n      },\n      json: jest.fn().mockResolvedValue(body),\n    };\n    return request;\n  };\n\n  describe('Authentication', () => {\n    it('should return 401 when session cookie is missing', async () => {\n      const request = createMockRequest(null, {});\n      const response = await POST(request);\n      const responseBody = await response.json();\n      \n      expect(response.status).toBe(401);\n      expect(responseBody).toEqual({ error: 'Authentication required' });\n    });\n\n    it('should return 401 when session token is invalid', async () => {\n      mockFirebaseVerification.verifyIdToken.mockResolvedValue({\n        success: false,\n        decodedToken: null,\n      });\n\n      const request = createMockRequest('invalid-session', {});\n      const response = await POST(request);\n      const responseBody = await response.json();\n      \n      expect(response.status).toBe(401);\n      expect(responseBody).toEqual({ error: 'Invalid session' });\n    });\n  });\n\n  describe('Input Validation', () => {\n    beforeEach(() => {\n      mockFirebaseVerification.verifyIdToken.mockResolvedValue({\n        success: true,\n        decodedToken: { uid: 'test-user-id' },\n      });\n    });\n\n    it('should return 400 when resume text is missing', async () => {\n      const request = createMockRequest('valid-session', {\n        resumeText: '',\n        jobDescription: 'Valid job description',\n      });\n      \n      const response = await POST(request);\n      const responseBody = await response.json();\n      \n      expect(response.status).toBe(400);\n      expect(responseBody).toEqual({\n        error: 'Both resume text and job description are required',\n      });\n    });\n\n    it('should return 400 when job description is missing', async () => {\n      const request = createMockRequest('valid-session', {\n        resumeText: 'Valid resume text',\n        jobDescription: '',\n      });\n      \n      const response = await POST(request);\n      const responseBody = await response.json();\n      \n      expect(response.status).toBe(400);\n      expect(responseBody).toEqual({\n        error: 'Both resume text and job description are required',\n      });\n    });\n\n    it('should return 400 when text length exceeds limit', async () => {\n      const longText = 'a'.repeat(50001);\n      const request = createMockRequest('valid-session', {\n        resumeText: longText,\n        jobDescription: 'Valid job description',\n      });\n      \n      const response = await POST(request);\n      const responseBody = await response.json();\n      \n      expect(response.status).toBe(400);\n      expect(responseBody).toEqual({\n        error: 'Text length exceeds maximum limit (50,000 characters)',\n      });\n    });\n  });\n\n  describe('Azure OpenAI Service Integration', () => {\n    const sampleResumeText = `\n      John Doe\n      Software Developer\n      Experience: 5 years in full-stack development\n      Skills: JavaScript, React, Node.js, Python\n    `;\n\n    const sampleJobDescription = `\n      We are looking for a Senior Full Stack Developer with experience in:\n      - React and Node.js\n      - Cloud platforms (Azure/AWS)\n      - API development\n    `;\n\n    beforeEach(() => {\n      mockFirebaseVerification.verifyIdToken.mockResolvedValue({\n        success: true,\n        decodedToken: { uid: 'test-user-id' },\n      });\n    });\n\n    it('should return 503 when Azure OpenAI service is not available', async () => {\n      // Mock the module-level initialization function to return false\n      const originalModule = jest.requireActual('@/lib/services/azure-openai-service');\n      jest.doMock('@/lib/services/azure-openai-service', () => ({\n        ...originalModule,\n        azureOpenAIService: {\n          ...originalModule.azureOpenAIService,\n          initialize: jest.fn().mockResolvedValue(false),\n        },\n      }));\n\n      const request = createMockRequest('valid-session', {\n        resumeText: sampleResumeText,\n        jobDescription: sampleJobDescription,\n      });\n      \n      const response = await POST(request);\n      const responseBody = await response.json();\n      \n      expect(response.status).toBe(503);\n      expect(responseBody).toEqual({\n        error: 'Azure OpenAI service is not available. Please try again later.',\n      });\n    });\n\n    it('should return 200 with tailored resume on successful processing', async () => {\n      const tailoredResumeContent = `\n        John Doe\n        Senior Full Stack Developer\n        Experience: 5 years in full-stack development with Azure cloud platforms\n        Skills: JavaScript, React, Node.js, Python, Azure, API development\n      `;\n\n      mockAzureOpenAIService.initialize.mockResolvedValue(true);\n      mockAzureOpenAIService.tailorResume.mockResolvedValue(tailoredResumeContent);\n\n      const request = createMockRequest('valid-session', {\n        resumeText: sampleResumeText,\n        jobDescription: sampleJobDescription,\n      });\n      \n      const response = await POST(request);\n      const responseBody = await response.json();\n      \n      expect(response.status).toBe(200);\n      expect(responseBody).toEqual({\n        tailoredResume: tailoredResumeContent,\n        success: true,\n      });\n      expect(mockAzureOpenAIService.tailorResume).toHaveBeenCalledWith(\n        sampleResumeText,\n        sampleJobDescription\n      );\n    });\n\n    it('should handle rate limiting errors (429)', async () => {\n      const rateLimitError = new Error('Rate limit exceeded');\n      rateLimitError.status = 429;\n\n      mockAzureOpenAIService.initialize.mockResolvedValue(true);\n      mockAzureOpenAIService.tailorResume.mockRejectedValue(rateLimitError);\n\n      const request = createMockRequest('valid-session', {\n        resumeText: sampleResumeText,\n        jobDescription: sampleJobDescription,\n      });\n      \n      const response = await POST(request);\n      const responseBody = await response.json();\n      \n      expect(response.status).toBe(429);\n      expect(responseBody).toEqual({\n        error: 'Service temporarily unavailable due to usage limits. Please try again later.',\n      });\n    });\n\n    it('should handle authentication errors (401)', async () => {\n      const authError = new Error('Authentication failed');\n      authError.status = 401;\n\n      mockAzureOpenAIService.initialize.mockResolvedValue(true);\n      mockAzureOpenAIService.tailorResume.mockRejectedValue(authError);\n\n      const request = createMockRequest('valid-session', {\n        resumeText: sampleResumeText,\n        jobDescription: sampleJobDescription,\n      });\n      \n      const response = await POST(request);\n      const responseBody = await response.json();\n      \n      expect(response.status).toBe(401);\n      expect(responseBody).toEqual({\n        error: 'Authentication failed with Azure OpenAI service.',\n      });\n    });\n\n    it('should handle server errors (500)', async () => {\n      const serverError = new Error('Internal server error');\n      serverError.status = 500;\n\n      mockAzureOpenAIService.initialize.mockResolvedValue(true);\n      mockAzureOpenAIService.tailorResume.mockRejectedValue(serverError);\n\n      const request = createMockRequest('valid-session', {\n        resumeText: sampleResumeText,\n        jobDescription: sampleJobDescription,\n      });\n      \n      const response = await POST(request);\n      const responseBody = await response.json();\n      \n      expect(response.status).toBe(500);\n      expect(responseBody).toEqual({\n        error: 'Azure OpenAI service is temporarily unavailable. Please try again later.',\n      });\n    });\n  });\n});\n\n"],"version":3}