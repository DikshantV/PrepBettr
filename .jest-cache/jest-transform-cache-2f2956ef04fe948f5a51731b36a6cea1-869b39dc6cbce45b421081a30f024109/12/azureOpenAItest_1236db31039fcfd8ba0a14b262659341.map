{"file":"/Users/dikshantvashistha/PrepBettr/lib/ai/__tests__/azureOpenAI.test.ts","mappings":"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","names":[],"sources":["/Users/dikshantvashistha/PrepBettr/lib/ai/__tests__/azureOpenAI.test.ts"],"sourcesContent":["/**\n * Unit tests for the Azure OpenAI Adapter\n */\n\nimport { AzureOpenAIAdapter } from '../azureOpenAI';\nimport { azureOpenAIService } from '@/lib/services/azure-openai-service';\n\n// Mock the Azure OpenAI service\njest.mock('@/lib/services/azure-openai-service');\n\ndescribe('AzureOpenAIAdapter', () => {\n  let adapter: AzureOpenAIAdapter;\n  let mockService: jest.Mocked<typeof azureOpenAIService>;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Set up mock service\n    mockService = azureOpenAIService as jest.Mocked<typeof azureOpenAIService>;\n    \n    adapter = new AzureOpenAIAdapter();\n  });\n\n  afterEach(() => {\n    adapter.dispose();\n  });\n\n  describe('Initialization', () => {\n    it('should initialize successfully when service initializes', async () => {\n      mockService.initialize.mockResolvedValue(true);\n\n      const result = await adapter.initialize();\n\n      expect(result).toBe(true);\n      expect(mockService.initialize).toHaveBeenCalled();\n    });\n\n    it('should fail to initialize when service fails', async () => {\n      mockService.initialize.mockResolvedValue(false);\n\n      const result = await adapter.initialize();\n\n      expect(result).toBe(false);\n      expect(mockService.initialize).toHaveBeenCalled();\n    });\n\n    it('should handle initialization errors', async () => {\n      const error = new Error('Azure credentials not found');\n      mockService.initialize.mockRejectedValue(error);\n\n      const result = await adapter.initialize();\n\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('isReady', () => {\n    it('should return true when initialized and service is ready', async () => {\n      mockService.initialize.mockResolvedValue(true);\n      mockService.isReady.mockReturnValue(true);\n\n      await adapter.initialize();\n\n      expect(adapter.isReady()).toBe(true);\n    });\n\n    it('should return false when not initialized', () => {\n      mockService.isReady.mockReturnValue(true);\n\n      expect(adapter.isReady()).toBe(false);\n    });\n\n    it('should return false when service is not ready', async () => {\n      mockService.initialize.mockResolvedValue(true);\n      mockService.isReady.mockReturnValue(false);\n\n      await adapter.initialize();\n\n      expect(adapter.isReady()).toBe(false);\n    });\n  });\n\n  describe('generateCoverLetter', () => {\n    beforeEach(async () => {\n      mockService.initialize.mockResolvedValue(true);\n      mockService.isReady.mockReturnValue(true);\n      await adapter.initialize();\n    });\n\n    it('should generate cover letter successfully', async () => {\n      const mockCompletion = {\n        choices: [{\n          message: {\n            content: 'Dear Hiring Manager, I am excited to apply...'\n          }\n        }]\n      };\n      mockService.createCompletion.mockResolvedValue(mockCompletion as any);\n\n      const result = await adapter.generateCoverLetter('resume text', 'job description');\n\n      expect(mockService.createCompletion).toHaveBeenCalledWith(\n        [{ role: 'user', content: expect.stringContaining('job description') }],\n        { temperature: 0.7, maxTokens: 1500 }\n      );\n      expect(result).toBe('Dear Hiring Manager, I am excited to apply...');\n    });\n\n    it('should throw error when not initialized', async () => {\n      const uninitializedAdapter = new AzureOpenAIAdapter();\n\n      await expect(uninitializedAdapter.generateCoverLetter('resume', 'job'))\n        .rejects.toThrow('Azure OpenAI adapter not initialized');\n    });\n\n    it('should handle empty response', async () => {\n      const mockCompletion = {\n        choices: [{\n          message: {\n            content: ''\n          }\n        }]\n      };\n      mockService.createCompletion.mockResolvedValue(mockCompletion as any);\n\n      await expect(adapter.generateCoverLetter('resume', 'job'))\n        .rejects.toThrow('Empty response from Azure OpenAI');\n    });\n\n    it('should handle missing choices', async () => {\n      const mockCompletion = {\n        choices: []\n      };\n      mockService.createCompletion.mockResolvedValue(mockCompletion as any);\n\n      await expect(adapter.generateCoverLetter('resume', 'job'))\n        .rejects.toThrow('Empty response from Azure OpenAI');\n    });\n\n    it('should handle API errors', async () => {\n      const apiError = new Error('Rate limit exceeded');\n      mockService.createCompletion.mockRejectedValue(apiError);\n\n      await expect(adapter.generateCoverLetter('resume', 'job'))\n        .rejects.toThrow('Rate limit exceeded');\n    });\n  });\n\n  describe('calculateRelevancy', () => {\n    beforeEach(async () => {\n      mockService.initialize.mockResolvedValue(true);\n      mockService.isReady.mockReturnValue(true);\n      await adapter.initialize();\n    });\n\n    it('should calculate relevancy score successfully', async () => {\n      const mockCompletion = {\n        choices: [{\n          message: {\n            content: '87'\n          }\n        }]\n      };\n      mockService.createCompletion.mockResolvedValue(mockCompletion as any);\n\n      const result = await adapter.calculateRelevancy('resume text', 'job description');\n\n      expect(mockService.createCompletion).toHaveBeenCalledWith(\n        [{ role: 'user', content: expect.stringContaining('ATS') }],\n        { temperature: 0.1, maxTokens: 50 }\n      );\n      expect(result).toBe(87);\n    });\n\n    it('should handle response with extra text', async () => {\n      const mockCompletion = {\n        choices: [{\n          message: {\n            content: 'Based on the analysis, the score is 94.'\n          }\n        }]\n      };\n      mockService.createCompletion.mockResolvedValue(mockCompletion as any);\n\n      const result = await adapter.calculateRelevancy('resume', 'job');\n\n      expect(result).toBe(94);\n    });\n\n    it('should clamp scores to valid range', async () => {\n      const mockCompletion = {\n        choices: [{\n          message: {\n            content: '150'\n          }\n        }]\n      };\n      mockService.createCompletion.mockResolvedValue(mockCompletion as any);\n\n      const result = await adapter.calculateRelevancy('resume', 'job');\n\n      expect(result).toBe(100); // Clamped to maximum\n    });\n\n    it('should throw error when no score found', async () => {\n      const mockCompletion = {\n        choices: [{\n          message: {\n            content: 'No numeric value available'\n          }\n        }]\n      };\n      mockService.createCompletion.mockResolvedValue(mockCompletion as any);\n\n      await expect(adapter.calculateRelevancy('resume', 'job'))\n        .rejects.toThrow('Could not extract relevancy score from response');\n    });\n  });\n\n  describe('tailorResume', () => {\n    beforeEach(async () => {\n      mockService.initialize.mockResolvedValue(true);\n      mockService.isReady.mockReturnValue(true);\n      await adapter.initialize();\n    });\n\n    it('should tailor resume successfully', async () => {\n      const tailoredContent = 'John Doe\\nSenior Software Engineer...';\n      mockService.tailorResume.mockResolvedValue(tailoredContent);\n\n      const result = await adapter.tailorResume('original resume', 'job description');\n\n      expect(mockService.tailorResume).toHaveBeenCalledWith('original resume', 'job description');\n      expect(result).toBe(tailoredContent);\n    });\n\n    it('should handle service errors', async () => {\n      const error = new Error('Azure OpenAI service error');\n      mockService.tailorResume.mockRejectedValue(error);\n\n      await expect(adapter.tailorResume('resume', 'job'))\n        .rejects.toThrow('Azure OpenAI service error');\n    });\n  });\n\n  describe('generateQuestions', () => {\n    beforeEach(async () => {\n      mockService.initialize.mockResolvedValue(true);\n      mockService.isReady.mockReturnValue(true);\n      await adapter.initialize();\n    });\n\n    it('should generate questions successfully', async () => {\n      const questions = [\n        'Tell me about your experience',\n        'How do you handle challenges?',\n        'What are your strengths?'\n      ];\n      mockService.generateQuestions.mockResolvedValue(questions);\n\n      const resumeInfo = {\n        name: 'John Doe',\n        experience: '5 years',\n        education: 'BS',\n        skills: 'React, Node.js'\n      };\n\n      const result = await adapter.generateQuestions(resumeInfo);\n\n      expect(mockService.generateQuestions).toHaveBeenCalledWith(resumeInfo);\n      expect(result).toEqual(questions);\n    });\n\n    it('should handle service errors', async () => {\n      const error = new Error('Question generation failed');\n      mockService.generateQuestions.mockRejectedValue(error);\n\n      const resumeInfo = {\n        name: 'Test',\n        experience: 'test',\n        education: 'test',\n        skills: 'test'\n      };\n\n      await expect(adapter.generateQuestions(resumeInfo))\n        .rejects.toThrow('Question generation failed');\n    });\n  });\n\n  describe('dispose', () => {\n    it('should dispose resources properly', async () => {\n      mockService.initialize.mockResolvedValue(true);\n      mockService.isReady.mockReturnValue(true);\n      await adapter.initialize();\n      \n      expect(adapter.isReady()).toBe(true);\n      \n      adapter.dispose();\n      \n      expect(adapter.isReady()).toBe(false);\n    });\n\n    it('should handle dispose when not initialized', () => {\n      expect(() => adapter.dispose()).not.toThrow();\n      expect(adapter.isReady()).toBe(false);\n    });\n  });\n\n  describe('Error Handling', () => {\n    beforeEach(async () => {\n      mockService.initialize.mockResolvedValue(true);\n      mockService.isReady.mockReturnValue(true);\n      await adapter.initialize();\n    });\n\n    it('should handle service initialization failures', async () => {\n      mockService.initialize.mockResolvedValue(false);\n      const newAdapter = new AzureOpenAIAdapter();\n\n      const result = await newAdapter.initialize();\n\n      expect(result).toBe(false);\n      expect(newAdapter.isReady()).toBe(false);\n    });\n\n    it('should handle network errors in createCompletion', async () => {\n      const networkError = new Error('Network connection failed');\n      mockService.createCompletion.mockRejectedValue(networkError);\n\n      await expect(adapter.generateCoverLetter('resume', 'job'))\n        .rejects.toThrow('Network connection failed');\n    });\n\n    it('should handle malformed completion responses', async () => {\n      const malformedCompletion = {\n        choices: [{\n          // Missing message property\n        }]\n      };\n      mockService.createCompletion.mockResolvedValue(malformedCompletion as any);\n\n      await expect(adapter.generateCoverLetter('resume', 'job'))\n        .rejects.toThrow('Empty response from Azure OpenAI');\n    });\n\n    it('should handle Azure service not ready', async () => {\n      mockService.isReady.mockReturnValue(false);\n\n      await expect(adapter.generateCoverLetter('resume', 'job'))\n        .rejects.toThrow('Azure OpenAI adapter not initialized');\n    });\n  });\n\n  describe('Integration with Azure Service', () => {\n    beforeEach(async () => {\n      mockService.initialize.mockResolvedValue(true);\n      mockService.isReady.mockReturnValue(true);\n      await adapter.initialize();\n    });\n\n    it('should use correct parameters for cover letter generation', async () => {\n      const mockCompletion = {\n        choices: [{\n          message: {\n            content: 'Generated cover letter'\n          }\n        }]\n      };\n      mockService.createCompletion.mockResolvedValue(mockCompletion as any);\n\n      await adapter.generateCoverLetter('resume text', 'job desc');\n\n      expect(mockService.createCompletion).toHaveBeenCalledWith(\n        [{ role: 'user', content: expect.stringContaining('cover letter') }],\n        { temperature: 0.7, maxTokens: 1500 }\n      );\n    });\n\n    it('should use correct parameters for relevancy calculation', async () => {\n      const mockCompletion = {\n        choices: [{\n          message: {\n            content: '75'\n          }\n        }]\n      };\n      mockService.createCompletion.mockResolvedValue(mockCompletion as any);\n\n      await adapter.calculateRelevancy('resume', 'job');\n\n      expect(mockService.createCompletion).toHaveBeenCalledWith(\n        [{ role: 'user', content: expect.stringContaining('relevancy') }],\n        { temperature: 0.1, maxTokens: 50 }\n      );\n    });\n\n    it('should delegate tailorResume to service directly', async () => {\n      mockService.tailorResume.mockResolvedValue('tailored content');\n\n      await adapter.tailorResume('original', 'job');\n\n      expect(mockService.tailorResume).toHaveBeenCalledWith('original', 'job');\n      expect(mockService.createCompletion).not.toHaveBeenCalled();\n    });\n\n    it('should delegate generateQuestions to service directly', async () => {\n      const questions = ['Q1', 'Q2'];\n      mockService.generateQuestions.mockResolvedValue(questions);\n\n      const resumeInfo = {\n        name: 'Test',\n        experience: 'test',\n        education: 'test',\n        skills: 'test'\n      };\n\n      await adapter.generateQuestions(resumeInfo);\n\n      expect(mockService.generateQuestions).toHaveBeenCalledWith(resumeInfo);\n      expect(mockService.createCompletion).not.toHaveBeenCalled();\n    });\n  });\n});\n"],"version":3}