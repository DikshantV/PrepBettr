00b9d92b069f61286fe4252dc0c556be
"use strict";

/* istanbul ignore next */
function cov_sxfha54ly() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/services/azure-cosmos-service.ts";
  var hash = "56a5c784bd621cd895dafb1d973c3f6b2ad8d130";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/services/azure-cosmos-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 36
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 41
        }
      },
      "3": {
        start: {
          line: 5,
          column: 29
        },
        end: {
          line: 5,
          column: 71
        }
      },
      "4": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 27
        }
      },
      "5": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 29
        }
      },
      "6": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 36
        }
      },
      "7": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 33
        }
      },
      "8": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 17,
          column: 19
        }
      },
      "9": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 17,
          column: 19
        }
      },
      "10": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 68,
          column: 9
        }
      },
      "11": {
        start: {
          line: 20,
          column: 33
        },
        end: {
          line: 20,
          column: 84
        }
      },
      "12": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 23,
          column: 13
        }
      },
      "13": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 94
        }
      },
      "14": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 83
        }
      },
      "15": {
        start: {
          line: 27,
          column: 33
        },
        end: {
          line: 29,
          column: 14
        }
      },
      "16": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 37
        }
      },
      "17": {
        start: {
          line: 32,
          column: 41
        },
        end: {
          line: 50,
          column: 13
        }
      },
      "18": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 54,
          column: 13
        }
      },
      "19": {
        start: {
          line: 53,
          column: 16
        },
        end: {
          line: 53,
          column: 66
        }
      },
      "20": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 61,
          column: 13
        }
      },
      "21": {
        start: {
          line: 56,
          column: 38
        },
        end: {
          line: 59,
          column: 18
        }
      },
      "22": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 60,
          column: 64
        }
      },
      "23": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 36
        }
      },
      "24": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 65
        }
      },
      "25": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 76
        }
      },
      "26": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 24
        }
      },
      "27": {
        start: {
          line: 71,
          column: 26
        },
        end: {
          line: 71,
          column: 60
        }
      },
      "28": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "29": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 104
        }
      },
      "30": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 25
        }
      },
      "31": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 32
        }
      },
      "32": {
        start: {
          line: 80,
          column: 26
        },
        end: {
          line: 80,
          column: 52
        }
      },
      "33": {
        start: {
          line: 81,
          column: 25
        },
        end: {
          line: 81,
          column: 124
        }
      },
      "34": {
        start: {
          line: 82,
          column: 29
        },
        end: {
          line: 82,
          column: 67
        }
      },
      "35": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 27
        }
      },
      "36": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 32
        }
      },
      "37": {
        start: {
          line: 87,
          column: 26
        },
        end: {
          line: 87,
          column: 52
        }
      },
      "38": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "39": {
        start: {
          line: 89,
          column: 33
        },
        end: {
          line: 89,
          column: 76
        }
      },
      "40": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 36
        }
      },
      "41": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 94,
          column: 28
        }
      },
      "42": {
        start: {
          line: 94,
          column: 16
        },
        end: {
          line: 94,
          column: 28
        }
      },
      "43": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 24
        }
      },
      "44": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 99,
          column: 32
        }
      },
      "45": {
        start: {
          line: 100,
          column: 26
        },
        end: {
          line: 100,
          column: 52
        }
      },
      "46": {
        start: {
          line: 101,
          column: 39
        },
        end: {
          line: 101,
          column: 82
        }
      },
      "47": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 103,
          column: 46
        }
      },
      "48": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 46
        }
      },
      "49": {
        start: {
          line: 104,
          column: 24
        },
        end: {
          line: 104,
          column: 140
        }
      },
      "50": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 105,
          column: 62
        }
      },
      "51": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 32
        }
      },
      "52": {
        start: {
          line: 110,
          column: 26
        },
        end: {
          line: 110,
          column: 57
        }
      },
      "53": {
        start: {
          line: 111,
          column: 19
        },
        end: {
          line: 111,
          column: 87
        }
      },
      "54": {
        start: {
          line: 112,
          column: 25
        },
        end: {
          line: 112,
          column: 117
        }
      },
      "55": {
        start: {
          line: 113,
          column: 29
        },
        end: {
          line: 113,
          column: 67
        }
      },
      "56": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 27
        }
      },
      "57": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 117,
          column: 32
        }
      },
      "58": {
        start: {
          line: 118,
          column: 26
        },
        end: {
          line: 118,
          column: 57
        }
      },
      "59": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 127,
          column: 9
        }
      },
      "60": {
        start: {
          line: 120,
          column: 33
        },
        end: {
          line: 120,
          column: 81
        }
      },
      "61": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 36
        }
      },
      "62": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 125,
          column: 28
        }
      },
      "63": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 125,
          column: 28
        }
      },
      "64": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 24
        }
      },
      "65": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 32
        }
      },
      "66": {
        start: {
          line: 131,
          column: 26
        },
        end: {
          line: 131,
          column: 57
        }
      },
      "67": {
        start: {
          line: 132,
          column: 26
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "68": {
        start: {
          line: 136,
          column: 30
        },
        end: {
          line: 136,
          column: 79
        }
      },
      "69": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 137,
          column: 25
        }
      },
      "70": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 140,
          column: 32
        }
      },
      "71": {
        start: {
          line: 141,
          column: 26
        },
        end: {
          line: 141,
          column: 57
        }
      },
      "72": {
        start: {
          line: 142,
          column: 26
        },
        end: {
          line: 148,
          column: 9
        }
      },
      "73": {
        start: {
          line: 149,
          column: 30
        },
        end: {
          line: 149,
          column: 79
        }
      },
      "74": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 150,
          column: 25
        }
      },
      "75": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 153,
          column: 32
        }
      },
      "76": {
        start: {
          line: 154,
          column: 26
        },
        end: {
          line: 154,
          column: 57
        }
      },
      "77": {
        start: {
          line: 155,
          column: 26
        },
        end: {
          line: 161,
          column: 9
        }
      },
      "78": {
        start: {
          line: 162,
          column: 30
        },
        end: {
          line: 162,
          column: 79
        }
      },
      "79": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 163,
          column: 25
        }
      },
      "80": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 166,
          column: 32
        }
      },
      "81": {
        start: {
          line: 167,
          column: 26
        },
        end: {
          line: 167,
          column: 57
        }
      },
      "82": {
        start: {
          line: 168,
          column: 39
        },
        end: {
          line: 168,
          column: 87
        }
      },
      "83": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 170,
          column: 51
        }
      },
      "84": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 51
        }
      },
      "85": {
        start: {
          line: 171,
          column: 24
        },
        end: {
          line: 171,
          column: 140
        }
      },
      "86": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 172,
          column: 67
        }
      },
      "87": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 175,
          column: 32
        }
      },
      "88": {
        start: {
          line: 176,
          column: 26
        },
        end: {
          line: 176,
          column: 57
        }
      },
      "89": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 59
        }
      },
      "90": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 181,
          column: 32
        }
      },
      "91": {
        start: {
          line: 182,
          column: 26
        },
        end: {
          line: 182,
          column: 55
        }
      },
      "92": {
        start: {
          line: 183,
          column: 19
        },
        end: {
          line: 183,
          column: 86
        }
      },
      "93": {
        start: {
          line: 184,
          column: 25
        },
        end: {
          line: 184,
          column: 115
        }
      },
      "94": {
        start: {
          line: 185,
          column: 29
        },
        end: {
          line: 185,
          column: 67
        }
      },
      "95": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 186,
          column: 27
        }
      },
      "96": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 189,
          column: 32
        }
      },
      "97": {
        start: {
          line: 190,
          column: 26
        },
        end: {
          line: 190,
          column: 55
        }
      },
      "98": {
        start: {
          line: 191,
          column: 26
        },
        end: {
          line: 197,
          column: 9
        }
      },
      "99": {
        start: {
          line: 198,
          column: 30
        },
        end: {
          line: 198,
          column: 79
        }
      },
      "100": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 199,
          column: 36
        }
      },
      "101": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 203,
          column: 32
        }
      },
      "102": {
        start: {
          line: 204,
          column: 26
        },
        end: {
          line: 204,
          column: 54
        }
      },
      "103": {
        start: {
          line: 205,
          column: 25
        },
        end: {
          line: 205,
          column: 107
        }
      },
      "104": {
        start: {
          line: 206,
          column: 29
        },
        end: {
          line: 206,
          column: 67
        }
      },
      "105": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 207,
          column: 27
        }
      },
      "106": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 210,
          column: 32
        }
      },
      "107": {
        start: {
          line: 211,
          column: 26
        },
        end: {
          line: 211,
          column: 54
        }
      },
      "108": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 220,
          column: 9
        }
      },
      "109": {
        start: {
          line: 213,
          column: 33
        },
        end: {
          line: 213,
          column: 76
        }
      },
      "110": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 214,
          column: 36
        }
      },
      "111": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 218,
          column: 28
        }
      },
      "112": {
        start: {
          line: 218,
          column: 16
        },
        end: {
          line: 218,
          column: 28
        }
      },
      "113": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 24
        }
      },
      "114": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 223,
          column: 32
        }
      },
      "115": {
        start: {
          line: 224,
          column: 26
        },
        end: {
          line: 224,
          column: 54
        }
      },
      "116": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 232,
          column: 9
        }
      },
      "117": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 226,
          column: 58
        }
      },
      "118": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 230,
          column: 23
        }
      },
      "119": {
        start: {
          line: 230,
          column: 16
        },
        end: {
          line: 230,
          column: 23
        }
      },
      "120": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 231,
          column: 24
        }
      },
      "121": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 236,
          column: 32
        }
      },
      "122": {
        start: {
          line: 237,
          column: 26
        },
        end: {
          line: 237,
          column: 52
        }
      },
      "123": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 246,
          column: 9
        }
      },
      "124": {
        start: {
          line: 239,
          column: 33
        },
        end: {
          line: 239,
          column: 76
        }
      },
      "125": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 240,
          column: 36
        }
      },
      "126": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 244,
          column: 28
        }
      },
      "127": {
        start: {
          line: 244,
          column: 16
        },
        end: {
          line: 244,
          column: 28
        }
      },
      "128": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 24
        }
      },
      "129": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 249,
          column: 32
        }
      },
      "130": {
        start: {
          line: 250,
          column: 26
        },
        end: {
          line: 250,
          column: 52
        }
      },
      "131": {
        start: {
          line: 251,
          column: 26
        },
        end: {
          line: 258,
          column: 9
        }
      },
      "132": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 259,
          column: 48
        }
      },
      "133": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 262,
          column: 32
        }
      },
      "134": {
        start: {
          line: 263,
          column: 26
        },
        end: {
          line: 263,
          column: 52
        }
      },
      "135": {
        start: {
          line: 264,
          column: 39
        },
        end: {
          line: 264,
          column: 82
        }
      },
      "136": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 268,
          column: 9
        }
      },
      "137": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 266,
          column: 51
        }
      },
      "138": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 267,
          column: 53
        }
      },
      "139": {
        start: {
          line: 269,
          column: 24
        },
        end: {
          line: 269,
          column: 211
        }
      },
      "140": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 270,
          column: 62
        }
      },
      "141": {
        start: {
          line: 273,
          column: 22
        },
        end: {
          line: 273,
          column: 53
        }
      },
      "142": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 277,
          column: 9
        }
      },
      "143": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 275,
          column: 51
        }
      },
      "144": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 276,
          column: 24
        }
      },
      "145": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 278,
          column: 53
        }
      },
      "146": {
        start: {
          line: 282,
          column: 8
        },
        end: {
          line: 282,
          column: 32
        }
      },
      "147": {
        start: {
          line: 283,
          column: 26
        },
        end: {
          line: 283,
          column: 58
        }
      },
      "148": {
        start: {
          line: 284,
          column: 19
        },
        end: {
          line: 284,
          column: 81
        }
      },
      "149": {
        start: {
          line: 285,
          column: 25
        },
        end: {
          line: 285,
          column: 93
        }
      },
      "150": {
        start: {
          line: 286,
          column: 29
        },
        end: {
          line: 286,
          column: 67
        }
      },
      "151": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 287,
          column: 27
        }
      },
      "152": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 290,
          column: 32
        }
      },
      "153": {
        start: {
          line: 291,
          column: 26
        },
        end: {
          line: 291,
          column: 58
        }
      },
      "154": {
        start: {
          line: 292,
          column: 26
        },
        end: {
          line: 295,
          column: 9
        }
      },
      "155": {
        start: {
          line: 296,
          column: 30
        },
        end: {
          line: 296,
          column: 79
        }
      },
      "156": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 297,
          column: 25
        }
      },
      "157": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 301,
          column: 32
        }
      },
      "158": {
        start: {
          line: 302,
          column: 26
        },
        end: {
          line: 302,
          column: 59
        }
      },
      "159": {
        start: {
          line: 303,
          column: 19
        },
        end: {
          line: 303,
          column: 81
        }
      },
      "160": {
        start: {
          line: 304,
          column: 25
        },
        end: {
          line: 304,
          column: 121
        }
      },
      "161": {
        start: {
          line: 305,
          column: 29
        },
        end: {
          line: 305,
          column: 67
        }
      },
      "162": {
        start: {
          line: 306,
          column: 8
        },
        end: {
          line: 306,
          column: 27
        }
      },
      "163": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 309,
          column: 32
        }
      },
      "164": {
        start: {
          line: 310,
          column: 26
        },
        end: {
          line: 310,
          column: 59
        }
      },
      "165": {
        start: {
          line: 311,
          column: 26
        },
        end: {
          line: 314,
          column: 9
        }
      },
      "166": {
        start: {
          line: 315,
          column: 30
        },
        end: {
          line: 315,
          column: 79
        }
      },
      "167": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 316,
          column: 25
        }
      },
      "168": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 320,
          column: 32
        }
      },
      "169": {
        start: {
          line: 321,
          column: 26
        },
        end: {
          line: 321,
          column: 67
        }
      },
      "170": {
        start: {
          line: 322,
          column: 19
        },
        end: {
          line: 322,
          column: 85
        }
      },
      "171": {
        start: {
          line: 323,
          column: 25
        },
        end: {
          line: 323,
          column: 113
        }
      },
      "172": {
        start: {
          line: 324,
          column: 29
        },
        end: {
          line: 324,
          column: 67
        }
      },
      "173": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 325,
          column: 27
        }
      },
      "174": {
        start: {
          line: 328,
          column: 8
        },
        end: {
          line: 328,
          column: 32
        }
      },
      "175": {
        start: {
          line: 329,
          column: 35
        },
        end: {
          line: 329,
          column: 37
        }
      },
      "176": {
        start: {
          line: 330,
          column: 28
        },
        end: {
          line: 333,
          column: 9
        }
      },
      "177": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 366,
          column: 9
        }
      },
      "178": {
        start: {
          line: 335,
          column: 12
        },
        end: {
          line: 365,
          column: 13
        }
      },
      "179": {
        start: {
          line: 336,
          column: 34
        },
        end: {
          line: 336,
          column: 67
        }
      },
      "180": {
        start: {
          line: 337,
          column: 16
        },
        end: {
          line: 361,
          column: 17
        }
      },
      "181": {
        start: {
          line: 339,
          column: 20
        },
        end: {
          line: 346,
          column: 21
        }
      },
      "182": {
        start: {
          line: 340,
          column: 24
        },
        end: {
          line: 340,
          column: 70
        }
      },
      "183": {
        start: {
          line: 341,
          column: 24
        },
        end: {
          line: 341,
          column: 64
        }
      },
      "184": {
        start: {
          line: 344,
          column: 24
        },
        end: {
          line: 345,
          column: 40
        }
      },
      "185": {
        start: {
          line: 345,
          column: 28
        },
        end: {
          line: 345,
          column: 40
        }
      },
      "186": {
        start: {
          line: 350,
          column: 38
        },
        end: {
          line: 353,
          column: 21
        }
      },
      "187": {
        start: {
          line: 354,
          column: 42
        },
        end: {
          line: 354,
          column: 91
        }
      },
      "188": {
        start: {
          line: 355,
          column: 20
        },
        end: {
          line: 360,
          column: 21
        }
      },
      "189": {
        start: {
          line: 356,
          column: 24
        },
        end: {
          line: 358,
          column: 25
        }
      },
      "190": {
        start: {
          line: 357,
          column: 28
        },
        end: {
          line: 357,
          column: 75
        }
      },
      "191": {
        start: {
          line: 359,
          column: 24
        },
        end: {
          line: 359,
          column: 64
        }
      },
      "192": {
        start: {
          line: 364,
          column: 16
        },
        end: {
          line: 364,
          column: 79
        }
      },
      "193": {
        start: {
          line: 367,
          column: 8
        },
        end: {
          line: 367,
          column: 34
        }
      },
      "194": {
        start: {
          line: 371,
          column: 8
        },
        end: {
          line: 371,
          column: 32
        }
      },
      "195": {
        start: {
          line: 372,
          column: 26
        },
        end: {
          line: 372,
          column: 65
        }
      },
      "196": {
        start: {
          line: 373,
          column: 19
        },
        end: {
          line: 373,
          column: 84
        }
      },
      "197": {
        start: {
          line: 374,
          column: 25
        },
        end: {
          line: 374,
          column: 109
        }
      },
      "198": {
        start: {
          line: 375,
          column: 29
        },
        end: {
          line: 375,
          column: 67
        }
      },
      "199": {
        start: {
          line: 376,
          column: 8
        },
        end: {
          line: 376,
          column: 27
        }
      },
      "200": {
        start: {
          line: 379,
          column: 8
        },
        end: {
          line: 379,
          column: 32
        }
      },
      "201": {
        start: {
          line: 380,
          column: 26
        },
        end: {
          line: 380,
          column: 65
        }
      },
      "202": {
        start: {
          line: 381,
          column: 39
        },
        end: {
          line: 381,
          column: 83
        }
      },
      "203": {
        start: {
          line: 382,
          column: 8
        },
        end: {
          line: 383,
          column: 60
        }
      },
      "204": {
        start: {
          line: 383,
          column: 12
        },
        end: {
          line: 383,
          column: 60
        }
      },
      "205": {
        start: {
          line: 384,
          column: 24
        },
        end: {
          line: 384,
          column: 140
        }
      },
      "206": {
        start: {
          line: 385,
          column: 8
        },
        end: {
          line: 385,
          column: 63
        }
      },
      "207": {
        start: {
          line: 388,
          column: 8
        },
        end: {
          line: 388,
          column: 32
        }
      },
      "208": {
        start: {
          line: 389,
          column: 26
        },
        end: {
          line: 389,
          column: 65
        }
      },
      "209": {
        start: {
          line: 390,
          column: 26
        },
        end: {
          line: 396,
          column: 9
        }
      },
      "210": {
        start: {
          line: 397,
          column: 30
        },
        end: {
          line: 397,
          column: 79
        }
      },
      "211": {
        start: {
          line: 398,
          column: 8
        },
        end: {
          line: 398,
          column: 25
        }
      },
      "212": {
        start: {
          line: 402,
          column: 8
        },
        end: {
          line: 402,
          column: 32
        }
      },
      "213": {
        start: {
          line: 403,
          column: 26
        },
        end: {
          line: 403,
          column: 60
        }
      },
      "214": {
        start: {
          line: 404,
          column: 19
        },
        end: {
          line: 404,
          column: 83
        }
      },
      "215": {
        start: {
          line: 405,
          column: 25
        },
        end: {
          line: 405,
          column: 114
        }
      },
      "216": {
        start: {
          line: 406,
          column: 29
        },
        end: {
          line: 406,
          column: 67
        }
      },
      "217": {
        start: {
          line: 407,
          column: 8
        },
        end: {
          line: 407,
          column: 27
        }
      },
      "218": {
        start: {
          line: 410,
          column: 8
        },
        end: {
          line: 410,
          column: 32
        }
      },
      "219": {
        start: {
          line: 411,
          column: 26
        },
        end: {
          line: 411,
          column: 60
        }
      },
      "220": {
        start: {
          line: 412,
          column: 27
        },
        end: {
          line: 412,
          column: 79
        }
      },
      "221": {
        start: {
          line: 413,
          column: 26
        },
        end: {
          line: 420,
          column: 9
        }
      },
      "222": {
        start: {
          line: 421,
          column: 30
        },
        end: {
          line: 421,
          column: 79
        }
      },
      "223": {
        start: {
          line: 422,
          column: 8
        },
        end: {
          line: 422,
          column: 25
        }
      },
      "224": {
        start: {
          line: 425,
          column: 8
        },
        end: {
          line: 425,
          column: 32
        }
      },
      "225": {
        start: {
          line: 426,
          column: 26
        },
        end: {
          line: 426,
          column: 60
        }
      },
      "226": {
        start: {
          line: 427,
          column: 27
        },
        end: {
          line: 427,
          column: 79
        }
      },
      "227": {
        start: {
          line: 428,
          column: 26
        },
        end: {
          line: 434,
          column: 9
        }
      },
      "228": {
        start: {
          line: 435,
          column: 30
        },
        end: {
          line: 435,
          column: 79
        }
      },
      "229": {
        start: {
          line: 436,
          column: 8
        },
        end: {
          line: 436,
          column: 33
        }
      },
      "230": {
        start: {
          line: 440,
          column: 8
        },
        end: {
          line: 440,
          column: 32
        }
      },
      "231": {
        start: {
          line: 441,
          column: 26
        },
        end: {
          line: 441,
          column: 59
        }
      },
      "232": {
        start: {
          line: 442,
          column: 19
        },
        end: {
          line: 442,
          column: 84
        }
      },
      "233": {
        start: {
          line: 443,
          column: 25
        },
        end: {
          line: 443,
          column: 116
        }
      },
      "234": {
        start: {
          line: 444,
          column: 29
        },
        end: {
          line: 444,
          column: 67
        }
      },
      "235": {
        start: {
          line: 445,
          column: 8
        },
        end: {
          line: 445,
          column: 27
        }
      },
      "236": {
        start: {
          line: 449,
          column: 8
        },
        end: {
          line: 449,
          column: 32
        }
      },
      "237": {
        start: {
          line: 450,
          column: 26
        },
        end: {
          line: 450,
          column: 65
        }
      },
      "238": {
        start: {
          line: 451,
          column: 19
        },
        end: {
          line: 451,
          column: 84
        }
      },
      "239": {
        start: {
          line: 452,
          column: 25
        },
        end: {
          line: 452,
          column: 123
        }
      },
      "240": {
        start: {
          line: 453,
          column: 29
        },
        end: {
          line: 453,
          column: 67
        }
      },
      "241": {
        start: {
          line: 454,
          column: 8
        },
        end: {
          line: 454,
          column: 27
        }
      },
      "242": {
        start: {
          line: 457,
          column: 8
        },
        end: {
          line: 457,
          column: 32
        }
      },
      "243": {
        start: {
          line: 458,
          column: 26
        },
        end: {
          line: 458,
          column: 65
        }
      },
      "244": {
        start: {
          line: 459,
          column: 26
        },
        end: {
          line: 466,
          column: 9
        }
      },
      "245": {
        start: {
          line: 467,
          column: 30
        },
        end: {
          line: 467,
          column: 79
        }
      },
      "246": {
        start: {
          line: 468,
          column: 8
        },
        end: {
          line: 468,
          column: 36
        }
      },
      "247": {
        start: {
          line: 471,
          column: 8
        },
        end: {
          line: 471,
          column: 32
        }
      },
      "248": {
        start: {
          line: 472,
          column: 26
        },
        end: {
          line: 472,
          column: 65
        }
      },
      "249": {
        start: {
          line: 473,
          column: 39
        },
        end: {
          line: 473,
          column: 90
        }
      },
      "250": {
        start: {
          line: 474,
          column: 8
        },
        end: {
          line: 475,
          column: 60
        }
      },
      "251": {
        start: {
          line: 475,
          column: 12
        },
        end: {
          line: 475,
          column: 60
        }
      },
      "252": {
        start: {
          line: 476,
          column: 24
        },
        end: {
          line: 476,
          column: 117
        }
      },
      "253": {
        start: {
          line: 477,
          column: 8
        },
        end: {
          line: 477,
          column: 70
        }
      },
      "254": {
        start: {
          line: 481,
          column: 8
        },
        end: {
          line: 481,
          column: 32
        }
      },
      "255": {
        start: {
          line: 482,
          column: 26
        },
        end: {
          line: 482,
          column: 55
        }
      },
      "256": {
        start: {
          line: 483,
          column: 25
        },
        end: {
          line: 483,
          column: 109
        }
      },
      "257": {
        start: {
          line: 484,
          column: 29
        },
        end: {
          line: 484,
          column: 67
        }
      },
      "258": {
        start: {
          line: 485,
          column: 8
        },
        end: {
          line: 485,
          column: 27
        }
      },
      "259": {
        start: {
          line: 488,
          column: 8
        },
        end: {
          line: 488,
          column: 32
        }
      },
      "260": {
        start: {
          line: 489,
          column: 26
        },
        end: {
          line: 489,
          column: 55
        }
      },
      "261": {
        start: {
          line: 490,
          column: 8
        },
        end: {
          line: 498,
          column: 9
        }
      },
      "262": {
        start: {
          line: 491,
          column: 33
        },
        end: {
          line: 491,
          column: 76
        }
      },
      "263": {
        start: {
          line: 492,
          column: 12
        },
        end: {
          line: 492,
          column: 36
        }
      },
      "264": {
        start: {
          line: 495,
          column: 12
        },
        end: {
          line: 496,
          column: 28
        }
      },
      "265": {
        start: {
          line: 496,
          column: 16
        },
        end: {
          line: 496,
          column: 28
        }
      },
      "266": {
        start: {
          line: 497,
          column: 12
        },
        end: {
          line: 497,
          column: 24
        }
      },
      "267": {
        start: {
          line: 501,
          column: 8
        },
        end: {
          line: 501,
          column: 32
        }
      },
      "268": {
        start: {
          line: 502,
          column: 26
        },
        end: {
          line: 502,
          column: 55
        }
      },
      "269": {
        start: {
          line: 503,
          column: 39
        },
        end: {
          line: 503,
          column: 82
        }
      },
      "270": {
        start: {
          line: 504,
          column: 8
        },
        end: {
          line: 512,
          column: 9
        }
      },
      "271": {
        start: {
          line: 506,
          column: 31
        },
        end: {
          line: 506,
          column: 142
        }
      },
      "272": {
        start: {
          line: 507,
          column: 12
        },
        end: {
          line: 507,
          column: 53
        }
      },
      "273": {
        start: {
          line: 510,
          column: 28
        },
        end: {
          line: 510,
          column: 144
        }
      },
      "274": {
        start: {
          line: 511,
          column: 12
        },
        end: {
          line: 511,
          column: 66
        }
      },
      "275": {
        start: {
          line: 516,
          column: 8
        },
        end: {
          line: 516,
          column: 32
        }
      },
      "276": {
        start: {
          line: 517,
          column: 26
        },
        end: {
          line: 517,
          column: 58
        }
      },
      "277": {
        start: {
          line: 518,
          column: 26
        },
        end: {
          line: 518,
          column: 47
        }
      },
      "278": {
        start: {
          line: 519,
          column: 29
        },
        end: {
          line: 519,
          column: 65
        }
      },
      "279": {
        start: {
          line: 520,
          column: 30
        },
        end: {
          line: 522,
          column: 23
        }
      },
      "280": {
        start: {
          line: 523,
          column: 8
        },
        end: {
          line: 523,
          column: 25
        }
      },
      "281": {
        start: {
          line: 527,
          column: 8
        },
        end: {
          line: 527,
          column: 32
        }
      },
      "282": {
        start: {
          line: 528,
          column: 26
        },
        end: {
          line: 528,
          column: 58
        }
      },
      "283": {
        start: {
          line: 529,
          column: 29
        },
        end: {
          line: 529,
          column: 67
        }
      },
      "284": {
        start: {
          line: 530,
          column: 8
        },
        end: {
          line: 530,
          column: 27
        }
      },
      "285": {
        start: {
          line: 533,
          column: 8
        },
        end: {
          line: 533,
          column: 32
        }
      },
      "286": {
        start: {
          line: 534,
          column: 26
        },
        end: {
          line: 534,
          column: 58
        }
      },
      "287": {
        start: {
          line: 535,
          column: 8
        },
        end: {
          line: 543,
          column: 9
        }
      },
      "288": {
        start: {
          line: 536,
          column: 33
        },
        end: {
          line: 536,
          column: 86
        }
      },
      "289": {
        start: {
          line: 537,
          column: 12
        },
        end: {
          line: 537,
          column: 36
        }
      },
      "290": {
        start: {
          line: 540,
          column: 12
        },
        end: {
          line: 541,
          column: 28
        }
      },
      "291": {
        start: {
          line: 541,
          column: 16
        },
        end: {
          line: 541,
          column: 28
        }
      },
      "292": {
        start: {
          line: 542,
          column: 12
        },
        end: {
          line: 542,
          column: 24
        }
      },
      "293": {
        start: {
          line: 546,
          column: 8
        },
        end: {
          line: 546,
          column: 32
        }
      },
      "294": {
        start: {
          line: 547,
          column: 26
        },
        end: {
          line: 547,
          column: 58
        }
      },
      "295": {
        start: {
          line: 548,
          column: 39
        },
        end: {
          line: 548,
          column: 92
        }
      },
      "296": {
        start: {
          line: 549,
          column: 8
        },
        end: {
          line: 550,
          column: 50
        }
      },
      "297": {
        start: {
          line: 550,
          column: 12
        },
        end: {
          line: 550,
          column: 50
        }
      },
      "298": {
        start: {
          line: 551,
          column: 24
        },
        end: {
          line: 551,
          column: 75
        }
      },
      "299": {
        start: {
          line: 552,
          column: 8
        },
        end: {
          line: 552,
          column: 72
        }
      },
      "300": {
        start: {
          line: 555,
          column: 8
        },
        end: {
          line: 555,
          column: 32
        }
      },
      "301": {
        start: {
          line: 556,
          column: 26
        },
        end: {
          line: 556,
          column: 58
        }
      },
      "302": {
        start: {
          line: 557,
          column: 8
        },
        end: {
          line: 564,
          column: 9
        }
      },
      "303": {
        start: {
          line: 558,
          column: 12
        },
        end: {
          line: 558,
          column: 68
        }
      },
      "304": {
        start: {
          line: 561,
          column: 12
        },
        end: {
          line: 562,
          column: 28
        }
      },
      "305": {
        start: {
          line: 562,
          column: 16
        },
        end: {
          line: 562,
          column: 28
        }
      },
      "306": {
        start: {
          line: 568,
          column: 8
        },
        end: {
          line: 568,
          column: 32
        }
      },
      "307": {
        start: {
          line: 569,
          column: 26
        },
        end: {
          line: 569,
          column: 58
        }
      },
      "308": {
        start: {
          line: 571,
          column: 26
        },
        end: {
          line: 571,
          column: 28
        }
      },
      "309": {
        start: {
          line: 572,
          column: 8
        },
        end: {
          line: 575,
          column: 9
        }
      },
      "310": {
        start: {
          line: 572,
          column: 21
        },
        end: {
          line: 572,
          column: 22
        }
      },
      "311": {
        start: {
          line: 573,
          column: 26
        },
        end: {
          line: 573,
          column: 59
        }
      },
      "312": {
        start: {
          line: 574,
          column: 12
        },
        end: {
          line: 574,
          column: 77
        }
      },
      "313": {
        start: {
          line: 574,
          column: 47
        },
        end: {
          line: 574,
          column: 74
        }
      },
      "314": {
        start: {
          line: 578,
          column: 8
        },
        end: {
          line: 578,
          column: 32
        }
      },
      "315": {
        start: {
          line: 579,
          column: 26
        },
        end: {
          line: 579,
          column: 58
        }
      },
      "316": {
        start: {
          line: 581,
          column: 26
        },
        end: {
          line: 581,
          column: 28
        }
      },
      "317": {
        start: {
          line: 582,
          column: 8
        },
        end: {
          line: 589,
          column: 9
        }
      },
      "318": {
        start: {
          line: 582,
          column: 21
        },
        end: {
          line: 582,
          column: 22
        }
      },
      "319": {
        start: {
          line: 583,
          column: 26
        },
        end: {
          line: 583,
          column: 61
        }
      },
      "320": {
        start: {
          line: 584,
          column: 12
        },
        end: {
          line: 588,
          column: 17
        }
      },
      "321": {
        start: {
          line: 584,
          column: 66
        },
        end: {
          line: 588,
          column: 14
        }
      },
      "322": {
        start: {
          line: 585,
          column: 16
        },
        end: {
          line: 586,
          column: 30
        }
      },
      "323": {
        start: {
          line: 586,
          column: 20
        },
        end: {
          line: 586,
          column: 30
        }
      },
      "324": {
        start: {
          line: 593,
          column: 8
        },
        end: {
          line: 604,
          column: 9
        }
      },
      "325": {
        start: {
          line: 594,
          column: 12
        },
        end: {
          line: 594,
          column: 36
        }
      },
      "326": {
        start: {
          line: 595,
          column: 30
        },
        end: {
          line: 595,
          column: 56
        }
      },
      "327": {
        start: {
          line: 597,
          column: 30
        },
        end: {
          line: 597,
          column: 87
        }
      },
      "328": {
        start: {
          line: 598,
          column: 12
        },
        end: {
          line: 598,
          column: 62
        }
      },
      "329": {
        start: {
          line: 599,
          column: 12
        },
        end: {
          line: 599,
          column: 64
        }
      },
      "330": {
        start: {
          line: 602,
          column: 12
        },
        end: {
          line: 602,
          column: 73
        }
      },
      "331": {
        start: {
          line: 603,
          column: 12
        },
        end: {
          line: 603,
          column: 66
        }
      },
      "332": {
        start: {
          line: 608,
          column: 0
        },
        end: {
          line: 608,
          column: 54
        }
      },
      "333": {
        start: {
          line: 609,
          column: 0
        },
        end: {
          line: 609,
          column: 45
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        loc: {
          start: {
            line: 7,
            column: 18
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 23
          },
          end: {
            line: 69,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 70,
            column: 4
          },
          end: {
            line: 70,
            column: 5
          }
        },
        loc: {
          start: {
            line: 70,
            column: 32
          },
          end: {
            line: 76,
            column: 5
          }
        },
        line: 70
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        },
        loc: {
          start: {
            line: 78,
            column: 31
          },
          end: {
            line: 84,
            column: 5
          }
        },
        line: 78
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 85,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        },
        loc: {
          start: {
            line: 85,
            column: 26
          },
          end: {
            line: 97,
            column: 5
          }
        },
        line: 85
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 98,
            column: 5
          }
        },
        loc: {
          start: {
            line: 98,
            column: 38
          },
          end: {
            line: 106,
            column: 5
          }
        },
        line: 98
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 108,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        },
        loc: {
          start: {
            line: 108,
            column: 41
          },
          end: {
            line: 115,
            column: 5
          }
        },
        line: 108
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 116,
            column: 4
          },
          end: {
            line: 116,
            column: 5
          }
        },
        loc: {
          start: {
            line: 116,
            column: 44
          },
          end: {
            line: 128,
            column: 5
          }
        },
        line: 116
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 129,
            column: 4
          },
          end: {
            line: 129,
            column: 5
          }
        },
        loc: {
          start: {
            line: 129,
            column: 36
          },
          end: {
            line: 138,
            column: 5
          }
        },
        line: 129
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 139,
            column: 4
          },
          end: {
            line: 139,
            column: 5
          }
        },
        loc: {
          start: {
            line: 139,
            column: 50
          },
          end: {
            line: 151,
            column: 5
          }
        },
        line: 139
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 152,
            column: 4
          },
          end: {
            line: 152,
            column: 5
          }
        },
        loc: {
          start: {
            line: 152,
            column: 70
          },
          end: {
            line: 164,
            column: 5
          }
        },
        line: 152
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 165,
            column: 4
          },
          end: {
            line: 165,
            column: 5
          }
        },
        loc: {
          start: {
            line: 165,
            column: 56
          },
          end: {
            line: 173,
            column: 5
          }
        },
        line: 165
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 174,
            column: 4
          },
          end: {
            line: 174,
            column: 5
          }
        },
        loc: {
          start: {
            line: 174,
            column: 47
          },
          end: {
            line: 178,
            column: 5
          }
        },
        line: 174
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 180,
            column: 4
          },
          end: {
            line: 180,
            column: 5
          }
        },
        loc: {
          start: {
            line: 180,
            column: 39
          },
          end: {
            line: 187,
            column: 5
          }
        },
        line: 180
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 188,
            column: 5
          }
        },
        loc: {
          start: {
            line: 188,
            column: 54
          },
          end: {
            line: 200,
            column: 5
          }
        },
        line: 188
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 202,
            column: 4
          },
          end: {
            line: 202,
            column: 5
          }
        },
        loc: {
          start: {
            line: 202,
            column: 33
          },
          end: {
            line: 208,
            column: 5
          }
        },
        line: 202
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 209,
            column: 4
          },
          end: {
            line: 209,
            column: 5
          }
        },
        loc: {
          start: {
            line: 209,
            column: 32
          },
          end: {
            line: 221,
            column: 5
          }
        },
        line: 209
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 222,
            column: 4
          },
          end: {
            line: 222,
            column: 5
          }
        },
        loc: {
          start: {
            line: 222,
            column: 35
          },
          end: {
            line: 233,
            column: 5
          }
        },
        line: 222
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 235,
            column: 4
          },
          end: {
            line: 235,
            column: 5
          }
        },
        loc: {
          start: {
            line: 235,
            column: 31
          },
          end: {
            line: 247,
            column: 5
          }
        },
        line: 235
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 248,
            column: 4
          },
          end: {
            line: 248,
            column: 5
          }
        },
        loc: {
          start: {
            line: 248,
            column: 38
          },
          end: {
            line: 260,
            column: 5
          }
        },
        line: 248
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 261,
            column: 4
          },
          end: {
            line: 261,
            column: 5
          }
        },
        loc: {
          start: {
            line: 261,
            column: 39
          },
          end: {
            line: 271,
            column: 5
          }
        },
        line: 261
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 272,
            column: 4
          },
          end: {
            line: 272,
            column: 5
          }
        },
        loc: {
          start: {
            line: 272,
            column: 40
          },
          end: {
            line: 279,
            column: 5
          }
        },
        line: 272
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 281,
            column: 4
          },
          end: {
            line: 281,
            column: 5
          }
        },
        loc: {
          start: {
            line: 281,
            column: 36
          },
          end: {
            line: 288,
            column: 5
          }
        },
        line: 281
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 289,
            column: 4
          },
          end: {
            line: 289,
            column: 5
          }
        },
        loc: {
          start: {
            line: 289,
            column: 39
          },
          end: {
            line: 298,
            column: 5
          }
        },
        line: 289
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 300,
            column: 4
          },
          end: {
            line: 300,
            column: 5
          }
        },
        loc: {
          start: {
            line: 300,
            column: 45
          },
          end: {
            line: 307,
            column: 5
          }
        },
        line: 300
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 308,
            column: 4
          },
          end: {
            line: 308,
            column: 5
          }
        },
        loc: {
          start: {
            line: 308,
            column: 38
          },
          end: {
            line: 317,
            column: 5
          }
        },
        line: 308
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 319,
            column: 4
          },
          end: {
            line: 319,
            column: 5
          }
        },
        loc: {
          start: {
            line: 319,
            column: 49
          },
          end: {
            line: 326,
            column: 5
          }
        },
        line: 319
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 327,
            column: 4
          },
          end: {
            line: 327,
            column: 5
          }
        },
        loc: {
          start: {
            line: 327,
            column: 36
          },
          end: {
            line: 368,
            column: 5
          }
        },
        line: 327
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 370,
            column: 4
          },
          end: {
            line: 370,
            column: 5
          }
        },
        loc: {
          start: {
            line: 370,
            column: 45
          },
          end: {
            line: 377,
            column: 5
          }
        },
        line: 370
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 378,
            column: 4
          },
          end: {
            line: 378,
            column: 5
          }
        },
        loc: {
          start: {
            line: 378,
            column: 60
          },
          end: {
            line: 386,
            column: 5
          }
        },
        line: 378
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 387,
            column: 4
          },
          end: {
            line: 387,
            column: 5
          }
        },
        loc: {
          start: {
            line: 387,
            column: 56
          },
          end: {
            line: 399,
            column: 5
          }
        },
        line: 387
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 401,
            column: 4
          },
          end: {
            line: 401,
            column: 5
          }
        },
        loc: {
          start: {
            line: 401,
            column: 38
          },
          end: {
            line: 408,
            column: 5
          }
        },
        line: 401
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 409,
            column: 4
          },
          end: {
            line: 409,
            column: 5
          }
        },
        loc: {
          start: {
            line: 409,
            column: 70
          },
          end: {
            line: 423,
            column: 5
          }
        },
        line: 409
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 424,
            column: 4
          },
          end: {
            line: 424,
            column: 5
          }
        },
        loc: {
          start: {
            line: 424,
            column: 61
          },
          end: {
            line: 437,
            column: 5
          }
        },
        line: 424
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 439,
            column: 4
          },
          end: {
            line: 439,
            column: 5
          }
        },
        loc: {
          start: {
            line: 439,
            column: 40
          },
          end: {
            line: 446,
            column: 5
          }
        },
        line: 439
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 448,
            column: 4
          },
          end: {
            line: 448,
            column: 5
          }
        },
        loc: {
          start: {
            line: 448,
            column: 52
          },
          end: {
            line: 455,
            column: 5
          }
        },
        line: 448
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 456,
            column: 4
          },
          end: {
            line: 456,
            column: 5
          }
        },
        loc: {
          start: {
            line: 456,
            column: 52
          },
          end: {
            line: 469,
            column: 5
          }
        },
        line: 456
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 470,
            column: 4
          },
          end: {
            line: 470,
            column: 5
          }
        },
        loc: {
          start: {
            line: 470,
            column: 67
          },
          end: {
            line: 478,
            column: 5
          }
        },
        line: 470
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 480,
            column: 4
          },
          end: {
            line: 480,
            column: 5
          }
        },
        loc: {
          start: {
            line: 480,
            column: 35
          },
          end: {
            line: 486,
            column: 5
          }
        },
        line: 480
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 487,
            column: 4
          },
          end: {
            line: 487,
            column: 5
          }
        },
        loc: {
          start: {
            line: 487,
            column: 29
          },
          end: {
            line: 499,
            column: 5
          }
        },
        line: 487
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 500,
            column: 4
          },
          end: {
            line: 500,
            column: 5
          }
        },
        loc: {
          start: {
            line: 500,
            column: 41
          },
          end: {
            line: 513,
            column: 5
          }
        },
        line: 500
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 515,
            column: 4
          },
          end: {
            line: 515,
            column: 5
          }
        },
        loc: {
          start: {
            line: 515,
            column: 73
          },
          end: {
            line: 524,
            column: 5
          }
        },
        line: 515
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 526,
            column: 4
          },
          end: {
            line: 526,
            column: 5
          }
        },
        loc: {
          start: {
            line: 526,
            column: 50
          },
          end: {
            line: 531,
            column: 5
          }
        },
        line: 526
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 532,
            column: 4
          },
          end: {
            line: 532,
            column: 5
          }
        },
        loc: {
          start: {
            line: 532,
            column: 63
          },
          end: {
            line: 544,
            column: 5
          }
        },
        line: 532
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 545,
            column: 4
          },
          end: {
            line: 545,
            column: 5
          }
        },
        loc: {
          start: {
            line: 545,
            column: 75
          },
          end: {
            line: 553,
            column: 5
          }
        },
        line: 545
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 554,
            column: 4
          },
          end: {
            line: 554,
            column: 5
          }
        },
        loc: {
          start: {
            line: 554,
            column: 66
          },
          end: {
            line: 565,
            column: 5
          }
        },
        line: 554
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 567,
            column: 4
          },
          end: {
            line: 567,
            column: 5
          }
        },
        loc: {
          start: {
            line: 567,
            column: 48
          },
          end: {
            line: 576,
            column: 5
          }
        },
        line: 567
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 574,
            column: 40
          },
          end: {
            line: 574,
            column: 41
          }
        },
        loc: {
          start: {
            line: 574,
            column: 47
          },
          end: {
            line: 574,
            column: 74
          }
        },
        line: 574
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 577,
            column: 4
          },
          end: {
            line: 577,
            column: 5
          }
        },
        loc: {
          start: {
            line: 577,
            column: 50
          },
          end: {
            line: 590,
            column: 5
          }
        },
        line: 577
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 584,
            column: 40
          },
          end: {
            line: 584,
            column: 41
          }
        },
        loc: {
          start: {
            line: 584,
            column: 66
          },
          end: {
            line: 588,
            column: 14
          }
        },
        line: 584
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 584,
            column: 114
          },
          end: {
            line: 584,
            column: 115
          }
        },
        loc: {
          start: {
            line: 584,
            column: 121
          },
          end: {
            line: 588,
            column: 13
          }
        },
        line: 584
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 592,
            column: 4
          },
          end: {
            line: 592,
            column: 5
          }
        },
        loc: {
          start: {
            line: 592,
            column: 24
          },
          end: {
            line: 605,
            column: 5
          }
        },
        line: 592
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 17,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 17,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 23,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 23,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "2": {
        loc: {
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 54,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 54,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "3": {
        loc: {
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 74,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 74,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "4": {
        loc: {
          start: {
            line: 90,
            column: 19
          },
          end: {
            line: 90,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 90,
            column: 19
          },
          end: {
            line: 90,
            column: 27
          }
        }, {
          start: {
            line: 90,
            column: 31
          },
          end: {
            line: 90,
            column: 35
          }
        }],
        line: 90
      },
      "5": {
        loc: {
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 94,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 94,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "6": {
        loc: {
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 103,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 103,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "7": {
        loc: {
          start: {
            line: 121,
            column: 19
          },
          end: {
            line: 121,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 121,
            column: 19
          },
          end: {
            line: 121,
            column: 27
          }
        }, {
          start: {
            line: 121,
            column: 31
          },
          end: {
            line: 121,
            column: 35
          }
        }],
        line: 121
      },
      "8": {
        loc: {
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 125,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 125,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "9": {
        loc: {
          start: {
            line: 139,
            column: 38
          },
          end: {
            line: 139,
            column: 48
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 139,
            column: 46
          },
          end: {
            line: 139,
            column: 48
          }
        }],
        line: 139
      },
      "10": {
        loc: {
          start: {
            line: 152,
            column: 58
          },
          end: {
            line: 152,
            column: 68
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 152,
            column: 66
          },
          end: {
            line: 152,
            column: 68
          }
        }],
        line: 152
      },
      "11": {
        loc: {
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 170,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 170,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "12": {
        loc: {
          start: {
            line: 199,
            column: 15
          },
          end: {
            line: 199,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 199,
            column: 15
          },
          end: {
            line: 199,
            column: 27
          }
        }, {
          start: {
            line: 199,
            column: 31
          },
          end: {
            line: 199,
            column: 35
          }
        }],
        line: 199
      },
      "13": {
        loc: {
          start: {
            line: 214,
            column: 19
          },
          end: {
            line: 214,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 214,
            column: 19
          },
          end: {
            line: 214,
            column: 27
          }
        }, {
          start: {
            line: 214,
            column: 31
          },
          end: {
            line: 214,
            column: 35
          }
        }],
        line: 214
      },
      "14": {
        loc: {
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 218,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 218,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 217
      },
      "15": {
        loc: {
          start: {
            line: 229,
            column: 12
          },
          end: {
            line: 230,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 229,
            column: 12
          },
          end: {
            line: 230,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 229
      },
      "16": {
        loc: {
          start: {
            line: 240,
            column: 19
          },
          end: {
            line: 240,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 240,
            column: 19
          },
          end: {
            line: 240,
            column: 27
          }
        }, {
          start: {
            line: 240,
            column: 31
          },
          end: {
            line: 240,
            column: 35
          }
        }],
        line: 240
      },
      "17": {
        loc: {
          start: {
            line: 243,
            column: 12
          },
          end: {
            line: 244,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 243,
            column: 12
          },
          end: {
            line: 244,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 243
      },
      "18": {
        loc: {
          start: {
            line: 265,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 265,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 265
      },
      "19": {
        loc: {
          start: {
            line: 274,
            column: 8
          },
          end: {
            line: 277,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 274,
            column: 8
          },
          end: {
            line: 277,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 274
      },
      "20": {
        loc: {
          start: {
            line: 337,
            column: 16
          },
          end: {
            line: 361,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 337,
            column: 16
          },
          end: {
            line: 361,
            column: 17
          }
        }, {
          start: {
            line: 348,
            column: 21
          },
          end: {
            line: 361,
            column: 17
          }
        }],
        line: 337
      },
      "21": {
        loc: {
          start: {
            line: 337,
            column: 20
          },
          end: {
            line: 337,
            column: 108
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 337,
            column: 20
          },
          end: {
            line: 337,
            column: 46
          }
        }, {
          start: {
            line: 337,
            column: 50
          },
          end: {
            line: 337,
            column: 78
          }
        }, {
          start: {
            line: 337,
            column: 82
          },
          end: {
            line: 337,
            column: 108
          }
        }],
        line: 337
      },
      "22": {
        loc: {
          start: {
            line: 344,
            column: 24
          },
          end: {
            line: 345,
            column: 40
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 344,
            column: 24
          },
          end: {
            line: 345,
            column: 40
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 344
      },
      "23": {
        loc: {
          start: {
            line: 355,
            column: 20
          },
          end: {
            line: 360,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 355,
            column: 20
          },
          end: {
            line: 360,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 355
      },
      "24": {
        loc: {
          start: {
            line: 382,
            column: 8
          },
          end: {
            line: 383,
            column: 60
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 382,
            column: 8
          },
          end: {
            line: 383,
            column: 60
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 382
      },
      "25": {
        loc: {
          start: {
            line: 387,
            column: 44
          },
          end: {
            line: 387,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 387,
            column: 52
          },
          end: {
            line: 387,
            column: 54
          }
        }],
        line: 387
      },
      "26": {
        loc: {
          start: {
            line: 409,
            column: 57
          },
          end: {
            line: 409,
            column: 68
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 409,
            column: 65
          },
          end: {
            line: 409,
            column: 68
          }
        }],
        line: 409
      },
      "27": {
        loc: {
          start: {
            line: 436,
            column: 15
          },
          end: {
            line: 436,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 436,
            column: 15
          },
          end: {
            line: 436,
            column: 27
          }
        }, {
          start: {
            line: 436,
            column: 31
          },
          end: {
            line: 436,
            column: 32
          }
        }],
        line: 436
      },
      "28": {
        loc: {
          start: {
            line: 468,
            column: 15
          },
          end: {
            line: 468,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 468,
            column: 15
          },
          end: {
            line: 468,
            column: 27
          }
        }, {
          start: {
            line: 468,
            column: 31
          },
          end: {
            line: 468,
            column: 35
          }
        }],
        line: 468
      },
      "29": {
        loc: {
          start: {
            line: 474,
            column: 8
          },
          end: {
            line: 475,
            column: 60
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 474,
            column: 8
          },
          end: {
            line: 475,
            column: 60
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 474
      },
      "30": {
        loc: {
          start: {
            line: 492,
            column: 19
          },
          end: {
            line: 492,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 492,
            column: 19
          },
          end: {
            line: 492,
            column: 27
          }
        }, {
          start: {
            line: 492,
            column: 31
          },
          end: {
            line: 492,
            column: 35
          }
        }],
        line: 492
      },
      "31": {
        loc: {
          start: {
            line: 495,
            column: 12
          },
          end: {
            line: 496,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 495,
            column: 12
          },
          end: {
            line: 496,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 495
      },
      "32": {
        loc: {
          start: {
            line: 504,
            column: 8
          },
          end: {
            line: 512,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 504,
            column: 8
          },
          end: {
            line: 512,
            column: 9
          }
        }, {
          start: {
            line: 509,
            column: 13
          },
          end: {
            line: 512,
            column: 9
          }
        }],
        line: 504
      },
      "33": {
        loc: {
          start: {
            line: 519,
            column: 29
          },
          end: {
            line: 519,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 519,
            column: 44
          },
          end: {
            line: 519,
            column: 60
          }
        }, {
          start: {
            line: 519,
            column: 63
          },
          end: {
            line: 519,
            column: 65
          }
        }],
        line: 519
      },
      "34": {
        loc: {
          start: {
            line: 537,
            column: 19
          },
          end: {
            line: 537,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 537,
            column: 19
          },
          end: {
            line: 537,
            column: 27
          }
        }, {
          start: {
            line: 537,
            column: 31
          },
          end: {
            line: 537,
            column: 35
          }
        }],
        line: 537
      },
      "35": {
        loc: {
          start: {
            line: 540,
            column: 12
          },
          end: {
            line: 541,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 540,
            column: 12
          },
          end: {
            line: 541,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 540
      },
      "36": {
        loc: {
          start: {
            line: 549,
            column: 8
          },
          end: {
            line: 550,
            column: 50
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 549,
            column: 8
          },
          end: {
            line: 550,
            column: 50
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 549
      },
      "37": {
        loc: {
          start: {
            line: 561,
            column: 12
          },
          end: {
            line: 562,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 561,
            column: 12
          },
          end: {
            line: 562,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 561
      },
      "38": {
        loc: {
          start: {
            line: 585,
            column: 16
          },
          end: {
            line: 586,
            column: 30
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 585,
            column: 16
          },
          end: {
            line: 586,
            column: 30
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 585
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0,
      "300": 0,
      "301": 0,
      "302": 0,
      "303": 0,
      "304": 0,
      "305": 0,
      "306": 0,
      "307": 0,
      "308": 0,
      "309": 0,
      "310": 0,
      "311": 0,
      "312": 0,
      "313": 0,
      "314": 0,
      "315": 0,
      "316": 0,
      "317": 0,
      "318": 0,
      "319": 0,
      "320": 0,
      "321": 0,
      "322": 0,
      "323": 0,
      "324": 0,
      "325": 0,
      "326": 0,
      "327": 0,
      "328": 0,
      "329": 0,
      "330": 0,
      "331": 0,
      "332": 0,
      "333": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0],
      "10": [0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0],
      "26": [0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/services/azure-cosmos-service.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/services/azure-cosmos-service.ts"],
      sourcesContent: ["import { CosmosClient, Database, Container } from '@azure/cosmos';\nimport { DefaultAzureCredential } from '@azure/identity';\nimport { getCosmosDbConfig } from '@/lib/config/environment-loader';\n\n// Data interfaces\nexport interface UserDocument {\n  id: string;\n  userId: string;\n  email: string;\n  displayName?: string;\n  profilePictureUrl?: string;\n  profilePictureBlobName?: string;\n  plan: 'free' | 'premium';\n  createdAt: Date;\n  updatedAt: Date;\n  _partitionKey?: string;\n}\n\nexport interface InterviewDocument {\n  id: string;\n  userId: string;\n  jobTitle: string;\n  company: string;\n  jobDescription?: string;\n  questions: Array<{\n    question: string;\n    answer?: string;\n    category: string;\n    difficulty: 'easy' | 'medium' | 'hard';\n  }>;\n  createdAt: Date;\n  updatedAt: Date;\n  finalized: boolean;\n  feedbackGenerated?: boolean;\n  _partitionKey?: string;\n}\n\nexport interface FeedbackDocument {\n  id: string;\n  userId: string;\n  interviewId: string;\n  overallScore: number;\n  strengths: string[];\n  improvements: string[];\n  detailedFeedback: string;\n  createdAt: Date;\n  _partitionKey?: string;\n}\n\nexport interface ResumeDocument {\n  id: string;\n  userId: string;\n  fileName: string;\n  fileUrl: string;\n  filePath?: string;\n  blobName?: string;\n  sasUrl?: string;\n  extractedData: {\n    personalInfo?: any;\n    summary?: string;\n    skills: string[];\n    experience: any[];\n    education: any[];\n    projects?: any[];\n    certifications?: any[];\n    languages?: string[];\n  };\n  interviewQuestions: string[];\n  metadata: {\n    fileSize: number;\n    uploadDate: Date;\n    lastModified: Date;\n    mimeType: string;\n    storageProvider: 'azure' | 'firebase';\n  };\n  _partitionKey?: string;\n}\n\nexport interface UsageDocument {\n  id: string;\n  userId: string;\n  interviews: {\n    count: number;\n    limit: number;\n    lastReset?: Date;\n  };\n  resumes: {\n    count: number;\n    limit: number;\n    lastReset?: Date;\n  };\n  updatedAt: Date;\n  _partitionKey?: string;\n}\n\nexport interface JobListingDocument {\n  id: string;\n  company: string;\n  position: string;\n  location?: string;\n  requirements?: string[];\n  isActive: boolean;\n  discoveredBy: string[];\n  postedDate: Date;\n  _partitionKey?: string;\n}\n\nexport interface ApplicationDocument {\n  id: string;\n  userId: string;\n  jobId: string;\n  status: string;\n  appliedAt: Date;\n  coverLetter?: string;\n  tailoredResume?: string;\n  relevancyScore?: number;\n  applicationMethod?: 'headless_automation' | 'manual_required' | 'api_integration';\n  portal?: string;\n  jobTitle?: string;\n  company?: string;\n  jobUrl?: string;\n  reason?: string;\n  automationDetails?: {\n    duration?: number;\n    attempts?: number;\n    formData?: Record<string, any>;\n    screenshotPath?: string;\n    portalType?: string;\n    screeningAnswers?: Record<string, any>;\n    resumeUploaded?: boolean;\n  };\n  createdAt?: Date;\n  updatedAt?: Date;\n  _partitionKey?: string;\n}\n\nexport interface AutoApplySettingsDocument {\n  id: string;\n  userId: string;\n  preferences: any;\n  isActive: boolean;\n  updatedAt: Date;\n  _partitionKey?: string;\n}\n\nexport interface AutomationLogDocument {\n  id: string;\n  userId: string;\n  action: string;\n  status: string;\n  timestamp: Date;\n  details?: any;\n  _partitionKey?: string;\n}\n\nexport interface SubscriptionEventDocument {\n  id: string;\n  userId?: string;\n  eventType: string;\n  data: any;\n  processed: boolean;\n  timestamp: Date;\n  _partitionKey?: string;\n}\n\nexport interface DataDeletionRequestDocument {\n  id: string;\n  userId: string;\n  requestedBy: string;\n  requestDate: Date;\n  status: 'pending' | 'processing' | 'completed' | 'failed';\n  reason?: string;\n  deletedData?: string[];\n  _partitionKey?: string;\n}\n\nexport interface DataProtectionAuditLogDocument {\n  id: string;\n  userId: string;\n  action: string;\n  timestamp: Date;\n  details?: any;\n  _partitionKey?: string;\n}\n\nexport interface NotificationEventDocument {\n  id: string;\n  userId: string;\n  type: string;\n  channel: string;\n  recipient: string;\n  subject: string;\n  content: string;\n  templateUsed?: string;\n  metadata?: any;\n  status: string;\n  createdAt: Date;\n  sentAt?: Date;\n  updatedAt?: Date;\n  error?: string;\n  messageId?: string;\n  jobId?: string;\n  applicationId?: string;\n  _partitionKey?: string;\n}\n\nexport interface ErrorEventDocument {\n  id: string;\n  featureName: string;\n  errorType: string;\n  errorMessage: string;\n  userId?: string;\n  userAgent?: string;\n  timestamp: Date;\n  severity: string;\n  metadata?: any;\n  _partitionKey?: string;\n}\n\nexport interface ErrorBudgetDocument {\n  id: string;\n  featureName: string;\n  breachedAt: Date;\n  errorCount: number;\n  threshold: number;\n  timeWindow: number;\n  action: string;\n  _partitionKey?: string;\n}\n\nexport interface EmailVerificationDocument {\n  id: string;\n  userId: string;\n  email: string;\n  code: string;\n  type: string;\n  expiresAt: Date;\n  verified: boolean;\n  attempts: number;\n  createdAt: Date;\n  verifiedAt?: Date;\n  _partitionKey?: string;\n}\n\nexport interface ProfileDocument {\n  id: string;\n  userId: string;\n  name?: string;\n  email?: string;\n  about?: string;\n  phone?: string;\n  workplace?: string;\n  skills?: string[];\n  experience?: string;\n  dateOfBirth?: string;\n  image?: string;\n  createdAt?: Date;\n  updatedAt: Date;\n  _partitionKey?: string;\n}\n\nclass AzureCosmosService {\n  private client: CosmosClient | null = null;\n  private database: Database | null = null;\n  private containers: Map<string, Container> = new Map();\n  private initialized = false;\n\n  constructor() {\n    // Client initialization is now deferred to initialize() method\n    // to use the unified environment loader\n  }\n\n  async initialize(): Promise<void> {\n    if (this.initialized) return;\n\n    try {\n      // Load Cosmos DB configuration from unified environment loader\n      const cosmosConfig = await getCosmosDbConfig();\n      \n      if (!cosmosConfig.connectionString) {\n        throw new Error('Cosmos DB connection string not available in configuration');\n      }\n      \n      // Initialize Cosmos client with configuration\n      this.client = new CosmosClient(cosmosConfig.connectionString);\n      \n      // Create or get database\n      const { database } = await this.client.databases.createIfNotExists({\n        id: cosmosConfig.database\n      });\n      \n      this.database = database;\n\n      // Define containers with their partition keys\n      const containerDefinitions = [\n        { id: 'users', partitionKey: '/userId' },\n        { id: 'interviews', partitionKey: '/userId' },\n        { id: 'feedback', partitionKey: '/userId' },\n        { id: 'resumes', partitionKey: '/userId' },\n        { id: 'usage', partitionKey: '/userId' },\n        { id: 'jobListings', partitionKey: '/id' },\n        { id: 'applications', partitionKey: '/userId' },\n        { id: 'autoApplySettings', partitionKey: '/userId' },\n        { id: 'automationLogs', partitionKey: '/userId' },\n        { id: 'subscriptionEvents', partitionKey: '/id' },\n        { id: 'dataDeletionRequests', partitionKey: '/userId' },\n        { id: 'dataProtectionAuditLog', partitionKey: '/userId' },\n        { id: 'notificationEvents', partitionKey: '/userId' },\n        { id: 'featureErrors', partitionKey: '/featureName' },\n        { id: 'errorBudgets', partitionKey: '/featureName' },\n        { id: 'emailVerifications', partitionKey: '/userId' },\n        { id: 'profiles', partitionKey: '/userId' }\n      ];\n\n      // Create containers\n      if (!this.database) {\n        throw new Error('Database initialization failed');\n      }\n      \n      for (const containerDef of containerDefinitions) {\n        const { container } = await this.database.containers.createIfNotExists({\n          id: containerDef.id,\n          partitionKey: containerDef.partitionKey\n        });\n        this.containers.set(containerDef.id, container);\n      }\n\n      this.initialized = true;\n      console.log('\u2705 Azure Cosmos DB service initialized');\n    } catch (error) {\n      console.error('\u274C Failed to initialize Azure Cosmos DB:', error);\n      throw error;\n    }\n  }\n\n  private getContainer(containerName: string): Container {\n    const container = this.containers.get(containerName);\n    if (!container) {\n      throw new Error(`Container ${containerName} not found. Make sure initialize() was called.`);\n    }\n    return container;\n  }\n\n  // Users operations\n  async createUser(userData: Omit<UserDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('users');\n    \n    const document: UserDocument = {\n      id: userData.userId,\n      ...userData,\n      _partitionKey: userData.userId\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async getUser(userId: string): Promise<UserDocument | null> {\n    await this.initialize();\n    const container = this.getContainer('users');\n    \n    try {\n      const { resource } = await container.item(userId, userId).read<UserDocument>();\n      return resource || null;\n    } catch (error: any) {\n      if (error.code === 404) return null;\n      throw error;\n    }\n  }\n\n  async updateUser(userId: string, updates: Partial<UserDocument>): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('users');\n    \n    const { resource: existing } = await container.item(userId, userId).read<UserDocument>();\n    if (!existing) throw new Error('User not found');\n    \n    const updated = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n      _partitionKey: userId\n    };\n    \n    await container.item(userId, userId).replace(updated);\n  }\n\n  // Interviews operations\n  async createInterview(interviewData: Omit<InterviewDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('interviews');\n    \n    const id = `interview_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: InterviewDocument = {\n      id,\n      ...interviewData,\n      _partitionKey: interviewData.userId\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async getInterview(interviewId: string, userId: string): Promise<InterviewDocument | null> {\n    await this.initialize();\n    const container = this.getContainer('interviews');\n    \n    try {\n      const { resource } = await container.item(interviewId, userId).read<InterviewDocument>();\n      return resource || null;\n    } catch (error: any) {\n      if (error.code === 404) return null;\n      throw error;\n    }\n  }\n\n  async getUserInterviews(userId: string): Promise<InterviewDocument[]> {\n    await this.initialize();\n    const container = this.getContainer('interviews');\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.userId = @userId ORDER BY c.createdAt DESC',\n      parameters: [{ name: '@userId', value: userId }]\n    };\n    \n    const { resources } = await container.items.query<InterviewDocument>(querySpec).fetchAll();\n    return resources;\n  }\n\n  async getPublicInterviews(userId: string, limit: number = 20): Promise<InterviewDocument[]> {\n    await this.initialize();\n    const container = this.getContainer('interviews');\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.userId = @userId AND c.finalized = true ORDER BY c.createdAt DESC OFFSET 0 LIMIT @limit',\n      parameters: [\n        { name: '@userId', value: userId },\n        { name: '@limit', value: limit }\n      ]\n    };\n    \n    const { resources } = await container.items.query<InterviewDocument>(querySpec).fetchAll();\n    return resources;\n  }\n\n  async getPublicInterviewsExcludingUser(excludeUserId: string, limit: number = 20): Promise<InterviewDocument[]> {\n    await this.initialize();\n    const container = this.getContainer('interviews');\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.finalized = true AND c.userId != @excludeUserId ORDER BY c.createdAt DESC OFFSET 0 LIMIT @limit',\n      parameters: [\n        { name: '@excludeUserId', value: excludeUserId },\n        { name: '@limit', value: limit }\n      ]\n    };\n    \n    const { resources } = await container.items.query<InterviewDocument>(querySpec).fetchAll();\n    return resources;\n  }\n\n  async updateInterview(interviewId: string, userId: string, updates: Partial<InterviewDocument>): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('interviews');\n    \n    const { resource: existing } = await container.item(interviewId, userId).read<InterviewDocument>();\n    if (!existing) throw new Error('Interview not found');\n    \n    const updated = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n      _partitionKey: userId\n    };\n    \n    await container.item(interviewId, userId).replace(updated);\n  }\n\n  async deleteInterview(interviewId: string, userId: string): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('interviews');\n    await container.item(interviewId, userId).delete();\n  }\n\n  // Feedback operations\n  async createFeedback(feedbackData: Omit<FeedbackDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('feedback');\n    \n    const id = `feedback_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: FeedbackDocument = {\n      id,\n      ...feedbackData,\n      _partitionKey: feedbackData.userId\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async getFeedbackByInterview(interviewId: string, userId: string): Promise<FeedbackDocument | null> {\n    await this.initialize();\n    const container = this.getContainer('feedback');\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.interviewId = @interviewId AND c.userId = @userId',\n      parameters: [\n        { name: '@interviewId', value: interviewId },\n        { name: '@userId', value: userId }\n      ]\n    };\n    \n    const { resources } = await container.items.query<FeedbackDocument>(querySpec).fetchAll();\n    return resources[0] || null;\n  }\n\n  // Resume operations\n  async saveResume(resumeData: Omit<ResumeDocument, '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('resumes');\n    \n    const document: ResumeDocument = {\n      ...resumeData,\n      _partitionKey: resumeData.userId\n    };\n    \n    const { resource } = await container.items.upsert(document);\n    return resource!.id;\n  }\n\n  async getUserResume(userId: string): Promise<ResumeDocument | null> {\n    await this.initialize();\n    const container = this.getContainer('resumes');\n    \n    try {\n      const { resource } = await container.item(userId, userId).read<ResumeDocument>();\n      return resource || null;\n    } catch (error: any) {\n      if (error.code === 404) return null;\n      throw error;\n    }\n  }\n\n  async deleteUserResume(userId: string): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('resumes');\n    \n    try {\n      await container.item(userId, userId).delete();\n    } catch (error: any) {\n      if (error.code === 404) return; // Already deleted\n      throw error;\n    }\n  }\n\n  // Usage operations\n  async getUserUsage(userId: string): Promise<UsageDocument | null> {\n    await this.initialize();\n    const container = this.getContainer('usage');\n    \n    try {\n      const { resource } = await container.item(userId, userId).read<UsageDocument>();\n      return resource || null;\n    } catch (error: any) {\n      if (error.code === 404) return null;\n      throw error;\n    }\n  }\n\n  async initializeUserUsage(userId: string): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('usage');\n    \n    const usageData: UsageDocument = {\n      id: userId,\n      userId,\n      interviews: { count: 0, limit: 3 },\n      resumes: { count: 0, limit: 2 },\n      updatedAt: new Date(),\n      _partitionKey: userId\n    };\n    \n    await container.items.upsert(usageData);\n  }\n\n  async incrementUsage(userId: string, type: 'interviews' | 'resumes'): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('usage');\n    \n    const { resource: existing } = await container.item(userId, userId).read<UsageDocument>();\n    if (!existing) {\n      await this.initializeUserUsage(userId);\n      return this.incrementUsage(userId, type);\n    }\n    \n    const updated = {\n      ...existing,\n      [type]: {\n        ...existing[type],\n        count: existing[type].count + 1\n      },\n      updatedAt: new Date(),\n      _partitionKey: userId\n    };\n    \n    await container.item(userId, userId).replace(updated);\n  }\n\n  async checkUsageLimit(userId: string, type: 'interviews' | 'resumes'): Promise<boolean> {\n    const usage = await this.getUserUsage(userId);\n    \n    if (!usage) {\n      await this.initializeUserUsage(userId);\n      return true;\n    }\n    \n    return usage[type].count < usage[type].limit;\n  }\n\n  // Job-related operations\n  async createJobListing(jobData: Omit<JobListingDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('jobListings');\n    \n    const id = `job_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: JobListingDocument = {\n      id,\n      ...jobData,\n      _partitionKey: id\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async getActiveJobListings(userId: string): Promise<JobListingDocument[]> {\n    await this.initialize();\n    const container = this.getContainer('jobListings');\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.isActive = true AND (ARRAY_CONTAINS(c.discoveredBy, @userId) OR ARRAY_LENGTH(c.discoveredBy) = 0) ORDER BY c.postedDate DESC',\n      parameters: [{ name: '@userId', value: userId }]\n    };\n    \n    const { resources } = await container.items.query<JobListingDocument>(querySpec).fetchAll();\n    return resources;\n  }\n\n  // Applications operations\n  async createApplication(applicationData: Omit<ApplicationDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('applications');\n    \n    const id = `app_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: ApplicationDocument = {\n      id,\n      ...applicationData,\n      _partitionKey: applicationData.userId\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async getUserApplications(userId: string): Promise<ApplicationDocument[]> {\n    await this.initialize();\n    const container = this.getContainer('applications');\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.userId = @userId ORDER BY c.appliedAt DESC',\n      parameters: [{ name: '@userId', value: userId }]\n    };\n    \n    const { resources } = await container.items.query<ApplicationDocument>(querySpec).fetchAll();\n    return resources;\n  }\n\n  // GDPR operations\n  async createDataDeletionRequest(requestData: Omit<DataDeletionRequestDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('dataDeletionRequests');\n    \n    const id = `del_req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: DataDeletionRequestDocument = {\n      id,\n      ...requestData,\n      _partitionKey: requestData.userId\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async deleteAllUserData(userId: string): Promise<string[]> {\n    await this.initialize();\n    const deletedCollections: string[] = [];\n    \n    const collections = [\n      'users', 'interviews', 'feedback', 'resumes', 'usage', \n      'applications', 'autoApplySettings', 'automationLogs', 'dataDeletionRequests'\n    ];\n    \n    for (const collectionName of collections) {\n      try {\n        const container = this.getContainer(collectionName);\n        \n        if (collectionName === 'users' || collectionName === 'resumes' || collectionName === 'usage') {\n          // These use userId as document ID\n          try {\n            await container.item(userId, userId).delete();\n            deletedCollections.push(collectionName);\n          } catch (error: any) {\n            if (error.code !== 404) throw error;\n          }\n        } else {\n          // Query and delete all documents for this user\n          const querySpec = {\n            query: 'SELECT c.id FROM c WHERE c.userId = @userId',\n            parameters: [{ name: '@userId', value: userId }]\n          };\n          \n          const { resources } = await container.items.query(querySpec).fetchAll();\n          \n          if (resources.length > 0) {\n            for (const item of resources) {\n              await container.item(item.id, userId).delete();\n            }\n            deletedCollections.push(collectionName);\n          }\n        }\n      } catch (error) {\n        console.error(`Error deleting from ${collectionName}:`, error);\n      }\n    }\n    \n    return deletedCollections;\n  }\n\n  // Notification Events operations\n  async createNotificationEvent(eventData: Omit<NotificationEventDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('notificationEvents');\n    \n    const id = `notify_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: NotificationEventDocument = {\n      id,\n      ...eventData,\n      _partitionKey: eventData.userId\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async updateNotificationEvent(eventId: string, userId: string, updates: Partial<NotificationEventDocument>): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('notificationEvents');\n    \n    const { resource: existing } = await container.item(eventId, userId).read<NotificationEventDocument>();\n    if (!existing) throw new Error('Notification event not found');\n    \n    const updated = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n      _partitionKey: userId\n    };\n    \n    await container.item(eventId, userId).replace(updated);\n  }\n\n  async getUserNotificationEvents(userId: string, limit: number = 50): Promise<NotificationEventDocument[]> {\n    await this.initialize();\n    const container = this.getContainer('notificationEvents');\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.userId = @userId ORDER BY c.createdAt DESC OFFSET 0 LIMIT @limit',\n      parameters: [\n        { name: '@userId', value: userId },\n        { name: '@limit', value: limit }\n      ]\n    };\n    \n    const { resources } = await container.items.query<NotificationEventDocument>(querySpec).fetchAll();\n    return resources;\n  }\n\n  // Error Events operations for monitoring\n  async createErrorEvent(errorData: Omit<ErrorEventDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('featureErrors');\n    \n    const id = `error_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: ErrorEventDocument = {\n      id,\n      ...errorData,\n      _partitionKey: errorData.featureName\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async getErrorEvents(featureName: string, timeWindowMinutes: number, limit: number = 100): Promise<ErrorEventDocument[]> {\n    await this.initialize();\n    const container = this.getContainer('featureErrors');\n    \n    const cutoffTime = new Date(Date.now() - timeWindowMinutes * 60 * 1000);\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.featureName = @featureName AND c.timestamp >= @cutoffTime ORDER BY c.timestamp DESC OFFSET 0 LIMIT @limit',\n      parameters: [\n        { name: '@featureName', value: featureName },\n        { name: '@cutoffTime', value: cutoffTime },\n        { name: '@limit', value: limit }\n      ]\n    };\n    \n    const { resources } = await container.items.query<ErrorEventDocument>(querySpec).fetchAll();\n    return resources;\n  }\n\n  async getErrorEventCount(featureName: string, timeWindowMinutes: number): Promise<number> {\n    await this.initialize();\n    const container = this.getContainer('featureErrors');\n    \n    const cutoffTime = new Date(Date.now() - timeWindowMinutes * 60 * 1000);\n    \n    const querySpec = {\n      query: 'SELECT VALUE COUNT(1) FROM c WHERE c.featureName = @featureName AND c.timestamp >= @cutoffTime',\n      parameters: [\n        { name: '@featureName', value: featureName },\n        { name: '@cutoffTime', value: cutoffTime }\n      ]\n    };\n    \n    const { resources } = await container.items.query<number>(querySpec).fetchAll();\n    return resources[0] || 0;\n  }\n\n  // Error Budget operations\n  async createErrorBudget(budgetData: Omit<ErrorBudgetDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('errorBudgets');\n    \n    const id = `budget_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: ErrorBudgetDocument = {\n      id,\n      ...budgetData,\n      _partitionKey: budgetData.featureName\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  // Email Verification operations\n  async createEmailVerification(verificationData: Omit<EmailVerificationDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('emailVerifications');\n    \n    const id = `verify_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: EmailVerificationDocument = {\n      id,\n      ...verificationData,\n      _partitionKey: verificationData.userId\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async getEmailVerification(userId: string, email: string, type: string): Promise<EmailVerificationDocument | null> {\n    await this.initialize();\n    const container = this.getContainer('emailVerifications');\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.userId = @userId AND c.email = @email AND c.type = @type AND c.verified = false ORDER BY c.createdAt DESC',\n      parameters: [\n        { name: '@userId', value: userId },\n        { name: '@email', value: email },\n        { name: '@type', value: type }\n      ]\n    };\n    \n    const { resources } = await container.items.query<EmailVerificationDocument>(querySpec).fetchAll();\n    return resources[0] || null;\n  }\n\n  async updateEmailVerification(verificationId: string, userId: string, updates: Partial<EmailVerificationDocument>): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('emailVerifications');\n    \n    const { resource: existing } = await container.item(verificationId, userId).read<EmailVerificationDocument>();\n    if (!existing) throw new Error('Email verification not found');\n    \n    const updated = {\n      ...existing,\n      ...updates,\n      _partitionKey: userId\n    };\n    \n    await container.item(verificationId, userId).replace(updated);\n  }\n\n  // Profile operations (for Firestore profiles collection)\n  async saveProfile(profileData: Omit<ProfileDocument, '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('profiles');\n    \n    const document: ProfileDocument = {\n      ...profileData,\n      _partitionKey: profileData.userId\n    };\n    \n    const { resource } = await container.items.upsert(document);\n    return resource!.id;\n  }\n\n  async getProfile(userId: string): Promise<ProfileDocument | null> {\n    await this.initialize();\n    const container = this.getContainer('profiles');\n    \n    try {\n      const { resource } = await container.item(userId, userId).read<ProfileDocument>();\n      return resource || null;\n    } catch (error: any) {\n      if (error.code === 404) return null;\n      throw error;\n    }\n  }\n\n  async updateProfile(userId: string, updates: Partial<ProfileDocument>): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('profiles');\n    \n    const { resource: existing } = await container.item(userId, userId).read<ProfileDocument>();\n    if (!existing) {\n      // Create new profile if doesn't exist\n      const newProfile: ProfileDocument = {\n        id: userId,\n        userId,\n        ...updates,\n        updatedAt: new Date(),\n        _partitionKey: userId\n      };\n      await container.items.create(newProfile);\n    } else {\n      const updated = {\n        ...existing,\n        ...updates,\n        updatedAt: new Date(),\n        _partitionKey: userId\n      };\n      await container.item(userId, userId).replace(updated);\n    }\n  }\n\n  // Generic query operations for complex Firestore-like queries\n  async queryDocuments<T>(\n    containerName: string,\n    query: string,\n    parameters: Array<{ name: string; value: any }>,\n    partitionKey?: string\n  ): Promise<T[]> {\n    await this.initialize();\n    const container = this.getContainer(containerName);\n    \n    const querySpec = { query, parameters };\n    const queryOptions = partitionKey ? { partitionKey } : {};\n    \n    const { resources } = await container.items\n      .query<T>(querySpec, queryOptions)\n      .fetchAll();\n    \n    return resources;\n  }\n\n  // Generic document operations\n  async createDocument<T extends { _partitionKey?: string }>(containerName: string, document: T): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer(containerName);\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async getDocument<T = any>(containerName: string, documentId: string, partitionKey: string): Promise<T | null> {\n    await this.initialize();\n    const container = this.getContainer(containerName);\n    \n    try {\n      const { resource } = await container.item(documentId, partitionKey).read();\n      return (resource as T) || null;\n    } catch (error: any) {\n      if (error.code === 404) return null;\n      throw error;\n    }\n  }\n\n  async updateDocument<T = any>(containerName: string, documentId: string, partitionKey: string, updates: Partial<T>): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer(containerName);\n    \n    const { resource: existing } = await container.item(documentId, partitionKey).read();\n    if (!existing) throw new Error('Document not found');\n    \n    const updated = {\n      ...existing,\n      ...updates\n    };\n    \n    await container.item(documentId, partitionKey).replace(updated);\n  }\n\n  async deleteDocument(containerName: string, documentId: string, partitionKey: string): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer(containerName);\n    \n    try {\n      await container.item(documentId, partitionKey).delete();\n    } catch (error: any) {\n      if (error.code !== 404) throw error;\n      // Document already deleted, ignore 404\n    }\n  }\n\n  // Batch operations for efficiency\n  async batchCreate<T extends { id: string; _partitionKey?: string }>(\n    containerName: string, \n    documents: T[]\n  ): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer(containerName);\n    \n    // Process in smaller batches to avoid limits\n    const batchSize = 25;\n    for (let i = 0; i < documents.length; i += batchSize) {\n      const batch = documents.slice(i, i + batchSize);\n      await Promise.all(batch.map(doc => container.items.create(doc)));\n    }\n  }\n\n  async batchDelete(containerName: string, documentIds: Array<{ id: string; partitionKey: string }>): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer(containerName);\n    \n    // Process in smaller batches\n    const batchSize = 25;\n    for (let i = 0; i < documentIds.length; i += batchSize) {\n      const batch = documentIds.slice(i, i + batchSize);\n      await Promise.all(batch.map(({ id, partitionKey }) => \n        container.item(id, partitionKey).delete().catch(err => {\n          if (err.code !== 404) throw err;\n          // Ignore 404s for already deleted documents\n        })\n      ));\n    }\n  }\n\n  // Health check\n  async healthCheck(): Promise<{ status: 'healthy' | 'unhealthy'; timestamp: Date }> {\n    try {\n      await this.initialize();\n      const container = this.getContainer('users');\n      \n      // Simple read operation to test connectivity\n      const querySpec = { query: 'SELECT VALUE COUNT(1) FROM c', parameters: [] };\n      await container.items.query(querySpec).fetchAll();\n      \n      return { status: 'healthy', timestamp: new Date() };\n    } catch (error) {\n      console.error('Azure Cosmos DB health check failed:', error);\n      return { status: 'unhealthy', timestamp: new Date() };\n    }\n  }\n}\n\n// Export singleton instance\nexport const azureCosmosService = new AzureCosmosService();\nexport default azureCosmosService;\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "56a5c784bd621cd895dafb1d973c3f6b2ad8d130"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_sxfha54ly = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_sxfha54ly();
cov_sxfha54ly().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_sxfha54ly().s[1]++;
exports.azureCosmosService = void 0;
const cosmos_1 =
/* istanbul ignore next */
(cov_sxfha54ly().s[2]++, require("@azure/cosmos"));
const environment_loader_1 =
/* istanbul ignore next */
(cov_sxfha54ly().s[3]++, require("@/lib/config/environment-loader"));
class AzureCosmosService {
  constructor() {
    /* istanbul ignore next */
    cov_sxfha54ly().f[0]++;
    cov_sxfha54ly().s[4]++;
    this.client = null;
    /* istanbul ignore next */
    cov_sxfha54ly().s[5]++;
    this.database = null;
    /* istanbul ignore next */
    cov_sxfha54ly().s[6]++;
    this.containers = new Map();
    /* istanbul ignore next */
    cov_sxfha54ly().s[7]++;
    this.initialized = false;
    // Client initialization is now deferred to initialize() method
    // to use the unified environment loader
  }
  async initialize() {
    /* istanbul ignore next */
    cov_sxfha54ly().f[1]++;
    cov_sxfha54ly().s[8]++;
    if (this.initialized) {
      /* istanbul ignore next */
      cov_sxfha54ly().b[0][0]++;
      cov_sxfha54ly().s[9]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_sxfha54ly().b[0][1]++;
    }
    cov_sxfha54ly().s[10]++;
    try {
      // Load Cosmos DB configuration from unified environment loader
      const cosmosConfig =
      /* istanbul ignore next */
      (cov_sxfha54ly().s[11]++, await (0, environment_loader_1.getCosmosDbConfig)());
      /* istanbul ignore next */
      cov_sxfha54ly().s[12]++;
      if (!cosmosConfig.connectionString) {
        /* istanbul ignore next */
        cov_sxfha54ly().b[1][0]++;
        cov_sxfha54ly().s[13]++;
        throw new Error('Cosmos DB connection string not available in configuration');
      } else
      /* istanbul ignore next */
      {
        cov_sxfha54ly().b[1][1]++;
      }
      // Initialize Cosmos client with configuration
      cov_sxfha54ly().s[14]++;
      this.client = new cosmos_1.CosmosClient(cosmosConfig.connectionString);
      // Create or get database
      const {
        database
      } =
      /* istanbul ignore next */
      (cov_sxfha54ly().s[15]++, await this.client.databases.createIfNotExists({
        id: cosmosConfig.database
      }));
      /* istanbul ignore next */
      cov_sxfha54ly().s[16]++;
      this.database = database;
      // Define containers with their partition keys
      const containerDefinitions =
      /* istanbul ignore next */
      (cov_sxfha54ly().s[17]++, [{
        id: 'users',
        partitionKey: '/userId'
      }, {
        id: 'interviews',
        partitionKey: '/userId'
      }, {
        id: 'feedback',
        partitionKey: '/userId'
      }, {
        id: 'resumes',
        partitionKey: '/userId'
      }, {
        id: 'usage',
        partitionKey: '/userId'
      }, {
        id: 'jobListings',
        partitionKey: '/id'
      }, {
        id: 'applications',
        partitionKey: '/userId'
      }, {
        id: 'autoApplySettings',
        partitionKey: '/userId'
      }, {
        id: 'automationLogs',
        partitionKey: '/userId'
      }, {
        id: 'subscriptionEvents',
        partitionKey: '/id'
      }, {
        id: 'dataDeletionRequests',
        partitionKey: '/userId'
      }, {
        id: 'dataProtectionAuditLog',
        partitionKey: '/userId'
      }, {
        id: 'notificationEvents',
        partitionKey: '/userId'
      }, {
        id: 'featureErrors',
        partitionKey: '/featureName'
      }, {
        id: 'errorBudgets',
        partitionKey: '/featureName'
      }, {
        id: 'emailVerifications',
        partitionKey: '/userId'
      }, {
        id: 'profiles',
        partitionKey: '/userId'
      }]);
      // Create containers
      /* istanbul ignore next */
      cov_sxfha54ly().s[18]++;
      if (!this.database) {
        /* istanbul ignore next */
        cov_sxfha54ly().b[2][0]++;
        cov_sxfha54ly().s[19]++;
        throw new Error('Database initialization failed');
      } else
      /* istanbul ignore next */
      {
        cov_sxfha54ly().b[2][1]++;
      }
      cov_sxfha54ly().s[20]++;
      for (const containerDef of containerDefinitions) {
        const {
          container
        } =
        /* istanbul ignore next */
        (cov_sxfha54ly().s[21]++, await this.database.containers.createIfNotExists({
          id: containerDef.id,
          partitionKey: containerDef.partitionKey
        }));
        /* istanbul ignore next */
        cov_sxfha54ly().s[22]++;
        this.containers.set(containerDef.id, container);
      }
      /* istanbul ignore next */
      cov_sxfha54ly().s[23]++;
      this.initialized = true;
      /* istanbul ignore next */
      cov_sxfha54ly().s[24]++;
      console.log('✅ Azure Cosmos DB service initialized');
    } catch (error) {
      /* istanbul ignore next */
      cov_sxfha54ly().s[25]++;
      console.error('❌ Failed to initialize Azure Cosmos DB:', error);
      /* istanbul ignore next */
      cov_sxfha54ly().s[26]++;
      throw error;
    }
  }
  getContainer(containerName) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[2]++;
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[27]++, this.containers.get(containerName));
    /* istanbul ignore next */
    cov_sxfha54ly().s[28]++;
    if (!container) {
      /* istanbul ignore next */
      cov_sxfha54ly().b[3][0]++;
      cov_sxfha54ly().s[29]++;
      throw new Error(`Container ${containerName} not found. Make sure initialize() was called.`);
    } else
    /* istanbul ignore next */
    {
      cov_sxfha54ly().b[3][1]++;
    }
    cov_sxfha54ly().s[30]++;
    return container;
  }
  // Users operations
  async createUser(userData) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[3]++;
    cov_sxfha54ly().s[31]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[32]++, this.getContainer('users'));
    const document =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[33]++, Object.assign(Object.assign({
      id: userData.userId
    }, userData), {
      _partitionKey: userData.userId
    }));
    const {
      resource
    } =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[34]++, await container.items.create(document));
    /* istanbul ignore next */
    cov_sxfha54ly().s[35]++;
    return resource.id;
  }
  async getUser(userId) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[4]++;
    cov_sxfha54ly().s[36]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[37]++, this.getContainer('users'));
    /* istanbul ignore next */
    cov_sxfha54ly().s[38]++;
    try {
      const {
        resource
      } =
      /* istanbul ignore next */
      (cov_sxfha54ly().s[39]++, await container.item(userId, userId).read());
      /* istanbul ignore next */
      cov_sxfha54ly().s[40]++;
      return /* istanbul ignore next */(cov_sxfha54ly().b[4][0]++, resource) ||
      /* istanbul ignore next */
      (cov_sxfha54ly().b[4][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_sxfha54ly().s[41]++;
      if (error.code === 404) {
        /* istanbul ignore next */
        cov_sxfha54ly().b[5][0]++;
        cov_sxfha54ly().s[42]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_sxfha54ly().b[5][1]++;
      }
      cov_sxfha54ly().s[43]++;
      throw error;
    }
  }
  async updateUser(userId, updates) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[5]++;
    cov_sxfha54ly().s[44]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[45]++, this.getContainer('users'));
    const {
      resource: existing
    } =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[46]++, await container.item(userId, userId).read());
    /* istanbul ignore next */
    cov_sxfha54ly().s[47]++;
    if (!existing) {
      /* istanbul ignore next */
      cov_sxfha54ly().b[6][0]++;
      cov_sxfha54ly().s[48]++;
      throw new Error('User not found');
    } else
    /* istanbul ignore next */
    {
      cov_sxfha54ly().b[6][1]++;
    }
    const updated =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[49]++, Object.assign(Object.assign(Object.assign({}, existing), updates), {
      updatedAt: new Date(),
      _partitionKey: userId
    }));
    /* istanbul ignore next */
    cov_sxfha54ly().s[50]++;
    await container.item(userId, userId).replace(updated);
  }
  // Interviews operations
  async createInterview(interviewData) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[6]++;
    cov_sxfha54ly().s[51]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[52]++, this.getContainer('interviews'));
    const id =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[53]++, `interview_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    const document =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[54]++, Object.assign(Object.assign({
      id
    }, interviewData), {
      _partitionKey: interviewData.userId
    }));
    const {
      resource
    } =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[55]++, await container.items.create(document));
    /* istanbul ignore next */
    cov_sxfha54ly().s[56]++;
    return resource.id;
  }
  async getInterview(interviewId, userId) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[7]++;
    cov_sxfha54ly().s[57]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[58]++, this.getContainer('interviews'));
    /* istanbul ignore next */
    cov_sxfha54ly().s[59]++;
    try {
      const {
        resource
      } =
      /* istanbul ignore next */
      (cov_sxfha54ly().s[60]++, await container.item(interviewId, userId).read());
      /* istanbul ignore next */
      cov_sxfha54ly().s[61]++;
      return /* istanbul ignore next */(cov_sxfha54ly().b[7][0]++, resource) ||
      /* istanbul ignore next */
      (cov_sxfha54ly().b[7][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_sxfha54ly().s[62]++;
      if (error.code === 404) {
        /* istanbul ignore next */
        cov_sxfha54ly().b[8][0]++;
        cov_sxfha54ly().s[63]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_sxfha54ly().b[8][1]++;
      }
      cov_sxfha54ly().s[64]++;
      throw error;
    }
  }
  async getUserInterviews(userId) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[8]++;
    cov_sxfha54ly().s[65]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[66]++, this.getContainer('interviews'));
    const querySpec =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[67]++, {
      query: 'SELECT * FROM c WHERE c.userId = @userId ORDER BY c.createdAt DESC',
      parameters: [{
        name: '@userId',
        value: userId
      }]
    });
    const {
      resources
    } =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[68]++, await container.items.query(querySpec).fetchAll());
    /* istanbul ignore next */
    cov_sxfha54ly().s[69]++;
    return resources;
  }
  async getPublicInterviews(userId, limit =
  /* istanbul ignore next */
  (cov_sxfha54ly().b[9][0]++, 20)) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[9]++;
    cov_sxfha54ly().s[70]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[71]++, this.getContainer('interviews'));
    const querySpec =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[72]++, {
      query: 'SELECT * FROM c WHERE c.userId = @userId AND c.finalized = true ORDER BY c.createdAt DESC OFFSET 0 LIMIT @limit',
      parameters: [{
        name: '@userId',
        value: userId
      }, {
        name: '@limit',
        value: limit
      }]
    });
    const {
      resources
    } =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[73]++, await container.items.query(querySpec).fetchAll());
    /* istanbul ignore next */
    cov_sxfha54ly().s[74]++;
    return resources;
  }
  async getPublicInterviewsExcludingUser(excludeUserId, limit =
  /* istanbul ignore next */
  (cov_sxfha54ly().b[10][0]++, 20)) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[10]++;
    cov_sxfha54ly().s[75]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[76]++, this.getContainer('interviews'));
    const querySpec =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[77]++, {
      query: 'SELECT * FROM c WHERE c.finalized = true AND c.userId != @excludeUserId ORDER BY c.createdAt DESC OFFSET 0 LIMIT @limit',
      parameters: [{
        name: '@excludeUserId',
        value: excludeUserId
      }, {
        name: '@limit',
        value: limit
      }]
    });
    const {
      resources
    } =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[78]++, await container.items.query(querySpec).fetchAll());
    /* istanbul ignore next */
    cov_sxfha54ly().s[79]++;
    return resources;
  }
  async updateInterview(interviewId, userId, updates) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[11]++;
    cov_sxfha54ly().s[80]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[81]++, this.getContainer('interviews'));
    const {
      resource: existing
    } =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[82]++, await container.item(interviewId, userId).read());
    /* istanbul ignore next */
    cov_sxfha54ly().s[83]++;
    if (!existing) {
      /* istanbul ignore next */
      cov_sxfha54ly().b[11][0]++;
      cov_sxfha54ly().s[84]++;
      throw new Error('Interview not found');
    } else
    /* istanbul ignore next */
    {
      cov_sxfha54ly().b[11][1]++;
    }
    const updated =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[85]++, Object.assign(Object.assign(Object.assign({}, existing), updates), {
      updatedAt: new Date(),
      _partitionKey: userId
    }));
    /* istanbul ignore next */
    cov_sxfha54ly().s[86]++;
    await container.item(interviewId, userId).replace(updated);
  }
  async deleteInterview(interviewId, userId) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[12]++;
    cov_sxfha54ly().s[87]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[88]++, this.getContainer('interviews'));
    /* istanbul ignore next */
    cov_sxfha54ly().s[89]++;
    await container.item(interviewId, userId).delete();
  }
  // Feedback operations
  async createFeedback(feedbackData) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[13]++;
    cov_sxfha54ly().s[90]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[91]++, this.getContainer('feedback'));
    const id =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[92]++, `feedback_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    const document =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[93]++, Object.assign(Object.assign({
      id
    }, feedbackData), {
      _partitionKey: feedbackData.userId
    }));
    const {
      resource
    } =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[94]++, await container.items.create(document));
    /* istanbul ignore next */
    cov_sxfha54ly().s[95]++;
    return resource.id;
  }
  async getFeedbackByInterview(interviewId, userId) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[14]++;
    cov_sxfha54ly().s[96]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[97]++, this.getContainer('feedback'));
    const querySpec =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[98]++, {
      query: 'SELECT * FROM c WHERE c.interviewId = @interviewId AND c.userId = @userId',
      parameters: [{
        name: '@interviewId',
        value: interviewId
      }, {
        name: '@userId',
        value: userId
      }]
    });
    const {
      resources
    } =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[99]++, await container.items.query(querySpec).fetchAll());
    /* istanbul ignore next */
    cov_sxfha54ly().s[100]++;
    return /* istanbul ignore next */(cov_sxfha54ly().b[12][0]++, resources[0]) ||
    /* istanbul ignore next */
    (cov_sxfha54ly().b[12][1]++, null);
  }
  // Resume operations
  async saveResume(resumeData) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[15]++;
    cov_sxfha54ly().s[101]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[102]++, this.getContainer('resumes'));
    const document =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[103]++, Object.assign(Object.assign({}, resumeData), {
      _partitionKey: resumeData.userId
    }));
    const {
      resource
    } =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[104]++, await container.items.upsert(document));
    /* istanbul ignore next */
    cov_sxfha54ly().s[105]++;
    return resource.id;
  }
  async getUserResume(userId) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[16]++;
    cov_sxfha54ly().s[106]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[107]++, this.getContainer('resumes'));
    /* istanbul ignore next */
    cov_sxfha54ly().s[108]++;
    try {
      const {
        resource
      } =
      /* istanbul ignore next */
      (cov_sxfha54ly().s[109]++, await container.item(userId, userId).read());
      /* istanbul ignore next */
      cov_sxfha54ly().s[110]++;
      return /* istanbul ignore next */(cov_sxfha54ly().b[13][0]++, resource) ||
      /* istanbul ignore next */
      (cov_sxfha54ly().b[13][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_sxfha54ly().s[111]++;
      if (error.code === 404) {
        /* istanbul ignore next */
        cov_sxfha54ly().b[14][0]++;
        cov_sxfha54ly().s[112]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_sxfha54ly().b[14][1]++;
      }
      cov_sxfha54ly().s[113]++;
      throw error;
    }
  }
  async deleteUserResume(userId) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[17]++;
    cov_sxfha54ly().s[114]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[115]++, this.getContainer('resumes'));
    /* istanbul ignore next */
    cov_sxfha54ly().s[116]++;
    try {
      /* istanbul ignore next */
      cov_sxfha54ly().s[117]++;
      await container.item(userId, userId).delete();
    } catch (error) {
      /* istanbul ignore next */
      cov_sxfha54ly().s[118]++;
      if (error.code === 404) {
        /* istanbul ignore next */
        cov_sxfha54ly().b[15][0]++;
        cov_sxfha54ly().s[119]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_sxfha54ly().b[15][1]++;
      } // Already deleted
      cov_sxfha54ly().s[120]++;
      throw error;
    }
  }
  // Usage operations
  async getUserUsage(userId) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[18]++;
    cov_sxfha54ly().s[121]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[122]++, this.getContainer('usage'));
    /* istanbul ignore next */
    cov_sxfha54ly().s[123]++;
    try {
      const {
        resource
      } =
      /* istanbul ignore next */
      (cov_sxfha54ly().s[124]++, await container.item(userId, userId).read());
      /* istanbul ignore next */
      cov_sxfha54ly().s[125]++;
      return /* istanbul ignore next */(cov_sxfha54ly().b[16][0]++, resource) ||
      /* istanbul ignore next */
      (cov_sxfha54ly().b[16][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_sxfha54ly().s[126]++;
      if (error.code === 404) {
        /* istanbul ignore next */
        cov_sxfha54ly().b[17][0]++;
        cov_sxfha54ly().s[127]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_sxfha54ly().b[17][1]++;
      }
      cov_sxfha54ly().s[128]++;
      throw error;
    }
  }
  async initializeUserUsage(userId) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[19]++;
    cov_sxfha54ly().s[129]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[130]++, this.getContainer('usage'));
    const usageData =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[131]++, {
      id: userId,
      userId,
      interviews: {
        count: 0,
        limit: 3
      },
      resumes: {
        count: 0,
        limit: 2
      },
      updatedAt: new Date(),
      _partitionKey: userId
    });
    /* istanbul ignore next */
    cov_sxfha54ly().s[132]++;
    await container.items.upsert(usageData);
  }
  async incrementUsage(userId, type) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[20]++;
    cov_sxfha54ly().s[133]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[134]++, this.getContainer('usage'));
    const {
      resource: existing
    } =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[135]++, await container.item(userId, userId).read());
    /* istanbul ignore next */
    cov_sxfha54ly().s[136]++;
    if (!existing) {
      /* istanbul ignore next */
      cov_sxfha54ly().b[18][0]++;
      cov_sxfha54ly().s[137]++;
      await this.initializeUserUsage(userId);
      /* istanbul ignore next */
      cov_sxfha54ly().s[138]++;
      return this.incrementUsage(userId, type);
    } else
    /* istanbul ignore next */
    {
      cov_sxfha54ly().b[18][1]++;
    }
    const updated =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[139]++, Object.assign(Object.assign({}, existing), {
      [type]: Object.assign(Object.assign({}, existing[type]), {
        count: existing[type].count + 1
      }),
      updatedAt: new Date(),
      _partitionKey: userId
    }));
    /* istanbul ignore next */
    cov_sxfha54ly().s[140]++;
    await container.item(userId, userId).replace(updated);
  }
  async checkUsageLimit(userId, type) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[21]++;
    const usage =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[141]++, await this.getUserUsage(userId));
    /* istanbul ignore next */
    cov_sxfha54ly().s[142]++;
    if (!usage) {
      /* istanbul ignore next */
      cov_sxfha54ly().b[19][0]++;
      cov_sxfha54ly().s[143]++;
      await this.initializeUserUsage(userId);
      /* istanbul ignore next */
      cov_sxfha54ly().s[144]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_sxfha54ly().b[19][1]++;
    }
    cov_sxfha54ly().s[145]++;
    return usage[type].count < usage[type].limit;
  }
  // Job-related operations
  async createJobListing(jobData) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[22]++;
    cov_sxfha54ly().s[146]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[147]++, this.getContainer('jobListings'));
    const id =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[148]++, `job_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    const document =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[149]++, Object.assign(Object.assign({
      id
    }, jobData), {
      _partitionKey: id
    }));
    const {
      resource
    } =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[150]++, await container.items.create(document));
    /* istanbul ignore next */
    cov_sxfha54ly().s[151]++;
    return resource.id;
  }
  async getActiveJobListings(userId) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[23]++;
    cov_sxfha54ly().s[152]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[153]++, this.getContainer('jobListings'));
    const querySpec =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[154]++, {
      query: 'SELECT * FROM c WHERE c.isActive = true AND (ARRAY_CONTAINS(c.discoveredBy, @userId) OR ARRAY_LENGTH(c.discoveredBy) = 0) ORDER BY c.postedDate DESC',
      parameters: [{
        name: '@userId',
        value: userId
      }]
    });
    const {
      resources
    } =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[155]++, await container.items.query(querySpec).fetchAll());
    /* istanbul ignore next */
    cov_sxfha54ly().s[156]++;
    return resources;
  }
  // Applications operations
  async createApplication(applicationData) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[24]++;
    cov_sxfha54ly().s[157]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[158]++, this.getContainer('applications'));
    const id =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[159]++, `app_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    const document =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[160]++, Object.assign(Object.assign({
      id
    }, applicationData), {
      _partitionKey: applicationData.userId
    }));
    const {
      resource
    } =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[161]++, await container.items.create(document));
    /* istanbul ignore next */
    cov_sxfha54ly().s[162]++;
    return resource.id;
  }
  async getUserApplications(userId) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[25]++;
    cov_sxfha54ly().s[163]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[164]++, this.getContainer('applications'));
    const querySpec =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[165]++, {
      query: 'SELECT * FROM c WHERE c.userId = @userId ORDER BY c.appliedAt DESC',
      parameters: [{
        name: '@userId',
        value: userId
      }]
    });
    const {
      resources
    } =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[166]++, await container.items.query(querySpec).fetchAll());
    /* istanbul ignore next */
    cov_sxfha54ly().s[167]++;
    return resources;
  }
  // GDPR operations
  async createDataDeletionRequest(requestData) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[26]++;
    cov_sxfha54ly().s[168]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[169]++, this.getContainer('dataDeletionRequests'));
    const id =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[170]++, `del_req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    const document =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[171]++, Object.assign(Object.assign({
      id
    }, requestData), {
      _partitionKey: requestData.userId
    }));
    const {
      resource
    } =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[172]++, await container.items.create(document));
    /* istanbul ignore next */
    cov_sxfha54ly().s[173]++;
    return resource.id;
  }
  async deleteAllUserData(userId) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[27]++;
    cov_sxfha54ly().s[174]++;
    await this.initialize();
    const deletedCollections =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[175]++, []);
    const collections =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[176]++, ['users', 'interviews', 'feedback', 'resumes', 'usage', 'applications', 'autoApplySettings', 'automationLogs', 'dataDeletionRequests']);
    /* istanbul ignore next */
    cov_sxfha54ly().s[177]++;
    for (const collectionName of collections) {
      /* istanbul ignore next */
      cov_sxfha54ly().s[178]++;
      try {
        const container =
        /* istanbul ignore next */
        (cov_sxfha54ly().s[179]++, this.getContainer(collectionName));
        /* istanbul ignore next */
        cov_sxfha54ly().s[180]++;
        if (
        /* istanbul ignore next */
        (cov_sxfha54ly().b[21][0]++, collectionName === 'users') ||
        /* istanbul ignore next */
        (cov_sxfha54ly().b[21][1]++, collectionName === 'resumes') ||
        /* istanbul ignore next */
        (cov_sxfha54ly().b[21][2]++, collectionName === 'usage')) {
          /* istanbul ignore next */
          cov_sxfha54ly().b[20][0]++;
          cov_sxfha54ly().s[181]++;
          // These use userId as document ID
          try {
            /* istanbul ignore next */
            cov_sxfha54ly().s[182]++;
            await container.item(userId, userId).delete();
            /* istanbul ignore next */
            cov_sxfha54ly().s[183]++;
            deletedCollections.push(collectionName);
          } catch (error) {
            /* istanbul ignore next */
            cov_sxfha54ly().s[184]++;
            if (error.code !== 404) {
              /* istanbul ignore next */
              cov_sxfha54ly().b[22][0]++;
              cov_sxfha54ly().s[185]++;
              throw error;
            } else
            /* istanbul ignore next */
            {
              cov_sxfha54ly().b[22][1]++;
            }
          }
        } else {
          /* istanbul ignore next */
          cov_sxfha54ly().b[20][1]++;
          // Query and delete all documents for this user
          const querySpec =
          /* istanbul ignore next */
          (cov_sxfha54ly().s[186]++, {
            query: 'SELECT c.id FROM c WHERE c.userId = @userId',
            parameters: [{
              name: '@userId',
              value: userId
            }]
          });
          const {
            resources
          } =
          /* istanbul ignore next */
          (cov_sxfha54ly().s[187]++, await container.items.query(querySpec).fetchAll());
          /* istanbul ignore next */
          cov_sxfha54ly().s[188]++;
          if (resources.length > 0) {
            /* istanbul ignore next */
            cov_sxfha54ly().b[23][0]++;
            cov_sxfha54ly().s[189]++;
            for (const item of resources) {
              /* istanbul ignore next */
              cov_sxfha54ly().s[190]++;
              await container.item(item.id, userId).delete();
            }
            /* istanbul ignore next */
            cov_sxfha54ly().s[191]++;
            deletedCollections.push(collectionName);
          } else
          /* istanbul ignore next */
          {
            cov_sxfha54ly().b[23][1]++;
          }
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_sxfha54ly().s[192]++;
        console.error(`Error deleting from ${collectionName}:`, error);
      }
    }
    /* istanbul ignore next */
    cov_sxfha54ly().s[193]++;
    return deletedCollections;
  }
  // Notification Events operations
  async createNotificationEvent(eventData) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[28]++;
    cov_sxfha54ly().s[194]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[195]++, this.getContainer('notificationEvents'));
    const id =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[196]++, `notify_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    const document =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[197]++, Object.assign(Object.assign({
      id
    }, eventData), {
      _partitionKey: eventData.userId
    }));
    const {
      resource
    } =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[198]++, await container.items.create(document));
    /* istanbul ignore next */
    cov_sxfha54ly().s[199]++;
    return resource.id;
  }
  async updateNotificationEvent(eventId, userId, updates) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[29]++;
    cov_sxfha54ly().s[200]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[201]++, this.getContainer('notificationEvents'));
    const {
      resource: existing
    } =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[202]++, await container.item(eventId, userId).read());
    /* istanbul ignore next */
    cov_sxfha54ly().s[203]++;
    if (!existing) {
      /* istanbul ignore next */
      cov_sxfha54ly().b[24][0]++;
      cov_sxfha54ly().s[204]++;
      throw new Error('Notification event not found');
    } else
    /* istanbul ignore next */
    {
      cov_sxfha54ly().b[24][1]++;
    }
    const updated =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[205]++, Object.assign(Object.assign(Object.assign({}, existing), updates), {
      updatedAt: new Date(),
      _partitionKey: userId
    }));
    /* istanbul ignore next */
    cov_sxfha54ly().s[206]++;
    await container.item(eventId, userId).replace(updated);
  }
  async getUserNotificationEvents(userId, limit =
  /* istanbul ignore next */
  (cov_sxfha54ly().b[25][0]++, 50)) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[30]++;
    cov_sxfha54ly().s[207]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[208]++, this.getContainer('notificationEvents'));
    const querySpec =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[209]++, {
      query: 'SELECT * FROM c WHERE c.userId = @userId ORDER BY c.createdAt DESC OFFSET 0 LIMIT @limit',
      parameters: [{
        name: '@userId',
        value: userId
      }, {
        name: '@limit',
        value: limit
      }]
    });
    const {
      resources
    } =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[210]++, await container.items.query(querySpec).fetchAll());
    /* istanbul ignore next */
    cov_sxfha54ly().s[211]++;
    return resources;
  }
  // Error Events operations for monitoring
  async createErrorEvent(errorData) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[31]++;
    cov_sxfha54ly().s[212]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[213]++, this.getContainer('featureErrors'));
    const id =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[214]++, `error_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    const document =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[215]++, Object.assign(Object.assign({
      id
    }, errorData), {
      _partitionKey: errorData.featureName
    }));
    const {
      resource
    } =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[216]++, await container.items.create(document));
    /* istanbul ignore next */
    cov_sxfha54ly().s[217]++;
    return resource.id;
  }
  async getErrorEvents(featureName, timeWindowMinutes, limit =
  /* istanbul ignore next */
  (cov_sxfha54ly().b[26][0]++, 100)) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[32]++;
    cov_sxfha54ly().s[218]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[219]++, this.getContainer('featureErrors'));
    const cutoffTime =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[220]++, new Date(Date.now() - timeWindowMinutes * 60 * 1000));
    const querySpec =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[221]++, {
      query: 'SELECT * FROM c WHERE c.featureName = @featureName AND c.timestamp >= @cutoffTime ORDER BY c.timestamp DESC OFFSET 0 LIMIT @limit',
      parameters: [{
        name: '@featureName',
        value: featureName
      }, {
        name: '@cutoffTime',
        value: cutoffTime
      }, {
        name: '@limit',
        value: limit
      }]
    });
    const {
      resources
    } =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[222]++, await container.items.query(querySpec).fetchAll());
    /* istanbul ignore next */
    cov_sxfha54ly().s[223]++;
    return resources;
  }
  async getErrorEventCount(featureName, timeWindowMinutes) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[33]++;
    cov_sxfha54ly().s[224]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[225]++, this.getContainer('featureErrors'));
    const cutoffTime =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[226]++, new Date(Date.now() - timeWindowMinutes * 60 * 1000));
    const querySpec =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[227]++, {
      query: 'SELECT VALUE COUNT(1) FROM c WHERE c.featureName = @featureName AND c.timestamp >= @cutoffTime',
      parameters: [{
        name: '@featureName',
        value: featureName
      }, {
        name: '@cutoffTime',
        value: cutoffTime
      }]
    });
    const {
      resources
    } =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[228]++, await container.items.query(querySpec).fetchAll());
    /* istanbul ignore next */
    cov_sxfha54ly().s[229]++;
    return /* istanbul ignore next */(cov_sxfha54ly().b[27][0]++, resources[0]) ||
    /* istanbul ignore next */
    (cov_sxfha54ly().b[27][1]++, 0);
  }
  // Error Budget operations
  async createErrorBudget(budgetData) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[34]++;
    cov_sxfha54ly().s[230]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[231]++, this.getContainer('errorBudgets'));
    const id =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[232]++, `budget_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    const document =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[233]++, Object.assign(Object.assign({
      id
    }, budgetData), {
      _partitionKey: budgetData.featureName
    }));
    const {
      resource
    } =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[234]++, await container.items.create(document));
    /* istanbul ignore next */
    cov_sxfha54ly().s[235]++;
    return resource.id;
  }
  // Email Verification operations
  async createEmailVerification(verificationData) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[35]++;
    cov_sxfha54ly().s[236]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[237]++, this.getContainer('emailVerifications'));
    const id =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[238]++, `verify_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    const document =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[239]++, Object.assign(Object.assign({
      id
    }, verificationData), {
      _partitionKey: verificationData.userId
    }));
    const {
      resource
    } =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[240]++, await container.items.create(document));
    /* istanbul ignore next */
    cov_sxfha54ly().s[241]++;
    return resource.id;
  }
  async getEmailVerification(userId, email, type) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[36]++;
    cov_sxfha54ly().s[242]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[243]++, this.getContainer('emailVerifications'));
    const querySpec =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[244]++, {
      query: 'SELECT * FROM c WHERE c.userId = @userId AND c.email = @email AND c.type = @type AND c.verified = false ORDER BY c.createdAt DESC',
      parameters: [{
        name: '@userId',
        value: userId
      }, {
        name: '@email',
        value: email
      }, {
        name: '@type',
        value: type
      }]
    });
    const {
      resources
    } =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[245]++, await container.items.query(querySpec).fetchAll());
    /* istanbul ignore next */
    cov_sxfha54ly().s[246]++;
    return /* istanbul ignore next */(cov_sxfha54ly().b[28][0]++, resources[0]) ||
    /* istanbul ignore next */
    (cov_sxfha54ly().b[28][1]++, null);
  }
  async updateEmailVerification(verificationId, userId, updates) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[37]++;
    cov_sxfha54ly().s[247]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[248]++, this.getContainer('emailVerifications'));
    const {
      resource: existing
    } =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[249]++, await container.item(verificationId, userId).read());
    /* istanbul ignore next */
    cov_sxfha54ly().s[250]++;
    if (!existing) {
      /* istanbul ignore next */
      cov_sxfha54ly().b[29][0]++;
      cov_sxfha54ly().s[251]++;
      throw new Error('Email verification not found');
    } else
    /* istanbul ignore next */
    {
      cov_sxfha54ly().b[29][1]++;
    }
    const updated =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[252]++, Object.assign(Object.assign(Object.assign({}, existing), updates), {
      _partitionKey: userId
    }));
    /* istanbul ignore next */
    cov_sxfha54ly().s[253]++;
    await container.item(verificationId, userId).replace(updated);
  }
  // Profile operations (for Firestore profiles collection)
  async saveProfile(profileData) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[38]++;
    cov_sxfha54ly().s[254]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[255]++, this.getContainer('profiles'));
    const document =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[256]++, Object.assign(Object.assign({}, profileData), {
      _partitionKey: profileData.userId
    }));
    const {
      resource
    } =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[257]++, await container.items.upsert(document));
    /* istanbul ignore next */
    cov_sxfha54ly().s[258]++;
    return resource.id;
  }
  async getProfile(userId) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[39]++;
    cov_sxfha54ly().s[259]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[260]++, this.getContainer('profiles'));
    /* istanbul ignore next */
    cov_sxfha54ly().s[261]++;
    try {
      const {
        resource
      } =
      /* istanbul ignore next */
      (cov_sxfha54ly().s[262]++, await container.item(userId, userId).read());
      /* istanbul ignore next */
      cov_sxfha54ly().s[263]++;
      return /* istanbul ignore next */(cov_sxfha54ly().b[30][0]++, resource) ||
      /* istanbul ignore next */
      (cov_sxfha54ly().b[30][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_sxfha54ly().s[264]++;
      if (error.code === 404) {
        /* istanbul ignore next */
        cov_sxfha54ly().b[31][0]++;
        cov_sxfha54ly().s[265]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_sxfha54ly().b[31][1]++;
      }
      cov_sxfha54ly().s[266]++;
      throw error;
    }
  }
  async updateProfile(userId, updates) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[40]++;
    cov_sxfha54ly().s[267]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[268]++, this.getContainer('profiles'));
    const {
      resource: existing
    } =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[269]++, await container.item(userId, userId).read());
    /* istanbul ignore next */
    cov_sxfha54ly().s[270]++;
    if (!existing) {
      /* istanbul ignore next */
      cov_sxfha54ly().b[32][0]++;
      // Create new profile if doesn't exist
      const newProfile =
      /* istanbul ignore next */
      (cov_sxfha54ly().s[271]++, Object.assign(Object.assign({
        id: userId,
        userId
      }, updates), {
        updatedAt: new Date(),
        _partitionKey: userId
      }));
      /* istanbul ignore next */
      cov_sxfha54ly().s[272]++;
      await container.items.create(newProfile);
    } else {
      /* istanbul ignore next */
      cov_sxfha54ly().b[32][1]++;
      const updated =
      /* istanbul ignore next */
      (cov_sxfha54ly().s[273]++, Object.assign(Object.assign(Object.assign({}, existing), updates), {
        updatedAt: new Date(),
        _partitionKey: userId
      }));
      /* istanbul ignore next */
      cov_sxfha54ly().s[274]++;
      await container.item(userId, userId).replace(updated);
    }
  }
  // Generic query operations for complex Firestore-like queries
  async queryDocuments(containerName, query, parameters, partitionKey) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[41]++;
    cov_sxfha54ly().s[275]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[276]++, this.getContainer(containerName));
    const querySpec =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[277]++, {
      query,
      parameters
    });
    const queryOptions =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[278]++, partitionKey ?
    /* istanbul ignore next */
    (cov_sxfha54ly().b[33][0]++, {
      partitionKey
    }) :
    /* istanbul ignore next */
    (cov_sxfha54ly().b[33][1]++, {}));
    const {
      resources
    } =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[279]++, await container.items.query(querySpec, queryOptions).fetchAll());
    /* istanbul ignore next */
    cov_sxfha54ly().s[280]++;
    return resources;
  }
  // Generic document operations
  async createDocument(containerName, document) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[42]++;
    cov_sxfha54ly().s[281]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[282]++, this.getContainer(containerName));
    const {
      resource
    } =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[283]++, await container.items.create(document));
    /* istanbul ignore next */
    cov_sxfha54ly().s[284]++;
    return resource.id;
  }
  async getDocument(containerName, documentId, partitionKey) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[43]++;
    cov_sxfha54ly().s[285]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[286]++, this.getContainer(containerName));
    /* istanbul ignore next */
    cov_sxfha54ly().s[287]++;
    try {
      const {
        resource
      } =
      /* istanbul ignore next */
      (cov_sxfha54ly().s[288]++, await container.item(documentId, partitionKey).read());
      /* istanbul ignore next */
      cov_sxfha54ly().s[289]++;
      return /* istanbul ignore next */(cov_sxfha54ly().b[34][0]++, resource) ||
      /* istanbul ignore next */
      (cov_sxfha54ly().b[34][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_sxfha54ly().s[290]++;
      if (error.code === 404) {
        /* istanbul ignore next */
        cov_sxfha54ly().b[35][0]++;
        cov_sxfha54ly().s[291]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_sxfha54ly().b[35][1]++;
      }
      cov_sxfha54ly().s[292]++;
      throw error;
    }
  }
  async updateDocument(containerName, documentId, partitionKey, updates) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[44]++;
    cov_sxfha54ly().s[293]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[294]++, this.getContainer(containerName));
    const {
      resource: existing
    } =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[295]++, await container.item(documentId, partitionKey).read());
    /* istanbul ignore next */
    cov_sxfha54ly().s[296]++;
    if (!existing) {
      /* istanbul ignore next */
      cov_sxfha54ly().b[36][0]++;
      cov_sxfha54ly().s[297]++;
      throw new Error('Document not found');
    } else
    /* istanbul ignore next */
    {
      cov_sxfha54ly().b[36][1]++;
    }
    const updated =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[298]++, Object.assign(Object.assign({}, existing), updates));
    /* istanbul ignore next */
    cov_sxfha54ly().s[299]++;
    await container.item(documentId, partitionKey).replace(updated);
  }
  async deleteDocument(containerName, documentId, partitionKey) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[45]++;
    cov_sxfha54ly().s[300]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[301]++, this.getContainer(containerName));
    /* istanbul ignore next */
    cov_sxfha54ly().s[302]++;
    try {
      /* istanbul ignore next */
      cov_sxfha54ly().s[303]++;
      await container.item(documentId, partitionKey).delete();
    } catch (error) {
      /* istanbul ignore next */
      cov_sxfha54ly().s[304]++;
      if (error.code !== 404) {
        /* istanbul ignore next */
        cov_sxfha54ly().b[37][0]++;
        cov_sxfha54ly().s[305]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_sxfha54ly().b[37][1]++;
      }
      // Document already deleted, ignore 404
    }
  }
  // Batch operations for efficiency
  async batchCreate(containerName, documents) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[46]++;
    cov_sxfha54ly().s[306]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[307]++, this.getContainer(containerName));
    // Process in smaller batches to avoid limits
    const batchSize =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[308]++, 25);
    /* istanbul ignore next */
    cov_sxfha54ly().s[309]++;
    for (let i =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[310]++, 0); i < documents.length; i += batchSize) {
      const batch =
      /* istanbul ignore next */
      (cov_sxfha54ly().s[311]++, documents.slice(i, i + batchSize));
      /* istanbul ignore next */
      cov_sxfha54ly().s[312]++;
      await Promise.all(batch.map(doc => {
        /* istanbul ignore next */
        cov_sxfha54ly().f[47]++;
        cov_sxfha54ly().s[313]++;
        return container.items.create(doc);
      }));
    }
  }
  async batchDelete(containerName, documentIds) {
    /* istanbul ignore next */
    cov_sxfha54ly().f[48]++;
    cov_sxfha54ly().s[314]++;
    await this.initialize();
    const container =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[315]++, this.getContainer(containerName));
    // Process in smaller batches
    const batchSize =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[316]++, 25);
    /* istanbul ignore next */
    cov_sxfha54ly().s[317]++;
    for (let i =
    /* istanbul ignore next */
    (cov_sxfha54ly().s[318]++, 0); i < documentIds.length; i += batchSize) {
      const batch =
      /* istanbul ignore next */
      (cov_sxfha54ly().s[319]++, documentIds.slice(i, i + batchSize));
      /* istanbul ignore next */
      cov_sxfha54ly().s[320]++;
      await Promise.all(batch.map(({
        id,
        partitionKey
      }) => {
        /* istanbul ignore next */
        cov_sxfha54ly().f[49]++;
        cov_sxfha54ly().s[321]++;
        return container.item(id, partitionKey).delete().catch(err => {
          /* istanbul ignore next */
          cov_sxfha54ly().f[50]++;
          cov_sxfha54ly().s[322]++;
          if (err.code !== 404) {
            /* istanbul ignore next */
            cov_sxfha54ly().b[38][0]++;
            cov_sxfha54ly().s[323]++;
            throw err;
          } else
          /* istanbul ignore next */
          {
            cov_sxfha54ly().b[38][1]++;
          }
          // Ignore 404s for already deleted documents
        });
      }));
    }
  }
  // Health check
  async healthCheck() {
    /* istanbul ignore next */
    cov_sxfha54ly().f[51]++;
    cov_sxfha54ly().s[324]++;
    try {
      /* istanbul ignore next */
      cov_sxfha54ly().s[325]++;
      await this.initialize();
      const container =
      /* istanbul ignore next */
      (cov_sxfha54ly().s[326]++, this.getContainer('users'));
      // Simple read operation to test connectivity
      const querySpec =
      /* istanbul ignore next */
      (cov_sxfha54ly().s[327]++, {
        query: 'SELECT VALUE COUNT(1) FROM c',
        parameters: []
      });
      /* istanbul ignore next */
      cov_sxfha54ly().s[328]++;
      await container.items.query(querySpec).fetchAll();
      /* istanbul ignore next */
      cov_sxfha54ly().s[329]++;
      return {
        status: 'healthy',
        timestamp: new Date()
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_sxfha54ly().s[330]++;
      console.error('Azure Cosmos DB health check failed:', error);
      /* istanbul ignore next */
      cov_sxfha54ly().s[331]++;
      return {
        status: 'unhealthy',
        timestamp: new Date()
      };
    }
  }
}
// Export singleton instance
/* istanbul ignore next */
cov_sxfha54ly().s[332]++;
exports.azureCosmosService = new AzureCosmosService();
/* istanbul ignore next */
cov_sxfha54ly().s[333]++;
exports.default = exports.azureCosmosService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,