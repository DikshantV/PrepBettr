afe2cda51a07199cfe10fdf0acb90d1b
"use strict";

/* istanbul ignore next */
function cov_1ir9ht454k() {
  var path = "/Users/dikshantvashistha/PrepBettr/app/api/interview/session/[id]/status/route.ts";
  var hash = "408eef06fd7d9ff9ca4ec4758d92acb6fa805c67";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/app/api/interview/session/[id]/status/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 18
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 39
        }
      },
      "3": {
        start: {
          line: 5,
          column: 29
        },
        end: {
          line: 5,
          column: 91
        }
      },
      "4": {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 19
        }
      },
      "5": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 11,
          column: 5
        }
      },
      "6": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 64
        }
      },
      "7": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 12,
          column: 20
        }
      },
      "8": {
        start: {
          line: 32,
          column: 19
        },
        end: {
          line: 32,
          column: 39
        }
      },
      "9": {
        start: {
          line: 33,
          column: 27
        },
        end: {
          line: 33,
          column: 39
        }
      },
      "10": {
        start: {
          line: 34,
          column: 22
        },
        end: {
          line: 34,
          column: 39
        }
      },
      "11": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 82,
          column: 5
        }
      },
      "12": {
        start: {
          line: 36,
          column: 33
        },
        end: {
          line: 36,
          column: 53
        }
      },
      "13": {
        start: {
          line: 37,
          column: 24
        },
        end: {
          line: 37,
          column: 62
        }
      },
      "14": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 42,
          column: 9
        }
      },
      "15": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 41,
          column: 32
        }
      },
      "16": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 100
        }
      },
      "17": {
        start: {
          line: 45,
          column: 23
        },
        end: {
          line: 45,
          column: 63
        }
      },
      "18": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 65,
          column: 11
        }
      },
      "19": {
        start: {
          line: 57,
          column: 50
        },
        end: {
          line: 57,
          column: 84
        }
      },
      "20": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 68
        }
      },
      "21": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 75,
          column: 9
        }
      },
      "22": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 74,
          column: 32
        }
      },
      "23": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 81,
          column: 28
        }
      }
    },
    fnMap: {
      "0": {
        name: "getWorkflow",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 20
          }
        },
        loc: {
          start: {
            line: 8,
            column: 23
          },
          end: {
            line: 13,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 30,
            column: 15
          },
          end: {
            line: 30,
            column: 18
          }
        },
        loc: {
          start: {
            line: 30,
            column: 37
          },
          end: {
            line: 83,
            column: 1
          }
        },
        line: 30
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 57,
            column: 45
          },
          end: {
            line: 57,
            column: 46
          }
        },
        loc: {
          start: {
            line: 57,
            column: 50
          },
          end: {
            line: 57,
            column: 84
          }
        },
        line: 57
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 9
      },
      "1": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "2": {
        loc: {
          start: {
            line: 43,
            column: 69
          },
          end: {
            line: 43,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 43,
            column: 79
          },
          end: {
            line: 43,
            column: 91
          }
        }, {
          start: {
            line: 43,
            column: 94
          },
          end: {
            line: 43,
            column: 96
          }
        }],
        line: 43
      },
      "3": {
        loc: {
          start: {
            line: 55,
            column: 28
          },
          end: {
            line: 55,
            column: 102
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 55,
            column: 28
          },
          end: {
            line: 55,
            column: 73
          }
        }, {
          start: {
            line: 55,
            column: 77
          },
          end: {
            line: 55,
            column: 102
          }
        }],
        line: 55
      },
      "4": {
        loc: {
          start: {
            line: 56,
            column: 34
          },
          end: {
            line: 58,
            column: 24
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 57,
            column: 20
          },
          end: {
            line: 57,
            column: 137
          }
        }, {
          start: {
            line: 58,
            column: 20
          },
          end: {
            line: 58,
            column: 24
          }
        }],
        line: 56
      },
      "5": {
        loc: {
          start: {
            line: 57,
            column: 20
          },
          end: {
            line: 57,
            column: 137
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 57,
            column: 115
          },
          end: {
            line: 57,
            column: 121
          }
        }, {
          start: {
            line: 57,
            column: 124
          },
          end: {
            line: 57,
            column: 137
          }
        }],
        line: 57
      },
      "6": {
        loc: {
          start: {
            line: 57,
            column: 20
          },
          end: {
            line: 57,
            column: 112
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 57,
            column: 20
          },
          end: {
            line: 57,
            column: 95
          }
        }, {
          start: {
            line: 57,
            column: 99
          },
          end: {
            line: 57,
            column: 112
          }
        }],
        line: 57
      },
      "7": {
        loc: {
          start: {
            line: 59,
            column: 31
          },
          end: {
            line: 61,
            column: 24
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 60,
            column: 20
          },
          end: {
            line: 60,
            column: 117
          }
        }, {
          start: {
            line: 61,
            column: 20
          },
          end: {
            line: 61,
            column: 24
          }
        }],
        line: 59
      },
      "8": {
        loc: {
          start: {
            line: 60,
            column: 20
          },
          end: {
            line: 60,
            column: 117
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 60,
            column: 95
          },
          end: {
            line: 60,
            column: 101
          }
        }, {
          start: {
            line: 60,
            column: 104
          },
          end: {
            line: 60,
            column: 117
          }
        }],
        line: 60
      },
      "9": {
        loc: {
          start: {
            line: 60,
            column: 20
          },
          end: {
            line: 60,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 60,
            column: 20
          },
          end: {
            line: 60,
            column: 75
          }
        }, {
          start: {
            line: 60,
            column: 79
          },
          end: {
            line: 60,
            column: 92
          }
        }],
        line: 60
      },
      "10": {
        loc: {
          start: {
            line: 63,
            column: 30
          },
          end: {
            line: 63,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 63,
            column: 45
          },
          end: {
            line: 63,
            column: 52
          }
        }, {
          start: {
            line: 63,
            column: 55
          },
          end: {
            line: 63,
            column: 103
          }
        }],
        line: 63
      },
      "11": {
        loc: {
          start: {
            line: 63,
            column: 55
          },
          end: {
            line: 63,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 63,
            column: 83
          },
          end: {
            line: 63,
            column: 91
          }
        }, {
          start: {
            line: 63,
            column: 94
          },
          end: {
            line: 63,
            column: 103
          }
        }],
        line: 63
      },
      "12": {
        loc: {
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "13": {
        loc: {
          start: {
            line: 78,
            column: 19
          },
          end: {
            line: 78,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 78,
            column: 19
          },
          end: {
            line: 78,
            column: 32
          }
        }, {
          start: {
            line: 78,
            column: 36
          },
          end: {
            line: 78,
            column: 66
          }
        }],
        line: 78
      },
      "14": {
        loc: {
          start: {
            line: 79,
            column: 18
          },
          end: {
            line: 79,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 79,
            column: 18
          },
          end: {
            line: 79,
            column: 28
          }
        }, {
          start: {
            line: 79,
            column: 32
          },
          end: {
            line: 79,
            column: 47
          }
        }],
        line: 79
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/app/api/interview/session/[id]/status/route.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/app/api/interview/session/[id]/status/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { InterviewWorkflow } from '@/lib/azure-ai-foundry/workflows/interview-workflow';\n\n// Lazy initialization to avoid build-time issues\nlet workflow: InterviewWorkflow | null = null;\n\nfunction getWorkflow(): InterviewWorkflow {\n  if (!workflow) {\n    workflow = new InterviewWorkflow();\n  }\n  return workflow;\n}\n\n/**\n * GET /api/interview/session/[id]/status\n * \n * Get current status of an interview session\n * \n * Path Parameters:\n * - id: sessionId (string)\n * \n * Query Parameters:\n * - refresh?: boolean (force refresh timing data)\n * \n * Response:\n * - status: WorkflowStatus (complete status object)\n * - timing: real-time timing information\n * - progress: percentage and stage information\n */\nexport async function GET(\n  request: NextRequest,\n  context: { params: Promise<{ id: string }> }\n) {\n  const params = await context.params;\n  const resolvedParams = await params;\n  const sessionId = resolvedParams.id;\n  \n  try {\n    const { searchParams } = new URL(request.url);\n    const refresh = searchParams.get('refresh') === 'true';\n\n    if (!sessionId) {\n      return NextResponse.json({\n        error: 'Session ID is required'\n      }, { status: 400 });\n    }\n\n    console.log(`[API] Getting status for session: ${sessionId}${refresh ? ' (refresh)' : ''}`);\n\n    // Get current workflow status\n    const status = await getWorkflow().getStatus(sessionId);\n\n    return NextResponse.json({\n      success: true,\n      sessionId,\n      status,\n      timestamp: Date.now(),\n      // Additional computed fields for convenience\n      computed: {\n        isActive: status.state === 'in-progress',\n        isCompleted: status.state === 'completed',\n        canAdvance: status.currentStageIndex < status.totalStages && status.state !== 'failed',\n        currentStageName: status.currentStage ? \n          status.stages.find(s => s.stage.id === status.currentStage)?.stage.name : \n          null,\n        nextStageName: status.currentStageIndex < status.totalStages ? \n          status.stages[status.currentStageIndex]?.stage.name : \n          null,\n        estimatedCompletionTime: new Date(status.timing.startTime + status.timing.totalEstimatedMinutes * 60000).toISOString(),\n        healthStatus: status.error ? 'error' : status.state === 'failed' ? 'failed' : 'healthy'\n      }\n    });\n\n  } catch (error: any) {\n    console.error(`[API] Error getting session status:`, error);\n    \n    if (error.code === 'SESSION_NOT_FOUND') {\n      return NextResponse.json({\n        success: false,\n        error: 'Session not found',\n        sessionId: resolvedParams.id\n      }, { status: 404 });\n    }\n\n    return NextResponse.json({\n      success: false,\n      error: error.message || 'Failed to get session status',\n      code: error.code || 'UNKNOWN_ERROR',\n      sessionId: resolvedParams.id\n    }, { status: 500 });\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "408eef06fd7d9ff9ca4ec4758d92acb6fa805c67"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ir9ht454k = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ir9ht454k();
cov_1ir9ht454k().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1ir9ht454k().s[1]++;
exports.GET = GET;
const server_1 =
/* istanbul ignore next */
(cov_1ir9ht454k().s[2]++, require("next/server"));
const interview_workflow_1 =
/* istanbul ignore next */
(cov_1ir9ht454k().s[3]++, require("@/lib/azure-ai-foundry/workflows/interview-workflow"));
// Lazy initialization to avoid build-time issues
let workflow =
/* istanbul ignore next */
(cov_1ir9ht454k().s[4]++, null);
function getWorkflow() {
  /* istanbul ignore next */
  cov_1ir9ht454k().f[0]++;
  cov_1ir9ht454k().s[5]++;
  if (!workflow) {
    /* istanbul ignore next */
    cov_1ir9ht454k().b[0][0]++;
    cov_1ir9ht454k().s[6]++;
    workflow = new interview_workflow_1.InterviewWorkflow();
  } else
  /* istanbul ignore next */
  {
    cov_1ir9ht454k().b[0][1]++;
  }
  cov_1ir9ht454k().s[7]++;
  return workflow;
}
/**
 * GET /api/interview/session/[id]/status
 *
 * Get current status of an interview session
 *
 * Path Parameters:
 * - id: sessionId (string)
 *
 * Query Parameters:
 * - refresh?: boolean (force refresh timing data)
 *
 * Response:
 * - status: WorkflowStatus (complete status object)
 * - timing: real-time timing information
 * - progress: percentage and stage information
 */
async function GET(request, context) {
  /* istanbul ignore next */
  cov_1ir9ht454k().f[1]++;
  var _a, _b;
  const params =
  /* istanbul ignore next */
  (cov_1ir9ht454k().s[8]++, await context.params);
  const resolvedParams =
  /* istanbul ignore next */
  (cov_1ir9ht454k().s[9]++, await params);
  const sessionId =
  /* istanbul ignore next */
  (cov_1ir9ht454k().s[10]++, resolvedParams.id);
  /* istanbul ignore next */
  cov_1ir9ht454k().s[11]++;
  try {
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_1ir9ht454k().s[12]++, new URL(request.url));
    const refresh =
    /* istanbul ignore next */
    (cov_1ir9ht454k().s[13]++, searchParams.get('refresh') === 'true');
    /* istanbul ignore next */
    cov_1ir9ht454k().s[14]++;
    if (!sessionId) {
      /* istanbul ignore next */
      cov_1ir9ht454k().b[1][0]++;
      cov_1ir9ht454k().s[15]++;
      return server_1.NextResponse.json({
        error: 'Session ID is required'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ir9ht454k().b[1][1]++;
    }
    cov_1ir9ht454k().s[16]++;
    console.log(`[API] Getting status for session: ${sessionId}${refresh ?
    /* istanbul ignore next */
    (cov_1ir9ht454k().b[2][0]++, ' (refresh)') :
    /* istanbul ignore next */
    (cov_1ir9ht454k().b[2][1]++, '')}`);
    // Get current workflow status
    const status =
    /* istanbul ignore next */
    (cov_1ir9ht454k().s[17]++, await getWorkflow().getStatus(sessionId));
    /* istanbul ignore next */
    cov_1ir9ht454k().s[18]++;
    return server_1.NextResponse.json({
      success: true,
      sessionId,
      status,
      timestamp: Date.now(),
      // Additional computed fields for convenience
      computed: {
        isActive: status.state === 'in-progress',
        isCompleted: status.state === 'completed',
        canAdvance:
        /* istanbul ignore next */
        (cov_1ir9ht454k().b[3][0]++, status.currentStageIndex < status.totalStages) &&
        /* istanbul ignore next */
        (cov_1ir9ht454k().b[3][1]++, status.state !== 'failed'),
        currentStageName: status.currentStage ?
        /* istanbul ignore next */
        (cov_1ir9ht454k().b[4][0]++,
        /* istanbul ignore next */
        (cov_1ir9ht454k().b[6][0]++, (_a = status.stages.find(s => {
          /* istanbul ignore next */
          cov_1ir9ht454k().f[2]++;
          cov_1ir9ht454k().s[19]++;
          return s.stage.id === status.currentStage;
        })) === null) ||
        /* istanbul ignore next */
        (cov_1ir9ht454k().b[6][1]++, _a === void 0) ?
        /* istanbul ignore next */
        (cov_1ir9ht454k().b[5][0]++, void 0) :
        /* istanbul ignore next */
        (cov_1ir9ht454k().b[5][1]++, _a.stage.name)) :
        /* istanbul ignore next */
        (cov_1ir9ht454k().b[4][1]++, null),
        nextStageName: status.currentStageIndex < status.totalStages ?
        /* istanbul ignore next */
        (cov_1ir9ht454k().b[7][0]++,
        /* istanbul ignore next */
        (cov_1ir9ht454k().b[9][0]++, (_b = status.stages[status.currentStageIndex]) === null) ||
        /* istanbul ignore next */
        (cov_1ir9ht454k().b[9][1]++, _b === void 0) ?
        /* istanbul ignore next */
        (cov_1ir9ht454k().b[8][0]++, void 0) :
        /* istanbul ignore next */
        (cov_1ir9ht454k().b[8][1]++, _b.stage.name)) :
        /* istanbul ignore next */
        (cov_1ir9ht454k().b[7][1]++, null),
        estimatedCompletionTime: new Date(status.timing.startTime + status.timing.totalEstimatedMinutes * 60000).toISOString(),
        healthStatus: status.error ?
        /* istanbul ignore next */
        (cov_1ir9ht454k().b[10][0]++, 'error') :
        /* istanbul ignore next */
        (cov_1ir9ht454k().b[10][1]++, status.state === 'failed' ?
        /* istanbul ignore next */
        (cov_1ir9ht454k().b[11][0]++, 'failed') :
        /* istanbul ignore next */
        (cov_1ir9ht454k().b[11][1]++, 'healthy'))
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1ir9ht454k().s[20]++;
    console.error(`[API] Error getting session status:`, error);
    /* istanbul ignore next */
    cov_1ir9ht454k().s[21]++;
    if (error.code === 'SESSION_NOT_FOUND') {
      /* istanbul ignore next */
      cov_1ir9ht454k().b[12][0]++;
      cov_1ir9ht454k().s[22]++;
      return server_1.NextResponse.json({
        success: false,
        error: 'Session not found',
        sessionId: resolvedParams.id
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ir9ht454k().b[12][1]++;
    }
    cov_1ir9ht454k().s[23]++;
    return server_1.NextResponse.json({
      success: false,
      error:
      /* istanbul ignore next */
      (cov_1ir9ht454k().b[13][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_1ir9ht454k().b[13][1]++, 'Failed to get session status'),
      code:
      /* istanbul ignore next */
      (cov_1ir9ht454k().b[14][0]++, error.code) ||
      /* istanbul ignore next */
      (cov_1ir9ht454k().b[14][1]++, 'UNKNOWN_ERROR'),
      sessionId: resolvedParams.id
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,