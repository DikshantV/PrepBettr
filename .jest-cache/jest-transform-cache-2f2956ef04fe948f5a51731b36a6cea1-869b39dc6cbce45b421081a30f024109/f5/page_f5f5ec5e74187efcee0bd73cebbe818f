5fe0f02d6080101f1bfeac551ae35a34
/* istanbul ignore next */
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Page;
exports.generateStaticParams = generateStaticParams;
var
/* istanbul ignore next */
_auth = require("@/lib/actions/auth.action");
var
/* istanbul ignore next */
_InterviewClient = _interopRequireDefault(require("./InterviewClient"));
/* istanbul ignore next */
var _jsxRuntime = require("react/jsx-runtime");
function cov_1cxvgwlm0i() {
  var path = "/Users/dikshantvashistha/PrepBettr/app/dashboard/interview/[id]/page.tsx";
  var hash = "a24e26b4ce3e445c2b5a3695f2a450c369197918";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/app/dashboard/interview/[id]/page.tsx",
    statementMap: {
      "0": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 209,
          column: 5
        }
      },
      "1": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 158,
          column: 9
        }
      },
      "2": {
        start: {
          line: 40,
          column: 30
        },
        end: {
          line: 40,
          column: 60
        }
      },
      "3": {
        start: {
          line: 41,
          column: 35
        },
        end: {
          line: 122,
          column: 13
        }
      },
      "4": {
        start: {
          line: 124,
          column: 33
        },
        end: {
          line: 124,
          column: 82
        }
      },
      "5": {
        start: {
          line: 126,
          column: 29
        },
        end: {
          line: 142,
          column: 13
        }
      },
      "6": {
        start: {
          line: 131,
          column: 71
        },
        end: {
          line: 137,
          column: 21
        }
      },
      "7": {
        start: {
          line: 144,
          column: 32
        },
        end: {
          line: 144,
          column: 54
        }
      },
      "8": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 157,
          column: 14
        }
      },
      "9": {
        start: {
          line: 165,
          column: 25
        },
        end: {
          line: 190,
          column: 9
        }
      },
      "10": {
        start: {
          line: 192,
          column: 28
        },
        end: {
          line: 192,
          column: 50
        }
      },
      "11": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 205,
          column: 10
        }
      },
      "12": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 207,
          column: 63
        }
      },
      "13": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 208,
          column: 20
        }
      },
      "14": {
        start: {
          line: 225,
          column: 4
        },
        end: {
          line: 234,
          column: 6
        }
      },
      "15": {
        start: {
          line: 238,
          column: 19
        },
        end: {
          line: 238,
          column: 31
        }
      },
      "16": {
        start: {
          line: 239,
          column: 26
        },
        end: {
          line: 239,
          column: 52
        }
      },
      "17": {
        start: {
          line: 241,
          column: 4
        },
        end: {
          line: 245,
          column: 7
        }
      }
    },
    fnMap: {
      "0": {
        name: "getInterviewData",
        decl: {
          start: {
            line: 36,
            column: 15
          },
          end: {
            line: 36,
            column: 31
          }
        },
        loc: {
          start: {
            line: 36,
            column: 44
          },
          end: {
            line: 210,
            column: 1
          }
        },
        line: 36
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 131,
            column: 58
          },
          end: {
            line: 131,
            column: 59
          }
        },
        loc: {
          start: {
            line: 131,
            column: 71
          },
          end: {
            line: 137,
            column: 21
          }
        },
        line: 131
      },
      "2": {
        name: "generateStaticParams",
        decl: {
          start: {
            line: 222,
            column: 22
          },
          end: {
            line: 222,
            column: 42
          }
        },
        loc: {
          start: {
            line: 222,
            column: 45
          },
          end: {
            line: 235,
            column: 1
          }
        },
        line: 222
      },
      "3": {
        name: "Page",
        decl: {
          start: {
            line: 237,
            column: 30
          },
          end: {
            line: 237,
            column: 34
          }
        },
        loc: {
          start: {
            line: 237,
            column: 58
          },
          end: {
            line: 246,
            column: 1
          }
        },
        line: 237
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 158,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 158,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "1": {
        loc: {
          start: {
            line: 148,
            column: 22
          },
          end: {
            line: 156,
            column: 17
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 148,
            column: 36
          },
          end: {
            line: 152,
            column: 17
          }
        }, {
          start: {
            line: 152,
            column: 20
          },
          end: {
            line: 156,
            column: 17
          }
        }],
        line: 148
      },
      "2": {
        loc: {
          start: {
            line: 149,
            column: 24
          },
          end: {
            line: 149,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 149,
            column: 24
          },
          end: {
            line: 149,
            column: 48
          }
        }, {
          start: {
            line: 149,
            column: 52
          },
          end: {
            line: 149,
            column: 75
          }
        }, {
          start: {
            line: 149,
            column: 79
          },
          end: {
            line: 149,
            column: 92
          }
        }],
        line: 149
      },
      "3": {
        loc: {
          start: {
            line: 150,
            column: 26
          },
          end: {
            line: 150,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 150,
            column: 26
          },
          end: {
            line: 150,
            column: 51
          }
        }, {
          start: {
            line: 150,
            column: 55
          },
          end: {
            line: 150,
            column: 87
          }
        }, {
          start: {
            line: 150,
            column: 91
          },
          end: {
            line: 150,
            column: 97
          }
        }],
        line: 150
      },
      "4": {
        loc: {
          start: {
            line: 151,
            column: 27
          },
          end: {
            line: 151,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 151,
            column: 27
          },
          end: {
            line: 151,
            column: 53
          }
        }, {
          start: {
            line: 151,
            column: 57
          },
          end: {
            line: 151,
            column: 75
          }
        }],
        line: 151
      },
      "5": {
        loc: {
          start: {
            line: 196,
            column: 18
          },
          end: {
            line: 204,
            column: 13
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 196,
            column: 32
          },
          end: {
            line: 200,
            column: 13
          }
        }, {
          start: {
            line: 200,
            column: 16
          },
          end: {
            line: 204,
            column: 13
          }
        }],
        line: 196
      },
      "6": {
        loc: {
          start: {
            line: 197,
            column: 20
          },
          end: {
            line: 197,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 197,
            column: 20
          },
          end: {
            line: 197,
            column: 44
          }
        }, {
          start: {
            line: 197,
            column: 48
          },
          end: {
            line: 197,
            column: 71
          }
        }, {
          start: {
            line: 197,
            column: 75
          },
          end: {
            line: 197,
            column: 88
          }
        }],
        line: 197
      },
      "7": {
        loc: {
          start: {
            line: 198,
            column: 22
          },
          end: {
            line: 198,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 198,
            column: 22
          },
          end: {
            line: 198,
            column: 47
          }
        }, {
          start: {
            line: 198,
            column: 51
          },
          end: {
            line: 198,
            column: 83
          }
        }, {
          start: {
            line: 198,
            column: 87
          },
          end: {
            line: 198,
            column: 93
          }
        }],
        line: 198
      },
      "8": {
        loc: {
          start: {
            line: 199,
            column: 23
          },
          end: {
            line: 199,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 199,
            column: 23
          },
          end: {
            line: 199,
            column: 49
          }
        }, {
          start: {
            line: 199,
            column: 53
          },
          end: {
            line: 199,
            column: 71
          }
        }],
        line: 199
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0, 0],
      "7": [0, 0, 0],
      "8": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a24e26b4ce3e445c2b5a3695f2a450c369197918"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1cxvgwlm0i = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1cxvgwlm0i();
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// export const dynamic = 'force-dynamic'; // Commented out for static export

async function getInterviewData(id) {
  /* istanbul ignore next */
  cov_1cxvgwlm0i().f[0]++;
  cov_1cxvgwlm0i().s[0]++;
  try {
    /* istanbul ignore next */
    cov_1cxvgwlm0i().s[1]++;
    // Check if this is a mock interview ID and generate appropriate data
    if (id.startsWith('mock-interview-')) {
      /* istanbul ignore next */
      cov_1cxvgwlm0i().b[0][0]++;
      const mockIndex =
      /* istanbul ignore next */
      (cov_1cxvgwlm0i().s[2]++, parseInt(id.split('-')[2]) - 1);
      const mockInterviews =
      /* istanbul ignore next */
      (cov_1cxvgwlm0i().s[3]++, [{
        role: 'Frontend Developer',
        type: 'Technical',
        techstack: ['React', 'TypeScript', 'Next.js', 'Tailwind CSS'],
        questions: ['Explain the concept of React hooks and provide examples', 'What is the virtual DOM and how does it work?', 'How do you handle state management in React applications?']
      }, {
        role: 'Backend Developer',
        type: 'Technical',
        techstack: ['Node.js', 'Express', 'MongoDB', 'JavaScript'],
        questions: ['Explain RESTful API design principles', 'How do you handle database relationships in MongoDB?', 'What are middleware functions in Express.js?']
      }, {
        role: 'Full Stack Developer',
        type: 'Mixed',
        techstack: ['Python', 'Django', 'PostgreSQL', 'Redis'],
        questions: ['Describe your experience with full-stack development', 'How do you optimize database queries?', 'What is your approach to handling user authentication?']
      }, {
        role: 'Software Engineer',
        type: 'Behavioral',
        techstack: ['Vue.js', 'Nuxt.js', 'Vuex', 'SCSS'],
        questions: ['Tell me about a challenging project you worked on', 'How do you handle conflicts in a team environment?', 'Describe a time when you had to learn a new technology quickly']
      }, {
        role: 'DevOps Engineer',
        type: 'Technical',
        techstack: ['Docker', 'Kubernetes', 'AWS', 'Jenkins'],
        questions: ['Explain containerization and its benefits', 'How do you implement CI/CD pipelines?', 'What is Infrastructure as Code?']
      }, {
        role: 'Data Scientist',
        type: 'Technical',
        techstack: ['Python', 'TensorFlow', 'Pandas', 'SQL'],
        questions: ['Explain the difference between supervised and unsupervised learning', 'How do you handle missing data in datasets?', 'What is feature engineering and why is it important?']
      }, {
        role: 'Mobile Developer',
        type: 'Mixed',
        techstack: ['React Native', 'JavaScript', 'Firebase', 'Redux'],
        questions: ['What are the advantages of React Native over native development?', 'How do you handle offline functionality in mobile apps?', 'Describe your experience with mobile app deployment']
      }, {
        role: 'QA Engineer',
        type: 'Technical',
        techstack: ['Selenium', 'Jest', 'Cypress', 'JavaScript'],
        questions: ['What is the difference between unit testing and integration testing?', 'How do you design test cases for a new feature?', 'Explain automation testing strategies you have used']
      }]);
      const selectedMock =
      /* istanbul ignore next */
      (cov_1cxvgwlm0i().s[4]++, mockInterviews[mockIndex % mockInterviews.length]);
      const mockData =
      /* istanbul ignore next */
      (cov_1cxvgwlm0i().s[5]++, {
        interview: {
          id,
          role: selectedMock.role,
          type: selectedMock.type,
          questions: selectedMock.questions.map((q, idx) => {
            /* istanbul ignore next */
            cov_1cxvgwlm0i().f[1]++;
            cov_1cxvgwlm0i().s[6]++;
            return {
              id: `${idx + 1}`,
              content: q,
              type: selectedMock.type.toLowerCase(),
              difficulty: 'medium',
              techStack: selectedMock.techstack
            };
          }),
          techstack: selectedMock.techstack,
          createdAt: new Date().toISOString()
        },
        feedback: null
      });
      const currentUser =
      /* istanbul ignore next */
      (cov_1cxvgwlm0i().s[7]++, await
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _auth.
      /* istanbul ignore next */
      getCurrentUser)());
      /* istanbul ignore next */
      cov_1cxvgwlm0i().s[8]++;
      return {
        ...mockData,
        user: currentUser ?
        /* istanbul ignore next */
        (cov_1cxvgwlm0i().b[1][0]++, {
          id:
          /* istanbul ignore next */
          (cov_1cxvgwlm0i().b[2][0]++, currentUser.uid) ||
          /* istanbul ignore next */
          (cov_1cxvgwlm0i().b[2][1]++, currentUser.id) ||
          /* istanbul ignore next */
          (cov_1cxvgwlm0i().b[2][2]++, 'static-user'),
          name:
          /* istanbul ignore next */
          (cov_1cxvgwlm0i().b[3][0]++, currentUser.name) ||
          /* istanbul ignore next */
          (cov_1cxvgwlm0i().b[3][1]++, currentUser.displayName) ||
          /* istanbul ignore next */
          (cov_1cxvgwlm0i().b[3][2]++, 'User'),
          email:
          /* istanbul ignore next */
          (cov_1cxvgwlm0i().b[4][0]++, currentUser.email) ||
          /* istanbul ignore next */
          (cov_1cxvgwlm0i().b[4][1]++, 'user@example.com')
        }) :
        /* istanbul ignore next */
        (cov_1cxvgwlm0i().b[1][1]++, {
          id: 'static-user',
          name: 'User',
          email: 'user@example.com'
        })
      };
    } else
    /* istanbul ignore next */
    {
      cov_1cxvgwlm0i().b[0][1]++;
    }

    // In a real app, you would fetch this data from the database
    // const response = await fetch(`/api/interview/${id}`);
    // const result = await response.json();

    // Default mock data for non-mock interviews
    const mockData =
    /* istanbul ignore next */
    (cov_1cxvgwlm0i().s[9]++, {
      interview: {
        id,
        role: 'Developer',
        type: 'Technical',
        questions: [{
          id: '1',
          content: 'Explain the concept of React hooks',
          type: 'technical',
          difficulty: 'medium',
          techStack: ['React', 'JavaScript']
        }, {
          id: '2',
          content: 'What is the virtual DOM?',
          type: 'technical',
          difficulty: 'easy',
          techStack: ['React', 'JavaScript']
        }],
        techstack: ['JavaScript', 'React', 'Node.js'],
        createdAt: new Date().toISOString()
      },
      feedback: null
    });
    const currentUser =
    /* istanbul ignore next */
    (cov_1cxvgwlm0i().s[10]++, await
    /* istanbul ignore next */
    (0,
    /* istanbul ignore next */
    _auth.
    /* istanbul ignore next */
    getCurrentUser)());
    /* istanbul ignore next */
    cov_1cxvgwlm0i().s[11]++;
    return {
      ...mockData,
      user: currentUser ?
      /* istanbul ignore next */
      (cov_1cxvgwlm0i().b[5][0]++, {
        id:
        /* istanbul ignore next */
        (cov_1cxvgwlm0i().b[6][0]++, currentUser.uid) ||
        /* istanbul ignore next */
        (cov_1cxvgwlm0i().b[6][1]++, currentUser.id) ||
        /* istanbul ignore next */
        (cov_1cxvgwlm0i().b[6][2]++, 'static-user'),
        name:
        /* istanbul ignore next */
        (cov_1cxvgwlm0i().b[7][0]++, currentUser.name) ||
        /* istanbul ignore next */
        (cov_1cxvgwlm0i().b[7][1]++, currentUser.displayName) ||
        /* istanbul ignore next */
        (cov_1cxvgwlm0i().b[7][2]++, 'User'),
        email:
        /* istanbul ignore next */
        (cov_1cxvgwlm0i().b[8][0]++, currentUser.email) ||
        /* istanbul ignore next */
        (cov_1cxvgwlm0i().b[8][1]++, 'user@example.com')
      }) :
      /* istanbul ignore next */
      (cov_1cxvgwlm0i().b[5][1]++, {
        id: 'static-user',
        name: 'User',
        email: 'user@example.com'
      })
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_1cxvgwlm0i().s[12]++;
    console.error('Error fetching interview data:', error);
    /* istanbul ignore next */
    cov_1cxvgwlm0i().s[13]++;
    throw error;
  }
}

// import { Metadata } from 'next';

async function generateStaticParams() {
  /* istanbul ignore next */
  cov_1cxvgwlm0i().f[2]++;
  cov_1cxvgwlm0i().s[14]++;
  // Generate static params for mock interviews only
  // In production, you'd fetch actual interview IDs from the database
  return [{
    id: 'mock-interview-1'
  }, {
    id: 'mock-interview-2'
  }, {
    id: 'mock-interview-3'
  }, {
    id: 'mock-interview-4'
  }, {
    id: 'mock-interview-5'
  }, {
    id: 'mock-interview-6'
  }, {
    id: 'mock-interview-7'
  }, {
    id: 'mock-interview-8'
  }];
}
async function Page({
  params
}) {
  /* istanbul ignore next */
  cov_1cxvgwlm0i().f[3]++;
  const {
    id
  } =
  /* istanbul ignore next */
  (cov_1cxvgwlm0i().s[15]++, await params);
  const interviewData =
  /* istanbul ignore next */
  (cov_1cxvgwlm0i().s[16]++, await getInterviewData(id));
  /* istanbul ignore next */
  cov_1cxvgwlm0i().s[17]++;
  return /*#__PURE__*/ /* istanbul ignore next */(0, _jsxRuntime.jsx)(
  /* istanbul ignore next */
  _InterviewClient.
  /* istanbul ignore next */
  default,
  /* istanbul ignore next */
  {
    interview: interviewData.interview,
    feedback: interviewData.feedback,
    user: interviewData.user
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,