4f422ef6b468a2c77a799476e43f0d4d
"use strict";

/**
 * Firestore Hooks Compatibility Layer
 *
 * Mock implementations of Firestore hooks for backward compatibility
 * Components using these should be migrated to Azure Cosmos DB
 */
/* istanbul ignore next */
function cov_1rxokdqeq3() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/hooks/useFirestore.ts";
  var hash = "61d948774102e42a8b91aff0f9cce070334c20a4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/hooks/useFirestore.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 62
        }
      },
      "1": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 36
        }
      },
      "2": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 10,
          column: 38
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 32
        }
      },
      "4": {
        start: {
          line: 18,
          column: 38
        },
        end: {
          line: 18,
          column: 65
        }
      },
      "5": {
        start: {
          line: 19,
          column: 34
        },
        end: {
          line: 19,
          column: 61
        }
      },
      "6": {
        start: {
          line: 20,
          column: 30
        },
        end: {
          line: 20,
          column: 57
        }
      },
      "7": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 38,
          column: 22
        }
      },
      "8": {
        start: {
          line: 23,
          column: 22
        },
        end: {
          line: 36,
          column: 15
        }
      },
      "9": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 34,
          column: 13
        }
      },
      "10": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 33,
          column: 19
        }
      },
      "11": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 35,
          column: 30
        }
      },
      "12": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 41
        }
      },
      "13": {
        start: {
          line: 37,
          column: 21
        },
        end: {
          line: 37,
          column: 40
        }
      },
      "14": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 49,
          column: 6
        }
      },
      "15": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 47,
          column: 13
        }
      },
      "16": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 46,
          column: 125
        }
      },
      "17": {
        start: {
          line: 57,
          column: 40
        },
        end: {
          line: 57,
          column: 65
        }
      },
      "18": {
        start: {
          line: 58,
          column: 34
        },
        end: {
          line: 58,
          column: 61
        }
      },
      "19": {
        start: {
          line: 59,
          column: 30
        },
        end: {
          line: 59,
          column: 57
        }
      },
      "20": {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 79,
          column: 17
        }
      },
      "21": {
        start: {
          line: 62,
          column: 22
        },
        end: {
          line: 77,
          column: 15
        }
      },
      "22": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 75,
          column: 13
        }
      },
      "23": {
        start: {
          line: 65,
          column: 16
        },
        end: {
          line: 74,
          column: 19
        }
      },
      "24": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 30
        }
      },
      "25": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 41
        }
      },
      "26": {
        start: {
          line: 78,
          column: 21
        },
        end: {
          line: 78,
          column: 40
        }
      },
      "27": {
        start: {
          line: 80,
          column: 4
        },
        end: {
          line: 84,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "useInterview",
        decl: {
          start: {
            line: 17,
            column: 9
          },
          end: {
            line: 17,
            column: 21
          }
        },
        loc: {
          start: {
            line: 17,
            column: 35
          },
          end: {
            line: 50,
            column: 1
          }
        },
        line: 17
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 21,
            column: 27
          },
          end: {
            line: 21,
            column: 28
          }
        },
        loc: {
          start: {
            line: 21,
            column: 33
          },
          end: {
            line: 38,
            column: 5
          }
        },
        line: 21
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 23,
            column: 33
          },
          end: {
            line: 23,
            column: 34
          }
        },
        loc: {
          start: {
            line: 23,
            column: 39
          },
          end: {
            line: 36,
            column: 9
          }
        },
        line: 23
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 37,
            column: 15
          },
          end: {
            line: 37,
            column: 16
          }
        },
        loc: {
          start: {
            line: 37,
            column: 21
          },
          end: {
            line: 37,
            column: 40
          }
        },
        line: 37
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 43,
            column: 25
          },
          end: {
            line: 43,
            column: 26
          }
        },
        loc: {
          start: {
            line: 43,
            column: 44
          },
          end: {
            line: 48,
            column: 9
          }
        },
        line: 43
      },
      "5": {
        name: "useInterviews",
        decl: {
          start: {
            line: 56,
            column: 9
          },
          end: {
            line: 56,
            column: 22
          }
        },
        loc: {
          start: {
            line: 56,
            column: 31
          },
          end: {
            line: 85,
            column: 1
          }
        },
        line: 56
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 60,
            column: 27
          },
          end: {
            line: 60,
            column: 28
          }
        },
        loc: {
          start: {
            line: 60,
            column: 33
          },
          end: {
            line: 79,
            column: 5
          }
        },
        line: 60
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 62,
            column: 33
          },
          end: {
            line: 62,
            column: 34
          }
        },
        loc: {
          start: {
            line: 62,
            column: 39
          },
          end: {
            line: 77,
            column: 9
          }
        },
        line: 62
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 78,
            column: 15
          },
          end: {
            line: 78,
            column: 16
          }
        },
        loc: {
          start: {
            line: 78,
            column: 21
          },
          end: {
            line: 78,
            column: 40
          }
        },
        line: 78
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 24,
            column: 12
          },
          end: {
            line: 34,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 12
          },
          end: {
            line: 34,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "1": {
        loc: {
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 47,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 47,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "2": {
        loc: {
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 75,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 75,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/hooks/useFirestore.ts",
      mappings: ";AAAA;;;;;GAKG;;AAoBH,oCAoCC;AAOD,sCAgCC;AA7FD,iCAA4C;AAa5C;;;;GAIG;AACH,SAAgB,YAAY,CAAC,WAAmB;IAC9C,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,IAAA,gBAAQ,EAAmB,IAAI,CAAC,CAAC;IACnE,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,IAAA,gBAAQ,EAAC,IAAI,CAAC,CAAC;IAC7C,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,IAAA,gBAAQ,EAAgB,IAAI,CAAC,CAAC;IAExD,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,wBAAwB;QACxB,MAAM,KAAK,GAAG,UAAU,CAAC,GAAG,EAAE;YAC5B,IAAI,WAAW,EAAE,CAAC;gBAChB,mBAAmB;gBACnB,YAAY,CAAC;oBACX,EAAE,EAAE,WAAW;oBACf,MAAM,EAAE,WAAW;oBACnB,SAAS,EAAE,CAAC,0BAA0B,EAAE,sBAAsB,CAAC;oBAC/D,OAAO,EAAE,CAAC,2BAA2B,EAAE,gBAAgB,CAAC;oBACxD,SAAS,EAAE,IAAI,IAAI,EAAE;oBACrB,SAAS,EAAE,IAAI,IAAI,EAAE;iBACtB,CAAC,CAAC;YACL,CAAC;YACD,UAAU,CAAC,KAAK,CAAC,CAAC;QACpB,CAAC,EAAE,GAAG,CAAC,CAAC;QAER,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC;IAElB,OAAO;QACL,SAAS;QACT,OAAO;QACP,KAAK;QACL,eAAe,EAAE,KAAK,EAAE,OAA2B,EAAE,EAAE;YACrD,cAAc;YACd,IAAI,SAAS,EAAE,CAAC;gBACd,YAAY,+CAAM,SAAS,GAAK,OAAO,KAAE,SAAS,EAAE,IAAI,IAAI,EAAE,IAAG,CAAC;YACpE,CAAC;QACH,CAAC;KACF,CAAC;AACJ,CAAC;AAED;;;;GAIG;AACH,SAAgB,aAAa,CAAC,MAAc;IAC1C,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,IAAA,gBAAQ,EAAc,EAAE,CAAC,CAAC;IAC9D,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,IAAA,gBAAQ,EAAC,IAAI,CAAC,CAAC;IAC7C,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,IAAA,gBAAQ,EAAgB,IAAI,CAAC,CAAC;IAExD,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,wBAAwB;QACxB,MAAM,KAAK,GAAG,UAAU,CAAC,GAAG,EAAE;YAC5B,IAAI,MAAM,EAAE,CAAC;gBACX,mBAAmB;gBACnB,aAAa,CAAC;oBACZ;wBACE,EAAE,EAAE,aAAa;wBACjB,MAAM;wBACN,SAAS,EAAE,CAAC,wBAAwB,CAAC;wBACrC,OAAO,EAAE,CAAC,0BAA0B,CAAC;wBACrC,SAAS,EAAE,IAAI,IAAI,EAAE;wBACrB,SAAS,EAAE,IAAI,IAAI,EAAE;qBACtB;iBACF,CAAC,CAAC;YACL,CAAC;YACD,UAAU,CAAC,KAAK,CAAC,CAAC;QACpB,CAAC,EAAE,GAAG,CAAC,CAAC;QAER,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;IAEb,OAAO;QACL,UAAU;QACV,OAAO;QACP,KAAK;KACN,CAAC;AACJ,CAAC",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/hooks/useFirestore.ts"],
      sourcesContent: ["/**\n * Firestore Hooks Compatibility Layer\n * \n * Mock implementations of Firestore hooks for backward compatibility\n * Components using these should be migrated to Azure Cosmos DB\n */\n\nimport { useState, useEffect } from 'react';\n\n// Mock interview data structure\ninterface Interview {\n  id: string;\n  userId: string;\n  questions: string[];\n  answers: string[];\n  feedback?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n/**\n * Mock useInterview hook\n * @param interviewId - Interview ID to fetch\n * @returns Mock interview data\n */\nexport function useInterview(interviewId: string) {\n  const [interview, setInterview] = useState<Interview | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    // Mock loading behavior\n    const timer = setTimeout(() => {\n      if (interviewId) {\n        // Return mock data\n        setInterview({\n          id: interviewId,\n          userId: 'mock-user',\n          questions: ['What is your experience?', 'What are your goals?'],\n          answers: ['I have 5 years experience', 'I want to grow'],\n          createdAt: new Date(),\n          updatedAt: new Date()\n        });\n      }\n      setLoading(false);\n    }, 500);\n\n    return () => clearTimeout(timer);\n  }, [interviewId]);\n\n  return {\n    interview,\n    loading,\n    error,\n    updateInterview: async (updates: Partial<Interview>) => {\n      // Mock update\n      if (interview) {\n        setInterview({ ...interview, ...updates, updatedAt: new Date() });\n      }\n    }\n  };\n}\n\n/**\n * Mock useInterviews hook\n * @param userId - User ID to fetch interviews for\n * @returns Mock interviews list\n */\nexport function useInterviews(userId: string) {\n  const [interviews, setInterviews] = useState<Interview[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    // Mock loading behavior\n    const timer = setTimeout(() => {\n      if (userId) {\n        // Return mock data\n        setInterviews([\n          {\n            id: 'interview-1',\n            userId,\n            questions: ['Tell me about yourself'],\n            answers: ['I am a software engineer'],\n            createdAt: new Date(),\n            updatedAt: new Date()\n          }\n        ]);\n      }\n      setLoading(false);\n    }, 500);\n\n    return () => clearTimeout(timer);\n  }, [userId]);\n\n  return {\n    interviews,\n    loading,\n    error\n  };\n}\n\nexport type { Interview };\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "61d948774102e42a8b91aff0f9cce070334c20a4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1rxokdqeq3 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1rxokdqeq3();
cov_1rxokdqeq3().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1rxokdqeq3().s[1]++;
exports.useInterview = useInterview;
/* istanbul ignore next */
cov_1rxokdqeq3().s[2]++;
exports.useInterviews = useInterviews;
const react_1 =
/* istanbul ignore next */
(cov_1rxokdqeq3().s[3]++, require("react"));
/**
 * Mock useInterview hook
 * @param interviewId - Interview ID to fetch
 * @returns Mock interview data
 */
function useInterview(interviewId) {
  /* istanbul ignore next */
  cov_1rxokdqeq3().f[0]++;
  const [interview, setInterview] =
  /* istanbul ignore next */
  (cov_1rxokdqeq3().s[4]++, (0, react_1.useState)(null));
  const [loading, setLoading] =
  /* istanbul ignore next */
  (cov_1rxokdqeq3().s[5]++, (0, react_1.useState)(true));
  const [error, setError] =
  /* istanbul ignore next */
  (cov_1rxokdqeq3().s[6]++, (0, react_1.useState)(null));
  /* istanbul ignore next */
  cov_1rxokdqeq3().s[7]++;
  (0, react_1.useEffect)(() => {
    /* istanbul ignore next */
    cov_1rxokdqeq3().f[1]++;
    // Mock loading behavior
    const timer =
    /* istanbul ignore next */
    (cov_1rxokdqeq3().s[8]++, setTimeout(() => {
      /* istanbul ignore next */
      cov_1rxokdqeq3().f[2]++;
      cov_1rxokdqeq3().s[9]++;
      if (interviewId) {
        /* istanbul ignore next */
        cov_1rxokdqeq3().b[0][0]++;
        cov_1rxokdqeq3().s[10]++;
        // Return mock data
        setInterview({
          id: interviewId,
          userId: 'mock-user',
          questions: ['What is your experience?', 'What are your goals?'],
          answers: ['I have 5 years experience', 'I want to grow'],
          createdAt: new Date(),
          updatedAt: new Date()
        });
      } else
      /* istanbul ignore next */
      {
        cov_1rxokdqeq3().b[0][1]++;
      }
      cov_1rxokdqeq3().s[11]++;
      setLoading(false);
    }, 500));
    /* istanbul ignore next */
    cov_1rxokdqeq3().s[12]++;
    return () => {
      /* istanbul ignore next */
      cov_1rxokdqeq3().f[3]++;
      cov_1rxokdqeq3().s[13]++;
      return clearTimeout(timer);
    };
  }, [interviewId]);
  /* istanbul ignore next */
  cov_1rxokdqeq3().s[14]++;
  return {
    interview,
    loading,
    error,
    updateInterview: async updates => {
      /* istanbul ignore next */
      cov_1rxokdqeq3().f[4]++;
      cov_1rxokdqeq3().s[15]++;
      // Mock update
      if (interview) {
        /* istanbul ignore next */
        cov_1rxokdqeq3().b[1][0]++;
        cov_1rxokdqeq3().s[16]++;
        setInterview(Object.assign(Object.assign(Object.assign({}, interview), updates), {
          updatedAt: new Date()
        }));
      } else
      /* istanbul ignore next */
      {
        cov_1rxokdqeq3().b[1][1]++;
      }
    }
  };
}
/**
 * Mock useInterviews hook
 * @param userId - User ID to fetch interviews for
 * @returns Mock interviews list
 */
function useInterviews(userId) {
  /* istanbul ignore next */
  cov_1rxokdqeq3().f[5]++;
  const [interviews, setInterviews] =
  /* istanbul ignore next */
  (cov_1rxokdqeq3().s[17]++, (0, react_1.useState)([]));
  const [loading, setLoading] =
  /* istanbul ignore next */
  (cov_1rxokdqeq3().s[18]++, (0, react_1.useState)(true));
  const [error, setError] =
  /* istanbul ignore next */
  (cov_1rxokdqeq3().s[19]++, (0, react_1.useState)(null));
  /* istanbul ignore next */
  cov_1rxokdqeq3().s[20]++;
  (0, react_1.useEffect)(() => {
    /* istanbul ignore next */
    cov_1rxokdqeq3().f[6]++;
    // Mock loading behavior
    const timer =
    /* istanbul ignore next */
    (cov_1rxokdqeq3().s[21]++, setTimeout(() => {
      /* istanbul ignore next */
      cov_1rxokdqeq3().f[7]++;
      cov_1rxokdqeq3().s[22]++;
      if (userId) {
        /* istanbul ignore next */
        cov_1rxokdqeq3().b[2][0]++;
        cov_1rxokdqeq3().s[23]++;
        // Return mock data
        setInterviews([{
          id: 'interview-1',
          userId,
          questions: ['Tell me about yourself'],
          answers: ['I am a software engineer'],
          createdAt: new Date(),
          updatedAt: new Date()
        }]);
      } else
      /* istanbul ignore next */
      {
        cov_1rxokdqeq3().b[2][1]++;
      }
      cov_1rxokdqeq3().s[24]++;
      setLoading(false);
    }, 500));
    /* istanbul ignore next */
    cov_1rxokdqeq3().s[25]++;
    return () => {
      /* istanbul ignore next */
      cov_1rxokdqeq3().f[8]++;
      cov_1rxokdqeq3().s[26]++;
      return clearTimeout(timer);
    };
  }, [userId]);
  /* istanbul ignore next */
  cov_1rxokdqeq3().s[27]++;
  return {
    interviews,
    loading,
    error
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,