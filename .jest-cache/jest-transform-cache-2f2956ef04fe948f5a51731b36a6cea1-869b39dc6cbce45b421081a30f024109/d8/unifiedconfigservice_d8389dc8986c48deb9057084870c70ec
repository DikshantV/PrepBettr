c53b955357738cf1450b20c82f38be41
"use strict";
/**
 * Unified Configuration Service
 *
 * Eliminates configuration drift by providing a single source of truth
 * with Azure App Configuration as primary and Firebase Remote Config
 * for client-side distribution.
 *
 * Key features:
 * - Single API for all configuration needs
 * - Automatic Azure → Firebase synchronization
 * - Two-layer caching with drift detection
 * - Version control and rollback capabilities
 * - Edge-runtime compatible for Next.js middleware
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.unifiedConfigService = exports.CONFIG_DEFAULTS = exports.CONFIG_SCHEMA = void 0;
exports.useUnifiedConfig = useUnifiedConfig;
const app_configuration_1 = require("@azure/app-configuration");
const identity_1 = require("@azure/identity");
const errors_1 = require("@/lib/errors");
const azure_cosmos_service_1 = require("./azure-cosmos-service");
const config_monitoring_service_1 = require("./config-monitoring-service");
// ===== CONFIGURATION SCHEMA =====
exports.CONFIG_SCHEMA = {
    // Core application settings
    'core.app.environment': { required: true, type: 'string', enum: ['development', 'staging', 'production'] },
    'core.app.version': { required: true, type: 'string' },
    'core.app.debug': { required: false, type: 'boolean' },
    'core.app.maintenanceMode': { required: false, type: 'boolean' },
    // Feature flags (synced to Firebase for client access)
    'features.autoApplyAzure': { required: false, type: 'boolean' },
    'features.portalIntegration': { required: false, type: 'boolean' },
    'features.voiceInterview': { required: false, type: 'boolean' },
    'features.premiumFeatures': { required: false, type: 'boolean' },
    'features.newUI': { required: false, type: 'boolean' },
    // Cosmos DB configuration
    'data.cosmos.maxRUPerSecond': { required: false, type: 'number', min: 400, max: 100000 },
    'data.cosmos.batchSize': { required: false, type: 'number', min: 10, max: 1000 },
    'data.cosmos.connectionTimeout': { required: false, type: 'number', min: 1000, max: 30000 },
    'data.cosmos.retryAttempts': { required: false, type: 'number', min: 1, max: 10 },
    // Usage limits and quotas
    'quotas.freeInterviews': { required: false, type: 'number', min: 0, max: 100 },
    'quotas.freeResumes': { required: false, type: 'number', min: 0, max: 50 },
    'quotas.premiumInterviews': { required: false, type: 'number', min: 0, max: 10000 },
    'quotas.premiumResumes': { required: false, type: 'number', min: 0, max: 1000 },
    // Authentication settings (Firebase client-side)
    'auth.firebase.sessionTimeout': { required: false, type: 'number', min: 300, max: 86400 },
    'auth.firebase.maxAttempts': { required: false, type: 'number', min: 3, max: 10 },
    'auth.firebase.lockoutDuration': { required: false, type: 'number', min: 300, max: 3600 },
    // Performance and monitoring
    'perf.cacheTimeout': { required: false, type: 'number', min: 30, max: 3600 },
    'perf.maxCacheSize': { required: false, type: 'number', min: 100, max: 10000 },
    'perf.enableMetrics': { required: false, type: 'boolean' }
};
// Default values with metadata
exports.CONFIG_DEFAULTS = {
    'core.app.environment': {
        value: 'development',
        type: 'string',
        metadata: { source: 'azure', version: '1.0.0', lastModified: new Date(), hash: '' }
    },
    'core.app.debug': {
        value: false,
        type: 'boolean',
        metadata: { source: 'azure', version: '1.0.0', lastModified: new Date(), hash: '' }
    },
    'features.autoApplyAzure': {
        value: false,
        type: 'boolean',
        metadata: { source: 'azure', version: '1.0.0', lastModified: new Date(), hash: '', syncToFirebase: true }
    },
    'features.voiceInterview': {
        value: true,
        type: 'boolean',
        metadata: { source: 'azure', version: '1.0.0', lastModified: new Date(), hash: '', syncToFirebase: true }
    },
    'quotas.freeInterviews': {
        value: 3,
        type: 'number',
        metadata: { source: 'azure', version: '1.0.0', lastModified: new Date(), hash: '' }
    },
    'quotas.freeResumes': {
        value: 2,
        type: 'number',
        metadata: { source: 'azure', version: '1.0.0', lastModified: new Date(), hash: '' }
    }
};
// ===== UNIFIED CONFIGURATION SERVICE =====
class UnifiedConfigService {
    constructor() {
        this.azureClient = null;
        this.cache = new Map();
        this.initialized = false;
        this.driftCache = new Map();
        this.CACHE_TTL = 5 * 60 * 1000; // 5 minutes
        this.DRIFT_CHECK_INTERVAL = 10 * 60 * 1000; // 10 minutes
        this.setupDriftDetection();
    }
    // ===== INITIALIZATION =====
    async initialize() {
        if (this.initialized)
            return;
        try {
            const connectionString = process.env.AZURE_APP_CONFIG_CONNECTION_STRING;
            const endpoint = process.env.AZURE_APP_CONFIG_ENDPOINT;
            if (connectionString) {
                this.azureClient = new app_configuration_1.AppConfigurationClient(connectionString);
            }
            else if (endpoint) {
                const credential = new identity_1.DefaultAzureCredential();
                this.azureClient = new app_configuration_1.AppConfigurationClient(endpoint, credential);
            }
            else {
                console.warn('⚠️ Azure App Configuration not configured - using defaults only');
                this.initialized = true;
                return;
            }
            // Test connection
            const iterator = this.azureClient.listConfigurationSettings();
            await iterator.next(); // Just get the first result to test connection
            this.initialized = true;
            console.log('✅ Unified Configuration Service initialized');
        }
        catch (error) {
            console.error('❌ Failed to initialize Unified Config Service:', error);
            (0, errors_1.logServerError)(error, { service: 'unified-config', action: 'initialize' });
            // Continue with defaults only
            this.initialized = true;
        }
    }
    // ===== CORE CONFIGURATION METHODS =====
    /**
     * Get configuration value with intelligent fallback
     */
    async get(key, defaultValue) {
        var _a;
        const startTime = Date.now();
        let success = true;
        await this.initialize();
        try {
            // Check cache first
            const cached = this.getCachedValue(key);
            if (cached) {
                config_monitoring_service_1.configMonitoringService.trackCacheHit(true, key);
                const latency = Date.now() - startTime;
                config_monitoring_service_1.configMonitoringService.trackConfigRequest(key, 'get', latency, true);
                return cached.value;
            }
            config_monitoring_service_1.configMonitoringService.trackCacheHit(false, key);
            // Try Azure App Configuration first
            const azureValue = await this.getFromAzure(key);
            if (azureValue !== null) {
                const latency = Date.now() - startTime;
                config_monitoring_service_1.configMonitoringService.trackConfigRequest(key, 'get', latency, true);
                return azureValue;
            }
            // Check if it's a client-only config that should come from Firebase
            const schema = exports.CONFIG_SCHEMA[key];
            const defaultConfig = exports.CONFIG_DEFAULTS[key];
            if ((_a = defaultConfig === null || defaultConfig === void 0 ? void 0 : defaultConfig.metadata) === null || _a === void 0 ? void 0 : _a.clientOnly) {
                const firebaseValue = await this.getFromFirebase(key);
                if (firebaseValue !== null) {
                    const latency = Date.now() - startTime;
                    config_monitoring_service_1.configMonitoringService.trackConfigRequest(key, 'get', latency, true);
                    return firebaseValue;
                }
            }
            // Return default value or schema default
            const result = defaultValue !== undefined ? defaultValue :
                (defaultConfig ? defaultConfig.value : undefined);
            const latency = Date.now() - startTime;
            config_monitoring_service_1.configMonitoringService.trackConfigRequest(key, 'get', latency, true);
            return result;
        }
        catch (error) {
            success = false;
            console.error(`Error getting config ${key}:`, error);
            const latency = Date.now() - startTime;
            config_monitoring_service_1.configMonitoringService.trackConfigRequest(key, 'get', latency, false);
            return defaultValue;
        }
    }
    /**
     * Set configuration value with validation and audit
     */
    async set(key, value, options) {
        const startTime = Date.now();
        let success = true;
        await this.initialize();
        const { environment = 'default', syncToFirebase = false, version = '1.0.0', changedBy = 'system' } = options || {};
        try {
            // Validate against schema
            this.validateConfigValue(key, value);
            // Get previous value for audit
            const previousValue = await this.get(key);
            // Create config value with metadata
            const configValue = {
                value,
                type: this.inferType(value),
                metadata: {
                    source: 'azure',
                    version,
                    lastModified: new Date(),
                    hash: this.calculateHash(value),
                    syncToFirebase
                }
            };
            // Store in Azure App Configuration
            if (this.azureClient) {
                await this.setInAzure(key, configValue, environment);
            }
            // Sync to Firebase if requested
            if (syncToFirebase) {
                await this.syncToFirebase(key, configValue);
            }
            // Clear cache
            this.cache.delete(key);
            // Record audit entry
            await this.recordAuditEntry({
                id: `audit_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
                key,
                oldValue: previousValue,
                newValue: value,
                version,
                source: 'unified',
                changedBy,
                timestamp: new Date(),
                rollbackable: true,
                metadata: { environment, syncToFirebase }
            });
            // Track configuration change
            config_monitoring_service_1.configMonitoringService.trackConfigChange(key, previousValue, value, changedBy, environment);
            const latency = Date.now() - startTime;
            config_monitoring_service_1.configMonitoringService.trackConfigRequest(key, 'set', latency, true);
            console.log(`✅ Config updated: ${key} = ${JSON.stringify(value)}`);
        }
        catch (error) {
            success = false;
            const latency = Date.now() - startTime;
            config_monitoring_service_1.configMonitoringService.trackConfigRequest(key, 'set', latency, false);
            console.error(`❌ Failed to set config ${key}:`, error);
            throw error;
        }
    }
    /**
     * Get all configuration values with optional prefix filter
     */
    async getAll(prefix) {
        var _a, e_1, _b, _c;
        await this.initialize();
        const result = {};
        try {
            // Get from Azure App Configuration
            if (this.azureClient) {
                const settings = this.azureClient.listConfigurationSettings({
                    keyFilter: prefix ? `${prefix}*` : undefined
                });
                try {
                    for (var _d = true, settings_1 = __asyncValues(settings), settings_1_1; settings_1_1 = await settings_1.next(), _a = settings_1_1.done, !_a; _d = true) {
                        _c = settings_1_1.value;
                        _d = false;
                        const setting = _c;
                        if (setting.key && setting.value !== undefined) {
                            const parsedValue = this.parseConfigurationSetting(setting);
                            result[setting.key] = parsedValue.value;
                            // Cache the value
                            this.setCachedValue(setting.key, parsedValue, setting.etag);
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (!_d && !_a && (_b = settings_1.return)) await _b.call(settings_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            // Add defaults for missing keys
            Object.entries(exports.CONFIG_DEFAULTS).forEach(([key, defaultConfig]) => {
                if (!prefix || key.startsWith(prefix)) {
                    if (result[key] === undefined) {
                        result[key] = defaultConfig.value;
                    }
                }
            });
            return result;
        }
        catch (error) {
            console.error('Error getting all configs:', error);
            // Return defaults only on error
            const defaults = {};
            Object.entries(exports.CONFIG_DEFAULTS).forEach(([key, defaultConfig]) => {
                if (!prefix || key.startsWith(prefix)) {
                    defaults[key] = defaultConfig.value;
                }
            });
            return defaults;
        }
    }
    /**
     * Refresh cache and check for drift
     */
    async refresh() {
        this.cache.clear();
        this.driftCache.clear();
        await this.checkForDrift();
    }
    /**
     * Subscribe to configuration changes (polling-based)
     */
    subscribe(key, callback) {
        let lastValue = undefined;
        let isActive = true;
        const poll = async () => {
            if (!isActive)
                return;
            try {
                const currentValue = await this.get(key);
                if (JSON.stringify(currentValue) !== JSON.stringify(lastValue)) {
                    lastValue = currentValue;
                    callback(currentValue);
                }
            }
            catch (error) {
                console.error(`Config subscription error for ${key}:`, error);
            }
        };
        // Poll every 30 seconds
        const interval = setInterval(poll, 30000);
        // Initial call
        poll();
        return () => {
            isActive = false;
            clearInterval(interval);
        };
    }
    // ===== DRIFT DETECTION =====
    async checkForDrift() {
        const driftResults = [];
        try {
            // Get all configs that should sync to Firebase
            const allConfigs = await this.getAll();
            const syncableKeys = Object.keys(allConfigs).filter(key => {
                var _a;
                const defaultConfig = exports.CONFIG_DEFAULTS[key];
                return (_a = defaultConfig === null || defaultConfig === void 0 ? void 0 : defaultConfig.metadata) === null || _a === void 0 ? void 0 : _a.syncToFirebase;
            });
            for (const key of syncableKeys) {
                const drift = await this.checkKeyForDrift(key);
                if (drift) {
                    driftResults.push(drift);
                    this.driftCache.set(key, drift);
                }
            }
            // Track drift detection metrics
            const driftedKeys = driftResults.filter(d => d.drifted).map(d => d.key);
            config_monitoring_service_1.configMonitoringService.trackDriftDetection(driftedKeys, syncableKeys.length);
            if (driftResults.length > 0) {
                console.warn(`⚠️ Configuration drift detected in ${driftResults.length} keys`);
                // Record drift event for monitoring
                await this.recordDriftEvent(driftResults);
            }
            return driftResults;
        }
        catch (error) {
            console.error('Error checking for drift:', error);
            return [];
        }
    }
    async checkKeyForDrift(key) {
        try {
            const [azureValue, firebaseValue] = await Promise.all([
                this.getFromAzure(key),
                this.getFromFirebase(key)
            ]);
            if (azureValue === null && firebaseValue === null) {
                return null; // Both missing, no drift
            }
            const azureHash = this.calculateHash(azureValue);
            const firebaseHash = this.calculateHash(firebaseValue);
            const drifted = azureHash !== firebaseHash;
            return {
                key,
                azureValue,
                firebaseValue,
                azureHash,
                firebaseHash,
                drifted,
                lastChecked: new Date()
            };
        }
        catch (error) {
            console.error(`Error checking drift for ${key}:`, error);
            return null;
        }
    }
    // ===== ROLLBACK FUNCTIONALITY =====
    async revert(versionId) {
        var _a;
        try {
            // Get audit entry
            const auditEntry = await this.getAuditEntry(versionId);
            if (!auditEntry || !auditEntry.rollbackable) {
                throw new Error(`Version ${versionId} not found or not rollbackable`);
            }
            // Restore previous value
            await this.set(auditEntry.key, auditEntry.oldValue, {
                version: `rollback_${versionId}`,
                changedBy: 'rollback-system',
                syncToFirebase: (_a = auditEntry.metadata) === null || _a === void 0 ? void 0 : _a.syncToFirebase
            });
            console.log(`✅ Successfully reverted ${auditEntry.key} to version ${versionId}`);
        }
        catch (error) {
            console.error(`❌ Failed to revert to version ${versionId}:`, error);
            throw error;
        }
    }
    // ===== PRIVATE HELPER METHODS =====
    async getFromAzure(key) {
        if (!this.azureClient)
            return null;
        try {
            const setting = await this.azureClient.getConfigurationSetting({ key });
            if (!setting || setting.value === undefined) {
                return null;
            }
            const parsedValue = this.parseConfigurationSetting(setting);
            this.setCachedValue(key, parsedValue, setting.etag);
            return parsedValue.value;
        }
        catch (error) {
            if (error.statusCode === 404) {
                return null;
            }
            throw error;
        }
    }
    async getFromFirebase(key) {
        try {
            // Import Firebase Remote Config dynamically
            const { getRemoteConfig, getValue } = await Promise.resolve().then(() => __importStar(require('firebase/remote-config')));
            const { app } = await Promise.resolve().then(() => __importStar(require('@/firebase/client')));
            if (!app) {
                console.warn('Firebase app not available');
                return null;
            }
            const remoteConfig = getRemoteConfig(app);
            const value = getValue(remoteConfig, key);
            return value.asString();
        }
        catch (error) {
            console.warn(`Failed to get Firebase Remote Config for ${key}:`, error);
            return null;
        }
    }
    async setInAzure(key, configValue, environment) {
        var _a, _b, _c;
        if (!this.azureClient)
            return;
        const setting = {
            key: environment === 'default' ? key : `${key}__${environment}`,
            value: this.serializeValue(configValue.value),
            contentType: this.getContentType(configValue.value),
            isReadOnly: false,
            tags: {
                environment,
                version: ((_a = configValue.metadata) === null || _a === void 0 ? void 0 : _a.version) || '1.0.0',
                source: 'unified-service',
                lastModified: new Date().toISOString(),
                hash: ((_b = configValue.metadata) === null || _b === void 0 ? void 0 : _b.hash) || '',
                syncToFirebase: ((_c = configValue.metadata) === null || _c === void 0 ? void 0 : _c.syncToFirebase) ? 'true' : 'false'
            }
        };
        await this.azureClient.setConfigurationSetting(setting);
    }
    async syncToFirebase(key, configValue) {
        // This will be implemented by the config-sync Azure Function
        // For now, we'll queue the sync request
        console.log(`🔄 Queuing Firebase sync for ${key}`);
        // Could implement immediate sync here if needed
        // For production, better to use the dedicated sync function
    }
    parseConfigurationSetting(setting) {
        var _a, _b, _c, _d;
        const value = this.parseValue(setting.value || '', setting.contentType);
        return {
            value,
            type: this.inferType(value),
            metadata: {
                source: 'azure',
                version: ((_a = setting.tags) === null || _a === void 0 ? void 0 : _a.version) || '1.0.0',
                lastModified: new Date(((_b = setting.tags) === null || _b === void 0 ? void 0 : _b.lastModified) || new Date()),
                hash: ((_c = setting.tags) === null || _c === void 0 ? void 0 : _c.hash) || this.calculateHash(value),
                syncToFirebase: ((_d = setting.tags) === null || _d === void 0 ? void 0 : _d.syncToFirebase) === 'true'
            }
        };
    }
    parseValue(value, contentType) {
        if (!contentType) {
            // Try to infer type
            if (value === 'true' || value === 'false') {
                return value === 'true';
            }
            const numberValue = Number(value);
            if (!isNaN(numberValue)) {
                return numberValue;
            }
            try {
                return JSON.parse(value);
            }
            catch (_a) {
                return value;
            }
        }
        switch (contentType) {
            case 'application/json':
                return JSON.parse(value);
            case 'text/plain':
            default:
                return value;
        }
    }
    serializeValue(value) {
        if (typeof value === 'string') {
            return value;
        }
        if (typeof value === 'number' || typeof value === 'boolean') {
            return value.toString();
        }
        return JSON.stringify(value);
    }
    getContentType(value) {
        if (typeof value === 'object') {
            return 'application/json';
        }
        return 'text/plain';
    }
    inferType(value) {
        if (Array.isArray(value))
            return 'array';
        if (typeof value === 'object')
            return 'object';
        if (typeof value === 'boolean')
            return 'boolean';
        if (typeof value === 'number')
            return 'number';
        return 'string';
    }
    validateConfigValue(key, value) {
        const rule = exports.CONFIG_SCHEMA[key];
        if (!rule)
            return; // No validation rule, allow any value
        // Type validation
        const actualType = this.inferType(value);
        if (rule.type !== actualType) {
            throw new Error(`Config ${key}: expected type ${rule.type}, got ${actualType}`);
        }
        // Enum validation
        if (rule.enum && !rule.enum.includes(value)) {
            throw new Error(`Config ${key}: value must be one of ${rule.enum.join(', ')}`);
        }
        // Range validation for numbers
        if (rule.type === 'number') {
            if (rule.min !== undefined && value < rule.min) {
                throw new Error(`Config ${key}: value ${value} is below minimum ${rule.min}`);
            }
            if (rule.max !== undefined && value > rule.max) {
                throw new Error(`Config ${key}: value ${value} is above maximum ${rule.max}`);
            }
        }
        // Pattern validation for strings
        if (rule.type === 'string' && rule.pattern && !rule.pattern.test(value)) {
            throw new Error(`Config ${key}: value does not match required pattern`);
        }
    }
    calculateHash(value) {
        const crypto = require('crypto');
        const normalized = JSON.stringify(value, Object.keys(value || {}).sort());
        return crypto.createHash('sha256').update(normalized).digest('hex').substring(0, 16);
    }
    getCachedValue(key) {
        const cached = this.cache.get(key);
        if (!cached)
            return null;
        const isExpired = Date.now() - cached.timestamp > this.CACHE_TTL;
        if (isExpired) {
            this.cache.delete(key);
            return null;
        }
        return cached.value;
    }
    setCachedValue(key, value, etag) {
        this.cache.set(key, {
            value,
            timestamp: Date.now(),
            etag
        });
    }
    setupDriftDetection() {
        // Check for drift every 10 minutes
        setInterval(async () => {
            await this.checkForDrift();
        }, this.DRIFT_CHECK_INTERVAL);
    }
    async recordAuditEntry(entry) {
        try {
            await azure_cosmos_service_1.azureCosmosService.initialize();
            await azure_cosmos_service_1.azureCosmosService.createDocument('configAudit', Object.assign(Object.assign({}, entry), { _partitionKey: entry.key }));
        }
        catch (error) {
            console.error('Failed to record config audit entry:', error);
        }
    }
    async getAuditEntry(versionId) {
        try {
            await azure_cosmos_service_1.azureCosmosService.initialize();
            const result = await azure_cosmos_service_1.azureCosmosService.queryDocuments('configAudit', 'SELECT * FROM c WHERE c.version = @versionId', [{ name: '@versionId', value: versionId }]);
            return result[0] || null;
        }
        catch (error) {
            console.error('Failed to get audit entry:', error);
            return null;
        }
    }
    async recordDriftEvent(driftResults) {
        try {
            await azure_cosmos_service_1.azureCosmosService.initialize();
            await azure_cosmos_service_1.azureCosmosService.createDocument('configDrift', {
                id: `drift_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
                timestamp: new Date(),
                driftCount: driftResults.length,
                keys: driftResults.map(d => d.key),
                details: driftResults,
                _partitionKey: 'drift-detection'
            });
        }
        catch (error) {
            console.error('Failed to record drift event:', error);
        }
    }
    // ===== HEALTH CHECK =====
    async healthCheck() {
        try {
            await this.initialize();
            if (!this.azureClient) {
                return {
                    healthy: false,
                    message: 'Azure App Configuration not available - using defaults only'
                };
            }
            // Test connectivity
            const testIterator = this.azureClient.listConfigurationSettings();
            await testIterator.next(); // Just test the connection
            const driftCount = Array.from(this.driftCache.values()).filter(d => d.drifted).length;
            // Get comprehensive health check from monitoring service
            const monitoringHealth = await config_monitoring_service_1.configMonitoringService.healthCheck();
            return {
                healthy: monitoringHealth.status === 'healthy',
                message: monitoringHealth.status !== 'healthy' ? `Service status: ${monitoringHealth.status}` : undefined,
                details: {
                    cacheSize: this.cache.size,
                    driftDetected: driftCount,
                    lastRefresh: new Date(),
                    monitoring: monitoringHealth
                }
            };
        }
        catch (error) {
            return {
                healthy: false,
                message: error instanceof Error ? error.message : 'Unknown error'
            };
        }
    }
}
// ===== SINGLETON INSTANCE =====
exports.unifiedConfigService = new UnifiedConfigService();
// ===== REACT HOOK =====
// Note: This hook should be used in client-side components only
// The actual implementation will be moved to a separate file to avoid
// bundling React in server-side code
function useUnifiedConfig(key, defaultValue) {
    // This is a placeholder implementation that will be overridden
    // in client-side usage. See /lib/hooks/useUnifiedConfig.ts
    console.warn('useUnifiedConfig called from server context. Use the client-side hook instead.');
    return {
        value: defaultValue,
        loading: false,
        error: null
    };
}
exports.default = exports.unifiedConfigService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,