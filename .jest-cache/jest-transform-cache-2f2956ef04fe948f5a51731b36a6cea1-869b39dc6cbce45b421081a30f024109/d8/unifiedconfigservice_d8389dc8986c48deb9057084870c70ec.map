{"file":"/Users/dikshantvashistha/PrepBettr/lib/services/unified-config-service.ts","mappings":"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","names":[],"sources":["/Users/dikshantvashistha/PrepBettr/lib/services/unified-config-service.ts"],"sourcesContent":["/**\n * Unified Configuration Service\n * \n * Eliminates configuration drift by providing a single source of truth\n * with Azure App Configuration as primary and Firebase Remote Config\n * for client-side distribution.\n * \n * Key features:\n * - Single API for all configuration needs\n * - Automatic Azure → Firebase synchronization\n * - Two-layer caching with drift detection\n * - Version control and rollback capabilities\n * - Edge-runtime compatible for Next.js middleware\n */\n\nimport { AppConfigurationClient, ConfigurationSetting } from '@azure/app-configuration';\nimport { DefaultAzureCredential } from '@azure/identity';\nimport { logServerError } from '@/lib/errors';\nimport { azureCosmosService } from './azure-cosmos-service';\nimport { configMonitoringService } from './config-monitoring-service';\n\n// ===== INTERFACES =====\n\nexport interface ConfigValue {\n  value: any;\n  type: 'string' | 'number' | 'boolean' | 'object' | 'array';\n  metadata?: {\n    source: 'azure' | 'firebase';\n    version: string;\n    lastModified: Date;\n    hash: string;\n    clientOnly?: boolean;\n    syncToFirebase?: boolean;\n  };\n}\n\nexport interface ConfigValidationRule {\n  required: boolean;\n  type: 'string' | 'number' | 'boolean' | 'object' | 'array';\n  enum?: any[];\n  min?: number;\n  max?: number;\n  pattern?: RegExp;\n}\n\nexport interface ConfigAuditEntry {\n  id: string;\n  key: string;\n  oldValue: any;\n  newValue: any;\n  version: string;\n  source: 'azure' | 'firebase' | 'unified';\n  changedBy: string;\n  timestamp: Date;\n  rollbackable: boolean;\n  metadata?: Record<string, any>;\n}\n\nexport interface ConfigDriftDetection {\n  key: string;\n  azureValue: any;\n  firebaseValue: any;\n  azureHash: string;\n  firebaseHash: string;\n  drifted: boolean;\n  lastChecked: Date;\n}\n\n// ===== CONFIGURATION SCHEMA =====\n\nexport const CONFIG_SCHEMA: Record<string, ConfigValidationRule> = {\n  // Core application settings\n  'core.app.environment': { required: true, type: 'string', enum: ['development', 'staging', 'production'] },\n  'core.app.version': { required: true, type: 'string' },\n  'core.app.debug': { required: false, type: 'boolean' },\n  'core.app.maintenanceMode': { required: false, type: 'boolean' },\n  \n  // Feature flags (synced to Firebase for client access)\n  'features.autoApplyAzure': { required: false, type: 'boolean' },\n  'features.portalIntegration': { required: false, type: 'boolean' },\n  'features.voiceInterview': { required: false, type: 'boolean' },\n  'features.premiumFeatures': { required: false, type: 'boolean' },\n  'features.newUI': { required: false, type: 'boolean' },\n  \n  // Cosmos DB configuration\n  'data.cosmos.maxRUPerSecond': { required: false, type: 'number', min: 400, max: 100000 },\n  'data.cosmos.batchSize': { required: false, type: 'number', min: 10, max: 1000 },\n  'data.cosmos.connectionTimeout': { required: false, type: 'number', min: 1000, max: 30000 },\n  'data.cosmos.retryAttempts': { required: false, type: 'number', min: 1, max: 10 },\n  \n  // Usage limits and quotas\n  'quotas.freeInterviews': { required: false, type: 'number', min: 0, max: 100 },\n  'quotas.freeResumes': { required: false, type: 'number', min: 0, max: 50 },\n  'quotas.premiumInterviews': { required: false, type: 'number', min: 0, max: 10000 },\n  'quotas.premiumResumes': { required: false, type: 'number', min: 0, max: 1000 },\n  \n  // Authentication settings (Firebase client-side)\n  'auth.firebase.sessionTimeout': { required: false, type: 'number', min: 300, max: 86400 },\n  'auth.firebase.maxAttempts': { required: false, type: 'number', min: 3, max: 10 },\n  'auth.firebase.lockoutDuration': { required: false, type: 'number', min: 300, max: 3600 },\n  \n  // Performance and monitoring\n  'perf.cacheTimeout': { required: false, type: 'number', min: 30, max: 3600 },\n  'perf.maxCacheSize': { required: false, type: 'number', min: 100, max: 10000 },\n  'perf.enableMetrics': { required: false, type: 'boolean' }\n};\n\n// Default values with metadata\nexport const CONFIG_DEFAULTS: Record<string, ConfigValue> = {\n  'core.app.environment': {\n    value: 'development',\n    type: 'string',\n    metadata: { source: 'azure', version: '1.0.0', lastModified: new Date(), hash: '' }\n  },\n  'core.app.debug': {\n    value: false,\n    type: 'boolean',\n    metadata: { source: 'azure', version: '1.0.0', lastModified: new Date(), hash: '' }\n  },\n  'features.autoApplyAzure': {\n    value: false,\n    type: 'boolean',\n    metadata: { source: 'azure', version: '1.0.0', lastModified: new Date(), hash: '', syncToFirebase: true }\n  },\n  'features.voiceInterview': {\n    value: true,\n    type: 'boolean',\n    metadata: { source: 'azure', version: '1.0.0', lastModified: new Date(), hash: '', syncToFirebase: true }\n  },\n  'quotas.freeInterviews': {\n    value: 3,\n    type: 'number',\n    metadata: { source: 'azure', version: '1.0.0', lastModified: new Date(), hash: '' }\n  },\n  'quotas.freeResumes': {\n    value: 2,\n    type: 'number', \n    metadata: { source: 'azure', version: '1.0.0', lastModified: new Date(), hash: '' }\n  }\n};\n\n// ===== UNIFIED CONFIGURATION SERVICE =====\n\nclass UnifiedConfigService {\n  private azureClient: AppConfigurationClient | null = null;\n  private cache: Map<string, { value: ConfigValue; timestamp: number; etag?: string }> = new Map();\n  private initialized = false;\n  private driftCache: Map<string, ConfigDriftDetection> = new Map();\n  \n  private readonly CACHE_TTL = 5 * 60 * 1000; // 5 minutes\n  private readonly DRIFT_CHECK_INTERVAL = 10 * 60 * 1000; // 10 minutes\n  \n  constructor() {\n    this.setupDriftDetection();\n  }\n\n  // ===== INITIALIZATION =====\n\n  async initialize(): Promise<void> {\n    if (this.initialized) return;\n\n    try {\n      const connectionString = process.env.AZURE_APP_CONFIG_CONNECTION_STRING;\n      const endpoint = process.env.AZURE_APP_CONFIG_ENDPOINT;\n\n      if (connectionString) {\n        this.azureClient = new AppConfigurationClient(connectionString);\n      } else if (endpoint) {\n        const credential = new DefaultAzureCredential();\n        this.azureClient = new AppConfigurationClient(endpoint, credential);\n      } else {\n        console.warn('⚠️ Azure App Configuration not configured - using defaults only');\n        this.initialized = true;\n        return;\n      }\n\n      // Test connection\n      const iterator = this.azureClient.listConfigurationSettings();\n      await iterator.next(); // Just get the first result to test connection\n      \n      this.initialized = true;\n      console.log('✅ Unified Configuration Service initialized');\n    } catch (error) {\n      console.error('❌ Failed to initialize Unified Config Service:', error);\n      logServerError(error as Error, { service: 'unified-config', action: 'initialize' });\n      \n      // Continue with defaults only\n      this.initialized = true;\n    }\n  }\n\n  // ===== CORE CONFIGURATION METHODS =====\n\n  /**\n   * Get configuration value with intelligent fallback\n   */\n  async get<T = any>(key: string, defaultValue?: T): Promise<T> {\n    const startTime = Date.now();\n    let success = true;\n    \n    await this.initialize();\n\n    try {\n      // Check cache first\n      const cached = this.getCachedValue(key);\n      if (cached) {\n        configMonitoringService.trackCacheHit(true, key);\n        const latency = Date.now() - startTime;\n        configMonitoringService.trackConfigRequest(key, 'get', latency, true);\n        return cached.value as T;\n      }\n      \n      configMonitoringService.trackCacheHit(false, key);\n\n      // Try Azure App Configuration first\n      const azureValue = await this.getFromAzure(key);\n      if (azureValue !== null) {\n        const latency = Date.now() - startTime;\n        configMonitoringService.trackConfigRequest(key, 'get', latency, true);\n        return azureValue as T;\n      }\n\n      // Check if it's a client-only config that should come from Firebase\n      const schema = CONFIG_SCHEMA[key];\n      const defaultConfig = CONFIG_DEFAULTS[key];\n      \n      if (defaultConfig?.metadata?.clientOnly) {\n        const firebaseValue = await this.getFromFirebase(key);\n        if (firebaseValue !== null) {\n          const latency = Date.now() - startTime;\n          configMonitoringService.trackConfigRequest(key, 'get', latency, true);\n          return firebaseValue as T;\n        }\n      }\n\n      // Return default value or schema default\n      const result = defaultValue !== undefined ? defaultValue : \n                    (defaultConfig ? defaultConfig.value as T : undefined as T);\n      \n      const latency = Date.now() - startTime;\n      configMonitoringService.trackConfigRequest(key, 'get', latency, true);\n      return result;\n      \n    } catch (error) {\n      success = false;\n      console.error(`Error getting config ${key}:`, error);\n      \n      const latency = Date.now() - startTime;\n      configMonitoringService.trackConfigRequest(key, 'get', latency, false);\n      \n      return defaultValue as T;\n    }\n  }\n\n  /**\n   * Set configuration value with validation and audit\n   */\n  async set(key: string, value: any, options?: {\n    environment?: string;\n    syncToFirebase?: boolean;\n    version?: string;\n    changedBy?: string;\n  }): Promise<void> {\n    const startTime = Date.now();\n    let success = true;\n    \n    await this.initialize();\n\n    const { environment = 'default', syncToFirebase = false, version = '1.0.0', changedBy = 'system' } = options || {};\n\n    try {\n      // Validate against schema\n      this.validateConfigValue(key, value);\n\n      // Get previous value for audit\n      const previousValue = await this.get(key);\n\n      // Create config value with metadata\n      const configValue: ConfigValue = {\n        value,\n        type: this.inferType(value),\n        metadata: {\n          source: 'azure',\n          version,\n          lastModified: new Date(),\n          hash: this.calculateHash(value),\n          syncToFirebase\n        }\n      };\n\n      // Store in Azure App Configuration\n      if (this.azureClient) {\n        await this.setInAzure(key, configValue, environment);\n      }\n\n      // Sync to Firebase if requested\n      if (syncToFirebase) {\n        await this.syncToFirebase(key, configValue);\n      }\n\n      // Clear cache\n      this.cache.delete(key);\n\n      // Record audit entry\n      await this.recordAuditEntry({\n        id: `audit_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        key,\n        oldValue: previousValue,\n        newValue: value,\n        version,\n        source: 'unified',\n        changedBy,\n        timestamp: new Date(),\n        rollbackable: true,\n        metadata: { environment, syncToFirebase }\n      });\n      \n      // Track configuration change\n      configMonitoringService.trackConfigChange(key, previousValue, value, changedBy, environment);\n      \n      const latency = Date.now() - startTime;\n      configMonitoringService.trackConfigRequest(key, 'set', latency, true);\n\n      console.log(`✅ Config updated: ${key} = ${JSON.stringify(value)}`);\n    } catch (error) {\n      success = false;\n      const latency = Date.now() - startTime;\n      configMonitoringService.trackConfigRequest(key, 'set', latency, false);\n      \n      console.error(`❌ Failed to set config ${key}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get all configuration values with optional prefix filter\n   */\n  async getAll(prefix?: string): Promise<Record<string, any>> {\n    await this.initialize();\n\n    const result: Record<string, any> = {};\n\n    try {\n      // Get from Azure App Configuration\n      if (this.azureClient) {\n        const settings = this.azureClient.listConfigurationSettings({\n          keyFilter: prefix ? `${prefix}*` : undefined\n        });\n\n        for await (const setting of settings) {\n          if (setting.key && setting.value !== undefined) {\n            const parsedValue = this.parseConfigurationSetting(setting);\n            result[setting.key] = parsedValue.value;\n            \n            // Cache the value\n            this.setCachedValue(setting.key, parsedValue, setting.etag);\n          }\n        }\n      }\n\n      // Add defaults for missing keys\n      Object.entries(CONFIG_DEFAULTS).forEach(([key, defaultConfig]) => {\n        if (!prefix || key.startsWith(prefix)) {\n          if (result[key] === undefined) {\n            result[key] = defaultConfig.value;\n          }\n        }\n      });\n\n      return result;\n    } catch (error) {\n      console.error('Error getting all configs:', error);\n      \n      // Return defaults only on error\n      const defaults: Record<string, any> = {};\n      Object.entries(CONFIG_DEFAULTS).forEach(([key, defaultConfig]) => {\n        if (!prefix || key.startsWith(prefix)) {\n          defaults[key] = defaultConfig.value;\n        }\n      });\n      \n      return defaults;\n    }\n  }\n\n  /**\n   * Refresh cache and check for drift\n   */\n  async refresh(): Promise<void> {\n    this.cache.clear();\n    this.driftCache.clear();\n    await this.checkForDrift();\n  }\n\n  /**\n   * Subscribe to configuration changes (polling-based)\n   */\n  subscribe(key: string, callback: (value: any) => void): () => void {\n    let lastValue: any = undefined;\n    let isActive = true;\n\n    const poll = async () => {\n      if (!isActive) return;\n\n      try {\n        const currentValue = await this.get(key);\n        if (JSON.stringify(currentValue) !== JSON.stringify(lastValue)) {\n          lastValue = currentValue;\n          callback(currentValue);\n        }\n      } catch (error) {\n        console.error(`Config subscription error for ${key}:`, error);\n      }\n    };\n\n    // Poll every 30 seconds\n    const interval = setInterval(poll, 30000);\n    \n    // Initial call\n    poll();\n\n    return () => {\n      isActive = false;\n      clearInterval(interval);\n    };\n  }\n\n  // ===== DRIFT DETECTION =====\n\n  async checkForDrift(): Promise<ConfigDriftDetection[]> {\n    const driftResults: ConfigDriftDetection[] = [];\n\n    try {\n      // Get all configs that should sync to Firebase\n      const allConfigs = await this.getAll();\n      const syncableKeys = Object.keys(allConfigs).filter(key => {\n        const defaultConfig = CONFIG_DEFAULTS[key];\n        return defaultConfig?.metadata?.syncToFirebase;\n      });\n      \n      for (const key of syncableKeys) {\n        const drift = await this.checkKeyForDrift(key);\n        if (drift) {\n          driftResults.push(drift);\n          this.driftCache.set(key, drift);\n        }\n      }\n\n      // Track drift detection metrics\n      const driftedKeys = driftResults.filter(d => d.drifted).map(d => d.key);\n      configMonitoringService.trackDriftDetection(driftedKeys, syncableKeys.length);\n\n      if (driftResults.length > 0) {\n        console.warn(`⚠️ Configuration drift detected in ${driftResults.length} keys`);\n        \n        // Record drift event for monitoring\n        await this.recordDriftEvent(driftResults);\n      }\n\n      return driftResults;\n    } catch (error) {\n      console.error('Error checking for drift:', error);\n      return [];\n    }\n  }\n\n  private async checkKeyForDrift(key: string): Promise<ConfigDriftDetection | null> {\n    try {\n      const [azureValue, firebaseValue] = await Promise.all([\n        this.getFromAzure(key),\n        this.getFromFirebase(key)\n      ]);\n\n      if (azureValue === null && firebaseValue === null) {\n        return null; // Both missing, no drift\n      }\n\n      const azureHash = this.calculateHash(azureValue);\n      const firebaseHash = this.calculateHash(firebaseValue);\n      const drifted = azureHash !== firebaseHash;\n\n      return {\n        key,\n        azureValue,\n        firebaseValue,\n        azureHash,\n        firebaseHash,\n        drifted,\n        lastChecked: new Date()\n      };\n    } catch (error) {\n      console.error(`Error checking drift for ${key}:`, error);\n      return null;\n    }\n  }\n\n  // ===== ROLLBACK FUNCTIONALITY =====\n\n  async revert(versionId: string): Promise<void> {\n    try {\n      // Get audit entry\n      const auditEntry = await this.getAuditEntry(versionId);\n      if (!auditEntry || !auditEntry.rollbackable) {\n        throw new Error(`Version ${versionId} not found or not rollbackable`);\n      }\n\n      // Restore previous value\n      await this.set(auditEntry.key, auditEntry.oldValue, {\n        version: `rollback_${versionId}`,\n        changedBy: 'rollback-system',\n        syncToFirebase: auditEntry.metadata?.syncToFirebase\n      });\n\n      console.log(`✅ Successfully reverted ${auditEntry.key} to version ${versionId}`);\n    } catch (error) {\n      console.error(`❌ Failed to revert to version ${versionId}:`, error);\n      throw error;\n    }\n  }\n\n  // ===== PRIVATE HELPER METHODS =====\n\n  private async getFromAzure(key: string): Promise<any> {\n    if (!this.azureClient) return null;\n\n    try {\n      const setting = await this.azureClient.getConfigurationSetting({ key });\n      if (!setting || setting.value === undefined) {\n        return null;\n      }\n\n      const parsedValue = this.parseConfigurationSetting(setting);\n      this.setCachedValue(key, parsedValue, setting.etag);\n      \n      return parsedValue.value;\n    } catch (error: any) {\n      if (error.statusCode === 404) {\n        return null;\n      }\n      throw error;\n    }\n  }\n\n  private async getFromFirebase(key: string): Promise<any> {\n    try {\n      // Import Firebase Remote Config dynamically\n      const { getRemoteConfig, getValue } = await import('firebase/remote-config');\n      const { app } = await import('@/firebase/client');\n      \n      if (!app) {\n        console.warn('Firebase app not available');\n        return null;\n      }\n      \n      const remoteConfig = getRemoteConfig(app);\n      const value = getValue(remoteConfig, key);\n      \n      return value.asString();\n    } catch (error) {\n      console.warn(`Failed to get Firebase Remote Config for ${key}:`, error);\n      return null;\n    }\n  }\n\n  private async setInAzure(key: string, configValue: ConfigValue, environment: string): Promise<void> {\n    if (!this.azureClient) return;\n\n    const setting: ConfigurationSetting = {\n      key: environment === 'default' ? key : `${key}__${environment}`,\n      value: this.serializeValue(configValue.value),\n      contentType: this.getContentType(configValue.value),\n      isReadOnly: false,\n      tags: {\n        environment,\n        version: configValue.metadata?.version || '1.0.0',\n        source: 'unified-service',\n        lastModified: new Date().toISOString(),\n        hash: configValue.metadata?.hash || '',\n        syncToFirebase: configValue.metadata?.syncToFirebase ? 'true' : 'false'\n      }\n    };\n\n    await this.azureClient.setConfigurationSetting(setting);\n  }\n\n  private async syncToFirebase(key: string, configValue: ConfigValue): Promise<void> {\n    // This will be implemented by the config-sync Azure Function\n    // For now, we'll queue the sync request\n    console.log(`🔄 Queuing Firebase sync for ${key}`);\n    \n    // Could implement immediate sync here if needed\n    // For production, better to use the dedicated sync function\n  }\n\n  private parseConfigurationSetting(setting: ConfigurationSetting): ConfigValue {\n    const value = this.parseValue(setting.value || '', setting.contentType);\n    \n    return {\n      value,\n      type: this.inferType(value),\n      metadata: {\n        source: 'azure',\n        version: setting.tags?.version || '1.0.0',\n        lastModified: new Date(setting.tags?.lastModified || new Date()),\n        hash: setting.tags?.hash || this.calculateHash(value),\n        syncToFirebase: setting.tags?.syncToFirebase === 'true'\n      }\n    };\n  }\n\n  private parseValue(value: string, contentType?: string): any {\n    if (!contentType) {\n      // Try to infer type\n      if (value === 'true' || value === 'false') {\n        return value === 'true';\n      }\n      \n      const numberValue = Number(value);\n      if (!isNaN(numberValue)) {\n        return numberValue;\n      }\n      \n      try {\n        return JSON.parse(value);\n      } catch {\n        return value;\n      }\n    }\n    \n    switch (contentType) {\n      case 'application/json':\n        return JSON.parse(value);\n      case 'text/plain':\n      default:\n        return value;\n    }\n  }\n\n  private serializeValue(value: any): string {\n    if (typeof value === 'string') {\n      return value;\n    }\n    \n    if (typeof value === 'number' || typeof value === 'boolean') {\n      return value.toString();\n    }\n    \n    return JSON.stringify(value);\n  }\n\n  private getContentType(value: any): string {\n    if (typeof value === 'object') {\n      return 'application/json';\n    }\n    \n    return 'text/plain';\n  }\n\n  private inferType(value: any): ConfigValue['type'] {\n    if (Array.isArray(value)) return 'array';\n    if (typeof value === 'object') return 'object';\n    if (typeof value === 'boolean') return 'boolean';\n    if (typeof value === 'number') return 'number';\n    return 'string';\n  }\n\n  private validateConfigValue(key: string, value: any): void {\n    const rule = CONFIG_SCHEMA[key];\n    if (!rule) return; // No validation rule, allow any value\n\n    // Type validation\n    const actualType = this.inferType(value);\n    if (rule.type !== actualType) {\n      throw new Error(`Config ${key}: expected type ${rule.type}, got ${actualType}`);\n    }\n\n    // Enum validation\n    if (rule.enum && !rule.enum.includes(value)) {\n      throw new Error(`Config ${key}: value must be one of ${rule.enum.join(', ')}`);\n    }\n\n    // Range validation for numbers\n    if (rule.type === 'number') {\n      if (rule.min !== undefined && value < rule.min) {\n        throw new Error(`Config ${key}: value ${value} is below minimum ${rule.min}`);\n      }\n      if (rule.max !== undefined && value > rule.max) {\n        throw new Error(`Config ${key}: value ${value} is above maximum ${rule.max}`);\n      }\n    }\n\n    // Pattern validation for strings\n    if (rule.type === 'string' && rule.pattern && !rule.pattern.test(value)) {\n      throw new Error(`Config ${key}: value does not match required pattern`);\n    }\n  }\n\n  private calculateHash(value: any): string {\n    const crypto = require('crypto');\n    const normalized = JSON.stringify(value, Object.keys(value || {}).sort());\n    return crypto.createHash('sha256').update(normalized).digest('hex').substring(0, 16);\n  }\n\n  private getCachedValue(key: string): ConfigValue | null {\n    const cached = this.cache.get(key);\n    if (!cached) return null;\n\n    const isExpired = Date.now() - cached.timestamp > this.CACHE_TTL;\n    if (isExpired) {\n      this.cache.delete(key);\n      return null;\n    }\n\n    return cached.value;\n  }\n\n  private setCachedValue(key: string, value: ConfigValue, etag?: string): void {\n    this.cache.set(key, {\n      value,\n      timestamp: Date.now(),\n      etag\n    });\n  }\n\n  private setupDriftDetection(): void {\n    // Check for drift every 10 minutes\n    setInterval(async () => {\n      await this.checkForDrift();\n    }, this.DRIFT_CHECK_INTERVAL);\n  }\n\n  private async recordAuditEntry(entry: ConfigAuditEntry): Promise<void> {\n    try {\n      await azureCosmosService.initialize();\n      await azureCosmosService.createDocument('configAudit', {\n        ...entry,\n        _partitionKey: entry.key\n      });\n    } catch (error) {\n      console.error('Failed to record config audit entry:', error);\n    }\n  }\n\n  private async getAuditEntry(versionId: string): Promise<ConfigAuditEntry | null> {\n    try {\n      await azureCosmosService.initialize();\n      const result = await azureCosmosService.queryDocuments<ConfigAuditEntry>(\n        'configAudit',\n        'SELECT * FROM c WHERE c.version = @versionId',\n        [{ name: '@versionId', value: versionId }]\n      );\n      return result[0] || null;\n    } catch (error) {\n      console.error('Failed to get audit entry:', error);\n      return null;\n    }\n  }\n\n  private async recordDriftEvent(driftResults: ConfigDriftDetection[]): Promise<void> {\n    try {\n      await azureCosmosService.initialize();\n      await azureCosmosService.createDocument('configDrift', {\n        id: `drift_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        timestamp: new Date(),\n        driftCount: driftResults.length,\n        keys: driftResults.map(d => d.key),\n        details: driftResults,\n        _partitionKey: 'drift-detection'\n      });\n    } catch (error) {\n      console.error('Failed to record drift event:', error);\n    }\n  }\n\n  // ===== HEALTH CHECK =====\n\n  async healthCheck(): Promise<{ healthy: boolean; message?: string; details?: any }> {\n    try {\n      await this.initialize();\n\n      if (!this.azureClient) {\n        return { \n          healthy: false, \n          message: 'Azure App Configuration not available - using defaults only' \n        };\n      }\n\n      // Test connectivity\n      const testIterator = this.azureClient.listConfigurationSettings();\n      await testIterator.next(); // Just test the connection\n\n      const driftCount = Array.from(this.driftCache.values()).filter(d => d.drifted).length;\n      \n      // Get comprehensive health check from monitoring service\n      const monitoringHealth = await configMonitoringService.healthCheck();\n\n      return { \n        healthy: monitoringHealth.status === 'healthy',\n        message: monitoringHealth.status !== 'healthy' ? `Service status: ${monitoringHealth.status}` : undefined,\n        details: {\n          cacheSize: this.cache.size,\n          driftDetected: driftCount,\n          lastRefresh: new Date(),\n          monitoring: monitoringHealth\n        }\n      };\n    } catch (error) {\n      return { \n        healthy: false, \n        message: error instanceof Error ? error.message : 'Unknown error' \n      };\n    }\n  }\n}\n\n// ===== SINGLETON INSTANCE =====\n\nexport const unifiedConfigService = new UnifiedConfigService();\n\n// ===== REACT HOOK =====\n\n// Note: This hook should be used in client-side components only\n// The actual implementation will be moved to a separate file to avoid\n// bundling React in server-side code\nexport function useUnifiedConfig<T = any>(key: string, defaultValue?: T): {\n  value: T;\n  loading: boolean;\n  error: string | null;\n} {\n  // This is a placeholder implementation that will be overridden\n  // in client-side usage. See /lib/hooks/useUnifiedConfig.ts\n  console.warn('useUnifiedConfig called from server context. Use the client-side hook instead.');\n  return {\n    value: defaultValue as T,\n    loading: false,\n    error: null\n  };\n}\n\nexport default unifiedConfigService;\n"],"version":3}