{"version":3,"names":["cov_2j1f3sxqec","actualCoverage","s","exports","clearAzureSecretsCache","fetchAzureSecrets","initializeAzureEnvironment","getConfiguration","getAzureConfig","identity_1","require","keyvault_secrets_1","isClient","window","b","console","warn","AZURE_KEY_VAULT_URI","process","env","cachedSecrets","createKeyVaultClient","f","Error","credential","DefaultAzureCredential","SecretClient","log","forceRefresh","speechKey","speechEndpoint","azureOpenAIKey","azureOpenAIEndpoint","azureOpenAIDeployment","firebaseProjectId","firebaseClientEmail","firebasePrivateKey","client","getOptionalSecret","name","getSecret","catch","err","statusCode","message","firebaseClientKey","azureFormRecognizerKey","azureFormRecognizerEndpoint","azureStorageAccount","azureStorageAccountKey","azureStorageConnectionString","azureStorageContainer","storageProvider","Promise","all","requiredAzureSecrets","value","missingAzureSecrets","Object","entries","filter","_","map","key","length","join","FIREBASE_PROJECT_ID","FIREBASE_CLIENT_EMAIL","FIREBASE_PRIVATE_KEY","error","fallbackSecrets","AZURE_SPEECH_KEY","SPEECH_KEY","SPEECH_ENDPOINT","AZURE_OPENAI_API_KEY","AZURE_OPENAI_KEY","AZURE_OPENAI_ENDPOINT","AZURE_OPENAI_DEPLOYMENT","AZURE_FORM_RECOGNIZER_KEY","AZURE_FORM_RECOGNIZER_ENDPOINT","AZURE_STORAGE_ACCOUNT_NAME","AZURE_STORAGE_ACCOUNT_KEY","missingCritical","push","missingOptional","secrets","nextPublicPrefix","AZURE_STORAGE_ACCOUNT","AZURE_STORAGE_CONNECTION_STRING","AZURE_STORAGE_CONTAINER","STORAGE_PROVIDER","keyVaultUri","hasSecretsCache","environment"],"sources":["/Users/dikshantvashistha/PrepBettr/lib/azure-config.ts"],"sourcesContent":["import { DefaultAzureCredential } from '@azure/identity';\nimport { SecretClient } from '@azure/keyvault-secrets';\n\n// Client-side safety check - provide empty implementations when running on client\nconst isClient = typeof window !== 'undefined';\n\nif (isClient) {\n  console.warn('[Azure Config] Running on client side - using fallback implementations');\n}\n\n// Azure Key Vault configuration\nconst AZURE_KEY_VAULT_URI = process.env.AZURE_KEY_VAULT_URI || 'https://prepbettr-keyvault-083.vault.azure.net/';\n\ninterface AzureSecrets {\n  speechKey: string;\n  speechEndpoint: string;\n  azureOpenAIKey: string;\n  azureOpenAIEndpoint: string;\n  azureOpenAIDeployment: string;\n  // Firebase configuration\n  firebaseProjectId: string;\n  firebaseClientEmail: string;\n  firebasePrivateKey: string;\n  firebaseClientKey?: string;\n  // Additional Azure services\n  azureFormRecognizerKey?: string;\n  azureFormRecognizerEndpoint?: string;\n  // Storage configuration\n  azureStorageAccount?: string;\n  azureStorageAccountKey?: string;\n  azureStorageConnectionString?: string;\n  azureStorageContainer?: string;\n  storageProvider?: string;\n}\n\nlet cachedSecrets: AzureSecrets | null = null;\n\n/**\n * Initialize Azure Key Vault client\n */\nfunction createKeyVaultClient(): SecretClient {\n  if (!AZURE_KEY_VAULT_URI) {\n    throw new Error('AZURE_KEY_VAULT_URI environment variable is required');\n  }\n  \n  const credential = new DefaultAzureCredential();\n  return new SecretClient(AZURE_KEY_VAULT_URI, credential);\n}\n\n/**\n * Clear cached secrets (useful when Azure keys are renewed)\n */\nexport function clearAzureSecretsCache(): void {\n  if (isClient) return;\n  console.log('üîÑ Clearing Azure secrets cache...');\n  cachedSecrets = null;\n}\n\n/**\n * Fetch secrets from Azure Key Vault\n */\nexport async function fetchAzureSecrets(forceRefresh: boolean = false): Promise<AzureSecrets> {\n  if (isClient) {\n    return {\n      speechKey: '',\n      speechEndpoint: '',\n      azureOpenAIKey: '',\n      azureOpenAIEndpoint: '',\n      azureOpenAIDeployment: '',\n      firebaseProjectId: '',\n      firebaseClientEmail: '',\n      firebasePrivateKey: ''\n    };\n  }\n  // Clear cache if force refresh is requested\n  if (forceRefresh) {\n    clearAzureSecretsCache();\n  }\n  \n  // Return cached secrets if available\n  if (cachedSecrets) {\n    return cachedSecrets;\n  }\n\n  try {\n    console.log('üîë Fetching secrets from Azure Key Vault...');\n    const client = createKeyVaultClient();\n\n    // Helper function to suppress expected 404 errors for optional secrets\n    const getOptionalSecret = (name: string) => \n      client.getSecret(name).catch(err => {\n        if (err.statusCode !== 404) {\n          console.warn(`‚ö†Ô∏è Unexpected error fetching optional secret '${name}':`, err.message);\n        }\n        return null;\n      });\n\n    // Fetch all secrets (some are optional)\n    const [\n      speechKey, speechEndpoint, azureOpenAIKey, azureOpenAIEndpoint, azureOpenAIDeployment,\n      firebaseProjectId, firebaseClientEmail, firebasePrivateKey, firebaseClientKey,\n      azureFormRecognizerKey, azureFormRecognizerEndpoint, \n      azureStorageAccount, azureStorageAccountKey, azureStorageConnectionString,\n      azureStorageContainer, storageProvider\n    ] = await Promise.all([\n      client.getSecret('speech-key'),\n      client.getSecret('speech-endpoint'),\n      client.getSecret('azure-openai-key'),\n      client.getSecret('azure-openai-endpoint'),\n      client.getSecret('azure-openai-deployment'),\n      getOptionalSecret('firebase-project-id'),\n      getOptionalSecret('firebase-client-email'),\n      getOptionalSecret('firebase-private-key'),\n      getOptionalSecret('NEXT-PUBLIC-FIREBASE-CLIENT-KEY'),\n      getOptionalSecret('azure-form-recognizer-key'),\n      getOptionalSecret('azure-form-recognizer-endpoint'),\n      getOptionalSecret('azure-storage-account'),\n      getOptionalSecret('azure-storage-account-key'),\n      getOptionalSecret('azure-storage-connection-string'),\n      getOptionalSecret('azure-storage-container'),\n      getOptionalSecret('storage-provider')\n    ]);\n\n    // Validate only Azure-related secrets (Firebase can come from env vars)\n    const requiredAzureSecrets = {\n      speechKey: speechKey?.value,\n      speechEndpoint: speechEndpoint?.value,\n      azureOpenAIKey: azureOpenAIKey?.value,\n      azureOpenAIEndpoint: azureOpenAIEndpoint?.value,\n      azureOpenAIDeployment: azureOpenAIDeployment?.value\n    };\n\n    const missingAzureSecrets = Object.entries(requiredAzureSecrets)\n      .filter(([_, value]) => !value)\n      .map(([key, _]) => key);\n\n    if (missingAzureSecrets.length > 0) {\n      throw new Error(`Required Azure secrets missing from Key Vault: ${missingAzureSecrets.join(', ')}`);\n    }\n\n    cachedSecrets = {\n      speechKey: speechKey.value!,\n      speechEndpoint: speechEndpoint.value!,\n      azureOpenAIKey: azureOpenAIKey.value!,\n      azureOpenAIEndpoint: azureOpenAIEndpoint.value!,\n      azureOpenAIDeployment: azureOpenAIDeployment.value!,\n      firebaseProjectId: firebaseProjectId?.value || process.env.FIREBASE_PROJECT_ID || '',\n      firebaseClientEmail: firebaseClientEmail?.value || process.env.FIREBASE_CLIENT_EMAIL || '',\n      firebasePrivateKey: firebasePrivateKey?.value || process.env.FIREBASE_PRIVATE_KEY || '',\n      firebaseClientKey: firebaseClientKey?.value || '',\n      azureFormRecognizerKey: azureFormRecognizerKey?.value,\n      azureFormRecognizerEndpoint: azureFormRecognizerEndpoint?.value,\n      azureStorageAccount: azureStorageAccount?.value,\n      azureStorageAccountKey: azureStorageAccountKey?.value,\n      azureStorageConnectionString: azureStorageConnectionString?.value,\n      azureStorageContainer: azureStorageContainer?.value,\n      storageProvider: storageProvider?.value\n    };\n\n    console.log('‚úÖ Azure secrets loaded successfully');\n    return cachedSecrets;\n\n  } catch (error) {\n    console.error('‚ùå Failed to fetch Azure secrets:', error);\n    \n    // Fallback to environment variables if Key Vault fails\n    console.log('üîÑ Falling back to environment variables...');\n    const fallbackSecrets: AzureSecrets = {\n      speechKey: process.env.AZURE_SPEECH_KEY || process.env.SPEECH_KEY || '',\n      speechEndpoint: process.env.SPEECH_ENDPOINT || 'https://eastus2.api.cognitive.microsoft.com/',\n      azureOpenAIKey: process.env.AZURE_OPENAI_API_KEY || process.env.AZURE_OPENAI_KEY || '',\n      azureOpenAIEndpoint: process.env.AZURE_OPENAI_ENDPOINT || '',\n      azureOpenAIDeployment: process.env.AZURE_OPENAI_DEPLOYMENT || '',\n      // Firebase fallbacks\n      firebaseProjectId: process.env.FIREBASE_PROJECT_ID || '',\n      firebaseClientEmail: process.env.FIREBASE_CLIENT_EMAIL || '',\n      firebasePrivateKey: process.env.FIREBASE_PRIVATE_KEY || '',\n      firebaseClientKey: '',\n      // Optional fallbacks\n      azureFormRecognizerKey: process.env.AZURE_FORM_RECOGNIZER_KEY,\n      azureFormRecognizerEndpoint: process.env.AZURE_FORM_RECOGNIZER_ENDPOINT,\n      azureStorageAccount: process.env.AZURE_STORAGE_ACCOUNT_NAME,\n      azureStorageAccountKey: process.env.AZURE_STORAGE_ACCOUNT_KEY\n    };\n\n    // Only warn about critical missing secrets\n    const missingCritical = [];\n    if (!fallbackSecrets.speechKey) missingCritical.push('SPEECH_KEY');\n    if (!fallbackSecrets.azureOpenAIKey) missingCritical.push('AZURE_OPENAI_KEY');\n    \n    // Only warn about missing optional secrets if not available from environment\n    const missingOptional = [];\n    if (!fallbackSecrets.firebaseProjectId && !process.env.FIREBASE_PROJECT_ID) missingOptional.push('FIREBASE_PROJECT_ID');\n\n    if (missingCritical.length > 0) {\n      console.error(`‚ùå Critical secrets missing: ${missingCritical.join(', ')}`);\n    }\n    if (missingOptional.length > 0) {\n      console.warn(`‚ö†Ô∏è Optional secrets missing: ${missingOptional.join(', ')}`);\n    }\n\n    cachedSecrets = fallbackSecrets;\n    return cachedSecrets;\n  }\n}\n\n\n/**\n * Initialize environment variables from Azure Key Vault\n * This should be called at application startup\n */\nexport async function initializeAzureEnvironment(): Promise<void> {\n  if (isClient) return;\n  try {\n    const secrets = await fetchAzureSecrets();\n    \n    // Set Azure service environment variables\n    process.env.SPEECH_KEY = secrets.speechKey;\n    process.env.SPEECH_ENDPOINT = secrets.speechEndpoint;\n    \n    // Set Azure OpenAI environment variables\n    process.env.AZURE_OPENAI_KEY = secrets.azureOpenAIKey;\n    process.env.AZURE_OPENAI_ENDPOINT = secrets.azureOpenAIEndpoint;\n    process.env.AZURE_OPENAI_DEPLOYMENT = secrets.azureOpenAIDeployment;\n    \n    // Set Firebase environment variables\n    process.env.FIREBASE_PROJECT_ID = secrets.firebaseProjectId;\n    process.env.FIREBASE_CLIENT_EMAIL = secrets.firebaseClientEmail;\n    process.env.FIREBASE_PRIVATE_KEY = secrets.firebasePrivateKey;\n    \n    // Set client-side environment variables using string concatenation to avoid Next.js inlining\n    const nextPublicPrefix = 'NEXT_PUBLIC_';\n    process.env[nextPublicPrefix + 'SPEECH_KEY'] = secrets.speechKey;\n    process.env[nextPublicPrefix + 'SPEECH_ENDPOINT'] = secrets.speechEndpoint;\n    process.env[nextPublicPrefix + 'AZURE_OPENAI_API_KEY'] = secrets.azureOpenAIKey;\n    process.env[nextPublicPrefix + 'AZURE_OPENAI_ENDPOINT'] = secrets.azureOpenAIEndpoint;\n    process.env[nextPublicPrefix + 'AZURE_OPENAI_DEPLOYMENT'] = secrets.azureOpenAIDeployment;\n    process.env[nextPublicPrefix + 'FIREBASE_PROJECT_ID'] = secrets.firebaseProjectId;\n    \n    // Set the Firebase client key from secrets or environment\n    if (secrets.firebaseClientKey) {\n      process.env[nextPublicPrefix + 'FIREBASE_CLIENT_KEY'] = secrets.firebaseClientKey;\n      console.log('üîë Firebase client key set from Azure Key Vault');\n    } else {\n      console.warn('‚ö†Ô∏è Firebase client key not found in Azure Key Vault');\n    }\n    \n    // Set optional Azure services if available\n    if (secrets.azureFormRecognizerKey) {\n      process.env.AZURE_FORM_RECOGNIZER_KEY = secrets.azureFormRecognizerKey;\n    }\n    if (secrets.azureFormRecognizerEndpoint) {\n      process.env.AZURE_FORM_RECOGNIZER_ENDPOINT = secrets.azureFormRecognizerEndpoint;\n    }\n    // Set storage configuration\n    if (secrets.azureStorageAccount) {\n      process.env.AZURE_STORAGE_ACCOUNT = secrets.azureStorageAccount;\n    }\n    if (secrets.azureStorageAccountKey) {\n      process.env.AZURE_STORAGE_ACCOUNT_KEY = secrets.azureStorageAccountKey;\n    }\n    if (secrets.azureStorageConnectionString) {\n      process.env.AZURE_STORAGE_CONNECTION_STRING = secrets.azureStorageConnectionString;\n    }\n    if (secrets.azureStorageContainer) {\n      process.env.AZURE_STORAGE_CONTAINER = secrets.azureStorageContainer;\n    }\n    if (secrets.storageProvider) {\n      process.env.STORAGE_PROVIDER = secrets.storageProvider;\n    }\n\n    console.log('üåü Azure environment initialized successfully');\n  } catch (error) {\n    console.error('‚ùå Failed to initialize Azure environment:', error);\n    throw error;\n  }\n}\n\n/**\n * Get generic configuration values (used by storage abstraction and other services)\n */\nexport async function getConfiguration(): Promise<Record<string, string>> {\n  try {\n    const secrets = await fetchAzureSecrets();\n    \n    return {\n      // Azure Storage configuration\n      'AZURE_STORAGE_ACCOUNT': secrets.azureStorageAccount || process.env.AZURE_STORAGE_ACCOUNT || 'prepbettrstorage684',\n      'AZURE_STORAGE_ACCOUNT_KEY': secrets.azureStorageAccountKey || process.env.AZURE_STORAGE_ACCOUNT_KEY || '',\n      'AZURE_STORAGE_CONNECTION_STRING': secrets.azureStorageConnectionString || process.env.AZURE_STORAGE_CONNECTION_STRING || '',\n      'AZURE_STORAGE_CONTAINER': secrets.azureStorageContainer || process.env.AZURE_STORAGE_CONTAINER || 'resumes',\n      'STORAGE_PROVIDER': secrets.storageProvider || process.env.STORAGE_PROVIDER || 'firebase',\n      \n      // Azure AI services\n      'AZURE_OPENAI_KEY': secrets.azureOpenAIKey,\n      'AZURE_OPENAI_ENDPOINT': secrets.azureOpenAIEndpoint,\n      'AZURE_OPENAI_DEPLOYMENT': secrets.azureOpenAIDeployment,\n      'AZURE_SPEECH_KEY': secrets.speechKey,\n      'AZURE_SPEECH_ENDPOINT': secrets.speechEndpoint,\n      'AZURE_FORM_RECOGNIZER_KEY': secrets.azureFormRecognizerKey || '',\n      'AZURE_FORM_RECOGNIZER_ENDPOINT': secrets.azureFormRecognizerEndpoint || '',\n      \n      // Firebase configuration\n      'FIREBASE_PROJECT_ID': secrets.firebaseProjectId,\n      'FIREBASE_CLIENT_EMAIL': secrets.firebaseClientEmail,\n      'FIREBASE_PRIVATE_KEY': secrets.firebasePrivateKey,\n      'FIREBASE_CLIENT_KEY': secrets.firebaseClientKey || ''\n    };\n  } catch (error) {\n    console.warn('Failed to get configuration from Azure, using environment variables:', error);\n    \n    // Fallback to environment variables only\n    return {\n      'AZURE_STORAGE_ACCOUNT': process.env.AZURE_STORAGE_ACCOUNT || 'prepbettrstorage684',\n      'AZURE_STORAGE_ACCOUNT_KEY': process.env.AZURE_STORAGE_ACCOUNT_KEY || '',\n      'AZURE_STORAGE_CONNECTION_STRING': process.env.AZURE_STORAGE_CONNECTION_STRING || '',\n      'AZURE_STORAGE_CONTAINER': process.env.AZURE_STORAGE_CONTAINER || 'resumes',\n      'STORAGE_PROVIDER': process.env.STORAGE_PROVIDER || 'firebase',\n      'AZURE_OPENAI_KEY': process.env.AZURE_OPENAI_KEY || '',\n      'AZURE_OPENAI_ENDPOINT': process.env.AZURE_OPENAI_ENDPOINT || '',\n      'AZURE_OPENAI_DEPLOYMENT': process.env.AZURE_OPENAI_DEPLOYMENT || '',\n      'AZURE_SPEECH_KEY': process.env.AZURE_SPEECH_KEY || process.env.SPEECH_KEY || '',\n      'AZURE_SPEECH_ENDPOINT': process.env.SPEECH_ENDPOINT || '',\n      'AZURE_FORM_RECOGNIZER_KEY': process.env.AZURE_FORM_RECOGNIZER_KEY || '',\n      'AZURE_FORM_RECOGNIZER_ENDPOINT': process.env.AZURE_FORM_RECOGNIZER_ENDPOINT || '',\n      'FIREBASE_PROJECT_ID': process.env.FIREBASE_PROJECT_ID || '',\n      'FIREBASE_CLIENT_EMAIL': process.env.FIREBASE_CLIENT_EMAIL || '',\n      'FIREBASE_PRIVATE_KEY': process.env.FIREBASE_PRIVATE_KEY || '',\n      // Use string concatenation to avoid Next.js inlining\n      'FIREBASE_CLIENT_KEY': process.env['NEXT_PUBLIC_' + 'FIREBASE_CLIENT_KEY'] || ''\n    };\n  }\n}\n\n/**\n * Get current Azure configuration (for debugging)\n */\nexport function getAzureConfig() {\n  const nextPublicPrefix = 'NEXT_PUBLIC_';\n  return {\n    keyVaultUri: AZURE_KEY_VAULT_URI,\n    hasSecretsCache: !!cachedSecrets,\n    environment: {\n      speechKey: !!process.env[nextPublicPrefix + 'SPEECH_KEY'],\n      speechEndpoint: !!process.env[nextPublicPrefix + 'SPEECH_ENDPOINT'],\n      azureOpenAIKey: !!process.env.AZURE_OPENAI_KEY,\n      azureOpenAIEndpoint: !!process.env.AZURE_OPENAI_ENDPOINT,\n      azureOpenAIDeployment: !!process.env.AZURE_OPENAI_DEPLOYMENT\n    }\n  };\n}\n"],"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","ignoreList":[]}