870acbfc8de5d8b9794503657ca99fb4
"use strict";

/* istanbul ignore next */
function cov_3mrpjxxel() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/services/keyword-optimizer-service.ts";
  var hash = "ed24ab5238893161905d51796c295a584ccf202a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/services/keyword-optimizer-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 75
        }
      },
      "2": {
        start: {
          line: 4,
          column: 31
        },
        end: {
          line: 4,
          column: 64
        }
      },
      "3": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 12,
          column: 9
        }
      },
      "4": {
        start: {
          line: 11,
          column: 12
        },
        end: {
          line: 11,
          column: 77
        }
      },
      "5": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 48
        }
      },
      "6": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "7": {
        start: {
          line: 17,
          column: 31
        },
        end: {
          line: 17,
          column: 65
        }
      },
      "8": {
        start: {
          line: 18,
          column: 28
        },
        end: {
          line: 18,
          column: 85
        }
      },
      "9": {
        start: {
          line: 20,
          column: 12
        },
        end: {
          line: 20,
          column: 73
        }
      },
      "10": {
        start: {
          line: 21,
          column: 31
        },
        end: {
          line: 23,
          column: 77
        }
      },
      "11": {
        start: {
          line: 24,
          column: 35
        },
        end: {
          line: 24,
          column: 113
        }
      },
      "12": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 27,
          column: 13
        }
      },
      "13": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 26,
          column: 72
        }
      },
      "14": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 72
        }
      },
      "15": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 31,
          column: 62
        }
      },
      "16": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 58
        }
      },
      "17": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "18": {
        start: {
          line: 37,
          column: 40
        },
        end: {
          line: 37,
          column: 130
        }
      },
      "19": {
        start: {
          line: 37,
          column: 64
        },
        end: {
          line: 37,
          column: 129
        }
      },
      "20": {
        start: {
          line: 38,
          column: 38
        },
        end: {
          line: 38,
          column: 40
        }
      },
      "21": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 73
        }
      },
      "22": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 51,
          column: 13
        }
      },
      "23": {
        start: {
          line: 41,
          column: 25
        },
        end: {
          line: 41,
          column: 26
        }
      },
      "24": {
        start: {
          line: 42,
          column: 32
        },
        end: {
          line: 42,
          column: 43
        }
      },
      "25": {
        start: {
          line: 43,
          column: 31
        },
        end: {
          line: 43,
          column: 53
        }
      },
      "26": {
        start: {
          line: 44,
          column: 35
        },
        end: {
          line: 46,
          column: 10
        }
      },
      "27": {
        start: {
          line: 47,
          column: 41
        },
        end: {
          line: 47,
          column: 119
        }
      },
      "28": {
        start: {
          line: 48,
          column: 16
        },
        end: {
          line: 50,
          column: 17
        }
      },
      "29": {
        start: {
          line: 49,
          column: 20
        },
        end: {
          line: 49,
          column: 105
        }
      },
      "30": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 37
        }
      },
      "31": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 69
        }
      },
      "32": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 65
        }
      },
      "33": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "34": {
        start: {
          line: 61,
          column: 27
        },
        end: {
          line: 72,
          column: 7
        }
      },
      "35": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 73
        }
      },
      "36": {
        start: {
          line: 75,
          column: 31
        },
        end: {
          line: 77,
          column: 10
        }
      },
      "37": {
        start: {
          line: 78,
          column: 27
        },
        end: {
          line: 78,
          column: 105
        }
      },
      "38": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 81,
          column: 13
        }
      },
      "39": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 80,
          column: 68
        }
      },
      "40": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 88,
          column: 13
        }
      },
      "41": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 83,
          column: 42
        }
      },
      "42": {
        start: {
          line: 87,
          column: 16
        },
        end: {
          line: 87,
          column: 60
        }
      },
      "43": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 74
        }
      },
      "44": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 70
        }
      },
      "45": {
        start: {
          line: 96,
          column: 27
        },
        end: {
          line: 96,
          column: 61
        }
      },
      "46": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "47": {
        start: {
          line: 98,
          column: 27
        },
        end: {
          line: 114,
          column: 7
        }
      },
      "48": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 73
        }
      },
      "49": {
        start: {
          line: 117,
          column: 31
        },
        end: {
          line: 119,
          column: 10
        }
      },
      "50": {
        start: {
          line: 120,
          column: 27
        },
        end: {
          line: 120,
          column: 105
        }
      },
      "51": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 123,
          column: 13
        }
      },
      "52": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 122,
          column: 58
        }
      },
      "53": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 130,
          column: 13
        }
      },
      "54": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 125,
          column: 42
        }
      },
      "55": {
        start: {
          line: 129,
          column: 16
        },
        end: {
          line: 129,
          column: 65
        }
      },
      "56": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 69
        }
      },
      "57": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 61
        }
      },
      "58": {
        start: {
          line: 138,
          column: 25
        },
        end: {
          line: 153,
          column: 25
        }
      },
      "59": {
        start: {
          line: 144,
          column: 48
        },
        end: {
          line: 144,
          column: 146
        }
      },
      "60": {
        start: {
          line: 146,
          column: 47
        },
        end: {
          line: 146,
          column: 110
        }
      },
      "61": {
        start: {
          line: 150,
          column: 50
        },
        end: {
          line: 150,
          column: 128
        }
      },
      "62": {
        start: {
          line: 152,
          column: 53
        },
        end: {
          line: 152,
          column: 102
        }
      },
      "63": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 154,
          column: 35
        }
      },
      "64": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 165,
          column: 37
        }
      },
      "65": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 204,
          column: 6
        }
      },
      "66": {
        start: {
          line: 207,
          column: 31
        },
        end: {
          line: 207,
          column: 74
        }
      },
      "67": {
        start: {
          line: 208,
          column: 24
        },
        end: {
          line: 208,
          column: 59
        }
      },
      "68": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 226,
          column: 6
        }
      },
      "69": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 238,
          column: 9
        }
      },
      "70": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 231,
          column: 48
        }
      },
      "71": {
        start: {
          line: 233,
          column: 16
        },
        end: {
          line: 233,
          column: 131
        }
      },
      "72": {
        start: {
          line: 233,
          column: 56
        },
        end: {
          line: 233,
          column: 118
        }
      },
      "73": {
        start: {
          line: 235,
          column: 16
        },
        end: {
          line: 235,
          column: 122
        }
      },
      "74": {
        start: {
          line: 237,
          column: 16
        },
        end: {
          line: 237,
          column: 26
        }
      },
      "75": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 260,
          column: 9
        }
      },
      "76": {
        start: {
          line: 243,
          column: 16
        },
        end: {
          line: 243,
          column: 52
        }
      },
      "77": {
        start: {
          line: 244,
          column: 16
        },
        end: {
          line: 244,
          column: 22
        }
      },
      "78": {
        start: {
          line: 247,
          column: 36
        },
        end: {
          line: 247,
          column: 94
        }
      },
      "79": {
        start: {
          line: 248,
          column: 16
        },
        end: {
          line: 253,
          column: 17
        }
      },
      "80": {
        start: {
          line: 249,
          column: 20
        },
        end: {
          line: 252,
          column: 22
        }
      },
      "81": {
        start: {
          line: 250,
          column: 70
        },
        end: {
          line: 250,
          column: 78
        }
      },
      "82": {
        start: {
          line: 251,
          column: 65
        },
        end: {
          line: 251,
          column: 73
        }
      },
      "83": {
        start: {
          line: 254,
          column: 16
        },
        end: {
          line: 254,
          column: 22
        }
      },
      "84": {
        start: {
          line: 258,
          column: 16
        },
        end: {
          line: 258,
          column: 71
        }
      },
      "85": {
        start: {
          line: 259,
          column: 16
        },
        end: {
          line: 259,
          column: 22
        }
      },
      "86": {
        start: {
          line: 263,
          column: 8
        },
        end: {
          line: 278,
          column: 9
        }
      },
      "87": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 264,
          column: 38
        }
      },
      "88": {
        start: {
          line: 268,
          column: 12
        },
        end: {
          line: 277,
          column: 14
        }
      },
      "89": {
        start: {
          line: 281,
          column: 24
        },
        end: {
          line: 281,
          column: 72
        }
      },
      "90": {
        start: {
          line: 282,
          column: 31
        },
        end: {
          line: 286,
          column: 9
        }
      },
      "91": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 287,
          column: 75
        }
      },
      "92": {
        start: {
          line: 287,
          column: 48
        },
        end: {
          line: 287,
          column: 73
        }
      },
      "93": {
        start: {
          line: 291,
          column: 8
        },
        end: {
          line: 296,
          column: 10
        }
      },
      "94": {
        start: {
          line: 299,
          column: 20
        },
        end: {
          line: 299,
          column: 22
        }
      },
      "95": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 302,
          column: 24
        }
      },
      "96": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 302,
          column: 24
        }
      },
      "97": {
        start: {
          line: 303,
          column: 8
        },
        end: {
          line: 304,
          column: 24
        }
      },
      "98": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 304,
          column: 24
        }
      },
      "99": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 306,
          column: 24
        }
      },
      "100": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 24
        }
      },
      "101": {
        start: {
          line: 307,
          column: 8
        },
        end: {
          line: 308,
          column: 23
        }
      },
      "102": {
        start: {
          line: 308,
          column: 12
        },
        end: {
          line: 308,
          column: 23
        }
      },
      "103": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 323,
          column: 10
        }
      },
      "104": {
        start: {
          line: 326,
          column: 0
        },
        end: {
          line: 326,
          column: 58
        }
      },
      "105": {
        start: {
          line: 327,
          column: 0
        },
        end: {
          line: 327,
          column: 72
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 18
          },
          end: {
            line: 8,
            column: 5
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 25
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 9
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 82
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        loc: {
          start: {
            line: 35,
            column: 108
          },
          end: {
            line: 58,
            column: 5
          }
        },
        line: 35
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 37,
            column: 53
          },
          end: {
            line: 37,
            column: 54
          }
        },
        loc: {
          start: {
            line: 37,
            column: 64
          },
          end: {
            line: 37,
            column: 129
          }
        },
        line: 37
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 59,
            column: 4
          },
          end: {
            line: 59,
            column: 5
          }
        },
        loc: {
          start: {
            line: 59,
            column: 78
          },
          end: {
            line: 94,
            column: 5
          }
        },
        line: 59
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 95,
            column: 4
          },
          end: {
            line: 95,
            column: 5
          }
        },
        loc: {
          start: {
            line: 95,
            column: 44
          },
          end: {
            line: 136,
            column: 5
          }
        },
        line: 95
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 137,
            column: 4
          },
          end: {
            line: 137,
            column: 5
          }
        },
        loc: {
          start: {
            line: 137,
            column: 34
          },
          end: {
            line: 155,
            column: 5
          }
        },
        line: 137
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 144,
            column: 41
          },
          end: {
            line: 144,
            column: 42
          }
        },
        loc: {
          start: {
            line: 144,
            column: 48
          },
          end: {
            line: 144,
            column: 146
          }
        },
        line: 144
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 146,
            column: 40
          },
          end: {
            line: 146,
            column: 41
          }
        },
        loc: {
          start: {
            line: 146,
            column: 47
          },
          end: {
            line: 146,
            column: 110
          }
        },
        line: 146
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 150,
            column: 39
          },
          end: {
            line: 150,
            column: 40
          }
        },
        loc: {
          start: {
            line: 150,
            column: 50
          },
          end: {
            line: 150,
            column: 128
          }
        },
        line: 150
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 152,
            column: 45
          },
          end: {
            line: 152,
            column: 46
          }
        },
        loc: {
          start: {
            line: 152,
            column: 53
          },
          end: {
            line: 152,
            column: 102
          }
        },
        line: 152
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 156,
            column: 4
          },
          end: {
            line: 156,
            column: 5
          }
        },
        loc: {
          start: {
            line: 156,
            column: 35
          },
          end: {
            line: 166,
            column: 5
          }
        },
        line: 156
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 167,
            column: 4
          },
          end: {
            line: 167,
            column: 5
          }
        },
        loc: {
          start: {
            line: 167,
            column: 73
          },
          end: {
            line: 205,
            column: 5
          }
        },
        line: 167
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 206,
            column: 4
          },
          end: {
            line: 206,
            column: 5
          }
        },
        loc: {
          start: {
            line: 206,
            column: 65
          },
          end: {
            line: 227,
            column: 5
          }
        },
        line: 206
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 228,
            column: 4
          },
          end: {
            line: 228,
            column: 5
          }
        },
        loc: {
          start: {
            line: 228,
            column: 43
          },
          end: {
            line: 239,
            column: 5
          }
        },
        line: 228
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 233,
            column: 49
          },
          end: {
            line: 233,
            column: 50
          }
        },
        loc: {
          start: {
            line: 233,
            column: 56
          },
          end: {
            line: 233,
            column: 118
          }
        },
        line: 233
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 240,
            column: 4
          },
          end: {
            line: 240,
            column: 5
          }
        },
        loc: {
          start: {
            line: 240,
            column: 77
          },
          end: {
            line: 261,
            column: 5
          }
        },
        line: 240
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 250,
            column: 65
          },
          end: {
            line: 250,
            column: 66
          }
        },
        loc: {
          start: {
            line: 250,
            column: 70
          },
          end: {
            line: 250,
            column: 78
          }
        },
        line: 250
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 251,
            column: 60
          },
          end: {
            line: 251,
            column: 61
          }
        },
        loc: {
          start: {
            line: 251,
            column: 65
          },
          end: {
            line: 251,
            column: 73
          }
        },
        line: 251
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 262,
            column: 4
          },
          end: {
            line: 262,
            column: 5
          }
        },
        loc: {
          start: {
            line: 262,
            column: 44
          },
          end: {
            line: 279,
            column: 5
          }
        },
        line: 262
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 280,
            column: 4
          },
          end: {
            line: 280,
            column: 5
          }
        },
        loc: {
          start: {
            line: 280,
            column: 39
          },
          end: {
            line: 288,
            column: 5
          }
        },
        line: 280
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 287,
            column: 37
          },
          end: {
            line: 287,
            column: 38
          }
        },
        loc: {
          start: {
            line: 287,
            column: 48
          },
          end: {
            line: 287,
            column: 73
          }
        },
        line: 287
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 289,
            column: 4
          },
          end: {
            line: 289,
            column: 5
          }
        },
        loc: {
          start: {
            line: 289,
            column: 37
          },
          end: {
            line: 297,
            column: 5
          }
        },
        line: 289
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 298,
            column: 4
          },
          end: {
            line: 298,
            column: 5
          }
        },
        loc: {
          start: {
            line: 298,
            column: 41
          },
          end: {
            line: 324,
            column: 5
          }
        },
        line: 298
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 10,
            column: 8
          },
          end: {
            line: 12,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 8
          },
          end: {
            line: 12,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "1": {
        loc: {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 18,
            column: 45
          },
          end: {
            line: 18,
            column: 80
          }
        }, {
          start: {
            line: 18,
            column: 83
          },
          end: {
            line: 18,
            column: 85
          }
        }],
        line: 18
      },
      "2": {
        loc: {
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 27,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 27,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "3": {
        loc: {
          start: {
            line: 35,
            column: 60
          },
          end: {
            line: 35,
            column: 106
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 35,
            column: 71
          },
          end: {
            line: 35,
            column: 106
          }
        }],
        line: 35
      },
      "4": {
        loc: {
          start: {
            line: 48,
            column: 16
          },
          end: {
            line: 50,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 16
          },
          end: {
            line: 50,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "5": {
        loc: {
          start: {
            line: 59,
            column: 53
          },
          end: {
            line: 59,
            column: 76
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 59,
            column: 71
          },
          end: {
            line: 59,
            column: 76
          }
        }],
        line: 59
      },
      "6": {
        loc: {
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 81,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 81,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "7": {
        loc: {
          start: {
            line: 121,
            column: 12
          },
          end: {
            line: 123,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 121,
            column: 12
          },
          end: {
            line: 123,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 121
      },
      "8": {
        loc: {
          start: {
            line: 142,
            column: 12
          },
          end: {
            line: 142,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 142,
            column: 33
          },
          end: {
            line: 142,
            column: 65
          }
        }, {
          start: {
            line: 142,
            column: 68
          },
          end: {
            line: 142,
            column: 70
          }
        }],
        line: 142
      },
      "9": {
        loc: {
          start: {
            line: 159,
            column: 12
          },
          end: {
            line: 159,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 159,
            column: 37
          },
          end: {
            line: 159,
            column: 73
          }
        }, {
          start: {
            line: 159,
            column: 76
          },
          end: {
            line: 159,
            column: 78
          }
        }],
        line: 159
      },
      "10": {
        loc: {
          start: {
            line: 163,
            column: 12
          },
          end: {
            line: 163,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 163,
            column: 38
          },
          end: {
            line: 163,
            column: 76
          }
        }, {
          start: {
            line: 163,
            column: 79
          },
          end: {
            line: 163,
            column: 81
          }
        }],
        line: 163
      },
      "11": {
        loc: {
          start: {
            line: 164,
            column: 12
          },
          end: {
            line: 164,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 164,
            column: 45
          },
          end: {
            line: 164,
            column: 98
          }
        }, {
          start: {
            line: 164,
            column: 101
          },
          end: {
            line: 164,
            column: 103
          }
        }],
        line: 164
      },
      "12": {
        loc: {
          start: {
            line: 169,
            column: 52
          },
          end: {
            line: 169,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 169,
            column: 62
          },
          end: {
            line: 169,
            column: 101
          }
        }, {
          start: {
            line: 169,
            column: 104
          },
          end: {
            line: 169,
            column: 106
          }
        }],
        line: 169
      },
      "13": {
        loc: {
          start: {
            line: 174,
            column: 8
          },
          end: {
            line: 174,
            column: 53
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 174,
            column: 18
          },
          end: {
            line: 174,
            column: 48
          }
        }, {
          start: {
            line: 174,
            column: 51
          },
          end: {
            line: 174,
            column: 53
          }
        }],
        line: 174
      },
      "14": {
        loc: {
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 176,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 176,
            column: 21
          },
          end: {
            line: 176,
            column: 49
          }
        }, {
          start: {
            line: 176,
            column: 52
          },
          end: {
            line: 176,
            column: 54
          }
        }],
        line: 176
      },
      "15": {
        loc: {
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 177,
            column: 66
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 177,
            column: 25
          },
          end: {
            line: 177,
            column: 61
          }
        }, {
          start: {
            line: 177,
            column: 64
          },
          end: {
            line: 177,
            column: 66
          }
        }],
        line: 177
      },
      "16": {
        loc: {
          start: {
            line: 229,
            column: 8
          },
          end: {
            line: 238,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 231,
            column: 48
          }
        }, {
          start: {
            line: 232,
            column: 12
          },
          end: {
            line: 233,
            column: 131
          }
        }, {
          start: {
            line: 234,
            column: 12
          },
          end: {
            line: 235,
            column: 122
          }
        }, {
          start: {
            line: 236,
            column: 12
          },
          end: {
            line: 237,
            column: 26
          }
        }],
        line: 229
      },
      "17": {
        loc: {
          start: {
            line: 231,
            column: 23
          },
          end: {
            line: 231,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 231,
            column: 23
          },
          end: {
            line: 231,
            column: 41
          }
        }, {
          start: {
            line: 231,
            column: 45
          },
          end: {
            line: 231,
            column: 47
          }
        }],
        line: 231
      },
      "18": {
        loc: {
          start: {
            line: 241,
            column: 8
          },
          end: {
            line: 260,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 242,
            column: 12
          },
          end: {
            line: 244,
            column: 22
          }
        }, {
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 254,
            column: 22
          }
        }, {
          start: {
            line: 255,
            column: 12
          },
          end: {
            line: 259,
            column: 22
          }
        }],
        line: 241
      },
      "19": {
        loc: {
          start: {
            line: 248,
            column: 16
          },
          end: {
            line: 253,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 248,
            column: 16
          },
          end: {
            line: 253,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 248
      },
      "20": {
        loc: {
          start: {
            line: 301,
            column: 8
          },
          end: {
            line: 302,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 301,
            column: 8
          },
          end: {
            line: 302,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 301
      },
      "21": {
        loc: {
          start: {
            line: 303,
            column: 8
          },
          end: {
            line: 304,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 303,
            column: 8
          },
          end: {
            line: 304,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 303
      },
      "22": {
        loc: {
          start: {
            line: 305,
            column: 8
          },
          end: {
            line: 306,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 305,
            column: 8
          },
          end: {
            line: 306,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 305
      },
      "23": {
        loc: {
          start: {
            line: 307,
            column: 8
          },
          end: {
            line: 308,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 307,
            column: 8
          },
          end: {
            line: 308,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 307
      },
      "24": {
        loc: {
          start: {
            line: 313,
            column: 26
          },
          end: {
            line: 313,
            column: 46
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 313,
            column: 39
          },
          end: {
            line: 313,
            column: 41
          }
        }, {
          start: {
            line: 313,
            column: 44
          },
          end: {
            line: 313,
            column: 46
          }
        }],
        line: 313
      },
      "25": {
        loc: {
          start: {
            line: 315,
            column: 25
          },
          end: {
            line: 315,
            column: 45
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 315,
            column: 38
          },
          end: {
            line: 315,
            column: 40
          }
        }, {
          start: {
            line: 315,
            column: 43
          },
          end: {
            line: 315,
            column: 45
          }
        }],
        line: 315
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0, 0],
      "5": [0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0, 0, 0],
      "17": [0, 0],
      "18": [0, 0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/services/keyword-optimizer-service.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/services/keyword-optimizer-service.ts"],
      sourcesContent: ["import { ResumeData } from './resume-export-service';\nimport { migrationOpenAIClient } from '@/lib/azure-ai-foundry/clients/migration-wrapper';\nimport { azureOpenAIService } from './azure-openai-service';\n\nexport interface KeywordAnalysis {\n  currentKeywords: string[];\n  missingKeywords: string[];\n  suggestedImprovements: Array<{\n    section: string;\n    original: string;\n    suggested: string;\n    keywords: string[];\n    impact: 'high' | 'medium' | 'low';\n  }>;\n  score: number;\n  industryAlignment: {\n    score: number;\n    recommendations: string[];\n  };\n}\n\nexport interface JobDescription {\n  title: string;\n  company?: string;\n  requirements: string[];\n  preferredSkills: string[];\n  responsibilities: string[];\n  industry?: string;\n  experienceLevel?: string;\n}\n\nexport class KeywordOptimizerService {\n  private static instance: KeywordOptimizerService;\n\n  private constructor() {\n    // No initialization needed for Azure OpenAI service\n  }\n\n  public static getInstance(): KeywordOptimizerService {\n    if (!KeywordOptimizerService.instance) {\n      KeywordOptimizerService.instance = new KeywordOptimizerService();\n    }\n    return KeywordOptimizerService.instance;\n  }\n\n  async analyzeKeywords(\n    resumeData: ResumeData, \n    jobDescription?: JobDescription,\n    targetRole?: string,\n    targetIndustry?: string\n  ): Promise<KeywordAnalysis> {\n    try {\n      const resumeText = this.extractResumeText(resumeData);\n      const jobText = jobDescription ? this.extractJobText(jobDescription) : '';\n\n      // Ensure Azure OpenAI service is initialized\n      await azureOpenAIService.initialize();\n      \n      const fullPrompt = `You are an expert ATS (Applicant Tracking System) and recruitment specialist. Analyze resumes for keyword optimization and provide actionable recommendations.\n\n${this.buildAnalysisPrompt(resumeText, jobText, targetRole, targetIndustry)}`;\n      \n      const analysisResult = await azureOpenAIService.generateCompletion(fullPrompt);\n      if (!analysisResult) {\n        throw new Error('No analysis result from Azure OpenAI');\n      }\n\n      return this.parseAnalysisResult(analysisResult, resumeData);\n    } catch (error) {\n      console.error('Error analyzing keywords:', error);\n      throw new Error('Failed to analyze keywords');\n    }\n  }\n\n  async optimizeResumeContent(\n    resumeData: ResumeData,\n    jobDescription: JobDescription,\n    sections: string[] = ['summary', 'experience', 'skills']\n  ): Promise<Partial<ResumeData>> {\n    try {\n      const optimizationPrompts = sections.map(section => \n        this.buildOptimizationPrompt(resumeData, jobDescription, section)\n      );\n\n      const optimizedSections: Partial<ResumeData> = {};\n\n      // Ensure Azure OpenAI service is initialized\n      await azureOpenAIService.initialize();\n      \n      for (let i = 0; i < sections.length; i++) {\n        const section = sections[i];\n        const prompt = optimizationPrompts[i];\n\n        const fullPrompt = `You are an expert resume writer specializing in ATS optimization. Rewrite resume sections to include relevant keywords while maintaining authenticity and readability.\n\n${prompt}`;\n\n        const optimizedContent = await azureOpenAIService.generateCompletion(fullPrompt);\n        if (optimizedContent) {\n          this.applyOptimizedContent(optimizedSections, section, optimizedContent, resumeData);\n        }\n      }\n\n      return optimizedSections;\n    } catch (error) {\n      console.error('Error optimizing resume content:', error);\n      throw new Error('Failed to optimize resume content');\n    }\n  }\n\n  async generateKeywordSuggestions(\n    role: string,\n    industry: string,\n    experienceLevel: string = 'mid'\n  ): Promise<{\n    technical: string[];\n    soft: string[];\n    industrySpecific: string[];\n    trending: string[];\n  }> {\n    try {\n      const prompt = `\n        Generate relevant keywords for a ${experienceLevel}-level ${role} position in the ${industry} industry.\n        \n        Provide keywords in these categories:\n        1. Technical skills and tools\n        2. Soft skills and competencies\n        3. Industry-specific terms and knowledge\n        4. Trending skills and technologies\n        \n        Format as JSON with arrays for each category.\n        Focus on keywords that are commonly searched by ATS systems and recruiters.\n      `;\n\n      // Ensure Azure OpenAI service is initialized\n      await azureOpenAIService.initialize();\n      \n      const fullPrompt = `You are a recruitment expert who understands ATS systems and keyword optimization.\n\n${prompt}`;\n\n      const result = await azureOpenAIService.generateCompletion(fullPrompt);\n      if (!result) {\n        throw new Error('No keyword suggestions generated');\n      }\n\n      try {\n        return JSON.parse(result);\n      } catch {\n        // Fallback parsing if JSON format is not perfect\n        return this.parseKeywordSuggestions(result);\n      }\n    } catch (error) {\n      console.error('Error generating keyword suggestions:', error);\n      throw new Error('Failed to generate keyword suggestions');\n    }\n  }\n\n  async scoreAtsCompatibility(resumeData: ResumeData): Promise<{\n    overallScore: number;\n    sectionScores: {\n      formatting: number;\n      keywords: number;\n      structure: number;\n      content: number;\n    };\n    recommendations: string[];\n  }> {\n    const resumeText = this.extractResumeText(resumeData);\n    \n    try {\n      const prompt = `\n        Analyze this resume for ATS (Applicant Tracking System) compatibility and provide a detailed score.\n        \n        Resume Content:\n        ${resumeText}\n        \n        Evaluate:\n        1. Formatting (use of standard sections, clear headings, proper structure)\n        2. Keywords (relevant industry terms, skills, technologies)\n        3. Structure (logical flow, proper organization)\n        4. Content (quantifiable achievements, action verbs, relevance)\n        \n        Provide scores out of 100 for each category and an overall score.\n        Include specific recommendations for improvement.\n        \n        Format as JSON with scores and recommendations array.\n      `;\n\n      // Ensure Azure OpenAI service is initialized\n      await azureOpenAIService.initialize();\n      \n      const fullPrompt = `You are an ATS expert who evaluates resume compatibility with automated screening systems.\n\n${prompt}`;\n\n      const result = await azureOpenAIService.generateCompletion(fullPrompt);\n      if (!result) {\n        throw new Error('No ATS score generated');\n      }\n\n      try {\n        return JSON.parse(result);\n      } catch {\n        // Fallback scoring\n        return this.generateFallbackATSScore(resumeData);\n      }\n    } catch (error) {\n      console.error('Error scoring ATS compatibility:', error);\n      return this.generateFallbackATSScore(resumeData);\n    }\n  }\n\n  private extractResumeText(resumeData: ResumeData): string {\n    const sections = [\n      `Name: ${resumeData.personalInfo.name}`,\n      `Email: ${resumeData.personalInfo.email}`,\n      `Location: ${resumeData.personalInfo.location}`,\n      resumeData.summary ? `Summary: ${resumeData.summary}` : '',\n      'Experience:',\n      ...resumeData.experience.map(exp => \n        `${exp.title} at ${exp.company} (${exp.startDate} - ${exp.endDate}): ${exp.description.join(' ')}`\n      ),\n      'Education:',\n      ...resumeData.education.map(edu => \n        `${edu.degree} from ${edu.institution} (${edu.graduationDate})`\n      ),\n      `Technical Skills: ${resumeData.skills.technical.join(', ')}`,\n      `Soft Skills: ${resumeData.skills.soft.join(', ')}`,\n      'Projects:',\n      ...resumeData.projects.map(project => \n        `${project.name}: ${project.description} (${project.technologies.join(', ')})`\n      ),\n      'Certifications:',\n      ...resumeData.certifications.map(cert => \n        `${cert.name} from ${cert.issuer} (${cert.date})`\n      )\n    ].filter(Boolean);\n\n    return sections.join('\\n');\n  }\n\n  private extractJobText(jobDescription: JobDescription): string {\n    return [\n      `Position: ${jobDescription.title}`,\n      jobDescription.company ? `Company: ${jobDescription.company}` : '',\n      `Requirements: ${jobDescription.requirements.join(', ')}`,\n      `Preferred Skills: ${jobDescription.preferredSkills.join(', ')}`,\n      `Responsibilities: ${jobDescription.responsibilities.join(', ')}`,\n      jobDescription.industry ? `Industry: ${jobDescription.industry}` : '',\n      jobDescription.experienceLevel ? `Experience Level: ${jobDescription.experienceLevel}` : ''\n    ].filter(Boolean).join('\\n');\n  }\n\n  private buildAnalysisPrompt(\n    resumeText: string, \n    jobText: string, \n    targetRole?: string, \n    targetIndustry?: string\n  ): string {\n    return `\n      Analyze this resume for keyword optimization${jobText ? ' against the provided job description' : ''}.\n\n      Resume:\n      ${resumeText}\n\n      ${jobText ? `Job Description:\\n${jobText}` : ''}\n\n      ${targetRole ? `Target Role: ${targetRole}` : ''}\n      ${targetIndustry ? `Target Industry: ${targetIndustry}` : ''}\n\n      Provide analysis in this JSON format:\n      {\n        \"currentKeywords\": [\"keyword1\", \"keyword2\"],\n        \"missingKeywords\": [\"missing1\", \"missing2\"],\n        \"suggestedImprovements\": [\n          {\n            \"section\": \"experience\",\n            \"original\": \"original text\",\n            \"suggested\": \"improved text\",\n            \"keywords\": [\"added keywords\"],\n            \"impact\": \"high\"\n          }\n        ],\n        \"score\": 75,\n        \"industryAlignment\": {\n          \"score\": 80,\n          \"recommendations\": [\"recommendation1\", \"recommendation2\"]\n        }\n      }\n\n      Focus on:\n      1. Identifying missing critical keywords\n      2. Suggesting natural keyword integration\n      3. Maintaining authenticity while optimizing\n      4. Prioritizing high-impact improvements\n    `;\n  }\n\n  private buildOptimizationPrompt(\n    resumeData: ResumeData, \n    jobDescription: JobDescription, \n    section: string\n  ): string {\n    const sectionContent = this.getSectionContent(resumeData, section);\n    const jobText = this.extractJobText(jobDescription);\n\n    return `\n      Optimize this ${section} section for ATS compatibility while maintaining authenticity.\n\n      Current ${section}:\n      ${sectionContent}\n\n      Job Description:\n      ${jobText}\n\n      Requirements:\n      1. Include relevant keywords naturally\n      2. Maintain the original meaning and truthfulness\n      3. Use action verbs and quantifiable achievements\n      4. Ensure ATS-friendly formatting\n      5. Keep the tone professional\n\n      Provide only the optimized text without additional formatting or explanations.\n    `;\n  }\n\n  private getSectionContent(resumeData: ResumeData, section: string): string {\n    switch (section) {\n      case 'summary':\n        return resumeData.summary || '';\n      case 'experience':\n        return resumeData.experience.map(exp => \n          `${exp.title} at ${exp.company}: ${exp.description.join(' ')}`\n        ).join('\\n');\n      case 'skills':\n        return `Technical: ${resumeData.skills.technical.join(', ')}; Soft: ${resumeData.skills.soft.join(', ')}`;\n      default:\n        return '';\n    }\n  }\n\n  private applyOptimizedContent(\n    optimizedSections: Partial<ResumeData>, \n    section: string, \n    content: string, \n    originalData: ResumeData\n  ): void {\n    switch (section) {\n      case 'summary':\n        optimizedSections.summary = content;\n        break;\n      case 'skills':\n        // Parse optimized skills content\n        const skillsMatch = content.match(/Technical:\\s*([^;]+);?\\s*Soft:\\s*([^;]+)/i);\n        if (skillsMatch) {\n          optimizedSections.skills = {\n            technical: skillsMatch[1].split(',').map(s => s.trim()),\n            soft: skillsMatch[2].split(',').map(s => s.trim())\n          };\n        }\n        break;\n      case 'experience':\n        // For experience, we'd need more sophisticated parsing\n        // For now, keep original structure but note optimization was attempted\n        optimizedSections.experience = originalData.experience;\n        break;\n    }\n  }\n\n  private parseAnalysisResult(result: string, resumeData: ResumeData): KeywordAnalysis {\n    try {\n      return JSON.parse(result);\n    } catch {\n      // Fallback analysis if JSON parsing fails\n      return {\n        currentKeywords: this.extractCurrentKeywords(resumeData),\n        missingKeywords: [],\n        suggestedImprovements: [],\n        score: 50,\n        industryAlignment: {\n          score: 50,\n          recommendations: ['Unable to perform detailed analysis. Please try again.']\n        }\n      };\n    }\n  }\n\n  private extractCurrentKeywords(resumeData: ResumeData): string[] {\n    const allText = this.extractResumeText(resumeData).toLowerCase();\n    const commonKeywords = [\n      'javascript', 'python', 'react', 'node.js', 'sql', 'git', 'aws', 'docker',\n      'leadership', 'teamwork', 'communication', 'problem-solving', 'project management',\n      'agile', 'scrum', 'ci/cd', 'api', 'database', 'frontend', 'backend', 'full-stack'\n    ];\n\n    return commonKeywords.filter(keyword => allText.includes(keyword));\n  }\n\n  private parseKeywordSuggestions(content: string) {\n    // Simple parsing fallback\n    return {\n      technical: ['React', 'Node.js', 'TypeScript', 'API Development', 'Database Design'],\n      soft: ['Leadership', 'Communication', 'Problem Solving', 'Team Collaboration', 'Adaptability'],\n      industrySpecific: ['Software Development', 'Web Technologies', 'Cloud Computing', 'DevOps', 'Agile Methodology'],\n      trending: ['AI/ML', 'Microservices', 'Kubernetes', 'GraphQL', 'Serverless Architecture']\n    };\n  }\n\n  private generateFallbackATSScore(resumeData: ResumeData) {\n    let score = 50;\n    \n    // Basic scoring based on presence of sections\n    if (resumeData.summary) score += 10;\n    if (resumeData.experience.length > 0) score += 20;\n    if (resumeData.skills.technical.length > 0) score += 15;\n    if (resumeData.education.length > 0) score += 5;\n\n    return {\n      overallScore: Math.min(score, 100),\n      sectionScores: {\n        formatting: 70,\n        keywords: score > 70 ? 75 : 50,\n        structure: 65,\n        content: score > 80 ? 80 : 60\n      },\n      recommendations: [\n        'Add more specific technical keywords',\n        'Include quantifiable achievements',\n        'Use industry-standard terminology',\n        'Ensure consistent formatting'\n      ]\n    };\n  }\n}\n\nexport const keywordOptimizerService = KeywordOptimizerService.getInstance();\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ed24ab5238893161905d51796c295a584ccf202a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_3mrpjxxel = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_3mrpjxxel();
cov_3mrpjxxel().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_3mrpjxxel().s[1]++;
exports.keywordOptimizerService = exports.KeywordOptimizerService = void 0;
const azure_openai_service_1 =
/* istanbul ignore next */
(cov_3mrpjxxel().s[2]++, require("./azure-openai-service"));
class KeywordOptimizerService {
  constructor() {
    /* istanbul ignore next */
    cov_3mrpjxxel().f[0]++;
  } // No initialization needed for Azure OpenAI service
  static getInstance() {
    /* istanbul ignore next */
    cov_3mrpjxxel().f[1]++;
    cov_3mrpjxxel().s[3]++;
    if (!KeywordOptimizerService.instance) {
      /* istanbul ignore next */
      cov_3mrpjxxel().b[0][0]++;
      cov_3mrpjxxel().s[4]++;
      KeywordOptimizerService.instance = new KeywordOptimizerService();
    } else
    /* istanbul ignore next */
    {
      cov_3mrpjxxel().b[0][1]++;
    }
    cov_3mrpjxxel().s[5]++;
    return KeywordOptimizerService.instance;
  }
  async analyzeKeywords(resumeData, jobDescription, targetRole, targetIndustry) {
    /* istanbul ignore next */
    cov_3mrpjxxel().f[2]++;
    cov_3mrpjxxel().s[6]++;
    try {
      const resumeText =
      /* istanbul ignore next */
      (cov_3mrpjxxel().s[7]++, this.extractResumeText(resumeData));
      const jobText =
      /* istanbul ignore next */
      (cov_3mrpjxxel().s[8]++, jobDescription ?
      /* istanbul ignore next */
      (cov_3mrpjxxel().b[1][0]++, this.extractJobText(jobDescription)) :
      /* istanbul ignore next */
      (cov_3mrpjxxel().b[1][1]++, ''));
      // Ensure Azure OpenAI service is initialized
      /* istanbul ignore next */
      cov_3mrpjxxel().s[9]++;
      await azure_openai_service_1.azureOpenAIService.initialize();
      const fullPrompt =
      /* istanbul ignore next */
      (cov_3mrpjxxel().s[10]++, `You are an expert ATS (Applicant Tracking System) and recruitment specialist. Analyze resumes for keyword optimization and provide actionable recommendations.

${this.buildAnalysisPrompt(resumeText, jobText, targetRole, targetIndustry)}`);
      const analysisResult =
      /* istanbul ignore next */
      (cov_3mrpjxxel().s[11]++, await azure_openai_service_1.azureOpenAIService.generateCompletion(fullPrompt));
      /* istanbul ignore next */
      cov_3mrpjxxel().s[12]++;
      if (!analysisResult) {
        /* istanbul ignore next */
        cov_3mrpjxxel().b[2][0]++;
        cov_3mrpjxxel().s[13]++;
        throw new Error('No analysis result from Azure OpenAI');
      } else
      /* istanbul ignore next */
      {
        cov_3mrpjxxel().b[2][1]++;
      }
      cov_3mrpjxxel().s[14]++;
      return this.parseAnalysisResult(analysisResult, resumeData);
    } catch (error) {
      /* istanbul ignore next */
      cov_3mrpjxxel().s[15]++;
      console.error('Error analyzing keywords:', error);
      /* istanbul ignore next */
      cov_3mrpjxxel().s[16]++;
      throw new Error('Failed to analyze keywords');
    }
  }
  async optimizeResumeContent(resumeData, jobDescription, sections =
  /* istanbul ignore next */
  (cov_3mrpjxxel().b[3][0]++, ['summary', 'experience', 'skills'])) {
    /* istanbul ignore next */
    cov_3mrpjxxel().f[3]++;
    cov_3mrpjxxel().s[17]++;
    try {
      const optimizationPrompts =
      /* istanbul ignore next */
      (cov_3mrpjxxel().s[18]++, sections.map(section => {
        /* istanbul ignore next */
        cov_3mrpjxxel().f[4]++;
        cov_3mrpjxxel().s[19]++;
        return this.buildOptimizationPrompt(resumeData, jobDescription, section);
      }));
      const optimizedSections =
      /* istanbul ignore next */
      (cov_3mrpjxxel().s[20]++, {});
      // Ensure Azure OpenAI service is initialized
      /* istanbul ignore next */
      cov_3mrpjxxel().s[21]++;
      await azure_openai_service_1.azureOpenAIService.initialize();
      /* istanbul ignore next */
      cov_3mrpjxxel().s[22]++;
      for (let i =
      /* istanbul ignore next */
      (cov_3mrpjxxel().s[23]++, 0); i < sections.length; i++) {
        const section =
        /* istanbul ignore next */
        (cov_3mrpjxxel().s[24]++, sections[i]);
        const prompt =
        /* istanbul ignore next */
        (cov_3mrpjxxel().s[25]++, optimizationPrompts[i]);
        const fullPrompt =
        /* istanbul ignore next */
        (cov_3mrpjxxel().s[26]++, `You are an expert resume writer specializing in ATS optimization. Rewrite resume sections to include relevant keywords while maintaining authenticity and readability.

${prompt}`);
        const optimizedContent =
        /* istanbul ignore next */
        (cov_3mrpjxxel().s[27]++, await azure_openai_service_1.azureOpenAIService.generateCompletion(fullPrompt));
        /* istanbul ignore next */
        cov_3mrpjxxel().s[28]++;
        if (optimizedContent) {
          /* istanbul ignore next */
          cov_3mrpjxxel().b[4][0]++;
          cov_3mrpjxxel().s[29]++;
          this.applyOptimizedContent(optimizedSections, section, optimizedContent, resumeData);
        } else
        /* istanbul ignore next */
        {
          cov_3mrpjxxel().b[4][1]++;
        }
      }
      /* istanbul ignore next */
      cov_3mrpjxxel().s[30]++;
      return optimizedSections;
    } catch (error) {
      /* istanbul ignore next */
      cov_3mrpjxxel().s[31]++;
      console.error('Error optimizing resume content:', error);
      /* istanbul ignore next */
      cov_3mrpjxxel().s[32]++;
      throw new Error('Failed to optimize resume content');
    }
  }
  async generateKeywordSuggestions(role, industry, experienceLevel =
  /* istanbul ignore next */
  (cov_3mrpjxxel().b[5][0]++, 'mid')) {
    /* istanbul ignore next */
    cov_3mrpjxxel().f[5]++;
    cov_3mrpjxxel().s[33]++;
    try {
      const prompt =
      /* istanbul ignore next */
      (cov_3mrpjxxel().s[34]++, `
        Generate relevant keywords for a ${experienceLevel}-level ${role} position in the ${industry} industry.
        
        Provide keywords in these categories:
        1. Technical skills and tools
        2. Soft skills and competencies
        3. Industry-specific terms and knowledge
        4. Trending skills and technologies
        
        Format as JSON with arrays for each category.
        Focus on keywords that are commonly searched by ATS systems and recruiters.
      `);
      // Ensure Azure OpenAI service is initialized
      /* istanbul ignore next */
      cov_3mrpjxxel().s[35]++;
      await azure_openai_service_1.azureOpenAIService.initialize();
      const fullPrompt =
      /* istanbul ignore next */
      (cov_3mrpjxxel().s[36]++, `You are a recruitment expert who understands ATS systems and keyword optimization.

${prompt}`);
      const result =
      /* istanbul ignore next */
      (cov_3mrpjxxel().s[37]++, await azure_openai_service_1.azureOpenAIService.generateCompletion(fullPrompt));
      /* istanbul ignore next */
      cov_3mrpjxxel().s[38]++;
      if (!result) {
        /* istanbul ignore next */
        cov_3mrpjxxel().b[6][0]++;
        cov_3mrpjxxel().s[39]++;
        throw new Error('No keyword suggestions generated');
      } else
      /* istanbul ignore next */
      {
        cov_3mrpjxxel().b[6][1]++;
      }
      cov_3mrpjxxel().s[40]++;
      try {
        /* istanbul ignore next */
        cov_3mrpjxxel().s[41]++;
        return JSON.parse(result);
      } catch (_a) {
        /* istanbul ignore next */
        cov_3mrpjxxel().s[42]++;
        // Fallback parsing if JSON format is not perfect
        return this.parseKeywordSuggestions(result);
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_3mrpjxxel().s[43]++;
      console.error('Error generating keyword suggestions:', error);
      /* istanbul ignore next */
      cov_3mrpjxxel().s[44]++;
      throw new Error('Failed to generate keyword suggestions');
    }
  }
  async scoreAtsCompatibility(resumeData) {
    /* istanbul ignore next */
    cov_3mrpjxxel().f[6]++;
    const resumeText =
    /* istanbul ignore next */
    (cov_3mrpjxxel().s[45]++, this.extractResumeText(resumeData));
    /* istanbul ignore next */
    cov_3mrpjxxel().s[46]++;
    try {
      const prompt =
      /* istanbul ignore next */
      (cov_3mrpjxxel().s[47]++, `
        Analyze this resume for ATS (Applicant Tracking System) compatibility and provide a detailed score.
        
        Resume Content:
        ${resumeText}
        
        Evaluate:
        1. Formatting (use of standard sections, clear headings, proper structure)
        2. Keywords (relevant industry terms, skills, technologies)
        3. Structure (logical flow, proper organization)
        4. Content (quantifiable achievements, action verbs, relevance)
        
        Provide scores out of 100 for each category and an overall score.
        Include specific recommendations for improvement.
        
        Format as JSON with scores and recommendations array.
      `);
      // Ensure Azure OpenAI service is initialized
      /* istanbul ignore next */
      cov_3mrpjxxel().s[48]++;
      await azure_openai_service_1.azureOpenAIService.initialize();
      const fullPrompt =
      /* istanbul ignore next */
      (cov_3mrpjxxel().s[49]++, `You are an ATS expert who evaluates resume compatibility with automated screening systems.

${prompt}`);
      const result =
      /* istanbul ignore next */
      (cov_3mrpjxxel().s[50]++, await azure_openai_service_1.azureOpenAIService.generateCompletion(fullPrompt));
      /* istanbul ignore next */
      cov_3mrpjxxel().s[51]++;
      if (!result) {
        /* istanbul ignore next */
        cov_3mrpjxxel().b[7][0]++;
        cov_3mrpjxxel().s[52]++;
        throw new Error('No ATS score generated');
      } else
      /* istanbul ignore next */
      {
        cov_3mrpjxxel().b[7][1]++;
      }
      cov_3mrpjxxel().s[53]++;
      try {
        /* istanbul ignore next */
        cov_3mrpjxxel().s[54]++;
        return JSON.parse(result);
      } catch (_a) {
        /* istanbul ignore next */
        cov_3mrpjxxel().s[55]++;
        // Fallback scoring
        return this.generateFallbackATSScore(resumeData);
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_3mrpjxxel().s[56]++;
      console.error('Error scoring ATS compatibility:', error);
      /* istanbul ignore next */
      cov_3mrpjxxel().s[57]++;
      return this.generateFallbackATSScore(resumeData);
    }
  }
  extractResumeText(resumeData) {
    /* istanbul ignore next */
    cov_3mrpjxxel().f[7]++;
    const sections =
    /* istanbul ignore next */
    (cov_3mrpjxxel().s[58]++, [`Name: ${resumeData.personalInfo.name}`, `Email: ${resumeData.personalInfo.email}`, `Location: ${resumeData.personalInfo.location}`, resumeData.summary ?
    /* istanbul ignore next */
    (cov_3mrpjxxel().b[8][0]++, `Summary: ${resumeData.summary}`) :
    /* istanbul ignore next */
    (cov_3mrpjxxel().b[8][1]++, ''), 'Experience:', ...resumeData.experience.map(exp => {
      /* istanbul ignore next */
      cov_3mrpjxxel().f[8]++;
      cov_3mrpjxxel().s[59]++;
      return `${exp.title} at ${exp.company} (${exp.startDate} - ${exp.endDate}): ${exp.description.join(' ')}`;
    }), 'Education:', ...resumeData.education.map(edu => {
      /* istanbul ignore next */
      cov_3mrpjxxel().f[9]++;
      cov_3mrpjxxel().s[60]++;
      return `${edu.degree} from ${edu.institution} (${edu.graduationDate})`;
    }), `Technical Skills: ${resumeData.skills.technical.join(', ')}`, `Soft Skills: ${resumeData.skills.soft.join(', ')}`, 'Projects:', ...resumeData.projects.map(project => {
      /* istanbul ignore next */
      cov_3mrpjxxel().f[10]++;
      cov_3mrpjxxel().s[61]++;
      return `${project.name}: ${project.description} (${project.technologies.join(', ')})`;
    }), 'Certifications:', ...resumeData.certifications.map(cert => {
      /* istanbul ignore next */
      cov_3mrpjxxel().f[11]++;
      cov_3mrpjxxel().s[62]++;
      return `${cert.name} from ${cert.issuer} (${cert.date})`;
    })].filter(Boolean));
    /* istanbul ignore next */
    cov_3mrpjxxel().s[63]++;
    return sections.join('\n');
  }
  extractJobText(jobDescription) {
    /* istanbul ignore next */
    cov_3mrpjxxel().f[12]++;
    cov_3mrpjxxel().s[64]++;
    return [`Position: ${jobDescription.title}`, jobDescription.company ?
    /* istanbul ignore next */
    (cov_3mrpjxxel().b[9][0]++, `Company: ${jobDescription.company}`) :
    /* istanbul ignore next */
    (cov_3mrpjxxel().b[9][1]++, ''), `Requirements: ${jobDescription.requirements.join(', ')}`, `Preferred Skills: ${jobDescription.preferredSkills.join(', ')}`, `Responsibilities: ${jobDescription.responsibilities.join(', ')}`, jobDescription.industry ?
    /* istanbul ignore next */
    (cov_3mrpjxxel().b[10][0]++, `Industry: ${jobDescription.industry}`) :
    /* istanbul ignore next */
    (cov_3mrpjxxel().b[10][1]++, ''), jobDescription.experienceLevel ?
    /* istanbul ignore next */
    (cov_3mrpjxxel().b[11][0]++, `Experience Level: ${jobDescription.experienceLevel}`) :
    /* istanbul ignore next */
    (cov_3mrpjxxel().b[11][1]++, '')].filter(Boolean).join('\n');
  }
  buildAnalysisPrompt(resumeText, jobText, targetRole, targetIndustry) {
    /* istanbul ignore next */
    cov_3mrpjxxel().f[13]++;
    cov_3mrpjxxel().s[65]++;
    return `
      Analyze this resume for keyword optimization${jobText ?
    /* istanbul ignore next */
    (cov_3mrpjxxel().b[12][0]++, ' against the provided job description') :
    /* istanbul ignore next */
    (cov_3mrpjxxel().b[12][1]++, '')}.

      Resume:
      ${resumeText}

      ${jobText ?
    /* istanbul ignore next */
    (cov_3mrpjxxel().b[13][0]++, `Job Description:\n${jobText}`) :
    /* istanbul ignore next */
    (cov_3mrpjxxel().b[13][1]++, '')}

      ${targetRole ?
    /* istanbul ignore next */
    (cov_3mrpjxxel().b[14][0]++, `Target Role: ${targetRole}`) :
    /* istanbul ignore next */
    (cov_3mrpjxxel().b[14][1]++, '')}
      ${targetIndustry ?
    /* istanbul ignore next */
    (cov_3mrpjxxel().b[15][0]++, `Target Industry: ${targetIndustry}`) :
    /* istanbul ignore next */
    (cov_3mrpjxxel().b[15][1]++, '')}

      Provide analysis in this JSON format:
      {
        "currentKeywords": ["keyword1", "keyword2"],
        "missingKeywords": ["missing1", "missing2"],
        "suggestedImprovements": [
          {
            "section": "experience",
            "original": "original text",
            "suggested": "improved text",
            "keywords": ["added keywords"],
            "impact": "high"
          }
        ],
        "score": 75,
        "industryAlignment": {
          "score": 80,
          "recommendations": ["recommendation1", "recommendation2"]
        }
      }

      Focus on:
      1. Identifying missing critical keywords
      2. Suggesting natural keyword integration
      3. Maintaining authenticity while optimizing
      4. Prioritizing high-impact improvements
    `;
  }
  buildOptimizationPrompt(resumeData, jobDescription, section) {
    /* istanbul ignore next */
    cov_3mrpjxxel().f[14]++;
    const sectionContent =
    /* istanbul ignore next */
    (cov_3mrpjxxel().s[66]++, this.getSectionContent(resumeData, section));
    const jobText =
    /* istanbul ignore next */
    (cov_3mrpjxxel().s[67]++, this.extractJobText(jobDescription));
    /* istanbul ignore next */
    cov_3mrpjxxel().s[68]++;
    return `
      Optimize this ${section} section for ATS compatibility while maintaining authenticity.

      Current ${section}:
      ${sectionContent}

      Job Description:
      ${jobText}

      Requirements:
      1. Include relevant keywords naturally
      2. Maintain the original meaning and truthfulness
      3. Use action verbs and quantifiable achievements
      4. Ensure ATS-friendly formatting
      5. Keep the tone professional

      Provide only the optimized text without additional formatting or explanations.
    `;
  }
  getSectionContent(resumeData, section) {
    /* istanbul ignore next */
    cov_3mrpjxxel().f[15]++;
    cov_3mrpjxxel().s[69]++;
    switch (section) {
      case 'summary':
        /* istanbul ignore next */
        cov_3mrpjxxel().b[16][0]++;
        cov_3mrpjxxel().s[70]++;
        return /* istanbul ignore next */(cov_3mrpjxxel().b[17][0]++, resumeData.summary) ||
        /* istanbul ignore next */
        (cov_3mrpjxxel().b[17][1]++, '');
      case 'experience':
        /* istanbul ignore next */
        cov_3mrpjxxel().b[16][1]++;
        cov_3mrpjxxel().s[71]++;
        return resumeData.experience.map(exp => {
          /* istanbul ignore next */
          cov_3mrpjxxel().f[16]++;
          cov_3mrpjxxel().s[72]++;
          return `${exp.title} at ${exp.company}: ${exp.description.join(' ')}`;
        }).join('\n');
      case 'skills':
        /* istanbul ignore next */
        cov_3mrpjxxel().b[16][2]++;
        cov_3mrpjxxel().s[73]++;
        return `Technical: ${resumeData.skills.technical.join(', ')}; Soft: ${resumeData.skills.soft.join(', ')}`;
      default:
        /* istanbul ignore next */
        cov_3mrpjxxel().b[16][3]++;
        cov_3mrpjxxel().s[74]++;
        return '';
    }
  }
  applyOptimizedContent(optimizedSections, section, content, originalData) {
    /* istanbul ignore next */
    cov_3mrpjxxel().f[17]++;
    cov_3mrpjxxel().s[75]++;
    switch (section) {
      case 'summary':
        /* istanbul ignore next */
        cov_3mrpjxxel().b[18][0]++;
        cov_3mrpjxxel().s[76]++;
        optimizedSections.summary = content;
        /* istanbul ignore next */
        cov_3mrpjxxel().s[77]++;
        break;
      case 'skills':
        /* istanbul ignore next */
        cov_3mrpjxxel().b[18][1]++;
        // Parse optimized skills content
        const skillsMatch =
        /* istanbul ignore next */
        (cov_3mrpjxxel().s[78]++, content.match(/Technical:\s*([^;]+);?\s*Soft:\s*([^;]+)/i));
        /* istanbul ignore next */
        cov_3mrpjxxel().s[79]++;
        if (skillsMatch) {
          /* istanbul ignore next */
          cov_3mrpjxxel().b[19][0]++;
          cov_3mrpjxxel().s[80]++;
          optimizedSections.skills = {
            technical: skillsMatch[1].split(',').map(s => {
              /* istanbul ignore next */
              cov_3mrpjxxel().f[18]++;
              cov_3mrpjxxel().s[81]++;
              return s.trim();
            }),
            soft: skillsMatch[2].split(',').map(s => {
              /* istanbul ignore next */
              cov_3mrpjxxel().f[19]++;
              cov_3mrpjxxel().s[82]++;
              return s.trim();
            })
          };
        } else
        /* istanbul ignore next */
        {
          cov_3mrpjxxel().b[19][1]++;
        }
        cov_3mrpjxxel().s[83]++;
        break;
      case 'experience':
        /* istanbul ignore next */
        cov_3mrpjxxel().b[18][2]++;
        cov_3mrpjxxel().s[84]++;
        // For experience, we'd need more sophisticated parsing
        // For now, keep original structure but note optimization was attempted
        optimizedSections.experience = originalData.experience;
        /* istanbul ignore next */
        cov_3mrpjxxel().s[85]++;
        break;
    }
  }
  parseAnalysisResult(result, resumeData) {
    /* istanbul ignore next */
    cov_3mrpjxxel().f[20]++;
    cov_3mrpjxxel().s[86]++;
    try {
      /* istanbul ignore next */
      cov_3mrpjxxel().s[87]++;
      return JSON.parse(result);
    } catch (_a) {
      /* istanbul ignore next */
      cov_3mrpjxxel().s[88]++;
      // Fallback analysis if JSON parsing fails
      return {
        currentKeywords: this.extractCurrentKeywords(resumeData),
        missingKeywords: [],
        suggestedImprovements: [],
        score: 50,
        industryAlignment: {
          score: 50,
          recommendations: ['Unable to perform detailed analysis. Please try again.']
        }
      };
    }
  }
  extractCurrentKeywords(resumeData) {
    /* istanbul ignore next */
    cov_3mrpjxxel().f[21]++;
    const allText =
    /* istanbul ignore next */
    (cov_3mrpjxxel().s[89]++, this.extractResumeText(resumeData).toLowerCase());
    const commonKeywords =
    /* istanbul ignore next */
    (cov_3mrpjxxel().s[90]++, ['javascript', 'python', 'react', 'node.js', 'sql', 'git', 'aws', 'docker', 'leadership', 'teamwork', 'communication', 'problem-solving', 'project management', 'agile', 'scrum', 'ci/cd', 'api', 'database', 'frontend', 'backend', 'full-stack']);
    /* istanbul ignore next */
    cov_3mrpjxxel().s[91]++;
    return commonKeywords.filter(keyword => {
      /* istanbul ignore next */
      cov_3mrpjxxel().f[22]++;
      cov_3mrpjxxel().s[92]++;
      return allText.includes(keyword);
    });
  }
  parseKeywordSuggestions(content) {
    /* istanbul ignore next */
    cov_3mrpjxxel().f[23]++;
    cov_3mrpjxxel().s[93]++;
    // Simple parsing fallback
    return {
      technical: ['React', 'Node.js', 'TypeScript', 'API Development', 'Database Design'],
      soft: ['Leadership', 'Communication', 'Problem Solving', 'Team Collaboration', 'Adaptability'],
      industrySpecific: ['Software Development', 'Web Technologies', 'Cloud Computing', 'DevOps', 'Agile Methodology'],
      trending: ['AI/ML', 'Microservices', 'Kubernetes', 'GraphQL', 'Serverless Architecture']
    };
  }
  generateFallbackATSScore(resumeData) {
    /* istanbul ignore next */
    cov_3mrpjxxel().f[24]++;
    let score =
    /* istanbul ignore next */
    (cov_3mrpjxxel().s[94]++, 50);
    // Basic scoring based on presence of sections
    /* istanbul ignore next */
    cov_3mrpjxxel().s[95]++;
    if (resumeData.summary) {
      /* istanbul ignore next */
      cov_3mrpjxxel().b[20][0]++;
      cov_3mrpjxxel().s[96]++;
      score += 10;
    } else
    /* istanbul ignore next */
    {
      cov_3mrpjxxel().b[20][1]++;
    }
    cov_3mrpjxxel().s[97]++;
    if (resumeData.experience.length > 0) {
      /* istanbul ignore next */
      cov_3mrpjxxel().b[21][0]++;
      cov_3mrpjxxel().s[98]++;
      score += 20;
    } else
    /* istanbul ignore next */
    {
      cov_3mrpjxxel().b[21][1]++;
    }
    cov_3mrpjxxel().s[99]++;
    if (resumeData.skills.technical.length > 0) {
      /* istanbul ignore next */
      cov_3mrpjxxel().b[22][0]++;
      cov_3mrpjxxel().s[100]++;
      score += 15;
    } else
    /* istanbul ignore next */
    {
      cov_3mrpjxxel().b[22][1]++;
    }
    cov_3mrpjxxel().s[101]++;
    if (resumeData.education.length > 0) {
      /* istanbul ignore next */
      cov_3mrpjxxel().b[23][0]++;
      cov_3mrpjxxel().s[102]++;
      score += 5;
    } else
    /* istanbul ignore next */
    {
      cov_3mrpjxxel().b[23][1]++;
    }
    cov_3mrpjxxel().s[103]++;
    return {
      overallScore: Math.min(score, 100),
      sectionScores: {
        formatting: 70,
        keywords: score > 70 ?
        /* istanbul ignore next */
        (cov_3mrpjxxel().b[24][0]++, 75) :
        /* istanbul ignore next */
        (cov_3mrpjxxel().b[24][1]++, 50),
        structure: 65,
        content: score > 80 ?
        /* istanbul ignore next */
        (cov_3mrpjxxel().b[25][0]++, 80) :
        /* istanbul ignore next */
        (cov_3mrpjxxel().b[25][1]++, 60)
      },
      recommendations: ['Add more specific technical keywords', 'Include quantifiable achievements', 'Use industry-standard terminology', 'Ensure consistent formatting']
    };
  }
}
/* istanbul ignore next */
cov_3mrpjxxel().s[104]++;
exports.KeywordOptimizerService = KeywordOptimizerService;
/* istanbul ignore next */
cov_3mrpjxxel().s[105]++;
exports.keywordOptimizerService = KeywordOptimizerService.getInstance();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,