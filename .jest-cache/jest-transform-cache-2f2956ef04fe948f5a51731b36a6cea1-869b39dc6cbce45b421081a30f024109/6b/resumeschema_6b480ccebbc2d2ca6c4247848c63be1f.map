{"version":3,"names":["cov_28eai1d5ui","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","exports","isEnhancedResumeDocument","isFoundryProcessedResume","isLegacyProcessedResume","validateResumeDocument","FIRESTORE_PATHS","USERS","PROFILES","RESUMES","MODEL_USAGE","CONFIG_AUDIT","doc","processorVersion","includes","errors","userId","push","fileName","extractedData","atsScore","jobMatchScore","valid","length","DEFAULT_ENHANCED_FIELDS","missingKeywords","rawExtraction","atsAnalysis","jobMatchAnalysis","FIRESTORE_SECURITY_RULES_SCHEMA"],"sources":["/Users/dikshantvashistha/PrepBettr/lib/firebase/schema/resume-schema.ts"],"sourcesContent":["/**\n * Extended Firestore Schema for Enhanced Resume Processing\n * \n * Defines the enhanced schema for storing resume data with ATS analysis,\n * job matching scores, and processor versioning for backward compatibility.\n */\n\nimport { FieldValue, Timestamp } from 'firebase-admin/firestore';\n\n// Base resume data structure (existing)\nexport interface BaseResumeData {\n  personalInfo: {\n    name?: string;\n    email?: string;\n    phone?: string;\n    address?: string;\n    linkedin?: string;\n    github?: string;\n    website?: string;\n    location?: string;\n  };\n  summary?: string;\n  skills: Array<{\n    skill: string;\n    category?: 'technical' | 'soft' | 'language' | 'certification' | 'tool';\n    proficiency?: 'beginner' | 'intermediate' | 'advanced' | 'expert';\n    yearsOfExperience?: number;\n  }>;\n  experience: Array<{\n    company: string;\n    position: string;\n    startDate?: string;\n    endDate?: string;\n    isCurrent?: boolean;\n    location?: string;\n    description?: string;\n    achievements?: string[];\n    technologies?: string[];\n    managementScope?: {\n      teamSize?: number;\n      budget?: string;\n      responsibilities?: string[];\n    };\n    quantifiableResults?: Array<{\n      metric: string;\n      value: number;\n      unit: string;\n      impact: string;\n    }>;\n  }>;\n  education: Array<{\n    institution: string;\n    degree: string;\n    field: string;\n    startDate?: string;\n    endDate?: string;\n    gpa?: number;\n    location?: string;\n    honors?: string[];\n    relevantCoursework?: string[];\n  }>;\n  projects?: Array<{\n    name: string;\n    description: string;\n    technologies?: string[];\n    url?: string;\n    github?: string;\n    startDate?: string;\n    endDate?: string;\n    role?: string;\n    teamSize?: number;\n    impact?: string;\n  }>;\n  certifications?: Array<{\n    name: string;\n    issuer: string;\n    date?: string;\n    expiryDate?: string;\n    credentialId?: string;\n    url?: string;\n    status?: 'active' | 'expired' | 'pending';\n  }>;\n  languages?: Array<{\n    name: string;\n    proficiency: 'native' | 'fluent' | 'conversational' | 'basic';\n    certifications?: string[];\n  }>;\n  publications?: Array<{\n    title: string;\n    venue: string;\n    date?: string;\n    url?: string;\n    coAuthors?: string[];\n  }>;\n  awards?: Array<{\n    name: string;\n    issuer: string;\n    date?: string;\n    description?: string;\n  }>;\n}\n\n// Enhanced resume document structure\nexport interface EnhancedResumeDocument {\n  // User identification\n  userId: string;\n  \n  // File metadata\n  fileName: string;\n  fileUrl: string;\n  filePath?: string;\n  sasUrl?: string;\n  fileSize?: number;\n  mimeType?: string;\n  \n  // Extracted resume data\n  extractedData: BaseResumeData;\n  \n  // Interview questions\n  interviewQuestions: string[];\n  \n  // Enhanced ATS & Job Matching fields (NEW)\n  atsScore?: number;\n  jobMatchScore?: number;\n  missingKeywords?: string[];\n  \n  // Raw extraction data (encrypted at-rest)\n  rawExtraction?: {\n    method: 'foundry-document-intelligence' | 'azure-form-recognizer' | 'openai-extraction';\n    confidence?: number;\n    processingTime?: number;\n    originalText?: string;\n    aiResponse?: any;\n    boundingBoxes?: any;\n    tableStructures?: any;\n  };\n  \n  // Processor versioning for backward compatibility (NEW)\n  processorVersion: 'foundry-v1' | 'legacy-v1';\n  \n  // Job description context (if provided)\n  jobDescription?: string;\n  targetRole?: string;\n  companyName?: string;\n  targetIndustry?: string;\n  experienceLevel?: 'entry' | 'mid' | 'senior' | 'executive';\n  \n  // Detailed ATS analysis (NEW)\n  atsAnalysis?: {\n    overallGrade: string;\n    keywordAnalysis: {\n      score: number;\n      totalKeywords: number;\n      matchedKeywords: string[];\n      missingKeywords: string[];\n      keywordDensity: number;\n      recommendations: string[];\n    };\n    formatAnalysis: {\n      score: number;\n      issues: Array<{\n        type: 'critical' | 'warning' | 'suggestion';\n        issue: string;\n        solution: string;\n        impact: string;\n      }>;\n      strengths: string[];\n    };\n    structureAnalysis: {\n      score: number;\n      missingElements: string[];\n      presentElements: string[];\n      recommendations: string[];\n    };\n    contentAnalysis: {\n      score: number;\n      strengthAreas: string[];\n      improvementAreas: string[];\n      recommendations: string[];\n    };\n    prioritizedRecommendations: Array<{\n      priority: 'high' | 'medium' | 'low';\n      category: 'keywords' | 'formatting' | 'structure' | 'content';\n      recommendation: string;\n      implementation: string;\n      expectedImpact: string;\n      timeToImplement: string;\n    }>;\n  };\n  \n  // Job matching analysis (NEW)\n  jobMatchAnalysis?: {\n    matchGrade: string;\n    skillsMatch: {\n      score: number;\n      matchedSkills: Array<{\n        skill: string;\n        resumeLevel: string;\n        requiredLevel: string;\n        match: 'exceeds' | 'meets' | 'below';\n      }>;\n      missingSkills: Array<{\n        skill: string;\n        importance: 'high' | 'medium' | 'low';\n        canLearn: boolean;\n        timeToLearn: string;\n      }>;\n      skillGapAnalysis: {\n        criticalGaps: string[];\n        niceToHaveGaps: string[];\n        strengthAreas: string[];\n      };\n    };\n    experienceMatch: {\n      score: number;\n      yearsRequired: number;\n      yearsCandidate: number;\n      yearsMatch: 'exceeds' | 'meets' | 'below';\n      industryMatch: {\n        score: number;\n        relevantIndustries: string[];\n        transferableExperience: string[];\n      };\n      roleSimilarity: {\n        score: number;\n        similarRoles: string[];\n        levelMatch: string;\n      };\n    };\n    educationMatch: {\n      score: number;\n      degreeMatch: boolean;\n      fieldRelevance: 'high' | 'medium' | 'low';\n      institutionPrestige: string;\n      additionalQualifications: string[];\n    };\n    culturalFit: {\n      score: number;\n      indicators: string[];\n      concerns: string[];\n      strengths: string[];\n    };\n    recommendations: Array<{\n      category: 'skills' | 'experience' | 'education' | 'presentation';\n      priority: 'high' | 'medium' | 'low';\n      recommendation: string;\n      reasoning: string;\n      resources: string[];\n      timeframe: string;\n    }>;\n    interviewPreparation: string[];\n  };\n  \n  // Storage provider information\n  storageProvider?: 'firebase' | 'azure-blob';\n  \n  // Timestamps\n  uploadDate: Timestamp | FieldValue;\n  lastModified: Timestamp | FieldValue;\n  lastAnalyzed?: Timestamp | FieldValue;\n  \n  // Processing metadata\n  metadata?: {\n    processingMethod?: string;\n    processingTime?: number;\n    confidence?: number;\n    errorCount?: number;\n    lastError?: string;\n    retryCount?: number;\n  };\n}\n\n// Collection paths\nexport const FIRESTORE_PATHS = {\n  USERS: 'users',\n  PROFILES: 'profiles', // Current collection path\n  RESUMES: 'resumes',\n  MODEL_USAGE: 'modelUsage',\n  CONFIG_AUDIT: 'configAudit'\n} as const;\n\n// Migration tracking\nexport interface MigrationRecord {\n  migrationId: string;\n  version: string;\n  description: string;\n  executedAt: Timestamp;\n  executedBy: string;\n  recordsProcessed: number;\n  recordsUpdated: number;\n  recordsFailed: number;\n  errors?: Array<{\n    documentId: string;\n    error: string;\n    timestamp: Timestamp;\n  }>;\n  status: 'pending' | 'running' | 'completed' | 'failed';\n  durationMs?: number;\n}\n\n// Type guards for version checking\nexport function isEnhancedResumeDocument(doc: any): doc is EnhancedResumeDocument {\n  return doc && \n         typeof doc.processorVersion === 'string' &&\n         ['foundry-v1', 'legacy-v1'].includes(doc.processorVersion);\n}\n\nexport function isFoundryProcessedResume(doc: EnhancedResumeDocument): boolean {\n  return doc.processorVersion === 'foundry-v1';\n}\n\nexport function isLegacyProcessedResume(doc: EnhancedResumeDocument): boolean {\n  return doc.processorVersion === 'legacy-v1';\n}\n\n// Schema validation helpers\nexport function validateResumeDocument(doc: Partial<EnhancedResumeDocument>): {\n  valid: boolean;\n  errors: string[];\n} {\n  const errors: string[] = [];\n  \n  // Required fields\n  if (!doc.userId) errors.push('userId is required');\n  if (!doc.fileName) errors.push('fileName is required');\n  if (!doc.extractedData) errors.push('extractedData is required');\n  if (!doc.processorVersion) errors.push('processorVersion is required');\n  \n  // Processor version validation\n  if (doc.processorVersion && !['foundry-v1', 'legacy-v1'].includes(doc.processorVersion)) {\n    errors.push('processorVersion must be \"foundry-v1\" or \"legacy-v1\"');\n  }\n  \n  // ATS score validation\n  if (doc.atsScore !== undefined && (doc.atsScore < 0 || doc.atsScore > 100)) {\n    errors.push('atsScore must be between 0 and 100');\n  }\n  \n  // Job match score validation\n  if (doc.jobMatchScore !== undefined && (doc.jobMatchScore < 0 || doc.jobMatchScore > 100)) {\n    errors.push('jobMatchScore must be between 0 and 100');\n  }\n  \n  return {\n    valid: errors.length === 0,\n    errors\n  };\n}\n\n// Default values for new fields\nexport const DEFAULT_ENHANCED_FIELDS: Partial<EnhancedResumeDocument> = {\n  processorVersion: 'legacy-v1',\n  missingKeywords: [],\n  rawExtraction: undefined,\n  atsAnalysis: undefined,\n  jobMatchAnalysis: undefined\n};\n\n// Firestore security rules schema (for reference)\nexport const FIRESTORE_SECURITY_RULES_SCHEMA = `\n// Enhanced resume document rules\nmatch /profiles/{userId} {\n  allow read, write: if request.auth != null && request.auth.uid == userId;\n  \n  // Validate enhanced fields on write\n  allow update: if request.auth != null && \n                   request.auth.uid == userId &&\n                   validateEnhancedResumeFields(request.resource.data);\n}\n\nfunction validateEnhancedResumeFields(data) {\n  return data.keys().hasAll(['processorVersion']) &&\n         data.processorVersion in ['foundry-v1', 'legacy-v1'] &&\n         (data.atsScore == null || (data.atsScore >= 0 && data.atsScore <= 100)) &&\n         (data.jobMatchScore == null || (data.jobMatchScore >= 0 && data.jobMatchScore <= 100));\n}\n`;\n\n"],"mappings":";;AAAA;;;;;;AAAA;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UA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","ignoreList":[]}