b35667d627872f6cf29a2a6431556ad0
"use strict";

/* istanbul ignore next */
function cov_1lh9w6wygl() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/storage/index.ts";
  var hash = "134b1fcae07c5512ed500aa94a1292d2627643b9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/storage/index.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 69
        }
      },
      "2": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 4,
          column: 46
        }
      },
      "3": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 50
        }
      },
      "4": {
        start: {
          line: 6,
          column: 26
        },
        end: {
          line: 6,
          column: 54
        }
      },
      "5": {
        start: {
          line: 7,
          column: 34
        },
        end: {
          line: 7,
          column: 80
        }
      },
      "6": {
        start: {
          line: 9,
          column: 17
        },
        end: {
          line: 9,
          column: 46
        }
      },
      "7": {
        start: {
          line: 11,
          column: 23
        },
        end: {
          line: 11,
          column: 27
        }
      },
      "8": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 15,
          column: 1
        }
      },
      "9": {
        start: {
          line: 13,
          column: 24
        },
        end: {
          line: 13,
          column: 53
        }
      },
      "10": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 52
        }
      },
      "11": {
        start: {
          line: 17,
          column: 29
        },
        end: {
          line: 17,
          column: 33
        }
      },
      "12": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 25,
          column: 5
        }
      },
      "13": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 72
        }
      },
      "14": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 28,
          column: 5
        }
      },
      "15": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 38
        }
      },
      "16": {
        start: {
          line: 29,
          column: 4
        },
        end: {
          line: 29,
          column: 63
        }
      },
      "17": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 30,
          column: 34
        }
      },
      "18": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 38,
          column: 5
        }
      },
      "19": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 72
        }
      },
      "20": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 48,
          column: 5
        }
      },
      "21": {
        start: {
          line: 40,
          column: 23
        },
        end: {
          line: 40,
          column: 47
        }
      },
      "22": {
        start: {
          line: 41,
          column: 35
        },
        end: {
          line: 41,
          column: 128
        }
      },
      "23": {
        start: {
          line: 42,
          column: 30
        },
        end: {
          line: 42,
          column: 115
        }
      },
      "24": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 104
        }
      },
      "25": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 72
        }
      },
      "26": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 20
        }
      },
      "27": {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 55,
          column: 34
        }
      },
      "28": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 35
        }
      },
      "29": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 67,
          column: 9
        }
      },
      "30": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 60
        }
      },
      "31": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 35
        }
      },
      "32": {
        start: {
          line: 74,
          column: 24
        },
        end: {
          line: 74,
          column: 47
        }
      },
      "33": {
        start: {
          line: 75,
          column: 25
        },
        end: {
          line: 75,
          column: 56
        }
      },
      "34": {
        start: {
          line: 76,
          column: 23
        },
        end: {
          line: 76,
          column: 75
        }
      },
      "35": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 82,
          column: 10
        }
      },
      "36": {
        start: {
          line: 88,
          column: 24
        },
        end: {
          line: 88,
          column: 47
        }
      },
      "37": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 39
        }
      },
      "38": {
        start: {
          line: 95,
          column: 24
        },
        end: {
          line: 95,
          column: 47
        }
      },
      "39": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 99,
          column: 11
        }
      },
      "40": {
        start: {
          line: 102,
          column: 0
        },
        end: {
          line: 102,
          column: 52
        }
      },
      "41": {
        start: {
          line: 104,
          column: 0
        },
        end: {
          line: 104,
          column: 58
        }
      }
    },
    fnMap: {
      "0": {
        name: "getStorageService",
        decl: {
          start: {
            line: 22,
            column: 15
          },
          end: {
            line: 22,
            column: 32
          }
        },
        loc: {
          start: {
            line: 22,
            column: 35
          },
          end: {
            line: 31,
            column: 1
          }
        },
        line: 22
      },
      "1": {
        name: "createAzureStorageService",
        decl: {
          start: {
            line: 35,
            column: 15
          },
          end: {
            line: 35,
            column: 40
          }
        },
        loc: {
          start: {
            line: 35,
            column: 43
          },
          end: {
            line: 49,
            column: 1
          }
        },
        line: 35
      },
      "2": {
        name: "resetStorageService",
        decl: {
          start: {
            line: 54,
            column: 9
          },
          end: {
            line: 54,
            column: 28
          }
        },
        loc: {
          start: {
            line: 54,
            column: 31
          },
          end: {
            line: 56,
            column: 1
          }
        },
        line: 54
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 61,
            column: 4
          },
          end: {
            line: 61,
            column: 5
          }
        },
        loc: {
          start: {
            line: 61,
            column: 18
          },
          end: {
            line: 63,
            column: 5
          }
        },
        line: 61
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        },
        loc: {
          start: {
            line: 64,
            column: 23
          },
          end: {
            line: 69,
            column: 5
          }
        },
        line: 64
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        },
        loc: {
          start: {
            line: 73,
            column: 63
          },
          end: {
            line: 83,
            column: 5
          }
        },
        line: 73
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 87,
            column: 4
          },
          end: {
            line: 87,
            column: 5
          }
        },
        loc: {
          start: {
            line: 87,
            column: 33
          },
          end: {
            line: 90,
            column: 5
          }
        },
        line: 87
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 94,
            column: 4
          },
          end: {
            line: 94,
            column: 5
          }
        },
        loc: {
          start: {
            line: 94,
            column: 54
          },
          end: {
            line: 100,
            column: 5
          }
        },
        line: 94
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 12,
            column: 0
          },
          end: {
            line: 15,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 12,
            column: 0
          },
          end: {
            line: 15,
            column: 1
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 12
      },
      "1": {
        loc: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 23
      },
      "2": {
        loc: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      },
      "3": {
        loc: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "4": {
        loc: {
          start: {
            line: 41,
            column: 35
          },
          end: {
            line: 41,
            column: 128
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 41,
            column: 35
          },
          end: {
            line: 41,
            column: 66
          }
        }, {
          start: {
            line: 41,
            column: 70
          },
          end: {
            line: 41,
            column: 103
          }
        }, {
          start: {
            line: 41,
            column: 107
          },
          end: {
            line: 41,
            column: 128
          }
        }],
        line: 41
      },
      "5": {
        loc: {
          start: {
            line: 42,
            column: 30
          },
          end: {
            line: 42,
            column: 115
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 42,
            column: 30
          },
          end: {
            line: 42,
            column: 63
          }
        }, {
          start: {
            line: 42,
            column: 67
          },
          end: {
            line: 42,
            column: 102
          }
        }, {
          start: {
            line: 42,
            column: 106
          },
          end: {
            line: 42,
            column: 115
          }
        }],
        line: 42
      },
      "6": {
        loc: {
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "7": {
        loc: {
          start: {
            line: 94,
            column: 33
          },
          end: {
            line: 94,
            column: 52
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 94,
            column: 50
          },
          end: {
            line: 94,
            column: 52
          }
        }],
        line: 94
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/storage/index.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/storage/index.ts"],
      sourcesContent: ["import { IStorageService, StorageProvider } from './IStorageService';\nimport { AzureBlobStorageService } from './providers/AzureBlobStorageService';\n\n// Client-side safety check\nconst isClient = typeof window !== 'undefined';\n\n// Only import server-side dependencies when running on server\nlet getConfiguration: any = null;\n\nif (!isClient) {\n  const azureConfig = require('@/lib/azure-config');\n  getConfiguration = azureConfig.getConfiguration;\n}\n\n// Singleton storage service instance\nlet storageServiceInstance: IStorageService | null = null;\n\n/**\n * Gets the Azure Blob Storage service instance.\n * All storage operations now use Azure exclusively.\n */\nexport async function getStorageService(): Promise<IStorageService> {\n  if (isClient) {\n    throw new Error('Storage service not available on client side');\n  }\n  \n  if (storageServiceInstance) {\n    return storageServiceInstance;\n  }\n\n  storageServiceInstance = await createAzureStorageService();\n  return storageServiceInstance;\n}\n\n/**\n * Creates an Azure Blob Storage service instance with proper configuration.\n */\nasync function createAzureStorageService(): Promise<AzureBlobStorageService> {\n  if (isClient) {\n    throw new Error('Storage service not available on client side');\n  }\n  \n  try {\n    const config = await getConfiguration();\n    const storageAccountName = config['AZURE_STORAGE_ACCOUNT'] || process.env.AZURE_STORAGE_ACCOUNT || 'prepbettrstorage684';\n    const containerName = config['AZURE_STORAGE_CONTAINER'] || process.env.AZURE_STORAGE_CONTAINER || 'resumes';\n    \n    return new AzureBlobStorageService(storageAccountName, containerName);\n  } catch (error) {\n    console.error('Failed to create Azure storage service:', error);\n    throw error;\n  }\n}\n\n\n/**\n * Resets the singleton storage service instance.\n * Useful for testing or configuration changes.\n */\nexport function resetStorageService(): void {\n  storageServiceInstance = null;\n}\n\n/**\n * Resume-specific utilities for backward compatibility\n */\nexport class ResumeStorageService {\n  private storageService: IStorageService | null = null;\n\n  async getService(): Promise<IStorageService> {\n    if (!this.storageService) {\n      this.storageService = await getStorageService();\n    }\n    return this.storageService;\n  }\n\n  /**\n   * Upload a resume file with proper path organization\n   */\n  async uploadResume(\n    userId: string,\n    fileBuffer: Buffer,\n    fileName: string,\n    mimeType: string\n  ): Promise<{ fileUrl: string; filePath: string; sasUrl?: string; provider: StorageProvider }> {\n    const service = await this.getService();\n    const filePath = `resumes/${userId}/${fileName}`;\n    \n    const result = await service.upload(fileBuffer, filePath, mimeType);\n    \n    return {\n      fileUrl: result.url,\n      filePath: result.path,\n      sasUrl: result.sasUrl,\n      provider: StorageProvider.Azure,\n    };\n  }\n\n  /**\n   * Delete a resume file\n   */\n  async deleteResume(filePath: string): Promise<void> {\n    const service = await this.getService();\n    await service.delete(filePath);\n  }\n\n  /**\n   * Generate a secure URL for resume access\n   */\n  async getResumeUrl(filePath: string, expiresInHours: number = 24): Promise<string> {\n    const service = await this.getService();\n    return await service.getPublicUrl(filePath, {\n      expiresIn: expiresInHours * 3600,\n      accessType: 'read',\n    });\n  }\n}\n\n// Export singleton instance for resume operations\nexport const resumeStorageService = new ResumeStorageService();\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "134b1fcae07c5512ed500aa94a1292d2627643b9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1lh9w6wygl = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1lh9w6wygl();
cov_1lh9w6wygl().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1lh9w6wygl().s[1]++;
exports.resumeStorageService = exports.ResumeStorageService = void 0;
/* istanbul ignore next */
cov_1lh9w6wygl().s[2]++;
exports.getStorageService = getStorageService;
/* istanbul ignore next */
cov_1lh9w6wygl().s[3]++;
exports.resetStorageService = resetStorageService;
const IStorageService_1 =
/* istanbul ignore next */
(cov_1lh9w6wygl().s[4]++, require("./IStorageService"));
const AzureBlobStorageService_1 =
/* istanbul ignore next */
(cov_1lh9w6wygl().s[5]++, require("./providers/AzureBlobStorageService"));
// Client-side safety check
const isClient =
/* istanbul ignore next */
(cov_1lh9w6wygl().s[6]++, typeof window !== 'undefined');
// Only import server-side dependencies when running on server
let getConfiguration =
/* istanbul ignore next */
(cov_1lh9w6wygl().s[7]++, null);
/* istanbul ignore next */
cov_1lh9w6wygl().s[8]++;
if (!isClient) {
  /* istanbul ignore next */
  cov_1lh9w6wygl().b[0][0]++;
  const azureConfig =
  /* istanbul ignore next */
  (cov_1lh9w6wygl().s[9]++, require('@/lib/azure-config'));
  /* istanbul ignore next */
  cov_1lh9w6wygl().s[10]++;
  getConfiguration = azureConfig.getConfiguration;
} else
/* istanbul ignore next */
{
  cov_1lh9w6wygl().b[0][1]++;
}
// Singleton storage service instance
let storageServiceInstance =
/* istanbul ignore next */
(cov_1lh9w6wygl().s[11]++, null);
/**
 * Gets the Azure Blob Storage service instance.
 * All storage operations now use Azure exclusively.
 */
async function getStorageService() {
  /* istanbul ignore next */
  cov_1lh9w6wygl().f[0]++;
  cov_1lh9w6wygl().s[12]++;
  if (isClient) {
    /* istanbul ignore next */
    cov_1lh9w6wygl().b[1][0]++;
    cov_1lh9w6wygl().s[13]++;
    throw new Error('Storage service not available on client side');
  } else
  /* istanbul ignore next */
  {
    cov_1lh9w6wygl().b[1][1]++;
  }
  cov_1lh9w6wygl().s[14]++;
  if (storageServiceInstance) {
    /* istanbul ignore next */
    cov_1lh9w6wygl().b[2][0]++;
    cov_1lh9w6wygl().s[15]++;
    return storageServiceInstance;
  } else
  /* istanbul ignore next */
  {
    cov_1lh9w6wygl().b[2][1]++;
  }
  cov_1lh9w6wygl().s[16]++;
  storageServiceInstance = await createAzureStorageService();
  /* istanbul ignore next */
  cov_1lh9w6wygl().s[17]++;
  return storageServiceInstance;
}
/**
 * Creates an Azure Blob Storage service instance with proper configuration.
 */
async function createAzureStorageService() {
  /* istanbul ignore next */
  cov_1lh9w6wygl().f[1]++;
  cov_1lh9w6wygl().s[18]++;
  if (isClient) {
    /* istanbul ignore next */
    cov_1lh9w6wygl().b[3][0]++;
    cov_1lh9w6wygl().s[19]++;
    throw new Error('Storage service not available on client side');
  } else
  /* istanbul ignore next */
  {
    cov_1lh9w6wygl().b[3][1]++;
  }
  cov_1lh9w6wygl().s[20]++;
  try {
    const config =
    /* istanbul ignore next */
    (cov_1lh9w6wygl().s[21]++, await getConfiguration());
    const storageAccountName =
    /* istanbul ignore next */
    (cov_1lh9w6wygl().s[22]++,
    /* istanbul ignore next */
    (cov_1lh9w6wygl().b[4][0]++, config['AZURE_STORAGE_ACCOUNT']) ||
    /* istanbul ignore next */
    (cov_1lh9w6wygl().b[4][1]++, process.env.AZURE_STORAGE_ACCOUNT) ||
    /* istanbul ignore next */
    (cov_1lh9w6wygl().b[4][2]++, 'prepbettrstorage684'));
    const containerName =
    /* istanbul ignore next */
    (cov_1lh9w6wygl().s[23]++,
    /* istanbul ignore next */
    (cov_1lh9w6wygl().b[5][0]++, config['AZURE_STORAGE_CONTAINER']) ||
    /* istanbul ignore next */
    (cov_1lh9w6wygl().b[5][1]++, process.env.AZURE_STORAGE_CONTAINER) ||
    /* istanbul ignore next */
    (cov_1lh9w6wygl().b[5][2]++, 'resumes'));
    /* istanbul ignore next */
    cov_1lh9w6wygl().s[24]++;
    return new AzureBlobStorageService_1.AzureBlobStorageService(storageAccountName, containerName);
  } catch (error) {
    /* istanbul ignore next */
    cov_1lh9w6wygl().s[25]++;
    console.error('Failed to create Azure storage service:', error);
    /* istanbul ignore next */
    cov_1lh9w6wygl().s[26]++;
    throw error;
  }
}
/**
 * Resets the singleton storage service instance.
 * Useful for testing or configuration changes.
 */
function resetStorageService() {
  /* istanbul ignore next */
  cov_1lh9w6wygl().f[2]++;
  cov_1lh9w6wygl().s[27]++;
  storageServiceInstance = null;
}
/**
 * Resume-specific utilities for backward compatibility
 */
class ResumeStorageService {
  constructor() {
    /* istanbul ignore next */
    cov_1lh9w6wygl().f[3]++;
    cov_1lh9w6wygl().s[28]++;
    this.storageService = null;
  }
  async getService() {
    /* istanbul ignore next */
    cov_1lh9w6wygl().f[4]++;
    cov_1lh9w6wygl().s[29]++;
    if (!this.storageService) {
      /* istanbul ignore next */
      cov_1lh9w6wygl().b[6][0]++;
      cov_1lh9w6wygl().s[30]++;
      this.storageService = await getStorageService();
    } else
    /* istanbul ignore next */
    {
      cov_1lh9w6wygl().b[6][1]++;
    }
    cov_1lh9w6wygl().s[31]++;
    return this.storageService;
  }
  /**
   * Upload a resume file with proper path organization
   */
  async uploadResume(userId, fileBuffer, fileName, mimeType) {
    /* istanbul ignore next */
    cov_1lh9w6wygl().f[5]++;
    const service =
    /* istanbul ignore next */
    (cov_1lh9w6wygl().s[32]++, await this.getService());
    const filePath =
    /* istanbul ignore next */
    (cov_1lh9w6wygl().s[33]++, `resumes/${userId}/${fileName}`);
    const result =
    /* istanbul ignore next */
    (cov_1lh9w6wygl().s[34]++, await service.upload(fileBuffer, filePath, mimeType));
    /* istanbul ignore next */
    cov_1lh9w6wygl().s[35]++;
    return {
      fileUrl: result.url,
      filePath: result.path,
      sasUrl: result.sasUrl,
      provider: IStorageService_1.StorageProvider.Azure
    };
  }
  /**
   * Delete a resume file
   */
  async deleteResume(filePath) {
    /* istanbul ignore next */
    cov_1lh9w6wygl().f[6]++;
    const service =
    /* istanbul ignore next */
    (cov_1lh9w6wygl().s[36]++, await this.getService());
    /* istanbul ignore next */
    cov_1lh9w6wygl().s[37]++;
    await service.delete(filePath);
  }
  /**
   * Generate a secure URL for resume access
   */
  async getResumeUrl(filePath, expiresInHours =
  /* istanbul ignore next */
  (cov_1lh9w6wygl().b[7][0]++, 24)) {
    /* istanbul ignore next */
    cov_1lh9w6wygl().f[7]++;
    const service =
    /* istanbul ignore next */
    (cov_1lh9w6wygl().s[38]++, await this.getService());
    /* istanbul ignore next */
    cov_1lh9w6wygl().s[39]++;
    return await service.getPublicUrl(filePath, {
      expiresIn: expiresInHours * 3600,
      accessType: 'read'
    });
  }
}
/* istanbul ignore next */
cov_1lh9w6wygl().s[40]++;
exports.ResumeStorageService = ResumeStorageService;
// Export singleton instance for resume operations
/* istanbul ignore next */
cov_1lh9w6wygl().s[41]++;
exports.resumeStorageService = new ResumeStorageService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,