{"version":3,"names":["cov_2coqh8j2dq","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","exports","isAuthenticatedUser","isAuthError","isTokenInfo","AuthErrorCode","obj","uid","error","Error","Object","values","includes","code","provider","value"],"sources":["/Users/dikshantvashistha/PrepBettr/lib/shared/auth/types.ts"],"sourcesContent":["/**\n * Unified Authentication Types\n * \n * Common type definitions for all authentication implementations\n */\n\n// ===== USER TYPES =====\n\nexport interface AuthenticatedUser {\n  uid: string;\n  email?: string;\n  name?: string;\n  picture?: string;\n  email_verified: boolean;\n  firebase?: any;\n  custom_claims?: Record<string, any>;\n  provider?: 'firebase' | 'azure' | 'custom';\n}\n\nexport interface UserSession {\n  userId: string;\n  email?: string;\n  verified: boolean;\n  expiresAt?: Date;\n  refreshToken?: string;\n}\n\n// ===== AUTHENTICATION RESULT TYPES =====\n\nexport interface AuthResult {\n  success: boolean;\n  user: AuthenticatedUser | null;\n  error?: string;\n  errorCode?: AuthErrorCode;\n}\n\nexport interface TokenVerificationResult {\n  valid: boolean;\n  user?: AuthenticatedUser;\n  error?: string;\n  errorCode?: AuthErrorCode;\n  expiresAt?: Date;\n}\n\n// ===== ERROR TYPES =====\n\nexport enum AuthErrorCode {\n  MISSING_TOKEN = 'MISSING_TOKEN',\n  INVALID_TOKEN = 'INVALID_TOKEN',\n  EXPIRED_TOKEN = 'EXPIRED_TOKEN',\n  MALFORMED_TOKEN = 'MALFORMED_TOKEN',\n  INSUFFICIENT_PERMISSIONS = 'INSUFFICIENT_PERMISSIONS',\n  SERVICE_UNAVAILABLE = 'SERVICE_UNAVAILABLE',\n  FIREBASE_ERROR = 'FIREBASE_ERROR',\n  AZURE_ERROR = 'AZURE_ERROR',\n  NETWORK_ERROR = 'NETWORK_ERROR',\n  UNKNOWN_ERROR = 'UNKNOWN_ERROR'\n}\n\nexport interface AuthError extends Error {\n  code: AuthErrorCode;\n  details?: Record<string, any>;\n  statusCode?: number;\n}\n\n// ===== CONFIGURATION TYPES =====\n\nexport interface AuthConfig {\n  firebase?: {\n    projectId: string;\n    clientEmail: string;\n    privateKey: string;\n  };\n  azure?: {\n    tenantId: string;\n    clientId: string;\n    clientSecret: string;\n  };\n  security?: {\n    enableTokenRefresh: boolean;\n    tokenExpiryMinutes: number;\n    maxRetryAttempts: number;\n    retryDelayMs: number;\n  };\n  logging?: {\n    enabled: boolean;\n    level: 'debug' | 'info' | 'warn' | 'error';\n    includeTokenDetails: boolean;\n  };\n}\n\n// ===== MIDDLEWARE TYPES =====\n\nexport interface AuthMiddlewareOptions {\n  requiredRoles?: string[];\n  skipAuth?: boolean;\n  allowAnonymous?: boolean;\n  customValidator?: (user: AuthenticatedUser) => Promise<boolean>;\n}\n\nexport interface AuthMiddlewareResult<TResponse = any> {\n  success: boolean;\n  user: AuthenticatedUser | null;\n  response?: TResponse;\n  error?: string;\n  errorCode?: AuthErrorCode;\n}\n\n// ===== PLATFORM-SPECIFIC TYPES =====\n\n// Next.js specific\nexport interface NextAuthRequest {\n  headers: {\n    get(name: string): string | null;\n  };\n}\n\nexport interface NextAuthResponse {\n  json(data: any, init?: { status?: number }): any;\n}\n\n// Azure Functions specific\nexport interface AzureContext {\n  log: {\n    info: (message: string) => void;\n    warn: (message: string) => void;\n    error: (message: string) => void;\n  };\n  res?: any;\n}\n\nexport interface AzureRequest {\n  headers: Record<string, string>;\n  body?: any;\n  query?: Record<string, string>;\n}\n\n// Express.js specific\nexport interface ExpressRequest {\n  headers: Record<string, string>;\n  user?: AuthenticatedUser;\n}\n\nexport interface ExpressResponse {\n  status(code: number): ExpressResponse;\n  json(data: any): ExpressResponse;\n}\n\nexport interface ExpressNext {\n  (error?: any): void;\n}\n\n// ===== UTILITY TYPES =====\n\nexport type TokenProvider = 'firebase' | 'azure' | 'jwt' | 'custom';\n\nexport interface TokenInfo {\n  provider: TokenProvider;\n  value: string;\n  expiresAt?: Date;\n  userId?: string;\n  claims?: Record<string, any>;\n}\n\nexport interface AuthMetrics {\n  totalRequests: number;\n  successfulAuth: number;\n  failedAuth: number;\n  averageVerificationTime: number;\n  errorsByCode: Partial<Record<AuthErrorCode, number>>;\n}\n\n// ===== TYPE GUARDS =====\n\nexport function isAuthenticatedUser(obj: any): obj is AuthenticatedUser {\n  return obj && typeof obj === 'object' && typeof obj.uid === 'string';\n}\n\nexport function isAuthError(error: any): error is AuthError {\n  return error instanceof Error && 'code' in error && Object.values(AuthErrorCode).includes(error.code as AuthErrorCode);\n}\n\nexport function isTokenInfo(obj: any): obj is TokenInfo {\n  return obj && typeof obj === 'object' && typeof obj.provider === 'string' && typeof obj.value === 'string';\n}\n"],"mappings":"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","ignoreList":[]}