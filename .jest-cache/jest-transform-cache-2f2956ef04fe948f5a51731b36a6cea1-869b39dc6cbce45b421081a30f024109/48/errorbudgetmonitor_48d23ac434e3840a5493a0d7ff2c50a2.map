{"version":3,"names":["azure_cosmos_service_1","cov_2rey90bnga","s","require","ErrorBudgetMonitorService","constructor","f","DEFAULT_BUDGETS","autoApplyAzure","featureName","timeWindow","errorThreshold","portalIntegration","getInstance","instance","b","logError","errorEvent","azureCosmosService","createErrorEvent","errorType","errorMessage","userId","userAgent","timestamp","severity","metadata","console","log","checkErrorBudget","error","getErrorCount","timeWindowMinutes","getErrorEventCount","budgetConfig","Error","currentErrors","budgetExceeded","errorBudget","Object","assign","lastReset","Date","warn","threshold","handleBudgetExceeded","createErrorBudget","breachedAt","errorCount","action","getAllErrorBudgets","results","keys","getRecentErrors","limitCount","errorEvents","getErrorEvents","map","event","logAutoApplyAzureError","logPortalIntegrationError","exports","errorBudgetMonitor"],"sources":["/Users/dikshantvashistha/PrepBettr/lib/services/error-budget-monitor.ts"],"sourcesContent":["import { azureCosmosService } from './azure-cosmos-service';\n\nexport interface ErrorEvent {\n  featureName: string;\n  errorType: 'client_error' | 'server_error' | 'performance' | 'user_experience';\n  errorMessage: string;\n  userId?: string;\n  userAgent?: string;\n  timestamp: Date;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  metadata?: Record<string, any>;\n}\n\nexport interface ErrorBudget {\n  featureName: string;\n  timeWindow: number; // in minutes\n  errorThreshold: number; // maximum allowed errors in the time window\n  currentErrors: number;\n  budgetExceeded: boolean;\n  lastReset: Date;\n}\n\nclass ErrorBudgetMonitorService {\n  private static instance: ErrorBudgetMonitorService;\n\n  // Default error budgets for our features\n  private readonly DEFAULT_BUDGETS: Record<string, Omit<ErrorBudget, 'currentErrors' | 'budgetExceeded' | 'lastReset'>> = {\n    autoApplyAzure: {\n      featureName: 'autoApplyAzure',\n      timeWindow: 60, // 1 hour\n      errorThreshold: 10, // max 10 errors per hour\n    },\n    portalIntegration: {\n      featureName: 'portalIntegration', \n      timeWindow: 60, // 1 hour\n      errorThreshold: 5, // max 5 errors per hour\n    }\n  };\n\n  static getInstance(): ErrorBudgetMonitorService {\n    if (!ErrorBudgetMonitorService.instance) {\n      ErrorBudgetMonitorService.instance = new ErrorBudgetMonitorService();\n    }\n    return ErrorBudgetMonitorService.instance;\n  }\n\n  /**\n   * Log an error event for monitoring\n   */\n  async logError(errorEvent: ErrorEvent): Promise<void> {\n    try {\n      await azureCosmosService.createErrorEvent({\n        featureName: errorEvent.featureName,\n        errorType: errorEvent.errorType,\n        errorMessage: errorEvent.errorMessage,\n        userId: errorEvent.userId,\n        userAgent: errorEvent.userAgent,\n        timestamp: errorEvent.timestamp,\n        severity: errorEvent.severity,\n        metadata: errorEvent.metadata\n      });\n\n      console.log(`Error logged for feature ${errorEvent.featureName}:`, errorEvent.errorMessage);\n      \n      // Check if error budget is exceeded after logging\n      await this.checkErrorBudget(errorEvent.featureName);\n    } catch (error) {\n      console.error('Error logging feature error:', error);\n      // Don't throw to avoid cascading errors\n    }\n  }\n\n  /**\n   * Get error count for a feature within a time window\n   */\n  async getErrorCount(featureName: string, timeWindowMinutes: number = 60): Promise<number> {\n    try {\n      return await azureCosmosService.getErrorEventCount(featureName, timeWindowMinutes);\n    } catch (error) {\n      console.error('Error getting error count:', error);\n      return 0;\n    }\n  }\n\n  /**\n   * Check if error budget is exceeded for a feature\n   */\n  async checkErrorBudget(featureName: string): Promise<ErrorBudget> {\n    const budgetConfig = this.DEFAULT_BUDGETS[featureName];\n    if (!budgetConfig) {\n      throw new Error(`No error budget configured for feature: ${featureName}`);\n    }\n\n    const currentErrors = await this.getErrorCount(featureName, budgetConfig.timeWindow);\n    const budgetExceeded = currentErrors > budgetConfig.errorThreshold;\n\n    const errorBudget: ErrorBudget = {\n      ...budgetConfig,\n      currentErrors,\n      budgetExceeded,\n      lastReset: new Date(),\n    };\n\n    // Log if budget is exceeded\n    if (budgetExceeded) {\n      console.warn(`ðŸš¨ Error budget exceeded for ${featureName}!`, {\n        currentErrors,\n        threshold: budgetConfig.errorThreshold,\n        timeWindow: budgetConfig.timeWindow,\n      });\n      \n      // Could trigger alerts, rollback, etc.\n      await this.handleBudgetExceeded(featureName, errorBudget);\n    }\n\n    return errorBudget;\n  }\n\n  /**\n   * Handle when error budget is exceeded\n   */\n  private async handleBudgetExceeded(featureName: string, errorBudget: ErrorBudget): Promise<void> {\n    // Log the budget breach\n    await azureCosmosService.createErrorBudget({\n      featureName,\n      breachedAt: new Date(),\n      errorCount: errorBudget.currentErrors,\n      threshold: errorBudget.errorThreshold,\n      timeWindow: errorBudget.timeWindow,\n      action: 'budget_exceeded_alert',\n    });\n\n    // In a real implementation, you might:\n    // - Send alerts to monitoring systems\n    // - Automatically disable the feature\n    // - Reduce rollout percentage\n    // - Trigger incident response\n    \n    console.log(`Error budget breach logged for ${featureName}`);\n  }\n\n  /**\n   * Get error budget status for all features\n   */\n  async getAllErrorBudgets(): Promise<Record<string, ErrorBudget>> {\n    const results: Record<string, ErrorBudget> = {};\n    \n    for (const featureName of Object.keys(this.DEFAULT_BUDGETS)) {\n      try {\n        results[featureName] = await this.checkErrorBudget(featureName);\n      } catch (error) {\n        console.error(`Error checking budget for ${featureName}:`, error);\n      }\n    }\n    \n    return results;\n  }\n\n  /**\n   * Get recent errors for a feature\n   */\n  async getRecentErrors(featureName: string, limitCount: number = 10): Promise<ErrorEvent[]> {\n    try {\n      const errorEvents = await azureCosmosService.getErrorEvents(featureName, 24 * 60, limitCount); // Last 24 hours\n      return errorEvents.map(event => ({\n        featureName: event.featureName,\n        errorType: event.errorType as ErrorEvent['errorType'],\n        errorMessage: event.errorMessage,\n        userId: event.userId,\n        userAgent: event.userAgent,\n        timestamp: event.timestamp,\n        severity: event.severity as ErrorEvent['severity'],\n        metadata: event.metadata\n      }));\n    } catch (error) {\n      console.error('Error getting recent errors:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Convenience methods for specific feature logging\n   */\n  async logAutoApplyAzureError(errorMessage: string, severity: ErrorEvent['severity'] = 'medium', metadata?: Record<string, any>): Promise<void> {\n    await this.logError({\n      featureName: 'autoApplyAzure',\n      errorType: 'client_error',\n      errorMessage,\n      severity,\n      metadata,\n      timestamp: new Date(),\n    });\n  }\n\n  async logPortalIntegrationError(errorMessage: string, severity: ErrorEvent['severity'] = 'medium', metadata?: Record<string, any>): Promise<void> {\n    await this.logError({\n      featureName: 'portalIntegration',\n      errorType: 'client_error',\n      errorMessage,\n      severity,\n      metadata,\n      timestamp: new Date(),\n    });\n  }\n}\n\n// Export singleton instance\nexport const errorBudgetMonitor = ErrorBudgetMonitorService.getInstance();\n"],"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","ignoreList":[]}