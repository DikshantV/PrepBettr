{"file":"/Users/dikshantvashistha/PrepBettr/tests/unified-config-service.test.ts","mappings":"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","names":[],"sources":["/Users/dikshantvashistha/PrepBettr/tests/unified-config-service.test.ts"],"sourcesContent":["/**\n * Unit Tests for Unified Configuration Service\n * \n * Tests for the unified configuration service including drift detection,\n * validation, caching, and synchronization capabilities.\n */\n\nimport { describe, it, expect, jest, beforeEach, afterEach } from '@jest/globals';\nimport { unifiedConfigService, CONFIG_SCHEMA, CONFIG_DEFAULTS } from '@/lib/services/unified-config-service';\nimport type { ConfigValue } from '@/lib/services/unified-config-service';\n\n// ===== MOCKS =====\n\n// Mock Azure App Configuration\njest.mock('@azure/app-configuration', () => {\n  const mockSettings = new Map();\n  \n  return {\n    AppConfigurationClient: jest.fn().mockImplementation(() => ({\n      listConfigurationSettings: jest.fn().mockReturnValue({\n        async *[Symbol.asyncIterator]() {\n          for (const [key, value] of mockSettings) {\n            yield {\n              key,\n              value: JSON.stringify(value),\n              contentType: 'application/json',\n              etag: 'mock-etag-' + Date.now(),\n              tags: {\n                syncToFirebase: 'true',\n                version: '1.0.0',\n                source: 'test'\n              }\n            };\n          }\n        }\n      }),\n      getConfigurationSetting: jest.fn().mockImplementation(({ key }) => {\n        const value = mockSettings.get(key);\n        if (!value) {\n          const error = new Error('Not found');\n          (error as any).statusCode = 404;\n          throw error;\n        }\n        return {\n          key,\n          value: JSON.stringify(value),\n          contentType: 'application/json',\n          etag: 'mock-etag-' + Date.now(),\n          tags: {\n            syncToFirebase: 'true',\n            version: '1.0.0'\n          }\n        };\n      }),\n      setConfigurationSetting: jest.fn().mockImplementation(({ key, value }) => {\n        mockSettings.set(key, JSON.parse(value));\n        return Promise.resolve();\n      }),\n      deleteConfigurationSetting: jest.fn().mockImplementation(({ key }) => {\n        mockSettings.delete(key);\n        return Promise.resolve();\n      })\n    })),\n    mockSettings // Expose for test manipulation\n  };\n});\n\n// Mock Azure Identity\njest.mock('@azure/identity', () => ({\n  DefaultAzureCredential: jest.fn().mockImplementation(() => ({}))\n}));\n\n// Mock Firebase Remote Config\njest.mock('firebase/remote-config', () => ({\n  getRemoteConfig: jest.fn().mockReturnValue({}),\n  getValue: jest.fn().mockReturnValue({\n    asString: () => 'false'\n  })\n}));\n\n// Mock Firebase Client\njest.mock('@/firebase/client', () => ({\n  app: {}\n}));\n\n// Mock Cosmos DB Service\nconst mockCosmosService = {\n  initialize: jest.fn().mockResolvedValue(undefined),\n  createDocument: jest.fn().mockResolvedValue('mock-id'),\n  queryDocuments: jest.fn().mockResolvedValue([]),\n  healthCheck: jest.fn().mockResolvedValue({ status: 'healthy' })\n};\n\njest.mock('@/lib/services/azure-cosmos-service', () => ({\n  azureCosmosService: mockCosmosService\n}));\n\n// Mock Error Logging\njest.mock('@/lib/errors', () => ({\n  logServerError: jest.fn()\n}));\n\n// ===== TEST DATA =====\n\nconst testConfigs = {\n  'features.autoApplyAzure': true,\n  'features.voiceInterview': false,\n  'quotas.freeInterviews': 3,\n  'quotas.freeResumes': 2,\n  'core.app.environment': 'test',\n  'core.app.debug': true\n};\n\nconst invalidConfigs = {\n  'quotas.freeInterviews': -1, // Negative number\n  'core.app.environment': 'invalid-env', // Invalid enum\n  'features.autoApplyAzure': 'not-boolean' // Wrong type\n};\n\n// ===== TEST SUITE =====\n\ndescribe('UnifiedConfigService', () => {\n  let mockAzureSettings: Map<string, any>;\n\n  beforeEach(async () => {\n    // Clear all mocks\n    jest.clearAllMocks();\n    \n    // Get reference to mock settings\n    const { mockSettings } = await import('@azure/app-configuration');\n    mockAzureSettings = mockSettings as Map<string, any>;\n    \n    // Set up test data\n    Object.entries(testConfigs).forEach(([key, value]) => {\n      mockAzureSettings.set(key, value);\n    });\n\n    // Mock environment variables\n    process.env.AZURE_APP_CONFIG_CONNECTION_STRING = 'test-connection-string';\n    \n    // Reset service state\n    (unifiedConfigService as any).initialized = false;\n    (unifiedConfigService as any).cache.clear();\n    (unifiedConfigService as any).driftCache.clear();\n  });\n\n  afterEach(() => {\n    jest.clearAllTimers();\n    delete process.env.AZURE_APP_CONFIG_CONNECTION_STRING;\n  });\n\n  // ===== INITIALIZATION TESTS =====\n\n  describe('Initialization', () => {\n    it('should initialize with Azure App Configuration connection string', async () => {\n      await unifiedConfigService.initialize();\n      expect((unifiedConfigService as any).initialized).toBe(true);\n    });\n\n    it('should initialize with Azure endpoint and managed identity', async () => {\n      delete process.env.AZURE_APP_CONFIG_CONNECTION_STRING;\n      process.env.AZURE_APP_CONFIG_ENDPOINT = 'https://test.azconfig.io';\n      \n      await unifiedConfigService.initialize();\n      expect((unifiedConfigService as any).initialized).toBe(true);\n      \n      delete process.env.AZURE_APP_CONFIG_ENDPOINT;\n    });\n\n    it('should handle initialization without Azure configuration', async () => {\n      delete process.env.AZURE_APP_CONFIG_CONNECTION_STRING;\n      \n      await unifiedConfigService.initialize();\n      expect((unifiedConfigService as any).initialized).toBe(true);\n    });\n\n    it('should handle initialization errors gracefully', async () => {\n      const mockClient = (await import('@azure/app-configuration')).AppConfigurationClient;\n      (mockClient as jest.Mock).mockImplementationOnce(() => {\n        throw new Error('Connection failed');\n      });\n      \n      await unifiedConfigService.initialize();\n      expect((unifiedConfigService as any).initialized).toBe(true);\n    });\n  });\n\n  // ===== CONFIGURATION RETRIEVAL TESTS =====\n\n  describe('Configuration Retrieval', () => {\n    beforeEach(async () => {\n      await unifiedConfigService.initialize();\n    });\n\n    it('should get configuration value from Azure', async () => {\n      const value = await unifiedConfigService.get('features.autoApplyAzure');\n      expect(value).toBe(true);\n    });\n\n    it('should return default value for missing keys', async () => {\n      const value = await unifiedConfigService.get('non-existent-key', 'default');\n      expect(value).toBe('default');\n    });\n\n    it('should return schema default for known keys', async () => {\n      mockAzureSettings.clear();\n      const value = await unifiedConfigService.get('features.autoApplyAzure');\n      expect(value).toBe(false); // From CONFIG_DEFAULTS\n    });\n\n    it('should handle Azure service errors gracefully', async () => {\n      const mockClient = (await import('@azure/app-configuration')).AppConfigurationClient;\n      const mockInstance = new mockClient();\n      mockInstance.getConfigurationSetting = jest.fn().mockRejectedValue(new Error('Service unavailable'));\n      \n      (unifiedConfigService as any).azureClient = mockInstance;\n      \n      const value = await unifiedConfigService.get('features.autoApplyAzure', 'fallback');\n      expect(value).toBe('fallback');\n    });\n\n    it('should cache retrieved values', async () => {\n      await unifiedConfigService.get('features.autoApplyAzure');\n      \n      const cache = (unifiedConfigService as any).cache;\n      expect(cache.size).toBeGreaterThan(0);\n    });\n\n    it('should use cached values when available', async () => {\n      // First call\n      await unifiedConfigService.get('features.autoApplyAzure');\n      \n      // Clear mock Azure settings to verify cache is used\n      mockAzureSettings.clear();\n      \n      // Second call should use cache\n      const value = await unifiedConfigService.get('features.autoApplyAzure');\n      expect(value).toBe(true);\n    });\n\n    it('should expire cached values after TTL', async () => {\n      // Set a very short cache TTL for testing\n      (unifiedConfigService as any).CACHE_TTL = 10; // 10ms\n      \n      await unifiedConfigService.get('features.autoApplyAzure');\n      \n      // Wait for cache to expire\n      await new Promise(resolve => setTimeout(resolve, 20));\n      \n      // Should fetch fresh value\n      mockAzureSettings.set('features.autoApplyAzure', false);\n      const value = await unifiedConfigService.get('features.autoApplyAzure');\n      expect(value).toBe(false);\n    });\n  });\n\n  // ===== CONFIGURATION SETTING TESTS =====\n\n  describe('Configuration Setting', () => {\n    beforeEach(async () => {\n      await unifiedConfigService.initialize();\n    });\n\n    it('should set configuration value in Azure', async () => {\n      await unifiedConfigService.set('features.newFeature', true, {\n        environment: 'test',\n        version: '1.0.0',\n        changedBy: 'test-user'\n      });\n\n      expect(mockAzureSettings.get('features.newFeature')).toBe(true);\n    });\n\n    it('should validate configuration values', async () => {\n      await expect(\n        unifiedConfigService.set('quotas.freeInterviews', -1)\n      ).rejects.toThrow('below minimum');\n    });\n\n    it('should record audit entries', async () => {\n      await unifiedConfigService.set('features.testFlag', true);\n      \n      expect(mockCosmosService.createDocument).toHaveBeenCalledWith(\n        'configAudit',\n        expect.objectContaining({\n          key: 'features.testFlag',\n          newValue: true,\n          source: 'unified'\n        })\n      );\n    });\n\n    it('should clear cache after setting values', async () => {\n      // Get a value to populate cache\n      await unifiedConfigService.get('features.autoApplyAzure');\n      expect((unifiedConfigService as any).cache.size).toBeGreaterThan(0);\n      \n      // Set the same key\n      await unifiedConfigService.set('features.autoApplyAzure', false);\n      \n      // Cache should be cleared for that key\n      const cachedValue = (unifiedConfigService as any).getCachedValue('features.autoApplyAzure');\n      expect(cachedValue).toBeNull();\n    });\n\n    it('should handle setting errors gracefully', async () => {\n      const mockClient = (await import('@azure/app-configuration')).AppConfigurationClient;\n      const mockInstance = new mockClient();\n      mockInstance.setConfigurationSetting = jest.fn().mockRejectedValue(new Error('Write failed'));\n      \n      (unifiedConfigService as any).azureClient = mockInstance;\n      \n      await expect(\n        unifiedConfigService.set('features.testFlag', true)\n      ).rejects.toThrow('Write failed');\n    });\n  });\n\n  // ===== BULK OPERATIONS TESTS =====\n\n  describe('Bulk Operations', () => {\n    beforeEach(async () => {\n      await unifiedConfigService.initialize();\n    });\n\n    it('should get all configurations', async () => {\n      const allConfigs = await unifiedConfigService.getAll();\n      \n      expect(allConfigs).toHaveProperty('features.autoApplyAzure', true);\n      expect(allConfigs).toHaveProperty('quotas.freeInterviews', 3);\n    });\n\n    it('should get configurations with prefix filter', async () => {\n      const featureConfigs = await unifiedConfigService.getAll('features.');\n      \n      expect(featureConfigs).toHaveProperty('features.autoApplyAzure');\n      expect(featureConfigs).not.toHaveProperty('quotas.freeInterviews');\n    });\n\n    it('should include defaults for missing keys', async () => {\n      mockAzureSettings.clear();\n      \n      const allConfigs = await unifiedConfigService.getAll();\n      \n      // Should include defaults\n      expect(allConfigs).toHaveProperty('quotas.freeInterviews', 3);\n      expect(allConfigs).toHaveProperty('quotas.freeResumes', 2);\n    });\n\n    it('should handle Azure service errors in bulk operations', async () => {\n      const mockClient = (await import('@azure/app-configuration')).AppConfigurationClient;\n      const mockInstance = new mockClient();\n      mockInstance.listConfigurationSettings = jest.fn().mockImplementation(() => {\n        throw new Error('Service unavailable');\n      });\n      \n      (unifiedConfigService as any).azureClient = mockInstance;\n      \n      const allConfigs = await unifiedConfigService.getAll();\n      \n      // Should return defaults only\n      expect(allConfigs).toHaveProperty('quotas.freeInterviews', 3);\n    });\n  });\n\n  // ===== VALIDATION TESTS =====\n\n  describe('Configuration Validation', () => {\n    beforeEach(async () => {\n      await unifiedConfigService.initialize();\n    });\n\n    it('should validate required fields', async () => {\n      await expect(\n        unifiedConfigService.set('core.app.environment', undefined)\n      ).rejects.toThrow();\n    });\n\n    it('should validate type constraints', async () => {\n      await expect(\n        unifiedConfigService.set('features.autoApplyAzure', 'not-boolean')\n      ).rejects.toThrow('expected type boolean');\n    });\n\n    it('should validate enum constraints', async () => {\n      await expect(\n        unifiedConfigService.set('core.app.environment', 'invalid-env')\n      ).rejects.toThrow('must be one of');\n    });\n\n    it('should validate numeric ranges', async () => {\n      await expect(\n        unifiedConfigService.set('quotas.freeInterviews', -1)\n      ).rejects.toThrow('below minimum');\n      \n      await expect(\n        unifiedConfigService.set('quotas.freeInterviews', 1000)\n      ).rejects.toThrow('above maximum');\n    });\n\n    it('should allow valid configurations', async () => {\n      await expect(\n        unifiedConfigService.set('features.autoApplyAzure', true)\n      ).resolves.not.toThrow();\n      \n      await expect(\n        unifiedConfigService.set('quotas.freeInterviews', 5)\n      ).resolves.not.toThrow();\n    });\n\n    it('should skip validation for unknown keys', async () => {\n      await expect(\n        unifiedConfigService.set('unknown.key', 'any-value')\n      ).resolves.not.toThrow();\n    });\n  });\n\n  // ===== DRIFT DETECTION TESTS =====\n\n  describe('Drift Detection', () => {\n    beforeEach(async () => {\n      await unifiedConfigService.initialize();\n    });\n\n    it('should detect configuration drift', async () => {\n      // Mock Firebase returning different value\n      const { getValue } = await import('firebase/remote-config');\n      (getValue as jest.Mock).mockReturnValue({\n        asString: () => 'true' // Different from Azure value\n      });\n\n      const driftResults = await unifiedConfigService.checkForDrift();\n      \n      expect(driftResults).toEqual(\n        expect.arrayContaining([\n          expect.objectContaining({\n            key: expect.any(String),\n            drifted: true\n          })\n        ])\n      );\n    });\n\n    it('should record drift events in Cosmos DB', async () => {\n      // Mock Firebase returning different value\n      const { getValue } = await import('firebase/remote-config');\n      (getValue as jest.Mock).mockReturnValue({\n        asString: () => 'true'\n      });\n\n      await unifiedConfigService.checkForDrift();\n      \n      expect(mockCosmosService.createDocument).toHaveBeenCalledWith(\n        'configDrift',\n        expect.objectContaining({\n          driftCount: expect.any(Number),\n          keys: expect.any(Array)\n        })\n      );\n    });\n\n    it('should not detect drift when values match', async () => {\n      // Mock Firebase returning same value as Azure\n      const { getValue } = await import('firebase/remote-config');\n      (getValue as jest.Mock).mockReturnValue({\n        asString: () => 'false'\n      });\n\n      const driftResults = await unifiedConfigService.checkForDrift();\n      \n      const driftedItems = driftResults.filter(r => r.drifted);\n      expect(driftedItems).toHaveLength(0);\n    });\n  });\n\n  // ===== SUBSCRIPTION TESTS =====\n\n  describe('Configuration Subscriptions', () => {\n    beforeEach(async () => {\n      await unifiedConfigService.initialize();\n    });\n\n    it('should subscribe to configuration changes', (done) => {\n      let callCount = 0;\n      \n      const unsubscribe = unifiedConfigService.subscribe('features.autoApplyAzure', (value) => {\n        callCount++;\n        if (callCount === 1) {\n          expect(value).toBe(true); // Initial value\n        } else if (callCount === 2) {\n          expect(value).toBe(false); // Changed value\n          unsubscribe();\n          done();\n        }\n      });\n\n      // Change the value after subscription\n      setTimeout(async () => {\n        mockAzureSettings.set('features.autoApplyAzure', false);\n        (unifiedConfigService as any).cache.clear(); // Clear cache to force refresh\n      }, 50);\n    });\n\n    it('should handle subscription errors gracefully', (done) => {\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n      \n      // Mock get method to throw error\n      const originalGet = unifiedConfigService.get;\n      unifiedConfigService.get = jest.fn().mockRejectedValue(new Error('Test error'));\n      \n      const unsubscribe = unifiedConfigService.subscribe('test.key', () => {});\n      \n      setTimeout(() => {\n        expect(consoleSpy).toHaveBeenCalledWith(\n          expect.stringContaining('Config subscription error'),\n          expect.any(Error)\n        );\n        \n        // Restore original method\n        unifiedConfigService.get = originalGet;\n        consoleSpy.mockRestore();\n        unsubscribe();\n        done();\n      }, 50);\n    });\n\n    it('should allow unsubscribing from changes', (done) => {\n      let callCount = 0;\n      \n      const unsubscribe = unifiedConfigService.subscribe('features.autoApplyAzure', () => {\n        callCount++;\n      });\n\n      // Unsubscribe immediately\n      unsubscribe();\n\n      // Change value after unsubscribe\n      setTimeout(async () => {\n        mockAzureSettings.set('features.autoApplyAzure', false);\n        (unifiedConfigService as any).cache.clear();\n      }, 50);\n\n      // Verify no more calls after unsubscribe\n      setTimeout(() => {\n        expect(callCount).toBe(1); // Only initial call\n        done();\n      }, 100);\n    });\n  });\n\n  // ===== ROLLBACK TESTS =====\n\n  describe('Configuration Rollback', () => {\n    beforeEach(async () => {\n      await unifiedConfigService.initialize();\n    });\n\n    it('should rollback to previous configuration version', async () => {\n      const versionId = 'test-version-123';\n      \n      // Mock audit entry\n      mockCosmosService.queryDocuments.mockResolvedValueOnce([{\n        id: 'audit-1',\n        key: 'features.autoApplyAzure',\n        oldValue: false,\n        newValue: true,\n        version: versionId,\n        rollbackable: true,\n        metadata: { syncToFirebase: true }\n      }]);\n\n      await unifiedConfigService.revert(versionId);\n      \n      expect(mockAzureSettings.get('features.autoApplyAzure')).toBe(false);\n    });\n\n    it('should reject rollback for non-existent versions', async () => {\n      const versionId = 'non-existent-version';\n      \n      // Mock no audit entry found\n      mockCosmosService.queryDocuments.mockResolvedValueOnce([]);\n\n      await expect(\n        unifiedConfigService.revert(versionId)\n      ).rejects.toThrow('not found or not rollbackable');\n    });\n\n    it('should reject rollback for non-rollbackable versions', async () => {\n      const versionId = 'test-version-123';\n      \n      // Mock non-rollbackable audit entry\n      mockCosmosService.queryDocuments.mockResolvedValueOnce([{\n        id: 'audit-1',\n        key: 'features.autoApplyAzure',\n        oldValue: false,\n        newValue: true,\n        version: versionId,\n        rollbackable: false\n      }]);\n\n      await expect(\n        unifiedConfigService.revert(versionId)\n      ).rejects.toThrow('not found or not rollbackable');\n    });\n  });\n\n  // ===== REFRESH TESTS =====\n\n  describe('Configuration Refresh', () => {\n    beforeEach(async () => {\n      await unifiedConfigService.initialize();\n    });\n\n    it('should clear caches on refresh', async () => {\n      // Populate caches\n      await unifiedConfigService.get('features.autoApplyAzure');\n      await unifiedConfigService.checkForDrift();\n      \n      expect((unifiedConfigService as any).cache.size).toBeGreaterThan(0);\n      expect((unifiedConfigService as any).driftCache.size).toBeGreaterThan(0);\n      \n      await unifiedConfigService.refresh();\n      \n      expect((unifiedConfigService as any).cache.size).toBe(0);\n      expect((unifiedConfigService as any).driftCache.size).toBe(0);\n    });\n\n    it('should perform drift check on refresh', async () => {\n      const checkForDriftSpy = jest.spyOn(unifiedConfigService, 'checkForDrift');\n      \n      await unifiedConfigService.refresh();\n      \n      expect(checkForDriftSpy).toHaveBeenCalled();\n    });\n  });\n\n  // ===== HEALTH CHECK TESTS =====\n\n  describe('Health Check', () => {\n    it('should return healthy status when Azure client is available', async () => {\n      await unifiedConfigService.initialize();\n      \n      const health = await unifiedConfigService.healthCheck();\n      \n      expect(health.healthy).toBe(true);\n      expect(health.details).toHaveProperty('cacheSize');\n      expect(health.details).toHaveProperty('driftDetected');\n    });\n\n    it('should return unhealthy status when Azure client is not available', async () => {\n      delete process.env.AZURE_APP_CONFIG_CONNECTION_STRING;\n      (unifiedConfigService as any).initialized = false;\n      \n      await unifiedConfigService.initialize();\n      \n      const health = await unifiedConfigService.healthCheck();\n      \n      expect(health.healthy).toBe(false);\n      expect(health.message).toContain('not available');\n    });\n\n    it('should handle health check errors', async () => {\n      await unifiedConfigService.initialize();\n      \n      const mockClient = (await import('@azure/app-configuration')).AppConfigurationClient;\n      const mockInstance = new mockClient();\n      mockInstance.listConfigurationSettings = jest.fn().mockImplementation(() => {\n        throw new Error('Health check failed');\n      });\n      \n      (unifiedConfigService as any).azureClient = mockInstance;\n      \n      const health = await unifiedConfigService.healthCheck();\n      \n      expect(health.healthy).toBe(false);\n      expect(health.message).toContain('Health check failed');\n    });\n  });\n\n  // ===== UTILITY TESTS =====\n\n  describe('Utility Functions', () => {\n    it('should calculate consistent hashes', () => {\n      const hash1 = (unifiedConfigService as any).calculateHash({ a: 1, b: 2 });\n      const hash2 = (unifiedConfigService as any).calculateHash({ b: 2, a: 1 });\n      const hash3 = (unifiedConfigService as any).calculateHash({ a: 1, b: 3 });\n      \n      expect(hash1).toBe(hash2); // Same content, different order\n      expect(hash1).not.toBe(hash3); // Different content\n    });\n\n    it('should infer correct types', () => {\n      const inferType = (unifiedConfigService as any).inferType;\n      \n      expect(inferType('string')).toBe('string');\n      expect(inferType(123)).toBe('number');\n      expect(inferType(true)).toBe('boolean');\n      expect(inferType([])).toBe('array');\n      expect(inferType({})).toBe('object');\n    });\n\n    it('should serialize values correctly', () => {\n      const serializeValue = (unifiedConfigService as any).serializeValue;\n      \n      expect(serializeValue('string')).toBe('string');\n      expect(serializeValue(123)).toBe('123');\n      expect(serializeValue(true)).toBe('true');\n      expect(serializeValue({ a: 1 })).toBe('{\"a\":1}');\n    });\n\n    it('should determine correct content types', () => {\n      const getContentType = (unifiedConfigService as any).getContentType;\n      \n      expect(getContentType('string')).toBe('text/plain');\n      expect(getContentType(123)).toBe('text/plain');\n      expect(getContentType({})).toBe('application/json');\n      expect(getContentType([])).toBe('application/json');\n    });\n  });\n\n  // ===== INTEGRATION TESTS =====\n\n  describe('Integration Scenarios', () => {\n    beforeEach(async () => {\n      await unifiedConfigService.initialize();\n    });\n\n    it('should handle complete configuration lifecycle', async () => {\n      const key = 'integration.test.flag';\n      const initialValue = true;\n      const updatedValue = false;\n\n      // Set initial value\n      await unifiedConfigService.set(key, initialValue, {\n        version: 'v1',\n        changedBy: 'integration-test'\n      });\n\n      // Get and verify\n      let currentValue = await unifiedConfigService.get(key);\n      expect(currentValue).toBe(initialValue);\n\n      // Update value\n      await unifiedConfigService.set(key, updatedValue, {\n        version: 'v2',\n        changedBy: 'integration-test'\n      });\n\n      // Get updated value\n      currentValue = await unifiedConfigService.get(key);\n      expect(currentValue).toBe(updatedValue);\n\n      // Verify audit entries were created\n      expect(mockCosmosService.createDocument).toHaveBeenCalledWith(\n        'configAudit',\n        expect.objectContaining({\n          key,\n          oldValue: expect.any(Boolean),\n          newValue: expect.any(Boolean)\n        })\n      );\n    });\n\n    it('should handle Azure service outage gracefully', async () => {\n      // Simulate Azure service outage\n      const mockClient = (await import('@azure/app-configuration')).AppConfigurationClient;\n      const mockInstance = new mockClient();\n      mockInstance.getConfigurationSetting = jest.fn().mockRejectedValue(new Error('Service outage'));\n      mockInstance.listConfigurationSettings = jest.fn().mockImplementation(() => {\n        throw new Error('Service outage');\n      });\n      \n      (unifiedConfigService as any).azureClient = mockInstance;\n\n      // Should fall back to defaults\n      const value = await unifiedConfigService.get('quotas.freeInterviews');\n      expect(value).toBe(3); // From CONFIG_DEFAULTS\n\n      const allConfigs = await unifiedConfigService.getAll();\n      expect(allConfigs).toHaveProperty('quotas.freeInterviews', 3);\n      \n      // Health check should report unhealthy\n      const health = await unifiedConfigService.healthCheck();\n      expect(health.healthy).toBe(false);\n    });\n\n    it('should maintain consistency during concurrent operations', async () => {\n      const key = 'concurrent.test.counter';\n      let counter = 0;\n\n      // Simulate concurrent increment operations\n      const incrementOperations = Array.from({ length: 10 }, async (_, i) => {\n        const currentValue = await unifiedConfigService.get(key, 0);\n        const newValue = currentValue + 1;\n        await unifiedConfigService.set(key, newValue, {\n          version: `concurrent-${i}`,\n          changedBy: 'concurrent-test'\n        });\n        return newValue;\n      });\n\n      await Promise.all(incrementOperations);\n\n      const finalValue = await unifiedConfigService.get(key);\n      expect(typeof finalValue).toBe('number');\n      expect(finalValue).toBeGreaterThan(0);\n    });\n  });\n});\n\n// ===== REACT HOOK TESTS =====\n\ndescribe('useUnifiedConfig Hook', () => {\n  // Note: These tests would require a React testing environment\n  // For now, we'll test the hook logic conceptually\n  \n  it('should be defined', () => {\n    const { useUnifiedConfig } = require('@/lib/services/unified-config-service');\n    expect(typeof useUnifiedConfig).toBe('function');\n  });\n\n  // Additional React hook tests would go here with @testing-library/react-hooks\n});\n\n// ===== PERFORMANCE TESTS =====\n\ndescribe('Performance Characteristics', () => {\n  beforeEach(async () => {\n    await unifiedConfigService.initialize();\n  });\n\n  it('should handle large configuration sets efficiently', async () => {\n    // Add many configurations\n    const largeConfigSet: Record<string, any> = {};\n    for (let i = 0; i < 1000; i++) {\n      largeConfigSet[`perf.test.key.${i}`] = `value-${i}`;\n      mockAzureSettings.set(`perf.test.key.${i}`, `value-${i}`);\n    }\n\n    const startTime = Date.now();\n    const allConfigs = await unifiedConfigService.getAll('perf.test.');\n    const endTime = Date.now();\n\n    expect(Object.keys(allConfigs).length).toBeGreaterThanOrEqual(1000);\n    expect(endTime - startTime).toBeLessThan(5000); // Should complete within 5 seconds\n  });\n\n  it('should cache frequently accessed values', async () => {\n    const key = 'perf.frequently.accessed';\n    \n    // First access\n    const start1 = Date.now();\n    await unifiedConfigService.get(key, 'default');\n    const time1 = Date.now() - start1;\n\n    // Second access (should use cache)\n    const start2 = Date.now();\n    await unifiedConfigService.get(key, 'default');\n    const time2 = Date.now() - start2;\n\n    // Cached access should be significantly faster\n    expect(time2).toBeLessThan(time1);\n  });\n});\n"],"version":3}