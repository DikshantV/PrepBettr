4d9d012e4c4272060b52bec08fb7dc1e
"use strict";
/**
 * Unit Tests for Unified Configuration Service
 *
 * Tests for the unified configuration service including drift detection,
 * validation, caching, and synchronization capabilities.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// ===== MOCKS =====
// Mock Azure App Configuration
globals_1.jest.mock('@azure/app-configuration', () => {
    const mockSettings = new Map();
    return {
        AppConfigurationClient: globals_1.jest.fn().mockImplementation(() => ({
            listConfigurationSettings: globals_1.jest.fn().mockReturnValue({
                [Symbol.asyncIterator]() {
                    return __asyncGenerator(this, arguments, function* _a() {
                        for (const [key, value] of mockSettings) {
                            yield yield __await({
                                key,
                                value: JSON.stringify(value),
                                contentType: 'application/json',
                                etag: 'mock-etag-' + Date.now(),
                                tags: {
                                    syncToFirebase: 'true',
                                    version: '1.0.0',
                                    source: 'test'
                                }
                            });
                        }
                    });
                }
            }),
            getConfigurationSetting: globals_1.jest.fn().mockImplementation(({ key }) => {
                const value = mockSettings.get(key);
                if (!value) {
                    const error = new Error('Not found');
                    error.statusCode = 404;
                    throw error;
                }
                return {
                    key,
                    value: JSON.stringify(value),
                    contentType: 'application/json',
                    etag: 'mock-etag-' + Date.now(),
                    tags: {
                        syncToFirebase: 'true',
                        version: '1.0.0'
                    }
                };
            }),
            setConfigurationSetting: globals_1.jest.fn().mockImplementation(({ key, value }) => {
                mockSettings.set(key, JSON.parse(value));
                return Promise.resolve();
            }),
            deleteConfigurationSetting: globals_1.jest.fn().mockImplementation(({ key }) => {
                mockSettings.delete(key);
                return Promise.resolve();
            })
        })),
        mockSettings // Expose for test manipulation
    };
});
// Mock Azure Identity
globals_1.jest.mock('@azure/identity', () => ({
    DefaultAzureCredential: globals_1.jest.fn().mockImplementation(() => ({}))
}));
// Mock Firebase Remote Config
globals_1.jest.mock('firebase/remote-config', () => ({
    getRemoteConfig: globals_1.jest.fn().mockReturnValue({}),
    getValue: globals_1.jest.fn().mockReturnValue({
        asString: () => 'false'
    })
}));
// Mock Firebase Client
globals_1.jest.mock('@/firebase/client', () => ({
    app: {}
}));
globals_1.jest.mock('@/lib/services/azure-cosmos-service', () => ({
    azureCosmosService: mockCosmosService
}));
// Mock Error Logging
globals_1.jest.mock('@/lib/errors', () => ({
    logServerError: globals_1.jest.fn()
}));
const unified_config_service_1 = require("@/lib/services/unified-config-service");
// Mock Cosmos DB Service
const mockCosmosService = {
    initialize: globals_1.jest.fn().mockResolvedValue(undefined),
    createDocument: globals_1.jest.fn().mockResolvedValue('mock-id'),
    queryDocuments: globals_1.jest.fn().mockResolvedValue([]),
    healthCheck: globals_1.jest.fn().mockResolvedValue({ status: 'healthy' })
};
// ===== TEST DATA =====
const testConfigs = {
    'features.autoApplyAzure': true,
    'features.voiceInterview': false,
    'quotas.freeInterviews': 3,
    'quotas.freeResumes': 2,
    'core.app.environment': 'test',
    'core.app.debug': true
};
const invalidConfigs = {
    'quotas.freeInterviews': -1, // Negative number
    'core.app.environment': 'invalid-env', // Invalid enum
    'features.autoApplyAzure': 'not-boolean' // Wrong type
};
// ===== TEST SUITE =====
(0, globals_1.describe)('UnifiedConfigService', () => {
    let mockAzureSettings;
    (0, globals_1.beforeEach)(async () => {
        // Clear all mocks
        globals_1.jest.clearAllMocks();
        // Get reference to mock settings
        const { mockSettings } = await Promise.resolve().then(() => __importStar(require('@azure/app-configuration')));
        mockAzureSettings = mockSettings;
        // Set up test data
        Object.entries(testConfigs).forEach(([key, value]) => {
            mockAzureSettings.set(key, value);
        });
        // Mock environment variables
        process.env.AZURE_APP_CONFIG_CONNECTION_STRING = 'test-connection-string';
        // Reset service state
        unified_config_service_1.unifiedConfigService.initialized = false;
        unified_config_service_1.unifiedConfigService.cache.clear();
        unified_config_service_1.unifiedConfigService.driftCache.clear();
    });
    (0, globals_1.afterEach)(() => {
        globals_1.jest.clearAllTimers();
        delete process.env.AZURE_APP_CONFIG_CONNECTION_STRING;
    });
    // ===== INITIALIZATION TESTS =====
    (0, globals_1.describe)('Initialization', () => {
        (0, globals_1.it)('should initialize with Azure App Configuration connection string', async () => {
            await unified_config_service_1.unifiedConfigService.initialize();
            (0, globals_1.expect)(unified_config_service_1.unifiedConfigService.initialized).toBe(true);
        });
        (0, globals_1.it)('should initialize with Azure endpoint and managed identity', async () => {
            delete process.env.AZURE_APP_CONFIG_CONNECTION_STRING;
            process.env.AZURE_APP_CONFIG_ENDPOINT = 'https://test.azconfig.io';
            await unified_config_service_1.unifiedConfigService.initialize();
            (0, globals_1.expect)(unified_config_service_1.unifiedConfigService.initialized).toBe(true);
            delete process.env.AZURE_APP_CONFIG_ENDPOINT;
        });
        (0, globals_1.it)('should handle initialization without Azure configuration', async () => {
            delete process.env.AZURE_APP_CONFIG_CONNECTION_STRING;
            await unified_config_service_1.unifiedConfigService.initialize();
            (0, globals_1.expect)(unified_config_service_1.unifiedConfigService.initialized).toBe(true);
        });
        (0, globals_1.it)('should handle initialization errors gracefully', async () => {
            const mockClient = (await Promise.resolve().then(() => __importStar(require('@azure/app-configuration')))).AppConfigurationClient;
            mockClient.mockImplementationOnce(() => {
                throw new Error('Connection failed');
            });
            await unified_config_service_1.unifiedConfigService.initialize();
            (0, globals_1.expect)(unified_config_service_1.unifiedConfigService.initialized).toBe(true);
        });
    });
    // ===== CONFIGURATION RETRIEVAL TESTS =====
    (0, globals_1.describe)('Configuration Retrieval', () => {
        (0, globals_1.beforeEach)(async () => {
            await unified_config_service_1.unifiedConfigService.initialize();
        });
        (0, globals_1.it)('should get configuration value from Azure', async () => {
            const value = await unified_config_service_1.unifiedConfigService.get('features.autoApplyAzure');
            (0, globals_1.expect)(value).toBe(true);
        });
        (0, globals_1.it)('should return default value for missing keys', async () => {
            const value = await unified_config_service_1.unifiedConfigService.get('non-existent-key', 'default');
            (0, globals_1.expect)(value).toBe('default');
        });
        (0, globals_1.it)('should return schema default for known keys', async () => {
            mockAzureSettings.clear();
            const value = await unified_config_service_1.unifiedConfigService.get('features.autoApplyAzure');
            (0, globals_1.expect)(value).toBe(false); // From CONFIG_DEFAULTS
        });
        (0, globals_1.it)('should handle Azure service errors gracefully', async () => {
            const mockClient = (await Promise.resolve().then(() => __importStar(require('@azure/app-configuration')))).AppConfigurationClient;
            const mockInstance = new mockClient();
            mockInstance.getConfigurationSetting = globals_1.jest.fn().mockRejectedValue(new Error('Service unavailable'));
            unified_config_service_1.unifiedConfigService.azureClient = mockInstance;
            const value = await unified_config_service_1.unifiedConfigService.get('features.autoApplyAzure', 'fallback');
            (0, globals_1.expect)(value).toBe('fallback');
        });
        (0, globals_1.it)('should cache retrieved values', async () => {
            await unified_config_service_1.unifiedConfigService.get('features.autoApplyAzure');
            const cache = unified_config_service_1.unifiedConfigService.cache;
            (0, globals_1.expect)(cache.size).toBeGreaterThan(0);
        });
        (0, globals_1.it)('should use cached values when available', async () => {
            // First call
            await unified_config_service_1.unifiedConfigService.get('features.autoApplyAzure');
            // Clear mock Azure settings to verify cache is used
            mockAzureSettings.clear();
            // Second call should use cache
            const value = await unified_config_service_1.unifiedConfigService.get('features.autoApplyAzure');
            (0, globals_1.expect)(value).toBe(true);
        });
        (0, globals_1.it)('should expire cached values after TTL', async () => {
            // Set a very short cache TTL for testing
            unified_config_service_1.unifiedConfigService.CACHE_TTL = 10; // 10ms
            await unified_config_service_1.unifiedConfigService.get('features.autoApplyAzure');
            // Wait for cache to expire
            await new Promise(resolve => setTimeout(resolve, 20));
            // Should fetch fresh value
            mockAzureSettings.set('features.autoApplyAzure', false);
            const value = await unified_config_service_1.unifiedConfigService.get('features.autoApplyAzure');
            (0, globals_1.expect)(value).toBe(false);
        });
    });
    // ===== CONFIGURATION SETTING TESTS =====
    (0, globals_1.describe)('Configuration Setting', () => {
        (0, globals_1.beforeEach)(async () => {
            await unified_config_service_1.unifiedConfigService.initialize();
        });
        (0, globals_1.it)('should set configuration value in Azure', async () => {
            await unified_config_service_1.unifiedConfigService.set('features.newFeature', true, {
                environment: 'test',
                version: '1.0.0',
                changedBy: 'test-user'
            });
            (0, globals_1.expect)(mockAzureSettings.get('features.newFeature')).toBe(true);
        });
        (0, globals_1.it)('should validate configuration values', async () => {
            await (0, globals_1.expect)(unified_config_service_1.unifiedConfigService.set('quotas.freeInterviews', -1)).rejects.toThrow('below minimum');
        });
        (0, globals_1.it)('should record audit entries', async () => {
            await unified_config_service_1.unifiedConfigService.set('features.testFlag', true);
            (0, globals_1.expect)(mockCosmosService.createDocument).toHaveBeenCalledWith('configAudit', globals_1.expect.objectContaining({
                key: 'features.testFlag',
                newValue: true,
                source: 'unified'
            }));
        });
        (0, globals_1.it)('should clear cache after setting values', async () => {
            // Get a value to populate cache
            await unified_config_service_1.unifiedConfigService.get('features.autoApplyAzure');
            (0, globals_1.expect)(unified_config_service_1.unifiedConfigService.cache.size).toBeGreaterThan(0);
            // Set the same key
            await unified_config_service_1.unifiedConfigService.set('features.autoApplyAzure', false);
            // Cache should be cleared for that key
            const cachedValue = unified_config_service_1.unifiedConfigService.getCachedValue('features.autoApplyAzure');
            (0, globals_1.expect)(cachedValue).toBeNull();
        });
        (0, globals_1.it)('should handle setting errors gracefully', async () => {
            const mockClient = (await Promise.resolve().then(() => __importStar(require('@azure/app-configuration')))).AppConfigurationClient;
            const mockInstance = new mockClient();
            mockInstance.setConfigurationSetting = globals_1.jest.fn().mockRejectedValue(new Error('Write failed'));
            unified_config_service_1.unifiedConfigService.azureClient = mockInstance;
            await (0, globals_1.expect)(unified_config_service_1.unifiedConfigService.set('features.testFlag', true)).rejects.toThrow('Write failed');
        });
    });
    // ===== BULK OPERATIONS TESTS =====
    (0, globals_1.describe)('Bulk Operations', () => {
        (0, globals_1.beforeEach)(async () => {
            await unified_config_service_1.unifiedConfigService.initialize();
        });
        (0, globals_1.it)('should get all configurations', async () => {
            const allConfigs = await unified_config_service_1.unifiedConfigService.getAll();
            (0, globals_1.expect)(allConfigs).toHaveProperty('features.autoApplyAzure', true);
            (0, globals_1.expect)(allConfigs).toHaveProperty('quotas.freeInterviews', 3);
        });
        (0, globals_1.it)('should get configurations with prefix filter', async () => {
            const featureConfigs = await unified_config_service_1.unifiedConfigService.getAll('features.');
            (0, globals_1.expect)(featureConfigs).toHaveProperty('features.autoApplyAzure');
            (0, globals_1.expect)(featureConfigs).not.toHaveProperty('quotas.freeInterviews');
        });
        (0, globals_1.it)('should include defaults for missing keys', async () => {
            mockAzureSettings.clear();
            const allConfigs = await unified_config_service_1.unifiedConfigService.getAll();
            // Should include defaults
            (0, globals_1.expect)(allConfigs).toHaveProperty('quotas.freeInterviews', 3);
            (0, globals_1.expect)(allConfigs).toHaveProperty('quotas.freeResumes', 2);
        });
        (0, globals_1.it)('should handle Azure service errors in bulk operations', async () => {
            const mockClient = (await Promise.resolve().then(() => __importStar(require('@azure/app-configuration')))).AppConfigurationClient;
            const mockInstance = new mockClient();
            mockInstance.listConfigurationSettings = globals_1.jest.fn().mockImplementation(() => {
                throw new Error('Service unavailable');
            });
            unified_config_service_1.unifiedConfigService.azureClient = mockInstance;
            const allConfigs = await unified_config_service_1.unifiedConfigService.getAll();
            // Should return defaults only
            (0, globals_1.expect)(allConfigs).toHaveProperty('quotas.freeInterviews', 3);
        });
    });
    // ===== VALIDATION TESTS =====
    (0, globals_1.describe)('Configuration Validation', () => {
        (0, globals_1.beforeEach)(async () => {
            await unified_config_service_1.unifiedConfigService.initialize();
        });
        (0, globals_1.it)('should validate required fields', async () => {
            await (0, globals_1.expect)(unified_config_service_1.unifiedConfigService.set('core.app.environment', undefined)).rejects.toThrow();
        });
        (0, globals_1.it)('should validate type constraints', async () => {
            await (0, globals_1.expect)(unified_config_service_1.unifiedConfigService.set('features.autoApplyAzure', 'not-boolean')).rejects.toThrow('expected type boolean');
        });
        (0, globals_1.it)('should validate enum constraints', async () => {
            await (0, globals_1.expect)(unified_config_service_1.unifiedConfigService.set('core.app.environment', 'invalid-env')).rejects.toThrow('must be one of');
        });
        (0, globals_1.it)('should validate numeric ranges', async () => {
            await (0, globals_1.expect)(unified_config_service_1.unifiedConfigService.set('quotas.freeInterviews', -1)).rejects.toThrow('below minimum');
            await (0, globals_1.expect)(unified_config_service_1.unifiedConfigService.set('quotas.freeInterviews', 1000)).rejects.toThrow('above maximum');
        });
        (0, globals_1.it)('should allow valid configurations', async () => {
            await (0, globals_1.expect)(unified_config_service_1.unifiedConfigService.set('features.autoApplyAzure', true)).resolves.not.toThrow();
            await (0, globals_1.expect)(unified_config_service_1.unifiedConfigService.set('quotas.freeInterviews', 5)).resolves.not.toThrow();
        });
        (0, globals_1.it)('should skip validation for unknown keys', async () => {
            await (0, globals_1.expect)(unified_config_service_1.unifiedConfigService.set('unknown.key', 'any-value')).resolves.not.toThrow();
        });
    });
    // ===== DRIFT DETECTION TESTS =====
    (0, globals_1.describe)('Drift Detection', () => {
        (0, globals_1.beforeEach)(async () => {
            await unified_config_service_1.unifiedConfigService.initialize();
        });
        (0, globals_1.it)('should detect configuration drift', async () => {
            // Mock Firebase returning different value
            const { getValue } = await Promise.resolve().then(() => __importStar(require('firebase/remote-config')));
            getValue.mockReturnValue({
                asString: () => 'true' // Different from Azure value
            });
            const driftResults = await unified_config_service_1.unifiedConfigService.checkForDrift();
            (0, globals_1.expect)(driftResults).toEqual(globals_1.expect.arrayContaining([
                globals_1.expect.objectContaining({
                    key: globals_1.expect.any(String),
                    drifted: true
                })
            ]));
        });
        (0, globals_1.it)('should record drift events in Cosmos DB', async () => {
            // Mock Firebase returning different value
            const { getValue } = await Promise.resolve().then(() => __importStar(require('firebase/remote-config')));
            getValue.mockReturnValue({
                asString: () => 'true'
            });
            await unified_config_service_1.unifiedConfigService.checkForDrift();
            (0, globals_1.expect)(mockCosmosService.createDocument).toHaveBeenCalledWith('configDrift', globals_1.expect.objectContaining({
                driftCount: globals_1.expect.any(Number),
                keys: globals_1.expect.any(Array)
            }));
        });
        (0, globals_1.it)('should not detect drift when values match', async () => {
            // Mock Firebase returning same value as Azure
            const { getValue } = await Promise.resolve().then(() => __importStar(require('firebase/remote-config')));
            getValue.mockReturnValue({
                asString: () => 'false'
            });
            const driftResults = await unified_config_service_1.unifiedConfigService.checkForDrift();
            const driftedItems = driftResults.filter(r => r.drifted);
            (0, globals_1.expect)(driftedItems).toHaveLength(0);
        });
    });
    // ===== SUBSCRIPTION TESTS =====
    (0, globals_1.describe)('Configuration Subscriptions', () => {
        (0, globals_1.beforeEach)(async () => {
            await unified_config_service_1.unifiedConfigService.initialize();
        });
        (0, globals_1.it)('should subscribe to configuration changes', (done) => {
            let callCount = 0;
            const unsubscribe = unified_config_service_1.unifiedConfigService.subscribe('features.autoApplyAzure', (value) => {
                callCount++;
                if (callCount === 1) {
                    (0, globals_1.expect)(value).toBe(true); // Initial value
                }
                else if (callCount === 2) {
                    (0, globals_1.expect)(value).toBe(false); // Changed value
                    unsubscribe();
                    done();
                }
            });
            // Change the value after subscription
            setTimeout(async () => {
                mockAzureSettings.set('features.autoApplyAzure', false);
                unified_config_service_1.unifiedConfigService.cache.clear(); // Clear cache to force refresh
            }, 50);
        });
        (0, globals_1.it)('should handle subscription errors gracefully', (done) => {
            const consoleSpy = globals_1.jest.spyOn(console, 'error').mockImplementation();
            // Mock get method to throw error
            const originalGet = unified_config_service_1.unifiedConfigService.get;
            unified_config_service_1.unifiedConfigService.get = globals_1.jest.fn().mockRejectedValue(new Error('Test error'));
            const unsubscribe = unified_config_service_1.unifiedConfigService.subscribe('test.key', () => { });
            setTimeout(() => {
                (0, globals_1.expect)(consoleSpy).toHaveBeenCalledWith(globals_1.expect.stringContaining('Config subscription error'), globals_1.expect.any(Error));
                // Restore original method
                unified_config_service_1.unifiedConfigService.get = originalGet;
                consoleSpy.mockRestore();
                unsubscribe();
                done();
            }, 50);
        });
        (0, globals_1.it)('should allow unsubscribing from changes', (done) => {
            let callCount = 0;
            const unsubscribe = unified_config_service_1.unifiedConfigService.subscribe('features.autoApplyAzure', () => {
                callCount++;
            });
            // Unsubscribe immediately
            unsubscribe();
            // Change value after unsubscribe
            setTimeout(async () => {
                mockAzureSettings.set('features.autoApplyAzure', false);
                unified_config_service_1.unifiedConfigService.cache.clear();
            }, 50);
            // Verify no more calls after unsubscribe
            setTimeout(() => {
                (0, globals_1.expect)(callCount).toBe(1); // Only initial call
                done();
            }, 100);
        });
    });
    // ===== ROLLBACK TESTS =====
    (0, globals_1.describe)('Configuration Rollback', () => {
        (0, globals_1.beforeEach)(async () => {
            await unified_config_service_1.unifiedConfigService.initialize();
        });
        (0, globals_1.it)('should rollback to previous configuration version', async () => {
            const versionId = 'test-version-123';
            // Mock audit entry
            mockCosmosService.queryDocuments.mockResolvedValueOnce([{
                    id: 'audit-1',
                    key: 'features.autoApplyAzure',
                    oldValue: false,
                    newValue: true,
                    version: versionId,
                    rollbackable: true,
                    metadata: { syncToFirebase: true }
                }]);
            await unified_config_service_1.unifiedConfigService.revert(versionId);
            (0, globals_1.expect)(mockAzureSettings.get('features.autoApplyAzure')).toBe(false);
        });
        (0, globals_1.it)('should reject rollback for non-existent versions', async () => {
            const versionId = 'non-existent-version';
            // Mock no audit entry found
            mockCosmosService.queryDocuments.mockResolvedValueOnce([]);
            await (0, globals_1.expect)(unified_config_service_1.unifiedConfigService.revert(versionId)).rejects.toThrow('not found or not rollbackable');
        });
        (0, globals_1.it)('should reject rollback for non-rollbackable versions', async () => {
            const versionId = 'test-version-123';
            // Mock non-rollbackable audit entry
            mockCosmosService.queryDocuments.mockResolvedValueOnce([{
                    id: 'audit-1',
                    key: 'features.autoApplyAzure',
                    oldValue: false,
                    newValue: true,
                    version: versionId,
                    rollbackable: false
                }]);
            await (0, globals_1.expect)(unified_config_service_1.unifiedConfigService.revert(versionId)).rejects.toThrow('not found or not rollbackable');
        });
    });
    // ===== REFRESH TESTS =====
    (0, globals_1.describe)('Configuration Refresh', () => {
        (0, globals_1.beforeEach)(async () => {
            await unified_config_service_1.unifiedConfigService.initialize();
        });
        (0, globals_1.it)('should clear caches on refresh', async () => {
            // Populate caches
            await unified_config_service_1.unifiedConfigService.get('features.autoApplyAzure');
            await unified_config_service_1.unifiedConfigService.checkForDrift();
            (0, globals_1.expect)(unified_config_service_1.unifiedConfigService.cache.size).toBeGreaterThan(0);
            (0, globals_1.expect)(unified_config_service_1.unifiedConfigService.driftCache.size).toBeGreaterThan(0);
            await unified_config_service_1.unifiedConfigService.refresh();
            (0, globals_1.expect)(unified_config_service_1.unifiedConfigService.cache.size).toBe(0);
            (0, globals_1.expect)(unified_config_service_1.unifiedConfigService.driftCache.size).toBe(0);
        });
        (0, globals_1.it)('should perform drift check on refresh', async () => {
            const checkForDriftSpy = globals_1.jest.spyOn(unified_config_service_1.unifiedConfigService, 'checkForDrift');
            await unified_config_service_1.unifiedConfigService.refresh();
            (0, globals_1.expect)(checkForDriftSpy).toHaveBeenCalled();
        });
    });
    // ===== HEALTH CHECK TESTS =====
    (0, globals_1.describe)('Health Check', () => {
        (0, globals_1.it)('should return healthy status when Azure client is available', async () => {
            await unified_config_service_1.unifiedConfigService.initialize();
            const health = await unified_config_service_1.unifiedConfigService.healthCheck();
            (0, globals_1.expect)(health.healthy).toBe(true);
            (0, globals_1.expect)(health.details).toHaveProperty('cacheSize');
            (0, globals_1.expect)(health.details).toHaveProperty('driftDetected');
        });
        (0, globals_1.it)('should return unhealthy status when Azure client is not available', async () => {
            delete process.env.AZURE_APP_CONFIG_CONNECTION_STRING;
            unified_config_service_1.unifiedConfigService.initialized = false;
            await unified_config_service_1.unifiedConfigService.initialize();
            const health = await unified_config_service_1.unifiedConfigService.healthCheck();
            (0, globals_1.expect)(health.healthy).toBe(false);
            (0, globals_1.expect)(health.message).toContain('not available');
        });
        (0, globals_1.it)('should handle health check errors', async () => {
            await unified_config_service_1.unifiedConfigService.initialize();
            const mockClient = (await Promise.resolve().then(() => __importStar(require('@azure/app-configuration')))).AppConfigurationClient;
            const mockInstance = new mockClient();
            mockInstance.listConfigurationSettings = globals_1.jest.fn().mockImplementation(() => {
                throw new Error('Health check failed');
            });
            unified_config_service_1.unifiedConfigService.azureClient = mockInstance;
            const health = await unified_config_service_1.unifiedConfigService.healthCheck();
            (0, globals_1.expect)(health.healthy).toBe(false);
            (0, globals_1.expect)(health.message).toContain('Health check failed');
        });
    });
    // ===== UTILITY TESTS =====
    (0, globals_1.describe)('Utility Functions', () => {
        (0, globals_1.it)('should calculate consistent hashes', () => {
            const hash1 = unified_config_service_1.unifiedConfigService.calculateHash({ a: 1, b: 2 });
            const hash2 = unified_config_service_1.unifiedConfigService.calculateHash({ b: 2, a: 1 });
            const hash3 = unified_config_service_1.unifiedConfigService.calculateHash({ a: 1, b: 3 });
            (0, globals_1.expect)(hash1).toBe(hash2); // Same content, different order
            (0, globals_1.expect)(hash1).not.toBe(hash3); // Different content
        });
        (0, globals_1.it)('should infer correct types', () => {
            const inferType = unified_config_service_1.unifiedConfigService.inferType;
            (0, globals_1.expect)(inferType('string')).toBe('string');
            (0, globals_1.expect)(inferType(123)).toBe('number');
            (0, globals_1.expect)(inferType(true)).toBe('boolean');
            (0, globals_1.expect)(inferType([])).toBe('array');
            (0, globals_1.expect)(inferType({})).toBe('object');
        });
        (0, globals_1.it)('should serialize values correctly', () => {
            const serializeValue = unified_config_service_1.unifiedConfigService.serializeValue;
            (0, globals_1.expect)(serializeValue('string')).toBe('string');
            (0, globals_1.expect)(serializeValue(123)).toBe('123');
            (0, globals_1.expect)(serializeValue(true)).toBe('true');
            (0, globals_1.expect)(serializeValue({ a: 1 })).toBe('{"a":1}');
        });
        (0, globals_1.it)('should determine correct content types', () => {
            const getContentType = unified_config_service_1.unifiedConfigService.getContentType;
            (0, globals_1.expect)(getContentType('string')).toBe('text/plain');
            (0, globals_1.expect)(getContentType(123)).toBe('text/plain');
            (0, globals_1.expect)(getContentType({})).toBe('application/json');
            (0, globals_1.expect)(getContentType([])).toBe('application/json');
        });
    });
    // ===== INTEGRATION TESTS =====
    (0, globals_1.describe)('Integration Scenarios', () => {
        (0, globals_1.beforeEach)(async () => {
            await unified_config_service_1.unifiedConfigService.initialize();
        });
        (0, globals_1.it)('should handle complete configuration lifecycle', async () => {
            const key = 'integration.test.flag';
            const initialValue = true;
            const updatedValue = false;
            // Set initial value
            await unified_config_service_1.unifiedConfigService.set(key, initialValue, {
                version: 'v1',
                changedBy: 'integration-test'
            });
            // Get and verify
            let currentValue = await unified_config_service_1.unifiedConfigService.get(key);
            (0, globals_1.expect)(currentValue).toBe(initialValue);
            // Update value
            await unified_config_service_1.unifiedConfigService.set(key, updatedValue, {
                version: 'v2',
                changedBy: 'integration-test'
            });
            // Get updated value
            currentValue = await unified_config_service_1.unifiedConfigService.get(key);
            (0, globals_1.expect)(currentValue).toBe(updatedValue);
            // Verify audit entries were created
            (0, globals_1.expect)(mockCosmosService.createDocument).toHaveBeenCalledWith('configAudit', globals_1.expect.objectContaining({
                key,
                oldValue: globals_1.expect.any(Boolean),
                newValue: globals_1.expect.any(Boolean)
            }));
        });
        (0, globals_1.it)('should handle Azure service outage gracefully', async () => {
            // Simulate Azure service outage
            const mockClient = (await Promise.resolve().then(() => __importStar(require('@azure/app-configuration')))).AppConfigurationClient;
            const mockInstance = new mockClient();
            mockInstance.getConfigurationSetting = globals_1.jest.fn().mockRejectedValue(new Error('Service outage'));
            mockInstance.listConfigurationSettings = globals_1.jest.fn().mockImplementation(() => {
                throw new Error('Service outage');
            });
            unified_config_service_1.unifiedConfigService.azureClient = mockInstance;
            // Should fall back to defaults
            const value = await unified_config_service_1.unifiedConfigService.get('quotas.freeInterviews');
            (0, globals_1.expect)(value).toBe(3); // From CONFIG_DEFAULTS
            const allConfigs = await unified_config_service_1.unifiedConfigService.getAll();
            (0, globals_1.expect)(allConfigs).toHaveProperty('quotas.freeInterviews', 3);
            // Health check should report unhealthy
            const health = await unified_config_service_1.unifiedConfigService.healthCheck();
            (0, globals_1.expect)(health.healthy).toBe(false);
        });
        (0, globals_1.it)('should maintain consistency during concurrent operations', async () => {
            const key = 'concurrent.test.counter';
            let counter = 0;
            // Simulate concurrent increment operations
            const incrementOperations = Array.from({ length: 10 }, async (_, i) => {
                const currentValue = await unified_config_service_1.unifiedConfigService.get(key, 0);
                const newValue = currentValue + 1;
                await unified_config_service_1.unifiedConfigService.set(key, newValue, {
                    version: `concurrent-${i}`,
                    changedBy: 'concurrent-test'
                });
                return newValue;
            });
            await Promise.all(incrementOperations);
            const finalValue = await unified_config_service_1.unifiedConfigService.get(key);
            (0, globals_1.expect)(typeof finalValue).toBe('number');
            (0, globals_1.expect)(finalValue).toBeGreaterThan(0);
        });
    });
});
// ===== REACT HOOK TESTS =====
(0, globals_1.describe)('useUnifiedConfig Hook', () => {
    // Note: These tests would require a React testing environment
    // For now, we'll test the hook logic conceptually
    (0, globals_1.it)('should be defined', () => {
        const { useUnifiedConfig } = require('@/lib/services/unified-config-service');
        (0, globals_1.expect)(typeof useUnifiedConfig).toBe('function');
    });
    // Additional React hook tests would go here with @testing-library/react-hooks
});
// ===== PERFORMANCE TESTS =====
(0, globals_1.describe)('Performance Characteristics', () => {
    (0, globals_1.beforeEach)(async () => {
        await unified_config_service_1.unifiedConfigService.initialize();
    });
    (0, globals_1.it)('should handle large configuration sets efficiently', async () => {
        // Add many configurations
        const largeConfigSet = {};
        for (let i = 0; i < 1000; i++) {
            largeConfigSet[`perf.test.key.${i}`] = `value-${i}`;
            mockAzureSettings.set(`perf.test.key.${i}`, `value-${i}`);
        }
        const startTime = Date.now();
        const allConfigs = await unified_config_service_1.unifiedConfigService.getAll('perf.test.');
        const endTime = Date.now();
        (0, globals_1.expect)(Object.keys(allConfigs).length).toBeGreaterThanOrEqual(1000);
        (0, globals_1.expect)(endTime - startTime).toBeLessThan(5000); // Should complete within 5 seconds
    });
    (0, globals_1.it)('should cache frequently accessed values', async () => {
        const key = 'perf.frequently.accessed';
        // First access
        const start1 = Date.now();
        await unified_config_service_1.unifiedConfigService.get(key, 'default');
        const time1 = Date.now() - start1;
        // Second access (should use cache)
        const start2 = Date.now();
        await unified_config_service_1.unifiedConfigService.get(key, 'default');
        const time2 = Date.now() - start2;
        // Cached access should be significantly faster
        (0, globals_1.expect)(time2).toBeLessThan(time1);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,