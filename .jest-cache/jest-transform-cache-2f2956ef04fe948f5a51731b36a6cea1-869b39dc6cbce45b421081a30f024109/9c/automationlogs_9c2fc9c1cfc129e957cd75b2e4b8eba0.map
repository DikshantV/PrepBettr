{"version":3,"names":["cov_10y9upgzjz","actualCoverage","queueService","s","require","v4","uuidv4","AutomationLogger","constructor","f","logQueue","createLogEntry","action","status","message","details","b","id","timestamp","Date","toISOString","functionName","process","env","AZURE_FUNCTIONS_NAME","invocationId","INVOCATION_ID","logJobDiscovered","userId","jobId","jobDetails","entry","title","company","portal","jobPortal","name","relevancyScore","writeLog","logJobSearch","filters","results","jobs","length","resultsCount","searchedPortals","portals","logApplicationSubmitted","applicationResult","success","applicationId","logFollowUpSent","followUpType","logError","error","errorName","errorStack","stack","errorCode","code","logWarning","logInfo","logEntry","addMessage","timeToLive","level","getConsoleLogLevel","console","APPINSIGHTS_INSTRUMENTATIONKEY","sendToApplicationInsights","telemetry","properties","JSON","stringify","log","getRecentLogs","limit","getLogStats","timeRange","totalLogs","errorCount","successCount","warningCount","topActions","module","exports"],"sources":["automation-logs.js"],"sourcesContent":["const queueService = require('./queue-service');\nconst { v4: uuidv4 } = require('uuid');\n\nclass AutomationLogger {\n    constructor() {\n        this.logQueue = 'automation-logs';\n    }\n\n    /**\n     * Create a new automation log entry\n     */\n    createLogEntry(action, status, message, details = {}) {\n        return {\n            id: uuidv4(),\n            timestamp: new Date().toISOString(),\n            action: action,\n            status: status,\n            message: message,\n            details: details,\n            functionName: process.env.AZURE_FUNCTIONS_NAME || 'unknown',\n            invocationId: process.env.INVOCATION_ID || uuidv4()\n        };\n    }\n\n    /**\n     * Log a job discovery event\n     */\n    async logJobDiscovered(userId, jobId, jobDetails) {\n        const entry = this.createLogEntry(\n            'job_discovered',\n            'info',\n            `New job discovered: ${jobDetails.title} at ${jobDetails.company}`,\n            {\n                userId,\n                jobId,\n                company: jobDetails.company,\n                title: jobDetails.title,\n                portal: jobDetails.jobPortal?.name,\n                relevancyScore: jobDetails.relevancyScore\n            }\n        );\n\n        await this.writeLog(entry);\n        return entry;\n    }\n\n    /**\n     * Log a job search operation\n     */\n    async logJobSearch(userId, filters, results) {\n        const entry = this.createLogEntry(\n            'job_search_completed',\n            'success',\n            `Job search completed: Found ${results.jobs.length} jobs`,\n            {\n                userId,\n                filters,\n                resultsCount: results.jobs.length,\n                searchedPortals: filters.portals\n            }\n        );\n\n        await this.writeLog(entry);\n        return entry;\n    }\n\n    /**\n     * Log an application submission\n     */\n    async logApplicationSubmitted(userId, jobId, applicationResult) {\n        const entry = this.createLogEntry(\n            'application_submitted',\n            applicationResult.success ? 'success' : 'error',\n            applicationResult.message || 'Application processing completed',\n            {\n                userId,\n                jobId,\n                applicationId: applicationResult.applicationId,\n                success: applicationResult.success\n            }\n        );\n\n        await this.writeLog(entry);\n        return entry;\n    }\n\n    /**\n     * Log a follow-up action\n     */\n    async logFollowUpSent(userId, applicationId, followUpType) {\n        const entry = this.createLogEntry(\n            'follow_up_sent',\n            'success',\n            `Follow-up sent: ${followUpType}`,\n            {\n                userId,\n                applicationId,\n                followUpType\n            }\n        );\n\n        await this.writeLog(entry);\n        return entry;\n    }\n\n    /**\n     * Log an error\n     */\n    async logError(action, error, details = {}) {\n        const entry = this.createLogEntry(\n            action,\n            'error',\n            error.message || 'An error occurred',\n            {\n                ...details,\n                errorName: error.name,\n                errorStack: error.stack,\n                errorCode: error.code\n            }\n        );\n\n        await this.writeLog(entry);\n        return entry;\n    }\n\n    /**\n     * Log a warning\n     */\n    async logWarning(action, message, details = {}) {\n        const entry = this.createLogEntry(\n            action,\n            'warning',\n            message,\n            details\n        );\n\n        await this.writeLog(entry);\n        return entry;\n    }\n\n    /**\n     * Log general information\n     */\n    async logInfo(action, message, details = {}) {\n        const entry = this.createLogEntry(\n            action,\n            'info',\n            message,\n            details\n        );\n\n        await this.writeLog(entry);\n        return entry;\n    }\n\n    /**\n     * Write log entry to queue\n     */\n    async writeLog(logEntry) {\n        try {\n            await queueService.addMessage(this.logQueue, logEntry, {\n                timeToLive: 2592000 // 30 days\n            });\n\n            // Also write to console for immediate visibility\n            const level = this.getConsoleLogLevel(logEntry.status);\n            console[level](`[${logEntry.timestamp}] ${logEntry.action}: ${logEntry.message}`, logEntry.details);\n\n            // Send to Application Insights if available\n            if (process.env.APPINSIGHTS_INSTRUMENTATIONKEY) {\n                this.sendToApplicationInsights(logEntry);\n            }\n\n        } catch (error) {\n            console.error('Failed to write automation log:', error);\n            // Fallback to console only\n            console.error(`[${logEntry.timestamp}] ${logEntry.action}: ${logEntry.message}`, logEntry.details);\n        }\n    }\n\n    /**\n     * Get appropriate console log level\n     */\n    getConsoleLogLevel(status) {\n        switch (status) {\n            case 'error':\n                return 'error';\n            case 'warning':\n                return 'warn';\n            case 'info':\n            case 'success':\n            default:\n                return 'log';\n        }\n    }\n\n    /**\n     * Send log entry to Application Insights\n     */\n    sendToApplicationInsights(logEntry) {\n        try {\n            // Using console methods that Application Insights can capture\n            const telemetry = {\n                name: logEntry.action,\n                properties: {\n                    status: logEntry.status,\n                    message: logEntry.message,\n                    functionName: logEntry.functionName,\n                    invocationId: logEntry.invocationId,\n                    ...logEntry.details\n                },\n                timestamp: logEntry.timestamp\n            };\n\n            // Application Insights will automatically capture console output\n            if (logEntry.status === 'error') {\n                console.error('AUTOMATION_LOG', JSON.stringify(telemetry));\n            } else {\n                console.log('AUTOMATION_LOG', JSON.stringify(telemetry));\n            }\n        } catch (error) {\n            console.error('Failed to send to Application Insights:', error);\n        }\n    }\n\n    /**\n     * Retrieve recent logs for a user\n     */\n    async getRecentLogs(userId, limit = 50) {\n        try {\n            // This would typically query a database or storage\n            // For now, we'll return empty array as queue messages are consumed\n            console.log(`Retrieving recent logs for user ${userId}`);\n            return [];\n        } catch (error) {\n            console.error('Failed to retrieve recent logs:', error);\n            return [];\n        }\n    }\n\n    /**\n     * Get log statistics\n     */\n    async getLogStats(userId, timeRange = '24h') {\n        try {\n            console.log(`Getting log statistics for user ${userId} (${timeRange})`);\n            // This would typically aggregate from stored logs\n            return {\n                totalLogs: 0,\n                errorCount: 0,\n                successCount: 0,\n                warningCount: 0,\n                topActions: []\n            };\n        } catch (error) {\n            console.error('Failed to get log statistics:', error);\n            return null;\n        }\n    }\n}\n\nmodule.exports = new AutomationLogger();\n"],"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","ignoreList":[]}