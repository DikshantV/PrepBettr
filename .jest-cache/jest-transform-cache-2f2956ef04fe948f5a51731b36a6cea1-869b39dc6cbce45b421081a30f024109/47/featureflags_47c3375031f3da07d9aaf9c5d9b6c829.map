{"version":3,"names":["cov_12fo6y2j5j","actualCoverage","s","unified_config_service_1","require","user_targeting_1","FeatureFlagsService","getInstance","f","instance","b","getFeatureFlag","flagName","configKey","globalValue","unifiedConfigService","get","rolloutConfig","UserTargetingService","ROLLOUT_CONFIGS","userTargetingService","isCurrentUserInRollout","error","console","getAllFeatureFlags","allConfigs","getAll","globalFlags","voiceInterview","voiceInterviewV2","premiumFeatures","newUI","rolloutStatus","getCurrentUserRolloutStatus","enhancedFlags","isFeatureEnabled","featureName","getDebugInfo","unifiedConfig","finalFlags","userId","getCurrentUserId","rolloutConfigs","refreshFeatureFlags","refresh","exports","featureFlagsService"],"sources":["/Users/dikshantvashistha/PrepBettr/lib/services/feature-flags.ts"],"sourcesContent":["import { unifiedConfigService } from './unified-config-service';\nimport { userTargetingService, UserTargetingService } from './user-targeting';\n\n// Updated interface to match unified config schema\nexport interface FeatureFlags {\n  voiceInterview: boolean;\n  voiceInterviewV2: boolean;\n  premiumFeatures: boolean;\n  newUI: boolean;\n}\n\nexport interface EnhancedFeatureFlags extends FeatureFlags {\n  // Rollout status for each feature\n  rolloutStatus: {\n    voiceInterview: boolean;\n    voiceInterviewV2: boolean;\n    premiumFeatures: boolean;\n    newUI: boolean;\n  };\n}\n\nclass FeatureFlagsService {\n  private static instance: FeatureFlagsService;\n\n  static getInstance(): FeatureFlagsService {\n    if (!FeatureFlagsService.instance) {\n      FeatureFlagsService.instance = new FeatureFlagsService();\n    }\n    return FeatureFlagsService.instance;\n  }\n\n  /**\n   * Get feature flag value considering both remote config and user targeting\n   */\n  async getFeatureFlag(flagName: keyof FeatureFlags): Promise<boolean> {\n    try {\n      // Get feature flag from unified config service\n      const configKey = `features.${flagName}`;\n      const globalValue = await unifiedConfigService.get<boolean>(configKey, false);\n      \n      if (!globalValue) {\n        // If disabled globally, return false\n        return false;\n      }\n\n      // If enabled globally, check if user is in the rollout\n      const rolloutConfig = UserTargetingService.ROLLOUT_CONFIGS[flagName];\n      if (!rolloutConfig) {\n        // If no rollout config, default to global setting\n        return globalValue;\n      }\n\n      return userTargetingService.isCurrentUserInRollout(rolloutConfig);\n    } catch (error) {\n      console.error(`Error getting feature flag ${flagName}:`, error);\n      return false; // Default to disabled on error\n    }\n  }\n\n  /**\n   * Get all feature flags with rollout status\n   */\n  async getAllFeatureFlags(): Promise<EnhancedFeatureFlags> {\n    try {\n      // Get all feature flags from unified config service\n      const allConfigs = await unifiedConfigService.getAll('features.');\n      \n      // Extract flags from config keys\n      const globalFlags: FeatureFlags = {\n        voiceInterview: allConfigs['features.voiceInterview'] || false,\n        voiceInterviewV2: allConfigs['features.voiceInterviewV2'] || false,\n        premiumFeatures: allConfigs['features.premiumFeatures'] || false,\n        newUI: allConfigs['features.newUI'] || false\n      };\n      \n      // Get rollout status for current user\n      const rolloutStatus = userTargetingService.getCurrentUserRolloutStatus();\n      \n      // Combine both: feature must be enabled globally AND user must be in rollout\n      const enhancedFlags: EnhancedFeatureFlags = {\n        voiceInterview: globalFlags.voiceInterview && rolloutStatus.voiceInterview,\n        voiceInterviewV2: globalFlags.voiceInterviewV2 && rolloutStatus.voiceInterviewV2,\n        premiumFeatures: globalFlags.premiumFeatures && rolloutStatus.premiumFeatures,\n        newUI: globalFlags.newUI && rolloutStatus.newUI,\n        rolloutStatus: {\n          voiceInterview: rolloutStatus.voiceInterview || false,\n          voiceInterviewV2: rolloutStatus.voiceInterviewV2 || false,\n          premiumFeatures: rolloutStatus.premiumFeatures || false,\n          newUI: rolloutStatus.newUI || false\n        },\n      };\n\n      return enhancedFlags;\n    } catch (error) {\n      console.error('Error getting all feature flags:', error);\n      return {\n        voiceInterview: false,\n        voiceInterviewV2: false,\n        premiumFeatures: false,\n        newUI: false,\n        rolloutStatus: {\n          voiceInterview: false,\n          voiceInterviewV2: false,\n          premiumFeatures: false,\n          newUI: false\n        },\n      };\n    }\n  }\n\n  /**\n   * Check if a specific feature is enabled for the current user\n   */\n  async isFeatureEnabled(featureName: keyof FeatureFlags): Promise<boolean> {\n    return this.getFeatureFlag(featureName);\n  }\n\n  /**\n   * Convenience methods for specific features\n   */\n\n  /**\n   * Get debug information about feature flags\n   */\n  async getDebugInfo(): Promise<{\n    unifiedConfig: Record<string, any>;\n    rolloutStatus: Record<string, boolean>;\n    finalFlags: FeatureFlags;\n    userId: string | null;\n    rolloutConfigs: typeof UserTargetingService.ROLLOUT_CONFIGS;\n  }> {\n    const unifiedConfig = await unifiedConfigService.getAll('features.');\n    const rolloutStatus = userTargetingService.getCurrentUserRolloutStatus();\n    const finalFlags = await this.getAllFeatureFlags();\n    const userId = userTargetingService.getCurrentUserId();\n\n    return {\n      unifiedConfig,\n      rolloutStatus,\n      finalFlags: {\n        voiceInterview: finalFlags.voiceInterview,\n        voiceInterviewV2: finalFlags.voiceInterviewV2,\n        premiumFeatures: finalFlags.premiumFeatures,\n        newUI: finalFlags.newUI\n      },\n      userId,\n      rolloutConfigs: UserTargetingService.ROLLOUT_CONFIGS,\n    };\n  }\n\n  /**\n   * Force refresh all feature flags\n   */\n  async refreshFeatureFlags(): Promise<EnhancedFeatureFlags> {\n    await unifiedConfigService.refresh();\n    return this.getAllFeatureFlags();\n  }\n}\n\n// Export singleton instance\nexport const featureFlagsService = FeatureFlagsService.getInstance();\n"],"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","ignoreList":[]}