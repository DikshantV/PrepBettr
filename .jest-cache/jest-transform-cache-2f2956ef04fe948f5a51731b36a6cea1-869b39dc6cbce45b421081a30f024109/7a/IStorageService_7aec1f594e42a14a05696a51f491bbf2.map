{"version":3,"names":["cov_2cwxbdpxjo","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","StorageProvider","exports","StorageError","Error","constructor","message","provider","originalError"],"sources":["/Users/dikshantvashistha/PrepBettr/lib/storage/IStorageService.ts"],"sourcesContent":["/**\n * @file Defines the universal interface for storage services.\n * This abstraction allows for a seamless switch between different storage providers (e.g., Azure, Firebase).\n */\n\n/**\n * Enumeration for the storage providers.\n */\nexport enum StorageProvider {\n  Azure = 'azure',\n  Firebase = 'firebase',\n  Dual = 'dual', // For dual-write scenarios during migration\n}\n\n/**\n * Metadata for an uploaded file.\n */\nexport interface FileMeta {\n  provider: StorageProvider;\n  url: string; // The primary public-facing URL\n  path: string; // The internal path or blob name\n  sasUrl?: string; // Optional SAS URL for temporary access\n  size: number;\n  mimeType: string;\n  createdAt: Date;\n}\n\n/**\n * Options for generating a signed or public URL.\n */\nexport interface SignedUrlOptions {\n  expiresIn: number; // Expiration time in seconds\n  accessType: 'read' | 'write';\n}\n\n/**\n * Custom error class for storage operations.\n */\nexport class StorageError extends Error {\n  constructor(message: string, public readonly provider: StorageProvider, public readonly originalError?: any) {\n    super(message);\n    this.name = 'StorageError';\n  }\n}\n\n/**\n * Defines the core contract for a storage service provider.\n */\nexport interface IStorageService {\n  /**\n   * Uploads a file to the storage provider.\n   *\n   * @param file The file content as a Buffer or Blob.\n   * @param path The destination path for the file.\n   * @param mimeType The MIME type of the file.\n   * @returns A promise that resolves with the file metadata.\n   */\n  upload(file: Buffer | Blob, path: string, mimeType?: string): Promise<FileMeta>;\n\n  /**\n   * Downloads a file from the storage provider.\n   *\n   * @param path The path of the file to download.\n   * @returns A promise that resolves with the file content as a Buffer.\n   */\n  download(path: string): Promise<Buffer>;\n\n  /**\n   * Deletes a file from the storage provider.\n   *\n   * @param path The path of the file to delete.\n   * @returns A promise that resolves when the file is deleted.\n   */\n  delete(path: string): Promise<void>;\n\n  /**\n   * Generates a public or signed URL for a file.\n   *\n   * @param path The path of the file.\n   * @param options Options for the generated URL (e.g., expiration).\n   * @returns A promise that resolves with the public URL string.\n   */\n  getPublicUrl(path: string, options?: SignedUrlOptions): Promise<string>;\n}\n\n"],"mappings":"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","ignoreList":[]}