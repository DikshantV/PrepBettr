55839191cb67b6c5543802ff4d3267f9
"use strict";

/**
 * @file Defines the universal interface for storage services.
 * This abstraction allows for a seamless switch between different storage providers (e.g., Azure, Firebase).
 */
/* istanbul ignore next */
function cov_2cwxbdpxjo() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/storage/IStorageService.ts";
  var hash = "92d923b490e639cd7401abf836019f7cfe516be3";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/storage/IStorageService.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 62
        }
      },
      "1": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 7,
          column: 56
        }
      },
      "2": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 16,
          column: 72
        }
      },
      "3": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 13,
          column: 39
        }
      },
      "4": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 45
        }
      },
      "5": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 15,
          column: 37
        }
      },
      "6": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 23
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 33
        }
      },
      "8": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 43
        }
      },
      "9": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 35
        }
      },
      "10": {
        start: {
          line: 28,
          column: 0
        },
        end: {
          line: 28,
          column: 36
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 12,
            column: 1
          },
          end: {
            line: 12,
            column: 2
          }
        },
        loc: {
          start: {
            line: 12,
            column: 28
          },
          end: {
            line: 16,
            column: 1
          }
        },
        line: 12
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 50
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 21
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 3
          },
          end: {
            line: 16,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 3
          },
          end: {
            line: 16,
            column: 18
          }
        }, {
          start: {
            line: 16,
            column: 23
          },
          end: {
            line: 16,
            column: 69
          }
        }],
        line: 16
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/storage/IStorageService.ts",
      mappings: ";AAAA;;;GAGG;;;AAEH;;GAEG;AACH,IAAY,eAIX;AAJD,WAAY,eAAe;IACzB,kCAAe,CAAA;IACf,wCAAqB,CAAA;IACrB,gCAAa,CAAA;AACf,CAAC,EAJW,eAAe,+BAAf,eAAe,QAI1B;AAuBD;;GAEG;AACH,MAAa,YAAa,SAAQ,KAAK;IACrC,YAAY,OAAe,EAAkB,QAAyB,EAAkB,aAAmB;QACzG,KAAK,CAAC,OAAO,CAAC,CAAC;QAD4B,aAAQ,GAAR,QAAQ,CAAiB;QAAkB,kBAAa,GAAb,aAAa,CAAM;QAEzG,IAAI,CAAC,IAAI,GAAG,cAAc,CAAC;IAC7B,CAAC;CACF;AALD,oCAKC",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/storage/IStorageService.ts"],
      sourcesContent: ["/**\n * @file Defines the universal interface for storage services.\n * This abstraction allows for a seamless switch between different storage providers (e.g., Azure, Firebase).\n */\n\n/**\n * Enumeration for the storage providers.\n */\nexport enum StorageProvider {\n  Azure = 'azure',\n  Firebase = 'firebase',\n  Dual = 'dual', // For dual-write scenarios during migration\n}\n\n/**\n * Metadata for an uploaded file.\n */\nexport interface FileMeta {\n  provider: StorageProvider;\n  url: string; // The primary public-facing URL\n  path: string; // The internal path or blob name\n  sasUrl?: string; // Optional SAS URL for temporary access\n  size: number;\n  mimeType: string;\n  createdAt: Date;\n}\n\n/**\n * Options for generating a signed or public URL.\n */\nexport interface SignedUrlOptions {\n  expiresIn: number; // Expiration time in seconds\n  accessType: 'read' | 'write';\n}\n\n/**\n * Custom error class for storage operations.\n */\nexport class StorageError extends Error {\n  constructor(message: string, public readonly provider: StorageProvider, public readonly originalError?: any) {\n    super(message);\n    this.name = 'StorageError';\n  }\n}\n\n/**\n * Defines the core contract for a storage service provider.\n */\nexport interface IStorageService {\n  /**\n   * Uploads a file to the storage provider.\n   *\n   * @param file The file content as a Buffer or Blob.\n   * @param path The destination path for the file.\n   * @param mimeType The MIME type of the file.\n   * @returns A promise that resolves with the file metadata.\n   */\n  upload(file: Buffer | Blob, path: string, mimeType?: string): Promise<FileMeta>;\n\n  /**\n   * Downloads a file from the storage provider.\n   *\n   * @param path The path of the file to download.\n   * @returns A promise that resolves with the file content as a Buffer.\n   */\n  download(path: string): Promise<Buffer>;\n\n  /**\n   * Deletes a file from the storage provider.\n   *\n   * @param path The path of the file to delete.\n   * @returns A promise that resolves when the file is deleted.\n   */\n  delete(path: string): Promise<void>;\n\n  /**\n   * Generates a public or signed URL for a file.\n   *\n   * @param path The path of the file.\n   * @param options Options for the generated URL (e.g., expiration).\n   * @returns A promise that resolves with the public URL string.\n   */\n  getPublicUrl(path: string, options?: SignedUrlOptions): Promise<string>;\n}\n\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "92d923b490e639cd7401abf836019f7cfe516be3"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2cwxbdpxjo = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2cwxbdpxjo();
cov_2cwxbdpxjo().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2cwxbdpxjo().s[1]++;
exports.StorageError = exports.StorageProvider = void 0;
/**
 * Enumeration for the storage providers.
 */
var StorageProvider;
/* istanbul ignore next */
cov_2cwxbdpxjo().s[2]++;
(function (StorageProvider) {
  /* istanbul ignore next */
  cov_2cwxbdpxjo().f[0]++;
  cov_2cwxbdpxjo().s[3]++;
  StorageProvider["Azure"] = "azure";
  /* istanbul ignore next */
  cov_2cwxbdpxjo().s[4]++;
  StorageProvider["Firebase"] = "firebase";
  /* istanbul ignore next */
  cov_2cwxbdpxjo().s[5]++;
  StorageProvider["Dual"] = "dual";
})(
/* istanbul ignore next */
(cov_2cwxbdpxjo().b[0][0]++, StorageProvider) ||
/* istanbul ignore next */
(cov_2cwxbdpxjo().b[0][1]++, exports.StorageProvider = StorageProvider = {}));
/**
 * Custom error class for storage operations.
 */
class StorageError extends Error {
  constructor(message, provider, originalError) {
    /* istanbul ignore next */
    cov_2cwxbdpxjo().f[1]++;
    cov_2cwxbdpxjo().s[6]++;
    super(message);
    /* istanbul ignore next */
    cov_2cwxbdpxjo().s[7]++;
    this.provider = provider;
    /* istanbul ignore next */
    cov_2cwxbdpxjo().s[8]++;
    this.originalError = originalError;
    /* istanbul ignore next */
    cov_2cwxbdpxjo().s[9]++;
    this.name = 'StorageError';
  }
}
/* istanbul ignore next */
cov_2cwxbdpxjo().s[10]++;
exports.StorageError = StorageError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMmN3eGJkcHhqbyIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsIm5hbWUiLCJkZWNsIiwibG9jIiwiYnJhbmNoTWFwIiwidHlwZSIsImxvY2F0aW9ucyIsInMiLCJmIiwiYiIsImlucHV0U291cmNlTWFwIiwiZmlsZSIsIm1hcHBpbmdzIiwibmFtZXMiLCJzb3VyY2VzIiwic291cmNlc0NvbnRlbnQiLCJ2ZXJzaW9uIiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsIlN0b3JhZ2VQcm92aWRlciIsImV4cG9ydHMiLCJTdG9yYWdlRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwibWVzc2FnZSIsInByb3ZpZGVyIiwib3JpZ2luYWxFcnJvciJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9kaWtzaGFudHZhc2hpc3RoYS9QcmVwQmV0dHIvbGliL3N0b3JhZ2UvSVN0b3JhZ2VTZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgRGVmaW5lcyB0aGUgdW5pdmVyc2FsIGludGVyZmFjZSBmb3Igc3RvcmFnZSBzZXJ2aWNlcy5cbiAqIFRoaXMgYWJzdHJhY3Rpb24gYWxsb3dzIGZvciBhIHNlYW1sZXNzIHN3aXRjaCBiZXR3ZWVuIGRpZmZlcmVudCBzdG9yYWdlIHByb3ZpZGVycyAoZS5nLiwgQXp1cmUsIEZpcmViYXNlKS5cbiAqL1xuXG4vKipcbiAqIEVudW1lcmF0aW9uIGZvciB0aGUgc3RvcmFnZSBwcm92aWRlcnMuXG4gKi9cbmV4cG9ydCBlbnVtIFN0b3JhZ2VQcm92aWRlciB7XG4gIEF6dXJlID0gJ2F6dXJlJyxcbiAgRmlyZWJhc2UgPSAnZmlyZWJhc2UnLFxuICBEdWFsID0gJ2R1YWwnLCAvLyBGb3IgZHVhbC13cml0ZSBzY2VuYXJpb3MgZHVyaW5nIG1pZ3JhdGlvblxufVxuXG4vKipcbiAqIE1ldGFkYXRhIGZvciBhbiB1cGxvYWRlZCBmaWxlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVNZXRhIHtcbiAgcHJvdmlkZXI6IFN0b3JhZ2VQcm92aWRlcjtcbiAgdXJsOiBzdHJpbmc7IC8vIFRoZSBwcmltYXJ5IHB1YmxpYy1mYWNpbmcgVVJMXG4gIHBhdGg6IHN0cmluZzsgLy8gVGhlIGludGVybmFsIHBhdGggb3IgYmxvYiBuYW1lXG4gIHNhc1VybD86IHN0cmluZzsgLy8gT3B0aW9uYWwgU0FTIFVSTCBmb3IgdGVtcG9yYXJ5IGFjY2Vzc1xuICBzaXplOiBudW1iZXI7XG4gIG1pbWVUeXBlOiBzdHJpbmc7XG4gIGNyZWF0ZWRBdDogRGF0ZTtcbn1cblxuLyoqXG4gKiBPcHRpb25zIGZvciBnZW5lcmF0aW5nIGEgc2lnbmVkIG9yIHB1YmxpYyBVUkwuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2lnbmVkVXJsT3B0aW9ucyB7XG4gIGV4cGlyZXNJbjogbnVtYmVyOyAvLyBFeHBpcmF0aW9uIHRpbWUgaW4gc2Vjb25kc1xuICBhY2Nlc3NUeXBlOiAncmVhZCcgfCAnd3JpdGUnO1xufVxuXG4vKipcbiAqIEN1c3RvbSBlcnJvciBjbGFzcyBmb3Igc3RvcmFnZSBvcGVyYXRpb25zLlxuICovXG5leHBvcnQgY2xhc3MgU3RvcmFnZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcsIHB1YmxpYyByZWFkb25seSBwcm92aWRlcjogU3RvcmFnZVByb3ZpZGVyLCBwdWJsaWMgcmVhZG9ubHkgb3JpZ2luYWxFcnJvcj86IGFueSkge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMubmFtZSA9ICdTdG9yYWdlRXJyb3InO1xuICB9XG59XG5cbi8qKlxuICogRGVmaW5lcyB0aGUgY29yZSBjb250cmFjdCBmb3IgYSBzdG9yYWdlIHNlcnZpY2UgcHJvdmlkZXIuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVN0b3JhZ2VTZXJ2aWNlIHtcbiAgLyoqXG4gICAqIFVwbG9hZHMgYSBmaWxlIHRvIHRoZSBzdG9yYWdlIHByb3ZpZGVyLlxuICAgKlxuICAgKiBAcGFyYW0gZmlsZSBUaGUgZmlsZSBjb250ZW50IGFzIGEgQnVmZmVyIG9yIEJsb2IuXG4gICAqIEBwYXJhbSBwYXRoIFRoZSBkZXN0aW5hdGlvbiBwYXRoIGZvciB0aGUgZmlsZS5cbiAgICogQHBhcmFtIG1pbWVUeXBlIFRoZSBNSU1FIHR5cGUgb2YgdGhlIGZpbGUuXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIGZpbGUgbWV0YWRhdGEuXG4gICAqL1xuICB1cGxvYWQoZmlsZTogQnVmZmVyIHwgQmxvYiwgcGF0aDogc3RyaW5nLCBtaW1lVHlwZT86IHN0cmluZyk6IFByb21pc2U8RmlsZU1ldGE+O1xuXG4gIC8qKlxuICAgKiBEb3dubG9hZHMgYSBmaWxlIGZyb20gdGhlIHN0b3JhZ2UgcHJvdmlkZXIuXG4gICAqXG4gICAqIEBwYXJhbSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBmaWxlIHRvIGRvd25sb2FkLlxuICAgKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBmaWxlIGNvbnRlbnQgYXMgYSBCdWZmZXIuXG4gICAqL1xuICBkb3dubG9hZChwYXRoOiBzdHJpbmcpOiBQcm9taXNlPEJ1ZmZlcj47XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYSBmaWxlIGZyb20gdGhlIHN0b3JhZ2UgcHJvdmlkZXIuXG4gICAqXG4gICAqIEBwYXJhbSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBmaWxlIHRvIGRlbGV0ZS5cbiAgICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgZmlsZSBpcyBkZWxldGVkLlxuICAgKi9cbiAgZGVsZXRlKHBhdGg6IHN0cmluZyk6IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIHB1YmxpYyBvciBzaWduZWQgVVJMIGZvciBhIGZpbGUuXG4gICAqXG4gICAqIEBwYXJhbSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBmaWxlLlxuICAgKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIGZvciB0aGUgZ2VuZXJhdGVkIFVSTCAoZS5nLiwgZXhwaXJhdGlvbikuXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHB1YmxpYyBVUkwgc3RyaW5nLlxuICAgKi9cbiAgZ2V0UHVibGljVXJsKHBhdGg6IHN0cmluZywgb3B0aW9ucz86IFNpZ25lZFVybE9wdGlvbnMpOiBQcm9taXNlPHN0cmluZz47XG59XG5cbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7OztBQUFBO0FBQUEsU0FBQUEsZUFBQTtFQUFBLElBQUFDLElBQUE7RUFBQSxJQUFBQyxJQUFBO0VBQUEsSUFBQUMsTUFBQSxPQUFBQyxRQUFBO0VBQUEsSUFBQUMsR0FBQTtFQUFBLElBQUFDLFlBQUE7SUFBQUwsSUFBQTtJQUFBTSxZQUFBO01BQUE7UUFBQUMsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtJQUFBO0lBQUFFLEtBQUE7TUFBQTtRQUFBQyxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBSSxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7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