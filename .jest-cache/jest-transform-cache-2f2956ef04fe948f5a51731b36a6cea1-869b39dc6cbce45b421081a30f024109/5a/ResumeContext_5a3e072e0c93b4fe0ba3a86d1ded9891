a933e1a7240f0b67857054e52f8f3654
/* istanbul ignore next */
"use strict";
"use client";

/* istanbul ignore next */
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useResume = exports.ResumeProvider = void 0;
var
/* istanbul ignore next */
_react = _interopRequireWildcard(require("react"));
/* istanbul ignore next */
var _jsxRuntime = require("react/jsx-runtime");
function cov_28bznb8vqq() {
  var path = "/Users/dikshantvashistha/PrepBettr/components/ResumeContext.tsx";
  var hash = "55d8705e7a1316f23a25abea69c4a19550aa0a8a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/components/ResumeContext.tsx",
    statementMap: {
      "0": {
        start: {
          line: 38,
          column: 22
        },
        end: {
          line: 38,
          column: 78
        }
      },
      "1": {
        start: {
          line: 44,
          column: 61
        },
        end: {
          line: 63,
          column: 1
        }
      },
      "2": {
        start: {
          line: 45,
          column: 38
        },
        end: {
          line: 45,
          column: 71
        }
      },
      "3": {
        start: {
          line: 47,
          column: 22
        },
        end: {
          line: 49,
          column: 3
        }
      },
      "4": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 48,
          column: 24
        }
      },
      "5": {
        start: {
          line: 51,
          column: 36
        },
        end: {
          line: 56,
          column: 3
        }
      },
      "6": {
        start: {
          line: 58,
          column: 2
        },
        end: {
          line: 62,
          column: 4
        }
      },
      "7": {
        start: {
          line: 65,
          column: 25
        },
        end: {
          line: 71,
          column: 1
        }
      },
      "8": {
        start: {
          line: 66,
          column: 18
        },
        end: {
          line: 66,
          column: 43
        }
      },
      "9": {
        start: {
          line: 67,
          column: 2
        },
        end: {
          line: 69,
          column: 3
        }
      },
      "10": {
        start: {
          line: 68,
          column: 4
        },
        end: {
          line: 68,
          column: 70
        }
      },
      "11": {
        start: {
          line: 70,
          column: 2
        },
        end: {
          line: 70,
          column: 17
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 44,
            column: 61
          },
          end: {
            line: 44,
            column: 62
          }
        },
        loc: {
          start: {
            line: 44,
            column: 79
          },
          end: {
            line: 63,
            column: 1
          }
        },
        line: 44
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 47,
            column: 22
          },
          end: {
            line: 47,
            column: 23
          }
        },
        loc: {
          start: {
            line: 47,
            column: 28
          },
          end: {
            line: 49,
            column: 3
          }
        },
        line: 47
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 65,
            column: 25
          },
          end: {
            line: 65,
            column: 26
          }
        },
        loc: {
          start: {
            line: 65,
            column: 51
          },
          end: {
            line: 71,
            column: 1
          }
        },
        line: 65
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 67,
            column: 2
          },
          end: {
            line: 69,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 2
          },
          end: {
            line: 69,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "55d8705e7a1316f23a25abea69c4a19550aa0a8a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_28bznb8vqq = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_28bznb8vqq();
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
const ResumeContext =
/* istanbul ignore next */
(cov_28bznb8vqq().s[0]++, /*#__PURE__*/
/* istanbul ignore next */
(0,
/* istanbul ignore next */
_react.
/* istanbul ignore next */
createContext)(undefined));
/* istanbul ignore next */
cov_28bznb8vqq().s[1]++;
const ResumeProvider = ({
  children
}) => {
  /* istanbul ignore next */
  cov_28bznb8vqq().f[0]++;
  const [resumeData, setResumeData] =
  /* istanbul ignore next */
  (cov_28bznb8vqq().s[2]++,
  /* istanbul ignore next */
  (0,
  /* istanbul ignore next */
  _react.
  /* istanbul ignore next */
  useState)(null));
  /* istanbul ignore next */
  cov_28bznb8vqq().s[3]++;
  const clearResume = () => {
    /* istanbul ignore next */
    cov_28bznb8vqq().f[1]++;
    cov_28bznb8vqq().s[4]++;
    setResumeData(null);
  };
  const value =
  /* istanbul ignore next */
  (cov_28bznb8vqq().s[5]++, {
    resumeData,
    setResumeData,
    hasResume: !!resumeData,
    clearResume
  });
  /* istanbul ignore next */
  cov_28bznb8vqq().s[6]++;
  return /*#__PURE__*/ /* istanbul ignore next */(0, _jsxRuntime.jsx)(
  /* istanbul ignore next */
  ResumeContext.Provider,
  /* istanbul ignore next */
  {
    value: value,
    children: children
  });
};
/* istanbul ignore next */
exports.ResumeProvider = ResumeProvider;
cov_28bznb8vqq().s[7]++;
const useResume = () => {
  /* istanbul ignore next */
  cov_28bznb8vqq().f[2]++;
  const context =
  /* istanbul ignore next */
  (cov_28bznb8vqq().s[8]++,
  /* istanbul ignore next */
  (0,
  /* istanbul ignore next */
  _react.
  /* istanbul ignore next */
  useContext)(ResumeContext));
  /* istanbul ignore next */
  cov_28bznb8vqq().s[9]++;
  if (context === undefined) {
    /* istanbul ignore next */
    cov_28bznb8vqq().b[0][0]++;
    cov_28bznb8vqq().s[10]++;
    throw new Error('useResume must be used within a ResumeProvider');
  } else
  /* istanbul ignore next */
  {
    cov_28bznb8vqq().b[0][1]++;
  }
  cov_28bznb8vqq().s[11]++;
  return context;
};

// Export types for use in other components
/* istanbul ignore next */
exports.useResume = useResume;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,