{"version":3,"names":["cov_25whrvzxbg","actualCoverage","s","base_agent_1","require","BehavioralInterviewer","BaseAgent","constructor","foundryClient","config","f","id","name","type","modelName","instructions","metadata","description","version","supportedPhases","capabilities","modelRequirements","minimumTokens","preferredModels","tags","maxQuestions","averageDuration","buildPrompt","context","candidateProfile","jobRole","companyInfo","sessionHistory","prompt","b","experience","_a","skills","length","join","industry","_b","previousQuestions","map","q","text","getFallbackBehavioralQuestions","experienceLevel","toLowerCase","fallbackQuestions","category","difficulty","expectedDuration","topic","includes","push","getQuestionCategory","getDefaultQuestion","exports"],"sources":["/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/agents/behavioral-interviewer.ts"],"sourcesContent":["import { BaseAgent } from './base-agent';\nimport { FoundryClientBase } from '../clients/foundry-client';\nimport { FoundryConfig } from '../config/foundry-config';\nimport { InterviewContext, Question, AgentMetadata } from '../types/agent-types';\n\n/**\n * BehavioralInterviewer agent specializing in behavioral and situational questions\n * Uses GPT-4o model for human-focused behavioral assessment\n */\nexport class BehavioralInterviewer extends BaseAgent {\n  // Required BaseAgent interface properties\n  readonly id = 'behavioral-interviewer';\n  readonly name = 'Behavioral Interviewer';\n  readonly type = 'behavioral' as const;\n  \n  protected readonly modelName = 'gpt-4o';\n  \n  public readonly instructions = `You are a behavioral interview specialist focused on assessing soft skills, leadership potential, and cultural fit.\n\nROLE GUIDELINES:\n- Ask questions about past experiences, challenging situations, and interpersonal skills\n- Focus on STAR method responses (Situation, Task, Action, Result)\n- Assess communication skills, problem-solving approach, and emotional intelligence\n- Adapt questions based on the candidate's seniority level and role requirements\n\nQUESTION TYPES TO FOCUS ON:\n- Leadership and teamwork experiences\n- Conflict resolution and difficult conversations\n- Adaptability and learning from failure\n- Decision-making under pressure\n- Career motivation and goal alignment\n\nINTERVIEW STYLE:\n- Be empathetic and encouraging\n- Ask follow-up questions to understand context and impact\n- Help candidates structure their responses using the STAR method\n- Focus on specific examples rather than hypothetical scenarios\n\nAlways tailor questions to the candidate's background and the specific role requirements.`;\n  \n  public readonly metadata: AgentMetadata = {\n    id: 'behavioral-interviewer',\n    name: 'Behavioral Interviewer',\n    description: 'Specializes in behavioral and soft skills assessment',\n    version: '1.0.0',\n    supportedPhases: ['behavioral', 'cultural-fit'],\n    capabilities: ['behavioral-assessment', 'soft-skills-evaluation', 'cultural-fit-analysis'],\n    modelRequirements: {\n      minimumTokens: 2000,\n      preferredModels: ['gpt-4o', 'gpt-4']\n    },\n    tags: ['behavioral', 'soft-skills', 'teamwork', 'leadership'],\n    // Legacy compatibility\n    maxQuestions: 5,\n    averageDuration: 6\n  };\n\n  constructor(foundryClient: FoundryClientBase, config: FoundryConfig) {\n    super(foundryClient, config);\n  }\n\n\n  /**\n   * Build behavioral-specific prompt based on context\n   */\n  private buildPrompt(context: InterviewContext): string {\n    const { candidateProfile, jobRole, companyInfo, sessionHistory } = context;\n    \n    let prompt = `Generate 5-7 behavioral interview questions for a candidate interviewing for: ${jobRole}`;\n    \n    if (companyInfo?.name) {\n      prompt += ` at ${companyInfo.name}`;\n    }\n    \n    prompt += '\\n\\nCandidate Background:\\n';\n    \n    if (candidateProfile?.experience) {\n      prompt += `- Experience Level: ${candidateProfile.experience}\\n`;\n    }\n    \n    if (candidateProfile?.skills?.length) {\n      prompt += `- Key Skills: ${candidateProfile.skills.join(', ')}\\n`;\n    }\n    \n    // Remove references to undefined properties\n    if (candidateProfile?.industry) {\n      prompt += `- Industry: ${candidateProfile.industry}\\n`;\n    }\n    \n    if (sessionHistory?.previousQuestions?.length) {\n      prompt += `\\nPreviously Asked Questions:\\n${sessionHistory.previousQuestions.map(q => `- ${q.text}`).join('\\n')}\\n\\nAvoid repeating these topics and build upon previous responses.\\n`;\n    }\n    \n    prompt += `\\nFOCUS AREAS:\n- Past experiences demonstrating relevant skills\n- Leadership and teamwork scenarios\n- Problem-solving and decision-making situations\n- Adaptability and learning from challenges\n- Communication and interpersonal skills\n- Career motivation and cultural fit\n\nFORMAT: Return each question as a JSON object with:\n- \"text\": the question text\n- \"category\": behavioral category (leadership, teamwork, problem-solving, etc.)\n- \"followUps\": 1-2 potential follow-up questions\n- \"difficulty\": beginner/intermediate/advanced based on role seniority\n\nEnsure questions encourage STAR method responses and are appropriate for the candidate's experience level.`;\n\n    return prompt;\n  }\n\n  /**\n   * Get fallback behavioral questions when AI generation fails\n   */\n  private getFallbackBehavioralQuestions(context: InterviewContext): Question[] {\n    const experienceLevel = context.candidateProfile?.experience?.toLowerCase() || 'intermediate';\n    \n    const fallbackQuestions: Question[] = [\n      {\n        id: 'behavioral-1',\n        text: 'Tell me about a time when you had to work with a difficult team member. How did you handle the situation?',\n        type: 'behavioral',\n        category: 'behavioral',\n        difficulty: 'medium',\n        expectedDuration: 300,\n        tags: ['teamwork', 'conflict-resolution'],\n        metadata: {\n          topic: 'teamwork'\n        }\n      },\n      {\n        id: 'behavioral-2',\n        text: 'Describe a situation where you had to learn something new quickly to complete a project.',\n        type: 'behavioral',\n        category: 'behavioral',\n        difficulty: 'easy',\n        expectedDuration: 240,\n        tags: ['adaptability', 'learning'],\n        metadata: {\n          topic: 'adaptability'\n        }\n      },\n      {\n        id: 'behavioral-3',\n        text: 'Give me an example of a time when you had to make a decision without having all the information you needed.',\n        type: 'behavioral',\n        category: 'behavioral',\n        difficulty: 'medium',\n        expectedDuration: 360,\n        tags: ['decision-making', 'problem-solving'],\n        metadata: {\n          topic: 'decision-making'\n        }\n      },\n      {\n        id: 'behavioral-4',\n        text: 'Tell me about a time when you received constructive criticism. How did you respond?',\n        type: 'behavioral',\n        category: 'behavioral',\n        difficulty: 'easy',\n        expectedDuration: 240,\n        tags: ['growth-mindset', 'feedback'],\n        metadata: {\n          topic: 'growth-mindset'\n        }\n      }\n    ];\n\n    // Add senior-level questions if appropriate\n    if (experienceLevel.includes('senior') || experienceLevel.includes('lead') || experienceLevel.includes('principal')) {\n      fallbackQuestions.push({\n        id: 'behavioral-5',\n        text: 'Describe a time when you had to influence others without having direct authority over them.',\n        type: 'behavioral',\n        category: 'behavioral',\n        difficulty: 'hard',\n        expectedDuration: 420,\n        tags: ['leadership', 'influence'],\n        metadata: {\n          topic: 'leadership'\n        }\n      });\n    }\n\n    return fallbackQuestions;\n  }\n\n  // Required BaseAgent abstract methods\n  protected getQuestionCategory(): Question['category'] {\n    return 'behavioral';\n  }\n\n  protected getDefaultQuestion(context: InterviewContext): string {\n    return 'Tell me about a time when you had to work with a difficult team member. How did you handle the situation?';\n  }\n}\n"],"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","ignoreList":[]}