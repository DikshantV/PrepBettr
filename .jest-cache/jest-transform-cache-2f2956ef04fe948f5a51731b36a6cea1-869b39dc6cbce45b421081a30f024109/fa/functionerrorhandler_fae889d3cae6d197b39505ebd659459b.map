{"version":3,"names":["cov_duvwovwut","actualCoverage","v4","uuidv4","s","require","FunctionErrorDetails","constructor","error","context","req","f","errorId","timestamp","Date","toISOString","functionName","b","invocationId","executionId","executionContext","method","url","userId","extractUserId","jobId","extractJobId","userAgent","headers","requestId","errorName","name","errorMessage","message","errorCode","code","statusCode","stack","isOperational","query","body","pathMatch","match","FunctionErrorHandler","withErrorHandler","handler","startTime","now","result","logSuccess","errorDetails","logError","response","createErrorResponse","res","duration","logData","level","properties","status","console","log","JSON","stringify","process","env","APPINSIGHTS_INSTRUMENTATIONKEY","sendToApplicationInsights","exception","type","telemetry","measurements","errorCount","telemetryError","isProduction","NODE_ENV","debug","originalMessage","createOperationalError","Error","createProgrammingError","originalError","normalizeError","undefined","includes","module","exports","withFunctionErrorHandler","bind"],"sources":["function-error-handler.js"],"sourcesContent":["const { v4: uuidv4 } = require('uuid');\n\n/**\n * Error details for Azure Functions\n */\nclass FunctionErrorDetails {\n  constructor(error, context, req) {\n    this.errorId = uuidv4();\n    this.timestamp = new Date().toISOString();\n    this.functionName = context?.functionName || 'unknown';\n    this.invocationId = context?.invocationId || uuidv4();\n    this.executionId = context?.executionContext?.invocationId || this.invocationId;\n    \n    // Extract request details if available\n    if (req) {\n      this.method = req.method;\n      this.url = req.url;\n      this.userId = this.extractUserId(req);\n      this.jobId = this.extractJobId(req);\n      this.userAgent = req.headers['user-agent'];\n      this.requestId = req.headers['x-request-id'] || this.errorId;\n    }\n\n    // Error details\n    this.errorName = error.name || 'UnknownError';\n    this.errorMessage = error.message || 'An unknown error occurred';\n    this.errorCode = error.code;\n    this.statusCode = error.statusCode || 500;\n    this.stack = error.stack;\n    this.isOperational = error.isOperational || false;\n  }\n\n  extractUserId(req) {\n    // Try to extract from headers, query params, or body\n    return req.headers['x-user-id'] || \n           req.query?.userId || \n           req.body?.userId ||\n           'anonymous';\n  }\n\n  extractJobId(req) {\n    // Try to extract from different sources\n    const pathMatch = req.url?.match(/\\/jobs\\/([^\\/\\?]+)/);\n    if (pathMatch) return pathMatch[1];\n    \n    return req.query?.jobId || \n           req.body?.jobId ||\n           req.headers['x-job-id'];\n  }\n}\n\n/**\n * Azure Function Error Handler\n */\nclass FunctionErrorHandler {\n  \n  /**\n   * Wrap Azure Function handler with error handling\n   */\n  static withErrorHandler(handler) {\n    return async (context, req) => {\n      const startTime = Date.now();\n      let result;\n      \n      try {\n        // Add request ID if not present\n        if (req && !req.headers['x-request-id']) {\n          req.headers['x-request-id'] = uuidv4();\n        }\n\n        // Execute the handler\n        result = await handler(context, req);\n        \n        // Log successful execution\n        this.logSuccess(context, req, Date.now() - startTime);\n        \n        return result;\n      } catch (error) {\n        // Handle the error\n        const errorDetails = new FunctionErrorDetails(error, context, req);\n        \n        // Log the error\n        this.logError(errorDetails);\n        \n        // Create appropriate response\n        const response = this.createErrorResponse(errorDetails);\n        \n        // Set the response on the context\n        context.res = response;\n        \n        return response;\n      }\n    };\n  }\n\n  /**\n   * Log successful function execution\n   */\n  static logSuccess(context, req, duration) {\n    const logData = {\n      level: 'info',\n      message: `Function ${context.functionName} completed successfully`,\n      properties: {\n        functionName: context.functionName,\n        invocationId: context.invocationId,\n        duration,\n        method: req?.method,\n        url: req?.url,\n        statusCode: context.res?.status || 200,\n        timestamp: new Date().toISOString()\n      }\n    };\n\n    console.log('FUNCTION_SUCCESS', JSON.stringify(logData));\n\n    // Send to Application Insights if available\n    if (process.env.APPINSIGHTS_INSTRUMENTATIONKEY) {\n      this.sendToApplicationInsights('success', logData);\n    }\n  }\n\n  /**\n   * Log error with structured logging\n   */\n  static logError(errorDetails) {\n    const logData = {\n      level: 'error',\n      message: `Function ${errorDetails.functionName} failed: ${errorDetails.errorMessage}`,\n      properties: {\n        errorId: errorDetails.errorId,\n        functionName: errorDetails.functionName,\n        invocationId: errorDetails.invocationId,\n        executionId: errorDetails.executionId,\n        errorName: errorDetails.errorName,\n        errorCode: errorDetails.errorCode,\n        statusCode: errorDetails.statusCode,\n        isOperational: errorDetails.isOperational,\n        userId: errorDetails.userId,\n        jobId: errorDetails.jobId,\n        method: errorDetails.method,\n        url: errorDetails.url,\n        userAgent: errorDetails.userAgent,\n        requestId: errorDetails.requestId,\n        timestamp: errorDetails.timestamp\n      },\n      exception: {\n        message: errorDetails.errorMessage,\n        stack: errorDetails.stack,\n        name: errorDetails.errorName\n      }\n    };\n\n    // Log to console with structured format\n    console.error('FUNCTION_ERROR', JSON.stringify(logData));\n\n    // Send to Application Insights if available\n    if (process.env.APPINSIGHTS_INSTRUMENTATIONKEY) {\n      this.sendToApplicationInsights('error', logData, errorDetails);\n    }\n  }\n\n  /**\n   * Send log data to Application Insights\n   */\n  static sendToApplicationInsights(type, logData, errorDetails = null) {\n    try {\n      // Use console methods that Application Insights captures\n      if (type === 'error' && errorDetails) {\n        const telemetry = {\n          name: 'FunctionError',\n          properties: logData.properties,\n          measurements: {\n            errorCount: 1,\n            statusCode: errorDetails.statusCode\n          },\n          timestamp: errorDetails.timestamp\n        };\n        \n        console.error('TELEMETRY_ERROR', JSON.stringify(telemetry));\n      } else {\n        const telemetry = {\n          name: 'FunctionExecution',\n          properties: logData.properties,\n          measurements: {\n            duration: logData.properties.duration || 0,\n            statusCode: logData.properties.statusCode || 200\n          },\n          timestamp: logData.properties.timestamp\n        };\n        \n        console.log('TELEMETRY_SUCCESS', JSON.stringify(telemetry));\n      }\n    } catch (telemetryError) {\n      console.error('Failed to send telemetry:', telemetryError);\n    }\n  }\n\n  /**\n   * Create appropriate error response\n   */\n  static createErrorResponse(errorDetails) {\n    const isProduction = process.env.NODE_ENV === 'production';\n    \n    const response = {\n      status: errorDetails.statusCode,\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Request-ID': errorDetails.requestId,\n        'X-Error-ID': errorDetails.errorId\n      },\n      body: {\n        error: {\n          message: errorDetails.isOperational || !isProduction \n            ? errorDetails.errorMessage \n            : 'An internal server error occurred',\n          code: errorDetails.errorCode || 'FUNCTION_ERROR',\n          timestamp: errorDetails.timestamp,\n          requestId: errorDetails.requestId,\n          errorId: errorDetails.errorId\n        }\n      }\n    };\n\n    // Include debug info in non-production environments\n    if (!isProduction && !errorDetails.isOperational) {\n      response.body.error.debug = {\n        functionName: errorDetails.functionName,\n        invocationId: errorDetails.invocationId,\n        stack: errorDetails.stack,\n        originalMessage: errorDetails.errorMessage\n      };\n    }\n\n    return response;\n  }\n\n  /**\n   * Create an operational error (expected errors)\n   */\n  static createOperationalError(message, statusCode = 400, code = 'OPERATIONAL_ERROR') {\n    const error = new Error(message);\n    error.statusCode = statusCode;\n    error.code = code;\n    error.isOperational = true;\n    return error;\n  }\n\n  /**\n   * Create a programming error (unexpected errors)\n   */\n  static createProgrammingError(message, originalError = null) {\n    const error = new Error(message);\n    error.statusCode = 500;\n    error.code = 'PROGRAMMING_ERROR';\n    error.isOperational = false;\n    \n    if (originalError) {\n      error.stack = originalError.stack;\n      error.originalError = originalError;\n    }\n    \n    return error;\n  }\n\n  /**\n   * Normalize different error types\n   */\n  static normalizeError(error) {\n    // Already normalized\n    if (error.isOperational !== undefined) {\n      return error;\n    }\n\n    // Network errors\n    if (error.code === 'ECONNRESET' || error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {\n      return this.createOperationalError(\n        'Network connection failed',\n        503,\n        error.code\n      );\n    }\n\n    // HTTP errors from external services\n    if (error.response && error.response.status) {\n      const status = error.response.status;\n      if (status >= 400 && status < 500) {\n        return this.createOperationalError(\n          error.message || `HTTP ${status} error`,\n          status,\n          'HTTP_CLIENT_ERROR'\n        );\n      } else if (status >= 500) {\n        return this.createOperationalError(\n          'External service error',\n          502,\n          'HTTP_SERVER_ERROR'\n        );\n      }\n    }\n\n    // Azure OpenAI specific errors\n    if (error.message && (\n      error.message.includes('rate limit') ||\n      error.message.includes('throttled') ||\n      error.message.includes('quota exceeded')\n    )) {\n      return this.createOperationalError(\n        'AI service rate limit exceeded',\n        429,\n        'RATE_LIMIT_ERROR'\n      );\n    }\n\n    // Validation errors\n    if (error.name === 'ValidationError' || \n        error.message && error.message.includes('validation')) {\n      return this.createOperationalError(\n        error.message || 'Validation failed',\n        400,\n        'VALIDATION_ERROR'\n      );\n    }\n\n    // Authentication errors\n    if (error.message && (\n      error.message.includes('unauthorized') ||\n      error.message.includes('authentication') ||\n      error.message.includes('token')\n    )) {\n      return this.createOperationalError(\n        'Authentication failed',\n        401,\n        'AUTH_ERROR'\n      );\n    }\n\n    // Default to programming error\n    return this.createProgrammingError(\n      error.message || 'An unexpected error occurred',\n      error\n    );\n  }\n}\n\nmodule.exports = {\n  FunctionErrorHandler,\n  FunctionErrorDetails,\n  withFunctionErrorHandler: FunctionErrorHandler.withErrorHandler.bind(FunctionErrorHandler),\n  createOperationalError: FunctionErrorHandler.createOperationalError.bind(FunctionErrorHandler),\n  createProgrammingError: FunctionErrorHandler.createProgrammingError.bind(FunctionErrorHandler),\n  normalizeError: FunctionErrorHandler.normalizeError.bind(FunctionErrorHandler)\n};\n"],"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","ignoreList":[]}