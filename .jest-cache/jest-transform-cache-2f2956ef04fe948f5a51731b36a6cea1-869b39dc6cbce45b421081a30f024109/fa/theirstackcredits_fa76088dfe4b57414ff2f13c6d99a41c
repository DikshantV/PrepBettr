c2c5bc30981ec1dd556d0cbcfb1ed9c9
"use strict";

/* istanbul ignore next */
function cov_2ak5to38u2() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/services/theirstack-credits.ts";
  var hash = "5561a5d02d3359f7339fa10f2a5e84d980d1e3f3";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/services/theirstack-credits.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 77
        }
      },
      "2": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 4,
          column: 66
        }
      },
      "3": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 66
        }
      },
      "4": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 64
        }
      },
      "5": {
        start: {
          line: 7,
          column: 16
        },
        end: {
          line: 7,
          column: 47
        }
      },
      "6": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 30
        }
      },
      "7": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 35
        }
      },
      "8": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 16,
          column: 9
        }
      },
      "9": {
        start: {
          line: 15,
          column: 12
        },
        end: {
          line: 15,
          column: 79
        }
      },
      "10": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 49
        }
      },
      "11": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 25,
          column: 9
        }
      },
      "12": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 21,
          column: 68
        }
      },
      "13": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 24,
          column: 101
        }
      },
      "14": {
        start: {
          line: 31,
          column: 29
        },
        end: {
          line: 31,
          column: 65
        }
      },
      "15": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 53
        }
      },
      "16": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 41,
          column: 9
        }
      },
      "17": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 45
        }
      },
      "18": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "19": {
        start: {
          line: 43,
          column: 27
        },
        end: {
          line: 47,
          column: 27
        }
      },
      "20": {
        start: {
          line: 48,
          column: 24
        },
        end: {
          line: 48,
          column: 42
        }
      },
      "21": {
        start: {
          line: 49,
          column: 32
        },
        end: {
          line: 49,
          column: 127
        }
      },
      "22": {
        start: {
          line: 50,
          column: 37
        },
        end: {
          line: 50,
          column: 104
        }
      },
      "23": {
        start: {
          line: 53,
          column: 32
        },
        end: {
          line: 53,
          column: 87
        }
      },
      "24": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 60,
          column: 13
        }
      },
      "25": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 55,
          column: 117
        }
      },
      "26": {
        start: {
          line: 57,
          column: 17
        },
        end: {
          line: 60,
          column: 13
        }
      },
      "27": {
        start: {
          line: 58,
          column: 35
        },
        end: {
          line: 58,
          column: 109
        }
      },
      "28": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 59,
          column: 125
        }
      },
      "29": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 68,
          column: 14
        }
      },
      "30": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 89
        }
      },
      "31": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 79,
          column: 14
        }
      },
      "32": {
        start: {
          line: 86,
          column: 29
        },
        end: {
          line: 86,
          column: 65
        }
      },
      "33": {
        start: {
          line: 87,
          column: 30
        },
        end: {
          line: 87,
          column: 65
        }
      },
      "34": {
        start: {
          line: 88,
          column: 96
        },
        end: {
          line: 93,
          column: 10
        }
      },
      "35": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 99,
          column: 10
        }
      },
      "36": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "37": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 45
        }
      },
      "38": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 129,
          column: 9
        }
      },
      "39": {
        start: {
          line: 109,
          column: 32
        },
        end: {
          line: 109,
          column: 56
        }
      },
      "40": {
        start: {
          line: 110,
          column: 30
        },
        end: {
          line: 110,
          column: 49
        }
      },
      "41": {
        start: {
          line: 111,
          column: 28
        },
        end: {
          line: 111,
          column: 47
        }
      },
      "42": {
        start: {
          line: 112,
          column: 29
        },
        end: {
          line: 118,
          column: 22
        }
      },
      "43": {
        start: {
          line: 119,
          column: 31
        },
        end: {
          line: 119,
          column: 32
        }
      },
      "44": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 123,
          column: 15
        }
      },
      "45": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 122,
          column: 109
        }
      },
      "46": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 32
        }
      },
      "47": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 74
        }
      },
      "48": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 21
        }
      },
      "49": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 137,
          column: 9
        }
      },
      "50": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 45
        }
      },
      "51": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 167,
          column: 9
        }
      },
      "52": {
        start: {
          line: 140,
          column: 27
        },
        end: {
          line: 140,
          column: 29
        }
      },
      "53": {
        start: {
          line: 141,
          column: 24
        },
        end: {
          line: 141,
          column: 34
        }
      },
      "54": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 145,
          column: 13
        }
      },
      "55": {
        start: {
          line: 142,
          column: 25
        },
        end: {
          line: 142,
          column: 26
        }
      },
      "56": {
        start: {
          line: 143,
          column: 29
        },
        end: {
          line: 143,
          column: 79
        }
      },
      "57": {
        start: {
          line: 144,
          column: 16
        },
        end: {
          line: 144,
          column: 60
        }
      },
      "58": {
        start: {
          line: 146,
          column: 29
        },
        end: {
          line: 151,
          column: 22
        }
      },
      "59": {
        start: {
          line: 152,
          column: 31
        },
        end: {
          line: 152,
          column: 32
        }
      },
      "60": {
        start: {
          line: 153,
          column: 33
        },
        end: {
          line: 153,
          column: 34
        }
      },
      "61": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 161,
          column: 15
        }
      },
      "62": {
        start: {
          line: 156,
          column: 32
        },
        end: {
          line: 156,
          column: 108
        }
      },
      "63": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 160,
          column: 17
        }
      },
      "64": {
        start: {
          line: 158,
          column: 20
        },
        end: {
          line: 158,
          column: 44
        }
      },
      "65": {
        start: {
          line: 159,
          column: 20
        },
        end: {
          line: 159,
          column: 37
        }
      },
      "66": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 162,
          column: 86
        }
      },
      "67": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 77
        }
      },
      "68": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 21
        }
      },
      "69": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 181,
          column: 9
        }
      },
      "70": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 31
        }
      },
      "71": {
        start: {
          line: 176,
          column: 13
        },
        end: {
          line: 181,
          column: 9
        }
      },
      "72": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 28
        }
      },
      "73": {
        start: {
          line: 179,
          column: 13
        },
        end: {
          line: 181,
          column: 9
        }
      },
      "74": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 29
        }
      },
      "75": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 182,
          column: 22
        }
      },
      "76": {
        start: {
          line: 188,
          column: 31
        },
        end: {
          line: 188,
          column: 61
        }
      },
      "77": {
        start: {
          line: 189,
          column: 27
        },
        end: {
          line: 189,
          column: 116
        }
      },
      "78": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 207,
          column: 9
        }
      },
      "79": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 33
        }
      },
      "80": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 105
        }
      },
      "81": {
        start: {
          line: 196,
          column: 13
        },
        end: {
          line: 207,
          column: 9
        }
      },
      "82": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 197,
          column: 32
        }
      },
      "83": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 198,
          column: 155
        }
      },
      "84": {
        start: {
          line: 200,
          column: 13
        },
        end: {
          line: 207,
          column: 9
        }
      },
      "85": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 31
        }
      },
      "86": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 158
        }
      },
      "87": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 31
        }
      },
      "88": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 206,
          column: 155
        }
      },
      "89": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 214,
          column: 10
        }
      },
      "90": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 222,
          column: 9
        }
      },
      "91": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 221,
          column: 45
        }
      },
      "92": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 253,
          column: 9
        }
      },
      "93": {
        start: {
          line: 225,
          column: 27
        },
        end: {
          line: 225,
          column: 29
        }
      },
      "94": {
        start: {
          line: 226,
          column: 24
        },
        end: {
          line: 226,
          column: 34
        }
      },
      "95": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 230,
          column: 13
        }
      },
      "96": {
        start: {
          line: 227,
          column: 25
        },
        end: {
          line: 227,
          column: 27
        }
      },
      "97": {
        start: {
          line: 228,
          column: 29
        },
        end: {
          line: 228,
          column: 79
        }
      },
      "98": {
        start: {
          line: 229,
          column: 16
        },
        end: {
          line: 229,
          column: 60
        }
      },
      "99": {
        start: {
          line: 231,
          column: 29
        },
        end: {
          line: 236,
          column: 22
        }
      },
      "100": {
        start: {
          line: 238,
          column: 28
        },
        end: {
          line: 238,
          column: 37
        }
      },
      "101": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 242,
          column: 15
        }
      },
      "102": {
        start: {
          line: 240,
          column: 29
        },
        end: {
          line: 240,
          column: 39
        }
      },
      "103": {
        start: {
          line: 241,
          column: 16
        },
        end: {
          line: 241,
          column: 63
        }
      },
      "104": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 248,
          column: 16
        }
      },
      "105": {
        start: {
          line: 244,
          column: 40
        },
        end: {
          line: 248,
          column: 13
        }
      },
      "106": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 251,
          column: 77
        }
      },
      "107": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 252,
          column: 22
        }
      },
      "108": {
        start: {
          line: 259,
          column: 33
        },
        end: {
          line: 259,
          column: 61
        }
      },
      "109": {
        start: {
          line: 260,
          column: 21
        },
        end: {
          line: 260,
          column: 52
        }
      },
      "110": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 261,
          column: 46
        }
      },
      "111": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 272,
          column: 10
        }
      },
      "112": {
        start: {
          line: 275,
          column: 0
        },
        end: {
          line: 275,
          column: 60
        }
      },
      "113": {
        start: {
          line: 277,
          column: 0
        },
        end: {
          line: 277,
          column: 47
        }
      },
      "114": {
        start: {
          line: 278,
          column: 0
        },
        end: {
          line: 278,
          column: 49
        }
      },
      "115": {
        start: {
          line: 279,
          column: 0
        },
        end: {
          line: 279,
          column: 47
        }
      },
      "116": {
        start: {
          line: 281,
          column: 0
        },
        end: {
          line: 281,
          column: 74
        }
      },
      "117": {
        start: {
          line: 283,
          column: 4
        },
        end: {
          line: 283,
          column: 64
        }
      },
      "118": {
        start: {
          line: 286,
          column: 4
        },
        end: {
          line: 286,
          column: 64
        }
      },
      "119": {
        start: {
          line: 289,
          column: 4
        },
        end: {
          line: 289,
          column: 69
        }
      },
      "120": {
        start: {
          line: 291,
          column: 0
        },
        end: {
          line: 291,
          column: 43
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 18
          },
          end: {
            line: 12,
            column: 5
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 32
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 19
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        loc: {
          start: {
            line: 30,
            column: 30
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 30
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        },
        loc: {
          start: {
            line: 37,
            column: 36
          },
          end: {
            line: 81,
            column: 5
          }
        },
        line: 37
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 85,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        },
        loc: {
          start: {
            line: 85,
            column: 30
          },
          end: {
            line: 100,
            column: 5
          }
        },
        line: 85
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 104,
            column: 4
          },
          end: {
            line: 104,
            column: 5
          }
        },
        loc: {
          start: {
            line: 104,
            column: 33
          },
          end: {
            line: 130,
            column: 5
          }
        },
        line: 104
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 120,
            column: 34
          },
          end: {
            line: 120,
            column: 35
          }
        },
        loc: {
          start: {
            line: 120,
            column: 43
          },
          end: {
            line: 123,
            column: 13
          }
        },
        line: 120
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        },
        loc: {
          start: {
            line: 134,
            column: 37
          },
          end: {
            line: 168,
            column: 5
          }
        },
        line: 134
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 154,
            column: 34
          },
          end: {
            line: 154,
            column: 35
          }
        },
        loc: {
          start: {
            line: 154,
            column: 43
          },
          end: {
            line: 161,
            column: 13
          }
        },
        line: 154
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 172,
            column: 4
          },
          end: {
            line: 172,
            column: 5
          }
        },
        loc: {
          start: {
            line: 172,
            column: 37
          },
          end: {
            line: 183,
            column: 5
          }
        },
        line: 172
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 187,
            column: 4
          },
          end: {
            line: 187,
            column: 5
          }
        },
        loc: {
          start: {
            line: 187,
            column: 35
          },
          end: {
            line: 215,
            column: 5
          }
        },
        line: 187
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 219,
            column: 4
          },
          end: {
            line: 219,
            column: 5
          }
        },
        loc: {
          start: {
            line: 219,
            column: 37
          },
          end: {
            line: 254,
            column: 5
          }
        },
        line: 219
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 239,
            column: 34
          },
          end: {
            line: 239,
            column: 35
          }
        },
        loc: {
          start: {
            line: 239,
            column: 43
          },
          end: {
            line: 242,
            column: 13
          }
        },
        line: 239
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 244,
            column: 30
          },
          end: {
            line: 244,
            column: 31
          }
        },
        loc: {
          start: {
            line: 244,
            column: 40
          },
          end: {
            line: 248,
            column: 13
          }
        },
        line: 244
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 258,
            column: 4
          },
          end: {
            line: 258,
            column: 5
          }
        },
        loc: {
          start: {
            line: 258,
            column: 28
          },
          end: {
            line: 262,
            column: 5
          }
        },
        line: 258
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 266,
            column: 4
          },
          end: {
            line: 266,
            column: 5
          }
        },
        loc: {
          start: {
            line: 266,
            column: 37
          },
          end: {
            line: 273,
            column: 5
          }
        },
        line: 266
      },
      "17": {
        name: "getCurrentTheirStackCredits",
        decl: {
          start: {
            line: 282,
            column: 15
          },
          end: {
            line: 282,
            column: 42
          }
        },
        loc: {
          start: {
            line: 282,
            column: 45
          },
          end: {
            line: 284,
            column: 1
          }
        },
        line: 282
      },
      "18": {
        name: "getTheirStackCreditsSummary",
        decl: {
          start: {
            line: 285,
            column: 15
          },
          end: {
            line: 285,
            column: 42
          }
        },
        loc: {
          start: {
            line: 285,
            column: 45
          },
          end: {
            line: 287,
            column: 1
          }
        },
        line: 285
      },
      "19": {
        name: "getTheirStackCreditsHealth",
        decl: {
          start: {
            line: 288,
            column: 15
          },
          end: {
            line: 288,
            column: 41
          }
        },
        loc: {
          start: {
            line: 288,
            column: 44
          },
          end: {
            line: 290,
            column: 1
          }
        },
        line: 288
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 16,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 14,
            column: 8
          },
          end: {
            line: 16,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 41,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "2": {
        loc: {
          start: {
            line: 49,
            column: 32
          },
          end: {
            line: 49,
            column: 127
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 49,
            column: 46
          },
          end: {
            line: 49,
            column: 122
          }
        }, {
          start: {
            line: 49,
            column: 126
          },
          end: {
            line: 49,
            column: 127
          }
        }],
        line: 49
      },
      "3": {
        loc: {
          start: {
            line: 49,
            column: 46
          },
          end: {
            line: 49,
            column: 122
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 47
          },
          end: {
            line: 49,
            column: 116
          }
        }, {
          start: {
            line: 49,
            column: 121
          },
          end: {
            line: 49,
            column: 122
          }
        }],
        line: 49
      },
      "4": {
        loc: {
          start: {
            line: 49,
            column: 47
          },
          end: {
            line: 49,
            column: 116
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 49,
            column: 93
          },
          end: {
            line: 49,
            column: 99
          }
        }, {
          start: {
            line: 49,
            column: 102
          },
          end: {
            line: 49,
            column: 116
          }
        }],
        line: 49
      },
      "5": {
        loc: {
          start: {
            line: 49,
            column: 47
          },
          end: {
            line: 49,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 47
          },
          end: {
            line: 49,
            column: 73
          }
        }, {
          start: {
            line: 49,
            column: 77
          },
          end: {
            line: 49,
            column: 90
          }
        }],
        line: 49
      },
      "6": {
        loc: {
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 60,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 60,
            column: 13
          }
        }, {
          start: {
            line: 57,
            column: 17
          },
          end: {
            line: 60,
            column: 13
          }
        }],
        line: 54
      },
      "7": {
        loc: {
          start: {
            line: 57,
            column: 17
          },
          end: {
            line: 60,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 17
          },
          end: {
            line: 60,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "8": {
        loc: {
          start: {
            line: 65,
            column: 29
          },
          end: {
            line: 65,
            column: 198
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 65,
            column: 43
          },
          end: {
            line: 65,
            column: 184
          }
        }, {
          start: {
            line: 65,
            column: 188
          },
          end: {
            line: 65,
            column: 198
          }
        }],
        line: 65
      },
      "9": {
        loc: {
          start: {
            line: 65,
            column: 43
          },
          end: {
            line: 65,
            column: 184
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 65,
            column: 44
          },
          end: {
            line: 65,
            column: 169
          }
        }, {
          start: {
            line: 65,
            column: 174
          },
          end: {
            line: 65,
            column: 184
          }
        }],
        line: 65
      },
      "10": {
        loc: {
          start: {
            line: 65,
            column: 44
          },
          end: {
            line: 65,
            column: 169
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 65,
            column: 149
          },
          end: {
            line: 65,
            column: 155
          }
        }, {
          start: {
            line: 65,
            column: 158
          },
          end: {
            line: 65,
            column: 169
          }
        }],
        line: 65
      },
      "11": {
        loc: {
          start: {
            line: 65,
            column: 44
          },
          end: {
            line: 65,
            column: 146
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 65,
            column: 44
          },
          end: {
            line: 65,
            column: 129
          }
        }, {
          start: {
            line: 65,
            column: 133
          },
          end: {
            line: 65,
            column: 146
          }
        }],
        line: 65
      },
      "12": {
        loc: {
          start: {
            line: 65,
            column: 50
          },
          end: {
            line: 65,
            column: 119
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 65,
            column: 96
          },
          end: {
            line: 65,
            column: 102
          }
        }, {
          start: {
            line: 65,
            column: 105
          },
          end: {
            line: 65,
            column: 119
          }
        }],
        line: 65
      },
      "13": {
        loc: {
          start: {
            line: 65,
            column: 50
          },
          end: {
            line: 65,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 65,
            column: 50
          },
          end: {
            line: 65,
            column: 76
          }
        }, {
          start: {
            line: 65,
            column: 80
          },
          end: {
            line: 65,
            column: 93
          }
        }],
        line: 65
      },
      "14": {
        loc: {
          start: {
            line: 96,
            column: 27
          },
          end: {
            line: 96,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 96,
            column: 63
          },
          end: {
            line: 96,
            column: 80
          }
        }, {
          start: {
            line: 96,
            column: 83
          },
          end: {
            line: 96,
            column: 87
          }
        }],
        line: 96
      },
      "15": {
        loc: {
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 105
      },
      "16": {
        loc: {
          start: {
            line: 122,
            column: 32
          },
          end: {
            line: 122,
            column: 108
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 122,
            column: 33
          },
          end: {
            line: 122,
            column: 102
          }
        }, {
          start: {
            line: 122,
            column: 107
          },
          end: {
            line: 122,
            column: 108
          }
        }],
        line: 122
      },
      "17": {
        loc: {
          start: {
            line: 122,
            column: 33
          },
          end: {
            line: 122,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 122,
            column: 79
          },
          end: {
            line: 122,
            column: 85
          }
        }, {
          start: {
            line: 122,
            column: 88
          },
          end: {
            line: 122,
            column: 102
          }
        }],
        line: 122
      },
      "18": {
        loc: {
          start: {
            line: 122,
            column: 33
          },
          end: {
            line: 122,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 122,
            column: 33
          },
          end: {
            line: 122,
            column: 59
          }
        }, {
          start: {
            line: 122,
            column: 63
          },
          end: {
            line: 122,
            column: 76
          }
        }],
        line: 122
      },
      "19": {
        loc: {
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 137,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 137,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "20": {
        loc: {
          start: {
            line: 156,
            column: 32
          },
          end: {
            line: 156,
            column: 108
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 156,
            column: 33
          },
          end: {
            line: 156,
            column: 102
          }
        }, {
          start: {
            line: 156,
            column: 107
          },
          end: {
            line: 156,
            column: 108
          }
        }],
        line: 156
      },
      "21": {
        loc: {
          start: {
            line: 156,
            column: 33
          },
          end: {
            line: 156,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 156,
            column: 79
          },
          end: {
            line: 156,
            column: 85
          }
        }, {
          start: {
            line: 156,
            column: 88
          },
          end: {
            line: 156,
            column: 102
          }
        }],
        line: 156
      },
      "22": {
        loc: {
          start: {
            line: 156,
            column: 33
          },
          end: {
            line: 156,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 156,
            column: 33
          },
          end: {
            line: 156,
            column: 59
          }
        }, {
          start: {
            line: 156,
            column: 63
          },
          end: {
            line: 156,
            column: 76
          }
        }],
        line: 156
      },
      "23": {
        loc: {
          start: {
            line: 157,
            column: 16
          },
          end: {
            line: 160,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 157,
            column: 16
          },
          end: {
            line: 160,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 157
      },
      "24": {
        loc: {
          start: {
            line: 162,
            column: 19
          },
          end: {
            line: 162,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 162,
            column: 40
          },
          end: {
            line: 162,
            column: 81
          }
        }, {
          start: {
            line: 162,
            column: 84
          },
          end: {
            line: 162,
            column: 85
          }
        }],
        line: 162
      },
      "25": {
        loc: {
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 181,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 181,
            column: 9
          }
        }, {
          start: {
            line: 176,
            column: 13
          },
          end: {
            line: 181,
            column: 9
          }
        }],
        line: 173
      },
      "26": {
        loc: {
          start: {
            line: 176,
            column: 13
          },
          end: {
            line: 181,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 13
          },
          end: {
            line: 181,
            column: 9
          }
        }, {
          start: {
            line: 179,
            column: 13
          },
          end: {
            line: 181,
            column: 9
          }
        }],
        line: 176
      },
      "27": {
        loc: {
          start: {
            line: 179,
            column: 13
          },
          end: {
            line: 181,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 13
          },
          end: {
            line: 181,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 179
      },
      "28": {
        loc: {
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 207,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 207,
            column: 9
          }
        }, {
          start: {
            line: 196,
            column: 13
          },
          end: {
            line: 207,
            column: 9
          }
        }],
        line: 192
      },
      "29": {
        loc: {
          start: {
            line: 196,
            column: 13
          },
          end: {
            line: 207,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 196,
            column: 13
          },
          end: {
            line: 207,
            column: 9
          }
        }, {
          start: {
            line: 200,
            column: 13
          },
          end: {
            line: 207,
            column: 9
          }
        }],
        line: 196
      },
      "30": {
        loc: {
          start: {
            line: 200,
            column: 13
          },
          end: {
            line: 207,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 13
          },
          end: {
            line: 207,
            column: 9
          }
        }, {
          start: {
            line: 204,
            column: 13
          },
          end: {
            line: 207,
            column: 9
          }
        }],
        line: 200
      },
      "31": {
        loc: {
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 222,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 222,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 220
      },
      "32": {
        loc: {
          start: {
            line: 241,
            column: 40
          },
          end: {
            line: 241,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 241,
            column: 40
          },
          end: {
            line: 241,
            column: 56
          }
        }, {
          start: {
            line: 241,
            column: 60
          },
          end: {
            line: 241,
            column: 61
          }
        }],
        line: 241
      },
      "33": {
        loc: {
          start: {
            line: 246,
            column: 29
          },
          end: {
            line: 246,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 246,
            column: 29
          },
          end: {
            line: 246,
            column: 47
          }
        }, {
          start: {
            line: 246,
            column: 51
          },
          end: {
            line: 246,
            column: 52
          }
        }],
        line: 246
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/services/theirstack-credits.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/services/theirstack-credits.ts"],
      sourcesContent: ["import { getAdminFirestore } from '@/lib/firebase/admin';\n\nexport interface TheirStackCreditsData {\n  month: string; // YYYY-MM format\n  creditsUsed: number;\n  creditsRemaining: number;\n  lastUpdated: Date;\n  warning?: string;\n  isOverLimit: boolean;\n}\n\nexport interface TheirStackCreditsSummary {\n  currentMonth: TheirStackCreditsData;\n  previousMonth: TheirStackCreditsData | null;\n  yearToDate: number;\n  averageMonthly: number;\n}\n\nexport class TheirStackCreditsService {\n  private static instance: TheirStackCreditsService;\n  private firestore: any = null;\n\n  // Credit limits\n  private static readonly FREE_TIER_LIMIT = 200;\n  private static readonly WARNING_THRESHOLD = 0.8; // 80%\n  private static readonly EMERGENCY_LIMIT = 500;\n\n  private constructor() {\n    this.initializeFirestore();\n  }\n\n  public static getInstance(): TheirStackCreditsService {\n    if (!TheirStackCreditsService.instance) {\n      TheirStackCreditsService.instance = new TheirStackCreditsService();\n    }\n    return TheirStackCreditsService.instance;\n  }\n\n  private async initializeFirestore(): Promise<void> {\n    try {\n      this.firestore = await getAdminFirestore();\n    } catch (error) {\n      console.error('\u274C Failed to initialize Firestore for TheirStack credits service:', error);\n    }\n  }\n\n  /**\n   * Get current month's credit usage\n   */\n  async getCurrentCredits(): Promise<TheirStackCreditsData> {\n    const currentMonth = new Date().toISOString().slice(0, 7);\n    return this.getCreditsForMonth(currentMonth);\n  }\n\n  /**\n   * Get credits usage for a specific month\n   */\n  async getCreditsForMonth(month: string): Promise<TheirStackCreditsData> {\n    if (!this.firestore) {\n      await this.initializeFirestore();\n    }\n\n    try {\n      const docRef = this.firestore\n        .collection('usage')\n        .doc('theirstackCredits')\n        .collection('monthly')\n        .doc(month);\n      \n      const doc = await docRef.get();\n      const creditsUsed = doc.exists ? (doc.data()?.creditsUsed || 0) : 0;\n      const creditsRemaining = Math.max(0, TheirStackCreditsService.FREE_TIER_LIMIT - creditsUsed);\n      \n      // Generate warning message if needed\n      let warning: string | undefined;\n      const isOverLimit = creditsUsed >= TheirStackCreditsService.EMERGENCY_LIMIT;\n      \n      if (isOverLimit) {\n        warning = `\u26A0\uFE0F Emergency limit exceeded (${creditsUsed}/${TheirStackCreditsService.EMERGENCY_LIMIT})`;\n      } else if (creditsUsed >= TheirStackCreditsService.FREE_TIER_LIMIT * TheirStackCreditsService.WARNING_THRESHOLD) {\n        const percentage = Math.round((creditsUsed / TheirStackCreditsService.FREE_TIER_LIMIT) * 100);\n        warning = `\u26A0\uFE0F ${percentage}% of free tier used (${creditsUsed}/${TheirStackCreditsService.FREE_TIER_LIMIT})`;\n      }\n\n      return {\n        month,\n        creditsUsed,\n        creditsRemaining,\n        lastUpdated: doc.exists ? (doc.data()?.lastUpdated?.toDate() || new Date()) : new Date(),\n        warning,\n        isOverLimit\n      };\n\n    } catch (error) {\n      console.error('\u274C Failed to get TheirStack credits for month:', month, error);\n      \n      // Return default data on error\n      return {\n        month,\n        creditsUsed: 0,\n        creditsRemaining: TheirStackCreditsService.FREE_TIER_LIMIT,\n        lastUpdated: new Date(),\n        isOverLimit: false\n      };\n    }\n  }\n\n  /**\n   * Get comprehensive credits summary including historical data\n   */\n  async getCreditsSummary(): Promise<TheirStackCreditsSummary> {\n    const currentMonth = new Date().toISOString().slice(0, 7);\n    const previousMonth = this.getPreviousMonth(currentMonth);\n\n    const [currentMonthData, previousMonthData, yearToDateCredits, averageMonthlyCredits] = await Promise.all([\n      this.getCreditsForMonth(currentMonth),\n      this.getCreditsForMonth(previousMonth),\n      this.getYearToDateCredits(),\n      this.getAverageMonthlyCredits()\n    ]);\n\n    return {\n      currentMonth: currentMonthData,\n      previousMonth: previousMonthData.creditsUsed > 0 ? previousMonthData : null,\n      yearToDate: yearToDateCredits,\n      averageMonthly: averageMonthlyCredits\n    };\n  }\n\n  /**\n   * Get total credits used in current year\n   */\n  async getYearToDateCredits(): Promise<number> {\n    if (!this.firestore) {\n      await this.initializeFirestore();\n    }\n\n    try {\n      const currentYear = new Date().getFullYear();\n      const yearStart = `${currentYear}-01`;\n      const yearEnd = `${currentYear}-12`;\n\n      const snapshot = await this.firestore\n        .collection('usage')\n        .doc('theirstackCredits')\n        .collection('monthly')\n        .where('month', '>=', yearStart)\n        .where('month', '<=', yearEnd)\n        .get();\n\n      let totalCredits = 0;\n      snapshot.docs.forEach((doc: any) => {\n        totalCredits += doc.data()?.creditsUsed || 0;\n      });\n\n      return totalCredits;\n\n    } catch (error) {\n      console.error('\u274C Failed to get year-to-date credits:', error);\n      return 0;\n    }\n  }\n\n  /**\n   * Get average monthly credits usage (last 6 months)\n   */\n  async getAverageMonthlyCredits(): Promise<number> {\n    if (!this.firestore) {\n      await this.initializeFirestore();\n    }\n\n    try {\n      // Get last 6 months\n      const months: string[] = [];\n      const now = new Date();\n      \n      for (let i = 0; i < 6; i++) {\n        const date = new Date(now.getFullYear(), now.getMonth() - i, 1);\n        months.push(date.toISOString().slice(0, 7));\n      }\n\n      const snapshot = await this.firestore\n        .collection('usage')\n        .doc('theirstackCredits')\n        .collection('monthly')\n        .where('month', 'in', months)\n        .get();\n\n      let totalCredits = 0;\n      let monthsWithData = 0;\n      \n      snapshot.docs.forEach((doc: any) => {\n        const credits = doc.data()?.creditsUsed || 0;\n        if (credits > 0) {\n          totalCredits += credits;\n          monthsWithData++;\n        }\n      });\n\n      return monthsWithData > 0 ? Math.round(totalCredits / monthsWithData) : 0;\n\n    } catch (error) {\n      console.error('\u274C Failed to get average monthly credits:', error);\n      return 0;\n    }\n  }\n\n  /**\n   * Check if credits are approaching limits and return alert level\n   */\n  getCreditAlertLevel(creditsUsed: number): 'none' | 'warning' | 'danger' | 'emergency' {\n    if (creditsUsed >= TheirStackCreditsService.EMERGENCY_LIMIT) {\n      return 'emergency';\n    } else if (creditsUsed >= TheirStackCreditsService.FREE_TIER_LIMIT) {\n      return 'danger';\n    } else if (creditsUsed >= TheirStackCreditsService.FREE_TIER_LIMIT * TheirStackCreditsService.WARNING_THRESHOLD) {\n      return 'warning';\n    }\n    return 'none';\n  }\n\n  /**\n   * Get credits health status for dashboard\n   */\n  async getCreditsHealthStatus(): Promise<{\n    status: 'healthy' | 'warning' | 'critical' | 'emergency';\n    message: string;\n    creditsUsed: number;\n    creditsRemaining: number;\n    percentage: number;\n  }> {\n    const currentCredits = await this.getCurrentCredits();\n    const percentage = Math.round((currentCredits.creditsUsed / TheirStackCreditsService.FREE_TIER_LIMIT) * 100);\n    \n    let status: 'healthy' | 'warning' | 'critical' | 'emergency';\n    let message: string;\n\n    if (currentCredits.isOverLimit) {\n      status = 'emergency';\n      message = `Emergency limit exceeded! ${currentCredits.creditsUsed} credits used this month.`;\n    } else if (currentCredits.creditsUsed >= TheirStackCreditsService.FREE_TIER_LIMIT) {\n      status = 'critical';\n      message = `Free tier limit exceeded! ${currentCredits.creditsUsed}/${TheirStackCreditsService.FREE_TIER_LIMIT} credits used (${percentage}%).`;\n    } else if (percentage >= 80) {\n      status = 'warning';\n      message = `Approaching free tier limit: ${currentCredits.creditsUsed}/${TheirStackCreditsService.FREE_TIER_LIMIT} credits used (${percentage}%).`;\n    } else {\n      status = 'healthy';\n      message = `Credits usage is healthy: ${currentCredits.creditsUsed}/${TheirStackCreditsService.FREE_TIER_LIMIT} credits used (${percentage}%).`;\n    }\n\n    return {\n      status,\n      message,\n      creditsUsed: currentCredits.creditsUsed,\n      creditsRemaining: currentCredits.creditsRemaining,\n      percentage\n    };\n  }\n\n  /**\n   * Get historical credits data for charts (last 12 months)\n   */\n  async getHistoricalCreditsData(): Promise<Array<{ month: string; creditsUsed: number; date: Date }>> {\n    if (!this.firestore) {\n      await this.initializeFirestore();\n    }\n\n    try {\n      // Get last 12 months\n      const months: string[] = [];\n      const now = new Date();\n      \n      for (let i = 11; i >= 0; i--) {\n        const date = new Date(now.getFullYear(), now.getMonth() - i, 1);\n        months.push(date.toISOString().slice(0, 7));\n      }\n\n      const snapshot = await this.firestore\n        .collection('usage')\n        .doc('theirstackCredits')\n        .collection('monthly')\n        .where('month', 'in', months)\n        .get();\n\n      // Create a map for quick lookup\n      const dataMap = new Map();\n      snapshot.docs.forEach((doc: any) => {\n        const data = doc.data();\n        dataMap.set(data.month, data.creditsUsed || 0);\n      });\n\n      // Build the historical data array\n      return months.map(month => ({\n        month,\n        creditsUsed: dataMap.get(month) || 0,\n        date: new Date(`${month}-01`)\n      }));\n\n    } catch (error) {\n      console.error('\u274C Failed to get historical credits data:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Helper method to get previous month string\n   */\n  private getPreviousMonth(month: string): string {\n    const [year, monthNum] = month.split('-').map(Number);\n    const date = new Date(year, monthNum - 2, 1); // monthNum - 2 because Date months are 0-indexed\n    return date.toISOString().slice(0, 7);\n  }\n\n  /**\n   * Get credits configuration for display\n   */\n  static getCreditsConfiguration() {\n    return {\n      freeTierLimit: TheirStackCreditsService.FREE_TIER_LIMIT,\n      warningThreshold: Math.round(TheirStackCreditsService.FREE_TIER_LIMIT * TheirStackCreditsService.WARNING_THRESHOLD),\n      emergencyLimit: TheirStackCreditsService.EMERGENCY_LIMIT,\n      warningPercentage: TheirStackCreditsService.WARNING_THRESHOLD * 100\n    };\n  }\n}\n\n// Export convenience functions\nexport const theirStackCreditsService = TheirStackCreditsService.getInstance();\n\nexport async function getCurrentTheirStackCredits(): Promise<TheirStackCreditsData> {\n  return theirStackCreditsService.getCurrentCredits();\n}\n\nexport async function getTheirStackCreditsSummary(): Promise<TheirStackCreditsSummary> {\n  return theirStackCreditsService.getCreditsSummary();\n}\n\nexport async function getTheirStackCreditsHealth() {\n  return theirStackCreditsService.getCreditsHealthStatus();\n}\n\nexport default TheirStackCreditsService;\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5561a5d02d3359f7339fa10f2a5e84d980d1e3f3"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2ak5to38u2 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2ak5to38u2();
cov_2ak5to38u2().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2ak5to38u2().s[1]++;
exports.theirStackCreditsService = exports.TheirStackCreditsService = void 0;
/* istanbul ignore next */
cov_2ak5to38u2().s[2]++;
exports.getCurrentTheirStackCredits = getCurrentTheirStackCredits;
/* istanbul ignore next */
cov_2ak5to38u2().s[3]++;
exports.getTheirStackCreditsSummary = getTheirStackCreditsSummary;
/* istanbul ignore next */
cov_2ak5to38u2().s[4]++;
exports.getTheirStackCreditsHealth = getTheirStackCreditsHealth;
const admin_1 =
/* istanbul ignore next */
(cov_2ak5to38u2().s[5]++, require("@/lib/firebase/admin"));
class TheirStackCreditsService {
  constructor() {
    /* istanbul ignore next */
    cov_2ak5to38u2().f[0]++;
    cov_2ak5to38u2().s[6]++;
    this.firestore = null;
    /* istanbul ignore next */
    cov_2ak5to38u2().s[7]++;
    this.initializeFirestore();
  }
  static getInstance() {
    /* istanbul ignore next */
    cov_2ak5to38u2().f[1]++;
    cov_2ak5to38u2().s[8]++;
    if (!TheirStackCreditsService.instance) {
      /* istanbul ignore next */
      cov_2ak5to38u2().b[0][0]++;
      cov_2ak5to38u2().s[9]++;
      TheirStackCreditsService.instance = new TheirStackCreditsService();
    } else
    /* istanbul ignore next */
    {
      cov_2ak5to38u2().b[0][1]++;
    }
    cov_2ak5to38u2().s[10]++;
    return TheirStackCreditsService.instance;
  }
  async initializeFirestore() {
    /* istanbul ignore next */
    cov_2ak5to38u2().f[2]++;
    cov_2ak5to38u2().s[11]++;
    try {
      /* istanbul ignore next */
      cov_2ak5to38u2().s[12]++;
      this.firestore = await (0, admin_1.getAdminFirestore)();
    } catch (error) {
      /* istanbul ignore next */
      cov_2ak5to38u2().s[13]++;
      console.error('❌ Failed to initialize Firestore for TheirStack credits service:', error);
    }
  }
  /**
   * Get current month's credit usage
   */
  async getCurrentCredits() {
    /* istanbul ignore next */
    cov_2ak5to38u2().f[3]++;
    const currentMonth =
    /* istanbul ignore next */
    (cov_2ak5to38u2().s[14]++, new Date().toISOString().slice(0, 7));
    /* istanbul ignore next */
    cov_2ak5to38u2().s[15]++;
    return this.getCreditsForMonth(currentMonth);
  }
  /**
   * Get credits usage for a specific month
   */
  async getCreditsForMonth(month) {
    /* istanbul ignore next */
    cov_2ak5to38u2().f[4]++;
    var _a, _b, _c;
    /* istanbul ignore next */
    cov_2ak5to38u2().s[16]++;
    if (!this.firestore) {
      /* istanbul ignore next */
      cov_2ak5to38u2().b[1][0]++;
      cov_2ak5to38u2().s[17]++;
      await this.initializeFirestore();
    } else
    /* istanbul ignore next */
    {
      cov_2ak5to38u2().b[1][1]++;
    }
    cov_2ak5to38u2().s[18]++;
    try {
      const docRef =
      /* istanbul ignore next */
      (cov_2ak5to38u2().s[19]++, this.firestore.collection('usage').doc('theirstackCredits').collection('monthly').doc(month));
      const doc =
      /* istanbul ignore next */
      (cov_2ak5to38u2().s[20]++, await docRef.get());
      const creditsUsed =
      /* istanbul ignore next */
      (cov_2ak5to38u2().s[21]++, doc.exists ?
      /* istanbul ignore next */
      (cov_2ak5to38u2().b[2][0]++,
      /* istanbul ignore next */
      (cov_2ak5to38u2().b[3][0]++,
      /* istanbul ignore next */
      (cov_2ak5to38u2().b[5][0]++, (_a = doc.data()) === null) ||
      /* istanbul ignore next */
      (cov_2ak5to38u2().b[5][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_2ak5to38u2().b[4][0]++, void 0) :
      /* istanbul ignore next */
      (cov_2ak5to38u2().b[4][1]++, _a.creditsUsed)) ||
      /* istanbul ignore next */
      (cov_2ak5to38u2().b[3][1]++, 0)) :
      /* istanbul ignore next */
      (cov_2ak5to38u2().b[2][1]++, 0));
      const creditsRemaining =
      /* istanbul ignore next */
      (cov_2ak5to38u2().s[22]++, Math.max(0, TheirStackCreditsService.FREE_TIER_LIMIT - creditsUsed));
      // Generate warning message if needed
      let warning;
      const isOverLimit =
      /* istanbul ignore next */
      (cov_2ak5to38u2().s[23]++, creditsUsed >= TheirStackCreditsService.EMERGENCY_LIMIT);
      /* istanbul ignore next */
      cov_2ak5to38u2().s[24]++;
      if (isOverLimit) {
        /* istanbul ignore next */
        cov_2ak5to38u2().b[6][0]++;
        cov_2ak5to38u2().s[25]++;
        warning = `⚠️ Emergency limit exceeded (${creditsUsed}/${TheirStackCreditsService.EMERGENCY_LIMIT})`;
      } else {
        /* istanbul ignore next */
        cov_2ak5to38u2().b[6][1]++;
        cov_2ak5to38u2().s[26]++;
        if (creditsUsed >= TheirStackCreditsService.FREE_TIER_LIMIT * TheirStackCreditsService.WARNING_THRESHOLD) {
          /* istanbul ignore next */
          cov_2ak5to38u2().b[7][0]++;
          const percentage =
          /* istanbul ignore next */
          (cov_2ak5to38u2().s[27]++, Math.round(creditsUsed / TheirStackCreditsService.FREE_TIER_LIMIT * 100));
          /* istanbul ignore next */
          cov_2ak5to38u2().s[28]++;
          warning = `⚠️ ${percentage}% of free tier used (${creditsUsed}/${TheirStackCreditsService.FREE_TIER_LIMIT})`;
        } else
        /* istanbul ignore next */
        {
          cov_2ak5to38u2().b[7][1]++;
        }
      }
      /* istanbul ignore next */
      cov_2ak5to38u2().s[29]++;
      return {
        month,
        creditsUsed,
        creditsRemaining,
        lastUpdated: doc.exists ?
        /* istanbul ignore next */
        (cov_2ak5to38u2().b[8][0]++,
        /* istanbul ignore next */
        (cov_2ak5to38u2().b[9][0]++,
        /* istanbul ignore next */
        (cov_2ak5to38u2().b[11][0]++, (_c =
        /* istanbul ignore next */
        (cov_2ak5to38u2().b[13][0]++, (_b = doc.data()) === null) ||
        /* istanbul ignore next */
        (cov_2ak5to38u2().b[13][1]++, _b === void 0) ?
        /* istanbul ignore next */
        (cov_2ak5to38u2().b[12][0]++, void 0) :
        /* istanbul ignore next */
        (cov_2ak5to38u2().b[12][1]++, _b.lastUpdated)) === null) ||
        /* istanbul ignore next */
        (cov_2ak5to38u2().b[11][1]++, _c === void 0) ?
        /* istanbul ignore next */
        (cov_2ak5to38u2().b[10][0]++, void 0) :
        /* istanbul ignore next */
        (cov_2ak5to38u2().b[10][1]++, _c.toDate())) ||
        /* istanbul ignore next */
        (cov_2ak5to38u2().b[9][1]++, new Date())) :
        /* istanbul ignore next */
        (cov_2ak5to38u2().b[8][1]++, new Date()),
        warning,
        isOverLimit
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2ak5to38u2().s[30]++;
      console.error('❌ Failed to get TheirStack credits for month:', month, error);
      // Return default data on error
      /* istanbul ignore next */
      cov_2ak5to38u2().s[31]++;
      return {
        month,
        creditsUsed: 0,
        creditsRemaining: TheirStackCreditsService.FREE_TIER_LIMIT,
        lastUpdated: new Date(),
        isOverLimit: false
      };
    }
  }
  /**
   * Get comprehensive credits summary including historical data
   */
  async getCreditsSummary() {
    /* istanbul ignore next */
    cov_2ak5to38u2().f[5]++;
    const currentMonth =
    /* istanbul ignore next */
    (cov_2ak5to38u2().s[32]++, new Date().toISOString().slice(0, 7));
    const previousMonth =
    /* istanbul ignore next */
    (cov_2ak5to38u2().s[33]++, this.getPreviousMonth(currentMonth));
    const [currentMonthData, previousMonthData, yearToDateCredits, averageMonthlyCredits] =
    /* istanbul ignore next */
    (cov_2ak5to38u2().s[34]++, await Promise.all([this.getCreditsForMonth(currentMonth), this.getCreditsForMonth(previousMonth), this.getYearToDateCredits(), this.getAverageMonthlyCredits()]));
    /* istanbul ignore next */
    cov_2ak5to38u2().s[35]++;
    return {
      currentMonth: currentMonthData,
      previousMonth: previousMonthData.creditsUsed > 0 ?
      /* istanbul ignore next */
      (cov_2ak5to38u2().b[14][0]++, previousMonthData) :
      /* istanbul ignore next */
      (cov_2ak5to38u2().b[14][1]++, null),
      yearToDate: yearToDateCredits,
      averageMonthly: averageMonthlyCredits
    };
  }
  /**
   * Get total credits used in current year
   */
  async getYearToDateCredits() {
    /* istanbul ignore next */
    cov_2ak5to38u2().f[6]++;
    cov_2ak5to38u2().s[36]++;
    if (!this.firestore) {
      /* istanbul ignore next */
      cov_2ak5to38u2().b[15][0]++;
      cov_2ak5to38u2().s[37]++;
      await this.initializeFirestore();
    } else
    /* istanbul ignore next */
    {
      cov_2ak5to38u2().b[15][1]++;
    }
    cov_2ak5to38u2().s[38]++;
    try {
      const currentYear =
      /* istanbul ignore next */
      (cov_2ak5to38u2().s[39]++, new Date().getFullYear());
      const yearStart =
      /* istanbul ignore next */
      (cov_2ak5to38u2().s[40]++, `${currentYear}-01`);
      const yearEnd =
      /* istanbul ignore next */
      (cov_2ak5to38u2().s[41]++, `${currentYear}-12`);
      const snapshot =
      /* istanbul ignore next */
      (cov_2ak5to38u2().s[42]++, await this.firestore.collection('usage').doc('theirstackCredits').collection('monthly').where('month', '>=', yearStart).where('month', '<=', yearEnd).get());
      let totalCredits =
      /* istanbul ignore next */
      (cov_2ak5to38u2().s[43]++, 0);
      /* istanbul ignore next */
      cov_2ak5to38u2().s[44]++;
      snapshot.docs.forEach(doc => {
        /* istanbul ignore next */
        cov_2ak5to38u2().f[7]++;
        var _a;
        /* istanbul ignore next */
        cov_2ak5to38u2().s[45]++;
        totalCredits +=
        /* istanbul ignore next */
        (cov_2ak5to38u2().b[16][0]++,
        /* istanbul ignore next */
        (cov_2ak5to38u2().b[18][0]++, (_a = doc.data()) === null) ||
        /* istanbul ignore next */
        (cov_2ak5to38u2().b[18][1]++, _a === void 0) ?
        /* istanbul ignore next */
        (cov_2ak5to38u2().b[17][0]++, void 0) :
        /* istanbul ignore next */
        (cov_2ak5to38u2().b[17][1]++, _a.creditsUsed)) ||
        /* istanbul ignore next */
        (cov_2ak5to38u2().b[16][1]++, 0);
      });
      /* istanbul ignore next */
      cov_2ak5to38u2().s[46]++;
      return totalCredits;
    } catch (error) {
      /* istanbul ignore next */
      cov_2ak5to38u2().s[47]++;
      console.error('❌ Failed to get year-to-date credits:', error);
      /* istanbul ignore next */
      cov_2ak5to38u2().s[48]++;
      return 0;
    }
  }
  /**
   * Get average monthly credits usage (last 6 months)
   */
  async getAverageMonthlyCredits() {
    /* istanbul ignore next */
    cov_2ak5to38u2().f[8]++;
    cov_2ak5to38u2().s[49]++;
    if (!this.firestore) {
      /* istanbul ignore next */
      cov_2ak5to38u2().b[19][0]++;
      cov_2ak5to38u2().s[50]++;
      await this.initializeFirestore();
    } else
    /* istanbul ignore next */
    {
      cov_2ak5to38u2().b[19][1]++;
    }
    cov_2ak5to38u2().s[51]++;
    try {
      // Get last 6 months
      const months =
      /* istanbul ignore next */
      (cov_2ak5to38u2().s[52]++, []);
      const now =
      /* istanbul ignore next */
      (cov_2ak5to38u2().s[53]++, new Date());
      /* istanbul ignore next */
      cov_2ak5to38u2().s[54]++;
      for (let i =
      /* istanbul ignore next */
      (cov_2ak5to38u2().s[55]++, 0); i < 6; i++) {
        const date =
        /* istanbul ignore next */
        (cov_2ak5to38u2().s[56]++, new Date(now.getFullYear(), now.getMonth() - i, 1));
        /* istanbul ignore next */
        cov_2ak5to38u2().s[57]++;
        months.push(date.toISOString().slice(0, 7));
      }
      const snapshot =
      /* istanbul ignore next */
      (cov_2ak5to38u2().s[58]++, await this.firestore.collection('usage').doc('theirstackCredits').collection('monthly').where('month', 'in', months).get());
      let totalCredits =
      /* istanbul ignore next */
      (cov_2ak5to38u2().s[59]++, 0);
      let monthsWithData =
      /* istanbul ignore next */
      (cov_2ak5to38u2().s[60]++, 0);
      /* istanbul ignore next */
      cov_2ak5to38u2().s[61]++;
      snapshot.docs.forEach(doc => {
        /* istanbul ignore next */
        cov_2ak5to38u2().f[9]++;
        var _a;
        const credits =
        /* istanbul ignore next */
        (cov_2ak5to38u2().s[62]++,
        /* istanbul ignore next */
        (cov_2ak5to38u2().b[20][0]++,
        /* istanbul ignore next */
        (cov_2ak5to38u2().b[22][0]++, (_a = doc.data()) === null) ||
        /* istanbul ignore next */
        (cov_2ak5to38u2().b[22][1]++, _a === void 0) ?
        /* istanbul ignore next */
        (cov_2ak5to38u2().b[21][0]++, void 0) :
        /* istanbul ignore next */
        (cov_2ak5to38u2().b[21][1]++, _a.creditsUsed)) ||
        /* istanbul ignore next */
        (cov_2ak5to38u2().b[20][1]++, 0));
        /* istanbul ignore next */
        cov_2ak5to38u2().s[63]++;
        if (credits > 0) {
          /* istanbul ignore next */
          cov_2ak5to38u2().b[23][0]++;
          cov_2ak5to38u2().s[64]++;
          totalCredits += credits;
          /* istanbul ignore next */
          cov_2ak5to38u2().s[65]++;
          monthsWithData++;
        } else
        /* istanbul ignore next */
        {
          cov_2ak5to38u2().b[23][1]++;
        }
      });
      /* istanbul ignore next */
      cov_2ak5to38u2().s[66]++;
      return monthsWithData > 0 ?
      /* istanbul ignore next */
      (cov_2ak5to38u2().b[24][0]++, Math.round(totalCredits / monthsWithData)) :
      /* istanbul ignore next */
      (cov_2ak5to38u2().b[24][1]++, 0);
    } catch (error) {
      /* istanbul ignore next */
      cov_2ak5to38u2().s[67]++;
      console.error('❌ Failed to get average monthly credits:', error);
      /* istanbul ignore next */
      cov_2ak5to38u2().s[68]++;
      return 0;
    }
  }
  /**
   * Check if credits are approaching limits and return alert level
   */
  getCreditAlertLevel(creditsUsed) {
    /* istanbul ignore next */
    cov_2ak5to38u2().f[10]++;
    cov_2ak5to38u2().s[69]++;
    if (creditsUsed >= TheirStackCreditsService.EMERGENCY_LIMIT) {
      /* istanbul ignore next */
      cov_2ak5to38u2().b[25][0]++;
      cov_2ak5to38u2().s[70]++;
      return 'emergency';
    } else {
      /* istanbul ignore next */
      cov_2ak5to38u2().b[25][1]++;
      cov_2ak5to38u2().s[71]++;
      if (creditsUsed >= TheirStackCreditsService.FREE_TIER_LIMIT) {
        /* istanbul ignore next */
        cov_2ak5to38u2().b[26][0]++;
        cov_2ak5to38u2().s[72]++;
        return 'danger';
      } else {
        /* istanbul ignore next */
        cov_2ak5to38u2().b[26][1]++;
        cov_2ak5to38u2().s[73]++;
        if (creditsUsed >= TheirStackCreditsService.FREE_TIER_LIMIT * TheirStackCreditsService.WARNING_THRESHOLD) {
          /* istanbul ignore next */
          cov_2ak5to38u2().b[27][0]++;
          cov_2ak5to38u2().s[74]++;
          return 'warning';
        } else
        /* istanbul ignore next */
        {
          cov_2ak5to38u2().b[27][1]++;
        }
      }
    }
    /* istanbul ignore next */
    cov_2ak5to38u2().s[75]++;
    return 'none';
  }
  /**
   * Get credits health status for dashboard
   */
  async getCreditsHealthStatus() {
    /* istanbul ignore next */
    cov_2ak5to38u2().f[11]++;
    const currentCredits =
    /* istanbul ignore next */
    (cov_2ak5to38u2().s[76]++, await this.getCurrentCredits());
    const percentage =
    /* istanbul ignore next */
    (cov_2ak5to38u2().s[77]++, Math.round(currentCredits.creditsUsed / TheirStackCreditsService.FREE_TIER_LIMIT * 100));
    let status;
    let message;
    /* istanbul ignore next */
    cov_2ak5to38u2().s[78]++;
    if (currentCredits.isOverLimit) {
      /* istanbul ignore next */
      cov_2ak5to38u2().b[28][0]++;
      cov_2ak5to38u2().s[79]++;
      status = 'emergency';
      /* istanbul ignore next */
      cov_2ak5to38u2().s[80]++;
      message = `Emergency limit exceeded! ${currentCredits.creditsUsed} credits used this month.`;
    } else {
      /* istanbul ignore next */
      cov_2ak5to38u2().b[28][1]++;
      cov_2ak5to38u2().s[81]++;
      if (currentCredits.creditsUsed >= TheirStackCreditsService.FREE_TIER_LIMIT) {
        /* istanbul ignore next */
        cov_2ak5to38u2().b[29][0]++;
        cov_2ak5to38u2().s[82]++;
        status = 'critical';
        /* istanbul ignore next */
        cov_2ak5to38u2().s[83]++;
        message = `Free tier limit exceeded! ${currentCredits.creditsUsed}/${TheirStackCreditsService.FREE_TIER_LIMIT} credits used (${percentage}%).`;
      } else {
        /* istanbul ignore next */
        cov_2ak5to38u2().b[29][1]++;
        cov_2ak5to38u2().s[84]++;
        if (percentage >= 80) {
          /* istanbul ignore next */
          cov_2ak5to38u2().b[30][0]++;
          cov_2ak5to38u2().s[85]++;
          status = 'warning';
          /* istanbul ignore next */
          cov_2ak5to38u2().s[86]++;
          message = `Approaching free tier limit: ${currentCredits.creditsUsed}/${TheirStackCreditsService.FREE_TIER_LIMIT} credits used (${percentage}%).`;
        } else {
          /* istanbul ignore next */
          cov_2ak5to38u2().b[30][1]++;
          cov_2ak5to38u2().s[87]++;
          status = 'healthy';
          /* istanbul ignore next */
          cov_2ak5to38u2().s[88]++;
          message = `Credits usage is healthy: ${currentCredits.creditsUsed}/${TheirStackCreditsService.FREE_TIER_LIMIT} credits used (${percentage}%).`;
        }
      }
    }
    /* istanbul ignore next */
    cov_2ak5to38u2().s[89]++;
    return {
      status,
      message,
      creditsUsed: currentCredits.creditsUsed,
      creditsRemaining: currentCredits.creditsRemaining,
      percentage
    };
  }
  /**
   * Get historical credits data for charts (last 12 months)
   */
  async getHistoricalCreditsData() {
    /* istanbul ignore next */
    cov_2ak5to38u2().f[12]++;
    cov_2ak5to38u2().s[90]++;
    if (!this.firestore) {
      /* istanbul ignore next */
      cov_2ak5to38u2().b[31][0]++;
      cov_2ak5to38u2().s[91]++;
      await this.initializeFirestore();
    } else
    /* istanbul ignore next */
    {
      cov_2ak5to38u2().b[31][1]++;
    }
    cov_2ak5to38u2().s[92]++;
    try {
      // Get last 12 months
      const months =
      /* istanbul ignore next */
      (cov_2ak5to38u2().s[93]++, []);
      const now =
      /* istanbul ignore next */
      (cov_2ak5to38u2().s[94]++, new Date());
      /* istanbul ignore next */
      cov_2ak5to38u2().s[95]++;
      for (let i =
      /* istanbul ignore next */
      (cov_2ak5to38u2().s[96]++, 11); i >= 0; i--) {
        const date =
        /* istanbul ignore next */
        (cov_2ak5to38u2().s[97]++, new Date(now.getFullYear(), now.getMonth() - i, 1));
        /* istanbul ignore next */
        cov_2ak5to38u2().s[98]++;
        months.push(date.toISOString().slice(0, 7));
      }
      const snapshot =
      /* istanbul ignore next */
      (cov_2ak5to38u2().s[99]++, await this.firestore.collection('usage').doc('theirstackCredits').collection('monthly').where('month', 'in', months).get());
      // Create a map for quick lookup
      const dataMap =
      /* istanbul ignore next */
      (cov_2ak5to38u2().s[100]++, new Map());
      /* istanbul ignore next */
      cov_2ak5to38u2().s[101]++;
      snapshot.docs.forEach(doc => {
        /* istanbul ignore next */
        cov_2ak5to38u2().f[13]++;
        const data =
        /* istanbul ignore next */
        (cov_2ak5to38u2().s[102]++, doc.data());
        /* istanbul ignore next */
        cov_2ak5to38u2().s[103]++;
        dataMap.set(data.month,
        /* istanbul ignore next */
        (cov_2ak5to38u2().b[32][0]++, data.creditsUsed) ||
        /* istanbul ignore next */
        (cov_2ak5to38u2().b[32][1]++, 0));
      });
      // Build the historical data array
      /* istanbul ignore next */
      cov_2ak5to38u2().s[104]++;
      return months.map(month => {
        /* istanbul ignore next */
        cov_2ak5to38u2().f[14]++;
        cov_2ak5to38u2().s[105]++;
        return {
          month,
          creditsUsed:
          /* istanbul ignore next */
          (cov_2ak5to38u2().b[33][0]++, dataMap.get(month)) ||
          /* istanbul ignore next */
          (cov_2ak5to38u2().b[33][1]++, 0),
          date: new Date(`${month}-01`)
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2ak5to38u2().s[106]++;
      console.error('❌ Failed to get historical credits data:', error);
      /* istanbul ignore next */
      cov_2ak5to38u2().s[107]++;
      return [];
    }
  }
  /**
   * Helper method to get previous month string
   */
  getPreviousMonth(month) {
    /* istanbul ignore next */
    cov_2ak5to38u2().f[15]++;
    const [year, monthNum] =
    /* istanbul ignore next */
    (cov_2ak5to38u2().s[108]++, month.split('-').map(Number));
    const date =
    /* istanbul ignore next */
    (cov_2ak5to38u2().s[109]++, new Date(year, monthNum - 2, 1)); // monthNum - 2 because Date months are 0-indexed
    /* istanbul ignore next */
    cov_2ak5to38u2().s[110]++;
    return date.toISOString().slice(0, 7);
  }
  /**
   * Get credits configuration for display
   */
  static getCreditsConfiguration() {
    /* istanbul ignore next */
    cov_2ak5to38u2().f[16]++;
    cov_2ak5to38u2().s[111]++;
    return {
      freeTierLimit: TheirStackCreditsService.FREE_TIER_LIMIT,
      warningThreshold: Math.round(TheirStackCreditsService.FREE_TIER_LIMIT * TheirStackCreditsService.WARNING_THRESHOLD),
      emergencyLimit: TheirStackCreditsService.EMERGENCY_LIMIT,
      warningPercentage: TheirStackCreditsService.WARNING_THRESHOLD * 100
    };
  }
}
/* istanbul ignore next */
cov_2ak5to38u2().s[112]++;
exports.TheirStackCreditsService = TheirStackCreditsService;
// Credit limits
/* istanbul ignore next */
cov_2ak5to38u2().s[113]++;
TheirStackCreditsService.FREE_TIER_LIMIT = 200;
/* istanbul ignore next */
cov_2ak5to38u2().s[114]++;
TheirStackCreditsService.WARNING_THRESHOLD = 0.8; // 80%
/* istanbul ignore next */
cov_2ak5to38u2().s[115]++;
TheirStackCreditsService.EMERGENCY_LIMIT = 500;
// Export convenience functions
/* istanbul ignore next */
cov_2ak5to38u2().s[116]++;
exports.theirStackCreditsService = TheirStackCreditsService.getInstance();
async function getCurrentTheirStackCredits() {
  /* istanbul ignore next */
  cov_2ak5to38u2().f[17]++;
  cov_2ak5to38u2().s[117]++;
  return exports.theirStackCreditsService.getCurrentCredits();
}
async function getTheirStackCreditsSummary() {
  /* istanbul ignore next */
  cov_2ak5to38u2().f[18]++;
  cov_2ak5to38u2().s[118]++;
  return exports.theirStackCreditsService.getCreditsSummary();
}
async function getTheirStackCreditsHealth() {
  /* istanbul ignore next */
  cov_2ak5to38u2().f[19]++;
  cov_2ak5to38u2().s[119]++;
  return exports.theirStackCreditsService.getCreditsHealthStatus();
}
/* istanbul ignore next */
cov_2ak5to38u2().s[120]++;
exports.default = TheirStackCreditsService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,