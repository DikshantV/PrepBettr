{"version":3,"names":["cov_29znruqmwq","actualCoverage","s","exports","withErrorHandler","server_1","require","applicationinsights_web_1","ErrorHandler","initialize","instrumentationKey","f","b","window","appInsights","ApplicationInsights","config","enableAutoRouteTracking","loadAppInsights","handler","req","error","handleError","apiError","normalizeError","errorDetails","extractErrorDetails","logError","createErrorResponse","statusCode","isOperational","undefined","code","name","message","stack","_a","includes","_b","_c","_d","_e","_f","url","URL","headers","userId","extractUserId","jobId","extractJobId","action","pathname","requestId","get","userAgent","path","method","timestamp","Date","toISOString","sessionCookie","cookies","value","userIdHeader","pathMatch","match","searchParams","details","logData","level","properties","errorName","errorCode","exception","console","JSON","stringify","trackException","severityLevel","trackMetric","average","sampleCount","toString","response","process","env","NODE_ENV","originalMessage","NextResponse","json","status","createOperationalError","createProgrammingError","originalError"],"sources":["/Users/dikshantvashistha/PrepBettr/lib/middleware/error-handler.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { ApplicationInsights } from '@microsoft/applicationinsights-web';\n\nexport interface ErrorDetails {\n  userId?: string;\n  jobId?: string;\n  action?: string;\n  requestId?: string;\n  userAgent?: string;\n  path?: string;\n  method?: string;\n  statusCode?: number;\n  stack?: string;\n  timestamp: string;\n}\n\nexport interface ApiError extends Error {\n  statusCode?: number;\n  code?: string;\n  isOperational?: boolean;\n}\n\nexport class ErrorHandler {\n  private static appInsights?: ApplicationInsights;\n\n  static initialize(instrumentationKey?: string) {\n    if (instrumentationKey && typeof window !== 'undefined') {\n      this.appInsights = new ApplicationInsights({\n        config: {\n          instrumentationKey,\n          enableAutoRouteTracking: false,\n        }\n      });\n      this.appInsights.loadAppInsights();\n    }\n  }\n\n  /**\n   * Global error handler middleware for Next.js API routes\n   */\n  static withErrorHandler(\n    handler: (req: NextRequest) => Promise<NextResponse>\n  ) {\n    return async (req: NextRequest): Promise<NextResponse> => {\n      try {\n        return await handler(req);\n      } catch (error) {\n        return this.handleError(error, req);\n      }\n    };\n  }\n\n  /**\n   * Handle and log errors with structured logging\n   */\n  static handleError(error: any, req?: NextRequest): NextResponse {\n    const apiError = this.normalizeError(error);\n    const errorDetails = this.extractErrorDetails(apiError, req);\n\n    // Log the error\n    this.logError(apiError, errorDetails);\n\n    // Return appropriate response\n    return this.createErrorResponse(apiError, errorDetails);\n  }\n\n  /**\n   * Normalize different error types to ApiError\n   */\n  private static normalizeError(error: any): ApiError {\n    // Already an ApiError\n    if (error.statusCode && error.isOperational !== undefined) {\n      return error;\n    }\n\n    // Network/HTTP errors\n    if (error.code === 'ECONNRESET' || error.code === 'ENOTFOUND') {\n      return {\n        name: 'NetworkError',\n        message: 'Network connection failed',\n        statusCode: 503,\n        code: error.code,\n        isOperational: true,\n        stack: error.stack\n      };\n    }\n\n    // Validation errors\n    if (error.name === 'ValidationError' || error.name === 'ZodError') {\n      return {\n        name: 'ValidationError',\n        message: error.message || 'Validation failed',\n        statusCode: 400,\n        code: 'VALIDATION_ERROR',\n        isOperational: true,\n        stack: error.stack\n      };\n    }\n\n    // Authentication errors\n    if (error.message?.includes('unauthorized') || error.message?.includes('token')) {\n      return {\n        name: 'AuthenticationError',\n        message: 'Authentication failed',\n        statusCode: 401,\n        code: 'AUTH_ERROR',\n        isOperational: true,\n        stack: error.stack\n      };\n    }\n\n    // Rate limiting errors\n    if (error.message?.includes('rate limit') || error.message?.includes('throttled')) {\n      return {\n        name: 'RateLimitError',\n        message: 'Rate limit exceeded',\n        statusCode: 429,\n        code: 'RATE_LIMIT_ERROR',\n        isOperational: true,\n        stack: error.stack\n      };\n    }\n\n    // External service errors (Azure OpenAI, etc.)\n    if (error.message?.includes('Azure OpenAI') || error.message?.includes('OpenAI')) {\n      return {\n        name: 'ExternalServiceError',\n        message: 'External AI service error',\n        statusCode: 502,\n        code: 'AI_SERVICE_ERROR',\n        isOperational: true,\n        stack: error.stack\n      };\n    }\n\n    // Default to internal server error\n    return {\n      name: error.name || 'InternalError',\n      message: error.message || 'An internal server error occurred',\n      statusCode: 500,\n      code: 'INTERNAL_ERROR',\n      isOperational: false,\n      stack: error.stack\n    };\n  }\n\n  /**\n   * Extract error details from request and error\n   */\n  private static extractErrorDetails(error: ApiError, req?: NextRequest): ErrorDetails {\n    const url = req?.url ? new URL(req.url) : undefined;\n    const headers = req?.headers;\n\n    return {\n      userId: this.extractUserId(req),\n      jobId: this.extractJobId(req),\n      action: url?.pathname || 'unknown',\n      requestId: headers?.get('x-request-id') || undefined,\n      userAgent: headers?.get('user-agent') || undefined,\n      path: url?.pathname || undefined,\n      method: req?.method || undefined,\n      statusCode: error.statusCode || 500,\n      stack: error.stack,\n      timestamp: new Date().toISOString()\n    };\n  }\n\n  /**\n   * Extract user ID from request (cookies, headers, or body)\n   */\n  private static extractUserId(req?: NextRequest): string | undefined {\n    if (!req) return undefined;\n\n    // Try to get from cookies first\n    const sessionCookie = req.cookies.get('session')?.value;\n    if (sessionCookie) {\n      try {\n        // In a real implementation, you'd decode the session token\n        // For now, we'll just note that there's a session\n        return 'user_from_session';\n      } catch {\n        // Failed to decode session\n      }\n    }\n\n    // Try to get from headers\n    const userIdHeader = req.headers.get('x-user-id');\n    if (userIdHeader) {\n      return userIdHeader;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Extract job ID from request path or body\n   */\n  private static extractJobId(req?: NextRequest): string | undefined {\n    if (!req) return undefined;\n\n    const url = req.url ? new URL(req.url) : undefined;\n    \n    // Try to extract from path\n    const pathMatch = url?.pathname.match(/\\/jobs\\/([^\\/]+)/);\n    if (pathMatch) {\n      return pathMatch[1];\n    }\n\n    // Try to extract from query parameters\n    const jobId = url?.searchParams.get('jobId');\n    if (jobId) {\n      return jobId;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Log error with structured logging\n   */\n  private static logError(error: ApiError, details: ErrorDetails): void {\n    const logData = {\n      level: 'error',\n      message: `API Error: ${error.message}`,\n      properties: {\n        errorName: error.name,\n        errorCode: error.code,\n        statusCode: error.statusCode,\n        isOperational: error.isOperational,\n        userId: details.userId,\n        jobId: details.jobId,\n        action: details.action,\n        requestId: details.requestId,\n        userAgent: details.userAgent,\n        path: details.path,\n        method: details.method,\n        timestamp: details.timestamp\n      },\n      exception: {\n        message: error.message,\n        stack: error.stack,\n        name: error.name\n      }\n    };\n\n    // Log to console with structured format\n    console.error('API_ERROR', JSON.stringify(logData));\n\n    // Send to Application Insights if available\n    if (this.appInsights) {\n      this.appInsights.trackException({\n        exception: error,\n        properties: logData.properties,\n        severityLevel: error.isOperational ? 2 : 3 // Warning for operational, Error for programming errors\n      });\n\n      // Track custom metric for error rates\n      this.appInsights.trackMetric({\n        name: 'ApiError',\n        average: 1,\n        sampleCount: 1,\n        properties: {\n          errorCode: error.code || 'unknown',\n          statusCode: error.statusCode?.toString() || '500',\n          action: details.action || 'unknown'\n        }\n      });\n    }\n  }\n\n  /**\n   * Create appropriate error response\n   */\n  private static createErrorResponse(error: ApiError, details: ErrorDetails): NextResponse {\n    const response: {\n      error: {\n        message: string;\n        code: string;\n        timestamp: string;\n        requestId: string | undefined;\n        details?: {\n          stack?: string;\n          originalMessage: string;\n        };\n      };\n    } = {\n      error: {\n        message: error.isOperational ? error.message : 'An internal server error occurred',\n        code: error.code || 'INTERNAL_ERROR',\n        timestamp: details.timestamp,\n        requestId: details.requestId\n      }\n    };\n\n    // Don't expose internal error details in production\n    if (process.env.NODE_ENV !== 'production' && !error.isOperational) {\n      response.error.details = {\n        stack: error.stack,\n        originalMessage: error.message\n      };\n    }\n\n    return NextResponse.json(\n      response,\n      {\n        status: error.statusCode || 500,\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Request-ID': details.requestId || 'unknown'\n        }\n      }\n    );\n  }\n\n  /**\n   * Create an operational error (expected errors)\n   */\n  static createOperationalError(message: string, statusCode: number = 400, code?: string): ApiError {\n    return {\n      name: 'OperationalError',\n      message,\n      statusCode,\n      code: code || 'OPERATIONAL_ERROR',\n      isOperational: true\n    };\n  }\n\n  /**\n   * Create a programming error (unexpected errors)\n   */\n  static createProgrammingError(message: string, originalError?: Error): ApiError {\n    return {\n      name: 'ProgrammingError',\n      message,\n      statusCode: 500,\n      code: 'PROGRAMMING_ERROR',\n      isOperational: false,\n      stack: originalError?.stack\n    };\n  }\n}\n\n// Convenience function for wrapping API handlers\nexport function withErrorHandler(\n  handler: (req: NextRequest) => Promise<NextResponse>\n) {\n  return ErrorHandler.withErrorHandler(handler);\n}\n\n// Convenience functions for creating errors\nexport const createOperationalError = ErrorHandler.createOperationalError;\nexport const createProgrammingError = ErrorHandler.createProgrammingError;\n"],"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","ignoreList":[]}