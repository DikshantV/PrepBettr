{"file":"/Users/dikshantvashistha/PrepBettr/tests/theirstack-portal.test.ts","mappings":"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","names":[],"sources":["/Users/dikshantvashistha/PrepBettr/tests/theirstack-portal.test.ts"],"sourcesContent":["import nock from 'nock';\nimport { TheirStackPortal } from '../portals/theirstack';\nimport { JobSearchFilters } from '../types/auto-apply';\n\n// Mock Firestore admin\njest.mock('../lib/firebase/admin', () => ({\n  getAdminFirestore: jest.fn(() => Promise.resolve({\n    collection: jest.fn(() => ({\n      doc: jest.fn(() => ({\n        collection: jest.fn(() => ({\n          doc: jest.fn(() => ({\n            set: jest.fn(),\n            get: jest.fn(() => Promise.resolve({\n              exists: false,\n              data: () => null\n            }))\n          }))\n        }))\n      }))\n    })),\n    FieldValue: {\n      increment: jest.fn((value) => ({ _increment: value }))\n    }\n  }))\n}));\n\ndescribe('TheirStack Portal Integration', () => {\n  let theirStackPortal: TheirStackPortal;\n  const mockApiKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test';\n  \n  beforeAll(() => {\n    // Set up environment\n    process.env.THEIRSTACK_API_KEY = mockApiKey;\n  });\n\n  beforeEach(() => {\n    theirStackPortal = new TheirStackPortal();\n    nock.cleanAll();\n  });\n\n  afterAll(() => {\n    delete process.env.THEIRSTACK_API_KEY;\n    nock.cleanAll();\n  });\n\n  describe('Configuration', () => {\n    it('should detect when TheirStack is properly configured', () => {\n      expect(theirStackPortal.isConfigured()).toBe(true);\n    });\n\n    it('should detect when TheirStack is not configured', () => {\n      delete process.env.THEIRSTACK_API_KEY;\n      const portal = new TheirStackPortal();\n      expect(portal.isConfigured()).toBe(false);\n      process.env.THEIRSTACK_API_KEY = mockApiKey; // Restore\n    });\n  });\n\n  describe('Job Search', () => {\n    const mockUserId = 'test-user-123';\n    const mockFilters: JobSearchFilters = {\n      keywords: ['React', 'TypeScript'],\n      locations: ['Remote', 'San Francisco'],\n      jobTypes: ['full-time'],\n      workArrangements: ['remote'],\n      experienceLevel: ['mid-senior'],\n      companySize: ['medium', 'large'],\n      datePosted: 'past-week',\n      portals: ['TheirStack'],\n      minimumRelevancyScore: 70\n    };\n\n    const mockTheirStackResponse = {\n      jobs: [\n        {\n          id: 'theirstack-job-1',\n          title: 'Senior React Developer',\n          company: {\n            name: 'TechCorp',\n            logo: 'https://example.com/logo.png',\n            size: 'medium',\n            location: 'San Francisco, CA'\n          },\n          location: 'San Francisco, CA (Remote OK)',\n          salary: {\n            min: 120000,\n            max: 160000,\n            currency: 'USD',\n            period: 'yearly'\n          },\n          jobType: 'full-time',\n          workArrangement: 'remote',\n          description: 'We are looking for a skilled React developer to join our team.',\n          requirements: ['React', 'TypeScript', 'JavaScript', 'Git'],\n          responsibilities: ['Build UI components', 'Collaborate with designers'],\n          benefits: ['Health insurance', 'Remote work', '401k'],\n          postedDate: '2025-01-20T10:00:00Z',\n          originalUrl: 'https://theirstack.com/jobs/theirstack-job-1'\n        },\n        {\n          id: 'theirstack-job-2',\n          title: 'Full Stack Engineer',\n          company: {\n            name: 'StartupXYZ',\n            size: 'small',\n            location: 'Remote'\n          },\n          location: 'Remote',\n          jobType: 'full-time',\n          workArrangement: 'remote',\n          description: 'Join our growing team to build web applications.',\n          requirements: ['React', 'Node.js', 'MongoDB'],\n          responsibilities: ['Develop features', 'Code reviews'],\n          postedDate: '2025-01-19T15:30:00Z',\n          originalUrl: 'https://theirstack.com/jobs/theirstack-job-2'\n        }\n      ],\n      totalCount: 2,\n      page: 1,\n      limit: 50,\n      hasMore: false\n    };\n\n    it('should successfully search for jobs and transform them to JobListing format', async () => {\n      // Mock the TheirStack API\n      nock('https://api.theirstack.com')\n        .post('/v1/jobs/search', {\n          filters: {\n            keywords: mockFilters.keywords,\n            locations: mockFilters.locations,\n            jobTypes: mockFilters.jobTypes,\n            workArrangements: mockFilters.workArrangements,\n            experienceLevel: mockFilters.experienceLevel,\n            companySize: mockFilters.companySize,\n            datePosted: mockFilters.datePosted\n          },\n          page: 1,\n          limit: 50\n        })\n        .reply(200, mockTheirStackResponse);\n\n      const result = await theirStackPortal.searchJobs(mockUserId, mockFilters);\n\n      expect(result).toHaveLength(2);\n      \n      // Check first job transformation\n      expect(result[0]).toMatchObject({\n        id: 'theirstack-job-1',\n        title: 'Senior React Developer',\n        company: 'TechCorp',\n        location: 'San Francisco, CA (Remote OK)',\n        salary: {\n          min: 120000,\n          max: 160000,\n          currency: 'USD',\n          period: 'yearly'\n        },\n        jobType: 'full-time',\n        workArrangement: 'remote',\n        description: 'We are looking for a skilled React developer to join our team.',\n        requirements: ['React', 'TypeScript', 'JavaScript', 'Git'],\n        jobPortal: {\n          name: 'TheirStack',\n          logo: '/icons/theirstack.svg',\n          website: 'https://theirstack.com',\n          supportsAutoApply: true\n        },\n        applicationStatus: 'discovered'\n      });\n\n      // Check second job transformation\n      expect(result[1]).toMatchObject({\n        id: 'theirstack-job-2',\n        title: 'Full Stack Engineer',\n        company: 'StartupXYZ',\n        location: 'Remote',\n        jobType: 'full-time',\n        workArrangement: 'remote'\n      });\n    });\n\n    it('should handle API errors gracefully', async () => {\n      nock('https://api.theirstack.com')\n        .post('/v1/jobs/search')\n        .reply(500, { error: 'Internal server error' });\n\n      await expect(\n        theirStackPortal.searchJobs(mockUserId, mockFilters)\n      ).rejects.toThrow('TheirStack API error: 500 Internal Server Error');\n    });\n\n    it('should handle rate limiting errors', async () => {\n      nock('https://api.theirstack.com')\n        .post('/v1/jobs/search')\n        .reply(429, { error: 'Too many requests' });\n\n      await expect(\n        theirStackPortal.searchJobs(mockUserId, mockFilters)\n      ).rejects.toThrow('TheirStack API error: 429 Too Many Requests');\n    });\n\n    it('should throw error when API key is not configured', async () => {\n      delete process.env.THEIRSTACK_API_KEY;\n      const portal = new TheirStackPortal();\n\n      await expect(\n        portal.searchJobs(mockUserId, mockFilters)\n      ).rejects.toThrow('TheirStack API key not configured');\n\n      process.env.THEIRSTACK_API_KEY = mockApiKey; // Restore\n    });\n  });\n\n  describe('Job Type Mapping', () => {\n    it('should correctly map TheirStack job types to our format', () => {\n      const portal = new TheirStackPortal();\n      \n      // Access private method through any cast for testing\n      const mapJobType = (portal as any).mapJobTypeToOur.bind(portal);\n      \n      expect(mapJobType('full-time')).toBe('full-time');\n      expect(mapJobType('fulltime')).toBe('full-time');\n      expect(mapJobType('part-time')).toBe('part-time');\n      expect(mapJobType('contract')).toBe('contract');\n      expect(mapJobType('internship')).toBe('internship');\n      expect(mapJobType('unknown')).toBe('full-time'); // default\n    });\n  });\n\n  describe('Work Arrangement Mapping', () => {\n    it('should correctly map TheirStack work arrangements to our format', () => {\n      const portal = new TheirStackPortal();\n      \n      // Access private method through any cast for testing\n      const mapWorkArrangement = (portal as any).mapWorkArrangementToOur.bind(portal);\n      \n      expect(mapWorkArrangement('remote')).toBe('remote');\n      expect(mapWorkArrangement('hybrid')).toBe('hybrid');\n      expect(mapWorkArrangement('onsite')).toBe('onsite');\n      expect(mapWorkArrangement('on-site')).toBe('onsite');\n      expect(mapWorkArrangement('office')).toBe('onsite');\n      expect(mapWorkArrangement('unknown')).toBe('onsite'); // default\n    });\n  });\n\n  describe('Credit Tracking', () => {\n    it('should track credits when jobs are returned', async () => {\n      const mockResponse = {\n        jobs: [\n          {\n            id: 'test-1',\n            title: 'Test Job 1',\n            company: { name: 'Test Company' },\n            location: 'Test Location',\n            jobType: 'full-time',\n            workArrangement: 'remote',\n            description: 'Test description',\n            requirements: [],\n            responsibilities: [],\n            postedDate: '2025-01-20T10:00:00Z',\n            originalUrl: 'https://theirstack.com/jobs/test-1'\n          },\n          {\n            id: 'test-2',\n            title: 'Test Job 2',\n            company: { name: 'Test Company' },\n            location: 'Test Location',\n            jobType: 'full-time',\n            workArrangement: 'remote',\n            description: 'Test description',\n            requirements: [],\n            responsibilities: [],\n            postedDate: '2025-01-20T10:00:00Z',\n            originalUrl: 'https://theirstack.com/jobs/test-2'\n          },\n          {\n            id: 'test-3',\n            title: 'Test Job 3',\n            company: { name: 'Test Company' },\n            location: 'Test Location',\n            jobType: 'full-time',\n            workArrangement: 'remote',\n            description: 'Test description',\n            requirements: [],\n            responsibilities: [],\n            postedDate: '2025-01-20T10:00:00Z',\n            originalUrl: 'https://theirstack.com/jobs/test-3'\n          }\n        ],\n        totalCount: 3,\n        page: 1,\n        limit: 50,\n        hasMore: false\n      };\n\n      nock('https://api.theirstack.com')\n        .post('/v1/jobs/search')\n        .reply(200, mockResponse);\n\n      // Create new mocks for this test\n      const mockSet = jest.fn().mockResolvedValue(undefined);\n      const mockGet = jest.fn().mockResolvedValue({\n        exists: true,\n        data: () => ({ creditsUsed: 5 }) // Mock existing credits\n      });\n      \n      // Override the module mock for this test\n      const { getAdminFirestore } = require('../lib/firebase/admin');\n      (getAdminFirestore as jest.Mock).mockResolvedValueOnce({\n        collection: jest.fn(() => ({\n          doc: jest.fn(() => ({\n            collection: jest.fn(() => ({\n              doc: jest.fn(() => ({\n                set: mockSet,\n                get: mockGet\n              }))\n            }))\n          }))\n        })),\n        FieldValue: {\n          increment: jest.fn((value) => ({ _increment: value }))\n        }\n      });\n\n      const result = await theirStackPortal.searchJobs('test-user', {\n        keywords: ['test'],\n        locations: [],\n        jobTypes: [],\n        workArrangements: [],\n        experienceLevel: [],\n        companySize: [],\n        datePosted: 'any',\n        portals: [],\n        minimumRelevancyScore: 0\n      });\n\n      expect(result).toHaveLength(3);\n      expect(mockSet).toHaveBeenCalled();\n    });\n  });\n\n  describe('Health Check', () => {\n    it('should return healthy status when API is accessible', async () => {\n      nock('https://api.theirstack.com')\n        .get('/v1/health')\n        .reply(200, { status: 'ok' });\n\n      const health = await theirStackPortal.healthCheck();\n      \n      expect(health.healthy).toBe(true);\n      expect(health.message).toBe('TheirStack API accessible');\n    });\n\n    it('should return unhealthy status when API is not accessible', async () => {\n      nock('https://api.theirstack.com')\n        .get('/v1/health')\n        .reply(500);\n\n      const health = await theirStackPortal.healthCheck();\n      \n      expect(health.healthy).toBe(false);\n      expect(health.message).toContain('HTTP 500');\n    });\n\n    it('should return unhealthy status when API key is not configured', async () => {\n      delete process.env.THEIRSTACK_API_KEY;\n      const portal = new TheirStackPortal();\n      \n      const health = await portal.healthCheck();\n      \n      expect(health.healthy).toBe(false);\n      expect(health.message).toBe('TheirStack API key not configured');\n      \n      process.env.THEIRSTACK_API_KEY = mockApiKey; // Restore\n    });\n  });\n});\n\ndescribe('TheirStack Credits Service Integration', () => {\n  beforeAll(() => {\n    process.env.THEIRSTACK_API_KEY = 'test-key';\n  });\n\n  afterAll(() => {\n    delete process.env.THEIRSTACK_API_KEY;\n  });\n\n  it('should be importable', () => {\n    const { getCurrentTheirStackCredits, getTheirStackCreditsSummary } = require('../lib/services/theirstack-credits');\n    \n    expect(typeof getCurrentTheirStackCredits).toBe('function');\n    expect(typeof getTheirStackCreditsSummary).toBe('function');\n  });\n});\n"],"version":3}