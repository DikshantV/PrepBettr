7efda8766688b1779d90752f811a7a86
/* istanbul ignore next */
function cov_4how1h5ve() {
  var path = "/Users/dikshantvashistha/PrepBettr/azure/test-functions.js";
  var hash = "a0d4ebddca4c40c41a738878b8502309ddc71525";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/azure/test-functions.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 14
        },
        end: {
          line: 1,
          column: 30
        }
      },
      "1": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 79
        }
      },
      "2": {
        start: {
          line: 5,
          column: 27
        },
        end: {
          line: 5,
          column: 57
        }
      },
      "3": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 10,
          column: 1
        }
      },
      "4": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 74
        }
      },
      "5": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 9,
          column: 20
        }
      },
      "6": {
        start: {
          line: 12,
          column: 26
        },
        end: {
          line: 12,
          column: 79
        }
      },
      "7": {
        start: {
          line: 15,
          column: 17
        },
        end: {
          line: 29,
          column: 1
        }
      },
      "8": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 72,
          column: 7
        }
      },
      "9": {
        start: {
          line: 33,
          column: 25
        },
        end: {
          line: 33,
          column: 45
        }
      },
      "10": {
        start: {
          line: 35,
          column: 24
        },
        end: {
          line: 41,
          column: 9
        }
      },
      "11": {
        start: {
          line: 43,
          column: 20
        },
        end: {
          line: 64,
          column: 10
        }
      },
      "12": {
        start: {
          line: 44,
          column: 31
        },
        end: {
          line: 44,
          column: 33
        }
      },
      "13": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 48,
          column: 15
        }
      },
      "14": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 47,
          column: 38
        }
      },
      "15": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 63,
          column: 15
        }
      },
      "16": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 62,
          column: 17
        }
      },
      "17": {
        start: {
          line: 52,
          column: 39
        },
        end: {
          line: 52,
          column: 63
        }
      },
      "18": {
        start: {
          line: 53,
          column: 20
        },
        end: {
          line: 56,
          column: 23
        }
      },
      "19": {
        start: {
          line: 58,
          column: 20
        },
        end: {
          line: 61,
          column: 23
        }
      },
      "20": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 68,
          column: 11
        }
      },
      "21": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 26
        }
      },
      "22": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 28
        }
      },
      "23": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 18
        }
      },
      "24": {
        start: {
          line: 76,
          column: 4
        },
        end: {
          line: 76,
          column: 51
        }
      },
      "25": {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 124,
          column: 5
        }
      },
      "26": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 53
        }
      },
      "27": {
        start: {
          line: 81,
          column: 31
        },
        end: {
          line: 81,
          column: 84
        }
      },
      "28": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 59
        }
      },
      "29": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 82
        }
      },
      "30": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 24
        }
      },
      "31": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 56
        }
      },
      "32": {
        start: {
          line: 88,
          column: 30
        },
        end: {
          line: 88,
          column: 82
        }
      },
      "33": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 58
        }
      },
      "34": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 81
        }
      },
      "35": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 24
        }
      },
      "36": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 118,
          column: 9
        }
      },
      "37": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 63
        }
      },
      "38": {
        start: {
          line: 96,
          column: 32
        },
        end: {
          line: 100,
          column: 13
        }
      },
      "39": {
        start: {
          line: 102,
          column: 36
        },
        end: {
          line: 102,
          column: 85
        }
      },
      "40": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 64
        }
      },
      "41": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 87
        }
      },
      "42": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 28
        }
      },
      "43": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 59
        }
      },
      "44": {
        start: {
          line: 109,
          column: 32
        },
        end: {
          line: 112,
          column: 13
        }
      },
      "45": {
        start: {
          line: 114,
          column: 36
        },
        end: {
          line: 114,
          column: 85
        }
      },
      "46": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 64
        }
      },
      "47": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 87
        }
      },
      "48": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 28
        }
      },
      "49": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 120,
          column: 51
        }
      },
      "50": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 123,
          column: 47
        }
      },
      "51": {
        start: {
          line: 128,
          column: 0
        },
        end: {
          line: 128,
          column: 16
        }
      }
    },
    fnMap: {
      "0": {
        name: "makeRequest",
        decl: {
          start: {
            line: 31,
            column: 9
          },
          end: {
            line: 31,
            column: 20
          }
        },
        loc: {
          start: {
            line: 31,
            column: 32
          },
          end: {
            line: 73,
            column: 1
          }
        },
        line: 31
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 32,
            column: 23
          },
          end: {
            line: 32,
            column: 24
          }
        },
        loc: {
          start: {
            line: 32,
            column: 44
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 32
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 43,
            column: 48
          },
          end: {
            line: 43,
            column: 49
          }
        },
        loc: {
          start: {
            line: 43,
            column: 57
          },
          end: {
            line: 64,
            column: 9
          }
        },
        line: 43
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 46,
            column: 27
          },
          end: {
            line: 46,
            column: 28
          }
        },
        loc: {
          start: {
            line: 46,
            column: 38
          },
          end: {
            line: 48,
            column: 13
          }
        },
        line: 46
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 50,
            column: 26
          },
          end: {
            line: 50,
            column: 27
          }
        },
        loc: {
          start: {
            line: 50,
            column: 32
          },
          end: {
            line: 63,
            column: 13
          }
        },
        line: 50
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 66,
            column: 24
          },
          end: {
            line: 66,
            column: 25
          }
        },
        loc: {
          start: {
            line: 66,
            column: 35
          },
          end: {
            line: 68,
            column: 9
          }
        },
        line: 66
      },
      "6": {
        name: "testFunctions",
        decl: {
          start: {
            line: 75,
            column: 15
          },
          end: {
            line: 75,
            column: 28
          }
        },
        loc: {
          start: {
            line: 75,
            column: 31
          },
          end: {
            line: 125,
            column: 1
          }
        },
        line: 75
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 7,
            column: 0
          },
          end: {
            line: 10,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 7,
            column: 0
          },
          end: {
            line: 10,
            column: 1
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 7
      },
      "1": {
        loc: {
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 118,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 118,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "2": {
        loc: {
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 93,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 93,
            column: 30
          }
        }, {
          start: {
            line: 93,
            column: 34
          },
          end: {
            line: 93,
            column: 62
          }
        }],
        line: 93
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    inputSourceMap: null,
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a0d4ebddca4c40c41a738878b8502309ddc71525"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_4how1h5ve = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_4how1h5ve();
const https =
/* istanbul ignore next */
(cov_4how1h5ve().s[0]++, require('https'));

// Azure Function URLs
const BASE_URL =
/* istanbul ignore next */
(cov_4how1h5ve().s[1]++, 'https://prepbettr-voiceagent-functions.azurewebsites.net/api');
const AZURE_FUNCTION_KEY =
/* istanbul ignore next */
(cov_4how1h5ve().s[2]++, process.env.AZURE_FUNCTION_KEY);
/* istanbul ignore next */
cov_4how1h5ve().s[3]++;
if (!AZURE_FUNCTION_KEY) {
  /* istanbul ignore next */
  cov_4how1h5ve().b[0][0]++;
  cov_4how1h5ve().s[4]++;
  console.error('❌ AZURE_FUNCTION_KEY environment variable is not set');
  /* istanbul ignore next */
  cov_4how1h5ve().s[5]++;
  process.exit(1);
} else
/* istanbul ignore next */
{
  cov_4how1h5ve().b[0][1]++;
}
const VOICE_SERVICE_URL =
/* istanbul ignore next */
(cov_4how1h5ve().s[6]++, `${BASE_URL}/httptrigger1?code=${AZURE_FUNCTION_KEY}`);

// Test data
const testData =
/* istanbul ignore next */
(cov_4how1h5ve().s[7]++, {
  start: {
    action: 'start',
    interviewContext: {
      type: 'technical',
      position: 'Software Engineer',
      company: 'PrepBettr',
      difficulty: 'medium'
    },
    userId: 'test-user-123'
  },
  status: {
    action: 'status'
  }
});
function makeRequest(url, data) {
  /* istanbul ignore next */
  cov_4how1h5ve().f[0]++;
  cov_4how1h5ve().s[8]++;
  return new Promise((resolve, reject) => {
    /* istanbul ignore next */
    cov_4how1h5ve().f[1]++;
    const postData =
    /* istanbul ignore next */
    (cov_4how1h5ve().s[9]++, JSON.stringify(data));
    const options =
    /* istanbul ignore next */
    (cov_4how1h5ve().s[10]++, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(postData)
      }
    });
    const req =
    /* istanbul ignore next */
    (cov_4how1h5ve().s[11]++, https.request(url, options, res => {
      /* istanbul ignore next */
      cov_4how1h5ve().f[2]++;
      let responseData =
      /* istanbul ignore next */
      (cov_4how1h5ve().s[12]++, '');
      /* istanbul ignore next */
      cov_4how1h5ve().s[13]++;
      res.on('data', chunk => {
        /* istanbul ignore next */
        cov_4how1h5ve().f[3]++;
        cov_4how1h5ve().s[14]++;
        responseData += chunk;
      });
      /* istanbul ignore next */
      cov_4how1h5ve().s[15]++;
      res.on('end', () => {
        /* istanbul ignore next */
        cov_4how1h5ve().f[4]++;
        cov_4how1h5ve().s[16]++;
        try {
          const parsedData =
          /* istanbul ignore next */
          (cov_4how1h5ve().s[17]++, JSON.parse(responseData));
          /* istanbul ignore next */
          cov_4how1h5ve().s[18]++;
          resolve({
            status: res.statusCode,
            data: parsedData
          });
        } catch (error) {
          /* istanbul ignore next */
          cov_4how1h5ve().s[19]++;
          resolve({
            status: res.statusCode,
            data: responseData
          });
        }
      });
    }));
    /* istanbul ignore next */
    cov_4how1h5ve().s[20]++;
    req.on('error', error => {
      /* istanbul ignore next */
      cov_4how1h5ve().f[5]++;
      cov_4how1h5ve().s[21]++;
      reject(error);
    });
    /* istanbul ignore next */
    cov_4how1h5ve().s[22]++;
    req.write(postData);
    /* istanbul ignore next */
    cov_4how1h5ve().s[23]++;
    req.end();
  });
}
async function testFunctions() {
  /* istanbul ignore next */
  cov_4how1h5ve().f[6]++;
  cov_4how1h5ve().s[24]++;
  console.log('🧪 Testing Azure Functions...\n');
  /* istanbul ignore next */
  cov_4how1h5ve().s[25]++;
  try {
    /* istanbul ignore next */
    cov_4how1h5ve().s[26]++;
    // Test 1: Status check
    console.log('1. Testing status endpoint...');
    const statusResponse =
    /* istanbul ignore next */
    (cov_4how1h5ve().s[27]++, await makeRequest(VOICE_SERVICE_URL, testData.status));
    /* istanbul ignore next */
    cov_4how1h5ve().s[28]++;
    console.log(`   Status: ${statusResponse.status}`);
    /* istanbul ignore next */
    cov_4how1h5ve().s[29]++;
    console.log(`   Response:`, JSON.stringify(statusResponse.data, null, 2));
    /* istanbul ignore next */
    cov_4how1h5ve().s[30]++;
    console.log('');

    // Test 2: Start conversation
    /* istanbul ignore next */
    cov_4how1h5ve().s[31]++;
    console.log('2. Testing start conversation...');
    const startResponse =
    /* istanbul ignore next */
    (cov_4how1h5ve().s[32]++, await makeRequest(VOICE_SERVICE_URL, testData.start));
    /* istanbul ignore next */
    cov_4how1h5ve().s[33]++;
    console.log(`   Status: ${startResponse.status}`);
    /* istanbul ignore next */
    cov_4how1h5ve().s[34]++;
    console.log(`   Response:`, JSON.stringify(startResponse.data, null, 2));
    /* istanbul ignore next */
    cov_4how1h5ve().s[35]++;
    console.log('');
    /* istanbul ignore next */
    cov_4how1h5ve().s[36]++;
    if (
    /* istanbul ignore next */
    (cov_4how1h5ve().b[2][0]++, startResponse.data) &&
    /* istanbul ignore next */
    (cov_4how1h5ve().b[2][1]++, startResponse.data.sessionId)) {
      /* istanbul ignore next */
      cov_4how1h5ve().b[1][0]++;
      cov_4how1h5ve().s[37]++;
      // Test 3: Process user response
      console.log('3. Testing process user response...');
      const processData =
      /* istanbul ignore next */
      (cov_4how1h5ve().s[38]++, {
        action: 'process',
        sessionId: startResponse.data.sessionId,
        userTranscript: 'I have experience with JavaScript, Python, and React. I worked on several web applications.'
      });
      const processResponse =
      /* istanbul ignore next */
      (cov_4how1h5ve().s[39]++, await makeRequest(VOICE_SERVICE_URL, processData));
      /* istanbul ignore next */
      cov_4how1h5ve().s[40]++;
      console.log(`   Status: ${processResponse.status}`);
      /* istanbul ignore next */
      cov_4how1h5ve().s[41]++;
      console.log(`   Response:`, JSON.stringify(processResponse.data, null, 2));
      /* istanbul ignore next */
      cov_4how1h5ve().s[42]++;
      console.log('');

      // Test 4: Get summary
      /* istanbul ignore next */
      cov_4how1h5ve().s[43]++;
      console.log('4. Testing interview summary...');
      const summaryData =
      /* istanbul ignore next */
      (cov_4how1h5ve().s[44]++, {
        action: 'summary',
        sessionId: startResponse.data.sessionId
      });
      const summaryResponse =
      /* istanbul ignore next */
      (cov_4how1h5ve().s[45]++, await makeRequest(VOICE_SERVICE_URL, summaryData));
      /* istanbul ignore next */
      cov_4how1h5ve().s[46]++;
      console.log(`   Status: ${summaryResponse.status}`);
      /* istanbul ignore next */
      cov_4how1h5ve().s[47]++;
      console.log(`   Response:`, JSON.stringify(summaryResponse.data, null, 2));
      /* istanbul ignore next */
      cov_4how1h5ve().s[48]++;
      console.log('');
    } else
    /* istanbul ignore next */
    {
      cov_4how1h5ve().b[1][1]++;
    }
    cov_4how1h5ve().s[49]++;
    console.log('✅ Function tests completed!');
  } catch (error) {
    /* istanbul ignore next */
    cov_4how1h5ve().s[50]++;
    console.error('❌ Test failed:', error);
  }
}

// Run tests
/* istanbul ignore next */
cov_4how1h5ve().s[51]++;
testFunctions();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,