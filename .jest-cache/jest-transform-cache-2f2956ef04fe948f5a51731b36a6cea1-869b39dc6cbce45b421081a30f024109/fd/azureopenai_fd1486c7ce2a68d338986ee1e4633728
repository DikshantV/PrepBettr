2364364b4ff95132a57ddda0de0c167f
"use strict";

/* istanbul ignore next */
function cov_1h3we8zce1() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/services/azure-openai.ts";
  var hash = "7e5a0ffecec4d0a7adef3e73dcc37a13855cfe31";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/services/azure-openai.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 42
        }
      },
      "2": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 4,
          column: 34
        }
      },
      "3": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 36
        }
      },
      "4": {
        start: {
          line: 6,
          column: 28
        },
        end: {
          line: 6,
          column: 87
        }
      },
      "5": {
        start: {
          line: 8,
          column: 25
        },
        end: {
          line: 8,
          column: 53
        }
      },
      "6": {
        start: {
          line: 9,
          column: 30
        },
        end: {
          line: 9,
          column: 63
        }
      },
      "7": {
        start: {
          line: 10,
          column: 32
        },
        end: {
          line: 10,
          column: 67
        }
      },
      "8": {
        start: {
          line: 12,
          column: 19
        },
        end: {
          line: 12,
          column: 23
        }
      },
      "9": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 19,
          column: 5
        }
      },
      "10": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 28
        }
      },
      "11": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 23,
          column: 5
        }
      },
      "12": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 77
        }
      },
      "13": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "14": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 82
        }
      },
      "15": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 29,
          column: 5
        }
      },
      "16": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 84
        }
      },
      "17": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 31,
          column: 67
        }
      },
      "18": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 32,
          column: 30
        }
      },
      "19": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 33,
          column: 24
        }
      },
      "20": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 69,
          column: 5
        }
      },
      "21": {
        start: {
          line: 51,
          column: 23
        },
        end: {
          line: 51,
          column: 46
        }
      },
      "22": {
        start: {
          line: 52,
          column: 27
        },
        end: {
          line: 58,
          column: 10
        }
      },
      "23": {
        start: {
          line: 59,
          column: 24
        },
        end: {
          line: 59,
          column: 155
        }
      },
      "24": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "25": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 70
        }
      },
      "26": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 23
        }
      },
      "27": {
        start: {
          line: 67,
          column: 32
        },
        end: {
          line: 67,
          column: 64
        }
      },
      "28": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 30
        }
      },
      "29": {
        start: {
          line: 77,
          column: 4
        },
        end: {
          line: 79,
          column: 5
        }
      },
      "30": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 109
        }
      },
      "31": {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 109,
          column: 5
        }
      },
      "32": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 108,
          column: 9
        }
      },
      "33": {
        start: {
          line: 84,
          column: 16
        },
        end: {
          line: 84,
          column: 99
        }
      },
      "34": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 86,
          column: 123
        }
      },
      "35": {
        start: {
          line: 88,
          column: 35
        },
        end: {
          line: 88,
          column: 110
        }
      },
      "36": {
        start: {
          line: 89,
          column: 37
        },
        end: {
          line: 91,
          column: 59
        }
      },
      "37": {
        start: {
          line: 92,
          column: 16
        },
        end: {
          line: 92,
          column: 85
        }
      },
      "38": {
        start: {
          line: 95,
          column: 16
        },
        end: {
          line: 97,
          column: 17
        }
      },
      "39": {
        start: {
          line: 96,
          column: 20
        },
        end: {
          line: 96,
          column: 121
        }
      },
      "40": {
        start: {
          line: 98,
          column: 16
        },
        end: {
          line: 98,
          column: 98
        }
      },
      "41": {
        start: {
          line: 100,
          column: 16
        },
        end: {
          line: 100,
          column: 119
        }
      },
      "42": {
        start: {
          line: 105,
          column: 16
        },
        end: {
          line: 105,
          column: 109
        }
      },
      "43": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 107,
          column: 110
        }
      },
      "44": {
        start: {
          line: 111,
          column: 4
        },
        end: {
          line: 113,
          column: 5
        }
      },
      "45": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 112,
          column: 66
        }
      },
      "46": {
        start: {
          line: 115,
          column: 4
        },
        end: {
          line: 115,
          column: 95
        }
      },
      "47": {
        start: {
          line: 121,
          column: 4
        },
        end: {
          line: 121,
          column: 24
        }
      },
      "48": {
        start: {
          line: 127,
          column: 4
        },
        end: {
          line: 127,
          column: 84
        }
      }
    },
    fnMap: {
      "0": {
        name: "getOpenAIClient",
        decl: {
          start: {
            line: 16,
            column: 15
          },
          end: {
            line: 16,
            column: 30
          }
        },
        loc: {
          start: {
            line: 16,
            column: 33
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 16
      },
      "1": {
        name: "generateContent",
        decl: {
          start: {
            line: 48,
            column: 15
          },
          end: {
            line: 48,
            column: 30
          }
        },
        loc: {
          start: {
            line: 48,
            column: 58
          },
          end: {
            line: 70,
            column: 1
          }
        },
        line: 48
      },
      "2": {
        name: "translateAzureOpenAIError",
        decl: {
          start: {
            line: 74,
            column: 9
          },
          end: {
            line: 74,
            column: 34
          }
        },
        loc: {
          start: {
            line: 74,
            column: 42
          },
          end: {
            line: 116,
            column: 1
          }
        },
        line: 74
      },
      "3": {
        name: "resetClient",
        decl: {
          start: {
            line: 120,
            column: 9
          },
          end: {
            line: 120,
            column: 20
          }
        },
        loc: {
          start: {
            line: 120,
            column: 23
          },
          end: {
            line: 122,
            column: 1
          }
        },
        line: 120
      },
      "4": {
        name: "isConfigured",
        decl: {
          start: {
            line: 126,
            column: 9
          },
          end: {
            line: 126,
            column: 21
          }
        },
        loc: {
          start: {
            line: 126,
            column: 24
          },
          end: {
            line: 128,
            column: 1
          }
        },
        line: 126
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      },
      "1": {
        loc: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "2": {
        loc: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "3": {
        loc: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 27
      },
      "4": {
        loc: {
          start: {
            line: 48,
            column: 39
          },
          end: {
            line: 48,
            column: 56
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 48,
            column: 53
          },
          end: {
            line: 48,
            column: 56
          }
        }],
        line: 48
      },
      "5": {
        loc: {
          start: {
            line: 59,
            column: 24
          },
          end: {
            line: 59,
            column: 155
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 59,
            column: 136
          },
          end: {
            line: 59,
            column: 142
          }
        }, {
          start: {
            line: 59,
            column: 145
          },
          end: {
            line: 59,
            column: 155
          }
        }],
        line: 59
      },
      "6": {
        loc: {
          start: {
            line: 59,
            column: 24
          },
          end: {
            line: 59,
            column: 133
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 59,
            column: 24
          },
          end: {
            line: 59,
            column: 116
          }
        }, {
          start: {
            line: 59,
            column: 120
          },
          end: {
            line: 59,
            column: 133
          }
        }],
        line: 59
      },
      "7": {
        loc: {
          start: {
            line: 59,
            column: 30
          },
          end: {
            line: 59,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 59,
            column: 87
          },
          end: {
            line: 59,
            column: 93
          }
        }, {
          start: {
            line: 59,
            column: 96
          },
          end: {
            line: 59,
            column: 106
          }
        }],
        line: 59
      },
      "8": {
        loc: {
          start: {
            line: 59,
            column: 30
          },
          end: {
            line: 59,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 59,
            column: 30
          },
          end: {
            line: 59,
            column: 67
          }
        }, {
          start: {
            line: 59,
            column: 71
          },
          end: {
            line: 59,
            column: 84
          }
        }],
        line: 59
      },
      "9": {
        loc: {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "10": {
        loc: {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      },
      "11": {
        loc: {
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 77,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 77,
            column: 34
          }
        }, {
          start: {
            line: 77,
            column: 38
          },
          end: {
            line: 77,
            column: 67
          }
        }],
        line: 77
      },
      "12": {
        loc: {
          start: {
            line: 81,
            column: 4
          },
          end: {
            line: 109,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 4
          },
          end: {
            line: 109,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      },
      "13": {
        loc: {
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 108,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 84,
            column: 99
          }
        }, {
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 86,
            column: 123
          }
        }, {
          start: {
            line: 87,
            column: 12
          },
          end: {
            line: 92,
            column: 85
          }
        }, {
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 98,
            column: 98
          }
        }, {
          start: {
            line: 99,
            column: 12
          },
          end: {
            line: 100,
            column: 119
          }
        }, {
          start: {
            line: 101,
            column: 12
          },
          end: {
            line: 101,
            column: 21
          }
        }, {
          start: {
            line: 102,
            column: 12
          },
          end: {
            line: 102,
            column: 21
          }
        }, {
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 103,
            column: 21
          }
        }, {
          start: {
            line: 104,
            column: 12
          },
          end: {
            line: 105,
            column: 109
          }
        }, {
          start: {
            line: 106,
            column: 12
          },
          end: {
            line: 107,
            column: 110
          }
        }],
        line: 82
      },
      "14": {
        loc: {
          start: {
            line: 88,
            column: 35
          },
          end: {
            line: 88,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 88,
            column: 84
          },
          end: {
            line: 88,
            column: 90
          }
        }, {
          start: {
            line: 88,
            column: 93
          },
          end: {
            line: 88,
            column: 110
          }
        }],
        line: 88
      },
      "15": {
        loc: {
          start: {
            line: 88,
            column: 35
          },
          end: {
            line: 88,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 88,
            column: 35
          },
          end: {
            line: 88,
            column: 64
          }
        }, {
          start: {
            line: 88,
            column: 68
          },
          end: {
            line: 88,
            column: 81
          }
        }],
        line: 88
      },
      "16": {
        loc: {
          start: {
            line: 89,
            column: 37
          },
          end: {
            line: 91,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 90,
            column: 22
          },
          end: {
            line: 90,
            column: 66
          }
        }, {
          start: {
            line: 91,
            column: 22
          },
          end: {
            line: 91,
            column: 59
          }
        }],
        line: 89
      },
      "17": {
        loc: {
          start: {
            line: 95,
            column: 16
          },
          end: {
            line: 97,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 16
          },
          end: {
            line: 97,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "18": {
        loc: {
          start: {
            line: 95,
            column: 20
          },
          end: {
            line: 95,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 95,
            column: 20
          },
          end: {
            line: 95,
            column: 33
          }
        }, {
          start: {
            line: 95,
            column: 37
          },
          end: {
            line: 95,
            column: 77
          }
        }],
        line: 95
      },
      "19": {
        loc: {
          start: {
            line: 98,
            column: 49
          },
          end: {
            line: 98,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 98,
            column: 49
          },
          end: {
            line: 98,
            column: 62
          }
        }, {
          start: {
            line: 98,
            column: 66
          },
          end: {
            line: 98,
            column: 94
          }
        }],
        line: 98
      },
      "20": {
        loc: {
          start: {
            line: 107,
            column: 74
          },
          end: {
            line: 107,
            column: 106
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 107,
            column: 74
          },
          end: {
            line: 107,
            column: 87
          }
        }, {
          start: {
            line: 107,
            column: 91
          },
          end: {
            line: 107,
            column: 106
          }
        }],
        line: 107
      },
      "21": {
        loc: {
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "22": {
        loc: {
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 111,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 111,
            column: 21
          }
        }, {
          start: {
            line: 111,
            column: 25
          },
          end: {
            line: 111,
            column: 71
          }
        }],
        line: 111
      },
      "23": {
        loc: {
          start: {
            line: 115,
            column: 44
          },
          end: {
            line: 115,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 115,
            column: 44
          },
          end: {
            line: 115,
            column: 57
          }
        }, {
          start: {
            line: 115,
            column: 61
          },
          end: {
            line: 115,
            column: 91
          }
        }],
        line: 115
      },
      "24": {
        loc: {
          start: {
            line: 127,
            column: 14
          },
          end: {
            line: 127,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 127,
            column: 14
          },
          end: {
            line: 127,
            column: 30
          }
        }, {
          start: {
            line: 127,
            column: 34
          },
          end: {
            line: 127,
            column: 55
          }
        }, {
          start: {
            line: 127,
            column: 59
          },
          end: {
            line: 127,
            column: 82
          }
        }],
        line: 127
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/services/azure-openai.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/services/azure-openai.ts"],
      sourcesContent: ["import { MigrationOpenAIClient as OpenAI } from '@/lib/azure-ai-foundry/clients/migration-wrapper';\n\n// Environment variables for Azure OpenAI configuration\nconst AZURE_OPENAI_KEY = process.env.AZURE_OPENAI_KEY;\nconst AZURE_OPENAI_ENDPOINT = process.env.AZURE_OPENAI_ENDPOINT;\nconst AZURE_OPENAI_DEPLOYMENT = process.env.AZURE_OPENAI_DEPLOYMENT;\n\n// Cached OpenAI client instance for reuse\nlet openAIClient: OpenAI | null = null;\n\n/**\n * Initialize and cache the Azure OpenAI client\n */\nasync function getOpenAIClient(): Promise<OpenAI> {\n  if (openAIClient) {\n    return openAIClient;\n  }\n\n  // Validate required environment variables\n  if (!AZURE_OPENAI_KEY) {\n    throw new Error('AZURE_OPENAI_KEY environment variable is required');\n  }\n  if (!AZURE_OPENAI_ENDPOINT) {\n    throw new Error('AZURE_OPENAI_ENDPOINT environment variable is required');\n  }\n  if (!AZURE_OPENAI_DEPLOYMENT) {\n    throw new Error('AZURE_OPENAI_DEPLOYMENT environment variable is required');\n  }\n\n  // Create and cache the OpenAI client configured for Azure\n  openAIClient = new OpenAI();\n  await openAIClient.init(); // Initialize the migration client\n\n  return openAIClient;\n}\n\n/**\n * Generate content using Azure OpenAI with centralized error handling\n * \n * @param prompt - The prompt to send to the AI model\n * @param temperature - Controls randomness (0.0 = deterministic, 1.0 = creative). Default: 0.7\n * @returns Promise resolving to the generated text content\n * \n * @throws Error with translated user-friendly messages for common issues:\n * - Authentication errors (401, 403)\n * - Rate limiting (429) with retry suggestions\n * - Service unavailable (500, 502, 503, 504)\n * - Content policy violations (400 with content_filter)\n */\nexport async function generateContent(prompt: string, temperature: number = 0.7): Promise<string> {\n  try {\n    const client = await getOpenAIClient();\n    \n    const completion = await client.chat.completions.create({\n      model: AZURE_OPENAI_DEPLOYMENT!,\n      messages: [{ role: 'user', content: prompt }],\n      temperature,\n      max_tokens: 1000,\n      top_p: 0.9,\n    });\n\n    const content = completion.choices[0]?.message?.content;\n    if (!content) {\n      throw new Error('No content generated from Azure OpenAI');\n    }\n\n    return content;\n  } catch (error: any) {\n    // Centralized error translation for better user experience\n    const translatedError = translateAzureOpenAIError(error);\n    throw translatedError;\n  }\n}\n\n/**\n * Translate Azure OpenAI errors into user-friendly messages\n */\nfunction translateAzureOpenAIError(error: any): Error {\n  // Network or connection errors\n  if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {\n    return new Error('Unable to connect to Azure OpenAI service. Please check your network connection.');\n  }\n\n  // Azure OpenAI API errors\n  if (error.status) {\n    switch (error.status) {\n      case 401:\n        return new Error('Azure OpenAI authentication failed. Please check your API key.');\n      \n      case 403:\n        return new Error('Access forbidden. Your Azure OpenAI subscription may not have access to this resource.');\n      \n      case 429:\n        const retryAfter = error.headers?.['retry-after'];\n        const retryMessage = retryAfter \n          ? ` Please retry after ${retryAfter} seconds.`\n          : ' Please try again in a few moments.';\n        return new Error(`Azure OpenAI rate limit exceeded.${retryMessage}`);\n      \n      case 400:\n        // Check for content filtering\n        if (error.message && error.message.includes('content_filter')) {\n          return new Error('Content was filtered by Azure OpenAI content policy. Please modify your request.');\n        }\n        return new Error(`Bad request: ${error.message || 'Invalid request parameters'}`);\n      \n      case 404:\n        return new Error('Azure OpenAI deployment not found. Please check your deployment name and endpoint.');\n      \n      case 500:\n      case 502:\n      case 503:\n      case 504:\n        return new Error('Azure OpenAI service is temporarily unavailable. Please try again later.');\n      \n      default:\n        return new Error(`Azure OpenAI error (${error.status}): ${error.message || 'Unknown error'}`);\n    }\n  }\n\n  // Configuration errors\n  if (error.message && error.message.includes('environment variable')) {\n    return new Error(`Configuration error: ${error.message}`);\n  }\n\n  // Generic fallback\n  return new Error(`Azure OpenAI error: ${error.message || 'An unexpected error occurred'}`);\n}\n\n/**\n * Reset the cached client (useful for testing or credential updates)\n */\nexport function resetClient(): void {\n  openAIClient = null;\n}\n\n/**\n * Check if Azure OpenAI is properly configured\n */\nexport function isConfigured(): boolean {\n  return !!(AZURE_OPENAI_KEY && AZURE_OPENAI_ENDPOINT && AZURE_OPENAI_DEPLOYMENT);\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7e5a0ffecec4d0a7adef3e73dcc37a13855cfe31"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1h3we8zce1 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1h3we8zce1();
cov_1h3we8zce1().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1h3we8zce1().s[1]++;
exports.generateContent = generateContent;
/* istanbul ignore next */
cov_1h3we8zce1().s[2]++;
exports.resetClient = resetClient;
/* istanbul ignore next */
cov_1h3we8zce1().s[3]++;
exports.isConfigured = isConfigured;
const migration_wrapper_1 =
/* istanbul ignore next */
(cov_1h3we8zce1().s[4]++, require("@/lib/azure-ai-foundry/clients/migration-wrapper"));
// Environment variables for Azure OpenAI configuration
const AZURE_OPENAI_KEY =
/* istanbul ignore next */
(cov_1h3we8zce1().s[5]++, process.env.AZURE_OPENAI_KEY);
const AZURE_OPENAI_ENDPOINT =
/* istanbul ignore next */
(cov_1h3we8zce1().s[6]++, process.env.AZURE_OPENAI_ENDPOINT);
const AZURE_OPENAI_DEPLOYMENT =
/* istanbul ignore next */
(cov_1h3we8zce1().s[7]++, process.env.AZURE_OPENAI_DEPLOYMENT);
// Cached OpenAI client instance for reuse
let openAIClient =
/* istanbul ignore next */
(cov_1h3we8zce1().s[8]++, null);
/**
 * Initialize and cache the Azure OpenAI client
 */
async function getOpenAIClient() {
  /* istanbul ignore next */
  cov_1h3we8zce1().f[0]++;
  cov_1h3we8zce1().s[9]++;
  if (openAIClient) {
    /* istanbul ignore next */
    cov_1h3we8zce1().b[0][0]++;
    cov_1h3we8zce1().s[10]++;
    return openAIClient;
  } else
  /* istanbul ignore next */
  {
    cov_1h3we8zce1().b[0][1]++;
  }
  // Validate required environment variables
  cov_1h3we8zce1().s[11]++;
  if (!AZURE_OPENAI_KEY) {
    /* istanbul ignore next */
    cov_1h3we8zce1().b[1][0]++;
    cov_1h3we8zce1().s[12]++;
    throw new Error('AZURE_OPENAI_KEY environment variable is required');
  } else
  /* istanbul ignore next */
  {
    cov_1h3we8zce1().b[1][1]++;
  }
  cov_1h3we8zce1().s[13]++;
  if (!AZURE_OPENAI_ENDPOINT) {
    /* istanbul ignore next */
    cov_1h3we8zce1().b[2][0]++;
    cov_1h3we8zce1().s[14]++;
    throw new Error('AZURE_OPENAI_ENDPOINT environment variable is required');
  } else
  /* istanbul ignore next */
  {
    cov_1h3we8zce1().b[2][1]++;
  }
  cov_1h3we8zce1().s[15]++;
  if (!AZURE_OPENAI_DEPLOYMENT) {
    /* istanbul ignore next */
    cov_1h3we8zce1().b[3][0]++;
    cov_1h3we8zce1().s[16]++;
    throw new Error('AZURE_OPENAI_DEPLOYMENT environment variable is required');
  } else
  /* istanbul ignore next */
  {
    cov_1h3we8zce1().b[3][1]++;
  }
  // Create and cache the OpenAI client configured for Azure
  cov_1h3we8zce1().s[17]++;
  openAIClient = new migration_wrapper_1.MigrationOpenAIClient();
  /* istanbul ignore next */
  cov_1h3we8zce1().s[18]++;
  await openAIClient.init(); // Initialize the migration client
  /* istanbul ignore next */
  cov_1h3we8zce1().s[19]++;
  return openAIClient;
}
/**
 * Generate content using Azure OpenAI with centralized error handling
 *
 * @param prompt - The prompt to send to the AI model
 * @param temperature - Controls randomness (0.0 = deterministic, 1.0 = creative). Default: 0.7
 * @returns Promise resolving to the generated text content
 *
 * @throws Error with translated user-friendly messages for common issues:
 * - Authentication errors (401, 403)
 * - Rate limiting (429) with retry suggestions
 * - Service unavailable (500, 502, 503, 504)
 * - Content policy violations (400 with content_filter)
 */
async function generateContent(prompt, temperature =
/* istanbul ignore next */
(cov_1h3we8zce1().b[4][0]++, 0.7)) {
  /* istanbul ignore next */
  cov_1h3we8zce1().f[1]++;
  var _a, _b;
  /* istanbul ignore next */
  cov_1h3we8zce1().s[20]++;
  try {
    const client =
    /* istanbul ignore next */
    (cov_1h3we8zce1().s[21]++, await getOpenAIClient());
    const completion =
    /* istanbul ignore next */
    (cov_1h3we8zce1().s[22]++, await client.chat.completions.create({
      model: AZURE_OPENAI_DEPLOYMENT,
      messages: [{
        role: 'user',
        content: prompt
      }],
      temperature,
      max_tokens: 1000,
      top_p: 0.9
    }));
    const content =
    /* istanbul ignore next */
    (cov_1h3we8zce1().s[23]++,
    /* istanbul ignore next */
    (cov_1h3we8zce1().b[6][0]++, (_b =
    /* istanbul ignore next */
    (cov_1h3we8zce1().b[8][0]++, (_a = completion.choices[0]) === null) ||
    /* istanbul ignore next */
    (cov_1h3we8zce1().b[8][1]++, _a === void 0) ?
    /* istanbul ignore next */
    (cov_1h3we8zce1().b[7][0]++, void 0) :
    /* istanbul ignore next */
    (cov_1h3we8zce1().b[7][1]++, _a.message)) === null) ||
    /* istanbul ignore next */
    (cov_1h3we8zce1().b[6][1]++, _b === void 0) ?
    /* istanbul ignore next */
    (cov_1h3we8zce1().b[5][0]++, void 0) :
    /* istanbul ignore next */
    (cov_1h3we8zce1().b[5][1]++, _b.content));
    /* istanbul ignore next */
    cov_1h3we8zce1().s[24]++;
    if (!content) {
      /* istanbul ignore next */
      cov_1h3we8zce1().b[9][0]++;
      cov_1h3we8zce1().s[25]++;
      throw new Error('No content generated from Azure OpenAI');
    } else
    /* istanbul ignore next */
    {
      cov_1h3we8zce1().b[9][1]++;
    }
    cov_1h3we8zce1().s[26]++;
    return content;
  } catch (error) {
    // Centralized error translation for better user experience
    const translatedError =
    /* istanbul ignore next */
    (cov_1h3we8zce1().s[27]++, translateAzureOpenAIError(error));
    /* istanbul ignore next */
    cov_1h3we8zce1().s[28]++;
    throw translatedError;
  }
}
/**
 * Translate Azure OpenAI errors into user-friendly messages
 */
function translateAzureOpenAIError(error) {
  /* istanbul ignore next */
  cov_1h3we8zce1().f[2]++;
  var _a;
  // Network or connection errors
  /* istanbul ignore next */
  cov_1h3we8zce1().s[29]++;
  if (
  /* istanbul ignore next */
  (cov_1h3we8zce1().b[11][0]++, error.code === 'ENOTFOUND') ||
  /* istanbul ignore next */
  (cov_1h3we8zce1().b[11][1]++, error.code === 'ECONNREFUSED')) {
    /* istanbul ignore next */
    cov_1h3we8zce1().b[10][0]++;
    cov_1h3we8zce1().s[30]++;
    return new Error('Unable to connect to Azure OpenAI service. Please check your network connection.');
  } else
  /* istanbul ignore next */
  {
    cov_1h3we8zce1().b[10][1]++;
  }
  // Azure OpenAI API errors
  cov_1h3we8zce1().s[31]++;
  if (error.status) {
    /* istanbul ignore next */
    cov_1h3we8zce1().b[12][0]++;
    cov_1h3we8zce1().s[32]++;
    switch (error.status) {
      case 401:
        /* istanbul ignore next */
        cov_1h3we8zce1().b[13][0]++;
        cov_1h3we8zce1().s[33]++;
        return new Error('Azure OpenAI authentication failed. Please check your API key.');
      case 403:
        /* istanbul ignore next */
        cov_1h3we8zce1().b[13][1]++;
        cov_1h3we8zce1().s[34]++;
        return new Error('Access forbidden. Your Azure OpenAI subscription may not have access to this resource.');
      case 429:
        /* istanbul ignore next */
        cov_1h3we8zce1().b[13][2]++;
        const retryAfter =
        /* istanbul ignore next */
        (cov_1h3we8zce1().s[35]++,
        /* istanbul ignore next */
        (cov_1h3we8zce1().b[15][0]++, (_a = error.headers) === null) ||
        /* istanbul ignore next */
        (cov_1h3we8zce1().b[15][1]++, _a === void 0) ?
        /* istanbul ignore next */
        (cov_1h3we8zce1().b[14][0]++, void 0) :
        /* istanbul ignore next */
        (cov_1h3we8zce1().b[14][1]++, _a['retry-after']));
        const retryMessage =
        /* istanbul ignore next */
        (cov_1h3we8zce1().s[36]++, retryAfter ?
        /* istanbul ignore next */
        (cov_1h3we8zce1().b[16][0]++, ` Please retry after ${retryAfter} seconds.`) :
        /* istanbul ignore next */
        (cov_1h3we8zce1().b[16][1]++, ' Please try again in a few moments.'));
        /* istanbul ignore next */
        cov_1h3we8zce1().s[37]++;
        return new Error(`Azure OpenAI rate limit exceeded.${retryMessage}`);
      case 400:
        /* istanbul ignore next */
        cov_1h3we8zce1().b[13][3]++;
        cov_1h3we8zce1().s[38]++;
        // Check for content filtering
        if (
        /* istanbul ignore next */
        (cov_1h3we8zce1().b[18][0]++, error.message) &&
        /* istanbul ignore next */
        (cov_1h3we8zce1().b[18][1]++, error.message.includes('content_filter'))) {
          /* istanbul ignore next */
          cov_1h3we8zce1().b[17][0]++;
          cov_1h3we8zce1().s[39]++;
          return new Error('Content was filtered by Azure OpenAI content policy. Please modify your request.');
        } else
        /* istanbul ignore next */
        {
          cov_1h3we8zce1().b[17][1]++;
        }
        cov_1h3we8zce1().s[40]++;
        return new Error(`Bad request: ${
        /* istanbul ignore next */
        (cov_1h3we8zce1().b[19][0]++, error.message) ||
        /* istanbul ignore next */
        (cov_1h3we8zce1().b[19][1]++, 'Invalid request parameters')}`);
      case 404:
        /* istanbul ignore next */
        cov_1h3we8zce1().b[13][4]++;
        cov_1h3we8zce1().s[41]++;
        return new Error('Azure OpenAI deployment not found. Please check your deployment name and endpoint.');
      case 500:
        /* istanbul ignore next */
        cov_1h3we8zce1().b[13][5]++;
      case 502:
        /* istanbul ignore next */
        cov_1h3we8zce1().b[13][6]++;
      case 503:
        /* istanbul ignore next */
        cov_1h3we8zce1().b[13][7]++;
      case 504:
        /* istanbul ignore next */
        cov_1h3we8zce1().b[13][8]++;
        cov_1h3we8zce1().s[42]++;
        return new Error('Azure OpenAI service is temporarily unavailable. Please try again later.');
      default:
        /* istanbul ignore next */
        cov_1h3we8zce1().b[13][9]++;
        cov_1h3we8zce1().s[43]++;
        return new Error(`Azure OpenAI error (${error.status}): ${
        /* istanbul ignore next */
        (cov_1h3we8zce1().b[20][0]++, error.message) ||
        /* istanbul ignore next */
        (cov_1h3we8zce1().b[20][1]++, 'Unknown error')}`);
    }
  } else
  /* istanbul ignore next */
  {
    cov_1h3we8zce1().b[12][1]++;
  }
  // Configuration errors
  cov_1h3we8zce1().s[44]++;
  if (
  /* istanbul ignore next */
  (cov_1h3we8zce1().b[22][0]++, error.message) &&
  /* istanbul ignore next */
  (cov_1h3we8zce1().b[22][1]++, error.message.includes('environment variable'))) {
    /* istanbul ignore next */
    cov_1h3we8zce1().b[21][0]++;
    cov_1h3we8zce1().s[45]++;
    return new Error(`Configuration error: ${error.message}`);
  } else
  /* istanbul ignore next */
  {
    cov_1h3we8zce1().b[21][1]++;
  }
  // Generic fallback
  cov_1h3we8zce1().s[46]++;
  return new Error(`Azure OpenAI error: ${
  /* istanbul ignore next */
  (cov_1h3we8zce1().b[23][0]++, error.message) ||
  /* istanbul ignore next */
  (cov_1h3we8zce1().b[23][1]++, 'An unexpected error occurred')}`);
}
/**
 * Reset the cached client (useful for testing or credential updates)
 */
function resetClient() {
  /* istanbul ignore next */
  cov_1h3we8zce1().f[3]++;
  cov_1h3we8zce1().s[47]++;
  openAIClient = null;
}
/**
 * Check if Azure OpenAI is properly configured
 */
function isConfigured() {
  /* istanbul ignore next */
  cov_1h3we8zce1().f[4]++;
  cov_1h3we8zce1().s[48]++;
  return !!(
  /* istanbul ignore next */
  (cov_1h3we8zce1().b[24][0]++, AZURE_OPENAI_KEY) &&
  /* istanbul ignore next */
  (cov_1h3we8zce1().b[24][1]++, AZURE_OPENAI_ENDPOINT) &&
  /* istanbul ignore next */
  (cov_1h3we8zce1().b[24][2]++, AZURE_OPENAI_DEPLOYMENT));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,