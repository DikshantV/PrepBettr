08d0991ff0b85df0a17d6004d74002d6
"use strict";

/* istanbul ignore next */
function cov_1pxl161w72() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/utils/resume-parser.ts";
  var hash = "72e71da70dd1fc2654f0f026dfc118714020bfad";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/utils/resume-parser.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 42
        }
      },
      "2": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 4,
          column: 64
        }
      },
      "3": {
        start: {
          line: 5,
          column: 31
        },
        end: {
          line: 5,
          column: 74
        }
      },
      "4": {
        start: {
          line: 6,
          column: 26
        },
        end: {
          line: 6,
          column: 64
        }
      },
      "5": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 23,
          column: 5
        }
      },
      "6": {
        start: {
          line: 13,
          column: 26
        },
        end: {
          line: 13,
          column: 48
        }
      },
      "7": {
        start: {
          line: 15,
          column: 31
        },
        end: {
          line: 15,
          column: 56
        }
      },
      "8": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 58
        }
      },
      "9": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 54
        }
      },
      "10": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "11": {
        start: {
          line: 31,
          column: 25
        },
        end: {
          line: 35,
          column: 5
        }
      },
      "12": {
        start: {
          line: 36,
          column: 15
        },
        end: {
          line: 36,
          column: 17
        }
      },
      "13": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 43,
          column: 5
        }
      },
      "14": {
        start: {
          line: 38,
          column: 22
        },
        end: {
          line: 38,
          column: 41
        }
      },
      "15": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 42,
          column: 9
        }
      },
      "16": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 35
        }
      },
      "17": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 18
        }
      },
      "18": {
        start: {
          line: 45,
          column: 23
        },
        end: {
          line: 45,
          column: 85
        }
      },
      "19": {
        start: {
          line: 46,
          column: 18
        },
        end: {
          line: 46,
          column: 49
        }
      },
      "20": {
        start: {
          line: 48,
          column: 26
        },
        end: {
          line: 51,
          column: 5
        }
      },
      "21": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 52,
          column: 18
        }
      },
      "22": {
        start: {
          line: 53,
          column: 4
        },
        end: {
          line: 59,
          column: 5
        }
      },
      "23": {
        start: {
          line: 54,
          column: 22
        },
        end: {
          line: 54,
          column: 41
        }
      },
      "24": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "25": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 36
        }
      },
      "26": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 18
        }
      },
      "27": {
        start: {
          line: 61,
          column: 24
        },
        end: {
          line: 61,
          column: 121
        }
      },
      "28": {
        start: {
          line: 62,
          column: 17
        },
        end: {
          line: 62,
          column: 19
        }
      },
      "29": {
        start: {
          line: 63,
          column: 4
        },
        end: {
          line: 70,
          column: 5
        }
      },
      "30": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 69,
          column: 26
        }
      },
      "31": {
        start: {
          line: 67,
          column: 26
        },
        end: {
          line: 67,
          column: 38
        }
      },
      "32": {
        start: {
          line: 68,
          column: 29
        },
        end: {
          line: 68,
          column: 66
        }
      },
      "33": {
        start: {
          line: 72,
          column: 28
        },
        end: {
          line: 72,
          column: 144
        }
      },
      "34": {
        start: {
          line: 73,
          column: 21
        },
        end: {
          line: 73,
          column: 23
        }
      },
      "35": {
        start: {
          line: 74,
          column: 4
        },
        end: {
          line: 88,
          column: 5
        }
      },
      "36": {
        start: {
          line: 75,
          column: 24
        },
        end: {
          line: 75,
          column: 42
        }
      },
      "37": {
        start: {
          line: 77,
          column: 27
        },
        end: {
          line: 77,
          column: 108
        }
      },
      "38": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "39": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 86,
          column: 15
        }
      },
      "40": {
        start: {
          line: 80,
          column: 49
        },
        end: {
          line: 80,
          column: 88
        }
      },
      "41": {
        start: {
          line: 80,
          column: 79
        },
        end: {
          line: 80,
          column: 87
        }
      },
      "42": {
        start: {
          line: 81,
          column: 16
        },
        end: {
          line: 85,
          column: 18
        }
      },
      "43": {
        start: {
          line: 90,
          column: 27
        },
        end: {
          line: 90,
          column: 136
        }
      },
      "44": {
        start: {
          line: 91,
          column: 20
        },
        end: {
          line: 91,
          column: 22
        }
      },
      "45": {
        start: {
          line: 92,
          column: 4
        },
        end: {
          line: 102,
          column: 5
        }
      },
      "46": {
        start: {
          line: 93,
          column: 24
        },
        end: {
          line: 93,
          column: 41
        }
      },
      "47": {
        start: {
          line: 94,
          column: 32
        },
        end: {
          line: 94,
          column: 113
        }
      },
      "48": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "49": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 100,
          column: 19
        }
      },
      "50": {
        start: {
          line: 103,
          column: 4
        },
        end: {
          line: 111,
          column: 6
        }
      },
      "51": {
        start: {
          line: 117,
          column: 4
        },
        end: {
          line: 166,
          column: 5
        }
      },
      "52": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 119,
          column: 69
        }
      },
      "53": {
        start: {
          line: 121,
          column: 23
        },
        end: {
          line: 121,
          column: 62
        }
      },
      "54": {
        start: {
          line: 122,
          column: 25
        },
        end: {
          line: 122,
          column: 99
        }
      },
      "55": {
        start: {
          line: 123,
          column: 25
        },
        end: {
          line: 123,
          column: 40
        }
      },
      "56": {
        start: {
          line: 125,
          column: 27
        },
        end: {
          line: 125,
          column: 47
        }
      },
      "57": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 161,
          column: 10
        }
      },
      "58": {
        start: {
          line: 133,
          column: 112
        },
        end: {
          line: 142,
          column: 13
        }
      },
      "59": {
        start: {
          line: 143,
          column: 108
        },
        end: {
          line: 151,
          column: 13
        }
      },
      "60": {
        start: {
          line: 152,
          column: 107
        },
        end: {
          line: 160,
          column: 13
        }
      },
      "61": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 164,
          column: 54
        }
      },
      "62": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 165,
          column: 20
        }
      },
      "63": {
        start: {
          line: 172,
          column: 4
        },
        end: {
          line: 181,
          column: 6
        }
      },
      "64": {
        start: {
          line: 187,
          column: 4
        },
        end: {
          line: 232,
          column: 5
        }
      },
      "65": {
        start: {
          line: 189,
          column: 25
        },
        end: {
          line: 204,
          column: 16
        }
      },
      "66": {
        start: {
          line: 205,
          column: 24
        },
        end: {
          line: 226,
          column: 9
        }
      },
      "67": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 227,
          column: 74
        }
      },
      "68": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 230,
          column: 101
        }
      },
      "69": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 231,
          column: 49
        }
      },
      "70": {
        start: {
          line: 238,
          column: 4
        },
        end: {
          line: 291,
          column: 2
        }
      },
      "71": {
        start: {
          line: 297,
          column: 4
        },
        end: {
          line: 324,
          column: 5
        }
      },
      "72": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 299,
          column: 69
        }
      },
      "73": {
        start: {
          line: 300,
          column: 23
        },
        end: {
          line: 300,
          column: 64
        }
      },
      "74": {
        start: {
          line: 301,
          column: 30
        },
        end: {
          line: 301,
          column: 104
        }
      },
      "75": {
        start: {
          line: 302,
          column: 26
        },
        end: {
          line: 308,
          column: 25
        }
      },
      "76": {
        start: {
          line: 304,
          column: 22
        },
        end: {
          line: 304,
          column: 30
        }
      },
      "77": {
        start: {
          line: 305,
          column: 25
        },
        end: {
          line: 305,
          column: 37
        }
      },
      "78": {
        start: {
          line: 306,
          column: 22
        },
        end: {
          line: 306,
          column: 49
        }
      },
      "79": {
        start: {
          line: 307,
          column: 25
        },
        end: {
          line: 307,
          column: 38
        }
      },
      "80": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 309,
          column: 25
        }
      },
      "81": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 312,
          column: 70
        }
      },
      "82": {
        start: {
          line: 314,
          column: 8
        },
        end: {
          line: 323,
          column: 10
        }
      },
      "83": {
        start: {
          line: 331,
          column: 4
        },
        end: {
          line: 371,
          column: 5
        }
      },
      "84": {
        start: {
          line: 332,
          column: 25
        },
        end: {
          line: 349,
          column: 92
        }
      },
      "85": {
        start: {
          line: 350,
          column: 24
        },
        end: {
          line: 365,
          column: 9
        }
      },
      "86": {
        start: {
          line: 361,
          column: 61
        },
        end: {
          line: 361,
          column: 96
        }
      },
      "87": {
        start: {
          line: 362,
          column: 59
        },
        end: {
          line: 362,
          column: 114
        }
      },
      "88": {
        start: {
          line: 363,
          column: 106
        },
        end: {
          line: 363,
          column: 115
        }
      },
      "89": {
        start: {
          line: 366,
          column: 8
        },
        end: {
          line: 366,
          column: 74
        }
      },
      "90": {
        start: {
          line: 369,
          column: 8
        },
        end: {
          line: 369,
          column: 103
        }
      },
      "91": {
        start: {
          line: 370,
          column: 8
        },
        end: {
          line: 370,
          column: 63
        }
      },
      "92": {
        start: {
          line: 378,
          column: 4
        },
        end: {
          line: 396,
          column: 2
        }
      },
      "93": {
        start: {
          line: 391,
          column: 47
        },
        end: {
          line: 391,
          column: 82
        }
      },
      "94": {
        start: {
          line: 392,
          column: 45
        },
        end: {
          line: 392,
          column: 100
        }
      },
      "95": {
        start: {
          line: 393,
          column: 92
        },
        end: {
          line: 393,
          column: 101
        }
      }
    },
    fnMap: {
      "0": {
        name: "parseResumeText",
        decl: {
          start: {
            line: 10,
            column: 15
          },
          end: {
            line: 10,
            column: 30
          }
        },
        loc: {
          start: {
            line: 10,
            column: 37
          },
          end: {
            line: 24,
            column: 1
          }
        },
        line: 10
      },
      "1": {
        name: "extractBasicInfo",
        decl: {
          start: {
            line: 28,
            column: 9
          },
          end: {
            line: 28,
            column: 25
          }
        },
        loc: {
          start: {
            line: 28,
            column: 32
          },
          end: {
            line: 112,
            column: 1
          }
        },
        line: 28
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 67,
            column: 17
          },
          end: {
            line: 67,
            column: 18
          }
        },
        loc: {
          start: {
            line: 67,
            column: 26
          },
          end: {
            line: 67,
            column: 38
          }
        },
        line: 67
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 68,
            column: 20
          },
          end: {
            line: 68,
            column: 21
          }
        },
        loc: {
          start: {
            line: 68,
            column: 29
          },
          end: {
            line: 68,
            column: 66
          }
        },
        line: 68
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 79,
            column: 52
          },
          end: {
            line: 79,
            column: 53
          }
        },
        loc: {
          start: {
            line: 79,
            column: 61
          },
          end: {
            line: 86,
            column: 13
          }
        },
        line: 79
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 80,
            column: 74
          },
          end: {
            line: 80,
            column: 75
          }
        },
        loc: {
          start: {
            line: 80,
            column: 79
          },
          end: {
            line: 80,
            column: 87
          }
        },
        line: 80
      },
      "6": {
        name: "extractWithAI",
        decl: {
          start: {
            line: 116,
            column: 15
          },
          end: {
            line: 116,
            column: 28
          }
        },
        loc: {
          start: {
            line: 116,
            column: 35
          },
          end: {
            line: 167,
            column: 1
          }
        },
        line: 116
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 133,
            column: 102
          },
          end: {
            line: 133,
            column: 103
          }
        },
        loc: {
          start: {
            line: 133,
            column: 112
          },
          end: {
            line: 142,
            column: 13
          }
        },
        line: 133
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 143,
            column: 98
          },
          end: {
            line: 143,
            column: 99
          }
        },
        loc: {
          start: {
            line: 143,
            column: 108
          },
          end: {
            line: 151,
            column: 13
          }
        },
        line: 143
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 152,
            column: 96
          },
          end: {
            line: 152,
            column: 97
          }
        },
        loc: {
          start: {
            line: 152,
            column: 107
          },
          end: {
            line: 160,
            column: 13
          }
        },
        line: 152
      },
      "10": {
        name: "mergeResumeData",
        decl: {
          start: {
            line: 171,
            column: 9
          },
          end: {
            line: 171,
            column: 24
          }
        },
        loc: {
          start: {
            line: 171,
            column: 44
          },
          end: {
            line: 182,
            column: 1
          }
        },
        line: 171
      },
      "11": {
        name: "buildExtractionPromptWithTemplate",
        decl: {
          start: {
            line: 186,
            column: 9
          },
          end: {
            line: 186,
            column: 42
          }
        },
        loc: {
          start: {
            line: 186,
            column: 49
          },
          end: {
            line: 233,
            column: 1
          }
        },
        line: 186
      },
      "12": {
        name: "buildExtractionPromptLegacy",
        decl: {
          start: {
            line: 237,
            column: 9
          },
          end: {
            line: 237,
            column: 36
          }
        },
        loc: {
          start: {
            line: 237,
            column: 43
          },
          end: {
            line: 292,
            column: 1
          }
        },
        line: 237
      },
      "13": {
        name: "generateInterviewQuestions",
        decl: {
          start: {
            line: 296,
            column: 15
          },
          end: {
            line: 296,
            column: 41
          }
        },
        loc: {
          start: {
            line: 296,
            column: 54
          },
          end: {
            line: 325,
            column: 1
          }
        },
        line: 296
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 304,
            column: 17
          },
          end: {
            line: 304,
            column: 18
          }
        },
        loc: {
          start: {
            line: 304,
            column: 22
          },
          end: {
            line: 304,
            column: 30
          }
        },
        line: 304
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 305,
            column: 20
          },
          end: {
            line: 305,
            column: 21
          }
        },
        loc: {
          start: {
            line: 305,
            column: 25
          },
          end: {
            line: 305,
            column: 37
          }
        },
        line: 305
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 306,
            column: 17
          },
          end: {
            line: 306,
            column: 18
          }
        },
        loc: {
          start: {
            line: 306,
            column: 22
          },
          end: {
            line: 306,
            column: 49
          }
        },
        line: 306
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 307,
            column: 20
          },
          end: {
            line: 307,
            column: 21
          }
        },
        loc: {
          start: {
            line: 307,
            column: 25
          },
          end: {
            line: 307,
            column: 38
          }
        },
        line: 307
      },
      "18": {
        name: "buildQuestionGenerationPrompt",
        decl: {
          start: {
            line: 329,
            column: 9
          },
          end: {
            line: 329,
            column: 38
          }
        },
        loc: {
          start: {
            line: 329,
            column: 51
          },
          end: {
            line: 372,
            column: 1
          }
        },
        line: 329
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 361,
            column: 54
          },
          end: {
            line: 361,
            column: 55
          }
        },
        loc: {
          start: {
            line: 361,
            column: 61
          },
          end: {
            line: 361,
            column: 96
          }
        },
        line: 361
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 362,
            column: 52
          },
          end: {
            line: 362,
            column: 53
          }
        },
        loc: {
          start: {
            line: 362,
            column: 59
          },
          end: {
            line: 362,
            column: 114
          }
        },
        line: 362
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 363,
            column: 98
          },
          end: {
            line: 363,
            column: 99
          }
        },
        loc: {
          start: {
            line: 363,
            column: 106
          },
          end: {
            line: 363,
            column: 115
          }
        },
        line: 363
      },
      "22": {
        name: "buildQuestionGenerationPromptLegacy",
        decl: {
          start: {
            line: 376,
            column: 9
          },
          end: {
            line: 376,
            column: 44
          }
        },
        loc: {
          start: {
            line: 376,
            column: 57
          },
          end: {
            line: 397,
            column: 1
          }
        },
        line: 376
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 391,
            column: 40
          },
          end: {
            line: 391,
            column: 41
          }
        },
        loc: {
          start: {
            line: 391,
            column: 47
          },
          end: {
            line: 391,
            column: 82
          }
        },
        line: 391
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 392,
            column: 38
          },
          end: {
            line: 392,
            column: 39
          }
        },
        loc: {
          start: {
            line: 392,
            column: 45
          },
          end: {
            line: 392,
            column: 100
          }
        },
        line: 392
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 393,
            column: 84
          },
          end: {
            line: 393,
            column: 85
          }
        },
        loc: {
          start: {
            line: 393,
            column: 92
          },
          end: {
            line: 393,
            column: 101
          }
        },
        line: 393
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "1": {
        loc: {
          start: {
            line: 46,
            column: 18
          },
          end: {
            line: 46,
            column: 49
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 46,
            column: 31
          },
          end: {
            line: 46,
            column: 44
          }
        }, {
          start: {
            line: 46,
            column: 47
          },
          end: {
            line: 46,
            column: 49
          }
        }],
        line: 46
      },
      "2": {
        loc: {
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "3": {
        loc: {
          start: {
            line: 63,
            column: 4
          },
          end: {
            line: 70,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 4
          },
          end: {
            line: 70,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "4": {
        loc: {
          start: {
            line: 68,
            column: 29
          },
          end: {
            line: 68,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 68,
            column: 29
          },
          end: {
            line: 68,
            column: 45
          }
        }, {
          start: {
            line: 68,
            column: 49
          },
          end: {
            line: 68,
            column: 66
          }
        }],
        line: 68
      },
      "5": {
        loc: {
          start: {
            line: 74,
            column: 4
          },
          end: {
            line: 88,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 4
          },
          end: {
            line: 88,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "6": {
        loc: {
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 87,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 87,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "7": {
        loc: {
          start: {
            line: 80,
            column: 32
          },
          end: {
            line: 80,
            column: 45
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 80,
            column: 43
          },
          end: {
            line: 80,
            column: 45
          }
        }],
        line: 80
      },
      "8": {
        loc: {
          start: {
            line: 82,
            column: 29
          },
          end: {
            line: 82,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 82,
            column: 29
          },
          end: {
            line: 82,
            column: 36
          }
        }, {
          start: {
            line: 82,
            column: 40
          },
          end: {
            line: 82,
            column: 57
          }
        }],
        line: 82
      },
      "9": {
        loc: {
          start: {
            line: 83,
            column: 30
          },
          end: {
            line: 83,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 83,
            column: 30
          },
          end: {
            line: 83,
            column: 38
          }
        }, {
          start: {
            line: 83,
            column: 42
          },
          end: {
            line: 83,
            column: 60
          }
        }],
        line: 83
      },
      "10": {
        loc: {
          start: {
            line: 92,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "11": {
        loc: {
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 101,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 101,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "12": {
        loc: {
          start: {
            line: 98,
            column: 28
          },
          end: {
            line: 98,
            column: 114
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 98,
            column: 29
          },
          end: {
            line: 98,
            column: 101
          }
        }, {
          start: {
            line: 98,
            column: 106
          },
          end: {
            line: 98,
            column: 114
          }
        }],
        line: 98
      },
      "13": {
        loc: {
          start: {
            line: 98,
            column: 29
          },
          end: {
            line: 98,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 98,
            column: 83
          },
          end: {
            line: 98,
            column: 89
          }
        }, {
          start: {
            line: 98,
            column: 92
          },
          end: {
            line: 98,
            column: 101
          }
        }],
        line: 98
      },
      "14": {
        loc: {
          start: {
            line: 98,
            column: 29
          },
          end: {
            line: 98,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 98,
            column: 29
          },
          end: {
            line: 98,
            column: 63
          }
        }, {
          start: {
            line: 98,
            column: 67
          },
          end: {
            line: 98,
            column: 80
          }
        }],
        line: 98
      },
      "15": {
        loc: {
          start: {
            line: 128,
            column: 18
          },
          end: {
            line: 128,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 128,
            column: 18
          },
          end: {
            line: 128,
            column: 33
          }
        }, {
          start: {
            line: 128,
            column: 37
          },
          end: {
            line: 128,
            column: 39
          }
        }],
        line: 128
      },
      "16": {
        loc: {
          start: {
            line: 129,
            column: 19
          },
          end: {
            line: 129,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 129,
            column: 19
          },
          end: {
            line: 129,
            column: 35
          }
        }, {
          start: {
            line: 129,
            column: 39
          },
          end: {
            line: 129,
            column: 41
          }
        }],
        line: 129
      },
      "17": {
        loc: {
          start: {
            line: 130,
            column: 19
          },
          end: {
            line: 130,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 130,
            column: 19
          },
          end: {
            line: 130,
            column: 35
          }
        }, {
          start: {
            line: 130,
            column: 39
          },
          end: {
            line: 130,
            column: 41
          }
        }],
        line: 130
      },
      "18": {
        loc: {
          start: {
            line: 131,
            column: 21
          },
          end: {
            line: 131,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 131,
            column: 21
          },
          end: {
            line: 131,
            column: 39
          }
        }, {
          start: {
            line: 131,
            column: 43
          },
          end: {
            line: 131,
            column: 45
          }
        }],
        line: 131
      },
      "19": {
        loc: {
          start: {
            line: 132,
            column: 20
          },
          end: {
            line: 132,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 132,
            column: 55
          },
          end: {
            line: 132,
            column: 85
          }
        }, {
          start: {
            line: 132,
            column: 88
          },
          end: {
            line: 132,
            column: 90
          }
        }],
        line: 132
      },
      "20": {
        loc: {
          start: {
            line: 133,
            column: 24
          },
          end: {
            line: 142,
            column: 20
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 133,
            column: 63
          },
          end: {
            line: 142,
            column: 15
          }
        }, {
          start: {
            line: 142,
            column: 18
          },
          end: {
            line: 142,
            column: 20
          }
        }],
        line: 133
      },
      "21": {
        loc: {
          start: {
            line: 134,
            column: 25
          },
          end: {
            line: 134,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 134,
            column: 25
          },
          end: {
            line: 134,
            column: 36
          }
        }, {
          start: {
            line: 134,
            column: 40
          },
          end: {
            line: 134,
            column: 57
          }
        }],
        line: 134
      },
      "22": {
        loc: {
          start: {
            line: 135,
            column: 26
          },
          end: {
            line: 135,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 135,
            column: 26
          },
          end: {
            line: 135,
            column: 38
          }
        }, {
          start: {
            line: 135,
            column: 42
          },
          end: {
            line: 135,
            column: 60
          }
        }],
        line: 135
      },
      "23": {
        loc: {
          start: {
            line: 136,
            column: 27
          },
          end: {
            line: 136,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 136,
            column: 27
          },
          end: {
            line: 136,
            column: 40
          }
        }, {
          start: {
            line: 136,
            column: 44
          },
          end: {
            line: 136,
            column: 46
          }
        }],
        line: 136
      },
      "24": {
        loc: {
          start: {
            line: 137,
            column: 25
          },
          end: {
            line: 137,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 137,
            column: 25
          },
          end: {
            line: 137,
            column: 36
          }
        }, {
          start: {
            line: 137,
            column: 40
          },
          end: {
            line: 137,
            column: 42
          }
        }],
        line: 137
      },
      "25": {
        loc: {
          start: {
            line: 139,
            column: 29
          },
          end: {
            line: 139,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 139,
            column: 29
          },
          end: {
            line: 139,
            column: 44
          }
        }, {
          start: {
            line: 139,
            column: 48
          },
          end: {
            line: 139,
            column: 50
          }
        }],
        line: 139
      },
      "26": {
        loc: {
          start: {
            line: 140,
            column: 30
          },
          end: {
            line: 140,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 140,
            column: 64
          },
          end: {
            line: 140,
            column: 80
          }
        }, {
          start: {
            line: 140,
            column: 83
          },
          end: {
            line: 140,
            column: 85
          }
        }],
        line: 140
      },
      "27": {
        loc: {
          start: {
            line: 141,
            column: 30
          },
          end: {
            line: 141,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 141,
            column: 64
          },
          end: {
            line: 141,
            column: 80
          }
        }, {
          start: {
            line: 141,
            column: 83
          },
          end: {
            line: 141,
            column: 85
          }
        }],
        line: 141
      },
      "28": {
        loc: {
          start: {
            line: 143,
            column: 23
          },
          end: {
            line: 151,
            column: 20
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 143,
            column: 61
          },
          end: {
            line: 151,
            column: 15
          }
        }, {
          start: {
            line: 151,
            column: 18
          },
          end: {
            line: 151,
            column: 20
          }
        }],
        line: 143
      },
      "29": {
        loc: {
          start: {
            line: 144,
            column: 29
          },
          end: {
            line: 144,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 144,
            column: 29
          },
          end: {
            line: 144,
            column: 44
          }
        }, {
          start: {
            line: 144,
            column: 48
          },
          end: {
            line: 144,
            column: 69
          }
        }],
        line: 144
      },
      "30": {
        loc: {
          start: {
            line: 145,
            column: 24
          },
          end: {
            line: 145,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 145,
            column: 24
          },
          end: {
            line: 145,
            column: 34
          }
        }, {
          start: {
            line: 145,
            column: 38
          },
          end: {
            line: 145,
            column: 46
          }
        }],
        line: 145
      },
      "31": {
        loc: {
          start: {
            line: 146,
            column: 23
          },
          end: {
            line: 146,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 146,
            column: 23
          },
          end: {
            line: 146,
            column: 32
          }
        }, {
          start: {
            line: 146,
            column: 36
          },
          end: {
            line: 146,
            column: 52
          }
        }],
        line: 146
      },
      "32": {
        loc: {
          start: {
            line: 147,
            column: 27
          },
          end: {
            line: 147,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 147,
            column: 27
          },
          end: {
            line: 147,
            column: 40
          }
        }, {
          start: {
            line: 147,
            column: 44
          },
          end: {
            line: 147,
            column: 46
          }
        }],
        line: 147
      },
      "33": {
        loc: {
          start: {
            line: 148,
            column: 25
          },
          end: {
            line: 148,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 148,
            column: 25
          },
          end: {
            line: 148,
            column: 36
          }
        }, {
          start: {
            line: 148,
            column: 40
          },
          end: {
            line: 148,
            column: 42
          }
        }],
        line: 148
      },
      "34": {
        loc: {
          start: {
            line: 149,
            column: 21
          },
          end: {
            line: 149,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 149,
            column: 51
          },
          end: {
            line: 149,
            column: 58
          }
        }, {
          start: {
            line: 149,
            column: 61
          },
          end: {
            line: 149,
            column: 70
          }
        }],
        line: 149
      },
      "35": {
        loc: {
          start: {
            line: 150,
            column: 29
          },
          end: {
            line: 150,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 150,
            column: 29
          },
          end: {
            line: 150,
            column: 44
          }
        }, {
          start: {
            line: 150,
            column: 48
          },
          end: {
            line: 150,
            column: 50
          }
        }],
        line: 150
      },
      "36": {
        loc: {
          start: {
            line: 152,
            column: 22
          },
          end: {
            line: 160,
            column: 20
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 152,
            column: 59
          },
          end: {
            line: 160,
            column: 15
          }
        }, {
          start: {
            line: 160,
            column: 18
          },
          end: {
            line: 160,
            column: 20
          }
        }],
        line: 152
      },
      "37": {
        loc: {
          start: {
            line: 153,
            column: 22
          },
          end: {
            line: 153,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 153,
            column: 22
          },
          end: {
            line: 153,
            column: 31
          }
        }, {
          start: {
            line: 153,
            column: 35
          },
          end: {
            line: 153,
            column: 44
          }
        }],
        line: 153
      },
      "38": {
        loc: {
          start: {
            line: 154,
            column: 29
          },
          end: {
            line: 154,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 154,
            column: 29
          },
          end: {
            line: 154,
            column: 45
          }
        }, {
          start: {
            line: 154,
            column: 49
          },
          end: {
            line: 154,
            column: 51
          }
        }],
        line: 154
      },
      "39": {
        loc: {
          start: {
            line: 155,
            column: 30
          },
          end: {
            line: 155,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 155,
            column: 65
          },
          end: {
            line: 155,
            column: 82
          }
        }, {
          start: {
            line: 155,
            column: 85
          },
          end: {
            line: 155,
            column: 87
          }
        }],
        line: 155
      },
      "40": {
        loc: {
          start: {
            line: 156,
            column: 21
          },
          end: {
            line: 156,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 156,
            column: 21
          },
          end: {
            line: 156,
            column: 29
          }
        }, {
          start: {
            line: 156,
            column: 33
          },
          end: {
            line: 156,
            column: 35
          }
        }],
        line: 156
      },
      "41": {
        loc: {
          start: {
            line: 157,
            column: 24
          },
          end: {
            line: 157,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 157,
            column: 24
          },
          end: {
            line: 157,
            column: 35
          }
        }, {
          start: {
            line: 157,
            column: 39
          },
          end: {
            line: 157,
            column: 41
          }
        }],
        line: 157
      },
      "42": {
        loc: {
          start: {
            line: 158,
            column: 27
          },
          end: {
            line: 158,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 158,
            column: 27
          },
          end: {
            line: 158,
            column: 41
          }
        }, {
          start: {
            line: 158,
            column: 45
          },
          end: {
            line: 158,
            column: 47
          }
        }],
        line: 158
      },
      "43": {
        loc: {
          start: {
            line: 159,
            column: 25
          },
          end: {
            line: 159,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 159,
            column: 25
          },
          end: {
            line: 159,
            column: 37
          }
        }, {
          start: {
            line: 159,
            column: 41
          },
          end: {
            line: 159,
            column: 43
          }
        }],
        line: 159
      },
      "44": {
        loc: {
          start: {
            line: 173,
            column: 14
          },
          end: {
            line: 173,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 173,
            column: 14
          },
          end: {
            line: 173,
            column: 25
          }
        }, {
          start: {
            line: 173,
            column: 29
          },
          end: {
            line: 173,
            column: 43
          }
        }, {
          start: {
            line: 173,
            column: 47
          },
          end: {
            line: 173,
            column: 49
          }
        }],
        line: 173
      },
      "45": {
        loc: {
          start: {
            line: 174,
            column: 15
          },
          end: {
            line: 174,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 174,
            column: 15
          },
          end: {
            line: 174,
            column: 27
          }
        }, {
          start: {
            line: 174,
            column: 31
          },
          end: {
            line: 174,
            column: 46
          }
        }, {
          start: {
            line: 174,
            column: 50
          },
          end: {
            line: 174,
            column: 52
          }
        }],
        line: 174
      },
      "46": {
        loc: {
          start: {
            line: 175,
            column: 15
          },
          end: {
            line: 175,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 175,
            column: 15
          },
          end: {
            line: 175,
            column: 27
          }
        }, {
          start: {
            line: 175,
            column: 31
          },
          end: {
            line: 175,
            column: 46
          }
        }, {
          start: {
            line: 175,
            column: 50
          },
          end: {
            line: 175,
            column: 52
          }
        }],
        line: 175
      },
      "47": {
        loc: {
          start: {
            line: 176,
            column: 17
          },
          end: {
            line: 176,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 176,
            column: 17
          },
          end: {
            line: 176,
            column: 31
          }
        }, {
          start: {
            line: 176,
            column: 35
          },
          end: {
            line: 176,
            column: 37
          }
        }],
        line: 176
      },
      "48": {
        loc: {
          start: {
            line: 178,
            column: 20
          },
          end: {
            line: 178,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 178,
            column: 51
          },
          end: {
            line: 178,
            column: 68
          }
        }, {
          start: {
            line: 178,
            column: 71
          },
          end: {
            line: 178,
            column: 91
          }
        }],
        line: 178
      },
      "49": {
        loc: {
          start: {
            line: 179,
            column: 19
          },
          end: {
            line: 179,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 179,
            column: 49
          },
          end: {
            line: 179,
            column: 65
          }
        }, {
          start: {
            line: 179,
            column: 68
          },
          end: {
            line: 179,
            column: 87
          }
        }],
        line: 179
      },
      "50": {
        loc: {
          start: {
            line: 180,
            column: 18
          },
          end: {
            line: 180,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 180,
            column: 18
          },
          end: {
            line: 180,
            column: 33
          }
        }, {
          start: {
            line: 180,
            column: 37
          },
          end: {
            line: 180,
            column: 39
          }
        }],
        line: 180
      },
      "51": {
        loc: {
          start: {
            line: 363,
            column: 26
          },
          end: {
            line: 363,
            column: 136
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 363,
            column: 27
          },
          end: {
            line: 363,
            column: 127
          }
        }, {
          start: {
            line: 363,
            column: 132
          },
          end: {
            line: 363,
            column: 136
          }
        }],
        line: 363
      },
      "52": {
        loc: {
          start: {
            line: 363,
            column: 27
          },
          end: {
            line: 363,
            column: 127
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 363,
            column: 82
          },
          end: {
            line: 363,
            column: 88
          }
        }, {
          start: {
            line: 363,
            column: 91
          },
          end: {
            line: 363,
            column: 127
          }
        }],
        line: 363
      },
      "53": {
        loc: {
          start: {
            line: 363,
            column: 27
          },
          end: {
            line: 363,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 363,
            column: 27
          },
          end: {
            line: 363,
            column: 62
          }
        }, {
          start: {
            line: 363,
            column: 66
          },
          end: {
            line: 363,
            column: 79
          }
        }],
        line: 363
      },
      "54": {
        loc: {
          start: {
            line: 393,
            column: 12
          },
          end: {
            line: 393,
            column: 134
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 393,
            column: 13
          },
          end: {
            line: 393,
            column: 113
          }
        }, {
          start: {
            line: 393,
            column: 118
          },
          end: {
            line: 393,
            column: 134
          }
        }],
        line: 393
      },
      "55": {
        loc: {
          start: {
            line: 393,
            column: 13
          },
          end: {
            line: 393,
            column: 113
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 393,
            column: 68
          },
          end: {
            line: 393,
            column: 74
          }
        }, {
          start: {
            line: 393,
            column: 77
          },
          end: {
            line: 393,
            column: 113
          }
        }],
        line: 393
      },
      "56": {
        loc: {
          start: {
            line: 393,
            column: 13
          },
          end: {
            line: 393,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 393,
            column: 13
          },
          end: {
            line: 393,
            column: 48
          }
        }, {
          start: {
            line: 393,
            column: 52
          },
          end: {
            line: 393,
            column: 65
          }
        }],
        line: 393
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0, 0],
      "45": [0, 0, 0],
      "46": [0, 0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/utils/resume-parser.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/utils/resume-parser.ts"],
      sourcesContent: ["import { WorkExperience, Education, Project } from '../services/azure-ai-service';\nimport { migrationOpenAIClient } from '@/lib/azure-ai-foundry/clients/migration-wrapper';\nimport { azureOpenAIService } from '../services/azure-openai-service';\nimport { templateEngine } from '@/lib/utils/template-engine';\nimport path from 'path';\n\nexport interface ParsedResumeData {\n  name?: string;\n  email?: string;\n  phone?: string;\n  skills: string[];\n  experience: WorkExperience[];\n  education: Education[];\n  projects?: Project[];\n  summary?: string;\n}\n\n/**\n * Enhanced resume parsing using both regex and AI\n */\nexport async function parseResumeText(text: string): Promise<ParsedResumeData> {\n  try {\n    // First, try basic regex extraction\n    const basicData = extractBasicInfo(text);\n    \n    // Then, enhance with AI-powered extraction\n    const aiEnhancedData = await extractWithAI(text);\n    \n    // Merge the results, preferring AI data when available\n    return mergeResumeData(basicData, aiEnhancedData);\n  } catch (error) {\n    console.error('Error parsing resume:', error);\n    // Fallback to basic regex parsing\n    return extractBasicInfo(text);\n  }\n}\n\n/**\n * Basic regex-based extraction (fallback)\n */\nfunction extractBasicInfo(text: string): ParsedResumeData {\n  // Extract name (improved patterns)\n  const namePatterns = [\n    /(?:Name[:\\s]+)([A-Z][a-zA-Z]+(?:\\s[A-Z][a-zA-Z]+)*)/i,\n    /^([A-Z][a-zA-Z]+(?:\\s[A-Z][a-zA-Z]+)+)/m, // First line name pattern\n    /([A-Z][a-zA-Z]+\\s+[A-Z][a-zA-Z]+)(?:\\s*\\n|\\s*$)/m, // Two-word name pattern\n  ];\n  \n  let name = '';\n  for (const pattern of namePatterns) {\n    const match = text.match(pattern);\n    if (match) {\n      name = match[1].trim();\n      break;\n    }\n  }\n\n  // Extract email\n  const emailMatch = text.match(/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/);\n  const email = emailMatch ? emailMatch[1] : '';\n\n  // Extract phone\n  const phonePatterns = [\n    /(?:Phone|Tel|Mobile)[:\\s]*([+]?[\\d\\s\\-\\(\\)]{10,})/i,\n    /([+]?[\\d\\s\\-\\(\\)]{10,})(?=\\s|$)/,\n  ];\n  \n  let phone = '';\n  for (const pattern of phonePatterns) {\n    const match = text.match(pattern);\n    if (match) {\n      phone = match[1].trim();\n      break;\n    }\n  }\n\n  // Extract skills with improved patterns\n  const skillsMatch = text.match(/(?:Skills?|Technical Skills?|Core Competencies)[:\\s]*([^]*?)(?=\\n\\s*[A-Z][^:]*:|$)/i);\n  let skills: string[] = [];\n  \n  if (skillsMatch) {\n    skills = skillsMatch[1]\n      .replace(/[\u2022\\-\\*]/g, ',') // Replace bullets with commas\n      .split(/[,\\n]/)\n      .map(skill => skill.trim())\n      .filter(skill => skill.length > 0 && skill.length < 50)\n      .slice(0, 20); // Limit to 20 skills\n  }\n\n  // Extract experience (basic)\n  const experienceMatch = text.match(/(?:Experience|Work Experience|Employment)[:\\s]*([^]*?)(?=\\n\\s*(?:Education|Skills?|Projects?)[:\\s]|$)/i);\n  let experience: WorkExperience[] = [];\n  \n  if (experienceMatch) {\n    const expText = experienceMatch[1];\n    // Try to extract company names and positions (basic pattern)\n    const jobMatches = expText.match(/([A-Z][^,\\n]+(?:Inc\\.|Corp\\.|LLC|Ltd\\.|Company))[,\\s]*([^,\\n]+)/g);\n    \n    if (jobMatches) {\n      experience = jobMatches.slice(0, 5).map(match => {\n        const [company, position = ''] = match.split(/[,\\n]/).map(s => s.trim());\n        return {\n          company: company || 'Unknown Company',\n          position: position || 'Unknown Position',\n          description: expText.substring(0, 200), // First 200 chars as description\n        };\n      });\n    }\n  }\n\n  // Extract education (basic)\n  const educationMatch = text.match(/(?:Education|Academic Background)[:\\s]*([^]*?)(?=\\n\\s*(?:Experience|Skills?|Projects?)[:\\s]|$)/i);\n  let education: Education[] = [];\n  \n  if (educationMatch) {\n    const eduText = educationMatch[1];\n    const universityMatch = eduText.match(/([^,\\n]*(?:University|College|Institute|School))[,\\s]*([^,\\n]*)/i);\n    \n    if (universityMatch) {\n      education = [{\n        institution: universityMatch[1].trim(),\n        degree: universityMatch[2]?.trim() || 'Degree',\n        field: 'Field of Study',\n      }];\n    }\n  }\n\n  return {\n    name,\n    email,\n    phone,\n    skills,\n    experience,\n    education,\n    projects: [], // Will be enhanced by AI\n  };\n}\n\n/**\n * AI-powered extraction using Azure OpenAI\n */\nasync function extractWithAI(text: string): Promise<ParsedResumeData> {\n  try {\n    // Ensure Azure OpenAI service is initialized\n    await azureOpenAIService.initialize();\n    \n    // Try to use template engine for resume extraction prompt\n    const prompt = buildExtractionPromptWithTemplate(text);\n\n    const response = await azureOpenAIService.generateCompletion(prompt);\n    const jsonText = response.trim();\n    \n    // Try to parse the JSON response\n    const parsedData = JSON.parse(jsonText);\n    \n    // Validate and clean the data\n    return {\n      name: parsedData.name || '',\n      email: parsedData.email || '',\n      phone: parsedData.phone || '',\n      summary: parsedData.summary || '',\n      skills: Array.isArray(parsedData.skills) ? parsedData.skills.slice(0, 30) : [],\n      experience: Array.isArray(parsedData.experience) ? parsedData.experience.slice(0, 10).map((exp: any) => ({\n        company: exp.company || 'Unknown Company',\n        position: exp.position || 'Unknown Position',\n        startDate: exp.startDate || '',\n        endDate: exp.endDate || '',\n        isCurrent: Boolean(exp.isCurrent),\n        description: exp.description || '',\n        achievements: Array.isArray(exp.achievements) ? exp.achievements : [],\n        technologies: Array.isArray(exp.technologies) ? exp.technologies : [],\n      })) : [],\n      education: Array.isArray(parsedData.education) ? parsedData.education.slice(0, 5).map((edu: any) => ({\n        institution: edu.institution || 'Unknown Institution',\n        degree: edu.degree || 'Degree',\n        field: edu.field || 'Field of Study',\n        startDate: edu.startDate || '',\n        endDate: edu.endDate || '',\n        gpa: typeof edu.gpa === 'number' ? edu.gpa : undefined,\n        description: edu.description || '',\n      })) : [],\n      projects: Array.isArray(parsedData.projects) ? parsedData.projects.slice(0, 10).map((proj: any) => ({\n        name: proj.name || 'Project',\n        description: proj.description || '',\n        technologies: Array.isArray(proj.technologies) ? proj.technologies : [],\n        url: proj.url || '',\n        github: proj.github || '',\n        startDate: proj.startDate || '',\n        endDate: proj.endDate || '',\n      })) : [],\n    };\n    \n  } catch (error) {\n    console.error('AI extraction failed:', error);\n    throw error;\n  }\n}\n\n/**\n * Merge basic regex data with AI-enhanced data\n */\nfunction mergeResumeData(basicData: ParsedResumeData, aiData: ParsedResumeData): ParsedResumeData {\n  return {\n    name: aiData.name || basicData.name || '',\n    email: aiData.email || basicData.email || '',\n    phone: aiData.phone || basicData.phone || '',\n    summary: aiData.summary || '',\n    skills: [...new Set([...basicData.skills, ...aiData.skills])].slice(0, 30), // Merge and dedupe\n    experience: aiData.experience.length > 0 ? aiData.experience : basicData.experience,\n    education: aiData.education.length > 0 ? aiData.education : basicData.education,\n    projects: aiData.projects || [],\n  };\n}\n\n/**\n * Build extraction prompt using template engine\n */\nfunction buildExtractionPromptWithTemplate(text: string): string {\n  try {\n    // Use simple inline template for resume extraction\n    const template = `Extract structured information from this resume text and return it in valid JSON format.\n\n{{#if format_instructions}}\n**Format Instructions:**\n{{format_instructions}}\n{{/if}}\n\n{{#if extraction_rules}}\n**Rules:**\n{{#each extraction_rules}}\n- {{@value}}\n{{/each}}\n{{/if}}\n\n**Resume Text:**\n{{resume_text}}`;\n\n    const context = {\n      format_instructions: `Follow this exact JSON structure:\\n{\n  \"name\": \"Full Name\",\n  \"email\": \"email@example.com\",\n  \"phone\": \"phone number\",\n  \"summary\": \"Professional summary or objective\",\n  \"skills\": [\"skill1\", \"skill2\", \"skill3\"],\n  \"experience\": [...],\n  \"education\": [...],\n  \"projects\": [...]\n}`,\n      extraction_rules: [\n        'Return ONLY valid JSON, no other text',\n        'If information is not available, use null or empty array',\n        'Extract actual data, don\\'t make up information',\n        'For dates, use the format found in resume or standardize to MM/YYYY',\n        'For current positions, set isCurrent to true and endDate to null',\n        'Extract all skills mentioned (technical, soft skills, tools, technologies)',\n        'Include quantifiable achievements where mentioned'\n      ],\n      resume_text: text\n    };\n\n    return templateEngine.render(template, context);\n  } catch (error) {\n    console.warn('\u26A0\uFE0F Template engine failed for resume extraction, using legacy prompt:', error);\n    return buildExtractionPromptLegacy(text);\n  }\n}\n\n/**\n * Legacy extraction prompt (fallback)\n */\nfunction buildExtractionPromptLegacy(text: string): string {\n  return `\nExtract structured information from this resume text and return it in valid JSON format. Follow this exact structure:\n\n{\n  \"name\": \"Full Name\",\n  \"email\": \"email@example.com\",\n  \"phone\": \"phone number\",\n  \"summary\": \"Professional summary or objective\",\n  \"skills\": [\"skill1\", \"skill2\", \"skill3\"],\n  \"experience\": [\n    {\n      \"company\": \"Company Name\",\n      \"position\": \"Job Title\",\n      \"startDate\": \"MM/YYYY or YYYY\",\n      \"endDate\": \"MM/YYYY or YYYY or Present\",\n      \"isCurrent\": false,\n      \"description\": \"Job description\",\n      \"achievements\": [\"achievement1\", \"achievement2\"],\n      \"technologies\": [\"tech1\", \"tech2\"]\n    }\n  ],\n  \"education\": [\n    {\n      \"institution\": \"School Name\",\n      \"degree\": \"Degree Type\",\n      \"field\": \"Field of Study\",\n      \"startDate\": \"YYYY\",\n      \"endDate\": \"YYYY\",\n      \"gpa\": 3.5\n    }\n  ],\n  \"projects\": [\n    {\n      \"name\": \"Project Name\",\n      \"description\": \"Project description\",\n      \"technologies\": [\"tech1\", \"tech2\"],\n      \"url\": \"project-url\",\n      \"github\": \"github-url\"\n    }\n  ]\n}\n\nRules:\n- Return ONLY valid JSON, no other text\n- If information is not available, use null or empty array\n- Extract actual data, don't make up information\n- For dates, use the format found in resume or standardize to MM/YYYY\n- For current positions, set isCurrent to true and endDate to null\n- Extract all skills mentioned (technical, soft skills, tools, technologies)\n- Include quantifiable achievements where mentioned\n\nResume text:\n${text}\n`;\n}\n\n/**\n * Generate interview questions using template engine\n */\nexport async function generateInterviewQuestions(resumeData: ParsedResumeData): Promise<string[]> {\n  try {\n    // Ensure Azure OpenAI service is initialized\n    await azureOpenAIService.initialize();\n    \n    const prompt = buildQuestionGenerationPrompt(resumeData);\n    const questionsText = await azureOpenAIService.generateCompletion(prompt);\n    \n    const questions = questionsText\n      .split('\\n')\n      .map(q => q.trim())\n      .filter(q => q.length > 0)\n      .map(q => q.replace(/^\\d+\\.?\\s*/, '')) // Remove numbering\n      .filter(q => q.length > 10) // Filter out very short responses\n      .slice(0, 10); // Limit to 10 questions\n\n    return questions;\n  } catch (error) {\n    console.error('Error generating interview questions:', error);\n    // Return default questions as fallback\n    return [\n      'Tell me about yourself and your background.',\n      'What interests you most about this position?',\n      'Describe your experience with the technologies mentioned in your resume.',\n      'Tell me about a challenging project you worked on.',\n      'How do you stay updated with new technologies in your field?',\n      'Describe a time when you had to work under pressure.',\n      'What are your career goals for the next few years?',\n      'How do you approach problem-solving in your work?'\n    ];\n  }\n}\n\n/**\n * Build question generation prompt using template engine\n */\nfunction buildQuestionGenerationPrompt(resumeData: ParsedResumeData): string {\n  try {\n    const template = `Based on the resume information below, generate 8-10 relevant interview questions.\n\n**Focus Areas:**\n{{#each focus_areas}}\n- {{@value}}\n{{/each}}\n\n**Candidate Information:**\n- Name: {{candidate.name}}\n- Skills: {{candidate.skills}}\n- Experience: {{candidate.experience}}\n- Education: {{candidate.education}}\n{{#if candidate.projects}}\n- Projects: {{candidate.projects}}\n{{/if}}\n\n**Instructions:**\nReturn only the questions, one per line, numbered 1-10. No additional text or explanations.`;\n\n    const context = {\n      focus_areas: [\n        'Technical skills mentioned',\n        'Work experience and achievements',\n        'Projects and technologies used',\n        'Career progression and goals',\n        'Behavioral questions based on their background'\n      ],\n      candidate: {\n        name: resumeData.name,\n        skills: resumeData.skills.join(', '),\n        experience: resumeData.experience.map(exp => `${exp.position} at ${exp.company}`).join('; '),\n        education: resumeData.education.map(edu => `${edu.degree} in ${edu.field} from ${edu.institution}`).join('; '),\n        projects: resumeData.projects?.map(proj => proj.name).join(', ') || null\n      }\n    };\n\n    return templateEngine.render(template, context);\n  } catch (error) {\n    console.warn('\u26A0\uFE0F Template engine failed for question generation, using legacy prompt:', error);\n    return buildQuestionGenerationPromptLegacy(resumeData);\n  }\n}\n\n/**\n * Legacy question generation prompt (fallback)\n */\nfunction buildQuestionGenerationPromptLegacy(resumeData: ParsedResumeData): string {\n  return `\nBased on the following resume information, generate 8-10 relevant interview questions that would be appropriate for this candidate. \n\nFocus on:\n- Technical skills mentioned\n- Work experience and achievements\n- Projects and technologies used\n- Career progression and goals\n- Behavioral questions based on their background\n\nResume Information:\nName: ${resumeData.name}\nSkills: ${resumeData.skills.join(', ')}\nExperience: ${resumeData.experience.map(exp => `${exp.position} at ${exp.company}`).join('; ')}\nEducation: ${resumeData.education.map(edu => `${edu.degree} in ${edu.field} from ${edu.institution}`).join('; ')}\nProjects: ${resumeData.projects?.map(proj => proj.name).join(', ') || 'None mentioned'}\n\nReturn only the questions, one per line, numbered 1-10. No additional text or explanations.\n`;\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "72e71da70dd1fc2654f0f026dfc118714020bfad"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1pxl161w72 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1pxl161w72();
cov_1pxl161w72().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1pxl161w72().s[1]++;
exports.parseResumeText = parseResumeText;
/* istanbul ignore next */
cov_1pxl161w72().s[2]++;
exports.generateInterviewQuestions = generateInterviewQuestions;
const azure_openai_service_1 =
/* istanbul ignore next */
(cov_1pxl161w72().s[3]++, require("../services/azure-openai-service"));
const template_engine_1 =
/* istanbul ignore next */
(cov_1pxl161w72().s[4]++, require("@/lib/utils/template-engine"));
/**
 * Enhanced resume parsing using both regex and AI
 */
async function parseResumeText(text) {
  /* istanbul ignore next */
  cov_1pxl161w72().f[0]++;
  cov_1pxl161w72().s[5]++;
  try {
    // First, try basic regex extraction
    const basicData =
    /* istanbul ignore next */
    (cov_1pxl161w72().s[6]++, extractBasicInfo(text));
    // Then, enhance with AI-powered extraction
    const aiEnhancedData =
    /* istanbul ignore next */
    (cov_1pxl161w72().s[7]++, await extractWithAI(text));
    // Merge the results, preferring AI data when available
    /* istanbul ignore next */
    cov_1pxl161w72().s[8]++;
    return mergeResumeData(basicData, aiEnhancedData);
  } catch (error) {
    /* istanbul ignore next */
    cov_1pxl161w72().s[9]++;
    console.error('Error parsing resume:', error);
    // Fallback to basic regex parsing
    /* istanbul ignore next */
    cov_1pxl161w72().s[10]++;
    return extractBasicInfo(text);
  }
}
/**
 * Basic regex-based extraction (fallback)
 */
function extractBasicInfo(text) {
  /* istanbul ignore next */
  cov_1pxl161w72().f[1]++;
  var _a;
  // Extract name (improved patterns)
  const namePatterns =
  /* istanbul ignore next */
  (cov_1pxl161w72().s[11]++, [/(?:Name[:\s]+)([A-Z][a-zA-Z]+(?:\s[A-Z][a-zA-Z]+)*)/i, /^([A-Z][a-zA-Z]+(?:\s[A-Z][a-zA-Z]+)+)/m,
  // First line name pattern
  /([A-Z][a-zA-Z]+\s+[A-Z][a-zA-Z]+)(?:\s*\n|\s*$)/m // Two-word name pattern
  ]);
  let name =
  /* istanbul ignore next */
  (cov_1pxl161w72().s[12]++, '');
  /* istanbul ignore next */
  cov_1pxl161w72().s[13]++;
  for (const pattern of namePatterns) {
    const match =
    /* istanbul ignore next */
    (cov_1pxl161w72().s[14]++, text.match(pattern));
    /* istanbul ignore next */
    cov_1pxl161w72().s[15]++;
    if (match) {
      /* istanbul ignore next */
      cov_1pxl161w72().b[0][0]++;
      cov_1pxl161w72().s[16]++;
      name = match[1].trim();
      /* istanbul ignore next */
      cov_1pxl161w72().s[17]++;
      break;
    } else
    /* istanbul ignore next */
    {
      cov_1pxl161w72().b[0][1]++;
    }
  }
  // Extract email
  const emailMatch =
  /* istanbul ignore next */
  (cov_1pxl161w72().s[18]++, text.match(/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/));
  const email =
  /* istanbul ignore next */
  (cov_1pxl161w72().s[19]++, emailMatch ?
  /* istanbul ignore next */
  (cov_1pxl161w72().b[1][0]++, emailMatch[1]) :
  /* istanbul ignore next */
  (cov_1pxl161w72().b[1][1]++, ''));
  // Extract phone
  const phonePatterns =
  /* istanbul ignore next */
  (cov_1pxl161w72().s[20]++, [/(?:Phone|Tel|Mobile)[:\s]*([+]?[\d\s\-\(\)]{10,})/i, /([+]?[\d\s\-\(\)]{10,})(?=\s|$)/]);
  let phone =
  /* istanbul ignore next */
  (cov_1pxl161w72().s[21]++, '');
  /* istanbul ignore next */
  cov_1pxl161w72().s[22]++;
  for (const pattern of phonePatterns) {
    const match =
    /* istanbul ignore next */
    (cov_1pxl161w72().s[23]++, text.match(pattern));
    /* istanbul ignore next */
    cov_1pxl161w72().s[24]++;
    if (match) {
      /* istanbul ignore next */
      cov_1pxl161w72().b[2][0]++;
      cov_1pxl161w72().s[25]++;
      phone = match[1].trim();
      /* istanbul ignore next */
      cov_1pxl161w72().s[26]++;
      break;
    } else
    /* istanbul ignore next */
    {
      cov_1pxl161w72().b[2][1]++;
    }
  }
  // Extract skills with improved patterns
  const skillsMatch =
  /* istanbul ignore next */
  (cov_1pxl161w72().s[27]++, text.match(/(?:Skills?|Technical Skills?|Core Competencies)[:\s]*([^]*?)(?=\n\s*[A-Z][^:]*:|$)/i));
  let skills =
  /* istanbul ignore next */
  (cov_1pxl161w72().s[28]++, []);
  /* istanbul ignore next */
  cov_1pxl161w72().s[29]++;
  if (skillsMatch) {
    /* istanbul ignore next */
    cov_1pxl161w72().b[3][0]++;
    cov_1pxl161w72().s[30]++;
    skills = skillsMatch[1].replace(/[•\-\*]/g, ',') // Replace bullets with commas
    .split(/[,\n]/).map(skill => {
      /* istanbul ignore next */
      cov_1pxl161w72().f[2]++;
      cov_1pxl161w72().s[31]++;
      return skill.trim();
    }).filter(skill => {
      /* istanbul ignore next */
      cov_1pxl161w72().f[3]++;
      cov_1pxl161w72().s[32]++;
      return /* istanbul ignore next */(cov_1pxl161w72().b[4][0]++, skill.length > 0) &&
      /* istanbul ignore next */
      (cov_1pxl161w72().b[4][1]++, skill.length < 50);
    }).slice(0, 20); // Limit to 20 skills
  } else
  /* istanbul ignore next */
  {
    cov_1pxl161w72().b[3][1]++;
  }
  // Extract experience (basic)
  const experienceMatch =
  /* istanbul ignore next */
  (cov_1pxl161w72().s[33]++, text.match(/(?:Experience|Work Experience|Employment)[:\s]*([^]*?)(?=\n\s*(?:Education|Skills?|Projects?)[:\s]|$)/i));
  let experience =
  /* istanbul ignore next */
  (cov_1pxl161w72().s[34]++, []);
  /* istanbul ignore next */
  cov_1pxl161w72().s[35]++;
  if (experienceMatch) {
    /* istanbul ignore next */
    cov_1pxl161w72().b[5][0]++;
    const expText =
    /* istanbul ignore next */
    (cov_1pxl161w72().s[36]++, experienceMatch[1]);
    // Try to extract company names and positions (basic pattern)
    const jobMatches =
    /* istanbul ignore next */
    (cov_1pxl161w72().s[37]++, expText.match(/([A-Z][^,\n]+(?:Inc\.|Corp\.|LLC|Ltd\.|Company))[,\s]*([^,\n]+)/g));
    /* istanbul ignore next */
    cov_1pxl161w72().s[38]++;
    if (jobMatches) {
      /* istanbul ignore next */
      cov_1pxl161w72().b[6][0]++;
      cov_1pxl161w72().s[39]++;
      experience = jobMatches.slice(0, 5).map(match => {
        /* istanbul ignore next */
        cov_1pxl161w72().f[4]++;
        const [company, position =
        /* istanbul ignore next */
        (cov_1pxl161w72().b[7][0]++, '')] =
        /* istanbul ignore next */
        (cov_1pxl161w72().s[40]++, match.split(/[,\n]/).map(s => {
          /* istanbul ignore next */
          cov_1pxl161w72().f[5]++;
          cov_1pxl161w72().s[41]++;
          return s.trim();
        }));
        /* istanbul ignore next */
        cov_1pxl161w72().s[42]++;
        return {
          company:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[8][0]++, company) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[8][1]++, 'Unknown Company'),
          position:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[9][0]++, position) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[9][1]++, 'Unknown Position'),
          description: expText.substring(0, 200) // First 200 chars as description
        };
      });
    } else
    /* istanbul ignore next */
    {
      cov_1pxl161w72().b[6][1]++;
    }
  } else
  /* istanbul ignore next */
  {
    cov_1pxl161w72().b[5][1]++;
  }
  // Extract education (basic)
  const educationMatch =
  /* istanbul ignore next */
  (cov_1pxl161w72().s[43]++, text.match(/(?:Education|Academic Background)[:\s]*([^]*?)(?=\n\s*(?:Experience|Skills?|Projects?)[:\s]|$)/i));
  let education =
  /* istanbul ignore next */
  (cov_1pxl161w72().s[44]++, []);
  /* istanbul ignore next */
  cov_1pxl161w72().s[45]++;
  if (educationMatch) {
    /* istanbul ignore next */
    cov_1pxl161w72().b[10][0]++;
    const eduText =
    /* istanbul ignore next */
    (cov_1pxl161w72().s[46]++, educationMatch[1]);
    const universityMatch =
    /* istanbul ignore next */
    (cov_1pxl161w72().s[47]++, eduText.match(/([^,\n]*(?:University|College|Institute|School))[,\s]*([^,\n]*)/i));
    /* istanbul ignore next */
    cov_1pxl161w72().s[48]++;
    if (universityMatch) {
      /* istanbul ignore next */
      cov_1pxl161w72().b[11][0]++;
      cov_1pxl161w72().s[49]++;
      education = [{
        institution: universityMatch[1].trim(),
        degree:
        /* istanbul ignore next */
        (cov_1pxl161w72().b[12][0]++,
        /* istanbul ignore next */
        (cov_1pxl161w72().b[14][0]++, (_a = universityMatch[2]) === null) ||
        /* istanbul ignore next */
        (cov_1pxl161w72().b[14][1]++, _a === void 0) ?
        /* istanbul ignore next */
        (cov_1pxl161w72().b[13][0]++, void 0) :
        /* istanbul ignore next */
        (cov_1pxl161w72().b[13][1]++, _a.trim())) ||
        /* istanbul ignore next */
        (cov_1pxl161w72().b[12][1]++, 'Degree'),
        field: 'Field of Study'
      }];
    } else
    /* istanbul ignore next */
    {
      cov_1pxl161w72().b[11][1]++;
    }
  } else
  /* istanbul ignore next */
  {
    cov_1pxl161w72().b[10][1]++;
  }
  cov_1pxl161w72().s[50]++;
  return {
    name,
    email,
    phone,
    skills,
    experience,
    education,
    projects: [] // Will be enhanced by AI
  };
}
/**
 * AI-powered extraction using Azure OpenAI
 */
async function extractWithAI(text) {
  /* istanbul ignore next */
  cov_1pxl161w72().f[6]++;
  cov_1pxl161w72().s[51]++;
  try {
    /* istanbul ignore next */
    cov_1pxl161w72().s[52]++;
    // Ensure Azure OpenAI service is initialized
    await azure_openai_service_1.azureOpenAIService.initialize();
    // Try to use template engine for resume extraction prompt
    const prompt =
    /* istanbul ignore next */
    (cov_1pxl161w72().s[53]++, buildExtractionPromptWithTemplate(text));
    const response =
    /* istanbul ignore next */
    (cov_1pxl161w72().s[54]++, await azure_openai_service_1.azureOpenAIService.generateCompletion(prompt));
    const jsonText =
    /* istanbul ignore next */
    (cov_1pxl161w72().s[55]++, response.trim());
    // Try to parse the JSON response
    const parsedData =
    /* istanbul ignore next */
    (cov_1pxl161w72().s[56]++, JSON.parse(jsonText));
    // Validate and clean the data
    /* istanbul ignore next */
    cov_1pxl161w72().s[57]++;
    return {
      name:
      /* istanbul ignore next */
      (cov_1pxl161w72().b[15][0]++, parsedData.name) ||
      /* istanbul ignore next */
      (cov_1pxl161w72().b[15][1]++, ''),
      email:
      /* istanbul ignore next */
      (cov_1pxl161w72().b[16][0]++, parsedData.email) ||
      /* istanbul ignore next */
      (cov_1pxl161w72().b[16][1]++, ''),
      phone:
      /* istanbul ignore next */
      (cov_1pxl161w72().b[17][0]++, parsedData.phone) ||
      /* istanbul ignore next */
      (cov_1pxl161w72().b[17][1]++, ''),
      summary:
      /* istanbul ignore next */
      (cov_1pxl161w72().b[18][0]++, parsedData.summary) ||
      /* istanbul ignore next */
      (cov_1pxl161w72().b[18][1]++, ''),
      skills: Array.isArray(parsedData.skills) ?
      /* istanbul ignore next */
      (cov_1pxl161w72().b[19][0]++, parsedData.skills.slice(0, 30)) :
      /* istanbul ignore next */
      (cov_1pxl161w72().b[19][1]++, []),
      experience: Array.isArray(parsedData.experience) ?
      /* istanbul ignore next */
      (cov_1pxl161w72().b[20][0]++, parsedData.experience.slice(0, 10).map(exp => {
        /* istanbul ignore next */
        cov_1pxl161w72().f[7]++;
        cov_1pxl161w72().s[58]++;
        return {
          company:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[21][0]++, exp.company) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[21][1]++, 'Unknown Company'),
          position:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[22][0]++, exp.position) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[22][1]++, 'Unknown Position'),
          startDate:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[23][0]++, exp.startDate) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[23][1]++, ''),
          endDate:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[24][0]++, exp.endDate) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[24][1]++, ''),
          isCurrent: Boolean(exp.isCurrent),
          description:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[25][0]++, exp.description) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[25][1]++, ''),
          achievements: Array.isArray(exp.achievements) ?
          /* istanbul ignore next */
          (cov_1pxl161w72().b[26][0]++, exp.achievements) :
          /* istanbul ignore next */
          (cov_1pxl161w72().b[26][1]++, []),
          technologies: Array.isArray(exp.technologies) ?
          /* istanbul ignore next */
          (cov_1pxl161w72().b[27][0]++, exp.technologies) :
          /* istanbul ignore next */
          (cov_1pxl161w72().b[27][1]++, [])
        };
      })) :
      /* istanbul ignore next */
      (cov_1pxl161w72().b[20][1]++, []),
      education: Array.isArray(parsedData.education) ?
      /* istanbul ignore next */
      (cov_1pxl161w72().b[28][0]++, parsedData.education.slice(0, 5).map(edu => {
        /* istanbul ignore next */
        cov_1pxl161w72().f[8]++;
        cov_1pxl161w72().s[59]++;
        return {
          institution:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[29][0]++, edu.institution) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[29][1]++, 'Unknown Institution'),
          degree:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[30][0]++, edu.degree) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[30][1]++, 'Degree'),
          field:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[31][0]++, edu.field) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[31][1]++, 'Field of Study'),
          startDate:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[32][0]++, edu.startDate) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[32][1]++, ''),
          endDate:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[33][0]++, edu.endDate) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[33][1]++, ''),
          gpa: typeof edu.gpa === 'number' ?
          /* istanbul ignore next */
          (cov_1pxl161w72().b[34][0]++, edu.gpa) :
          /* istanbul ignore next */
          (cov_1pxl161w72().b[34][1]++, undefined),
          description:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[35][0]++, edu.description) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[35][1]++, '')
        };
      })) :
      /* istanbul ignore next */
      (cov_1pxl161w72().b[28][1]++, []),
      projects: Array.isArray(parsedData.projects) ?
      /* istanbul ignore next */
      (cov_1pxl161w72().b[36][0]++, parsedData.projects.slice(0, 10).map(proj => {
        /* istanbul ignore next */
        cov_1pxl161w72().f[9]++;
        cov_1pxl161w72().s[60]++;
        return {
          name:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[37][0]++, proj.name) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[37][1]++, 'Project'),
          description:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[38][0]++, proj.description) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[38][1]++, ''),
          technologies: Array.isArray(proj.technologies) ?
          /* istanbul ignore next */
          (cov_1pxl161w72().b[39][0]++, proj.technologies) :
          /* istanbul ignore next */
          (cov_1pxl161w72().b[39][1]++, []),
          url:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[40][0]++, proj.url) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[40][1]++, ''),
          github:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[41][0]++, proj.github) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[41][1]++, ''),
          startDate:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[42][0]++, proj.startDate) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[42][1]++, ''),
          endDate:
          /* istanbul ignore next */
          (cov_1pxl161w72().b[43][0]++, proj.endDate) ||
          /* istanbul ignore next */
          (cov_1pxl161w72().b[43][1]++, '')
        };
      })) :
      /* istanbul ignore next */
      (cov_1pxl161w72().b[36][1]++, [])
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_1pxl161w72().s[61]++;
    console.error('AI extraction failed:', error);
    /* istanbul ignore next */
    cov_1pxl161w72().s[62]++;
    throw error;
  }
}
/**
 * Merge basic regex data with AI-enhanced data
 */
function mergeResumeData(basicData, aiData) {
  /* istanbul ignore next */
  cov_1pxl161w72().f[10]++;
  cov_1pxl161w72().s[63]++;
  return {
    name:
    /* istanbul ignore next */
    (cov_1pxl161w72().b[44][0]++, aiData.name) ||
    /* istanbul ignore next */
    (cov_1pxl161w72().b[44][1]++, basicData.name) ||
    /* istanbul ignore next */
    (cov_1pxl161w72().b[44][2]++, ''),
    email:
    /* istanbul ignore next */
    (cov_1pxl161w72().b[45][0]++, aiData.email) ||
    /* istanbul ignore next */
    (cov_1pxl161w72().b[45][1]++, basicData.email) ||
    /* istanbul ignore next */
    (cov_1pxl161w72().b[45][2]++, ''),
    phone:
    /* istanbul ignore next */
    (cov_1pxl161w72().b[46][0]++, aiData.phone) ||
    /* istanbul ignore next */
    (cov_1pxl161w72().b[46][1]++, basicData.phone) ||
    /* istanbul ignore next */
    (cov_1pxl161w72().b[46][2]++, ''),
    summary:
    /* istanbul ignore next */
    (cov_1pxl161w72().b[47][0]++, aiData.summary) ||
    /* istanbul ignore next */
    (cov_1pxl161w72().b[47][1]++, ''),
    skills: [...new Set([...basicData.skills, ...aiData.skills])].slice(0, 30),
    // Merge and dedupe
    experience: aiData.experience.length > 0 ?
    /* istanbul ignore next */
    (cov_1pxl161w72().b[48][0]++, aiData.experience) :
    /* istanbul ignore next */
    (cov_1pxl161w72().b[48][1]++, basicData.experience),
    education: aiData.education.length > 0 ?
    /* istanbul ignore next */
    (cov_1pxl161w72().b[49][0]++, aiData.education) :
    /* istanbul ignore next */
    (cov_1pxl161w72().b[49][1]++, basicData.education),
    projects:
    /* istanbul ignore next */
    (cov_1pxl161w72().b[50][0]++, aiData.projects) ||
    /* istanbul ignore next */
    (cov_1pxl161w72().b[50][1]++, [])
  };
}
/**
 * Build extraction prompt using template engine
 */
function buildExtractionPromptWithTemplate(text) {
  /* istanbul ignore next */
  cov_1pxl161w72().f[11]++;
  cov_1pxl161w72().s[64]++;
  try {
    // Use simple inline template for resume extraction
    const template =
    /* istanbul ignore next */
    (cov_1pxl161w72().s[65]++, `Extract structured information from this resume text and return it in valid JSON format.

{{#if format_instructions}}
**Format Instructions:**
{{format_instructions}}
{{/if}}

{{#if extraction_rules}}
**Rules:**
{{#each extraction_rules}}
- {{@value}}
{{/each}}
{{/if}}

**Resume Text:**
{{resume_text}}`);
    const context =
    /* istanbul ignore next */
    (cov_1pxl161w72().s[66]++, {
      format_instructions: `Follow this exact JSON structure:\n{
  "name": "Full Name",
  "email": "email@example.com",
  "phone": "phone number",
  "summary": "Professional summary or objective",
  "skills": ["skill1", "skill2", "skill3"],
  "experience": [...],
  "education": [...],
  "projects": [...]
}`,
      extraction_rules: ['Return ONLY valid JSON, no other text', 'If information is not available, use null or empty array', 'Extract actual data, don\'t make up information', 'For dates, use the format found in resume or standardize to MM/YYYY', 'For current positions, set isCurrent to true and endDate to null', 'Extract all skills mentioned (technical, soft skills, tools, technologies)', 'Include quantifiable achievements where mentioned'],
      resume_text: text
    });
    /* istanbul ignore next */
    cov_1pxl161w72().s[67]++;
    return template_engine_1.templateEngine.render(template, context);
  } catch (error) {
    /* istanbul ignore next */
    cov_1pxl161w72().s[68]++;
    console.warn('⚠️ Template engine failed for resume extraction, using legacy prompt:', error);
    /* istanbul ignore next */
    cov_1pxl161w72().s[69]++;
    return buildExtractionPromptLegacy(text);
  }
}
/**
 * Legacy extraction prompt (fallback)
 */
function buildExtractionPromptLegacy(text) {
  /* istanbul ignore next */
  cov_1pxl161w72().f[12]++;
  cov_1pxl161w72().s[70]++;
  return `
Extract structured information from this resume text and return it in valid JSON format. Follow this exact structure:

{
  "name": "Full Name",
  "email": "email@example.com",
  "phone": "phone number",
  "summary": "Professional summary or objective",
  "skills": ["skill1", "skill2", "skill3"],
  "experience": [
    {
      "company": "Company Name",
      "position": "Job Title",
      "startDate": "MM/YYYY or YYYY",
      "endDate": "MM/YYYY or YYYY or Present",
      "isCurrent": false,
      "description": "Job description",
      "achievements": ["achievement1", "achievement2"],
      "technologies": ["tech1", "tech2"]
    }
  ],
  "education": [
    {
      "institution": "School Name",
      "degree": "Degree Type",
      "field": "Field of Study",
      "startDate": "YYYY",
      "endDate": "YYYY",
      "gpa": 3.5
    }
  ],
  "projects": [
    {
      "name": "Project Name",
      "description": "Project description",
      "technologies": ["tech1", "tech2"],
      "url": "project-url",
      "github": "github-url"
    }
  ]
}

Rules:
- Return ONLY valid JSON, no other text
- If information is not available, use null or empty array
- Extract actual data, don't make up information
- For dates, use the format found in resume or standardize to MM/YYYY
- For current positions, set isCurrent to true and endDate to null
- Extract all skills mentioned (technical, soft skills, tools, technologies)
- Include quantifiable achievements where mentioned

Resume text:
${text}
`;
}
/**
 * Generate interview questions using template engine
 */
async function generateInterviewQuestions(resumeData) {
  /* istanbul ignore next */
  cov_1pxl161w72().f[13]++;
  cov_1pxl161w72().s[71]++;
  try {
    /* istanbul ignore next */
    cov_1pxl161w72().s[72]++;
    // Ensure Azure OpenAI service is initialized
    await azure_openai_service_1.azureOpenAIService.initialize();
    const prompt =
    /* istanbul ignore next */
    (cov_1pxl161w72().s[73]++, buildQuestionGenerationPrompt(resumeData));
    const questionsText =
    /* istanbul ignore next */
    (cov_1pxl161w72().s[74]++, await azure_openai_service_1.azureOpenAIService.generateCompletion(prompt));
    const questions =
    /* istanbul ignore next */
    (cov_1pxl161w72().s[75]++, questionsText.split('\n').map(q => {
      /* istanbul ignore next */
      cov_1pxl161w72().f[14]++;
      cov_1pxl161w72().s[76]++;
      return q.trim();
    }).filter(q => {
      /* istanbul ignore next */
      cov_1pxl161w72().f[15]++;
      cov_1pxl161w72().s[77]++;
      return q.length > 0;
    }).map(q => {
      /* istanbul ignore next */
      cov_1pxl161w72().f[16]++;
      cov_1pxl161w72().s[78]++;
      return q.replace(/^\d+\.?\s*/, '');
    }) // Remove numbering
    .filter(q => {
      /* istanbul ignore next */
      cov_1pxl161w72().f[17]++;
      cov_1pxl161w72().s[79]++;
      return q.length > 10;
    }) // Filter out very short responses
    .slice(0, 10)); // Limit to 10 questions
    /* istanbul ignore next */
    cov_1pxl161w72().s[80]++;
    return questions;
  } catch (error) {
    /* istanbul ignore next */
    cov_1pxl161w72().s[81]++;
    console.error('Error generating interview questions:', error);
    // Return default questions as fallback
    /* istanbul ignore next */
    cov_1pxl161w72().s[82]++;
    return ['Tell me about yourself and your background.', 'What interests you most about this position?', 'Describe your experience with the technologies mentioned in your resume.', 'Tell me about a challenging project you worked on.', 'How do you stay updated with new technologies in your field?', 'Describe a time when you had to work under pressure.', 'What are your career goals for the next few years?', 'How do you approach problem-solving in your work?'];
  }
}
/**
 * Build question generation prompt using template engine
 */
function buildQuestionGenerationPrompt(resumeData) {
  /* istanbul ignore next */
  cov_1pxl161w72().f[18]++;
  var _a;
  /* istanbul ignore next */
  cov_1pxl161w72().s[83]++;
  try {
    const template =
    /* istanbul ignore next */
    (cov_1pxl161w72().s[84]++, `Based on the resume information below, generate 8-10 relevant interview questions.

**Focus Areas:**
{{#each focus_areas}}
- {{@value}}
{{/each}}

**Candidate Information:**
- Name: {{candidate.name}}
- Skills: {{candidate.skills}}
- Experience: {{candidate.experience}}
- Education: {{candidate.education}}
{{#if candidate.projects}}
- Projects: {{candidate.projects}}
{{/if}}

**Instructions:**
Return only the questions, one per line, numbered 1-10. No additional text or explanations.`);
    const context =
    /* istanbul ignore next */
    (cov_1pxl161w72().s[85]++, {
      focus_areas: ['Technical skills mentioned', 'Work experience and achievements', 'Projects and technologies used', 'Career progression and goals', 'Behavioral questions based on their background'],
      candidate: {
        name: resumeData.name,
        skills: resumeData.skills.join(', '),
        experience: resumeData.experience.map(exp => {
          /* istanbul ignore next */
          cov_1pxl161w72().f[19]++;
          cov_1pxl161w72().s[86]++;
          return `${exp.position} at ${exp.company}`;
        }).join('; '),
        education: resumeData.education.map(edu => {
          /* istanbul ignore next */
          cov_1pxl161w72().f[20]++;
          cov_1pxl161w72().s[87]++;
          return `${edu.degree} in ${edu.field} from ${edu.institution}`;
        }).join('; '),
        projects:
        /* istanbul ignore next */
        (cov_1pxl161w72().b[51][0]++,
        /* istanbul ignore next */
        (cov_1pxl161w72().b[53][0]++, (_a = resumeData.projects) === null) ||
        /* istanbul ignore next */
        (cov_1pxl161w72().b[53][1]++, _a === void 0) ?
        /* istanbul ignore next */
        (cov_1pxl161w72().b[52][0]++, void 0) :
        /* istanbul ignore next */
        (cov_1pxl161w72().b[52][1]++, _a.map(proj => {
          /* istanbul ignore next */
          cov_1pxl161w72().f[21]++;
          cov_1pxl161w72().s[88]++;
          return proj.name;
        }).join(', '))) ||
        /* istanbul ignore next */
        (cov_1pxl161w72().b[51][1]++, null)
      }
    });
    /* istanbul ignore next */
    cov_1pxl161w72().s[89]++;
    return template_engine_1.templateEngine.render(template, context);
  } catch (error) {
    /* istanbul ignore next */
    cov_1pxl161w72().s[90]++;
    console.warn('⚠️ Template engine failed for question generation, using legacy prompt:', error);
    /* istanbul ignore next */
    cov_1pxl161w72().s[91]++;
    return buildQuestionGenerationPromptLegacy(resumeData);
  }
}
/**
 * Legacy question generation prompt (fallback)
 */
function buildQuestionGenerationPromptLegacy(resumeData) {
  /* istanbul ignore next */
  cov_1pxl161w72().f[22]++;
  var _a;
  /* istanbul ignore next */
  cov_1pxl161w72().s[92]++;
  return `
Based on the following resume information, generate 8-10 relevant interview questions that would be appropriate for this candidate. 

Focus on:
- Technical skills mentioned
- Work experience and achievements
- Projects and technologies used
- Career progression and goals
- Behavioral questions based on their background

Resume Information:
Name: ${resumeData.name}
Skills: ${resumeData.skills.join(', ')}
Experience: ${resumeData.experience.map(exp => {
    /* istanbul ignore next */
    cov_1pxl161w72().f[23]++;
    cov_1pxl161w72().s[93]++;
    return `${exp.position} at ${exp.company}`;
  }).join('; ')}
Education: ${resumeData.education.map(edu => {
    /* istanbul ignore next */
    cov_1pxl161w72().f[24]++;
    cov_1pxl161w72().s[94]++;
    return `${edu.degree} in ${edu.field} from ${edu.institution}`;
  }).join('; ')}
Projects: ${
  /* istanbul ignore next */
  (cov_1pxl161w72().b[54][0]++,
  /* istanbul ignore next */
  (cov_1pxl161w72().b[56][0]++, (_a = resumeData.projects) === null) ||
  /* istanbul ignore next */
  (cov_1pxl161w72().b[56][1]++, _a === void 0) ?
  /* istanbul ignore next */
  (cov_1pxl161w72().b[55][0]++, void 0) :
  /* istanbul ignore next */
  (cov_1pxl161w72().b[55][1]++, _a.map(proj => {
    /* istanbul ignore next */
    cov_1pxl161w72().f[25]++;
    cov_1pxl161w72().s[95]++;
    return proj.name;
  }).join(', '))) ||
  /* istanbul ignore next */
  (cov_1pxl161w72().b[54][1]++, 'None mentioned')}

Return only the questions, one per line, numbered 1-10. No additional text or explanations.
`;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMXB4bDE2MXc3MiIsImFjdHVhbENvdmVyYWdlIiwicyIsImV4cG9ydHMiLCJwYXJzZVJlc3VtZVRleHQiLCJnZW5lcmF0ZUludGVydmlld1F1ZXN0aW9ucyIsImF6dXJlX29wZW5haV9zZXJ2aWNlXzEiLCJyZXF1aXJlIiwidGVtcGxhdGVfZW5naW5lXzEiLCJ0ZXh0IiwiZiIsImJhc2ljRGF0YSIsImV4dHJhY3RCYXNpY0luZm8iLCJhaUVuaGFuY2VkRGF0YSIsImV4dHJhY3RXaXRoQUkiLCJtZXJnZVJlc3VtZURhdGEiLCJlcnJvciIsImNvbnNvbGUiLCJuYW1lUGF0dGVybnMiLCJuYW1lIiwicGF0dGVybiIsIm1hdGNoIiwiYiIsInRyaW0iLCJlbWFpbE1hdGNoIiwiZW1haWwiLCJwaG9uZVBhdHRlcm5zIiwicGhvbmUiLCJza2lsbHNNYXRjaCIsInNraWxscyIsInJlcGxhY2UiLCJzcGxpdCIsIm1hcCIsInNraWxsIiwiZmlsdGVyIiwibGVuZ3RoIiwic2xpY2UiLCJleHBlcmllbmNlTWF0Y2giLCJleHBlcmllbmNlIiwiZXhwVGV4dCIsImpvYk1hdGNoZXMiLCJjb21wYW55IiwicG9zaXRpb24iLCJkZXNjcmlwdGlvbiIsInN1YnN0cmluZyIsImVkdWNhdGlvbk1hdGNoIiwiZWR1Y2F0aW9uIiwiZWR1VGV4dCIsInVuaXZlcnNpdHlNYXRjaCIsImluc3RpdHV0aW9uIiwiZGVncmVlIiwiX2EiLCJmaWVsZCIsInByb2plY3RzIiwiYXp1cmVPcGVuQUlTZXJ2aWNlIiwiaW5pdGlhbGl6ZSIsInByb21wdCIsImJ1aWxkRXh0cmFjdGlvblByb21wdFdpdGhUZW1wbGF0ZSIsInJlc3BvbnNlIiwiZ2VuZXJhdGVDb21wbGV0aW9uIiwianNvblRleHQiLCJwYXJzZWREYXRhIiwiSlNPTiIsInBhcnNlIiwic3VtbWFyeSIsIkFycmF5IiwiaXNBcnJheSIsImV4cCIsInN0YXJ0RGF0ZSIsImVuZERhdGUiLCJpc0N1cnJlbnQiLCJCb29sZWFuIiwiYWNoaWV2ZW1lbnRzIiwidGVjaG5vbG9naWVzIiwiZWR1IiwiZ3BhIiwidW5kZWZpbmVkIiwicHJvaiIsInVybCIsImdpdGh1YiIsImFpRGF0YSIsIlNldCIsInRlbXBsYXRlIiwiY29udGV4dCIsImZvcm1hdF9pbnN0cnVjdGlvbnMiLCJleHRyYWN0aW9uX3J1bGVzIiwicmVzdW1lX3RleHQiLCJ0ZW1wbGF0ZUVuZ2luZSIsInJlbmRlciIsIndhcm4iLCJidWlsZEV4dHJhY3Rpb25Qcm9tcHRMZWdhY3kiLCJyZXN1bWVEYXRhIiwiYnVpbGRRdWVzdGlvbkdlbmVyYXRpb25Qcm9tcHQiLCJxdWVzdGlvbnNUZXh0IiwicXVlc3Rpb25zIiwicSIsImZvY3VzX2FyZWFzIiwiY2FuZGlkYXRlIiwiam9pbiIsImJ1aWxkUXVlc3Rpb25HZW5lcmF0aW9uUHJvbXB0TGVnYWN5Il0sInNvdXJjZXMiOlsiL1VzZXJzL2Rpa3NoYW50dmFzaGlzdGhhL1ByZXBCZXR0ci9saWIvdXRpbHMvcmVzdW1lLXBhcnNlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBXb3JrRXhwZXJpZW5jZSwgRWR1Y2F0aW9uLCBQcm9qZWN0IH0gZnJvbSAnLi4vc2VydmljZXMvYXp1cmUtYWktc2VydmljZSc7XG5pbXBvcnQgeyBtaWdyYXRpb25PcGVuQUlDbGllbnQgfSBmcm9tICdAL2xpYi9henVyZS1haS1mb3VuZHJ5L2NsaWVudHMvbWlncmF0aW9uLXdyYXBwZXInO1xuaW1wb3J0IHsgYXp1cmVPcGVuQUlTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvYXp1cmUtb3BlbmFpLXNlcnZpY2UnO1xuaW1wb3J0IHsgdGVtcGxhdGVFbmdpbmUgfSBmcm9tICdAL2xpYi91dGlscy90ZW1wbGF0ZS1lbmdpbmUnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFyc2VkUmVzdW1lRGF0YSB7XG4gIG5hbWU/OiBzdHJpbmc7XG4gIGVtYWlsPzogc3RyaW5nO1xuICBwaG9uZT86IHN0cmluZztcbiAgc2tpbGxzOiBzdHJpbmdbXTtcbiAgZXhwZXJpZW5jZTogV29ya0V4cGVyaWVuY2VbXTtcbiAgZWR1Y2F0aW9uOiBFZHVjYXRpb25bXTtcbiAgcHJvamVjdHM/OiBQcm9qZWN0W107XG4gIHN1bW1hcnk/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogRW5oYW5jZWQgcmVzdW1lIHBhcnNpbmcgdXNpbmcgYm90aCByZWdleCBhbmQgQUlcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHBhcnNlUmVzdW1lVGV4dCh0ZXh0OiBzdHJpbmcpOiBQcm9taXNlPFBhcnNlZFJlc3VtZURhdGE+IHtcbiAgdHJ5IHtcbiAgICAvLyBGaXJzdCwgdHJ5IGJhc2ljIHJlZ2V4IGV4dHJhY3Rpb25cbiAgICBjb25zdCBiYXNpY0RhdGEgPSBleHRyYWN0QmFzaWNJbmZvKHRleHQpO1xuICAgIFxuICAgIC8vIFRoZW4sIGVuaGFuY2Ugd2l0aCBBSS1wb3dlcmVkIGV4dHJhY3Rpb25cbiAgICBjb25zdCBhaUVuaGFuY2VkRGF0YSA9IGF3YWl0IGV4dHJhY3RXaXRoQUkodGV4dCk7XG4gICAgXG4gICAgLy8gTWVyZ2UgdGhlIHJlc3VsdHMsIHByZWZlcnJpbmcgQUkgZGF0YSB3aGVuIGF2YWlsYWJsZVxuICAgIHJldHVybiBtZXJnZVJlc3VtZURhdGEoYmFzaWNEYXRhLCBhaUVuaGFuY2VkRGF0YSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgcGFyc2luZyByZXN1bWU6JywgZXJyb3IpO1xuICAgIC8vIEZhbGxiYWNrIHRvIGJhc2ljIHJlZ2V4IHBhcnNpbmdcbiAgICByZXR1cm4gZXh0cmFjdEJhc2ljSW5mbyh0ZXh0KTtcbiAgfVxufVxuXG4vKipcbiAqIEJhc2ljIHJlZ2V4LWJhc2VkIGV4dHJhY3Rpb24gKGZhbGxiYWNrKVxuICovXG5mdW5jdGlvbiBleHRyYWN0QmFzaWNJbmZvKHRleHQ6IHN0cmluZyk6IFBhcnNlZFJlc3VtZURhdGEge1xuICAvLyBFeHRyYWN0IG5hbWUgKGltcHJvdmVkIHBhdHRlcm5zKVxuICBjb25zdCBuYW1lUGF0dGVybnMgPSBbXG4gICAgLyg/Ok5hbWVbOlxcc10rKShbQS1aXVthLXpBLVpdKyg/Olxcc1tBLVpdW2EtekEtWl0rKSopL2ksXG4gICAgL14oW0EtWl1bYS16QS1aXSsoPzpcXHNbQS1aXVthLXpBLVpdKykrKS9tLCAvLyBGaXJzdCBsaW5lIG5hbWUgcGF0dGVyblxuICAgIC8oW0EtWl1bYS16QS1aXStcXHMrW0EtWl1bYS16QS1aXSspKD86XFxzKlxcbnxcXHMqJCkvbSwgLy8gVHdvLXdvcmQgbmFtZSBwYXR0ZXJuXG4gIF07XG4gIFxuICBsZXQgbmFtZSA9ICcnO1xuICBmb3IgKGNvbnN0IHBhdHRlcm4gb2YgbmFtZVBhdHRlcm5zKSB7XG4gICAgY29uc3QgbWF0Y2ggPSB0ZXh0Lm1hdGNoKHBhdHRlcm4pO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgbmFtZSA9IG1hdGNoWzFdLnRyaW0oKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIC8vIEV4dHJhY3QgZW1haWxcbiAgY29uc3QgZW1haWxNYXRjaCA9IHRleHQubWF0Y2goLyhbYS16QS1aMC05Ll8lKy1dK0BbYS16QS1aMC05Li1dK1xcLlthLXpBLVpdezIsfSkvKTtcbiAgY29uc3QgZW1haWwgPSBlbWFpbE1hdGNoID8gZW1haWxNYXRjaFsxXSA6ICcnO1xuXG4gIC8vIEV4dHJhY3QgcGhvbmVcbiAgY29uc3QgcGhvbmVQYXR0ZXJucyA9IFtcbiAgICAvKD86UGhvbmV8VGVsfE1vYmlsZSlbOlxcc10qKFsrXT9bXFxkXFxzXFwtXFwoXFwpXXsxMCx9KS9pLFxuICAgIC8oWytdP1tcXGRcXHNcXC1cXChcXCldezEwLH0pKD89XFxzfCQpLyxcbiAgXTtcbiAgXG4gIGxldCBwaG9uZSA9ICcnO1xuICBmb3IgKGNvbnN0IHBhdHRlcm4gb2YgcGhvbmVQYXR0ZXJucykge1xuICAgIGNvbnN0IG1hdGNoID0gdGV4dC5tYXRjaChwYXR0ZXJuKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgIHBob25lID0gbWF0Y2hbMV0udHJpbSgpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgLy8gRXh0cmFjdCBza2lsbHMgd2l0aCBpbXByb3ZlZCBwYXR0ZXJuc1xuICBjb25zdCBza2lsbHNNYXRjaCA9IHRleHQubWF0Y2goLyg/OlNraWxscz98VGVjaG5pY2FsIFNraWxscz98Q29yZSBDb21wZXRlbmNpZXMpWzpcXHNdKihbXl0qPykoPz1cXG5cXHMqW0EtWl1bXjpdKjp8JCkvaSk7XG4gIGxldCBza2lsbHM6IHN0cmluZ1tdID0gW107XG4gIFxuICBpZiAoc2tpbGxzTWF0Y2gpIHtcbiAgICBza2lsbHMgPSBza2lsbHNNYXRjaFsxXVxuICAgICAgLnJlcGxhY2UoL1vigKJcXC1cXCpdL2csICcsJykgLy8gUmVwbGFjZSBidWxsZXRzIHdpdGggY29tbWFzXG4gICAgICAuc3BsaXQoL1ssXFxuXS8pXG4gICAgICAubWFwKHNraWxsID0+IHNraWxsLnRyaW0oKSlcbiAgICAgIC5maWx0ZXIoc2tpbGwgPT4gc2tpbGwubGVuZ3RoID4gMCAmJiBza2lsbC5sZW5ndGggPCA1MClcbiAgICAgIC5zbGljZSgwLCAyMCk7IC8vIExpbWl0IHRvIDIwIHNraWxsc1xuICB9XG5cbiAgLy8gRXh0cmFjdCBleHBlcmllbmNlIChiYXNpYylcbiAgY29uc3QgZXhwZXJpZW5jZU1hdGNoID0gdGV4dC5tYXRjaCgvKD86RXhwZXJpZW5jZXxXb3JrIEV4cGVyaWVuY2V8RW1wbG95bWVudClbOlxcc10qKFteXSo/KSg/PVxcblxccyooPzpFZHVjYXRpb258U2tpbGxzP3xQcm9qZWN0cz8pWzpcXHNdfCQpL2kpO1xuICBsZXQgZXhwZXJpZW5jZTogV29ya0V4cGVyaWVuY2VbXSA9IFtdO1xuICBcbiAgaWYgKGV4cGVyaWVuY2VNYXRjaCkge1xuICAgIGNvbnN0IGV4cFRleHQgPSBleHBlcmllbmNlTWF0Y2hbMV07XG4gICAgLy8gVHJ5IHRvIGV4dHJhY3QgY29tcGFueSBuYW1lcyBhbmQgcG9zaXRpb25zIChiYXNpYyBwYXR0ZXJuKVxuICAgIGNvbnN0IGpvYk1hdGNoZXMgPSBleHBUZXh0Lm1hdGNoKC8oW0EtWl1bXixcXG5dKyg/OkluY1xcLnxDb3JwXFwufExMQ3xMdGRcXC58Q29tcGFueSkpWyxcXHNdKihbXixcXG5dKykvZyk7XG4gICAgXG4gICAgaWYgKGpvYk1hdGNoZXMpIHtcbiAgICAgIGV4cGVyaWVuY2UgPSBqb2JNYXRjaGVzLnNsaWNlKDAsIDUpLm1hcChtYXRjaCA9PiB7XG4gICAgICAgIGNvbnN0IFtjb21wYW55LCBwb3NpdGlvbiA9ICcnXSA9IG1hdGNoLnNwbGl0KC9bLFxcbl0vKS5tYXAocyA9PiBzLnRyaW0oKSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29tcGFueTogY29tcGFueSB8fCAnVW5rbm93biBDb21wYW55JyxcbiAgICAgICAgICBwb3NpdGlvbjogcG9zaXRpb24gfHwgJ1Vua25vd24gUG9zaXRpb24nLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBleHBUZXh0LnN1YnN0cmluZygwLCAyMDApLCAvLyBGaXJzdCAyMDAgY2hhcnMgYXMgZGVzY3JpcHRpb25cbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIEV4dHJhY3QgZWR1Y2F0aW9uIChiYXNpYylcbiAgY29uc3QgZWR1Y2F0aW9uTWF0Y2ggPSB0ZXh0Lm1hdGNoKC8oPzpFZHVjYXRpb258QWNhZGVtaWMgQmFja2dyb3VuZClbOlxcc10qKFteXSo/KSg/PVxcblxccyooPzpFeHBlcmllbmNlfFNraWxscz98UHJvamVjdHM/KVs6XFxzXXwkKS9pKTtcbiAgbGV0IGVkdWNhdGlvbjogRWR1Y2F0aW9uW10gPSBbXTtcbiAgXG4gIGlmIChlZHVjYXRpb25NYXRjaCkge1xuICAgIGNvbnN0IGVkdVRleHQgPSBlZHVjYXRpb25NYXRjaFsxXTtcbiAgICBjb25zdCB1bml2ZXJzaXR5TWF0Y2ggPSBlZHVUZXh0Lm1hdGNoKC8oW14sXFxuXSooPzpVbml2ZXJzaXR5fENvbGxlZ2V8SW5zdGl0dXRlfFNjaG9vbCkpWyxcXHNdKihbXixcXG5dKikvaSk7XG4gICAgXG4gICAgaWYgKHVuaXZlcnNpdHlNYXRjaCkge1xuICAgICAgZWR1Y2F0aW9uID0gW3tcbiAgICAgICAgaW5zdGl0dXRpb246IHVuaXZlcnNpdHlNYXRjaFsxXS50cmltKCksXG4gICAgICAgIGRlZ3JlZTogdW5pdmVyc2l0eU1hdGNoWzJdPy50cmltKCkgfHwgJ0RlZ3JlZScsXG4gICAgICAgIGZpZWxkOiAnRmllbGQgb2YgU3R1ZHknLFxuICAgICAgfV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lLFxuICAgIGVtYWlsLFxuICAgIHBob25lLFxuICAgIHNraWxscyxcbiAgICBleHBlcmllbmNlLFxuICAgIGVkdWNhdGlvbixcbiAgICBwcm9qZWN0czogW10sIC8vIFdpbGwgYmUgZW5oYW5jZWQgYnkgQUlcbiAgfTtcbn1cblxuLyoqXG4gKiBBSS1wb3dlcmVkIGV4dHJhY3Rpb24gdXNpbmcgQXp1cmUgT3BlbkFJXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGV4dHJhY3RXaXRoQUkodGV4dDogc3RyaW5nKTogUHJvbWlzZTxQYXJzZWRSZXN1bWVEYXRhPiB7XG4gIHRyeSB7XG4gICAgLy8gRW5zdXJlIEF6dXJlIE9wZW5BSSBzZXJ2aWNlIGlzIGluaXRpYWxpemVkXG4gICAgYXdhaXQgYXp1cmVPcGVuQUlTZXJ2aWNlLmluaXRpYWxpemUoKTtcbiAgICBcbiAgICAvLyBUcnkgdG8gdXNlIHRlbXBsYXRlIGVuZ2luZSBmb3IgcmVzdW1lIGV4dHJhY3Rpb24gcHJvbXB0XG4gICAgY29uc3QgcHJvbXB0ID0gYnVpbGRFeHRyYWN0aW9uUHJvbXB0V2l0aFRlbXBsYXRlKHRleHQpO1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhenVyZU9wZW5BSVNlcnZpY2UuZ2VuZXJhdGVDb21wbGV0aW9uKHByb21wdCk7XG4gICAgY29uc3QganNvblRleHQgPSByZXNwb25zZS50cmltKCk7XG4gICAgXG4gICAgLy8gVHJ5IHRvIHBhcnNlIHRoZSBKU09OIHJlc3BvbnNlXG4gICAgY29uc3QgcGFyc2VkRGF0YSA9IEpTT04ucGFyc2UoanNvblRleHQpO1xuICAgIFxuICAgIC8vIFZhbGlkYXRlIGFuZCBjbGVhbiB0aGUgZGF0YVxuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBwYXJzZWREYXRhLm5hbWUgfHwgJycsXG4gICAgICBlbWFpbDogcGFyc2VkRGF0YS5lbWFpbCB8fCAnJyxcbiAgICAgIHBob25lOiBwYXJzZWREYXRhLnBob25lIHx8ICcnLFxuICAgICAgc3VtbWFyeTogcGFyc2VkRGF0YS5zdW1tYXJ5IHx8ICcnLFxuICAgICAgc2tpbGxzOiBBcnJheS5pc0FycmF5KHBhcnNlZERhdGEuc2tpbGxzKSA/IHBhcnNlZERhdGEuc2tpbGxzLnNsaWNlKDAsIDMwKSA6IFtdLFxuICAgICAgZXhwZXJpZW5jZTogQXJyYXkuaXNBcnJheShwYXJzZWREYXRhLmV4cGVyaWVuY2UpID8gcGFyc2VkRGF0YS5leHBlcmllbmNlLnNsaWNlKDAsIDEwKS5tYXAoKGV4cDogYW55KSA9PiAoe1xuICAgICAgICBjb21wYW55OiBleHAuY29tcGFueSB8fCAnVW5rbm93biBDb21wYW55JyxcbiAgICAgICAgcG9zaXRpb246IGV4cC5wb3NpdGlvbiB8fCAnVW5rbm93biBQb3NpdGlvbicsXG4gICAgICAgIHN0YXJ0RGF0ZTogZXhwLnN0YXJ0RGF0ZSB8fCAnJyxcbiAgICAgICAgZW5kRGF0ZTogZXhwLmVuZERhdGUgfHwgJycsXG4gICAgICAgIGlzQ3VycmVudDogQm9vbGVhbihleHAuaXNDdXJyZW50KSxcbiAgICAgICAgZGVzY3JpcHRpb246IGV4cC5kZXNjcmlwdGlvbiB8fCAnJyxcbiAgICAgICAgYWNoaWV2ZW1lbnRzOiBBcnJheS5pc0FycmF5KGV4cC5hY2hpZXZlbWVudHMpID8gZXhwLmFjaGlldmVtZW50cyA6IFtdLFxuICAgICAgICB0ZWNobm9sb2dpZXM6IEFycmF5LmlzQXJyYXkoZXhwLnRlY2hub2xvZ2llcykgPyBleHAudGVjaG5vbG9naWVzIDogW10sXG4gICAgICB9KSkgOiBbXSxcbiAgICAgIGVkdWNhdGlvbjogQXJyYXkuaXNBcnJheShwYXJzZWREYXRhLmVkdWNhdGlvbikgPyBwYXJzZWREYXRhLmVkdWNhdGlvbi5zbGljZSgwLCA1KS5tYXAoKGVkdTogYW55KSA9PiAoe1xuICAgICAgICBpbnN0aXR1dGlvbjogZWR1Lmluc3RpdHV0aW9uIHx8ICdVbmtub3duIEluc3RpdHV0aW9uJyxcbiAgICAgICAgZGVncmVlOiBlZHUuZGVncmVlIHx8ICdEZWdyZWUnLFxuICAgICAgICBmaWVsZDogZWR1LmZpZWxkIHx8ICdGaWVsZCBvZiBTdHVkeScsXG4gICAgICAgIHN0YXJ0RGF0ZTogZWR1LnN0YXJ0RGF0ZSB8fCAnJyxcbiAgICAgICAgZW5kRGF0ZTogZWR1LmVuZERhdGUgfHwgJycsXG4gICAgICAgIGdwYTogdHlwZW9mIGVkdS5ncGEgPT09ICdudW1iZXInID8gZWR1LmdwYSA6IHVuZGVmaW5lZCxcbiAgICAgICAgZGVzY3JpcHRpb246IGVkdS5kZXNjcmlwdGlvbiB8fCAnJyxcbiAgICAgIH0pKSA6IFtdLFxuICAgICAgcHJvamVjdHM6IEFycmF5LmlzQXJyYXkocGFyc2VkRGF0YS5wcm9qZWN0cykgPyBwYXJzZWREYXRhLnByb2plY3RzLnNsaWNlKDAsIDEwKS5tYXAoKHByb2o6IGFueSkgPT4gKHtcbiAgICAgICAgbmFtZTogcHJvai5uYW1lIHx8ICdQcm9qZWN0JyxcbiAgICAgICAgZGVzY3JpcHRpb246IHByb2ouZGVzY3JpcHRpb24gfHwgJycsXG4gICAgICAgIHRlY2hub2xvZ2llczogQXJyYXkuaXNBcnJheShwcm9qLnRlY2hub2xvZ2llcykgPyBwcm9qLnRlY2hub2xvZ2llcyA6IFtdLFxuICAgICAgICB1cmw6IHByb2oudXJsIHx8ICcnLFxuICAgICAgICBnaXRodWI6IHByb2ouZ2l0aHViIHx8ICcnLFxuICAgICAgICBzdGFydERhdGU6IHByb2ouc3RhcnREYXRlIHx8ICcnLFxuICAgICAgICBlbmREYXRlOiBwcm9qLmVuZERhdGUgfHwgJycsXG4gICAgICB9KSkgOiBbXSxcbiAgICB9O1xuICAgIFxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0FJIGV4dHJhY3Rpb24gZmFpbGVkOicsIGVycm9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG4vKipcbiAqIE1lcmdlIGJhc2ljIHJlZ2V4IGRhdGEgd2l0aCBBSS1lbmhhbmNlZCBkYXRhXG4gKi9cbmZ1bmN0aW9uIG1lcmdlUmVzdW1lRGF0YShiYXNpY0RhdGE6IFBhcnNlZFJlc3VtZURhdGEsIGFpRGF0YTogUGFyc2VkUmVzdW1lRGF0YSk6IFBhcnNlZFJlc3VtZURhdGEge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IGFpRGF0YS5uYW1lIHx8IGJhc2ljRGF0YS5uYW1lIHx8ICcnLFxuICAgIGVtYWlsOiBhaURhdGEuZW1haWwgfHwgYmFzaWNEYXRhLmVtYWlsIHx8ICcnLFxuICAgIHBob25lOiBhaURhdGEucGhvbmUgfHwgYmFzaWNEYXRhLnBob25lIHx8ICcnLFxuICAgIHN1bW1hcnk6IGFpRGF0YS5zdW1tYXJ5IHx8ICcnLFxuICAgIHNraWxsczogWy4uLm5ldyBTZXQoWy4uLmJhc2ljRGF0YS5za2lsbHMsIC4uLmFpRGF0YS5za2lsbHNdKV0uc2xpY2UoMCwgMzApLCAvLyBNZXJnZSBhbmQgZGVkdXBlXG4gICAgZXhwZXJpZW5jZTogYWlEYXRhLmV4cGVyaWVuY2UubGVuZ3RoID4gMCA/IGFpRGF0YS5leHBlcmllbmNlIDogYmFzaWNEYXRhLmV4cGVyaWVuY2UsXG4gICAgZWR1Y2F0aW9uOiBhaURhdGEuZWR1Y2F0aW9uLmxlbmd0aCA+IDAgPyBhaURhdGEuZWR1Y2F0aW9uIDogYmFzaWNEYXRhLmVkdWNhdGlvbixcbiAgICBwcm9qZWN0czogYWlEYXRhLnByb2plY3RzIHx8IFtdLFxuICB9O1xufVxuXG4vKipcbiAqIEJ1aWxkIGV4dHJhY3Rpb24gcHJvbXB0IHVzaW5nIHRlbXBsYXRlIGVuZ2luZVxuICovXG5mdW5jdGlvbiBidWlsZEV4dHJhY3Rpb25Qcm9tcHRXaXRoVGVtcGxhdGUodGV4dDogc3RyaW5nKTogc3RyaW5nIHtcbiAgdHJ5IHtcbiAgICAvLyBVc2Ugc2ltcGxlIGlubGluZSB0ZW1wbGF0ZSBmb3IgcmVzdW1lIGV4dHJhY3Rpb25cbiAgICBjb25zdCB0ZW1wbGF0ZSA9IGBFeHRyYWN0IHN0cnVjdHVyZWQgaW5mb3JtYXRpb24gZnJvbSB0aGlzIHJlc3VtZSB0ZXh0IGFuZCByZXR1cm4gaXQgaW4gdmFsaWQgSlNPTiBmb3JtYXQuXG5cbnt7I2lmIGZvcm1hdF9pbnN0cnVjdGlvbnN9fVxuKipGb3JtYXQgSW5zdHJ1Y3Rpb25zOioqXG57e2Zvcm1hdF9pbnN0cnVjdGlvbnN9fVxue3svaWZ9fVxuXG57eyNpZiBleHRyYWN0aW9uX3J1bGVzfX1cbioqUnVsZXM6Kipcbnt7I2VhY2ggZXh0cmFjdGlvbl9ydWxlc319XG4tIHt7QHZhbHVlfX1cbnt7L2VhY2h9fVxue3svaWZ9fVxuXG4qKlJlc3VtZSBUZXh0OioqXG57e3Jlc3VtZV90ZXh0fX1gO1xuXG4gICAgY29uc3QgY29udGV4dCA9IHtcbiAgICAgIGZvcm1hdF9pbnN0cnVjdGlvbnM6IGBGb2xsb3cgdGhpcyBleGFjdCBKU09OIHN0cnVjdHVyZTpcXG57XG4gIFwibmFtZVwiOiBcIkZ1bGwgTmFtZVwiLFxuICBcImVtYWlsXCI6IFwiZW1haWxAZXhhbXBsZS5jb21cIixcbiAgXCJwaG9uZVwiOiBcInBob25lIG51bWJlclwiLFxuICBcInN1bW1hcnlcIjogXCJQcm9mZXNzaW9uYWwgc3VtbWFyeSBvciBvYmplY3RpdmVcIixcbiAgXCJza2lsbHNcIjogW1wic2tpbGwxXCIsIFwic2tpbGwyXCIsIFwic2tpbGwzXCJdLFxuICBcImV4cGVyaWVuY2VcIjogWy4uLl0sXG4gIFwiZWR1Y2F0aW9uXCI6IFsuLi5dLFxuICBcInByb2plY3RzXCI6IFsuLi5dXG59YCxcbiAgICAgIGV4dHJhY3Rpb25fcnVsZXM6IFtcbiAgICAgICAgJ1JldHVybiBPTkxZIHZhbGlkIEpTT04sIG5vIG90aGVyIHRleHQnLFxuICAgICAgICAnSWYgaW5mb3JtYXRpb24gaXMgbm90IGF2YWlsYWJsZSwgdXNlIG51bGwgb3IgZW1wdHkgYXJyYXknLFxuICAgICAgICAnRXh0cmFjdCBhY3R1YWwgZGF0YSwgZG9uXFwndCBtYWtlIHVwIGluZm9ybWF0aW9uJyxcbiAgICAgICAgJ0ZvciBkYXRlcywgdXNlIHRoZSBmb3JtYXQgZm91bmQgaW4gcmVzdW1lIG9yIHN0YW5kYXJkaXplIHRvIE1NL1lZWVknLFxuICAgICAgICAnRm9yIGN1cnJlbnQgcG9zaXRpb25zLCBzZXQgaXNDdXJyZW50IHRvIHRydWUgYW5kIGVuZERhdGUgdG8gbnVsbCcsXG4gICAgICAgICdFeHRyYWN0IGFsbCBza2lsbHMgbWVudGlvbmVkICh0ZWNobmljYWwsIHNvZnQgc2tpbGxzLCB0b29scywgdGVjaG5vbG9naWVzKScsXG4gICAgICAgICdJbmNsdWRlIHF1YW50aWZpYWJsZSBhY2hpZXZlbWVudHMgd2hlcmUgbWVudGlvbmVkJ1xuICAgICAgXSxcbiAgICAgIHJlc3VtZV90ZXh0OiB0ZXh0XG4gICAgfTtcblxuICAgIHJldHVybiB0ZW1wbGF0ZUVuZ2luZS5yZW5kZXIodGVtcGxhdGUsIGNvbnRleHQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUud2Fybign4pqg77iPIFRlbXBsYXRlIGVuZ2luZSBmYWlsZWQgZm9yIHJlc3VtZSBleHRyYWN0aW9uLCB1c2luZyBsZWdhY3kgcHJvbXB0OicsIGVycm9yKTtcbiAgICByZXR1cm4gYnVpbGRFeHRyYWN0aW9uUHJvbXB0TGVnYWN5KHRleHQpO1xuICB9XG59XG5cbi8qKlxuICogTGVnYWN5IGV4dHJhY3Rpb24gcHJvbXB0IChmYWxsYmFjaylcbiAqL1xuZnVuY3Rpb24gYnVpbGRFeHRyYWN0aW9uUHJvbXB0TGVnYWN5KHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBgXG5FeHRyYWN0IHN0cnVjdHVyZWQgaW5mb3JtYXRpb24gZnJvbSB0aGlzIHJlc3VtZSB0ZXh0IGFuZCByZXR1cm4gaXQgaW4gdmFsaWQgSlNPTiBmb3JtYXQuIEZvbGxvdyB0aGlzIGV4YWN0IHN0cnVjdHVyZTpcblxue1xuICBcIm5hbWVcIjogXCJGdWxsIE5hbWVcIixcbiAgXCJlbWFpbFwiOiBcImVtYWlsQGV4YW1wbGUuY29tXCIsXG4gIFwicGhvbmVcIjogXCJwaG9uZSBudW1iZXJcIixcbiAgXCJzdW1tYXJ5XCI6IFwiUHJvZmVzc2lvbmFsIHN1bW1hcnkgb3Igb2JqZWN0aXZlXCIsXG4gIFwic2tpbGxzXCI6IFtcInNraWxsMVwiLCBcInNraWxsMlwiLCBcInNraWxsM1wiXSxcbiAgXCJleHBlcmllbmNlXCI6IFtcbiAgICB7XG4gICAgICBcImNvbXBhbnlcIjogXCJDb21wYW55IE5hbWVcIixcbiAgICAgIFwicG9zaXRpb25cIjogXCJKb2IgVGl0bGVcIixcbiAgICAgIFwic3RhcnREYXRlXCI6IFwiTU0vWVlZWSBvciBZWVlZXCIsXG4gICAgICBcImVuZERhdGVcIjogXCJNTS9ZWVlZIG9yIFlZWVkgb3IgUHJlc2VudFwiLFxuICAgICAgXCJpc0N1cnJlbnRcIjogZmFsc2UsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSm9iIGRlc2NyaXB0aW9uXCIsXG4gICAgICBcImFjaGlldmVtZW50c1wiOiBbXCJhY2hpZXZlbWVudDFcIiwgXCJhY2hpZXZlbWVudDJcIl0sXG4gICAgICBcInRlY2hub2xvZ2llc1wiOiBbXCJ0ZWNoMVwiLCBcInRlY2gyXCJdXG4gICAgfVxuICBdLFxuICBcImVkdWNhdGlvblwiOiBbXG4gICAge1xuICAgICAgXCJpbnN0aXR1dGlvblwiOiBcIlNjaG9vbCBOYW1lXCIsXG4gICAgICBcImRlZ3JlZVwiOiBcIkRlZ3JlZSBUeXBlXCIsXG4gICAgICBcImZpZWxkXCI6IFwiRmllbGQgb2YgU3R1ZHlcIixcbiAgICAgIFwic3RhcnREYXRlXCI6IFwiWVlZWVwiLFxuICAgICAgXCJlbmREYXRlXCI6IFwiWVlZWVwiLFxuICAgICAgXCJncGFcIjogMy41XG4gICAgfVxuICBdLFxuICBcInByb2plY3RzXCI6IFtcbiAgICB7XG4gICAgICBcIm5hbWVcIjogXCJQcm9qZWN0IE5hbWVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQcm9qZWN0IGRlc2NyaXB0aW9uXCIsXG4gICAgICBcInRlY2hub2xvZ2llc1wiOiBbXCJ0ZWNoMVwiLCBcInRlY2gyXCJdLFxuICAgICAgXCJ1cmxcIjogXCJwcm9qZWN0LXVybFwiLFxuICAgICAgXCJnaXRodWJcIjogXCJnaXRodWItdXJsXCJcbiAgICB9XG4gIF1cbn1cblxuUnVsZXM6XG4tIFJldHVybiBPTkxZIHZhbGlkIEpTT04sIG5vIG90aGVyIHRleHRcbi0gSWYgaW5mb3JtYXRpb24gaXMgbm90IGF2YWlsYWJsZSwgdXNlIG51bGwgb3IgZW1wdHkgYXJyYXlcbi0gRXh0cmFjdCBhY3R1YWwgZGF0YSwgZG9uJ3QgbWFrZSB1cCBpbmZvcm1hdGlvblxuLSBGb3IgZGF0ZXMsIHVzZSB0aGUgZm9ybWF0IGZvdW5kIGluIHJlc3VtZSBvciBzdGFuZGFyZGl6ZSB0byBNTS9ZWVlZXG4tIEZvciBjdXJyZW50IHBvc2l0aW9ucywgc2V0IGlzQ3VycmVudCB0byB0cnVlIGFuZCBlbmREYXRlIHRvIG51bGxcbi0gRXh0cmFjdCBhbGwgc2tpbGxzIG1lbnRpb25lZCAodGVjaG5pY2FsLCBzb2Z0IHNraWxscywgdG9vbHMsIHRlY2hub2xvZ2llcylcbi0gSW5jbHVkZSBxdWFudGlmaWFibGUgYWNoaWV2ZW1lbnRzIHdoZXJlIG1lbnRpb25lZFxuXG5SZXN1bWUgdGV4dDpcbiR7dGV4dH1cbmA7XG59XG5cbi8qKlxuICogR2VuZXJhdGUgaW50ZXJ2aWV3IHF1ZXN0aW9ucyB1c2luZyB0ZW1wbGF0ZSBlbmdpbmVcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlSW50ZXJ2aWV3UXVlc3Rpb25zKHJlc3VtZURhdGE6IFBhcnNlZFJlc3VtZURhdGEpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gIHRyeSB7XG4gICAgLy8gRW5zdXJlIEF6dXJlIE9wZW5BSSBzZXJ2aWNlIGlzIGluaXRpYWxpemVkXG4gICAgYXdhaXQgYXp1cmVPcGVuQUlTZXJ2aWNlLmluaXRpYWxpemUoKTtcbiAgICBcbiAgICBjb25zdCBwcm9tcHQgPSBidWlsZFF1ZXN0aW9uR2VuZXJhdGlvblByb21wdChyZXN1bWVEYXRhKTtcbiAgICBjb25zdCBxdWVzdGlvbnNUZXh0ID0gYXdhaXQgYXp1cmVPcGVuQUlTZXJ2aWNlLmdlbmVyYXRlQ29tcGxldGlvbihwcm9tcHQpO1xuICAgIFxuICAgIGNvbnN0IHF1ZXN0aW9ucyA9IHF1ZXN0aW9uc1RleHRcbiAgICAgIC5zcGxpdCgnXFxuJylcbiAgICAgIC5tYXAocSA9PiBxLnRyaW0oKSlcbiAgICAgIC5maWx0ZXIocSA9PiBxLmxlbmd0aCA+IDApXG4gICAgICAubWFwKHEgPT4gcS5yZXBsYWNlKC9eXFxkK1xcLj9cXHMqLywgJycpKSAvLyBSZW1vdmUgbnVtYmVyaW5nXG4gICAgICAuZmlsdGVyKHEgPT4gcS5sZW5ndGggPiAxMCkgLy8gRmlsdGVyIG91dCB2ZXJ5IHNob3J0IHJlc3BvbnNlc1xuICAgICAgLnNsaWNlKDAsIDEwKTsgLy8gTGltaXQgdG8gMTAgcXVlc3Rpb25zXG5cbiAgICByZXR1cm4gcXVlc3Rpb25zO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdlbmVyYXRpbmcgaW50ZXJ2aWV3IHF1ZXN0aW9uczonLCBlcnJvcik7XG4gICAgLy8gUmV0dXJuIGRlZmF1bHQgcXVlc3Rpb25zIGFzIGZhbGxiYWNrXG4gICAgcmV0dXJuIFtcbiAgICAgICdUZWxsIG1lIGFib3V0IHlvdXJzZWxmIGFuZCB5b3VyIGJhY2tncm91bmQuJyxcbiAgICAgICdXaGF0IGludGVyZXN0cyB5b3UgbW9zdCBhYm91dCB0aGlzIHBvc2l0aW9uPycsXG4gICAgICAnRGVzY3JpYmUgeW91ciBleHBlcmllbmNlIHdpdGggdGhlIHRlY2hub2xvZ2llcyBtZW50aW9uZWQgaW4geW91ciByZXN1bWUuJyxcbiAgICAgICdUZWxsIG1lIGFib3V0IGEgY2hhbGxlbmdpbmcgcHJvamVjdCB5b3Ugd29ya2VkIG9uLicsXG4gICAgICAnSG93IGRvIHlvdSBzdGF5IHVwZGF0ZWQgd2l0aCBuZXcgdGVjaG5vbG9naWVzIGluIHlvdXIgZmllbGQ/JyxcbiAgICAgICdEZXNjcmliZSBhIHRpbWUgd2hlbiB5b3UgaGFkIHRvIHdvcmsgdW5kZXIgcHJlc3N1cmUuJyxcbiAgICAgICdXaGF0IGFyZSB5b3VyIGNhcmVlciBnb2FscyBmb3IgdGhlIG5leHQgZmV3IHllYXJzPycsXG4gICAgICAnSG93IGRvIHlvdSBhcHByb2FjaCBwcm9ibGVtLXNvbHZpbmcgaW4geW91ciB3b3JrPydcbiAgICBdO1xuICB9XG59XG5cbi8qKlxuICogQnVpbGQgcXVlc3Rpb24gZ2VuZXJhdGlvbiBwcm9tcHQgdXNpbmcgdGVtcGxhdGUgZW5naW5lXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkUXVlc3Rpb25HZW5lcmF0aW9uUHJvbXB0KHJlc3VtZURhdGE6IFBhcnNlZFJlc3VtZURhdGEpOiBzdHJpbmcge1xuICB0cnkge1xuICAgIGNvbnN0IHRlbXBsYXRlID0gYEJhc2VkIG9uIHRoZSByZXN1bWUgaW5mb3JtYXRpb24gYmVsb3csIGdlbmVyYXRlIDgtMTAgcmVsZXZhbnQgaW50ZXJ2aWV3IHF1ZXN0aW9ucy5cblxuKipGb2N1cyBBcmVhczoqKlxue3sjZWFjaCBmb2N1c19hcmVhc319XG4tIHt7QHZhbHVlfX1cbnt7L2VhY2h9fVxuXG4qKkNhbmRpZGF0ZSBJbmZvcm1hdGlvbjoqKlxuLSBOYW1lOiB7e2NhbmRpZGF0ZS5uYW1lfX1cbi0gU2tpbGxzOiB7e2NhbmRpZGF0ZS5za2lsbHN9fVxuLSBFeHBlcmllbmNlOiB7e2NhbmRpZGF0ZS5leHBlcmllbmNlfX1cbi0gRWR1Y2F0aW9uOiB7e2NhbmRpZGF0ZS5lZHVjYXRpb259fVxue3sjaWYgY2FuZGlkYXRlLnByb2plY3RzfX1cbi0gUHJvamVjdHM6IHt7Y2FuZGlkYXRlLnByb2plY3RzfX1cbnt7L2lmfX1cblxuKipJbnN0cnVjdGlvbnM6KipcblJldHVybiBvbmx5IHRoZSBxdWVzdGlvbnMsIG9uZSBwZXIgbGluZSwgbnVtYmVyZWQgMS0xMC4gTm8gYWRkaXRpb25hbCB0ZXh0IG9yIGV4cGxhbmF0aW9ucy5gO1xuXG4gICAgY29uc3QgY29udGV4dCA9IHtcbiAgICAgIGZvY3VzX2FyZWFzOiBbXG4gICAgICAgICdUZWNobmljYWwgc2tpbGxzIG1lbnRpb25lZCcsXG4gICAgICAgICdXb3JrIGV4cGVyaWVuY2UgYW5kIGFjaGlldmVtZW50cycsXG4gICAgICAgICdQcm9qZWN0cyBhbmQgdGVjaG5vbG9naWVzIHVzZWQnLFxuICAgICAgICAnQ2FyZWVyIHByb2dyZXNzaW9uIGFuZCBnb2FscycsXG4gICAgICAgICdCZWhhdmlvcmFsIHF1ZXN0aW9ucyBiYXNlZCBvbiB0aGVpciBiYWNrZ3JvdW5kJ1xuICAgICAgXSxcbiAgICAgIGNhbmRpZGF0ZToge1xuICAgICAgICBuYW1lOiByZXN1bWVEYXRhLm5hbWUsXG4gICAgICAgIHNraWxsczogcmVzdW1lRGF0YS5za2lsbHMuam9pbignLCAnKSxcbiAgICAgICAgZXhwZXJpZW5jZTogcmVzdW1lRGF0YS5leHBlcmllbmNlLm1hcChleHAgPT4gYCR7ZXhwLnBvc2l0aW9ufSBhdCAke2V4cC5jb21wYW55fWApLmpvaW4oJzsgJyksXG4gICAgICAgIGVkdWNhdGlvbjogcmVzdW1lRGF0YS5lZHVjYXRpb24ubWFwKGVkdSA9PiBgJHtlZHUuZGVncmVlfSBpbiAke2VkdS5maWVsZH0gZnJvbSAke2VkdS5pbnN0aXR1dGlvbn1gKS5qb2luKCc7ICcpLFxuICAgICAgICBwcm9qZWN0czogcmVzdW1lRGF0YS5wcm9qZWN0cz8ubWFwKHByb2ogPT4gcHJvai5uYW1lKS5qb2luKCcsICcpIHx8IG51bGxcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIHRlbXBsYXRlRW5naW5lLnJlbmRlcih0ZW1wbGF0ZSwgY29udGV4dCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS53YXJuKCfimqDvuI8gVGVtcGxhdGUgZW5naW5lIGZhaWxlZCBmb3IgcXVlc3Rpb24gZ2VuZXJhdGlvbiwgdXNpbmcgbGVnYWN5IHByb21wdDonLCBlcnJvcik7XG4gICAgcmV0dXJuIGJ1aWxkUXVlc3Rpb25HZW5lcmF0aW9uUHJvbXB0TGVnYWN5KHJlc3VtZURhdGEpO1xuICB9XG59XG5cbi8qKlxuICogTGVnYWN5IHF1ZXN0aW9uIGdlbmVyYXRpb24gcHJvbXB0IChmYWxsYmFjaylcbiAqL1xuZnVuY3Rpb24gYnVpbGRRdWVzdGlvbkdlbmVyYXRpb25Qcm9tcHRMZWdhY3kocmVzdW1lRGF0YTogUGFyc2VkUmVzdW1lRGF0YSk6IHN0cmluZyB7XG4gIHJldHVybiBgXG5CYXNlZCBvbiB0aGUgZm9sbG93aW5nIHJlc3VtZSBpbmZvcm1hdGlvbiwgZ2VuZXJhdGUgOC0xMCByZWxldmFudCBpbnRlcnZpZXcgcXVlc3Rpb25zIHRoYXQgd291bGQgYmUgYXBwcm9wcmlhdGUgZm9yIHRoaXMgY2FuZGlkYXRlLiBcblxuRm9jdXMgb246XG4tIFRlY2huaWNhbCBza2lsbHMgbWVudGlvbmVkXG4tIFdvcmsgZXhwZXJpZW5jZSBhbmQgYWNoaWV2ZW1lbnRzXG4tIFByb2plY3RzIGFuZCB0ZWNobm9sb2dpZXMgdXNlZFxuLSBDYXJlZXIgcHJvZ3Jlc3Npb24gYW5kIGdvYWxzXG4tIEJlaGF2aW9yYWwgcXVlc3Rpb25zIGJhc2VkIG9uIHRoZWlyIGJhY2tncm91bmRcblxuUmVzdW1lIEluZm9ybWF0aW9uOlxuTmFtZTogJHtyZXN1bWVEYXRhLm5hbWV9XG5Ta2lsbHM6ICR7cmVzdW1lRGF0YS5za2lsbHMuam9pbignLCAnKX1cbkV4cGVyaWVuY2U6ICR7cmVzdW1lRGF0YS5leHBlcmllbmNlLm1hcChleHAgPT4gYCR7ZXhwLnBvc2l0aW9ufSBhdCAke2V4cC5jb21wYW55fWApLmpvaW4oJzsgJyl9XG5FZHVjYXRpb246ICR7cmVzdW1lRGF0YS5lZHVjYXRpb24ubWFwKGVkdSA9PiBgJHtlZHUuZGVncmVlfSBpbiAke2VkdS5maWVsZH0gZnJvbSAke2VkdS5pbnN0aXR1dGlvbn1gKS5qb2luKCc7ICcpfVxuUHJvamVjdHM6ICR7cmVzdW1lRGF0YS5wcm9qZWN0cz8ubWFwKHByb2ogPT4gcHJvai5uYW1lKS5qb2luKCcsICcpIHx8ICdOb25lIG1lbnRpb25lZCd9XG5cblJldHVybiBvbmx5IHRoZSBxdWVzdGlvbnMsIG9uZSBwZXIgbGluZSwgbnVtYmVyZWQgMS0xMC4gTm8gYWRkaXRpb25hbCB0ZXh0IG9yIGV4cGxhbmF0aW9ucy5cbmA7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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