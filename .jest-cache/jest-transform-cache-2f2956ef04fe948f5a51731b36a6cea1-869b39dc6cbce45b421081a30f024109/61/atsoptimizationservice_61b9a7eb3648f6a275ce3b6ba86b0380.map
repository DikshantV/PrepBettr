{"version":3,"names":["cov_147c59ekq0","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","openai_1","require","migration_wrapper_1","extraction_prompts_1","INDUSTRY_TAXONOMIES","technology","frameworks","languages","tools","concepts","finance","regulations","healthcare","systems","marketing","platforms","metrics","ATSOptimizationService","constructor","openai","initializeOpenAI","migrationClient","MigrationOpenAIClient","init","console","log","error","warn","process","env","OPENAI_API_KEY","OpenAI","apiKey","Error","analyzeATS","resumeData","jobDescription","targetIndustry","prompt","formatConditionalPrompt","ATS_OPTIMIZATION_PROMPT","RESUME_DATA","JSON","stringify","completion","chat","completions","create","model","AZURE_OPENAI_DEPLOYMENT","messages","role","content","temperature","max_tokens","response","choices","message","analysisResult","parse","analysis","keywordAnalysis","enhanceKeywordAnalysis","normalizeSkills","skills","experienceLevel","SKILLS_NORMALIZATION_PROMPT","SKILLS_LIST","join","TARGET_INDUSTRY","EXPERIENCE_LEVEL","normalizationResult","industryAlignment","enhanceIndustryAlignment","analyzeJobMatch","targetRole","resumeEmbedding","getResumeEmbedding","jobEmbedding","getJobDescriptionEmbedding","semanticSimilarity","calculateCosineSimilarity","JOB_MATCHING_PROMPT","JOB_DESCRIPTION","matchResult","overallMatchScore","Math","round","missingKeywords","extractMissingKeywords","calculateKeywordDensity","resumeText","targetKeywords","resumeWords","toLowerCase","split","totalWords","length","matches","missing","keyword","keywordLower","keywordWords","includes","push","keywordRegex","RegExp","test","density","summary","_a","map","skill","_b","experience","exp","position","company","description","achievements","technologies","_c","education","edu","degree","field","institution","getTextEmbedding","text","embeddings","input","slice","data","embedding","getTextBasedVector","words","vector","Array","fill","forEach","word","index","simpleHash","vectorIndex","abs","magnitude","sqrt","reduce","sum","val","i","str","char","charCodeAt","vector1","vector2","dotProduct","norm1","norm2","jobKeywords","extractKeywordsFromText","resumeKeywords","filter","some","resumeKeyword","importantKeywords","replace","wordCount","phrases","twoWordPhrase","threeWordPhrase","allKeywords","Object","keys","uniqueKeywords","from","Set","sort","a","industryData","industryKeywords","entries","category","keywords","isPresent","importance","getKeywordImportance","mapCategoryType","frequency","variations","getKeywordVariations","assign","totalKeywords","allIndustrySkills","values","flat","skillsLower","wellAligned","industrySkill","wellAlignedSkills","missingIndustrySkills","score","technicalCategories","industryCategories","exports","atsOptimizationService"],"sources":["/Users/dikshantvashistha/PrepBettr/lib/services/ats-optimization-service.ts"],"sourcesContent":["/**\n * ATS Optimization Service\n * \n * Provides comprehensive ATS (Applicant Tracking System) analysis including:\n * - Keyword density analysis and optimization\n * - Skills normalization using industry taxonomies (O*NET, ESCO, SFIA)\n * - Job matching using semantic similarity with embeddings\n * - ATS scoring and recommendations\n */\n\nimport { OpenAI } from 'openai';\nimport { MigrationOpenAIClient } from '@/lib/azure-ai-foundry/clients/migration-wrapper';\nimport { fetchAzureSecrets } from '@/azure/lib/azure-config';\nimport { \n  ATS_OPTIMIZATION_PROMPT,\n  SKILLS_NORMALIZATION_PROMPT,\n  JOB_MATCHING_PROMPT,\n  formatConditionalPrompt\n} from '@/prompts/resume/extraction-prompts';\n\n// Types for ATS analysis\nexport interface ATSAnalysisResult {\n  atsScore: number;\n  overallGrade: string;\n  analysis: {\n    keywordAnalysis: KeywordAnalysis;\n    formatAnalysis: FormatAnalysis;\n    structureAnalysis: StructureAnalysis;\n    contentAnalysis: ContentAnalysis;\n  };\n  prioritizedRecommendations: ATSRecommendation[];\n}\n\nexport interface KeywordAnalysis {\n  score: number;\n  totalKeywords: number;\n  matchedKeywords: string[];\n  missingKeywords: string[];\n  keywordDensity: number;\n  industryKeywords: IndustryKeyword[];\n  recommendations: string[];\n}\n\nexport interface IndustryKeyword {\n  keyword: string;\n  importance: 'critical' | 'high' | 'medium' | 'low';\n  category: 'technical' | 'soft' | 'industry' | 'role';\n  frequency: number;\n  variations: string[];\n}\n\nexport interface FormatAnalysis {\n  score: number;\n  issues: FormatIssue[];\n  strengths: string[];\n}\n\nexport interface FormatIssue {\n  type: 'critical' | 'warning' | 'suggestion';\n  issue: string;\n  solution: string;\n  impact: string;\n}\n\nexport interface StructureAnalysis {\n  score: number;\n  missingElements: string[];\n  presentElements: string[];\n  recommendations: string[];\n}\n\nexport interface ContentAnalysis {\n  score: number;\n  strengthAreas: string[];\n  improvementAreas: string[];\n  recommendations: string[];\n}\n\nexport interface ATSRecommendation {\n  priority: 'high' | 'medium' | 'low';\n  category: 'keywords' | 'formatting' | 'structure' | 'content';\n  recommendation: string;\n  implementation: string;\n  expectedImpact: string;\n  timeToImplement: string;\n}\n\n// Types for skills normalization\nexport interface SkillsNormalizationResult {\n  normalizedSkills: NormalizedSkill[];\n  skillCategories: SkillCategories;\n  industryAlignment: IndustryAlignment;\n}\n\nexport interface NormalizedSkill {\n  originalSkill: string;\n  normalizedSkill: string;\n  category: string;\n  subcategory: string;\n  proficiencyLevel: 'beginner' | 'intermediate' | 'advanced' | 'expert';\n  industryStandard: boolean;\n  frameworks: {\n    sfia?: string;\n    onet?: string;\n    esco?: string;\n  };\n  relatedSkills: string[];\n  marketDemand: 'high' | 'medium' | 'low';\n  salaryImpact: 'positive' | 'neutral' | 'negative';\n  learningPath: string[];\n}\n\nexport interface SkillCategories {\n  technical: string[];\n  soft: string[];\n  language: string[];\n  certification: string[];\n  tool: string[];\n}\n\nexport interface IndustryAlignment {\n  score: number;\n  wellAlignedSkills: string[];\n  missingIndustrySkills: string[];\n  emergingSkills: string[];\n  recommendations: string[];\n}\n\n// Types for job matching\nexport interface JobMatchResult {\n  overallMatchScore: number;\n  matchGrade: string;\n  analysis: {\n    skillsMatch: SkillsMatchAnalysis;\n    experienceMatch: ExperienceMatchAnalysis;\n    educationMatch: EducationMatchAnalysis;\n    culturalFit: CulturalFitAnalysis;\n  };\n  recommendations: JobMatchRecommendation[];\n  interviewPreparation: string[];\n  missingKeywords: string[];\n}\n\nexport interface SkillsMatchAnalysis {\n  score: number;\n  matchedSkills: MatchedSkill[];\n  missingSkills: MissingSkill[];\n  skillGapAnalysis: {\n    criticalGaps: string[];\n    niceToHaveGaps: string[];\n    strengthAreas: string[];\n  };\n}\n\nexport interface MatchedSkill {\n  skill: string;\n  resumeLevel: string;\n  requiredLevel: string;\n  match: 'exceeds' | 'meets' | 'below';\n}\n\nexport interface MissingSkill {\n  skill: string;\n  importance: 'high' | 'medium' | 'low';\n  canLearn: boolean;\n  timeToLearn: string;\n}\n\nexport interface ExperienceMatchAnalysis {\n  score: number;\n  yearsRequired: number;\n  yearsCandidate: number;\n  yearsMatch: 'exceeds' | 'meets' | 'below';\n  industryMatch: {\n    score: number;\n    relevantIndustries: string[];\n    transferableExperience: string[];\n  };\n  roleSimilarity: {\n    score: number;\n    similarRoles: string[];\n    levelMatch: string;\n  };\n}\n\nexport interface EducationMatchAnalysis {\n  score: number;\n  degreeMatch: boolean;\n  fieldRelevance: 'high' | 'medium' | 'low';\n  institutionPrestige: string;\n  additionalQualifications: string[];\n}\n\nexport interface CulturalFitAnalysis {\n  score: number;\n  indicators: string[];\n  concerns: string[];\n  strengths: string[];\n}\n\nexport interface JobMatchRecommendation {\n  category: 'skills' | 'experience' | 'education' | 'presentation';\n  priority: 'high' | 'medium' | 'low';\n  recommendation: string;\n  reasoning: string;\n  resources: string[];\n  timeframe: string;\n}\n\n// Industry taxonomy mappings\nconst INDUSTRY_TAXONOMIES = {\n  technology: {\n    frameworks: ['React', 'Angular', 'Vue.js', 'Node.js', 'Django', 'Spring'],\n    languages: ['JavaScript', 'Python', 'Java', 'TypeScript', 'Go', 'Rust'],\n    tools: ['Git', 'Docker', 'Kubernetes', 'AWS', 'Azure', 'Jenkins'],\n    concepts: ['Agile', 'DevOps', 'Microservices', 'API Design', 'Cloud Computing']\n  },\n  finance: {\n    regulations: ['SOX', 'GDPR', 'Basel III', 'IFRS', 'GAAP'],\n    tools: ['Excel', 'Bloomberg', 'SAP', 'Oracle', 'Tableau'],\n    concepts: ['Risk Management', 'Portfolio Management', 'Financial Modeling', 'Compliance']\n  },\n  healthcare: {\n    regulations: ['HIPAA', 'FDA', 'CLIA', 'Joint Commission'],\n    systems: ['Epic', 'Cerner', 'MEDITECH', 'Allscripts'],\n    concepts: ['Patient Care', 'Quality Assurance', 'Clinical Research', 'Healthcare Analytics']\n  },\n  marketing: {\n    platforms: ['Google Ads', 'Facebook Ads', 'LinkedIn', 'HubSpot', 'Salesforce'],\n    concepts: ['SEO', 'SEM', 'Content Marketing', 'Brand Management', 'Customer Acquisition'],\n    metrics: ['CTR', 'CAC', 'ROAS', 'LTV', 'Conversion Rate']\n  }\n};\n\nclass ATSOptimizationService {\n  private openai: OpenAI | MigrationOpenAIClient | null = null;\n\n  constructor() {\n    this.initializeOpenAI();\n  }\n\n  private async initializeOpenAI() {\n    try {\n      // Try Azure AI Foundry (Migration Client) first\n      const migrationClient = new MigrationOpenAIClient();\n      await migrationClient.init();\n      this.openai = migrationClient;\n      console.log('✅ ATS Service using Azure AI Foundry client');\n    } catch (error) {\n      console.warn('Azure AI Foundry not available, falling back to OpenAI:', error);\n      // Fallback to standard OpenAI\n      if (process.env.OPENAI_API_KEY) {\n        this.openai = new OpenAI({\n          apiKey: process.env.OPENAI_API_KEY,\n        });\n        console.log('✅ ATS Service using standard OpenAI client');\n      } else {\n        throw new Error('No AI service available for ATS optimization');\n      }\n    }\n  }\n\n  /**\n   * Perform comprehensive ATS analysis of a resume\n   */\n  async analyzeATS(\n    resumeData: any,\n    jobDescription?: string,\n    targetIndustry?: string\n  ): Promise<ATSAnalysisResult> {\n    if (!this.openai) {\n      await this.initializeOpenAI();\n    }\n\n    try {\n      const prompt = formatConditionalPrompt(ATS_OPTIMIZATION_PROMPT, {\n        RESUME_DATA: JSON.stringify(resumeData, null, 2),\n        jobDescription,\n        targetIndustry\n      });\n\n      const completion = await this.openai!.chat.completions.create({\n        model: process.env.AZURE_OPENAI_DEPLOYMENT || 'gpt-4',\n        messages: [\n          {\n            role: 'system',\n            content: 'You are an expert ATS (Applicant Tracking System) analyst. Provide detailed, actionable analysis to improve resume compatibility with ATS systems.'\n          },\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        temperature: 0.3, // Lower temperature for more consistent analysis\n        max_tokens: 4000,\n      });\n\n      const response = completion.choices[0].message.content;\n      if (!response) {\n        throw new Error('No response from AI service');\n      }\n\n      // Parse JSON response\n      const analysisResult = JSON.parse(response) as ATSAnalysisResult;\n\n      // Enhance with industry-specific analysis\n      if (targetIndustry) {\n        analysisResult.analysis.keywordAnalysis = await this.enhanceKeywordAnalysis(\n          analysisResult.analysis.keywordAnalysis,\n          resumeData,\n          targetIndustry\n        );\n      }\n\n      return analysisResult;\n    } catch (error) {\n      console.error('ATS analysis failed:', error);\n      throw new Error(`ATS analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Normalize and categorize skills using industry taxonomies\n   */\n  async normalizeSkills(\n    skills: string[],\n    targetIndustry?: string,\n    experienceLevel?: string\n  ): Promise<SkillsNormalizationResult> {\n    if (!this.openai) {\n      await this.initializeOpenAI();\n    }\n\n    try {\n      const prompt = formatConditionalPrompt(SKILLS_NORMALIZATION_PROMPT, {\n        SKILLS_LIST: skills.join(', '),\n        TARGET_INDUSTRY: targetIndustry,\n        EXPERIENCE_LEVEL: experienceLevel\n      });\n\n      const completion = await this.openai!.chat.completions.create({\n        model: process.env.AZURE_OPENAI_DEPLOYMENT || 'gpt-4',\n        messages: [\n          {\n            role: 'system',\n            content: 'You are an expert in skills taxonomy and industry standards. Use established frameworks like O*NET, ESCO, and SFIA to normalize and categorize skills.'\n          },\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        temperature: 0.2,\n        max_tokens: 3000,\n      });\n\n      const response = completion.choices[0].message.content;\n      if (!response) {\n        throw new Error('No response from AI service');\n      }\n\n      const normalizationResult = JSON.parse(response) as SkillsNormalizationResult;\n\n      // Enhance with industry-specific mappings\n      if (targetIndustry && INDUSTRY_TAXONOMIES[targetIndustry as keyof typeof INDUSTRY_TAXONOMIES]) {\n        normalizationResult.industryAlignment = await this.enhanceIndustryAlignment(\n          normalizationResult.industryAlignment,\n          skills,\n          targetIndustry\n        );\n      }\n\n      return normalizationResult;\n    } catch (error) {\n      console.error('Skills normalization failed:', error);\n      throw new Error(`Skills normalization failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Perform job matching analysis using semantic similarity\n   */\n  async analyzeJobMatch(\n    resumeData: any,\n    jobDescription: string,\n    targetRole?: string,\n    experienceLevel?: string\n  ): Promise<JobMatchResult> {\n    if (!this.openai) {\n      await this.initializeOpenAI();\n    }\n\n    try {\n      // First, get semantic embeddings for similarity analysis\n      const resumeEmbedding = await this.getResumeEmbedding(resumeData);\n      const jobEmbedding = await this.getJobDescriptionEmbedding(jobDescription);\n      const semanticSimilarity = this.calculateCosineSimilarity(resumeEmbedding, jobEmbedding);\n\n      const prompt = formatConditionalPrompt(JOB_MATCHING_PROMPT, {\n        RESUME_DATA: JSON.stringify(resumeData, null, 2),\n        JOB_DESCRIPTION: jobDescription,\n        targetRole,\n        experienceLevel\n      });\n\n      const completion = await this.openai!.chat.completions.create({\n        model: process.env.AZURE_OPENAI_DEPLOYMENT || 'gpt-4',\n        messages: [\n          {\n            role: 'system',\n            content: 'You are an expert job matching analyst. Provide detailed analysis of how well a candidate matches a job description, including specific skill gaps and recommendations.'\n          },\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        temperature: 0.3,\n        max_tokens: 4000,\n      });\n\n      const response = completion.choices[0].message.content;\n      if (!response) {\n        throw new Error('No response from AI service');\n      }\n\n      const matchResult = JSON.parse(response) as JobMatchResult;\n\n      // Enhance overall score with semantic similarity\n      matchResult.overallMatchScore = Math.round(\n        (matchResult.overallMatchScore * 0.7) + (semanticSimilarity * 100 * 0.3)\n      );\n\n      // Extract missing keywords from job description\n      matchResult.missingKeywords = await this.extractMissingKeywords(resumeData, jobDescription);\n\n      return matchResult;\n    } catch (error) {\n      console.error('Job matching analysis failed:', error);\n      throw new Error(`Job matching analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Calculate keyword density and relevance\n   */\n  async calculateKeywordDensity(\n    resumeText: string,\n    targetKeywords: string[]\n  ): Promise<{ density: number; matches: string[]; missing: string[] }> {\n    const resumeWords = resumeText.toLowerCase().split(/\\s+/);\n    const totalWords = resumeWords.length;\n    \n    const matches: string[] = [];\n    const missing: string[] = [];\n\n    for (const keyword of targetKeywords) {\n      const keywordLower = keyword.toLowerCase();\n      const keywordWords = keywordLower.split(/\\s+/);\n      \n      if (keywordWords.length === 1) {\n        // Single word keyword\n        if (resumeWords.includes(keywordLower)) {\n          matches.push(keyword);\n        } else {\n          missing.push(keyword);\n        }\n      } else {\n        // Multi-word keyword - check for phrase\n        const keywordRegex = new RegExp(keywordWords.join('\\\\s+'), 'i');\n        if (keywordRegex.test(resumeText)) {\n          matches.push(keyword);\n        } else {\n          missing.push(keyword);\n        }\n      }\n    }\n\n    const density = matches.length / totalWords;\n    return { density, matches, missing };\n  }\n\n  /**\n   * Get embedding representation of resume for semantic analysis\n   */\n  private async getResumeEmbedding(resumeData: any): Promise<number[]> {\n    // Create a text representation of key resume elements\n    const resumeText = [\n      resumeData.summary || '',\n      resumeData.skills?.map((s: any) => s.skill || s).join(' ') || '',\n      resumeData.experience?.map((exp: any) => \n        `${exp.position} ${exp.company} ${exp.description} ${exp.achievements?.join(' ') || ''} ${exp.technologies?.join(' ') || ''}`\n      ).join(' ') || '',\n      resumeData.education?.map((edu: any) => \n        `${edu.degree} ${edu.field} ${edu.institution}`\n      ).join(' ') || ''\n    ].join(' ');\n\n    return await this.getTextEmbedding(resumeText);\n  }\n\n  /**\n   * Get embedding representation of job description\n   */\n  private async getJobDescriptionEmbedding(jobDescription: string): Promise<number[]> {\n    return await this.getTextEmbedding(jobDescription);\n  }\n\n  /**\n   * Get text embedding using OpenAI's embedding API\n   */\n  private async getTextEmbedding(text: string): Promise<number[]> {\n    try {\n      // Check if embeddings API is available\n      if (this.openai && 'embeddings' in this.openai) {\n        const response = await (this.openai as any).embeddings.create({\n          model: 'text-embedding-ada-002',\n          input: text.slice(0, 8192), // Limit to avoid token limits\n        });\n        return response.data[0].embedding;\n      } else {\n        // Fallback: Use text-based similarity analysis\n        console.warn('Embeddings API not available, using text-based fallback');\n        return this.getTextBasedVector(text);\n      }\n    } catch (error) {\n      console.error('Failed to get embedding:', error);\n      // Return text-based vector as fallback\n      return this.getTextBasedVector(text);\n    }\n  }\n\n  /**\n   * Create a simple text-based vector representation\n   */\n  private getTextBasedVector(text: string): number[] {\n    // Simple text-based feature extraction\n    const words = text.toLowerCase().split(/\\s+/);\n    const vector = new Array(1536).fill(0);\n    \n    // Use word frequency and character patterns to create a pseudo-vector\n    words.forEach((word, index) => {\n      const hash = this.simpleHash(word);\n      const vectorIndex = Math.abs(hash) % 1536;\n      vector[vectorIndex] += 1;\n    });\n    \n    // Normalize the vector\n    const magnitude = Math.sqrt(vector.reduce((sum, val) => sum + val * val, 0));\n    if (magnitude > 0) {\n      for (let i = 0; i < vector.length; i++) {\n        vector[i] = vector[i] / magnitude;\n      }\n    }\n    \n    return vector;\n  }\n\n  /**\n   * Simple hash function for text\n   */\n  private simpleHash(str: string): number {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return hash;\n  }\n\n  /**\n   * Calculate cosine similarity between two vectors\n   */\n  private calculateCosineSimilarity(vector1: number[], vector2: number[]): number {\n    if (vector1.length !== vector2.length) {\n      console.warn('Vector lengths do not match');\n      return 0;\n    }\n\n    let dotProduct = 0;\n    let norm1 = 0;\n    let norm2 = 0;\n\n    for (let i = 0; i < vector1.length; i++) {\n      dotProduct += vector1[i] * vector2[i];\n      norm1 += vector1[i] * vector1[i];\n      norm2 += vector2[i] * vector2[i];\n    }\n\n    const magnitude = Math.sqrt(norm1) * Math.sqrt(norm2);\n    if (magnitude === 0) {\n      return 0;\n    }\n\n    return dotProduct / magnitude;\n  }\n\n  /**\n   * Extract missing keywords from job description that aren't in resume\n   */\n  private async extractMissingKeywords(resumeData: any, jobDescription: string): Promise<string[]> {\n    // Extract keywords from job description\n    const jobKeywords = this.extractKeywordsFromText(jobDescription);\n    \n    // Extract keywords from resume\n    const resumeText = JSON.stringify(resumeData);\n    const resumeKeywords = this.extractKeywordsFromText(resumeText);\n    \n    // Find missing keywords\n    const missingKeywords = jobKeywords.filter(keyword => \n      !resumeKeywords.some(resumeKeyword => \n        resumeKeyword.toLowerCase().includes(keyword.toLowerCase()) ||\n        keyword.toLowerCase().includes(resumeKeyword.toLowerCase())\n      )\n    );\n\n    // Filter to keep only important keywords (remove common words)\n    const importantKeywords = missingKeywords.filter(keyword => \n      keyword.length > 2 && \n      !['the', 'and', 'for', 'are', 'but', 'not', 'you', 'all', 'can', 'had', 'her', 'was', 'one', 'our', 'out', 'day', 'had', 'has', 'his', 'how', 'man', 'new', 'now', 'old', 'see', 'two', 'who', 'boy', 'did', 'its', 'let', 'put', 'say', 'she', 'too', 'use'].includes(keyword.toLowerCase())\n    );\n\n    return importantKeywords.slice(0, 20); // Limit to top 20 missing keywords\n  }\n\n  /**\n   * Extract keywords from text using simple NLP techniques\n   */\n  private extractKeywordsFromText(text: string): string[] {\n    // Remove common punctuation and split into words\n    const words = text\n      .toLowerCase()\n      .replace(/[^\\w\\s-]/g, ' ')\n      .split(/\\s+/)\n      .filter(word => word.length > 2);\n\n    // Count word frequency\n    const wordCount: { [key: string]: number } = {};\n    words.forEach(word => {\n      wordCount[word] = (wordCount[word] || 0) + 1;\n    });\n\n    // Extract phrases (2-3 word combinations)\n    const phrases: string[] = [];\n    for (let i = 0; i < words.length - 1; i++) {\n      const twoWordPhrase = `${words[i]} ${words[i + 1]}`;\n      phrases.push(twoWordPhrase);\n      \n      if (i < words.length - 2) {\n        const threeWordPhrase = `${words[i]} ${words[i + 1]} ${words[i + 2]}`;\n        phrases.push(threeWordPhrase);\n      }\n    }\n\n    // Combine single words and phrases, sort by frequency/importance\n    const allKeywords = [...Object.keys(wordCount), ...phrases];\n    \n    // Remove duplicates and sort by length (longer phrases first)\n    const uniqueKeywords = Array.from(new Set(allKeywords))\n      .sort((a, b) => b.length - a.length)\n      .slice(0, 100); // Limit to top 100 keywords\n\n    return uniqueKeywords;\n  }\n\n  /**\n   * Enhance keyword analysis with industry-specific terms\n   */\n  private async enhanceKeywordAnalysis(\n    keywordAnalysis: KeywordAnalysis,\n    resumeData: any,\n    targetIndustry: string\n  ): Promise<KeywordAnalysis> {\n    const industryData = INDUSTRY_TAXONOMIES[targetIndustry as keyof typeof INDUSTRY_TAXONOMIES];\n    \n    if (!industryData) {\n      return keywordAnalysis;\n    }\n\n    // Check for industry-specific keywords\n    const industryKeywords: IndustryKeyword[] = [];\n    const resumeText = JSON.stringify(resumeData).toLowerCase();\n\n    // Check technical frameworks/tools\n    Object.entries(industryData).forEach(([category, keywords]) => {\n      keywords.forEach(keyword => {\n        const isPresent = resumeText.includes(keyword.toLowerCase());\n        industryKeywords.push({\n          keyword,\n          importance: this.getKeywordImportance(keyword, category),\n          category: this.mapCategoryType(category),\n          frequency: isPresent ? 1 : 0,\n          variations: this.getKeywordVariations(keyword)\n        });\n      });\n    });\n\n    return {\n      ...keywordAnalysis,\n      industryKeywords,\n      totalKeywords: keywordAnalysis.totalKeywords + industryKeywords.length\n    };\n  }\n\n  /**\n   * Enhance industry alignment analysis\n   */\n  private async enhanceIndustryAlignment(\n    industryAlignment: IndustryAlignment,\n    skills: string[],\n    targetIndustry: string\n  ): Promise<IndustryAlignment> {\n    const industryData = INDUSTRY_TAXONOMIES[targetIndustry as keyof typeof INDUSTRY_TAXONOMIES];\n    \n    if (!industryData) {\n      return industryAlignment;\n    }\n\n    const allIndustrySkills = Object.values(industryData).flat();\n    const skillsLower = skills.map(s => s.toLowerCase());\n\n    const wellAligned = allIndustrySkills.filter(industrySkill =>\n      skillsLower.some(skill => \n        skill.includes(industrySkill.toLowerCase()) || \n        industrySkill.toLowerCase().includes(skill)\n      )\n    );\n\n    const missing = allIndustrySkills.filter(industrySkill =>\n      !skillsLower.some(skill => \n        skill.includes(industrySkill.toLowerCase()) || \n        industrySkill.toLowerCase().includes(skill)\n      )\n    );\n\n    return {\n      ...industryAlignment,\n      wellAlignedSkills: [...new Set([...industryAlignment.wellAlignedSkills, ...wellAligned])],\n      missingIndustrySkills: [...new Set([...industryAlignment.missingIndustrySkills, ...missing.slice(0, 10)])],\n      score: Math.round((wellAligned.length / allIndustrySkills.length) * 100)\n    };\n  }\n\n  /**\n   * Get keyword importance based on category and context\n   */\n  private getKeywordImportance(keyword: string, category: string): 'critical' | 'high' | 'medium' | 'low' {\n    // High-importance categories\n    if (['frameworks', 'languages', 'regulations'].includes(category)) {\n      return 'high';\n    }\n    \n    // Medium-importance categories\n    if (['tools', 'platforms'].includes(category)) {\n      return 'medium';\n    }\n    \n    // Default to low importance\n    return 'low';\n  }\n\n  /**\n   * Map category names to standard types\n   */\n  private mapCategoryType(category: string): 'technical' | 'soft' | 'industry' | 'role' {\n    const technicalCategories = ['frameworks', 'languages', 'tools', 'platforms', 'systems'];\n    const industryCategories = ['regulations', 'concepts', 'metrics'];\n    \n    if (technicalCategories.includes(category)) {\n      return 'technical';\n    }\n    \n    if (industryCategories.includes(category)) {\n      return 'industry';\n    }\n    \n    return 'role';\n  }\n\n  /**\n   * Get common variations of a keyword\n   */\n  private getKeywordVariations(keyword: string): string[] {\n    // Common variations and synonyms\n    const variations: { [key: string]: string[] } = {\n      'React': ['React.js', 'ReactJS', 'React JS'],\n      'Node.js': ['NodeJS', 'Node', 'Node JS'],\n      'JavaScript': ['JS', 'Javascript', 'ECMAScript'],\n      'TypeScript': ['TS', 'Typescript'],\n      'Python': ['py'],\n      'Docker': ['Containerization'],\n      'Kubernetes': ['K8s', 'K8S'],\n      'AWS': ['Amazon Web Services'],\n      'Azure': ['Microsoft Azure'],\n    };\n\n    return variations[keyword] || [keyword];\n  }\n}\n\n// Export singleton instance\nexport const atsOptimizationService = new ATSOptimizationService();\n"],"mappings":"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","ignoreList":[]}