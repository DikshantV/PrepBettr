{"version":3,"names":["cov_tl3kktt9u","actualCoverage","s","base_agent_1","require","Object","defineProperty","exports","enumerable","get","f","BaseAgent","technical_interviewer_1","TechnicalInterviewer","behavioral_interviewer_1","BehavioralInterviewer","industry_expert_1","IndustryExpert","agent_factory_1","AgentFactory","agent_orchestrator_1","AgentOrchestrator"],"sources":["/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/agents/index.ts"],"sourcesContent":["// Core agent interfaces and types\nexport type {\n  FoundryAgent,\n  AgentConfig,\n  InterviewContext,\n  SessionState,\n  Question,\n  CandidateProfile,\n  CompanyInfo,\n  SessionHistory\n} from '../types/agent-types';\n\n// Base agent class\nexport { BaseAgent } from './base-agent';\n\n// Individual agent implementations\nexport { TechnicalInterviewer } from './technical-interviewer';\nexport { BehavioralInterviewer } from './behavioral-interviewer';\nexport { IndustryExpert } from './industry-expert';\n\n// Factory and orchestration\nexport { AgentFactory, type AgentType, type AgentFactoryConfig } from './agent-factory';\nexport { \n  AgentOrchestrator,\n  type InterviewPhase,\n  type InterviewSessionConfig,\n  type InterviewSessionResult\n} from './agent-orchestrator';\n\n/**\n * Azure AI Foundry Agent System\n * \n * A comprehensive multi-agent interview system built on Azure AI Foundry.\n * \n * ## Quick Start\n * \n * ```typescript\n * import { AgentFactory, AgentOrchestrator } from '@/lib/azure-ai-foundry/agents';\n * \n * // Create individual agents\n * const factory = AgentFactory.getInstance();\n * const technicalAgent = factory.createAgent('technical');\n * \n * // Or run a complete interview session\n * const orchestrator = new AgentOrchestrator();\n * const config = orchestrator.createStandardSession({\n *   sessionId: 'interview-001',\n *   candidateProfile: {\n *     name: 'John Doe',\n *     experience: 'senior',\n *     skills: ['JavaScript', 'React', 'Node.js']\n *   },\n *   jobRole: 'Senior Full Stack Developer'\n * });\n * \n * const result = await orchestrator.startSession(config);\n * console.log(`Generated ${result.allQuestions.length} questions across ${result.phaseResults.length} phases`);\n * ```\n * \n * ## Available Agents\n * \n * - **TechnicalInterviewer**: Specializes in coding challenges, system design, and technical problem-solving (GPT-4.5)\n * - **BehavioralInterviewer**: Focuses on soft skills, leadership potential, and cultural fit assessment (GPT-4o)  \n * - **IndustryExpert**: Evaluates industry knowledge, market awareness, and strategic thinking (Llama-4)\n * \n * ## Architecture\n * \n * - **BaseAgent**: Abstract base class providing common functionality\n * - **AgentFactory**: Factory pattern for creating and caching agent instances\n * - **AgentOrchestrator**: Manages multi-phase interview sessions with progress tracking\n * - **FoundryClientBase**: Handles Azure AI Foundry API communication with cost/usage tracking\n * \n * ## Features\n * \n * - ✅ Multi-model support (GPT-4.5, GPT-4o, Llama-4)\n * - ✅ Intelligent fallback questions when API calls fail\n * - ✅ Session state management and progress tracking\n * - ✅ Cost and usage monitoring\n * - ✅ Configurable interview phases and agent parameters\n * - ✅ Industry-specific question generation\n * - ✅ Experience level adaptation\n * - ✅ Comprehensive test coverage\n */\n"],"mappings":"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","ignoreList":[]}