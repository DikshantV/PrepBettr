{"file":"/Users/dikshantvashistha/PrepBettr/tests/security/security-compliance.test.ts","mappings":"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","names":[],"sources":["/Users/dikshantvashistha/PrepBettr/tests/security/security-compliance.test.ts"],"sourcesContent":["/**\n * Security and Compliance Testing Suite\n * \n * Automated testing for JWT validation, encryption verification, RBAC testing,\n * Key Vault integration, and GDPR compliance scenarios with audit trail validation.\n * \n * @version 2.0.0\n */\n\nimport { test, expect } from '@playwright/test';\nimport jwt from 'jsonwebtoken';\nimport crypto from 'crypto';\nimport { faker } from '@faker-js/faker';\n\n// ===== TEST CONFIGURATIONS =====\n\nconst TEST_CONFIG = {\n  azure: {\n    keyVaultUrl: process.env.AZURE_KEY_VAULT_URI || 'https://test-keyvault.vault.azure.net',\n    tenantId: process.env.AZURE_TENANT_ID || 'test-tenant-id',\n    subscriptionId: process.env.AZURE_SUBSCRIPTION_ID || 'test-subscription-id'\n  },\n  jwt: {\n    algorithm: 'RS256',\n    issuer: 'https://securetoken.google.com/prepbettr-test',\n    audience: 'prepbettr-test'\n  },\n  encryption: {\n    algorithms: ['AES-256-GCM', 'RSA-OAEP'],\n    keyLengths: [256, 2048]\n  },\n  gdpr: {\n    dataRetentionDays: 30,\n    deletionRequestTimeout: 72 // hours\n  }\n};\n\n// ===== SECURITY TEST UTILITIES =====\n\nclass SecurityTestUtils {\n  /**\n   * Generate test JWT token with various scenarios\n   */\n  static generateTestJWT(payload: any, options: any = {}) {\n    const secret = 'test-secret-key';\n    const defaults = {\n      algorithm: 'HS256',\n      expiresIn: '1h',\n      issuer: TEST_CONFIG.jwt.issuer,\n      audience: TEST_CONFIG.jwt.audience\n    };\n    \n    return jwt.sign(payload, secret, { ...defaults, ...options });\n  }\n\n  /**\n   * Generate expired JWT token\n   */\n  static generateExpiredJWT(payload: any) {\n    return this.generateTestJWT(payload, { expiresIn: '-1h' });\n  }\n\n  /**\n   * Generate malformed JWT token\n   */\n  static generateMalformedJWT() {\n    return 'invalid.jwt.token.format';\n  }\n\n  /**\n   * Encrypt test data\n   */\n  static encryptData(data: string, algorithm = 'aes-256-gcm'): {\n    encrypted: string;\n    iv: string;\n    tag?: string;\n    key: string;\n  } {\n    const key = crypto.randomBytes(32);\n    const iv = crypto.randomBytes(16);\n    const cipher = crypto.createCipher(algorithm, key);\n    \n    let encrypted = cipher.update(data, 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n    \n    return {\n      encrypted,\n      iv: iv.toString('hex'),\n      tag: (cipher as any).getAuthTag?.()?.toString('hex'),\n      key: key.toString('hex')\n    };\n  }\n\n  /**\n   * Generate test user with specific roles\n   */\n  static generateTestUser(roles: string[] = ['user']) {\n    return {\n      uid: faker.string.uuid(),\n      email: faker.internet.email(),\n      name: faker.person.fullName(),\n      roles,\n      permissions: this.getRolePermissions(roles),\n      createdAt: new Date().toISOString(),\n      lastLogin: new Date().toISOString()\n    };\n  }\n\n  /**\n   * Get permissions for roles\n   */\n  static getRolePermissions(roles: string[]): string[] {\n    const rolePermissions = {\n      admin: ['read', 'write', 'delete', 'manage_users', 'view_analytics', 'gdpr_operations'],\n      interviewer: ['read', 'write', 'conduct_interviews', 'view_reports'],\n      user: ['read', 'profile_update', 'take_interviews'],\n      guest: ['read']\n    };\n    \n    return roles.reduce((perms: string[], role: string) => {\n      return [...perms, ...(rolePermissions[role as keyof typeof rolePermissions] || [])];\n    }, []);\n  }\n\n  /**\n   * Generate GDPR test data\n   */\n  static generateGDPRTestData() {\n    return {\n      userId: faker.string.uuid(),\n      personalData: {\n        name: faker.person.fullName(),\n        email: faker.internet.email(),\n        phone: faker.phone.number(),\n        address: faker.location.streetAddress(),\n        birthDate: faker.date.birthdate(),\n        socialSecurity: faker.string.numeric(9)\n      },\n      sensitiveData: {\n        interviewRecordings: [\n          { id: faker.string.uuid(), duration: 1800, fileSize: 5242880 },\n          { id: faker.string.uuid(), duration: 2100, fileSize: 6291456 }\n        ],\n        resumeContent: faker.lorem.paragraphs(5),\n        performanceMetrics: {\n          averageScore: faker.number.float({ min: 60, max: 95 }),\n          interviewCount: faker.number.int({ min: 1, max: 20 }),\n          improvementAreas: faker.lorem.words(10)\n        }\n      }\n    };\n  }\n}\n\n// ===== JWT SECURITY TESTS =====\n\ntest.describe('JWT Security Validation', () => {\n  \n  test('should validate JWT token structure and claims', async ({ page }) => {\n    const testUser = SecurityTestUtils.generateTestUser(['user']);\n    const validJWT = SecurityTestUtils.generateTestJWT(testUser);\n\n    // Test JWT validation endpoint\n    const response = await page.request.post('/api/auth?action=verify', {\n      headers: {\n        'Authorization': `Bearer ${validJWT}`,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    expect(response.status()).toBe(200);\n    \n    const responseData = await response.json();\n    expect(responseData.success).toBe(true);\n    expect(responseData.claims.uid).toBe(testUser.uid);\n    expect(responseData.claims.email).toBe(testUser.email);\n  });\n\n  test('should reject expired JWT tokens', async ({ page }) => {\n    const testUser = SecurityTestUtils.generateTestUser(['user']);\n    const expiredJWT = SecurityTestUtils.generateExpiredJWT(testUser);\n\n    const response = await page.request.post('/api/auth?action=verify', {\n      headers: {\n        'Authorization': `Bearer ${expiredJWT}`,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    expect(response.status()).toBe(401);\n    \n    const responseData = await response.json();\n    expect(responseData.success).toBe(false);\n    expect(responseData.code).toBe('TOKEN_EXPIRED');\n  });\n\n  test('should reject malformed JWT tokens', async ({ page }) => {\n    const malformedJWT = SecurityTestUtils.generateMalformedJWT();\n\n    const response = await page.request.post('/api/auth?action=verify', {\n      headers: {\n        'Authorization': `Bearer ${malformedJWT}`,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    expect(response.status()).toBe(401);\n    \n    const responseData = await response.json();\n    expect(responseData.success).toBe(false);\n    expect(responseData.code).toBe('INVALID_FORMAT');\n  });\n\n  test('should validate JWT issuer and audience', async ({ page }) => {\n    const testUser = SecurityTestUtils.generateTestUser(['user']);\n    const invalidIssuerJWT = SecurityTestUtils.generateTestJWT(testUser, {\n      issuer: 'https://malicious-site.com'\n    });\n\n    const response = await page.request.post('/api/auth?action=verify', {\n      headers: {\n        'Authorization': `Bearer ${invalidIssuerJWT}`,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    expect(response.status()).toBe(401);\n    \n    const responseData = await response.json();\n    expect(responseData.success).toBe(false);\n    expect(responseData.code).toBe('INVALID_TOKEN');\n  });\n\n  test('should prevent JWT token reuse after logout', async ({ page }) => {\n    const testUser = SecurityTestUtils.generateTestUser(['user']);\n    const validJWT = SecurityTestUtils.generateTestJWT(testUser);\n\n    // First verification should succeed\n    let response = await page.request.post('/api/auth?action=verify', {\n      headers: {\n        'Authorization': `Bearer ${validJWT}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    expect(response.status()).toBe(200);\n\n    // Simulate logout\n    await page.request.post('/api/auth/logout', {\n      headers: {\n        'Authorization': `Bearer ${validJWT}`,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Token should now be invalidated\n    response = await page.request.post('/api/auth?action=verify', {\n      headers: {\n        'Authorization': `Bearer ${validJWT}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    expect(response.status()).toBe(401);\n  });\n});\n\n// ===== RBAC SECURITY TESTS =====\n\ntest.describe('Role-Based Access Control (RBAC)', () => {\n\n  test('should enforce admin-only endpoints', async ({ page }) => {\n    const regularUser = SecurityTestUtils.generateTestUser(['user']);\n    const adminUser = SecurityTestUtils.generateTestUser(['admin']);\n    \n    const userJWT = SecurityTestUtils.generateTestJWT(regularUser);\n    const adminJWT = SecurityTestUtils.generateTestJWT(adminUser);\n\n    // Regular user should be denied\n    let response = await page.request.get('/api/admin/users', {\n      headers: { 'Authorization': `Bearer ${userJWT}` }\n    });\n    expect(response.status()).toBe(403);\n\n    // Admin user should be allowed\n    response = await page.request.get('/api/admin/users', {\n      headers: { 'Authorization': `Bearer ${adminJWT}` }\n    });\n    expect(response.status()).toBe(200);\n  });\n\n  test('should validate permission-based access', async ({ page }) => {\n    const testCases = [\n      {\n        user: SecurityTestUtils.generateTestUser(['interviewer']),\n        endpoint: '/api/interviews/manage',\n        expectedStatus: 200\n      },\n      {\n        user: SecurityTestUtils.generateTestUser(['user']),\n        endpoint: '/api/interviews/manage',\n        expectedStatus: 403\n      },\n      {\n        user: SecurityTestUtils.generateTestUser(['guest']),\n        endpoint: '/api/profile/update',\n        expectedStatus: 403\n      }\n    ];\n\n    for (const testCase of testCases) {\n      const jwt = SecurityTestUtils.generateTestJWT(testCase.user);\n      \n      const response = await page.request.post(testCase.endpoint, {\n        headers: { 'Authorization': `Bearer ${jwt}` },\n        data: { test: 'data' }\n      });\n      \n      expect(response.status()).toBe(testCase.expectedStatus);\n    }\n  });\n\n  test('should prevent privilege escalation', async ({ page }) => {\n    const regularUser = SecurityTestUtils.generateTestUser(['user']);\n    const userJWT = SecurityTestUtils.generateTestJWT(regularUser);\n\n    // Attempt to modify user roles\n    const response = await page.request.post('/api/auth?action=claims', {\n      headers: {\n        'Authorization': `Bearer ${userJWT}`,\n        'Content-Type': 'application/json'\n      },\n      data: {\n        uid: regularUser.uid,\n        claims: { roles: ['admin'] }\n      }\n    });\n\n    expect(response.status()).toBe(403);\n    \n    const responseData = await response.json();\n    expect(responseData.success).toBe(false);\n    expect(responseData.error).toContain('admin role required');\n  });\n});\n\n// ===== ENCRYPTION TESTS =====\n\ntest.describe('Data Encryption Verification', () => {\n\n  test('should verify data encryption at rest', async ({ page }) => {\n    const testUser = SecurityTestUtils.generateTestUser(['user']);\n    const userJWT = SecurityTestUtils.generateTestJWT(testUser);\n    \n    const sensitiveData = {\n      personalInfo: 'John Doe, SSN: 123-45-6789',\n      creditCard: '4111-1111-1111-1111',\n      notes: 'Confidential interview feedback'\n    };\n\n    // Store sensitive data\n    const storeResponse = await page.request.post('/api/profile/sensitive-data', {\n      headers: {\n        'Authorization': `Bearer ${userJWT}`,\n        'Content-Type': 'application/json'\n      },\n      data: sensitiveData\n    });\n\n    expect(storeResponse.status()).toBe(200);\n\n    // Verify data is encrypted in storage by checking raw storage\n    const rawDataResponse = await page.request.get('/api/debug/raw-data', {\n      headers: { 'Authorization': `Bearer ${userJWT}` }\n    });\n    \n    const rawData = await rawDataResponse.text();\n    \n    // Sensitive data should not appear in plain text\n    expect(rawData).not.toContain('123-45-6789');\n    expect(rawData).not.toContain('4111-1111-1111-1111');\n    expect(rawData).not.toContain('Confidential interview feedback');\n    \n    // Should contain encrypted markers\n    expect(rawData).toMatch(/encrypted|cipher|aes/i);\n  });\n\n  test('should verify HTTPS enforcement', async ({ page }) => {\n    // Test HTTP to HTTPS redirect\n    const httpResponse = await page.request.get('http://localhost:3000/api/health');\n    \n    if (httpResponse.status() === 301 || httpResponse.status() === 302) {\n      const location = httpResponse.headers()['location'];\n      expect(location).toMatch(/^https:/);\n    }\n\n    // Test secure headers\n    const httpsResponse = await page.request.get('/api/health');\n    const headers = httpsResponse.headers();\n    \n    expect(headers['strict-transport-security']).toBeTruthy();\n    expect(headers['x-content-type-options']).toBe('nosniff');\n    expect(headers['x-frame-options']).toBe('DENY');\n    expect(headers['x-xss-protection']).toBe('1; mode=block');\n  });\n\n  test('should validate Key Vault integration', async ({ page }) => {\n    // Test Key Vault secret retrieval\n    const response = await page.request.get('/api/config/secrets-health');\n    expect(response.status()).toBe(200);\n    \n    const healthData = await response.json();\n    expect(healthData.keyVault.status).toBe('healthy');\n    expect(healthData.secretsAccessible).toBe(true);\n    \n    // Verify secrets are not exposed in responses\n    expect(JSON.stringify(healthData)).not.toMatch(/secret|key|password/i);\n  });\n});\n\n// ===== GDPR COMPLIANCE TESTS =====\n\ntest.describe('GDPR Compliance Validation', () => {\n\n  test('should handle data subject access requests (SAR)', async ({ page }) => {\n    const testUser = SecurityTestUtils.generateTestUser(['user']);\n    const userJWT = SecurityTestUtils.generateTestJWT(testUser);\n    const gdprData = SecurityTestUtils.generateGDPRTestData();\n\n    // Create user data\n    await page.request.post('/api/profile', {\n      headers: {\n        'Authorization': `Bearer ${userJWT}`,\n        'Content-Type': 'application/json'\n      },\n      data: gdprData\n    });\n\n    // Request data export (SAR)\n    const exportResponse = await page.request.post('/api/gdpr/export', {\n      headers: {\n        'Authorization': `Bearer ${userJWT}`,\n        'Content-Type': 'application/json'\n      },\n      data: { userId: testUser.uid }\n    });\n\n    expect(exportResponse.status()).toBe(200);\n    \n    const exportData = await exportResponse.json();\n    expect(exportData.success).toBe(true);\n    expect(exportData.exportData).toBeTruthy();\n    expect(exportData.exportData.userId).toBe(testUser.uid);\n    expect(exportData.exportData.data.users).toBeTruthy();\n  });\n\n  test('should handle right to erasure (deletion) requests', async ({ page }) => {\n    const testUser = SecurityTestUtils.generateTestUser(['user']);\n    const userJWT = SecurityTestUtils.generateTestJWT(testUser);\n    const gdprData = SecurityTestUtils.generateGDPRTestData();\n\n    // Create user data first\n    await page.request.post('/api/profile', {\n      headers: {\n        'Authorization': `Bearer ${userJWT}`,\n        'Content-Type': 'application/json'\n      },\n      data: gdprData\n    });\n\n    // Request data deletion\n    const deletionResponse = await page.request.delete('/api/gdpr/delete', {\n      headers: {\n        'Authorization': `Bearer ${userJWT}`,\n        'Content-Type': 'application/json'\n      },\n      data: {\n        userId: testUser.uid,\n        reason: 'User requested account deletion'\n      }\n    });\n\n    expect(deletionResponse.status()).toBe(200);\n    \n    const deletionData = await deletionResponse.json();\n    expect(deletionData.success).toBe(true);\n    expect(deletionData.requestId).toBeTruthy();\n    expect(deletionData.status).toBe('processing');\n    \n    // Verify audit trail\n    const auditResponse = await page.request.get(`/api/gdpr/audit/${deletionData.requestId}`, {\n      headers: { 'Authorization': `Bearer ${userJWT}` }\n    });\n    \n    const auditData = await auditResponse.json();\n    expect(auditData.action).toBe('data_deletion_requested');\n    expect(auditData.userId).toBe(testUser.uid);\n    expect(auditData.timestamp).toBeTruthy();\n  });\n\n  test('should validate data retention policies', async ({ page }) => {\n    const testUser = SecurityTestUtils.generateTestUser(['admin']);\n    const adminJWT = SecurityTestUtils.generateTestJWT(testUser);\n\n    // Check retention policy enforcement\n    const retentionResponse = await page.request.get('/api/gdpr/retention-check', {\n      headers: { 'Authorization': `Bearer ${adminJWT}` }\n    });\n\n    expect(retentionResponse.status()).toBe(200);\n    \n    const retentionData = await retentionResponse.json();\n    expect(retentionData.retentionPolicyDays).toBe(TEST_CONFIG.gdpr.dataRetentionDays);\n    expect(retentionData.expiredDataCount).toBeGreaterThanOrEqual(0);\n    \n    if (retentionData.expiredDataCount > 0) {\n      expect(retentionData.scheduledForDeletion).toBe(true);\n    }\n  });\n\n  test('should validate consent management', async ({ page }) => {\n    const testUser = SecurityTestUtils.generateTestUser(['user']);\n    const userJWT = SecurityTestUtils.generateTestJWT(testUser);\n\n    // Update consent preferences\n    const consentResponse = await page.request.post('/api/gdpr/consent', {\n      headers: {\n        'Authorization': `Bearer ${userJWT}`,\n        'Content-Type': 'application/json'\n      },\n      data: {\n        marketing: false,\n        analytics: true,\n        functionalCookies: true,\n        dataProcessing: true\n      }\n    });\n\n    expect(consentResponse.status()).toBe(200);\n    \n    // Verify consent is respected\n    const profileResponse = await page.request.get('/api/profile/analytics', {\n      headers: { 'Authorization': `Bearer ${userJWT}` }\n    });\n    \n    expect(profileResponse.status()).toBe(200); // Analytics allowed\n    \n    const marketingResponse = await page.request.get('/api/profile/marketing', {\n      headers: { 'Authorization': `Bearer ${userJWT}` }\n    });\n    \n    expect(marketingResponse.status()).toBe(403); // Marketing denied\n  });\n\n  test('should validate audit trail completeness', async ({ page }) => {\n    const testUser = SecurityTestUtils.generateTestUser(['admin']);\n    const adminJWT = SecurityTestUtils.generateTestJWT(testUser);\n\n    // Perform various actions that should be audited\n    const actions = [\n      { method: 'POST', endpoint: '/api/profile', data: { name: 'Test' } },\n      { method: 'GET', endpoint: '/api/profile' },\n      { method: 'PUT', endpoint: '/api/profile', data: { name: 'Updated' } },\n      { method: 'DELETE', endpoint: '/api/profile/session/test-id' }\n    ];\n\n    for (const action of actions) {\n      await page.request[action.method.toLowerCase() as keyof typeof page.request](action.endpoint, {\n        headers: {\n          'Authorization': `Bearer ${adminJWT}`,\n          'Content-Type': 'application/json'\n        },\n        data: action.data\n      });\n    }\n\n    // Check audit trail\n    const auditResponse = await page.request.get('/api/gdpr/audit-trail', {\n      headers: { 'Authorization': `Bearer ${adminJWT}` }\n    });\n\n    expect(auditResponse.status()).toBe(200);\n    \n    const auditData = await auditResponse.json();\n    expect(auditData.entries.length).toBeGreaterThanOrEqual(actions.length);\n    \n    // Verify audit entry structure\n    const auditEntry = auditData.entries[0];\n    expect(auditEntry.userId).toBeTruthy();\n    expect(auditEntry.action).toBeTruthy();\n    expect(auditEntry.timestamp).toBeTruthy();\n    expect(auditEntry.ipAddress).toBeTruthy();\n    expect(auditEntry.userAgent).toBeTruthy();\n  });\n});\n\n// ===== SECURITY HEADERS AND POLICIES =====\n\ntest.describe('Security Headers and Policies', () => {\n\n  test('should enforce Content Security Policy (CSP)', async ({ page }) => {\n    await page.goto('/');\n    \n    const cspHeader = await page.evaluate(() => {\n      const metaTags = document.querySelectorAll('meta[http-equiv=\"Content-Security-Policy\"]');\n      return metaTags.length > 0 ? metaTags[0].getAttribute('content') : null;\n    });\n\n    expect(cspHeader).toBeTruthy();\n    expect(cspHeader).toContain(\"default-src 'self'\");\n    expect(cspHeader).toContain(\"script-src 'self'\");\n    expect(cspHeader).toContain(\"style-src 'self' 'unsafe-inline'\");\n    expect(cspHeader).toContain(\"object-src 'none'\");\n  });\n\n  test('should prevent clickjacking attacks', async ({ page }) => {\n    const response = await page.request.get('/');\n    const headers = response.headers();\n    \n    expect(headers['x-frame-options']).toBe('DENY');\n  });\n\n  test('should prevent MIME type sniffing', async ({ page }) => {\n    const response = await page.request.get('/api/health');\n    const headers = response.headers();\n    \n    expect(headers['x-content-type-options']).toBe('nosniff');\n  });\n\n  test('should enforce XSS protection', async ({ page }) => {\n    const response = await page.request.get('/');\n    const headers = response.headers();\n    \n    expect(headers['x-xss-protection']).toBe('1; mode=block');\n  });\n});\n\n// ===== INPUT VALIDATION AND SANITIZATION =====\n\ntest.describe('Input Validation and Sanitization', () => {\n\n  test('should prevent SQL injection attempts', async ({ page }) => {\n    const testUser = SecurityTestUtils.generateTestUser(['user']);\n    const userJWT = SecurityTestUtils.generateTestJWT(testUser);\n    \n    const maliciousInputs = [\n      \"'; DROP TABLE users; --\",\n      \"1' OR '1'='1\",\n      \"admin'--\",\n      \"' UNION SELECT password FROM users WHERE username='admin'--\"\n    ];\n\n    for (const maliciousInput of maliciousInputs) {\n      const response = await page.request.get(`/api/profile/search?query=${encodeURIComponent(maliciousInput)}`, {\n        headers: { 'Authorization': `Bearer ${userJWT}` }\n      });\n      \n      // Should either reject the input or handle it safely\n      if (response.status() === 400) {\n        const errorData = await response.json();\n        expect(errorData.error).toMatch(/invalid|validation/i);\n      } else if (response.status() === 200) {\n        const responseData = await response.json();\n        // Should not contain evidence of SQL injection success\n        expect(JSON.stringify(responseData)).not.toMatch(/password|admin|users/i);\n      }\n    }\n  });\n\n  test('should prevent XSS attacks', async ({ page }) => {\n    const testUser = SecurityTestUtils.generateTestUser(['user']);\n    const userJWT = SecurityTestUtils.generateTestJWT(testUser);\n    \n    const xssPayloads = [\n      '<script>alert(\"XSS\")</script>',\n      'javascript:alert(\"XSS\")',\n      '<img src=x onerror=alert(\"XSS\")>',\n      '\"><script>alert(\"XSS\")</script>'\n    ];\n\n    for (const payload of xssPayloads) {\n      const response = await page.request.post('/api/profile/notes', {\n        headers: {\n          'Authorization': `Bearer ${userJWT}`,\n          'Content-Type': 'application/json'\n        },\n        data: { note: payload }\n      });\n      \n      if (response.status() === 200) {\n        // Retrieve the data and verify it's sanitized\n        const getResponse = await page.request.get('/api/profile/notes', {\n          headers: { 'Authorization': `Bearer ${userJWT}` }\n        });\n        \n        const notesData = await getResponse.json();\n        const savedNote = notesData.notes.find((n: any) => n.content === payload);\n        \n        if (savedNote) {\n          // Content should be sanitized\n          expect(savedNote.content).not.toContain('<script>');\n          expect(savedNote.content).not.toContain('javascript:');\n          expect(savedNote.content).not.toContain('onerror=');\n        }\n      }\n    }\n  });\n\n  test('should validate file upload security', async ({ page }) => {\n    const testUser = SecurityTestUtils.generateTestUser(['user']);\n    const userJWT = SecurityTestUtils.generateTestJWT(testUser);\n    \n    // Test malicious file upload attempts\n    const maliciousFiles = [\n      { name: 'malware.exe', content: 'MZ\\x90\\x00\\x03\\x00\\x00\\x00', type: 'application/x-msdownload' },\n      { name: 'script.php', content: '<?php system($_GET[\"cmd\"]); ?>', type: 'application/x-php' },\n      { name: 'payload.js', content: 'eval(atob(\"YWxlcnQoIlhTUyIp\"))', type: 'application/javascript' }\n    ];\n\n    for (const file of maliciousFiles) {\n      const formData = new FormData();\n      formData.append('file', new Blob([file.content], { type: file.type }), file.name);\n      \n      const response = await page.request.post('/api/profile/resume-upload', {\n        headers: { 'Authorization': `Bearer ${userJWT}` },\n        multipart: {\n          file: {\n            name: file.name,\n            mimeType: file.type,\n            buffer: Buffer.from(file.content)\n          }\n        }\n      });\n      \n      // Should reject malicious files\n      expect([400, 403, 415]).toContain(response.status());\n      \n      const errorData = await response.json();\n      expect(errorData.error).toMatch(/file type|invalid|not allowed/i);\n    }\n  });\n});\n"],"version":3}