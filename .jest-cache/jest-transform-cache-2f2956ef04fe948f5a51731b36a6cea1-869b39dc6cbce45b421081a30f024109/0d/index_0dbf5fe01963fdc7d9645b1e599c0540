6cea8a659c5444506a2c2dffad986f0f
/* istanbul ignore next */
function cov_en13hratt() {
  var path = "/Users/dikshantvashistha/PrepBettr/azure/searchScheduler/index.js";
  var hash = "37cd25f098855eb08e34055d1bdaef04447b5b5d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/azure/searchScheduler/index.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 16
        },
        end: {
          line: 1,
          column: 43
        }
      },
      "1": {
        start: {
          line: 2,
          column: 21
        },
        end: {
          line: 2,
          column: 61
        }
      },
      "2": {
        start: {
          line: 3,
          column: 25
        },
        end: {
          line: 3,
          column: 67
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 68,
          column: 3
        }
      },
      "4": {
        start: {
          line: 9,
          column: 26
        },
        end: {
          line: 9,
          column: 50
        }
      },
      "5": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 79
        }
      },
      "6": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 66,
          column: 9
        }
      },
      "7": {
        start: {
          line: 13,
          column: 12
        },
        end: {
          line: 17,
          column: 14
        }
      },
      "8": {
        start: {
          line: 20,
          column: 32
        },
        end: {
          line: 20,
          column: 63
        }
      },
      "9": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 25,
          column: 13
        }
      },
      "10": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 23,
          column: 79
        }
      },
      "11": {
        start: {
          line: 24,
          column: 16
        },
        end: {
          line: 24,
          column: 23
        }
      },
      "12": {
        start: {
          line: 27,
          column: 36
        },
        end: {
          line: 27,
          column: 37
        }
      },
      "13": {
        start: {
          line: 28,
          column: 25
        },
        end: {
          line: 28,
          column: 26
        }
      },
      "14": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 54,
          column: 13
        }
      },
      "15": {
        start: {
          line: 31,
          column: 16
        },
        end: {
          line: 53,
          column: 17
        }
      },
      "16": {
        start: {
          line: 33,
          column: 40
        },
        end: {
          line: 33,
          column: 72
        }
      },
      "17": {
        start: {
          line: 35,
          column: 20
        },
        end: {
          line: 44,
          column: 21
        }
      },
      "18": {
        start: {
          line: 36,
          column: 24
        },
        end: {
          line: 36,
          column: 54
        }
      },
      "19": {
        start: {
          line: 37,
          column: 24
        },
        end: {
          line: 37,
          column: 44
        }
      },
      "20": {
        start: {
          line: 39,
          column: 24
        },
        end: {
          line: 43,
          column: 26
        }
      },
      "21": {
        start: {
          line: 46,
          column: 20
        },
        end: {
          line: 46,
          column: 29
        }
      },
      "22": {
        start: {
          line: 47,
          column: 20
        },
        end: {
          line: 47,
          column: 80
        }
      },
      "23": {
        start: {
          line: 48,
          column: 20
        },
        end: {
          line: 52,
          column: 22
        }
      },
      "24": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 60,
          column: 14
        }
      },
      "25": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 61
        }
      },
      "26": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 77
        }
      },
      "27": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 24
        }
      },
      "28": {
        start: {
          line: 71,
          column: 0
        },
        end: {
          line: 141,
          column: 3
        }
      },
      "29": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 139,
          column: 9
        }
      },
      "30": {
        start: {
          line: 76,
          column: 25
        },
        end: {
          line: 76,
          column: 45
        }
      },
      "31": {
        start: {
          line: 77,
          column: 59
        },
        end: {
          line: 77,
          column: 63
        }
      },
      "32": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 87,
          column: 13
        }
      },
      "33": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 86,
          column: 18
        }
      },
      "34": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 93,
          column: 14
        }
      },
      "35": {
        start: {
          line: 96,
          column: 34
        },
        end: {
          line: 102,
          column: 13
        }
      },
      "36": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 111,
          column: 14
        }
      },
      "37": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 117,
          column: 14
        }
      },
      "38": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 126,
          column: 14
        }
      },
      "39": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 66
        }
      },
      "40": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 130,
          column: 74
        }
      },
      "41": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 138,
          column: 14
        }
      },
      "42": {
        start: {
          line: 147,
          column: 4
        },
        end: {
          line: 175,
          column: 5
        }
      },
      "43": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 150,
          column: 59
        }
      },
      "44": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 171,
          column: 10
        }
      },
      "45": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 173,
          column: 61
        }
      },
      "46": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 174,
          column: 18
        }
      },
      "47": {
        start: {
          line: 182,
          column: 4
        },
        end: {
          line: 217,
          column: 5
        }
      },
      "48": {
        start: {
          line: 183,
          column: 25
        },
        end: {
          line: 183,
          column: 47
        }
      },
      "49": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 187,
          column: 9
        }
      },
      "50": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 25
        }
      },
      "51": {
        start: {
          line: 190,
          column: 27
        },
        end: {
          line: 190,
          column: 63
        }
      },
      "52": {
        start: {
          line: 191,
          column: 20
        },
        end: {
          line: 191,
          column: 30
        }
      },
      "53": {
        start: {
          line: 192,
          column: 37
        },
        end: {
          line: 192,
          column: 74
        }
      },
      "54": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 197,
          column: 9
        }
      },
      "55": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 24
        }
      },
      "56": {
        start: {
          line: 200,
          column: 34
        },
        end: {
          line: 200,
          column: 73
        }
      },
      "57": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 204,
          column: 9
        }
      },
      "58": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 79
        }
      },
      "59": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 25
        }
      },
      "60": {
        start: {
          line: 207,
          column: 28
        },
        end: {
          line: 207,
          column: 94
        }
      },
      "61": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 211,
          column: 9
        }
      },
      "62": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 209,
          column: 78
        }
      },
      "63": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 25
        }
      },
      "64": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 213,
          column: 21
        }
      },
      "65": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 215,
          column: 83
        }
      },
      "66": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 216,
          column: 21
        }
      },
      "67": {
        start: {
          line: 224,
          column: 4
        },
        end: {
          line: 248,
          column: 5
        }
      },
      "68": {
        start: {
          line: 225,
          column: 30
        },
        end: {
          line: 234,
          column: 9
        }
      },
      "69": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 242,
          column: 10
        }
      },
      "70": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 244,
          column: 64
        }
      },
      "71": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 246,
          column: 81
        }
      },
      "72": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 247,
          column: 20
        }
      },
      "73": {
        start: {
          line: 255,
          column: 4
        },
        end: {
          line: 275,
          column: 5
        }
      },
      "74": {
        start: {
          line: 257,
          column: 8
        },
        end: {
          line: 264,
          column: 10
        }
      },
      "75": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 266,
          column: 81
        }
      },
      "76": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 274,
          column: 10
        }
      },
      "77": {
        start: {
          line: 282,
          column: 4
        },
        end: {
          line: 289,
          column: 5
        }
      },
      "78": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 285,
          column: 45
        }
      },
      "79": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 287,
          column: 92
        }
      },
      "80": {
        start: {
          line: 288,
          column: 8
        },
        end: {
          line: 288,
          column: 17
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 13
          },
          end: {
            line: 8,
            column: 14
          }
        },
        loc: {
          start: {
            line: 8,
            column: 41
          },
          end: {
            line: 67,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 74,
            column: 13
          },
          end: {
            line: 74,
            column: 14
          }
        },
        loc: {
          start: {
            line: 74,
            column: 41
          },
          end: {
            line: 140,
            column: 5
          }
        },
        line: 74
      },
      "2": {
        name: "getActiveAutoApplyUsers",
        decl: {
          start: {
            line: 146,
            column: 15
          },
          end: {
            line: 146,
            column: 38
          }
        },
        loc: {
          start: {
            line: 146,
            column: 41
          },
          end: {
            line: 176,
            column: 1
          }
        },
        line: 146
      },
      "3": {
        name: "shouldScheduleSearch",
        decl: {
          start: {
            line: 181,
            column: 15
          },
          end: {
            line: 181,
            column: 35
          }
        },
        loc: {
          start: {
            line: 181,
            column: 42
          },
          end: {
            line: 218,
            column: 1
          }
        },
        line: 181
      },
      "4": {
        name: "scheduleJobSearch",
        decl: {
          start: {
            line: 223,
            column: 15
          },
          end: {
            line: 223,
            column: 32
          }
        },
        loc: {
          start: {
            line: 223,
            column: 39
          },
          end: {
            line: 249,
            column: 1
          }
        },
        line: 223
      },
      "5": {
        name: "getUserSearchFilters",
        decl: {
          start: {
            line: 254,
            column: 15
          },
          end: {
            line: 254,
            column: 35
          }
        },
        loc: {
          start: {
            line: 254,
            column: 44
          },
          end: {
            line: 276,
            column: 1
          }
        },
        line: 254
      },
      "6": {
        name: "getTodayApplicationCount",
        decl: {
          start: {
            line: 281,
            column: 15
          },
          end: {
            line: 281,
            column: 39
          }
        },
        loc: {
          start: {
            line: 281,
            column: 48
          },
          end: {
            line: 290,
            column: 1
          }
        },
        line: 281
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 22,
            column: 12
          },
          end: {
            line: 25,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 12
          },
          end: {
            line: 25,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "1": {
        loc: {
          start: {
            line: 35,
            column: 20
          },
          end: {
            line: 44,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 20
          },
          end: {
            line: 44,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "2": {
        loc: {
          start: {
            line: 77,
            column: 37
          },
          end: {
            line: 77,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 77,
            column: 49
          },
          end: {
            line: 77,
            column: 54
          }
        }],
        line: 77
      },
      "3": {
        loc: {
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 87,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 87,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "4": {
        loc: {
          start: {
            line: 98,
            column: 25
          },
          end: {
            line: 98,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 98,
            column: 25
          },
          end: {
            line: 98,
            column: 32
          }
        }, {
          start: {
            line: 98,
            column: 36
          },
          end: {
            line: 98,
            column: 70
          }
        }],
        line: 98
      },
      "5": {
        loc: {
          start: {
            line: 101,
            column: 26
          },
          end: {
            line: 101,
            column: 55
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 101,
            column: 38
          },
          end: {
            line: 101,
            column: 44
          }
        }, {
          start: {
            line: 101,
            column: 47
          },
          end: {
            line: 101,
            column: 55
          }
        }],
        line: 101
      },
      "6": {
        loc: {
          start: {
            line: 109,
            column: 39
          },
          end: {
            line: 109,
            column: 57
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 109,
            column: 51
          },
          end: {
            line: 109,
            column: 52
          }
        }, {
          start: {
            line: 109,
            column: 55
          },
          end: {
            line: 109,
            column: 57
          }
        }],
        line: 109
      },
      "7": {
        loc: {
          start: {
            line: 185,
            column: 8
          },
          end: {
            line: 187,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 185,
            column: 8
          },
          end: {
            line: 187,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 185
      },
      "8": {
        loc: {
          start: {
            line: 190,
            column: 36
          },
          end: {
            line: 190,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 190,
            column: 36
          },
          end: {
            line: 190,
            column: 57
          }
        }, {
          start: {
            line: 190,
            column: 61
          },
          end: {
            line: 190,
            column: 62
          }
        }],
        line: 190
      },
      "9": {
        loc: {
          start: {
            line: 195,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 195,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 195
      },
      "10": {
        loc: {
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 204,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 204,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 201
      },
      "11": {
        loc: {
          start: {
            line: 208,
            column: 8
          },
          end: {
            line: 211,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 208,
            column: 8
          },
          end: {
            line: 211,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 208
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0]
    },
    inputSourceMap: null,
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "37cd25f098855eb08e34055d1bdaef04447b5b5d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_en13hratt = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_en13hratt();
const {
  app
} =
/* istanbul ignore next */
(cov_en13hratt().s[0]++, require('@azure/functions'));
const queueService =
/* istanbul ignore next */
(cov_en13hratt().s[1]++, require('../lib/services/queue-service'));
const automationLogger =
/* istanbul ignore next */
(cov_en13hratt().s[2]++, require('../lib/services/automation-logs'));

// Timer trigger function - runs every 15 minutes
/* istanbul ignore next */
cov_en13hratt().s[3]++;
app.timer('searchSchedulerTimer', {
  schedule: '0 */15 * * * *',
  handler: async (myTimer, context) => {
    /* istanbul ignore next */
    cov_en13hratt().f[0]++;
    const timeStamp =
    /* istanbul ignore next */
    (cov_en13hratt().s[4]++, new Date().toISOString());
    /* istanbul ignore next */
    cov_en13hratt().s[5]++;
    context.log('Search Scheduler timer trigger function ran!', timeStamp);
    /* istanbul ignore next */
    cov_en13hratt().s[6]++;
    try {
      /* istanbul ignore next */
      cov_en13hratt().s[7]++;
      await automationLogger.logInfo('search_scheduler_started', 'Search scheduler timer triggered', {
        timestamp: timeStamp
      });

      // Get active users with auto-apply enabled
      const activeUsers =
      /* istanbul ignore next */
      (cov_en13hratt().s[8]++, await getActiveAutoApplyUsers());
      /* istanbul ignore next */
      cov_en13hratt().s[9]++;
      if (activeUsers.length === 0) {
        /* istanbul ignore next */
        cov_en13hratt().b[0][0]++;
        cov_en13hratt().s[10]++;
        context.log('No active users found for job search scheduling');
        /* istanbul ignore next */
        cov_en13hratt().s[11]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_en13hratt().b[0][1]++;
      }
      let scheduledSearches =
      /* istanbul ignore next */
      (cov_en13hratt().s[12]++, 0);
      let errors =
      /* istanbul ignore next */
      (cov_en13hratt().s[13]++, 0);
      /* istanbul ignore next */
      cov_en13hratt().s[14]++;
      for (const user of activeUsers) {
        /* istanbul ignore next */
        cov_en13hratt().s[15]++;
        try {
          // Check if user needs a new job search based on their settings
          const needsSearch =
          /* istanbul ignore next */
          (cov_en13hratt().s[16]++, await shouldScheduleSearch(user));
          /* istanbul ignore next */
          cov_en13hratt().s[17]++;
          if (needsSearch) {
            /* istanbul ignore next */
            cov_en13hratt().b[1][0]++;
            cov_en13hratt().s[18]++;
            await scheduleJobSearch(user);
            /* istanbul ignore next */
            cov_en13hratt().s[19]++;
            scheduledSearches++;
            /* istanbul ignore next */
            cov_en13hratt().s[20]++;
            await automationLogger.logInfo('job_search_scheduled', `Job search scheduled for user ${user.id}`, {
              userId: user.id,
              searchFilters: user.autoApplySettings.filters
            });
          } else
          /* istanbul ignore next */
          {
            cov_en13hratt().b[1][1]++;
          }
        } catch (userError) {
          /* istanbul ignore next */
          cov_en13hratt().s[21]++;
          errors++;
          /* istanbul ignore next */
          cov_en13hratt().s[22]++;
          context.log(`Error processing user ${user.id}:`, userError);
          /* istanbul ignore next */
          cov_en13hratt().s[23]++;
          await automationLogger.logError('search_scheduling_error', userError, {
            userId: user.id
          });
        }
      }
      /* istanbul ignore next */
      cov_en13hratt().s[24]++;
      await automationLogger.logInfo('search_scheduler_completed', `Search scheduling completed. Scheduled: ${scheduledSearches}, Errors: ${errors}`, {
        scheduledSearches,
        errors,
        processedUsers: activeUsers.length
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_en13hratt().s[25]++;
      context.log('Error in search scheduler:', error);
      /* istanbul ignore next */
      cov_en13hratt().s[26]++;
      await automationLogger.logError('search_scheduler_error', error);
      /* istanbul ignore next */
      cov_en13hratt().s[27]++;
      throw error;
    }
  }
});

// HTTP trigger for manual job search scheduling
/* istanbul ignore next */
cov_en13hratt().s[28]++;
app.http('searchSchedulerHttp', {
  methods: ['POST'],
  authLevel: 'function',
  handler: async (request, context) => {
    /* istanbul ignore next */
    cov_en13hratt().f[1]++;
    cov_en13hratt().s[29]++;
    try {
      const body =
      /* istanbul ignore next */
      (cov_en13hratt().s[30]++, await request.json());
      const {
        userId,
        filters,
        immediate =
        /* istanbul ignore next */
        (cov_en13hratt().b[2][0]++, false)
      } =
      /* istanbul ignore next */
      (cov_en13hratt().s[31]++, body);
      /* istanbul ignore next */
      cov_en13hratt().s[32]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_en13hratt().b[3][0]++;
        cov_en13hratt().s[33]++;
        return {
          status: 400,
          jsonBody: {
            success: false,
            error: 'userId is required'
          }
        };
      } else
      /* istanbul ignore next */
      {
        cov_en13hratt().b[3][1]++;
      }
      cov_en13hratt().s[34]++;
      await automationLogger.logInfo('manual_search_requested', `Manual job search requested for user ${userId}`, {
        userId,
        immediate,
        filters
      });

      // Create job search message
      const searchMessage =
      /* istanbul ignore next */
      (cov_en13hratt().s[35]++, {
        userId,
        filters:
        /* istanbul ignore next */
        (cov_en13hratt().b[4][0]++, filters) ||
        /* istanbul ignore next */
        (cov_en13hratt().b[4][1]++, await getUserSearchFilters(userId)),
        requestId: require('uuid').v4(),
        requestedAt: new Date().toISOString(),
        priority: immediate ?
        /* istanbul ignore next */
        (cov_en13hratt().b[5][0]++, 'high') :
        /* istanbul ignore next */
        (cov_en13hratt().b[5][1]++, 'normal')
      });

      // Add to search queue
      /* istanbul ignore next */
      cov_en13hratt().s[36]++;
      await queueService.addMessage(queueService.queues.SEARCH_JOBS, searchMessage, {
        visibilityTimeout: immediate ?
        /* istanbul ignore next */
        (cov_en13hratt().b[6][0]++, 0) :
        /* istanbul ignore next */
        (cov_en13hratt().b[6][1]++, 60) // Process immediately or in 1 minute
      });
      /* istanbul ignore next */
      cov_en13hratt().s[37]++;
      await automationLogger.logInfo('job_search_queued', `Job search queued for user ${userId}`, {
        userId,
        requestId: searchMessage.requestId
      });
      /* istanbul ignore next */
      cov_en13hratt().s[38]++;
      return {
        status: 200,
        jsonBody: {
          success: true,
          message: 'Job search scheduled successfully',
          requestId: searchMessage.requestId
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_en13hratt().s[39]++;
      context.log('Error in HTTP search scheduler:', error);
      /* istanbul ignore next */
      cov_en13hratt().s[40]++;
      await automationLogger.logError('manual_search_error', error);
      /* istanbul ignore next */
      cov_en13hratt().s[41]++;
      return {
        status: 500,
        jsonBody: {
          success: false,
          error: 'Internal server error'
        }
      };
    }
  }
});

/**
 * Get users with active auto-apply settings
 */
async function getActiveAutoApplyUsers() {
  /* istanbul ignore next */
  cov_en13hratt().f[2]++;
  cov_en13hratt().s[42]++;
  try {
    /* istanbul ignore next */
    cov_en13hratt().s[43]++;
    // TODO: In production, this would query Firebase Firestore or another database
    // For now, return mock data
    console.log('Fetching active auto-apply users...');
    /* istanbul ignore next */
    cov_en13hratt().s[44]++;
    return [{
      id: 'user123',
      email: 'user@example.com',
      autoApplySettings: {
        isEnabled: true,
        filters: {
          keywords: ['React', 'Frontend', 'JavaScript'],
          locations: ['San Francisco', 'Remote'],
          jobTypes: ['full-time'],
          workArrangements: ['remote', 'hybrid'],
          portals: ['LinkedIn', 'Indeed'],
          minimumRelevancyScore: 75
        },
        dailyApplicationLimit: 5,
        autoApplyThreshold: 80,
        lastSearchAt: '2024-01-15T06:00:00Z'
      }
    }];
  } catch (error) {
    /* istanbul ignore next */
    cov_en13hratt().s[45]++;
    console.error('Error fetching active users:', error);
    /* istanbul ignore next */
    cov_en13hratt().s[46]++;
    return [];
  }
}

/**
 * Determine if a user needs a new job search
 */
async function shouldScheduleSearch(user) {
  /* istanbul ignore next */
  cov_en13hratt().f[3]++;
  cov_en13hratt().s[47]++;
  try {
    const settings =
    /* istanbul ignore next */
    (cov_en13hratt().s[48]++, user.autoApplySettings);
    /* istanbul ignore next */
    cov_en13hratt().s[49]++;
    if (!settings.isEnabled) {
      /* istanbul ignore next */
      cov_en13hratt().b[7][0]++;
      cov_en13hratt().s[50]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_en13hratt().b[7][1]++;
    }

    // Check last search time
    const lastSearch =
    /* istanbul ignore next */
    (cov_en13hratt().s[51]++, new Date(
    /* istanbul ignore next */
    (cov_en13hratt().b[8][0]++, settings.lastSearchAt) ||
    /* istanbul ignore next */
    (cov_en13hratt().b[8][1]++, 0)));
    const now =
    /* istanbul ignore next */
    (cov_en13hratt().s[52]++, new Date());
    const hoursSinceLastSearch =
    /* istanbul ignore next */
    (cov_en13hratt().s[53]++, (now - lastSearch) / (1000 * 60 * 60));

    // Schedule search if it's been more than 4 hours
    /* istanbul ignore next */
    cov_en13hratt().s[54]++;
    if (hoursSinceLastSearch >= 4) {
      /* istanbul ignore next */
      cov_en13hratt().b[9][0]++;
      cov_en13hratt().s[55]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_en13hratt().b[9][1]++;
    }

    // Check if user has reached daily application limit
    const todayApplications =
    /* istanbul ignore next */
    (cov_en13hratt().s[56]++, await getTodayApplicationCount(user.id));
    /* istanbul ignore next */
    cov_en13hratt().s[57]++;
    if (todayApplications >= settings.dailyApplicationLimit) {
      /* istanbul ignore next */
      cov_en13hratt().b[10][0]++;
      cov_en13hratt().s[58]++;
      console.log(`User ${user.id} has reached daily application limit`);
      /* istanbul ignore next */
      cov_en13hratt().s[59]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_en13hratt().b[10][1]++;
    }

    // Check queue length to avoid overwhelming the system
    const queueLength =
    /* istanbul ignore next */
    (cov_en13hratt().s[60]++, await queueService.getQueueLength(queueService.queues.SEARCH_JOBS));
    /* istanbul ignore next */
    cov_en13hratt().s[61]++;
    if (queueLength > 50) {
      /* istanbul ignore next */
      cov_en13hratt().b[11][0]++;
      cov_en13hratt().s[62]++;
      console.log('Search queue is full, skipping additional searches');
      /* istanbul ignore next */
      cov_en13hratt().s[63]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_en13hratt().b[11][1]++;
    }
    cov_en13hratt().s[64]++;
    return false;
  } catch (error) {
    /* istanbul ignore next */
    cov_en13hratt().s[65]++;
    console.error(`Error determining if user ${user.id} needs search:`, error);
    /* istanbul ignore next */
    cov_en13hratt().s[66]++;
    return false;
  }
}

/**
 * Schedule a job search for a user
 */
async function scheduleJobSearch(user) {
  /* istanbul ignore next */
  cov_en13hratt().f[4]++;
  cov_en13hratt().s[67]++;
  try {
    const searchMessage =
    /* istanbul ignore next */
    (cov_en13hratt().s[68]++, {
      userId: user.id,
      filters: user.autoApplySettings.filters,
      requestId: require('uuid').v4(),
      requestedAt: new Date().toISOString(),
      priority: 'normal',
      autoApply: true,
      autoApplyThreshold: user.autoApplySettings.autoApplyThreshold,
      dailyLimit: user.autoApplySettings.dailyApplicationLimit
    });
    /* istanbul ignore next */
    cov_en13hratt().s[69]++;
    await queueService.addMessage(queueService.queues.SEARCH_JOBS, searchMessage, {
      visibilityTimeout: Math.floor(Math.random() * 300) + 60 // Random delay between 1-6 minutes
    });
    /* istanbul ignore next */
    cov_en13hratt().s[70]++;
    console.log(`Scheduled job search for user ${user.id}`);
  } catch (error) {
    /* istanbul ignore next */
    cov_en13hratt().s[71]++;
    console.error(`Error scheduling job search for user ${user.id}:`, error);
    /* istanbul ignore next */
    cov_en13hratt().s[72]++;
    throw error;
  }
}

/**
 * Get user's search filters (fallback function)
 */
async function getUserSearchFilters(userId) {
  /* istanbul ignore next */
  cov_en13hratt().f[5]++;
  cov_en13hratt().s[73]++;
  try {
    /* istanbul ignore next */
    cov_en13hratt().s[74]++;
    // TODO: Fetch from database
    return {
      keywords: ['React', 'Frontend', 'JavaScript'],
      locations: ['San Francisco', 'Remote'],
      jobTypes: ['full-time'],
      workArrangements: ['remote', 'hybrid'],
      portals: ['LinkedIn', 'Indeed'],
      minimumRelevancyScore: 75
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_en13hratt().s[75]++;
    console.error(`Error getting search filters for user ${userId}:`, error);
    /* istanbul ignore next */
    cov_en13hratt().s[76]++;
    return {
      keywords: [],
      locations: ['Remote'],
      jobTypes: ['full-time'],
      workArrangements: ['remote'],
      portals: ['LinkedIn'],
      minimumRelevancyScore: 70
    };
  }
}

/**
 * Get count of applications submitted today for a user
 */
async function getTodayApplicationCount(userId) {
  /* istanbul ignore next */
  cov_en13hratt().f[6]++;
  cov_en13hratt().s[77]++;
  try {
    /* istanbul ignore next */
    cov_en13hratt().s[78]++;
    // TODO: Query database for today's applications
    // For now, return a random number for demonstration
    return Math.floor(Math.random() * 3);
  } catch (error) {
    /* istanbul ignore next */
    cov_en13hratt().s[79]++;
    console.error(`Error getting today's application count for user ${userId}:`, error);
    /* istanbul ignore next */
    cov_en13hratt().s[80]++;
    return 0;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,