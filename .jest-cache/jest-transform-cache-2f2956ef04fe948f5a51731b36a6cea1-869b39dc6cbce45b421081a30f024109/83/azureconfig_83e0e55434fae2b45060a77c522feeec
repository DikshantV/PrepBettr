71a99bda198417e41561570b7eba6141
"use strict";

/* istanbul ignore next */
function cov_2gkmfq21ic() {
  var path = "/Users/dikshantvashistha/PrepBettr/azure/lib/azure-config.ts";
  var hash = "d8504da5654f9cc7a2071187ca09e7229680463d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/azure/lib/azure-config.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 46
        }
      },
      "2": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 4,
          column: 64
        }
      },
      "3": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 40
        }
      },
      "4": {
        start: {
          line: 6,
          column: 19
        },
        end: {
          line: 6,
          column: 45
        }
      },
      "5": {
        start: {
          line: 7,
          column: 27
        },
        end: {
          line: 7,
          column: 61
        }
      },
      "6": {
        start: {
          line: 9,
          column: 28
        },
        end: {
          line: 9,
          column: 112
        }
      },
      "7": {
        start: {
          line: 10,
          column: 20
        },
        end: {
          line: 10,
          column: 24
        }
      },
      "8": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 17,
          column: 5
        }
      },
      "9": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 80
        }
      },
      "10": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "11": {
        start: {
          line: 19,
          column: 27
        },
        end: {
          line: 19,
          column: 66
        }
      },
      "12": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 84
        }
      },
      "13": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 75
        }
      },
      "14": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 97
        }
      },
      "15": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 20
        }
      },
      "16": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 35,
          column: 5
        }
      },
      "17": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 29
        }
      },
      "18": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 117,
          column: 5
        }
      },
      "19": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 67
        }
      },
      "20": {
        start: {
          line: 38,
          column: 23
        },
        end: {
          line: 38,
          column: 45
        }
      },
      "21": {
        start: {
          line: 41,
          column: 32
        },
        end: {
          line: 55,
          column: 9
        }
      },
      "22": {
        start: {
          line: 47,
          column: 74
        },
        end: {
          line: 47,
          column: 78
        }
      },
      "23": {
        start: {
          line: 48,
          column: 74
        },
        end: {
          line: 48,
          column: 78
        }
      },
      "24": {
        start: {
          line: 49,
          column: 71
        },
        end: {
          line: 49,
          column: 75
        }
      },
      "25": {
        start: {
          line: 50,
          column: 70
        },
        end: {
          line: 50,
          column: 74
        }
      },
      "26": {
        start: {
          line: 51,
          column: 75
        },
        end: {
          line: 51,
          column: 79
        }
      },
      "27": {
        start: {
          line: 52,
          column: 70
        },
        end: {
          line: 52,
          column: 74
        }
      },
      "28": {
        start: {
          line: 53,
          column: 61
        },
        end: {
          line: 53,
          column: 65
        }
      },
      "29": {
        start: {
          line: 54,
          column: 64
        },
        end: {
          line: 54,
          column: 68
        }
      },
      "30": {
        start: {
          line: 56,
          column: 31
        },
        end: {
          line: 56,
          column: 65
        }
      },
      "31": {
        start: {
          line: 58,
          column: 26
        },
        end: {
          line: 58,
          column: 43
        }
      },
      "32": {
        start: {
          line: 59,
          column: 31
        },
        end: {
          line: 59,
          column: 48
        }
      },
      "33": {
        start: {
          line: 60,
          column: 31
        },
        end: {
          line: 60,
          column: 48
        }
      },
      "34": {
        start: {
          line: 61,
          column: 36
        },
        end: {
          line: 61,
          column: 53
        }
      },
      "35": {
        start: {
          line: 62,
          column: 38
        },
        end: {
          line: 62,
          column: 55
        }
      },
      "36": {
        start: {
          line: 63,
          column: 33
        },
        end: {
          line: 63,
          column: 50
        }
      },
      "37": {
        start: {
          line: 64,
          column: 33
        },
        end: {
          line: 64,
          column: 50
        }
      },
      "38": {
        start: {
          line: 65,
          column: 35
        },
        end: {
          line: 65,
          column: 52
        }
      },
      "39": {
        start: {
          line: 66,
          column: 34
        },
        end: {
          line: 66,
          column: 51
        }
      },
      "40": {
        start: {
          line: 67,
          column: 39
        },
        end: {
          line: 67,
          column: 56
        }
      },
      "41": {
        start: {
          line: 68,
          column: 34
        },
        end: {
          line: 68,
          column: 52
        }
      },
      "42": {
        start: {
          line: 69,
          column: 31
        },
        end: {
          line: 69,
          column: 49
        }
      },
      "43": {
        start: {
          line: 70,
          column: 34
        },
        end: {
          line: 70,
          column: 52
        }
      },
      "44": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 73,
          column: 9
        }
      },
      "45": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 93
        }
      },
      "46": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 88,
          column: 10
        }
      },
      "47": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 59
        }
      },
      "48": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 29
        }
      },
      "49": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 65
        }
      },
      "50": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 67
        }
      },
      "51": {
        start: {
          line: 96,
          column: 27
        },
        end: {
          line: 96,
          column: 38
        }
      },
      "52": {
        start: {
          line: 97,
          column: 32
        },
        end: {
          line: 111,
          column: 9
        }
      },
      "53": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "54": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 102
        }
      },
      "55": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 115,
          column: 40
        }
      },
      "56": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 116,
          column: 29
        }
      },
      "57": {
        start: {
          line: 124,
          column: 4
        },
        end: {
          line: 149,
          column: 5
        }
      },
      "58": {
        start: {
          line: 125,
          column: 24
        },
        end: {
          line: 125,
          column: 49
        }
      },
      "59": {
        start: {
          line: 127,
          column: 27
        },
        end: {
          line: 127,
          column: 38
        }
      },
      "60": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 128,
          column: 65
        }
      },
      "61": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 75
        }
      },
      "62": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 64
        }
      },
      "63": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 131,
          column: 74
        }
      },
      "64": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 78
        }
      },
      "65": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 133,
          column: 89
        }
      },
      "66": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 134,
          column: 89
        }
      },
      "67": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 138,
          column: 9
        }
      },
      "68": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 68
        }
      },
      "69": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 141,
          column: 9
        }
      },
      "70": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 140,
          column: 74
        }
      },
      "71": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 69
        }
      },
      "72": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 74
        }
      },
      "73": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 148,
          column: 20
        }
      },
      "74": {
        start: {
          line: 155,
          column: 23
        },
        end: {
          line: 155,
          column: 34
        }
      },
      "75": {
        start: {
          line: 156,
          column: 4
        },
        end: {
          line: 173,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "createKeyVaultClient",
        decl: {
          start: {
            line: 14,
            column: 9
          },
          end: {
            line: 14,
            column: 29
          }
        },
        loc: {
          start: {
            line: 14,
            column: 32
          },
          end: {
            line: 27,
            column: 1
          }
        },
        line: 14
      },
      "1": {
        name: "fetchAzureSecrets",
        decl: {
          start: {
            line: 31,
            column: 15
          },
          end: {
            line: 31,
            column: 32
          }
        },
        loc: {
          start: {
            line: 31,
            column: 35
          },
          end: {
            line: 118,
            column: 1
          }
        },
        line: 31
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 47,
            column: 68
          },
          end: {
            line: 47,
            column: 69
          }
        },
        loc: {
          start: {
            line: 47,
            column: 74
          },
          end: {
            line: 47,
            column: 78
          }
        },
        line: 47
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 48,
            column: 68
          },
          end: {
            line: 48,
            column: 69
          }
        },
        loc: {
          start: {
            line: 48,
            column: 74
          },
          end: {
            line: 48,
            column: 78
          }
        },
        line: 48
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 49,
            column: 65
          },
          end: {
            line: 49,
            column: 66
          }
        },
        loc: {
          start: {
            line: 49,
            column: 71
          },
          end: {
            line: 49,
            column: 75
          }
        },
        line: 49
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 50,
            column: 64
          },
          end: {
            line: 50,
            column: 65
          }
        },
        loc: {
          start: {
            line: 50,
            column: 70
          },
          end: {
            line: 50,
            column: 74
          }
        },
        line: 50
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 51,
            column: 69
          },
          end: {
            line: 51,
            column: 70
          }
        },
        loc: {
          start: {
            line: 51,
            column: 75
          },
          end: {
            line: 51,
            column: 79
          }
        },
        line: 51
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 52,
            column: 64
          },
          end: {
            line: 52,
            column: 65
          }
        },
        loc: {
          start: {
            line: 52,
            column: 70
          },
          end: {
            line: 52,
            column: 74
          }
        },
        line: 52
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 53,
            column: 55
          },
          end: {
            line: 53,
            column: 56
          }
        },
        loc: {
          start: {
            line: 53,
            column: 61
          },
          end: {
            line: 53,
            column: 65
          }
        },
        line: 53
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 54,
            column: 58
          },
          end: {
            line: 54,
            column: 59
          }
        },
        loc: {
          start: {
            line: 54,
            column: 64
          },
          end: {
            line: 54,
            column: 68
          }
        },
        line: 54
      },
      "10": {
        name: "initializeAzureEnvironment",
        decl: {
          start: {
            line: 123,
            column: 15
          },
          end: {
            line: 123,
            column: 41
          }
        },
        loc: {
          start: {
            line: 123,
            column: 44
          },
          end: {
            line: 150,
            column: 1
          }
        },
        line: 123
      },
      "11": {
        name: "getAzureConfig",
        decl: {
          start: {
            line: 154,
            column: 9
          },
          end: {
            line: 154,
            column: 23
          }
        },
        loc: {
          start: {
            line: 154,
            column: 26
          },
          end: {
            line: 174,
            column: 1
          }
        },
        line: 154
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 9,
            column: 28
          },
          end: {
            line: 9,
            column: 112
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 9,
            column: 28
          },
          end: {
            line: 9,
            column: 59
          }
        }, {
          start: {
            line: 9,
            column: 63
          },
          end: {
            line: 9,
            column: 112
          }
        }],
        line: 9
      },
      "1": {
        loc: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 15
      },
      "2": {
        loc: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "3": {
        loc: {
          start: {
            line: 71,
            column: 8
          },
          end: {
            line: 73,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 8
          },
          end: {
            line: 73,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "4": {
        loc: {
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 71,
            column: 484
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 71,
            column: 84
          }
        }, {
          start: {
            line: 71,
            column: 88
          },
          end: {
            line: 71,
            column: 175
          }
        }, {
          start: {
            line: 71,
            column: 179
          },
          end: {
            line: 71,
            column: 266
          }
        }, {
          start: {
            line: 71,
            column: 270
          },
          end: {
            line: 71,
            column: 372
          }
        }, {
          start: {
            line: 71,
            column: 376
          },
          end: {
            line: 71,
            column: 484
          }
        }],
        line: 71
      },
      "5": {
        loc: {
          start: {
            line: 71,
            column: 14
          },
          end: {
            line: 71,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 71,
            column: 59
          },
          end: {
            line: 71,
            column: 65
          }
        }, {
          start: {
            line: 71,
            column: 68
          },
          end: {
            line: 71,
            column: 83
          }
        }],
        line: 71
      },
      "6": {
        loc: {
          start: {
            line: 71,
            column: 14
          },
          end: {
            line: 71,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 71,
            column: 14
          },
          end: {
            line: 71,
            column: 32
          }
        }, {
          start: {
            line: 71,
            column: 36
          },
          end: {
            line: 71,
            column: 56
          }
        }],
        line: 71
      },
      "7": {
        loc: {
          start: {
            line: 71,
            column: 90
          },
          end: {
            line: 71,
            column: 174
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 71,
            column: 145
          },
          end: {
            line: 71,
            column: 151
          }
        }, {
          start: {
            line: 71,
            column: 154
          },
          end: {
            line: 71,
            column: 174
          }
        }],
        line: 71
      },
      "8": {
        loc: {
          start: {
            line: 71,
            column: 90
          },
          end: {
            line: 71,
            column: 142
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 71,
            column: 90
          },
          end: {
            line: 71,
            column: 113
          }
        }, {
          start: {
            line: 71,
            column: 117
          },
          end: {
            line: 71,
            column: 142
          }
        }],
        line: 71
      },
      "9": {
        loc: {
          start: {
            line: 71,
            column: 181
          },
          end: {
            line: 71,
            column: 265
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 71,
            column: 236
          },
          end: {
            line: 71,
            column: 242
          }
        }, {
          start: {
            line: 71,
            column: 245
          },
          end: {
            line: 71,
            column: 265
          }
        }],
        line: 71
      },
      "10": {
        loc: {
          start: {
            line: 71,
            column: 181
          },
          end: {
            line: 71,
            column: 233
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 71,
            column: 181
          },
          end: {
            line: 71,
            column: 204
          }
        }, {
          start: {
            line: 71,
            column: 208
          },
          end: {
            line: 71,
            column: 233
          }
        }],
        line: 71
      },
      "11": {
        loc: {
          start: {
            line: 71,
            column: 272
          },
          end: {
            line: 71,
            column: 371
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 71,
            column: 337
          },
          end: {
            line: 71,
            column: 343
          }
        }, {
          start: {
            line: 71,
            column: 346
          },
          end: {
            line: 71,
            column: 371
          }
        }],
        line: 71
      },
      "12": {
        loc: {
          start: {
            line: 71,
            column: 272
          },
          end: {
            line: 71,
            column: 334
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 71,
            column: 272
          },
          end: {
            line: 71,
            column: 300
          }
        }, {
          start: {
            line: 71,
            column: 304
          },
          end: {
            line: 71,
            column: 334
          }
        }],
        line: 71
      },
      "13": {
        loc: {
          start: {
            line: 71,
            column: 378
          },
          end: {
            line: 71,
            column: 483
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 71,
            column: 447
          },
          end: {
            line: 71,
            column: 453
          }
        }, {
          start: {
            line: 71,
            column: 456
          },
          end: {
            line: 71,
            column: 483
          }
        }],
        line: 71
      },
      "14": {
        loc: {
          start: {
            line: 71,
            column: 378
          },
          end: {
            line: 71,
            column: 444
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 71,
            column: 378
          },
          end: {
            line: 71,
            column: 408
          }
        }, {
          start: {
            line: 71,
            column: 412
          },
          end: {
            line: 71,
            column: 444
          }
        }],
        line: 71
      },
      "15": {
        loc: {
          start: {
            line: 80,
            column: 40
          },
          end: {
            line: 80,
            column: 144
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 80,
            column: 41
          },
          end: {
            line: 80,
            column: 131
          }
        }, {
          start: {
            line: 80,
            column: 136
          },
          end: {
            line: 80,
            column: 144
          }
        }],
        line: 80
      },
      "16": {
        loc: {
          start: {
            line: 80,
            column: 41
          },
          end: {
            line: 80,
            column: 131
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 80,
            column: 100
          },
          end: {
            line: 80,
            column: 106
          }
        }, {
          start: {
            line: 80,
            column: 109
          },
          end: {
            line: 80,
            column: 131
          }
        }],
        line: 80
      },
      "17": {
        loc: {
          start: {
            line: 80,
            column: 41
          },
          end: {
            line: 80,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 80,
            column: 41
          },
          end: {
            line: 80,
            column: 66
          }
        }, {
          start: {
            line: 80,
            column: 70
          },
          end: {
            line: 80,
            column: 97
          }
        }],
        line: 80
      },
      "18": {
        loc: {
          start: {
            line: 81,
            column: 40
          },
          end: {
            line: 81,
            column: 144
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 81,
            column: 41
          },
          end: {
            line: 81,
            column: 131
          }
        }, {
          start: {
            line: 81,
            column: 136
          },
          end: {
            line: 81,
            column: 144
          }
        }],
        line: 81
      },
      "19": {
        loc: {
          start: {
            line: 81,
            column: 41
          },
          end: {
            line: 81,
            column: 131
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 81,
            column: 100
          },
          end: {
            line: 81,
            column: 106
          }
        }, {
          start: {
            line: 81,
            column: 109
          },
          end: {
            line: 81,
            column: 131
          }
        }],
        line: 81
      },
      "20": {
        loc: {
          start: {
            line: 81,
            column: 41
          },
          end: {
            line: 81,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 81,
            column: 41
          },
          end: {
            line: 81,
            column: 66
          }
        }, {
          start: {
            line: 81,
            column: 70
          },
          end: {
            line: 81,
            column: 97
          }
        }],
        line: 81
      },
      "21": {
        loc: {
          start: {
            line: 82,
            column: 37
          },
          end: {
            line: 82,
            column: 133
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 82,
            column: 100
          },
          end: {
            line: 82,
            column: 106
          }
        }, {
          start: {
            line: 82,
            column: 109
          },
          end: {
            line: 82,
            column: 133
          }
        }],
        line: 82
      },
      "22": {
        loc: {
          start: {
            line: 82,
            column: 37
          },
          end: {
            line: 82,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 82,
            column: 37
          },
          end: {
            line: 82,
            column: 64
          }
        }, {
          start: {
            line: 82,
            column: 68
          },
          end: {
            line: 82,
            column: 97
          }
        }],
        line: 82
      },
      "23": {
        loc: {
          start: {
            line: 83,
            column: 36
          },
          end: {
            line: 83,
            column: 129
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 83,
            column: 97
          },
          end: {
            line: 83,
            column: 103
          }
        }, {
          start: {
            line: 83,
            column: 106
          },
          end: {
            line: 83,
            column: 129
          }
        }],
        line: 83
      },
      "24": {
        loc: {
          start: {
            line: 83,
            column: 36
          },
          end: {
            line: 83,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 83,
            column: 36
          },
          end: {
            line: 83,
            column: 62
          }
        }, {
          start: {
            line: 83,
            column: 66
          },
          end: {
            line: 83,
            column: 94
          }
        }],
        line: 83
      },
      "25": {
        loc: {
          start: {
            line: 84,
            column: 41
          },
          end: {
            line: 84,
            column: 149
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 84,
            column: 112
          },
          end: {
            line: 84,
            column: 118
          }
        }, {
          start: {
            line: 84,
            column: 121
          },
          end: {
            line: 84,
            column: 149
          }
        }],
        line: 84
      },
      "26": {
        loc: {
          start: {
            line: 84,
            column: 41
          },
          end: {
            line: 84,
            column: 109
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 84,
            column: 41
          },
          end: {
            line: 84,
            column: 72
          }
        }, {
          start: {
            line: 84,
            column: 76
          },
          end: {
            line: 84,
            column: 109
          }
        }],
        line: 84
      },
      "27": {
        loc: {
          start: {
            line: 85,
            column: 36
          },
          end: {
            line: 85,
            column: 129
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 85,
            column: 97
          },
          end: {
            line: 85,
            column: 103
          }
        }, {
          start: {
            line: 85,
            column: 106
          },
          end: {
            line: 85,
            column: 129
          }
        }],
        line: 85
      },
      "28": {
        loc: {
          start: {
            line: 85,
            column: 36
          },
          end: {
            line: 85,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 85,
            column: 36
          },
          end: {
            line: 85,
            column: 62
          }
        }, {
          start: {
            line: 85,
            column: 66
          },
          end: {
            line: 85,
            column: 94
          }
        }],
        line: 85
      },
      "29": {
        loc: {
          start: {
            line: 86,
            column: 28
          },
          end: {
            line: 86,
            column: 112
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 86,
            column: 83
          },
          end: {
            line: 86,
            column: 89
          }
        }, {
          start: {
            line: 86,
            column: 92
          },
          end: {
            line: 86,
            column: 112
          }
        }],
        line: 86
      },
      "30": {
        loc: {
          start: {
            line: 86,
            column: 28
          },
          end: {
            line: 86,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 28
          },
          end: {
            line: 86,
            column: 51
          }
        }, {
          start: {
            line: 86,
            column: 55
          },
          end: {
            line: 86,
            column: 80
          }
        }],
        line: 86
      },
      "31": {
        loc: {
          start: {
            line: 87,
            column: 31
          },
          end: {
            line: 87,
            column: 124
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 87,
            column: 92
          },
          end: {
            line: 87,
            column: 98
          }
        }, {
          start: {
            line: 87,
            column: 101
          },
          end: {
            line: 87,
            column: 124
          }
        }],
        line: 87
      },
      "32": {
        loc: {
          start: {
            line: 87,
            column: 31
          },
          end: {
            line: 87,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 87,
            column: 31
          },
          end: {
            line: 87,
            column: 57
          }
        }, {
          start: {
            line: 87,
            column: 61
          },
          end: {
            line: 87,
            column: 89
          }
        }],
        line: 87
      },
      "33": {
        loc: {
          start: {
            line: 98,
            column: 23
          },
          end: {
            line: 98,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 98,
            column: 23
          },
          end: {
            line: 98,
            column: 47
          }
        }, {
          start: {
            line: 98,
            column: 51
          },
          end: {
            line: 98,
            column: 87
          }
        }, {
          start: {
            line: 98,
            column: 91
          },
          end: {
            line: 98,
            column: 93
          }
        }],
        line: 98
      },
      "34": {
        loc: {
          start: {
            line: 99,
            column: 28
          },
          end: {
            line: 99,
            column: 108
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 99,
            column: 28
          },
          end: {
            line: 99,
            column: 57
          }
        }, {
          start: {
            line: 99,
            column: 61
          },
          end: {
            line: 99,
            column: 102
          }
        }, {
          start: {
            line: 99,
            column: 106
          },
          end: {
            line: 99,
            column: 108
          }
        }],
        line: 99
      },
      "35": {
        loc: {
          start: {
            line: 100,
            column: 28
          },
          end: {
            line: 100,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 100,
            column: 28
          },
          end: {
            line: 100,
            column: 58
          }
        }, {
          start: {
            line: 100,
            column: 62
          },
          end: {
            line: 100,
            column: 64
          }
        }],
        line: 100
      },
      "36": {
        loc: {
          start: {
            line: 101,
            column: 33
          },
          end: {
            line: 101,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 101,
            column: 33
          },
          end: {
            line: 101,
            column: 68
          }
        }, {
          start: {
            line: 101,
            column: 72
          },
          end: {
            line: 101,
            column: 74
          }
        }],
        line: 101
      },
      "37": {
        loc: {
          start: {
            line: 102,
            column: 35
          },
          end: {
            line: 102,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 102,
            column: 35
          },
          end: {
            line: 102,
            column: 72
          }
        }, {
          start: {
            line: 102,
            column: 76
          },
          end: {
            line: 102,
            column: 78
          }
        }],
        line: 102
      },
      "38": {
        loc: {
          start: {
            line: 103,
            column: 40
          },
          end: {
            line: 103,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 103,
            column: 40
          },
          end: {
            line: 103,
            column: 83
          }
        }, {
          start: {
            line: 103,
            column: 87
          },
          end: {
            line: 103,
            column: 95
          }
        }],
        line: 103
      },
      "39": {
        loc: {
          start: {
            line: 104,
            column: 40
          },
          end: {
            line: 104,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 40
          },
          end: {
            line: 104,
            column: 83
          }
        }, {
          start: {
            line: 104,
            column: 87
          },
          end: {
            line: 104,
            column: 95
          }
        }],
        line: 104
      },
      "40": {
        loc: {
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 112
      },
      "41": {
        loc: {
          start: {
            line: 112,
            column: 12
          },
          end: {
            line: 112,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 12
          },
          end: {
            line: 112,
            column: 38
          }
        }, {
          start: {
            line: 112,
            column: 42
          },
          end: {
            line: 112,
            column: 73
          }
        }],
        line: 112
      },
      "42": {
        loc: {
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 138,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 138,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 136
      },
      "43": {
        loc: {
          start: {
            line: 139,
            column: 8
          },
          end: {
            line: 141,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 139,
            column: 8
          },
          end: {
            line: 141,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 139
      },
      "44": {
        loc: {
          start: {
            line: 170,
            column: 24
          },
          end: {
            line: 170,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 170,
            column: 24
          },
          end: {
            line: 170,
            column: 67
          }
        }, {
          start: {
            line: 170,
            column: 71
          },
          end: {
            line: 170,
            column: 79
          }
        }],
        line: 170
      },
      "45": {
        loc: {
          start: {
            line: 171,
            column: 19
          },
          end: {
            line: 171,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 171,
            column: 19
          },
          end: {
            line: 171,
            column: 62
          }
        }, {
          start: {
            line: 171,
            column: 66
          },
          end: {
            line: 171,
            column: 74
          }
        }],
        line: 171
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0, 0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0, 0],
      "34": [0, 0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/azure/lib/azure-config.ts",
      mappings: ";;AA6CA,8CAiGC;AAMD,gEA8BC;AAKD,wCAoBC;AA3MD,8CAAyD;AACzD,8DAAuD;AAEvD,gCAAgC;AAChC,MAAM,mBAAmB,GAAG,OAAO,CAAC,GAAG,CAAC,mBAAmB,IAAI,iDAAiD,CAAC;AAkBjH,IAAI,aAAa,GAAwB,IAAI,CAAC;AAE9C;;GAEG;AACH,SAAS,oBAAoB;IAC3B,IAAI,CAAC,mBAAmB,EAAE,CAAC;QACzB,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;IAC1E,CAAC;IAED,IAAI,CAAC;QACH,MAAM,UAAU,GAAG,IAAI,iCAAsB,EAAE,CAAC;QAChD,OAAO,IAAI,+BAAY,CAAC,mBAAmB,EAAE,UAAU,CAAC,CAAC;IAC3D,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,4CAA4C,EAAE,KAAK,CAAC,CAAC;QACnE,OAAO,CAAC,KAAK,CAAC,yEAAyE,CAAC,CAAC;QACzF,MAAM,KAAK,CAAC;IACd,CAAC;AACH,CAAC;AAED;;GAEG;AACI,KAAK,UAAU,iBAAiB;IACrC,qCAAqC;IACrC,IAAI,aAAa,EAAE,CAAC;QAClB,OAAO,aAAa,CAAC;IACvB,CAAC;IAED,IAAI,CAAC;QACH,OAAO,CAAC,GAAG,CAAC,6CAA6C,CAAC,CAAC;QAC3D,MAAM,MAAM,GAAG,oBAAoB,EAAE,CAAC;QAEtC,0FAA0F;QAC1F,0CAA0C;QAC1C,MAAM,eAAe,GAAG;YACtB,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC;YAC9B,MAAM,CAAC,SAAS,CAAC,iBAAiB,CAAC;YACnC,MAAM,CAAC,SAAS,CAAC,kBAAkB,CAAC;YACpC,MAAM,CAAC,SAAS,CAAC,uBAAuB,CAAC;YACzC,MAAM,CAAC,SAAS,CAAC,yBAAyB,CAAC;YAC3C,MAAM,CAAC,SAAS,CAAC,+BAA+B,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE,WAAW;YAChF,MAAM,CAAC,SAAS,CAAC,+BAA+B,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,EAAG,WAAW;YACjF,MAAM,CAAC,SAAS,CAAC,4BAA4B,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE,WAAW;YAC7E,MAAM,CAAC,SAAS,CAAC,2BAA2B,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE,WAAW;YAC5E,MAAM,CAAC,SAAS,CAAC,gCAAgC,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE,WAAW;YACjF,MAAM,CAAC,SAAS,CAAC,2BAA2B,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE,WAAW;YAC5E,MAAM,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE,WAAW;YACnE,MAAM,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,WAAW;SACtE,CAAC;QAEF,MAAM,cAAc,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;QAE1D,+BAA+B;QAC/B,MAAM,SAAS,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;QACpC,MAAM,cAAc,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;QACzC,MAAM,cAAc,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;QACzC,MAAM,mBAAmB,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;QAC9C,MAAM,qBAAqB,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;QAChD,MAAM,gBAAgB,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;QAC3C,MAAM,gBAAgB,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;QAC3C,MAAM,kBAAkB,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;QAC7C,MAAM,iBAAiB,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;QAC5C,MAAM,sBAAsB,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;QACjD,MAAM,iBAAiB,GAAG,cAAc,CAAC,EAAE,CAAC,CAAC;QAC7C,MAAM,cAAc,GAAG,cAAc,CAAC,EAAE,CAAC,CAAC;QAC1C,MAAM,iBAAiB,GAAG,cAAc,CAAC,EAAE,CAAC,CAAC;QAE7C,IAAI,CAAC,CAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,CAAA,IAAI,CAAC,CAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,KAAK,CAAA,IAAI,CAAC,CAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,KAAK,CAAA,IAAI,CAAC,CAAA,mBAAmB,aAAnB,mBAAmB,uBAAnB,mBAAmB,CAAE,KAAK,CAAA,IAAI,CAAC,CAAA,qBAAqB,aAArB,qBAAqB,uBAArB,qBAAqB,CAAE,KAAK,CAAA,EAAE,CAAC;YAC1I,MAAM,IAAI,KAAK,CAAC,+DAA+D,CAAC,CAAC;QACnF,CAAC;QAED,aAAa,GAAG;YACd,SAAS,EAAE,SAAS,CAAC,KAAK;YAC1B,cAAc,EAAE,cAAc,CAAC,KAAK;YACpC,cAAc,EAAE,cAAc,CAAC,KAAK;YACpC,mBAAmB,EAAE,mBAAmB,CAAC,KAAK;YAC9C,qBAAqB,EAAE,qBAAqB,CAAC,KAAK;YAClD,0BAA0B,EAAE,CAAA,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,KAAK,KAAI,QAAQ;YAC/D,0BAA0B,EAAE,CAAA,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,KAAK,KAAI,QAAQ;YAC/D,uBAAuB,EAAE,kBAAkB,aAAlB,kBAAkB,uBAAlB,kBAAkB,CAAE,KAAK;YAClD,sBAAsB,EAAE,iBAAiB,aAAjB,iBAAiB,uBAAjB,iBAAiB,CAAE,KAAK;YAChD,2BAA2B,EAAE,sBAAsB,aAAtB,sBAAsB,uBAAtB,sBAAsB,CAAE,KAAK;YAC1D,sBAAsB,EAAE,iBAAiB,aAAjB,iBAAiB,uBAAjB,iBAAiB,CAAE,KAAK;YAChD,cAAc,EAAE,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,KAAK;YACrC,iBAAiB,EAAE,iBAAiB,aAAjB,iBAAiB,uBAAjB,iBAAiB,CAAE,KAAK;SAC5C,CAAC;QAEF,OAAO,CAAC,GAAG,CAAC,qCAAqC,CAAC,CAAC;QACnD,OAAO,aAAa,CAAC;IAEvB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,kCAAkC,EAAE,KAAK,CAAC,CAAC;QAEzD,uDAAuD;QACvD,OAAO,CAAC,GAAG,CAAC,6CAA6C,CAAC,CAAC;QAC3D,MAAM,UAAU,GAAG,OAAO,CAAC,GAAU,CAAC;QACtC,MAAM,eAAe,GAAG;YACtB,SAAS,EAAE,UAAU,CAAC,YAAY,CAAC,IAAI,UAAU,CAAC,wBAAwB,CAAC,IAAI,EAAE;YACjF,cAAc,EAAE,UAAU,CAAC,iBAAiB,CAAC,IAAI,UAAU,CAAC,6BAA6B,CAAC,IAAI,EAAE;YAChG,cAAc,EAAE,UAAU,CAAC,kBAAkB,CAAC,IAAI,EAAE;YACpD,mBAAmB,EAAE,UAAU,CAAC,uBAAuB,CAAC,IAAI,EAAE;YAC9D,qBAAqB,EAAE,UAAU,CAAC,yBAAyB,CAAC,IAAI,EAAE;YAClE,0BAA0B,EAAE,UAAU,CAAC,+BAA+B,CAAC,IAAI,QAAQ;YACnF,0BAA0B,EAAE,UAAU,CAAC,+BAA+B,CAAC,IAAI,QAAQ;YACnF,uBAAuB,EAAE,UAAU,CAAC,4BAA4B,CAAC;YACjE,sBAAsB,EAAE,UAAU,CAAC,2BAA2B,CAAC;YAC/D,2BAA2B,EAAE,UAAU,CAAC,gCAAgC,CAAC;YACzE,sBAAsB,EAAE,UAAU,CAAC,2BAA2B,CAAC;YAC/D,cAAc,EAAE,UAAU,CAAC,kBAAkB,CAAC;YAC9C,iBAAiB,EAAE,UAAU,CAAC,qBAAqB,CAAC;SACrD,CAAC;QAEF,IAAI,CAAC,eAAe,CAAC,SAAS,IAAI,CAAC,eAAe,CAAC,cAAc,EAAE,CAAC;YAClE,OAAO,CAAC,IAAI,CAAC,2EAA2E,CAAC,CAAC;QAC5F,CAAC;QAED,aAAa,GAAG,eAAe,CAAC;QAChC,OAAO,aAAa,CAAC;IACvB,CAAC;AACH,CAAC;AAED;;;GAGG;AACI,KAAK,UAAU,0BAA0B;IAC9C,IAAI,CAAC;QACH,MAAM,OAAO,GAAG,MAAM,iBAAiB,EAAE,CAAC;QAE1C,iHAAiH;QACjH,MAAM,UAAU,GAAG,OAAO,CAAC,GAAU,CAAC;QACtC,UAAU,CAAC,wBAAwB,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC;QACzD,UAAU,CAAC,6BAA6B,CAAC,GAAG,OAAO,CAAC,cAAc,CAAC;QACnE,UAAU,CAAC,kBAAkB,CAAC,GAAG,OAAO,CAAC,cAAc,CAAC;QACxD,UAAU,CAAC,uBAAuB,CAAC,GAAG,OAAO,CAAC,mBAAmB,CAAC;QAClE,UAAU,CAAC,yBAAyB,CAAC,GAAG,OAAO,CAAC,qBAAqB,CAAC;QACtE,UAAU,CAAC,+BAA+B,CAAC,GAAG,OAAO,CAAC,0BAA0B,CAAC;QACjF,UAAU,CAAC,+BAA+B,CAAC,GAAG,OAAO,CAAC,0BAA0B,CAAC;QAEjF,kDAAkD;QAClD,IAAI,OAAO,CAAC,cAAc,EAAE,CAAC;YAC3B,UAAU,CAAC,kBAAkB,CAAC,GAAG,OAAO,CAAC,cAAc,CAAC;QAC1D,CAAC;QACD,IAAI,OAAO,CAAC,iBAAiB,EAAE,CAAC;YAC9B,UAAU,CAAC,qBAAqB,CAAC,GAAG,OAAO,CAAC,iBAAiB,CAAC;QAChE,CAAC;QAED,gGAAgG;QAChG,qFAAqF;QAErF,OAAO,CAAC,GAAG,CAAC,+CAA+C,CAAC,CAAC;IAC/D,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,2CAA2C,EAAE,KAAK,CAAC,CAAC;QAClE,MAAM,KAAK,CAAC;IACd,CAAC;AACH,CAAC;AAED;;GAEG;AACH,SAAgB,cAAc;IAC5B,MAAM,UAAU,GAAG,OAAO,CAAC,GAAU,CAAC;IACtC,OAAO;QACL,WAAW,EAAE,mBAAmB;QAChC,eAAe,EAAE,CAAC,CAAC,aAAa;QAChC,WAAW,EAAE;YACX,SAAS,EAAE,CAAC,CAAC,UAAU,CAAC,wBAAwB,CAAC;YACjD,cAAc,EAAE,CAAC,CAAC,UAAU,CAAC,6BAA6B,CAAC;YAC3D,cAAc,EAAE,CAAC,CAAC,UAAU,CAAC,kBAAkB,CAAC;YAChD,mBAAmB,EAAE,CAAC,CAAC,UAAU,CAAC,uBAAuB,CAAC;YAC1D,qBAAqB,EAAE,CAAC,CAAC,UAAU,CAAC,yBAAyB,CAAC;YAC9D,0BAA0B,EAAE,CAAC,CAAC,UAAU,CAAC,+BAA+B,CAAC;YACzE,0BAA0B,EAAE,CAAC,CAAC,UAAU,CAAC,+BAA+B,CAAC;SAC1E;QACD,WAAW,EAAE;YACX,OAAO,EAAE,UAAU,CAAC,yBAAyB,CAAC;YAC9C,UAAU,EAAE,UAAU,CAAC,+BAA+B,CAAC,IAAI,QAAQ;YACnE,KAAK,EAAE,UAAU,CAAC,+BAA+B,CAAC,IAAI,QAAQ;SAC/D;KACF,CAAC;AACJ,CAAC",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/azure/lib/azure-config.ts"],
      sourcesContent: ["import { DefaultAzureCredential } from '@azure/identity';\nimport { SecretClient } from '@azure/keyvault-secrets';\n\n// Azure Key Vault configuration\nconst AZURE_KEY_VAULT_URI = process.env.AZURE_KEY_VAULT_URI || 'https://prepbettr-keyvault-083.vault.azure.net/';\n\ninterface AzureSecrets {\n  speechKey: string;\n  speechEndpoint: string;\n  azureOpenAIKey: string;\n  azureOpenAIEndpoint: string;\n  azureOpenAIDeployment: string;\n  azureOpenAIGpt35Deployment?: string; // gpt-35-turbo deployment\n  azureOpenAIGpt4oDeployment?: string; // gpt-4o deployment\n  azureStorageAccountName?: string; // Azure Storage Account Name\n  azureStorageAccountKey?: string; // Azure Storage Account Key\n  azureFormRecognizerEndpoint?: string; // Azure Form Recognizer Endpoint\n  azureFormRecognizerKey?: string; // Azure Form Recognizer Key\n  sendgridApiKey?: string; // SendGrid API Key\n  sendgridFromEmail?: string; // SendGrid From Email\n}\n\nlet cachedSecrets: AzureSecrets | null = null;\n\n/**\n * Initialize Azure Key Vault client\n */\nfunction createKeyVaultClient(): SecretClient {\n  if (!AZURE_KEY_VAULT_URI) {\n    throw new Error('AZURE_KEY_VAULT_URI environment variable is required');\n  }\n  \n  try {\n    const credential = new DefaultAzureCredential();\n    return new SecretClient(AZURE_KEY_VAULT_URI, credential);\n  } catch (error) {\n    console.error('\u274C Failed to create DefaultAzureCredential:', error);\n    console.error('\uD83D\uDCA1 Hint: Ensure you are logged in with \"az login\" for local development');\n    throw error;\n  }\n}\n\n/**\n * Fetch secrets from Azure Key Vault\n */\nexport async function fetchAzureSecrets(): Promise<AzureSecrets> {\n  // Return cached secrets if available\n  if (cachedSecrets) {\n    return cachedSecrets;\n  }\n\n  try {\n    console.log('\uD83D\uDD11 Fetching secrets from Azure Key Vault...');\n    const client = createKeyVaultClient();\n\n    // Fetch all required secrets - breaking into smaller groups to avoid transpilation issues\n    // Group 1: Speech and OpenAI base secrets\n    const secretsPromises = [\n      client.getSecret('speech-key'),\n      client.getSecret('speech-endpoint'),\n      client.getSecret('azure-openai-key'),\n      client.getSecret('azure-openai-endpoint'),\n      client.getSecret('azure-openai-deployment'),\n      client.getSecret('azure-openai-gpt35-deployment').catch(() => null), // Optional\n      client.getSecret('azure-openai-gpt4o-deployment').catch(() => null),  // Optional\n      client.getSecret('azure-storage-account-name').catch(() => null), // Optional\n      client.getSecret('azure-storage-account-key').catch(() => null), // Optional\n      client.getSecret('azure-form-recognizer-endpoint').catch(() => null), // Optional\n      client.getSecret('azure-form-recognizer-key').catch(() => null), // Optional\n      client.getSecret('sendgrid-api-key').catch(() => null), // Optional\n      client.getSecret('sendgrid-from-email').catch(() => null) // Optional\n    ];\n    \n    const secretsResults = await Promise.all(secretsPromises);\n    \n    // Extract secrets from results\n    const speechKey = secretsResults[0];\n    const speechEndpoint = secretsResults[1];\n    const azureOpenAIKey = secretsResults[2];\n    const azureOpenAIEndpoint = secretsResults[3];\n    const azureOpenAIDeployment = secretsResults[4];\n    const azureOpenAIGpt35 = secretsResults[5];\n    const azureOpenAIGpt4o = secretsResults[6];\n    const storageAccountName = secretsResults[7];\n    const storageAccountKey = secretsResults[8];\n    const formRecognizerEndpoint = secretsResults[9];\n    const formRecognizerKey = secretsResults[10];\n    const sendgridApiKey = secretsResults[11];\n    const sendgridFromEmail = secretsResults[12];\n\n    if (!speechKey?.value || !speechEndpoint?.value || !azureOpenAIKey?.value || !azureOpenAIEndpoint?.value || !azureOpenAIDeployment?.value) {\n      throw new Error('One or more required secrets are missing from Azure Key Vault');\n    }\n\n    cachedSecrets = {\n      speechKey: speechKey.value,\n      speechEndpoint: speechEndpoint.value,\n      azureOpenAIKey: azureOpenAIKey.value,\n      azureOpenAIEndpoint: azureOpenAIEndpoint.value,\n      azureOpenAIDeployment: azureOpenAIDeployment.value,\n      azureOpenAIGpt35Deployment: azureOpenAIGpt35?.value || 'gpt-4o',\n      azureOpenAIGpt4oDeployment: azureOpenAIGpt4o?.value || 'gpt-4o',\n      azureStorageAccountName: storageAccountName?.value,\n      azureStorageAccountKey: storageAccountKey?.value,\n      azureFormRecognizerEndpoint: formRecognizerEndpoint?.value,\n      azureFormRecognizerKey: formRecognizerKey?.value,\n      sendgridApiKey: sendgridApiKey?.value,\n      sendgridFromEmail: sendgridFromEmail?.value\n    };\n\n    console.log('\u2705 Azure secrets loaded successfully');\n    return cachedSecrets;\n\n  } catch (error) {\n    console.error('\u274C Failed to fetch Azure secrets:', error);\n    \n    // Fallback to environment variables if Key Vault fails\n    console.log('\uD83D\uDD04 Falling back to environment variables...');\n    const processEnv = process.env as any;\n    const fallbackSecrets = {\n      speechKey: processEnv['SPEECH_KEY'] || processEnv['NEXT_PUBLIC_SPEECH_KEY'] || '',\n      speechEndpoint: processEnv['SPEECH_ENDPOINT'] || processEnv['NEXT_PUBLIC_SPEECH_ENDPOINT'] || '',\n      azureOpenAIKey: processEnv['AZURE_OPENAI_KEY'] || '',\n      azureOpenAIEndpoint: processEnv['AZURE_OPENAI_ENDPOINT'] || '',\n      azureOpenAIDeployment: processEnv['AZURE_OPENAI_DEPLOYMENT'] || '',\n      azureOpenAIGpt35Deployment: processEnv['AZURE_OPENAI_GPT35_DEPLOYMENT'] || 'gpt-4o',\n      azureOpenAIGpt4oDeployment: processEnv['AZURE_OPENAI_GPT4O_DEPLOYMENT'] || 'gpt-4o',\n      azureStorageAccountName: processEnv['AZURE_STORAGE_ACCOUNT_NAME'],\n      azureStorageAccountKey: processEnv['AZURE_STORAGE_ACCOUNT_KEY'],\n      azureFormRecognizerEndpoint: processEnv['AZURE_FORM_RECOGNIZER_ENDPOINT'],\n      azureFormRecognizerKey: processEnv['AZURE_FORM_RECOGNIZER_KEY'],\n      sendgridApiKey: processEnv['SENDGRID_API_KEY'],\n      sendgridFromEmail: processEnv['SENDGRID_FROM_EMAIL']\n    };\n\n    if (!fallbackSecrets.speechKey || !fallbackSecrets.azureOpenAIKey) {\n      console.warn('\u26A0\uFE0F Some secrets are missing from both Key Vault and environment variables');\n    }\n\n    cachedSecrets = fallbackSecrets;\n    return cachedSecrets;\n  }\n}\n\n/**\n * Initialize environment variables from Azure Key Vault\n * This should be called at application startup\n */\nexport async function initializeAzureEnvironment(): Promise<void> {\n  try {\n    const secrets = await fetchAzureSecrets();\n    \n    // Set environment variables for the application (using dynamic property assignment to avoid webpack replacement)\n    const processEnv = process.env as any;\n    processEnv['NEXT_PUBLIC_SPEECH_KEY'] = secrets.speechKey;\n    processEnv['NEXT_PUBLIC_SPEECH_ENDPOINT'] = secrets.speechEndpoint;\n    processEnv['AZURE_OPENAI_KEY'] = secrets.azureOpenAIKey;\n    processEnv['AZURE_OPENAI_ENDPOINT'] = secrets.azureOpenAIEndpoint;\n    processEnv['AZURE_OPENAI_DEPLOYMENT'] = secrets.azureOpenAIDeployment;\n    processEnv['AZURE_OPENAI_GPT35_DEPLOYMENT'] = secrets.azureOpenAIGpt35Deployment;\n    processEnv['AZURE_OPENAI_GPT4O_DEPLOYMENT'] = secrets.azureOpenAIGpt4oDeployment;\n    \n    // Set SendGrid environment variables if available\n    if (secrets.sendgridApiKey) {\n      processEnv['SENDGRID_API_KEY'] = secrets.sendgridApiKey;\n    }\n    if (secrets.sendgridFromEmail) {\n      processEnv['SENDGRID_FROM_EMAIL'] = secrets.sendgridFromEmail;\n    }\n\n    // Note: NEXT_PUBLIC_* variables are already handled by .env.local and don't need to be set here\n    // Avoid setting them dynamically to prevent webpack build-time replacement conflicts\n\n    console.log('\uD83C\uDF1F Azure environment initialized successfully');\n  } catch (error) {\n    console.error('\u274C Failed to initialize Azure environment:', error);\n    throw error;\n  }\n}\n\n/**\n * Get current Azure configuration (for debugging)\n */\nexport function getAzureConfig() {\n  const processEnv = process.env as any;\n  return {\n    keyVaultUri: AZURE_KEY_VAULT_URI,\n    hasSecretsCache: !!cachedSecrets,\n    environment: {\n      speechKey: !!processEnv['NEXT_PUBLIC_SPEECH_KEY'],\n      speechEndpoint: !!processEnv['NEXT_PUBLIC_SPEECH_ENDPOINT'],\n      azureOpenAIKey: !!processEnv['AZURE_OPENAI_KEY'],\n      azureOpenAIEndpoint: !!processEnv['AZURE_OPENAI_ENDPOINT'],\n      azureOpenAIDeployment: !!processEnv['AZURE_OPENAI_DEPLOYMENT'],\n      azureOpenAIGpt35Deployment: !!processEnv['AZURE_OPENAI_GPT35_DEPLOYMENT'],\n      azureOpenAIGpt4oDeployment: !!processEnv['AZURE_OPENAI_GPT4O_DEPLOYMENT']\n    },\n    deployments: {\n      default: processEnv['AZURE_OPENAI_DEPLOYMENT'],\n      gpt35Turbo: processEnv['AZURE_OPENAI_GPT35_DEPLOYMENT'] || 'gpt-4o',\n      gpt4o: processEnv['AZURE_OPENAI_GPT4O_DEPLOYMENT'] || 'gpt-4o'\n    }\n  };\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d8504da5654f9cc7a2071187ca09e7229680463d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2gkmfq21ic = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2gkmfq21ic();
cov_2gkmfq21ic().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2gkmfq21ic().s[1]++;
exports.fetchAzureSecrets = fetchAzureSecrets;
/* istanbul ignore next */
cov_2gkmfq21ic().s[2]++;
exports.initializeAzureEnvironment = initializeAzureEnvironment;
/* istanbul ignore next */
cov_2gkmfq21ic().s[3]++;
exports.getAzureConfig = getAzureConfig;
const identity_1 =
/* istanbul ignore next */
(cov_2gkmfq21ic().s[4]++, require("@azure/identity"));
const keyvault_secrets_1 =
/* istanbul ignore next */
(cov_2gkmfq21ic().s[5]++, require("@azure/keyvault-secrets"));
// Azure Key Vault configuration
const AZURE_KEY_VAULT_URI =
/* istanbul ignore next */
(cov_2gkmfq21ic().s[6]++,
/* istanbul ignore next */
(cov_2gkmfq21ic().b[0][0]++, process.env.AZURE_KEY_VAULT_URI) ||
/* istanbul ignore next */
(cov_2gkmfq21ic().b[0][1]++, 'https://prepbettr-keyvault-083.vault.azure.net/'));
let cachedSecrets =
/* istanbul ignore next */
(cov_2gkmfq21ic().s[7]++, null);
/**
 * Initialize Azure Key Vault client
 */
function createKeyVaultClient() {
  /* istanbul ignore next */
  cov_2gkmfq21ic().f[0]++;
  cov_2gkmfq21ic().s[8]++;
  if (!AZURE_KEY_VAULT_URI) {
    /* istanbul ignore next */
    cov_2gkmfq21ic().b[1][0]++;
    cov_2gkmfq21ic().s[9]++;
    throw new Error('AZURE_KEY_VAULT_URI environment variable is required');
  } else
  /* istanbul ignore next */
  {
    cov_2gkmfq21ic().b[1][1]++;
  }
  cov_2gkmfq21ic().s[10]++;
  try {
    const credential =
    /* istanbul ignore next */
    (cov_2gkmfq21ic().s[11]++, new identity_1.DefaultAzureCredential());
    /* istanbul ignore next */
    cov_2gkmfq21ic().s[12]++;
    return new keyvault_secrets_1.SecretClient(AZURE_KEY_VAULT_URI, credential);
  } catch (error) {
    /* istanbul ignore next */
    cov_2gkmfq21ic().s[13]++;
    console.error('❌ Failed to create DefaultAzureCredential:', error);
    /* istanbul ignore next */
    cov_2gkmfq21ic().s[14]++;
    console.error('💡 Hint: Ensure you are logged in with "az login" for local development');
    /* istanbul ignore next */
    cov_2gkmfq21ic().s[15]++;
    throw error;
  }
}
/**
 * Fetch secrets from Azure Key Vault
 */
async function fetchAzureSecrets() {
  /* istanbul ignore next */
  cov_2gkmfq21ic().f[1]++;
  cov_2gkmfq21ic().s[16]++;
  // Return cached secrets if available
  if (cachedSecrets) {
    /* istanbul ignore next */
    cov_2gkmfq21ic().b[2][0]++;
    cov_2gkmfq21ic().s[17]++;
    return cachedSecrets;
  } else
  /* istanbul ignore next */
  {
    cov_2gkmfq21ic().b[2][1]++;
  }
  cov_2gkmfq21ic().s[18]++;
  try {
    /* istanbul ignore next */
    cov_2gkmfq21ic().s[19]++;
    console.log('🔑 Fetching secrets from Azure Key Vault...');
    const client =
    /* istanbul ignore next */
    (cov_2gkmfq21ic().s[20]++, createKeyVaultClient());
    // Fetch all required secrets - breaking into smaller groups to avoid transpilation issues
    // Group 1: Speech and OpenAI base secrets
    const secretsPromises =
    /* istanbul ignore next */
    (cov_2gkmfq21ic().s[21]++, [client.getSecret('speech-key'), client.getSecret('speech-endpoint'), client.getSecret('azure-openai-key'), client.getSecret('azure-openai-endpoint'), client.getSecret('azure-openai-deployment'), client.getSecret('azure-openai-gpt35-deployment').catch(() => {
      /* istanbul ignore next */
      cov_2gkmfq21ic().f[2]++;
      cov_2gkmfq21ic().s[22]++;
      return null;
    }),
    // Optional
    client.getSecret('azure-openai-gpt4o-deployment').catch(() => {
      /* istanbul ignore next */
      cov_2gkmfq21ic().f[3]++;
      cov_2gkmfq21ic().s[23]++;
      return null;
    }),
    // Optional
    client.getSecret('azure-storage-account-name').catch(() => {
      /* istanbul ignore next */
      cov_2gkmfq21ic().f[4]++;
      cov_2gkmfq21ic().s[24]++;
      return null;
    }),
    // Optional
    client.getSecret('azure-storage-account-key').catch(() => {
      /* istanbul ignore next */
      cov_2gkmfq21ic().f[5]++;
      cov_2gkmfq21ic().s[25]++;
      return null;
    }),
    // Optional
    client.getSecret('azure-form-recognizer-endpoint').catch(() => {
      /* istanbul ignore next */
      cov_2gkmfq21ic().f[6]++;
      cov_2gkmfq21ic().s[26]++;
      return null;
    }),
    // Optional
    client.getSecret('azure-form-recognizer-key').catch(() => {
      /* istanbul ignore next */
      cov_2gkmfq21ic().f[7]++;
      cov_2gkmfq21ic().s[27]++;
      return null;
    }),
    // Optional
    client.getSecret('sendgrid-api-key').catch(() => {
      /* istanbul ignore next */
      cov_2gkmfq21ic().f[8]++;
      cov_2gkmfq21ic().s[28]++;
      return null;
    }),
    // Optional
    client.getSecret('sendgrid-from-email').catch(() => {
      /* istanbul ignore next */
      cov_2gkmfq21ic().f[9]++;
      cov_2gkmfq21ic().s[29]++;
      return null;
    }) // Optional
    ]);
    const secretsResults =
    /* istanbul ignore next */
    (cov_2gkmfq21ic().s[30]++, await Promise.all(secretsPromises));
    // Extract secrets from results
    const speechKey =
    /* istanbul ignore next */
    (cov_2gkmfq21ic().s[31]++, secretsResults[0]);
    const speechEndpoint =
    /* istanbul ignore next */
    (cov_2gkmfq21ic().s[32]++, secretsResults[1]);
    const azureOpenAIKey =
    /* istanbul ignore next */
    (cov_2gkmfq21ic().s[33]++, secretsResults[2]);
    const azureOpenAIEndpoint =
    /* istanbul ignore next */
    (cov_2gkmfq21ic().s[34]++, secretsResults[3]);
    const azureOpenAIDeployment =
    /* istanbul ignore next */
    (cov_2gkmfq21ic().s[35]++, secretsResults[4]);
    const azureOpenAIGpt35 =
    /* istanbul ignore next */
    (cov_2gkmfq21ic().s[36]++, secretsResults[5]);
    const azureOpenAIGpt4o =
    /* istanbul ignore next */
    (cov_2gkmfq21ic().s[37]++, secretsResults[6]);
    const storageAccountName =
    /* istanbul ignore next */
    (cov_2gkmfq21ic().s[38]++, secretsResults[7]);
    const storageAccountKey =
    /* istanbul ignore next */
    (cov_2gkmfq21ic().s[39]++, secretsResults[8]);
    const formRecognizerEndpoint =
    /* istanbul ignore next */
    (cov_2gkmfq21ic().s[40]++, secretsResults[9]);
    const formRecognizerKey =
    /* istanbul ignore next */
    (cov_2gkmfq21ic().s[41]++, secretsResults[10]);
    const sendgridApiKey =
    /* istanbul ignore next */
    (cov_2gkmfq21ic().s[42]++, secretsResults[11]);
    const sendgridFromEmail =
    /* istanbul ignore next */
    (cov_2gkmfq21ic().s[43]++, secretsResults[12]);
    /* istanbul ignore next */
    cov_2gkmfq21ic().s[44]++;
    if (
    /* istanbul ignore next */
    (cov_2gkmfq21ic().b[4][0]++, !(
    /* istanbul ignore next */
    (cov_2gkmfq21ic().b[6][0]++, speechKey === null) ||
    /* istanbul ignore next */
    (cov_2gkmfq21ic().b[6][1]++, speechKey === void 0) ?
    /* istanbul ignore next */
    (cov_2gkmfq21ic().b[5][0]++, void 0) :
    /* istanbul ignore next */
    (cov_2gkmfq21ic().b[5][1]++, speechKey.value))) ||
    /* istanbul ignore next */
    (cov_2gkmfq21ic().b[4][1]++, !(
    /* istanbul ignore next */
    (cov_2gkmfq21ic().b[8][0]++, speechEndpoint === null) ||
    /* istanbul ignore next */
    (cov_2gkmfq21ic().b[8][1]++, speechEndpoint === void 0) ?
    /* istanbul ignore next */
    (cov_2gkmfq21ic().b[7][0]++, void 0) :
    /* istanbul ignore next */
    (cov_2gkmfq21ic().b[7][1]++, speechEndpoint.value))) ||
    /* istanbul ignore next */
    (cov_2gkmfq21ic().b[4][2]++, !(
    /* istanbul ignore next */
    (cov_2gkmfq21ic().b[10][0]++, azureOpenAIKey === null) ||
    /* istanbul ignore next */
    (cov_2gkmfq21ic().b[10][1]++, azureOpenAIKey === void 0) ?
    /* istanbul ignore next */
    (cov_2gkmfq21ic().b[9][0]++, void 0) :
    /* istanbul ignore next */
    (cov_2gkmfq21ic().b[9][1]++, azureOpenAIKey.value))) ||
    /* istanbul ignore next */
    (cov_2gkmfq21ic().b[4][3]++, !(
    /* istanbul ignore next */
    (cov_2gkmfq21ic().b[12][0]++, azureOpenAIEndpoint === null) ||
    /* istanbul ignore next */
    (cov_2gkmfq21ic().b[12][1]++, azureOpenAIEndpoint === void 0) ?
    /* istanbul ignore next */
    (cov_2gkmfq21ic().b[11][0]++, void 0) :
    /* istanbul ignore next */
    (cov_2gkmfq21ic().b[11][1]++, azureOpenAIEndpoint.value))) ||
    /* istanbul ignore next */
    (cov_2gkmfq21ic().b[4][4]++, !(
    /* istanbul ignore next */
    (cov_2gkmfq21ic().b[14][0]++, azureOpenAIDeployment === null) ||
    /* istanbul ignore next */
    (cov_2gkmfq21ic().b[14][1]++, azureOpenAIDeployment === void 0) ?
    /* istanbul ignore next */
    (cov_2gkmfq21ic().b[13][0]++, void 0) :
    /* istanbul ignore next */
    (cov_2gkmfq21ic().b[13][1]++, azureOpenAIDeployment.value)))) {
      /* istanbul ignore next */
      cov_2gkmfq21ic().b[3][0]++;
      cov_2gkmfq21ic().s[45]++;
      throw new Error('One or more required secrets are missing from Azure Key Vault');
    } else
    /* istanbul ignore next */
    {
      cov_2gkmfq21ic().b[3][1]++;
    }
    cov_2gkmfq21ic().s[46]++;
    cachedSecrets = {
      speechKey: speechKey.value,
      speechEndpoint: speechEndpoint.value,
      azureOpenAIKey: azureOpenAIKey.value,
      azureOpenAIEndpoint: azureOpenAIEndpoint.value,
      azureOpenAIDeployment: azureOpenAIDeployment.value,
      azureOpenAIGpt35Deployment:
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[15][0]++,
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[17][0]++, azureOpenAIGpt35 === null) ||
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[17][1]++, azureOpenAIGpt35 === void 0) ?
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[16][0]++, void 0) :
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[16][1]++, azureOpenAIGpt35.value)) ||
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[15][1]++, 'gpt-4o'),
      azureOpenAIGpt4oDeployment:
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[18][0]++,
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[20][0]++, azureOpenAIGpt4o === null) ||
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[20][1]++, azureOpenAIGpt4o === void 0) ?
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[19][0]++, void 0) :
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[19][1]++, azureOpenAIGpt4o.value)) ||
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[18][1]++, 'gpt-4o'),
      azureStorageAccountName:
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[22][0]++, storageAccountName === null) ||
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[22][1]++, storageAccountName === void 0) ?
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[21][0]++, void 0) :
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[21][1]++, storageAccountName.value),
      azureStorageAccountKey:
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[24][0]++, storageAccountKey === null) ||
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[24][1]++, storageAccountKey === void 0) ?
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[23][0]++, void 0) :
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[23][1]++, storageAccountKey.value),
      azureFormRecognizerEndpoint:
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[26][0]++, formRecognizerEndpoint === null) ||
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[26][1]++, formRecognizerEndpoint === void 0) ?
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[25][0]++, void 0) :
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[25][1]++, formRecognizerEndpoint.value),
      azureFormRecognizerKey:
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[28][0]++, formRecognizerKey === null) ||
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[28][1]++, formRecognizerKey === void 0) ?
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[27][0]++, void 0) :
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[27][1]++, formRecognizerKey.value),
      sendgridApiKey:
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[30][0]++, sendgridApiKey === null) ||
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[30][1]++, sendgridApiKey === void 0) ?
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[29][0]++, void 0) :
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[29][1]++, sendgridApiKey.value),
      sendgridFromEmail:
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[32][0]++, sendgridFromEmail === null) ||
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[32][1]++, sendgridFromEmail === void 0) ?
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[31][0]++, void 0) :
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[31][1]++, sendgridFromEmail.value)
    };
    /* istanbul ignore next */
    cov_2gkmfq21ic().s[47]++;
    console.log('✅ Azure secrets loaded successfully');
    /* istanbul ignore next */
    cov_2gkmfq21ic().s[48]++;
    return cachedSecrets;
  } catch (error) {
    /* istanbul ignore next */
    cov_2gkmfq21ic().s[49]++;
    console.error('❌ Failed to fetch Azure secrets:', error);
    // Fallback to environment variables if Key Vault fails
    /* istanbul ignore next */
    cov_2gkmfq21ic().s[50]++;
    console.log('🔄 Falling back to environment variables...');
    const processEnv =
    /* istanbul ignore next */
    (cov_2gkmfq21ic().s[51]++, process.env);
    const fallbackSecrets =
    /* istanbul ignore next */
    (cov_2gkmfq21ic().s[52]++, {
      speechKey:
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[33][0]++, processEnv['SPEECH_KEY']) ||
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[33][1]++, processEnv['NEXT_PUBLIC_SPEECH_KEY']) ||
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[33][2]++, ''),
      speechEndpoint:
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[34][0]++, processEnv['SPEECH_ENDPOINT']) ||
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[34][1]++, processEnv['NEXT_PUBLIC_SPEECH_ENDPOINT']) ||
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[34][2]++, ''),
      azureOpenAIKey:
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[35][0]++, processEnv['AZURE_OPENAI_KEY']) ||
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[35][1]++, ''),
      azureOpenAIEndpoint:
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[36][0]++, processEnv['AZURE_OPENAI_ENDPOINT']) ||
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[36][1]++, ''),
      azureOpenAIDeployment:
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[37][0]++, processEnv['AZURE_OPENAI_DEPLOYMENT']) ||
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[37][1]++, ''),
      azureOpenAIGpt35Deployment:
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[38][0]++, processEnv['AZURE_OPENAI_GPT35_DEPLOYMENT']) ||
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[38][1]++, 'gpt-4o'),
      azureOpenAIGpt4oDeployment:
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[39][0]++, processEnv['AZURE_OPENAI_GPT4O_DEPLOYMENT']) ||
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[39][1]++, 'gpt-4o'),
      azureStorageAccountName: processEnv['AZURE_STORAGE_ACCOUNT_NAME'],
      azureStorageAccountKey: processEnv['AZURE_STORAGE_ACCOUNT_KEY'],
      azureFormRecognizerEndpoint: processEnv['AZURE_FORM_RECOGNIZER_ENDPOINT'],
      azureFormRecognizerKey: processEnv['AZURE_FORM_RECOGNIZER_KEY'],
      sendgridApiKey: processEnv['SENDGRID_API_KEY'],
      sendgridFromEmail: processEnv['SENDGRID_FROM_EMAIL']
    });
    /* istanbul ignore next */
    cov_2gkmfq21ic().s[53]++;
    if (
    /* istanbul ignore next */
    (cov_2gkmfq21ic().b[41][0]++, !fallbackSecrets.speechKey) ||
    /* istanbul ignore next */
    (cov_2gkmfq21ic().b[41][1]++, !fallbackSecrets.azureOpenAIKey)) {
      /* istanbul ignore next */
      cov_2gkmfq21ic().b[40][0]++;
      cov_2gkmfq21ic().s[54]++;
      console.warn('⚠️ Some secrets are missing from both Key Vault and environment variables');
    } else
    /* istanbul ignore next */
    {
      cov_2gkmfq21ic().b[40][1]++;
    }
    cov_2gkmfq21ic().s[55]++;
    cachedSecrets = fallbackSecrets;
    /* istanbul ignore next */
    cov_2gkmfq21ic().s[56]++;
    return cachedSecrets;
  }
}
/**
 * Initialize environment variables from Azure Key Vault
 * This should be called at application startup
 */
async function initializeAzureEnvironment() {
  /* istanbul ignore next */
  cov_2gkmfq21ic().f[10]++;
  cov_2gkmfq21ic().s[57]++;
  try {
    const secrets =
    /* istanbul ignore next */
    (cov_2gkmfq21ic().s[58]++, await fetchAzureSecrets());
    // Set environment variables for the application (using dynamic property assignment to avoid webpack replacement)
    const processEnv =
    /* istanbul ignore next */
    (cov_2gkmfq21ic().s[59]++, process.env);
    /* istanbul ignore next */
    cov_2gkmfq21ic().s[60]++;
    processEnv['NEXT_PUBLIC_SPEECH_KEY'] = secrets.speechKey;
    /* istanbul ignore next */
    cov_2gkmfq21ic().s[61]++;
    processEnv['NEXT_PUBLIC_SPEECH_ENDPOINT'] = secrets.speechEndpoint;
    /* istanbul ignore next */
    cov_2gkmfq21ic().s[62]++;
    processEnv['AZURE_OPENAI_KEY'] = secrets.azureOpenAIKey;
    /* istanbul ignore next */
    cov_2gkmfq21ic().s[63]++;
    processEnv['AZURE_OPENAI_ENDPOINT'] = secrets.azureOpenAIEndpoint;
    /* istanbul ignore next */
    cov_2gkmfq21ic().s[64]++;
    processEnv['AZURE_OPENAI_DEPLOYMENT'] = secrets.azureOpenAIDeployment;
    /* istanbul ignore next */
    cov_2gkmfq21ic().s[65]++;
    processEnv['AZURE_OPENAI_GPT35_DEPLOYMENT'] = secrets.azureOpenAIGpt35Deployment;
    /* istanbul ignore next */
    cov_2gkmfq21ic().s[66]++;
    processEnv['AZURE_OPENAI_GPT4O_DEPLOYMENT'] = secrets.azureOpenAIGpt4oDeployment;
    // Set SendGrid environment variables if available
    /* istanbul ignore next */
    cov_2gkmfq21ic().s[67]++;
    if (secrets.sendgridApiKey) {
      /* istanbul ignore next */
      cov_2gkmfq21ic().b[42][0]++;
      cov_2gkmfq21ic().s[68]++;
      processEnv['SENDGRID_API_KEY'] = secrets.sendgridApiKey;
    } else
    /* istanbul ignore next */
    {
      cov_2gkmfq21ic().b[42][1]++;
    }
    cov_2gkmfq21ic().s[69]++;
    if (secrets.sendgridFromEmail) {
      /* istanbul ignore next */
      cov_2gkmfq21ic().b[43][0]++;
      cov_2gkmfq21ic().s[70]++;
      processEnv['SENDGRID_FROM_EMAIL'] = secrets.sendgridFromEmail;
    } else
    /* istanbul ignore next */
    {
      cov_2gkmfq21ic().b[43][1]++;
    }
    // Note: NEXT_PUBLIC_* variables are already handled by .env.local and don't need to be set here
    // Avoid setting them dynamically to prevent webpack build-time replacement conflicts
    cov_2gkmfq21ic().s[71]++;
    console.log('🌟 Azure environment initialized successfully');
  } catch (error) {
    /* istanbul ignore next */
    cov_2gkmfq21ic().s[72]++;
    console.error('❌ Failed to initialize Azure environment:', error);
    /* istanbul ignore next */
    cov_2gkmfq21ic().s[73]++;
    throw error;
  }
}
/**
 * Get current Azure configuration (for debugging)
 */
function getAzureConfig() {
  /* istanbul ignore next */
  cov_2gkmfq21ic().f[11]++;
  const processEnv =
  /* istanbul ignore next */
  (cov_2gkmfq21ic().s[74]++, process.env);
  /* istanbul ignore next */
  cov_2gkmfq21ic().s[75]++;
  return {
    keyVaultUri: AZURE_KEY_VAULT_URI,
    hasSecretsCache: !!cachedSecrets,
    environment: {
      speechKey: !!processEnv['NEXT_PUBLIC_SPEECH_KEY'],
      speechEndpoint: !!processEnv['NEXT_PUBLIC_SPEECH_ENDPOINT'],
      azureOpenAIKey: !!processEnv['AZURE_OPENAI_KEY'],
      azureOpenAIEndpoint: !!processEnv['AZURE_OPENAI_ENDPOINT'],
      azureOpenAIDeployment: !!processEnv['AZURE_OPENAI_DEPLOYMENT'],
      azureOpenAIGpt35Deployment: !!processEnv['AZURE_OPENAI_GPT35_DEPLOYMENT'],
      azureOpenAIGpt4oDeployment: !!processEnv['AZURE_OPENAI_GPT4O_DEPLOYMENT']
    },
    deployments: {
      default: processEnv['AZURE_OPENAI_DEPLOYMENT'],
      gpt35Turbo:
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[44][0]++, processEnv['AZURE_OPENAI_GPT35_DEPLOYMENT']) ||
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[44][1]++, 'gpt-4o'),
      gpt4o:
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[45][0]++, processEnv['AZURE_OPENAI_GPT4O_DEPLOYMENT']) ||
      /* istanbul ignore next */
      (cov_2gkmfq21ic().b[45][1]++, 'gpt-4o')
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,