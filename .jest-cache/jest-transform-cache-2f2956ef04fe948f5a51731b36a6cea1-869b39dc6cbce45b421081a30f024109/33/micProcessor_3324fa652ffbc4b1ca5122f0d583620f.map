{"version":3,"names":["cov_22bsefcu1h","actualCoverage","MicProcessor","AudioWorkletProcessor","constructor","f","s","inputSampleRate","outputSampleRate","downsampleRatio","inputBuffer","sampleIndex","frameSize","Math","floor","outputBuffer","Int16Array","outputIndex","sharedBuffer","sharedBufferView","writeIndex","port","onmessage","event","data","type","b","buffer","process","inputs","outputs","parameters","input","inputChannel","i","length","push","exactIndex","lowerIndex","upperIndex","min","fraction","interpolatedSample","pcmSample","max","round","writeFrameToSharedBuffer","samplesToRemove","splice","headerSize","bufferSize","currentWriteIndex","Atomics","load","readIndex","nextWriteIndex","bufferIndex","store","postMessage","registerProcessor","module","exports"],"sources":["micProcessor.js"],"sourcesContent":["class MicProcessor extends AudioWorkletProcessor {\n  constructor() {\n    super();\n    \n    // Downsampling parameters\n    this.inputSampleRate = 48000;\n    this.outputSampleRate = 16000;\n    this.downsampleRatio = this.inputSampleRate / this.outputSampleRate; // 3.0\n    \n    // Buffer for accumulating samples\n    this.inputBuffer = [];\n    this.sampleIndex = 0;\n    \n    // Frame size for 100ms at 16kHz = 1600 samples\n    this.frameSize = Math.floor(this.outputSampleRate * 0.1); // 1600 samples\n    this.outputBuffer = new Int16Array(this.frameSize);\n    this.outputIndex = 0;\n    \n    // SharedArrayBuffer for communication with main thread\n    this.sharedBuffer = null;\n    this.sharedBufferView = null;\n    this.writeIndex = 0;\n    \n    // Listen for messages from main thread\n    this.port.onmessage = (event) => {\n      if (event.data.type === 'setSharedBuffer') {\n        this.sharedBuffer = event.data.buffer;\n        this.sharedBufferView = new Int16Array(this.sharedBuffer);\n      }\n    };\n  }\n  \n  process(inputs, outputs, parameters) {\n    const input = inputs[0];\n    \n    if (!input || !input[0] || !this.sharedBufferView) {\n      return true;\n    }\n    \n    const inputChannel = input[0];\n    \n    // Process each sample\n    for (let i = 0; i < inputChannel.length; i++) {\n      this.inputBuffer.push(inputChannel[i]);\n      \n      // Check if we have enough samples for downsampling\n      while (this.inputBuffer.length >= Math.floor(this.sampleIndex + this.downsampleRatio)) {\n        // Linear interpolation for downsampling\n        const exactIndex = this.sampleIndex;\n        const lowerIndex = Math.floor(exactIndex);\n        const upperIndex = Math.min(lowerIndex + 1, this.inputBuffer.length - 1);\n        const fraction = exactIndex - lowerIndex;\n        \n        const interpolatedSample = this.inputBuffer[lowerIndex] * (1 - fraction) + \n                                 this.inputBuffer[upperIndex] * fraction;\n        \n        // Convert to 16-bit PCM\n        const pcmSample = Math.max(-32768, Math.min(32767, Math.round(interpolatedSample * 32767)));\n        \n        this.outputBuffer[this.outputIndex] = pcmSample;\n        this.outputIndex++;\n        \n        // If we have a complete frame, write to shared buffer\n        if (this.outputIndex >= this.frameSize) {\n          this.writeFrameToSharedBuffer();\n          this.outputIndex = 0;\n        }\n        \n        this.sampleIndex += this.downsampleRatio;\n      }\n      \n      // Remove processed samples from input buffer to prevent memory leak\n      if (this.inputBuffer.length > this.downsampleRatio * 2) {\n        const samplesToRemove = Math.floor(this.sampleIndex);\n        this.inputBuffer.splice(0, samplesToRemove);\n        this.sampleIndex -= samplesToRemove;\n      }\n    }\n    \n    return true;\n  }\n  \n  writeFrameToSharedBuffer() {\n    if (!this.sharedBufferView) return;\n    \n    // SharedBuffer layout: [writeIndex, readIndex, ...data]\n    const headerSize = 2;\n    const bufferSize = this.sharedBufferView.length - headerSize;\n    const currentWriteIndex = Atomics.load(this.sharedBufferView, 0);\n    const readIndex = Atomics.load(this.sharedBufferView, 1);\n    \n    // Check if buffer has space\n    const nextWriteIndex = (currentWriteIndex + this.frameSize) % bufferSize;\n    if (nextWriteIndex === readIndex) {\n      // Buffer full, skip this frame\n      return;\n    }\n    \n    // Write frame to shared buffer\n    for (let i = 0; i < this.frameSize; i++) {\n      const bufferIndex = headerSize + ((currentWriteIndex + i) % bufferSize);\n      this.sharedBufferView[bufferIndex] = this.outputBuffer[i];\n    }\n    \n    // Update write index atomically\n    Atomics.store(this.sharedBufferView, 0, nextWriteIndex);\n    \n    // Notify main thread\n    this.port.postMessage({ type: 'frameReady', frameSize: this.frameSize });\n  }\n};\n\nregisterProcessor('mic-processor', MicProcessor);\n\n// For unit tests\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = { MicProcessor };\n}\n"],"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","ignoreList":[]}