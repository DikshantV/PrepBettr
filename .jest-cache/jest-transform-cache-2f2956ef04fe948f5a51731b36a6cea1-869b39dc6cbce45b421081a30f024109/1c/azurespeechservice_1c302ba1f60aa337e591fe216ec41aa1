1fe88c49c87445a05617dcf5b6de62dd
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.azureSpeechService = exports.AzureSpeechService = void 0;
const SpeechSDK = __importStar(require("microsoft-cognitiveservices-speech-sdk"));
const azure_config_browser_1 = require("../../../lib/azure-config-browser");
class AzureSpeechService {
    constructor() {
        this.speechConfig = null;
        this.recognizer = null;
        this.synthesizer = null;
        this.isInitialized = false;
    }
    /**
     * Initialize the Azure Speech Service
     */
    async initialize() {
        var _a;
        try {
            const secrets = await (0, azure_config_browser_1.fetchAzureSecrets)();
            if (!secrets.speechKey || !secrets.speechEndpoint) {
                console.warn('‚ö†Ô∏è Azure Speech credentials not available');
                return false;
            }
            // Extract region from endpoint (e.g., https://westus.api.cognitive.microsoft.com -> westus)
            const region = ((_a = secrets.speechEndpoint.match(/https:\/\/([^.]+)/)) === null || _a === void 0 ? void 0 : _a[1]) || 'westus';
            this.speechConfig = SpeechSDK.SpeechConfig.fromSubscription(secrets.speechKey, region);
            this.speechConfig.speechRecognitionLanguage = 'en-US';
            this.speechConfig.speechSynthesisVoiceName = 'en-US-SaraNeural';
            this.isInitialized = true;
            console.log('‚úÖ Azure Speech Service initialized');
            return true;
        }
        catch (error) {
            console.error('‚ùå Failed to initialize Azure Speech Service:', error);
            return false;
        }
    }
    /**
     * Start continuous speech recognition
     */
    async startContinuousRecognition(onRecognized, onError) {
        if (!this.isInitialized || !this.speechConfig) {
            console.error('‚ùå Azure Speech Service not initialized');
            return false;
        }
        try {
            const audioConfig = SpeechSDK.AudioConfig.fromDefaultMicrophoneInput();
            this.recognizer = new SpeechSDK.SpeechRecognizer(this.speechConfig, audioConfig);
            this.recognizer.recognized = (s, e) => {
                var _a;
                if (e.result.reason === SpeechSDK.ResultReason.RecognizedSpeech && e.result.text) {
                    onRecognized({
                        text: e.result.text,
                        confidence: ((_a = e.result.properties) === null || _a === void 0 ? void 0 : _a.getProperty(SpeechSDK.PropertyId.SpeechServiceResponse_JsonResult)) ? 1.0 : 0.8,
                        reason: 'RecognizedSpeech'
                    });
                }
            };
            this.recognizer.canceled = (s, e) => {
                console.log(`‚ùå Recognition canceled: ${e.reason}`);
                if (e.reason === SpeechSDK.CancellationReason.Error && onError) {
                    onError(e.errorDetails || 'Unknown error');
                }
                this.stopContinuousRecognition();
            };
            this.recognizer.sessionStopped = (s, e) => {
                console.log('üõë Recognition session stopped');
                this.stopContinuousRecognition();
            };
            await this.recognizer.startContinuousRecognitionAsync();
            console.log('üé§ Started continuous speech recognition');
            return true;
        }
        catch (error) {
            console.error('‚ùå Failed to start speech recognition:', error);
            if (onError) {
                const errorMessage = error instanceof Error ? error.message : String(error);
                onError(errorMessage || 'Failed to start speech recognition');
            }
            return false;
        }
    }
    /**
     * Stop continuous speech recognition
     */
    async stopContinuousRecognition() {
        if (this.recognizer) {
            try {
                await this.recognizer.stopContinuousRecognitionAsync();
                this.recognizer.close();
                this.recognizer = null;
                console.log('üõë Stopped speech recognition');
            }
            catch (error) {
                console.error('‚ùå Error stopping speech recognition:', error);
            }
        }
    }
    /**
     * Synthesize speech from text
     */
    async synthesizeSpeech(text, options = {}) {
        if (!this.isInitialized || !this.speechConfig) {
            console.error('‚ùå Azure Speech Service not initialized');
            return null;
        }
        try {
            const audioConfig = SpeechSDK.AudioConfig.fromDefaultSpeakerOutput();
            this.synthesizer = new SpeechSDK.SpeechSynthesizer(this.speechConfig, audioConfig);
            const voiceName = options.voiceName || 'en-US-SaraNeural';
            const rate = options.rate || '1.0';
            const pitch = options.pitch || '0Hz';
            const ssml = `
        <speak version="1.0" xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="en-US">
          <voice name="${voiceName}">
            <prosody rate="${rate}" pitch="${pitch}">
              ${text}
            </prosody>
          </voice>
        </speak>
      `;
            return new Promise((resolve, reject) => {
                this.synthesizer.speakSsmlAsync(ssml, (result) => {
                    var _a;
                    if (result.reason === SpeechSDK.ResultReason.SynthesizingAudioCompleted) {
                        console.log('‚úÖ Speech synthesis completed');
                        resolve(result.audioData);
                    }
                    else {
                        console.error('‚ùå Speech synthesis failed:', result.errorDetails);
                        reject(new Error(result.errorDetails || 'Speech synthesis failed'));
                    }
                    (_a = this.synthesizer) === null || _a === void 0 ? void 0 : _a.close();
                    this.synthesizer = null;
                }, (error) => {
                    var _a;
                    console.error('‚ùå Speech synthesis error:', error);
                    reject(error);
                    (_a = this.synthesizer) === null || _a === void 0 ? void 0 : _a.close();
                    this.synthesizer = null;
                });
            });
        }
        catch (error) {
            console.error('‚ùå Failed to synthesize speech:', error);
            return null;
        }
    }
    /**
     * Check if the service is initialized and ready
     */
    isReady() {
        return this.isInitialized && this.speechConfig !== null;
    }
    /**
     * Clean up resources
     */
    dispose() {
        this.stopContinuousRecognition();
        if (this.synthesizer) {
            this.synthesizer.close();
            this.synthesizer = null;
        }
        this.speechConfig = null;
        this.isInitialized = false;
        console.log('üßπ Azure Speech Service disposed');
    }
}
exports.AzureSpeechService = AzureSpeechService;
// Export singleton instance
exports.azureSpeechService = new AzureSpeechService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,