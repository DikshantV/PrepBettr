22081504345184df549a83322e03bec2
"use strict";

/* istanbul ignore next */
function cov_2dmwe8wd9u() {
  var path = "/Users/dikshantvashistha/PrepBettr/portals/wellfound.ts";
  var hash = "2d6f15405596302b831b3925f67f78890bec385b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/portals/wellfound.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 33
        }
      },
      "4": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 7,
          column: 48
        }
      },
      "5": {
        start: {
          line: 8,
          column: 21
        },
        end: {
          line: 8,
          column: 59
        }
      },
      "6": {
        start: {
          line: 9,
          column: 30
        },
        end: {
          line: 9,
          column: 76
        }
      },
      "7": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 78
        }
      },
      "8": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 53
        }
      },
      "9": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 34
        }
      },
      "10": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 23,
          column: 11
        }
      },
      "11": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 83
        }
      },
      "12": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 32,
          column: 9
        }
      },
      "13": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 31,
          column: 109
        }
      },
      "14": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "15": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 64
        }
      },
      "16": {
        start: {
          line: 41,
          column: 23
        },
        end: {
          line: 47,
          column: 10
        }
      },
      "17": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 75
        }
      },
      "18": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 56,
          column: 9
        }
      },
      "19": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 64
        }
      },
      "20": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "21": {
        start: {
          line: 58,
          column: 29
        },
        end: {
          line: 70,
          column: 14
        }
      },
      "22": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 73,
          column: 13
        }
      },
      "23": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 72,
          column: 100
        }
      },
      "24": {
        start: {
          line: 74,
          column: 25
        },
        end: {
          line: 74,
          column: 46
        }
      },
      "25": {
        start: {
          line: 75,
          column: 27
        },
        end: {
          line: 81,
          column: 13
        }
      },
      "26": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 77
        }
      },
      "27": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 24
        }
      },
      "28": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 68
        }
      },
      "29": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 25
        }
      },
      "30": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "31": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 64
        }
      },
      "32": {
        start: {
          line: 97,
          column: 28
        },
        end: {
          line: 97,
          column: 112
        }
      },
      "33": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "34": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 69
        }
      },
      "35": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 118,
          column: 9
        }
      },
      "36": {
        start: {
          line: 102,
          column: 29
        },
        end: {
          line: 109,
          column: 14
        }
      },
      "37": {
        start: {
          line: 103,
          column: 16
        },
        end: {
          line: 108,
          column: 19
        }
      },
      "38": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 112,
          column: 13
        }
      },
      "39": {
        start: {
          line: 111,
          column: 16
        },
        end: {
          line: 111,
          column: 86
        }
      },
      "40": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 41
        }
      },
      "41": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 67
        }
      },
      "42": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 24
        }
      },
      "43": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 127,
          column: 9
        }
      },
      "44": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 64
        }
      },
      "45": {
        start: {
          line: 128,
          column: 28
        },
        end: {
          line: 128,
          column: 112
        }
      },
      "46": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 131,
          column: 9
        }
      },
      "47": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 130,
          column: 69
        }
      },
      "48": {
        start: {
          line: 132,
          column: 29
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "49": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 167,
          column: 9
        }
      },
      "50": {
        start: {
          line: 144,
          column: 32
        },
        end: {
          line: 144,
          column: 53
        }
      },
      "51": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 149,
          column: 15
        }
      },
      "52": {
        start: {
          line: 146,
          column: 16
        },
        end: {
          line: 148,
          column: 17
        }
      },
      "53": {
        start: {
          line: 147,
          column: 20
        },
        end: {
          line: 147,
          column: 62
        }
      },
      "54": {
        start: {
          line: 150,
          column: 29
        },
        end: {
          line: 157,
          column: 14
        }
      },
      "55": {
        start: {
          line: 151,
          column: 16
        },
        end: {
          line: 156,
          column: 19
        }
      },
      "56": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 160,
          column: 13
        }
      },
      "57": {
        start: {
          line: 159,
          column: 16
        },
        end: {
          line: 159,
          column: 83
        }
      },
      "58": {
        start: {
          line: 161,
          column: 25
        },
        end: {
          line: 161,
          column: 46
        }
      },
      "59": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 162,
          column: 71
        }
      },
      "60": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 64
        }
      },
      "61": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 22
        }
      },
      "62": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 175,
          column: 9
        }
      },
      "63": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 64
        }
      },
      "64": {
        start: {
          line: 176,
          column: 28
        },
        end: {
          line: 176,
          column: 112
        }
      },
      "65": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 179,
          column: 9
        }
      },
      "66": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 178,
          column: 88
        }
      },
      "67": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 207,
          column: 9
        }
      },
      "68": {
        start: {
          line: 181,
          column: 29
        },
        end: {
          line: 193,
          column: 14
        }
      },
      "69": {
        start: {
          line: 182,
          column: 16
        },
        end: {
          line: 192,
          column: 19
        }
      },
      "70": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 197,
          column: 13
        }
      },
      "71": {
        start: {
          line: 195,
          column: 34
        },
        end: {
          line: 195,
          column: 73
        }
      },
      "72": {
        start: {
          line: 195,
          column: 69
        },
        end: {
          line: 195,
          column: 71
        }
      },
      "73": {
        start: {
          line: 196,
          column: 16
        },
        end: {
          line: 196,
          column: 132
        }
      },
      "74": {
        start: {
          line: 198,
          column: 27
        },
        end: {
          line: 198,
          column: 48
        }
      },
      "75": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 202,
          column: 14
        }
      },
      "76": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 69
        }
      },
      "77": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 206,
          column: 79
        }
      },
      "78": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 215,
          column: 9
        }
      },
      "79": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 214,
          column: 64
        }
      },
      "80": {
        start: {
          line: 216,
          column: 28
        },
        end: {
          line: 216,
          column: 112
        }
      },
      "81": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 219,
          column: 9
        }
      },
      "82": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 218,
          column: 32
        }
      },
      "83": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 238,
          column: 9
        }
      },
      "84": {
        start: {
          line: 221,
          column: 29
        },
        end: {
          line: 228,
          column: 14
        }
      },
      "85": {
        start: {
          line: 222,
          column: 16
        },
        end: {
          line: 227,
          column: 19
        }
      },
      "86": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 231,
          column: 13
        }
      },
      "87": {
        start: {
          line: 230,
          column: 16
        },
        end: {
          line: 230,
          column: 36
        }
      },
      "88": {
        start: {
          line: 232,
          column: 25
        },
        end: {
          line: 232,
          column: 46
        }
      },
      "89": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 75
        }
      },
      "90": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 236,
          column: 72
        }
      },
      "91": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 32
        }
      },
      "92": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 246,
          column: 9
        }
      },
      "93": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 64
        }
      },
      "94": {
        start: {
          line: 247,
          column: 28
        },
        end: {
          line: 247,
          column: 112
        }
      },
      "95": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 250,
          column: 9
        }
      },
      "96": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 249,
          column: 24
        }
      },
      "97": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 268,
          column: 9
        }
      },
      "98": {
        start: {
          line: 252,
          column: 29
        },
        end: {
          line: 259,
          column: 14
        }
      },
      "99": {
        start: {
          line: 253,
          column: 16
        },
        end: {
          line: 258,
          column: 19
        }
      },
      "100": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 262,
          column: 13
        }
      },
      "101": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 261,
          column: 90
        }
      },
      "102": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 41
        }
      },
      "103": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 266,
          column: 65
        }
      },
      "104": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 267,
          column: 24
        }
      },
      "105": {
        start: {
          line: 274,
          column: 23
        },
        end: {
          line: 274,
          column: 77
        }
      },
      "106": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 275,
          column: 64
        }
      },
      "107": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 281,
          column: 66
        }
      },
      "108": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 291,
          column: 9
        }
      },
      "109": {
        start: {
          line: 286,
          column: 30
        },
        end: {
          line: 286,
          column: 49
        }
      },
      "110": {
        start: {
          line: 287,
          column: 30
        },
        end: {
          line: 287,
          column: 49
        }
      },
      "111": {
        start: {
          line: 288,
          column: 29
        },
        end: {
          line: 288,
          column: 47
        }
      },
      "112": {
        start: {
          line: 289,
          column: 31
        },
        end: {
          line: 289,
          column: 51
        }
      },
      "113": {
        start: {
          line: 290,
          column: 21
        },
        end: {
          line: 290,
          column: 40
        }
      },
      "114": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 301,
          column: 9
        }
      },
      "115": {
        start: {
          line: 295,
          column: 32
        },
        end: {
          line: 295,
          column: 48
        }
      },
      "116": {
        start: {
          line: 296,
          column: 30
        },
        end: {
          line: 296,
          column: 43
        }
      },
      "117": {
        start: {
          line: 297,
          column: 31
        },
        end: {
          line: 297,
          column: 47
        }
      },
      "118": {
        start: {
          line: 298,
          column: 29
        },
        end: {
          line: 298,
          column: 43
        }
      },
      "119": {
        start: {
          line: 299,
          column: 30
        },
        end: {
          line: 299,
          column: 47
        }
      },
      "120": {
        start: {
          line: 300,
          column: 21
        },
        end: {
          line: 300,
          column: 34
        }
      },
      "121": {
        start: {
          line: 304,
          column: 8
        },
        end: {
          line: 312,
          column: 9
        }
      },
      "122": {
        start: {
          line: 305,
          column: 28
        },
        end: {
          line: 305,
          column: 45
        }
      },
      "123": {
        start: {
          line: 306,
          column: 27
        },
        end: {
          line: 306,
          column: 55
        }
      },
      "124": {
        start: {
          line: 307,
          column: 33
        },
        end: {
          line: 307,
          column: 60
        }
      },
      "125": {
        start: {
          line: 308,
          column: 26
        },
        end: {
          line: 308,
          column: 53
        }
      },
      "126": {
        start: {
          line: 309,
          column: 29
        },
        end: {
          line: 309,
          column: 47
        }
      },
      "127": {
        start: {
          line: 310,
          column: 30
        },
        end: {
          line: 310,
          column: 49
        }
      },
      "128": {
        start: {
          line: 311,
          column: 21
        },
        end: {
          line: 311,
          column: 41
        }
      },
      "129": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 347,
          column: 11
        }
      },
      "130": {
        start: {
          line: 317,
          column: 31
        },
        end: {
          line: 317,
          column: 56
        }
      },
      "131": {
        start: {
          line: 318,
          column: 12
        },
        end: {
          line: 346,
          column: 14
        }
      },
      "132": {
        start: {
          line: 350,
          column: 8
        },
        end: {
          line: 357,
          column: 9
        }
      },
      "133": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 356,
          column: 14
        }
      },
      "134": {
        start: {
          line: 358,
          column: 8
        },
        end: {
          line: 358,
          column: 25
        }
      },
      "135": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 367,
          column: 9
        }
      },
      "136": {
        start: {
          line: 362,
          column: 30
        },
        end: {
          line: 362,
          column: 49
        }
      },
      "137": {
        start: {
          line: 363,
          column: 30
        },
        end: {
          line: 363,
          column: 49
        }
      },
      "138": {
        start: {
          line: 364,
          column: 29
        },
        end: {
          line: 364,
          column: 47
        }
      },
      "139": {
        start: {
          line: 365,
          column: 31
        },
        end: {
          line: 365,
          column: 51
        }
      },
      "140": {
        start: {
          line: 366,
          column: 21
        },
        end: {
          line: 366,
          column: 40
        }
      },
      "141": {
        start: {
          line: 373,
          column: 8
        },
        end: {
          line: 375,
          column: 9
        }
      },
      "142": {
        start: {
          line: 374,
          column: 12
        },
        end: {
          line: 374,
          column: 64
        }
      },
      "143": {
        start: {
          line: 376,
          column: 28
        },
        end: {
          line: 376,
          column: 112
        }
      },
      "144": {
        start: {
          line: 377,
          column: 8
        },
        end: {
          line: 379,
          column: 9
        }
      },
      "145": {
        start: {
          line: 378,
          column: 12
        },
        end: {
          line: 378,
          column: 24
        }
      },
      "146": {
        start: {
          line: 380,
          column: 8
        },
        end: {
          line: 397,
          column: 9
        }
      },
      "147": {
        start: {
          line: 381,
          column: 29
        },
        end: {
          line: 388,
          column: 14
        }
      },
      "148": {
        start: {
          line: 382,
          column: 16
        },
        end: {
          line: 387,
          column: 19
        }
      },
      "149": {
        start: {
          line: 389,
          column: 12
        },
        end: {
          line: 391,
          column: 13
        }
      },
      "150": {
        start: {
          line: 390,
          column: 16
        },
        end: {
          line: 390,
          column: 94
        }
      },
      "151": {
        start: {
          line: 392,
          column: 12
        },
        end: {
          line: 392,
          column: 41
        }
      },
      "152": {
        start: {
          line: 395,
          column: 12
        },
        end: {
          line: 395,
          column: 69
        }
      },
      "153": {
        start: {
          line: 396,
          column: 12
        },
        end: {
          line: 396,
          column: 24
        }
      },
      "154": {
        start: {
          line: 403,
          column: 8
        },
        end: {
          line: 405,
          column: 9
        }
      },
      "155": {
        start: {
          line: 404,
          column: 12
        },
        end: {
          line: 404,
          column: 64
        }
      },
      "156": {
        start: {
          line: 406,
          column: 28
        },
        end: {
          line: 406,
          column: 112
        }
      },
      "157": {
        start: {
          line: 407,
          column: 8
        },
        end: {
          line: 409,
          column: 9
        }
      },
      "158": {
        start: {
          line: 408,
          column: 12
        },
        end: {
          line: 408,
          column: 22
        }
      },
      "159": {
        start: {
          line: 410,
          column: 8
        },
        end: {
          line: 428,
          column: 9
        }
      },
      "160": {
        start: {
          line: 411,
          column: 29
        },
        end: {
          line: 418,
          column: 14
        }
      },
      "161": {
        start: {
          line: 412,
          column: 16
        },
        end: {
          line: 417,
          column: 19
        }
      },
      "162": {
        start: {
          line: 419,
          column: 12
        },
        end: {
          line: 421,
          column: 13
        }
      },
      "163": {
        start: {
          line: 420,
          column: 16
        },
        end: {
          line: 420,
          column: 91
        }
      },
      "164": {
        start: {
          line: 422,
          column: 25
        },
        end: {
          line: 422,
          column: 46
        }
      },
      "165": {
        start: {
          line: 423,
          column: 12
        },
        end: {
          line: 423,
          column: 43
        }
      },
      "166": {
        start: {
          line: 426,
          column: 12
        },
        end: {
          line: 426,
          column: 74
        }
      },
      "167": {
        start: {
          line: 427,
          column: 12
        },
        end: {
          line: 427,
          column: 22
        }
      },
      "168": {
        start: {
          line: 431,
          column: 0
        },
        end: {
          line: 431,
          column: 42
        }
      },
      "169": {
        start: {
          line: 433,
          column: 30
        },
        end: {
          line: 433,
          column: 34
        }
      },
      "170": {
        start: {
          line: 435,
          column: 4
        },
        end: {
          line: 437,
          column: 5
        }
      },
      "171": {
        start: {
          line: 436,
          column: 8
        },
        end: {
          line: 436,
          column: 56
        }
      },
      "172": {
        start: {
          line: 438,
          column: 4
        },
        end: {
          line: 438,
          column: 35
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 18
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 11
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        loc: {
          start: {
            line: 28,
            column: 23
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 28
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        },
        loc: {
          start: {
            line: 37,
            column: 35
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 37
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 53,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        },
        loc: {
          start: {
            line: 53,
            column: 46
          },
          end: {
            line: 89,
            column: 5
          }
        },
        line: 53
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 93,
            column: 4
          },
          end: {
            line: 93,
            column: 5
          }
        },
        loc: {
          start: {
            line: 93,
            column: 29
          },
          end: {
            line: 119,
            column: 5
          }
        },
        line: 93
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 102,
            column: 61
          },
          end: {
            line: 102,
            column: 62
          }
        },
        loc: {
          start: {
            line: 102,
            column: 73
          },
          end: {
            line: 109,
            column: 13
          }
        },
        line: 102
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 123,
            column: 4
          },
          end: {
            line: 123,
            column: 5
          }
        },
        loc: {
          start: {
            line: 123,
            column: 38
          },
          end: {
            line: 168,
            column: 5
          }
        },
        line: 123
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 145,
            column: 49
          },
          end: {
            line: 145,
            column: 50
          }
        },
        loc: {
          start: {
            line: 145,
            column: 67
          },
          end: {
            line: 149,
            column: 13
          }
        },
        line: 145
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 150,
            column: 61
          },
          end: {
            line: 150,
            column: 62
          }
        },
        loc: {
          start: {
            line: 150,
            column: 73
          },
          end: {
            line: 157,
            column: 13
          }
        },
        line: 150
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 172,
            column: 4
          },
          end: {
            line: 172,
            column: 5
          }
        },
        loc: {
          start: {
            line: 172,
            column: 53
          },
          end: {
            line: 208,
            column: 5
          }
        },
        line: 172
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 181,
            column: 61
          },
          end: {
            line: 181,
            column: 62
          }
        },
        loc: {
          start: {
            line: 181,
            column: 73
          },
          end: {
            line: 193,
            column: 13
          }
        },
        line: 181
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 195,
            column: 62
          },
          end: {
            line: 195,
            column: 63
          }
        },
        loc: {
          start: {
            line: 195,
            column: 69
          },
          end: {
            line: 195,
            column: 71
          }
        },
        line: 195
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 212,
            column: 4
          },
          end: {
            line: 212,
            column: 5
          }
        },
        loc: {
          start: {
            line: 212,
            column: 46
          },
          end: {
            line: 239,
            column: 5
          }
        },
        line: 212
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 221,
            column: 61
          },
          end: {
            line: 221,
            column: 62
          }
        },
        loc: {
          start: {
            line: 221,
            column: 73
          },
          end: {
            line: 228,
            column: 13
          }
        },
        line: 221
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 243,
            column: 4
          },
          end: {
            line: 243,
            column: 5
          }
        },
        loc: {
          start: {
            line: 243,
            column: 39
          },
          end: {
            line: 269,
            column: 5
          }
        },
        line: 243
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 252,
            column: 61
          },
          end: {
            line: 252,
            column: 62
          }
        },
        loc: {
          start: {
            line: 252,
            column: 73
          },
          end: {
            line: 259,
            column: 13
          }
        },
        line: 252
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 273,
            column: 4
          },
          end: {
            line: 273,
            column: 5
          }
        },
        loc: {
          start: {
            line: 273,
            column: 30
          },
          end: {
            line: 276,
            column: 5
          }
        },
        line: 273
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 280,
            column: 4
          },
          end: {
            line: 280,
            column: 5
          }
        },
        loc: {
          start: {
            line: 280,
            column: 29
          },
          end: {
            line: 282,
            column: 5
          }
        },
        line: 280
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 284,
            column: 4
          },
          end: {
            line: 284,
            column: 5
          }
        },
        loc: {
          start: {
            line: 284,
            column: 35
          },
          end: {
            line: 292,
            column: 5
          }
        },
        line: 284
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 293,
            column: 4
          },
          end: {
            line: 293,
            column: 5
          }
        },
        loc: {
          start: {
            line: 293,
            column: 41
          },
          end: {
            line: 302,
            column: 5
          }
        },
        line: 293
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 303,
            column: 4
          },
          end: {
            line: 303,
            column: 5
          }
        },
        loc: {
          start: {
            line: 303,
            column: 59
          },
          end: {
            line: 313,
            column: 5
          }
        },
        line: 303
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 314,
            column: 4
          },
          end: {
            line: 314,
            column: 5
          }
        },
        loc: {
          start: {
            line: 314,
            column: 55
          },
          end: {
            line: 348,
            column: 5
          }
        },
        line: 314
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 315,
            column: 33
          },
          end: {
            line: 315,
            column: 34
          }
        },
        loc: {
          start: {
            line: 315,
            column: 42
          },
          end: {
            line: 347,
            column: 9
          }
        },
        line: 315
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 349,
            column: 4
          },
          end: {
            line: 349,
            column: 5
          }
        },
        loc: {
          start: {
            line: 349,
            column: 25
          },
          end: {
            line: 359,
            column: 5
          }
        },
        line: 349
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 360,
            column: 4
          },
          end: {
            line: 360,
            column: 5
          }
        },
        loc: {
          start: {
            line: 360,
            column: 38
          },
          end: {
            line: 368,
            column: 5
          }
        },
        line: 360
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 372,
            column: 4
          },
          end: {
            line: 372,
            column: 5
          }
        },
        loc: {
          start: {
            line: 372,
            column: 47
          },
          end: {
            line: 398,
            column: 5
          }
        },
        line: 372
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 381,
            column: 61
          },
          end: {
            line: 381,
            column: 62
          }
        },
        loc: {
          start: {
            line: 381,
            column: 73
          },
          end: {
            line: 388,
            column: 13
          }
        },
        line: 381
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 402,
            column: 4
          },
          end: {
            line: 402,
            column: 5
          }
        },
        loc: {
          start: {
            line: 402,
            column: 40
          },
          end: {
            line: 429,
            column: 5
          }
        },
        line: 402
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 411,
            column: 61
          },
          end: {
            line: 411,
            column: 62
          }
        },
        loc: {
          start: {
            line: 411,
            column: 73
          },
          end: {
            line: 418,
            column: 13
          }
        },
        line: 411
      },
      "30": {
        name: "getWellfoundPortal",
        decl: {
          start: {
            line: 434,
            column: 9
          },
          end: {
            line: 434,
            column: 27
          }
        },
        loc: {
          start: {
            line: 434,
            column: 30
          },
          end: {
            line: 439,
            column: 1
          }
        },
        line: 434
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "4": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "5": {
        loc: {
          start: {
            line: 45,
            column: 19
          },
          end: {
            line: 45,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 45,
            column: 19
          },
          end: {
            line: 45,
            column: 24
          }
        }, {
          start: {
            line: 45,
            column: 28
          },
          end: {
            line: 45,
            column: 34
          }
        }],
        line: 45
      },
      "6": {
        loc: {
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "7": {
        loc: {
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 73,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 73,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "8": {
        loc: {
          start: {
            line: 77,
            column: 30
          },
          end: {
            line: 77,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 77,
            column: 30
          },
          end: {
            line: 77,
            column: 48
          }
        }, {
          start: {
            line: 77,
            column: 52
          },
          end: {
            line: 77,
            column: 54
          }
        }],
        line: 77
      },
      "9": {
        loc: {
          start: {
            line: 79,
            column: 27
          },
          end: {
            line: 79,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 79,
            column: 27
          },
          end: {
            line: 79,
            column: 42
          }
        }, {
          start: {
            line: 79,
            column: 46
          },
          end: {
            line: 79,
            column: 54
          }
        }],
        line: 79
      },
      "10": {
        loc: {
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "11": {
        loc: {
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "12": {
        loc: {
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 112,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 112,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "13": {
        loc: {
          start: {
            line: 125,
            column: 8
          },
          end: {
            line: 127,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 8
          },
          end: {
            line: 127,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "14": {
        loc: {
          start: {
            line: 129,
            column: 8
          },
          end: {
            line: 131,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 8
          },
          end: {
            line: 131,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 129
      },
      "15": {
        loc: {
          start: {
            line: 134,
            column: 22
          },
          end: {
            line: 134,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 134,
            column: 22
          },
          end: {
            line: 134,
            column: 42
          }
        }, {
          start: {
            line: 134,
            column: 46
          },
          end: {
            line: 134,
            column: 48
          }
        }],
        line: 134
      },
      "16": {
        loc: {
          start: {
            line: 137,
            column: 20
          },
          end: {
            line: 137,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 137,
            column: 66
          },
          end: {
            line: 137,
            column: 72
          }
        }, {
          start: {
            line: 137,
            column: 75
          },
          end: {
            line: 137,
            column: 82
          }
        }],
        line: 137
      },
      "17": {
        loc: {
          start: {
            line: 138,
            column: 24
          },
          end: {
            line: 138,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 138,
            column: 79
          },
          end: {
            line: 138,
            column: 85
          }
        }, {
          start: {
            line: 138,
            column: 88
          },
          end: {
            line: 138,
            column: 94
          }
        }],
        line: 138
      },
      "18": {
        loc: {
          start: {
            line: 138,
            column: 24
          },
          end: {
            line: 138,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 138,
            column: 24
          },
          end: {
            line: 138,
            column: 59
          }
        }, {
          start: {
            line: 138,
            column: 63
          },
          end: {
            line: 138,
            column: 76
          }
        }],
        line: 138
      },
      "19": {
        loc: {
          start: {
            line: 139,
            column: 24
          },
          end: {
            line: 139,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 139,
            column: 79
          },
          end: {
            line: 139,
            column: 85
          }
        }, {
          start: {
            line: 139,
            column: 88
          },
          end: {
            line: 139,
            column: 94
          }
        }],
        line: 139
      },
      "20": {
        loc: {
          start: {
            line: 139,
            column: 24
          },
          end: {
            line: 139,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 139,
            column: 24
          },
          end: {
            line: 139,
            column: 59
          }
        }, {
          start: {
            line: 139,
            column: 63
          },
          end: {
            line: 139,
            column: 76
          }
        }],
        line: 139
      },
      "21": {
        loc: {
          start: {
            line: 146,
            column: 16
          },
          end: {
            line: 148,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 146,
            column: 16
          },
          end: {
            line: 148,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 146
      },
      "22": {
        loc: {
          start: {
            line: 146,
            column: 20
          },
          end: {
            line: 146,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 146,
            column: 20
          },
          end: {
            line: 146,
            column: 39
          }
        }, {
          start: {
            line: 146,
            column: 43
          },
          end: {
            line: 146,
            column: 55
          }
        }],
        line: 146
      },
      "23": {
        loc: {
          start: {
            line: 158,
            column: 12
          },
          end: {
            line: 160,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 158,
            column: 12
          },
          end: {
            line: 160,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 158
      },
      "24": {
        loc: {
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 173
      },
      "25": {
        loc: {
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 179,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 179,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 177
      },
      "26": {
        loc: {
          start: {
            line: 189,
            column: 33
          },
          end: {
            line: 189,
            column: 147
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 189,
            column: 33
          },
          end: {
            line: 189,
            column: 56
          }
        }, {
          start: {
            line: 189,
            column: 60
          },
          end: {
            line: 189,
            column: 147
          }
        }],
        line: 189
      },
      "27": {
        loc: {
          start: {
            line: 194,
            column: 12
          },
          end: {
            line: 197,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 12
          },
          end: {
            line: 197,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "28": {
        loc: {
          start: {
            line: 196,
            column: 90
          },
          end: {
            line: 196,
            column: 128
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 196,
            column: 90
          },
          end: {
            line: 196,
            column: 105
          }
        }, {
          start: {
            line: 196,
            column: 109
          },
          end: {
            line: 196,
            column: 128
          }
        }],
        line: 196
      },
      "29": {
        loc: {
          start: {
            line: 213,
            column: 8
          },
          end: {
            line: 215,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 213,
            column: 8
          },
          end: {
            line: 215,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 213
      },
      "30": {
        loc: {
          start: {
            line: 217,
            column: 8
          },
          end: {
            line: 219,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 217,
            column: 8
          },
          end: {
            line: 219,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 217
      },
      "31": {
        loc: {
          start: {
            line: 229,
            column: 12
          },
          end: {
            line: 231,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 229,
            column: 12
          },
          end: {
            line: 231,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 229
      },
      "32": {
        loc: {
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 246,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 246,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 244
      },
      "33": {
        loc: {
          start: {
            line: 248,
            column: 8
          },
          end: {
            line: 250,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 248,
            column: 8
          },
          end: {
            line: 250,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 248
      },
      "34": {
        loc: {
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 262,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 262,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      },
      "35": {
        loc: {
          start: {
            line: 275,
            column: 15
          },
          end: {
            line: 275,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 275,
            column: 15
          },
          end: {
            line: 275,
            column: 30
          }
        }, {
          start: {
            line: 275,
            column: 34
          },
          end: {
            line: 275,
            column: 63
          }
        }],
        line: 275
      },
      "36": {
        loc: {
          start: {
            line: 285,
            column: 8
          },
          end: {
            line: 291,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 286,
            column: 12
          },
          end: {
            line: 286,
            column: 49
          }
        }, {
          start: {
            line: 287,
            column: 12
          },
          end: {
            line: 287,
            column: 49
          }
        }, {
          start: {
            line: 288,
            column: 12
          },
          end: {
            line: 288,
            column: 47
          }
        }, {
          start: {
            line: 289,
            column: 12
          },
          end: {
            line: 289,
            column: 51
          }
        }, {
          start: {
            line: 290,
            column: 12
          },
          end: {
            line: 290,
            column: 40
          }
        }],
        line: 285
      },
      "37": {
        loc: {
          start: {
            line: 294,
            column: 8
          },
          end: {
            line: 301,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 295,
            column: 12
          },
          end: {
            line: 295,
            column: 48
          }
        }, {
          start: {
            line: 296,
            column: 12
          },
          end: {
            line: 296,
            column: 43
          }
        }, {
          start: {
            line: 297,
            column: 12
          },
          end: {
            line: 297,
            column: 47
          }
        }, {
          start: {
            line: 298,
            column: 12
          },
          end: {
            line: 298,
            column: 43
          }
        }, {
          start: {
            line: 299,
            column: 12
          },
          end: {
            line: 299,
            column: 47
          }
        }, {
          start: {
            line: 300,
            column: 12
          },
          end: {
            line: 300,
            column: 34
          }
        }],
        line: 294
      },
      "38": {
        loc: {
          start: {
            line: 304,
            column: 8
          },
          end: {
            line: 312,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 305,
            column: 12
          },
          end: {
            line: 305,
            column: 45
          }
        }, {
          start: {
            line: 306,
            column: 12
          },
          end: {
            line: 306,
            column: 55
          }
        }, {
          start: {
            line: 307,
            column: 12
          },
          end: {
            line: 307,
            column: 60
          }
        }, {
          start: {
            line: 308,
            column: 12
          },
          end: {
            line: 308,
            column: 53
          }
        }, {
          start: {
            line: 309,
            column: 12
          },
          end: {
            line: 309,
            column: 47
          }
        }, {
          start: {
            line: 310,
            column: 12
          },
          end: {
            line: 310,
            column: 49
          }
        }, {
          start: {
            line: 311,
            column: 12
          },
          end: {
            line: 311,
            column: 41
          }
        }],
        line: 304
      },
      "39": {
        loc: {
          start: {
            line: 304,
            column: 16
          },
          end: {
            line: 304,
            column: 111
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 304,
            column: 73
          },
          end: {
            line: 304,
            column: 79
          }
        }, {
          start: {
            line: 304,
            column: 82
          },
          end: {
            line: 304,
            column: 111
          }
        }],
        line: 304
      },
      "40": {
        loc: {
          start: {
            line: 304,
            column: 16
          },
          end: {
            line: 304,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 304,
            column: 16
          },
          end: {
            line: 304,
            column: 40
          }
        }, {
          start: {
            line: 304,
            column: 44
          },
          end: {
            line: 304,
            column: 70
          }
        }],
        line: 304
      },
      "41": {
        loc: {
          start: {
            line: 322,
            column: 26
          },
          end: {
            line: 322,
            column: 128
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 322,
            column: 27
          },
          end: {
            line: 322,
            column: 91
          }
        }, {
          start: {
            line: 322,
            column: 96
          },
          end: {
            line: 322,
            column: 116
          }
        }, {
          start: {
            line: 322,
            column: 120
          },
          end: {
            line: 322,
            column: 128
          }
        }],
        line: 322
      },
      "42": {
        loc: {
          start: {
            line: 322,
            column: 27
          },
          end: {
            line: 322,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 322,
            column: 75
          },
          end: {
            line: 322,
            column: 81
          }
        }, {
          start: {
            line: 322,
            column: 84
          },
          end: {
            line: 322,
            column: 91
          }
        }],
        line: 322
      },
      "43": {
        loc: {
          start: {
            line: 322,
            column: 27
          },
          end: {
            line: 322,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 322,
            column: 27
          },
          end: {
            line: 322,
            column: 55
          }
        }, {
          start: {
            line: 322,
            column: 59
          },
          end: {
            line: 322,
            column: 72
          }
        }],
        line: 322
      },
      "44": {
        loc: {
          start: {
            line: 325,
            column: 33
          },
          end: {
            line: 325,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 325,
            column: 46
          },
          end: {
            line: 325,
            column: 54
          }
        }, {
          start: {
            line: 325,
            column: 57
          },
          end: {
            line: 325,
            column: 65
          }
        }],
        line: 325
      },
      "45": {
        loc: {
          start: {
            line: 326,
            column: 29
          },
          end: {
            line: 326,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 326,
            column: 29
          },
          end: {
            line: 326,
            column: 44
          }
        }, {
          start: {
            line: 326,
            column: 48
          },
          end: {
            line: 326,
            column: 74
          }
        }],
        line: 326
      },
      "46": {
        loc: {
          start: {
            line: 338,
            column: 29
          },
          end: {
            line: 338,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 338,
            column: 29
          },
          end: {
            line: 338,
            column: 42
          }
        }, {
          start: {
            line: 338,
            column: 46
          },
          end: {
            line: 338,
            column: 84
          }
        }],
        line: 338
      },
      "47": {
        loc: {
          start: {
            line: 350,
            column: 8
          },
          end: {
            line: 357,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 350,
            column: 8
          },
          end: {
            line: 357,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 350
      },
      "48": {
        loc: {
          start: {
            line: 350,
            column: 12
          },
          end: {
            line: 350,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 350,
            column: 12
          },
          end: {
            line: 350,
            column: 26
          }
        }, {
          start: {
            line: 350,
            column: 30
          },
          end: {
            line: 350,
            column: 44
          }
        }],
        line: 350
      },
      "49": {
        loc: {
          start: {
            line: 361,
            column: 8
          },
          end: {
            line: 367,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 362,
            column: 12
          },
          end: {
            line: 362,
            column: 49
          }
        }, {
          start: {
            line: 363,
            column: 12
          },
          end: {
            line: 363,
            column: 49
          }
        }, {
          start: {
            line: 364,
            column: 12
          },
          end: {
            line: 364,
            column: 47
          }
        }, {
          start: {
            line: 365,
            column: 12
          },
          end: {
            line: 365,
            column: 51
          }
        }, {
          start: {
            line: 366,
            column: 12
          },
          end: {
            line: 366,
            column: 40
          }
        }],
        line: 361
      },
      "50": {
        loc: {
          start: {
            line: 361,
            column: 16
          },
          end: {
            line: 361,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 361,
            column: 57
          },
          end: {
            line: 361,
            column: 63
          }
        }, {
          start: {
            line: 361,
            column: 66
          },
          end: {
            line: 361,
            column: 87
          }
        }],
        line: 361
      },
      "51": {
        loc: {
          start: {
            line: 361,
            column: 16
          },
          end: {
            line: 361,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 361,
            column: 16
          },
          end: {
            line: 361,
            column: 32
          }
        }, {
          start: {
            line: 361,
            column: 36
          },
          end: {
            line: 361,
            column: 54
          }
        }],
        line: 361
      },
      "52": {
        loc: {
          start: {
            line: 373,
            column: 8
          },
          end: {
            line: 375,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 373,
            column: 8
          },
          end: {
            line: 375,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 373
      },
      "53": {
        loc: {
          start: {
            line: 377,
            column: 8
          },
          end: {
            line: 379,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 377,
            column: 8
          },
          end: {
            line: 379,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 377
      },
      "54": {
        loc: {
          start: {
            line: 389,
            column: 12
          },
          end: {
            line: 391,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 389,
            column: 12
          },
          end: {
            line: 391,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 389
      },
      "55": {
        loc: {
          start: {
            line: 403,
            column: 8
          },
          end: {
            line: 405,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 403,
            column: 8
          },
          end: {
            line: 405,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 403
      },
      "56": {
        loc: {
          start: {
            line: 407,
            column: 8
          },
          end: {
            line: 409,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 407,
            column: 8
          },
          end: {
            line: 409,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 407
      },
      "57": {
        loc: {
          start: {
            line: 419,
            column: 12
          },
          end: {
            line: 421,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 419,
            column: 12
          },
          end: {
            line: 421,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 419
      },
      "58": {
        loc: {
          start: {
            line: 423,
            column: 19
          },
          end: {
            line: 423,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 423,
            column: 19
          },
          end: {
            line: 423,
            column: 36
          }
        }, {
          start: {
            line: 423,
            column: 40
          },
          end: {
            line: 423,
            column: 42
          }
        }],
        line: 423
      },
      "59": {
        loc: {
          start: {
            line: 435,
            column: 4
          },
          end: {
            line: 437,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 435,
            column: 4
          },
          end: {
            line: 437,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 435
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0, 0, 0, 0],
      "37": [0, 0, 0, 0, 0, 0],
      "38": [0, 0, 0, 0, 0, 0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0, 0, 0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/portals/wellfound.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/portals/wellfound.ts"],
      sourcesContent: ["import Bottleneck from 'bottleneck';\nimport { getAzureTokenService, AzureADConfig } from '../lib/services/azure-token-service';\nimport { JobListing, JobSearchFilters, ApplicationStatus } from '../types/auto-apply';\n\ninterface WellfoundJobSearchParams {\n  q?: string; // Keywords\n  location?: string;\n  remote?: 'true' | 'false';\n  job_type?: 'full-time' | 'part-time' | 'contract' | 'internship';\n  experience?: 'junior' | 'mid' | 'senior' | 'lead' | 'c-level';\n  role?: string;\n  company_size?: 'startup' | 'small' | 'medium' | 'large';\n  stage?: 'seed' | 'series-a' | 'series-b' | 'series-c' | 'growth';\n  market?: string;\n  salary_min?: number;\n  salary_max?: number;\n  equity_min?: number;\n  equity_max?: number;\n  page?: number;\n  per_page?: number;\n}\n\ninterface WellfoundJobResponse {\n  jobs: WellfoundJob[];\n  total: number;\n  page: number;\n  per_page: number;\n  last_page: number;\n}\n\ninterface WellfoundJob {\n  id: number;\n  title: string;\n  description: string;\n  job_type: string;\n  remote: boolean;\n  salary_min?: number;\n  salary_max?: number;\n  equity_min?: number;\n  equity_max?: number;\n  experience_level: string;\n  created_at: string;\n  updated_at: string;\n  apply_url: string;\n  company: {\n    id: number;\n    name: string;\n    angellist_url: string;\n    logo_url?: string;\n    location?: string;\n    company_size?: string;\n    stage?: string;\n    markets: string[];\n  };\n  location?: {\n    name: string;\n  };\n}\n\ninterface WellfoundProfileInfo {\n  id: number;\n  name: string;\n  email: string;\n  bio?: string;\n  locations: string[];\n  roles: string[];\n  skills: string[];\n  avatar_url?: string;\n}\n\ninterface WellfoundApplicationResponse {\n  id: number;\n  status: string;\n  created_at: string;\n  updated_at: string;\n  message?: string;\n}\n\nexport class WellfoundPortal {\n  private tokenService = getAzureTokenService();\n  private rateLimiter: Bottleneck;\n  private baseUrl = 'https://api.wellfound.com/1';\n  private azureAdConfig: AzureADConfig | null = null;\n\n  constructor() {\n    // Wellfound/AngelList API rate limits: More generous than LinkedIn\n    // 1000 requests per hour per authenticated user\n    this.rateLimiter = new Bottleneck({\n      minTime: 3600, // Minimum 3.6 seconds between requests (1000 requests/hour)\n      maxConcurrent: 2, // Allow 2 concurrent requests\n      reservoir: 1000, // 1000 requests per hour\n      reservoirRefreshAmount: 1000,\n      reservoirRefreshInterval: 60 * 60 * 1000, // Refresh every hour\n    });\n  }\n\n  /**\n   * Initialize Wellfound portal with Azure AD configuration\n   */\n  async initialize(): Promise<void> {\n    this.azureAdConfig = await this.tokenService.getAzureADConfig('wellfound');\n    if (!this.azureAdConfig) {\n      throw new Error('Wellfound Azure AD configuration not found. Please configure OAuth app first.');\n    }\n  }\n\n  /**\n   * Generate OAuth authorization URL for Wellfound\n   */\n  generateAuthUrl(userId: string, state?: string): string {\n    if (!this.azureAdConfig) {\n      throw new Error('Wellfound portal not initialized');\n    }\n\n    const params = new URLSearchParams({\n      response_type: 'code',\n      client_id: this.azureAdConfig.clientId,\n      redirect_uri: this.azureAdConfig.redirectUri,\n      state: state || userId,\n      scope: this.azureAdConfig.scopes.join(' '),\n    });\n\n    return `https://angel.co/api/oauth/authorize?${params.toString()}`;\n  }\n\n  /**\n   * Exchange authorization code for access token\n   */\n  async exchangeCodeForTokens(code: string, userId: string): Promise<boolean> {\n    if (!this.azureAdConfig) {\n      throw new Error('Wellfound portal not initialized');\n    }\n\n    try {\n      const response = await fetch('https://angel.co/api/oauth/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: new URLSearchParams({\n          grant_type: 'authorization_code',\n          code,\n          redirect_uri: this.azureAdConfig.redirectUri,\n          client_id: this.azureAdConfig.clientId,\n          client_secret: this.azureAdConfig.clientSecret,\n        }).toString(),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Token exchange failed: ${response.status} ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      \n      const tokens = {\n        accessToken: data.access_token,\n        refreshToken: data.refresh_token || '',\n        expiresAt: Date.now() + (data.expires_in * 1000),\n        tokenType: data.token_type || 'Bearer',\n        scope: data.scope,\n      };\n\n      await this.tokenService.storeTokens('wellfound', userId, tokens);\n      return true;\n    } catch (error) {\n      console.error('Wellfound token exchange error:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get authenticated user profile\n   */\n  async getProfile(userId: string): Promise<WellfoundProfileInfo | null> {\n    if (!this.azureAdConfig) {\n      throw new Error('Wellfound portal not initialized');\n    }\n\n    const accessToken = await this.tokenService.getValidAccessToken('wellfound', userId, this.azureAdConfig);\n    if (!accessToken) {\n      throw new Error('No valid Wellfound access token found');\n    }\n\n    try {\n      const response = await this.rateLimiter.schedule(async () => {\n        return fetch(`${this.baseUrl}/me`, {\n          headers: {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'application/json',\n          },\n        });\n      });\n\n      if (!response.ok) {\n        throw new Error(`Wellfound profile fetch failed: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Wellfound profile fetch error:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Search for jobs on Wellfound\n   */\n  async searchJobs(userId: string, filters: JobSearchFilters): Promise<JobListing[]> {\n    if (!this.azureAdConfig) {\n      throw new Error('Wellfound portal not initialized');\n    }\n\n    const accessToken = await this.tokenService.getValidAccessToken('wellfound', userId, this.azureAdConfig);\n    if (!accessToken) {\n      throw new Error('No valid Wellfound access token found');\n    }\n\n    const searchParams: WellfoundJobSearchParams = {\n      q: filters.keywords.join(' '),\n      location: filters.locations[0] || '',\n      job_type: this.mapJobTypeToWellfound(filters.jobTypes[0]),\n      experience: this.mapExperienceLevelToWellfound(filters.experienceLevel[0]),\n      remote: filters.workArrangements.includes('remote') ? 'true' : 'false',\n      salary_min: filters.salaryRange?.min,\n      salary_max: filters.salaryRange?.max,\n      per_page: 50, // Maximum per request\n      page: 1,\n    };\n\n    try {\n      const queryParams = new URLSearchParams();\n      Object.entries(searchParams).forEach(([key, value]) => {\n        if (value !== undefined && value !== '') {\n          queryParams.append(key, value.toString());\n        }\n      });\n\n      const response = await this.rateLimiter.schedule(async () => {\n        return fetch(`${this.baseUrl}/jobs/search?${queryParams.toString()}`, {\n          headers: {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'application/json',\n          },\n        });\n      });\n\n      if (!response.ok) {\n        throw new Error(`Wellfound job search failed: ${response.status}`);\n      }\n\n      const data: WellfoundJobResponse = await response.json();\n      return this.transformWellfoundJobsToJobListings(data.jobs);\n    } catch (error) {\n      console.error('Wellfound job search error:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Apply to a job on Wellfound\n   */\n  async applyToJob(userId: string, jobId: string, applicationData: {\n    message?: string;\n    resume_url?: string;\n  }): Promise<{ success: boolean; message: string }> {\n    if (!this.azureAdConfig) {\n      throw new Error('Wellfound portal not initialized');\n    }\n\n    const accessToken = await this.tokenService.getValidAccessToken('wellfound', userId, this.azureAdConfig);\n    if (!accessToken) {\n      return { success: false, message: 'No valid Wellfound access token found' };\n    }\n\n    try {\n      const response = await this.rateLimiter.schedule(async () => {\n        return fetch(`${this.baseUrl}/jobs/${jobId}/apply`, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            message: applicationData.message || 'I am interested in this position and would love to discuss my qualifications further.',\n            resume_url: applicationData.resume_url,\n          }),\n        });\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(`Wellfound job application failed: ${response.status} - ${errorData.error || response.statusText}`);\n      }\n\n      const result: WellfoundApplicationResponse = await response.json();\n      return { \n        success: true, \n        message: `Application submitted successfully. Application ID: ${result.id}` \n      };\n    } catch (error) {\n      console.error('Wellfound job application error:', error);\n      return { success: false, message: `Application failed: ${error}` };\n    }\n  }\n\n  /**\n   * Get application status for a job\n   */\n  async getApplicationStatus(userId: string, jobId: string): Promise<ApplicationStatus> {\n    if (!this.azureAdConfig) {\n      throw new Error('Wellfound portal not initialized');\n    }\n\n    const accessToken = await this.tokenService.getValidAccessToken('wellfound', userId, this.azureAdConfig);\n    if (!accessToken) {\n      return 'discovered';\n    }\n\n    try {\n      const response = await this.rateLimiter.schedule(async () => {\n        return fetch(`${this.baseUrl}/jobs/${jobId}/applications/mine`, {\n          headers: {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'application/json',\n          },\n        });\n      });\n\n      if (!response.ok) {\n        return 'discovered';\n      }\n\n      const data: WellfoundApplicationResponse = await response.json();\n      return this.mapWellfoundStatusToApplicationStatus(data.status);\n    } catch (error) {\n      console.error('Wellfound application status error:', error);\n      return 'discovered';\n    }\n  }\n\n  /**\n   * Get detailed job information\n   */\n  async getJobDetails(userId: string, jobId: string): Promise<WellfoundJob | null> {\n    if (!this.azureAdConfig) {\n      throw new Error('Wellfound portal not initialized');\n    }\n\n    const accessToken = await this.tokenService.getValidAccessToken('wellfound', userId, this.azureAdConfig);\n    if (!accessToken) {\n      return null;\n    }\n\n    try {\n      const response = await this.rateLimiter.schedule(async () => {\n        return fetch(`${this.baseUrl}/jobs/${jobId}`, {\n          headers: {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'application/json',\n          },\n        });\n      });\n\n      if (!response.ok) {\n        throw new Error(`Wellfound job details fetch failed: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Wellfound job details error:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Check if user is connected to Wellfound\n   */\n  async isConnected(userId: string): Promise<boolean> {\n    const tokens = await this.tokenService.getTokens('wellfound', userId);\n    return tokens !== null && tokens.expiresAt > Date.now();\n  }\n\n  /**\n   * Disconnect user from Wellfound\n   */\n  async disconnect(userId: string): Promise<void> {\n    await this.tokenService.deleteTokens('wellfound', userId);\n  }\n\n  // Helper methods for mapping between our types and Wellfound types\n  private mapJobTypeToWellfound(jobType?: string): WellfoundJobSearchParams['job_type'] {\n    switch (jobType) {\n      case 'full-time': return 'full-time';\n      case 'part-time': return 'part-time';\n      case 'contract': return 'contract';\n      case 'internship': return 'internship';\n      default: return 'full-time';\n    }\n  }\n\n  private mapExperienceLevelToWellfound(level?: string): WellfoundJobSearchParams['experience'] {\n    switch (level) {\n      case 'entry-level': return 'junior';\n      case 'associate': return 'mid';\n      case 'mid-senior': return 'senior';\n      case 'director': return 'lead';\n      case 'executive': return 'c-level';\n      default: return 'mid';\n    }\n  }\n\n  private mapWellfoundStatusToApplicationStatus(wellfoundStatus: string): ApplicationStatus {\n    switch (wellfoundStatus?.toLowerCase()) {\n      case 'applied': return 'applied';\n      case 'viewed': return 'application_viewed';\n      case 'interviewing': return 'interview_request';\n      case 'hired': return 'interview_request'; // Map hired to interview_request as closest match\n      case 'rejected': return 'rejected';\n      case 'withdrawn': return 'withdrawn';\n      default: return 'discovered';\n    }\n  }\n\n  private transformWellfoundJobsToJobListings(wellfoundJobs: WellfoundJob[]): JobListing[] {\n    return wellfoundJobs.map((job) => {\n      const salaryInfo = this.buildSalaryInfo(job);\n      \n      return {\n        id: job.id.toString(),\n        title: job.title,\n        company: job.company.name,\n        location: job.location?.name || job.company.location || 'Remote',\n        salary: salaryInfo,\n        jobType: this.mapWellfoundJobTypeToOur(job.job_type) as any,\n        workArrangement: job.remote ? 'remote' : 'onsite' as any,\n        description: job.description || 'No description available',\n        requirements: [], // Would need to parse from description\n        responsibilities: [], // Would need to parse from description\n        benefits: undefined,\n        postedDate: job.created_at,\n        applicationDeadline: undefined,\n        jobPortal: {\n          name: 'AngelList', // Wellfound was formerly AngelList\n          logo: '/icons/angellist.svg',\n          website: 'https://wellfound.com',\n          supportsAutoApply: true,\n        },\n        originalUrl: job.apply_url || `https://wellfound.com/jobs/${job.id}`,\n        companyLogo: job.company.logo_url,\n        relevancyScore: undefined,\n        matchedSkills: [],\n        missingSkills: [],\n        applicationStatus: 'discovered',\n        createdAt: job.created_at,\n        updatedAt: job.updated_at,\n      };\n    });\n  }\n\n  private buildSalaryInfo(job: WellfoundJob) {\n    if (job.salary_min || job.salary_max) {\n      return {\n        min: job.salary_min,\n        max: job.salary_max,\n        currency: 'USD', // Wellfound typically uses USD\n        period: 'yearly' as const,\n      };\n    }\n    return undefined;\n  }\n\n  private mapWellfoundJobTypeToOur(jobType: string): string {\n    switch (jobType?.toLowerCase()) {\n      case 'full-time': return 'full-time';\n      case 'part-time': return 'part-time';\n      case 'contract': return 'contract';\n      case 'internship': return 'internship';\n      default: return 'full-time';\n    }\n  }\n\n  /**\n   * Get company details\n   */\n  async getCompanyDetails(userId: string, companyId: string): Promise<any> {\n    if (!this.azureAdConfig) {\n      throw new Error('Wellfound portal not initialized');\n    }\n\n    const accessToken = await this.tokenService.getValidAccessToken('wellfound', userId, this.azureAdConfig);\n    if (!accessToken) {\n      return null;\n    }\n\n    try {\n      const response = await this.rateLimiter.schedule(async () => {\n        return fetch(`${this.baseUrl}/companies/${companyId}`, {\n          headers: {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'application/json',\n          },\n        });\n      });\n\n      if (!response.ok) {\n        throw new Error(`Wellfound company details fetch failed: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Wellfound company details error:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Get user's applications history\n   */\n  async getApplicationHistory(userId: string): Promise<WellfoundApplicationResponse[]> {\n    if (!this.azureAdConfig) {\n      throw new Error('Wellfound portal not initialized');\n    }\n\n    const accessToken = await this.tokenService.getValidAccessToken('wellfound', userId, this.azureAdConfig);\n    if (!accessToken) {\n      return [];\n    }\n\n    try {\n      const response = await this.rateLimiter.schedule(async () => {\n        return fetch(`${this.baseUrl}/me/applications`, {\n          headers: {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'application/json',\n          },\n        });\n      });\n\n      if (!response.ok) {\n        throw new Error(`Wellfound applications fetch failed: ${response.status}`);\n      }\n\n      const data = await response.json();\n      return data.applications || [];\n    } catch (error) {\n      console.error('Wellfound applications history error:', error);\n      return [];\n    }\n  }\n}\n\n// Singleton instance\nlet wellfoundPortalInstance: WellfoundPortal | null = null;\n\nexport function getWellfoundPortal(): WellfoundPortal {\n  if (!wellfoundPortalInstance) {\n    wellfoundPortalInstance = new WellfoundPortal();\n  }\n  return wellfoundPortalInstance;\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2d6f15405596302b831b3925f67f78890bec385b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2dmwe8wd9u = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2dmwe8wd9u();
var __importDefault =
/* istanbul ignore next */
(cov_2dmwe8wd9u().s[0]++,
/* istanbul ignore next */
(cov_2dmwe8wd9u().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_2dmwe8wd9u().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_2dmwe8wd9u().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_2dmwe8wd9u().f[0]++;
  cov_2dmwe8wd9u().s[1]++;
  return /* istanbul ignore next */(cov_2dmwe8wd9u().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_2dmwe8wd9u().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_2dmwe8wd9u().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_2dmwe8wd9u().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_2dmwe8wd9u().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2dmwe8wd9u().s[3]++;
exports.WellfoundPortal = void 0;
/* istanbul ignore next */
cov_2dmwe8wd9u().s[4]++;
exports.getWellfoundPortal = getWellfoundPortal;
const bottleneck_1 =
/* istanbul ignore next */
(cov_2dmwe8wd9u().s[5]++, __importDefault(require("bottleneck")));
const azure_token_service_1 =
/* istanbul ignore next */
(cov_2dmwe8wd9u().s[6]++, require("../lib/services/azure-token-service"));
class WellfoundPortal {
  constructor() {
    /* istanbul ignore next */
    cov_2dmwe8wd9u().f[1]++;
    cov_2dmwe8wd9u().s[7]++;
    this.tokenService = (0, azure_token_service_1.getAzureTokenService)();
    /* istanbul ignore next */
    cov_2dmwe8wd9u().s[8]++;
    this.baseUrl = 'https://api.wellfound.com/1';
    /* istanbul ignore next */
    cov_2dmwe8wd9u().s[9]++;
    this.azureAdConfig = null;
    // Wellfound/AngelList API rate limits: More generous than LinkedIn
    // 1000 requests per hour per authenticated user
    /* istanbul ignore next */
    cov_2dmwe8wd9u().s[10]++;
    this.rateLimiter = new bottleneck_1.default({
      minTime: 3600,
      // Minimum 3.6 seconds between requests (1000 requests/hour)
      maxConcurrent: 2,
      // Allow 2 concurrent requests
      reservoir: 1000,
      // 1000 requests per hour
      reservoirRefreshAmount: 1000,
      reservoirRefreshInterval: 60 * 60 * 1000 // Refresh every hour
    });
  }
  /**
   * Initialize Wellfound portal with Azure AD configuration
   */
  async initialize() {
    /* istanbul ignore next */
    cov_2dmwe8wd9u().f[2]++;
    cov_2dmwe8wd9u().s[11]++;
    this.azureAdConfig = await this.tokenService.getAzureADConfig('wellfound');
    /* istanbul ignore next */
    cov_2dmwe8wd9u().s[12]++;
    if (!this.azureAdConfig) {
      /* istanbul ignore next */
      cov_2dmwe8wd9u().b[3][0]++;
      cov_2dmwe8wd9u().s[13]++;
      throw new Error('Wellfound Azure AD configuration not found. Please configure OAuth app first.');
    } else
    /* istanbul ignore next */
    {
      cov_2dmwe8wd9u().b[3][1]++;
    }
  }
  /**
   * Generate OAuth authorization URL for Wellfound
   */
  generateAuthUrl(userId, state) {
    /* istanbul ignore next */
    cov_2dmwe8wd9u().f[3]++;
    cov_2dmwe8wd9u().s[14]++;
    if (!this.azureAdConfig) {
      /* istanbul ignore next */
      cov_2dmwe8wd9u().b[4][0]++;
      cov_2dmwe8wd9u().s[15]++;
      throw new Error('Wellfound portal not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_2dmwe8wd9u().b[4][1]++;
    }
    const params =
    /* istanbul ignore next */
    (cov_2dmwe8wd9u().s[16]++, new URLSearchParams({
      response_type: 'code',
      client_id: this.azureAdConfig.clientId,
      redirect_uri: this.azureAdConfig.redirectUri,
      state:
      /* istanbul ignore next */
      (cov_2dmwe8wd9u().b[5][0]++, state) ||
      /* istanbul ignore next */
      (cov_2dmwe8wd9u().b[5][1]++, userId),
      scope: this.azureAdConfig.scopes.join(' ')
    }));
    /* istanbul ignore next */
    cov_2dmwe8wd9u().s[17]++;
    return `https://angel.co/api/oauth/authorize?${params.toString()}`;
  }
  /**
   * Exchange authorization code for access token
   */
  async exchangeCodeForTokens(code, userId) {
    /* istanbul ignore next */
    cov_2dmwe8wd9u().f[4]++;
    cov_2dmwe8wd9u().s[18]++;
    if (!this.azureAdConfig) {
      /* istanbul ignore next */
      cov_2dmwe8wd9u().b[6][0]++;
      cov_2dmwe8wd9u().s[19]++;
      throw new Error('Wellfound portal not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_2dmwe8wd9u().b[6][1]++;
    }
    cov_2dmwe8wd9u().s[20]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_2dmwe8wd9u().s[21]++, await fetch('https://angel.co/api/oauth/token', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: new URLSearchParams({
          grant_type: 'authorization_code',
          code,
          redirect_uri: this.azureAdConfig.redirectUri,
          client_id: this.azureAdConfig.clientId,
          client_secret: this.azureAdConfig.clientSecret
        }).toString()
      }));
      /* istanbul ignore next */
      cov_2dmwe8wd9u().s[22]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_2dmwe8wd9u().b[7][0]++;
        cov_2dmwe8wd9u().s[23]++;
        throw new Error(`Token exchange failed: ${response.status} ${response.statusText}`);
      } else
      /* istanbul ignore next */
      {
        cov_2dmwe8wd9u().b[7][1]++;
      }
      const data =
      /* istanbul ignore next */
      (cov_2dmwe8wd9u().s[24]++, await response.json());
      const tokens =
      /* istanbul ignore next */
      (cov_2dmwe8wd9u().s[25]++, {
        accessToken: data.access_token,
        refreshToken:
        /* istanbul ignore next */
        (cov_2dmwe8wd9u().b[8][0]++, data.refresh_token) ||
        /* istanbul ignore next */
        (cov_2dmwe8wd9u().b[8][1]++, ''),
        expiresAt: Date.now() + data.expires_in * 1000,
        tokenType:
        /* istanbul ignore next */
        (cov_2dmwe8wd9u().b[9][0]++, data.token_type) ||
        /* istanbul ignore next */
        (cov_2dmwe8wd9u().b[9][1]++, 'Bearer'),
        scope: data.scope
      });
      /* istanbul ignore next */
      cov_2dmwe8wd9u().s[26]++;
      await this.tokenService.storeTokens('wellfound', userId, tokens);
      /* istanbul ignore next */
      cov_2dmwe8wd9u().s[27]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_2dmwe8wd9u().s[28]++;
      console.error('Wellfound token exchange error:', error);
      /* istanbul ignore next */
      cov_2dmwe8wd9u().s[29]++;
      return false;
    }
  }
  /**
   * Get authenticated user profile
   */
  async getProfile(userId) {
    /* istanbul ignore next */
    cov_2dmwe8wd9u().f[5]++;
    cov_2dmwe8wd9u().s[30]++;
    if (!this.azureAdConfig) {
      /* istanbul ignore next */
      cov_2dmwe8wd9u().b[10][0]++;
      cov_2dmwe8wd9u().s[31]++;
      throw new Error('Wellfound portal not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_2dmwe8wd9u().b[10][1]++;
    }
    const accessToken =
    /* istanbul ignore next */
    (cov_2dmwe8wd9u().s[32]++, await this.tokenService.getValidAccessToken('wellfound', userId, this.azureAdConfig));
    /* istanbul ignore next */
    cov_2dmwe8wd9u().s[33]++;
    if (!accessToken) {
      /* istanbul ignore next */
      cov_2dmwe8wd9u().b[11][0]++;
      cov_2dmwe8wd9u().s[34]++;
      throw new Error('No valid Wellfound access token found');
    } else
    /* istanbul ignore next */
    {
      cov_2dmwe8wd9u().b[11][1]++;
    }
    cov_2dmwe8wd9u().s[35]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_2dmwe8wd9u().s[36]++, await this.rateLimiter.schedule(async () => {
        /* istanbul ignore next */
        cov_2dmwe8wd9u().f[6]++;
        cov_2dmwe8wd9u().s[37]++;
        return fetch(`${this.baseUrl}/me`, {
          headers: {
            'Authorization': `Bearer ${accessToken}`,
            'Content-Type': 'application/json'
          }
        });
      }));
      /* istanbul ignore next */
      cov_2dmwe8wd9u().s[38]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_2dmwe8wd9u().b[12][0]++;
        cov_2dmwe8wd9u().s[39]++;
        throw new Error(`Wellfound profile fetch failed: ${response.status}`);
      } else
      /* istanbul ignore next */
      {
        cov_2dmwe8wd9u().b[12][1]++;
      }
      cov_2dmwe8wd9u().s[40]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_2dmwe8wd9u().s[41]++;
      console.error('Wellfound profile fetch error:', error);
      /* istanbul ignore next */
      cov_2dmwe8wd9u().s[42]++;
      return null;
    }
  }
  /**
   * Search for jobs on Wellfound
   */
  async searchJobs(userId, filters) {
    /* istanbul ignore next */
    cov_2dmwe8wd9u().f[7]++;
    var _a, _b;
    /* istanbul ignore next */
    cov_2dmwe8wd9u().s[43]++;
    if (!this.azureAdConfig) {
      /* istanbul ignore next */
      cov_2dmwe8wd9u().b[13][0]++;
      cov_2dmwe8wd9u().s[44]++;
      throw new Error('Wellfound portal not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_2dmwe8wd9u().b[13][1]++;
    }
    const accessToken =
    /* istanbul ignore next */
    (cov_2dmwe8wd9u().s[45]++, await this.tokenService.getValidAccessToken('wellfound', userId, this.azureAdConfig));
    /* istanbul ignore next */
    cov_2dmwe8wd9u().s[46]++;
    if (!accessToken) {
      /* istanbul ignore next */
      cov_2dmwe8wd9u().b[14][0]++;
      cov_2dmwe8wd9u().s[47]++;
      throw new Error('No valid Wellfound access token found');
    } else
    /* istanbul ignore next */
    {
      cov_2dmwe8wd9u().b[14][1]++;
    }
    const searchParams =
    /* istanbul ignore next */
    (cov_2dmwe8wd9u().s[48]++, {
      q: filters.keywords.join(' '),
      location:
      /* istanbul ignore next */
      (cov_2dmwe8wd9u().b[15][0]++, filters.locations[0]) ||
      /* istanbul ignore next */
      (cov_2dmwe8wd9u().b[15][1]++, ''),
      job_type: this.mapJobTypeToWellfound(filters.jobTypes[0]),
      experience: this.mapExperienceLevelToWellfound(filters.experienceLevel[0]),
      remote: filters.workArrangements.includes('remote') ?
      /* istanbul ignore next */
      (cov_2dmwe8wd9u().b[16][0]++, 'true') :
      /* istanbul ignore next */
      (cov_2dmwe8wd9u().b[16][1]++, 'false'),
      salary_min:
      /* istanbul ignore next */
      (cov_2dmwe8wd9u().b[18][0]++, (_a = filters.salaryRange) === null) ||
      /* istanbul ignore next */
      (cov_2dmwe8wd9u().b[18][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_2dmwe8wd9u().b[17][0]++, void 0) :
      /* istanbul ignore next */
      (cov_2dmwe8wd9u().b[17][1]++, _a.min),
      salary_max:
      /* istanbul ignore next */
      (cov_2dmwe8wd9u().b[20][0]++, (_b = filters.salaryRange) === null) ||
      /* istanbul ignore next */
      (cov_2dmwe8wd9u().b[20][1]++, _b === void 0) ?
      /* istanbul ignore next */
      (cov_2dmwe8wd9u().b[19][0]++, void 0) :
      /* istanbul ignore next */
      (cov_2dmwe8wd9u().b[19][1]++, _b.max),
      per_page: 50,
      // Maximum per request
      page: 1
    });
    /* istanbul ignore next */
    cov_2dmwe8wd9u().s[49]++;
    try {
      const queryParams =
      /* istanbul ignore next */
      (cov_2dmwe8wd9u().s[50]++, new URLSearchParams());
      /* istanbul ignore next */
      cov_2dmwe8wd9u().s[51]++;
      Object.entries(searchParams).forEach(([key, value]) => {
        /* istanbul ignore next */
        cov_2dmwe8wd9u().f[8]++;
        cov_2dmwe8wd9u().s[52]++;
        if (
        /* istanbul ignore next */
        (cov_2dmwe8wd9u().b[22][0]++, value !== undefined) &&
        /* istanbul ignore next */
        (cov_2dmwe8wd9u().b[22][1]++, value !== '')) {
          /* istanbul ignore next */
          cov_2dmwe8wd9u().b[21][0]++;
          cov_2dmwe8wd9u().s[53]++;
          queryParams.append(key, value.toString());
        } else
        /* istanbul ignore next */
        {
          cov_2dmwe8wd9u().b[21][1]++;
        }
      });
      const response =
      /* istanbul ignore next */
      (cov_2dmwe8wd9u().s[54]++, await this.rateLimiter.schedule(async () => {
        /* istanbul ignore next */
        cov_2dmwe8wd9u().f[9]++;
        cov_2dmwe8wd9u().s[55]++;
        return fetch(`${this.baseUrl}/jobs/search?${queryParams.toString()}`, {
          headers: {
            'Authorization': `Bearer ${accessToken}`,
            'Content-Type': 'application/json'
          }
        });
      }));
      /* istanbul ignore next */
      cov_2dmwe8wd9u().s[56]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_2dmwe8wd9u().b[23][0]++;
        cov_2dmwe8wd9u().s[57]++;
        throw new Error(`Wellfound job search failed: ${response.status}`);
      } else
      /* istanbul ignore next */
      {
        cov_2dmwe8wd9u().b[23][1]++;
      }
      const data =
      /* istanbul ignore next */
      (cov_2dmwe8wd9u().s[58]++, await response.json());
      /* istanbul ignore next */
      cov_2dmwe8wd9u().s[59]++;
      return this.transformWellfoundJobsToJobListings(data.jobs);
    } catch (error) {
      /* istanbul ignore next */
      cov_2dmwe8wd9u().s[60]++;
      console.error('Wellfound job search error:', error);
      /* istanbul ignore next */
      cov_2dmwe8wd9u().s[61]++;
      return [];
    }
  }
  /**
   * Apply to a job on Wellfound
   */
  async applyToJob(userId, jobId, applicationData) {
    /* istanbul ignore next */
    cov_2dmwe8wd9u().f[10]++;
    cov_2dmwe8wd9u().s[62]++;
    if (!this.azureAdConfig) {
      /* istanbul ignore next */
      cov_2dmwe8wd9u().b[24][0]++;
      cov_2dmwe8wd9u().s[63]++;
      throw new Error('Wellfound portal not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_2dmwe8wd9u().b[24][1]++;
    }
    const accessToken =
    /* istanbul ignore next */
    (cov_2dmwe8wd9u().s[64]++, await this.tokenService.getValidAccessToken('wellfound', userId, this.azureAdConfig));
    /* istanbul ignore next */
    cov_2dmwe8wd9u().s[65]++;
    if (!accessToken) {
      /* istanbul ignore next */
      cov_2dmwe8wd9u().b[25][0]++;
      cov_2dmwe8wd9u().s[66]++;
      return {
        success: false,
        message: 'No valid Wellfound access token found'
      };
    } else
    /* istanbul ignore next */
    {
      cov_2dmwe8wd9u().b[25][1]++;
    }
    cov_2dmwe8wd9u().s[67]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_2dmwe8wd9u().s[68]++, await this.rateLimiter.schedule(async () => {
        /* istanbul ignore next */
        cov_2dmwe8wd9u().f[11]++;
        cov_2dmwe8wd9u().s[69]++;
        return fetch(`${this.baseUrl}/jobs/${jobId}/apply`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${accessToken}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            message:
            /* istanbul ignore next */
            (cov_2dmwe8wd9u().b[26][0]++, applicationData.message) ||
            /* istanbul ignore next */
            (cov_2dmwe8wd9u().b[26][1]++, 'I am interested in this position and would love to discuss my qualifications further.'),
            resume_url: applicationData.resume_url
          })
        });
      }));
      /* istanbul ignore next */
      cov_2dmwe8wd9u().s[70]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_2dmwe8wd9u().b[27][0]++;
        const errorData =
        /* istanbul ignore next */
        (cov_2dmwe8wd9u().s[71]++, await response.json().catch(() => {
          /* istanbul ignore next */
          cov_2dmwe8wd9u().f[12]++;
          cov_2dmwe8wd9u().s[72]++;
          return {};
        }));
        /* istanbul ignore next */
        cov_2dmwe8wd9u().s[73]++;
        throw new Error(`Wellfound job application failed: ${response.status} - ${
        /* istanbul ignore next */
        (cov_2dmwe8wd9u().b[28][0]++, errorData.error) ||
        /* istanbul ignore next */
        (cov_2dmwe8wd9u().b[28][1]++, response.statusText)}`);
      } else
      /* istanbul ignore next */
      {
        cov_2dmwe8wd9u().b[27][1]++;
      }
      const result =
      /* istanbul ignore next */
      (cov_2dmwe8wd9u().s[74]++, await response.json());
      /* istanbul ignore next */
      cov_2dmwe8wd9u().s[75]++;
      return {
        success: true,
        message: `Application submitted successfully. Application ID: ${result.id}`
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2dmwe8wd9u().s[76]++;
      console.error('Wellfound job application error:', error);
      /* istanbul ignore next */
      cov_2dmwe8wd9u().s[77]++;
      return {
        success: false,
        message: `Application failed: ${error}`
      };
    }
  }
  /**
   * Get application status for a job
   */
  async getApplicationStatus(userId, jobId) {
    /* istanbul ignore next */
    cov_2dmwe8wd9u().f[13]++;
    cov_2dmwe8wd9u().s[78]++;
    if (!this.azureAdConfig) {
      /* istanbul ignore next */
      cov_2dmwe8wd9u().b[29][0]++;
      cov_2dmwe8wd9u().s[79]++;
      throw new Error('Wellfound portal not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_2dmwe8wd9u().b[29][1]++;
    }
    const accessToken =
    /* istanbul ignore next */
    (cov_2dmwe8wd9u().s[80]++, await this.tokenService.getValidAccessToken('wellfound', userId, this.azureAdConfig));
    /* istanbul ignore next */
    cov_2dmwe8wd9u().s[81]++;
    if (!accessToken) {
      /* istanbul ignore next */
      cov_2dmwe8wd9u().b[30][0]++;
      cov_2dmwe8wd9u().s[82]++;
      return 'discovered';
    } else
    /* istanbul ignore next */
    {
      cov_2dmwe8wd9u().b[30][1]++;
    }
    cov_2dmwe8wd9u().s[83]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_2dmwe8wd9u().s[84]++, await this.rateLimiter.schedule(async () => {
        /* istanbul ignore next */
        cov_2dmwe8wd9u().f[14]++;
        cov_2dmwe8wd9u().s[85]++;
        return fetch(`${this.baseUrl}/jobs/${jobId}/applications/mine`, {
          headers: {
            'Authorization': `Bearer ${accessToken}`,
            'Content-Type': 'application/json'
          }
        });
      }));
      /* istanbul ignore next */
      cov_2dmwe8wd9u().s[86]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_2dmwe8wd9u().b[31][0]++;
        cov_2dmwe8wd9u().s[87]++;
        return 'discovered';
      } else
      /* istanbul ignore next */
      {
        cov_2dmwe8wd9u().b[31][1]++;
      }
      const data =
      /* istanbul ignore next */
      (cov_2dmwe8wd9u().s[88]++, await response.json());
      /* istanbul ignore next */
      cov_2dmwe8wd9u().s[89]++;
      return this.mapWellfoundStatusToApplicationStatus(data.status);
    } catch (error) {
      /* istanbul ignore next */
      cov_2dmwe8wd9u().s[90]++;
      console.error('Wellfound application status error:', error);
      /* istanbul ignore next */
      cov_2dmwe8wd9u().s[91]++;
      return 'discovered';
    }
  }
  /**
   * Get detailed job information
   */
  async getJobDetails(userId, jobId) {
    /* istanbul ignore next */
    cov_2dmwe8wd9u().f[15]++;
    cov_2dmwe8wd9u().s[92]++;
    if (!this.azureAdConfig) {
      /* istanbul ignore next */
      cov_2dmwe8wd9u().b[32][0]++;
      cov_2dmwe8wd9u().s[93]++;
      throw new Error('Wellfound portal not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_2dmwe8wd9u().b[32][1]++;
    }
    const accessToken =
    /* istanbul ignore next */
    (cov_2dmwe8wd9u().s[94]++, await this.tokenService.getValidAccessToken('wellfound', userId, this.azureAdConfig));
    /* istanbul ignore next */
    cov_2dmwe8wd9u().s[95]++;
    if (!accessToken) {
      /* istanbul ignore next */
      cov_2dmwe8wd9u().b[33][0]++;
      cov_2dmwe8wd9u().s[96]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_2dmwe8wd9u().b[33][1]++;
    }
    cov_2dmwe8wd9u().s[97]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_2dmwe8wd9u().s[98]++, await this.rateLimiter.schedule(async () => {
        /* istanbul ignore next */
        cov_2dmwe8wd9u().f[16]++;
        cov_2dmwe8wd9u().s[99]++;
        return fetch(`${this.baseUrl}/jobs/${jobId}`, {
          headers: {
            'Authorization': `Bearer ${accessToken}`,
            'Content-Type': 'application/json'
          }
        });
      }));
      /* istanbul ignore next */
      cov_2dmwe8wd9u().s[100]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_2dmwe8wd9u().b[34][0]++;
        cov_2dmwe8wd9u().s[101]++;
        throw new Error(`Wellfound job details fetch failed: ${response.status}`);
      } else
      /* istanbul ignore next */
      {
        cov_2dmwe8wd9u().b[34][1]++;
      }
      cov_2dmwe8wd9u().s[102]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_2dmwe8wd9u().s[103]++;
      console.error('Wellfound job details error:', error);
      /* istanbul ignore next */
      cov_2dmwe8wd9u().s[104]++;
      return null;
    }
  }
  /**
   * Check if user is connected to Wellfound
   */
  async isConnected(userId) {
    /* istanbul ignore next */
    cov_2dmwe8wd9u().f[17]++;
    const tokens =
    /* istanbul ignore next */
    (cov_2dmwe8wd9u().s[105]++, await this.tokenService.getTokens('wellfound', userId));
    /* istanbul ignore next */
    cov_2dmwe8wd9u().s[106]++;
    return /* istanbul ignore next */(cov_2dmwe8wd9u().b[35][0]++, tokens !== null) &&
    /* istanbul ignore next */
    (cov_2dmwe8wd9u().b[35][1]++, tokens.expiresAt > Date.now());
  }
  /**
   * Disconnect user from Wellfound
   */
  async disconnect(userId) {
    /* istanbul ignore next */
    cov_2dmwe8wd9u().f[18]++;
    cov_2dmwe8wd9u().s[107]++;
    await this.tokenService.deleteTokens('wellfound', userId);
  }
  // Helper methods for mapping between our types and Wellfound types
  mapJobTypeToWellfound(jobType) {
    /* istanbul ignore next */
    cov_2dmwe8wd9u().f[19]++;
    cov_2dmwe8wd9u().s[108]++;
    switch (jobType) {
      case 'full-time':
        /* istanbul ignore next */
        cov_2dmwe8wd9u().b[36][0]++;
        cov_2dmwe8wd9u().s[109]++;
        return 'full-time';
      case 'part-time':
        /* istanbul ignore next */
        cov_2dmwe8wd9u().b[36][1]++;
        cov_2dmwe8wd9u().s[110]++;
        return 'part-time';
      case 'contract':
        /* istanbul ignore next */
        cov_2dmwe8wd9u().b[36][2]++;
        cov_2dmwe8wd9u().s[111]++;
        return 'contract';
      case 'internship':
        /* istanbul ignore next */
        cov_2dmwe8wd9u().b[36][3]++;
        cov_2dmwe8wd9u().s[112]++;
        return 'internship';
      default:
        /* istanbul ignore next */
        cov_2dmwe8wd9u().b[36][4]++;
        cov_2dmwe8wd9u().s[113]++;
        return 'full-time';
    }
  }
  mapExperienceLevelToWellfound(level) {
    /* istanbul ignore next */
    cov_2dmwe8wd9u().f[20]++;
    cov_2dmwe8wd9u().s[114]++;
    switch (level) {
      case 'entry-level':
        /* istanbul ignore next */
        cov_2dmwe8wd9u().b[37][0]++;
        cov_2dmwe8wd9u().s[115]++;
        return 'junior';
      case 'associate':
        /* istanbul ignore next */
        cov_2dmwe8wd9u().b[37][1]++;
        cov_2dmwe8wd9u().s[116]++;
        return 'mid';
      case 'mid-senior':
        /* istanbul ignore next */
        cov_2dmwe8wd9u().b[37][2]++;
        cov_2dmwe8wd9u().s[117]++;
        return 'senior';
      case 'director':
        /* istanbul ignore next */
        cov_2dmwe8wd9u().b[37][3]++;
        cov_2dmwe8wd9u().s[118]++;
        return 'lead';
      case 'executive':
        /* istanbul ignore next */
        cov_2dmwe8wd9u().b[37][4]++;
        cov_2dmwe8wd9u().s[119]++;
        return 'c-level';
      default:
        /* istanbul ignore next */
        cov_2dmwe8wd9u().b[37][5]++;
        cov_2dmwe8wd9u().s[120]++;
        return 'mid';
    }
  }
  mapWellfoundStatusToApplicationStatus(wellfoundStatus) {
    /* istanbul ignore next */
    cov_2dmwe8wd9u().f[21]++;
    cov_2dmwe8wd9u().s[121]++;
    switch (
    /* istanbul ignore next */
    (cov_2dmwe8wd9u().b[40][0]++, wellfoundStatus === null) ||
    /* istanbul ignore next */
    (cov_2dmwe8wd9u().b[40][1]++, wellfoundStatus === void 0) ?
    /* istanbul ignore next */
    (cov_2dmwe8wd9u().b[39][0]++, void 0) :
    /* istanbul ignore next */
    (cov_2dmwe8wd9u().b[39][1]++, wellfoundStatus.toLowerCase())) {
      case 'applied':
        /* istanbul ignore next */
        cov_2dmwe8wd9u().b[38][0]++;
        cov_2dmwe8wd9u().s[122]++;
        return 'applied';
      case 'viewed':
        /* istanbul ignore next */
        cov_2dmwe8wd9u().b[38][1]++;
        cov_2dmwe8wd9u().s[123]++;
        return 'application_viewed';
      case 'interviewing':
        /* istanbul ignore next */
        cov_2dmwe8wd9u().b[38][2]++;
        cov_2dmwe8wd9u().s[124]++;
        return 'interview_request';
      case 'hired':
        /* istanbul ignore next */
        cov_2dmwe8wd9u().b[38][3]++;
        cov_2dmwe8wd9u().s[125]++;
        return 'interview_request';
      // Map hired to interview_request as closest match
      case 'rejected':
        /* istanbul ignore next */
        cov_2dmwe8wd9u().b[38][4]++;
        cov_2dmwe8wd9u().s[126]++;
        return 'rejected';
      case 'withdrawn':
        /* istanbul ignore next */
        cov_2dmwe8wd9u().b[38][5]++;
        cov_2dmwe8wd9u().s[127]++;
        return 'withdrawn';
      default:
        /* istanbul ignore next */
        cov_2dmwe8wd9u().b[38][6]++;
        cov_2dmwe8wd9u().s[128]++;
        return 'discovered';
    }
  }
  transformWellfoundJobsToJobListings(wellfoundJobs) {
    /* istanbul ignore next */
    cov_2dmwe8wd9u().f[22]++;
    cov_2dmwe8wd9u().s[129]++;
    return wellfoundJobs.map(job => {
      /* istanbul ignore next */
      cov_2dmwe8wd9u().f[23]++;
      var _a;
      const salaryInfo =
      /* istanbul ignore next */
      (cov_2dmwe8wd9u().s[130]++, this.buildSalaryInfo(job));
      /* istanbul ignore next */
      cov_2dmwe8wd9u().s[131]++;
      return {
        id: job.id.toString(),
        title: job.title,
        company: job.company.name,
        location:
        /* istanbul ignore next */
        (cov_2dmwe8wd9u().b[41][0]++,
        /* istanbul ignore next */
        (cov_2dmwe8wd9u().b[43][0]++, (_a = job.location) === null) ||
        /* istanbul ignore next */
        (cov_2dmwe8wd9u().b[43][1]++, _a === void 0) ?
        /* istanbul ignore next */
        (cov_2dmwe8wd9u().b[42][0]++, void 0) :
        /* istanbul ignore next */
        (cov_2dmwe8wd9u().b[42][1]++, _a.name)) ||
        /* istanbul ignore next */
        (cov_2dmwe8wd9u().b[41][1]++, job.company.location) ||
        /* istanbul ignore next */
        (cov_2dmwe8wd9u().b[41][2]++, 'Remote'),
        salary: salaryInfo,
        jobType: this.mapWellfoundJobTypeToOur(job.job_type),
        workArrangement: job.remote ?
        /* istanbul ignore next */
        (cov_2dmwe8wd9u().b[44][0]++, 'remote') :
        /* istanbul ignore next */
        (cov_2dmwe8wd9u().b[44][1]++, 'onsite'),
        description:
        /* istanbul ignore next */
        (cov_2dmwe8wd9u().b[45][0]++, job.description) ||
        /* istanbul ignore next */
        (cov_2dmwe8wd9u().b[45][1]++, 'No description available'),
        requirements: [],
        // Would need to parse from description
        responsibilities: [],
        // Would need to parse from description
        benefits: undefined,
        postedDate: job.created_at,
        applicationDeadline: undefined,
        jobPortal: {
          name: 'AngelList',
          // Wellfound was formerly AngelList
          logo: '/icons/angellist.svg',
          website: 'https://wellfound.com',
          supportsAutoApply: true
        },
        originalUrl:
        /* istanbul ignore next */
        (cov_2dmwe8wd9u().b[46][0]++, job.apply_url) ||
        /* istanbul ignore next */
        (cov_2dmwe8wd9u().b[46][1]++, `https://wellfound.com/jobs/${job.id}`),
        companyLogo: job.company.logo_url,
        relevancyScore: undefined,
        matchedSkills: [],
        missingSkills: [],
        applicationStatus: 'discovered',
        createdAt: job.created_at,
        updatedAt: job.updated_at
      };
    });
  }
  buildSalaryInfo(job) {
    /* istanbul ignore next */
    cov_2dmwe8wd9u().f[24]++;
    cov_2dmwe8wd9u().s[132]++;
    if (
    /* istanbul ignore next */
    (cov_2dmwe8wd9u().b[48][0]++, job.salary_min) ||
    /* istanbul ignore next */
    (cov_2dmwe8wd9u().b[48][1]++, job.salary_max)) {
      /* istanbul ignore next */
      cov_2dmwe8wd9u().b[47][0]++;
      cov_2dmwe8wd9u().s[133]++;
      return {
        min: job.salary_min,
        max: job.salary_max,
        currency: 'USD',
        // Wellfound typically uses USD
        period: 'yearly'
      };
    } else
    /* istanbul ignore next */
    {
      cov_2dmwe8wd9u().b[47][1]++;
    }
    cov_2dmwe8wd9u().s[134]++;
    return undefined;
  }
  mapWellfoundJobTypeToOur(jobType) {
    /* istanbul ignore next */
    cov_2dmwe8wd9u().f[25]++;
    cov_2dmwe8wd9u().s[135]++;
    switch (
    /* istanbul ignore next */
    (cov_2dmwe8wd9u().b[51][0]++, jobType === null) ||
    /* istanbul ignore next */
    (cov_2dmwe8wd9u().b[51][1]++, jobType === void 0) ?
    /* istanbul ignore next */
    (cov_2dmwe8wd9u().b[50][0]++, void 0) :
    /* istanbul ignore next */
    (cov_2dmwe8wd9u().b[50][1]++, jobType.toLowerCase())) {
      case 'full-time':
        /* istanbul ignore next */
        cov_2dmwe8wd9u().b[49][0]++;
        cov_2dmwe8wd9u().s[136]++;
        return 'full-time';
      case 'part-time':
        /* istanbul ignore next */
        cov_2dmwe8wd9u().b[49][1]++;
        cov_2dmwe8wd9u().s[137]++;
        return 'part-time';
      case 'contract':
        /* istanbul ignore next */
        cov_2dmwe8wd9u().b[49][2]++;
        cov_2dmwe8wd9u().s[138]++;
        return 'contract';
      case 'internship':
        /* istanbul ignore next */
        cov_2dmwe8wd9u().b[49][3]++;
        cov_2dmwe8wd9u().s[139]++;
        return 'internship';
      default:
        /* istanbul ignore next */
        cov_2dmwe8wd9u().b[49][4]++;
        cov_2dmwe8wd9u().s[140]++;
        return 'full-time';
    }
  }
  /**
   * Get company details
   */
  async getCompanyDetails(userId, companyId) {
    /* istanbul ignore next */
    cov_2dmwe8wd9u().f[26]++;
    cov_2dmwe8wd9u().s[141]++;
    if (!this.azureAdConfig) {
      /* istanbul ignore next */
      cov_2dmwe8wd9u().b[52][0]++;
      cov_2dmwe8wd9u().s[142]++;
      throw new Error('Wellfound portal not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_2dmwe8wd9u().b[52][1]++;
    }
    const accessToken =
    /* istanbul ignore next */
    (cov_2dmwe8wd9u().s[143]++, await this.tokenService.getValidAccessToken('wellfound', userId, this.azureAdConfig));
    /* istanbul ignore next */
    cov_2dmwe8wd9u().s[144]++;
    if (!accessToken) {
      /* istanbul ignore next */
      cov_2dmwe8wd9u().b[53][0]++;
      cov_2dmwe8wd9u().s[145]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_2dmwe8wd9u().b[53][1]++;
    }
    cov_2dmwe8wd9u().s[146]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_2dmwe8wd9u().s[147]++, await this.rateLimiter.schedule(async () => {
        /* istanbul ignore next */
        cov_2dmwe8wd9u().f[27]++;
        cov_2dmwe8wd9u().s[148]++;
        return fetch(`${this.baseUrl}/companies/${companyId}`, {
          headers: {
            'Authorization': `Bearer ${accessToken}`,
            'Content-Type': 'application/json'
          }
        });
      }));
      /* istanbul ignore next */
      cov_2dmwe8wd9u().s[149]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_2dmwe8wd9u().b[54][0]++;
        cov_2dmwe8wd9u().s[150]++;
        throw new Error(`Wellfound company details fetch failed: ${response.status}`);
      } else
      /* istanbul ignore next */
      {
        cov_2dmwe8wd9u().b[54][1]++;
      }
      cov_2dmwe8wd9u().s[151]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_2dmwe8wd9u().s[152]++;
      console.error('Wellfound company details error:', error);
      /* istanbul ignore next */
      cov_2dmwe8wd9u().s[153]++;
      return null;
    }
  }
  /**
   * Get user's applications history
   */
  async getApplicationHistory(userId) {
    /* istanbul ignore next */
    cov_2dmwe8wd9u().f[28]++;
    cov_2dmwe8wd9u().s[154]++;
    if (!this.azureAdConfig) {
      /* istanbul ignore next */
      cov_2dmwe8wd9u().b[55][0]++;
      cov_2dmwe8wd9u().s[155]++;
      throw new Error('Wellfound portal not initialized');
    } else
    /* istanbul ignore next */
    {
      cov_2dmwe8wd9u().b[55][1]++;
    }
    const accessToken =
    /* istanbul ignore next */
    (cov_2dmwe8wd9u().s[156]++, await this.tokenService.getValidAccessToken('wellfound', userId, this.azureAdConfig));
    /* istanbul ignore next */
    cov_2dmwe8wd9u().s[157]++;
    if (!accessToken) {
      /* istanbul ignore next */
      cov_2dmwe8wd9u().b[56][0]++;
      cov_2dmwe8wd9u().s[158]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_2dmwe8wd9u().b[56][1]++;
    }
    cov_2dmwe8wd9u().s[159]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_2dmwe8wd9u().s[160]++, await this.rateLimiter.schedule(async () => {
        /* istanbul ignore next */
        cov_2dmwe8wd9u().f[29]++;
        cov_2dmwe8wd9u().s[161]++;
        return fetch(`${this.baseUrl}/me/applications`, {
          headers: {
            'Authorization': `Bearer ${accessToken}`,
            'Content-Type': 'application/json'
          }
        });
      }));
      /* istanbul ignore next */
      cov_2dmwe8wd9u().s[162]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_2dmwe8wd9u().b[57][0]++;
        cov_2dmwe8wd9u().s[163]++;
        throw new Error(`Wellfound applications fetch failed: ${response.status}`);
      } else
      /* istanbul ignore next */
      {
        cov_2dmwe8wd9u().b[57][1]++;
      }
      const data =
      /* istanbul ignore next */
      (cov_2dmwe8wd9u().s[164]++, await response.json());
      /* istanbul ignore next */
      cov_2dmwe8wd9u().s[165]++;
      return /* istanbul ignore next */(cov_2dmwe8wd9u().b[58][0]++, data.applications) ||
      /* istanbul ignore next */
      (cov_2dmwe8wd9u().b[58][1]++, []);
    } catch (error) {
      /* istanbul ignore next */
      cov_2dmwe8wd9u().s[166]++;
      console.error('Wellfound applications history error:', error);
      /* istanbul ignore next */
      cov_2dmwe8wd9u().s[167]++;
      return [];
    }
  }
}
/* istanbul ignore next */
cov_2dmwe8wd9u().s[168]++;
exports.WellfoundPortal = WellfoundPortal;
// Singleton instance
let wellfoundPortalInstance =
/* istanbul ignore next */
(cov_2dmwe8wd9u().s[169]++, null);
function getWellfoundPortal() {
  /* istanbul ignore next */
  cov_2dmwe8wd9u().f[30]++;
  cov_2dmwe8wd9u().s[170]++;
  if (!wellfoundPortalInstance) {
    /* istanbul ignore next */
    cov_2dmwe8wd9u().b[59][0]++;
    cov_2dmwe8wd9u().s[171]++;
    wellfoundPortalInstance = new WellfoundPortal();
  } else
  /* istanbul ignore next */
  {
    cov_2dmwe8wd9u().b[59][1]++;
  }
  cov_2dmwe8wd9u().s[172]++;
  return wellfoundPortalInstance;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,