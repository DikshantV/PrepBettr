{"version":3,"names":["cov_1sjhrvj504","actualCoverage","SANDBOX_PLAN_IDS","s","INDIVIDUAL_MONTHLY","b","process","env","PAYPAL_INDIVIDUAL_MONTHLY_PLAN_ID","INDIVIDUAL_YEARLY","PAYPAL_INDIVIDUAL_YEARLY_PLAN_ID","ENTERPRISE_MONTHLY","PAYPAL_ENTERPRISE_MONTHLY_PLAN_ID","ENTERPRISE_YEARLY","PAYPAL_ENTERPRISE_YEARLY_PLAN_ID","SANDBOX_TEST_ACCOUNTS","BUSINESS","email","PAYPAL_SANDBOX_BUSINESS_EMAIL","password","PAYPAL_SANDBOX_BUSINESS_PASSWORD","BUYER_US","PAYPAL_SANDBOX_BUYER_US_EMAIL","PAYPAL_SANDBOX_BUYER_US_PASSWORD","country","currency","BUYER_EU","PAYPAL_SANDBOX_BUYER_EU_EMAIL","PAYPAL_SANDBOX_BUYER_EU_PASSWORD","SANDBOX_WEBHOOK_CONFIG","webhookId","PAYPAL_SANDBOX_WEBHOOK_ID","url","PAYPAL_SANDBOX_WEBHOOK_URL","events","TEST_SCENARIOS","HAPPY_PATH","name","plans","buyer","expectedFlow","INTERNATIONAL","PLAN_UPGRADES","upgrades","from","to","PLAN_DOWNGRADES","downgrades","CANCELLATION","cancellationTypes","PAYMENT_FAILURES","failureTypes","PayPalSandboxConfig","constructor","f","mode","PAYPAL_MODE","clientId","getSandboxClientId","clientSecret","getSandboxClientSecret","webhookUrl","PAYPAL_CLIENT_ID","PAYPAL_SANDBOX_CLIENT_ID","PAYPAL_CLIENT_SECRET","PAYPAL_SANDBOX_CLIENT_SECRET","getPlanId","planKey","getTestAccount","accountType","validateConfig","errors","push","console","warn","Object","entries","forEach","key","value","includes","length","Error","join","isTestEnvironment","NODE_ENV","getReturnUrls","baseUrl","NEXT_PUBLIC_APP_URL","return_url","cancel_url","sandboxConfig","testHelpers","generateTestUser","account","Date","now","generateTestSubscription","user","planId","returnUrls","plan_id","metadata","test","createdAt","toISOString","getWebhookEventTemplate","eventType","subscriptionId","id","Math","random","toString","substring","event_type","resource_type","summary","toLowerCase","resource","status","getStatusFromEvent","status_update_time","create_time","event_version","statusMap"],"sources":["paypal-sandbox-config.js"],"sourcesContent":["// lib/paypal-sandbox-config.js\n\n/**\n * PayPal Sandbox Configuration\n * Contains sandbox-specific settings, plan IDs, and test account information\n */\n\n// Sandbox plan IDs (to be updated when plans are created in PayPal Dashboard)\nexport const SANDBOX_PLAN_IDS = {\n  INDIVIDUAL_MONTHLY: process.env.PAYPAL_INDIVIDUAL_MONTHLY_PLAN_ID || 'P-5ML4271244454362WXNWU5NQ',\n  INDIVIDUAL_YEARLY: process.env.PAYPAL_INDIVIDUAL_YEARLY_PLAN_ID || 'P-9JS89134P6442442WXNWU6UQ',\n  ENTERPRISE_MONTHLY: process.env.PAYPAL_ENTERPRISE_MONTHLY_PLAN_ID || 'P-1ML4271244454362WXNWU7NQ',\n  ENTERPRISE_YEARLY: process.env.PAYPAL_ENTERPRISE_YEARLY_PLAN_ID || 'P-4JS89134P6442442WXNWU8UQ'\n};\n\n// Sandbox test accounts for automated testing\nexport const SANDBOX_TEST_ACCOUNTS = {\n  BUSINESS: {\n    email: process.env.PAYPAL_SANDBOX_BUSINESS_EMAIL || 'sb-business@example.com',\n    password: process.env.PAYPAL_SANDBOX_BUSINESS_PASSWORD || 'testpass123'\n  },\n  BUYER_US: {\n    email: process.env.PAYPAL_SANDBOX_BUYER_US_EMAIL || 'sb-buyer-us@example.com',\n    password: process.env.PAYPAL_SANDBOX_BUYER_US_PASSWORD || 'testpass123',\n    country: 'US',\n    currency: 'USD'\n  },\n  BUYER_EU: {\n    email: process.env.PAYPAL_SANDBOX_BUYER_EU_EMAIL || 'sb-buyer-eu@example.com', \n    password: process.env.PAYPAL_SANDBOX_BUYER_EU_PASSWORD || 'testpass123',\n    country: 'GB',\n    currency: 'USD' // Still using USD for consistency\n  }\n};\n\n// Webhook configuration for sandbox\nexport const SANDBOX_WEBHOOK_CONFIG = {\n  webhookId: process.env.PAYPAL_SANDBOX_WEBHOOK_ID || '',\n  url: process.env.PAYPAL_SANDBOX_WEBHOOK_URL || 'https://your-ngrok-url.ngrok.io/api/webhooks/paypal',\n  events: [\n    'BILLING.SUBSCRIPTION.CREATED',\n    'BILLING.SUBSCRIPTION.ACTIVATED', \n    'BILLING.SUBSCRIPTION.UPDATED',\n    'BILLING.SUBSCRIPTION.CANCELLED',\n    'BILLING.SUBSCRIPTION.SUSPENDED',\n    'BILLING.SUBSCRIPTION.RE-ACTIVATED',\n    'BILLING.SUBSCRIPTION.EXPIRED',\n    'PAYMENT.SALE.COMPLETED',\n    'PAYMENT.SALE.DENIED',\n    'PAYMENT.CAPTURE.COMPLETED',\n    'PAYMENT.CAPTURE.DENIED',\n    'PAYMENT.CAPTURE.REFUNDED'\n  ]\n};\n\n// Test scenarios configuration\nexport const TEST_SCENARIOS = {\n  HAPPY_PATH: {\n    name: 'Happy Path Subscription Flow',\n    plans: ['INDIVIDUAL_MONTHLY', 'INDIVIDUAL_YEARLY', 'ENTERPRISE_MONTHLY', 'ENTERPRISE_YEARLY'],\n    buyer: 'BUYER_US',\n    expectedFlow: ['created', 'approval_pending', 'active']\n  },\n  INTERNATIONAL: {\n    name: 'International User Subscription',\n    plans: ['INDIVIDUAL_YEARLY', 'ENTERPRISE_YEARLY'],\n    buyer: 'BUYER_EU',\n    expectedFlow: ['created', 'approval_pending', 'active']\n  },\n  PLAN_UPGRADES: {\n    name: 'Plan Upgrade Scenarios',\n    upgrades: [\n      { from: 'INDIVIDUAL_MONTHLY', to: 'ENTERPRISE_MONTHLY' },\n      { from: 'INDIVIDUAL_YEARLY', to: 'ENTERPRISE_YEARLY' },\n      { from: 'INDIVIDUAL_MONTHLY', to: 'INDIVIDUAL_YEARLY' },\n      { from: 'ENTERPRISE_MONTHLY', to: 'ENTERPRISE_YEARLY' }\n    ],\n    buyer: 'BUYER_US'\n  },\n  PLAN_DOWNGRADES: {\n    name: 'Plan Downgrade Scenarios', \n    downgrades: [\n      { from: 'ENTERPRISE_MONTHLY', to: 'INDIVIDUAL_MONTHLY' },\n      { from: 'ENTERPRISE_YEARLY', to: 'INDIVIDUAL_YEARLY' },\n      { from: 'INDIVIDUAL_YEARLY', to: 'INDIVIDUAL_MONTHLY' },\n      { from: 'ENTERPRISE_YEARLY', to: 'ENTERPRISE_MONTHLY' }\n    ],\n    buyer: 'BUYER_US'\n  },\n  CANCELLATION: {\n    name: 'Subscription Cancellation',\n    cancellationTypes: ['immediate', 'end_of_period'],\n    plans: ['INDIVIDUAL_MONTHLY', 'ENTERPRISE_YEARLY'],\n    buyer: 'BUYER_US'\n  },\n  PAYMENT_FAILURES: {\n    name: 'Payment Failure Scenarios',\n    failureTypes: ['insufficient_funds', 'invalid_payment_method', 'expired_card'],\n    plans: ['INDIVIDUAL_MONTHLY', 'ENTERPRISE_MONTHLY'],\n    buyer: 'BUYER_US'\n  }\n};\n\n// Environment configuration helper\nexport class PayPalSandboxConfig {\n  constructor() {\n    this.mode = process.env.PAYPAL_MODE || 'sandbox';\n    this.clientId = this.getSandboxClientId();\n    this.clientSecret = this.getSandboxClientSecret();\n    this.webhookId = SANDBOX_WEBHOOK_CONFIG.webhookId;\n    this.webhookUrl = SANDBOX_WEBHOOK_CONFIG.url;\n  }\n\n  getSandboxClientId() {\n    if (this.mode === 'production') {\n      return process.env.PAYPAL_CLIENT_ID;\n    }\n    return process.env.PAYPAL_SANDBOX_CLIENT_ID || process.env.PAYPAL_CLIENT_ID;\n  }\n\n  getSandboxClientSecret() {\n    if (this.mode === 'production') {\n      return process.env.PAYPAL_CLIENT_SECRET;\n    }\n    return process.env.PAYPAL_SANDBOX_CLIENT_SECRET || process.env.PAYPAL_CLIENT_SECRET;\n  }\n\n  getPlanId(planKey) {\n    return SANDBOX_PLAN_IDS[planKey] || null;\n  }\n\n  getTestAccount(accountType) {\n    return SANDBOX_TEST_ACCOUNTS[accountType] || null;\n  }\n\n  validateConfig() {\n    const errors = [];\n\n    if (!this.clientId) {\n      errors.push('PayPal sandbox client ID is missing');\n    }\n\n    if (!this.clientSecret) {\n      errors.push('PayPal sandbox client secret is missing'); \n    }\n\n    if (!this.webhookId && this.mode === 'sandbox') {\n      console.warn('PayPal sandbox webhook ID is missing - webhook testing will be limited');\n    }\n\n    // Validate plan IDs\n    Object.entries(SANDBOX_PLAN_IDS).forEach(([key, value]) => {\n      if (!value || value.includes('example')) {\n        errors.push(`PayPal plan ID for ${key} needs to be configured`);\n      }\n    });\n\n    if (errors.length > 0) {\n      throw new Error(`PayPal sandbox configuration errors:\\n${errors.join('\\n')}`);\n    }\n\n    return true;\n  }\n\n  isTestEnvironment() {\n    return this.mode === 'sandbox' || process.env.NODE_ENV === 'test';\n  }\n\n  getReturnUrls(baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000') {\n    return {\n      return_url: `${baseUrl}/subscription/success`,\n      cancel_url: `${baseUrl}/subscription/cancel`\n    };\n  }\n}\n\n// Export singleton instance\nexport const sandboxConfig = new PayPalSandboxConfig();\n\n// Helper functions for testing\nexport const testHelpers = {\n  // Generate test user data\n  generateTestUser(accountType = 'BUYER_US') {\n    const account = SANDBOX_TEST_ACCOUNTS[accountType];\n    return {\n      email: account.email,\n      name: `Test User ${Date.now()}`,\n      country: account.country,\n      currency: account.currency\n    };\n  },\n\n  // Generate test subscription data\n  generateTestSubscription(planKey = 'INDIVIDUAL_MONTHLY', accountType = 'BUYER_US') {\n    const user = this.generateTestUser(accountType);\n    const planId = sandboxConfig.getPlanId(planKey);\n    const returnUrls = sandboxConfig.getReturnUrls();\n\n    return {\n      plan_id: planId,\n      user,\n      ...returnUrls,\n      metadata: {\n        test: true,\n        planKey,\n        accountType,\n        createdAt: new Date().toISOString()\n      }\n    };\n  },\n\n  // Get webhook event template\n  getWebhookEventTemplate(eventType, subscriptionId) {\n    return {\n      id: `WH-${Date.now()}-${Math.random().toString(36).substring(7)}`,\n      event_type: eventType,\n      resource_type: 'subscription',\n      summary: `Subscription ${eventType.toLowerCase()}`,\n      resource: {\n        id: subscriptionId,\n        status: this.getStatusFromEvent(eventType),\n        status_update_time: new Date().toISOString()\n      },\n      create_time: new Date().toISOString(),\n      event_version: '1.0'\n    };\n  },\n\n  getStatusFromEvent(eventType) {\n    const statusMap = {\n      'BILLING.SUBSCRIPTION.CREATED': 'APPROVAL_PENDING',\n      'BILLING.SUBSCRIPTION.ACTIVATED': 'ACTIVE',\n      'BILLING.SUBSCRIPTION.CANCELLED': 'CANCELLED', \n      'BILLING.SUBSCRIPTION.SUSPENDED': 'SUSPENDED',\n      'BILLING.SUBSCRIPTION.RE-ACTIVATED': 'ACTIVE',\n      'BILLING.SUBSCRIPTION.EXPIRED': 'EXPIRED'\n    };\n    return statusMap[eventType] || 'ACTIVE';\n  }\n};\n\nexport default sandboxConfig;"],"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","ignoreList":[]}