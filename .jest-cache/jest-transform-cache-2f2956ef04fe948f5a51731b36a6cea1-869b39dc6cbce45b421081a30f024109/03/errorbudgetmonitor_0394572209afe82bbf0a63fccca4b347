78ae45323e90c7a3b2265ac0c965cb87
"use strict";

/* istanbul ignore next */
function cov_2rey90bnga() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/services/error-budget-monitor.ts";
  var hash = "63703695a5129ddf576ba62d0bda8be232102c79";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/services/error-budget-monitor.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 36
        }
      },
      "2": {
        start: {
          line: 4,
          column: 31
        },
        end: {
          line: 4,
          column: 64
        }
      },
      "3": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 19,
          column: 10
        }
      },
      "4": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 24,
          column: 9
        }
      },
      "5": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 81
        }
      },
      "6": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 50
        }
      },
      "7": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 49,
          column: 9
        }
      },
      "8": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 41,
          column: 15
        }
      },
      "9": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 104
        }
      },
      "10": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 64
        }
      },
      "11": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 65
        }
      },
      "12": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "13": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 118
        }
      },
      "14": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 63
        }
      },
      "15": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 21
        }
      },
      "16": {
        start: {
          line: 67,
          column: 29
        },
        end: {
          line: 67,
          column: 62
        }
      },
      "17": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 70,
          column: 9
        }
      },
      "18": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 86
        }
      },
      "19": {
        start: {
          line: 71,
          column: 30
        },
        end: {
          line: 71,
          column: 92
        }
      },
      "20": {
        start: {
          line: 72,
          column: 31
        },
        end: {
          line: 72,
          column: 74
        }
      },
      "21": {
        start: {
          line: 73,
          column: 28
        },
        end: {
          line: 74,
          column: 52
        }
      },
      "22": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 84,
          column: 9
        }
      },
      "23": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 81,
          column: 15
        }
      },
      "24": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 70
        }
      },
      "25": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 27
        }
      },
      "26": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 99,
          column: 11
        }
      },
      "27": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 105,
          column: 69
        }
      },
      "28": {
        start: {
          line: 111,
          column: 24
        },
        end: {
          line: 111,
          column: 26
        }
      },
      "29": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "30": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 118,
          column: 13
        }
      },
      "31": {
        start: {
          line: 114,
          column: 16
        },
        end: {
          line: 114,
          column: 80
        }
      },
      "32": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 117,
          column: 82
        }
      },
      "33": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 120,
          column: 23
        }
      },
      "34": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "35": {
        start: {
          line: 127,
          column: 32
        },
        end: {
          line: 127,
          column: 128
        }
      },
      "36": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 137,
          column: 16
        }
      },
      "37": {
        start: {
          line: 128,
          column: 45
        },
        end: {
          line: 137,
          column: 13
        }
      },
      "38": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 140,
          column: 65
        }
      },
      "39": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 22
        }
      },
      "40": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 155,
          column: 11
        }
      },
      "41": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 165,
          column: 11
        }
      },
      "42": {
        start: {
          line: 169,
          column: 0
        },
        end: {
          line: 169,
          column: 69
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 18
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 25
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 21
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        loc: {
          start: {
            line: 30,
            column: 31
          },
          end: {
            line: 50,
            column: 5
          }
        },
        line: 30
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        },
        loc: {
          start: {
            line: 54,
            column: 61
          },
          end: {
            line: 62,
            column: 5
          }
        },
        line: 54
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 66,
            column: 5
          }
        },
        loc: {
          start: {
            line: 66,
            column: 40
          },
          end: {
            line: 86,
            column: 5
          }
        },
        line: 66
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 90,
            column: 5
          }
        },
        loc: {
          start: {
            line: 90,
            column: 57
          },
          end: {
            line: 106,
            column: 5
          }
        },
        line: 90
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 110,
            column: 5
          }
        },
        loc: {
          start: {
            line: 110,
            column: 31
          },
          end: {
            line: 121,
            column: 5
          }
        },
        line: 110
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 125,
            column: 4
          },
          end: {
            line: 125,
            column: 5
          }
        },
        loc: {
          start: {
            line: 125,
            column: 56
          },
          end: {
            line: 143,
            column: 5
          }
        },
        line: 125
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 128,
            column: 35
          },
          end: {
            line: 128,
            column: 36
          }
        },
        loc: {
          start: {
            line: 128,
            column: 45
          },
          end: {
            line: 137,
            column: 13
          }
        },
        line: 128
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 147,
            column: 4
          },
          end: {
            line: 147,
            column: 5
          }
        },
        loc: {
          start: {
            line: 147,
            column: 78
          },
          end: {
            line: 156,
            column: 5
          }
        },
        line: 147
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 157,
            column: 4
          },
          end: {
            line: 157,
            column: 5
          }
        },
        loc: {
          start: {
            line: 157,
            column: 81
          },
          end: {
            line: 166,
            column: 5
          }
        },
        line: 157
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 24,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "1": {
        loc: {
          start: {
            line: 54,
            column: 37
          },
          end: {
            line: 54,
            column: 59
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 54,
            column: 57
          },
          end: {
            line: 54,
            column: 59
          }
        }],
        line: 54
      },
      "2": {
        loc: {
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "3": {
        loc: {
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "4": {
        loc: {
          start: {
            line: 125,
            column: 39
          },
          end: {
            line: 125,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 125,
            column: 52
          },
          end: {
            line: 125,
            column: 54
          }
        }],
        line: 125
      },
      "5": {
        loc: {
          start: {
            line: 147,
            column: 47
          },
          end: {
            line: 147,
            column: 66
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 147,
            column: 58
          },
          end: {
            line: 147,
            column: 66
          }
        }],
        line: 147
      },
      "6": {
        loc: {
          start: {
            line: 157,
            column: 50
          },
          end: {
            line: 157,
            column: 69
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 157,
            column: 61
          },
          end: {
            line: 157,
            column: 69
          }
        }],
        line: 157
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0, 0],
      "1": [0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0],
      "5": [0],
      "6": [0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/services/error-budget-monitor.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/services/error-budget-monitor.ts"],
      sourcesContent: ["import { azureCosmosService } from './azure-cosmos-service';\n\nexport interface ErrorEvent {\n  featureName: string;\n  errorType: 'client_error' | 'server_error' | 'performance' | 'user_experience';\n  errorMessage: string;\n  userId?: string;\n  userAgent?: string;\n  timestamp: Date;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  metadata?: Record<string, any>;\n}\n\nexport interface ErrorBudget {\n  featureName: string;\n  timeWindow: number; // in minutes\n  errorThreshold: number; // maximum allowed errors in the time window\n  currentErrors: number;\n  budgetExceeded: boolean;\n  lastReset: Date;\n}\n\nclass ErrorBudgetMonitorService {\n  private static instance: ErrorBudgetMonitorService;\n\n  // Default error budgets for our features\n  private readonly DEFAULT_BUDGETS: Record<string, Omit<ErrorBudget, 'currentErrors' | 'budgetExceeded' | 'lastReset'>> = {\n    autoApplyAzure: {\n      featureName: 'autoApplyAzure',\n      timeWindow: 60, // 1 hour\n      errorThreshold: 10, // max 10 errors per hour\n    },\n    portalIntegration: {\n      featureName: 'portalIntegration', \n      timeWindow: 60, // 1 hour\n      errorThreshold: 5, // max 5 errors per hour\n    }\n  };\n\n  static getInstance(): ErrorBudgetMonitorService {\n    if (!ErrorBudgetMonitorService.instance) {\n      ErrorBudgetMonitorService.instance = new ErrorBudgetMonitorService();\n    }\n    return ErrorBudgetMonitorService.instance;\n  }\n\n  /**\n   * Log an error event for monitoring\n   */\n  async logError(errorEvent: ErrorEvent): Promise<void> {\n    try {\n      await azureCosmosService.createErrorEvent({\n        featureName: errorEvent.featureName,\n        errorType: errorEvent.errorType,\n        errorMessage: errorEvent.errorMessage,\n        userId: errorEvent.userId,\n        userAgent: errorEvent.userAgent,\n        timestamp: errorEvent.timestamp,\n        severity: errorEvent.severity,\n        metadata: errorEvent.metadata\n      });\n\n      console.log(`Error logged for feature ${errorEvent.featureName}:`, errorEvent.errorMessage);\n      \n      // Check if error budget is exceeded after logging\n      await this.checkErrorBudget(errorEvent.featureName);\n    } catch (error) {\n      console.error('Error logging feature error:', error);\n      // Don't throw to avoid cascading errors\n    }\n  }\n\n  /**\n   * Get error count for a feature within a time window\n   */\n  async getErrorCount(featureName: string, timeWindowMinutes: number = 60): Promise<number> {\n    try {\n      return await azureCosmosService.getErrorEventCount(featureName, timeWindowMinutes);\n    } catch (error) {\n      console.error('Error getting error count:', error);\n      return 0;\n    }\n  }\n\n  /**\n   * Check if error budget is exceeded for a feature\n   */\n  async checkErrorBudget(featureName: string): Promise<ErrorBudget> {\n    const budgetConfig = this.DEFAULT_BUDGETS[featureName];\n    if (!budgetConfig) {\n      throw new Error(`No error budget configured for feature: ${featureName}`);\n    }\n\n    const currentErrors = await this.getErrorCount(featureName, budgetConfig.timeWindow);\n    const budgetExceeded = currentErrors > budgetConfig.errorThreshold;\n\n    const errorBudget: ErrorBudget = {\n      ...budgetConfig,\n      currentErrors,\n      budgetExceeded,\n      lastReset: new Date(),\n    };\n\n    // Log if budget is exceeded\n    if (budgetExceeded) {\n      console.warn(`\uD83D\uDEA8 Error budget exceeded for ${featureName}!`, {\n        currentErrors,\n        threshold: budgetConfig.errorThreshold,\n        timeWindow: budgetConfig.timeWindow,\n      });\n      \n      // Could trigger alerts, rollback, etc.\n      await this.handleBudgetExceeded(featureName, errorBudget);\n    }\n\n    return errorBudget;\n  }\n\n  /**\n   * Handle when error budget is exceeded\n   */\n  private async handleBudgetExceeded(featureName: string, errorBudget: ErrorBudget): Promise<void> {\n    // Log the budget breach\n    await azureCosmosService.createErrorBudget({\n      featureName,\n      breachedAt: new Date(),\n      errorCount: errorBudget.currentErrors,\n      threshold: errorBudget.errorThreshold,\n      timeWindow: errorBudget.timeWindow,\n      action: 'budget_exceeded_alert',\n    });\n\n    // In a real implementation, you might:\n    // - Send alerts to monitoring systems\n    // - Automatically disable the feature\n    // - Reduce rollout percentage\n    // - Trigger incident response\n    \n    console.log(`Error budget breach logged for ${featureName}`);\n  }\n\n  /**\n   * Get error budget status for all features\n   */\n  async getAllErrorBudgets(): Promise<Record<string, ErrorBudget>> {\n    const results: Record<string, ErrorBudget> = {};\n    \n    for (const featureName of Object.keys(this.DEFAULT_BUDGETS)) {\n      try {\n        results[featureName] = await this.checkErrorBudget(featureName);\n      } catch (error) {\n        console.error(`Error checking budget for ${featureName}:`, error);\n      }\n    }\n    \n    return results;\n  }\n\n  /**\n   * Get recent errors for a feature\n   */\n  async getRecentErrors(featureName: string, limitCount: number = 10): Promise<ErrorEvent[]> {\n    try {\n      const errorEvents = await azureCosmosService.getErrorEvents(featureName, 24 * 60, limitCount); // Last 24 hours\n      return errorEvents.map(event => ({\n        featureName: event.featureName,\n        errorType: event.errorType as ErrorEvent['errorType'],\n        errorMessage: event.errorMessage,\n        userId: event.userId,\n        userAgent: event.userAgent,\n        timestamp: event.timestamp,\n        severity: event.severity as ErrorEvent['severity'],\n        metadata: event.metadata\n      }));\n    } catch (error) {\n      console.error('Error getting recent errors:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Convenience methods for specific feature logging\n   */\n  async logAutoApplyAzureError(errorMessage: string, severity: ErrorEvent['severity'] = 'medium', metadata?: Record<string, any>): Promise<void> {\n    await this.logError({\n      featureName: 'autoApplyAzure',\n      errorType: 'client_error',\n      errorMessage,\n      severity,\n      metadata,\n      timestamp: new Date(),\n    });\n  }\n\n  async logPortalIntegrationError(errorMessage: string, severity: ErrorEvent['severity'] = 'medium', metadata?: Record<string, any>): Promise<void> {\n    await this.logError({\n      featureName: 'portalIntegration',\n      errorType: 'client_error',\n      errorMessage,\n      severity,\n      metadata,\n      timestamp: new Date(),\n    });\n  }\n}\n\n// Export singleton instance\nexport const errorBudgetMonitor = ErrorBudgetMonitorService.getInstance();\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "63703695a5129ddf576ba62d0bda8be232102c79"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2rey90bnga = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2rey90bnga();
cov_2rey90bnga().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2rey90bnga().s[1]++;
exports.errorBudgetMonitor = void 0;
const azure_cosmos_service_1 =
/* istanbul ignore next */
(cov_2rey90bnga().s[2]++, require("./azure-cosmos-service"));
class ErrorBudgetMonitorService {
  constructor() {
    /* istanbul ignore next */
    cov_2rey90bnga().f[0]++;
    cov_2rey90bnga().s[3]++;
    // Default error budgets for our features
    this.DEFAULT_BUDGETS = {
      autoApplyAzure: {
        featureName: 'autoApplyAzure',
        timeWindow: 60,
        // 1 hour
        errorThreshold: 10 // max 10 errors per hour
      },
      portalIntegration: {
        featureName: 'portalIntegration',
        timeWindow: 60,
        // 1 hour
        errorThreshold: 5 // max 5 errors per hour
      }
    };
  }
  static getInstance() {
    /* istanbul ignore next */
    cov_2rey90bnga().f[1]++;
    cov_2rey90bnga().s[4]++;
    if (!ErrorBudgetMonitorService.instance) {
      /* istanbul ignore next */
      cov_2rey90bnga().b[0][0]++;
      cov_2rey90bnga().s[5]++;
      ErrorBudgetMonitorService.instance = new ErrorBudgetMonitorService();
    } else
    /* istanbul ignore next */
    {
      cov_2rey90bnga().b[0][1]++;
    }
    cov_2rey90bnga().s[6]++;
    return ErrorBudgetMonitorService.instance;
  }
  /**
   * Log an error event for monitoring
   */
  async logError(errorEvent) {
    /* istanbul ignore next */
    cov_2rey90bnga().f[2]++;
    cov_2rey90bnga().s[7]++;
    try {
      /* istanbul ignore next */
      cov_2rey90bnga().s[8]++;
      await azure_cosmos_service_1.azureCosmosService.createErrorEvent({
        featureName: errorEvent.featureName,
        errorType: errorEvent.errorType,
        errorMessage: errorEvent.errorMessage,
        userId: errorEvent.userId,
        userAgent: errorEvent.userAgent,
        timestamp: errorEvent.timestamp,
        severity: errorEvent.severity,
        metadata: errorEvent.metadata
      });
      /* istanbul ignore next */
      cov_2rey90bnga().s[9]++;
      console.log(`Error logged for feature ${errorEvent.featureName}:`, errorEvent.errorMessage);
      // Check if error budget is exceeded after logging
      /* istanbul ignore next */
      cov_2rey90bnga().s[10]++;
      await this.checkErrorBudget(errorEvent.featureName);
    } catch (error) {
      /* istanbul ignore next */
      cov_2rey90bnga().s[11]++;
      console.error('Error logging feature error:', error);
      // Don't throw to avoid cascading errors
    }
  }
  /**
   * Get error count for a feature within a time window
   */
  async getErrorCount(featureName, timeWindowMinutes =
  /* istanbul ignore next */
  (cov_2rey90bnga().b[1][0]++, 60)) {
    /* istanbul ignore next */
    cov_2rey90bnga().f[3]++;
    cov_2rey90bnga().s[12]++;
    try {
      /* istanbul ignore next */
      cov_2rey90bnga().s[13]++;
      return await azure_cosmos_service_1.azureCosmosService.getErrorEventCount(featureName, timeWindowMinutes);
    } catch (error) {
      /* istanbul ignore next */
      cov_2rey90bnga().s[14]++;
      console.error('Error getting error count:', error);
      /* istanbul ignore next */
      cov_2rey90bnga().s[15]++;
      return 0;
    }
  }
  /**
   * Check if error budget is exceeded for a feature
   */
  async checkErrorBudget(featureName) {
    /* istanbul ignore next */
    cov_2rey90bnga().f[4]++;
    const budgetConfig =
    /* istanbul ignore next */
    (cov_2rey90bnga().s[16]++, this.DEFAULT_BUDGETS[featureName]);
    /* istanbul ignore next */
    cov_2rey90bnga().s[17]++;
    if (!budgetConfig) {
      /* istanbul ignore next */
      cov_2rey90bnga().b[2][0]++;
      cov_2rey90bnga().s[18]++;
      throw new Error(`No error budget configured for feature: ${featureName}`);
    } else
    /* istanbul ignore next */
    {
      cov_2rey90bnga().b[2][1]++;
    }
    const currentErrors =
    /* istanbul ignore next */
    (cov_2rey90bnga().s[19]++, await this.getErrorCount(featureName, budgetConfig.timeWindow));
    const budgetExceeded =
    /* istanbul ignore next */
    (cov_2rey90bnga().s[20]++, currentErrors > budgetConfig.errorThreshold);
    const errorBudget =
    /* istanbul ignore next */
    (cov_2rey90bnga().s[21]++, Object.assign(Object.assign({}, budgetConfig), {
      currentErrors,
      budgetExceeded,
      lastReset: new Date()
    }));
    // Log if budget is exceeded
    /* istanbul ignore next */
    cov_2rey90bnga().s[22]++;
    if (budgetExceeded) {
      /* istanbul ignore next */
      cov_2rey90bnga().b[3][0]++;
      cov_2rey90bnga().s[23]++;
      console.warn(`🚨 Error budget exceeded for ${featureName}!`, {
        currentErrors,
        threshold: budgetConfig.errorThreshold,
        timeWindow: budgetConfig.timeWindow
      });
      // Could trigger alerts, rollback, etc.
      /* istanbul ignore next */
      cov_2rey90bnga().s[24]++;
      await this.handleBudgetExceeded(featureName, errorBudget);
    } else
    /* istanbul ignore next */
    {
      cov_2rey90bnga().b[3][1]++;
    }
    cov_2rey90bnga().s[25]++;
    return errorBudget;
  }
  /**
   * Handle when error budget is exceeded
   */
  async handleBudgetExceeded(featureName, errorBudget) {
    /* istanbul ignore next */
    cov_2rey90bnga().f[5]++;
    cov_2rey90bnga().s[26]++;
    // Log the budget breach
    await azure_cosmos_service_1.azureCosmosService.createErrorBudget({
      featureName,
      breachedAt: new Date(),
      errorCount: errorBudget.currentErrors,
      threshold: errorBudget.errorThreshold,
      timeWindow: errorBudget.timeWindow,
      action: 'budget_exceeded_alert'
    });
    // In a real implementation, you might:
    // - Send alerts to monitoring systems
    // - Automatically disable the feature
    // - Reduce rollout percentage
    // - Trigger incident response
    /* istanbul ignore next */
    cov_2rey90bnga().s[27]++;
    console.log(`Error budget breach logged for ${featureName}`);
  }
  /**
   * Get error budget status for all features
   */
  async getAllErrorBudgets() {
    /* istanbul ignore next */
    cov_2rey90bnga().f[6]++;
    const results =
    /* istanbul ignore next */
    (cov_2rey90bnga().s[28]++, {});
    /* istanbul ignore next */
    cov_2rey90bnga().s[29]++;
    for (const featureName of Object.keys(this.DEFAULT_BUDGETS)) {
      /* istanbul ignore next */
      cov_2rey90bnga().s[30]++;
      try {
        /* istanbul ignore next */
        cov_2rey90bnga().s[31]++;
        results[featureName] = await this.checkErrorBudget(featureName);
      } catch (error) {
        /* istanbul ignore next */
        cov_2rey90bnga().s[32]++;
        console.error(`Error checking budget for ${featureName}:`, error);
      }
    }
    /* istanbul ignore next */
    cov_2rey90bnga().s[33]++;
    return results;
  }
  /**
   * Get recent errors for a feature
   */
  async getRecentErrors(featureName, limitCount =
  /* istanbul ignore next */
  (cov_2rey90bnga().b[4][0]++, 10)) {
    /* istanbul ignore next */
    cov_2rey90bnga().f[7]++;
    cov_2rey90bnga().s[34]++;
    try {
      const errorEvents =
      /* istanbul ignore next */
      (cov_2rey90bnga().s[35]++, await azure_cosmos_service_1.azureCosmosService.getErrorEvents(featureName, 24 * 60, limitCount)); // Last 24 hours
      /* istanbul ignore next */
      cov_2rey90bnga().s[36]++;
      return errorEvents.map(event => {
        /* istanbul ignore next */
        cov_2rey90bnga().f[8]++;
        cov_2rey90bnga().s[37]++;
        return {
          featureName: event.featureName,
          errorType: event.errorType,
          errorMessage: event.errorMessage,
          userId: event.userId,
          userAgent: event.userAgent,
          timestamp: event.timestamp,
          severity: event.severity,
          metadata: event.metadata
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2rey90bnga().s[38]++;
      console.error('Error getting recent errors:', error);
      /* istanbul ignore next */
      cov_2rey90bnga().s[39]++;
      return [];
    }
  }
  /**
   * Convenience methods for specific feature logging
   */
  async logAutoApplyAzureError(errorMessage, severity =
  /* istanbul ignore next */
  (cov_2rey90bnga().b[5][0]++, 'medium'), metadata) {
    /* istanbul ignore next */
    cov_2rey90bnga().f[9]++;
    cov_2rey90bnga().s[40]++;
    await this.logError({
      featureName: 'autoApplyAzure',
      errorType: 'client_error',
      errorMessage,
      severity,
      metadata,
      timestamp: new Date()
    });
  }
  async logPortalIntegrationError(errorMessage, severity =
  /* istanbul ignore next */
  (cov_2rey90bnga().b[6][0]++, 'medium'), metadata) {
    /* istanbul ignore next */
    cov_2rey90bnga().f[10]++;
    cov_2rey90bnga().s[41]++;
    await this.logError({
      featureName: 'portalIntegration',
      errorType: 'client_error',
      errorMessage,
      severity,
      metadata,
      timestamp: new Date()
    });
  }
}
// Export singleton instance
/* istanbul ignore next */
cov_2rey90bnga().s[42]++;
exports.errorBudgetMonitor = ErrorBudgetMonitorService.getInstance();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,