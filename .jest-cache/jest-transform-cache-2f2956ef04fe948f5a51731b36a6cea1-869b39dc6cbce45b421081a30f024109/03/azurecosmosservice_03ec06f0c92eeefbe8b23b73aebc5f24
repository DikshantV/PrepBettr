2206acce75e1496c213f595496e18566
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.azureCosmosService = void 0;
const cosmos_1 = require("@azure/cosmos");
const environment_loader_1 = require("@/lib/config/environment-loader");
class AzureCosmosService {
    constructor() {
        this.client = null;
        this.database = null;
        this.containers = new Map();
        this.initialized = false;
        // Client initialization is now deferred to initialize() method
        // to use the unified environment loader
    }
    async initialize() {
        if (this.initialized)
            return;
        try {
            // Load Cosmos DB configuration from unified environment loader
            const cosmosConfig = await (0, environment_loader_1.getCosmosDbConfig)();
            if (!cosmosConfig.connectionString) {
                throw new Error('Cosmos DB connection string not available in configuration');
            }
            // Initialize Cosmos client with configuration
            this.client = new cosmos_1.CosmosClient(cosmosConfig.connectionString);
            // Create or get database
            const { database } = await this.client.databases.createIfNotExists({
                id: cosmosConfig.database
            });
            this.database = database;
            // Define containers with their partition keys
            const containerDefinitions = [
                { id: 'users', partitionKey: '/userId' },
                { id: 'interviews', partitionKey: '/userId' },
                { id: 'feedback', partitionKey: '/userId' },
                { id: 'resumes', partitionKey: '/userId' },
                { id: 'usage', partitionKey: '/userId' },
                { id: 'jobListings', partitionKey: '/id' },
                { id: 'applications', partitionKey: '/userId' },
                { id: 'autoApplySettings', partitionKey: '/userId' },
                { id: 'automationLogs', partitionKey: '/userId' },
                { id: 'subscriptionEvents', partitionKey: '/id' },
                { id: 'dataDeletionRequests', partitionKey: '/userId' },
                { id: 'dataProtectionAuditLog', partitionKey: '/userId' },
                { id: 'notificationEvents', partitionKey: '/userId' },
                { id: 'featureErrors', partitionKey: '/featureName' },
                { id: 'errorBudgets', partitionKey: '/featureName' },
                { id: 'emailVerifications', partitionKey: '/userId' },
                { id: 'profiles', partitionKey: '/userId' }
            ];
            // Create containers
            if (!this.database) {
                throw new Error('Database initialization failed');
            }
            for (const containerDef of containerDefinitions) {
                const { container } = await this.database.containers.createIfNotExists({
                    id: containerDef.id,
                    partitionKey: containerDef.partitionKey
                });
                this.containers.set(containerDef.id, container);
            }
            this.initialized = true;
            console.log('✅ Azure Cosmos DB service initialized');
        }
        catch (error) {
            console.error('❌ Failed to initialize Azure Cosmos DB:', error);
            throw error;
        }
    }
    getContainer(containerName) {
        const container = this.containers.get(containerName);
        if (!container) {
            throw new Error(`Container ${containerName} not found. Make sure initialize() was called.`);
        }
        return container;
    }
    // Users operations
    async createUser(userData) {
        await this.initialize();
        const container = this.getContainer('users');
        const document = Object.assign(Object.assign({ id: userData.userId }, userData), { _partitionKey: userData.userId });
        const { resource } = await container.items.create(document);
        return resource.id;
    }
    async getUser(userId) {
        await this.initialize();
        const container = this.getContainer('users');
        try {
            const { resource } = await container.item(userId, userId).read();
            return resource || null;
        }
        catch (error) {
            if (error.code === 404)
                return null;
            throw error;
        }
    }
    async updateUser(userId, updates) {
        await this.initialize();
        const container = this.getContainer('users');
        const { resource: existing } = await container.item(userId, userId).read();
        if (!existing)
            throw new Error('User not found');
        const updated = Object.assign(Object.assign(Object.assign({}, existing), updates), { updatedAt: new Date(), _partitionKey: userId });
        await container.item(userId, userId).replace(updated);
    }
    // Interviews operations
    async createInterview(interviewData) {
        await this.initialize();
        const container = this.getContainer('interviews');
        const id = `interview_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        const document = Object.assign(Object.assign({ id }, interviewData), { _partitionKey: interviewData.userId });
        const { resource } = await container.items.create(document);
        return resource.id;
    }
    async getInterview(interviewId, userId) {
        await this.initialize();
        const container = this.getContainer('interviews');
        try {
            const { resource } = await container.item(interviewId, userId).read();
            return resource || null;
        }
        catch (error) {
            if (error.code === 404)
                return null;
            throw error;
        }
    }
    async getUserInterviews(userId) {
        await this.initialize();
        const container = this.getContainer('interviews');
        const querySpec = {
            query: 'SELECT * FROM c WHERE c.userId = @userId ORDER BY c.createdAt DESC',
            parameters: [{ name: '@userId', value: userId }]
        };
        const { resources } = await container.items.query(querySpec).fetchAll();
        return resources;
    }
    async getPublicInterviews(userId, limit = 20) {
        await this.initialize();
        const container = this.getContainer('interviews');
        const querySpec = {
            query: 'SELECT * FROM c WHERE c.userId = @userId AND c.finalized = true ORDER BY c.createdAt DESC OFFSET 0 LIMIT @limit',
            parameters: [
                { name: '@userId', value: userId },
                { name: '@limit', value: limit }
            ]
        };
        const { resources } = await container.items.query(querySpec).fetchAll();
        return resources;
    }
    async getPublicInterviewsExcludingUser(excludeUserId, limit = 20) {
        await this.initialize();
        const container = this.getContainer('interviews');
        const querySpec = {
            query: 'SELECT * FROM c WHERE c.finalized = true AND c.userId != @excludeUserId ORDER BY c.createdAt DESC OFFSET 0 LIMIT @limit',
            parameters: [
                { name: '@excludeUserId', value: excludeUserId },
                { name: '@limit', value: limit }
            ]
        };
        const { resources } = await container.items.query(querySpec).fetchAll();
        return resources;
    }
    async updateInterview(interviewId, userId, updates) {
        await this.initialize();
        const container = this.getContainer('interviews');
        const { resource: existing } = await container.item(interviewId, userId).read();
        if (!existing)
            throw new Error('Interview not found');
        const updated = Object.assign(Object.assign(Object.assign({}, existing), updates), { updatedAt: new Date(), _partitionKey: userId });
        await container.item(interviewId, userId).replace(updated);
    }
    async deleteInterview(interviewId, userId) {
        await this.initialize();
        const container = this.getContainer('interviews');
        await container.item(interviewId, userId).delete();
    }
    // Feedback operations
    async createFeedback(feedbackData) {
        await this.initialize();
        const container = this.getContainer('feedback');
        const id = `feedback_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        const document = Object.assign(Object.assign({ id }, feedbackData), { _partitionKey: feedbackData.userId });
        const { resource } = await container.items.create(document);
        return resource.id;
    }
    async getFeedbackByInterview(interviewId, userId) {
        await this.initialize();
        const container = this.getContainer('feedback');
        const querySpec = {
            query: 'SELECT * FROM c WHERE c.interviewId = @interviewId AND c.userId = @userId',
            parameters: [
                { name: '@interviewId', value: interviewId },
                { name: '@userId', value: userId }
            ]
        };
        const { resources } = await container.items.query(querySpec).fetchAll();
        return resources[0] || null;
    }
    // Resume operations
    async saveResume(resumeData) {
        await this.initialize();
        const container = this.getContainer('resumes');
        const document = Object.assign(Object.assign({}, resumeData), { _partitionKey: resumeData.userId });
        const { resource } = await container.items.upsert(document);
        return resource.id;
    }
    async getUserResume(userId) {
        await this.initialize();
        const container = this.getContainer('resumes');
        try {
            const { resource } = await container.item(userId, userId).read();
            return resource || null;
        }
        catch (error) {
            if (error.code === 404)
                return null;
            throw error;
        }
    }
    async deleteUserResume(userId) {
        await this.initialize();
        const container = this.getContainer('resumes');
        try {
            await container.item(userId, userId).delete();
        }
        catch (error) {
            if (error.code === 404)
                return; // Already deleted
            throw error;
        }
    }
    // Usage operations
    async getUserUsage(userId) {
        await this.initialize();
        const container = this.getContainer('usage');
        try {
            const { resource } = await container.item(userId, userId).read();
            return resource || null;
        }
        catch (error) {
            if (error.code === 404)
                return null;
            throw error;
        }
    }
    async initializeUserUsage(userId) {
        await this.initialize();
        const container = this.getContainer('usage');
        const usageData = {
            id: userId,
            userId,
            interviews: { count: 0, limit: 3 },
            resumes: { count: 0, limit: 2 },
            updatedAt: new Date(),
            _partitionKey: userId
        };
        await container.items.upsert(usageData);
    }
    async incrementUsage(userId, type) {
        await this.initialize();
        const container = this.getContainer('usage');
        const { resource: existing } = await container.item(userId, userId).read();
        if (!existing) {
            await this.initializeUserUsage(userId);
            return this.incrementUsage(userId, type);
        }
        const updated = Object.assign(Object.assign({}, existing), { [type]: Object.assign(Object.assign({}, existing[type]), { count: existing[type].count + 1 }), updatedAt: new Date(), _partitionKey: userId });
        await container.item(userId, userId).replace(updated);
    }
    async checkUsageLimit(userId, type) {
        const usage = await this.getUserUsage(userId);
        if (!usage) {
            await this.initializeUserUsage(userId);
            return true;
        }
        return usage[type].count < usage[type].limit;
    }
    // Job-related operations
    async createJobListing(jobData) {
        await this.initialize();
        const container = this.getContainer('jobListings');
        const id = `job_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        const document = Object.assign(Object.assign({ id }, jobData), { _partitionKey: id });
        const { resource } = await container.items.create(document);
        return resource.id;
    }
    async getActiveJobListings(userId) {
        await this.initialize();
        const container = this.getContainer('jobListings');
        const querySpec = {
            query: 'SELECT * FROM c WHERE c.isActive = true AND (ARRAY_CONTAINS(c.discoveredBy, @userId) OR ARRAY_LENGTH(c.discoveredBy) = 0) ORDER BY c.postedDate DESC',
            parameters: [{ name: '@userId', value: userId }]
        };
        const { resources } = await container.items.query(querySpec).fetchAll();
        return resources;
    }
    // Applications operations
    async createApplication(applicationData) {
        await this.initialize();
        const container = this.getContainer('applications');
        const id = `app_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        const document = Object.assign(Object.assign({ id }, applicationData), { _partitionKey: applicationData.userId });
        const { resource } = await container.items.create(document);
        return resource.id;
    }
    async getUserApplications(userId) {
        await this.initialize();
        const container = this.getContainer('applications');
        const querySpec = {
            query: 'SELECT * FROM c WHERE c.userId = @userId ORDER BY c.appliedAt DESC',
            parameters: [{ name: '@userId', value: userId }]
        };
        const { resources } = await container.items.query(querySpec).fetchAll();
        return resources;
    }
    // GDPR operations
    async createDataDeletionRequest(requestData) {
        await this.initialize();
        const container = this.getContainer('dataDeletionRequests');
        const id = `del_req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        const document = Object.assign(Object.assign({ id }, requestData), { _partitionKey: requestData.userId });
        const { resource } = await container.items.create(document);
        return resource.id;
    }
    async deleteAllUserData(userId) {
        await this.initialize();
        const deletedCollections = [];
        const collections = [
            'users', 'interviews', 'feedback', 'resumes', 'usage',
            'applications', 'autoApplySettings', 'automationLogs', 'dataDeletionRequests'
        ];
        for (const collectionName of collections) {
            try {
                const container = this.getContainer(collectionName);
                if (collectionName === 'users' || collectionName === 'resumes' || collectionName === 'usage') {
                    // These use userId as document ID
                    try {
                        await container.item(userId, userId).delete();
                        deletedCollections.push(collectionName);
                    }
                    catch (error) {
                        if (error.code !== 404)
                            throw error;
                    }
                }
                else {
                    // Query and delete all documents for this user
                    const querySpec = {
                        query: 'SELECT c.id FROM c WHERE c.userId = @userId',
                        parameters: [{ name: '@userId', value: userId }]
                    };
                    const { resources } = await container.items.query(querySpec).fetchAll();
                    if (resources.length > 0) {
                        for (const item of resources) {
                            await container.item(item.id, userId).delete();
                        }
                        deletedCollections.push(collectionName);
                    }
                }
            }
            catch (error) {
                console.error(`Error deleting from ${collectionName}:`, error);
            }
        }
        return deletedCollections;
    }
    // Notification Events operations
    async createNotificationEvent(eventData) {
        await this.initialize();
        const container = this.getContainer('notificationEvents');
        const id = `notify_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        const document = Object.assign(Object.assign({ id }, eventData), { _partitionKey: eventData.userId });
        const { resource } = await container.items.create(document);
        return resource.id;
    }
    async updateNotificationEvent(eventId, userId, updates) {
        await this.initialize();
        const container = this.getContainer('notificationEvents');
        const { resource: existing } = await container.item(eventId, userId).read();
        if (!existing)
            throw new Error('Notification event not found');
        const updated = Object.assign(Object.assign(Object.assign({}, existing), updates), { updatedAt: new Date(), _partitionKey: userId });
        await container.item(eventId, userId).replace(updated);
    }
    async getUserNotificationEvents(userId, limit = 50) {
        await this.initialize();
        const container = this.getContainer('notificationEvents');
        const querySpec = {
            query: 'SELECT * FROM c WHERE c.userId = @userId ORDER BY c.createdAt DESC OFFSET 0 LIMIT @limit',
            parameters: [
                { name: '@userId', value: userId },
                { name: '@limit', value: limit }
            ]
        };
        const { resources } = await container.items.query(querySpec).fetchAll();
        return resources;
    }
    // Error Events operations for monitoring
    async createErrorEvent(errorData) {
        await this.initialize();
        const container = this.getContainer('featureErrors');
        const id = `error_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        const document = Object.assign(Object.assign({ id }, errorData), { _partitionKey: errorData.featureName });
        const { resource } = await container.items.create(document);
        return resource.id;
    }
    async getErrorEvents(featureName, timeWindowMinutes, limit = 100) {
        await this.initialize();
        const container = this.getContainer('featureErrors');
        const cutoffTime = new Date(Date.now() - timeWindowMinutes * 60 * 1000);
        const querySpec = {
            query: 'SELECT * FROM c WHERE c.featureName = @featureName AND c.timestamp >= @cutoffTime ORDER BY c.timestamp DESC OFFSET 0 LIMIT @limit',
            parameters: [
                { name: '@featureName', value: featureName },
                { name: '@cutoffTime', value: cutoffTime },
                { name: '@limit', value: limit }
            ]
        };
        const { resources } = await container.items.query(querySpec).fetchAll();
        return resources;
    }
    async getErrorEventCount(featureName, timeWindowMinutes) {
        await this.initialize();
        const container = this.getContainer('featureErrors');
        const cutoffTime = new Date(Date.now() - timeWindowMinutes * 60 * 1000);
        const querySpec = {
            query: 'SELECT VALUE COUNT(1) FROM c WHERE c.featureName = @featureName AND c.timestamp >= @cutoffTime',
            parameters: [
                { name: '@featureName', value: featureName },
                { name: '@cutoffTime', value: cutoffTime }
            ]
        };
        const { resources } = await container.items.query(querySpec).fetchAll();
        return resources[0] || 0;
    }
    // Error Budget operations
    async createErrorBudget(budgetData) {
        await this.initialize();
        const container = this.getContainer('errorBudgets');
        const id = `budget_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        const document = Object.assign(Object.assign({ id }, budgetData), { _partitionKey: budgetData.featureName });
        const { resource } = await container.items.create(document);
        return resource.id;
    }
    // Email Verification operations
    async createEmailVerification(verificationData) {
        await this.initialize();
        const container = this.getContainer('emailVerifications');
        const id = `verify_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        const document = Object.assign(Object.assign({ id }, verificationData), { _partitionKey: verificationData.userId });
        const { resource } = await container.items.create(document);
        return resource.id;
    }
    async getEmailVerification(userId, email, type) {
        await this.initialize();
        const container = this.getContainer('emailVerifications');
        const querySpec = {
            query: 'SELECT * FROM c WHERE c.userId = @userId AND c.email = @email AND c.type = @type AND c.verified = false ORDER BY c.createdAt DESC',
            parameters: [
                { name: '@userId', value: userId },
                { name: '@email', value: email },
                { name: '@type', value: type }
            ]
        };
        const { resources } = await container.items.query(querySpec).fetchAll();
        return resources[0] || null;
    }
    async updateEmailVerification(verificationId, userId, updates) {
        await this.initialize();
        const container = this.getContainer('emailVerifications');
        const { resource: existing } = await container.item(verificationId, userId).read();
        if (!existing)
            throw new Error('Email verification not found');
        const updated = Object.assign(Object.assign(Object.assign({}, existing), updates), { _partitionKey: userId });
        await container.item(verificationId, userId).replace(updated);
    }
    // Profile operations (for Firestore profiles collection)
    async saveProfile(profileData) {
        await this.initialize();
        const container = this.getContainer('profiles');
        const document = Object.assign(Object.assign({}, profileData), { _partitionKey: profileData.userId });
        const { resource } = await container.items.upsert(document);
        return resource.id;
    }
    async getProfile(userId) {
        await this.initialize();
        const container = this.getContainer('profiles');
        try {
            const { resource } = await container.item(userId, userId).read();
            return resource || null;
        }
        catch (error) {
            if (error.code === 404)
                return null;
            throw error;
        }
    }
    async updateProfile(userId, updates) {
        await this.initialize();
        const container = this.getContainer('profiles');
        const { resource: existing } = await container.item(userId, userId).read();
        if (!existing) {
            // Create new profile if doesn't exist
            const newProfile = Object.assign(Object.assign({ id: userId, userId }, updates), { updatedAt: new Date(), _partitionKey: userId });
            await container.items.create(newProfile);
        }
        else {
            const updated = Object.assign(Object.assign(Object.assign({}, existing), updates), { updatedAt: new Date(), _partitionKey: userId });
            await container.item(userId, userId).replace(updated);
        }
    }
    // Generic query operations for complex Firestore-like queries
    async queryDocuments(containerName, query, parameters, partitionKey) {
        await this.initialize();
        const container = this.getContainer(containerName);
        const querySpec = { query, parameters };
        const queryOptions = partitionKey ? { partitionKey } : {};
        const { resources } = await container.items
            .query(querySpec, queryOptions)
            .fetchAll();
        return resources;
    }
    // Generic document operations
    async createDocument(containerName, document) {
        await this.initialize();
        const container = this.getContainer(containerName);
        const { resource } = await container.items.create(document);
        return resource.id;
    }
    async getDocument(containerName, documentId, partitionKey) {
        await this.initialize();
        const container = this.getContainer(containerName);
        try {
            const { resource } = await container.item(documentId, partitionKey).read();
            return resource || null;
        }
        catch (error) {
            if (error.code === 404)
                return null;
            throw error;
        }
    }
    async updateDocument(containerName, documentId, partitionKey, updates) {
        await this.initialize();
        const container = this.getContainer(containerName);
        const { resource: existing } = await container.item(documentId, partitionKey).read();
        if (!existing)
            throw new Error('Document not found');
        const updated = Object.assign(Object.assign({}, existing), updates);
        await container.item(documentId, partitionKey).replace(updated);
    }
    async deleteDocument(containerName, documentId, partitionKey) {
        await this.initialize();
        const container = this.getContainer(containerName);
        try {
            await container.item(documentId, partitionKey).delete();
        }
        catch (error) {
            if (error.code !== 404)
                throw error;
            // Document already deleted, ignore 404
        }
    }
    // Batch operations for efficiency
    async batchCreate(containerName, documents) {
        await this.initialize();
        const container = this.getContainer(containerName);
        // Process in smaller batches to avoid limits
        const batchSize = 25;
        for (let i = 0; i < documents.length; i += batchSize) {
            const batch = documents.slice(i, i + batchSize);
            await Promise.all(batch.map(doc => container.items.create(doc)));
        }
    }
    async batchDelete(containerName, documentIds) {
        await this.initialize();
        const container = this.getContainer(containerName);
        // Process in smaller batches
        const batchSize = 25;
        for (let i = 0; i < documentIds.length; i += batchSize) {
            const batch = documentIds.slice(i, i + batchSize);
            await Promise.all(batch.map(({ id, partitionKey }) => container.item(id, partitionKey).delete().catch(err => {
                if (err.code !== 404)
                    throw err;
                // Ignore 404s for already deleted documents
            })));
        }
    }
    // Health check
    async healthCheck() {
        try {
            await this.initialize();
            const container = this.getContainer('users');
            // Simple read operation to test connectivity
            const querySpec = { query: 'SELECT VALUE COUNT(1) FROM c', parameters: [] };
            await container.items.query(querySpec).fetchAll();
            return { status: 'healthy', timestamp: new Date() };
        }
        catch (error) {
            console.error('Azure Cosmos DB health check failed:', error);
            return { status: 'unhealthy', timestamp: new Date() };
        }
    }
}
// Export singleton instance
exports.azureCosmosService = new AzureCosmosService();
exports.default = exports.azureCosmosService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,