{"file":"/Users/dikshantvashistha/PrepBettr/lib/services/azure-cosmos-service.ts","mappings":"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","names":[],"sources":["/Users/dikshantvashistha/PrepBettr/lib/services/azure-cosmos-service.ts"],"sourcesContent":["import { CosmosClient, Database, Container } from '@azure/cosmos';\nimport { DefaultAzureCredential } from '@azure/identity';\nimport { getCosmosDbConfig } from '@/lib/config/environment-loader';\n\n// Data interfaces\nexport interface UserDocument {\n  id: string;\n  userId: string;\n  email: string;\n  displayName?: string;\n  profilePictureUrl?: string;\n  profilePictureBlobName?: string;\n  plan: 'free' | 'premium';\n  createdAt: Date;\n  updatedAt: Date;\n  _partitionKey?: string;\n}\n\nexport interface InterviewDocument {\n  id: string;\n  userId: string;\n  jobTitle: string;\n  company: string;\n  jobDescription?: string;\n  questions: Array<{\n    question: string;\n    answer?: string;\n    category: string;\n    difficulty: 'easy' | 'medium' | 'hard';\n  }>;\n  createdAt: Date;\n  updatedAt: Date;\n  finalized: boolean;\n  feedbackGenerated?: boolean;\n  _partitionKey?: string;\n}\n\nexport interface FeedbackDocument {\n  id: string;\n  userId: string;\n  interviewId: string;\n  overallScore: number;\n  strengths: string[];\n  improvements: string[];\n  detailedFeedback: string;\n  createdAt: Date;\n  _partitionKey?: string;\n}\n\nexport interface ResumeDocument {\n  id: string;\n  userId: string;\n  fileName: string;\n  fileUrl: string;\n  filePath?: string;\n  blobName?: string;\n  sasUrl?: string;\n  extractedData: {\n    personalInfo?: any;\n    summary?: string;\n    skills: string[];\n    experience: any[];\n    education: any[];\n    projects?: any[];\n    certifications?: any[];\n    languages?: string[];\n  };\n  interviewQuestions: string[];\n  metadata: {\n    fileSize: number;\n    uploadDate: Date;\n    lastModified: Date;\n    mimeType: string;\n    storageProvider: 'azure' | 'firebase';\n  };\n  _partitionKey?: string;\n}\n\nexport interface UsageDocument {\n  id: string;\n  userId: string;\n  interviews: {\n    count: number;\n    limit: number;\n    lastReset?: Date;\n  };\n  resumes: {\n    count: number;\n    limit: number;\n    lastReset?: Date;\n  };\n  updatedAt: Date;\n  _partitionKey?: string;\n}\n\nexport interface JobListingDocument {\n  id: string;\n  company: string;\n  position: string;\n  location?: string;\n  requirements?: string[];\n  isActive: boolean;\n  discoveredBy: string[];\n  postedDate: Date;\n  _partitionKey?: string;\n}\n\nexport interface ApplicationDocument {\n  id: string;\n  userId: string;\n  jobId: string;\n  status: string;\n  appliedAt: Date;\n  coverLetter?: string;\n  _partitionKey?: string;\n}\n\nexport interface AutoApplySettingsDocument {\n  id: string;\n  userId: string;\n  preferences: any;\n  isActive: boolean;\n  updatedAt: Date;\n  _partitionKey?: string;\n}\n\nexport interface AutomationLogDocument {\n  id: string;\n  userId: string;\n  action: string;\n  status: string;\n  timestamp: Date;\n  details?: any;\n  _partitionKey?: string;\n}\n\nexport interface SubscriptionEventDocument {\n  id: string;\n  userId?: string;\n  eventType: string;\n  data: any;\n  processed: boolean;\n  timestamp: Date;\n  _partitionKey?: string;\n}\n\nexport interface DataDeletionRequestDocument {\n  id: string;\n  userId: string;\n  requestedBy: string;\n  requestDate: Date;\n  status: 'pending' | 'processing' | 'completed' | 'failed';\n  reason?: string;\n  deletedData?: string[];\n  _partitionKey?: string;\n}\n\nexport interface DataProtectionAuditLogDocument {\n  id: string;\n  userId: string;\n  action: string;\n  timestamp: Date;\n  details?: any;\n  _partitionKey?: string;\n}\n\nexport interface NotificationEventDocument {\n  id: string;\n  userId: string;\n  type: string;\n  channel: string;\n  recipient: string;\n  subject: string;\n  content: string;\n  templateUsed?: string;\n  metadata?: any;\n  status: string;\n  createdAt: Date;\n  sentAt?: Date;\n  updatedAt?: Date;\n  error?: string;\n  messageId?: string;\n  jobId?: string;\n  applicationId?: string;\n  _partitionKey?: string;\n}\n\nexport interface ErrorEventDocument {\n  id: string;\n  featureName: string;\n  errorType: string;\n  errorMessage: string;\n  userId?: string;\n  userAgent?: string;\n  timestamp: Date;\n  severity: string;\n  metadata?: any;\n  _partitionKey?: string;\n}\n\nexport interface ErrorBudgetDocument {\n  id: string;\n  featureName: string;\n  breachedAt: Date;\n  errorCount: number;\n  threshold: number;\n  timeWindow: number;\n  action: string;\n  _partitionKey?: string;\n}\n\nexport interface EmailVerificationDocument {\n  id: string;\n  userId: string;\n  email: string;\n  code: string;\n  type: string;\n  expiresAt: Date;\n  verified: boolean;\n  attempts: number;\n  createdAt: Date;\n  verifiedAt?: Date;\n  _partitionKey?: string;\n}\n\nexport interface ProfileDocument {\n  id: string;\n  userId: string;\n  name?: string;\n  email?: string;\n  about?: string;\n  phone?: string;\n  workplace?: string;\n  skills?: string[];\n  experience?: string;\n  dateOfBirth?: string;\n  image?: string;\n  createdAt?: Date;\n  updatedAt: Date;\n  _partitionKey?: string;\n}\n\nclass AzureCosmosService {\n  private client: CosmosClient | null = null;\n  private database: Database | null = null;\n  private containers: Map<string, Container> = new Map();\n  private initialized = false;\n\n  constructor() {\n    // Client initialization is now deferred to initialize() method\n    // to use the unified environment loader\n  }\n\n  async initialize(): Promise<void> {\n    if (this.initialized) return;\n\n    try {\n      // Load Cosmos DB configuration from unified environment loader\n      const cosmosConfig = await getCosmosDbConfig();\n      \n      if (!cosmosConfig.connectionString) {\n        throw new Error('Cosmos DB connection string not available in configuration');\n      }\n      \n      // Initialize Cosmos client with configuration\n      this.client = new CosmosClient(cosmosConfig.connectionString);\n      \n      // Create or get database\n      const { database } = await this.client.databases.createIfNotExists({\n        id: cosmosConfig.database\n      });\n      \n      this.database = database;\n\n      // Define containers with their partition keys\n      const containerDefinitions = [\n        { id: 'users', partitionKey: '/userId' },\n        { id: 'interviews', partitionKey: '/userId' },\n        { id: 'feedback', partitionKey: '/userId' },\n        { id: 'resumes', partitionKey: '/userId' },\n        { id: 'usage', partitionKey: '/userId' },\n        { id: 'jobListings', partitionKey: '/id' },\n        { id: 'applications', partitionKey: '/userId' },\n        { id: 'autoApplySettings', partitionKey: '/userId' },\n        { id: 'automationLogs', partitionKey: '/userId' },\n        { id: 'subscriptionEvents', partitionKey: '/id' },\n        { id: 'dataDeletionRequests', partitionKey: '/userId' },\n        { id: 'dataProtectionAuditLog', partitionKey: '/userId' },\n        { id: 'notificationEvents', partitionKey: '/userId' },\n        { id: 'featureErrors', partitionKey: '/featureName' },\n        { id: 'errorBudgets', partitionKey: '/featureName' },\n        { id: 'emailVerifications', partitionKey: '/userId' },\n        { id: 'profiles', partitionKey: '/userId' }\n      ];\n\n      // Create containers\n      if (!this.database) {\n        throw new Error('Database initialization failed');\n      }\n      \n      for (const containerDef of containerDefinitions) {\n        const { container } = await this.database.containers.createIfNotExists({\n          id: containerDef.id,\n          partitionKey: containerDef.partitionKey\n        });\n        this.containers.set(containerDef.id, container);\n      }\n\n      this.initialized = true;\n      console.log('✅ Azure Cosmos DB service initialized');\n    } catch (error) {\n      console.error('❌ Failed to initialize Azure Cosmos DB:', error);\n      throw error;\n    }\n  }\n\n  private getContainer(containerName: string): Container {\n    const container = this.containers.get(containerName);\n    if (!container) {\n      throw new Error(`Container ${containerName} not found. Make sure initialize() was called.`);\n    }\n    return container;\n  }\n\n  // Users operations\n  async createUser(userData: Omit<UserDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('users');\n    \n    const document: UserDocument = {\n      id: userData.userId,\n      ...userData,\n      _partitionKey: userData.userId\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async getUser(userId: string): Promise<UserDocument | null> {\n    await this.initialize();\n    const container = this.getContainer('users');\n    \n    try {\n      const { resource } = await container.item(userId, userId).read<UserDocument>();\n      return resource || null;\n    } catch (error: any) {\n      if (error.code === 404) return null;\n      throw error;\n    }\n  }\n\n  async updateUser(userId: string, updates: Partial<UserDocument>): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('users');\n    \n    const { resource: existing } = await container.item(userId, userId).read<UserDocument>();\n    if (!existing) throw new Error('User not found');\n    \n    const updated = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n      _partitionKey: userId\n    };\n    \n    await container.item(userId, userId).replace(updated);\n  }\n\n  // Interviews operations\n  async createInterview(interviewData: Omit<InterviewDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('interviews');\n    \n    const id = `interview_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: InterviewDocument = {\n      id,\n      ...interviewData,\n      _partitionKey: interviewData.userId\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async getInterview(interviewId: string, userId: string): Promise<InterviewDocument | null> {\n    await this.initialize();\n    const container = this.getContainer('interviews');\n    \n    try {\n      const { resource } = await container.item(interviewId, userId).read<InterviewDocument>();\n      return resource || null;\n    } catch (error: any) {\n      if (error.code === 404) return null;\n      throw error;\n    }\n  }\n\n  async getUserInterviews(userId: string): Promise<InterviewDocument[]> {\n    await this.initialize();\n    const container = this.getContainer('interviews');\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.userId = @userId ORDER BY c.createdAt DESC',\n      parameters: [{ name: '@userId', value: userId }]\n    };\n    \n    const { resources } = await container.items.query<InterviewDocument>(querySpec).fetchAll();\n    return resources;\n  }\n\n  async getPublicInterviews(userId: string, limit: number = 20): Promise<InterviewDocument[]> {\n    await this.initialize();\n    const container = this.getContainer('interviews');\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.userId = @userId AND c.finalized = true ORDER BY c.createdAt DESC OFFSET 0 LIMIT @limit',\n      parameters: [\n        { name: '@userId', value: userId },\n        { name: '@limit', value: limit }\n      ]\n    };\n    \n    const { resources } = await container.items.query<InterviewDocument>(querySpec).fetchAll();\n    return resources;\n  }\n\n  async getPublicInterviewsExcludingUser(excludeUserId: string, limit: number = 20): Promise<InterviewDocument[]> {\n    await this.initialize();\n    const container = this.getContainer('interviews');\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.finalized = true AND c.userId != @excludeUserId ORDER BY c.createdAt DESC OFFSET 0 LIMIT @limit',\n      parameters: [\n        { name: '@excludeUserId', value: excludeUserId },\n        { name: '@limit', value: limit }\n      ]\n    };\n    \n    const { resources } = await container.items.query<InterviewDocument>(querySpec).fetchAll();\n    return resources;\n  }\n\n  async updateInterview(interviewId: string, userId: string, updates: Partial<InterviewDocument>): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('interviews');\n    \n    const { resource: existing } = await container.item(interviewId, userId).read<InterviewDocument>();\n    if (!existing) throw new Error('Interview not found');\n    \n    const updated = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n      _partitionKey: userId\n    };\n    \n    await container.item(interviewId, userId).replace(updated);\n  }\n\n  async deleteInterview(interviewId: string, userId: string): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('interviews');\n    await container.item(interviewId, userId).delete();\n  }\n\n  // Feedback operations\n  async createFeedback(feedbackData: Omit<FeedbackDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('feedback');\n    \n    const id = `feedback_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: FeedbackDocument = {\n      id,\n      ...feedbackData,\n      _partitionKey: feedbackData.userId\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async getFeedbackByInterview(interviewId: string, userId: string): Promise<FeedbackDocument | null> {\n    await this.initialize();\n    const container = this.getContainer('feedback');\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.interviewId = @interviewId AND c.userId = @userId',\n      parameters: [\n        { name: '@interviewId', value: interviewId },\n        { name: '@userId', value: userId }\n      ]\n    };\n    \n    const { resources } = await container.items.query<FeedbackDocument>(querySpec).fetchAll();\n    return resources[0] || null;\n  }\n\n  // Resume operations\n  async saveResume(resumeData: Omit<ResumeDocument, '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('resumes');\n    \n    const document: ResumeDocument = {\n      ...resumeData,\n      _partitionKey: resumeData.userId\n    };\n    \n    const { resource } = await container.items.upsert(document);\n    return resource!.id;\n  }\n\n  async getUserResume(userId: string): Promise<ResumeDocument | null> {\n    await this.initialize();\n    const container = this.getContainer('resumes');\n    \n    try {\n      const { resource } = await container.item(userId, userId).read<ResumeDocument>();\n      return resource || null;\n    } catch (error: any) {\n      if (error.code === 404) return null;\n      throw error;\n    }\n  }\n\n  async deleteUserResume(userId: string): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('resumes');\n    \n    try {\n      await container.item(userId, userId).delete();\n    } catch (error: any) {\n      if (error.code === 404) return; // Already deleted\n      throw error;\n    }\n  }\n\n  // Usage operations\n  async getUserUsage(userId: string): Promise<UsageDocument | null> {\n    await this.initialize();\n    const container = this.getContainer('usage');\n    \n    try {\n      const { resource } = await container.item(userId, userId).read<UsageDocument>();\n      return resource || null;\n    } catch (error: any) {\n      if (error.code === 404) return null;\n      throw error;\n    }\n  }\n\n  async initializeUserUsage(userId: string): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('usage');\n    \n    const usageData: UsageDocument = {\n      id: userId,\n      userId,\n      interviews: { count: 0, limit: 3 },\n      resumes: { count: 0, limit: 2 },\n      updatedAt: new Date(),\n      _partitionKey: userId\n    };\n    \n    await container.items.upsert(usageData);\n  }\n\n  async incrementUsage(userId: string, type: 'interviews' | 'resumes'): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('usage');\n    \n    const { resource: existing } = await container.item(userId, userId).read<UsageDocument>();\n    if (!existing) {\n      await this.initializeUserUsage(userId);\n      return this.incrementUsage(userId, type);\n    }\n    \n    const updated = {\n      ...existing,\n      [type]: {\n        ...existing[type],\n        count: existing[type].count + 1\n      },\n      updatedAt: new Date(),\n      _partitionKey: userId\n    };\n    \n    await container.item(userId, userId).replace(updated);\n  }\n\n  async checkUsageLimit(userId: string, type: 'interviews' | 'resumes'): Promise<boolean> {\n    const usage = await this.getUserUsage(userId);\n    \n    if (!usage) {\n      await this.initializeUserUsage(userId);\n      return true;\n    }\n    \n    return usage[type].count < usage[type].limit;\n  }\n\n  // Job-related operations\n  async createJobListing(jobData: Omit<JobListingDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('jobListings');\n    \n    const id = `job_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: JobListingDocument = {\n      id,\n      ...jobData,\n      _partitionKey: id\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async getActiveJobListings(userId: string): Promise<JobListingDocument[]> {\n    await this.initialize();\n    const container = this.getContainer('jobListings');\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.isActive = true AND (ARRAY_CONTAINS(c.discoveredBy, @userId) OR ARRAY_LENGTH(c.discoveredBy) = 0) ORDER BY c.postedDate DESC',\n      parameters: [{ name: '@userId', value: userId }]\n    };\n    \n    const { resources } = await container.items.query<JobListingDocument>(querySpec).fetchAll();\n    return resources;\n  }\n\n  // Applications operations\n  async createApplication(applicationData: Omit<ApplicationDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('applications');\n    \n    const id = `app_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: ApplicationDocument = {\n      id,\n      ...applicationData,\n      _partitionKey: applicationData.userId\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async getUserApplications(userId: string): Promise<ApplicationDocument[]> {\n    await this.initialize();\n    const container = this.getContainer('applications');\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.userId = @userId ORDER BY c.appliedAt DESC',\n      parameters: [{ name: '@userId', value: userId }]\n    };\n    \n    const { resources } = await container.items.query<ApplicationDocument>(querySpec).fetchAll();\n    return resources;\n  }\n\n  // GDPR operations\n  async createDataDeletionRequest(requestData: Omit<DataDeletionRequestDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('dataDeletionRequests');\n    \n    const id = `del_req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: DataDeletionRequestDocument = {\n      id,\n      ...requestData,\n      _partitionKey: requestData.userId\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async deleteAllUserData(userId: string): Promise<string[]> {\n    await this.initialize();\n    const deletedCollections: string[] = [];\n    \n    const collections = [\n      'users', 'interviews', 'feedback', 'resumes', 'usage', \n      'applications', 'autoApplySettings', 'automationLogs', 'dataDeletionRequests'\n    ];\n    \n    for (const collectionName of collections) {\n      try {\n        const container = this.getContainer(collectionName);\n        \n        if (collectionName === 'users' || collectionName === 'resumes' || collectionName === 'usage') {\n          // These use userId as document ID\n          try {\n            await container.item(userId, userId).delete();\n            deletedCollections.push(collectionName);\n          } catch (error: any) {\n            if (error.code !== 404) throw error;\n          }\n        } else {\n          // Query and delete all documents for this user\n          const querySpec = {\n            query: 'SELECT c.id FROM c WHERE c.userId = @userId',\n            parameters: [{ name: '@userId', value: userId }]\n          };\n          \n          const { resources } = await container.items.query(querySpec).fetchAll();\n          \n          if (resources.length > 0) {\n            for (const item of resources) {\n              await container.item(item.id, userId).delete();\n            }\n            deletedCollections.push(collectionName);\n          }\n        }\n      } catch (error) {\n        console.error(`Error deleting from ${collectionName}:`, error);\n      }\n    }\n    \n    return deletedCollections;\n  }\n\n  // Notification Events operations\n  async createNotificationEvent(eventData: Omit<NotificationEventDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('notificationEvents');\n    \n    const id = `notify_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: NotificationEventDocument = {\n      id,\n      ...eventData,\n      _partitionKey: eventData.userId\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async updateNotificationEvent(eventId: string, userId: string, updates: Partial<NotificationEventDocument>): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('notificationEvents');\n    \n    const { resource: existing } = await container.item(eventId, userId).read<NotificationEventDocument>();\n    if (!existing) throw new Error('Notification event not found');\n    \n    const updated = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n      _partitionKey: userId\n    };\n    \n    await container.item(eventId, userId).replace(updated);\n  }\n\n  async getUserNotificationEvents(userId: string, limit: number = 50): Promise<NotificationEventDocument[]> {\n    await this.initialize();\n    const container = this.getContainer('notificationEvents');\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.userId = @userId ORDER BY c.createdAt DESC OFFSET 0 LIMIT @limit',\n      parameters: [\n        { name: '@userId', value: userId },\n        { name: '@limit', value: limit }\n      ]\n    };\n    \n    const { resources } = await container.items.query<NotificationEventDocument>(querySpec).fetchAll();\n    return resources;\n  }\n\n  // Error Events operations for monitoring\n  async createErrorEvent(errorData: Omit<ErrorEventDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('featureErrors');\n    \n    const id = `error_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: ErrorEventDocument = {\n      id,\n      ...errorData,\n      _partitionKey: errorData.featureName\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async getErrorEvents(featureName: string, timeWindowMinutes: number, limit: number = 100): Promise<ErrorEventDocument[]> {\n    await this.initialize();\n    const container = this.getContainer('featureErrors');\n    \n    const cutoffTime = new Date(Date.now() - timeWindowMinutes * 60 * 1000);\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.featureName = @featureName AND c.timestamp >= @cutoffTime ORDER BY c.timestamp DESC OFFSET 0 LIMIT @limit',\n      parameters: [\n        { name: '@featureName', value: featureName },\n        { name: '@cutoffTime', value: cutoffTime },\n        { name: '@limit', value: limit }\n      ]\n    };\n    \n    const { resources } = await container.items.query<ErrorEventDocument>(querySpec).fetchAll();\n    return resources;\n  }\n\n  async getErrorEventCount(featureName: string, timeWindowMinutes: number): Promise<number> {\n    await this.initialize();\n    const container = this.getContainer('featureErrors');\n    \n    const cutoffTime = new Date(Date.now() - timeWindowMinutes * 60 * 1000);\n    \n    const querySpec = {\n      query: 'SELECT VALUE COUNT(1) FROM c WHERE c.featureName = @featureName AND c.timestamp >= @cutoffTime',\n      parameters: [\n        { name: '@featureName', value: featureName },\n        { name: '@cutoffTime', value: cutoffTime }\n      ]\n    };\n    \n    const { resources } = await container.items.query<number>(querySpec).fetchAll();\n    return resources[0] || 0;\n  }\n\n  // Error Budget operations\n  async createErrorBudget(budgetData: Omit<ErrorBudgetDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('errorBudgets');\n    \n    const id = `budget_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: ErrorBudgetDocument = {\n      id,\n      ...budgetData,\n      _partitionKey: budgetData.featureName\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  // Email Verification operations\n  async createEmailVerification(verificationData: Omit<EmailVerificationDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('emailVerifications');\n    \n    const id = `verify_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: EmailVerificationDocument = {\n      id,\n      ...verificationData,\n      _partitionKey: verificationData.userId\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async getEmailVerification(userId: string, email: string, type: string): Promise<EmailVerificationDocument | null> {\n    await this.initialize();\n    const container = this.getContainer('emailVerifications');\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.userId = @userId AND c.email = @email AND c.type = @type AND c.verified = false ORDER BY c.createdAt DESC',\n      parameters: [\n        { name: '@userId', value: userId },\n        { name: '@email', value: email },\n        { name: '@type', value: type }\n      ]\n    };\n    \n    const { resources } = await container.items.query<EmailVerificationDocument>(querySpec).fetchAll();\n    return resources[0] || null;\n  }\n\n  async updateEmailVerification(verificationId: string, userId: string, updates: Partial<EmailVerificationDocument>): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('emailVerifications');\n    \n    const { resource: existing } = await container.item(verificationId, userId).read<EmailVerificationDocument>();\n    if (!existing) throw new Error('Email verification not found');\n    \n    const updated = {\n      ...existing,\n      ...updates,\n      _partitionKey: userId\n    };\n    \n    await container.item(verificationId, userId).replace(updated);\n  }\n\n  // Profile operations (for Firestore profiles collection)\n  async saveProfile(profileData: Omit<ProfileDocument, '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('profiles');\n    \n    const document: ProfileDocument = {\n      ...profileData,\n      _partitionKey: profileData.userId\n    };\n    \n    const { resource } = await container.items.upsert(document);\n    return resource!.id;\n  }\n\n  async getProfile(userId: string): Promise<ProfileDocument | null> {\n    await this.initialize();\n    const container = this.getContainer('profiles');\n    \n    try {\n      const { resource } = await container.item(userId, userId).read<ProfileDocument>();\n      return resource || null;\n    } catch (error: any) {\n      if (error.code === 404) return null;\n      throw error;\n    }\n  }\n\n  async updateProfile(userId: string, updates: Partial<ProfileDocument>): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('profiles');\n    \n    const { resource: existing } = await container.item(userId, userId).read<ProfileDocument>();\n    if (!existing) {\n      // Create new profile if doesn't exist\n      const newProfile: ProfileDocument = {\n        id: userId,\n        userId,\n        ...updates,\n        updatedAt: new Date(),\n        _partitionKey: userId\n      };\n      await container.items.create(newProfile);\n    } else {\n      const updated = {\n        ...existing,\n        ...updates,\n        updatedAt: new Date(),\n        _partitionKey: userId\n      };\n      await container.item(userId, userId).replace(updated);\n    }\n  }\n\n  // Generic query operations for complex Firestore-like queries\n  async queryDocuments<T>(\n    containerName: string,\n    query: string,\n    parameters: Array<{ name: string; value: any }>,\n    partitionKey?: string\n  ): Promise<T[]> {\n    await this.initialize();\n    const container = this.getContainer(containerName);\n    \n    const querySpec = { query, parameters };\n    const queryOptions = partitionKey ? { partitionKey } : {};\n    \n    const { resources } = await container.items\n      .query<T>(querySpec, queryOptions)\n      .fetchAll();\n    \n    return resources;\n  }\n\n  // Generic document operations\n  async createDocument<T extends { _partitionKey?: string }>(containerName: string, document: T): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer(containerName);\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async getDocument<T = any>(containerName: string, documentId: string, partitionKey: string): Promise<T | null> {\n    await this.initialize();\n    const container = this.getContainer(containerName);\n    \n    try {\n      const { resource } = await container.item(documentId, partitionKey).read();\n      return (resource as T) || null;\n    } catch (error: any) {\n      if (error.code === 404) return null;\n      throw error;\n    }\n  }\n\n  async updateDocument<T = any>(containerName: string, documentId: string, partitionKey: string, updates: Partial<T>): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer(containerName);\n    \n    const { resource: existing } = await container.item(documentId, partitionKey).read();\n    if (!existing) throw new Error('Document not found');\n    \n    const updated = {\n      ...existing,\n      ...updates\n    };\n    \n    await container.item(documentId, partitionKey).replace(updated);\n  }\n\n  async deleteDocument(containerName: string, documentId: string, partitionKey: string): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer(containerName);\n    \n    try {\n      await container.item(documentId, partitionKey).delete();\n    } catch (error: any) {\n      if (error.code !== 404) throw error;\n      // Document already deleted, ignore 404\n    }\n  }\n\n  // Batch operations for efficiency\n  async batchCreate<T extends { id: string; _partitionKey?: string }>(\n    containerName: string, \n    documents: T[]\n  ): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer(containerName);\n    \n    // Process in smaller batches to avoid limits\n    const batchSize = 25;\n    for (let i = 0; i < documents.length; i += batchSize) {\n      const batch = documents.slice(i, i + batchSize);\n      await Promise.all(batch.map(doc => container.items.create(doc)));\n    }\n  }\n\n  async batchDelete(containerName: string, documentIds: Array<{ id: string; partitionKey: string }>): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer(containerName);\n    \n    // Process in smaller batches\n    const batchSize = 25;\n    for (let i = 0; i < documentIds.length; i += batchSize) {\n      const batch = documentIds.slice(i, i + batchSize);\n      await Promise.all(batch.map(({ id, partitionKey }) => \n        container.item(id, partitionKey).delete().catch(err => {\n          if (err.code !== 404) throw err;\n          // Ignore 404s for already deleted documents\n        })\n      ));\n    }\n  }\n\n  // Health check\n  async healthCheck(): Promise<{ status: 'healthy' | 'unhealthy'; timestamp: Date }> {\n    try {\n      await this.initialize();\n      const container = this.getContainer('users');\n      \n      // Simple read operation to test connectivity\n      const querySpec = { query: 'SELECT VALUE COUNT(1) FROM c', parameters: [] };\n      await container.items.query(querySpec).fetchAll();\n      \n      return { status: 'healthy', timestamp: new Date() };\n    } catch (error) {\n      console.error('Azure Cosmos DB health check failed:', error);\n      return { status: 'unhealthy', timestamp: new Date() };\n    }\n  }\n}\n\n// Export singleton instance\nexport const azureCosmosService = new AzureCosmosService();\nexport default azureCosmosService;\n"],"version":3}