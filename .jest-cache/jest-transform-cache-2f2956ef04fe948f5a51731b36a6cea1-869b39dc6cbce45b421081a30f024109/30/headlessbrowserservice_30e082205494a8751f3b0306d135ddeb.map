{"version":3,"names":["cov_1ahyucy3eo","actualCoverage","chromium","s","require","Bottleneck","v4","uuidv4","automationLogger","autoApplyMetrics","BlobServiceClient","DefaultAzureCredential","HeadlessBrowserService","constructor","f","browsers","Map","maxConcurrentBrowsers","activeBrowsers","limiter","maxConcurrent","minTime","reservoir","reservoirRefreshAmount","reservoirRefreshInterval","browserConfig","headless","args","timeout","viewport","width","height","retryConfig","maxRetries","baseDelay","maxDelay","backoffFactor","blobServiceClient","initializeBlobService","connectionString","process","env","AzureWebJobsStorage","b","fromConnectionString","credential","accountName","AZURE_STORAGE_ACCOUNT_NAME","error","console","applyToJob","jobListing","userProfile","options","applicationId","startTime","Date","now","logInfo","id","jobId","userId","jobUrl","final_url","easyApply","easy_apply","portal","jobPortal","name","Error","result","schedule","executeApplicationWithRetry","duration","success","attempts","errorMessage","trackApplicationMetrics","logApplicationInsights","message","screenshotPath","formData","logError","lastError","attempt","executeSingleApplication","delay","Math","min","pow","Promise","resolve","setTimeout","browser","page","launchBrowser","newPage","setupPageMonitoring","goto","waitUntil","captureScreenshot","portalHandler","detectJobPortal","fillApplicationForm","screeningAnswers","handleScreeningQuestions","resumeUploaded","uploadResume","submissionResult","submitApplication","finalScreenshot","portalType","type","screenshotError","warn","closeBrowser","browserId","launchStartTime","launch","launchTime","set","createdAt","lastActivity","trackBrowserMetrics","maxBrowsers","browserLaunchTime","log","browserData","entries","delete","close","max","on","msg","text","request","url","failure","errorText","setDefaultTimeout","setDefaultNavigationTimeout","toLowerCase","title","includes","applyButtonSelector","formSelectors","firstName","lastName","email","phone","resume","submitSelector","nextSelector","applyButton","$","click","waitForTimeout","firstNameField","fill","split","lastNameField","slice","join","emailField","phoneField","answers","questionSelectors","selector","questions","$$","i","length","question","questionText","textContent","answer","generateScreeningAnswer","input","inputType","getAttribute","check","trim","Object","keys","trackScreeningMetrics","questionsAnswered","correctAnswers","round","aiConfidence","lowerQuestion","experienceYears","toString","experience","workAuthorization","expectedSalary","userSkills","skills","jobRequirements","requirements","fileInput","resumePath","getResumeFile","setInputFiles","resumeBlobPath","containerClient","getContainerClient","blobClient","getBlobClient","tempPath","downloadToFile","fs","writeFileSync","submitButton","successIndicators","submissionSuccess","indicator","element","errorIndicators","submissionError","stage","screenshot","path","fullPage","uploadScreenshotToBlob","createIfNotExists","blobName","blockBlobClient","getBlockBlobClient","uploadFile","eventName","properties","jobTitle","company","timestamp","toISOString","JSON","stringify","level","cleanup","maxIdleTime","trackApplicationAttempt","method","memoryUsage","heapUsed","queueLength","getQueueLength","trackPortalMetrics","applicationAttempts","successfulApplications","averageTime","commonErrors","counts","RECEIVED","DONE","getHealthStatus","queuedOperations","healthStatus","status","metrics","module","exports"],"sources":["headless-browser-service.js"],"sourcesContent":["const { chromium } = require('playwright');\nconst Bottleneck = require('bottleneck');\nconst { v4: uuidv4 } = require('uuid');\nconst automationLogger = require('./automation-logs');\nconst autoApplyMetrics = require('../utils/auto-apply-metrics');\nconst { BlobServiceClient } = require('@azure/storage-blob');\nconst { DefaultAzureCredential } = require('@azure/identity');\n\n/**\n * Headless Browser Automation Service for Job Applications\n * Phase 2: Automated application submission using Playwright\n */\nclass HeadlessBrowserService {\n    constructor() {\n        this.browsers = new Map(); // Track active browsers\n        this.maxConcurrentBrowsers = 5; // Limit to avoid IP bans\n        this.activeBrowsers = 0;\n        \n        // Initialize rate limiting with Bottleneck\n        this.limiter = new Bottleneck({\n            maxConcurrent: this.maxConcurrentBrowsers,\n            minTime: 2000, // 2 second delay between operations\n            reservoir: 50, // 50 operations per...\n            reservoirRefreshAmount: 50,\n            reservoirRefreshInterval: 60 * 1000, // 1 minute\n        });\n\n        // Browser configuration\n        this.browserConfig = {\n            headless: true,\n            args: [\n                '--no-sandbox',\n                '--disable-setuid-sandbox',\n                '--disable-dev-shm-usage',\n                '--disable-accelerated-2d-canvas',\n                '--no-first-run',\n                '--no-zygote',\n                '--single-process',\n                '--disable-gpu',\n                '--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\n            ],\n            timeout: 60000, // 1 minute timeout\n            viewport: {\n                width: 1366,\n                height: 768\n            }\n        };\n\n        // Retry configuration\n        this.retryConfig = {\n            maxRetries: 3,\n            baseDelay: 2000,\n            maxDelay: 10000,\n            backoffFactor: 2\n        };\n\n        // Initialize blob service for resume uploads\n        this.blobServiceClient = null;\n        this.initializeBlobService();\n    }\n\n    async initializeBlobService() {\n        try {\n            const connectionString = process.env.AzureWebJobsStorage;\n            if (connectionString) {\n                this.blobServiceClient = BlobServiceClient.fromConnectionString(connectionString);\n            } else {\n                const credential = new DefaultAzureCredential();\n                const accountName = process.env.AZURE_STORAGE_ACCOUNT_NAME;\n                this.blobServiceClient = new BlobServiceClient(\n                    `https://${accountName}.blob.core.windows.net`,\n                    credential\n                );\n            }\n        } catch (error) {\n            console.error('❌ Failed to initialize blob service for headless browser:', error);\n        }\n    }\n\n    /**\n     * Main function to apply to a job using headless browser automation\n     */\n    async applyToJob(jobListing, userProfile, options = {}) {\n        const applicationId = uuidv4();\n        const startTime = Date.now();\n\n        await automationLogger.logInfo(\n            'headless_application_started',\n            `Starting headless application for job ${jobListing.id}`,\n            {\n                applicationId,\n                jobId: jobListing.id,\n                userId: userProfile.id,\n                jobUrl: jobListing.final_url,\n                easyApply: jobListing.easy_apply,\n                portal: jobListing.jobPortal?.name\n            }\n        );\n\n        try {\n            // Check if job is eligible for headless application\n            if (!jobListing.easy_apply) {\n                throw new Error('Job does not support easy apply - headless automation skipped');\n            }\n\n            if (!jobListing.final_url) {\n                throw new Error('Job URL is required for headless automation');\n            }\n\n            // Apply rate limiting and concurrency control\n            const result = await this.limiter.schedule(() => \n                this.executeApplicationWithRetry(applicationId, jobListing, userProfile, options)\n            );\n\n            const duration = Date.now() - startTime;\n            \n            await automationLogger.logInfo(\n                'headless_application_completed',\n                `Headless application ${result.success ? 'succeeded' : 'failed'} for job ${jobListing.id}`,\n                {\n                    applicationId,\n                    jobId: jobListing.id,\n                    userId: userProfile.id,\n                    success: result.success,\n                    duration: `${duration}ms`,\n                    attempts: result.attempts,\n                    errorMessage: result.errorMessage\n                }\n            );\n\n            // Track comprehensive metrics\n            this.trackApplicationMetrics(applicationId, jobListing, userProfile, result, duration);\n            \n            // Legacy logging for backward compatibility\n            this.logApplicationInsights(applicationId, jobListing, userProfile, result, duration);\n\n            return {\n                applicationId,\n                success: result.success,\n                message: result.message || (result.success ? 'Application submitted successfully' : 'Application failed'),\n                duration,\n                attempts: result.attempts,\n                screenshotPath: result.screenshotPath,\n                formData: result.formData\n            };\n\n        } catch (error) {\n            const duration = Date.now() - startTime;\n            \n            await automationLogger.logError(\n                'headless_application_error',\n                error,\n                {\n                    applicationId,\n                    jobId: jobListing.id,\n                    userId: userProfile.id,\n                    duration: `${duration}ms`\n                }\n            );\n\n            // Track error metrics\n            this.trackApplicationMetrics(applicationId, jobListing, userProfile, { \n                success: false, \n                errorMessage: error.message,\n                attempts: 1\n            }, duration);\n            \n            // Legacy logging for backward compatibility\n            this.logApplicationInsights(applicationId, jobListing, userProfile, { \n                success: false, \n                errorMessage: error.message,\n                attempts: 1\n            }, duration);\n\n            return {\n                applicationId,\n                success: false,\n                message: error.message,\n                duration,\n                attempts: 1\n            };\n        }\n    }\n\n    /**\n     * Execute application with exponential backoff retry logic\n     */\n    async executeApplicationWithRetry(applicationId, jobListing, userProfile, options) {\n        let lastError;\n        let attempts = 0;\n\n        while (attempts < this.retryConfig.maxRetries) {\n            attempts++;\n            \n            try {\n                await automationLogger.logInfo(\n                    'headless_application_attempt',\n                    `Attempt ${attempts}/${this.retryConfig.maxRetries} for application ${applicationId}`,\n                    { applicationId, jobId: jobListing.id, attempt: attempts }\n                );\n\n                const result = await this.executeSingleApplication(applicationId, jobListing, userProfile, options);\n                \n                if (result.success) {\n                    return { ...result, attempts };\n                }\n\n                lastError = new Error(result.message || 'Application failed');\n\n            } catch (error) {\n                lastError = error;\n                \n                await automationLogger.logError(\n                    'headless_application_attempt_error',\n                    error,\n                    { applicationId, jobId: jobListing.id, attempt: attempts }\n                );\n            }\n\n            // Wait before retry (exponential backoff)\n            if (attempts < this.retryConfig.maxRetries) {\n                const delay = Math.min(\n                    this.retryConfig.baseDelay * Math.pow(this.retryConfig.backoffFactor, attempts - 1),\n                    this.retryConfig.maxDelay\n                );\n                \n                await new Promise(resolve => setTimeout(resolve, delay));\n            }\n        }\n\n        // All retries exhausted\n        return {\n            success: false,\n            message: `Application failed after ${attempts} attempts: ${lastError?.message || 'Unknown error'}`,\n            errorMessage: lastError?.message,\n            attempts\n        };\n    }\n\n    /**\n     * Execute a single application attempt\n     */\n    async executeSingleApplication(applicationId, jobListing, userProfile, options) {\n        let browser = null;\n        let page = null;\n        let screenshotPath = null;\n\n        try {\n            // Launch browser\n            browser = await this.launchBrowser();\n            page = await browser.newPage();\n\n            // Set up page monitoring\n            await this.setupPageMonitoring(page, applicationId);\n\n            // Navigate to job URL\n            await automationLogger.logInfo(\n                'headless_navigation_started',\n                `Navigating to job URL: ${jobListing.final_url}`,\n                { applicationId, jobUrl: jobListing.final_url }\n            );\n\n            await page.goto(jobListing.final_url, { \n                waitUntil: 'networkidle',\n                timeout: 30000 \n            });\n\n            // Take screenshot for debugging\n            screenshotPath = await this.captureScreenshot(page, applicationId, 'initial');\n\n            // Detect and handle the job portal\n            const portalHandler = await this.detectJobPortal(page, jobListing);\n            \n            if (!portalHandler) {\n                throw new Error(`Unsupported job portal: ${jobListing.jobPortal?.name || 'Unknown'}`);\n            }\n\n            // Fill out the application form\n            const formData = await this.fillApplicationForm(\n                page, \n                portalHandler, \n                jobListing, \n                userProfile,\n                applicationId\n            );\n\n            // Handle screening questions\n            const screeningAnswers = await this.handleScreeningQuestions(\n                page,\n                portalHandler,\n                jobListing,\n                userProfile,\n                applicationId\n            );\n\n            // Upload resume\n            const resumeUploaded = await this.uploadResume(\n                page,\n                portalHandler,\n                userProfile,\n                applicationId\n            );\n\n            // Submit application\n            const submissionResult = await this.submitApplication(\n                page,\n                portalHandler,\n                applicationId\n            );\n\n            // Take final screenshot\n            const finalScreenshot = await this.captureScreenshot(page, applicationId, 'final');\n\n            return {\n                success: submissionResult.success,\n                message: submissionResult.message,\n                formData,\n                screeningAnswers,\n                resumeUploaded,\n                screenshotPath: finalScreenshot || screenshotPath,\n                portalType: portalHandler.type\n            };\n\n        } catch (error) {\n            // Capture error screenshot\n            if (page) {\n                try {\n                    screenshotPath = await this.captureScreenshot(page, applicationId, 'error');\n                } catch (screenshotError) {\n                    console.warn('Failed to capture error screenshot:', screenshotError);\n                }\n            }\n\n            throw error;\n\n        } finally {\n            // Clean up browser resources\n            if (browser) {\n                await this.closeBrowser(browser);\n            }\n        }\n    }\n\n    /**\n     * Launch a new browser instance with proper configuration\n     */\n    async launchBrowser() {\n        if (this.activeBrowsers >= this.maxConcurrentBrowsers) {\n            throw new Error(`Maximum concurrent browsers (${this.maxConcurrentBrowsers}) exceeded`);\n        }\n\n        const browserId = uuidv4();\n        const launchStartTime = Date.now();\n        \n        try {\n            const browser = await chromium.launch(this.browserConfig);\n            const launchTime = Date.now() - launchStartTime;\n            \n            // Track the browser\n            this.browsers.set(browserId, {\n                browser,\n                createdAt: Date.now(),\n                lastActivity: Date.now()\n            });\n            \n            this.activeBrowsers++;\n            \n            // Track browser metrics\n            autoApplyMetrics.trackBrowserMetrics({\n                applicationId: browserId,\n                activeBrowsers: this.activeBrowsers,\n                maxBrowsers: this.maxConcurrentBrowsers,\n                browserLaunchTime: launchTime\n            });\n            \n            console.log(`🌐 Browser launched (${browserId}), active browsers: ${this.activeBrowsers}`);\n            \n            return browser;\n\n        } catch (error) {\n            console.error('❌ Failed to launch browser:', error);\n            throw new Error(`Browser launch failed: ${error.message}`);\n        }\n    }\n\n    /**\n     * Close browser and clean up resources\n     */\n    async closeBrowser(browser) {\n        try {\n            // Find and remove from tracking\n            for (const [browserId, browserData] of this.browsers.entries()) {\n                if (browserData.browser === browser) {\n                    this.browsers.delete(browserId);\n                    break;\n                }\n            }\n\n            await browser.close();\n            this.activeBrowsers = Math.max(0, this.activeBrowsers - 1);\n            \n            // Track browser closure\n            autoApplyMetrics.trackBrowserMetrics({\n                activeBrowsers: this.activeBrowsers,\n                maxBrowsers: this.maxConcurrentBrowsers\n            });\n            \n            console.log(`🔒 Browser closed, active browsers: ${this.activeBrowsers}`);\n\n        } catch (error) {\n            console.error('❌ Error closing browser:', error);\n        }\n    }\n\n    /**\n     * Set up page monitoring and error handling\n     */\n    async setupPageMonitoring(page, applicationId) {\n        // Handle console messages\n        page.on('console', msg => {\n            if (msg.type() === 'error') {\n                console.warn(`Browser console error (${applicationId}):`, msg.text());\n            }\n        });\n\n        // Handle page errors\n        page.on('pageerror', error => {\n            console.error(`Page error (${applicationId}):`, error);\n        });\n\n        // Handle request failures\n        page.on('requestfailed', request => {\n            console.warn(`Request failed (${applicationId}):`, request.url(), request.failure()?.errorText);\n        });\n\n        // Set default timeout\n        page.setDefaultTimeout(30000);\n        page.setDefaultNavigationTimeout(30000);\n    }\n\n    /**\n     * Detect the job portal type and return appropriate handler\n     */\n    async detectJobPortal(page, jobListing) {\n        const url = page.url().toLowerCase();\n        const title = await page.title();\n        \n        // TheirStack detection (check first to avoid LinkedIn false positives)\n        if (url.includes('theirstack.com') || jobListing.jobPortal?.name === 'TheirStack') {\n            return {\n                type: 'theirstack',\n                applyButtonSelector: '.apply-button, button[class*=\"apply\"]',\n                formSelectors: {\n                    firstName: 'input[name*=\"first\"], input[placeholder*=\"First\"]',\n                    lastName: 'input[name*=\"last\"], input[placeholder*=\"Last\"]',\n                    email: 'input[name*=\"email\"], input[type=\"email\"]',\n                    phone: 'input[name*=\"phone\"], input[type=\"tel\"]',\n                    resume: 'input[type=\"file\"]'\n                },\n                submitSelector: 'button[type=\"submit\"], .submit-application'\n            };\n        }\n\n        // Indeed detection\n        if (url.includes('indeed.com') || title.includes('Indeed')) {\n            return {\n                type: 'indeed',\n                applyButtonSelector: 'button[data-jk], .ia-IndeedApplyButton',\n                formSelectors: {\n                    firstName: 'input[name*=\"firstName\"], input[id*=\"fname\"]',\n                    lastName: 'input[name*=\"lastName\"], input[id*=\"lname\"]',\n                    email: 'input[name*=\"email\"], input[type=\"email\"]',\n                    phone: 'input[name*=\"phone\"], input[type=\"tel\"]',\n                    resume: 'input[type=\"file\"]'\n                },\n                submitSelector: 'button[type=\"submit\"], .ia-continueButton'\n            };\n        }\n\n        // LinkedIn Jobs detection (check after TheirStack to avoid conflicts)\n        if (url.includes('linkedin.com') || title.includes('LinkedIn')) {\n            return {\n                type: 'linkedin',\n                applyButtonSelector: 'button[aria-label*=\"Easy Apply\"], .jobs-apply-button',\n                formSelectors: {\n                    firstName: 'input[name*=\"firstName\"], input[id*=\"firstName\"]',\n                    lastName: 'input[name*=\"lastName\"], input[id*=\"lastName\"]',\n                    email: 'input[name*=\"email\"], input[type=\"email\"]',\n                    phone: 'input[name*=\"phone\"], input[type=\"tel\"]',\n                    resume: 'input[type=\"file\"][accept*=\"pdf\"], input[type=\"file\"]'\n                },\n                submitSelector: 'button[aria-label*=\"Submit\"], .artdeco-button--primary',\n                nextSelector: 'button[aria-label*=\"Next\"], .artdeco-button--primary'\n            };\n        }\n\n        // Generic fallback handler\n        return {\n            type: 'generic',\n            applyButtonSelector: 'button[class*=\"apply\"], a[class*=\"apply\"], .apply-btn',\n            formSelectors: {\n                firstName: 'input[name*=\"first\"], input[placeholder*=\"First\"], input[id*=\"first\"]',\n                lastName: 'input[name*=\"last\"], input[placeholder*=\"Last\"], input[id*=\"last\"]',\n                email: 'input[name*=\"email\"], input[type=\"email\"]',\n                phone: 'input[name*=\"phone\"], input[type=\"tel\"]',\n                resume: 'input[type=\"file\"]'\n            },\n            submitSelector: 'button[type=\"submit\"], input[type=\"submit\"], .submit-btn'\n        };\n    }\n\n    /**\n     * Fill out application form with user profile data\n     */\n    async fillApplicationForm(page, portalHandler, jobListing, userProfile, applicationId) {\n        await automationLogger.logInfo(\n            'headless_form_filling_started',\n            `Starting form filling for ${portalHandler.type} portal`,\n            { applicationId, portalType: portalHandler.type }\n        );\n\n        const formData = {};\n\n        try {\n            // Click apply button if present\n            const applyButton = await page.$(portalHandler.applyButtonSelector);\n            if (applyButton) {\n                await applyButton.click();\n                await page.waitForTimeout(2000); // Wait for form to load\n            }\n\n            // Fill first name\n            const firstNameField = await page.$(portalHandler.formSelectors.firstName);\n            if (firstNameField) {\n                await firstNameField.fill(userProfile.firstName || userProfile.name?.split(' ')[0] || '');\n                formData.firstName = userProfile.firstName || userProfile.name?.split(' ')[0] || '';\n            }\n\n            // Fill last name\n            const lastNameField = await page.$(portalHandler.formSelectors.lastName);\n            if (lastNameField) {\n                const lastName = userProfile.lastName || \n                                userProfile.name?.split(' ').slice(1).join(' ') || '';\n                await lastNameField.fill(lastName);\n                formData.lastName = lastName;\n            }\n\n            // Fill email\n            const emailField = await page.$(portalHandler.formSelectors.email);\n            if (emailField) {\n                await emailField.fill(userProfile.email || '');\n                formData.email = userProfile.email || '';\n            }\n\n            // Fill phone\n            const phoneField = await page.$(portalHandler.formSelectors.phone);\n            if (phoneField && userProfile.phone) {\n                await phoneField.fill(userProfile.phone);\n                formData.phone = userProfile.phone;\n            }\n\n            await automationLogger.logInfo(\n                'headless_form_filled',\n                `Form fields filled successfully`,\n                { applicationId, formData }\n            );\n\n            return formData;\n\n        } catch (error) {\n            await automationLogger.logError(\n                'headless_form_filling_error',\n                error,\n                { applicationId, portalType: portalHandler.type }\n            );\n            \n            throw new Error(`Form filling failed: ${error.message}`);\n        }\n    }\n\n    /**\n     * Handle screening questions using AI\n     */\n    async handleScreeningQuestions(page, portalHandler, jobListing, userProfile, applicationId) {\n        const answers = {};\n\n        try {\n            // Look for common screening question patterns\n            const questionSelectors = [\n                'div[class*=\"question\"]',\n                '.screening-question',\n                'fieldset',\n                'div[data-test*=\"question\"]'\n            ];\n\n            for (const selector of questionSelectors) {\n                const questions = await page.$$(selector);\n                \n                for (let i = 0; i < questions.length; i++) {\n                    const question = questions[i];\n                    const questionText = await question.textContent();\n                    \n                    if (questionText && questionText.length > 10) {\n                        const answer = await this.generateScreeningAnswer(\n                            questionText,\n                            jobListing,\n                            userProfile\n                        );\n                        \n                        // Try to fill the answer\n                        const input = await question.$('input, select, textarea');\n                        if (input && answer) {\n                            const inputType = await input.getAttribute('type');\n                            \n                            if (inputType === 'radio' || inputType === 'checkbox') {\n                                if (answer.toLowerCase().includes('yes') || \n                                    answer.toLowerCase().includes('true')) {\n                                    await input.check();\n                                }\n                            } else {\n                                await input.fill(answer);\n                            }\n                            \n                            answers[`question_${i}`] = {\n                                question: questionText.trim(),\n                                answer: answer\n                            };\n                        }\n                    }\n                }\n            }\n\n            if (Object.keys(answers).length > 0) {\n                await automationLogger.logInfo(\n                    'headless_screening_completed',\n                    `Answered ${Object.keys(answers).length} screening questions`,\n                    { applicationId, answers }\n                );\n                \n                // Track screening metrics (assume 90% accuracy for now - would need validation in real system)\n                autoApplyMetrics.trackScreeningMetrics({\n                    applicationId,\n                    questionsAnswered: Object.keys(answers).length,\n                    correctAnswers: Math.round(Object.keys(answers).length * 0.9), // Placeholder\n                    aiConfidence: 85, // Placeholder - would come from AI service\n                    portal: portalHandler?.type\n                });\n            }\n\n            return answers;\n\n        } catch (error) {\n            await automationLogger.logError(\n                'headless_screening_error',\n                error,\n                { applicationId }\n            );\n            \n            return answers; // Return partial answers\n        }\n    }\n\n    /**\n     * Generate intelligent answers to screening questions\n     */\n    async generateScreeningAnswer(question, jobListing, userProfile) {\n        try {\n            // Simple rule-based answering for common questions\n            const lowerQuestion = question.toLowerCase();\n            \n            // Experience questions - check for specific technologies/skills\n            if (lowerQuestion.includes('years of experience') || \n                lowerQuestion.includes('how long have you') ||\n                lowerQuestion.includes('how many years')) {\n                \n                // Check if question is about specific technology\n                if (lowerQuestion.includes('javascript')) {\n                    return (userProfile.experienceYears || 5).toString();\n                }\n                \n                const experienceYears = userProfile.experienceYears || \n                                      userProfile.experience?.length || 2;\n                return experienceYears.toString();\n            }\n            \n            // Authorization questions\n            if (lowerQuestion.includes('authorized to work') ||\n                lowerQuestion.includes('visa') ||\n                lowerQuestion.includes('work permit')) {\n                return userProfile.workAuthorization || 'Yes';\n            }\n            \n            // Salary expectations\n            if (lowerQuestion.includes('salary') || \n                lowerQuestion.includes('compensation')) {\n                return userProfile.expectedSalary || 'Negotiable';\n            }\n            \n            // Boolean questions - default to positive responses\n            if (lowerQuestion.includes('are you') || \n                lowerQuestion.includes('do you') ||\n                lowerQuestion.includes('have you') ||\n                lowerQuestion.includes('can you')) {\n                \n                // Check if it's asking about specific skills\n                const userSkills = userProfile.skills?.join(' ').toLowerCase() || '';\n                const jobRequirements = jobListing.requirements?.join(' ').toLowerCase() || '';\n                \n                if (userSkills.includes(lowerQuestion) || \n                    jobRequirements.includes(lowerQuestion)) {\n                    return 'Yes';\n                }\n                \n                return 'Yes'; // Default positive response\n            }\n            \n            // Default fallback\n            return 'Please see resume for details';\n\n        } catch (error) {\n            console.error('Error generating screening answer:', error);\n            return 'Please see resume for details';\n        }\n    }\n\n    /**\n     * Upload resume file\n     */\n    async uploadResume(page, portalHandler, userProfile, applicationId) {\n        try {\n            const fileInput = await page.$(portalHandler.formSelectors.resume);\n            \n            if (!fileInput) {\n                console.warn(`No file upload field found for application ${applicationId}`);\n                return false;\n            }\n\n            // Get resume from user profile or cloud storage\n            const resumePath = await this.getResumeFile(userProfile, applicationId);\n            \n            if (!resumePath) {\n                console.warn(`No resume file available for user ${userProfile.id}`);\n                return false;\n            }\n\n            await fileInput.setInputFiles(resumePath);\n            \n            await automationLogger.logInfo(\n                'headless_resume_uploaded',\n                `Resume uploaded successfully`,\n                { applicationId, resumePath }\n            );\n\n            return true;\n\n        } catch (error) {\n            await automationLogger.logError(\n                'headless_resume_upload_error',\n                error,\n                { applicationId }\n            );\n            \n            return false;\n        }\n    }\n\n    /**\n     * Get resume file from cloud storage or generate one\n     */\n    async getResumeFile(userProfile, applicationId) {\n        try {\n            // First, try to get resume from cloud storage\n            if (this.blobServiceClient && userProfile.resumeBlobPath) {\n                const containerClient = this.blobServiceClient.getContainerClient('resumes');\n                const blobClient = containerClient.getBlobClient(userProfile.resumeBlobPath);\n                \n                // Download to temporary file\n                const tempPath = `/tmp/resume_${applicationId}.pdf`;\n                await blobClient.downloadToFile(tempPath);\n                \n                return tempPath;\n            }\n\n            // Fallback: Generate a simple resume from profile data\n            if (userProfile.resume) {\n                const tempPath = `/tmp/resume_${applicationId}.txt`;\n                const fs = require('fs');\n                fs.writeFileSync(tempPath, userProfile.resume);\n                \n                return tempPath;\n            }\n\n            return null;\n\n        } catch (error) {\n            console.error('Error getting resume file:', error);\n            return null;\n        }\n    }\n\n    /**\n     * Submit the completed application\n     */\n    async submitApplication(page, portalHandler, applicationId) {\n        try {\n            // Look for submit button\n            const submitButton = await page.$(portalHandler.submitSelector);\n            \n            if (!submitButton) {\n                throw new Error('Submit button not found');\n            }\n\n            // Click submit\n            await submitButton.click();\n            \n            // Wait for submission to complete\n            await page.waitForTimeout(3000);\n            \n            // Check for success indicators\n            const successIndicators = [\n                'text=\"Application submitted\"',\n                'text=\"Thank you\"',\n                'text=\"Success\"',\n                '[class*=\"success\"]',\n                '[class*=\"confirmation\"]'\n            ];\n            \n            let submissionSuccess = false;\n            for (const indicator of successIndicators) {\n                const element = await page.$(indicator);\n                if (element) {\n                    submissionSuccess = true;\n                    break;\n                }\n            }\n\n            // Check for error indicators\n            const errorIndicators = [\n                'text=\"Error\"',\n                'text=\"Failed\"',\n                '[class*=\"error\"]',\n                '[class*=\"alert-danger\"]'\n            ];\n            \n            let submissionError = null;\n            for (const indicator of errorIndicators) {\n                const element = await page.$(indicator);\n                if (element) {\n                    submissionError = await element.textContent();\n                    break;\n                }\n            }\n\n            if (submissionError) {\n                throw new Error(`Application submission failed: ${submissionError}`);\n            }\n\n            await automationLogger.logInfo(\n                'headless_application_submitted',\n                `Application submitted successfully`,\n                { applicationId, success: submissionSuccess }\n            );\n\n            return {\n                success: submissionSuccess,\n                message: submissionSuccess ? 'Application submitted successfully' : 'Application status unclear'\n            };\n\n        } catch (error) {\n            await automationLogger.logError(\n                'headless_submission_error',\n                error,\n                { applicationId }\n            );\n            \n            return {\n                success: false,\n                message: `Submission failed: ${error.message}`\n            };\n        }\n    }\n\n    /**\n     * Capture screenshot for debugging and audit trail\n     */\n    async captureScreenshot(page, applicationId, stage) {\n        try {\n            const screenshotPath = `/tmp/screenshot_${applicationId}_${stage}_${Date.now()}.png`;\n            await page.screenshot({ \n                path: screenshotPath,\n                fullPage: true \n            });\n            \n            // Upload to blob storage if available\n            if (this.blobServiceClient) {\n                await this.uploadScreenshotToBlob(screenshotPath, applicationId, stage);\n            }\n            \n            return screenshotPath;\n\n        } catch (error) {\n            console.error('Error capturing screenshot:', error);\n            return null;\n        }\n    }\n\n    /**\n     * Upload screenshot to blob storage\n     */\n    async uploadScreenshotToBlob(screenshotPath, applicationId, stage) {\n        try {\n            const containerClient = this.blobServiceClient.getContainerClient('application-screenshots');\n            await containerClient.createIfNotExists();\n            \n            const blobName = `${applicationId}/${stage}_${Date.now()}.png`;\n            const blockBlobClient = containerClient.getBlockBlobClient(blobName);\n            \n            await blockBlobClient.uploadFile(screenshotPath);\n            \n            console.log(`Screenshot uploaded to blob: ${blobName}`);\n\n        } catch (error) {\n            console.error('Error uploading screenshot to blob:', error);\n        }\n    }\n\n    /**\n     * Log metrics to Application Insights\n     */\n    logApplicationInsights(applicationId, jobListing, userProfile, result, duration) {\n        try {\n            const eventName = result.success ? 'applicationSuccess' : 'applicationError';\n            \n            const properties = {\n                applicationId,\n                jobId: jobListing.id,\n                userId: userProfile.id,\n                portal: jobListing.jobPortal?.name || 'Unknown',\n                jobTitle: jobListing.title,\n                company: jobListing.company,\n                duration: `${duration}ms`,\n                attempts: result.attempts || 1,\n                timestamp: new Date().toISOString()\n            };\n\n            if (!result.success) {\n                properties.errorMessage = result.errorMessage || 'Unknown error';\n            }\n\n            // Log to Application Insights (assuming telemetry client is available)\n            console.log(`APPINSIGHTS ${JSON.stringify({\n                level: result.success ? 'info' : 'error',\n                eventName,\n                message: result.success ? \n                    `Application submitted successfully for job ${jobListing.id}` :\n                    `Application failed for job ${jobListing.id}: ${result.errorMessage}`,\n                properties\n            })}`);\n\n        } catch (error) {\n            console.error('Error logging to Application Insights:', error);\n        }\n    }\n\n    /**\n     * Clean up resources and close idle browsers\n     */\n    async cleanup() {\n        const now = Date.now();\n        const maxIdleTime = 5 * 60 * 1000; // 5 minutes\n\n        for (const [browserId, browserData] of this.browsers.entries()) {\n            if (now - browserData.lastActivity > maxIdleTime) {\n                try {\n                    await this.closeBrowser(browserData.browser);\n                    console.log(`🧹 Cleaned up idle browser: ${browserId}`);\n                } catch (error) {\n                    console.error(`Error cleaning up browser ${browserId}:`, error);\n                }\n            }\n        }\n    }\n\n    /**\n     * Track comprehensive application metrics using new metrics system\n     */\n    trackApplicationMetrics(applicationId, jobListing, userProfile, result, duration) {\n        try {\n            // Track application attempt\n            autoApplyMetrics.trackApplicationAttempt({\n                applicationId,\n                userId: userProfile.id,\n                jobId: jobListing.id,\n                portal: jobListing.jobPortal?.name || 'Unknown',\n                success: result.success,\n                duration,\n                attempts: result.attempts || 1,\n                errorMessage: result.errorMessage,\n                method: 'headless_browser'\n            });\n            \n            // Track browser resource usage\n            const memoryUsage = process.memoryUsage();\n            autoApplyMetrics.trackBrowserMetrics({\n                applicationId,\n                activeBrowsers: this.activeBrowsers,\n                maxBrowsers: this.maxConcurrentBrowsers,\n                memoryUsage: Math.round(memoryUsage.heapUsed / 1024 / 1024), // MB\n                queueLength: this.getQueueLength()\n            });\n            \n            // Track portal-specific metrics\n            autoApplyMetrics.trackPortalMetrics({\n                portal: jobListing.jobPortal?.name || 'Unknown',\n                applicationAttempts: 1,\n                successfulApplications: result.success ? 1 : 0,\n                averageTime: duration,\n                commonErrors: result.errorMessage || 'none'\n            });\n            \n        } catch (error) {\n            console.error('Error tracking application metrics:', error);\n        }\n    }\n    \n    /**\n     * Get current queue length for metrics\n     */\n    getQueueLength() {\n        try {\n            if (this.limiter && typeof this.limiter.counts === 'function') {\n                const counts = this.limiter.counts();\n                return (counts.RECEIVED || 0) - (counts.DONE || 0);\n            }\n        } catch (error) {\n            // Fallback for mocked or unavailable limiter\n            return 0;\n        }\n        return 0;\n    }\n\n    /**\n     * Get service health status\n     */\n    getHealthStatus() {\n        const queuedOperations = this.getQueueLength();\n        \n        const healthStatus = {\n            activeBrowsers: this.activeBrowsers,\n            maxConcurrentBrowsers: this.maxConcurrentBrowsers,\n            queuedOperations,\n            status: this.activeBrowsers < this.maxConcurrentBrowsers ? 'healthy' : 'at-capacity',\n            metrics: autoApplyMetrics.getHealthStatus()\n        };\n        \n        // Track health metrics\n        autoApplyMetrics.trackBrowserMetrics({\n            activeBrowsers: this.activeBrowsers,\n            maxBrowsers: this.maxConcurrentBrowsers,\n            queueLength: queuedOperations\n        });\n        \n        return healthStatus;\n    }\n}\n\n// Export singleton instance\nmodule.exports = new HeadlessBrowserService();\n"],"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","ignoreList":[]}