6493f1a73ae7e4369e2dc776af640d14
"use strict";

/* istanbul ignore next */
function cov_fb5mtmk3e() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/services/gdpr-compliance-service.ts";
  var hash = "f2d2235f8a375d1f4425aa7424cfaee81a2374f4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/services/gdpr-compliance-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 12,
          column: 3
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 3,
          column: 26
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "3": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 52
        }
      },
      "4": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 7,
          column: 5
        }
      },
      "5": {
        start: {
          line: 6,
          column: 6
        },
        end: {
          line: 6,
          column: 68
        }
      },
      "6": {
        start: {
          line: 6,
          column: 51
        },
        end: {
          line: 6,
          column: 63
        }
      },
      "7": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 39
        }
      },
      "8": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "9": {
        start: {
          line: 10,
          column: 26
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "10": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 17
        }
      },
      "11": {
        start: {
          line: 13,
          column: 25
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "12": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 72
        }
      },
      "13": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 21
        }
      },
      "14": {
        start: {
          line: 18,
          column: 19
        },
        end: {
          line: 34,
          column: 4
        }
      },
      "15": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "16": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 24,
          column: 10
        }
      },
      "17": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 23
        }
      },
      "18": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "19": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "20": {
        start: {
          line: 22,
          column: 77
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "21": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 22
        }
      },
      "22": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 26
        }
      },
      "23": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 33,
          column: 6
        }
      },
      "24": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "25": {
        start: {
          line: 28,
          column: 35
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "26": {
        start: {
          line: 29,
          column: 21
        },
        end: {
          line: 29,
          column: 23
        }
      },
      "27": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "28": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "29": {
        start: {
          line: 30,
          column: 38
        },
        end: {
          line: 30,
          column: 50
        }
      },
      "30": {
        start: {
          line: 30,
          column: 56
        },
        end: {
          line: 30,
          column: 57
        }
      },
      "31": {
        start: {
          line: 30,
          column: 78
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "32": {
        start: {
          line: 30,
          column: 102
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "33": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 40
        }
      },
      "34": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 22
        }
      },
      "35": {
        start: {
          line: 35,
          column: 0
        },
        end: {
          line: 35,
          column: 62
        }
      },
      "36": {
        start: {
          line: 36,
          column: 0
        },
        end: {
          line: 36,
          column: 71
        }
      },
      "37": {
        start: {
          line: 37,
          column: 29
        },
        end: {
          line: 37,
          column: 73
        }
      },
      "38": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 38,
          column: 47
        }
      },
      "39": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 23
        }
      },
      "40": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 46,
          column: 9
        }
      },
      "41": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 56
        }
      },
      "42": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 23
        }
      },
      "43": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "44": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 73
        }
      },
      "45": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 46
        }
      },
      "46": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 67,
          column: 9
        }
      },
      "47": {
        start: {
          line: 58,
          column: 23
        },
        end: {
          line: 58,
          column: 41
        }
      },
      "48": {
        start: {
          line: 59,
          column: 31
        },
        end: {
          line: 59,
          column: 80
        }
      },
      "49": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 153
        }
      },
      "50": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 49
        }
      },
      "51": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 61
        }
      },
      "52": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 61
        }
      },
      "53": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "54": {
        start: {
          line: 71,
          column: 23
        },
        end: {
          line: 71,
          column: 41
        }
      },
      "55": {
        start: {
          line: 72,
          column: 31
        },
        end: {
          line: 72,
          column: 72
        }
      },
      "56": {
        start: {
          line: 73,
          column: 24
        },
        end: {
          line: 73,
          column: 46
        }
      },
      "57": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 76,
          column: 13
        }
      },
      "58": {
        start: {
          line: 75,
          column: 16
        },
        end: {
          line: 75,
          column: 28
        }
      },
      "59": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 30
        }
      },
      "60": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 59
        }
      },
      "61": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 63
        }
      },
      "62": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "63": {
        start: {
          line: 86,
          column: 23
        },
        end: {
          line: 86,
          column: 41
        }
      },
      "64": {
        start: {
          line: 87,
          column: 31
        },
        end: {
          line: 87,
          column: 72
        }
      },
      "65": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 108
        }
      },
      "66": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 76
        }
      },
      "67": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 60
        }
      },
      "68": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 61
        }
      },
      "69": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 107,
          column: 10
        }
      },
      "70": {
        start: {
          line: 110,
          column: 30
        },
        end: {
          line: 110,
          column: 57
        }
      },
      "71": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 115,
          column: 9
        }
      },
      "72": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 74
        }
      },
      "73": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 39
        }
      },
      "74": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "75": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 78
        }
      },
      "76": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 38
        }
      },
      "77": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 122,
          column: 9
        }
      },
      "78": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 39
        }
      },
      "79": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 130,
          column: 9
        }
      },
      "80": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 128,
          column: 14
        }
      },
      "81": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 41
        }
      },
      "82": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 48
        }
      },
      "83": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 133,
          column: 29
        }
      },
      "84": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 156,
          column: 9
        }
      },
      "85": {
        start: {
          line: 138,
          column: 30
        },
        end: {
          line: 138,
          column: 54
        }
      },
      "86": {
        start: {
          line: 139,
          column: 36
        },
        end: {
          line: 146,
          column: 13
        }
      },
      "87": {
        start: {
          line: 147,
          column: 23
        },
        end: {
          line: 147,
          column: 41
        }
      },
      "88": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 92
        }
      },
      "89": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 63
        }
      },
      "90": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 29
        }
      },
      "91": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 68
        }
      },
      "92": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 63
        }
      },
      "93": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 209,
          column: 9
        }
      },
      "94": {
        start: {
          line: 160,
          column: 23
        },
        end: {
          line: 160,
          column: 41
        }
      },
      "95": {
        start: {
          line: 161,
          column: 31
        },
        end: {
          line: 161,
          column: 83
        }
      },
      "96": {
        start: {
          line: 162,
          column: 31
        },
        end: {
          line: 162,
          column: 53
        }
      },
      "97": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 165,
          column: 13
        }
      },
      "98": {
        start: {
          line: 164,
          column: 16
        },
        end: {
          line: 164,
          column: 62
        }
      },
      "99": {
        start: {
          line: 166,
          column: 28
        },
        end: {
          line: 166,
          column: 45
        }
      },
      "100": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 168,
          column: 62
        }
      },
      "101": {
        start: {
          line: 169,
          column: 32
        },
        end: {
          line: 169,
          column: 34
        }
      },
      "102": {
        start: {
          line: 171,
          column: 40
        },
        end: {
          line: 179,
          column: 13
        }
      },
      "103": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 184,
          column: 13
        }
      },
      "104": {
        start: {
          line: 181,
          column: 32
        },
        end: {
          line: 181,
          column: 91
        }
      },
      "105": {
        start: {
          line: 182,
          column: 16
        },
        end: {
          line: 183,
          column: 49
        }
      },
      "106": {
        start: {
          line: 183,
          column: 20
        },
        end: {
          line: 183,
          column: 49
        }
      },
      "107": {
        start: {
          line: 186,
          column: 35
        },
        end: {
          line: 186,
          column: 79
        }
      },
      "108": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 188,
          column: 44
        }
      },
      "109": {
        start: {
          line: 188,
          column: 16
        },
        end: {
          line: 188,
          column: 44
        }
      },
      "110": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 66
        }
      },
      "111": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 196,
          column: 15
        }
      },
      "112": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 198,
          column: 68
        }
      },
      "113": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 68
        }
      },
      "114": {
        start: {
          line: 203,
          column: 27
        },
        end: {
          line: 203,
          column: 45
        }
      },
      "115": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 207,
          column: 15
        }
      },
      "116": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 208,
          column: 24
        }
      },
      "117": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 220,
          column: 9
        }
      },
      "118": {
        start: {
          line: 213,
          column: 23
        },
        end: {
          line: 213,
          column: 41
        }
      },
      "119": {
        start: {
          line: 214,
          column: 31
        },
        end: {
          line: 214,
          column: 95
        }
      },
      "120": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 64
        }
      },
      "121": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 218,
          column: 75
        }
      },
      "122": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 69
        }
      },
      "123": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 254,
          column: 9
        }
      },
      "124": {
        start: {
          line: 225,
          column: 29
        },
        end: {
          line: 229,
          column: 13
        }
      },
      "125": {
        start: {
          line: 231,
          column: 32
        },
        end: {
          line: 231,
          column: 82
        }
      },
      "126": {
        start: {
          line: 232,
          column: 23
        },
        end: {
          line: 232,
          column: 41
        }
      },
      "127": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 238,
          column: 13
        }
      },
      "128": {
        start: {
          line: 234,
          column: 29
        },
        end: {
          line: 236,
          column: 26
        }
      },
      "129": {
        start: {
          line: 237,
          column: 16
        },
        end: {
          line: 237,
          column: 116
        }
      },
      "130": {
        start: {
          line: 237,
          column: 72
        },
        end: {
          line: 237,
          column: 113
        }
      },
      "131": {
        start: {
          line: 240,
          column: 31
        },
        end: {
          line: 240,
          column: 84
        }
      },
      "132": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 243,
          column: 13
        }
      },
      "133": {
        start: {
          line: 242,
          column: 16
        },
        end: {
          line: 242,
          column: 59
        }
      },
      "134": {
        start: {
          line: 245,
          column: 29
        },
        end: {
          line: 245,
          column: 75
        }
      },
      "135": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 248,
          column: 13
        }
      },
      "136": {
        start: {
          line: 247,
          column: 16
        },
        end: {
          line: 247,
          column: 54
        }
      },
      "137": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 249,
          column: 28
        }
      },
      "138": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 252,
          column: 63
        }
      },
      "139": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 58
        }
      },
      "140": {
        start: {
          line: 258,
          column: 35
        },
        end: {
          line: 258,
          column: 51
        }
      },
      "141": {
        start: {
          line: 259,
          column: 31
        },
        end: {
          line: 261,
          column: 41
        }
      },
      "142": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 262,
          column: 45
        }
      },
      "143": {
        start: {
          line: 265,
          column: 24
        },
        end: {
          line: 265,
          column: 48
        }
      },
      "144": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 268,
          column: 9
        }
      },
      "145": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 267,
          column: 116
        }
      },
      "146": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 269,
          column: 42
        }
      },
      "147": {
        start: {
          line: 273,
          column: 8
        },
        end: {
          line: 273,
          column: 22
        }
      },
      "148": {
        start: {
          line: 276,
          column: 19
        },
        end: {
          line: 276,
          column: 37
        }
      },
      "149": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 282,
          column: 11
        }
      },
      "150": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 286,
          column: 71
        }
      },
      "151": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 289,
          column: 73
        }
      },
      "152": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 292,
          column: 53
        }
      },
      "153": {
        start: {
          line: 295,
          column: 8
        },
        end: {
          line: 295,
          column: 77
        }
      },
      "154": {
        start: {
          line: 295,
          column: 40
        },
        end: {
          line: 295,
          column: 65
        }
      },
      "155": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 300,
          column: 51
        }
      },
      "156": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 307,
          column: 10
        }
      },
      "157": {
        start: {
          line: 310,
          column: 26
        },
        end: {
          line: 310,
          column: 53
        }
      },
      "158": {
        start: {
          line: 312,
          column: 24
        },
        end: {
          line: 312,
          column: 82
        }
      },
      "159": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 317,
          column: 11
        }
      },
      "160": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 316,
          column: 13
        }
      },
      "161": {
        start: {
          line: 315,
          column: 16
        },
        end: {
          line: 315,
          column: 38
        }
      },
      "162": {
        start: {
          line: 318,
          column: 8
        },
        end: {
          line: 318,
          column: 25
        }
      },
      "163": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 321,
          column: 78
        }
      },
      "164": {
        start: {
          line: 326,
          column: 8
        },
        end: {
          line: 326,
          column: 92
        }
      },
      "165": {
        start: {
          line: 329,
          column: 8
        },
        end: {
          line: 344,
          column: 9
        }
      },
      "166": {
        start: {
          line: 330,
          column: 23
        },
        end: {
          line: 330,
          column: 41
        }
      },
      "167": {
        start: {
          line: 331,
          column: 26
        },
        end: {
          line: 331,
          column: 36
        }
      },
      "168": {
        start: {
          line: 332,
          column: 25
        },
        end: {
          line: 334,
          column: 22
        }
      },
      "169": {
        start: {
          line: 335,
          column: 12
        },
        end: {
          line: 337,
          column: 15
        }
      },
      "170": {
        start: {
          line: 336,
          column: 16
        },
        end: {
          line: 336,
          column: 38
        }
      },
      "171": {
        start: {
          line: 338,
          column: 12
        },
        end: {
          line: 338,
          column: 33
        }
      },
      "172": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 339,
          column: 40
        }
      },
      "173": {
        start: {
          line: 342,
          column: 12
        },
        end: {
          line: 342,
          column: 75
        }
      },
      "174": {
        start: {
          line: 343,
          column: 12
        },
        end: {
          line: 343,
          column: 25
        }
      },
      "175": {
        start: {
          line: 347,
          column: 27
        },
        end: {
          line: 347,
          column: 32
        }
      },
      "176": {
        start: {
          line: 348,
          column: 8
        },
        end: {
          line: 362,
          column: 9
        }
      },
      "177": {
        start: {
          line: 350,
          column: 12
        },
        end: {
          line: 350,
          column: 69
        }
      },
      "178": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 358,
          column: 13
        }
      },
      "179": {
        start: {
          line: 352,
          column: 16
        },
        end: {
          line: 352,
          column: 88
        }
      },
      "180": {
        start: {
          line: 353,
          column: 42
        },
        end: {
          line: 353,
          column: 112
        }
      },
      "181": {
        start: {
          line: 354,
          column: 16
        },
        end: {
          line: 357,
          column: 17
        }
      },
      "182": {
        start: {
          line: 355,
          column: 20
        },
        end: {
          line: 355,
          column: 100
        }
      },
      "183": {
        start: {
          line: 356,
          column: 20
        },
        end: {
          line: 356,
          column: 40
        }
      },
      "184": {
        start: {
          line: 361,
          column: 12
        },
        end: {
          line: 361,
          column: 81
        }
      },
      "185": {
        start: {
          line: 364,
          column: 8
        },
        end: {
          line: 381,
          column: 9
        }
      },
      "186": {
        start: {
          line: 366,
          column: 35
        },
        end: {
          line: 366,
          column: 118
        }
      },
      "187": {
        start: {
          line: 366,
          column: 70
        },
        end: {
          line: 366,
          column: 117
        }
      },
      "188": {
        start: {
          line: 367,
          column: 28
        },
        end: {
          line: 367,
          column: 40
        }
      },
      "189": {
        start: {
          line: 368,
          column: 27
        },
        end: {
          line: 368,
          column: 43
        }
      },
      "190": {
        start: {
          line: 369,
          column: 28
        },
        end: {
          line: 371,
          column: 14
        }
      },
      "191": {
        start: {
          line: 372,
          column: 12
        },
        end: {
          line: 377,
          column: 13
        }
      },
      "192": {
        start: {
          line: 373,
          column: 39
        },
        end: {
          line: 373,
          column: 71
        }
      },
      "193": {
        start: {
          line: 373,
          column: 57
        },
        end: {
          line: 373,
          column: 70
        }
      },
      "194": {
        start: {
          line: 374,
          column: 16
        },
        end: {
          line: 374,
          column: 50
        }
      },
      "195": {
        start: {
          line: 375,
          column: 16
        },
        end: {
          line: 375,
          column: 106
        }
      },
      "196": {
        start: {
          line: 376,
          column: 16
        },
        end: {
          line: 376,
          column: 36
        }
      },
      "197": {
        start: {
          line: 380,
          column: 12
        },
        end: {
          line: 380,
          column: 82
        }
      },
      "198": {
        start: {
          line: 382,
          column: 8
        },
        end: {
          line: 382,
          column: 28
        }
      },
      "199": {
        start: {
          line: 387,
          column: 8
        },
        end: {
          line: 387,
          column: 70
        }
      },
      "200": {
        start: {
          line: 390,
          column: 19
        },
        end: {
          line: 390,
          column: 37
        }
      },
      "201": {
        start: {
          line: 391,
          column: 8
        },
        end: {
          line: 397,
          column: 11
        }
      },
      "202": {
        start: {
          line: 400,
          column: 0
        },
        end: {
          line: 400,
          column: 54
        }
      },
      "203": {
        start: {
          line: 401,
          column: 0
        },
        end: {
          line: 401,
          column: 68
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 2,
            column: 75
          }
        },
        loc: {
          start: {
            line: 2,
            column: 96
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 39
          }
        },
        loc: {
          start: {
            line: 6,
            column: 49
          },
          end: {
            line: 6,
            column: 65
          }
        },
        line: 6
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 9,
            column: 7
          }
        },
        loc: {
          start: {
            line: 9,
            column: 28
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 9
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 13,
            column: 81
          }
        },
        loc: {
          start: {
            line: 13,
            column: 95
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 13
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 15,
            column: 6
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 15
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 18,
            column: 51
          },
          end: {
            line: 18,
            column: 52
          }
        },
        loc: {
          start: {
            line: 18,
            column: 63
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 18
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 19,
            column: 19
          }
        },
        loc: {
          start: {
            line: 19,
            column: 30
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 19
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 20,
            column: 49
          }
        },
        loc: {
          start: {
            line: 20,
            column: 61
          },
          end: {
            line: 24,
            column: 9
          }
        },
        line: 20
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 12
          }
        },
        loc: {
          start: {
            line: 27,
            column: 26
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 27
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 40,
            column: 5
          }
        },
        loc: {
          start: {
            line: 40,
            column: 18
          },
          end: {
            line: 42,
            column: 5
          }
        },
        line: 40
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        loc: {
          start: {
            line: 43,
            column: 18
          },
          end: {
            line: 48,
            column: 5
          }
        },
        line: 43
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 49,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        },
        loc: {
          start: {
            line: 49,
            column: 25
          },
          end: {
            line: 54,
            column: 5
          }
        },
        line: 49
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        },
        loc: {
          start: {
            line: 56,
            column: 33
          },
          end: {
            line: 68,
            column: 5
          }
        },
        line: 56
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        loc: {
          start: {
            line: 69,
            column: 29
          },
          end: {
            line: 83,
            column: 5
          }
        },
        line: 69
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        loc: {
          start: {
            line: 84,
            column: 41
          },
          end: {
            line: 95,
            column: 5
          }
        },
        line: 84
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 97,
            column: 4
          },
          end: {
            line: 97,
            column: 5
          }
        },
        loc: {
          start: {
            line: 97,
            column: 33
          },
          end: {
            line: 108,
            column: 5
          }
        },
        line: 97
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 109,
            column: 4
          },
          end: {
            line: 109,
            column: 5
          }
        },
        loc: {
          start: {
            line: 109,
            column: 35
          },
          end: {
            line: 134,
            column: 5
          }
        },
        line: 109
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 136,
            column: 4
          },
          end: {
            line: 136,
            column: 5
          }
        },
        loc: {
          start: {
            line: 136,
            column: 59
          },
          end: {
            line: 157,
            column: 5
          }
        },
        line: 136
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 158,
            column: 4
          },
          end: {
            line: 158,
            column: 5
          }
        },
        loc: {
          start: {
            line: 158,
            column: 41
          },
          end: {
            line: 210,
            column: 5
          }
        },
        line: 158
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 211,
            column: 4
          },
          end: {
            line: 211,
            column: 5
          }
        },
        loc: {
          start: {
            line: 211,
            column: 46
          },
          end: {
            line: 221,
            column: 5
          }
        },
        line: 211
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 223,
            column: 4
          },
          end: {
            line: 223,
            column: 5
          }
        },
        loc: {
          start: {
            line: 223,
            column: 33
          },
          end: {
            line: 255,
            column: 5
          }
        },
        line: 223
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 237,
            column: 62
          },
          end: {
            line: 237,
            column: 63
          }
        },
        loc: {
          start: {
            line: 237,
            column: 72
          },
          end: {
            line: 237,
            column: 113
          }
        },
        line: 237
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 257,
            column: 4
          },
          end: {
            line: 257,
            column: 5
          }
        },
        loc: {
          start: {
            line: 257,
            column: 21
          },
          end: {
            line: 263,
            column: 5
          }
        },
        line: 257
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 264,
            column: 4
          },
          end: {
            line: 264,
            column: 5
          }
        },
        loc: {
          start: {
            line: 264,
            column: 27
          },
          end: {
            line: 270,
            column: 5
          }
        },
        line: 264
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 272,
            column: 4
          },
          end: {
            line: 272,
            column: 5
          }
        },
        loc: {
          start: {
            line: 272,
            column: 37
          },
          end: {
            line: 274,
            column: 5
          }
        },
        line: 272
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 275,
            column: 4
          },
          end: {
            line: 275,
            column: 5
          }
        },
        loc: {
          start: {
            line: 275,
            column: 36
          },
          end: {
            line: 283,
            column: 5
          }
        },
        line: 275
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 284,
            column: 4
          },
          end: {
            line: 284,
            column: 5
          }
        },
        loc: {
          start: {
            line: 284,
            column: 23
          },
          end: {
            line: 287,
            column: 5
          }
        },
        line: 284
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 288,
            column: 4
          },
          end: {
            line: 288,
            column: 5
          }
        },
        loc: {
          start: {
            line: 288,
            column: 29
          },
          end: {
            line: 290,
            column: 5
          }
        },
        line: 288
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 291,
            column: 4
          },
          end: {
            line: 291,
            column: 5
          }
        },
        loc: {
          start: {
            line: 291,
            column: 21
          },
          end: {
            line: 293,
            column: 5
          }
        },
        line: 291
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 294,
            column: 4
          },
          end: {
            line: 294,
            column: 5
          }
        },
        loc: {
          start: {
            line: 294,
            column: 22
          },
          end: {
            line: 296,
            column: 5
          }
        },
        line: 294
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 295,
            column: 35
          },
          end: {
            line: 295,
            column: 36
          }
        },
        loc: {
          start: {
            line: 295,
            column: 40
          },
          end: {
            line: 295,
            column: 65
          }
        },
        line: 295
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 297,
            column: 4
          },
          end: {
            line: 297,
            column: 5
          }
        },
        loc: {
          start: {
            line: 297,
            column: 34
          },
          end: {
            line: 301,
            column: 5
          }
        },
        line: 297
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 302,
            column: 4
          },
          end: {
            line: 302,
            column: 5
          }
        },
        loc: {
          start: {
            line: 302,
            column: 33
          },
          end: {
            line: 308,
            column: 5
          }
        },
        line: 302
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 309,
            column: 4
          },
          end: {
            line: 309,
            column: 5
          }
        },
        loc: {
          start: {
            line: 309,
            column: 31
          },
          end: {
            line: 319,
            column: 5
          }
        },
        line: 309
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 313,
            column: 24
          },
          end: {
            line: 313,
            column: 25
          }
        },
        loc: {
          start: {
            line: 313,
            column: 31
          },
          end: {
            line: 317,
            column: 9
          }
        },
        line: 313
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 320,
            column: 4
          },
          end: {
            line: 320,
            column: 5
          }
        },
        loc: {
          start: {
            line: 320,
            column: 24
          },
          end: {
            line: 322,
            column: 5
          }
        },
        line: 320
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 323,
            column: 4
          },
          end: {
            line: 323,
            column: 5
          }
        },
        loc: {
          start: {
            line: 323,
            column: 50
          },
          end: {
            line: 327,
            column: 5
          }
        },
        line: 323
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 328,
            column: 4
          },
          end: {
            line: 328,
            column: 5
          }
        },
        loc: {
          start: {
            line: 328,
            column: 55
          },
          end: {
            line: 345,
            column: 5
          }
        },
        line: 328
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 335,
            column: 30
          },
          end: {
            line: 335,
            column: 31
          }
        },
        loc: {
          start: {
            line: 335,
            column: 39
          },
          end: {
            line: 337,
            column: 13
          }
        },
        line: 335
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 346,
            column: 4
          },
          end: {
            line: 346,
            column: 5
          }
        },
        loc: {
          start: {
            line: 346,
            column: 36
          },
          end: {
            line: 383,
            column: 5
          }
        },
        line: 346
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 366,
            column: 64
          },
          end: {
            line: 366,
            column: 65
          }
        },
        loc: {
          start: {
            line: 366,
            column: 70
          },
          end: {
            line: 366,
            column: 117
          }
        },
        line: 366
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 373,
            column: 49
          },
          end: {
            line: 373,
            column: 50
          }
        },
        loc: {
          start: {
            line: 373,
            column: 57
          },
          end: {
            line: 373,
            column: 70
          }
        },
        line: 373
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 384,
            column: 4
          },
          end: {
            line: 384,
            column: 5
          }
        },
        loc: {
          start: {
            line: 384,
            column: 45
          },
          end: {
            line: 388,
            column: 5
          }
        },
        line: 384
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 389,
            column: 4
          },
          end: {
            line: 389,
            column: 5
          }
        },
        loc: {
          start: {
            line: 389,
            column: 47
          },
          end: {
            line: 398,
            column: 5
          }
        },
        line: 389
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 12,
            column: 3
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 9,
            column: 1
          }
        }, {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 5
      },
      "4": {
        loc: {
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 13
          }
        }, {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "5": {
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 47
          }
        }, {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "6": {
        loc: {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 63
          }
        }, {
          start: {
            line: 5,
            column: 67
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "7": {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "8": {
        loc: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 17,
            column: 2
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 30
          }
        }, {
          start: {
            line: 13,
            column: 34
          },
          end: {
            line: 13,
            column: 57
          }
        }, {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "9": {
        loc: {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 15,
            column: 1
          }
        }, {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "10": {
        loc: {
          start: {
            line: 18,
            column: 19
          },
          end: {
            line: 34,
            column: 4
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 18,
            column: 24
          }
        }, {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 45
          }
        }, {
          start: {
            line: 18,
            column: 50
          },
          end: {
            line: 34,
            column: 4
          }
        }],
        line: 18
      },
      "11": {
        loc: {
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 20,
            column: 44
          }
        }, {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 24,
            column: 9
          }
        }],
        line: 20
      },
      "12": {
        loc: {
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "13": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "14": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 15
          }
        }, {
          start: {
            line: 28,
            column: 19
          },
          end: {
            line: 28,
            column: 33
          }
        }],
        line: 28
      },
      "15": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "16": {
        loc: {
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "17": {
        loc: {
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "18": {
        loc: {
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "19": {
        loc: {
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 76,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 76,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "20": {
        loc: {
          start: {
            line: 104,
            column: 23
          },
          end: {
            line: 104,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 104,
            column: 40
          },
          end: {
            line: 104,
            column: 79
          }
        }, {
          start: {
            line: 104,
            column: 82
          },
          end: {
            line: 104,
            column: 91
          }
        }],
        line: 104
      },
      "21": {
        loc: {
          start: {
            line: 105,
            column: 22
          },
          end: {
            line: 105,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 105,
            column: 39
          },
          end: {
            line: 105,
            column: 77
          }
        }, {
          start: {
            line: 105,
            column: 80
          },
          end: {
            line: 105,
            column: 89
          }
        }],
        line: 105
      },
      "22": {
        loc: {
          start: {
            line: 106,
            column: 44
          },
          end: {
            line: 106,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 106,
            column: 44
          },
          end: {
            line: 106,
            column: 57
          }
        }, {
          start: {
            line: 106,
            column: 61
          },
          end: {
            line: 106,
            column: 63
          }
        }],
        line: 106
      },
      "23": {
        loc: {
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 112
      },
      "24": {
        loc: {
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "25": {
        loc: {
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 122,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 122,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "26": {
        loc: {
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 130,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 130,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 123
      },
      "27": {
        loc: {
          start: {
            line: 163,
            column: 12
          },
          end: {
            line: 165,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 12
          },
          end: {
            line: 165,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "28": {
        loc: {
          start: {
            line: 182,
            column: 16
          },
          end: {
            line: 183,
            column: 49
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 182,
            column: 16
          },
          end: {
            line: 183,
            column: 49
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 182
      },
      "29": {
        loc: {
          start: {
            line: 187,
            column: 12
          },
          end: {
            line: 188,
            column: 44
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 187,
            column: 12
          },
          end: {
            line: 188,
            column: 44
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 187
      },
      "30": {
        loc: {
          start: {
            line: 206,
            column: 23
          },
          end: {
            line: 206,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 206,
            column: 23
          },
          end: {
            line: 206,
            column: 36
          }
        }, {
          start: {
            line: 206,
            column: 40
          },
          end: {
            line: 206,
            column: 55
          }
        }],
        line: 206
      },
      "31": {
        loc: {
          start: {
            line: 215,
            column: 19
          },
          end: {
            line: 215,
            column: 63
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 215,
            column: 39
          },
          end: {
            line: 215,
            column: 56
          }
        }, {
          start: {
            line: 215,
            column: 59
          },
          end: {
            line: 215,
            column: 63
          }
        }],
        line: 215
      },
      "32": {
        loc: {
          start: {
            line: 241,
            column: 12
          },
          end: {
            line: 243,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 241,
            column: 12
          },
          end: {
            line: 243,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 241
      },
      "33": {
        loc: {
          start: {
            line: 246,
            column: 12
          },
          end: {
            line: 248,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 246,
            column: 12
          },
          end: {
            line: 248,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 246
      },
      "34": {
        loc: {
          start: {
            line: 259,
            column: 31
          },
          end: {
            line: 261,
            column: 41
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 260,
            column: 14
          },
          end: {
            line: 260,
            column: 105
          }
        }, {
          start: {
            line: 261,
            column: 14
          },
          end: {
            line: 261,
            column: 41
          }
        }],
        line: 259
      },
      "35": {
        loc: {
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 266
      },
      "36": {
        loc: {
          start: {
            line: 314,
            column: 12
          },
          end: {
            line: 316,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 314,
            column: 12
          },
          end: {
            line: 316,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 314
      },
      "37": {
        loc: {
          start: {
            line: 351,
            column: 12
          },
          end: {
            line: 358,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 351,
            column: 12
          },
          end: {
            line: 358,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 351
      },
      "38": {
        loc: {
          start: {
            line: 354,
            column: 16
          },
          end: {
            line: 357,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 354,
            column: 16
          },
          end: {
            line: 357,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 354
      },
      "39": {
        loc: {
          start: {
            line: 372,
            column: 12
          },
          end: {
            line: 377,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 372,
            column: 12
          },
          end: {
            line: 377,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 372
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/services/gdpr-compliance-service.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/services/gdpr-compliance-service.ts"],
      sourcesContent: ["import { getFirestore } from 'firebase-admin/firestore';\nimport { azureBlobStorage } from '@/lib/services/azure-blob-storage';\nimport { getDBService } from '@/lib/firebase/admin';\n\nexport interface UserConsent {\n  userId: string;\n  analytics: boolean;\n  marketing: boolean;\n  functional: boolean;\n  consentDate: Date;\n  ipAddress?: string;\n  userAgent?: string;\n  version: string; // Privacy policy version\n}\n\nexport interface DataDeletionRequest {\n  userId: string;\n  requestDate: Date;\n  requestedBy: string; // email of person making request\n  reason?: string;\n  status: 'pending' | 'processing' | 'completed' | 'failed';\n  completedDate?: Date;\n  deletedData: string[]; // list of data types deleted\n}\n\nexport interface AnonymizedAnalytics {\n  timestamp: Date;\n  event: string;\n  page: string;\n  userId: string; // hashed/pseudonymized\n  sessionId: string; // hashed\n  userAgent?: string; // anonymized\n  location?: {\n    country: string;\n    region?: string; // only if consent given\n  };\n  metadata: Record<string, any>;\n}\n\nexport class GDPRComplianceService {\n  private db: Awaited<ReturnType<typeof getDBService>> | null = null;\n  private static instance: GDPRComplianceService;\n  \n  private async getDB() {\n    if (!this.db) {\n      this.db = await getDBService();\n    }\n    return this.db;\n  }\n\n  public static getInstance(): GDPRComplianceService {\n    if (!GDPRComplianceService.instance) {\n      GDPRComplianceService.instance = new GDPRComplianceService();\n    }\n    return GDPRComplianceService.instance;\n  }\n\n  // Consent Management\n  async recordConsent(consent: UserConsent): Promise<void> {\n    try {\n      const db = await this.getDB();\n      const consentRef = db.collection('userConsents').doc(consent.userId);\n      await consentRef.set({\n        ...consent,\n        consentDate: new Date(),\n        version: this.getCurrentPrivacyPolicyVersion()\n      });\n\n      // Log consent change for audit trail\n      await this.logConsentChange(consent);\n    } catch (error) {\n      console.error('Error recording consent:', error);\n      throw new Error('Failed to record user consent');\n    }\n  }\n\n  async getConsent(userId: string): Promise<UserConsent | null> {\n    try {\n      const db = await this.getDB();\n      const consentRef = db.collection('userConsents').doc(userId);\n      const doc = await consentRef.get();\n      \n      if (!doc.exists) {\n        return null;\n      }\n\n      return (doc.data() as any) as UserConsent;\n    } catch (error) {\n      console.error('Error getting consent:', error);\n      throw new Error('Failed to retrieve user consent');\n    }\n  }\n\n  async updateConsent(userId: string, updates: Partial<UserConsent>): Promise<void> {\n    try {\n      const db = await this.getDB();\n      const consentRef = db.collection('userConsents').doc(userId);\n      await consentRef.update({\n        ...updates,\n        lastUpdated: new Date()\n      });\n\n      await this.logConsentChange({ userId, ...updates } as UserConsent);\n    } catch (error) {\n      console.error('Error updating consent:', error);\n      throw new Error('Failed to update user consent');\n    }\n  }\n\n  // Data Anonymization\n  anonymizeAnalyticsData(data: {\n    userId: string;\n    sessionId: string;\n    ipAddress?: string;\n    userAgent?: string;\n    event: string;\n    page: string;\n    metadata?: Record<string, any>;\n  }): AnonymizedAnalytics {\n    return {\n      timestamp: new Date(),\n      event: data.event,\n      page: data.page,\n      userId: this.hashUserId(data.userId),\n      sessionId: this.hashSessionId(data.sessionId),\n      userAgent: data.userAgent ? this.anonymizeUserAgent(data.userAgent) : undefined,\n      location: data.ipAddress ? this.getLocationFromIP(data.ipAddress) : undefined,\n      metadata: this.sanitizeMetadata(data.metadata || {})\n    };\n  }\n\n  pseudonymizeUserData(userData: any): any {\n    const pseudonymized = { ...userData };\n    \n    // Remove or hash PII fields\n    if (pseudonymized.email) {\n      pseudonymized.emailHash = this.hashEmail(pseudonymized.email);\n      delete pseudonymized.email;\n    }\n    \n    if (pseudonymized.name) {\n      pseudonymized.nameInitials = this.getInitials(pseudonymized.name);\n      delete pseudonymized.name;\n    }\n    \n    if (pseudonymized.phone) {\n      delete pseudonymized.phone;\n    }\n    \n    if (pseudonymized.address) {\n      // Keep only city and country\n      pseudonymized.location = {\n        city: pseudonymized.address.city,\n        country: pseudonymized.address.country\n      };\n      delete pseudonymized.address;\n    }\n\n    // Add anonymization timestamp\n    pseudonymized.anonymizedAt = new Date();\n    \n    return pseudonymized;\n  }\n\n  // Data Deletion\n  async requestDataDeletion(\n    userId: string, \n    requestedBy: string, \n    reason?: string\n  ): Promise<string> {\n    try {\n      const requestId = this.generateRequestId();\n      const deletionRequest: DataDeletionRequest = {\n        userId,\n        requestDate: new Date(),\n        requestedBy,\n        reason,\n        status: 'pending',\n        deletedData: []\n      };\n\n      const db = await this.getDB();\n      await db.collection('dataDeletionRequests').doc(requestId).set(deletionRequest);\n      \n      // Schedule deletion process (30-day compliance window)\n      await this.scheduleDataDeletion(requestId, userId);\n      \n      return requestId;\n    } catch (error) {\n      console.error('Error requesting data deletion:', error);\n      throw new Error('Failed to request data deletion');\n    }\n  }\n\n  async processDataDeletion(requestId: string): Promise<void> {\n    try {\n      const db = await this.getDB();\n      const requestRef = db.collection('dataDeletionRequests').doc(requestId);\n      const requestDoc = await requestRef.get();\n      \n      if (!requestDoc.exists) {\n        throw new Error('Deletion request not found');\n      }\n\n      const request = (requestDoc.data() as any) as DataDeletionRequest;\n      \n      // Update status to processing\n      await requestRef.update({ status: 'processing' });\n\n      const deletedData: string[] = [];\n\n      // Delete from Firestore collections\n      const collectionsToDelete = [\n        'users',\n        'userProfiles',\n        'resumes',\n        'interviews',\n        'analytics',\n        'userConsents',\n        'usage'\n      ];\n\n      for (const collection of collectionsToDelete) {\n        const deleted = await this.deleteFromCollection(collection, request.userId);\n        if (deleted) deletedData.push(collection);\n      }\n\n      // Delete from Firebase Storage\n      const storageDeleted = await this.deleteFromStorage(request.userId);\n      if (storageDeleted) deletedData.push('storage');\n\n      // Delete from external services (if any)\n      await this.deleteFromExternalServices(request.userId);\n\n      // Update request status\n      await requestRef.update({\n        status: 'completed',\n        completedDate: new Date(),\n        deletedData\n      });\n\n      // Log completion for audit\n      await this.logDataDeletion(request.userId, deletedData);\n\n    } catch (error: any) {\n      console.error('Error processing data deletion:', error);\n      \n      // Update request status to failed\n      const failDb = await this.getDB();\n      await failDb.collection('dataDeletionRequests').doc(requestId).update({\n        status: 'failed',\n        error: error.message || 'Unknown error'\n      });\n      \n      throw error;\n    }\n  }\n\n  async getDeletionRequestStatus(requestId: string): Promise<DataDeletionRequest | null> {\n    try {\n      const db = await this.getDB();\n      const requestDoc = await db.collection('dataDeletionRequests').doc(requestId).get();\n      return requestDoc.exists ? ((requestDoc.data() as any) as DataDeletionRequest) : null;\n    } catch (error) {\n      console.error('Error getting deletion request status:', error);\n      throw new Error('Failed to get deletion request status');\n    }\n  }\n\n  // Data Export (Subject Access Request)\n  async exportUserData(userId: string): Promise<any> {\n    try {\n      const userData: any = {\n        userId,\n        exportDate: new Date(),\n        data: {}\n      };\n\n      // Export from all relevant collections\n      const collections = ['users', 'userProfiles', 'resumes', 'interviews'];\n      \n      const db = await this.getDB();\n      for (const collectionName of collections) {\n        const docs = await db.collection(collectionName)\n          .where('userId', '==', userId)\n          .get();\n        \n        userData.data[collectionName] = docs.docs.map((doc: any) => ({\n          id: doc.id,\n          ...(doc.data() as any)\n        }));\n      }\n\n      // Export consent records\n      const consentDoc = await db.collection('userConsents').doc(userId).get();\n      if (consentDoc.exists) {\n        userData.data.consents = consentDoc.data() as any;\n      }\n\n      // Export usage data\n      const usageDoc = await db.collection('usage').doc(userId).get();\n      if (usageDoc.exists) {\n        userData.data.usage = usageDoc.data() as any;\n      }\n\n      return userData;\n    } catch (error) {\n      console.error('Error exporting user data:', error);\n      throw new Error('Failed to export user data');\n    }\n  }\n\n  // Privacy Utilities\n  maskEmail(email: string): string {\n    const [username, domain] = email.split('@');\n    const maskedUsername = username.length > 2 \n      ? username.charAt(0) + '*'.repeat(username.length - 2) + username.charAt(username.length - 1)\n      : '*'.repeat(username.length);\n    return `${maskedUsername}@${domain}`;\n  }\n\n  maskPhoneNumber(phone: string): string {\n    const cleaned = phone.replace(/\\D/g, '');\n    if (cleaned.length > 4) {\n      return cleaned.substring(0, 3) + '*'.repeat(cleaned.length - 6) + cleaned.substring(cleaned.length - 3);\n    }\n    return '*'.repeat(cleaned.length);\n  }\n\n  // Private helper methods\n  private getCurrentPrivacyPolicyVersion(): string {\n    return 'v1.0'; // Update when privacy policy changes\n  }\n\n  private async logConsentChange(consent: UserConsent): Promise<void> {\n    const db = await this.getDB();\n    await db.collection('consentAuditLog').add({\n      userId: consent.userId,\n      timestamp: new Date(),\n      changes: consent,\n      source: 'user-settings'\n    });\n  }\n\n  private hashUserId(userId: string): string {\n    // Use a consistent hashing algorithm\n    return Buffer.from(userId).toString('base64').substring(0, 12);\n  }\n\n  private hashSessionId(sessionId: string): string {\n    return Buffer.from(sessionId).toString('base64').substring(0, 8);\n  }\n\n  private hashEmail(email: string): string {\n    return Buffer.from(email).toString('base64');\n  }\n\n  private getInitials(name: string): string {\n    return name.split(' ').map(n => n.charAt(0).toUpperCase()).join('.');\n  }\n\n  private anonymizeUserAgent(userAgent: string): string {\n    // Remove version numbers and specific identifiers\n    return userAgent.replace(/\\/[\\d\\.]+/g, '/x.x')\n                   .replace(/\\([^)]*\\)/g, '(anonymized)');\n  }\n\n  private getLocationFromIP(ipAddress: string): { country: string; region?: string } | undefined {\n    // In production, use a GeoIP service\n    // For now, return minimal location data\n    return {\n      country: 'Unknown'\n    };\n  }\n\n  private sanitizeMetadata(metadata: Record<string, any>): Record<string, any> {\n    const sanitized = { ...metadata };\n    \n    // Remove potential PII from metadata\n    const piiKeys = ['email', 'phone', 'name', 'address', 'ssn', 'creditCard'];\n    piiKeys.forEach(key => {\n      if (sanitized[key]) {\n        delete sanitized[key];\n      }\n    });\n    \n    return sanitized;\n  }\n\n  private generateRequestId(): string {\n    return `del_${Date.now()}_${Math.random().toString(36).substring(2)}`;\n  }\n\n  private async scheduleDataDeletion(requestId: string, userId: string): Promise<void> {\n    // In production, use Cloud Functions or Cloud Tasks to schedule deletion\n    // For now, just log the scheduling\n    console.log(`Scheduled data deletion for user ${userId} with request ${requestId}`);\n  }\n\n  private async deleteFromCollection(collectionName: string, userId: string): Promise<boolean> {\n    try {\n      const db = await this.getDB();\n      const batch = db.batch();\n      const docs = await db.collection(collectionName)\n        .where('userId', '==', userId)\n        .get();\n\n      docs.docs.forEach((doc: any) => {\n        batch.delete(doc.ref);\n      });\n\n      await batch.commit();\n      return docs.docs.length > 0;\n    } catch (error) {\n      console.error(`Error deleting from ${collectionName}:`, error);\n      return false;\n    }\n  }\n\n  private async deleteFromStorage(userId: string): Promise<boolean> {\n    let filesDeleted = false;\n    \n    try {\n      // Try Azure Blob Storage first\n      await azureBlobStorage.initialize();\n      if (azureBlobStorage.isReady()) {\n        console.log(`\uD83D\uDDD1\uFE0F Deleting Azure Blob Storage files for user ${userId}`);\n        const deletedContainers = await azureBlobStorage.deleteAllUserFiles(userId);\n        if (deletedContainers.length > 0) {\n          console.log(`\u2705 Deleted from Azure containers: ${deletedContainers.join(', ')}`);\n          filesDeleted = true;\n        }\n      }\n    } catch (azureError) {\n      console.error('Error deleting from Azure Blob Storage:', azureError);\n    }\n\n    // Also attempt Firebase Storage cleanup for legacy files\n    try {\n      // Dynamic import to avoid circular dependency\n      const { getStorage } = await import('firebase-admin/storage');\n      const storage = getStorage();\n      const bucket = storage.bucket();\n      \n      const [files] = await bucket.getFiles({\n        prefix: `users/${userId}/`\n      });\n      \n      if (files.length > 0) {\n        const deletePromises = files.map(file => file.delete());\n        await Promise.all(deletePromises);\n        console.log(`\u2705 Deleted ${files.length} legacy Firebase Storage files for user ${userId}`);\n        filesDeleted = true;\n      }\n    } catch (firebaseError) {\n      console.error('Error deleting from Firebase Storage:', firebaseError);\n    }\n\n    return filesDeleted;\n  }\n\n  private async deleteFromExternalServices(userId: string): Promise<void> {\n    // Delete from external services like analytics, email providers, etc.\n    // Implementation depends on which external services are used\n    console.log(`Deleting user ${userId} from external services`);\n  }\n\n  private async logDataDeletion(userId: string, deletedData: string[]): Promise<void> {\n    const db = await this.getDB();\n    await db.collection('dataProtectionAuditLog').add({\n      userId,\n      action: 'data_deletion',\n      timestamp: new Date(),\n      deletedCollections: deletedData,\n      complianceOfficer: 'system'\n    });\n  }\n}\n\nexport const gdprComplianceService = GDPRComplianceService.getInstance();\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f2d2235f8a375d1f4425aa7424cfaee81a2374f4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_fb5mtmk3e = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_fb5mtmk3e();
var __createBinding =
/* istanbul ignore next */
(cov_fb5mtmk3e().s[0]++,
/* istanbul ignore next */
(cov_fb5mtmk3e().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_fb5mtmk3e().b[0][1]++, this.__createBinding) ||
/* istanbul ignore next */
(cov_fb5mtmk3e().b[0][2]++, Object.create ?
/* istanbul ignore next */
(cov_fb5mtmk3e().b[1][0]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_fb5mtmk3e().f[0]++;
  cov_fb5mtmk3e().s[1]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_fb5mtmk3e().b[2][0]++;
    cov_fb5mtmk3e().s[2]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_fb5mtmk3e().b[2][1]++;
  }
  var desc =
  /* istanbul ignore next */
  (cov_fb5mtmk3e().s[3]++, Object.getOwnPropertyDescriptor(m, k));
  /* istanbul ignore next */
  cov_fb5mtmk3e().s[4]++;
  if (
  /* istanbul ignore next */
  (cov_fb5mtmk3e().b[4][0]++, !desc) ||
  /* istanbul ignore next */
  (cov_fb5mtmk3e().b[4][1]++, "get" in desc ?
  /* istanbul ignore next */
  (cov_fb5mtmk3e().b[5][0]++, !m.__esModule) :
  /* istanbul ignore next */
  (cov_fb5mtmk3e().b[5][1]++,
  /* istanbul ignore next */
  (cov_fb5mtmk3e().b[6][0]++, desc.writable) ||
  /* istanbul ignore next */
  (cov_fb5mtmk3e().b[6][1]++, desc.configurable)))) {
    /* istanbul ignore next */
    cov_fb5mtmk3e().b[3][0]++;
    cov_fb5mtmk3e().s[5]++;
    desc = {
      enumerable: true,
      get: function () {
        /* istanbul ignore next */
        cov_fb5mtmk3e().f[1]++;
        cov_fb5mtmk3e().s[6]++;
        return m[k];
      }
    };
  } else
  /* istanbul ignore next */
  {
    cov_fb5mtmk3e().b[3][1]++;
  }
  cov_fb5mtmk3e().s[7]++;
  Object.defineProperty(o, k2, desc);
}) :
/* istanbul ignore next */
(cov_fb5mtmk3e().b[1][1]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_fb5mtmk3e().f[2]++;
  cov_fb5mtmk3e().s[8]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_fb5mtmk3e().b[7][0]++;
    cov_fb5mtmk3e().s[9]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_fb5mtmk3e().b[7][1]++;
  }
  cov_fb5mtmk3e().s[10]++;
  o[k2] = m[k];
})));
var __setModuleDefault =
/* istanbul ignore next */
(cov_fb5mtmk3e().s[11]++,
/* istanbul ignore next */
(cov_fb5mtmk3e().b[8][0]++, this) &&
/* istanbul ignore next */
(cov_fb5mtmk3e().b[8][1]++, this.__setModuleDefault) ||
/* istanbul ignore next */
(cov_fb5mtmk3e().b[8][2]++, Object.create ?
/* istanbul ignore next */
(cov_fb5mtmk3e().b[9][0]++, function (o, v) {
  /* istanbul ignore next */
  cov_fb5mtmk3e().f[3]++;
  cov_fb5mtmk3e().s[12]++;
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
}) :
/* istanbul ignore next */
(cov_fb5mtmk3e().b[9][1]++, function (o, v) {
  /* istanbul ignore next */
  cov_fb5mtmk3e().f[4]++;
  cov_fb5mtmk3e().s[13]++;
  o["default"] = v;
})));
var __importStar =
/* istanbul ignore next */
(cov_fb5mtmk3e().s[14]++,
/* istanbul ignore next */
(cov_fb5mtmk3e().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_fb5mtmk3e().b[10][1]++, this.__importStar) ||
/* istanbul ignore next */
(cov_fb5mtmk3e().b[10][2]++, function () {
  /* istanbul ignore next */
  cov_fb5mtmk3e().f[5]++;
  cov_fb5mtmk3e().s[15]++;
  var ownKeys = function (o) {
    /* istanbul ignore next */
    cov_fb5mtmk3e().f[6]++;
    cov_fb5mtmk3e().s[16]++;
    ownKeys =
    /* istanbul ignore next */
    (cov_fb5mtmk3e().b[11][0]++, Object.getOwnPropertyNames) ||
    /* istanbul ignore next */
    (cov_fb5mtmk3e().b[11][1]++, function (o) {
      /* istanbul ignore next */
      cov_fb5mtmk3e().f[7]++;
      var ar =
      /* istanbul ignore next */
      (cov_fb5mtmk3e().s[17]++, []);
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[18]++;
      for (var k in o) {
        /* istanbul ignore next */
        cov_fb5mtmk3e().s[19]++;
        if (Object.prototype.hasOwnProperty.call(o, k)) {
          /* istanbul ignore next */
          cov_fb5mtmk3e().b[12][0]++;
          cov_fb5mtmk3e().s[20]++;
          ar[ar.length] = k;
        } else
        /* istanbul ignore next */
        {
          cov_fb5mtmk3e().b[12][1]++;
        }
      }
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[21]++;
      return ar;
    });
    /* istanbul ignore next */
    cov_fb5mtmk3e().s[22]++;
    return ownKeys(o);
  };
  /* istanbul ignore next */
  cov_fb5mtmk3e().s[23]++;
  return function (mod) {
    /* istanbul ignore next */
    cov_fb5mtmk3e().f[8]++;
    cov_fb5mtmk3e().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_fb5mtmk3e().b[14][0]++, mod) &&
    /* istanbul ignore next */
    (cov_fb5mtmk3e().b[14][1]++, mod.__esModule)) {
      /* istanbul ignore next */
      cov_fb5mtmk3e().b[13][0]++;
      cov_fb5mtmk3e().s[25]++;
      return mod;
    } else
    /* istanbul ignore next */
    {
      cov_fb5mtmk3e().b[13][1]++;
    }
    var result =
    /* istanbul ignore next */
    (cov_fb5mtmk3e().s[26]++, {});
    /* istanbul ignore next */
    cov_fb5mtmk3e().s[27]++;
    if (mod != null) {
      /* istanbul ignore next */
      cov_fb5mtmk3e().b[15][0]++;
      cov_fb5mtmk3e().s[28]++;
      for (var k =
        /* istanbul ignore next */
        (cov_fb5mtmk3e().s[29]++, ownKeys(mod)), i =
        /* istanbul ignore next */
        (cov_fb5mtmk3e().s[30]++, 0); i < k.length; i++) {
        /* istanbul ignore next */
        cov_fb5mtmk3e().s[31]++;
        if (k[i] !== "default") {
          /* istanbul ignore next */
          cov_fb5mtmk3e().b[16][0]++;
          cov_fb5mtmk3e().s[32]++;
          __createBinding(result, mod, k[i]);
        } else
        /* istanbul ignore next */
        {
          cov_fb5mtmk3e().b[16][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_fb5mtmk3e().b[15][1]++;
    }
    cov_fb5mtmk3e().s[33]++;
    __setModuleDefault(result, mod);
    /* istanbul ignore next */
    cov_fb5mtmk3e().s[34]++;
    return result;
  };
}()));
/* istanbul ignore next */
cov_fb5mtmk3e().s[35]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_fb5mtmk3e().s[36]++;
exports.gdprComplianceService = exports.GDPRComplianceService = void 0;
const azure_blob_storage_1 =
/* istanbul ignore next */
(cov_fb5mtmk3e().s[37]++, require("@/lib/services/azure-blob-storage"));
const admin_1 =
/* istanbul ignore next */
(cov_fb5mtmk3e().s[38]++, require("@/lib/firebase/admin"));
class GDPRComplianceService {
  constructor() {
    /* istanbul ignore next */
    cov_fb5mtmk3e().f[9]++;
    cov_fb5mtmk3e().s[39]++;
    this.db = null;
  }
  async getDB() {
    /* istanbul ignore next */
    cov_fb5mtmk3e().f[10]++;
    cov_fb5mtmk3e().s[40]++;
    if (!this.db) {
      /* istanbul ignore next */
      cov_fb5mtmk3e().b[17][0]++;
      cov_fb5mtmk3e().s[41]++;
      this.db = await (0, admin_1.getDBService)();
    } else
    /* istanbul ignore next */
    {
      cov_fb5mtmk3e().b[17][1]++;
    }
    cov_fb5mtmk3e().s[42]++;
    return this.db;
  }
  static getInstance() {
    /* istanbul ignore next */
    cov_fb5mtmk3e().f[11]++;
    cov_fb5mtmk3e().s[43]++;
    if (!GDPRComplianceService.instance) {
      /* istanbul ignore next */
      cov_fb5mtmk3e().b[18][0]++;
      cov_fb5mtmk3e().s[44]++;
      GDPRComplianceService.instance = new GDPRComplianceService();
    } else
    /* istanbul ignore next */
    {
      cov_fb5mtmk3e().b[18][1]++;
    }
    cov_fb5mtmk3e().s[45]++;
    return GDPRComplianceService.instance;
  }
  // Consent Management
  async recordConsent(consent) {
    /* istanbul ignore next */
    cov_fb5mtmk3e().f[12]++;
    cov_fb5mtmk3e().s[46]++;
    try {
      const db =
      /* istanbul ignore next */
      (cov_fb5mtmk3e().s[47]++, await this.getDB());
      const consentRef =
      /* istanbul ignore next */
      (cov_fb5mtmk3e().s[48]++, db.collection('userConsents').doc(consent.userId));
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[49]++;
      await consentRef.set(Object.assign(Object.assign({}, consent), {
        consentDate: new Date(),
        version: this.getCurrentPrivacyPolicyVersion()
      }));
      // Log consent change for audit trail
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[50]++;
      await this.logConsentChange(consent);
    } catch (error) {
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[51]++;
      console.error('Error recording consent:', error);
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[52]++;
      throw new Error('Failed to record user consent');
    }
  }
  async getConsent(userId) {
    /* istanbul ignore next */
    cov_fb5mtmk3e().f[13]++;
    cov_fb5mtmk3e().s[53]++;
    try {
      const db =
      /* istanbul ignore next */
      (cov_fb5mtmk3e().s[54]++, await this.getDB());
      const consentRef =
      /* istanbul ignore next */
      (cov_fb5mtmk3e().s[55]++, db.collection('userConsents').doc(userId));
      const doc =
      /* istanbul ignore next */
      (cov_fb5mtmk3e().s[56]++, await consentRef.get());
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[57]++;
      if (!doc.exists) {
        /* istanbul ignore next */
        cov_fb5mtmk3e().b[19][0]++;
        cov_fb5mtmk3e().s[58]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_fb5mtmk3e().b[19][1]++;
      }
      cov_fb5mtmk3e().s[59]++;
      return doc.data();
    } catch (error) {
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[60]++;
      console.error('Error getting consent:', error);
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[61]++;
      throw new Error('Failed to retrieve user consent');
    }
  }
  async updateConsent(userId, updates) {
    /* istanbul ignore next */
    cov_fb5mtmk3e().f[14]++;
    cov_fb5mtmk3e().s[62]++;
    try {
      const db =
      /* istanbul ignore next */
      (cov_fb5mtmk3e().s[63]++, await this.getDB());
      const consentRef =
      /* istanbul ignore next */
      (cov_fb5mtmk3e().s[64]++, db.collection('userConsents').doc(userId));
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[65]++;
      await consentRef.update(Object.assign(Object.assign({}, updates), {
        lastUpdated: new Date()
      }));
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[66]++;
      await this.logConsentChange(Object.assign({
        userId
      }, updates));
    } catch (error) {
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[67]++;
      console.error('Error updating consent:', error);
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[68]++;
      throw new Error('Failed to update user consent');
    }
  }
  // Data Anonymization
  anonymizeAnalyticsData(data) {
    /* istanbul ignore next */
    cov_fb5mtmk3e().f[15]++;
    cov_fb5mtmk3e().s[69]++;
    return {
      timestamp: new Date(),
      event: data.event,
      page: data.page,
      userId: this.hashUserId(data.userId),
      sessionId: this.hashSessionId(data.sessionId),
      userAgent: data.userAgent ?
      /* istanbul ignore next */
      (cov_fb5mtmk3e().b[20][0]++, this.anonymizeUserAgent(data.userAgent)) :
      /* istanbul ignore next */
      (cov_fb5mtmk3e().b[20][1]++, undefined),
      location: data.ipAddress ?
      /* istanbul ignore next */
      (cov_fb5mtmk3e().b[21][0]++, this.getLocationFromIP(data.ipAddress)) :
      /* istanbul ignore next */
      (cov_fb5mtmk3e().b[21][1]++, undefined),
      metadata: this.sanitizeMetadata(
      /* istanbul ignore next */
      (cov_fb5mtmk3e().b[22][0]++, data.metadata) ||
      /* istanbul ignore next */
      (cov_fb5mtmk3e().b[22][1]++, {}))
    };
  }
  pseudonymizeUserData(userData) {
    /* istanbul ignore next */
    cov_fb5mtmk3e().f[16]++;
    const pseudonymized =
    /* istanbul ignore next */
    (cov_fb5mtmk3e().s[70]++, Object.assign({}, userData));
    // Remove or hash PII fields
    /* istanbul ignore next */
    cov_fb5mtmk3e().s[71]++;
    if (pseudonymized.email) {
      /* istanbul ignore next */
      cov_fb5mtmk3e().b[23][0]++;
      cov_fb5mtmk3e().s[72]++;
      pseudonymized.emailHash = this.hashEmail(pseudonymized.email);
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[73]++;
      delete pseudonymized.email;
    } else
    /* istanbul ignore next */
    {
      cov_fb5mtmk3e().b[23][1]++;
    }
    cov_fb5mtmk3e().s[74]++;
    if (pseudonymized.name) {
      /* istanbul ignore next */
      cov_fb5mtmk3e().b[24][0]++;
      cov_fb5mtmk3e().s[75]++;
      pseudonymized.nameInitials = this.getInitials(pseudonymized.name);
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[76]++;
      delete pseudonymized.name;
    } else
    /* istanbul ignore next */
    {
      cov_fb5mtmk3e().b[24][1]++;
    }
    cov_fb5mtmk3e().s[77]++;
    if (pseudonymized.phone) {
      /* istanbul ignore next */
      cov_fb5mtmk3e().b[25][0]++;
      cov_fb5mtmk3e().s[78]++;
      delete pseudonymized.phone;
    } else
    /* istanbul ignore next */
    {
      cov_fb5mtmk3e().b[25][1]++;
    }
    cov_fb5mtmk3e().s[79]++;
    if (pseudonymized.address) {
      /* istanbul ignore next */
      cov_fb5mtmk3e().b[26][0]++;
      cov_fb5mtmk3e().s[80]++;
      // Keep only city and country
      pseudonymized.location = {
        city: pseudonymized.address.city,
        country: pseudonymized.address.country
      };
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[81]++;
      delete pseudonymized.address;
    } else
    /* istanbul ignore next */
    {
      cov_fb5mtmk3e().b[26][1]++;
    }
    // Add anonymization timestamp
    cov_fb5mtmk3e().s[82]++;
    pseudonymized.anonymizedAt = new Date();
    /* istanbul ignore next */
    cov_fb5mtmk3e().s[83]++;
    return pseudonymized;
  }
  // Data Deletion
  async requestDataDeletion(userId, requestedBy, reason) {
    /* istanbul ignore next */
    cov_fb5mtmk3e().f[17]++;
    cov_fb5mtmk3e().s[84]++;
    try {
      const requestId =
      /* istanbul ignore next */
      (cov_fb5mtmk3e().s[85]++, this.generateRequestId());
      const deletionRequest =
      /* istanbul ignore next */
      (cov_fb5mtmk3e().s[86]++, {
        userId,
        requestDate: new Date(),
        requestedBy,
        reason,
        status: 'pending',
        deletedData: []
      });
      const db =
      /* istanbul ignore next */
      (cov_fb5mtmk3e().s[87]++, await this.getDB());
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[88]++;
      await db.collection('dataDeletionRequests').doc(requestId).set(deletionRequest);
      // Schedule deletion process (30-day compliance window)
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[89]++;
      await this.scheduleDataDeletion(requestId, userId);
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[90]++;
      return requestId;
    } catch (error) {
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[91]++;
      console.error('Error requesting data deletion:', error);
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[92]++;
      throw new Error('Failed to request data deletion');
    }
  }
  async processDataDeletion(requestId) {
    /* istanbul ignore next */
    cov_fb5mtmk3e().f[18]++;
    cov_fb5mtmk3e().s[93]++;
    try {
      const db =
      /* istanbul ignore next */
      (cov_fb5mtmk3e().s[94]++, await this.getDB());
      const requestRef =
      /* istanbul ignore next */
      (cov_fb5mtmk3e().s[95]++, db.collection('dataDeletionRequests').doc(requestId));
      const requestDoc =
      /* istanbul ignore next */
      (cov_fb5mtmk3e().s[96]++, await requestRef.get());
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[97]++;
      if (!requestDoc.exists) {
        /* istanbul ignore next */
        cov_fb5mtmk3e().b[27][0]++;
        cov_fb5mtmk3e().s[98]++;
        throw new Error('Deletion request not found');
      } else
      /* istanbul ignore next */
      {
        cov_fb5mtmk3e().b[27][1]++;
      }
      const request =
      /* istanbul ignore next */
      (cov_fb5mtmk3e().s[99]++, requestDoc.data());
      // Update status to processing
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[100]++;
      await requestRef.update({
        status: 'processing'
      });
      const deletedData =
      /* istanbul ignore next */
      (cov_fb5mtmk3e().s[101]++, []);
      // Delete from Firestore collections
      const collectionsToDelete =
      /* istanbul ignore next */
      (cov_fb5mtmk3e().s[102]++, ['users', 'userProfiles', 'resumes', 'interviews', 'analytics', 'userConsents', 'usage']);
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[103]++;
      for (const collection of collectionsToDelete) {
        const deleted =
        /* istanbul ignore next */
        (cov_fb5mtmk3e().s[104]++, await this.deleteFromCollection(collection, request.userId));
        /* istanbul ignore next */
        cov_fb5mtmk3e().s[105]++;
        if (deleted) {
          /* istanbul ignore next */
          cov_fb5mtmk3e().b[28][0]++;
          cov_fb5mtmk3e().s[106]++;
          deletedData.push(collection);
        } else
        /* istanbul ignore next */
        {
          cov_fb5mtmk3e().b[28][1]++;
        }
      }
      // Delete from Firebase Storage
      const storageDeleted =
      /* istanbul ignore next */
      (cov_fb5mtmk3e().s[107]++, await this.deleteFromStorage(request.userId));
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[108]++;
      if (storageDeleted) {
        /* istanbul ignore next */
        cov_fb5mtmk3e().b[29][0]++;
        cov_fb5mtmk3e().s[109]++;
        deletedData.push('storage');
      } else
      /* istanbul ignore next */
      {
        cov_fb5mtmk3e().b[29][1]++;
      }
      // Delete from external services (if any)
      cov_fb5mtmk3e().s[110]++;
      await this.deleteFromExternalServices(request.userId);
      // Update request status
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[111]++;
      await requestRef.update({
        status: 'completed',
        completedDate: new Date(),
        deletedData
      });
      // Log completion for audit
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[112]++;
      await this.logDataDeletion(request.userId, deletedData);
    } catch (error) {
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[113]++;
      console.error('Error processing data deletion:', error);
      // Update request status to failed
      const failDb =
      /* istanbul ignore next */
      (cov_fb5mtmk3e().s[114]++, await this.getDB());
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[115]++;
      await failDb.collection('dataDeletionRequests').doc(requestId).update({
        status: 'failed',
        error:
        /* istanbul ignore next */
        (cov_fb5mtmk3e().b[30][0]++, error.message) ||
        /* istanbul ignore next */
        (cov_fb5mtmk3e().b[30][1]++, 'Unknown error')
      });
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[116]++;
      throw error;
    }
  }
  async getDeletionRequestStatus(requestId) {
    /* istanbul ignore next */
    cov_fb5mtmk3e().f[19]++;
    cov_fb5mtmk3e().s[117]++;
    try {
      const db =
      /* istanbul ignore next */
      (cov_fb5mtmk3e().s[118]++, await this.getDB());
      const requestDoc =
      /* istanbul ignore next */
      (cov_fb5mtmk3e().s[119]++, await db.collection('dataDeletionRequests').doc(requestId).get());
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[120]++;
      return requestDoc.exists ?
      /* istanbul ignore next */
      (cov_fb5mtmk3e().b[31][0]++, requestDoc.data()) :
      /* istanbul ignore next */
      (cov_fb5mtmk3e().b[31][1]++, null);
    } catch (error) {
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[121]++;
      console.error('Error getting deletion request status:', error);
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[122]++;
      throw new Error('Failed to get deletion request status');
    }
  }
  // Data Export (Subject Access Request)
  async exportUserData(userId) {
    /* istanbul ignore next */
    cov_fb5mtmk3e().f[20]++;
    cov_fb5mtmk3e().s[123]++;
    try {
      const userData =
      /* istanbul ignore next */
      (cov_fb5mtmk3e().s[124]++, {
        userId,
        exportDate: new Date(),
        data: {}
      });
      // Export from all relevant collections
      const collections =
      /* istanbul ignore next */
      (cov_fb5mtmk3e().s[125]++, ['users', 'userProfiles', 'resumes', 'interviews']);
      const db =
      /* istanbul ignore next */
      (cov_fb5mtmk3e().s[126]++, await this.getDB());
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[127]++;
      for (const collectionName of collections) {
        const docs =
        /* istanbul ignore next */
        (cov_fb5mtmk3e().s[128]++, await db.collection(collectionName).where('userId', '==', userId).get());
        /* istanbul ignore next */
        cov_fb5mtmk3e().s[129]++;
        userData.data[collectionName] = docs.docs.map(doc => {
          /* istanbul ignore next */
          cov_fb5mtmk3e().f[21]++;
          cov_fb5mtmk3e().s[130]++;
          return Object.assign({
            id: doc.id
          }, doc.data());
        });
      }
      // Export consent records
      const consentDoc =
      /* istanbul ignore next */
      (cov_fb5mtmk3e().s[131]++, await db.collection('userConsents').doc(userId).get());
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[132]++;
      if (consentDoc.exists) {
        /* istanbul ignore next */
        cov_fb5mtmk3e().b[32][0]++;
        cov_fb5mtmk3e().s[133]++;
        userData.data.consents = consentDoc.data();
      } else
      /* istanbul ignore next */
      {
        cov_fb5mtmk3e().b[32][1]++;
      }
      // Export usage data
      const usageDoc =
      /* istanbul ignore next */
      (cov_fb5mtmk3e().s[134]++, await db.collection('usage').doc(userId).get());
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[135]++;
      if (usageDoc.exists) {
        /* istanbul ignore next */
        cov_fb5mtmk3e().b[33][0]++;
        cov_fb5mtmk3e().s[136]++;
        userData.data.usage = usageDoc.data();
      } else
      /* istanbul ignore next */
      {
        cov_fb5mtmk3e().b[33][1]++;
      }
      cov_fb5mtmk3e().s[137]++;
      return userData;
    } catch (error) {
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[138]++;
      console.error('Error exporting user data:', error);
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[139]++;
      throw new Error('Failed to export user data');
    }
  }
  // Privacy Utilities
  maskEmail(email) {
    /* istanbul ignore next */
    cov_fb5mtmk3e().f[22]++;
    const [username, domain] =
    /* istanbul ignore next */
    (cov_fb5mtmk3e().s[140]++, email.split('@'));
    const maskedUsername =
    /* istanbul ignore next */
    (cov_fb5mtmk3e().s[141]++, username.length > 2 ?
    /* istanbul ignore next */
    (cov_fb5mtmk3e().b[34][0]++, username.charAt(0) + '*'.repeat(username.length - 2) + username.charAt(username.length - 1)) :
    /* istanbul ignore next */
    (cov_fb5mtmk3e().b[34][1]++, '*'.repeat(username.length)));
    /* istanbul ignore next */
    cov_fb5mtmk3e().s[142]++;
    return `${maskedUsername}@${domain}`;
  }
  maskPhoneNumber(phone) {
    /* istanbul ignore next */
    cov_fb5mtmk3e().f[23]++;
    const cleaned =
    /* istanbul ignore next */
    (cov_fb5mtmk3e().s[143]++, phone.replace(/\D/g, ''));
    /* istanbul ignore next */
    cov_fb5mtmk3e().s[144]++;
    if (cleaned.length > 4) {
      /* istanbul ignore next */
      cov_fb5mtmk3e().b[35][0]++;
      cov_fb5mtmk3e().s[145]++;
      return cleaned.substring(0, 3) + '*'.repeat(cleaned.length - 6) + cleaned.substring(cleaned.length - 3);
    } else
    /* istanbul ignore next */
    {
      cov_fb5mtmk3e().b[35][1]++;
    }
    cov_fb5mtmk3e().s[146]++;
    return '*'.repeat(cleaned.length);
  }
  // Private helper methods
  getCurrentPrivacyPolicyVersion() {
    /* istanbul ignore next */
    cov_fb5mtmk3e().f[24]++;
    cov_fb5mtmk3e().s[147]++;
    return 'v1.0'; // Update when privacy policy changes
  }
  async logConsentChange(consent) {
    /* istanbul ignore next */
    cov_fb5mtmk3e().f[25]++;
    const db =
    /* istanbul ignore next */
    (cov_fb5mtmk3e().s[148]++, await this.getDB());
    /* istanbul ignore next */
    cov_fb5mtmk3e().s[149]++;
    await db.collection('consentAuditLog').add({
      userId: consent.userId,
      timestamp: new Date(),
      changes: consent,
      source: 'user-settings'
    });
  }
  hashUserId(userId) {
    /* istanbul ignore next */
    cov_fb5mtmk3e().f[26]++;
    cov_fb5mtmk3e().s[150]++;
    // Use a consistent hashing algorithm
    return Buffer.from(userId).toString('base64').substring(0, 12);
  }
  hashSessionId(sessionId) {
    /* istanbul ignore next */
    cov_fb5mtmk3e().f[27]++;
    cov_fb5mtmk3e().s[151]++;
    return Buffer.from(sessionId).toString('base64').substring(0, 8);
  }
  hashEmail(email) {
    /* istanbul ignore next */
    cov_fb5mtmk3e().f[28]++;
    cov_fb5mtmk3e().s[152]++;
    return Buffer.from(email).toString('base64');
  }
  getInitials(name) {
    /* istanbul ignore next */
    cov_fb5mtmk3e().f[29]++;
    cov_fb5mtmk3e().s[153]++;
    return name.split(' ').map(n => {
      /* istanbul ignore next */
      cov_fb5mtmk3e().f[30]++;
      cov_fb5mtmk3e().s[154]++;
      return n.charAt(0).toUpperCase();
    }).join('.');
  }
  anonymizeUserAgent(userAgent) {
    /* istanbul ignore next */
    cov_fb5mtmk3e().f[31]++;
    cov_fb5mtmk3e().s[155]++;
    // Remove version numbers and specific identifiers
    return userAgent.replace(/\/[\d\.]+/g, '/x.x').replace(/\([^)]*\)/g, '(anonymized)');
  }
  getLocationFromIP(ipAddress) {
    /* istanbul ignore next */
    cov_fb5mtmk3e().f[32]++;
    cov_fb5mtmk3e().s[156]++;
    // In production, use a GeoIP service
    // For now, return minimal location data
    return {
      country: 'Unknown'
    };
  }
  sanitizeMetadata(metadata) {
    /* istanbul ignore next */
    cov_fb5mtmk3e().f[33]++;
    const sanitized =
    /* istanbul ignore next */
    (cov_fb5mtmk3e().s[157]++, Object.assign({}, metadata));
    // Remove potential PII from metadata
    const piiKeys =
    /* istanbul ignore next */
    (cov_fb5mtmk3e().s[158]++, ['email', 'phone', 'name', 'address', 'ssn', 'creditCard']);
    /* istanbul ignore next */
    cov_fb5mtmk3e().s[159]++;
    piiKeys.forEach(key => {
      /* istanbul ignore next */
      cov_fb5mtmk3e().f[34]++;
      cov_fb5mtmk3e().s[160]++;
      if (sanitized[key]) {
        /* istanbul ignore next */
        cov_fb5mtmk3e().b[36][0]++;
        cov_fb5mtmk3e().s[161]++;
        delete sanitized[key];
      } else
      /* istanbul ignore next */
      {
        cov_fb5mtmk3e().b[36][1]++;
      }
    });
    /* istanbul ignore next */
    cov_fb5mtmk3e().s[162]++;
    return sanitized;
  }
  generateRequestId() {
    /* istanbul ignore next */
    cov_fb5mtmk3e().f[35]++;
    cov_fb5mtmk3e().s[163]++;
    return `del_${Date.now()}_${Math.random().toString(36).substring(2)}`;
  }
  async scheduleDataDeletion(requestId, userId) {
    /* istanbul ignore next */
    cov_fb5mtmk3e().f[36]++;
    cov_fb5mtmk3e().s[164]++;
    // In production, use Cloud Functions or Cloud Tasks to schedule deletion
    // For now, just log the scheduling
    console.log(`Scheduled data deletion for user ${userId} with request ${requestId}`);
  }
  async deleteFromCollection(collectionName, userId) {
    /* istanbul ignore next */
    cov_fb5mtmk3e().f[37]++;
    cov_fb5mtmk3e().s[165]++;
    try {
      const db =
      /* istanbul ignore next */
      (cov_fb5mtmk3e().s[166]++, await this.getDB());
      const batch =
      /* istanbul ignore next */
      (cov_fb5mtmk3e().s[167]++, db.batch());
      const docs =
      /* istanbul ignore next */
      (cov_fb5mtmk3e().s[168]++, await db.collection(collectionName).where('userId', '==', userId).get());
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[169]++;
      docs.docs.forEach(doc => {
        /* istanbul ignore next */
        cov_fb5mtmk3e().f[38]++;
        cov_fb5mtmk3e().s[170]++;
        batch.delete(doc.ref);
      });
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[171]++;
      await batch.commit();
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[172]++;
      return docs.docs.length > 0;
    } catch (error) {
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[173]++;
      console.error(`Error deleting from ${collectionName}:`, error);
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[174]++;
      return false;
    }
  }
  async deleteFromStorage(userId) {
    /* istanbul ignore next */
    cov_fb5mtmk3e().f[39]++;
    let filesDeleted =
    /* istanbul ignore next */
    (cov_fb5mtmk3e().s[175]++, false);
    /* istanbul ignore next */
    cov_fb5mtmk3e().s[176]++;
    try {
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[177]++;
      // Try Azure Blob Storage first
      await azure_blob_storage_1.azureBlobStorage.initialize();
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[178]++;
      if (azure_blob_storage_1.azureBlobStorage.isReady()) {
        /* istanbul ignore next */
        cov_fb5mtmk3e().b[37][0]++;
        cov_fb5mtmk3e().s[179]++;
        console.log(`🗑️ Deleting Azure Blob Storage files for user ${userId}`);
        const deletedContainers =
        /* istanbul ignore next */
        (cov_fb5mtmk3e().s[180]++, await azure_blob_storage_1.azureBlobStorage.deleteAllUserFiles(userId));
        /* istanbul ignore next */
        cov_fb5mtmk3e().s[181]++;
        if (deletedContainers.length > 0) {
          /* istanbul ignore next */
          cov_fb5mtmk3e().b[38][0]++;
          cov_fb5mtmk3e().s[182]++;
          console.log(`✅ Deleted from Azure containers: ${deletedContainers.join(', ')}`);
          /* istanbul ignore next */
          cov_fb5mtmk3e().s[183]++;
          filesDeleted = true;
        } else
        /* istanbul ignore next */
        {
          cov_fb5mtmk3e().b[38][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_fb5mtmk3e().b[37][1]++;
      }
    } catch (azureError) {
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[184]++;
      console.error('Error deleting from Azure Blob Storage:', azureError);
    }
    // Also attempt Firebase Storage cleanup for legacy files
    /* istanbul ignore next */
    cov_fb5mtmk3e().s[185]++;
    try {
      // Dynamic import to avoid circular dependency
      const {
        getStorage
      } =
      /* istanbul ignore next */
      (cov_fb5mtmk3e().s[186]++, await Promise.resolve().then(() => {
        /* istanbul ignore next */
        cov_fb5mtmk3e().f[40]++;
        cov_fb5mtmk3e().s[187]++;
        return __importStar(require('firebase-admin/storage'));
      }));
      const storage =
      /* istanbul ignore next */
      (cov_fb5mtmk3e().s[188]++, getStorage());
      const bucket =
      /* istanbul ignore next */
      (cov_fb5mtmk3e().s[189]++, storage.bucket());
      const [files] =
      /* istanbul ignore next */
      (cov_fb5mtmk3e().s[190]++, await bucket.getFiles({
        prefix: `users/${userId}/`
      }));
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[191]++;
      if (files.length > 0) {
        /* istanbul ignore next */
        cov_fb5mtmk3e().b[39][0]++;
        const deletePromises =
        /* istanbul ignore next */
        (cov_fb5mtmk3e().s[192]++, files.map(file => {
          /* istanbul ignore next */
          cov_fb5mtmk3e().f[41]++;
          cov_fb5mtmk3e().s[193]++;
          return file.delete();
        }));
        /* istanbul ignore next */
        cov_fb5mtmk3e().s[194]++;
        await Promise.all(deletePromises);
        /* istanbul ignore next */
        cov_fb5mtmk3e().s[195]++;
        console.log(`✅ Deleted ${files.length} legacy Firebase Storage files for user ${userId}`);
        /* istanbul ignore next */
        cov_fb5mtmk3e().s[196]++;
        filesDeleted = true;
      } else
      /* istanbul ignore next */
      {
        cov_fb5mtmk3e().b[39][1]++;
      }
    } catch (firebaseError) {
      /* istanbul ignore next */
      cov_fb5mtmk3e().s[197]++;
      console.error('Error deleting from Firebase Storage:', firebaseError);
    }
    /* istanbul ignore next */
    cov_fb5mtmk3e().s[198]++;
    return filesDeleted;
  }
  async deleteFromExternalServices(userId) {
    /* istanbul ignore next */
    cov_fb5mtmk3e().f[42]++;
    cov_fb5mtmk3e().s[199]++;
    // Delete from external services like analytics, email providers, etc.
    // Implementation depends on which external services are used
    console.log(`Deleting user ${userId} from external services`);
  }
  async logDataDeletion(userId, deletedData) {
    /* istanbul ignore next */
    cov_fb5mtmk3e().f[43]++;
    const db =
    /* istanbul ignore next */
    (cov_fb5mtmk3e().s[200]++, await this.getDB());
    /* istanbul ignore next */
    cov_fb5mtmk3e().s[201]++;
    await db.collection('dataProtectionAuditLog').add({
      userId,
      action: 'data_deletion',
      timestamp: new Date(),
      deletedCollections: deletedData,
      complianceOfficer: 'system'
    });
  }
}
/* istanbul ignore next */
cov_fb5mtmk3e().s[202]++;
exports.GDPRComplianceService = GDPRComplianceService;
/* istanbul ignore next */
cov_fb5mtmk3e().s[203]++;
exports.gdprComplianceService = GDPRComplianceService.getInstance();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,