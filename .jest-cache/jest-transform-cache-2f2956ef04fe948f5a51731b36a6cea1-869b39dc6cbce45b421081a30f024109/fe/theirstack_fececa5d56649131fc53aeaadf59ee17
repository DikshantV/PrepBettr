124f2f64ffa4e89403a1b6efdd44d15b
"use strict";

/* istanbul ignore next */
function cov_1igvero1hb() {
  var path = "/Users/dikshantvashistha/PrepBettr/portals/theirstack.ts";
  var hash = "f6f251c4d4e1325733f4b7c9782beb1794f7bcc0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/portals/theirstack.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 34
        }
      },
      "4": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 7,
          column: 50
        }
      },
      "5": {
        start: {
          line: 8,
          column: 21
        },
        end: {
          line: 8,
          column: 59
        }
      },
      "6": {
        start: {
          line: 9,
          column: 16
        },
        end: {
          line: 9,
          column: 48
        }
      },
      "7": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 52
        }
      },
      "8": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 30
        }
      },
      "9": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 22,
          column: 11
        }
      },
      "10": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 35
        }
      },
      "11": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 32,
          column: 9
        }
      },
      "12": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 68
        }
      },
      "13": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 31,
          column: 92
        }
      },
      "14": {
        start: {
          line: 38,
          column: 23
        },
        end: {
          line: 38,
          column: 53
        }
      },
      "15": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 42,
          column: 9
        }
      },
      "16": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 109
        }
      },
      "17": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 127
        }
      },
      "18": {
        start: {
          line: 44,
          column: 30
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "19": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 121,
          column: 9
        }
      },
      "20": {
        start: {
          line: 60,
          column: 29
        },
        end: {
          line: 70,
          column: 14
        }
      },
      "21": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 69,
          column: 19
        }
      },
      "22": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 83,
          column: 13
        }
      },
      "23": {
        start: {
          line: 72,
          column: 34
        },
        end: {
          line: 72,
          column: 84
        }
      },
      "24": {
        start: {
          line: 72,
          column: 68
        },
        end: {
          line: 72,
          column: 83
        }
      },
      "25": {
        start: {
          line: 73,
          column: 37
        },
        end: {
          line: 73,
          column: 117
        }
      },
      "26": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 81,
          column: 19
        }
      },
      "27": {
        start: {
          line: 82,
          column: 16
        },
        end: {
          line: 82,
          column: 46
        }
      },
      "28": {
        start: {
          line: 84,
          column: 25
        },
        end: {
          line: 84,
          column: 46
        }
      },
      "29": {
        start: {
          line: 86,
          column: 32
        },
        end: {
          line: 86,
          column: 48
        }
      },
      "30": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 61
        }
      },
      "31": {
        start: {
          line: 89,
          column: 32
        },
        end: {
          line: 89,
          column: 84
        }
      },
      "32": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 99,
          column: 15
        }
      },
      "33": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 31
        }
      },
      "34": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 111,
          column: 13
        }
      },
      "35": {
        start: {
          line: 105,
          column: 16
        },
        end: {
          line: 109,
          column: 19
        }
      },
      "36": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 110,
          column: 91
        }
      },
      "37": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 119,
          column: 15
        }
      },
      "38": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 24
        }
      },
      "39": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 129,
          column: 19
        }
      },
      "40": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 19
        }
      },
      "41": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 170,
          column: 9
        }
      },
      "42": {
        start: {
          line: 131,
          column: 33
        },
        end: {
          line: 131,
          column: 69
        }
      },
      "43": {
        start: {
          line: 132,
          column: 28
        },
        end: {
          line: 132,
          column: 69
        }
      },
      "44": {
        start: {
          line: 133,
          column: 27
        },
        end: {
          line: 133,
          column: 126
        }
      },
      "45": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 139,
          column: 32
        }
      },
      "46": {
        start: {
          line: 141,
          column: 31
        },
        end: {
          line: 141,
          column: 49
        }
      },
      "47": {
        start: {
          line: 142,
          column: 37
        },
        end: {
          line: 142,
          column: 130
        }
      },
      "48": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 160,
          column: 13
        }
      },
      "49": {
        start: {
          line: 145,
          column: 16
        },
        end: {
          line: 150,
          column: 19
        }
      },
      "50": {
        start: {
          line: 152,
          column: 17
        },
        end: {
          line: 160,
          column: 13
        }
      },
      "51": {
        start: {
          line: 153,
          column: 16
        },
        end: {
          line: 159,
          column: 19
        }
      },
      "52": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 166,
          column: 15
        }
      },
      "53": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 169,
          column: 79
        }
      },
      "54": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 178,
          column: 24
        }
      },
      "55": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 178,
          column: 24
        }
      },
      "56": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 200,
          column: 9
        }
      },
      "57": {
        start: {
          line: 180,
          column: 32
        },
        end: {
          line: 180,
          column: 77
        }
      },
      "58": {
        start: {
          line: 181,
          column: 27
        },
        end: {
          line: 181,
          column: 125
        }
      },
      "59": {
        start: {
          line: 182,
          column: 24
        },
        end: {
          line: 182,
          column: 42
        }
      },
      "60": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 190,
          column: 13
        }
      },
      "61": {
        start: {
          line: 184,
          column: 29
        },
        end: {
          line: 184,
          column: 39
        }
      },
      "62": {
        start: {
          line: 185,
          column: 16
        },
        end: {
          line: 189,
          column: 18
        }
      },
      "63": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 195,
          column: 14
        }
      },
      "64": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 198,
          column: 78
        }
      },
      "65": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 199,
          column: 24
        }
      },
      "66": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 243,
          column: 11
        }
      },
      "67": {
        start: {
          line: 208,
          column: 31
        },
        end: {
          line: 241,
          column: 13
        }
      },
      "68": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 30
        }
      },
      "69": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 264,
          column: 9
        }
      },
      "70": {
        start: {
          line: 252,
          column: 16
        },
        end: {
          line: 252,
          column: 35
        }
      },
      "71": {
        start: {
          line: 255,
          column: 16
        },
        end: {
          line: 255,
          column: 35
        }
      },
      "72": {
        start: {
          line: 258,
          column: 16
        },
        end: {
          line: 258,
          column: 34
        }
      },
      "73": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 261,
          column: 36
        }
      },
      "74": {
        start: {
          line: 263,
          column: 16
        },
        end: {
          line: 263,
          column: 35
        }
      },
      "75": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 281,
          column: 9
        }
      },
      "76": {
        start: {
          line: 272,
          column: 16
        },
        end: {
          line: 272,
          column: 32
        }
      },
      "77": {
        start: {
          line: 274,
          column: 16
        },
        end: {
          line: 274,
          column: 32
        }
      },
      "78": {
        start: {
          line: 278,
          column: 16
        },
        end: {
          line: 278,
          column: 32
        }
      },
      "79": {
        start: {
          line: 280,
          column: 16
        },
        end: {
          line: 280,
          column: 32
        }
      },
      "80": {
        start: {
          line: 287,
          column: 24
        },
        end: {
          line: 292,
          column: 9
        }
      },
      "81": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 293,
          column: 60
        }
      },
      "82": {
        start: {
          line: 299,
          column: 24
        },
        end: {
          line: 304,
          column: 9
        }
      },
      "83": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 305,
          column: 60
        }
      },
      "84": {
        start: {
          line: 311,
          column: 24
        },
        end: {
          line: 316,
          column: 9
        }
      },
      "85": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 317,
          column: 60
        }
      },
      "86": {
        start: {
          line: 323,
          column: 27
        },
        end: {
          line: 328,
          column: 9
        }
      },
      "87": {
        start: {
          line: 329,
          column: 8
        },
        end: {
          line: 329,
          column: 63
        }
      },
      "88": {
        start: {
          line: 335,
          column: 8
        },
        end: {
          line: 335,
          column: 48
        }
      },
      "89": {
        start: {
          line: 341,
          column: 8
        },
        end: {
          line: 343,
          column: 9
        }
      },
      "90": {
        start: {
          line: 342,
          column: 12
        },
        end: {
          line: 342,
          column: 84
        }
      },
      "91": {
        start: {
          line: 344,
          column: 8
        },
        end: {
          line: 365,
          column: 9
        }
      },
      "92": {
        start: {
          line: 346,
          column: 29
        },
        end: {
          line: 354,
          column: 14
        }
      },
      "93": {
        start: {
          line: 347,
          column: 16
        },
        end: {
          line: 353,
          column: 19
        }
      },
      "94": {
        start: {
          line: 355,
          column: 12
        },
        end: {
          line: 358,
          column: 14
        }
      },
      "95": {
        start: {
          line: 361,
          column: 12
        },
        end: {
          line: 364,
          column: 14
        }
      },
      "96": {
        start: {
          line: 368,
          column: 0
        },
        end: {
          line: 368,
          column: 44
        }
      },
      "97": {
        start: {
          line: 370,
          column: 31
        },
        end: {
          line: 370,
          column: 35
        }
      },
      "98": {
        start: {
          line: 372,
          column: 4
        },
        end: {
          line: 374,
          column: 5
        }
      },
      "99": {
        start: {
          line: 373,
          column: 8
        },
        end: {
          line: 373,
          column: 58
        }
      },
      "100": {
        start: {
          line: 375,
          column: 4
        },
        end: {
          line: 375,
          column: 36
        }
      },
      "101": {
        start: {
          line: 377,
          column: 0
        },
        end: {
          line: 377,
          column: 35
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 18
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 11
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        loc: {
          start: {
            line: 26,
            column: 32
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 26
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        },
        loc: {
          start: {
            line: 37,
            column: 60
          },
          end: {
            line: 122,
            column: 5
          }
        },
        line: 37
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 60,
            column: 61
          },
          end: {
            line: 60,
            column: 62
          }
        },
        loc: {
          start: {
            line: 60,
            column: 73
          },
          end: {
            line: 70,
            column: 13
          }
        },
        line: 60
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 72,
            column: 62
          },
          end: {
            line: 72,
            column: 63
          }
        },
        loc: {
          start: {
            line: 72,
            column: 68
          },
          end: {
            line: 72,
            column: 83
          }
        },
        line: 72
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 126,
            column: 4
          },
          end: {
            line: 126,
            column: 5
          }
        },
        loc: {
          start: {
            line: 126,
            column: 48
          },
          end: {
            line: 171,
            column: 5
          }
        },
        line: 126
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 175,
            column: 4
          },
          end: {
            line: 175,
            column: 5
          }
        },
        loc: {
          start: {
            line: 175,
            column: 33
          },
          end: {
            line: 201,
            column: 5
          }
        },
        line: 175
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 205,
            column: 4
          },
          end: {
            line: 205,
            column: 5
          }
        },
        loc: {
          start: {
            line: 205,
            column: 57
          },
          end: {
            line: 244,
            column: 5
          }
        },
        line: 205
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 206,
            column: 34
          },
          end: {
            line: 206,
            column: 35
          }
        },
        loc: {
          start: {
            line: 206,
            column: 50
          },
          end: {
            line: 243,
            column: 9
          }
        },
        line: 206
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 248,
            column: 4
          },
          end: {
            line: 248,
            column: 5
          }
        },
        loc: {
          start: {
            line: 248,
            column: 29
          },
          end: {
            line: 265,
            column: 5
          }
        },
        line: 248
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 269,
            column: 4
          },
          end: {
            line: 269,
            column: 5
          }
        },
        loc: {
          start: {
            line: 269,
            column: 45
          },
          end: {
            line: 282,
            column: 5
          }
        },
        line: 269
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 286,
            column: 4
          },
          end: {
            line: 286,
            column: 5
          }
        },
        loc: {
          start: {
            line: 286,
            column: 52
          },
          end: {
            line: 294,
            column: 5
          }
        },
        line: 286
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 298,
            column: 4
          },
          end: {
            line: 298,
            column: 5
          }
        },
        loc: {
          start: {
            line: 298,
            column: 50
          },
          end: {
            line: 306,
            column: 5
          }
        },
        line: 298
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 310,
            column: 4
          },
          end: {
            line: 310,
            column: 5
          }
        },
        loc: {
          start: {
            line: 310,
            column: 52
          },
          end: {
            line: 318,
            column: 5
          }
        },
        line: 310
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 322,
            column: 4
          },
          end: {
            line: 322,
            column: 5
          }
        },
        loc: {
          start: {
            line: 322,
            column: 50
          },
          end: {
            line: 330,
            column: 5
          }
        },
        line: 322
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 334,
            column: 4
          },
          end: {
            line: 334,
            column: 5
          }
        },
        loc: {
          start: {
            line: 334,
            column: 19
          },
          end: {
            line: 336,
            column: 5
          }
        },
        line: 334
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 340,
            column: 4
          },
          end: {
            line: 340,
            column: 5
          }
        },
        loc: {
          start: {
            line: 340,
            column: 24
          },
          end: {
            line: 366,
            column: 5
          }
        },
        line: 340
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 346,
            column: 61
          },
          end: {
            line: 346,
            column: 62
          }
        },
        loc: {
          start: {
            line: 346,
            column: 73
          },
          end: {
            line: 354,
            column: 13
          }
        },
        line: 346
      },
      "19": {
        name: "getTheirStackPortal",
        decl: {
          start: {
            line: 371,
            column: 9
          },
          end: {
            line: 371,
            column: 28
          }
        },
        loc: {
          start: {
            line: 371,
            column: 31
          },
          end: {
            line: 376,
            column: 1
          }
        },
        line: 371
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 37,
            column: 38
          },
          end: {
            line: 37,
            column: 46
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 37,
            column: 45
          },
          end: {
            line: 37,
            column: 46
          }
        }],
        line: 37
      },
      "4": {
        loc: {
          start: {
            line: 37,
            column: 48
          },
          end: {
            line: 37,
            column: 58
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 37,
            column: 56
          },
          end: {
            line: 37,
            column: 58
          }
        }],
        line: 37
      },
      "5": {
        loc: {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 42,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "6": {
        loc: {
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 83,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 83,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "7": {
        loc: {
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 111,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 111,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      },
      "8": {
        loc: {
          start: {
            line: 115,
            column: 23
          },
          end: {
            line: 115,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 115,
            column: 48
          },
          end: {
            line: 115,
            column: 61
          }
        }, {
          start: {
            line: 115,
            column: 64
          },
          end: {
            line: 115,
            column: 77
          }
        }],
        line: 115
      },
      "9": {
        loc: {
          start: {
            line: 128,
            column: 8
          },
          end: {
            line: 129,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 128,
            column: 8
          },
          end: {
            line: 129,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 128
      },
      "10": {
        loc: {
          start: {
            line: 128,
            column: 12
          },
          end: {
            line: 128,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 128,
            column: 12
          },
          end: {
            line: 128,
            column: 27
          }
        }, {
          start: {
            line: 128,
            column: 31
          },
          end: {
            line: 128,
            column: 48
          }
        }],
        line: 128
      },
      "11": {
        loc: {
          start: {
            line: 142,
            column: 37
          },
          end: {
            line: 142,
            column: 130
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 142,
            column: 38
          },
          end: {
            line: 142,
            column: 114
          }
        }, {
          start: {
            line: 142,
            column: 119
          },
          end: {
            line: 142,
            column: 130
          }
        }],
        line: 142
      },
      "12": {
        loc: {
          start: {
            line: 142,
            column: 38
          },
          end: {
            line: 142,
            column: 114
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 142,
            column: 91
          },
          end: {
            line: 142,
            column: 97
          }
        }, {
          start: {
            line: 142,
            column: 100
          },
          end: {
            line: 142,
            column: 114
          }
        }],
        line: 142
      },
      "13": {
        loc: {
          start: {
            line: 142,
            column: 38
          },
          end: {
            line: 142,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 142,
            column: 38
          },
          end: {
            line: 142,
            column: 71
          }
        }, {
          start: {
            line: 142,
            column: 75
          },
          end: {
            line: 142,
            column: 88
          }
        }],
        line: 142
      },
      "14": {
        loc: {
          start: {
            line: 144,
            column: 12
          },
          end: {
            line: 160,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 12
          },
          end: {
            line: 160,
            column: 13
          }
        }, {
          start: {
            line: 152,
            column: 17
          },
          end: {
            line: 160,
            column: 13
          }
        }],
        line: 144
      },
      "15": {
        loc: {
          start: {
            line: 152,
            column: 17
          },
          end: {
            line: 160,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 17
          },
          end: {
            line: 160,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      },
      "16": {
        loc: {
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 178,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 178,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 177
      },
      "17": {
        loc: {
          start: {
            line: 180,
            column: 32
          },
          end: {
            line: 180,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 180,
            column: 32
          },
          end: {
            line: 180,
            column: 37
          }
        }, {
          start: {
            line: 180,
            column: 41
          },
          end: {
            line: 180,
            column: 77
          }
        }],
        line: 180
      },
      "18": {
        loc: {
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 190,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 12
          },
          end: {
            line: 190,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "19": {
        loc: {
          start: {
            line: 187,
            column: 33
          },
          end: {
            line: 187,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 187,
            column: 33
          },
          end: {
            line: 187,
            column: 49
          }
        }, {
          start: {
            line: 187,
            column: 53
          },
          end: {
            line: 187,
            column: 54
          }
        }],
        line: 187
      },
      "20": {
        loc: {
          start: {
            line: 188,
            column: 33
          },
          end: {
            line: 188,
            column: 121
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 188,
            column: 34
          },
          end: {
            line: 188,
            column: 106
          }
        }, {
          start: {
            line: 188,
            column: 111
          },
          end: {
            line: 188,
            column: 121
          }
        }],
        line: 188
      },
      "21": {
        loc: {
          start: {
            line: 188,
            column: 34
          },
          end: {
            line: 188,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 188,
            column: 86
          },
          end: {
            line: 188,
            column: 92
          }
        }, {
          start: {
            line: 188,
            column: 95
          },
          end: {
            line: 188,
            column: 106
          }
        }],
        line: 188
      },
      "22": {
        loc: {
          start: {
            line: 188,
            column: 34
          },
          end: {
            line: 188,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 188,
            column: 34
          },
          end: {
            line: 188,
            column: 66
          }
        }, {
          start: {
            line: 188,
            column: 70
          },
          end: {
            line: 188,
            column: 83
          }
        }],
        line: 188
      },
      "23": {
        loc: {
          start: {
            line: 209,
            column: 20
          },
          end: {
            line: 209,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 209,
            column: 20
          },
          end: {
            line: 209,
            column: 26
          }
        }, {
          start: {
            line: 209,
            column: 30
          },
          end: {
            line: 209,
            column: 65
          }
        }],
        line: 209
      },
      "24": {
        loc: {
          start: {
            line: 210,
            column: 23
          },
          end: {
            line: 210,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 210,
            column: 23
          },
          end: {
            line: 210,
            column: 32
          }
        }, {
          start: {
            line: 210,
            column: 36
          },
          end: {
            line: 210,
            column: 55
          }
        }],
        line: 210
      },
      "25": {
        loc: {
          start: {
            line: 211,
            column: 25
          },
          end: {
            line: 211,
            column: 111
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 211,
            column: 26
          },
          end: {
            line: 211,
            column: 89
          }
        }, {
          start: {
            line: 211,
            column: 94
          },
          end: {
            line: 211,
            column: 111
          }
        }],
        line: 211
      },
      "26": {
        loc: {
          start: {
            line: 211,
            column: 26
          },
          end: {
            line: 211,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 211,
            column: 73
          },
          end: {
            line: 211,
            column: 79
          }
        }, {
          start: {
            line: 211,
            column: 82
          },
          end: {
            line: 211,
            column: 89
          }
        }],
        line: 211
      },
      "27": {
        loc: {
          start: {
            line: 211,
            column: 26
          },
          end: {
            line: 211,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 211,
            column: 26
          },
          end: {
            line: 211,
            column: 53
          }
        }, {
          start: {
            line: 211,
            column: 57
          },
          end: {
            line: 211,
            column: 70
          }
        }],
        line: 211
      },
      "28": {
        loc: {
          start: {
            line: 212,
            column: 26
          },
          end: {
            line: 212,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 212,
            column: 26
          },
          end: {
            line: 212,
            column: 38
          }
        }, {
          start: {
            line: 212,
            column: 42
          },
          end: {
            line: 212,
            column: 66
          }
        }],
        line: 212
      },
      "29": {
        loc: {
          start: {
            line: 213,
            column: 24
          },
          end: {
            line: 218,
            column: 29
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 213,
            column: 37
          },
          end: {
            line: 218,
            column: 17
          }
        }, {
          start: {
            line: 218,
            column: 20
          },
          end: {
            line: 218,
            column: 29
          }
        }],
        line: 213
      },
      "30": {
        loc: {
          start: {
            line: 216,
            column: 30
          },
          end: {
            line: 216,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 216,
            column: 30
          },
          end: {
            line: 216,
            column: 49
          }
        }, {
          start: {
            line: 216,
            column: 53
          },
          end: {
            line: 216,
            column: 58
          }
        }],
        line: 216
      },
      "31": {
        loc: {
          start: {
            line: 217,
            column: 28
          },
          end: {
            line: 217,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 217,
            column: 28
          },
          end: {
            line: 217,
            column: 45
          }
        }, {
          start: {
            line: 217,
            column: 49
          },
          end: {
            line: 217,
            column: 57
          }
        }],
        line: 217
      },
      "32": {
        loc: {
          start: {
            line: 221,
            column: 29
          },
          end: {
            line: 221,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 221,
            column: 29
          },
          end: {
            line: 221,
            column: 44
          }
        }, {
          start: {
            line: 221,
            column: 48
          },
          end: {
            line: 221,
            column: 74
          }
        }],
        line: 221
      },
      "33": {
        loc: {
          start: {
            line: 222,
            column: 30
          },
          end: {
            line: 222,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 222,
            column: 30
          },
          end: {
            line: 222,
            column: 46
          }
        }, {
          start: {
            line: 222,
            column: 50
          },
          end: {
            line: 222,
            column: 52
          }
        }],
        line: 222
      },
      "34": {
        loc: {
          start: {
            line: 223,
            column: 34
          },
          end: {
            line: 223,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 223,
            column: 34
          },
          end: {
            line: 223,
            column: 54
          }
        }, {
          start: {
            line: 223,
            column: 58
          },
          end: {
            line: 223,
            column: 60
          }
        }],
        line: 223
      },
      "35": {
        loc: {
          start: {
            line: 225,
            column: 28
          },
          end: {
            line: 225,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 225,
            column: 28
          },
          end: {
            line: 225,
            column: 42
          }
        }, {
          start: {
            line: 225,
            column: 46
          },
          end: {
            line: 225,
            column: 70
          }
        }],
        line: 225
      },
      "36": {
        loc: {
          start: {
            line: 233,
            column: 29
          },
          end: {
            line: 233,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 233,
            column: 29
          },
          end: {
            line: 233,
            column: 44
          }
        }, {
          start: {
            line: 233,
            column: 48
          },
          end: {
            line: 233,
            column: 87
          }
        }],
        line: 233
      },
      "37": {
        loc: {
          start: {
            line: 234,
            column: 29
          },
          end: {
            line: 234,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 234,
            column: 76
          },
          end: {
            line: 234,
            column: 82
          }
        }, {
          start: {
            line: 234,
            column: 85
          },
          end: {
            line: 234,
            column: 92
          }
        }],
        line: 234
      },
      "38": {
        loc: {
          start: {
            line: 234,
            column: 29
          },
          end: {
            line: 234,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 234,
            column: 29
          },
          end: {
            line: 234,
            column: 56
          }
        }, {
          start: {
            line: 234,
            column: 60
          },
          end: {
            line: 234,
            column: 73
          }
        }],
        line: 234
      },
      "39": {
        loc: {
          start: {
            line: 249,
            column: 8
          },
          end: {
            line: 264,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 250,
            column: 12
          },
          end: {
            line: 250,
            column: 29
          }
        }, {
          start: {
            line: 251,
            column: 12
          },
          end: {
            line: 252,
            column: 35
          }
        }, {
          start: {
            line: 253,
            column: 12
          },
          end: {
            line: 253,
            column: 29
          }
        }, {
          start: {
            line: 254,
            column: 12
          },
          end: {
            line: 255,
            column: 35
          }
        }, {
          start: {
            line: 256,
            column: 12
          },
          end: {
            line: 256,
            column: 28
          }
        }, {
          start: {
            line: 257,
            column: 12
          },
          end: {
            line: 258,
            column: 34
          }
        }, {
          start: {
            line: 259,
            column: 12
          },
          end: {
            line: 259,
            column: 30
          }
        }, {
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 261,
            column: 36
          }
        }, {
          start: {
            line: 262,
            column: 12
          },
          end: {
            line: 263,
            column: 35
          }
        }],
        line: 249
      },
      "40": {
        loc: {
          start: {
            line: 249,
            column: 16
          },
          end: {
            line: 249,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 249,
            column: 57
          },
          end: {
            line: 249,
            column: 63
          }
        }, {
          start: {
            line: 249,
            column: 66
          },
          end: {
            line: 249,
            column: 87
          }
        }],
        line: 249
      },
      "41": {
        loc: {
          start: {
            line: 249,
            column: 16
          },
          end: {
            line: 249,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 249,
            column: 16
          },
          end: {
            line: 249,
            column: 32
          }
        }, {
          start: {
            line: 249,
            column: 36
          },
          end: {
            line: 249,
            column: 54
          }
        }],
        line: 249
      },
      "42": {
        loc: {
          start: {
            line: 270,
            column: 8
          },
          end: {
            line: 281,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 271,
            column: 12
          },
          end: {
            line: 272,
            column: 32
          }
        }, {
          start: {
            line: 273,
            column: 12
          },
          end: {
            line: 274,
            column: 32
          }
        }, {
          start: {
            line: 275,
            column: 12
          },
          end: {
            line: 275,
            column: 26
          }
        }, {
          start: {
            line: 276,
            column: 12
          },
          end: {
            line: 276,
            column: 27
          }
        }, {
          start: {
            line: 277,
            column: 12
          },
          end: {
            line: 278,
            column: 32
          }
        }, {
          start: {
            line: 279,
            column: 12
          },
          end: {
            line: 280,
            column: 32
          }
        }],
        line: 270
      },
      "43": {
        loc: {
          start: {
            line: 270,
            column: 16
          },
          end: {
            line: 270,
            column: 111
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 270,
            column: 73
          },
          end: {
            line: 270,
            column: 79
          }
        }, {
          start: {
            line: 270,
            column: 82
          },
          end: {
            line: 270,
            column: 111
          }
        }],
        line: 270
      },
      "44": {
        loc: {
          start: {
            line: 270,
            column: 16
          },
          end: {
            line: 270,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 270,
            column: 16
          },
          end: {
            line: 270,
            column: 40
          }
        }, {
          start: {
            line: 270,
            column: 44
          },
          end: {
            line: 270,
            column: 70
          }
        }],
        line: 270
      },
      "45": {
        loc: {
          start: {
            line: 286,
            column: 35
          },
          end: {
            line: 286,
            column: 50
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 286,
            column: 48
          },
          end: {
            line: 286,
            column: 50
          }
        }],
        line: 286
      },
      "46": {
        loc: {
          start: {
            line: 298,
            column: 33
          },
          end: {
            line: 298,
            column: 48
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 298,
            column: 46
          },
          end: {
            line: 298,
            column: 48
          }
        }],
        line: 298
      },
      "47": {
        loc: {
          start: {
            line: 310,
            column: 35
          },
          end: {
            line: 310,
            column: 50
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 310,
            column: 48
          },
          end: {
            line: 310,
            column: 50
          }
        }],
        line: 310
      },
      "48": {
        loc: {
          start: {
            line: 322,
            column: 33
          },
          end: {
            line: 322,
            column: 48
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 322,
            column: 46
          },
          end: {
            line: 322,
            column: 48
          }
        }],
        line: 322
      },
      "49": {
        loc: {
          start: {
            line: 341,
            column: 8
          },
          end: {
            line: 343,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 341,
            column: 8
          },
          end: {
            line: 343,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 341
      },
      "50": {
        loc: {
          start: {
            line: 357,
            column: 25
          },
          end: {
            line: 357,
            column: 118
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 357,
            column: 39
          },
          end: {
            line: 357,
            column: 66
          }
        }, {
          start: {
            line: 357,
            column: 69
          },
          end: {
            line: 357,
            column: 118
          }
        }],
        line: 357
      },
      "51": {
        loc: {
          start: {
            line: 363,
            column: 49
          },
          end: {
            line: 363,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 363,
            column: 74
          },
          end: {
            line: 363,
            column: 87
          }
        }, {
          start: {
            line: 363,
            column: 90
          },
          end: {
            line: 363,
            column: 103
          }
        }],
        line: 363
      },
      "52": {
        loc: {
          start: {
            line: 372,
            column: 4
          },
          end: {
            line: 374,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 372,
            column: 4
          },
          end: {
            line: 374,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 372
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0, 0, 0, 0, 0, 0, 0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0, 0, 0, 0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0],
      "46": [0],
      "47": [0],
      "48": [0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/portals/theirstack.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/portals/theirstack.ts"],
      sourcesContent: ["import Bottleneck from 'bottleneck';\nimport { JobListing, JobSearchFilters, ApplicationStatus } from '../types/auto-apply';\nimport { getAdminFirestore } from '../lib/firebase/admin';\n\n// TheirStack API interfaces\ninterface TheirStackJobSearchPayload {\n  filters: {\n    keywords?: string[];\n    locations?: string[];\n    jobTypes?: string[];\n    workArrangements?: string[];\n    salaryRange?: {\n      min?: number;\n      max?: number;\n      currency?: string;\n    };\n    experienceLevel?: string[];\n    companySize?: string[];\n    datePosted?: string;\n  };\n  page: number;\n  limit: number;\n}\n\ninterface TheirStackJobResponse {\n  jobs: TheirStackJob[];\n  totalCount: number;\n  page: number;\n  limit: number;\n  hasMore: boolean;\n}\n\ninterface TheirStackJob {\n  id: string;\n  title: string;\n  company: {\n    name: string;\n    logo?: string;\n    size?: string;\n    location?: string;\n  };\n  location: string;\n  salary?: {\n    min?: number;\n    max?: number;\n    currency?: string;\n    period?: 'hourly' | 'monthly' | 'yearly';\n  };\n  jobType: string;\n  workArrangement: string;\n  description: string;\n  requirements?: string[];\n  responsibilities?: string[];\n  benefits?: string[];\n  postedDate: string;\n  applicationDeadline?: string;\n  originalUrl: string;\n}\n\ninterface TheirStackCreditsUsage {\n  month: string; // YYYY-MM format\n  creditsUsed: number;\n  lastUpdated: Date;\n}\n\nexport class TheirStackPortal {\n  private rateLimiter: Bottleneck;\n  private baseUrl = 'https://api.theirstack.com';\n  private firestore: any = null;\n\n  constructor() {\n    // TheirStack API rate limits: 300 requests per minute\n    // Bottleneck configuration for rate limiting\n    this.rateLimiter = new Bottleneck({\n      minTime: 220, // Minimum 220ms between requests (300 req/min = 200ms, add buffer)\n      maxConcurrent: 1, // Only 1 concurrent request to avoid rate limit breaches\n      reservoir: 300, // 300 requests per minute\n      reservoirRefreshAmount: 300,\n      reservoirRefreshInterval: 60000, // Refresh every minute\n    });\n\n    // Initialize Firestore lazily\n    this.initializeFirestore();\n  }\n\n  private async initializeFirestore(): Promise<void> {\n    try {\n      this.firestore = await getAdminFirestore();\n    } catch (error) {\n      console.error('\u274C Failed to initialize Firestore for TheirStack portal:', error);\n    }\n  }\n\n  /**\n   * Search for jobs on TheirStack with rate limiting and credit tracking\n   */\n  async searchJobs(userId: string, filters: JobSearchFilters, page: number = 1, limit: number = 50): Promise<JobListing[]> {\n    const apiKey = process.env.THEIRSTACK_API_KEY;\n    \n    if (!apiKey) {\n      this.logError('theirStackSearchError', 'TheirStack API key not configured', { userId, filters });\n      throw new Error('TheirStack API key not configured. Please add THEIRSTACK_API_KEY to your environment variables.');\n    }\n\n    // Transform our filters to TheirStack API format\n    const searchPayload: TheirStackJobSearchPayload = {\n      filters: {\n        keywords: filters.keywords,\n        locations: filters.locations,\n        jobTypes: filters.jobTypes,\n        workArrangements: filters.workArrangements,\n        salaryRange: filters.salaryRange,\n        experienceLevel: filters.experienceLevel,\n        companySize: filters.companySize,\n        datePosted: filters.datePosted\n      },\n      page,\n      limit\n    };\n\n    try {\n      // Execute search with rate limiting\n      const response = await this.rateLimiter.schedule(async () => {\n        return fetch(`${this.baseUrl}/v1/jobs/search`, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${apiKey}`,\n            'Content-Type': 'application/json',\n            'User-Agent': 'PrepBettr/1.0 (Job Search Automation)',\n          },\n          body: JSON.stringify(searchPayload)\n        });\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text().catch(() => 'Unknown error');\n        const errorMessage = `TheirStack API error: ${response.status} ${response.statusText} - ${errorText}`;\n        \n        this.logError('theirStackSearchError', errorMessage, {\n          userId,\n          statusCode: response.status,\n          statusText: response.statusText,\n          filters,\n          page,\n          limit\n        });\n        \n        throw new Error(errorMessage);\n      }\n\n      const data: TheirStackJobResponse = await response.json();\n      \n      // Track credit usage (1 credit per job returned)\n      const creditsUsed = data.jobs.length;\n      await this.trackCreditUsage(userId, creditsUsed);\n\n      // Transform TheirStack jobs to our JobListing format\n      const jobListings = this.transformTheirStackJobsToJobListings(data.jobs);\n\n      // Log successful search\n      this.logSuccess('theirStackSearchSuccess', 'TheirStack job search completed successfully', {\n        userId,\n        jobsFound: jobListings.length,\n        totalCount: data.totalCount,\n        page,\n        limit,\n        creditsUsed,\n        hasMore: data.hasMore\n      });\n\n      return jobListings;\n\n    } catch (error) {\n      if (error instanceof Bottleneck.BottleneckError) {\n        // Rate limit breach detected\n        this.logError('theirStackRateLimitBreach', 'TheirStack rate limit exceeded', {\n          userId,\n          error: error.message,\n          filters\n        });\n        throw new Error('TheirStack rate limit exceeded. Please try again later.');\n      }\n\n      // Re-throw other errors\n      this.logError('theirStackSearchError', `TheirStack search failed: ${error}`, {\n        userId,\n        error: error instanceof Error ? error.message : String(error),\n        filters,\n        page,\n        limit\n      });\n      \n      throw error;\n    }\n  }\n\n  /**\n   * Track credit usage in Firestore\n   */\n  private async trackCreditUsage(userId: string, creditsUsed: number): Promise<void> {\n    if (!this.firestore || creditsUsed === 0) return;\n\n    try {\n      const currentMonth = new Date().toISOString().slice(0, 7); // YYYY-MM format\n      const docPath = `usage/theirstackCredits/${currentMonth}`;\n      \n      const docRef = this.firestore.collection('usage').doc('theirstackCredits').collection('monthly').doc(currentMonth);\n      \n      await docRef.set({\n        month: currentMonth,\n        creditsUsed: this.firestore.FieldValue.increment(creditsUsed),\n        lastUpdated: new Date(),\n        userId: userId // Track which user used credits\n      }, { merge: true });\n\n      // Check credit usage and emit warnings\n      const updatedDoc = await docRef.get();\n      const totalCreditsUsed = updatedDoc.data()?.creditsUsed || creditsUsed;\n      \n      // Emit warnings based on usage\n      if (totalCreditsUsed >= 500) {\n        this.logError('theirStackCreditsExceeded', 'TheirStack credits exceeded maximum threshold', {\n          userId,\n          creditsUsed: totalCreditsUsed,\n          threshold: 500,\n          month: currentMonth\n        });\n      } else if (totalCreditsUsed >= 160) { // 80% of 200 free credits\n        this.logWarning('theirStackCreditsWarning', 'TheirStack credits approaching limit', {\n          userId,\n          creditsUsed: totalCreditsUsed,\n          threshold: 160,\n          freeLimit: 200,\n          month: currentMonth\n        });\n      }\n\n      // Track metric for Application Insights\n      this.logMetric('theirStackCreditsUsed', creditsUsed, {\n        userId,\n        month: currentMonth,\n        totalCreditsThisMonth: totalCreditsUsed\n      });\n\n    } catch (error) {\n      console.error('\u274C Failed to track TheirStack credit usage:', error);\n    }\n  }\n\n  /**\n   * Get credit usage for a specific month\n   */\n  async getCreditsUsage(month?: string): Promise<TheirStackCreditsUsage | null> {\n    if (!this.firestore) return null;\n\n    try {\n      const targetMonth = month || new Date().toISOString().slice(0, 7);\n      const docRef = this.firestore.collection('usage').doc('theirstackCredits').collection('monthly').doc(targetMonth);\n      const doc = await docRef.get();\n\n      if (doc.exists) {\n        const data = doc.data();\n        return {\n          month: targetMonth,\n          creditsUsed: data.creditsUsed || 0,\n          lastUpdated: data.lastUpdated?.toDate() || new Date()\n        };\n      }\n\n      return {\n        month: targetMonth,\n        creditsUsed: 0,\n        lastUpdated: new Date()\n      };\n    } catch (error) {\n      console.error('\u274C Failed to get TheirStack credits usage:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Transform TheirStack jobs to our JobListing format\n   */\n  private transformTheirStackJobsToJobListings(theirStackJobs: TheirStackJob[]): JobListing[] {\n    return theirStackJobs.map((job, index) => {\n      const jobListing: JobListing = {\n        id: job.id || `theirstack-${Date.now()}-${index}`,\n        title: job.title || 'Untitled Position',\n        company: job.company?.name || 'Unknown Company',\n        location: job.location || 'Location not specified',\n        salary: job.salary ? {\n          min: job.salary.min,\n          max: job.salary.max,\n          currency: job.salary.currency || 'USD',\n          period: job.salary.period || 'yearly'\n        } : undefined,\n        jobType: this.mapJobTypeToOur(job.jobType) as any,\n        workArrangement: this.mapWorkArrangementToOur(job.workArrangement) as any,\n        description: job.description || 'No description available',\n        requirements: job.requirements || [],\n        responsibilities: job.responsibilities || [],\n        benefits: job.benefits,\n        postedDate: job.postedDate || new Date().toISOString(),\n        applicationDeadline: job.applicationDeadline,\n        jobPortal: {\n          name: 'TheirStack',\n          logo: '/icons/theirstack.svg',\n          website: 'https://theirstack.com',\n          supportsAutoApply: true,\n        },\n        originalUrl: job.originalUrl || `https://theirstack.com/jobs/${job.id}`,\n        companyLogo: job.company?.logo,\n        relevancyScore: undefined, // Will be calculated later\n        matchedSkills: [],\n        missingSkills: [],\n        applicationStatus: 'discovered',\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n      };\n\n      return jobListing;\n    });\n  }\n\n  /**\n   * Map TheirStack job types to our format\n   */\n  private mapJobTypeToOur(jobType: string): string {\n    switch (jobType?.toLowerCase()) {\n      case 'full-time':\n      case 'fulltime':\n        return 'full-time';\n      case 'part-time':\n      case 'parttime':\n        return 'part-time';\n      case 'contract':\n      case 'contractor':\n        return 'contract';\n      case 'internship':\n      case 'intern':\n        return 'internship';\n      default:\n        return 'full-time';\n    }\n  }\n\n  /**\n   * Map TheirStack work arrangements to our format\n   */\n  private mapWorkArrangementToOur(workArrangement: string): string {\n    switch (workArrangement?.toLowerCase()) {\n      case 'remote':\n        return 'remote';\n      case 'hybrid':\n        return 'hybrid';\n      case 'onsite':\n      case 'on-site':\n      case 'office':\n        return 'onsite';\n      default:\n        return 'onsite';\n    }\n  }\n\n  /**\n   * Log successful operations with structured logging for Application Insights\n   */\n  private logSuccess(eventName: string, message: string, properties: any = {}): void {\n    const logData = {\n      level: 'info',\n      eventName,\n      message,\n      properties: {\n        portal: 'TheirStack',\n        timestamp: new Date().toISOString(),\n        ...properties\n      }\n    };\n\n    console.log('APPINSIGHTS', JSON.stringify(logData));\n  }\n\n  /**\n   * Log errors with structured logging for Application Insights\n   */\n  private logError(eventName: string, message: string, properties: any = {}): void {\n    const logData = {\n      level: 'error',\n      eventName,\n      message,\n      properties: {\n        portal: 'TheirStack',\n        timestamp: new Date().toISOString(),\n        ...properties\n      }\n    };\n\n    console.log('APPINSIGHTS', JSON.stringify(logData));\n  }\n\n  /**\n   * Log warnings with structured logging for Application Insights\n   */\n  private logWarning(eventName: string, message: string, properties: any = {}): void {\n    const logData = {\n      level: 'warning',\n      eventName,\n      message,\n      properties: {\n        portal: 'TheirStack',\n        timestamp: new Date().toISOString(),\n        ...properties\n      }\n    };\n\n    console.log('APPINSIGHTS', JSON.stringify(logData));\n  }\n\n  /**\n   * Log custom metrics for Application Insights\n   */\n  private logMetric(metricName: string, value: number, properties: any = {}): void {\n    const metricData = {\n      type: 'metric',\n      name: metricName,\n      value,\n      properties: {\n        portal: 'TheirStack',\n        timestamp: new Date().toISOString(),\n        ...properties\n      }\n    };\n\n    console.log('APPINSIGHTS', JSON.stringify(metricData));\n  }\n\n  /**\n   * Check if TheirStack is properly configured\n   */\n  isConfigured(): boolean {\n    return !!process.env.THEIRSTACK_API_KEY;\n  }\n\n  /**\n   * Health check for TheirStack portal\n   */\n  async healthCheck(): Promise<{ healthy: boolean; message?: string }> {\n    if (!this.isConfigured()) {\n      return { healthy: false, message: 'TheirStack API key not configured' };\n    }\n\n    try {\n      // Try a minimal API call to check connectivity\n      const response = await this.rateLimiter.schedule(async () => {\n        return fetch(`${this.baseUrl}/v1/health`, {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${process.env.THEIRSTACK_API_KEY}`,\n            'User-Agent': 'PrepBettr/1.0 (Health Check)',\n          }\n        });\n      });\n\n      return {\n        healthy: response.ok,\n        message: response.ok ? 'TheirStack API accessible' : `HTTP ${response.status}: ${response.statusText}`\n      };\n    } catch (error) {\n      return {\n        healthy: false,\n        message: `Health check failed: ${error instanceof Error ? error.message : String(error)}`\n      };\n    }\n  }\n}\n\n// Singleton instance\nlet theirStackPortalInstance: TheirStackPortal | null = null;\n\nexport function getTheirStackPortal(): TheirStackPortal {\n  if (!theirStackPortalInstance) {\n    theirStackPortalInstance = new TheirStackPortal();\n  }\n  return theirStackPortalInstance;\n}\n\nexport default TheirStackPortal;\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f6f251c4d4e1325733f4b7c9782beb1794f7bcc0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1igvero1hb = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1igvero1hb();
var __importDefault =
/* istanbul ignore next */
(cov_1igvero1hb().s[0]++,
/* istanbul ignore next */
(cov_1igvero1hb().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1igvero1hb().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1igvero1hb().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1igvero1hb().f[0]++;
  cov_1igvero1hb().s[1]++;
  return /* istanbul ignore next */(cov_1igvero1hb().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1igvero1hb().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1igvero1hb().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_1igvero1hb().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1igvero1hb().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1igvero1hb().s[3]++;
exports.TheirStackPortal = void 0;
/* istanbul ignore next */
cov_1igvero1hb().s[4]++;
exports.getTheirStackPortal = getTheirStackPortal;
const bottleneck_1 =
/* istanbul ignore next */
(cov_1igvero1hb().s[5]++, __importDefault(require("bottleneck")));
const admin_1 =
/* istanbul ignore next */
(cov_1igvero1hb().s[6]++, require("../lib/firebase/admin"));
class TheirStackPortal {
  constructor() {
    /* istanbul ignore next */
    cov_1igvero1hb().f[1]++;
    cov_1igvero1hb().s[7]++;
    this.baseUrl = 'https://api.theirstack.com';
    /* istanbul ignore next */
    cov_1igvero1hb().s[8]++;
    this.firestore = null;
    // TheirStack API rate limits: 300 requests per minute
    // Bottleneck configuration for rate limiting
    /* istanbul ignore next */
    cov_1igvero1hb().s[9]++;
    this.rateLimiter = new bottleneck_1.default({
      minTime: 220,
      // Minimum 220ms between requests (300 req/min = 200ms, add buffer)
      maxConcurrent: 1,
      // Only 1 concurrent request to avoid rate limit breaches
      reservoir: 300,
      // 300 requests per minute
      reservoirRefreshAmount: 300,
      reservoirRefreshInterval: 60000 // Refresh every minute
    });
    // Initialize Firestore lazily
    /* istanbul ignore next */
    cov_1igvero1hb().s[10]++;
    this.initializeFirestore();
  }
  async initializeFirestore() {
    /* istanbul ignore next */
    cov_1igvero1hb().f[2]++;
    cov_1igvero1hb().s[11]++;
    try {
      /* istanbul ignore next */
      cov_1igvero1hb().s[12]++;
      this.firestore = await (0, admin_1.getAdminFirestore)();
    } catch (error) {
      /* istanbul ignore next */
      cov_1igvero1hb().s[13]++;
      console.error('❌ Failed to initialize Firestore for TheirStack portal:', error);
    }
  }
  /**
   * Search for jobs on TheirStack with rate limiting and credit tracking
   */
  async searchJobs(userId, filters, page =
  /* istanbul ignore next */
  (cov_1igvero1hb().b[3][0]++, 1), limit =
  /* istanbul ignore next */
  (cov_1igvero1hb().b[4][0]++, 50)) {
    /* istanbul ignore next */
    cov_1igvero1hb().f[3]++;
    const apiKey =
    /* istanbul ignore next */
    (cov_1igvero1hb().s[14]++, process.env.THEIRSTACK_API_KEY);
    /* istanbul ignore next */
    cov_1igvero1hb().s[15]++;
    if (!apiKey) {
      /* istanbul ignore next */
      cov_1igvero1hb().b[5][0]++;
      cov_1igvero1hb().s[16]++;
      this.logError('theirStackSearchError', 'TheirStack API key not configured', {
        userId,
        filters
      });
      /* istanbul ignore next */
      cov_1igvero1hb().s[17]++;
      throw new Error('TheirStack API key not configured. Please add THEIRSTACK_API_KEY to your environment variables.');
    } else
    /* istanbul ignore next */
    {
      cov_1igvero1hb().b[5][1]++;
    }
    // Transform our filters to TheirStack API format
    const searchPayload =
    /* istanbul ignore next */
    (cov_1igvero1hb().s[18]++, {
      filters: {
        keywords: filters.keywords,
        locations: filters.locations,
        jobTypes: filters.jobTypes,
        workArrangements: filters.workArrangements,
        salaryRange: filters.salaryRange,
        experienceLevel: filters.experienceLevel,
        companySize: filters.companySize,
        datePosted: filters.datePosted
      },
      page,
      limit
    });
    /* istanbul ignore next */
    cov_1igvero1hb().s[19]++;
    try {
      // Execute search with rate limiting
      const response =
      /* istanbul ignore next */
      (cov_1igvero1hb().s[20]++, await this.rateLimiter.schedule(async () => {
        /* istanbul ignore next */
        cov_1igvero1hb().f[4]++;
        cov_1igvero1hb().s[21]++;
        return fetch(`${this.baseUrl}/v1/jobs/search`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${apiKey}`,
            'Content-Type': 'application/json',
            'User-Agent': 'PrepBettr/1.0 (Job Search Automation)'
          },
          body: JSON.stringify(searchPayload)
        });
      }));
      /* istanbul ignore next */
      cov_1igvero1hb().s[22]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_1igvero1hb().b[6][0]++;
        const errorText =
        /* istanbul ignore next */
        (cov_1igvero1hb().s[23]++, await response.text().catch(() => {
          /* istanbul ignore next */
          cov_1igvero1hb().f[5]++;
          cov_1igvero1hb().s[24]++;
          return 'Unknown error';
        }));
        const errorMessage =
        /* istanbul ignore next */
        (cov_1igvero1hb().s[25]++, `TheirStack API error: ${response.status} ${response.statusText} - ${errorText}`);
        /* istanbul ignore next */
        cov_1igvero1hb().s[26]++;
        this.logError('theirStackSearchError', errorMessage, {
          userId,
          statusCode: response.status,
          statusText: response.statusText,
          filters,
          page,
          limit
        });
        /* istanbul ignore next */
        cov_1igvero1hb().s[27]++;
        throw new Error(errorMessage);
      } else
      /* istanbul ignore next */
      {
        cov_1igvero1hb().b[6][1]++;
      }
      const data =
      /* istanbul ignore next */
      (cov_1igvero1hb().s[28]++, await response.json());
      // Track credit usage (1 credit per job returned)
      const creditsUsed =
      /* istanbul ignore next */
      (cov_1igvero1hb().s[29]++, data.jobs.length);
      /* istanbul ignore next */
      cov_1igvero1hb().s[30]++;
      await this.trackCreditUsage(userId, creditsUsed);
      // Transform TheirStack jobs to our JobListing format
      const jobListings =
      /* istanbul ignore next */
      (cov_1igvero1hb().s[31]++, this.transformTheirStackJobsToJobListings(data.jobs));
      // Log successful search
      /* istanbul ignore next */
      cov_1igvero1hb().s[32]++;
      this.logSuccess('theirStackSearchSuccess', 'TheirStack job search completed successfully', {
        userId,
        jobsFound: jobListings.length,
        totalCount: data.totalCount,
        page,
        limit,
        creditsUsed,
        hasMore: data.hasMore
      });
      /* istanbul ignore next */
      cov_1igvero1hb().s[33]++;
      return jobListings;
    } catch (error) {
      /* istanbul ignore next */
      cov_1igvero1hb().s[34]++;
      if (error instanceof bottleneck_1.default.BottleneckError) {
        /* istanbul ignore next */
        cov_1igvero1hb().b[7][0]++;
        cov_1igvero1hb().s[35]++;
        // Rate limit breach detected
        this.logError('theirStackRateLimitBreach', 'TheirStack rate limit exceeded', {
          userId,
          error: error.message,
          filters
        });
        /* istanbul ignore next */
        cov_1igvero1hb().s[36]++;
        throw new Error('TheirStack rate limit exceeded. Please try again later.');
      } else
      /* istanbul ignore next */
      {
        cov_1igvero1hb().b[7][1]++;
      }
      // Re-throw other errors
      cov_1igvero1hb().s[37]++;
      this.logError('theirStackSearchError', `TheirStack search failed: ${error}`, {
        userId,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1igvero1hb().b[8][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1igvero1hb().b[8][1]++, String(error)),
        filters,
        page,
        limit
      });
      /* istanbul ignore next */
      cov_1igvero1hb().s[38]++;
      throw error;
    }
  }
  /**
   * Track credit usage in Firestore
   */
  async trackCreditUsage(userId, creditsUsed) {
    /* istanbul ignore next */
    cov_1igvero1hb().f[6]++;
    var _a;
    /* istanbul ignore next */
    cov_1igvero1hb().s[39]++;
    if (
    /* istanbul ignore next */
    (cov_1igvero1hb().b[10][0]++, !this.firestore) ||
    /* istanbul ignore next */
    (cov_1igvero1hb().b[10][1]++, creditsUsed === 0)) {
      /* istanbul ignore next */
      cov_1igvero1hb().b[9][0]++;
      cov_1igvero1hb().s[40]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1igvero1hb().b[9][1]++;
    }
    cov_1igvero1hb().s[41]++;
    try {
      const currentMonth =
      /* istanbul ignore next */
      (cov_1igvero1hb().s[42]++, new Date().toISOString().slice(0, 7)); // YYYY-MM format
      const docPath =
      /* istanbul ignore next */
      (cov_1igvero1hb().s[43]++, `usage/theirstackCredits/${currentMonth}`);
      const docRef =
      /* istanbul ignore next */
      (cov_1igvero1hb().s[44]++, this.firestore.collection('usage').doc('theirstackCredits').collection('monthly').doc(currentMonth));
      /* istanbul ignore next */
      cov_1igvero1hb().s[45]++;
      await docRef.set({
        month: currentMonth,
        creditsUsed: this.firestore.FieldValue.increment(creditsUsed),
        lastUpdated: new Date(),
        userId: userId // Track which user used credits
      }, {
        merge: true
      });
      // Check credit usage and emit warnings
      const updatedDoc =
      /* istanbul ignore next */
      (cov_1igvero1hb().s[46]++, await docRef.get());
      const totalCreditsUsed =
      /* istanbul ignore next */
      (cov_1igvero1hb().s[47]++,
      /* istanbul ignore next */
      (cov_1igvero1hb().b[11][0]++,
      /* istanbul ignore next */
      (cov_1igvero1hb().b[13][0]++, (_a = updatedDoc.data()) === null) ||
      /* istanbul ignore next */
      (cov_1igvero1hb().b[13][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_1igvero1hb().b[12][0]++, void 0) :
      /* istanbul ignore next */
      (cov_1igvero1hb().b[12][1]++, _a.creditsUsed)) ||
      /* istanbul ignore next */
      (cov_1igvero1hb().b[11][1]++, creditsUsed));
      // Emit warnings based on usage
      /* istanbul ignore next */
      cov_1igvero1hb().s[48]++;
      if (totalCreditsUsed >= 500) {
        /* istanbul ignore next */
        cov_1igvero1hb().b[14][0]++;
        cov_1igvero1hb().s[49]++;
        this.logError('theirStackCreditsExceeded', 'TheirStack credits exceeded maximum threshold', {
          userId,
          creditsUsed: totalCreditsUsed,
          threshold: 500,
          month: currentMonth
        });
      } else {
        /* istanbul ignore next */
        cov_1igvero1hb().b[14][1]++;
        cov_1igvero1hb().s[50]++;
        if (totalCreditsUsed >= 160) {
          /* istanbul ignore next */
          cov_1igvero1hb().b[15][0]++;
          cov_1igvero1hb().s[51]++;
          // 80% of 200 free credits
          this.logWarning('theirStackCreditsWarning', 'TheirStack credits approaching limit', {
            userId,
            creditsUsed: totalCreditsUsed,
            threshold: 160,
            freeLimit: 200,
            month: currentMonth
          });
        } else
        /* istanbul ignore next */
        {
          cov_1igvero1hb().b[15][1]++;
        }
      }
      // Track metric for Application Insights
      /* istanbul ignore next */
      cov_1igvero1hb().s[52]++;
      this.logMetric('theirStackCreditsUsed', creditsUsed, {
        userId,
        month: currentMonth,
        totalCreditsThisMonth: totalCreditsUsed
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1igvero1hb().s[53]++;
      console.error('❌ Failed to track TheirStack credit usage:', error);
    }
  }
  /**
   * Get credit usage for a specific month
   */
  async getCreditsUsage(month) {
    /* istanbul ignore next */
    cov_1igvero1hb().f[7]++;
    var _a;
    /* istanbul ignore next */
    cov_1igvero1hb().s[54]++;
    if (!this.firestore) {
      /* istanbul ignore next */
      cov_1igvero1hb().b[16][0]++;
      cov_1igvero1hb().s[55]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1igvero1hb().b[16][1]++;
    }
    cov_1igvero1hb().s[56]++;
    try {
      const targetMonth =
      /* istanbul ignore next */
      (cov_1igvero1hb().s[57]++,
      /* istanbul ignore next */
      (cov_1igvero1hb().b[17][0]++, month) ||
      /* istanbul ignore next */
      (cov_1igvero1hb().b[17][1]++, new Date().toISOString().slice(0, 7)));
      const docRef =
      /* istanbul ignore next */
      (cov_1igvero1hb().s[58]++, this.firestore.collection('usage').doc('theirstackCredits').collection('monthly').doc(targetMonth));
      const doc =
      /* istanbul ignore next */
      (cov_1igvero1hb().s[59]++, await docRef.get());
      /* istanbul ignore next */
      cov_1igvero1hb().s[60]++;
      if (doc.exists) {
        /* istanbul ignore next */
        cov_1igvero1hb().b[18][0]++;
        const data =
        /* istanbul ignore next */
        (cov_1igvero1hb().s[61]++, doc.data());
        /* istanbul ignore next */
        cov_1igvero1hb().s[62]++;
        return {
          month: targetMonth,
          creditsUsed:
          /* istanbul ignore next */
          (cov_1igvero1hb().b[19][0]++, data.creditsUsed) ||
          /* istanbul ignore next */
          (cov_1igvero1hb().b[19][1]++, 0),
          lastUpdated:
          /* istanbul ignore next */
          (cov_1igvero1hb().b[20][0]++,
          /* istanbul ignore next */
          (cov_1igvero1hb().b[22][0]++, (_a = data.lastUpdated) === null) ||
          /* istanbul ignore next */
          (cov_1igvero1hb().b[22][1]++, _a === void 0) ?
          /* istanbul ignore next */
          (cov_1igvero1hb().b[21][0]++, void 0) :
          /* istanbul ignore next */
          (cov_1igvero1hb().b[21][1]++, _a.toDate())) ||
          /* istanbul ignore next */
          (cov_1igvero1hb().b[20][1]++, new Date())
        };
      } else
      /* istanbul ignore next */
      {
        cov_1igvero1hb().b[18][1]++;
      }
      cov_1igvero1hb().s[63]++;
      return {
        month: targetMonth,
        creditsUsed: 0,
        lastUpdated: new Date()
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1igvero1hb().s[64]++;
      console.error('❌ Failed to get TheirStack credits usage:', error);
      /* istanbul ignore next */
      cov_1igvero1hb().s[65]++;
      return null;
    }
  }
  /**
   * Transform TheirStack jobs to our JobListing format
   */
  transformTheirStackJobsToJobListings(theirStackJobs) {
    /* istanbul ignore next */
    cov_1igvero1hb().f[8]++;
    cov_1igvero1hb().s[66]++;
    return theirStackJobs.map((job, index) => {
      /* istanbul ignore next */
      cov_1igvero1hb().f[9]++;
      var _a, _b;
      const jobListing =
      /* istanbul ignore next */
      (cov_1igvero1hb().s[67]++, {
        id:
        /* istanbul ignore next */
        (cov_1igvero1hb().b[23][0]++, job.id) ||
        /* istanbul ignore next */
        (cov_1igvero1hb().b[23][1]++, `theirstack-${Date.now()}-${index}`),
        title:
        /* istanbul ignore next */
        (cov_1igvero1hb().b[24][0]++, job.title) ||
        /* istanbul ignore next */
        (cov_1igvero1hb().b[24][1]++, 'Untitled Position'),
        company:
        /* istanbul ignore next */
        (cov_1igvero1hb().b[25][0]++,
        /* istanbul ignore next */
        (cov_1igvero1hb().b[27][0]++, (_a = job.company) === null) ||
        /* istanbul ignore next */
        (cov_1igvero1hb().b[27][1]++, _a === void 0) ?
        /* istanbul ignore next */
        (cov_1igvero1hb().b[26][0]++, void 0) :
        /* istanbul ignore next */
        (cov_1igvero1hb().b[26][1]++, _a.name)) ||
        /* istanbul ignore next */
        (cov_1igvero1hb().b[25][1]++, 'Unknown Company'),
        location:
        /* istanbul ignore next */
        (cov_1igvero1hb().b[28][0]++, job.location) ||
        /* istanbul ignore next */
        (cov_1igvero1hb().b[28][1]++, 'Location not specified'),
        salary: job.salary ?
        /* istanbul ignore next */
        (cov_1igvero1hb().b[29][0]++, {
          min: job.salary.min,
          max: job.salary.max,
          currency:
          /* istanbul ignore next */
          (cov_1igvero1hb().b[30][0]++, job.salary.currency) ||
          /* istanbul ignore next */
          (cov_1igvero1hb().b[30][1]++, 'USD'),
          period:
          /* istanbul ignore next */
          (cov_1igvero1hb().b[31][0]++, job.salary.period) ||
          /* istanbul ignore next */
          (cov_1igvero1hb().b[31][1]++, 'yearly')
        }) :
        /* istanbul ignore next */
        (cov_1igvero1hb().b[29][1]++, undefined),
        jobType: this.mapJobTypeToOur(job.jobType),
        workArrangement: this.mapWorkArrangementToOur(job.workArrangement),
        description:
        /* istanbul ignore next */
        (cov_1igvero1hb().b[32][0]++, job.description) ||
        /* istanbul ignore next */
        (cov_1igvero1hb().b[32][1]++, 'No description available'),
        requirements:
        /* istanbul ignore next */
        (cov_1igvero1hb().b[33][0]++, job.requirements) ||
        /* istanbul ignore next */
        (cov_1igvero1hb().b[33][1]++, []),
        responsibilities:
        /* istanbul ignore next */
        (cov_1igvero1hb().b[34][0]++, job.responsibilities) ||
        /* istanbul ignore next */
        (cov_1igvero1hb().b[34][1]++, []),
        benefits: job.benefits,
        postedDate:
        /* istanbul ignore next */
        (cov_1igvero1hb().b[35][0]++, job.postedDate) ||
        /* istanbul ignore next */
        (cov_1igvero1hb().b[35][1]++, new Date().toISOString()),
        applicationDeadline: job.applicationDeadline,
        jobPortal: {
          name: 'TheirStack',
          logo: '/icons/theirstack.svg',
          website: 'https://theirstack.com',
          supportsAutoApply: true
        },
        originalUrl:
        /* istanbul ignore next */
        (cov_1igvero1hb().b[36][0]++, job.originalUrl) ||
        /* istanbul ignore next */
        (cov_1igvero1hb().b[36][1]++, `https://theirstack.com/jobs/${job.id}`),
        companyLogo:
        /* istanbul ignore next */
        (cov_1igvero1hb().b[38][0]++, (_b = job.company) === null) ||
        /* istanbul ignore next */
        (cov_1igvero1hb().b[38][1]++, _b === void 0) ?
        /* istanbul ignore next */
        (cov_1igvero1hb().b[37][0]++, void 0) :
        /* istanbul ignore next */
        (cov_1igvero1hb().b[37][1]++, _b.logo),
        relevancyScore: undefined,
        // Will be calculated later
        matchedSkills: [],
        missingSkills: [],
        applicationStatus: 'discovered',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      });
      /* istanbul ignore next */
      cov_1igvero1hb().s[68]++;
      return jobListing;
    });
  }
  /**
   * Map TheirStack job types to our format
   */
  mapJobTypeToOur(jobType) {
    /* istanbul ignore next */
    cov_1igvero1hb().f[10]++;
    cov_1igvero1hb().s[69]++;
    switch (
    /* istanbul ignore next */
    (cov_1igvero1hb().b[41][0]++, jobType === null) ||
    /* istanbul ignore next */
    (cov_1igvero1hb().b[41][1]++, jobType === void 0) ?
    /* istanbul ignore next */
    (cov_1igvero1hb().b[40][0]++, void 0) :
    /* istanbul ignore next */
    (cov_1igvero1hb().b[40][1]++, jobType.toLowerCase())) {
      case 'full-time':
        /* istanbul ignore next */
        cov_1igvero1hb().b[39][0]++;
      case 'fulltime':
        /* istanbul ignore next */
        cov_1igvero1hb().b[39][1]++;
        cov_1igvero1hb().s[70]++;
        return 'full-time';
      case 'part-time':
        /* istanbul ignore next */
        cov_1igvero1hb().b[39][2]++;
      case 'parttime':
        /* istanbul ignore next */
        cov_1igvero1hb().b[39][3]++;
        cov_1igvero1hb().s[71]++;
        return 'part-time';
      case 'contract':
        /* istanbul ignore next */
        cov_1igvero1hb().b[39][4]++;
      case 'contractor':
        /* istanbul ignore next */
        cov_1igvero1hb().b[39][5]++;
        cov_1igvero1hb().s[72]++;
        return 'contract';
      case 'internship':
        /* istanbul ignore next */
        cov_1igvero1hb().b[39][6]++;
      case 'intern':
        /* istanbul ignore next */
        cov_1igvero1hb().b[39][7]++;
        cov_1igvero1hb().s[73]++;
        return 'internship';
      default:
        /* istanbul ignore next */
        cov_1igvero1hb().b[39][8]++;
        cov_1igvero1hb().s[74]++;
        return 'full-time';
    }
  }
  /**
   * Map TheirStack work arrangements to our format
   */
  mapWorkArrangementToOur(workArrangement) {
    /* istanbul ignore next */
    cov_1igvero1hb().f[11]++;
    cov_1igvero1hb().s[75]++;
    switch (
    /* istanbul ignore next */
    (cov_1igvero1hb().b[44][0]++, workArrangement === null) ||
    /* istanbul ignore next */
    (cov_1igvero1hb().b[44][1]++, workArrangement === void 0) ?
    /* istanbul ignore next */
    (cov_1igvero1hb().b[43][0]++, void 0) :
    /* istanbul ignore next */
    (cov_1igvero1hb().b[43][1]++, workArrangement.toLowerCase())) {
      case 'remote':
        /* istanbul ignore next */
        cov_1igvero1hb().b[42][0]++;
        cov_1igvero1hb().s[76]++;
        return 'remote';
      case 'hybrid':
        /* istanbul ignore next */
        cov_1igvero1hb().b[42][1]++;
        cov_1igvero1hb().s[77]++;
        return 'hybrid';
      case 'onsite':
        /* istanbul ignore next */
        cov_1igvero1hb().b[42][2]++;
      case 'on-site':
        /* istanbul ignore next */
        cov_1igvero1hb().b[42][3]++;
      case 'office':
        /* istanbul ignore next */
        cov_1igvero1hb().b[42][4]++;
        cov_1igvero1hb().s[78]++;
        return 'onsite';
      default:
        /* istanbul ignore next */
        cov_1igvero1hb().b[42][5]++;
        cov_1igvero1hb().s[79]++;
        return 'onsite';
    }
  }
  /**
   * Log successful operations with structured logging for Application Insights
   */
  logSuccess(eventName, message, properties =
  /* istanbul ignore next */
  (cov_1igvero1hb().b[45][0]++, {})) {
    /* istanbul ignore next */
    cov_1igvero1hb().f[12]++;
    const logData =
    /* istanbul ignore next */
    (cov_1igvero1hb().s[80]++, {
      level: 'info',
      eventName,
      message,
      properties: Object.assign({
        portal: 'TheirStack',
        timestamp: new Date().toISOString()
      }, properties)
    });
    /* istanbul ignore next */
    cov_1igvero1hb().s[81]++;
    console.log('APPINSIGHTS', JSON.stringify(logData));
  }
  /**
   * Log errors with structured logging for Application Insights
   */
  logError(eventName, message, properties =
  /* istanbul ignore next */
  (cov_1igvero1hb().b[46][0]++, {})) {
    /* istanbul ignore next */
    cov_1igvero1hb().f[13]++;
    const logData =
    /* istanbul ignore next */
    (cov_1igvero1hb().s[82]++, {
      level: 'error',
      eventName,
      message,
      properties: Object.assign({
        portal: 'TheirStack',
        timestamp: new Date().toISOString()
      }, properties)
    });
    /* istanbul ignore next */
    cov_1igvero1hb().s[83]++;
    console.log('APPINSIGHTS', JSON.stringify(logData));
  }
  /**
   * Log warnings with structured logging for Application Insights
   */
  logWarning(eventName, message, properties =
  /* istanbul ignore next */
  (cov_1igvero1hb().b[47][0]++, {})) {
    /* istanbul ignore next */
    cov_1igvero1hb().f[14]++;
    const logData =
    /* istanbul ignore next */
    (cov_1igvero1hb().s[84]++, {
      level: 'warning',
      eventName,
      message,
      properties: Object.assign({
        portal: 'TheirStack',
        timestamp: new Date().toISOString()
      }, properties)
    });
    /* istanbul ignore next */
    cov_1igvero1hb().s[85]++;
    console.log('APPINSIGHTS', JSON.stringify(logData));
  }
  /**
   * Log custom metrics for Application Insights
   */
  logMetric(metricName, value, properties =
  /* istanbul ignore next */
  (cov_1igvero1hb().b[48][0]++, {})) {
    /* istanbul ignore next */
    cov_1igvero1hb().f[15]++;
    const metricData =
    /* istanbul ignore next */
    (cov_1igvero1hb().s[86]++, {
      type: 'metric',
      name: metricName,
      value,
      properties: Object.assign({
        portal: 'TheirStack',
        timestamp: new Date().toISOString()
      }, properties)
    });
    /* istanbul ignore next */
    cov_1igvero1hb().s[87]++;
    console.log('APPINSIGHTS', JSON.stringify(metricData));
  }
  /**
   * Check if TheirStack is properly configured
   */
  isConfigured() {
    /* istanbul ignore next */
    cov_1igvero1hb().f[16]++;
    cov_1igvero1hb().s[88]++;
    return !!process.env.THEIRSTACK_API_KEY;
  }
  /**
   * Health check for TheirStack portal
   */
  async healthCheck() {
    /* istanbul ignore next */
    cov_1igvero1hb().f[17]++;
    cov_1igvero1hb().s[89]++;
    if (!this.isConfigured()) {
      /* istanbul ignore next */
      cov_1igvero1hb().b[49][0]++;
      cov_1igvero1hb().s[90]++;
      return {
        healthy: false,
        message: 'TheirStack API key not configured'
      };
    } else
    /* istanbul ignore next */
    {
      cov_1igvero1hb().b[49][1]++;
    }
    cov_1igvero1hb().s[91]++;
    try {
      // Try a minimal API call to check connectivity
      const response =
      /* istanbul ignore next */
      (cov_1igvero1hb().s[92]++, await this.rateLimiter.schedule(async () => {
        /* istanbul ignore next */
        cov_1igvero1hb().f[18]++;
        cov_1igvero1hb().s[93]++;
        return fetch(`${this.baseUrl}/v1/health`, {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${process.env.THEIRSTACK_API_KEY}`,
            'User-Agent': 'PrepBettr/1.0 (Health Check)'
          }
        });
      }));
      /* istanbul ignore next */
      cov_1igvero1hb().s[94]++;
      return {
        healthy: response.ok,
        message: response.ok ?
        /* istanbul ignore next */
        (cov_1igvero1hb().b[50][0]++, 'TheirStack API accessible') :
        /* istanbul ignore next */
        (cov_1igvero1hb().b[50][1]++, `HTTP ${response.status}: ${response.statusText}`)
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1igvero1hb().s[95]++;
      return {
        healthy: false,
        message: `Health check failed: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1igvero1hb().b[51][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1igvero1hb().b[51][1]++, String(error))}`
      };
    }
  }
}
/* istanbul ignore next */
cov_1igvero1hb().s[96]++;
exports.TheirStackPortal = TheirStackPortal;
// Singleton instance
let theirStackPortalInstance =
/* istanbul ignore next */
(cov_1igvero1hb().s[97]++, null);
function getTheirStackPortal() {
  /* istanbul ignore next */
  cov_1igvero1hb().f[19]++;
  cov_1igvero1hb().s[98]++;
  if (!theirStackPortalInstance) {
    /* istanbul ignore next */
    cov_1igvero1hb().b[52][0]++;
    cov_1igvero1hb().s[99]++;
    theirStackPortalInstance = new TheirStackPortal();
  } else
  /* istanbul ignore next */
  {
    cov_1igvero1hb().b[52][1]++;
  }
  cov_1igvero1hb().s[100]++;
  return theirStackPortalInstance;
}
/* istanbul ignore next */
cov_1igvero1hb().s[101]++;
exports.default = TheirStackPortal;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,