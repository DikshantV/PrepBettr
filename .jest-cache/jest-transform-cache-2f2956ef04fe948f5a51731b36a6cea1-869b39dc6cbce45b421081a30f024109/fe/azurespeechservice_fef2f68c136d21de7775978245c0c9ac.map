{"version":3,"names":["SpeechSDK","cov_xkq9sped5","s","__importStar","require","azure_config_1","AzureSpeechService","constructor","f","speechConfig","recognizer","synthesizer","isInitialized","initialize","secrets","fetchAzureSecrets","b","speechKey","speechEndpoint","console","warn","region","_a","match","SpeechConfig","fromSubscription","speechRecognitionLanguage","setProperty","PropertyId","SpeechServiceConnection_InitialSilenceTimeoutMs","SpeechServiceConnection_EndSilenceTimeoutMs","Speech_SegmentationSilenceTimeoutMs","SpeechServiceResponse_DiarizeIntermediateResults","SpeechServiceResponse_RequestDetailedResultTrueFalse","SpeechServiceConnection_RecoMode","speechSynthesisVoiceName","speechSynthesisOutputFormat","SpeechSynthesisOutputFormat","Audio24Khz48KBitRateMonoMp3","log","error","startContinuousRecognition","onRecognized","onError","audioConfig","AudioConfig","fromDefaultMicrophoneInput","SpeechRecognizer","recognized","e","result","reason","ResultReason","RecognizedSpeech","text","confidence","properties","getProperty","SpeechServiceResponse_JsonResult","canceled","CancellationReason","Error","errorDetails","stopContinuousRecognition","sessionStopped","startContinuousRecognitionAsync","message","stopContinuousRecognitionAsync","close","synthesizeSpeech","options","fromDefaultSpeakerOutput","SpeechSynthesizer","voiceName","rate","pitch","sanitizedText","sanitizeTextForSSML","ssml","Promise","resolve","reject","speakSsmlAsync","SynthesizingAudioCompleted","audioData","replace","trim","processAudioWithAzureSpeech","audioBuffer","pushStream","AudioInputStream","createPushStream","buffer","Uint8Array","write","fromStreamInput","hasRecognizedSpeech","finalResult","maxDurationTimer","setTimeout","sender","event","clearTimeout","isReady","dispose","exports","azureSpeechService"],"sources":["/Users/dikshantvashistha/PrepBettr/lib/services/azure-speech-service.ts"],"sourcesContent":["import * as SpeechSDK from 'microsoft-cognitiveservices-speech-sdk';\nimport { fetchAzureSecrets } from '@/lib/azure-config';\n\nexport interface SpeechRecognitionResult {\n  text: string;\n  confidence: number;\n  reason: string;\n}\n\nexport interface SpeechSynthesisOptions {\n  voiceName?: string;\n  rate?: string;\n  pitch?: string;\n}\n\nexport class AzureSpeechService {\n  private speechConfig: SpeechSDK.SpeechConfig | null = null;\n  private recognizer: SpeechSDK.SpeechRecognizer | null = null;\n  private synthesizer: SpeechSDK.SpeechSynthesizer | null = null;\n  private isInitialized = false;\n\n  /**\n   * Initialize the Azure Speech Service\n   */\n  async initialize(): Promise<boolean> {\n    try {\n      const secrets = await fetchAzureSecrets();\n      \n      if (!secrets.speechKey || !secrets.speechEndpoint) {\n        console.warn('‚ö†Ô∏è Azure Speech credentials not available');\n        return false;\n      }\n\n      // Extract region from endpoint (e.g., https://westus.api.cognitive.microsoft.com -> westus)\n      const region = secrets.speechEndpoint.match(/https:\\/\\/([^.]+)/)?.[1] || 'westus';\n\n      this.speechConfig = SpeechSDK.SpeechConfig.fromSubscription(secrets.speechKey, region);\n      \n      // Enhanced Speech Recognition Configuration\n      this.speechConfig.speechRecognitionLanguage = 'en-US';\n      this.speechConfig.setProperty(SpeechSDK.PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs, '15000'); // Extended to 15s\n      this.speechConfig.setProperty(SpeechSDK.PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs, '2000');\n      this.speechConfig.setProperty(SpeechSDK.PropertyId.Speech_SegmentationSilenceTimeoutMs, '2000');\n      this.speechConfig.setProperty(SpeechSDK.PropertyId.SpeechServiceResponse_DiarizeIntermediateResults, 'true');\n      this.speechConfig.setProperty(SpeechSDK.PropertyId.SpeechServiceResponse_RequestDetailedResultTrueFalse, 'true');\n      this.speechConfig.setProperty(SpeechSDK.PropertyId.SpeechServiceConnection_RecoMode, 'CONVERSATION');\n      \n      // Enhanced Speech Synthesis Configuration\n      this.speechConfig.speechSynthesisVoiceName = 'en-US-AriaNeural'; // More natural sounding\n      this.speechConfig.speechSynthesisOutputFormat = SpeechSDK.SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3;\n\n      this.isInitialized = true;\n      console.log('‚úÖ Azure Speech Service initialized');\n      return true;\n    } catch (error) {\n      console.error('‚ùå Failed to initialize Azure Speech Service:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Start continuous speech recognition\n   */\n  async startContinuousRecognition(\n    onRecognized: (result: SpeechRecognitionResult) => void,\n    onError?: (error: string) => void\n  ): Promise<boolean> {\n    if (!this.isInitialized || !this.speechConfig) {\n      console.error('‚ùå Azure Speech Service not initialized');\n      return false;\n    }\n\n    try {\n      const audioConfig = SpeechSDK.AudioConfig.fromDefaultMicrophoneInput();\n      this.recognizer = new SpeechSDK.SpeechRecognizer(this.speechConfig, audioConfig);\n\n      this.recognizer.recognized = (s, e) => {\n        if (e.result.reason === SpeechSDK.ResultReason.RecognizedSpeech && e.result.text) {\n          onRecognized({\n            text: e.result.text,\n            confidence: e.result.properties?.getProperty(SpeechSDK.PropertyId.SpeechServiceResponse_JsonResult) ? 1.0 : 0.8,\n            reason: 'RecognizedSpeech'\n          });\n        }\n      };\n\n      this.recognizer.canceled = (s, e) => {\n        console.log(`‚ùå Recognition canceled: ${e.reason}`);\n        if (e.reason === SpeechSDK.CancellationReason.Error && onError) {\n          onError(e.errorDetails || 'Unknown error');\n        }\n        this.stopContinuousRecognition();\n      };\n\n      this.recognizer.sessionStopped = (s, e) => {\n        console.log('üõë Recognition session stopped');\n        this.stopContinuousRecognition();\n      };\n\n      await this.recognizer.startContinuousRecognitionAsync();\n      console.log('üé§ Started continuous speech recognition');\n      return true;\n    } catch (error: any) {\n      console.error('‚ùå Failed to start speech recognition:', error);\n      if (onError) {\n        onError(error.message || 'Failed to start speech recognition');\n      }\n      return false;\n    }\n  }\n\n  /**\n   * Stop continuous speech recognition\n   */\n  async stopContinuousRecognition(): Promise<void> {\n    if (this.recognizer) {\n      try {\n        await this.recognizer.stopContinuousRecognitionAsync();\n        this.recognizer.close();\n        this.recognizer = null;\n        console.log('üõë Stopped speech recognition');\n      } catch (error) {\n        console.error('‚ùå Error stopping speech recognition:', error);\n      }\n    }\n  }\n\n  /**\n   * Synthesize speech from text\n   */\n  async synthesizeSpeech(\n    text: string,\n    options: SpeechSynthesisOptions = {}\n  ): Promise<ArrayBuffer | null> {\n    if (!this.isInitialized || !this.speechConfig) {\n      console.error('‚ùå Azure Speech Service not initialized');\n      return null;\n    }\n\n    try {\n      const audioConfig = SpeechSDK.AudioConfig.fromDefaultSpeakerOutput();\n      this.synthesizer = new SpeechSDK.SpeechSynthesizer(this.speechConfig, audioConfig);\n\n      const voiceName = options.voiceName || 'en-US-SaraNeural';\n      const rate = options.rate || '1.0';\n      const pitch = options.pitch || '0Hz';\n\n      // Sanitize text for SSML\n      const sanitizedText = this.sanitizeTextForSSML(text);\n\n      const ssml = `\n        <speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\" xml:lang=\"en-US\">\n          <voice name=\"${voiceName}\">\n            <prosody rate=\"${rate}\" pitch=\"${pitch}\">\n              ${sanitizedText}\n            </prosody>\n          </voice>\n        </speak>\n      `;\n\n      return new Promise((resolve, reject) => {\n        this.synthesizer!.speakSsmlAsync(\n          ssml,\n          (result) => {\n            if (result.reason === SpeechSDK.ResultReason.SynthesizingAudioCompleted) {\n              console.log('‚úÖ Speech synthesis completed');\n              resolve(result.audioData);\n            } else {\n              console.error('‚ùå Speech synthesis failed:', result.errorDetails);\n              reject(new Error(result.errorDetails || 'Speech synthesis failed'));\n            }\n            this.synthesizer?.close();\n            this.synthesizer = null;\n          },\n          (error) => {\n            console.error('‚ùå Speech synthesis error:', error);\n            reject(error);\n            this.synthesizer?.close();\n            this.synthesizer = null;\n          }\n        );\n      });\n    } catch (error) {\n      console.error('‚ùå Failed to synthesize speech:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Sanitize text for SSML to handle special characters and emojis\n   */\n  private sanitizeTextForSSML(text: string): string {\n    return text\n      // Remove or replace emojis and special unicode characters\n      .replace(/[\\u{1F600}-\\u{1F64F}]|[\\u{1F300}-\\u{1F5FF}]|[\\u{1F680}-\\u{1F6FF}]|[\\u{1F1E0}-\\u{1F1FF}]|[\\u{2600}-\\u{26FF}]|[\\u{2700}-\\u{27BF}]/gu, '')\n      // Escape XML special characters (but NOT apostrophes - they cause TTS to say \"apos\")\n      .replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/\"/g, '&quot;')\n      // NOTE: We intentionally do NOT escape apostrophes with &apos; as TTS reads it as \"apos\"\n      // Single quotes/apostrophes are safe in SSML content and will be pronounced correctly\n      // .replace(/'/g, '&apos;')  // REMOVED - causes \"apos\" pronunciation\n      // Remove problematic symbols that might cause parsing issues\n      .replace(/[@#$%^&*()]/g, ' ')\n      // Clean up multiple spaces\n      .replace(/\\s+/g, ' ')\n      .trim();\n  }\n\n  /**\n   * Process audio with Azure Speech using continuous recognition for better silence handling\n   */\n  async processAudioWithAzureSpeech(audioBuffer: ArrayBuffer): Promise<SpeechRecognitionResult | null> {\n    if (!this.isInitialized || !this.speechConfig) {\n      console.error('‚ùå Azure Speech Service not initialized');\n      return null;\n    }\n\n    try {\n      // Create push stream for the audio\n      const pushStream = SpeechSDK.AudioInputStream.createPushStream();\n      const buffer = new Uint8Array(audioBuffer);\n      pushStream.write(buffer as any); // Azure SDK expects ArrayBuffer but Uint8Array is compatible\n      pushStream.close();\n      \n      const audioConfig = SpeechSDK.AudioConfig.fromStreamInput(pushStream);\n      const recognizer = new SpeechSDK.SpeechRecognizer(this.speechConfig, audioConfig);\n\n      // Use continuous recognition instead of recognizeOnceAsync\n      return new Promise((resolve, reject) => {\n        let hasRecognizedSpeech = false;\n        let finalResult: SpeechRecognitionResult | null = null;\n        \n        // Set maximum duration (65 seconds) to prevent hanging\n        const maxDurationTimer = setTimeout(() => {\n          console.log('‚è±Ô∏è Maximum recognition duration reached, stopping...');\n          recognizer.stopContinuousRecognitionAsync();\n          if (!hasRecognizedSpeech) {\n            resolve(null);\n          }\n        }, 65000);\n\n        // Handle final recognized results\n        recognizer.recognized = (sender, event) => {\n          if (event.result.reason === SpeechSDK.ResultReason.RecognizedSpeech && event.result.text) {\n            console.log(`‚úÖ Speech recognized: ${event.result.text}`);\n            hasRecognizedSpeech = true;\n            \n            finalResult = {\n              text: event.result.text,\n              confidence: event.result.properties?.getProperty(SpeechSDK.PropertyId.SpeechServiceResponse_JsonResult) ? 1.0 : 0.8,\n              reason: 'RecognizedSpeech'\n            };\n            \n            // Stop recognition after first meaningful result\n            clearTimeout(maxDurationTimer);\n            recognizer.stopContinuousRecognitionAsync();\n          }\n        };\n\n        // Handle session stopped\n        recognizer.sessionStopped = (sender, event) => {\n          console.log('üõë Recognition session stopped');\n          clearTimeout(maxDurationTimer);\n          recognizer.close();\n          resolve(finalResult);\n        };\n\n        // Handle cancellation/errors\n        recognizer.canceled = (sender, event) => {\n          console.log(`‚ùå Recognition canceled: ${event.reason}`);\n          clearTimeout(maxDurationTimer);\n          recognizer.stopContinuousRecognitionAsync();\n          \n          if (event.reason === SpeechSDK.CancellationReason.Error) {\n            console.error('Recognition error:', event.errorDetails);\n            reject(new Error(event.errorDetails || 'Unknown recognition error'));\n          } else {\n            resolve(finalResult);\n          }\n        };\n\n        // Start continuous recognition\n        recognizer.startContinuousRecognitionAsync(\n          () => {\n            console.log('üé§ Started continuous recognition for audio processing');\n          },\n          (error) => {\n            console.error('‚ùå Failed to start continuous recognition:', error);\n            clearTimeout(maxDurationTimer);\n            recognizer.close();\n            reject(new Error(error));\n          }\n        );\n      });\n    } catch (error) {\n      console.error('‚ùå Failed to process audio with Azure Speech:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Check if the service is initialized and ready\n   */\n  isReady(): boolean {\n    return this.isInitialized && this.speechConfig !== null;\n  }\n\n  /**\n   * Clean up resources\n   */\n  dispose(): void {\n    this.stopContinuousRecognition();\n    if (this.synthesizer) {\n      this.synthesizer.close();\n      this.synthesizer = null;\n    }\n    this.speechConfig = null;\n    this.isInitialized = false;\n    console.log('üßπ Azure Speech Service disposed');\n  }\n}\n\n// Export singleton instance\nexport const azureSpeechService = new AzureSpeechService();\n"],"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","ignoreList":[]}