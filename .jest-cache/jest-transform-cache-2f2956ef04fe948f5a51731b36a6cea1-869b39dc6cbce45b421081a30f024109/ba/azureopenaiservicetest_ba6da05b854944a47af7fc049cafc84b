542ccb91de1441bd80a594daf4abd996
"use strict";

/* istanbul ignore next */
function cov_ih9hso7ih() {
  var path = "/Users/dikshantvashistha/PrepBettr/azure/lib/services/azure-openai-service.test.ts";
  var hash = "a9632f988229691bdac5d2d77788c688ab4cc3d3";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/azure/lib/services/azure-openai-service.test.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 18,
          column: 4
        }
      },
      "2": {
        start: {
          line: 4,
          column: 27
        },
        end: {
          line: 18,
          column: 1
        }
      },
      "3": {
        start: {
          line: 5,
          column: 53
        },
        end: {
          line: 17,
          column: 5
        }
      },
      "4": {
        start: {
          line: 20,
          column: 0
        },
        end: {
          line: 26,
          column: 4
        }
      },
      "5": {
        start: {
          line: 20,
          column: 54
        },
        end: {
          line: 26,
          column: 1
        }
      },
      "6": {
        start: {
          line: 27,
          column: 31
        },
        end: {
          line: 27,
          column: 64
        }
      },
      "7": {
        start: {
          line: 28,
          column: 0
        },
        end: {
          line: 200,
          column: 3
        }
      },
      "8": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 33,
          column: 7
        }
      },
      "9": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 66
        }
      },
      "10": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 35
        }
      },
      "11": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 36,
          column: 7
        }
      },
      "12": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 26
        }
      },
      "13": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 45,
          column: 7
        }
      },
      "14": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 44,
          column: 11
        }
      },
      "15": {
        start: {
          line: 39,
          column: 29
        },
        end: {
          line: 39,
          column: 71
        }
      },
      "16": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 100
        }
      },
      "17": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 77
        }
      },
      "18": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 52
        }
      },
      "19": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 52
        }
      },
      "20": {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 145,
          column: 7
        }
      },
      "21": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 70,
          column: 11
        }
      },
      "22": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 55
        }
      },
      "23": {
        start: {
          line: 51,
          column: 30
        },
        end: {
          line: 51,
          column: 91
        }
      },
      "24": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 87
        }
      },
      "25": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 53
        }
      },
      "26": {
        start: {
          line: 55,
          column: 30
        },
        end: {
          line: 55,
          column: 98
        }
      },
      "27": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 93
        }
      },
      "28": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 53
        }
      },
      "29": {
        start: {
          line: 59,
          column: 30
        },
        end: {
          line: 59,
          column: 68
        }
      },
      "30": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 77
        }
      },
      "31": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 53
        }
      },
      "32": {
        start: {
          line: 63,
          column: 30
        },
        end: {
          line: 63,
          column: 121
        }
      },
      "33": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 96
        }
      },
      "34": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 53
        }
      },
      "35": {
        start: {
          line: 67,
          column: 30
        },
        end: {
          line: 67,
          column: 69
        }
      },
      "36": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 111
        }
      },
      "37": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 53
        }
      },
      "38": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 87,
          column: 11
        }
      },
      "39": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 55
        }
      },
      "40": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 74
        }
      },
      "41": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 81
        }
      },
      "42": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 51
        }
      },
      "43": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 104
        }
      },
      "44": {
        start: {
          line: 80,
          column: 29
        },
        end: {
          line: 80,
          column: 68
        }
      },
      "45": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 52
        }
      },
      "46": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 91
        }
      },
      "47": {
        start: {
          line: 85,
          column: 30
        },
        end: {
          line: 85,
          column: 109
        }
      },
      "48": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 53
        }
      },
      "49": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 103,
          column: 11
        }
      },
      "50": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 55
        }
      },
      "51": {
        start: {
          line: 92,
          column: 30
        },
        end: {
          line: 92,
          column: 85
        }
      },
      "52": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 53
        }
      },
      "53": {
        start: {
          line: 94,
          column: 30
        },
        end: {
          line: 94,
          column: 79
        }
      },
      "54": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 53
        }
      },
      "55": {
        start: {
          line: 96,
          column: 30
        },
        end: {
          line: 96,
          column: 68
        }
      },
      "56": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 53
        }
      },
      "57": {
        start: {
          line: 98,
          column: 30
        },
        end: {
          line: 98,
          column: 79
        }
      },
      "58": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 53
        }
      },
      "59": {
        start: {
          line: 101,
          column: 30
        },
        end: {
          line: 101,
          column: 68
        }
      },
      "60": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 53
        }
      },
      "61": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 121,
          column: 11
        }
      },
      "62": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 63
        }
      },
      "63": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 55
        }
      },
      "64": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 68
        }
      },
      "65": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 72
        }
      },
      "66": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 51
        }
      },
      "67": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 81
        }
      },
      "68": {
        start: {
          line: 114,
          column: 34
        },
        end: {
          line: 114,
          column: 72
        }
      },
      "69": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 81
        }
      },
      "70": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 57
        }
      },
      "71": {
        start: {
          line: 119,
          column: 40
        },
        end: {
          line: 119,
          column: 72
        }
      },
      "72": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 66
        }
      },
      "73": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 144,
          column: 11
        }
      },
      "74": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 55
        }
      },
      "75": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 59
        }
      },
      "76": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 56
        }
      },
      "77": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 52
        }
      },
      "78": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 56
        }
      },
      "79": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 46
        }
      },
      "80": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 130,
          column: 55
        }
      },
      "81": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 59
        }
      },
      "82": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 56
        }
      },
      "83": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 52
        }
      },
      "84": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 56
        }
      },
      "85": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 51
        }
      },
      "86": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 46
        }
      },
      "87": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 55
        }
      },
      "88": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 59
        }
      },
      "89": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 140,
          column: 56
        }
      },
      "90": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 52
        }
      },
      "91": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 56
        }
      },
      "92": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 52
        }
      },
      "93": {
        start: {
          line: 146,
          column: 4
        },
        end: {
          line: 161,
          column: 7
        }
      },
      "94": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 160,
          column: 11
        }
      },
      "95": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 55
        }
      },
      "96": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 67
        }
      },
      "97": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 79
        }
      },
      "98": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 51
        }
      },
      "99": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 75
        }
      },
      "100": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 51
        }
      },
      "101": {
        start: {
          line: 156,
          column: 38
        },
        end: {
          line: 156,
          column: 126
        }
      },
      "102": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 157,
          column: 59
        }
      },
      "103": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 158,
          column: 72
        }
      },
      "104": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 159,
          column: 72
        }
      },
      "105": {
        start: {
          line: 162,
          column: 4
        },
        end: {
          line: 175,
          column: 7
        }
      },
      "106": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 174,
          column: 11
        }
      },
      "107": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 55
        }
      },
      "108": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 64
        }
      },
      "109": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 167,
          column: 68
        }
      },
      "110": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 169,
          column: 40
        }
      },
      "111": {
        start: {
          line: 171,
          column: 29
        },
        end: {
          line: 171,
          column: 71
        }
      },
      "112": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 77
        }
      },
      "113": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 173,
          column: 52
        }
      },
      "114": {
        start: {
          line: 176,
          column: 4
        },
        end: {
          line: 199,
          column: 7
        }
      },
      "115": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 187,
          column: 11
        }
      },
      "116": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 178,
          column: 63
        }
      },
      "117": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 55
        }
      },
      "118": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 67
        }
      },
      "119": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 74
        }
      },
      "120": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 51
        }
      },
      "121": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 77
        }
      },
      "122": {
        start: {
          line: 184,
          column: 29
        },
        end: {
          line: 184,
          column: 68
        }
      },
      "123": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 186,
          column: 99
        }
      },
      "124": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 198,
          column: 11
        }
      },
      "125": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 64
        }
      },
      "126": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 55
        }
      },
      "127": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 69
        }
      },
      "128": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 57
        }
      },
      "129": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 52
        }
      },
      "130": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 70
        }
      },
      "131": {
        start: {
          line: 195,
          column: 29
        },
        end: {
          line: 195,
          column: 68
        }
      },
      "132": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 197,
          column: 98
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 4,
            column: 20
          },
          end: {
            line: 4,
            column: 21
          }
        },
        loc: {
          start: {
            line: 4,
            column: 27
          },
          end: {
            line: 18,
            column: 1
          }
        },
        line: 4
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 5,
            column: 46
          },
          end: {
            line: 5,
            column: 47
          }
        },
        loc: {
          start: {
            line: 5,
            column: 53
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 5
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 47
          },
          end: {
            line: 20,
            column: 48
          }
        },
        loc: {
          start: {
            line: 20,
            column: 54
          },
          end: {
            line: 26,
            column: 1
          }
        },
        line: 20
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 28,
            column: 60
          },
          end: {
            line: 28,
            column: 61
          }
        },
        loc: {
          start: {
            line: 28,
            column: 66
          },
          end: {
            line: 200,
            column: 1
          }
        },
        line: 28
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 30,
            column: 15
          },
          end: {
            line: 30,
            column: 16
          }
        },
        loc: {
          start: {
            line: 30,
            column: 27
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 30
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 34,
            column: 14
          },
          end: {
            line: 34,
            column: 15
          }
        },
        loc: {
          start: {
            line: 34,
            column: 20
          },
          end: {
            line: 36,
            column: 5
          }
        },
        line: 34
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 37,
            column: 43
          },
          end: {
            line: 37,
            column: 44
          }
        },
        loc: {
          start: {
            line: 37,
            column: 49
          },
          end: {
            line: 45,
            column: 5
          }
        },
        line: 37
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 38,
            column: 72
          },
          end: {
            line: 38,
            column: 73
          }
        },
        loc: {
          start: {
            line: 38,
            column: 84
          },
          end: {
            line: 44,
            column: 9
          }
        },
        line: 38
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 46,
            column: 60
          },
          end: {
            line: 46,
            column: 61
          }
        },
        loc: {
          start: {
            line: 46,
            column: 66
          },
          end: {
            line: 145,
            column: 5
          }
        },
        line: 46
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 47,
            column: 62
          },
          end: {
            line: 47,
            column: 63
          }
        },
        loc: {
          start: {
            line: 47,
            column: 74
          },
          end: {
            line: 70,
            column: 9
          }
        },
        line: 47
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 71,
            column: 63
          },
          end: {
            line: 71,
            column: 64
          }
        },
        loc: {
          start: {
            line: 71,
            column: 75
          },
          end: {
            line: 87,
            column: 9
          }
        },
        line: 71
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 88,
            column: 77
          },
          end: {
            line: 88,
            column: 78
          }
        },
        loc: {
          start: {
            line: 88,
            column: 89
          },
          end: {
            line: 103,
            column: 9
          }
        },
        line: 88
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 104,
            column: 77
          },
          end: {
            line: 104,
            column: 78
          }
        },
        loc: {
          start: {
            line: 104,
            column: 89
          },
          end: {
            line: 121,
            column: 9
          }
        },
        line: 104
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 122,
            column: 59
          },
          end: {
            line: 122,
            column: 60
          }
        },
        loc: {
          start: {
            line: 122,
            column: 71
          },
          end: {
            line: 144,
            column: 9
          }
        },
        line: 122
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 146,
            column: 54
          },
          end: {
            line: 146,
            column: 55
          }
        },
        loc: {
          start: {
            line: 146,
            column: 60
          },
          end: {
            line: 161,
            column: 5
          }
        },
        line: 146
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 147,
            column: 78
          },
          end: {
            line: 147,
            column: 79
          }
        },
        loc: {
          start: {
            line: 147,
            column: 90
          },
          end: {
            line: 160,
            column: 9
          }
        },
        line: 147
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 162,
            column: 34
          },
          end: {
            line: 162,
            column: 35
          }
        },
        loc: {
          start: {
            line: 162,
            column: 40
          },
          end: {
            line: 175,
            column: 5
          }
        },
        line: 162
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 163,
            column: 69
          },
          end: {
            line: 163,
            column: 70
          }
        },
        loc: {
          start: {
            line: 163,
            column: 81
          },
          end: {
            line: 174,
            column: 9
          }
        },
        line: 163
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 176,
            column: 45
          },
          end: {
            line: 176,
            column: 46
          }
        },
        loc: {
          start: {
            line: 176,
            column: 51
          },
          end: {
            line: 199,
            column: 5
          }
        },
        line: 176
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 177,
            column: 75
          },
          end: {
            line: 177,
            column: 76
          }
        },
        loc: {
          start: {
            line: 177,
            column: 87
          },
          end: {
            line: 187,
            column: 9
          }
        },
        line: 177
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 188,
            column: 77
          },
          end: {
            line: 188,
            column: 78
          }
        },
        loc: {
          start: {
            line: 188,
            column: 89
          },
          end: {
            line: 198,
            column: 9
          }
        },
        line: 188
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    b: {},
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/azure/lib/services/azure-openai-service.test.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/azure/lib/services/azure-openai-service.test.ts"],
      sourcesContent: ["import { AzureOpenAIService } from './azure-openai-service';\n\n// Mock the Azure OpenAI client\njest.mock('openai', () => ({\n  AzureOpenAI: jest.fn().mockImplementation(() => ({\n    chat: {\n      completions: {\n        create: jest.fn().mockResolvedValue({\n          choices: [{\n            message: {\n              content: 'This is a mock interview question response.'\n            }\n          }]\n        })\n      }\n    }\n  }))\n}));\n\n// Mock the fetchAzureSecrets function\njest.mock('../../../lib/azure-config-browser', () => ({\n  fetchAzureSecrets: jest.fn().mockResolvedValue({\n    azureOpenAIKey: 'mock-key',\n    azureOpenAIEndpoint: 'mock-endpoint',\n    azureOpenAIDeployment: 'mock-deployment'\n  })\n}));\n\ndescribe('AzureOpenAIService - Preliminary Questions Flow', () => {\n  let service: AzureOpenAIService;\n\n  beforeEach(async () => {\n    service = new AzureOpenAIService();\n    await service.initialize();\n  });\n\n  afterEach(() => {\n    service.dispose();\n  });\n\n  describe('startInterviewConversation', () => {\n    it('should start with greeting and first preliminary question', async () => {\n      const response = await service.startInterviewConversation();\n      \n      expect(response.content).toContain(\"Hello! Welcome to your interview practice session\");\n      expect(response.content).toContain(\"What is your current role?\");\n      expect(response.questionNumber).toBe(0); // 0 indicates preliminary phase\n      expect(response.isComplete).toBe(false);\n    });\n  });\n\n  describe('processUserResponse - Preliminary Questions', () => {\n    it('should process preliminary questions one by one', async () => {\n      // Start the interview\n      await service.startInterviewConversation();\n      \n      // Answer first preliminary question (current role)\n      const response1 = await service.processUserResponse('Senior Software Engineer');\n      expect(response1.content).toContain(\"What primary tech stack do you use?\");\n      expect(response1.questionNumber).toBe(0);\n      \n      // Answer second preliminary question (tech stack)\n      const response2 = await service.processUserResponse('React, Node.js, TypeScript, AWS');\n      expect(response2.content).toContain(\"How many years of experience do you have?\");\n      expect(response2.questionNumber).toBe(0);\n      \n      // Answer third preliminary question (years of experience)\n      const response3 = await service.processUserResponse('5');\n      expect(response3.content).toContain(\"What are your key skills?\");\n      expect(response3.questionNumber).toBe(0);\n      \n      // Answer fourth preliminary question (key skills)\n      const response4 = await service.processUserResponse('Full-stack development, System design, Team leadership');\n      expect(response4.content).toContain(\"How many interview questions would you like?\");\n      expect(response4.questionNumber).toBe(0);\n      \n      // Answer fifth preliminary question (number of questions)\n      const response5 = await service.processUserResponse('10');\n      expect(response5.content).toContain(\"Great! I now have a better understanding of your background\");\n      expect(response5.questionNumber).toBe(1); // Now in actual interview phase\n    });\n\n    it('should track preliminaryCollected flag correctly', async () => {\n      // Start the interview - preliminaryCollected should be false\n      await service.startInterviewConversation();\n      \n      // Complete all preliminary questions\n      await service.processUserResponse('Senior Software Engineer');\n      await service.processUserResponse('React, Node.js, TypeScript, AWS');\n      await service.processUserResponse('5');\n      await service.processUserResponse('Full-stack development, System design, Team leadership');\n      \n      // After last preliminary question, preliminaryCollected should be set to true\n      const response = await service.processUserResponse('10');\n      \n      // Verify the flag was set and we transitioned to real questions\n      expect(response.questionNumber).toBe(1); // First real question\n      expect(response.content).toContain(\"Great! I now have a better understanding\");\n      \n      // Subsequent responses should increment question count normally\n      const response2 = await service.processUserResponse('I use SOLID principles in my daily work...');\n      expect(response2.questionNumber).toBe(2); // Second real question\n    });\n\n    it('should keep currentQuestionCount at 0 during preliminary phase', async () => {\n      // Start the interview\n      await service.startInterviewConversation();\n      \n      // During preliminary questions, questionNumber should always be 0\n      const response1 = await service.processUserResponse('Frontend Developer');\n      expect(response1.questionNumber).toBe(0);\n      \n      const response2 = await service.processUserResponse('Vue.js, Nuxt');\n      expect(response2.questionNumber).toBe(0);\n      \n      const response3 = await service.processUserResponse('3');\n      expect(response3.questionNumber).toBe(0);\n      \n      const response4 = await service.processUserResponse('UI/UX Design');\n      expect(response4.questionNumber).toBe(0);\n      \n      // After completing preliminary, should start at 1\n      const response5 = await service.processUserResponse('8');\n      expect(response5.questionNumber).toBe(1);\n    });\n\n    it('should build proper system context after preliminary questions', async () => {\n      // Set interview type\n      service.setInterviewContext({ type: 'technical' });\n      \n      // Start and complete preliminary questions\n      await service.startInterviewConversation();\n      await service.processUserResponse('Frontend Developer');\n      await service.processUserResponse('React, Vue, JavaScript');\n      await service.processUserResponse('3');\n      await service.processUserResponse('UI/UX, Performance optimization');\n      \n      // Final response should include tailored opening question\n      const finalResponse = await service.processUserResponse('8');\n      \n      // Should transition to actual interview with personalized question\n      expect(finalResponse.content).toContain(\"Let's begin the interview\");\n      expect(finalResponse.questionNumber).toBe(1);\n      \n      // The opening question should be tailored to the candidate's profile\n      const conversationHistory = service.getConversationHistory();\n      expect(conversationHistory.length).toBeGreaterThan(0);\n    });\n\n    it('should limit question count between 5 and 20', async () => {\n      await service.startInterviewConversation();\n      await service.processUserResponse('Developer');\n      await service.processUserResponse('Python');\n      await service.processUserResponse('10');\n      await service.processUserResponse('Coding');\n      \n      // Test with very low number\n      await service.clearConversation();\n      await service.startInterviewConversation();\n      await service.processUserResponse('Developer');\n      await service.processUserResponse('Python');\n      await service.processUserResponse('10');\n      await service.processUserResponse('Coding');\n      await service.processUserResponse('3'); // Should be clamped to 5\n      \n      // Test with very high number\n      await service.clearConversation();\n      await service.startInterviewConversation();\n      await service.processUserResponse('Developer');\n      await service.processUserResponse('Python');\n      await service.processUserResponse('10');\n      await service.processUserResponse('Coding');\n      await service.processUserResponse('50'); // Should be clamped to 20\n    });\n  });\n\n  describe('processUserResponse - Interview Phase', () => {\n    it('should handle normal interview flow after preliminary questions', async () => {\n      // Complete preliminary questions\n      await service.startInterviewConversation();\n      await service.processUserResponse('Backend Developer');\n      await service.processUserResponse('Java, Spring Boot, PostgreSQL');\n      await service.processUserResponse('7');\n      await service.processUserResponse('Microservices, API design');\n      await service.processUserResponse('5');\n      \n      // Now in normal interview flow\n      const interviewResponse = await service.processUserResponse('I would implement a distributed caching solution...');\n      \n      expect(interviewResponse.content).toBeTruthy();\n      expect(interviewResponse.questionNumber).toBeGreaterThan(1);\n      expect(interviewResponse.followUpSuggestions).toBeDefined();\n    });\n  });\n\n  describe('clearConversation', () => {\n    it('should reset all state including preliminary questions', async () => {\n      // Start and partially complete preliminary questions\n      await service.startInterviewConversation();\n      await service.processUserResponse('Data Scientist');\n      await service.processUserResponse('Python, TensorFlow');\n      \n      // Clear conversation\n      service.clearConversation();\n      \n      // Should start fresh\n      const response = await service.startInterviewConversation();\n      expect(response.content).toContain(\"What is your current role?\");\n      expect(response.questionNumber).toBe(0);\n    });\n  });\n\n  describe('Interview Type Customization', () => {\n    it('should generate technical questions for technical interviews', async () => {\n      service.setInterviewContext({ type: 'technical' });\n      \n      await service.startInterviewConversation();\n      await service.processUserResponse('Software Engineer');\n      await service.processUserResponse('Node.js, MongoDB, Docker');\n      await service.processUserResponse('4');\n      await service.processUserResponse('Backend development, DevOps');\n      \n      const response = await service.processUserResponse('10');\n      \n      // Should contain technical-focused opening\n      expect(response.content.toLowerCase()).toMatch(/technical|problem|project|technology/);\n    });\n\n    it('should generate behavioral questions for behavioral interviews', async () => {\n      service.setInterviewContext({ type: 'behavioral' });\n      \n      await service.startInterviewConversation();\n      await service.processUserResponse('Engineering Manager');\n      await service.processUserResponse('Various');\n      await service.processUserResponse('10');\n      await service.processUserResponse('Leadership, Strategy');\n      \n      const response = await service.processUserResponse('10');\n      \n      // Should contain behavioral-focused opening\n      expect(response.content.toLowerCase()).toMatch(/lead|challenging|project|initiative/);\n    });\n  });\n});\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a9632f988229691bdac5d2d77788c688ab4cc3d3"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_ih9hso7ih = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_ih9hso7ih();
cov_ih9hso7ih().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
// Mock the Azure OpenAI client
/* istanbul ignore next */
cov_ih9hso7ih().s[1]++;
jest.mock('openai', () => {
  /* istanbul ignore next */
  cov_ih9hso7ih().f[0]++;
  cov_ih9hso7ih().s[2]++;
  return {
    AzureOpenAI: jest.fn().mockImplementation(() => {
      /* istanbul ignore next */
      cov_ih9hso7ih().f[1]++;
      cov_ih9hso7ih().s[3]++;
      return {
        chat: {
          completions: {
            create: jest.fn().mockResolvedValue({
              choices: [{
                message: {
                  content: 'This is a mock interview question response.'
                }
              }]
            })
          }
        }
      };
    })
  };
});
// Mock the fetchAzureSecrets function
/* istanbul ignore next */
cov_ih9hso7ih().s[4]++;
jest.mock('../../../lib/azure-config-browser', () => {
  /* istanbul ignore next */
  cov_ih9hso7ih().f[2]++;
  cov_ih9hso7ih().s[5]++;
  return {
    fetchAzureSecrets: jest.fn().mockResolvedValue({
      azureOpenAIKey: 'mock-key',
      azureOpenAIEndpoint: 'mock-endpoint',
      azureOpenAIDeployment: 'mock-deployment'
    })
  };
});
const azure_openai_service_1 =
/* istanbul ignore next */
(cov_ih9hso7ih().s[6]++, require("./azure-openai-service"));
/* istanbul ignore next */
cov_ih9hso7ih().s[7]++;
describe('AzureOpenAIService - Preliminary Questions Flow', () => {
  /* istanbul ignore next */
  cov_ih9hso7ih().f[3]++;
  let service;
  /* istanbul ignore next */
  cov_ih9hso7ih().s[8]++;
  beforeEach(async () => {
    /* istanbul ignore next */
    cov_ih9hso7ih().f[4]++;
    cov_ih9hso7ih().s[9]++;
    service = new azure_openai_service_1.AzureOpenAIService();
    /* istanbul ignore next */
    cov_ih9hso7ih().s[10]++;
    await service.initialize();
  });
  /* istanbul ignore next */
  cov_ih9hso7ih().s[11]++;
  afterEach(() => {
    /* istanbul ignore next */
    cov_ih9hso7ih().f[5]++;
    cov_ih9hso7ih().s[12]++;
    service.dispose();
  });
  /* istanbul ignore next */
  cov_ih9hso7ih().s[13]++;
  describe('startInterviewConversation', () => {
    /* istanbul ignore next */
    cov_ih9hso7ih().f[6]++;
    cov_ih9hso7ih().s[14]++;
    it('should start with greeting and first preliminary question', async () => {
      /* istanbul ignore next */
      cov_ih9hso7ih().f[7]++;
      const response =
      /* istanbul ignore next */
      (cov_ih9hso7ih().s[15]++, await service.startInterviewConversation());
      /* istanbul ignore next */
      cov_ih9hso7ih().s[16]++;
      expect(response.content).toContain("Hello! Welcome to your interview practice session");
      /* istanbul ignore next */
      cov_ih9hso7ih().s[17]++;
      expect(response.content).toContain("What is your current role?");
      /* istanbul ignore next */
      cov_ih9hso7ih().s[18]++;
      expect(response.questionNumber).toBe(0); // 0 indicates preliminary phase
      /* istanbul ignore next */
      cov_ih9hso7ih().s[19]++;
      expect(response.isComplete).toBe(false);
    });
  });
  /* istanbul ignore next */
  cov_ih9hso7ih().s[20]++;
  describe('processUserResponse - Preliminary Questions', () => {
    /* istanbul ignore next */
    cov_ih9hso7ih().f[8]++;
    cov_ih9hso7ih().s[21]++;
    it('should process preliminary questions one by one', async () => {
      /* istanbul ignore next */
      cov_ih9hso7ih().f[9]++;
      cov_ih9hso7ih().s[22]++;
      // Start the interview
      await service.startInterviewConversation();
      // Answer first preliminary question (current role)
      const response1 =
      /* istanbul ignore next */
      (cov_ih9hso7ih().s[23]++, await service.processUserResponse('Senior Software Engineer'));
      /* istanbul ignore next */
      cov_ih9hso7ih().s[24]++;
      expect(response1.content).toContain("What primary tech stack do you use?");
      /* istanbul ignore next */
      cov_ih9hso7ih().s[25]++;
      expect(response1.questionNumber).toBe(0);
      // Answer second preliminary question (tech stack)
      const response2 =
      /* istanbul ignore next */
      (cov_ih9hso7ih().s[26]++, await service.processUserResponse('React, Node.js, TypeScript, AWS'));
      /* istanbul ignore next */
      cov_ih9hso7ih().s[27]++;
      expect(response2.content).toContain("How many years of experience do you have?");
      /* istanbul ignore next */
      cov_ih9hso7ih().s[28]++;
      expect(response2.questionNumber).toBe(0);
      // Answer third preliminary question (years of experience)
      const response3 =
      /* istanbul ignore next */
      (cov_ih9hso7ih().s[29]++, await service.processUserResponse('5'));
      /* istanbul ignore next */
      cov_ih9hso7ih().s[30]++;
      expect(response3.content).toContain("What are your key skills?");
      /* istanbul ignore next */
      cov_ih9hso7ih().s[31]++;
      expect(response3.questionNumber).toBe(0);
      // Answer fourth preliminary question (key skills)
      const response4 =
      /* istanbul ignore next */
      (cov_ih9hso7ih().s[32]++, await service.processUserResponse('Full-stack development, System design, Team leadership'));
      /* istanbul ignore next */
      cov_ih9hso7ih().s[33]++;
      expect(response4.content).toContain("How many interview questions would you like?");
      /* istanbul ignore next */
      cov_ih9hso7ih().s[34]++;
      expect(response4.questionNumber).toBe(0);
      // Answer fifth preliminary question (number of questions)
      const response5 =
      /* istanbul ignore next */
      (cov_ih9hso7ih().s[35]++, await service.processUserResponse('10'));
      /* istanbul ignore next */
      cov_ih9hso7ih().s[36]++;
      expect(response5.content).toContain("Great! I now have a better understanding of your background");
      /* istanbul ignore next */
      cov_ih9hso7ih().s[37]++;
      expect(response5.questionNumber).toBe(1); // Now in actual interview phase
    });
    /* istanbul ignore next */
    cov_ih9hso7ih().s[38]++;
    it('should track preliminaryCollected flag correctly', async () => {
      /* istanbul ignore next */
      cov_ih9hso7ih().f[10]++;
      cov_ih9hso7ih().s[39]++;
      // Start the interview - preliminaryCollected should be false
      await service.startInterviewConversation();
      // Complete all preliminary questions
      /* istanbul ignore next */
      cov_ih9hso7ih().s[40]++;
      await service.processUserResponse('Senior Software Engineer');
      /* istanbul ignore next */
      cov_ih9hso7ih().s[41]++;
      await service.processUserResponse('React, Node.js, TypeScript, AWS');
      /* istanbul ignore next */
      cov_ih9hso7ih().s[42]++;
      await service.processUserResponse('5');
      /* istanbul ignore next */
      cov_ih9hso7ih().s[43]++;
      await service.processUserResponse('Full-stack development, System design, Team leadership');
      // After last preliminary question, preliminaryCollected should be set to true
      const response =
      /* istanbul ignore next */
      (cov_ih9hso7ih().s[44]++, await service.processUserResponse('10'));
      // Verify the flag was set and we transitioned to real questions
      /* istanbul ignore next */
      cov_ih9hso7ih().s[45]++;
      expect(response.questionNumber).toBe(1); // First real question
      /* istanbul ignore next */
      cov_ih9hso7ih().s[46]++;
      expect(response.content).toContain("Great! I now have a better understanding");
      // Subsequent responses should increment question count normally
      const response2 =
      /* istanbul ignore next */
      (cov_ih9hso7ih().s[47]++, await service.processUserResponse('I use SOLID principles in my daily work...'));
      /* istanbul ignore next */
      cov_ih9hso7ih().s[48]++;
      expect(response2.questionNumber).toBe(2); // Second real question
    });
    /* istanbul ignore next */
    cov_ih9hso7ih().s[49]++;
    it('should keep currentQuestionCount at 0 during preliminary phase', async () => {
      /* istanbul ignore next */
      cov_ih9hso7ih().f[11]++;
      cov_ih9hso7ih().s[50]++;
      // Start the interview
      await service.startInterviewConversation();
      // During preliminary questions, questionNumber should always be 0
      const response1 =
      /* istanbul ignore next */
      (cov_ih9hso7ih().s[51]++, await service.processUserResponse('Frontend Developer'));
      /* istanbul ignore next */
      cov_ih9hso7ih().s[52]++;
      expect(response1.questionNumber).toBe(0);
      const response2 =
      /* istanbul ignore next */
      (cov_ih9hso7ih().s[53]++, await service.processUserResponse('Vue.js, Nuxt'));
      /* istanbul ignore next */
      cov_ih9hso7ih().s[54]++;
      expect(response2.questionNumber).toBe(0);
      const response3 =
      /* istanbul ignore next */
      (cov_ih9hso7ih().s[55]++, await service.processUserResponse('3'));
      /* istanbul ignore next */
      cov_ih9hso7ih().s[56]++;
      expect(response3.questionNumber).toBe(0);
      const response4 =
      /* istanbul ignore next */
      (cov_ih9hso7ih().s[57]++, await service.processUserResponse('UI/UX Design'));
      /* istanbul ignore next */
      cov_ih9hso7ih().s[58]++;
      expect(response4.questionNumber).toBe(0);
      // After completing preliminary, should start at 1
      const response5 =
      /* istanbul ignore next */
      (cov_ih9hso7ih().s[59]++, await service.processUserResponse('8'));
      /* istanbul ignore next */
      cov_ih9hso7ih().s[60]++;
      expect(response5.questionNumber).toBe(1);
    });
    /* istanbul ignore next */
    cov_ih9hso7ih().s[61]++;
    it('should build proper system context after preliminary questions', async () => {
      /* istanbul ignore next */
      cov_ih9hso7ih().f[12]++;
      cov_ih9hso7ih().s[62]++;
      // Set interview type
      service.setInterviewContext({
        type: 'technical'
      });
      // Start and complete preliminary questions
      /* istanbul ignore next */
      cov_ih9hso7ih().s[63]++;
      await service.startInterviewConversation();
      /* istanbul ignore next */
      cov_ih9hso7ih().s[64]++;
      await service.processUserResponse('Frontend Developer');
      /* istanbul ignore next */
      cov_ih9hso7ih().s[65]++;
      await service.processUserResponse('React, Vue, JavaScript');
      /* istanbul ignore next */
      cov_ih9hso7ih().s[66]++;
      await service.processUserResponse('3');
      /* istanbul ignore next */
      cov_ih9hso7ih().s[67]++;
      await service.processUserResponse('UI/UX, Performance optimization');
      // Final response should include tailored opening question
      const finalResponse =
      /* istanbul ignore next */
      (cov_ih9hso7ih().s[68]++, await service.processUserResponse('8'));
      // Should transition to actual interview with personalized question
      /* istanbul ignore next */
      cov_ih9hso7ih().s[69]++;
      expect(finalResponse.content).toContain("Let's begin the interview");
      /* istanbul ignore next */
      cov_ih9hso7ih().s[70]++;
      expect(finalResponse.questionNumber).toBe(1);
      // The opening question should be tailored to the candidate's profile
      const conversationHistory =
      /* istanbul ignore next */
      (cov_ih9hso7ih().s[71]++, service.getConversationHistory());
      /* istanbul ignore next */
      cov_ih9hso7ih().s[72]++;
      expect(conversationHistory.length).toBeGreaterThan(0);
    });
    /* istanbul ignore next */
    cov_ih9hso7ih().s[73]++;
    it('should limit question count between 5 and 20', async () => {
      /* istanbul ignore next */
      cov_ih9hso7ih().f[13]++;
      cov_ih9hso7ih().s[74]++;
      await service.startInterviewConversation();
      /* istanbul ignore next */
      cov_ih9hso7ih().s[75]++;
      await service.processUserResponse('Developer');
      /* istanbul ignore next */
      cov_ih9hso7ih().s[76]++;
      await service.processUserResponse('Python');
      /* istanbul ignore next */
      cov_ih9hso7ih().s[77]++;
      await service.processUserResponse('10');
      /* istanbul ignore next */
      cov_ih9hso7ih().s[78]++;
      await service.processUserResponse('Coding');
      // Test with very low number
      /* istanbul ignore next */
      cov_ih9hso7ih().s[79]++;
      await service.clearConversation();
      /* istanbul ignore next */
      cov_ih9hso7ih().s[80]++;
      await service.startInterviewConversation();
      /* istanbul ignore next */
      cov_ih9hso7ih().s[81]++;
      await service.processUserResponse('Developer');
      /* istanbul ignore next */
      cov_ih9hso7ih().s[82]++;
      await service.processUserResponse('Python');
      /* istanbul ignore next */
      cov_ih9hso7ih().s[83]++;
      await service.processUserResponse('10');
      /* istanbul ignore next */
      cov_ih9hso7ih().s[84]++;
      await service.processUserResponse('Coding');
      /* istanbul ignore next */
      cov_ih9hso7ih().s[85]++;
      await service.processUserResponse('3'); // Should be clamped to 5
      // Test with very high number
      /* istanbul ignore next */
      cov_ih9hso7ih().s[86]++;
      await service.clearConversation();
      /* istanbul ignore next */
      cov_ih9hso7ih().s[87]++;
      await service.startInterviewConversation();
      /* istanbul ignore next */
      cov_ih9hso7ih().s[88]++;
      await service.processUserResponse('Developer');
      /* istanbul ignore next */
      cov_ih9hso7ih().s[89]++;
      await service.processUserResponse('Python');
      /* istanbul ignore next */
      cov_ih9hso7ih().s[90]++;
      await service.processUserResponse('10');
      /* istanbul ignore next */
      cov_ih9hso7ih().s[91]++;
      await service.processUserResponse('Coding');
      /* istanbul ignore next */
      cov_ih9hso7ih().s[92]++;
      await service.processUserResponse('50'); // Should be clamped to 20
    });
  });
  /* istanbul ignore next */
  cov_ih9hso7ih().s[93]++;
  describe('processUserResponse - Interview Phase', () => {
    /* istanbul ignore next */
    cov_ih9hso7ih().f[14]++;
    cov_ih9hso7ih().s[94]++;
    it('should handle normal interview flow after preliminary questions', async () => {
      /* istanbul ignore next */
      cov_ih9hso7ih().f[15]++;
      cov_ih9hso7ih().s[95]++;
      // Complete preliminary questions
      await service.startInterviewConversation();
      /* istanbul ignore next */
      cov_ih9hso7ih().s[96]++;
      await service.processUserResponse('Backend Developer');
      /* istanbul ignore next */
      cov_ih9hso7ih().s[97]++;
      await service.processUserResponse('Java, Spring Boot, PostgreSQL');
      /* istanbul ignore next */
      cov_ih9hso7ih().s[98]++;
      await service.processUserResponse('7');
      /* istanbul ignore next */
      cov_ih9hso7ih().s[99]++;
      await service.processUserResponse('Microservices, API design');
      /* istanbul ignore next */
      cov_ih9hso7ih().s[100]++;
      await service.processUserResponse('5');
      // Now in normal interview flow
      const interviewResponse =
      /* istanbul ignore next */
      (cov_ih9hso7ih().s[101]++, await service.processUserResponse('I would implement a distributed caching solution...'));
      /* istanbul ignore next */
      cov_ih9hso7ih().s[102]++;
      expect(interviewResponse.content).toBeTruthy();
      /* istanbul ignore next */
      cov_ih9hso7ih().s[103]++;
      expect(interviewResponse.questionNumber).toBeGreaterThan(1);
      /* istanbul ignore next */
      cov_ih9hso7ih().s[104]++;
      expect(interviewResponse.followUpSuggestions).toBeDefined();
    });
  });
  /* istanbul ignore next */
  cov_ih9hso7ih().s[105]++;
  describe('clearConversation', () => {
    /* istanbul ignore next */
    cov_ih9hso7ih().f[16]++;
    cov_ih9hso7ih().s[106]++;
    it('should reset all state including preliminary questions', async () => {
      /* istanbul ignore next */
      cov_ih9hso7ih().f[17]++;
      cov_ih9hso7ih().s[107]++;
      // Start and partially complete preliminary questions
      await service.startInterviewConversation();
      /* istanbul ignore next */
      cov_ih9hso7ih().s[108]++;
      await service.processUserResponse('Data Scientist');
      /* istanbul ignore next */
      cov_ih9hso7ih().s[109]++;
      await service.processUserResponse('Python, TensorFlow');
      // Clear conversation
      /* istanbul ignore next */
      cov_ih9hso7ih().s[110]++;
      service.clearConversation();
      // Should start fresh
      const response =
      /* istanbul ignore next */
      (cov_ih9hso7ih().s[111]++, await service.startInterviewConversation());
      /* istanbul ignore next */
      cov_ih9hso7ih().s[112]++;
      expect(response.content).toContain("What is your current role?");
      /* istanbul ignore next */
      cov_ih9hso7ih().s[113]++;
      expect(response.questionNumber).toBe(0);
    });
  });
  /* istanbul ignore next */
  cov_ih9hso7ih().s[114]++;
  describe('Interview Type Customization', () => {
    /* istanbul ignore next */
    cov_ih9hso7ih().f[18]++;
    cov_ih9hso7ih().s[115]++;
    it('should generate technical questions for technical interviews', async () => {
      /* istanbul ignore next */
      cov_ih9hso7ih().f[19]++;
      cov_ih9hso7ih().s[116]++;
      service.setInterviewContext({
        type: 'technical'
      });
      /* istanbul ignore next */
      cov_ih9hso7ih().s[117]++;
      await service.startInterviewConversation();
      /* istanbul ignore next */
      cov_ih9hso7ih().s[118]++;
      await service.processUserResponse('Software Engineer');
      /* istanbul ignore next */
      cov_ih9hso7ih().s[119]++;
      await service.processUserResponse('Node.js, MongoDB, Docker');
      /* istanbul ignore next */
      cov_ih9hso7ih().s[120]++;
      await service.processUserResponse('4');
      /* istanbul ignore next */
      cov_ih9hso7ih().s[121]++;
      await service.processUserResponse('Backend development, DevOps');
      const response =
      /* istanbul ignore next */
      (cov_ih9hso7ih().s[122]++, await service.processUserResponse('10'));
      // Should contain technical-focused opening
      /* istanbul ignore next */
      cov_ih9hso7ih().s[123]++;
      expect(response.content.toLowerCase()).toMatch(/technical|problem|project|technology/);
    });
    /* istanbul ignore next */
    cov_ih9hso7ih().s[124]++;
    it('should generate behavioral questions for behavioral interviews', async () => {
      /* istanbul ignore next */
      cov_ih9hso7ih().f[20]++;
      cov_ih9hso7ih().s[125]++;
      service.setInterviewContext({
        type: 'behavioral'
      });
      /* istanbul ignore next */
      cov_ih9hso7ih().s[126]++;
      await service.startInterviewConversation();
      /* istanbul ignore next */
      cov_ih9hso7ih().s[127]++;
      await service.processUserResponse('Engineering Manager');
      /* istanbul ignore next */
      cov_ih9hso7ih().s[128]++;
      await service.processUserResponse('Various');
      /* istanbul ignore next */
      cov_ih9hso7ih().s[129]++;
      await service.processUserResponse('10');
      /* istanbul ignore next */
      cov_ih9hso7ih().s[130]++;
      await service.processUserResponse('Leadership, Strategy');
      const response =
      /* istanbul ignore next */
      (cov_ih9hso7ih().s[131]++, await service.processUserResponse('10'));
      // Should contain behavioral-focused opening
      /* istanbul ignore next */
      cov_ih9hso7ih().s[132]++;
      expect(response.content.toLowerCase()).toMatch(/lead|challenging|project|initiative/);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,