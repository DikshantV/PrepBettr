{"version":3,"names":["cov_1igvero1hb","actualCoverage","exports","getTheirStackPortal","bottleneck_1","s","__importDefault","require","admin_1","TheirStackPortal","constructor","f","baseUrl","firestore","rateLimiter","default","minTime","maxConcurrent","reservoir","reservoirRefreshAmount","reservoirRefreshInterval","initializeFirestore","getAdminFirestore","error","console","searchJobs","userId","filters","page","b","limit","apiKey","process","env","THEIRSTACK_API_KEY","logError","Error","searchPayload","keywords","locations","jobTypes","workArrangements","salaryRange","experienceLevel","companySize","datePosted","response","schedule","fetch","method","headers","body","JSON","stringify","ok","errorText","text","catch","errorMessage","status","statusText","statusCode","data","json","creditsUsed","jobs","length","trackCreditUsage","jobListings","transformTheirStackJobsToJobListings","logSuccess","jobsFound","totalCount","hasMore","BottleneckError","message","String","currentMonth","Date","toISOString","slice","docPath","docRef","collection","doc","set","month","FieldValue","increment","lastUpdated","merge","updatedDoc","get","totalCreditsUsed","_a","threshold","logWarning","freeLimit","logMetric","totalCreditsThisMonth","getCreditsUsage","targetMonth","exists","toDate","theirStackJobs","map","job","index","jobListing","id","now","title","company","name","location","salary","min","max","currency","period","undefined","jobType","mapJobTypeToOur","workArrangement","mapWorkArrangementToOur","description","requirements","responsibilities","benefits","postedDate","applicationDeadline","jobPortal","logo","website","supportsAutoApply","originalUrl","companyLogo","_b","relevancyScore","matchedSkills","missingSkills","applicationStatus","createdAt","updatedAt","toLowerCase","eventName","properties","logData","level","Object","assign","portal","timestamp","log","metricName","value","metricData","type","isConfigured","healthCheck","healthy","theirStackPortalInstance"],"sources":["/Users/dikshantvashistha/PrepBettr/portals/theirstack.ts"],"sourcesContent":["import Bottleneck from 'bottleneck';\nimport { JobListing, JobSearchFilters, ApplicationStatus } from '../types/auto-apply';\nimport { getAdminFirestore } from '../lib/firebase/admin';\n\n// TheirStack API interfaces\ninterface TheirStackJobSearchPayload {\n  filters: {\n    keywords?: string[];\n    locations?: string[];\n    jobTypes?: string[];\n    workArrangements?: string[];\n    salaryRange?: {\n      min?: number;\n      max?: number;\n      currency?: string;\n    };\n    experienceLevel?: string[];\n    companySize?: string[];\n    datePosted?: string;\n  };\n  page: number;\n  limit: number;\n}\n\ninterface TheirStackJobResponse {\n  jobs: TheirStackJob[];\n  totalCount: number;\n  page: number;\n  limit: number;\n  hasMore: boolean;\n}\n\ninterface TheirStackJob {\n  id: string;\n  title: string;\n  company: {\n    name: string;\n    logo?: string;\n    size?: string;\n    location?: string;\n  };\n  location: string;\n  salary?: {\n    min?: number;\n    max?: number;\n    currency?: string;\n    period?: 'hourly' | 'monthly' | 'yearly';\n  };\n  jobType: string;\n  workArrangement: string;\n  description: string;\n  requirements?: string[];\n  responsibilities?: string[];\n  benefits?: string[];\n  postedDate: string;\n  applicationDeadline?: string;\n  originalUrl: string;\n}\n\ninterface TheirStackCreditsUsage {\n  month: string; // YYYY-MM format\n  creditsUsed: number;\n  lastUpdated: Date;\n}\n\nexport class TheirStackPortal {\n  private rateLimiter: Bottleneck;\n  private baseUrl = 'https://api.theirstack.com';\n  private firestore: any = null;\n\n  constructor() {\n    // TheirStack API rate limits: 300 requests per minute\n    // Bottleneck configuration for rate limiting\n    this.rateLimiter = new Bottleneck({\n      minTime: 220, // Minimum 220ms between requests (300 req/min = 200ms, add buffer)\n      maxConcurrent: 1, // Only 1 concurrent request to avoid rate limit breaches\n      reservoir: 300, // 300 requests per minute\n      reservoirRefreshAmount: 300,\n      reservoirRefreshInterval: 60000, // Refresh every minute\n    });\n\n    // Initialize Firestore lazily\n    this.initializeFirestore();\n  }\n\n  private async initializeFirestore(): Promise<void> {\n    try {\n      this.firestore = await getAdminFirestore();\n    } catch (error) {\n      console.error('❌ Failed to initialize Firestore for TheirStack portal:', error);\n    }\n  }\n\n  /**\n   * Search for jobs on TheirStack with rate limiting and credit tracking\n   */\n  async searchJobs(userId: string, filters: JobSearchFilters, page: number = 1, limit: number = 50): Promise<JobListing[]> {\n    const apiKey = process.env.THEIRSTACK_API_KEY;\n    \n    if (!apiKey) {\n      this.logError('theirStackSearchError', 'TheirStack API key not configured', { userId, filters });\n      throw new Error('TheirStack API key not configured. Please add THEIRSTACK_API_KEY to your environment variables.');\n    }\n\n    // Transform our filters to TheirStack API format\n    const searchPayload: TheirStackJobSearchPayload = {\n      filters: {\n        keywords: filters.keywords,\n        locations: filters.locations,\n        jobTypes: filters.jobTypes,\n        workArrangements: filters.workArrangements,\n        salaryRange: filters.salaryRange,\n        experienceLevel: filters.experienceLevel,\n        companySize: filters.companySize,\n        datePosted: filters.datePosted\n      },\n      page,\n      limit\n    };\n\n    try {\n      // Execute search with rate limiting\n      const response = await this.rateLimiter.schedule(async () => {\n        return fetch(`${this.baseUrl}/v1/jobs/search`, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${apiKey}`,\n            'Content-Type': 'application/json',\n            'User-Agent': 'PrepBettr/1.0 (Job Search Automation)',\n          },\n          body: JSON.stringify(searchPayload)\n        });\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text().catch(() => 'Unknown error');\n        const errorMessage = `TheirStack API error: ${response.status} ${response.statusText} - ${errorText}`;\n        \n        this.logError('theirStackSearchError', errorMessage, {\n          userId,\n          statusCode: response.status,\n          statusText: response.statusText,\n          filters,\n          page,\n          limit\n        });\n        \n        throw new Error(errorMessage);\n      }\n\n      const data: TheirStackJobResponse = await response.json();\n      \n      // Track credit usage (1 credit per job returned)\n      const creditsUsed = data.jobs.length;\n      await this.trackCreditUsage(userId, creditsUsed);\n\n      // Transform TheirStack jobs to our JobListing format\n      const jobListings = this.transformTheirStackJobsToJobListings(data.jobs);\n\n      // Log successful search\n      this.logSuccess('theirStackSearchSuccess', 'TheirStack job search completed successfully', {\n        userId,\n        jobsFound: jobListings.length,\n        totalCount: data.totalCount,\n        page,\n        limit,\n        creditsUsed,\n        hasMore: data.hasMore\n      });\n\n      return jobListings;\n\n    } catch (error) {\n      if (error instanceof Bottleneck.BottleneckError) {\n        // Rate limit breach detected\n        this.logError('theirStackRateLimitBreach', 'TheirStack rate limit exceeded', {\n          userId,\n          error: error.message,\n          filters\n        });\n        throw new Error('TheirStack rate limit exceeded. Please try again later.');\n      }\n\n      // Re-throw other errors\n      this.logError('theirStackSearchError', `TheirStack search failed: ${error}`, {\n        userId,\n        error: error instanceof Error ? error.message : String(error),\n        filters,\n        page,\n        limit\n      });\n      \n      throw error;\n    }\n  }\n\n  /**\n   * Track credit usage in Firestore\n   */\n  private async trackCreditUsage(userId: string, creditsUsed: number): Promise<void> {\n    if (!this.firestore || creditsUsed === 0) return;\n\n    try {\n      const currentMonth = new Date().toISOString().slice(0, 7); // YYYY-MM format\n      const docPath = `usage/theirstackCredits/${currentMonth}`;\n      \n      const docRef = this.firestore.collection('usage').doc('theirstackCredits').collection('monthly').doc(currentMonth);\n      \n      await docRef.set({\n        month: currentMonth,\n        creditsUsed: this.firestore.FieldValue.increment(creditsUsed),\n        lastUpdated: new Date(),\n        userId: userId // Track which user used credits\n      }, { merge: true });\n\n      // Check credit usage and emit warnings\n      const updatedDoc = await docRef.get();\n      const totalCreditsUsed = updatedDoc.data()?.creditsUsed || creditsUsed;\n      \n      // Emit warnings based on usage\n      if (totalCreditsUsed >= 500) {\n        this.logError('theirStackCreditsExceeded', 'TheirStack credits exceeded maximum threshold', {\n          userId,\n          creditsUsed: totalCreditsUsed,\n          threshold: 500,\n          month: currentMonth\n        });\n      } else if (totalCreditsUsed >= 160) { // 80% of 200 free credits\n        this.logWarning('theirStackCreditsWarning', 'TheirStack credits approaching limit', {\n          userId,\n          creditsUsed: totalCreditsUsed,\n          threshold: 160,\n          freeLimit: 200,\n          month: currentMonth\n        });\n      }\n\n      // Track metric for Application Insights\n      this.logMetric('theirStackCreditsUsed', creditsUsed, {\n        userId,\n        month: currentMonth,\n        totalCreditsThisMonth: totalCreditsUsed\n      });\n\n    } catch (error) {\n      console.error('❌ Failed to track TheirStack credit usage:', error);\n    }\n  }\n\n  /**\n   * Get credit usage for a specific month\n   */\n  async getCreditsUsage(month?: string): Promise<TheirStackCreditsUsage | null> {\n    if (!this.firestore) return null;\n\n    try {\n      const targetMonth = month || new Date().toISOString().slice(0, 7);\n      const docRef = this.firestore.collection('usage').doc('theirstackCredits').collection('monthly').doc(targetMonth);\n      const doc = await docRef.get();\n\n      if (doc.exists) {\n        const data = doc.data();\n        return {\n          month: targetMonth,\n          creditsUsed: data.creditsUsed || 0,\n          lastUpdated: data.lastUpdated?.toDate() || new Date()\n        };\n      }\n\n      return {\n        month: targetMonth,\n        creditsUsed: 0,\n        lastUpdated: new Date()\n      };\n    } catch (error) {\n      console.error('❌ Failed to get TheirStack credits usage:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Transform TheirStack jobs to our JobListing format\n   */\n  private transformTheirStackJobsToJobListings(theirStackJobs: TheirStackJob[]): JobListing[] {\n    return theirStackJobs.map((job, index) => {\n      const jobListing: JobListing = {\n        id: job.id || `theirstack-${Date.now()}-${index}`,\n        title: job.title || 'Untitled Position',\n        company: job.company?.name || 'Unknown Company',\n        location: job.location || 'Location not specified',\n        salary: job.salary ? {\n          min: job.salary.min,\n          max: job.salary.max,\n          currency: job.salary.currency || 'USD',\n          period: job.salary.period || 'yearly'\n        } : undefined,\n        jobType: this.mapJobTypeToOur(job.jobType) as any,\n        workArrangement: this.mapWorkArrangementToOur(job.workArrangement) as any,\n        description: job.description || 'No description available',\n        requirements: job.requirements || [],\n        responsibilities: job.responsibilities || [],\n        benefits: job.benefits,\n        postedDate: job.postedDate || new Date().toISOString(),\n        applicationDeadline: job.applicationDeadline,\n        jobPortal: {\n          name: 'TheirStack',\n          logo: '/icons/theirstack.svg',\n          website: 'https://theirstack.com',\n          supportsAutoApply: true,\n        },\n        originalUrl: job.originalUrl || `https://theirstack.com/jobs/${job.id}`,\n        companyLogo: job.company?.logo,\n        relevancyScore: undefined, // Will be calculated later\n        matchedSkills: [],\n        missingSkills: [],\n        applicationStatus: 'discovered',\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n      };\n\n      return jobListing;\n    });\n  }\n\n  /**\n   * Map TheirStack job types to our format\n   */\n  private mapJobTypeToOur(jobType: string): string {\n    switch (jobType?.toLowerCase()) {\n      case 'full-time':\n      case 'fulltime':\n        return 'full-time';\n      case 'part-time':\n      case 'parttime':\n        return 'part-time';\n      case 'contract':\n      case 'contractor':\n        return 'contract';\n      case 'internship':\n      case 'intern':\n        return 'internship';\n      default:\n        return 'full-time';\n    }\n  }\n\n  /**\n   * Map TheirStack work arrangements to our format\n   */\n  private mapWorkArrangementToOur(workArrangement: string): string {\n    switch (workArrangement?.toLowerCase()) {\n      case 'remote':\n        return 'remote';\n      case 'hybrid':\n        return 'hybrid';\n      case 'onsite':\n      case 'on-site':\n      case 'office':\n        return 'onsite';\n      default:\n        return 'onsite';\n    }\n  }\n\n  /**\n   * Log successful operations with structured logging for Application Insights\n   */\n  private logSuccess(eventName: string, message: string, properties: any = {}): void {\n    const logData = {\n      level: 'info',\n      eventName,\n      message,\n      properties: {\n        portal: 'TheirStack',\n        timestamp: new Date().toISOString(),\n        ...properties\n      }\n    };\n\n    console.log('APPINSIGHTS', JSON.stringify(logData));\n  }\n\n  /**\n   * Log errors with structured logging for Application Insights\n   */\n  private logError(eventName: string, message: string, properties: any = {}): void {\n    const logData = {\n      level: 'error',\n      eventName,\n      message,\n      properties: {\n        portal: 'TheirStack',\n        timestamp: new Date().toISOString(),\n        ...properties\n      }\n    };\n\n    console.log('APPINSIGHTS', JSON.stringify(logData));\n  }\n\n  /**\n   * Log warnings with structured logging for Application Insights\n   */\n  private logWarning(eventName: string, message: string, properties: any = {}): void {\n    const logData = {\n      level: 'warning',\n      eventName,\n      message,\n      properties: {\n        portal: 'TheirStack',\n        timestamp: new Date().toISOString(),\n        ...properties\n      }\n    };\n\n    console.log('APPINSIGHTS', JSON.stringify(logData));\n  }\n\n  /**\n   * Log custom metrics for Application Insights\n   */\n  private logMetric(metricName: string, value: number, properties: any = {}): void {\n    const metricData = {\n      type: 'metric',\n      name: metricName,\n      value,\n      properties: {\n        portal: 'TheirStack',\n        timestamp: new Date().toISOString(),\n        ...properties\n      }\n    };\n\n    console.log('APPINSIGHTS', JSON.stringify(metricData));\n  }\n\n  /**\n   * Check if TheirStack is properly configured\n   */\n  isConfigured(): boolean {\n    return !!process.env.THEIRSTACK_API_KEY;\n  }\n\n  /**\n   * Health check for TheirStack portal\n   */\n  async healthCheck(): Promise<{ healthy: boolean; message?: string }> {\n    if (!this.isConfigured()) {\n      return { healthy: false, message: 'TheirStack API key not configured' };\n    }\n\n    try {\n      // Try a minimal API call to check connectivity\n      const response = await this.rateLimiter.schedule(async () => {\n        return fetch(`${this.baseUrl}/v1/health`, {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${process.env.THEIRSTACK_API_KEY}`,\n            'User-Agent': 'PrepBettr/1.0 (Health Check)',\n          }\n        });\n      });\n\n      return {\n        healthy: response.ok,\n        message: response.ok ? 'TheirStack API accessible' : `HTTP ${response.status}: ${response.statusText}`\n      };\n    } catch (error) {\n      return {\n        healthy: false,\n        message: `Health check failed: ${error instanceof Error ? error.message : String(error)}`\n      };\n    }\n  }\n}\n\n// Singleton instance\nlet theirStackPortalInstance: TheirStackPortal | null = null;\n\nexport function getTheirStackPortal(): TheirStackPortal {\n  if (!theirStackPortalInstance) {\n    theirStackPortalInstance = new TheirStackPortal();\n  }\n  return theirStackPortalInstance;\n}\n\nexport default TheirStackPortal;\n"],"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","ignoreList":[]}