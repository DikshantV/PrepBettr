{"version":3,"names":["exports","GET","server_1","cov_2ed7ayku60","s","require","checkFirebaseHealth","f","response","fetch","b","process","env","NEXTAUTH_URL","method","headers","ok","service","status","timestamp","Date","toISOString","details","error","data","json","Error","message","checkDatabaseHealth","note","checkSystemHealth","memoryUsage","uptime","memoryUsagePercent","heapUsed","heapTotal","Math","round","memory","used","total","percentage","unit","console","log","firebaseHealth","databaseHealth","systemHealth","Promise","all","services","firebase","database","system","serviceStatuses","Object","values","summary","length","healthy","filter","unhealthy","degraded","overallStatus","httpStatus","NextResponse"],"sources":["/Users/dikshantvashistha/PrepBettr/app/api/health/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\n\ninterface HealthStatus {\n  service: string;\n  status: 'healthy' | 'unhealthy' | 'degraded';\n  timestamp: string;\n  details?: any;\n}\n\ninterface OverallHealth {\n  status: 'healthy' | 'unhealthy' | 'degraded';\n  timestamp: string;\n  services: {\n    [key: string]: HealthStatus;\n  };\n  summary: {\n    total: number;\n    healthy: number;\n    unhealthy: number;\n    degraded: number;\n  };\n}\n\nasync function checkFirebaseHealth(): Promise<HealthStatus> {\n  try {\n    const response = await fetch(`${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/api/health/firebase`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    \n    if (!response.ok) {\n      return {\n        service: 'firebase',\n        status: 'unhealthy',\n        timestamp: new Date().toISOString(),\n        details: { error: `HTTP ${response.status}` }\n      };\n    }\n    \n    const data = await response.json();\n    return {\n      service: 'firebase',\n      status: data.status === 'healthy' ? 'healthy' : 'unhealthy',\n      timestamp: new Date().toISOString(),\n      details: data.details\n    };\n  } catch (error) {\n    return {\n      service: 'firebase',\n      status: 'unhealthy',\n      timestamp: new Date().toISOString(),\n      details: { error: error instanceof Error ? error.message : 'Unknown error' }\n    };\n  }\n}\n\nasync function checkDatabaseHealth(): Promise<HealthStatus> {\n  // For now, return healthy - can be expanded to check actual database connections\n  return {\n    service: 'database',\n    status: 'healthy',\n    timestamp: new Date().toISOString(),\n    details: { note: 'Basic health check - no database connectivity test implemented' }\n  };\n}\n\nasync function checkSystemHealth(): Promise<HealthStatus> {\n  const memoryUsage = process.memoryUsage();\n  const uptime = process.uptime();\n  \n  // Simple memory health check - consider degraded if using > 80% of heap\n  const memoryUsagePercent = (memoryUsage.heapUsed / memoryUsage.heapTotal) * 100;\n  const status = memoryUsagePercent > 80 ? 'degraded' : 'healthy';\n  \n  return {\n    service: 'system',\n    status,\n    timestamp: new Date().toISOString(),\n    details: {\n      uptime: Math.round(uptime),\n      memory: {\n        used: Math.round(memoryUsage.heapUsed / 1024 / 1024),\n        total: Math.round(memoryUsage.heapTotal / 1024 / 1024),\n        percentage: Math.round(memoryUsagePercent),\n        unit: 'MB'\n      }\n    }\n  };\n}\n\nexport async function GET() {\n  try {\n    console.log('üè• General health check requested');\n    \n    // Check all services in parallel\n    const [firebaseHealth, databaseHealth, systemHealth] = await Promise.all([\n      checkFirebaseHealth(),\n      checkDatabaseHealth(),\n      checkSystemHealth()\n    ]);\n    \n    const services = {\n      firebase: firebaseHealth,\n      database: databaseHealth,\n      system: systemHealth\n    };\n    \n    // Calculate summary\n    const serviceStatuses = Object.values(services);\n    const summary = {\n      total: serviceStatuses.length,\n      healthy: serviceStatuses.filter(s => s.status === 'healthy').length,\n      unhealthy: serviceStatuses.filter(s => s.status === 'unhealthy').length,\n      degraded: serviceStatuses.filter(s => s.status === 'degraded').length\n    };\n    \n    // Determine overall status\n    let overallStatus: 'healthy' | 'unhealthy' | 'degraded';\n    if (summary.unhealthy > 0) {\n      overallStatus = 'unhealthy';\n    } else if (summary.degraded > 0) {\n      overallStatus = 'degraded';\n    } else {\n      overallStatus = 'healthy';\n    }\n    \n    const response: OverallHealth = {\n      status: overallStatus,\n      timestamp: new Date().toISOString(),\n      services,\n      summary\n    };\n    \n    console.log('üè• General health check result:', { status: overallStatus, summary });\n    \n    // Return appropriate HTTP status\n    const httpStatus = overallStatus === 'healthy' ? 200 : \n                      overallStatus === 'degraded' ? 200 : 503;\n    \n    return NextResponse.json(response, {\n      status: httpStatus,\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-cache'\n      }\n    });\n    \n  } catch (error) {\n    console.error('‚ùå General health check failed:', error);\n    \n    return NextResponse.json({\n      status: 'unhealthy',\n      timestamp: new Date().toISOString(),\n      services: {},\n      summary: { total: 0, healthy: 0, unhealthy: 1, degraded: 0 },\n      error: error instanceof Error ? error.message : 'Unknown error'\n    }, {\n      status: 503,\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-cache'\n      }\n    });\n  }\n}\n"],"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","ignoreList":[]}