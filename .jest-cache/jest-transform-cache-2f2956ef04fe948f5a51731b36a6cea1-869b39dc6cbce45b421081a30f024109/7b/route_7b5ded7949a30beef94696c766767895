493de1de500d232c480ec1cfbae6cd11
"use strict";

/* istanbul ignore next */
function cov_2ed7ayku60() {
  var path = "/Users/dikshantvashistha/PrepBettr/app/api/health/route.ts";
  var hash = "eb8e15973867b56a902713fd96e5243bec5b5ece";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/app/api/health/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 18
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 39
        }
      },
      "3": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 36,
          column: 5
        }
      },
      "4": {
        start: {
          line: 7,
          column: 25
        },
        end: {
          line: 12,
          column: 10
        }
      },
      "5": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 20,
          column: 9
        }
      },
      "6": {
        start: {
          line: 14,
          column: 12
        },
        end: {
          line: 19,
          column: 14
        }
      },
      "7": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 42
        }
      },
      "8": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 27,
          column: 10
        }
      },
      "9": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 35,
          column: 10
        }
      },
      "10": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 45,
          column: 6
        }
      },
      "11": {
        start: {
          line: 48,
          column: 24
        },
        end: {
          line: 48,
          column: 45
        }
      },
      "12": {
        start: {
          line: 49,
          column: 19
        },
        end: {
          line: 49,
          column: 35
        }
      },
      "13": {
        start: {
          line: 51,
          column: 31
        },
        end: {
          line: 51,
          column: 83
        }
      },
      "14": {
        start: {
          line: 52,
          column: 19
        },
        end: {
          line: 52,
          column: 67
        }
      },
      "15": {
        start: {
          line: 53,
          column: 4
        },
        end: {
          line: 66,
          column: 6
        }
      },
      "16": {
        start: {
          line: 69,
          column: 4
        },
        end: {
          line: 134,
          column: 5
        }
      },
      "17": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 57
        }
      },
      "18": {
        start: {
          line: 72,
          column: 63
        },
        end: {
          line: 76,
          column: 10
        }
      },
      "19": {
        start: {
          line: 77,
          column: 25
        },
        end: {
          line: 81,
          column: 9
        }
      },
      "20": {
        start: {
          line: 83,
          column: 32
        },
        end: {
          line: 83,
          column: 55
        }
      },
      "21": {
        start: {
          line: 84,
          column: 24
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "22": {
        start: {
          line: 86,
          column: 49
        },
        end: {
          line: 86,
          column: 71
        }
      },
      "23": {
        start: {
          line: 87,
          column: 51
        },
        end: {
          line: 87,
          column: 75
        }
      },
      "24": {
        start: {
          line: 88,
          column: 50
        },
        end: {
          line: 88,
          column: 73
        }
      },
      "25": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "26": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 40
        }
      },
      "27": {
        start: {
          line: 95,
          column: 13
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "28": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 39
        }
      },
      "29": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 38
        }
      },
      "30": {
        start: {
          line: 101,
          column: 25
        },
        end: {
          line: 106,
          column: 9
        }
      },
      "31": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 91
        }
      },
      "32": {
        start: {
          line: 109,
          column: 27
        },
        end: {
          line: 110,
          column: 52
        }
      },
      "33": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 117,
          column: 11
        }
      },
      "34": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 120,
          column: 63
        }
      },
      "35": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 133,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "checkFirebaseHealth",
        decl: {
          start: {
            line: 5,
            column: 15
          },
          end: {
            line: 5,
            column: 34
          }
        },
        loc: {
          start: {
            line: 5,
            column: 37
          },
          end: {
            line: 37,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "checkDatabaseHealth",
        decl: {
          start: {
            line: 38,
            column: 15
          },
          end: {
            line: 38,
            column: 34
          }
        },
        loc: {
          start: {
            line: 38,
            column: 37
          },
          end: {
            line: 46,
            column: 1
          }
        },
        line: 38
      },
      "2": {
        name: "checkSystemHealth",
        decl: {
          start: {
            line: 47,
            column: 15
          },
          end: {
            line: 47,
            column: 32
          }
        },
        loc: {
          start: {
            line: 47,
            column: 35
          },
          end: {
            line: 67,
            column: 1
          }
        },
        line: 47
      },
      "3": {
        name: "GET",
        decl: {
          start: {
            line: 68,
            column: 15
          },
          end: {
            line: 68,
            column: 18
          }
        },
        loc: {
          start: {
            line: 68,
            column: 21
          },
          end: {
            line: 135,
            column: 1
          }
        },
        line: 68
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 86,
            column: 44
          },
          end: {
            line: 86,
            column: 45
          }
        },
        loc: {
          start: {
            line: 86,
            column: 49
          },
          end: {
            line: 86,
            column: 71
          }
        },
        line: 86
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 87,
            column: 46
          },
          end: {
            line: 87,
            column: 47
          }
        },
        loc: {
          start: {
            line: 87,
            column: 51
          },
          end: {
            line: 87,
            column: 75
          }
        },
        line: 87
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 88,
            column: 45
          },
          end: {
            line: 88,
            column: 46
          }
        },
        loc: {
          start: {
            line: 88,
            column: 50
          },
          end: {
            line: 88,
            column: 73
          }
        },
        line: 88
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 7,
            column: 40
          },
          end: {
            line: 7,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 7,
            column: 40
          },
          end: {
            line: 7,
            column: 64
          }
        }, {
          start: {
            line: 7,
            column: 68
          },
          end: {
            line: 7,
            column: 91
          }
        }],
        line: 7
      },
      "1": {
        loc: {
          start: {
            line: 13,
            column: 8
          },
          end: {
            line: 20,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 13,
            column: 8
          },
          end: {
            line: 20,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 13
      },
      "2": {
        loc: {
          start: {
            line: 24,
            column: 20
          },
          end: {
            line: 24,
            column: 71
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 24,
            column: 48
          },
          end: {
            line: 24,
            column: 57
          }
        }, {
          start: {
            line: 24,
            column: 60
          },
          end: {
            line: 24,
            column: 71
          }
        }],
        line: 24
      },
      "3": {
        loc: {
          start: {
            line: 34,
            column: 30
          },
          end: {
            line: 34,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 34,
            column: 55
          },
          end: {
            line: 34,
            column: 68
          }
        }, {
          start: {
            line: 34,
            column: 71
          },
          end: {
            line: 34,
            column: 86
          }
        }],
        line: 34
      },
      "4": {
        loc: {
          start: {
            line: 52,
            column: 19
          },
          end: {
            line: 52,
            column: 67
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 52,
            column: 45
          },
          end: {
            line: 52,
            column: 55
          }
        }, {
          start: {
            line: 52,
            column: 58
          },
          end: {
            line: 52,
            column: 67
          }
        }],
        line: 52
      },
      "5": {
        loc: {
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        }, {
          start: {
            line: 95,
            column: 13
          },
          end: {
            line: 100,
            column: 9
          }
        }],
        line: 92
      },
      "6": {
        loc: {
          start: {
            line: 95,
            column: 13
          },
          end: {
            line: 100,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 13
          },
          end: {
            line: 100,
            column: 9
          }
        }, {
          start: {
            line: 98,
            column: 13
          },
          end: {
            line: 100,
            column: 9
          }
        }],
        line: 95
      },
      "7": {
        loc: {
          start: {
            line: 109,
            column: 27
          },
          end: {
            line: 110,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 109,
            column: 57
          },
          end: {
            line: 109,
            column: 60
          }
        }, {
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 110,
            column: 52
          }
        }],
        line: 109
      },
      "8": {
        loc: {
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 110,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 110,
            column: 43
          },
          end: {
            line: 110,
            column: 46
          }
        }, {
          start: {
            line: 110,
            column: 49
          },
          end: {
            line: 110,
            column: 52
          }
        }],
        line: 110
      },
      "9": {
        loc: {
          start: {
            line: 126,
            column: 19
          },
          end: {
            line: 126,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 126,
            column: 44
          },
          end: {
            line: 126,
            column: 57
          }
        }, {
          start: {
            line: 126,
            column: 60
          },
          end: {
            line: 126,
            column: 75
          }
        }],
        line: 126
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/app/api/health/route.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/app/api/health/route.ts"],
      sourcesContent: ["import { NextResponse } from 'next/server';\n\ninterface HealthStatus {\n  service: string;\n  status: 'healthy' | 'unhealthy' | 'degraded';\n  timestamp: string;\n  details?: any;\n}\n\ninterface OverallHealth {\n  status: 'healthy' | 'unhealthy' | 'degraded';\n  timestamp: string;\n  services: {\n    [key: string]: HealthStatus;\n  };\n  summary: {\n    total: number;\n    healthy: number;\n    unhealthy: number;\n    degraded: number;\n  };\n}\n\nasync function checkFirebaseHealth(): Promise<HealthStatus> {\n  try {\n    const response = await fetch(`${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/api/health/firebase`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    \n    if (!response.ok) {\n      return {\n        service: 'firebase',\n        status: 'unhealthy',\n        timestamp: new Date().toISOString(),\n        details: { error: `HTTP ${response.status}` }\n      };\n    }\n    \n    const data = await response.json();\n    return {\n      service: 'firebase',\n      status: data.status === 'healthy' ? 'healthy' : 'unhealthy',\n      timestamp: new Date().toISOString(),\n      details: data.details\n    };\n  } catch (error) {\n    return {\n      service: 'firebase',\n      status: 'unhealthy',\n      timestamp: new Date().toISOString(),\n      details: { error: error instanceof Error ? error.message : 'Unknown error' }\n    };\n  }\n}\n\nasync function checkDatabaseHealth(): Promise<HealthStatus> {\n  // For now, return healthy - can be expanded to check actual database connections\n  return {\n    service: 'database',\n    status: 'healthy',\n    timestamp: new Date().toISOString(),\n    details: { note: 'Basic health check - no database connectivity test implemented' }\n  };\n}\n\nasync function checkSystemHealth(): Promise<HealthStatus> {\n  const memoryUsage = process.memoryUsage();\n  const uptime = process.uptime();\n  \n  // Simple memory health check - consider degraded if using > 80% of heap\n  const memoryUsagePercent = (memoryUsage.heapUsed / memoryUsage.heapTotal) * 100;\n  const status = memoryUsagePercent > 80 ? 'degraded' : 'healthy';\n  \n  return {\n    service: 'system',\n    status,\n    timestamp: new Date().toISOString(),\n    details: {\n      uptime: Math.round(uptime),\n      memory: {\n        used: Math.round(memoryUsage.heapUsed / 1024 / 1024),\n        total: Math.round(memoryUsage.heapTotal / 1024 / 1024),\n        percentage: Math.round(memoryUsagePercent),\n        unit: 'MB'\n      }\n    }\n  };\n}\n\nexport async function GET() {\n  try {\n    console.log('\uD83C\uDFE5 General health check requested');\n    \n    // Check all services in parallel\n    const [firebaseHealth, databaseHealth, systemHealth] = await Promise.all([\n      checkFirebaseHealth(),\n      checkDatabaseHealth(),\n      checkSystemHealth()\n    ]);\n    \n    const services = {\n      firebase: firebaseHealth,\n      database: databaseHealth,\n      system: systemHealth\n    };\n    \n    // Calculate summary\n    const serviceStatuses = Object.values(services);\n    const summary = {\n      total: serviceStatuses.length,\n      healthy: serviceStatuses.filter(s => s.status === 'healthy').length,\n      unhealthy: serviceStatuses.filter(s => s.status === 'unhealthy').length,\n      degraded: serviceStatuses.filter(s => s.status === 'degraded').length\n    };\n    \n    // Determine overall status\n    let overallStatus: 'healthy' | 'unhealthy' | 'degraded';\n    if (summary.unhealthy > 0) {\n      overallStatus = 'unhealthy';\n    } else if (summary.degraded > 0) {\n      overallStatus = 'degraded';\n    } else {\n      overallStatus = 'healthy';\n    }\n    \n    const response: OverallHealth = {\n      status: overallStatus,\n      timestamp: new Date().toISOString(),\n      services,\n      summary\n    };\n    \n    console.log('\uD83C\uDFE5 General health check result:', { status: overallStatus, summary });\n    \n    // Return appropriate HTTP status\n    const httpStatus = overallStatus === 'healthy' ? 200 : \n                      overallStatus === 'degraded' ? 200 : 503;\n    \n    return NextResponse.json(response, {\n      status: httpStatus,\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-cache'\n      }\n    });\n    \n  } catch (error) {\n    console.error('\u274C General health check failed:', error);\n    \n    return NextResponse.json({\n      status: 'unhealthy',\n      timestamp: new Date().toISOString(),\n      services: {},\n      summary: { total: 0, healthy: 0, unhealthy: 1, degraded: 0 },\n      error: error instanceof Error ? error.message : 'Unknown error'\n    }, {\n      status: 503,\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-cache'\n      }\n    });\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "eb8e15973867b56a902713fd96e5243bec5b5ece"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2ed7ayku60 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2ed7ayku60();
cov_2ed7ayku60().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2ed7ayku60().s[1]++;
exports.GET = GET;
const server_1 =
/* istanbul ignore next */
(cov_2ed7ayku60().s[2]++, require("next/server"));
async function checkFirebaseHealth() {
  /* istanbul ignore next */
  cov_2ed7ayku60().f[0]++;
  cov_2ed7ayku60().s[3]++;
  try {
    const response =
    /* istanbul ignore next */
    (cov_2ed7ayku60().s[4]++, await fetch(`${
    /* istanbul ignore next */
    (cov_2ed7ayku60().b[0][0]++, process.env.NEXTAUTH_URL) ||
    /* istanbul ignore next */
    (cov_2ed7ayku60().b[0][1]++, 'http://localhost:3000')}/api/health/firebase`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    }));
    /* istanbul ignore next */
    cov_2ed7ayku60().s[5]++;
    if (!response.ok) {
      /* istanbul ignore next */
      cov_2ed7ayku60().b[1][0]++;
      cov_2ed7ayku60().s[6]++;
      return {
        service: 'firebase',
        status: 'unhealthy',
        timestamp: new Date().toISOString(),
        details: {
          error: `HTTP ${response.status}`
        }
      };
    } else
    /* istanbul ignore next */
    {
      cov_2ed7ayku60().b[1][1]++;
    }
    const data =
    /* istanbul ignore next */
    (cov_2ed7ayku60().s[7]++, await response.json());
    /* istanbul ignore next */
    cov_2ed7ayku60().s[8]++;
    return {
      service: 'firebase',
      status: data.status === 'healthy' ?
      /* istanbul ignore next */
      (cov_2ed7ayku60().b[2][0]++, 'healthy') :
      /* istanbul ignore next */
      (cov_2ed7ayku60().b[2][1]++, 'unhealthy'),
      timestamp: new Date().toISOString(),
      details: data.details
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_2ed7ayku60().s[9]++;
    return {
      service: 'firebase',
      status: 'unhealthy',
      timestamp: new Date().toISOString(),
      details: {
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_2ed7ayku60().b[3][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2ed7ayku60().b[3][1]++, 'Unknown error')
      }
    };
  }
}
async function checkDatabaseHealth() {
  /* istanbul ignore next */
  cov_2ed7ayku60().f[1]++;
  cov_2ed7ayku60().s[10]++;
  // For now, return healthy - can be expanded to check actual database connections
  return {
    service: 'database',
    status: 'healthy',
    timestamp: new Date().toISOString(),
    details: {
      note: 'Basic health check - no database connectivity test implemented'
    }
  };
}
async function checkSystemHealth() {
  /* istanbul ignore next */
  cov_2ed7ayku60().f[2]++;
  const memoryUsage =
  /* istanbul ignore next */
  (cov_2ed7ayku60().s[11]++, process.memoryUsage());
  const uptime =
  /* istanbul ignore next */
  (cov_2ed7ayku60().s[12]++, process.uptime());
  // Simple memory health check - consider degraded if using > 80% of heap
  const memoryUsagePercent =
  /* istanbul ignore next */
  (cov_2ed7ayku60().s[13]++, memoryUsage.heapUsed / memoryUsage.heapTotal * 100);
  const status =
  /* istanbul ignore next */
  (cov_2ed7ayku60().s[14]++, memoryUsagePercent > 80 ?
  /* istanbul ignore next */
  (cov_2ed7ayku60().b[4][0]++, 'degraded') :
  /* istanbul ignore next */
  (cov_2ed7ayku60().b[4][1]++, 'healthy'));
  /* istanbul ignore next */
  cov_2ed7ayku60().s[15]++;
  return {
    service: 'system',
    status,
    timestamp: new Date().toISOString(),
    details: {
      uptime: Math.round(uptime),
      memory: {
        used: Math.round(memoryUsage.heapUsed / 1024 / 1024),
        total: Math.round(memoryUsage.heapTotal / 1024 / 1024),
        percentage: Math.round(memoryUsagePercent),
        unit: 'MB'
      }
    }
  };
}
async function GET() {
  /* istanbul ignore next */
  cov_2ed7ayku60().f[3]++;
  cov_2ed7ayku60().s[16]++;
  try {
    /* istanbul ignore next */
    cov_2ed7ayku60().s[17]++;
    console.log('🏥 General health check requested');
    // Check all services in parallel
    const [firebaseHealth, databaseHealth, systemHealth] =
    /* istanbul ignore next */
    (cov_2ed7ayku60().s[18]++, await Promise.all([checkFirebaseHealth(), checkDatabaseHealth(), checkSystemHealth()]));
    const services =
    /* istanbul ignore next */
    (cov_2ed7ayku60().s[19]++, {
      firebase: firebaseHealth,
      database: databaseHealth,
      system: systemHealth
    });
    // Calculate summary
    const serviceStatuses =
    /* istanbul ignore next */
    (cov_2ed7ayku60().s[20]++, Object.values(services));
    const summary =
    /* istanbul ignore next */
    (cov_2ed7ayku60().s[21]++, {
      total: serviceStatuses.length,
      healthy: serviceStatuses.filter(s => {
        /* istanbul ignore next */
        cov_2ed7ayku60().f[4]++;
        cov_2ed7ayku60().s[22]++;
        return s.status === 'healthy';
      }).length,
      unhealthy: serviceStatuses.filter(s => {
        /* istanbul ignore next */
        cov_2ed7ayku60().f[5]++;
        cov_2ed7ayku60().s[23]++;
        return s.status === 'unhealthy';
      }).length,
      degraded: serviceStatuses.filter(s => {
        /* istanbul ignore next */
        cov_2ed7ayku60().f[6]++;
        cov_2ed7ayku60().s[24]++;
        return s.status === 'degraded';
      }).length
    });
    // Determine overall status
    let overallStatus;
    /* istanbul ignore next */
    cov_2ed7ayku60().s[25]++;
    if (summary.unhealthy > 0) {
      /* istanbul ignore next */
      cov_2ed7ayku60().b[5][0]++;
      cov_2ed7ayku60().s[26]++;
      overallStatus = 'unhealthy';
    } else {
      /* istanbul ignore next */
      cov_2ed7ayku60().b[5][1]++;
      cov_2ed7ayku60().s[27]++;
      if (summary.degraded > 0) {
        /* istanbul ignore next */
        cov_2ed7ayku60().b[6][0]++;
        cov_2ed7ayku60().s[28]++;
        overallStatus = 'degraded';
      } else {
        /* istanbul ignore next */
        cov_2ed7ayku60().b[6][1]++;
        cov_2ed7ayku60().s[29]++;
        overallStatus = 'healthy';
      }
    }
    const response =
    /* istanbul ignore next */
    (cov_2ed7ayku60().s[30]++, {
      status: overallStatus,
      timestamp: new Date().toISOString(),
      services,
      summary
    });
    /* istanbul ignore next */
    cov_2ed7ayku60().s[31]++;
    console.log('🏥 General health check result:', {
      status: overallStatus,
      summary
    });
    // Return appropriate HTTP status
    const httpStatus =
    /* istanbul ignore next */
    (cov_2ed7ayku60().s[32]++, overallStatus === 'healthy' ?
    /* istanbul ignore next */
    (cov_2ed7ayku60().b[7][0]++, 200) :
    /* istanbul ignore next */
    (cov_2ed7ayku60().b[7][1]++, overallStatus === 'degraded' ?
    /* istanbul ignore next */
    (cov_2ed7ayku60().b[8][0]++, 200) :
    /* istanbul ignore next */
    (cov_2ed7ayku60().b[8][1]++, 503)));
    /* istanbul ignore next */
    cov_2ed7ayku60().s[33]++;
    return server_1.NextResponse.json(response, {
      status: httpStatus,
      headers: {
        'Content-Type': 'application/json',
        'Cache-Control': 'no-cache'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2ed7ayku60().s[34]++;
    console.error('❌ General health check failed:', error);
    /* istanbul ignore next */
    cov_2ed7ayku60().s[35]++;
    return server_1.NextResponse.json({
      status: 'unhealthy',
      timestamp: new Date().toISOString(),
      services: {},
      summary: {
        total: 0,
        healthy: 0,
        unhealthy: 1,
        degraded: 0
      },
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2ed7ayku60().b[9][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2ed7ayku60().b[9][1]++, 'Unknown error')
    }, {
      status: 503,
      headers: {
        'Content-Type': 'application/json',
        'Cache-Control': 'no-cache'
      }
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,