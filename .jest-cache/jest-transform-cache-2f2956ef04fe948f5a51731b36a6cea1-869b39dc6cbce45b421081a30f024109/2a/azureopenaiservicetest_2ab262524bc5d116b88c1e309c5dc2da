06004ca0a80f0bb699c5685d30bfb04e
"use strict";

/* istanbul ignore next */
function cov_1bqfhfuy5u() {
  var path = "/Users/dikshantvashistha/PrepBettr/lib/services/azure-openai-service.test.ts";
  var hash = "375be5f8b6c19d9dd66dfb2d09cdfa6e9aa6ee2c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dikshantvashistha/PrepBettr/lib/services/azure-openai-service.test.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 14,
          column: 3
        }
      },
      "2": {
        start: {
          line: 4,
          column: 4
        },
        end: {
          line: 13,
          column: 6
        }
      },
      "3": {
        start: {
          line: 6,
          column: 53
        },
        end: {
          line: 12,
          column: 9
        }
      },
      "4": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 22,
          column: 4
        }
      },
      "5": {
        start: {
          line: 16,
          column: 39
        },
        end: {
          line: 22,
          column: 1
        }
      },
      "6": {
        start: {
          line: 23,
          column: 31
        },
        end: {
          line: 23,
          column: 64
        }
      },
      "7": {
        start: {
          line: 25,
          column: 29
        },
        end: {
          line: 25,
          column: 38
        }
      },
      "8": {
        start: {
          line: 26,
          column: 0
        },
        end: {
          line: 316,
          column: 3
        }
      },
      "9": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 40,
          column: 7
        }
      },
      "10": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 41
        }
      },
      "11": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 37,
          column: 11
        }
      },
      "12": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 66
        }
      },
      "13": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 35
        }
      },
      "14": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 44,
          column: 7
        }
      },
      "15": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 26
        }
      },
      "16": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 29
        }
      },
      "17": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 95,
          column: 7
        }
      },
      "18": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 53,
          column: 11
        }
      },
      "19": {
        start: {
          line: 48,
          column: 29
        },
        end: {
          line: 48,
          column: 71
        }
      },
      "20": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 92
        }
      },
      "21": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 159
        }
      },
      "22": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 52
        }
      },
      "23": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 52
        }
      },
      "24": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 68,
          column: 11
        }
      },
      "25": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 59,
          column: 15
        }
      },
      "26": {
        start: {
          line: 60,
          column: 29
        },
        end: {
          line: 60,
          column: 71
        }
      },
      "27": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 92
        }
      },
      "28": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 86
        }
      },
      "29": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 107
        }
      },
      "30": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 52
        }
      },
      "31": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 52
        }
      },
      "32": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 80,
          column: 11
        }
      },
      "33": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 73,
          column: 15
        }
      },
      "34": {
        start: {
          line: 74,
          column: 29
        },
        end: {
          line: 74,
          column: 71
        }
      },
      "35": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 92
        }
      },
      "36": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 86
        }
      },
      "37": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 87
        }
      },
      "38": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 52
        }
      },
      "39": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 94,
          column: 11
        }
      },
      "40": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 86,
          column: 15
        }
      },
      "41": {
        start: {
          line: 87,
          column: 29
        },
        end: {
          line: 87,
          column: 71
        }
      },
      "42": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 92
        }
      },
      "43": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 77
        }
      },
      "44": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 86
        }
      },
      "45": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 92
        }
      },
      "46": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 52
        }
      },
      "47": {
        start: {
          line: 96,
          column: 4
        },
        end: {
          line: 187,
          column: 7
        }
      },
      "48": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 111,
          column: 11
        }
      },
      "49": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 55
        }
      },
      "50": {
        start: {
          line: 102,
          column: 29
        },
        end: {
          line: 102,
          column: 171
        }
      },
      "51": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 112
        }
      },
      "52": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 52
        }
      },
      "53": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 52
        }
      },
      "54": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 98
        }
      },
      "55": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 63
        }
      },
      "56": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 122
        }
      },
      "57": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 136,
          column: 11
        }
      },
      "58": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 63
        }
      },
      "59": {
        start: {
          line: 115,
          column: 34
        },
        end: {
          line: 115,
          column: 76
        }
      },
      "60": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 87
        }
      },
      "61": {
        start: {
          line: 118,
          column: 29
        },
        end: {
          line: 118,
          column: 135
        }
      },
      "62": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 52
        }
      },
      "63": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 121,
          column: 81
        }
      },
      "64": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 80
        }
      },
      "65": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 100
        }
      },
      "66": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 132,
          column: 15
        }
      },
      "67": {
        start: {
          line: 133,
          column: 30
        },
        end: {
          line: 133,
          column: 102
        }
      },
      "68": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 53
        }
      },
      "69": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 64
        }
      },
      "70": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 158,
          column: 11
        }
      },
      "71": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 141,
          column: 15
        }
      },
      "72": {
        start: {
          line: 143,
          column: 26
        },
        end: {
          line: 143,
          column: 68
        }
      },
      "73": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 79
        }
      },
      "74": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 49
        }
      },
      "75": {
        start: {
          line: 147,
          column: 29
        },
        end: {
          line: 147,
          column: 113
        }
      },
      "76": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 81
        }
      },
      "77": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 80
        }
      },
      "78": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 86
        }
      },
      "79": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 52
        }
      },
      "80": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 157,
          column: 15
        }
      },
      "81": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 186,
          column: 11
        }
      },
      "82": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 165,
          column: 15
        }
      },
      "83": {
        start: {
          line: 166,
          column: 27
        },
        end: {
          line: 166,
          column: 69
        }
      },
      "84": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 167,
          column: 96
        }
      },
      "85": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 169,
          column: 40
        }
      },
      "86": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 174,
          column: 15
        }
      },
      "87": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 66
        }
      },
      "88": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 176,
          column: 77
        }
      },
      "89": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 178,
          column: 40
        }
      },
      "90": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 183,
          column: 15
        }
      },
      "91": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 66
        }
      },
      "92": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 185,
          column: 77
        }
      },
      "93": {
        start: {
          line: 188,
          column: 4
        },
        end: {
          line: 235,
          column: 7
        }
      },
      "94": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 216,
          column: 11
        }
      },
      "95": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 196,
          column: 15
        }
      },
      "96": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 202,
          column: 15
        }
      },
      "97": {
        start: {
          line: 204,
          column: 30
        },
        end: {
          line: 204,
          column: 98
        }
      },
      "98": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 53
        }
      },
      "99": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 206,
          column: 53
        }
      },
      "100": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 211,
          column: 15
        }
      },
      "101": {
        start: {
          line: 213,
          column: 30
        },
        end: {
          line: 213,
          column: 93
        }
      },
      "102": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 214,
          column: 53
        }
      },
      "103": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 52
        }
      },
      "104": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 234,
          column: 11
        }
      },
      "105": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 222,
          column: 15
        }
      },
      "106": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 227,
          column: 15
        }
      },
      "107": {
        start: {
          line: 228,
          column: 29
        },
        end: {
          line: 228,
          column: 95
        }
      },
      "108": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 230,
          column: 102
        }
      },
      "109": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 231,
          column: 52
        }
      },
      "110": {
        start: {
          line: 232,
          column: 12
        },
        end: {
          line: 232,
          column: 52
        }
      },
      "111": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 63
        }
      },
      "112": {
        start: {
          line: 236,
          column: 4
        },
        end: {
          line: 273,
          column: 7
        }
      },
      "113": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 258,
          column: 11
        }
      },
      "114": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 243,
          column: 15
        }
      },
      "115": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 244,
          column: 55
        }
      },
      "116": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 82
        }
      },
      "117": {
        start: {
          line: 247,
          column: 28
        },
        end: {
          line: 247,
          column: 60
        }
      },
      "118": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 248,
          column: 54
        }
      },
      "119": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 40
        }
      },
      "120": {
        start: {
          line: 252,
          column: 31
        },
        end: {
          line: 252,
          column: 63
        }
      },
      "121": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 46
        }
      },
      "122": {
        start: {
          line: 255,
          column: 29
        },
        end: {
          line: 255,
          column: 71
        }
      },
      "123": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 256,
          column: 82
        }
      },
      "124": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 257,
          column: 52
        }
      },
      "125": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 272,
          column: 11
        }
      },
      "126": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 265,
          column: 15
        }
      },
      "127": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 266,
          column: 55
        }
      },
      "128": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 267,
          column: 40
        }
      },
      "129": {
        start: {
          line: 269,
          column: 29
        },
        end: {
          line: 269,
          column: 71
        }
      },
      "130": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 270,
          column: 75
        }
      },
      "131": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 271,
          column: 82
        }
      },
      "132": {
        start: {
          line: 274,
          column: 4
        },
        end: {
          line: 315,
          column: 7
        }
      },
      "133": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 297,
          column: 11
        }
      },
      "134": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 280,
          column: 15
        }
      },
      "135": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 281,
          column: 55
        }
      },
      "136": {
        start: {
          line: 282,
          column: 33
        },
        end: {
          line: 282,
          column: 113
        }
      },
      "137": {
        start: {
          line: 283,
          column: 12
        },
        end: {
          line: 283,
          column: 104
        }
      },
      "138": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 284,
          column: 97
        }
      },
      "139": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 285,
          column: 88
        }
      },
      "140": {
        start: {
          line: 287,
          column: 12
        },
        end: {
          line: 287,
          column: 40
        }
      },
      "141": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 291,
          column: 15
        }
      },
      "142": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 292,
          column: 55
        }
      },
      "143": {
        start: {
          line: 293,
          column: 39
        },
        end: {
          line: 293,
          column: 106
        }
      },
      "144": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 294,
          column: 94
        }
      },
      "145": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 295,
          column: 92
        }
      },
      "146": {
        start: {
          line: 296,
          column: 12
        },
        end: {
          line: 296,
          column: 101
        }
      },
      "147": {
        start: {
          line: 298,
          column: 8
        },
        end: {
          line: 314,
          column: 11
        }
      },
      "148": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 305,
          column: 15
        }
      },
      "149": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 310,
          column: 15
        }
      },
      "150": {
        start: {
          line: 311,
          column: 29
        },
        end: {
          line: 311,
          column: 96
        }
      },
      "151": {
        start: {
          line: 312,
          column: 12
        },
        end: {
          line: 312,
          column: 53
        }
      },
      "152": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 313,
          column: 51
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 3,
            column: 20
          },
          end: {
            line: 3,
            column: 21
          }
        },
        loc: {
          start: {
            line: 3,
            column: 26
          },
          end: {
            line: 14,
            column: 1
          }
        },
        line: 3
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 46
          },
          end: {
            line: 6,
            column: 47
          }
        },
        loc: {
          start: {
            line: 6,
            column: 53
          },
          end: {
            line: 12,
            column: 9
          }
        },
        line: 6
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 32
          },
          end: {
            line: 16,
            column: 33
          }
        },
        loc: {
          start: {
            line: 16,
            column: 39
          },
          end: {
            line: 22,
            column: 1
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 26,
            column: 44
          },
          end: {
            line: 26,
            column: 45
          }
        },
        loc: {
          start: {
            line: 26,
            column: 50
          },
          end: {
            line: 316,
            column: 1
          }
        },
        line: 26
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 28,
            column: 15
          },
          end: {
            line: 28,
            column: 16
          }
        },
        loc: {
          start: {
            line: 28,
            column: 27
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 28
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 41,
            column: 14
          },
          end: {
            line: 41,
            column: 15
          }
        },
        loc: {
          start: {
            line: 41,
            column: 20
          },
          end: {
            line: 44,
            column: 5
          }
        },
        line: 41
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 45,
            column: 41
          },
          end: {
            line: 45,
            column: 42
          }
        },
        loc: {
          start: {
            line: 45,
            column: 47
          },
          end: {
            line: 95,
            column: 5
          }
        },
        line: 45
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 46,
            column: 85
          },
          end: {
            line: 46,
            column: 86
          }
        },
        loc: {
          start: {
            line: 46,
            column: 97
          },
          end: {
            line: 53,
            column: 9
          }
        },
        line: 46
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 54,
            column: 105
          },
          end: {
            line: 54,
            column: 106
          }
        },
        loc: {
          start: {
            line: 54,
            column: 117
          },
          end: {
            line: 68,
            column: 9
          }
        },
        line: 54
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 69,
            column: 107
          },
          end: {
            line: 69,
            column: 108
          }
        },
        loc: {
          start: {
            line: 69,
            column: 119
          },
          end: {
            line: 80,
            column: 9
          }
        },
        line: 69
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 81,
            column: 101
          },
          end: {
            line: 81,
            column: 102
          }
        },
        loc: {
          start: {
            line: 81,
            column: 113
          },
          end: {
            line: 94,
            column: 9
          }
        },
        line: 81
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 96,
            column: 66
          },
          end: {
            line: 96,
            column: 67
          }
        },
        loc: {
          start: {
            line: 96,
            column: 72
          },
          end: {
            line: 187,
            column: 5
          }
        },
        line: 96
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 97,
            column: 78
          },
          end: {
            line: 97,
            column: 79
          }
        },
        loc: {
          start: {
            line: 97,
            column: 90
          },
          end: {
            line: 111,
            column: 9
          }
        },
        line: 97
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 112,
            column: 91
          },
          end: {
            line: 112,
            column: 92
          }
        },
        loc: {
          start: {
            line: 112,
            column: 103
          },
          end: {
            line: 136,
            column: 9
          }
        },
        line: 112
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 137,
            column: 82
          },
          end: {
            line: 137,
            column: 83
          }
        },
        loc: {
          start: {
            line: 137,
            column: 94
          },
          end: {
            line: 158,
            column: 9
          }
        },
        line: 137
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 159,
            column: 83
          },
          end: {
            line: 159,
            column: 84
          }
        },
        loc: {
          start: {
            line: 159,
            column: 95
          },
          end: {
            line: 186,
            column: 9
          }
        },
        line: 159
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 188,
            column: 46
          },
          end: {
            line: 188,
            column: 47
          }
        },
        loc: {
          start: {
            line: 188,
            column: 52
          },
          end: {
            line: 235,
            column: 5
          }
        },
        line: 188
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 189,
            column: 91
          },
          end: {
            line: 189,
            column: 92
          }
        },
        loc: {
          start: {
            line: 189,
            column: 103
          },
          end: {
            line: 216,
            column: 9
          }
        },
        line: 189
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 217,
            column: 65
          },
          end: {
            line: 217,
            column: 66
          }
        },
        loc: {
          start: {
            line: 217,
            column: 77
          },
          end: {
            line: 234,
            column: 9
          }
        },
        line: 217
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 236,
            column: 33
          },
          end: {
            line: 236,
            column: 34
          }
        },
        loc: {
          start: {
            line: 236,
            column: 39
          },
          end: {
            line: 273,
            column: 5
          }
        },
        line: 236
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 237,
            column: 66
          },
          end: {
            line: 237,
            column: 67
          }
        },
        loc: {
          start: {
            line: 237,
            column: 78
          },
          end: {
            line: 258,
            column: 9
          }
        },
        line: 237
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 259,
            column: 84
          },
          end: {
            line: 259,
            column: 85
          }
        },
        loc: {
          start: {
            line: 259,
            column: 96
          },
          end: {
            line: 272,
            column: 9
          }
        },
        line: 259
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 274,
            column: 60
          },
          end: {
            line: 274,
            column: 61
          }
        },
        loc: {
          start: {
            line: 274,
            column: 66
          },
          end: {
            line: 315,
            column: 5
          }
        },
        line: 274
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 275,
            column: 72
          },
          end: {
            line: 275,
            column: 73
          }
        },
        loc: {
          start: {
            line: 275,
            column: 84
          },
          end: {
            line: 297,
            column: 9
          }
        },
        line: 275
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 298,
            column: 57
          },
          end: {
            line: 298,
            column: 58
          }
        },
        loc: {
          start: {
            line: 298,
            column: 69
          },
          end: {
            line: 314,
            column: 9
          }
        },
        line: 298
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 110,
            column: 19
          },
          end: {
            line: 110,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 110,
            column: 83
          },
          end: {
            line: 110,
            column: 89
          }
        }, {
          start: {
            line: 110,
            column: 92
          },
          end: {
            line: 110,
            column: 101
          }
        }],
        line: 110
      },
      "1": {
        loc: {
          start: {
            line: 110,
            column: 19
          },
          end: {
            line: 110,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 110,
            column: 19
          },
          end: {
            line: 110,
            column: 63
          }
        }, {
          start: {
            line: 110,
            column: 67
          },
          end: {
            line: 110,
            column: 80
          }
        }],
        line: 110
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dikshantvashistha/PrepBettr/lib/services/azure-openai-service.test.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dikshantvashistha/PrepBettr/lib/services/azure-openai-service.test.ts"],
      sourcesContent: ["import { AzureOpenAIService } from './azure-openai-service';\nimport OpenAI from 'openai';\n\n// Mock OpenAI client\nconst mockCreateCompletion = jest.fn();\njest.mock('openai', () => {\n  return {\n    __esModule: true,\n    default: jest.fn().mockImplementation(() => ({\n      chat: {\n        completions: {\n          create: mockCreateCompletion\n        }\n      }\n    }))\n  };\n});\n\n// Mock the fetchAzureSecrets function\njest.mock('@/lib/azure-config', () => ({\n  fetchAzureSecrets: jest.fn().mockResolvedValue({\n    azureOpenAIKey: 'mock-key',\n    azureOpenAIEndpoint: 'mock-endpoint',\n    azureOpenAIDeployment: 'mock-deployment'\n  })\n}));\n\ndescribe('AzureOpenAIService - Unit Tests', () => {\n  let service: AzureOpenAIService;\n\n  beforeEach(async () => {\n    // Reset mock before each test\n    mockCreateCompletion.mockReset();\n    mockCreateCompletion.mockResolvedValue({\n      choices: [{\n        message: {\n          content: 'This is a mock interview question response.'\n        }\n      }]\n    });\n    \n    service = new AzureOpenAIService();\n    await service.initialize();\n  });\n\n  afterEach(() => {\n    service.dispose();\n    jest.clearAllMocks();\n  });\n\n  describe('Opening Message Behavior', () => {\n    it('should include preliminary question when preliminaryCollected is false', async () => {\n      // By default, preliminaryCollected is false\n      const response = await service.startInterviewConversation();\n      \n      expect(response.content).toContain(\"Hello! I'm excited to interview you today\");\n      expect(response.content).toContain(\"tell me about your current role, your years of experience, and the main technologies or skills you work with\");\n      expect(response.questionNumber).toBe(1);\n      expect(response.isComplete).toBe(false);\n    });\n\n    it('should skip preliminary and ask domain-specific question when preliminaryCollected is true', async () => {\n      // Set preliminaryCollected to true before starting\n      service.setInterviewContext({ \n        type: 'technical',\n        preliminaryCollected: true \n      });\n      \n      const response = await service.startInterviewConversation();\n      \n      expect(response.content).toContain(\"Hello! I'm excited to interview you today\");\n      // Should NOT contain preliminary question\n      expect(response.content).not.toContain(\"tell me about your current role\");\n      // Should contain a technical question instead\n      expect(response.content).toMatch(/technical challenge|array and a linked list|system design/i);\n      expect(response.questionNumber).toBe(1);\n      expect(response.isComplete).toBe(false);\n    });\n\n    it('should generate behavioral question when type is behavioral and preliminaryCollected is true', async () => {\n      service.setInterviewContext({ \n        type: 'behavioral',\n        preliminaryCollected: true \n      });\n      \n      const response = await service.startInterviewConversation();\n      \n      expect(response.content).toContain(\"Hello! I'm excited to interview you today\");\n      expect(response.content).not.toContain(\"tell me about your current role\");\n      // Should contain a behavioral question\n      expect(response.content).toMatch(/team member|lead a project|initiative/i);\n      expect(response.questionNumber).toBe(1);\n    });\n\n    it('should generate general question when type is general and preliminaryCollected is true', async () => {\n      service.setInterviewContext({ \n        type: 'general',\n        preliminaryCollected: true,\n        position: 'Software Engineer'\n      });\n      \n      const response = await service.startInterviewConversation();\n      \n      expect(response.content).toContain(\"Hello! I'm excited to interview you today\");\n      expect(response.content).toContain(\"Software Engineer position\");\n      expect(response.content).not.toContain(\"tell me about your current role\");\n      // Should contain a general interview question\n      expect(response.content).toMatch(/interests you about|career goals|motivated/i);\n      expect(response.questionNumber).toBe(1);\n    });\n  });\n\n  describe('processUserResponse - Preliminary Flag Transition', () => {\n    it('should transition from preliminary to interview phase correctly', async () => {\n      // Start the interview with preliminaryCollected = false (default)\n      await service.startInterviewConversation();\n      \n      // Answer the single preliminary question\n      const response = await service.processUserResponse('I am a Senior Software Engineer with 5 years of experience working primarily with React, Node.js, and AWS');\n      \n      // Should thank for info and provide first real question\n      expect(response.content).toContain(\"Thank you for that information! Now let's begin the interview\");\n      expect(response.questionNumber).toBe(1); // First real question\n      expect(response.isComplete).toBe(false);\n      \n      // Should contain a real interview question based on type\n      expect(response.content).toMatch(/technical challenge|difference between|motivated/i);\n      expect(response.followUpSuggestions).toBeDefined();\n      expect(response.followUpSuggestions?.length).toBeGreaterThan(0);\n    });\n\n    it('should set preliminaryCollected flag to true after processing first response', async () => {\n      service.setInterviewContext({ type: 'technical' });\n      \n      // Start the interview - preliminaryCollected should be false\n      const startResponse = await service.startInterviewConversation();\n      expect(startResponse.content).toContain(\"tell me about your current role\");\n      \n      // Process the preliminary response\n      const response = await service.processUserResponse('Frontend Developer with 3 years of experience in React and TypeScript');\n      \n      // Verify the flag was set and we transitioned to real questions\n      expect(response.questionNumber).toBe(1); // First real question\n      expect(response.content).toContain(\"Thank you for that information\");\n      expect(response.content).toContain(\"Now let's begin the interview\");\n      \n      // The response should include a technical question\n      expect(response.content).toMatch(/array and a linked list|technical challenge|system/i);\n      \n      // Subsequent responses should increment question count normally\n      mockCreateCompletion.mockResolvedValueOnce({\n        choices: [{\n          message: {\n            content: 'Great answer! Can you elaborate on the performance implications?'\n          }\n        }]\n      });\n      \n      const response2 = await service.processUserResponse('I would consider time complexity...');\n      expect(response2.questionNumber).toBe(2); // Second real question\n      expect(response2.content).toContain('Great answer');\n    });\n\n    it('should return first question immediately after preliminary response', async () => {\n      service.setInterviewContext({ \n        type: 'behavioral',\n        company: 'Tech Corp'\n      });\n      \n      // Start the interview\n      const start = await service.startInterviewConversation();\n      expect(start.content).toContain(\"tell me about your current role\");\n      expect(start.questionNumber).toBe(1);\n      \n      // Process preliminary response - should immediately get first real question\n      const response = await service.processUserResponse('Engineering Manager with 10 years of experience');\n      \n      // Should get acknowledgment + first behavioral question\n      expect(response.content).toContain(\"Thank you for that information\");\n      expect(response.content).toContain(\"Now let's begin the interview\");\n      expect(response.content).toMatch(/difficult team member|lead a project/i);\n      expect(response.questionNumber).toBe(1);\n      expect(response.followUpSuggestions).toEqual([\n        \"What was the outcome?\",\n        \"What did you learn?\",\n        \"How would you handle it now?\"\n      ]);\n    });\n\n    it('should generate appropriate first question based on difficulty level', async () => {\n      // Test easy difficulty\n      service.setInterviewContext({ \n        type: 'technical',\n        difficulty: 'easy',\n        preliminaryCollected: true\n      });\n      \n      let response = await service.startInterviewConversation();\n      expect(response.content).toContain(\"difference between an array and a linked list\");\n      \n      // Test hard difficulty\n      service.clearConversation();\n      service.setInterviewContext({ \n        type: 'technical',\n        difficulty: 'hard',\n        preliminaryCollected: true\n      });\n      \n      response = await service.startInterviewConversation();\n      expect(response.content).toContain(\"distributed caching system\");\n      \n      // Test medium/default difficulty - the service uses undefined difficulty which defaults to medium\n      service.clearConversation();\n      service.setInterviewContext({ \n        type: 'technical',\n        preliminaryCollected: true,\n        difficulty: undefined // explicitly set to undefined to test default behavior\n      });\n      \n      response = await service.startInterviewConversation();\n      expect(response.content).toContain(\"recent technical challenge\");\n    });\n  });\n\n  describe('Question Count and Completion', () => {\n    it('should track question count correctly and mark as complete when reaching max', async () => {\n      // Set a low max for testing\n      service.setInterviewContext({ \n        type: 'technical',\n        preliminaryCollected: true,\n        maxQuestions: 3,\n        currentQuestionCount: 1 // Starting at question 1 after startInterviewConversation\n      });\n      \n      // Mock responses for each question\n      mockCreateCompletion.mockResolvedValueOnce({\n        choices: [{\n          message: { content: 'Good answer! Next question: How do you handle errors?' }\n        }]\n      });\n      \n      // Question 1 -> 2\n      const response1 = await service.processUserResponse('I would use try-catch blocks...');\n      expect(response1.questionNumber).toBe(2);\n      expect(response1.isComplete).toBe(false);\n      \n      mockCreateCompletion.mockResolvedValueOnce({\n        choices: [{\n          message: { content: 'Excellent! Final question: What is your testing strategy?' }\n        }]\n      });\n      \n      // Question 2 -> 3 (should be marked as complete)\n      const response2 = await service.processUserResponse('I follow TDD principles...');\n      expect(response2.questionNumber).toBe(3);\n      expect(response2.isComplete).toBe(true); // Reached max questions\n    });\n\n    it('should handle rate limiting with fallback response', async () => {\n      service.setInterviewContext({ \n        type: 'behavioral',\n        preliminaryCollected: true,\n        currentQuestionCount: 1 // Starting at question 1\n      });\n      \n      // Mock all retry attempts to fail with 429\n      mockCreateCompletion.mockRejectedValue({\n        status: 429,\n        headers: { 'retry-after': '1' }\n      });\n      \n      const response = await service.processUserResponse('I handled the situation by...');\n      \n      // Should get a fallback response\n      expect(response.content).toMatch(/Thank you for sharing|sounds challenging|Interesting/i);\n      expect(response.questionNumber).toBe(2);\n      expect(response.isComplete).toBe(false);\n      expect(response.followUpSuggestions).toBeDefined();\n    });\n  });\n\n  describe('State Management', () => {\n    it('should reset state correctly with clearConversation', async () => {\n      // Set up some state\n      service.setInterviewContext({ \n        type: 'technical',\n        preliminaryCollected: false,\n        currentQuestionCount: 0\n      });\n      \n      await service.startInterviewConversation();\n      await service.processUserResponse('Data Scientist with ML expertise');\n      \n      // Verify state has changed\n      const history = service.getConversationHistory();\n      expect(history.length).toBeGreaterThan(0);\n      \n      // Clear conversation\n      service.clearConversation();\n      \n      // Verify state is reset\n      const newHistory = service.getConversationHistory();\n      expect(newHistory.length).toBe(0);\n      \n      // Should start fresh with preliminary question\n      const response = await service.startInterviewConversation();\n      expect(response.content).toContain(\"tell me about your current role\");\n      expect(response.questionNumber).toBe(1);\n    });\n\n    it('should preserve interview context settings when clearing conversation', async () => {\n      service.setInterviewContext({ \n        type: 'behavioral',\n        company: 'Google',\n        position: 'Senior Engineer',\n        maxQuestions: 15\n      });\n      \n      await service.startInterviewConversation();\n      service.clearConversation();\n      \n      // Context type should be preserved, but state should be reset\n      const response = await service.startInterviewConversation();\n      expect(response.content).toContain(\"Senior Engineer position\");\n      expect(response.content).toContain(\"tell me about your current role\");\n    });\n  });\n\n  describe('Interview Context and Follow-up Suggestions', () => {\n    it('should generate context-appropriate follow-up suggestions', async () => {\n      // Technical interview\n      service.setInterviewContext({ \n        type: 'technical',\n        preliminaryCollected: true\n      });\n      \n      await service.startInterviewConversation();\n      const techResponse = await service.processUserResponse('I would use a microservices architecture...');\n      \n      expect(techResponse.followUpSuggestions).toContain(\"Can you explain your thought process?\");\n      expect(techResponse.followUpSuggestions).toContain(\"What would you do differently?\");\n      expect(techResponse.followUpSuggestions).toContain(\"How would this scale?\");\n      \n      // Behavioral interview\n      service.clearConversation();\n      service.setInterviewContext({ \n        type: 'behavioral',\n        preliminaryCollected: true\n      });\n      \n      await service.startInterviewConversation();\n      const behavioralResponse = await service.processUserResponse('I led a team of 5 engineers...');\n      \n      expect(behavioralResponse.followUpSuggestions).toContain(\"What was the outcome?\");\n      expect(behavioralResponse.followUpSuggestions).toContain(\"What did you learn?\");\n      expect(behavioralResponse.followUpSuggestions).toContain(\"How would you handle it now?\");\n    });\n\n    it('should handle edge cases with maxQuestions', async () => {\n      // Test with exactly maxQuestions\n      service.setInterviewContext({ \n        type: 'general',\n        preliminaryCollected: true,\n        currentQuestionCount: 9,\n        maxQuestions: 10\n      });\n      \n      mockCreateCompletion.mockResolvedValueOnce({\n        choices: [{\n          message: { content: 'Thank you for your answer. That concludes our interview!' }\n        }]\n      });\n      \n      const response = await service.processUserResponse('My greatest achievement was...');\n      expect(response.questionNumber).toBe(10);\n      expect(response.isComplete).toBe(true);\n    });\n  });\n});\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "375be5f8b6c19d9dd66dfb2d09cdfa6e9aa6ee2c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1bqfhfuy5u = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1bqfhfuy5u();
cov_1bqfhfuy5u().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1bqfhfuy5u().s[1]++;
jest.mock('openai', () => {
  /* istanbul ignore next */
  cov_1bqfhfuy5u().f[0]++;
  cov_1bqfhfuy5u().s[2]++;
  return {
    __esModule: true,
    default: jest.fn().mockImplementation(() => {
      /* istanbul ignore next */
      cov_1bqfhfuy5u().f[1]++;
      cov_1bqfhfuy5u().s[3]++;
      return {
        chat: {
          completions: {
            create: mockCreateCompletion
          }
        }
      };
    })
  };
});
// Mock the fetchAzureSecrets function
/* istanbul ignore next */
cov_1bqfhfuy5u().s[4]++;
jest.mock('@/lib/azure-config', () => {
  /* istanbul ignore next */
  cov_1bqfhfuy5u().f[2]++;
  cov_1bqfhfuy5u().s[5]++;
  return {
    fetchAzureSecrets: jest.fn().mockResolvedValue({
      azureOpenAIKey: 'mock-key',
      azureOpenAIEndpoint: 'mock-endpoint',
      azureOpenAIDeployment: 'mock-deployment'
    })
  };
});
const azure_openai_service_1 =
/* istanbul ignore next */
(cov_1bqfhfuy5u().s[6]++, require("./azure-openai-service"));
// Mock OpenAI client
const mockCreateCompletion =
/* istanbul ignore next */
(cov_1bqfhfuy5u().s[7]++, jest.fn());
/* istanbul ignore next */
cov_1bqfhfuy5u().s[8]++;
describe('AzureOpenAIService - Unit Tests', () => {
  /* istanbul ignore next */
  cov_1bqfhfuy5u().f[3]++;
  let service;
  /* istanbul ignore next */
  cov_1bqfhfuy5u().s[9]++;
  beforeEach(async () => {
    /* istanbul ignore next */
    cov_1bqfhfuy5u().f[4]++;
    cov_1bqfhfuy5u().s[10]++;
    // Reset mock before each test
    mockCreateCompletion.mockReset();
    /* istanbul ignore next */
    cov_1bqfhfuy5u().s[11]++;
    mockCreateCompletion.mockResolvedValue({
      choices: [{
        message: {
          content: 'This is a mock interview question response.'
        }
      }]
    });
    /* istanbul ignore next */
    cov_1bqfhfuy5u().s[12]++;
    service = new azure_openai_service_1.AzureOpenAIService();
    /* istanbul ignore next */
    cov_1bqfhfuy5u().s[13]++;
    await service.initialize();
  });
  /* istanbul ignore next */
  cov_1bqfhfuy5u().s[14]++;
  afterEach(() => {
    /* istanbul ignore next */
    cov_1bqfhfuy5u().f[5]++;
    cov_1bqfhfuy5u().s[15]++;
    service.dispose();
    /* istanbul ignore next */
    cov_1bqfhfuy5u().s[16]++;
    jest.clearAllMocks();
  });
  /* istanbul ignore next */
  cov_1bqfhfuy5u().s[17]++;
  describe('Opening Message Behavior', () => {
    /* istanbul ignore next */
    cov_1bqfhfuy5u().f[6]++;
    cov_1bqfhfuy5u().s[18]++;
    it('should include preliminary question when preliminaryCollected is false', async () => {
      /* istanbul ignore next */
      cov_1bqfhfuy5u().f[7]++;
      // By default, preliminaryCollected is false
      const response =
      /* istanbul ignore next */
      (cov_1bqfhfuy5u().s[19]++, await service.startInterviewConversation());
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[20]++;
      expect(response.content).toContain("Hello! I'm excited to interview you today");
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[21]++;
      expect(response.content).toContain("tell me about your current role, your years of experience, and the main technologies or skills you work with");
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[22]++;
      expect(response.questionNumber).toBe(1);
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[23]++;
      expect(response.isComplete).toBe(false);
    });
    /* istanbul ignore next */
    cov_1bqfhfuy5u().s[24]++;
    it('should skip preliminary and ask domain-specific question when preliminaryCollected is true', async () => {
      /* istanbul ignore next */
      cov_1bqfhfuy5u().f[8]++;
      cov_1bqfhfuy5u().s[25]++;
      // Set preliminaryCollected to true before starting
      service.setInterviewContext({
        type: 'technical',
        preliminaryCollected: true
      });
      const response =
      /* istanbul ignore next */
      (cov_1bqfhfuy5u().s[26]++, await service.startInterviewConversation());
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[27]++;
      expect(response.content).toContain("Hello! I'm excited to interview you today");
      // Should NOT contain preliminary question
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[28]++;
      expect(response.content).not.toContain("tell me about your current role");
      // Should contain a technical question instead
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[29]++;
      expect(response.content).toMatch(/technical challenge|array and a linked list|system design/i);
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[30]++;
      expect(response.questionNumber).toBe(1);
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[31]++;
      expect(response.isComplete).toBe(false);
    });
    /* istanbul ignore next */
    cov_1bqfhfuy5u().s[32]++;
    it('should generate behavioral question when type is behavioral and preliminaryCollected is true', async () => {
      /* istanbul ignore next */
      cov_1bqfhfuy5u().f[9]++;
      cov_1bqfhfuy5u().s[33]++;
      service.setInterviewContext({
        type: 'behavioral',
        preliminaryCollected: true
      });
      const response =
      /* istanbul ignore next */
      (cov_1bqfhfuy5u().s[34]++, await service.startInterviewConversation());
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[35]++;
      expect(response.content).toContain("Hello! I'm excited to interview you today");
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[36]++;
      expect(response.content).not.toContain("tell me about your current role");
      // Should contain a behavioral question
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[37]++;
      expect(response.content).toMatch(/team member|lead a project|initiative/i);
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[38]++;
      expect(response.questionNumber).toBe(1);
    });
    /* istanbul ignore next */
    cov_1bqfhfuy5u().s[39]++;
    it('should generate general question when type is general and preliminaryCollected is true', async () => {
      /* istanbul ignore next */
      cov_1bqfhfuy5u().f[10]++;
      cov_1bqfhfuy5u().s[40]++;
      service.setInterviewContext({
        type: 'general',
        preliminaryCollected: true,
        position: 'Software Engineer'
      });
      const response =
      /* istanbul ignore next */
      (cov_1bqfhfuy5u().s[41]++, await service.startInterviewConversation());
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[42]++;
      expect(response.content).toContain("Hello! I'm excited to interview you today");
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[43]++;
      expect(response.content).toContain("Software Engineer position");
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[44]++;
      expect(response.content).not.toContain("tell me about your current role");
      // Should contain a general interview question
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[45]++;
      expect(response.content).toMatch(/interests you about|career goals|motivated/i);
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[46]++;
      expect(response.questionNumber).toBe(1);
    });
  });
  /* istanbul ignore next */
  cov_1bqfhfuy5u().s[47]++;
  describe('processUserResponse - Preliminary Flag Transition', () => {
    /* istanbul ignore next */
    cov_1bqfhfuy5u().f[11]++;
    cov_1bqfhfuy5u().s[48]++;
    it('should transition from preliminary to interview phase correctly', async () => {
      /* istanbul ignore next */
      cov_1bqfhfuy5u().f[12]++;
      var _a;
      // Start the interview with preliminaryCollected = false (default)
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[49]++;
      await service.startInterviewConversation();
      // Answer the single preliminary question
      const response =
      /* istanbul ignore next */
      (cov_1bqfhfuy5u().s[50]++, await service.processUserResponse('I am a Senior Software Engineer with 5 years of experience working primarily with React, Node.js, and AWS'));
      // Should thank for info and provide first real question
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[51]++;
      expect(response.content).toContain("Thank you for that information! Now let's begin the interview");
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[52]++;
      expect(response.questionNumber).toBe(1); // First real question
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[53]++;
      expect(response.isComplete).toBe(false);
      // Should contain a real interview question based on type
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[54]++;
      expect(response.content).toMatch(/technical challenge|difference between|motivated/i);
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[55]++;
      expect(response.followUpSuggestions).toBeDefined();
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[56]++;
      expect(
      /* istanbul ignore next */
      (cov_1bqfhfuy5u().b[1][0]++, (_a = response.followUpSuggestions) === null) ||
      /* istanbul ignore next */
      (cov_1bqfhfuy5u().b[1][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_1bqfhfuy5u().b[0][0]++, void 0) :
      /* istanbul ignore next */
      (cov_1bqfhfuy5u().b[0][1]++, _a.length)).toBeGreaterThan(0);
    });
    /* istanbul ignore next */
    cov_1bqfhfuy5u().s[57]++;
    it('should set preliminaryCollected flag to true after processing first response', async () => {
      /* istanbul ignore next */
      cov_1bqfhfuy5u().f[13]++;
      cov_1bqfhfuy5u().s[58]++;
      service.setInterviewContext({
        type: 'technical'
      });
      // Start the interview - preliminaryCollected should be false
      const startResponse =
      /* istanbul ignore next */
      (cov_1bqfhfuy5u().s[59]++, await service.startInterviewConversation());
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[60]++;
      expect(startResponse.content).toContain("tell me about your current role");
      // Process the preliminary response
      const response =
      /* istanbul ignore next */
      (cov_1bqfhfuy5u().s[61]++, await service.processUserResponse('Frontend Developer with 3 years of experience in React and TypeScript'));
      // Verify the flag was set and we transitioned to real questions
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[62]++;
      expect(response.questionNumber).toBe(1); // First real question
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[63]++;
      expect(response.content).toContain("Thank you for that information");
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[64]++;
      expect(response.content).toContain("Now let's begin the interview");
      // The response should include a technical question
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[65]++;
      expect(response.content).toMatch(/array and a linked list|technical challenge|system/i);
      // Subsequent responses should increment question count normally
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[66]++;
      mockCreateCompletion.mockResolvedValueOnce({
        choices: [{
          message: {
            content: 'Great answer! Can you elaborate on the performance implications?'
          }
        }]
      });
      const response2 =
      /* istanbul ignore next */
      (cov_1bqfhfuy5u().s[67]++, await service.processUserResponse('I would consider time complexity...'));
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[68]++;
      expect(response2.questionNumber).toBe(2); // Second real question
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[69]++;
      expect(response2.content).toContain('Great answer');
    });
    /* istanbul ignore next */
    cov_1bqfhfuy5u().s[70]++;
    it('should return first question immediately after preliminary response', async () => {
      /* istanbul ignore next */
      cov_1bqfhfuy5u().f[14]++;
      cov_1bqfhfuy5u().s[71]++;
      service.setInterviewContext({
        type: 'behavioral',
        company: 'Tech Corp'
      });
      // Start the interview
      const start =
      /* istanbul ignore next */
      (cov_1bqfhfuy5u().s[72]++, await service.startInterviewConversation());
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[73]++;
      expect(start.content).toContain("tell me about your current role");
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[74]++;
      expect(start.questionNumber).toBe(1);
      // Process preliminary response - should immediately get first real question
      const response =
      /* istanbul ignore next */
      (cov_1bqfhfuy5u().s[75]++, await service.processUserResponse('Engineering Manager with 10 years of experience'));
      // Should get acknowledgment + first behavioral question
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[76]++;
      expect(response.content).toContain("Thank you for that information");
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[77]++;
      expect(response.content).toContain("Now let's begin the interview");
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[78]++;
      expect(response.content).toMatch(/difficult team member|lead a project/i);
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[79]++;
      expect(response.questionNumber).toBe(1);
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[80]++;
      expect(response.followUpSuggestions).toEqual(["What was the outcome?", "What did you learn?", "How would you handle it now?"]);
    });
    /* istanbul ignore next */
    cov_1bqfhfuy5u().s[81]++;
    it('should generate appropriate first question based on difficulty level', async () => {
      /* istanbul ignore next */
      cov_1bqfhfuy5u().f[15]++;
      cov_1bqfhfuy5u().s[82]++;
      // Test easy difficulty
      service.setInterviewContext({
        type: 'technical',
        difficulty: 'easy',
        preliminaryCollected: true
      });
      let response =
      /* istanbul ignore next */
      (cov_1bqfhfuy5u().s[83]++, await service.startInterviewConversation());
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[84]++;
      expect(response.content).toContain("difference between an array and a linked list");
      // Test hard difficulty
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[85]++;
      service.clearConversation();
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[86]++;
      service.setInterviewContext({
        type: 'technical',
        difficulty: 'hard',
        preliminaryCollected: true
      });
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[87]++;
      response = await service.startInterviewConversation();
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[88]++;
      expect(response.content).toContain("distributed caching system");
      // Test medium/default difficulty - the service uses undefined difficulty which defaults to medium
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[89]++;
      service.clearConversation();
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[90]++;
      service.setInterviewContext({
        type: 'technical',
        preliminaryCollected: true,
        difficulty: undefined // explicitly set to undefined to test default behavior
      });
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[91]++;
      response = await service.startInterviewConversation();
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[92]++;
      expect(response.content).toContain("recent technical challenge");
    });
  });
  /* istanbul ignore next */
  cov_1bqfhfuy5u().s[93]++;
  describe('Question Count and Completion', () => {
    /* istanbul ignore next */
    cov_1bqfhfuy5u().f[16]++;
    cov_1bqfhfuy5u().s[94]++;
    it('should track question count correctly and mark as complete when reaching max', async () => {
      /* istanbul ignore next */
      cov_1bqfhfuy5u().f[17]++;
      cov_1bqfhfuy5u().s[95]++;
      // Set a low max for testing
      service.setInterviewContext({
        type: 'technical',
        preliminaryCollected: true,
        maxQuestions: 3,
        currentQuestionCount: 1 // Starting at question 1 after startInterviewConversation
      });
      // Mock responses for each question
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[96]++;
      mockCreateCompletion.mockResolvedValueOnce({
        choices: [{
          message: {
            content: 'Good answer! Next question: How do you handle errors?'
          }
        }]
      });
      // Question 1 -> 2
      const response1 =
      /* istanbul ignore next */
      (cov_1bqfhfuy5u().s[97]++, await service.processUserResponse('I would use try-catch blocks...'));
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[98]++;
      expect(response1.questionNumber).toBe(2);
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[99]++;
      expect(response1.isComplete).toBe(false);
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[100]++;
      mockCreateCompletion.mockResolvedValueOnce({
        choices: [{
          message: {
            content: 'Excellent! Final question: What is your testing strategy?'
          }
        }]
      });
      // Question 2 -> 3 (should be marked as complete)
      const response2 =
      /* istanbul ignore next */
      (cov_1bqfhfuy5u().s[101]++, await service.processUserResponse('I follow TDD principles...'));
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[102]++;
      expect(response2.questionNumber).toBe(3);
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[103]++;
      expect(response2.isComplete).toBe(true); // Reached max questions
    });
    /* istanbul ignore next */
    cov_1bqfhfuy5u().s[104]++;
    it('should handle rate limiting with fallback response', async () => {
      /* istanbul ignore next */
      cov_1bqfhfuy5u().f[18]++;
      cov_1bqfhfuy5u().s[105]++;
      service.setInterviewContext({
        type: 'behavioral',
        preliminaryCollected: true,
        currentQuestionCount: 1 // Starting at question 1
      });
      // Mock all retry attempts to fail with 429
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[106]++;
      mockCreateCompletion.mockRejectedValue({
        status: 429,
        headers: {
          'retry-after': '1'
        }
      });
      const response =
      /* istanbul ignore next */
      (cov_1bqfhfuy5u().s[107]++, await service.processUserResponse('I handled the situation by...'));
      // Should get a fallback response
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[108]++;
      expect(response.content).toMatch(/Thank you for sharing|sounds challenging|Interesting/i);
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[109]++;
      expect(response.questionNumber).toBe(2);
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[110]++;
      expect(response.isComplete).toBe(false);
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[111]++;
      expect(response.followUpSuggestions).toBeDefined();
    });
  });
  /* istanbul ignore next */
  cov_1bqfhfuy5u().s[112]++;
  describe('State Management', () => {
    /* istanbul ignore next */
    cov_1bqfhfuy5u().f[19]++;
    cov_1bqfhfuy5u().s[113]++;
    it('should reset state correctly with clearConversation', async () => {
      /* istanbul ignore next */
      cov_1bqfhfuy5u().f[20]++;
      cov_1bqfhfuy5u().s[114]++;
      // Set up some state
      service.setInterviewContext({
        type: 'technical',
        preliminaryCollected: false,
        currentQuestionCount: 0
      });
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[115]++;
      await service.startInterviewConversation();
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[116]++;
      await service.processUserResponse('Data Scientist with ML expertise');
      // Verify state has changed
      const history =
      /* istanbul ignore next */
      (cov_1bqfhfuy5u().s[117]++, service.getConversationHistory());
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[118]++;
      expect(history.length).toBeGreaterThan(0);
      // Clear conversation
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[119]++;
      service.clearConversation();
      // Verify state is reset
      const newHistory =
      /* istanbul ignore next */
      (cov_1bqfhfuy5u().s[120]++, service.getConversationHistory());
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[121]++;
      expect(newHistory.length).toBe(0);
      // Should start fresh with preliminary question
      const response =
      /* istanbul ignore next */
      (cov_1bqfhfuy5u().s[122]++, await service.startInterviewConversation());
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[123]++;
      expect(response.content).toContain("tell me about your current role");
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[124]++;
      expect(response.questionNumber).toBe(1);
    });
    /* istanbul ignore next */
    cov_1bqfhfuy5u().s[125]++;
    it('should preserve interview context settings when clearing conversation', async () => {
      /* istanbul ignore next */
      cov_1bqfhfuy5u().f[21]++;
      cov_1bqfhfuy5u().s[126]++;
      service.setInterviewContext({
        type: 'behavioral',
        company: 'Google',
        position: 'Senior Engineer',
        maxQuestions: 15
      });
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[127]++;
      await service.startInterviewConversation();
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[128]++;
      service.clearConversation();
      // Context type should be preserved, but state should be reset
      const response =
      /* istanbul ignore next */
      (cov_1bqfhfuy5u().s[129]++, await service.startInterviewConversation());
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[130]++;
      expect(response.content).toContain("Senior Engineer position");
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[131]++;
      expect(response.content).toContain("tell me about your current role");
    });
  });
  /* istanbul ignore next */
  cov_1bqfhfuy5u().s[132]++;
  describe('Interview Context and Follow-up Suggestions', () => {
    /* istanbul ignore next */
    cov_1bqfhfuy5u().f[22]++;
    cov_1bqfhfuy5u().s[133]++;
    it('should generate context-appropriate follow-up suggestions', async () => {
      /* istanbul ignore next */
      cov_1bqfhfuy5u().f[23]++;
      cov_1bqfhfuy5u().s[134]++;
      // Technical interview
      service.setInterviewContext({
        type: 'technical',
        preliminaryCollected: true
      });
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[135]++;
      await service.startInterviewConversation();
      const techResponse =
      /* istanbul ignore next */
      (cov_1bqfhfuy5u().s[136]++, await service.processUserResponse('I would use a microservices architecture...'));
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[137]++;
      expect(techResponse.followUpSuggestions).toContain("Can you explain your thought process?");
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[138]++;
      expect(techResponse.followUpSuggestions).toContain("What would you do differently?");
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[139]++;
      expect(techResponse.followUpSuggestions).toContain("How would this scale?");
      // Behavioral interview
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[140]++;
      service.clearConversation();
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[141]++;
      service.setInterviewContext({
        type: 'behavioral',
        preliminaryCollected: true
      });
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[142]++;
      await service.startInterviewConversation();
      const behavioralResponse =
      /* istanbul ignore next */
      (cov_1bqfhfuy5u().s[143]++, await service.processUserResponse('I led a team of 5 engineers...'));
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[144]++;
      expect(behavioralResponse.followUpSuggestions).toContain("What was the outcome?");
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[145]++;
      expect(behavioralResponse.followUpSuggestions).toContain("What did you learn?");
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[146]++;
      expect(behavioralResponse.followUpSuggestions).toContain("How would you handle it now?");
    });
    /* istanbul ignore next */
    cov_1bqfhfuy5u().s[147]++;
    it('should handle edge cases with maxQuestions', async () => {
      /* istanbul ignore next */
      cov_1bqfhfuy5u().f[24]++;
      cov_1bqfhfuy5u().s[148]++;
      // Test with exactly maxQuestions
      service.setInterviewContext({
        type: 'general',
        preliminaryCollected: true,
        currentQuestionCount: 9,
        maxQuestions: 10
      });
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[149]++;
      mockCreateCompletion.mockResolvedValueOnce({
        choices: [{
          message: {
            content: 'Thank you for your answer. That concludes our interview!'
          }
        }]
      });
      const response =
      /* istanbul ignore next */
      (cov_1bqfhfuy5u().s[150]++, await service.processUserResponse('My greatest achievement was...'));
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[151]++;
      expect(response.questionNumber).toBe(10);
      /* istanbul ignore next */
      cov_1bqfhfuy5u().s[152]++;
      expect(response.isComplete).toBe(true);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,