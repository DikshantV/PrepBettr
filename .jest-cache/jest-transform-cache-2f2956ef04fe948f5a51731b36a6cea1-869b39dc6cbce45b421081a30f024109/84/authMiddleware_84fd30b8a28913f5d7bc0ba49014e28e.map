{"version":3,"names":["cov_49d6g4lhu","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","exports","verifyFirebaseToken","extractUserFromToken","auth_1","require","token","result","verifyToken","success","valid","user","error","Error","message"],"sources":["/Users/dikshantvashistha/PrepBettr/lib/middleware/authMiddleware.ts"],"sourcesContent":["/**\n * Auth Middleware Compatibility Layer\n * \n * Provides backward compatibility for existing middleware usage\n * Routes to the unified auth system\n */\n\nimport {\n  verifyToken,\n  AuthResult,\n  AuthenticatedUser\n} from '@/lib/shared/auth';\n\n/**\n * Verify Firebase token (legacy compatibility function)\n * @param token - Firebase ID token to verify\n * @returns Promise<AuthResult>\n */\nexport async function verifyFirebaseToken(token: string): Promise<AuthResult> {\n  try {\n    const result = await verifyToken(token);\n    return {\n      success: result.valid,\n      user: result.user || null,\n      error: result.error\n    };\n  } catch (error) {\n    return {\n      success: false,\n      user: null,\n      error: error instanceof Error ? error.message : 'Token verification failed'\n    };\n  }\n}\n\n/**\n * Extract user from token\n * @param token - Auth token\n * @returns Promise<AuthenticatedUser | null>\n */\nexport async function extractUserFromToken(token: string): Promise<AuthenticatedUser | null> {\n  const result = await verifyFirebaseToken(token);\n  return result.success ? result.user : null;\n}\n\n// Re-export types\nexport type { AuthResult, AuthenticatedUser };\n"],"mappings":"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","ignoreList":[]}