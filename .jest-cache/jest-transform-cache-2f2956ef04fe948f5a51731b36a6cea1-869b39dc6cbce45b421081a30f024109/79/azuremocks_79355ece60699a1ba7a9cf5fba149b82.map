{"file":"/Users/dikshantvashistha/PrepBettr/tests/setup/azure-mocks.ts","mappings":"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","names":[],"sources":["/Users/dikshantvashistha/PrepBettr/tests/setup/azure-mocks.ts"],"sourcesContent":["/**\n * Azure Service Mocks for Unit Testing\n * \n * Comprehensive mocking setup for all Azure services used in PrepBettr,\n * providing realistic behavior simulation for reliable unit testing.\n * \n * @version 2.0.0\n */\n\nimport { jest } from '@jest/globals';\n\n// ===== COSMOS DB MOCKS =====\n\nlet mockData: any = {};\n\nconst mockCosmosClient: any = {\n  database: jest.fn().mockReturnValue({\n    container: jest.fn().mockReturnValue({\n      items: {\n        create: (jest.fn() as any).mockResolvedValue({\n          resource: { id: 'test-id', ...mockData },\n          statusCode: 201\n        }),\n        upsert: (jest.fn() as any).mockResolvedValue({\n          resource: { id: 'test-id', ...mockData },\n          statusCode: 200\n        }),\n        query: jest.fn().mockReturnValue({\n          fetchAll: (jest.fn() as any).mockResolvedValue({\n            resources: [{ id: 'test-id', ...mockData }]\n          }),\n          fetchNext: (jest.fn() as any).mockResolvedValue({\n            resources: [{ id: 'test-id', ...mockData }],\n            hasMoreResults: false\n          })\n        })\n      },\n      item: jest.fn().mockReturnValue({\n        read: (jest.fn() as any).mockResolvedValue({\n          resource: { id: 'test-id', ...mockData },\n          statusCode: 200\n        }),\n        replace: (jest.fn() as any).mockResolvedValue({\n          resource: { id: 'test-id', ...mockData },\n          statusCode: 200\n        }),\n        patch: (jest.fn() as any).mockResolvedValue({\n          resource: { id: 'test-id', ...mockData },\n          statusCode: 200\n        }),\n        delete: (jest.fn() as any).mockResolvedValue({\n          resource: undefined,\n          statusCode: 204\n        })\n      })\n    })\n  })\n};\n\nexport const setMockCosmosData = (data: any) => {\n  mockData = data;\n};\n\n// ===== BLOB STORAGE MOCKS =====\n\nconst mockBlobServiceClient = {\n  getContainerClient: jest.fn().mockReturnValue({\n    createIfNotExists: (jest.fn() as any).mockResolvedValue({ succeeded: true }),\n    getBlobClient: jest.fn().mockReturnValue({\n      upload: (jest.fn() as any).mockResolvedValue({\n        requestId: 'test-request-id',\n        etag: 'test-etag'\n      }),\n      download: (jest.fn() as any).mockResolvedValue({\n        readableStreamBody: Buffer.from('test-content'),\n        contentLength: 12\n      }),\n      delete: (jest.fn() as any).mockResolvedValue({\n        requestId: 'test-request-id'\n      }),\n      generateSasUrl: jest.fn().mockReturnValue(\n        'https://teststorage.blob.core.windows.net/test-container/test-blob?sas-token'\n      )\n    }),\n    listBlobsFlat: jest.fn().mockReturnValue({\n      [Symbol.asyncIterator]: async function* () {\n        yield { name: 'test-blob.txt', properties: { lastModified: new Date() } };\n      }\n    })\n  })\n};\n\n// ===== AZURE SPEECH SERVICE MOCKS =====\n\nconst mockSpeechConfig = {\n  fromSubscription: jest.fn().mockReturnValue({\n    speechSynthesisVoiceName: 'en-US-JennyNeural',\n    speechSynthesisOutputFormat: 'Audio16Khz32KBitRateMonoMp3'\n  })\n};\n\nconst mockSpeechSynthesizer = jest.fn().mockImplementation(() => ({\n  speakTextAsync: jest.fn().mockImplementation((text: any, successCallback: any, errorCallback: any) => {\n    setTimeout(() => {\n      (successCallback as any)({\n        reason: 'SynthesizingAudioCompleted',\n        audioData: new ArrayBuffer(1024)\n      });\n    }, 100);\n  }),\n  close: jest.fn()\n}));\n\nconst mockSpeechRecognizer = jest.fn().mockImplementation(() => ({\n  recognizeOnceAsync: jest.fn().mockImplementation((successCallback: any, errorCallback: any) => {\n    setTimeout(() => {\n      (successCallback as any)({\n        reason: 'RecognizedSpeech',\n        text: 'Test recognized text',\n        confidence: 0.95\n      });\n    }, 100);\n  }),\n  startContinuousRecognitionAsync: jest.fn(),\n  stopContinuousRecognitionAsync: jest.fn(),\n  close: jest.fn()\n}));\n\n// ===== AZURE OPENAI MOCKS =====\n\nconst mockOpenAIClient = {\n  getChatCompletions: (jest.fn() as any).mockResolvedValue({\n    choices: [{\n      message: {\n        role: 'assistant',\n        content: 'Test AI response for interview question'\n      },\n      finishReason: 'stop'\n    }],\n    usage: {\n      totalTokens: 150,\n      promptTokens: 100,\n      completionTokens: 50\n    }\n  }),\n  getCompletions: (jest.fn() as any).mockResolvedValue({\n    choices: [{\n      text: 'Test completion response',\n      finishReason: 'stop'\n    }],\n    usage: {\n      totalTokens: 100\n    }\n  })\n};\n\n// ===== SIGNALR MOCKS =====\n\nconst mockSignalRService = {\n  getClientAccessToken: (jest.fn() as any).mockResolvedValue({\n    token: 'test-signalr-token',\n    url: 'https://test.service.signalr.net'\n  }),\n  sendToAll: (jest.fn() as any).mockResolvedValue(undefined),\n  sendToGroup: (jest.fn() as any).mockResolvedValue(undefined),\n  sendToUser: (jest.fn() as any).mockResolvedValue(undefined),\n  addUserToGroup: (jest.fn() as any).mockResolvedValue(undefined),\n  removeUserFromGroup: (jest.fn() as any).mockResolvedValue(undefined)\n};\n\n// ===== AZURE KEY VAULT MOCKS =====\n\nconst mockSecretClient = {\n  getSecret: jest.fn().mockImplementation((secretName: any) => {\n    const secrets: any = {\n      'firebase-service-account-key': JSON.stringify({\n        type: 'service_account',\n        project_id: 'test-project',\n        private_key: '-----BEGIN PRIVATE KEY-----\\ntest-key\\n-----END PRIVATE KEY-----',\n        client_email: 'test@test-project.iam.gserviceaccount.com'\n      }),\n      'speech-key': 'test-speech-key',\n      'azure-openai-key': 'test-openai-key',\n      'azure-openai-endpoint': 'https://test.openai.azure.com'\n    };\n    \n    return Promise.resolve({\n      name: secretName,\n      value: secrets[secretName] || 'test-secret-value',\n      properties: {\n        version: 'test-version'\n      }\n    });\n  }),\n  setSecret: (jest.fn() as any).mockResolvedValue({\n    name: 'test-secret',\n    properties: { version: 'new-version' }\n  }),\n  listPropertiesOfSecrets: jest.fn().mockReturnValue({\n    [Symbol.asyncIterator]: async function* () {\n      yield { name: 'test-secret', enabled: true };\n    }\n  })\n};\n\n// ===== APPLICATION INSIGHTS MOCKS =====\n\nconst mockTelemetryClient = {\n  trackEvent: jest.fn(),\n  trackException: jest.fn(),\n  trackMetric: jest.fn(),\n  trackTrace: jest.fn(),\n  trackDependency: jest.fn(),\n  trackRequest: jest.fn(),\n  flush: jest.fn().mockImplementation((callback: any) => {\n    if (callback) callback();\n  })\n};\n\n// ===== FIREBASE AUTH MOCKS =====\n\nconst mockFirebaseAdmin = {\n  apps: [],\n  initializeApp: jest.fn().mockReturnValue({\n    name: 'test-app'\n  }),\n  credential: {\n    cert: jest.fn()\n  },\n  auth: jest.fn().mockReturnValue({\n    verifyIdToken: (jest.fn() as any).mockResolvedValue({\n      uid: 'test-uid',\n      email: 'test@example.com',\n      email_verified: true,\n      exp: Math.floor(Date.now() / 1000) + 3600\n    }),\n    createSessionCookie: (jest.fn() as any).mockResolvedValue('test-session-cookie'),\n    verifySessionCookie: (jest.fn() as any).mockResolvedValue({\n      uid: 'test-uid',\n      email: 'test@example.com'\n    }),\n    getUser: (jest.fn() as any).mockResolvedValue({\n      uid: 'test-uid',\n      email: 'test@example.com',\n      customClaims: { role: 'user' }\n    }),\n    setCustomUserClaims: (jest.fn() as any).mockResolvedValue(undefined),\n    deleteUser: (jest.fn() as any).mockResolvedValue(undefined)\n  }),\n  firestore: jest.fn().mockReturnValue({\n    collection: jest.fn().mockReturnValue({\n      doc: jest.fn().mockReturnValue({\n        set: (jest.fn() as any).mockResolvedValue(undefined),\n        get: (jest.fn() as any).mockResolvedValue({\n          exists: true,\n          data: () => ({ test: 'data' })\n        }),\n        delete: (jest.fn() as any).mockResolvedValue(undefined)\n      })\n    })\n  })\n};\n\n// ===== MOCK SETUP FUNCTIONS =====\n\n/**\n * Set up all Azure service mocks\n */\nexport function setupAzureMocks() {\n  // Cosmos DB\n  jest.mock('@azure/cosmos', () => ({\n    CosmosClient: jest.fn().mockImplementation(() => mockCosmosClient)\n  }));\n\n  // Blob Storage\n  jest.mock('@azure/storage-blob', () => ({\n    BlobServiceClient: {\n      fromConnectionString: jest.fn().mockReturnValue(mockBlobServiceClient)\n    }\n  }));\n\n  // Azure Speech SDK\n  jest.mock('microsoft-cognitiveservices-speech-sdk', () => ({\n    SpeechConfig: mockSpeechConfig,\n    SpeechSynthesizer: mockSpeechSynthesizer,\n    SpeechRecognizer: mockSpeechRecognizer,\n    ResultReason: {\n      SynthesizingAudioCompleted: 'SynthesizingAudioCompleted',\n      RecognizedSpeech: 'RecognizedSpeech'\n    },\n    SpeechSynthesisOutputFormat: {\n      Audio16Khz32KBitRateMonoMp3: 'Audio16Khz32KBitRateMonoMp3'\n    }\n  }));\n\n  // Azure OpenAI\n  jest.mock('@azure/openai', () => ({\n    OpenAIApi: jest.fn().mockImplementation(() => mockOpenAIClient)\n  }));\n\n  // SignalR\n  jest.mock('@azure/web-pubsub', () => ({\n    WebPubSubServiceClient: jest.fn().mockImplementation(() => mockSignalRService)\n  }));\n\n  // Key Vault\n  jest.mock('@azure/keyvault-secrets', () => ({\n    SecretClient: jest.fn().mockImplementation(() => mockSecretClient)\n  }));\n\n  // Azure Identity\n  jest.mock('@azure/identity', () => ({\n    DefaultAzureCredential: jest.fn()\n  }));\n\n  // Application Insights\n  jest.mock('applicationinsights', () => ({\n    TelemetryClient: jest.fn().mockImplementation(() => mockTelemetryClient),\n    setup: jest.fn().mockReturnValue({\n      setAutoDependencyCorrelation: jest.fn().mockReturnThis(),\n      setAutoCollectRequests: jest.fn().mockReturnThis(),\n      setAutoCollectPerformance: jest.fn().mockReturnThis(),\n      setAutoCollectExceptions: jest.fn().mockReturnThis(),\n      setAutoCollectDependencies: jest.fn().mockReturnThis(),\n      setUseDiskRetryCaching: jest.fn().mockReturnThis(),\n      start: jest.fn()\n    })\n  }));\n\n  // Firebase Admin\n  jest.mock('firebase-admin', () => mockFirebaseAdmin);\n}\n\n/**\n * Reset all mocks to clean state\n */\nexport function resetAzureMocks() {\n  Object.values(mockCosmosClient.database().container().items).forEach((mock: any) => {\n    if (typeof mock === 'function' && mock.mockClear) {\n      mock.mockClear();\n    }\n  });\n\n  Object.values((mockBlobServiceClient.getContainerClient() as any).getBlobClient()).forEach((mock: any) => {\n    if (typeof mock === 'function' && mock.mockClear) {\n      mock.mockClear();\n    }\n  });\n\n  Object.values(mockTelemetryClient).forEach((mock: any) => {\n    if (typeof mock === 'function' && mock.mockClear) {\n      mock.mockClear();\n    }\n  });\n\n  mockData = {};\n}\n\n/**\n * Create mock response helpers\n */\nexport const MockHelpers = {\n  cosmosResponse: (data: any, statusCode = 200) => ({\n    resource: data,\n    statusCode,\n    requestCharge: 2.5,\n    activityId: 'test-activity-id'\n  }),\n\n  blobResponse: (content: string) => ({\n    readableStreamBody: Buffer.from(content),\n    contentLength: content.length,\n    contentType: 'text/plain',\n    etag: 'test-etag'\n  }),\n\n  speechResponse: (text: string, confidence = 0.95) => ({\n    reason: 'RecognizedSpeech',\n    text,\n    confidence,\n    duration: 1000\n  }),\n\n  openaiResponse: (content: string, tokens = 100) => ({\n    choices: [{\n      message: { role: 'assistant', content },\n      finishReason: 'stop'\n    }],\n    usage: { totalTokens: tokens }\n  })\n};\n\n// ===== PERFORMANCE TESTING UTILITIES =====\n\nexport const PerformanceMocks = {\n  simulateLatency: (ms: number) => {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  },\n\n  mockSlowResponse: (originalMock: any, latency: number) => {\n    return jest.fn().mockImplementation(async (...args) => {\n      await PerformanceMocks.simulateLatency(latency);\n      return originalMock(...args);\n    });\n  },\n\n  trackCallTimes: () => {\n    const callTimes: number[] = [];\n    return {\n      mock: jest.fn().mockImplementation(async (...args) => {\n        const start = Date.now();\n        // Simulate some processing\n        await PerformanceMocks.simulateLatency(10);\n        const end = Date.now();\n        callTimes.push(end - start);\n      }),\n      getCallTimes: () => callTimes,\n      getAverageTime: () => callTimes.reduce((a, b) => a + b, 0) / callTimes.length\n    };\n  }\n};\n\n// Set up mocks immediately when this module is imported\nsetupAzureMocks();\n\nexport {\n  mockCosmosClient,\n  mockBlobServiceClient,\n  mockOpenAIClient,\n  mockSignalRService,\n  mockSecretClient,\n  mockTelemetryClient,\n  mockFirebaseAdmin\n};\n"],"version":3}