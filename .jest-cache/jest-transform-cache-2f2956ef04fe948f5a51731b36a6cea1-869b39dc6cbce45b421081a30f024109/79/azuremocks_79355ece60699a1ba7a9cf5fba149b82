d8a857620130b7fdd4245c0d31a47a21
"use strict";
/**
 * Azure Service Mocks for Unit Testing
 *
 * Comprehensive mocking setup for all Azure services used in PrepBettr,
 * providing realistic behavior simulation for reliable unit testing.
 *
 * @version 2.0.0
 */
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockFirebaseAdmin = exports.mockTelemetryClient = exports.mockSecretClient = exports.mockSignalRService = exports.mockOpenAIClient = exports.mockBlobServiceClient = exports.mockCosmosClient = exports.PerformanceMocks = exports.MockHelpers = exports.setMockCosmosData = void 0;
exports.setupAzureMocks = setupAzureMocks;
exports.resetAzureMocks = resetAzureMocks;
const globals_1 = require("@jest/globals");
// ===== COSMOS DB MOCKS =====
let mockData = {};
const mockCosmosClient = {
    database: globals_1.jest.fn().mockReturnValue({
        container: globals_1.jest.fn().mockReturnValue({
            items: {
                create: globals_1.jest.fn().mockResolvedValue({
                    resource: Object.assign({ id: 'test-id' }, mockData),
                    statusCode: 201
                }),
                upsert: globals_1.jest.fn().mockResolvedValue({
                    resource: Object.assign({ id: 'test-id' }, mockData),
                    statusCode: 200
                }),
                query: globals_1.jest.fn().mockReturnValue({
                    fetchAll: globals_1.jest.fn().mockResolvedValue({
                        resources: [Object.assign({ id: 'test-id' }, mockData)]
                    }),
                    fetchNext: globals_1.jest.fn().mockResolvedValue({
                        resources: [Object.assign({ id: 'test-id' }, mockData)],
                        hasMoreResults: false
                    })
                })
            },
            item: globals_1.jest.fn().mockReturnValue({
                read: globals_1.jest.fn().mockResolvedValue({
                    resource: Object.assign({ id: 'test-id' }, mockData),
                    statusCode: 200
                }),
                replace: globals_1.jest.fn().mockResolvedValue({
                    resource: Object.assign({ id: 'test-id' }, mockData),
                    statusCode: 200
                }),
                patch: globals_1.jest.fn().mockResolvedValue({
                    resource: Object.assign({ id: 'test-id' }, mockData),
                    statusCode: 200
                }),
                delete: globals_1.jest.fn().mockResolvedValue({
                    resource: undefined,
                    statusCode: 204
                })
            })
        })
    })
};
exports.mockCosmosClient = mockCosmosClient;
const setMockCosmosData = (data) => {
    mockData = data;
};
exports.setMockCosmosData = setMockCosmosData;
// ===== BLOB STORAGE MOCKS =====
const mockBlobServiceClient = {
    getContainerClient: globals_1.jest.fn().mockReturnValue({
        createIfNotExists: globals_1.jest.fn().mockResolvedValue({ succeeded: true }),
        getBlobClient: globals_1.jest.fn().mockReturnValue({
            upload: globals_1.jest.fn().mockResolvedValue({
                requestId: 'test-request-id',
                etag: 'test-etag'
            }),
            download: globals_1.jest.fn().mockResolvedValue({
                readableStreamBody: Buffer.from('test-content'),
                contentLength: 12
            }),
            delete: globals_1.jest.fn().mockResolvedValue({
                requestId: 'test-request-id'
            }),
            generateSasUrl: globals_1.jest.fn().mockReturnValue('https://teststorage.blob.core.windows.net/test-container/test-blob?sas-token')
        }),
        listBlobsFlat: globals_1.jest.fn().mockReturnValue({
            [Symbol.asyncIterator]: function () {
                return __asyncGenerator(this, arguments, function* () {
                    yield yield __await({ name: 'test-blob.txt', properties: { lastModified: new Date() } });
                });
            }
        })
    })
};
exports.mockBlobServiceClient = mockBlobServiceClient;
// ===== AZURE SPEECH SERVICE MOCKS =====
const mockSpeechConfig = {
    fromSubscription: globals_1.jest.fn().mockReturnValue({
        speechSynthesisVoiceName: 'en-US-JennyNeural',
        speechSynthesisOutputFormat: 'Audio16Khz32KBitRateMonoMp3'
    })
};
const mockSpeechSynthesizer = globals_1.jest.fn().mockImplementation(() => ({
    speakTextAsync: globals_1.jest.fn().mockImplementation((text, successCallback, errorCallback) => {
        setTimeout(() => {
            successCallback({
                reason: 'SynthesizingAudioCompleted',
                audioData: new ArrayBuffer(1024)
            });
        }, 100);
    }),
    close: globals_1.jest.fn()
}));
const mockSpeechRecognizer = globals_1.jest.fn().mockImplementation(() => ({
    recognizeOnceAsync: globals_1.jest.fn().mockImplementation((successCallback, errorCallback) => {
        setTimeout(() => {
            successCallback({
                reason: 'RecognizedSpeech',
                text: 'Test recognized text',
                confidence: 0.95
            });
        }, 100);
    }),
    startContinuousRecognitionAsync: globals_1.jest.fn(),
    stopContinuousRecognitionAsync: globals_1.jest.fn(),
    close: globals_1.jest.fn()
}));
// ===== AZURE OPENAI MOCKS =====
const mockOpenAIClient = {
    getChatCompletions: globals_1.jest.fn().mockResolvedValue({
        choices: [{
                message: {
                    role: 'assistant',
                    content: 'Test AI response for interview question'
                },
                finishReason: 'stop'
            }],
        usage: {
            totalTokens: 150,
            promptTokens: 100,
            completionTokens: 50
        }
    }),
    getCompletions: globals_1.jest.fn().mockResolvedValue({
        choices: [{
                text: 'Test completion response',
                finishReason: 'stop'
            }],
        usage: {
            totalTokens: 100
        }
    })
};
exports.mockOpenAIClient = mockOpenAIClient;
// ===== SIGNALR MOCKS =====
const mockSignalRService = {
    getClientAccessToken: globals_1.jest.fn().mockResolvedValue({
        token: 'test-signalr-token',
        url: 'https://test.service.signalr.net'
    }),
    sendToAll: globals_1.jest.fn().mockResolvedValue(undefined),
    sendToGroup: globals_1.jest.fn().mockResolvedValue(undefined),
    sendToUser: globals_1.jest.fn().mockResolvedValue(undefined),
    addUserToGroup: globals_1.jest.fn().mockResolvedValue(undefined),
    removeUserFromGroup: globals_1.jest.fn().mockResolvedValue(undefined)
};
exports.mockSignalRService = mockSignalRService;
// ===== AZURE KEY VAULT MOCKS =====
const mockSecretClient = {
    getSecret: globals_1.jest.fn().mockImplementation((secretName) => {
        const secrets = {
            'firebase-service-account-key': JSON.stringify({
                type: 'service_account',
                project_id: 'test-project',
                private_key: '-----BEGIN PRIVATE KEY-----\ntest-key\n-----END PRIVATE KEY-----',
                client_email: 'test@test-project.iam.gserviceaccount.com'
            }),
            'speech-key': 'test-speech-key',
            'azure-openai-key': 'test-openai-key',
            'azure-openai-endpoint': 'https://test.openai.azure.com'
        };
        return Promise.resolve({
            name: secretName,
            value: secrets[secretName] || 'test-secret-value',
            properties: {
                version: 'test-version'
            }
        });
    }),
    setSecret: globals_1.jest.fn().mockResolvedValue({
        name: 'test-secret',
        properties: { version: 'new-version' }
    }),
    listPropertiesOfSecrets: globals_1.jest.fn().mockReturnValue({
        [Symbol.asyncIterator]: function () {
            return __asyncGenerator(this, arguments, function* () {
                yield yield __await({ name: 'test-secret', enabled: true });
            });
        }
    })
};
exports.mockSecretClient = mockSecretClient;
// ===== APPLICATION INSIGHTS MOCKS =====
const mockTelemetryClient = {
    trackEvent: globals_1.jest.fn(),
    trackException: globals_1.jest.fn(),
    trackMetric: globals_1.jest.fn(),
    trackTrace: globals_1.jest.fn(),
    trackDependency: globals_1.jest.fn(),
    trackRequest: globals_1.jest.fn(),
    flush: globals_1.jest.fn().mockImplementation((callback) => {
        if (callback)
            callback();
    })
};
exports.mockTelemetryClient = mockTelemetryClient;
// ===== FIREBASE AUTH MOCKS =====
const mockFirebaseAdmin = {
    apps: [],
    initializeApp: globals_1.jest.fn().mockReturnValue({
        name: 'test-app'
    }),
    credential: {
        cert: globals_1.jest.fn()
    },
    auth: globals_1.jest.fn().mockReturnValue({
        verifyIdToken: globals_1.jest.fn().mockResolvedValue({
            uid: 'test-uid',
            email: 'test@example.com',
            email_verified: true,
            exp: Math.floor(Date.now() / 1000) + 3600
        }),
        createSessionCookie: globals_1.jest.fn().mockResolvedValue('test-session-cookie'),
        verifySessionCookie: globals_1.jest.fn().mockResolvedValue({
            uid: 'test-uid',
            email: 'test@example.com'
        }),
        getUser: globals_1.jest.fn().mockResolvedValue({
            uid: 'test-uid',
            email: 'test@example.com',
            customClaims: { role: 'user' }
        }),
        setCustomUserClaims: globals_1.jest.fn().mockResolvedValue(undefined),
        deleteUser: globals_1.jest.fn().mockResolvedValue(undefined)
    }),
    firestore: globals_1.jest.fn().mockReturnValue({
        collection: globals_1.jest.fn().mockReturnValue({
            doc: globals_1.jest.fn().mockReturnValue({
                set: globals_1.jest.fn().mockResolvedValue(undefined),
                get: globals_1.jest.fn().mockResolvedValue({
                    exists: true,
                    data: () => ({ test: 'data' })
                }),
                delete: globals_1.jest.fn().mockResolvedValue(undefined)
            })
        })
    })
};
exports.mockFirebaseAdmin = mockFirebaseAdmin;
// ===== MOCK SETUP FUNCTIONS =====
/**
 * Set up all Azure service mocks
 */
function setupAzureMocks() {
    // Cosmos DB
    globals_1.jest.mock('@azure/cosmos', () => ({
        CosmosClient: globals_1.jest.fn().mockImplementation(() => mockCosmosClient)
    }));
    // Blob Storage
    globals_1.jest.mock('@azure/storage-blob', () => ({
        BlobServiceClient: {
            fromConnectionString: globals_1.jest.fn().mockReturnValue(mockBlobServiceClient)
        }
    }));
    // Azure Speech SDK
    globals_1.jest.mock('microsoft-cognitiveservices-speech-sdk', () => ({
        SpeechConfig: mockSpeechConfig,
        SpeechSynthesizer: mockSpeechSynthesizer,
        SpeechRecognizer: mockSpeechRecognizer,
        ResultReason: {
            SynthesizingAudioCompleted: 'SynthesizingAudioCompleted',
            RecognizedSpeech: 'RecognizedSpeech'
        },
        SpeechSynthesisOutputFormat: {
            Audio16Khz32KBitRateMonoMp3: 'Audio16Khz32KBitRateMonoMp3'
        }
    }));
    // Azure OpenAI
    globals_1.jest.mock('@azure/openai', () => ({
        OpenAIApi: globals_1.jest.fn().mockImplementation(() => mockOpenAIClient)
    }));
    // SignalR
    globals_1.jest.mock('@azure/web-pubsub', () => ({
        WebPubSubServiceClient: globals_1.jest.fn().mockImplementation(() => mockSignalRService)
    }));
    // Key Vault
    globals_1.jest.mock('@azure/keyvault-secrets', () => ({
        SecretClient: globals_1.jest.fn().mockImplementation(() => mockSecretClient)
    }));
    // Azure Identity
    globals_1.jest.mock('@azure/identity', () => ({
        DefaultAzureCredential: globals_1.jest.fn()
    }));
    // Application Insights
    globals_1.jest.mock('applicationinsights', () => ({
        TelemetryClient: globals_1.jest.fn().mockImplementation(() => mockTelemetryClient),
        setup: globals_1.jest.fn().mockReturnValue({
            setAutoDependencyCorrelation: globals_1.jest.fn().mockReturnThis(),
            setAutoCollectRequests: globals_1.jest.fn().mockReturnThis(),
            setAutoCollectPerformance: globals_1.jest.fn().mockReturnThis(),
            setAutoCollectExceptions: globals_1.jest.fn().mockReturnThis(),
            setAutoCollectDependencies: globals_1.jest.fn().mockReturnThis(),
            setUseDiskRetryCaching: globals_1.jest.fn().mockReturnThis(),
            start: globals_1.jest.fn()
        })
    }));
    // Firebase Admin
    globals_1.jest.mock('firebase-admin', () => mockFirebaseAdmin);
}
/**
 * Reset all mocks to clean state
 */
function resetAzureMocks() {
    Object.values(mockCosmosClient.database().container().items).forEach((mock) => {
        if (typeof mock === 'function' && mock.mockClear) {
            mock.mockClear();
        }
    });
    Object.values(mockBlobServiceClient.getContainerClient().getBlobClient()).forEach((mock) => {
        if (typeof mock === 'function' && mock.mockClear) {
            mock.mockClear();
        }
    });
    Object.values(mockTelemetryClient).forEach((mock) => {
        if (typeof mock === 'function' && mock.mockClear) {
            mock.mockClear();
        }
    });
    mockData = {};
}
/**
 * Create mock response helpers
 */
exports.MockHelpers = {
    cosmosResponse: (data, statusCode = 200) => ({
        resource: data,
        statusCode,
        requestCharge: 2.5,
        activityId: 'test-activity-id'
    }),
    blobResponse: (content) => ({
        readableStreamBody: Buffer.from(content),
        contentLength: content.length,
        contentType: 'text/plain',
        etag: 'test-etag'
    }),
    speechResponse: (text, confidence = 0.95) => ({
        reason: 'RecognizedSpeech',
        text,
        confidence,
        duration: 1000
    }),
    openaiResponse: (content, tokens = 100) => ({
        choices: [{
                message: { role: 'assistant', content },
                finishReason: 'stop'
            }],
        usage: { totalTokens: tokens }
    })
};
// ===== PERFORMANCE TESTING UTILITIES =====
exports.PerformanceMocks = {
    simulateLatency: (ms) => {
        return new Promise(resolve => setTimeout(resolve, ms));
    },
    mockSlowResponse: (originalMock, latency) => {
        return globals_1.jest.fn().mockImplementation(async (...args) => {
            await exports.PerformanceMocks.simulateLatency(latency);
            return originalMock(...args);
        });
    },
    trackCallTimes: () => {
        const callTimes = [];
        return {
            mock: globals_1.jest.fn().mockImplementation(async (...args) => {
                const start = Date.now();
                // Simulate some processing
                await exports.PerformanceMocks.simulateLatency(10);
                const end = Date.now();
                callTimes.push(end - start);
            }),
            getCallTimes: () => callTimes,
            getAverageTime: () => callTimes.reduce((a, b) => a + b, 0) / callTimes.length
        };
    }
};
// Set up mocks immediately when this module is imported
setupAzureMocks();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,