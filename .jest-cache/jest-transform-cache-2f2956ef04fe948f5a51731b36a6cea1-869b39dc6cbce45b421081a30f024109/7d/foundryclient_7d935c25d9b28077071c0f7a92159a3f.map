{"version":3,"names":["cov_14z54fbpee","actualCoverage","node_fetch_1","s","__importDefault","require","identity_1","ai_projects_1","ai_agents_1","foundry_config_1","isClient","window","b","console","warn","FoundryClientBase","constructor","f","projectsClientInstance","agentsClientInstance","currentSdkConfig","init","forceRefresh","config","getFoundryConfig","isValid","errors","validateFoundryConfig","Error","join","buildHeaders","extra","Object","assign","apiKey","request","path","options","baseUrl","endpoint","replace","normalizedPath","startsWith","url","connection","method","headers","body","JSON","stringify","undefined","attempt","max","retryPolicy","maxRetries","start","Date","now","controller","AbortController","timeout","setTimeout","abort","res","default","signal","clearTimeout","raw","text","data","parse","_a","ok","shouldRetry","status","delay","backoff","err","message","elapsed","Math","includes","conn","baseDelay","maxDelay","exponentialBase","jitter","min","pow","floor","random","ms","Promise","resolve","validateConnection","error","String","completeText","_prompt","_modelKey","createProjectsClient","credential","DefaultAzureCredential","log","client","AIProjectClient","additionalPolicies","policy","name","sendRequest","next","existingUserAgent","get","set","position","retryOptions","retryDelayInMs","createAgentsClient","projectId","AgentsClient","getProjectsClient","getAgentsClient","testFoundryConnection","clearFoundryClients","getCurrentFoundryConfig","exports"],"sources":["/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/clients/foundry-client.ts"],"sourcesContent":["import fetch from 'node-fetch';\nimport { DefaultAzureCredential } from '@azure/identity';\nimport { type TokenCredential } from '@azure/core-auth';\nimport { AIProjectClient } from '@azure/ai-projects';\nimport { AgentsClient } from '@azure/ai-agents';\nimport {\n  getFoundryConfig,\n  validateFoundryConfig,\n  type FoundryConfig,\n  type ConnectionSettings,\n} from '../config/foundry-config';\n\n// Client-side safety check\nconst isClient = typeof window !== 'undefined';\n\nif (isClient) {\n  console.warn('[Azure AI Foundry Client] Running on client side - clients will not be initialized');\n}\n\n/**\n * Unified Azure AI Foundry Client\n * \n * Combines HTTP request functionality with Azure SDK client factories.\n * Provides both low-level request() method and high-level SDK helpers.\n */\nexport class FoundryClientBase {\n  protected config!: FoundryConfig;\n  private projectsClientInstance: AIProjectClient | null = null;\n  private agentsClientInstance: AgentsClient | null = null;\n  private currentSdkConfig: FoundryConfig | null = null;\n\n  constructor() {}\n\n  /**\n   * Initialize configuration\n   */\n  async init(forceRefresh = false): Promise<void> {\n    this.config = await getFoundryConfig(forceRefresh);\n    const { isValid, errors } = validateFoundryConfig(this.config);\n    if (!isValid) {\n      throw new Error(`Invalid Foundry configuration: ${errors.join(', ')}`);\n    }\n  }\n\n  /**\n   * Build default headers with API key\n   */\n  protected buildHeaders(extra?: Record<string, string>): Record<string, string> {\n    return {\n      'Content-Type': 'application/json',\n      'api-key': this.config.apiKey, // Azure AI Foundry uses 'api-key' header\n      'User-Agent': 'PrepBettr/FoundryClient',\n      ...(extra || {}),\n    };\n  }\n\n  /**\n   * Core request helper with retry logic based on connection settings\n   */\n  public async request<T = any>(\n    path: string,\n    options: { method?: string; body?: any; headers?: Record<string, string> } = {}\n  ): Promise<{ status: number; data: T | null; raw: string }> {\n    const baseUrl = this.config.endpoint.replace(/\\/$/, '');\n    // Azure AI Foundry uses openai/deployments/{deployment-name} format\n    const normalizedPath = path.startsWith('/') ? path : `/${path}`;\n    const url = `${baseUrl}/openai/deployments/gpt-4o${normalizedPath}?api-version=2024-02-15-preview`;\n    const { connection } = this.config;\n\n    const method = options.method || 'GET';\n    const headers = this.buildHeaders(options.headers);\n    const body = options.body ? JSON.stringify(options.body) : undefined;\n\n    let attempt = 0;\n    const max = connection.retryPolicy.maxRetries;\n    const start = Date.now();\n\n    while (true) {\n      try {\n        const controller = new AbortController();\n        const timeout = setTimeout(() => controller.abort(), connection.timeout);\n\n        const res = await fetch(url, {\n          method,\n          headers,\n          body,\n          // @ts-ignore node-fetch v2 compatibility\n          signal: controller.signal,\n        } as any);\n\n        clearTimeout(timeout);\n\n        const raw = await res.text();\n        let data: any = null;\n        try {\n          data = raw ? JSON.parse(raw) : null;\n        } catch {\n          // non-JSON response\n        }\n\n        if (!res.ok && this.shouldRetry(res.status) && attempt < max) {\n          attempt++;\n          await this.delay(this.backoff(attempt, connection));\n          continue;\n        }\n\n        return { status: res.status, data, raw };\n      } catch (err: any) {\n        // AbortError / network errors\n        if (attempt < max) {\n          attempt++;\n          await this.delay(this.backoff(attempt, connection));\n          continue;\n        }\n        throw new Error(`Foundry request failed after ${attempt} retries: ${err?.message || err}`);\n      } finally {\n        // Optional: log slow requests\n        const elapsed = Date.now() - start;\n        if (elapsed > Math.max(2000, this.config.connection.timeout)) {\n           \n          console.warn(`[FoundryClient] Slow request ${method} ${url} took ${elapsed}ms`);\n        }\n      }\n    }\n  }\n\n  /**\n   * Basic retry policy on transient status codes\n   */\n  protected shouldRetry(status: number): boolean {\n    return [408, 409, 429, 500, 502, 503, 504].includes(status);\n  }\n\n  /**\n   * Exponential backoff with optional jitter\n   */\n  protected backoff(attempt: number, conn: ConnectionSettings): number {\n    const { baseDelay, maxDelay, exponentialBase, jitter } = conn.retryPolicy;\n    const delay = Math.min(maxDelay, baseDelay * Math.pow(exponentialBase, attempt - 1));\n    return jitter ? Math.floor(Math.random() * delay) : delay;\n    }\n\n  protected delay(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Validate connectivity to Foundry endpoint\n   */\n  async validateConnection(): Promise<{ ok: boolean; status?: number; error?: string }>\n  {\n    if (!this.config) await this.init();\n    try {\n      const res = await this.request('/', { method: 'GET' });\n      // Root might be 404 but still proves connectivity\n      const ok = res.status < 500;\n      return { ok, status: res.status };\n    } catch (err: any) {\n      return { ok: false, error: err?.message || String(err) };\n    }\n  }\n\n  /**\n   * Placeholder for text completion call via model inference.\n   * Implement with specific Foundry Inference API once finalized.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async completeText(_prompt: string, _modelKey = 'gpt-4o'): Promise<string> {\n    throw new Error('completeText not implemented yet for Foundry Inference API');\n  }\n\n  /**\n   * Azure SDK Client Methods\n   */\n\n  /**\n   * Create Azure AI Projects client with proper authentication\n   */\n  private createProjectsClient(config: FoundryConfig): AIProjectClient {\n    if (isClient) {\n      throw new Error('Projects client cannot be initialized on client side');\n    }\n\n    try {\n      const credential: TokenCredential = new DefaultAzureCredential();\n      console.log(`🔧 Creating Azure AI Projects client for endpoint: ${config.endpoint}`);\n      \n      const client = new AIProjectClient(config.endpoint, credential, {\n        additionalPolicies: [{\n          policy: {\n            name: 'PrepBettrUserAgent',\n            sendRequest: async (request: any, next: any) => {\n              const existingUserAgent = request.headers.get('User-Agent') || '';\n              request.headers.set('User-Agent', `PrepBettr/1.0 ${existingUserAgent}`);\n              return next(request);\n            }\n          },\n          position: 'perCall'\n        }],\n        retryOptions: {\n          maxRetries: 3,\n          retryDelayInMs: 1000\n        }\n      });\n\n      console.log('✅ Azure AI Projects client created successfully');\n      return client;\n\n    } catch (error) {\n      console.error('❌ Failed to create Azure AI Projects client:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create Azure AI Agents client with proper authentication\n   */\n  private createAgentsClient(config: FoundryConfig): AgentsClient {\n    if (isClient) {\n      throw new Error('Agents client cannot be initialized on client side');\n    }\n\n    try {\n      const credential: TokenCredential = new DefaultAzureCredential();\n      console.log(`🤖 Creating Azure AI Agents client for project: ${config.projectId}`);\n      \n      const client = new AgentsClient(config.endpoint, credential, {\n        additionalPolicies: [{\n          policy: {\n            name: 'PrepBettrAgentUserAgent',\n            sendRequest: async (request: any, next: any) => {\n              const existingUserAgent = request.headers.get('User-Agent') || '';\n              request.headers.set('User-Agent', `PrepBettr-Agent/1.0 ${existingUserAgent}`);\n              \n              if (config.projectId) {\n                request.headers.set('X-Project-Id', config.projectId);\n              }\n              \n              return next(request);\n            }\n          },\n          position: 'perCall'\n        }],\n        retryOptions: {\n          maxRetries: 3,\n          retryDelayInMs: 1000\n        }\n      });\n\n      console.log('✅ Azure AI Agents client created successfully');\n      return client;\n\n    } catch (error) {\n      console.error('❌ Failed to create Azure AI Agents client:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get or create Azure AI Projects client (singleton pattern)\n   */\n  async getProjectsClient(forceRefresh: boolean = false): Promise<AIProjectClient> {\n    if (isClient) {\n      throw new Error('Projects client is not available on client side');\n    }\n\n    const config = await getFoundryConfig(forceRefresh);\n    \n    if (forceRefresh || !this.projectsClientInstance || !this.currentSdkConfig || \n        this.currentSdkConfig.endpoint !== config.endpoint || this.currentSdkConfig.apiKey !== config.apiKey) {\n      \n      console.log('🔄 Creating new Azure AI Projects client instance...');\n      this.projectsClientInstance = this.createProjectsClient(config);\n      this.currentSdkConfig = { ...config };\n    }\n\n    return this.projectsClientInstance;\n  }\n\n  /**\n   * Get or create Azure AI Agents client (singleton pattern)\n   */\n  async getAgentsClient(forceRefresh: boolean = false): Promise<AgentsClient> {\n    if (isClient) {\n      throw new Error('Agents client is not available on client side');\n    }\n\n    const config = await getFoundryConfig(forceRefresh);\n    \n    if (forceRefresh || !this.agentsClientInstance || !this.currentSdkConfig || \n        this.currentSdkConfig.endpoint !== config.endpoint || this.currentSdkConfig.apiKey !== config.apiKey) {\n      \n      console.log('🔄 Creating new Azure AI Agents client instance...');\n      this.agentsClientInstance = this.createAgentsClient(config);\n      this.currentSdkConfig = { ...config };\n    }\n\n    return this.agentsClientInstance;\n  }\n\n  /**\n   * Test connection to Azure AI Foundry services\n   */\n  async testFoundryConnection(): Promise<boolean> {\n    if (isClient) {\n      console.warn('⚠️ Cannot test foundry connection on client side');\n      return false;\n    }\n\n    try {\n      console.log('🔍 Testing Azure AI Foundry connection...');\n      const client = await this.getProjectsClient();\n      \n      // TODO: Add actual connection test based on Azure AI Projects SDK\n      console.log('✅ Azure AI Foundry connection test successful');\n      return true;\n\n    } catch (error) {\n      console.error('❌ Azure AI Foundry connection test failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Clear SDK client instances (useful for testing or configuration updates)\n   */\n  clearFoundryClients(): void {\n    if (isClient) return;\n    \n    console.log('🔄 Clearing Azure AI Foundry client instances...');\n    this.projectsClientInstance = null;\n    this.agentsClientInstance = null;\n    this.currentSdkConfig = null;\n  }\n\n  /**\n   * Get current foundry configuration (for debugging)\n   */\n  async getCurrentFoundryConfig(): Promise<FoundryConfig | null> {\n    if (isClient) {\n      console.warn('⚠️ Cannot access foundry config on client side');\n      return null;\n    }\n\n    try {\n      return await getFoundryConfig();\n    } catch (error) {\n      console.error('❌ Failed to get current foundry configuration:', error);\n      return null;\n    }\n  }\n}\n\n/**\n * Type exports for external use\n */\nexport type FoundryClientOptions = {\n  endpoint?: string;\n  apiKey?: string;\n  projectId?: string;\n  forceRefresh?: boolean;\n};\n\nexport type FoundryRequestOptions = {\n  method?: string;\n  body?: any;\n  headers?: Record<string, string>;\n};\n\nexport type FoundryResponse<T = any> = {\n  status: number;\n  data: T | null;\n  raw: string;\n};\n\n// Re-export Azure SDK types for convenience\nexport type { AIProjectClient, AgentsClient };\n\n"],"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","ignoreList":[]}