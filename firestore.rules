rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can only read/write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Auto-Apply Settings - users can only access their own settings
    match /autoApplySettings/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Allow creation with proper user ID
      allow create: if request.auth != null && 
        request.auth.uid == userId &&
        request.resource.data.userId == userId;
    }
    
    // Job Listings - shared read access for discovery, but controlled write access
    match /jobListings/{jobId} {
      // Authenticated users can read active job listings they discovered or that are public
      allow read: if request.auth != null && (
        resource.data.isActive == true &&
        (request.auth.uid in resource.data.discoveredBy || resource.data.discoveredBy.size() == 0)
      );
      // Only Cloud Functions can write job listings (they bypass these rules)
      allow write: if false;
    }
    
    // Applications - users can only access their own applications
    match /applications/{applicationId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
    }
    
    // Automation Logs - users can read their own logs, Cloud Functions can write
    match /automationLogs/{logId} {
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      // Only Cloud Functions can write logs (they bypass these rules)
      allow write: if false;
    }
    
    // Interviews - users can access their own interviews OR finalized public ones
    match /interviews/{interviewId} {
      // Users can read/write their own interviews
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      // Users can create interviews with their own userId
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      // All authenticated users can read finalized interviews
      allow read: if request.auth != null && 
        resource.data.finalized == true;
    }
    
    // Feedback - users can only access feedback for their own interviews
    match /feedback/{feedbackId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
    }
    
    // Allow querying the feedback collection for authenticated users
    // This is needed for compound queries with where clauses
    match /feedback/{document=**} {
      allow read: if request.auth != null;
    }
    
    // Usage counters - users can only read/write their own usage data
    // Cloud Functions can also manage resets (they run with admin privileges)
    match /usage/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Allow server-side access (Cloud Functions run with admin privileges and bypass these rules)
      
      match /counters/{counterId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
        // Allow server-side access (Cloud Functions run with admin privileges and bypass these rules)
      }
    }
    
    // Subscription events - only admin/system can write, users can't access directly
    match /subscription_events/{eventId} {
      allow read, write: if false; // Only server-side access
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
