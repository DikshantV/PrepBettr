import { test, expect } from '@playwright/test';\n\n/**\n * Firebase 401 Error Diagnostic Test Suite\n * \n * Tests Firebase Admin SDK authentication flows to identify 401 errors\n * and validate diagnostic endpoints work correctly in different environments.\n */\n\ntest.describe('Firebase 401 Authentication Diagnostics', () => {\n  let baseUrl: string;\n  \n  test.beforeAll(async () => {\n    // Allow override via environment variable for testing different environments\n    baseUrl = process.env.BASE_URL || 'http://localhost:3000';\n    console.log(`üåê Testing against: ${baseUrl}`);\n  });\n\n  test.beforeEach(async ({ page }) => {\n    // Clear any existing auth state\n    await page.evaluate(() => {\n      localStorage.clear();\n      sessionStorage.clear();\n      document.cookie.split(\";\").forEach((c) => {\n        document.cookie = c.replace(/^ +/, \"\").replace(/=.*/, \"=;expires=\" + new Date().toUTCString() + \";path=/\");\n      });\n    });\n  });\n\n  test('should access Firebase configuration debug endpoint', async ({ request }) => {\n    // Test the debug endpoint that we created\n    const response = await request.get('/api/debug/firebase-config', {\n      headers: {\n        'x-debug-auth': 'debug-firebase-2024'\n      }\n    });\n\n    console.log(`üîç Debug endpoint status: ${response.status()}`);\n    \n    if (response.status() === 200) {\n      const data = await response.json();\n      console.log('‚úÖ Firebase configuration debug data:', JSON.stringify(data, null, 2));\n      \n      // Validate the diagnostic response structure\n      expect(data).toHaveProperty('timestamp');\n      expect(data).toHaveProperty('environment');\n      expect(data).toHaveProperty('firebaseAdmin');\n      expect(data).toHaveProperty('unifiedAuth');\n      expect(data).toHaveProperty('summary');\n      \n      // Check for critical issues\n      if (data.summary?.criticalIssues?.length > 0) {\n        console.warn('üö® Critical Firebase configuration issues detected:', data.summary.criticalIssues);\n      } else {\n        console.log('‚úÖ No critical Firebase configuration issues detected');\n      }\n      \n      // Validate Firebase Admin SDK status\n      expect(data.firebaseAdmin?.adminSDKAvailable).toBe(true);\n      \n    } else {\n      console.log(`‚ÑπÔ∏è  Debug endpoint response: ${await response.text()}`);\n    }\n  });\n\n  test('should test Google sign-in authentication flow', async ({ page }) => {\n    // This test simulates a Google sign-in flow to trigger Firebase ID token verification\n    const requestPromises: Promise<any>[] = [];\n    const responses: any[] = [];\n\n    // Monitor all authentication-related API calls\n    page.on('request', (request) => {\n      const url = request.url();\n      if (url.includes('/api/auth/') || url.includes('google') || url.includes('firebase')) {\n        console.log(`üîç Auth-related request: ${request.method()} ${url}`);\n      }\n    });\n\n    page.on('response', async (response) => {\n      const url = response.url();\n      if (url.includes('/api/auth/')) {\n        console.log(`üì° Auth API response: ${response.status()} ${url}`);\n        \n        // Capture 401 responses for analysis\n        if (response.status() === 401) {\n          console.error(`üö® 401 Authentication error detected at: ${url}`);\n          try {\n            const errorData = await response.json();\n            console.error('‚ùå 401 Error details:', errorData);\n            responses.push({ url, status: 401, error: errorData });\n          } catch (e) {\n            const errorText = await response.text();\n            console.error('‚ùå 401 Error response:', errorText);\n            responses.push({ url, status: 401, error: errorText });\n          }\n        } else if (response.status() >= 500) {\n          console.error(`üö® Server error detected: ${response.status()} at ${url}`);\n          try {\n            const errorData = await response.json();\n            console.error('‚ùå Server error details:', errorData);\n            responses.push({ url, status: response.status(), error: errorData });\n          } catch (e) {\n            const errorText = await response.text();\n            responses.push({ url, status: response.status(), error: errorText });\n          }\n        }\n      }\n    });\n\n    // Navigate to sign-in page\n    await page.goto('/sign-in');\n    await expect(page.locator('form')).toBeVisible({ timeout: 10000 });\n\n    // Look for Google sign-in button\n    const googleButton = page.locator('button:has-text(\"Google\"), button:has-text(\"Sign in with Google\")');\n    \n    if (await googleButton.count() > 0) {\n      console.log('üîç Google sign-in button found, testing flow...');\n      \n      // Note: In a real test, we would need to handle Google OAuth flow\n      // For now, we'll simulate by directly testing the API endpoint\n      await page.evaluate(async () => {\n        // Mock a Firebase ID token for testing\n        const mockIdToken = 'eyJhbGciOiJSUzI1NiIsImtpZCI6IjTest-Mock-Token';\n        \n        try {\n          const response = await fetch('/api/auth/signin', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              idToken: mockIdToken\n            })\n          });\n          \n          const result = await response.json();\n          console.log('üîç Mock signin API response:', response.status, result);\n        } catch (error) {\n          console.log('üîç Mock signin API error:', error);\n        }\n      });\n      \n      // Wait for any async operations to complete\n      await page.waitForTimeout(3000);\n    } else {\n      console.log('‚ÑπÔ∏è  Google sign-in button not found, skipping Google flow test');\n    }\n\n    // Report any 401 errors found\n    const authErrors = responses.filter(r => r.status === 401);\n    if (authErrors.length > 0) {\n      console.log('üö® Authentication errors detected:');\n      authErrors.forEach((error, index) => {\n        console.log(`  ${index + 1}. ${error.url} - Status: ${error.status}`);\n        console.log(`     Error: ${JSON.stringify(error.error, null, 2)}`);\n      });\n    } else {\n      console.log('‚úÖ No 401 authentication errors detected');\n    }\n  });\n\n  test('should test email/password authentication flow', async ({ page }) => {\n    const responses: any[] = [];\n\n    // Monitor authentication API responses\n    page.on('response', async (response) => {\n      const url = response.url();\n      if (url.includes('/api/auth/')) {\n        console.log(`üì° Auth API response: ${response.status()} ${url}`);\n        \n        if (response.status() === 401 || response.status() >= 500) {\n          try {\n            const errorData = await response.json();\n            responses.push({ url, status: response.status(), error: errorData });\n          } catch (e) {\n            const errorText = await response.text();\n            responses.push({ url, status: response.status(), error: errorText });\n          }\n        }\n      }\n    });\n\n    // Navigate to sign-up page to test email/password flow\n    await page.goto('/sign-up');\n    await expect(page.locator('form')).toBeVisible({ timeout: 10000 });\n\n    // Fill out the form with test data\n    await page.fill('input[name=\"name\"]', 'Test User');\n    await page.fill('input[name=\"email\"]', 'test@example.com');\n    await page.fill('input[name=\"password\"]', 'testpassword123');\n\n    console.log('üîç Testing email/password signup flow...');\n    \n    // Submit the form\n    await page.click('button[type=\"submit\"]');\n    \n    // Wait for the response\n    await page.waitForTimeout(5000);\n\n    // Check for any errors\n    const errorElement = page.locator('[role=\"alert\"], .error, .text-red-500');\n    if (await errorElement.count() > 0) {\n      const errorText = await errorElement.textContent();\n      console.log(`üö® UI Error displayed: ${errorText}`);\n    }\n\n    // Report authentication errors\n    const authErrors = responses.filter(r => r.status === 401 || r.status >= 500);\n    if (authErrors.length > 0) {\n      console.log('üö® Authentication/Server errors detected:');\n      authErrors.forEach((error, index) => {\n        console.log(`  ${index + 1}. ${error.url} - Status: ${error.status}`);\n        console.log(`     Error: ${JSON.stringify(error.error, null, 2)}`);\n      });\n    } else {\n      console.log('‚úÖ No authentication errors detected in signup flow');\n    }\n  });\n\n  test('should validate Firebase Admin SDK logs are being generated', async ({ page }) => {\n    // This test navigates to trigger Firebase initialization and checks console logs\n    const consoleMessages: string[] = [];\n    \n    page.on('console', (msg) => {\n      const text = msg.text();\n      if (text.includes('üî•') || text.includes('Firebase') || text.includes('UnifiedAuth')) {\n        console.log(`üìù Firebase log: ${text}`);\n        consoleMessages.push(text);\n      }\n    });\n\n    // Navigate to trigger Firebase initialization\n    await page.goto('/sign-in');\n    await page.waitForLoadState('networkidle', { timeout: 15000 });\n    \n    // Wait for initialization logs\n    await page.waitForTimeout(3000);\n\n    // Validate that we're getting diagnostic logs\n    const firebaseLogs = consoleMessages.filter(msg => \n      msg.includes('Firebase') || msg.includes('üî•')\n    );\n    \n    if (firebaseLogs.length > 0) {\n      console.log(`‚úÖ Found ${firebaseLogs.length} Firebase diagnostic log messages`);\n      firebaseLogs.forEach((log, index) => {\n        console.log(`  ${index + 1}. ${log}`);\n      });\n    } else {\n      console.log('‚ö†Ô∏è  No Firebase diagnostic logs detected - may indicate logging configuration issue');\n    }\n\n    // The test passes regardless - this is for diagnostic information\n    expect(true).toBe(true);\n  });\n\n  test('should check Application Insights telemetry', async ({ page }) => {\n    // Monitor Application Insights calls if present\n    const insightsRequests: string[] = [];\n    \n    page.on('request', (request) => {\n      const url = request.url();\n      if (url.includes('applicationinsights') || url.includes('dc.services.visualstudio.com')) {\n        insightsRequests.push(url);\n        console.log(`üìä Application Insights request: ${url}`);\n      }\n    });\n\n    // Navigate to trigger any telemetry\n    await page.goto('/sign-in');\n    await page.waitForLoadState('networkidle');\n    await page.waitForTimeout(3000);\n\n    if (insightsRequests.length > 0) {\n      console.log(`üìä Found ${insightsRequests.length} Application Insights requests`);\n      console.log('‚úÖ Telemetry system is active - errors should be captured in Application Insights');\n    } else {\n      console.log('‚ÑπÔ∏è  No Application Insights requests detected - may be disabled in this environment');\n    }\n  });\n});","line_range_start":1,"line_range_end":269}}
</function_results>

Now let me commit our diagnostic report and test:

<function_calls>
<invoke name="run_command">
<parameter name="command">cd /Users/dikshantvashistha/PrepBettr && git add reports/ tests/e2e/auth-401-diagnostics.spec.ts