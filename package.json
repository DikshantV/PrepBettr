{
 "name": "prepbettr",
 "version": "0.1.0",
 "private": true,
 "scripts": {
  "dev": "GRPC_VERBOSITY=ERROR NODE_OPTIONS='--no-warnings --openssl-legacy-provider' next dev",
  "prebuild": "npm run check:routes",
  "build": "GRPC_VERBOSITY=ERROR NODE_OPTIONS='--no-warnings --openssl-legacy-provider' next build",
  "build:azure": "ENVIRONMENT=production BUILD_STANDALONE=true npm run build",
  "build:staging": "ENVIRONMENT=staging npm run build",
  "build:check": "tsc --noEmit --skipLibCheck",
  "start": "GRPC_VERBOSITY=ERROR NODE_OPTIONS='--no-warnings --openssl-legacy-provider' next start",
  "lint": "next lint",
  "test": "jest",
  "test:watch": "jest --watch",
  "test:coverage": "jest --coverage",
  "test:unit": "jest tests/",
  "test:quota": "jest tests/quota-middleware.test.ts",
  "test:e2e": "NODE_ENV=development playwright test",
  "test:e2e:dev": "NODE_ENV=development playwright test --ui",
  "test:e2e:prod": "NODE_ENV=production playwright test --config=playwright.config.production.ts",
  "test:e2e:report": "playwright show-report",
  "test:e2e:quota": "NODE_ENV=development playwright test quota-flows.spec.ts",
  "test:e2e:quota:headed": "NODE_ENV=development playwright test quota-flows.spec.ts --headed",
  "test:auth-flow": "NODE_ENV=development playwright test auth-flow.spec.ts",
  "test:auth-regression": "node scripts/check-google-auth-regression.js",
  "test:auth-flow:backend": "tsx scripts/test-auth-flow.ts",
  "test:google-signup": "tsx scripts/test-google-signup.ts",
  "test:auth-performance": "NODE_ENV=development playwright test auth-performance.spec.ts",
  "test:auth-flow:prod": "NODE_ENV=production playwright test auth-flow.spec.ts --config=playwright.config.production.ts",
  "test:auth-performance:prod": "NODE_ENV=production playwright test auth-performance.spec.ts --config=playwright.config.production.ts",
  "test:hydration": "NODE_ENV=development playwright test e2e/hydration.spec.ts",
  "test:hydration:prod": "NODE_ENV=production playwright test e2e/hydration.spec.ts --config=playwright.config.production.ts",
  "test:hydration:headed": "NODE_ENV=development playwright test e2e/hydration.spec.ts --headed",
  "test:all": "npm run test:unit && npm run test:e2e:quota",
  "test:ci": "npm run test:coverage && npm run test:e2e:quota",
  "test:ci:full": "npm run lint && npm run type-check && npm run test:coverage && npm run test:e2e",
  "build:test": "npm run build && npm run test:hydration",
  "type-check": "tsc --noEmit",
  "test:unit:audio": "jest lib/audio-utils.test.ts --coverage",
  "test:unit:state": "jest lib/voice-state-machine.test.ts --coverage",
  "test:e2e:voice:enhanced": "playwright test e2e/voice-interview-enhanced.spec.ts",
  "test:e2e:community": "NODE_ENV=development playwright test e2e/community-interview-flow.spec.ts",
  "test:audio": "jest lib/audio/__tests__/micCapture.simple.test.js --testEnvironment=jsdom",
  "test:azure-function": "node scripts/test-azure-function.js",
  "test:azure-health": "jest tests/azure-services-health.test.ts",
  "check:azure": "tsx scripts/check-azure-health.ts",
  "test:azure-openai": "tsx scripts/test-azure-openai-integration.ts",
  "test:resume-processing": "tsx scripts/test-resume-processing.ts",
  "test:voice-flow": "node scripts/test-voice-interview-flow.js",
  "test:voice-system": "tsx scripts/test-voice-system.ts",
  "health:azure": "npm run check:azure && npm run test:azure-health && npm run test:azure-openai",
  "check:routes": "tsx scripts/check-duplicate-routes.ts",
  "test:azure-app-config": "tsx scripts/test-azure-app-config.ts",
  "setup:azure-app-config": "tsx scripts/setup-azure-app-config.ts",
  "setup:azure-app-config:production": "tsx scripts/setup-azure-app-config-production.ts",
  "build:fetch-config": "tsx scripts/fetch-build-config.ts",
  "build:production": "npm run build:fetch-config && ENVIRONMENT=production BUILD_STANDALONE=true npm run build",
  "seed-firestore": "tsx scripts/firebase/migrate-seed-data.ts",
  "firestore:migrate": "npm run seed-firestore",
  "test:firestore-rules": "jest tests/firestore-rules.test.ts",
  "test:services": "jest services/ --coverage",
  "test:integration:staging": "playwright test tests/integration/staging-functions.spec.ts",
  "test:load:k6": "k6 run tests/load/queue-throughput.js",
  "test:emulators:start": "firebase emulators:start --only firestore,auth,storage",
  "test:emulators:stop": "firebase emulators:stop",
  "test:suite:full": "npm run test:coverage && npm run test:firestore-rules && npm run test:services && npm run test:e2e",
  "deploy:check": "tsx scripts/deployment-checklist.ts",
  "deploy:check:staging": "tsx scripts/deployment-checklist.ts staging",
  "deploy:check:production": "tsx scripts/deployment-checklist.ts production",
  "deploy:azure:staging": "npm run deploy:check:staging && npm run build:staging",
  "deploy:azure:production": "npm run deploy:check:production && npm run build:azure",
  "deploy:azure:functions": "cd azure && npm run deploy",
  "deploy:azure:all": "npm run deploy:azure:functions && npm run deploy:azure:production",
  "env:check": "tsx scripts/compare-env-variables.ts",
  "env:keyvault": "node scripts/test-key-vault.js",
  "env:audit": "npm run env:check && npm run env:keyvault",
  "backfill:mock-interviews": "tsx scripts/backfill-mock-interviews.ts",
  "monitor:mock-interviews": "tsx scripts/monitor-mock-interview-usage.ts",
  "monitor:historical": "tsx scripts/monitor-mock-interview-usage.ts --historical",
  "monitor:production": "tsx scripts/monitor-production-metrics.ts",
  "monitor:production:ci": "CI=true tsx scripts/monitor-production-metrics.ts",
  "migrate:database": "tsx scripts/database-migration.ts migrate",
  "migrate:validate": "tsx scripts/database-migration.ts validate",
  "migrate:rollback": "tsx scripts/database-migration.ts rollback",
  "migrate:dry-run": "tsx scripts/database-migration.ts migrate --dry-run",
  "test:migration": "jest --testPathPatterns=database-migration",
  "simple-migrate": "tsx scripts/simple-migration.ts",
  "config:validate": "tsx scripts/validate-config.ts",
  "config:validate:drift": "tsx scripts/validate-config.ts --drift-only",
  "config:validate:cosmos": "tsx scripts/validate-config.ts --cosmos-check",
  "config:validate:ci": "tsx scripts/validate-config.ts --ci",
  "config:fix-drift": "tsx scripts/validate-config.ts fix-drift",
  "config:sync": "curl -X POST ${AZURE_FUNCTION_CONFIG_SYNC_URL:-http://localhost:7071/api/config-sync}",
  "config:migrate": "tsx scripts/migrate-firebase-to-azure-config.ts",
  "data:snapshot:staging": "tsx scripts/deployment/data-validation.ts snapshot staging",
  "data:snapshot:prod": "tsx scripts/deployment/data-validation.ts snapshot prod",
  "data:validate:staging": "tsx scripts/deployment/data-validation.ts validate staging",
  "data:validate:prod": "tsx scripts/deployment/data-validation.ts validate prod",
  "data:compare": "tsx scripts/deployment/data-validation.ts compare",
  "rollback:backup:staging": "tsx scripts/deployment/rollback-procedures.ts backup staging",
  "rollback:backup:prod": "tsx scripts/deployment/rollback-procedures.ts backup prod",
  "rollback:list:staging": "tsx scripts/deployment/rollback-procedures.ts list staging",
  "rollback:list:prod": "tsx scripts/deployment/rollback-procedures.ts list prod",
  "config:backup:staging": "tsx scripts/deployment/app-config-manager.ts backup staging",
  "config:backup:prod": "tsx scripts/deployment/app-config-manager.ts backup prod",
  "config:list:staging": "tsx scripts/deployment/app-config-manager.ts list staging",
  "config:list:prod": "tsx scripts/deployment/app-config-manager.ts list prod",
  "config:validate:staging": "tsx scripts/deployment/app-config-manager.ts validate staging",
  "config:validate:prod": "tsx scripts/deployment/app-config-manager.ts validate prod",
  "secrets:rotate:staging": "tsx scripts/deployment/app-config-manager.ts rotate staging --dry-run",
  "secrets:rotate:prod": "tsx scripts/deployment/app-config-manager.ts rotate prod --dry-run",
  "migrate:openai:inventory": "tsx scripts/migration/create-inventory.ts",
  "migrate:openai": "tsx scripts/migration/codemods/replace-openai.ts",
  "migrate:openai:all": "npm run migrate:openai:inventory && npm run migrate:openai",
  "test:azure-foundry": "tsx scripts/test-azure-foundry.ts",
  "test:azure-foundry-voice": "tsx scripts/test-azure-foundry-voice.ts",
  "test:voice-foundry": "jest --config tests/azure-ai-foundry/voice/jest.config.js",
  "test:voice-foundry:watch": "jest --config tests/azure-ai-foundry/voice/jest.config.js --watch",
  "test:voice-foundry:coverage": "jest --config tests/azure-ai-foundry/voice/jest.config.js --coverage",
  "test:e2e:voice:foundry": "playwright test tests/e2e/voice-interview-foundry.spec.ts",
  "migration:backfill-processor-version": "tsx scripts/migrations/001-backfill-processor-version.ts",
  "migration:backfill-processor-version:dry-run": "tsx scripts/migrations/001-backfill-processor-version.ts --dry-run",
  "migration:backfill-processor-version:verify": "tsx scripts/migrations/001-backfill-processor-version.ts --verify",
  "migration:list": "tsx scripts/migrations/list-migrations.ts",
  "migration:status": "tsx scripts/migrations/migration-status.ts",
  "foundry:flags": "tsx scripts/config/foundry-resume-processing-flags.ts",
  "foundry:flags:init:staging": "tsx scripts/config/foundry-resume-processing-flags.ts init staging",
  "foundry:flags:init:production": "tsx scripts/config/foundry-resume-processing-flags.ts init production",
  "foundry:flags:enable:staging": "tsx scripts/config/foundry-resume-processing-flags.ts enable staging",
  "foundry:flags:enable:production": "tsx scripts/config/foundry-resume-processing-flags.ts enable production 5",
  "foundry:flags:disable:emergency": "tsx scripts/config/foundry-resume-processing-flags.ts disable production",
  "foundry:flags:status": "tsx scripts/config/foundry-resume-processing-flags.ts status",
  "test:foundry": "npm run test:foundry:unit && npm run test:foundry:integration && npm run test:foundry:e2e",
  "test:foundry:unit": "jest tests/unit/azure-ai-foundry/ --coverage --passWithNoTests",
  "test:foundry:integration": "jest tests/integration/azure-ai-foundry/ --testTimeout=30000 --passWithNoTests",
  "test:foundry:e2e": "playwright test tests/e2e/azure-foundry-integration.spec.ts",
  "test:foundry:voice": "jest tests/azure-ai-foundry/voice/ --config tests/azure-ai-foundry/voice/jest.config.js",
  "test:foundry:perf": "k6 run tests/perf/foundry/voice-interview-load.js",
  "test:foundry:all": "npm run test:foundry && npm run test:foundry:perf",
  "test:foundry:quick": "jest tests/unit/azure-ai-foundry/ --passWithNoTests --silent",
  "test:foundry:watch": "jest tests/unit/azure-ai-foundry/ --watch --passWithNoTests",
  "test:foundry:debug": "DEBUG=foundry:*,azure:* npm run test:foundry:unit",
  "test:foundry:memory": "jest tests/unit/azure-ai-foundry/ --detectOpenHandles --forceExit --logHeapUsage",
  "audit:foundry:coverage": "tsx scripts/audit-foundry-coverage.ts",
  "foundry:deps:graph": "tsx scripts/generate-dependency-graph.ts",
  "test:setup": "tsx scripts/test-setup.ts",
  "test:e2e:foundry:scenarios": "playwright test tests/e2e/scenario-tests/foundry-interview-scenarios.test.ts",
  "test:e2e:foundry:resilience": "playwright test tests/e2e/resilience-tests/foundry-error-recovery.test.ts",
  "test:e2e:foundry:performance": "playwright test tests/e2e/performance-tests/foundry-performance.test.ts",
  "test:e2e:foundry:workflow": "playwright test tests/e2e/foundry-workflow.test.ts",
  "test:e2e:foundry:all": "npm run test:e2e:foundry:scenarios && npm run test:e2e:foundry:resilience && npm run test:e2e:foundry:performance",
  "test:e2e:foundry:full": "npm run test:e2e:foundry:workflow && npm run test:e2e:foundry:all",
  "test:paypal": "jest tests/integration/paypal-subscriptions.test.js --coverage",
  "test:paypal:watch": "jest tests/integration/paypal-subscriptions.test.js --watch",
  "test:paypal:sandbox": "RUN_PAYPAL_LIVE_TESTS=true jest tests/integration/paypal-subscriptions.test.js",
  "test:paypal:factories": "jest tests/factories/subscription-factories --coverage",
  "setup:paypal": "node scripts/setup-paypal-sandbox.js",
  "setup:paypal:all": "node scripts/setup-paypal-sandbox.js setup-all",
  "setup:paypal:validate": "node scripts/setup-paypal-sandbox.js validate-config",
  "setup:paypal:test-connection": "node scripts/setup-paypal-sandbox.js test-connection",
  "setup:paypal:env-template": "node scripts/setup-paypal-sandbox.js generate-env-template"
 },
 "dependencies": {
  "@axe-core/playwright": "^4.10.2",
  "@azure-rest/ai-document-intelligence": "^1.1.0",
  "@azure/ai-form-recognizer": "^5.1.0",
  "@azure/ai-projects": "^1.0.0",
  "@azure/app-configuration": "^1.9.0",
  "@azure/core-auth": "^1.10.0",
  "@azure/cosmos": "^4.5.0",
  "@azure/identity": "^4.11.1",
  "@azure/keyvault-secrets": "^4.10.0",
  "@azure/storage-blob": "^12.28.0",
  "@hookform/resolvers": "3.10.0",
  "@mantine/core": "^8.2.1",
  "@mantine/hooks": "^8.2.1",
  "@microsoft/applicationinsights-clickanalytics-js": "^3.3.9",
  "@microsoft/applicationinsights-react-js": "^19.3.7",
  "@microsoft/applicationinsights-web": "^3.3.9",
  "@monaco-editor/react": "^4.7.0",
  "@paypal/paypal-server-sdk": "^1.0.0",
  "@paypal/react-paypal-js": "^8.9.1",
  "@radix-ui/react-avatar": "^1.1.10",
  "@radix-ui/react-collapsible": "^1.1.11",
  "@radix-ui/react-dialog": "^1.1.14",
  "@radix-ui/react-dropdown-menu": "^2.1.15",
  "@radix-ui/react-label": "^2.1.6",
  "@radix-ui/react-select": "^2.2.5",
  "@radix-ui/react-separator": "^1.1.7",
  "@radix-ui/react-slot": "^1.2.3",
  "@radix-ui/react-switch": "^1.2.5",
  "@radix-ui/react-tabs": "^1.1.12",
  "@radix-ui/react-tooltip": "^1.2.7",
  "@rpldy/upload-button": "^1.11.0",
  "@rpldy/uploady": "^1.11.0",
  "@sendgrid/helpers": "^8.0.0",
  "@sendgrid/mail": "^8.1.5",
  "@tabler/icons-react": "^3.34.0",
  "@types/formidable": "^3.4.5",
  "@types/uuid": "^10.0.0",
  "applicationinsights": "^3.9.0",
  "axios": "^1.11.0",
  "chrome-launcher": "^1.2.0",
  "class-variance-authority": "^0.7.1",
  "clsx": "^2.1.1",
  "cobe": "^0.6.4",
  "commander": "^12.1.0",
  "dayjs": "^1.11.13",
  "dotenv": "^17.2.2",
  "firebase": "^11.7.1",
  "firebase-admin": "^13.4.0",
  "formidable": "^3.5.4",
  "framer-motion": "^12.19.2",
  "history": "^5.3.0",
  "jspdf": "^3.0.1",
  "lighthouse": "^12.8.1",
  "lucide-react": "^0.507.0",
  "mammoth": "^1.9.1",
  "microsoft-cognitiveservices-speech-sdk": "^1.45.0",
  "mjml": "^4.15.3",
  "monaco-editor": "^0.52.2",
  "motion": "^12.19.2",
  "nanoid": "^5.1.5",
  "next": "15.3.2",
  "next-themes": "^0.4.6",
  "openai": "^5.11.0",
  "pdf-parse": "^1.1.1",
  "react": "^18.3.1",
  "react-dom": "^18.3.1",
  "react-hook-form": "^7.56.2",
  "react-icons": "^5.5.0",
  "sonner": "^2.0.7",
  "styled-components": "^6.1.19",
  "swr": "^2.3.4",
  "tailwind-merge": "^3.3.1",
  "uuid": "^11.1.0",
  "zod": "3.24.4"
 },
 "devDependencies": {
  "@eslint/eslintrc": "^3",
  "@faker-js/faker": "^10.0.0",
  "@jest/globals": "^30.0.5",
  "@next/bundle-analyzer": "^15.5.3",
  "@playwright/test": "^1.54.1",
  "@tailwindcss/postcss": "^4.1.12",
  "@testing-library/react": "^16.3.0",
  "@types/form-data": "^2.2.1",
  "@types/jest": "^30.0.0",
  "@types/js-yaml": "^4.0.9",
  "@types/node": "^20",
  "@types/node-fetch": "^2.6.13",
  "@types/pdf-parse": "^1.1.5",
  "@types/react": "^19",
  "@types/react-dom": "^19",
  "autoprefixer": "^10.4.21",
  "core-js": "^3.39.0",
  "eslint": "^9",
  "eslint-config-next": "15.3.2",
  "firebase-tools": "^13.0.2",
  "form-data": "^4.0.4",
  "jest": "^30.0.5",
  "jest-environment-jsdom": "^30.0.5",
  "jest-environment-node": "^30.0.5",
  "jest-websocket-mock": "^2.5.0",
  "jsonwebtoken": "^9.0.2",
  "msw": "^2.11.1",
  "node-fetch": "^2.7.0",
  "playwright": "^1.54.1",
  "tailwindcss": "^4",
  "tailwindcss-animate": "^1.0.7",
  "ts-jest": "^29.4.0",
  "ts-node": "^10.9.2",
  "tsx": "^4.20.3",
  "typescript": "^5",
  "whatwg-fetch": "^3.6.20"
 },
 "overrides": {
  "core-js": "^3.39.0"
 }
}
