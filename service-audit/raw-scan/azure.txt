./types/feature-flags.ts:4:export type FeatureFlagName = 'voiceInterviews' | 'premiumFeatures' | 'autoApplyAzure' | 'portalIntegration' | 'maintenanceMode';
./types/feature-flags.ts:27:  AUTOAPPLYAZURE: 'autoApplyAzure' as const,
./types/resume-tailoring.ts:236:// Azure OpenAI API interfaces
./types/resume-tailoring.ts:237:export interface AzureOpenAIAnalysisPrompt {
./types/resume-tailoring.ts:243:export interface AzureOpenAIResponse {
./app/dashboard/settings/page.tsx:25:  const { flags, loading, refreshFlags, isAutoApplyAzureEnabled, isPortalIntegrationEnabled } = useFeatureFlags();
./app/dashboard/settings/page.tsx:101:                    {/* Azure Auto-Apply Feature */}
./app/dashboard/settings/page.tsx:104:                        <Label className="text-white font-medium">Auto-Apply with Azure AI</Label>
./app/dashboard/settings/page.tsx:106:                          Automatically apply to jobs using advanced Azure OpenAI integration
./app/dashboard/settings/page.tsx:108:                        {flags?.rolloutStatus?.autoApplyAzure && (
./app/dashboard/settings/page.tsx:116:                          checked={isAutoApplyAzureEnabled()} 
./app/dashboard/settings/page.tsx:117:                          disabled={!flags?.rolloutStatus?.autoApplyAzure}
./app/dashboard/settings/page.tsx:144:                  {(!flags?.rolloutStatus?.autoApplyAzure && !flags?.rolloutStatus?.portalIntegration) && (
./app/layout.tsx:9:import { initializeAzureServices } from '@/lib/azure-startup';
./app/layout.tsx:15:// Initialize Azure services on server-side
./app/layout.tsx:16:initializeAzureServices();
./app/layout.tsx:19:const instrumentationKey = process.env.NEXT_PUBLIC_AZURE_APPLICATION_INSIGHTS_INSTRUMENTATION_KEY;
./app/api/config/firebase/route.ts:2:import { initializeAzureEnvironment } from '@/lib/azure-config';
./app/api/config/firebase/route.ts:6:    // Initialize Azure environment to ensure secrets are loaded
./app/api/config/firebase/route.ts:7:    await initializeAzureEnvironment();
./azure/processScheduledDeletions/index.js:1:const { CosmosClient } = require('@azure/cosmos');
./azure/processScheduledDeletions/index.js:9:    const connectionString = process.env.AZURE_COSMOS_DB_CONNECTION_STRING;
./azure/processScheduledDeletions/index.js:71:    const functionAppName = process.env.AZURE_FUNCTION_APP_NAME;
./azure/processScheduledDeletions/index.js:72:    const deleteUserDataUrl = `https://${functionAppName}.azurewebsites.net/api/deleteUserData`;
./azure/test-functions.js:3:// Azure Function URLs
./azure/test-functions.js:4:const BASE_URL = 'https://prepbettr-voiceagent-functions.azurewebsites.net/api';
./azure/test-functions.js:5:const AZURE_FUNCTION_KEY = process.env.AZURE_FUNCTION_KEY;
./azure/test-functions.js:7:if (!AZURE_FUNCTION_KEY) {
./azure/test-functions.js:8:    console.error('‚ùå AZURE_FUNCTION_KEY environment variable is not set');
./azure/test-functions.js:12:const VOICE_SERVICE_URL = `${BASE_URL}/httptrigger1?code=${AZURE_FUNCTION_KEY}`;
./azure/test-functions.js:76:    console.log('üß™ Testing Azure Functions...\n');
./azure/followUpWorker/index.js:1:const { app } = require('@azure/functions');
./azure/followUpWorker/index.js:5:const { initializeAzureOpenAI, getAzureOpenAIClient } = require('../lib/azure-openai-client');
./azure/followUpWorker/index.js:10:    connection: 'AzureWebJobsStorage',
./azure/followUpWorker/index.js:107:            // Re-throw to trigger Azure Functions retry logic
./azure/followUpWorker/index.js:261:        // Initialize Azure OpenAI client
./azure/followUpWorker/index.js:262:        await initializeAzureOpenAI();
./azure/followUpWorker/index.js:263:        const client = await getAzureOpenAIClient();
./azure/health/index.js:2: * Azure Function: Health Check Endpoint
./azure/health/index.js:17:            service: 'PrepBettr Azure Functions',
./azure/health/index.js:28:                    azure_openai: !!process.env.AZURE_OPENAI_KEY,
./azure/health/index.js:29:                    azure_speech: !!process.env.SPEECH_KEY,
./azure/health/index.js:66:                service: 'PrepBettr Azure Functions',
./azure/onUserPlanChange/index.js:1:const { CosmosClient } = require('@azure/cosmos');
./azure/onUserPlanChange/index.js:8:    const connectionString = process.env.AZURE_COSMOS_DB_CONNECTION_STRING;
./azure/onUserPlanChange/index.js:52:      // Azure Cosmos DB doesn't provide "before/after" like Firestore
./azure/TokenRefreshTimer/index.js:1:const { SecretClient } = require('@azure/keyvault-secrets');
./azure/TokenRefreshTimer/index.js:2:const { DefaultAzureCredential } = require('@azure/identity');
./azure/TokenRefreshTimer/index.js:14:        const keyVaultUri = process.env.AZURE_KEY_VAULT_URI;
./azure/TokenRefreshTimer/index.js:16:            throw new Error('AZURE_KEY_VAULT_URI environment variable is required');
./azure/TokenRefreshTimer/index.js:19:        const secretClient = new SecretClient(keyVaultUri, new DefaultAzureCredential());
./azure/TokenRefreshTimer/index.js:50:                    // Get Azure AD config for the portal
./azure/TokenRefreshTimer/index.js:51:                    const configSecret = await secretClient.getSecret(`${portal}-azure-ad-config`);
./azure/TokenRefreshTimer/index.js:53:                        context.log(`No Azure AD config found for portal: ${portal}`);
./azure/shared/authMiddleware.js:2:const { SecretClient } = require('@azure/keyvault-secrets');
./azure/shared/authMiddleware.js:3:const { DefaultAzureCredential } = require('@azure/identity');
./azure/shared/authMiddleware.js:6: * Firebase Authentication Middleware for Azure Functions
./azure/shared/authMiddleware.js:9: * can access protected endpoints in Azure Functions.
./azure/shared/authMiddleware.js:16: * Initialize Firebase Admin SDK with Azure Key Vault secrets
./azure/shared/authMiddleware.js:25:    if (!keyVaultClient && process.env.AZURE_KEY_VAULT_URL) {
./azure/shared/authMiddleware.js:27:        process.env.AZURE_KEY_VAULT_URL,
./azure/shared/authMiddleware.js:28:        new DefaultAzureCredential()
./azure/shared/authMiddleware.js:123: * Authentication middleware for Azure Functions
./azure/shared/authMiddleware.js:253: * Utility to create authenticated Azure Function wrapper
./azure/shared/authMiddleware.js:304:      service: 'Azure Functions Auth Middleware'
./azure/processGDPRScheduledDeletions/index.js:1:const { CosmosClient } = require('@azure/cosmos');
./azure/processGDPRScheduledDeletions/index.js:2:const { BlobServiceClient } = require('@azure/storage-blob');
./azure/processGDPRScheduledDeletions/index.js:3:const { DefaultAzureCredential } = require('@azure/identity');
./azure/processGDPRScheduledDeletions/index.js:4:const { SecretClient } = require('@azure/keyvault-secrets');
./azure/processGDPRScheduledDeletions/index.js:8: * Scheduled Azure Function for GDPR Data Deletion Processing
./azure/processGDPRScheduledDeletions/index.js:26:    // Initialize Azure Key Vault for secrets
./azure/processGDPRScheduledDeletions/index.js:27:    const keyVaultClient = process.env.AZURE_KEY_VAULT_URL 
./azure/processGDPRScheduledDeletions/index.js:28:      ? new SecretClient(process.env.AZURE_KEY_VAULT_URL, new DefaultAzureCredential())
./azure/processGDPRScheduledDeletions/index.js:32:    let cosmosConnection = process.env.AZURE_COSMOS_CONNECTION_STRING;
./azure/processGDPRScheduledDeletions/index.js:44:      const endpoint = process.env.AZURE_COSMOS_ENDPOINT;
./azure/processGDPRScheduledDeletions/index.js:45:      const key = process.env.AZURE_COSMOS_KEY;
./azure/processGDPRScheduledDeletions/index.js:58:    // Initialize Azure Blob Storage
./azure/processGDPRScheduledDeletions/index.js:59:    let storageConnection = process.env.AZURE_STORAGE_CONNECTION_STRING;
./azure/processGDPRScheduledDeletions/index.js:71:      throw new Error('Azure Storage connection string not found');
./azure/processGDPRScheduledDeletions/index.js:185:    // Delete from Azure Blob Storage
./azure/processGDPRScheduledDeletions/index.js:313: * Delete user files from Azure Blob Storage
./azure/applicationWorker/index.js:1:const { app } = require('@azure/functions');
./azure/applicationWorker/index.js:5:const { fetchAzureSecrets } = require('../lib/azure-config');
./azure/applicationWorker/index.js:8:// Azure OpenAI client - will be initialized from Key Vault secrets
./azure/applicationWorker/index.js:9:let azureOpenAIClient = null;
./azure/applicationWorker/index.js:12: * Initialize Azure OpenAI client
./azure/applicationWorker/index.js:14:async function initializeAzureOpenAI() {
./azure/applicationWorker/index.js:15:    if (azureOpenAIClient) {
./azure/applicationWorker/index.js:16:        return azureOpenAIClient;
./azure/applicationWorker/index.js:20:        const secrets = await fetchAzureSecrets();
./azure/applicationWorker/index.js:22:        if (!secrets.azureOpenAIKey || !secrets.azureOpenAIEndpoint) {
./azure/applicationWorker/index.js:23:            console.warn('‚ö†Ô∏è Azure OpenAI credentials not available, using fallback');
./azure/applicationWorker/index.js:27:        azureOpenAIClient = new OpenAI({
./azure/applicationWorker/index.js:28:            apiKey: secrets.azureOpenAIKey,
./azure/applicationWorker/index.js:29:            baseURL: `${secrets.azureOpenAIEndpoint}/openai/deployments/${secrets.azureOpenAIDeployment}`,
./azure/applicationWorker/index.js:32:                'api-key': secrets.azureOpenAIKey,
./azure/applicationWorker/index.js:36:        console.log('‚úÖ Azure OpenAI client initialized for application worker');
./azure/applicationWorker/index.js:37:        return azureOpenAIClient;
./azure/applicationWorker/index.js:39:        console.error('‚ùå Failed to initialize Azure OpenAI client:', error);
./azure/applicationWorker/index.js:47:    connection: 'AzureWebJobsStorage',
./azure/applicationWorker/index.js:170:            // Re-throw to trigger Azure Functions retry logic
./azure/applicationWorker/index.js:181:        const client = await initializeAzureOpenAI();
./azure/applicationWorker/index.js:184:            console.warn('Azure OpenAI client not available, using fallback scoring');
./azure/applicationWorker/index.js:222:        console.error('Error calculating job relevancy with Azure OpenAI:', error);
./azure/applicationWorker/index.js:241:        const client = await initializeAzureOpenAI();
./azure/applicationWorker/index.js:244:            console.warn('Azure OpenAI client not available, using fallback cover letter');
./azure/applicationWorker/index.js:284:        console.error('Error generating cover letter with Azure OpenAI:', error);
./azure/applicationWorker/index.js:310:        const client = await initializeAzureOpenAI();
./azure/applicationWorker/index.js:313:            console.warn('Azure OpenAI client not available, returning original resume');
./azure/applicationWorker/index.js:348:        console.error('Error tailoring resume with Azure OpenAI:', error);
./azure/searchScheduler/index.js:1:const { app } = require('@azure/functions');
./azure/notificationScheduler/index.js:1:const { app } = require('@azure/functions');
./azure/deleteUserData/index.js:2:const { CosmosClient } = require('@azure/cosmos');
./azure/deleteUserData/index.js:3:const { BlobServiceClient } = require('@azure/storage-blob');
./azure/deleteUserData/index.js:4:const { DefaultAzureCredential } = require('@azure/identity');
./azure/deleteUserData/index.js:5:const { SecretClient } = require('@azure/keyvault-secrets');
./azure/deleteUserData/index.js:17:    // Get secrets from Azure Key Vault
./azure/deleteUserData/index.js:18:    const credential = new DefaultAzureCredential();
./azure/deleteUserData/index.js:19:    const vaultName = process.env.AZURE_KEYVAULT_NAME;
./azure/deleteUserData/index.js:20:    const url = `https://${vaultName}.vault.azure.net`;
./azure/deleteUserData/index.js:39:      const connectionString = process.env.AZURE_COSMOS_DB_CONNECTION_STRING;
./azure/deleteUserData/index.js:43:    // Initialize Azure Storage client
./azure/deleteUserData/index.js:45:      const storageConnectionString = process.env.AZURE_STORAGE_CONNECTION_STRING;
./azure/deleteUserData/index.js:56:// Collections to delete from Azure Cosmos DB
./azure/deleteUserData/index.js:140:    // Delete from Azure Cosmos DB collections
./azure/deleteUserData/index.js:180:    // Delete from Azure Blob Storage
./azure/deleteUserData/index.js:196:        deletedCollections.push({ collection: 'azure-storage', count: deletedBlobsCount });
./azure/deleteUserData/index.js:197:        context.log(`Deleted ${deletedBlobsCount} files from Azure Storage`);
./azure/deleteUserData/index.js:200:      context.log.error('Error deleting from Azure Storage:', error);
./azure/deleteUserData/index.js:201:      deletionErrors.push({ collection: 'azure-storage', error: error.message });
./azure/lib/middleware/function-error-handler.js:4: * Error details for Azure Functions
./azure/lib/middleware/function-error-handler.js:53: * Azure Function Error Handler
./azure/lib/middleware/function-error-handler.js:58:   * Wrap Azure Function handler with error handling
./azure/lib/middleware/function-error-handler.js:301:    // Azure OpenAI specific errors
./azure/lib/compiled/azure-config.js:3:exports.fetchAzureSecrets = fetchAzureSecrets;
./azure/lib/compiled/azure-config.js:4:exports.initializeAzureEnvironment = initializeAzureEnvironment;
./azure/lib/compiled/azure-config.js:5:exports.getAzureConfig = getAzureConfig;
./azure/lib/compiled/azure-config.js:6:const identity_1 = require("@azure/identity");
./azure/lib/compiled/azure-config.js:7:const keyvault_secrets_1 = require("@azure/keyvault-secrets");
./azure/lib/compiled/azure-config.js:8:// Azure Key Vault configuration
./azure/lib/compiled/azure-config.js:9:const AZURE_KEY_VAULT_URI = process.env.AZURE_KEY_VAULT_URI || 'https://prepbettr-keyvault-083.vault.azure.net/';
./azure/lib/compiled/azure-config.js:12: * Initialize Azure Key Vault client
./azure/lib/compiled/azure-config.js:15:    if (!AZURE_KEY_VAULT_URI) {
./azure/lib/compiled/azure-config.js:16:        throw new Error('AZURE_KEY_VAULT_URI environment variable is required');
./azure/lib/compiled/azure-config.js:18:    const credential = new identity_1.DefaultAzureCredential();
./azure/lib/compiled/azure-config.js:19:    return new keyvault_secrets_1.SecretClient(AZURE_KEY_VAULT_URI, credential);
./azure/lib/compiled/azure-config.js:22: * Fetch secrets from Azure Key Vault
./azure/lib/compiled/azure-config.js:24:async function fetchAzureSecrets() {
./azure/lib/compiled/azure-config.js:30:        console.log('üîë Fetching secrets from Azure Key Vault...');
./azure/lib/compiled/azure-config.js:33:        const [speechKey, speechEndpoint, azureOpenAIKey, azureOpenAIEndpoint, azureOpenAIDeployment, azureOpenAIGpt35, azureOpenAIGpt4o, storageAccountName, storageAccountKey, formRecognizerEndpoint, formRecognizerKey] = await Promise.all([
./azure/lib/compiled/azure-config.js:36:            client.getSecret('azure-openai-key'),
./azure/lib/compiled/azure-config.js:37:            client.getSecret('azure-openai-endpoint'),
./azure/lib/compiled/azure-config.js:38:            client.getSecret('azure-openai-deployment'),
./azure/lib/compiled/azure-config.js:39:            client.getSecret('azure-openai-gpt35-deployment').catch(() => null), // Optional
./azure/lib/compiled/azure-config.js:40:            client.getSecret('azure-openai-gpt4o-deployment').catch(() => null), // Optional
./azure/lib/compiled/azure-config.js:41:            client.getSecret('azure-storage-account-name').catch(() => null), // Optional
./azure/lib/compiled/azure-config.js:42:            client.getSecret('azure-storage-account-key').catch(() => null), // Optional
./azure/lib/compiled/azure-config.js:43:            client.getSecret('azure-form-recognizer-endpoint').catch(() => null), // Optional
./azure/lib/compiled/azure-config.js:44:            client.getSecret('azure-form-recognizer-key').catch(() => null) // Optional
./azure/lib/compiled/azure-config.js:46:        if (!speechKey.value || !speechEndpoint.value || !azureOpenAIKey.value || !azureOpenAIEndpoint.value || !azureOpenAIDeployment.value) {
./azure/lib/compiled/azure-config.js:47:            throw new Error('One or more required secrets are missing from Azure Key Vault');
./azure/lib/compiled/azure-config.js:52:            azureOpenAIKey: azureOpenAIKey.value,
./azure/lib/compiled/azure-config.js:53:            azureOpenAIEndpoint: azureOpenAIEndpoint.value,
./azure/lib/compiled/azure-config.js:54:            azureOpenAIDeployment: azureOpenAIDeployment.value,
./azure/lib/compiled/azure-config.js:55:            azureOpenAIGpt35Deployment: azureOpenAIGpt35?.value || 'gpt-35-turbo',
./azure/lib/compiled/azure-config.js:56:            azureOpenAIGpt4oDeployment: azureOpenAIGpt4o?.value || 'gpt-4o',
./azure/lib/compiled/azure-config.js:57:            azureStorageAccountName: storageAccountName?.value,
./azure/lib/compiled/azure-config.js:58:            azureStorageAccountKey: storageAccountKey?.value,
./azure/lib/compiled/azure-config.js:59:            azureFormRecognizerEndpoint: formRecognizerEndpoint?.value,
./azure/lib/compiled/azure-config.js:60:            azureFormRecognizerKey: formRecognizerKey?.value
./azure/lib/compiled/azure-config.js:62:        console.log('‚úÖ Azure secrets loaded successfully');
./azure/lib/compiled/azure-config.js:66:        console.error('‚ùå Failed to fetch Azure secrets:', error);
./azure/lib/compiled/azure-config.js:72:            azureOpenAIKey: process.env.AZURE_OPENAI_KEY || '',
./azure/lib/compiled/azure-config.js:73:            azureOpenAIEndpoint: process.env.AZURE_OPENAI_ENDPOINT || '',
./azure/lib/compiled/azure-config.js:74:            azureOpenAIDeployment: process.env.AZURE_OPENAI_DEPLOYMENT || '',
./azure/lib/compiled/azure-config.js:75:            azureOpenAIGpt35Deployment: process.env.AZURE_OPENAI_GPT35_DEPLOYMENT || 'gpt-35-turbo',
./azure/lib/compiled/azure-config.js:76:            azureOpenAIGpt4oDeployment: process.env.AZURE_OPENAI_GPT4O_DEPLOYMENT || 'gpt-4o',
./azure/lib/compiled/azure-config.js:77:            azureStorageAccountName: process.env.AZURE_STORAGE_ACCOUNT_NAME,
./azure/lib/compiled/azure-config.js:78:            azureStorageAccountKey: process.env.AZURE_STORAGE_ACCOUNT_KEY,
./azure/lib/compiled/azure-config.js:79:            azureFormRecognizerEndpoint: process.env.AZURE_FORM_RECOGNIZER_ENDPOINT,
./azure/lib/compiled/azure-config.js:80:            azureFormRecognizerKey: process.env.AZURE_FORM_RECOGNIZER_KEY
./azure/lib/compiled/azure-config.js:82:        if (!fallbackSecrets.speechKey || !fallbackSecrets.azureOpenAIKey) {
./azure/lib/compiled/azure-config.js:90: * Initialize environment variables from Azure Key Vault
./azure/lib/compiled/azure-config.js:93:async function initializeAzureEnvironment() {
./azure/lib/compiled/azure-config.js:95:        const secrets = await fetchAzureSecrets();
./azure/lib/compiled/azure-config.js:99:        process.env.AZURE_OPENAI_KEY = secrets.azureOpenAIKey;
./azure/lib/compiled/azure-config.js:100:        process.env.AZURE_OPENAI_ENDPOINT = secrets.azureOpenAIEndpoint;
./azure/lib/compiled/azure-config.js:101:        process.env.AZURE_OPENAI_DEPLOYMENT = secrets.azureOpenAIDeployment;
./azure/lib/compiled/azure-config.js:102:        process.env.AZURE_OPENAI_GPT35_DEPLOYMENT = secrets.azureOpenAIGpt35Deployment;
./azure/lib/compiled/azure-config.js:103:        process.env.AZURE_OPENAI_GPT4O_DEPLOYMENT = secrets.azureOpenAIGpt4oDeployment;
./azure/lib/compiled/azure-config.js:104:        // Set Azure OpenAI keys for public environment
./azure/lib/compiled/azure-config.js:105:        process.env.NEXT_PUBLIC_AZURE_OPENAI_API_KEY = secrets.azureOpenAIKey;
./azure/lib/compiled/azure-config.js:106:        process.env.NEXT_PUBLIC_AZURE_OPENAI_ENDPOINT = secrets.azureOpenAIEndpoint;
./azure/lib/compiled/azure-config.js:107:        process.env.NEXT_PUBLIC_AZURE_OPENAI_DEPLOYMENT = secrets.azureOpenAIDeployment;
./azure/lib/compiled/azure-config.js:108:        process.env.NEXT_PUBLIC_AZURE_OPENAI_GPT35_DEPLOYMENT = secrets.azureOpenAIGpt35Deployment;
./azure/lib/compiled/azure-config.js:109:        process.env.NEXT_PUBLIC_AZURE_OPENAI_GPT4O_DEPLOYMENT = secrets.azureOpenAIGpt4oDeployment;
./azure/lib/compiled/azure-config.js:110:        console.log('üåü Azure environment initialized successfully');
./azure/lib/compiled/azure-config.js:113:        console.error('‚ùå Failed to initialize Azure environment:', error);
./azure/lib/compiled/azure-config.js:118: * Get current Azure configuration (for debugging)
./azure/lib/compiled/azure-config.js:120:function getAzureConfig() {
./azure/lib/compiled/azure-config.js:122:        keyVaultUri: AZURE_KEY_VAULT_URI,
./azure/lib/compiled/azure-config.js:127:            azureOpenAIKey: !!process.env.AZURE_OPENAI_KEY,
./azure/lib/compiled/azure-config.js:128:            azureOpenAIEndpoint: !!process.env.AZURE_OPENAI_ENDPOINT,
./azure/lib/compiled/azure-config.js:129:            azureOpenAIDeployment: !!process.env.AZURE_OPENAI_DEPLOYMENT,
./azure/lib/compiled/azure-config.js:130:            azureOpenAIGpt35Deployment: !!process.env.AZURE_OPENAI_GPT35_DEPLOYMENT,
./azure/lib/compiled/azure-config.js:131:            azureOpenAIGpt4oDeployment: !!process.env.AZURE_OPENAI_GPT4O_DEPLOYMENT
./azure/lib/compiled/azure-config.js:134:            default: process.env.AZURE_OPENAI_DEPLOYMENT,
./azure/lib/compiled/azure-config.js:135:            gpt35Turbo: process.env.AZURE_OPENAI_GPT35_DEPLOYMENT || 'gpt-35-turbo',
./azure/lib/compiled/azure-config.js:136:            gpt4o: process.env.AZURE_OPENAI_GPT4O_DEPLOYMENT || 'gpt-4o'
./azure/lib/azure-app-config.ts:2: * Azure App Configuration Service for Azure Functions
./azure/lib/azure-app-config.ts:4: * This module provides access to Azure App Configuration for Azure Functions,
./azure/lib/azure-app-config.ts:8:import { AppConfigurationClient } from '@azure/app-configuration';
./azure/lib/azure-app-config.ts:9:import { DefaultAzureCredential } from '@azure/identity';
./azure/lib/azure-app-config.ts:29:class AzureAppConfigService {
./azure/lib/azure-app-config.ts:37:    this.connectionString = connectionString || process.env.AZURE_APPCONFIG_CONNECTION_STRING || '';
./azure/lib/azure-app-config.ts:41:      console.warn('Azure App Configuration connection string not provided. Feature flags and config will be disabled.');
./azure/lib/azure-app-config.ts:51:        this.client = new AppConfigurationClient(this.connectionString, new DefaultAzureCredential());
./azure/lib/azure-app-config.ts:53:        console.warn('Invalid Azure App Configuration connection string format');
./azure/lib/azure-app-config.ts:57:      console.error('Failed to initialize Azure App Configuration client:', error);
./azure/lib/azure-app-config.ts:58:      console.error('üí° Hint: Ensure AZURE_APPCONFIG_CONNECTION_STRING is properly set');
./azure/lib/azure-app-config.ts:79:      console.warn('Azure App Configuration client not initialized');
./azure/lib/azure-app-config.ts:89:      console.log(`Fetching configuration from Azure App Configuration (label: ${this.label})`);
./azure/lib/azure-app-config.ts:133:      console.error('Failed to fetch configuration from Azure App Configuration:', error);
./azure/lib/azure-app-config.ts:302:// Singleton instance for Azure Functions
./azure/lib/azure-app-config.ts:303:let appConfigService: AzureAppConfigService | null = null;
./azure/lib/azure-app-config.ts:306: * Get or create the Azure App Configuration service instance
./azure/lib/azure-app-config.ts:308:export function getAppConfigService(connectionString?: string, label?: string): AzureAppConfigService {
./azure/lib/azure-app-config.ts:313:    appConfigService = new AzureAppConfigService(connectionString, configLabel);
./azure/lib/azure-app-config.ts:347:    'AZURE_REGION',
./azure/lib/azure-app-config.ts:357:export { AzureAppConfigService };
./azure/lib/services/azure-openai-service.test.ts:1:import { AzureOpenAIService } from './azure-openai-service';
./azure/lib/services/azure-openai-service.test.ts:3:// Mock the Azure OpenAI client
./azure/lib/services/azure-openai-service.test.ts:5:  AzureOpenAI: jest.fn().mockImplementation(() => ({
./azure/lib/services/azure-openai-service.test.ts:20:// Mock the fetchAzureSecrets function
./azure/lib/services/azure-openai-service.test.ts:21:jest.mock('../../../lib/azure-config-browser', () => ({
./azure/lib/services/azure-openai-service.test.ts:22:  fetchAzureSecrets: jest.fn().mockResolvedValue({
./azure/lib/services/azure-openai-service.test.ts:23:    azureOpenAIKey: 'mock-key',
./azure/lib/services/azure-openai-service.test.ts:24:    azureOpenAIEndpoint: 'mock-endpoint',
./azure/lib/services/azure-openai-service.test.ts:25:    azureOpenAIDeployment: 'mock-deployment'
./azure/lib/services/azure-openai-service.test.ts:29:describe('AzureOpenAIService - Preliminary Questions Flow', () => {
./azure/lib/services/azure-openai-service.test.ts:30:  let service: AzureOpenAIService;
./azure/lib/services/azure-openai-service.test.ts:33:    service = new AzureOpenAIService();
./azure/lib/services/test-preliminary-tracking.js:4:const { AzureOpenAIService } = require('./azure-openai-service.ts');
./azure/lib/services/test-preliminary-tracking.js:10:    azureOpenAIKey: 'test-key',
./azure/lib/services/test-preliminary-tracking.js:11:    azureOpenAIEndpoint: 'test-endpoint',
./azure/lib/services/test-preliminary-tracking.js:12:    azureOpenAIDeployment: 'test-deployment'
./azure/lib/services/test-preliminary-tracking.js:19:  const service = new AzureOpenAIService();
./azure/lib/services/queue-service.js:1:const { QueueServiceClient } = require('@azure/storage-queue');
./azure/lib/services/queue-service.js:2:const { DefaultAzureCredential } = require('@azure/identity');
./azure/lib/services/queue-service.js:20:        const connectionString = process.env.AzureWebJobsStorage;
./azure/lib/services/queue-service.js:22:            throw new Error('AzureWebJobsStorage connection string is required');
./azure/lib/services/automation-logs.js:20:            functionName: process.env.AZURE_FUNCTIONS_NAME || 'unknown',
./azure/lib/services/test-question-generator.js:8:const { AzureOpenAIService } = require('./azure-openai-service.ts');
./azure/lib/services/test-question-generator.js:10:// Mock Azure credentials for testing
./azure/lib/services/test-question-generator.js:14:    azureOpenAIKey: 'test-key',
./azure/lib/services/test-question-generator.js:15:    azureOpenAIEndpoint: 'test-endpoint',
./azure/lib/services/test-question-generator.js:16:    azureOpenAIDeployment: 'test-deployment'
./azure/lib/services/test-question-generator.js:21:class MockAzureOpenAIService extends AzureOpenAIService {
./azure/lib/services/test-question-generator.js:63:    console.log('‚úÖ Mock Azure OpenAI Service initialized');
./azure/lib/services/test-question-generator.js:72:  const service = new MockAzureOpenAIService();
./azure/lib/services/test-preliminary-flow.js:2: * Manual test script for AzureOpenAIService preliminary questions flow
./azure/lib/services/test-preliminary-flow.js:6:// Mock implementation of AzureOpenAIService for testing
./azure/lib/services/test-preliminary-flow.js:7:class MockAzureOpenAIService {
./azure/lib/services/test-preliminary-flow.js:111:  const service = new MockAzureOpenAIService();
./azure/lib/services/azure-openai-service.ts:1:import { AzureOpenAI } from 'openai';
./azure/lib/services/azure-openai-service.ts:2:import { fetchAzureSecrets } from '../../../lib/azure-config-browser';
./azure/lib/services/azure-openai-service.ts:34:export class AzureOpenAIService {
./azure/lib/services/azure-openai-service.ts:35:  private client: AzureOpenAI | null = null;
./azure/lib/services/azure-openai-service.ts:58:   * Initialize the Azure OpenAI service
./azure/lib/services/azure-openai-service.ts:62:      const secrets = await fetchAzureSecrets();
./azure/lib/services/azure-openai-service.ts:64:      if (!secrets.azureOpenAIKey || !secrets.azureOpenAIEndpoint || !secrets.azureOpenAIDeployment) {
./azure/lib/services/azure-openai-service.ts:65:        console.warn('‚ö†Ô∏è Azure OpenAI credentials not available');
./azure/lib/services/azure-openai-service.ts:69:      this.client = new AzureOpenAI({
./azure/lib/services/azure-openai-service.ts:70:        apiKey: secrets.azureOpenAIKey,
./azure/lib/services/azure-openai-service.ts:71:        endpoint: secrets.azureOpenAIEndpoint,
./azure/lib/services/azure-openai-service.ts:72:        deployment: secrets.azureOpenAIDeployment,
./azure/lib/services/azure-openai-service.ts:78:      this.modelDeployment = secrets.azureOpenAIDeployment;
./azure/lib/services/azure-openai-service.ts:81:      console.log('‚úÖ Azure OpenAI Service initialized');
./azure/lib/services/azure-openai-service.ts:84:      console.error('‚ùå Failed to initialize Azure OpenAI Service:', error);
./azure/lib/services/azure-openai-service.ts:196:      throw new Error('Azure OpenAI Service not initialized');
./azure/lib/services/azure-openai-service.ts:248:      throw new Error('Azure OpenAI Service not initialized');
./azure/lib/services/azure-openai-service.ts:377:      throw new Error('Azure OpenAI Service not initialized');
./azure/lib/services/azure-openai-service.ts:501:      throw new Error('Azure OpenAI Service not initialized');
./azure/lib/services/azure-openai-service.ts:529:      throw new Error('Azure OpenAI Service not initialized');
./azure/lib/services/azure-openai-service.ts:585:    console.log('üßπ Azure OpenAI Service disposed');
./azure/lib/services/azure-openai-service.ts:590:export const azureOpenAIService = new AzureOpenAIService();
./azure/lib/services/azure-speech-service.ts:1:import * as SpeechSDK from 'microsoft-cognitiveservices-speech-sdk';
./azure/lib/services/azure-speech-service.ts:2:import { fetchAzureSecrets } from '../../../lib/azure-config-browser';
./azure/lib/services/azure-speech-service.ts:16:export class AzureSpeechService {
./azure/lib/services/azure-speech-service.ts:23:   * Initialize the Azure Speech Service
./azure/lib/services/azure-speech-service.ts:27:      const secrets = await fetchAzureSecrets();
./azure/lib/services/azure-speech-service.ts:30:        console.warn('‚ö†Ô∏è Azure Speech credentials not available');
./azure/lib/services/azure-speech-service.ts:42:      console.log('‚úÖ Azure Speech Service initialized');
./azure/lib/services/azure-speech-service.ts:45:      console.error('‚ùå Failed to initialize Azure Speech Service:', error);
./azure/lib/services/azure-speech-service.ts:58:      console.error('‚ùå Azure Speech Service not initialized');
./azure/lib/services/azure-speech-service.ts:126:      console.error('‚ùå Azure Speech Service not initialized');
./azure/lib/services/azure-speech-service.ts:194:    console.log('üßπ Azure Speech Service disposed');
./azure/lib/services/azure-speech-service.ts:199:export const azureSpeechService = new AzureSpeechService();
./azure/lib/azure-config.ts:1:import { DefaultAzureCredential } from '@azure/identity';
./azure/lib/azure-config.ts:2:import { SecretClient } from '@azure/keyvault-secrets';
./azure/lib/azure-config.ts:4:// Azure Key Vault configuration
./azure/lib/azure-config.ts:5:const AZURE_KEY_VAULT_URI = process.env.AZURE_KEY_VAULT_URI || 'https://prepbettr-keyvault-083.vault.azure.net/';
./azure/lib/azure-config.ts:7:interface AzureSecrets {
./azure/lib/azure-config.ts:10:  azureOpenAIKey: string;
./azure/lib/azure-config.ts:11:  azureOpenAIEndpoint: string;
./azure/lib/azure-config.ts:12:  azureOpenAIDeployment: string;
./azure/lib/azure-config.ts:13:  azureOpenAIGpt35Deployment?: string; // gpt-35-turbo deployment
./azure/lib/azure-config.ts:14:  azureOpenAIGpt4oDeployment?: string; // gpt-4o deployment
./azure/lib/azure-config.ts:15:  azureStorageAccountName?: string; // Azure Storage Account Name
./azure/lib/azure-config.ts:16:  azureStorageAccountKey?: string; // Azure Storage Account Key
./azure/lib/azure-config.ts:17:  azureFormRecognizerEndpoint?: string; // Azure Form Recognizer Endpoint
./azure/lib/azure-config.ts:18:  azureFormRecognizerKey?: string; // Azure Form Recognizer Key
./azure/lib/azure-config.ts:21:let cachedSecrets: AzureSecrets | null = null;
./azure/lib/azure-config.ts:24: * Initialize Azure Key Vault client
./azure/lib/azure-config.ts:27:  if (!AZURE_KEY_VAULT_URI) {
./azure/lib/azure-config.ts:28:    throw new Error('AZURE_KEY_VAULT_URI environment variable is required');
./azure/lib/azure-config.ts:32:    const credential = new DefaultAzureCredential();
./azure/lib/azure-config.ts:33:    return new SecretClient(AZURE_KEY_VAULT_URI, credential);
./azure/lib/azure-config.ts:35:    console.error('‚ùå Failed to create DefaultAzureCredential:', error);
./azure/lib/azure-config.ts:42: * Fetch secrets from Azure Key Vault
./azure/lib/azure-config.ts:44:export async function fetchAzureSecrets(): Promise<AzureSecrets> {
./azure/lib/azure-config.ts:51:    console.log('üîë Fetching secrets from Azure Key Vault...');
./azure/lib/azure-config.ts:55:    const [speechKey, speechEndpoint, azureOpenAIKey, azureOpenAIEndpoint, azureOpenAIDeployment, azureOpenAIGpt35, azureOpenAIGpt4o, storageAccountName, storageAccountKey, formRecognizerEndpoint, formRecognizerKey] = await Promise.all([
./azure/lib/azure-config.ts:58:      client.getSecret('azure-openai-key'),
./azure/lib/azure-config.ts:59:      client.getSecret('azure-openai-endpoint'),
./azure/lib/azure-config.ts:60:      client.getSecret('azure-openai-deployment'),
./azure/lib/azure-config.ts:61:      client.getSecret('azure-openai-gpt35-deployment').catch(() => null), // Optional
./azure/lib/azure-config.ts:62:      client.getSecret('azure-openai-gpt4o-deployment').catch(() => null),  // Optional
./azure/lib/azure-config.ts:63:      client.getSecret('azure-storage-account-name').catch(() => null), // Optional
./azure/lib/azure-config.ts:64:      client.getSecret('azure-storage-account-key').catch(() => null), // Optional
./azure/lib/azure-config.ts:65:      client.getSecret('azure-form-recognizer-endpoint').catch(() => null), // Optional
./azure/lib/azure-config.ts:66:      client.getSecret('azure-form-recognizer-key').catch(() => null) // Optional
./azure/lib/azure-config.ts:69:    if (!speechKey.value || !speechEndpoint.value || !azureOpenAIKey.value || !azureOpenAIEndpoint.value || !azureOpenAIDeployment.value) {
./azure/lib/azure-config.ts:70:      throw new Error('One or more required secrets are missing from Azure Key Vault');
./azure/lib/azure-config.ts:76:      azureOpenAIKey: azureOpenAIKey.value,
./azure/lib/azure-config.ts:77:      azureOpenAIEndpoint: azureOpenAIEndpoint.value,
./azure/lib/azure-config.ts:78:      azureOpenAIDeployment: azureOpenAIDeployment.value,
./azure/lib/azure-config.ts:79:      azureOpenAIGpt35Deployment: azureOpenAIGpt35?.value || 'gpt-35-turbo',
./azure/lib/azure-config.ts:80:      azureOpenAIGpt4oDeployment: azureOpenAIGpt4o?.value || 'gpt-4o',
./azure/lib/azure-config.ts:81:      azureStorageAccountName: storageAccountName?.value,
./azure/lib/azure-config.ts:82:      azureStorageAccountKey: storageAccountKey?.value,
./azure/lib/azure-config.ts:83:      azureFormRecognizerEndpoint: formRecognizerEndpoint?.value,
./azure/lib/azure-config.ts:84:      azureFormRecognizerKey: formRecognizerKey?.value
./azure/lib/azure-config.ts:87:    console.log('‚úÖ Azure secrets loaded successfully');
./azure/lib/azure-config.ts:91:    console.error('‚ùå Failed to fetch Azure secrets:', error);
./azure/lib/azure-config.ts:98:      azureOpenAIKey: process.env.AZURE_OPENAI_KEY || '',
./azure/lib/azure-config.ts:99:      azureOpenAIEndpoint: process.env.AZURE_OPENAI_ENDPOINT || '',
./azure/lib/azure-config.ts:100:      azureOpenAIDeployment: process.env.AZURE_OPENAI_DEPLOYMENT || '',
./azure/lib/azure-config.ts:101:      azureOpenAIGpt35Deployment: process.env.AZURE_OPENAI_GPT35_DEPLOYMENT || 'gpt-35-turbo',
./azure/lib/azure-config.ts:102:      azureOpenAIGpt4oDeployment: process.env.AZURE_OPENAI_GPT4O_DEPLOYMENT || 'gpt-4o',
./azure/lib/azure-config.ts:103:      azureStorageAccountName: process.env.AZURE_STORAGE_ACCOUNT_NAME,
./azure/lib/azure-config.ts:104:      azureStorageAccountKey: process.env.AZURE_STORAGE_ACCOUNT_KEY,
./azure/lib/azure-config.ts:105:      azureFormRecognizerEndpoint: process.env.AZURE_FORM_RECOGNIZER_ENDPOINT,
./azure/lib/azure-config.ts:106:      azureFormRecognizerKey: process.env.AZURE_FORM_RECOGNIZER_KEY
./azure/lib/azure-config.ts:109:    if (!fallbackSecrets.speechKey || !fallbackSecrets.azureOpenAIKey) {
./azure/lib/azure-config.ts:119: * Initialize environment variables from Azure Key Vault
./azure/lib/azure-config.ts:122:export async function initializeAzureEnvironment(): Promise<void> {
./azure/lib/azure-config.ts:124:    const secrets = await fetchAzureSecrets();
./azure/lib/azure-config.ts:129:    process.env.AZURE_OPENAI_KEY = secrets.azureOpenAIKey;
./azure/lib/azure-config.ts:130:    process.env.AZURE_OPENAI_ENDPOINT = secrets.azureOpenAIEndpoint;
./azure/lib/azure-config.ts:131:    process.env.AZURE_OPENAI_DEPLOYMENT = secrets.azureOpenAIDeployment;
./azure/lib/azure-config.ts:132:    process.env.AZURE_OPENAI_GPT35_DEPLOYMENT = secrets.azureOpenAIGpt35Deployment;
./azure/lib/azure-config.ts:133:    process.env.AZURE_OPENAI_GPT4O_DEPLOYMENT = secrets.azureOpenAIGpt4oDeployment;
./azure/lib/azure-config.ts:135:    // Set Azure OpenAI keys for public environment
./azure/lib/azure-config.ts:136:    process.env.NEXT_PUBLIC_AZURE_OPENAI_API_KEY = secrets.azureOpenAIKey;
./azure/lib/azure-config.ts:137:    process.env.NEXT_PUBLIC_AZURE_OPENAI_ENDPOINT = secrets.azureOpenAIEndpoint;
./azure/lib/azure-config.ts:138:    process.env.NEXT_PUBLIC_AZURE_OPENAI_DEPLOYMENT = secrets.azureOpenAIDeployment;
./azure/lib/azure-config.ts:139:    process.env.NEXT_PUBLIC_AZURE_OPENAI_GPT35_DEPLOYMENT = secrets.azureOpenAIGpt35Deployment;
./azure/lib/azure-config.ts:140:    process.env.NEXT_PUBLIC_AZURE_OPENAI_GPT4O_DEPLOYMENT = secrets.azureOpenAIGpt4oDeployment;
./azure/lib/azure-config.ts:142:    console.log('üåü Azure environment initialized successfully');
./azure/lib/azure-config.ts:144:    console.error('‚ùå Failed to initialize Azure environment:', error);
./azure/lib/azure-config.ts:150: * Get current Azure configuration (for debugging)
./azure/lib/azure-config.ts:152:export function getAzureConfig() {
./azure/lib/azure-config.ts:154:    keyVaultUri: AZURE_KEY_VAULT_URI,
./azure/lib/azure-config.ts:159:      azureOpenAIKey: !!process.env.AZURE_OPENAI_KEY,
./azure/lib/azure-config.ts:160:      azureOpenAIEndpoint: !!process.env.AZURE_OPENAI_ENDPOINT,
./azure/lib/azure-config.ts:161:      azureOpenAIDeployment: !!process.env.AZURE_OPENAI_DEPLOYMENT,
./azure/lib/azure-config.ts:162:      azureOpenAIGpt35Deployment: !!process.env.AZURE_OPENAI_GPT35_DEPLOYMENT,
./azure/lib/azure-config.ts:163:      azureOpenAIGpt4oDeployment: !!process.env.AZURE_OPENAI_GPT4O_DEPLOYMENT
./azure/lib/azure-config.ts:166:      default: process.env.AZURE_OPENAI_DEPLOYMENT,
./azure/lib/azure-config.ts:167:      gpt35Turbo: process.env.AZURE_OPENAI_GPT35_DEPLOYMENT || 'gpt-35-turbo',
./azure/lib/azure-config.ts:168:      gpt4o: process.env.AZURE_OPENAI_GPT4O_DEPLOYMENT || 'gpt-4o'
./azure/jobSearchWorker/index.js:1:const { app } = require('@azure/functions');
./azure/jobSearchWorker/index.js:5:const { fetchAzureSecrets } = require('../lib/azure-config');
./azure/jobSearchWorker/index.js:8:// Azure OpenAI client - will be initialized from Key Vault secrets
./azure/jobSearchWorker/index.js:9:let azureOpenAIClient = null;
./azure/jobSearchWorker/index.js:12: * Initialize Azure OpenAI client
./azure/jobSearchWorker/index.js:14:async function initializeAzureOpenAI() {
./azure/jobSearchWorker/index.js:15:    if (azureOpenAIClient) {
./azure/jobSearchWorker/index.js:16:        return azureOpenAIClient;
./azure/jobSearchWorker/index.js:20:        const secrets = await fetchAzureSecrets();
./azure/jobSearchWorker/index.js:22:        if (!secrets.azureOpenAIKey || !secrets.azureOpenAIEndpoint) {
./azure/jobSearchWorker/index.js:23:            console.warn('‚ö†Ô∏è Azure OpenAI credentials not available, using fallback');
./azure/jobSearchWorker/index.js:27:        azureOpenAIClient = new OpenAI({
./azure/jobSearchWorker/index.js:28:            apiKey: secrets.azureOpenAIKey,
./azure/jobSearchWorker/index.js:29:            baseURL: `${secrets.azureOpenAIEndpoint}/openai/deployments/${secrets.azureOpenAIDeployment}`,
./azure/jobSearchWorker/index.js:32:                'api-key': secrets.azureOpenAIKey,
./azure/jobSearchWorker/index.js:36:        console.log('‚úÖ Azure OpenAI client initialized for job search worker');
./azure/jobSearchWorker/index.js:37:        return azureOpenAIClient;
./azure/jobSearchWorker/index.js:39:        console.error('‚ùå Failed to initialize Azure OpenAI client:', error);
./azure/jobSearchWorker/index.js:47:    connection: 'AzureWebJobsStorage',
./azure/jobSearchWorker/index.js:120:            // Re-throw to trigger Azure Functions retry logic
./azure/jobSearchWorker/index.js:253:        const client = await initializeAzureOpenAI();
./azure/jobSearchWorker/index.js:256:            console.warn('Azure OpenAI client not available, using fallback relevancy calculation');
./azure/jobSearchWorker/index.js:293:        console.error('Error calculating job relevancy with Azure OpenAI:', error);
./azure/test-voice-function.js:2:const sdk = require('microsoft-cognitiveservices-speech-sdk');
./azure/test-voice-function.js:6:    console.log('Testing Azure Function components...\n');
./azure/test-voice-function.js:22:            messages: [{ role: 'user', content: 'Say "Hello from Azure OpenAI!"' }],
./azure/test-voice-function.js:43:        const testText = 'Hello from Azure Speech Service!';
./azure/HttpTrigger1/index.js:2:const sdk = require('microsoft-cognitiveservices-speech-sdk');
./azure/HttpTrigger1/index.js:5:// In-memory session storage (in production, use Azure Table Storage or Cosmos DB)
./azure/HttpTrigger1/index.js:16:            apiKey: process.env.AZURE_OPENAI_KEY,
./azure/HttpTrigger1/index.js:17:            baseURL: `${process.env.AZURE_OPENAI_ENDPOINT}/openai/deployments/${process.env.AZURE_OPENAI_DEPLOYMENT}`,
./azure/HttpTrigger1/index.js:20:                'api-key': process.env.AZURE_OPENAI_KEY,
./azure/createSessionCookie/index.js:62:      method: 'azure-function'
./azure/verifyToken/index.js:4: * Token verification Azure Function
./azure/verifyToken/index.js:76:      verificationMethod: 'azure-function',
./azure/test-azure-integration.js:4: * Azure Integration Test
./azure/test-azure-integration.js:6: * This script tests Azure Key Vault and App Configuration connectivity
./azure/test-azure-integration.js:10:const { fetchAzureSecrets, getAzureConfig, initializeAzureEnvironment } = require('./lib/azure-config.ts');
./azure/test-azure-integration.js:11:const { getAppConfigService } = require('./lib/azure-app-config.ts');
./azure/test-azure-integration.js:13:async function testAzureIntegration() {
./azure/test-azure-integration.js:14:  console.log('üß™ Testing Azure Integration');
./azure/test-azure-integration.js:19:  console.log('1Ô∏è‚É£ Testing Azure Key Vault connectivity...');
./azure/test-azure-integration.js:21:    const secrets = await fetchAzureSecrets();
./azure/test-azure-integration.js:26:    const required = ['speechKey', 'azureOpenAIKey', 'azureOpenAIEndpoint'];
./azure/test-azure-integration.js:43:    await initializeAzureEnvironment();
./azure/test-azure-integration.js:44:    const config = getAzureConfig();
./azure/test-azure-integration.js:58:  console.log('3Ô∏è‚É£ Testing Azure App Configuration...');
./azure/test-azure-integration.js:79:    const secrets = await fetchAzureSecrets();
./azure/test-azure-integration.js:80:    if (secrets.azureOpenAIKey && secrets.azureOpenAIEndpoint) {
./azure/test-azure-integration.js:82:      console.log(`   Endpoint: ${secrets.azureOpenAIEndpoint}`);
./azure/test-azure-integration.js:83:      console.log(`   Deployment: ${secrets.azureOpenAIDeployment}`);
./azure/test-azure-integration.js:92:  console.log('üèÅ Azure integration test completed');
./azure/test-azure-integration.js:97:  testAzureIntegration().catch(console.error);
./azure/test-azure-integration.js:100:module.exports = { testAzureIntegration };
./constants/index.ts:29:  azure: "azure",
./constants/index.ts:99:// Azure-based interviewer configuration
./constants/index.ts:100:export const azureInterviewer = {
./next.config.js:3:  // Enable standalone output for Azure App Service deployment
./next.config.js:26:        hostname: '*.azurewebsites.net',
./next.config.js:37:    '@azure/cosmos',
./next.config.js:38:    '@azure/storage-blob', 
./next.config.js:39:    '@azure/keyvault-secrets',
./next.config.js:40:    '@azure/identity',
./next.config.js:41:    '@azure/app-configuration',
./next.config.js:49:  // Azure App Service configuration
./next.config.js:52:  // Custom webpack config for Azure packages
./next.config.js:55:      // Optimize server-side Azure packages
./next.config.js:58:        '@azure/msal-node': 'commonjs @azure/msal-node',
./next.config.js:59:        '@azure/cosmos': 'commonjs @azure/cosmos',
./next.config.js:60:        '@azure/storage-blob': 'commonjs @azure/storage-blob',
./next.config.js:61:        '@azure/keyvault-secrets': 'commonjs @azure/keyvault-secrets',
./tests/integration/resume-tailor-parity.js:4: * Simple integration test to verify Azure OpenAI resume tailoring functionality
./tests/integration/resume-tailor-parity.js:62:‚Ä¢ Work with Azure cloud services and implement CI/CD pipelines
./tests/integration/resume-tailor-parity.js:70:‚Ä¢ Experience with Azure cloud platform and DevOps practices
./tests/integration/resume-tailor-parity.js:77:‚Ä¢ Experience with Azure Functions, App Service, and Azure DevOps
./tests/integration/resume-tailor-parity.js:84:  console.log('üß™ Testing Azure OpenAI Resume Tailoring...\n');
./tests/integration/resume-tailor-parity.js:132:        'azure', 'cloud', 'typescript', 'microservices', 
./tests/integration/staging-functions.spec.ts:4:const STAGING_BASE_URL = process.env.STAGING_BASE_URL || 'https://prepbettr-staging.azurewebsites.net';
./tests/integration/staging-functions.spec.ts:196:      // Wait for microphone access and Azure Speech Service connection
./tests/resume-tailor-endpoint.test.ts:8:  test('Azure OpenAI integration requirements', () => {
./tests/resume-tailor-endpoint.test.ts:9:    // Test that verifies Azure OpenAI is being used instead of Google Generative AI
./tests/load/queue-throughput.js:46:const BASE_URL = __ENV.BASE_URL || 'https://prepbettr-staging.azurewebsites.net';
./tests/azure-services-health.test.ts:2:import { azureOpenAIService } from '../lib/services/azure-openai-service';
./tests/azure-services-health.test.ts:3:import { azureSpeechService } from '../azure/lib/services/azure-speech-service';
./tests/azure-services-health.test.ts:4:import { fetchAzureSecrets, getAzureConfig } from '../lib/azure-config';
./tests/azure-services-health.test.ts:5:import { fetchAzureSecrets as fetchBrowserSecrets } from '../lib/azure-config-browser';
./tests/azure-services-health.test.ts:7:describe('Azure Services Health Check', () => {
./tests/azure-services-health.test.ts:9:    it('should have valid API version for Azure OpenAI', async () => {
./tests/azure-services-health.test.ts:10:      // Valid API versions for Azure OpenAI as of 2024
./tests/azure-services-health.test.ts:21:        '../lib/services/azure-openai-service.ts',
./tests/azure-services-health.test.ts:22:        '../lib/services/azure-openai.ts',
./tests/azure-services-health.test.ts:23:        '../azure/lib/services/azure-openai-service.ts',
./tests/azure-services-health.test.ts:43:    it('should validate Azure OpenAI deployment name matches available models', async () => {
./tests/azure-services-health.test.ts:44:      const secrets = await fetchAzureSecrets();
./tests/azure-services-health.test.ts:46:      // Common Azure OpenAI deployment names
./tests/azure-services-health.test.ts:55:      const deployment = secrets.azureOpenAIDeployment;
./tests/azure-services-health.test.ts:68:      const secrets = await fetchAzureSecrets();
./tests/azure-services-health.test.ts:81:      // Common Azure regions
./tests/azure-services-health.test.ts:99:      const serverSecrets = await fetchAzureSecrets();
./tests/azure-services-health.test.ts:103:      expect(serverSecrets.azureOpenAIKey).toBeDefined();
./tests/azure-services-health.test.ts:104:      expect(browserSecrets.azureOpenAIKey).toBeDefined();
./tests/azure-services-health.test.ts:106:      expect(serverSecrets.azureOpenAIEndpoint).toBeDefined();
./tests/azure-services-health.test.ts:107:      expect(browserSecrets.azureOpenAIEndpoint).toBeDefined();
./tests/azure-services-health.test.ts:109:      expect(serverSecrets.azureOpenAIDeployment).toBeDefined();
./tests/azure-services-health.test.ts:110:      expect(browserSecrets.azureOpenAIDeployment).toBeDefined();
./tests/azure-services-health.test.ts:119:      azureOpenAIService.dispose();
./tests/azure-services-health.test.ts:120:      azureSpeechService.dispose();
./tests/azure-services-health.test.ts:123:    it('should successfully initialize Azure OpenAI Service', async () => {
./tests/azure-services-health.test.ts:124:      const initialized = await azureOpenAIService.initialize();
./tests/azure-services-health.test.ts:126:      if (process.env.CI && !process.env.AZURE_OPENAI_KEY) {
./tests/azure-services-health.test.ts:128:        console.warn('‚ö†Ô∏è Skipping in CI without Azure credentials');
./tests/azure-services-health.test.ts:132:        expect(azureOpenAIService.isReady()).toBe(true);
./tests/azure-services-health.test.ts:133:        console.log('‚úÖ Azure OpenAI Service initialized successfully');
./tests/azure-services-health.test.ts:137:    it('should successfully initialize Azure Speech Service', async () => {
./tests/azure-services-health.test.ts:138:      const initialized = await azureSpeechService.initialize();
./tests/azure-services-health.test.ts:140:      if (process.env.CI && !process.env.AZURE_SPEECH_KEY) {
./tests/azure-services-health.test.ts:142:        console.warn('‚ö†Ô∏è Skipping in CI without Azure credentials');
./tests/azure-services-health.test.ts:146:        expect(azureSpeechService.isReady()).toBe(true);
./tests/azure-services-health.test.ts:147:        console.log('‚úÖ Azure Speech Service initialized successfully');
./tests/azure-services-health.test.ts:154:      delete process.env.AZURE_OPENAI_KEY;
./tests/azure-services-health.test.ts:155:      delete process.env.AZURE_OPENAI_ENDPOINT;
./tests/azure-services-health.test.ts:157:      const initialized = await azureOpenAIService.initialize();
./tests/azure-services-health.test.ts:159:      expect(azureOpenAIService.isReady()).toBe(false);
./tests/azure-services-health.test.ts:169:      const secrets = await fetchAzureSecrets();
./tests/azure-services-health.test.ts:173:      const deployment = secrets.azureOpenAIDeployment;
./tests/azure-services-health.test.ts:194:    it('should have valid Azure endpoints', async () => {
./tests/azure-services-health.test.ts:195:      const secrets = await fetchAzureSecrets();
./tests/azure-services-health.test.ts:198:      expect(secrets.azureOpenAIEndpoint).toMatch(
./tests/azure-services-health.test.ts:199:        /^https:\/\/[a-z0-9-]+\.openai\.azure\.com\/?$/i
./tests/azure-services-health.test.ts:207:      console.log('‚úÖ All Azure endpoints have valid formats');
./tests/azure-services-health.test.ts:212:      const azureOpenAI = await import('../lib/services/azure-openai-service');
./tests/azure-services-health.test.ts:215:      expect(azureOpenAI.azureOpenAIService).toHaveProperty('retryWithBackoff');
./tests/azure-services-health.test.ts:225:        expect(window.AZURE_OPENAI_KEY).toBeUndefined();
./tests/azure-services-health.test.ts:226:        expect(window.AZURE_SPEECH_KEY).toBeUndefined();
./tests/azure-services-health.test.ts:234:      const secrets = await fetchAzureSecrets();
./tests/azure-services-health.test.ts:236:      expect(secrets.azureOpenAIKey).toBeTruthy();
./tests/azure-services-health.test.ts:237:      expect(secrets.azureOpenAIKey.length).toBeGreaterThan(20);
./tests/azure-services-health.test.ts:248:  it('should return health status from /api/azure-health', async () => {
./tests/azure-services-health.test.ts:255:      const response = await fetch('http://localhost:3000/api/azure-health');
./tests/api/resume/tailor/simple.test.js:10:jest.mock('@/lib/services/azure-openai-service', () => ({
./tests/api/resume/tailor/simple.test.js:11:  azureOpenAIService: {
./tests/api/resume/tailor/simple.test.js:64:    const { azureOpenAIService } = require('@/lib/services/azure-openai-service');
./tests/api/resume/tailor/simple.test.js:77:    azureOpenAIService.initialize.mockResolvedValue(true);
./tests/api/resume/tailor/simple.test.js:78:    azureOpenAIService.tailorResume.mockResolvedValue('Tailored resume content');
./tests/api/resume/tailor/api.test.ts:4:import { azureOpenAIService } from '@/lib/services/azure-openai-service';
./tests/api/resume/tailor/api.test.ts:8:jest.mock('@/lib/services/azure-openai-service');
./tests/api/resume/tailor/api.test.ts:12:  let mockAzureOpenAIService;
./tests/api/resume/tailor/api.test.ts:17:    mockAzureOpenAIService = azureOpenAIService;
./tests/api/resume/tailor/api.test.ts:110:  describe('Azure OpenAI Service Integration', () => {
./tests/api/resume/tailor/api.test.ts:121:      - Cloud platforms (Azure/AWS)
./tests/api/resume/tailor/api.test.ts:132:    it('should return 503 when Azure OpenAI service is not available', async () => {
./tests/api/resume/tailor/api.test.ts:134:      const originalModule = jest.requireActual('@/lib/services/azure-openai-service');
./tests/api/resume/tailor/api.test.ts:135:      jest.doMock('@/lib/services/azure-openai-service', () => ({
./tests/api/resume/tailor/api.test.ts:137:        azureOpenAIService: {
./tests/api/resume/tailor/api.test.ts:138:          ...originalModule.azureOpenAIService,
./tests/api/resume/tailor/api.test.ts:153:        error: 'Azure OpenAI service is not available. Please try again later.',
./tests/api/resume/tailor/api.test.ts:161:        Experience: 5 years in full-stack development with Azure cloud platforms
./tests/api/resume/tailor/api.test.ts:162:        Skills: JavaScript, React, Node.js, Python, Azure, API development
./tests/api/resume/tailor/api.test.ts:165:      mockAzureOpenAIService.initialize.mockResolvedValue(true);
./tests/api/resume/tailor/api.test.ts:166:      mockAzureOpenAIService.tailorResume.mockResolvedValue(tailoredResumeContent);
./tests/api/resume/tailor/api.test.ts:181:      expect(mockAzureOpenAIService.tailorResume).toHaveBeenCalledWith(
./tests/api/resume/tailor/api.test.ts:191:      mockAzureOpenAIService.initialize.mockResolvedValue(true);
./tests/api/resume/tailor/api.test.ts:192:      mockAzureOpenAIService.tailorResume.mockRejectedValue(rateLimitError);
./tests/api/resume/tailor/api.test.ts:212:      mockAzureOpenAIService.initialize.mockResolvedValue(true);
./tests/api/resume/tailor/api.test.ts:213:      mockAzureOpenAIService.tailorResume.mockRejectedValue(authError);
./tests/api/resume/tailor/api.test.ts:225:        error: 'Authentication failed with Azure OpenAI service.',
./tests/api/resume/tailor/api.test.ts:233:      mockAzureOpenAIService.initialize.mockResolvedValue(true);
./tests/api/resume/tailor/api.test.ts:234:      mockAzureOpenAIService.tailorResume.mockRejectedValue(serverError);
./tests/api/resume/tailor/api.test.ts:246:        error: 'Azure OpenAI service is temporarily unavailable. Please try again later.',
./tests/e2e/resume-url-extraction.test.ts:29:// Mock Azure OpenAI Service
./tests/e2e/resume-url-extraction.test.ts:30:jest.mock('@/lib/services/azure-openai-service', () => ({
./tests/e2e/resume-url-extraction.test.ts:31:  azureOpenAIService: {
./tests/e2e/resume-url-extraction.test.ts:408:    test('should handle Azure OpenAI service unavailability', async () => {
./tests/e2e/resume-url-extraction.test.ts:409:      const mockAzureService = require('@/lib/services/azure-openai-service').azureOpenAIService;
./tests/e2e/resume-url-extraction.test.ts:410:      mockAzureService.isReady.mockReturnValueOnce(false);
./portals/linkedin.ts:2:import { getAzureTokenService, AzureADConfig } from '../lib/services/azure-token-service';
./portals/linkedin.ts:58:  private tokenService = getAzureTokenService();
./portals/linkedin.ts:61:  private azureAdConfig: AzureADConfig | null = null;
./portals/linkedin.ts:76:   * Initialize LinkedIn portal with Azure AD configuration
./portals/linkedin.ts:79:    this.azureAdConfig = await this.tokenService.getAzureADConfig('linkedin');
./portals/linkedin.ts:80:    if (!this.azureAdConfig) {
./portals/linkedin.ts:81:      throw new Error('LinkedIn Azure AD configuration not found. Please configure OAuth app first.');
./portals/linkedin.ts:89:    if (!this.azureAdConfig) {
./portals/linkedin.ts:95:      client_id: this.azureAdConfig.clientId,
./portals/linkedin.ts:96:      redirect_uri: this.azureAdConfig.redirectUri,
./portals/linkedin.ts:98:      scope: this.azureAdConfig.scopes.join(' '),
./portals/linkedin.ts:108:    if (!this.azureAdConfig) {
./portals/linkedin.ts:121:          redirect_uri: this.azureAdConfig.redirectUri,
./portals/linkedin.ts:122:          client_id: this.azureAdConfig.clientId,
./portals/linkedin.ts:123:          client_secret: this.azureAdConfig.clientSecret,
./portals/linkedin.ts:153:    if (!this.azureAdConfig) {
./portals/linkedin.ts:157:    const accessToken = await this.tokenService.getValidAccessToken('linkedin', userId, this.azureAdConfig);
./portals/linkedin.ts:187:    if (!this.azureAdConfig) {
./portals/linkedin.ts:191:    const accessToken = await this.tokenService.getValidAccessToken('linkedin', userId, this.azureAdConfig);
./portals/linkedin.ts:261:    if (!this.azureAdConfig) {
./portals/linkedin.ts:265:    const accessToken = await this.tokenService.getValidAccessToken('linkedin', userId, this.azureAdConfig);
./portals/linkedin.ts:306:    if (!this.azureAdConfig) {
./portals/linkedin.ts:310:    const accessToken = await this.tokenService.getValidAccessToken('linkedin', userId, this.azureAdConfig);
./portals/wellfound.ts:2:import { getAzureTokenService, AzureADConfig } from '../lib/services/azure-token-service';
./portals/wellfound.ts:80:  private tokenService = getAzureTokenService();
./portals/wellfound.ts:83:  private azureAdConfig: AzureADConfig | null = null;
./portals/wellfound.ts:98:   * Initialize Wellfound portal with Azure AD configuration
./portals/wellfound.ts:101:    this.azureAdConfig = await this.tokenService.getAzureADConfig('wellfound');
./portals/wellfound.ts:102:    if (!this.azureAdConfig) {
./portals/wellfound.ts:103:      throw new Error('Wellfound Azure AD configuration not found. Please configure OAuth app first.');
./portals/wellfound.ts:111:    if (!this.azureAdConfig) {
./portals/wellfound.ts:117:      client_id: this.azureAdConfig.clientId,
./portals/wellfound.ts:118:      redirect_uri: this.azureAdConfig.redirectUri,
./portals/wellfound.ts:120:      scope: this.azureAdConfig.scopes.join(' '),
./portals/wellfound.ts:130:    if (!this.azureAdConfig) {
./portals/wellfound.ts:143:          redirect_uri: this.azureAdConfig.redirectUri,
./portals/wellfound.ts:144:          client_id: this.azureAdConfig.clientId,
./portals/wellfound.ts:145:          client_secret: this.azureAdConfig.clientSecret,
./portals/wellfound.ts:175:    if (!this.azureAdConfig) {
./portals/wellfound.ts:179:    const accessToken = await this.tokenService.getValidAccessToken('wellfound', userId, this.azureAdConfig);
./portals/wellfound.ts:209:    if (!this.azureAdConfig) {
./portals/wellfound.ts:213:    const accessToken = await this.tokenService.getValidAccessToken('wellfound', userId, this.azureAdConfig);
./portals/wellfound.ts:266:    if (!this.azureAdConfig) {
./portals/wellfound.ts:270:    const accessToken = await this.tokenService.getValidAccessToken('wellfound', userId, this.azureAdConfig);
./portals/wellfound.ts:310:    if (!this.azureAdConfig) {
./portals/wellfound.ts:314:    const accessToken = await this.tokenService.getValidAccessToken('wellfound', userId, this.azureAdConfig);
./portals/wellfound.ts:345:    if (!this.azureAdConfig) {
./portals/wellfound.ts:349:    const accessToken = await this.tokenService.getValidAccessToken('wellfound', userId, this.azureAdConfig);
./portals/wellfound.ts:486:    if (!this.azureAdConfig) {
./portals/wellfound.ts:490:    const accessToken = await this.tokenService.getValidAccessToken('wellfound', userId, this.azureAdConfig);
./portals/wellfound.ts:520:    if (!this.azureAdConfig) {
./portals/wellfound.ts:524:    const accessToken = await this.tokenService.getValidAccessToken('wellfound', userId, this.azureAdConfig);
./components/Agent.tsx:8:import { azureInterviewer } from "@/constants";
./components/Agent.tsx:407:     * Convert text to speech using Azure Speech Services and play it
./components/Agent.tsx:477:            console.log('üéôÔ∏è Starting Azure-powered voice interview...');
./components/AutoApplyDashboard.tsx:173:      // TODO: Implement actual job analysis with Azure OpenAI
./components/ProfileForm.tsx:429:                      'Go', 'Rust', 'Swift', 'Kotlin', 'Docker', 'Kubernetes', 'AWS', 'Azure', 'GCP', 'Git',
./components/admin/FeatureFlagManager.tsx:33:    autoApplyAzure: UserTargetingService.ROLLOUT_CONFIGS.autoApplyAzure.percentage,
./components/admin/FeatureFlagManager.tsx:134:            {/* Auto Apply Azure */}
./components/admin/FeatureFlagManager.tsx:138:                  Auto Apply Azure
./components/admin/FeatureFlagManager.tsx:139:                  <Badge variant={flags?.autoApplyAzure ? "default" : "secondary"}>
./components/admin/FeatureFlagManager.tsx:140:                    {flags?.autoApplyAzure ? "Active" : "Inactive"}
./components/admin/FeatureFlagManager.tsx:149:                      {rolloutPercentages.autoApplyAzure}%
./components/admin/FeatureFlagManager.tsx:153:                    value={rolloutPercentages.autoApplyAzure} 
./components/admin/FeatureFlagManager.tsx:162:                    onClick={() => decreaseRollout('autoApplyAzure')}
./components/admin/FeatureFlagManager.tsx:171:                    onClick={() => increaseRollout('autoApplyAzure')}
./components/admin/FeatureFlagManager.tsx:186:                      value={rolloutPercentages.autoApplyAzure}
./components/admin/FeatureFlagManager.tsx:189:                        autoApplyAzure: parseInt(e.target.value) || 0 
./components/admin/FeatureFlagManager.tsx:195:                      onClick={() => updateRolloutPercentage('autoApplyAzure', rolloutPercentages.autoApplyAzure)}
./components/PdfUploadButton.tsx:37:    storageProvider?: 'azure' | 'firebase';
./scripts/backfill-mock-interviews.ts:6: * This script seeds the first 20 Azure-generated mock interviews to Firestore
./scripts/backfill-mock-interviews.ts:16: *   - AZURE_OPENAI_API_KEY
./scripts/backfill-mock-interviews.ts:17: *   - AZURE_OPENAI_ENDPOINT
./scripts/backfill-mock-interviews.ts:18: *   - AZURE_OPENAI_DEPLOYMENT
./scripts/backfill-mock-interviews.ts:22: *   - USE_AZURE_MOCK (feature flag)
./scripts/backfill-mock-interviews.ts:29:import { initializeAzureEnvironment } from '../lib/azure-config';
./scripts/backfill-mock-interviews.ts:42:const USE_AZURE_MOCK = process.env.USE_AZURE_MOCK === 'true';
./scripts/backfill-mock-interviews.ts:100:          azureGenerated: true,
./scripts/backfill-mock-interviews.ts:172:    if (!USE_AZURE_MOCK) {
./scripts/backfill-mock-interviews.ts:173:      console.log('‚ö†Ô∏è USE_AZURE_MOCK feature flag is not enabled');
./scripts/backfill-mock-interviews.ts:174:      console.log('Set USE_AZURE_MOCK=true in environment to enable');
./scripts/backfill-mock-interviews.ts:180:      'AZURE_OPENAI_API_KEY',
./scripts/backfill-mock-interviews.ts:181:      'AZURE_OPENAI_ENDPOINT',
./scripts/backfill-mock-interviews.ts:182:      'AZURE_OPENAI_DEPLOYMENT',
./scripts/backfill-mock-interviews.ts:196:    // Initialize Azure environment
./scripts/backfill-mock-interviews.ts:197:    console.log('üîß Initializing Azure environment...');
./scripts/backfill-mock-interviews.ts:198:    await initializeAzureEnvironment();
./scripts/test-azure-function.js:5:const AZURE_FUNCTION_KEY = process.env.AZURE_FUNCTION_KEY;
./scripts/test-azure-function.js:7:if (!AZURE_FUNCTION_KEY || AZURE_FUNCTION_KEY === 'YOUR_NEW_AZURE_FUNCTION_KEY_HERE') {
./scripts/test-azure-function.js:8:    console.error('‚ùå Please set AZURE_FUNCTION_KEY in your .env.local file');
./scripts/test-azure-function.js:10:    console.log('1. Go to Azure Portal');
./scripts/test-azure-function.js:14:    console.log('5. Replace YOUR_NEW_AZURE_FUNCTION_KEY_HERE in .env.local with the actual key');
./scripts/test-azure-function.js:18:console.log('‚úÖ Azure Function Key is set');
./scripts/test-azure-function.js:19:console.log('üß™ Running Azure Function tests...');
./scripts/test-azure-function.js:22:require('../azure/test-functions.js');
./scripts/monitor-production-metrics.js:5: * Monitors Application Insights & Azure Front Door metrics for:
./scripts/monitor-production-metrics.js:10:import { DefaultAzureCredential } from '@azure/identity';
./scripts/monitor-production-metrics.js:11:import { LogsQueryClient, MetricsQueryClient, MetricsQueryResult } from '@azure/monitor-query';
./scripts/monitor-production-metrics.js:32:    this.logsQueryClient = new LogsQueryClient(new DefaultAzureCredential());
./scripts/monitor-production-metrics.js:33:    this.metricsQueryClient = new MetricsQueryClient(new DefaultAzureCredential());
./scripts/monitor-production-metrics.js:36:      subscriptionId: process.env.AZURE_SUBSCRIPTION_ID || '',
./scripts/monitor-production-metrics.js:37:      frontDoorProfileName: process.env.AZURE_FRONTDOOR_PROFILE_NAME || 'prepbettr-frontdoor',
./scripts/monitor-production-metrics.js:38:      resourceGroupName: process.env.AZURE_RESOURCE_GROUP_NAME || 'prepbettr-rg'
./scripts/monitor-production-metrics.js:130:   * Check Azure Front Door metrics for error rates and latency
./scripts/monitor-production-metrics.js:168:        console.log(`üìä Azure Front Door Error Rate: ${(errorRate * 100).toFixed(2)}% (4XX: ${avg4xx.toFixed(2)}%, 5XX: ${avg5xx.toFixed(2)}%)`);
./scripts/monitor-production-metrics.js:175:        console.log(`üìä Azure Front Door Avg Latency: ${avgLatency.toFixed(2)}ms`);
./scripts/monitor-production-metrics.js:186:      console.error('‚ùå Failed to query Azure Front Door metrics:', error);
./scripts/monitor-production-metrics.js:237:      // Check Azure Front Door metrics
./scripts/monitor-production-metrics.js:238:      console.log('üåê Checking Azure Front Door...');
./scripts/monitor-production-metrics.js:242:        alerts.push(`üö® Azure Front Door error rate ${(frontDoorMetrics.errorRate * 100).toFixed(2)}% exceeds threshold of ${this.thresholds.errorRateThreshold * 100}%`);
./scripts/monitor-production-metrics.js:246:        alerts.push(`üö® Azure Front Door latency ${frontDoorMetrics.avgLatency.toFixed(2)}ms exceeds threshold of ${this.thresholds.latencyThreshold}ms`);
./scripts/debug-voice-interview.js:214:    // Analyze azure-openai-service.ts
./scripts/debug-voice-interview.js:215:    log('Analyzing azure-openai-service.ts...', 'debug');
./scripts/debug-voice-interview.js:216:    const openaiPath = path.join(__dirname, '..', 'lib', 'services', 'azure-openai-service.ts');
./scripts/debug-voice-interview.js:222:        file: 'lib/services/azure-openai-service.ts',
./scripts/debug-voice-interview.js:231:        file: 'lib/services/azure-openai-service.ts',
./scripts/debug-voice-interview.js:245:        message: 'Audio processing with Azure Speech - ensure proper transcription',
./scripts/debug-voice-interview.js:246:        code: 'const recognitionResult = await azureSpeechService.processAudioWithAzureSpeech(audioBuffer);'
./scripts/debug-voice-interview.js:253:        file: 'lib/services/azure-openai-service.ts',
./scripts/debug-voice-interview.js:259:        description: 'Add detailed logging in sendAudioToBackend and verify Azure Speech Service response handling',
./scripts/debug-voice-interview.js:297:            source: 'lib/services/azure-openai-service.ts',
./scripts/debug-voice-interview.js:298:            target: 'lib/services/azure-openai-service.debug.ts'
./scripts/deployment-checklist.ts:87:      // Azure Core Services (Required)
./scripts/deployment-checklist.ts:88:      'AZURE_KEY_VAULT_URL',
./scripts/deployment-checklist.ts:89:      'AZURE_COSMOS_ENDPOINT',
./scripts/deployment-checklist.ts:90:      'AZURE_COSMOS_KEY',
./scripts/deployment-checklist.ts:91:      'AZURE_STORAGE_CONNECTION_STRING',
./scripts/deployment-checklist.ts:93:      // Azure AI Services (Required)
./scripts/deployment-checklist.ts:94:      'AZURE_OPENAI_ENDPOINT',
./scripts/deployment-checklist.ts:95:      'AZURE_OPENAI_API_KEY',
./scripts/deployment-checklist.ts:96:      'AZURE_OPENAI_DEPLOYMENT',
./scripts/deployment-checklist.ts:97:      'AZURE_SPEECH_KEY',
./scripts/deployment-checklist.ts:98:      'AZURE_SPEECH_REGION',
./scripts/deployment-checklist.ts:99:      'AZURE_SPEECH_ENDPOINT',
./scripts/deployment-checklist.ts:234:  async testAzureConnectivity(): Promise<void> {
./scripts/deployment-checklist.ts:235:    console.log('\n‚òÅÔ∏è Testing Azure service connectivity...');
./scripts/deployment-checklist.ts:238:      // Check Azure OpenAI
./scripts/deployment-checklist.ts:239:      if (process.env.AZURE_OPENAI_ENDPOINT && process.env.AZURE_OPENAI_KEY) {
./scripts/deployment-checklist.ts:240:        const response = await fetch(`${process.env.AZURE_OPENAI_ENDPOINT}/openai/deployments?api-version=2024-02-15-preview`, {
./scripts/deployment-checklist.ts:242:            'api-key': process.env.AZURE_OPENAI_KEY
./scripts/deployment-checklist.ts:248:            name: 'Azure OpenAI Connectivity',
./scripts/deployment-checklist.ts:250:            message: 'Successfully connected to Azure OpenAI'
./scripts/deployment-checklist.ts:254:            name: 'Azure OpenAI Connectivity',
./scripts/deployment-checklist.ts:256:            message: `Azure OpenAI returned status ${response.status}`
./scripts/deployment-checklist.ts:261:          name: 'Azure OpenAI Connectivity',
./scripts/deployment-checklist.ts:263:          message: 'Azure OpenAI credentials not configured'
./scripts/deployment-checklist.ts:268:        name: 'Azure Service Connectivity',
./scripts/deployment-checklist.ts:270:        message: 'Could not test Azure connectivity',
./scripts/deployment-checklist.ts:361:      await this.testAzureConnectivity();
./scripts/voice-system-test.ts:8:import { azureSpeechService } from '../lib/services/azure-speech-service';
./scripts/voice-system-test.ts:9:import { azureOpenAIService } from '../lib/services/azure-openai-service';
./scripts/voice-system-test.ts:64:    const speechResult = await this.runTest('Azure Speech Service Initialization', async () => {
./scripts/voice-system-test.ts:65:      const initialized = await azureSpeechService.initialize();
./scripts/voice-system-test.ts:67:      return { ready: azureSpeechService.isReady() };
./scripts/voice-system-test.ts:71:    const openaiResult = await this.runTest('Azure OpenAI Service Initialization', async () => {
./scripts/voice-system-test.ts:72:      const initialized = await azureOpenAIService.initialize();
./scripts/voice-system-test.ts:74:      return { ready: azureOpenAIService.isReady() };
./scripts/voice-system-test.ts:88:        const audioData = await azureSpeechService.synthesizeSpeech(testCase.text, {
./scripts/voice-system-test.ts:110:        azureOpenAIService.setInterviewContext({ type, maxQuestions: 3 });
./scripts/voice-system-test.ts:112:        const startResponse = await azureOpenAIService.startInterviewConversation();
./scripts/voice-system-test.ts:113:        const processResponse = await azureOpenAIService.processUserResponse(
./scripts/voice-system-test.ts:131:      azureOpenAIService.clearConversation();
./scripts/voice-system-test.ts:134:      azureOpenAIService.setInterviewContext({
./scripts/voice-system-test.ts:141:      const start = await azureOpenAIService.startInterviewConversation();
./scripts/voice-system-test.ts:155:        const aiResponse = await azureOpenAIService.processUserResponse(userResponse);
./scripts/voice-system-test.ts:168:      const summary = await azureOpenAIService.generateInterviewSummary();
./scripts/voice-system-test.ts:189:        test: () => azureOpenAIService.processUserResponse('')
./scripts/voice-system-test.ts:193:        test: () => azureOpenAIService.processUserResponse('a'.repeat(5000))
./scripts/voice-system-test.ts:197:        test: () => azureSpeechService.synthesizeSpeech('Hello! @#$%^&*() Testing... üéâ')
./scripts/voice-system-test.ts:221:          await azureOpenAIService.processUserResponse("Yes, I understand the question.");
./scripts/voice-system-test.ts:230:          await azureSpeechService.synthesizeSpeech("This is a test message for performance measurement.");
./scripts/voice-system-test.ts:287:      console.log('  - Check Azure service credentials and connectivity');
./scripts/fetch-build-config.ts:4: * Build-Time Configuration Fetcher for Azure App Configuration
./scripts/fetch-build-config.ts:6: * This script fetches configuration values from Azure App Configuration
./scripts/fetch-build-config.ts:12:import { AppConfigurationClient, ConfigurationSetting } from '@azure/app-configuration';
./scripts/fetch-build-config.ts:13:import { DefaultAzureCredential } from '@azure/identity';
./scripts/fetch-build-config.ts:31:    const connStr = connectionString || process.env.AZURE_APPCONFIG_CONNECTION_STRING;
./scripts/fetch-build-config.ts:34:      throw new Error('AZURE_APPCONFIG_CONNECTION_STRING environment variable is required');
./scripts/fetch-build-config.ts:42:      this.client = new AppConfigurationClient(connStr, new DefaultAzureCredential());
./scripts/fetch-build-config.ts:47:   * Fetch all configuration values from Azure App Configuration
./scripts/fetch-build-config.ts:50:    console.log(`üîÑ Fetching configuration from Azure App Configuration (label: ${this.label})...`);
./scripts/fetch-build-config.ts:118:      '# Auto-generated from Azure App Configuration',
./scripts/fetch-build-config.ts:256: * Fallback configuration for when Azure App Configuration is not available
./scripts/fetch-build-config.ts:289:      autoApplyAzure: {
./scripts/fetch-build-config.ts:291:        description: 'Enable Azure OpenAI-powered automatic job application feature'
./scripts/fetch-build-config.ts:319:    if (process.env.AZURE_APPCONFIG_CONNECTION_STRING) {
./scripts/fetch-build-config.ts:320:      // Fetch from Azure App Configuration
./scripts/fetch-build-config.ts:325:      console.log('‚ö†Ô∏è AZURE_APPCONFIG_CONNECTION_STRING not set, using fallback configuration');
./scripts/fetch-build-config.ts:329:    const fetcher = new BuildTimeConfigFetcher(process.env.AZURE_APPCONFIG_CONNECTION_STRING, label);
./scripts/test-feature-flags.ts:41:  autoApplyAzure: {
./scripts/test-feature-flags.ts:43:    featureName: 'autoApplyAzure'
./scripts/test-feature-flags.ts:58:  const autoApplyConfig = ROLLOUT_CONFIGS.autoApplyAzure;
./scripts/test-feature-flags.ts:74:  console.log(`   Auto Apply Azure (${autoApplyConfig.percentage}%): ${autoApplyResult}`);
./scripts/test-feature-flags.ts:97:  console.log(`   Auto Apply Azure: ${autoApplyCount}/${sampleSize} (${autoApplyPercentage.toFixed(1)}%)`);
./scripts/test-feature-flags.ts:104:  const originalPercentage = ROLLOUT_CONFIGS.autoApplyAzure.percentage;
./scripts/test-feature-flags.ts:106:  ROLLOUT_CONFIGS.autoApplyAzure.percentage = 10;
./scripts/test-feature-flags.ts:107:  console.log(`   Updated autoApplyAzure to 10%`);
./scripts/test-feature-flags.ts:109:  const updatedResult = userTargeting.isUserInRollout(testUserId, ROLLOUT_CONFIGS.autoApplyAzure);
./scripts/test-feature-flags.ts:113:  ROLLOUT_CONFIGS.autoApplyAzure.percentage = originalPercentage;
./scripts/test-feature-flags.ts:114:  console.log(`   Reset autoApplyAzure back to ${originalPercentage}%\n`);
./scripts/test-feature-flags.ts:151:    const result = userTargeting.isUserInRollout(anonId, ROLLOUT_CONFIGS.autoApplyAzure);
./scripts/check-azure-health.ts:4: * Azure Services Health Check Script
./scripts/check-azure-health.ts:8: * 2. Deployment names match available Azure OpenAI models
./scripts/check-azure-health.ts:13:import { azureOpenAIService } from '../lib/services/azure-openai-service';
./scripts/check-azure-health.ts:14:import { azureSpeechService } from '../azure/lib/services/azure-speech-service';
./scripts/check-azure-health.ts:15:import { fetchAzureSecrets, getAzureConfig } from '../lib/azure-config';
./scripts/check-azure-health.ts:16:import { fetchAzureSecrets as fetchBrowserSecrets } from '../lib/azure-config-browser';
./scripts/check-azure-health.ts:42:  log('Checking Azure OpenAI API versions...', 'info');
./scripts/check-azure-health.ts:52:    'lib/services/azure-openai-service.ts',
./scripts/check-azure-health.ts:53:    'lib/services/azure-openai.ts',
./scripts/check-azure-health.ts:54:    'azure/lib/services/azure-openai-service.ts',
./scripts/check-azure-health.ts:86:  log('Checking Azure OpenAI deployment names...', 'info');
./scripts/check-azure-health.ts:89:    const secrets = await fetchAzureSecrets();
./scripts/check-azure-health.ts:90:    const deployment = secrets.azureOpenAIDeployment;
./scripts/check-azure-health.ts:119:    const secrets = await fetchAzureSecrets();
./scripts/check-azure-health.ts:157:  // Test Azure OpenAI Service
./scripts/check-azure-health.ts:159:    const initialized = await azureOpenAIService.initialize();
./scripts/check-azure-health.ts:160:    if (initialized && azureOpenAIService.isReady()) {
./scripts/check-azure-health.ts:161:      log('Azure OpenAI Service initialized successfully', 'success');
./scripts/check-azure-health.ts:164:      log('Azure OpenAI Service initialization returned false', 'warning');
./scripts/check-azure-health.ts:167:    log(`Azure OpenAI Service initialization failed: ${(error as any).message}`, 'error');
./scripts/check-azure-health.ts:169:    azureOpenAIService.dispose();
./scripts/check-azure-health.ts:172:  // Test Azure Speech Service
./scripts/check-azure-health.ts:174:    const initialized = await azureSpeechService.initialize();
./scripts/check-azure-health.ts:175:    if (initialized && azureSpeechService.isReady()) {
./scripts/check-azure-health.ts:176:      log('Azure Speech Service initialized successfully', 'success');
./scripts/check-azure-health.ts:179:      log('Azure Speech Service initialization returned false', 'warning');
./scripts/check-azure-health.ts:182:    log(`Azure Speech Service initialization failed: ${(error as any).message}`, 'error');
./scripts/check-azure-health.ts:184:    azureSpeechService.dispose();
./scripts/check-azure-health.ts:194:    const response = await fetch('http://localhost:3000/api/azure-health');
./scripts/check-azure-health.ts:213:  console.log(`${colors.cyan}Azure Services Health Check${colors.reset}`);
./scripts/test-azure-app-config.ts:2: * Test Script for Azure App Configuration Integration
./scripts/test-azure-app-config.ts:4: * This script tests the Azure App Configuration service to ensure
./scripts/test-azure-app-config.ts:7: * Usage: npx tsx scripts/test-azure-app-config.ts
./scripts/test-azure-app-config.ts:10:import { azureAppConfigService } from '@/lib/services/azure-app-config';
./scripts/test-azure-app-config.ts:13:async function testAzureAppConfigService() {
./scripts/test-azure-app-config.ts:14:  console.log('üß™ Testing Azure App Configuration Service\n');
./scripts/test-azure-app-config.ts:19:    const healthStatus = await azureAppConfigService.getHealthStatus();
./scripts/test-azure-app-config.ts:23:      console.log('‚ùå Service is not healthy. Check your Azure App Configuration settings.');
./scripts/test-azure-app-config.ts:31:    const autoApplyFlag = await azureAppConfigService.getFeatureFlag('autoApplyAzure');
./scripts/test-azure-app-config.ts:32:    console.log(`   autoApplyAzure: ${autoApplyFlag}`);
./scripts/test-azure-app-config.ts:34:    const portalIntegrationFlag = await azureAppConfigService.getFeatureFlag('portalIntegration');
./scripts/test-azure-app-config.ts:40:    const allFlags = await azureAppConfigService.getAllFeatureFlags();
./scripts/test-azure-app-config.ts:46:    const cachedFlags = azureAppConfigService.getCachedFlags();
./scripts/test-azure-app-config.ts:51:    const refreshedFlags = await azureAppConfigService.refreshFeatureFlags();
./scripts/test-azure-app-config.ts:59:      const rolloutPercentage = await azureAppConfigService.getConfigValue('rolloutPercentage_autoApplyAzure');
./scripts/test-azure-app-config.ts:60:      console.log(`   rolloutPercentage_autoApplyAzure: ${rolloutPercentage}`);
./scripts/test-azure-app-config.ts:62:      const maxApplications = await azureAppConfigService.getConfigValue('maxApplicationsPerDay');
./scripts/test-azure-app-config.ts:72:    const isReady = azureAppConfigService.isReady();
./scripts/test-azure-app-config.ts:77:    console.error('‚ùå Error testing Azure App Configuration service:', error);
./scripts/test-azure-app-config.ts:94:    const isAutoApplyEnabled = await featureFlagsService.isAutoApplyAzureEnabled();
./scripts/test-azure-app-config.ts:95:    console.log(`   isAutoApplyAzureEnabled: ${isAutoApplyEnabled}`);
./scripts/test-azure-app-config.ts:109:    const specificFlag = await featureFlagsService.getFeatureFlag('autoApplyAzure');
./scripts/test-azure-app-config.ts:110:    console.log(`   autoApplyAzure with targeting: ${specificFlag}`);
./scripts/test-azure-app-config.ts:122:    const allSettings = await azureAppConfigService.listAllSettings();
./scripts/test-azure-app-config.ts:126:      console.log('   npx tsx scripts/setup-azure-app-config.ts\n');
./scripts/test-azure-app-config.ts:152:    await azureAppConfigService.getAllFeatureFlags();
./scripts/test-azure-app-config.ts:178:  console.log('üöÄ Azure App Configuration Integration Test Suite\n');
./scripts/test-azure-app-config.ts:181:  // Test Azure App Configuration Service
./scripts/test-azure-app-config.ts:182:  await testAzureAppConfigService();
./scripts/test-azure-app-config.ts:202:  console.log('1. If any tests failed, check your Azure App Configuration setup');
./scripts/test-azure-app-config.ts:210:  testAzureAppConfigService,
./scripts/find-firebase-function-calls.js:4: * Firebase to Azure Functions Migration Scanner
./scripts/find-firebase-function-calls.js:7: * that may need to be migrated to Azure Functions.
./scripts/find-firebase-function-calls.js:37:  'azure/node_modules',
./scripts/find-firebase-function-calls.js:160:            suggestion: 'Replace with azureFunctionsClient.verifyToken(token)',
./scripts/find-firebase-function-calls.js:169:            suggestion: 'Replace with azureFunctionsClient.createSessionCookie(idToken)',
./scripts/find-firebase-function-calls.js:178:            suggestion: 'Replace with azureFunctionsClient.requestGDPRDeletion(userId, userEmail, reason)',
./scripts/find-firebase-function-calls.js:187:            suggestion: 'Review and consider migrating to Azure Functions',
./scripts/find-firebase-function-calls.js:261:  console.log('üìñ For migration guide, see: scripts/firebase-to-azure-migration-guide.md');
./scripts/test-resume-processing.ts:4:import { azureBlobStorage } from '../lib/services/azure-blob-storage';
./scripts/test-resume-processing.ts:5:import { azureFormRecognizer } from '../lib/services/azure-form-recognizer';
./scripts/test-resume-processing.ts:10:  azureBlobStorageInit: boolean;
./scripts/test-resume-processing.ts:11:  azureFormRecognizerInit: boolean;
./scripts/test-resume-processing.ts:20:    azureBlobStorageInit: false,
./scripts/test-resume-processing.ts:21:    azureFormRecognizerInit: false,
./scripts/test-resume-processing.ts:29:    // Test 1: Azure Blob Storage Initialization
./scripts/test-resume-processing.ts:30:    console.log('1Ô∏è‚É£ Testing Azure Blob Storage initialization...');
./scripts/test-resume-processing.ts:32:      results.azureBlobStorageInit = await azureBlobStorage.initialize();
./scripts/test-resume-processing.ts:33:      console.log(`   ‚úÖ Azure Blob Storage: ${results.azureBlobStorageInit ? 'Ready' : 'Not configured (will use Firebase fallback)'}`);
./scripts/test-resume-processing.ts:35:      console.log(`   ‚ö†Ô∏è Azure Blob Storage: Error - ${error}`);
./scripts/test-resume-processing.ts:38:    // Test 2: Azure Form Recognizer Initialization
./scripts/test-resume-processing.ts:39:    console.log('\n2Ô∏è‚É£ Testing Azure Form Recognizer initialization...');
./scripts/test-resume-processing.ts:41:      results.azureFormRecognizerInit = await azureFormRecognizer.initialize();
./scripts/test-resume-processing.ts:42:      console.log(`   ‚úÖ Azure Form Recognizer: ${results.azureFormRecognizerInit ? 'Ready' : 'Not configured (will use OpenAI fallback)'}`);
./scripts/test-resume-processing.ts:44:      console.log(`   ‚ö†Ô∏è Azure Form Recognizer: Error - ${error}`);
./scripts/test-resume-processing.ts:147:    console.log(`Azure Blob Storage: ${results.azureBlobStorageInit ? '‚úÖ Ready' : '‚ö†Ô∏è Fallback to Firebase'}`);
./scripts/test-resume-processing.ts:148:    console.log(`Azure Form Recognizer: ${results.azureFormRecognizerInit ? '‚úÖ Ready' : '‚ö†Ô∏è Fallback to OpenAI'}`);
./scripts/setup-azure-app-config.ts:2: * Azure App Configuration Setup Script
./scripts/setup-azure-app-config.ts:4: * This script helps setup the required feature flags and configuration values in Azure App Configuration.
./scripts/setup-azure-app-config.ts:5: * Run this after creating your Azure App Configuration instance.
./scripts/setup-azure-app-config.ts:7: * Usage: npx tsx scripts/setup-azure-app-config.ts
./scripts/setup-azure-app-config.ts:26:    key: 'autoApplyAzure',
./scripts/setup-azure-app-config.ts:28:    description: 'Enable Azure OpenAI-powered automatic job application feature for gradual rollout',
./scripts/setup-azure-app-config.ts:45:    key: 'rolloutPercentage_autoApplyAzure',
./scripts/setup-azure-app-config.ts:47:    description: 'Rollout percentage for autoApplyAzure feature (0-100)'
./scripts/setup-azure-app-config.ts:55:    key: 'errorBudget_autoApplyAzure',
./scripts/setup-azure-app-config.ts:57:    description: 'Error budget threshold for autoApplyAzure feature (0.0-1.0)'
./scripts/setup-azure-app-config.ts:71:function generateAzureCliCommands() {
./scripts/setup-azure-app-config.ts:72:  console.log('üîß Azure CLI Commands to Set Up App Configuration:');
./scripts/setup-azure-app-config.ts:76:  console.log('# 1. Login to Azure');
./scripts/setup-azure-app-config.ts:112:  console.log('# 1. Login to Azure');
./scripts/setup-azure-app-config.ts:153:const { AppConfigurationClient } = require('@azure/app-configuration');
./scripts/setup-azure-app-config.ts:157:  const client = new AppConfigurationClient(process.env.AZURE_APP_CONFIG_CONNECTION_STRING);
./scripts/setup-azure-app-config.ts:193:    console.log('üéâ Azure App Configuration setup complete!');
./scripts/setup-azure-app-config.ts:195:    console.error('‚ùå Error setting up Azure App Configuration:', error);
./scripts/setup-azure-app-config.ts:206:  console.log('üöÄ Azure App Configuration Setup for Feature Flags\n');
./scripts/setup-azure-app-config.ts:209:  console.log('1. Azure subscription with App Configuration service created');
./scripts/setup-azure-app-config.ts:210:  console.log('2. Azure CLI installed or PowerShell with Az module');
./scripts/setup-azure-app-config.ts:214:  console.log('# Azure App Configuration');
./scripts/setup-azure-app-config.ts:215:  console.log('AZURE_APP_CONFIG_CONNECTION_STRING=Endpoint=https://your-appconfig.azconfig.io;Id=...;Secret=...');
./scripts/setup-azure-app-config.ts:217:  console.log('AZURE_APP_CONFIG_ENDPOINT=https://your-appconfig.azconfig.io');
./scripts/setup-azure-app-config.ts:218:  console.log('# (with Azure managed identity for authentication)\n');
./scripts/setup-azure-app-config.ts:235:  console.log('Method 1: Azure CLI');
./scripts/setup-azure-app-config.ts:236:  generateAzureCliCommands();
./scripts/setup-azure-app-config.ts:249:  console.log('2. Update your .env files with the Azure App Config connection details');
./scripts/setup-azure-app-config.ts:266:  console.log('- Azure Portal: Monitor App Configuration usage and metrics\n');
./scripts/setup-azure-app-config.ts:269:  console.log('- Azure Portal: https://portal.azure.com > App Configuration');
./scripts/test-azure-openai.js:4: * Test script to validate Azure OpenAI deployment configuration
./scripts/test-azure-openai.js:27:    'AZURE_OPENAI_KEY',
./scripts/test-azure-openai.js:28:    'AZURE_OPENAI_ENDPOINT',
./scripts/test-azure-openai.js:29:    'AZURE_OPENAI_DEPLOYMENT',
./scripts/test-azure-openai.js:30:    'NEXT_PUBLIC_AZURE_OPENAI_API_KEY',
./scripts/test-azure-openai.js:31:    'NEXT_PUBLIC_AZURE_OPENAI_ENDPOINT',
./scripts/test-azure-openai.js:32:    'NEXT_PUBLIC_AZURE_OPENAI_DEPLOYMENT'
./scripts/test-azure-openai.js:54:    const { AzureOpenAI } = require('openai');
./scripts/test-azure-openai.js:55:    log('green', '‚úÖ AzureOpenAI import successful');
./scripts/test-azure-openai.js:57:    // Test Azure OpenAI client instantiation
./scripts/test-azure-openai.js:58:    if (process.env.AZURE_OPENAI_KEY && process.env.AZURE_OPENAI_ENDPOINT) {
./scripts/test-azure-openai.js:59:      const client = new AzureOpenAI({
./scripts/test-azure-openai.js:60:        apiKey: process.env.AZURE_OPENAI_KEY,
./scripts/test-azure-openai.js:61:        endpoint: process.env.AZURE_OPENAI_ENDPOINT,
./scripts/test-azure-openai.js:62:        deployment: process.env.AZURE_OPENAI_DEPLOYMENT || 'gpt-4o',
./scripts/test-azure-openai.js:65:      log('green', '‚úÖ AzureOpenAI client instantiation successful');
./scripts/test-azure-openai.js:137:  log('cyan', 'üöÄ Starting Azure OpenAI Deployment Test...\n');
./scripts/test-azure-openai.js:156:    log('green', '\nüéâ All tests passed! Azure OpenAI deployment should work correctly.');
./scripts/setup-remote-config.ts:19:    key: 'autoApplyAzure',
./scripts/setup-remote-config.ts:21:    description: 'Enable Azure OpenAI-powered automatic job application feature for gradual rollout',
./scripts/setup-azure-app-config-production.ts:4: * Azure App Configuration Production Setup Script
./scripts/setup-azure-app-config-production.ts:6: * This script sets up Azure App Configuration with production variables
./scripts/setup-azure-app-config-production.ts:9: * Usage: npm run setup:azure-app-config:production
./scripts/setup-azure-app-config-production.ts:12:import { AppConfigurationClient } from '@azure/app-configuration';
./scripts/setup-azure-app-config-production.ts:13:import { DefaultAzureCredential } from '@azure/identity';
./scripts/setup-azure-app-config-production.ts:51:  // Azure Services Configuration
./scripts/setup-azure-app-config-production.ts:52:  AZURE_REGION: 'East US',
./scripts/setup-azure-app-config-production.ts:72:  autoApplyAzure: {
./scripts/setup-azure-app-config-production.ts:74:    description: 'Enable Azure OpenAI-powered automatic job application feature',
./scripts/setup-azure-app-config-production.ts:107:class AzureAppConfigManager {
./scripts/setup-azure-app-config-production.ts:112:    this.connectionString = connectionString || process.env.AZURE_APPCONFIG_CONNECTION_STRING || '';
./scripts/setup-azure-app-config-production.ts:115:      throw new Error('AZURE_APPCONFIG_CONNECTION_STRING environment variable is required');
./scripts/setup-azure-app-config-production.ts:123:      this.client = new AppConfigurationClient(this.connectionString, new DefaultAzureCredential());
./scripts/setup-azure-app-config-production.ts:128:   * Set configuration values in Azure App Configuration
./scripts/setup-azure-app-config-production.ts:149:   * Set feature flags in Azure App Configuration
./scripts/setup-azure-app-config-production.ts:239: * Generate Azure CLI commands for manual setup
./scripts/setup-azure-app-config-production.ts:247:  console.log('export AZURE_APPCONFIG_CONNECTION_STRING="your-connection-string"');
./scripts/setup-azure-app-config-production.ts:252:    console.log(`az appconfig kv set --connection-string "$AZURE_APPCONFIG_CONNECTION_STRING" --key "${key}" --value "${value}" --label "production"`);
./scripts/setup-azure-app-config-production.ts:257:    console.log(`az appconfig feature set --connection-string "$AZURE_APPCONFIG_CONNECTION_STRING" --feature "${flagName}" --label "production" --enabled ${flagConfig.enabled} --description "${flagConfig.description}"`);
./scripts/setup-azure-app-config-production.ts:265:  console.log('üöÄ Azure App Configuration Production Setup');
./scripts/setup-azure-app-config-production.ts:271:    if (!process.env.AZURE_APPCONFIG_CONNECTION_STRING) {
./scripts/setup-azure-app-config-production.ts:272:      console.error('‚ùå AZURE_APPCONFIG_CONNECTION_STRING environment variable is required');
./scripts/setup-azure-app-config-production.ts:274:      console.log('export AZURE_APPCONFIG_CONNECTION_STRING="Endpoint=https://your-appconfig.azconfig.io;Id=...;Secret=..."');
./scripts/setup-azure-app-config-production.ts:280:    const manager = new AzureAppConfigManager();
./scripts/setup-azure-app-config-production.ts:293:    console.log('1. Add AZURE_APPCONFIG_CONNECTION_STRING to your Azure Function App settings');
./scripts/setup-azure-app-config-production.ts:308:export { PRODUCTION_CONFIG, PRODUCTION_FEATURE_FLAGS, AzureAppConfigManager };
./scripts/test-key-vault.js:3:const { DefaultAzureCredential } = require('@azure/identity');
./scripts/test-key-vault.js:4:const { SecretClient } = require('@azure/keyvault-secrets');
./scripts/test-key-vault.js:9:const AZURE_KEY_VAULT_URI = process.env.AZURE_KEY_VAULT_URI || 'https://pbVoiceVaultProd.vault.azure.net/';
./scripts/test-key-vault.js:12:  console.log('\nüîê Testing Azure Key Vault Connection');
./scripts/test-key-vault.js:14:  console.log(`Key Vault URI: ${AZURE_KEY_VAULT_URI}\n`);
./scripts/test-key-vault.js:18:    const credential = new DefaultAzureCredential();
./scripts/test-key-vault.js:19:    const client = new SecretClient(AZURE_KEY_VAULT_URI, credential);
./scripts/test-key-vault.js:21:    // List of expected secrets based on azure-config.ts
./scripts/test-key-vault.js:25:      'azure-openai-key',
./scripts/test-key-vault.js:26:      'azure-openai-endpoint',
./scripts/test-key-vault.js:27:      'azure-openai-deployment',
./scripts/test-key-vault.js:28:      'azure-openai-gpt35-deployment',
./scripts/test-key-vault.js:29:      'azure-openai-gpt4o-deployment',
./scripts/test-key-vault.js:30:      'azure-storage-account-name',
./scripts/test-key-vault.js:31:      'azure-storage-account-key',
./scripts/test-key-vault.js:32:      'azure-form-recognizer-endpoint',
./scripts/test-key-vault.js:33:      'azure-form-recognizer-key'
./scripts/test-key-vault.js:128:      'AZURE_OPENAI_API_KEY': process.env.AZURE_OPENAI_API_KEY,
./scripts/test-key-vault.js:129:      'AZURE_OPENAI_ENDPOINT': process.env.AZURE_OPENAI_ENDPOINT,
./scripts/test-key-vault.js:130:      'AZURE_OPENAI_DEPLOYMENT': process.env.AZURE_OPENAI_DEPLOYMENT,
./scripts/test-key-vault.js:132:      'AZURE_SPEECH_KEY': process.env.AZURE_SPEECH_KEY,
./scripts/test-key-vault.js:134:      'AZURE_SPEECH_REGION': process.env.AZURE_SPEECH_REGION
./scripts/test-key-vault.js:144:    console.error('\n‚ùå Failed to connect to Azure Key Vault:');
./scripts/test-key-vault.js:147:    if (error.message.includes('DefaultAzureCredential')) {
./scripts/test-key-vault.js:149:      console.log('  1. Make sure you are logged in to Azure CLI: az login');
./scripts/test-key-vault.js:151:      console.log('  3. Or use managed identity in Azure environment');
./scripts/monitor-mock-interview-usage.ts:8: * - Azure OpenAI token usage and costs
./scripts/monitor-mock-interview-usage.ts:30:const COST_PER_1K_TOKENS = 0.03; // Azure OpenAI pricing (adjust as needed)
./scripts/monitor-mock-interview-usage.ts:213:      if (process.env.USE_AZURE_MOCK === 'true') {
./scripts/monitor-mock-interview-usage.ts:218:      const flagDoc = await this.db.collection('featureFlags').doc('USE_AZURE_MOCK').get();
./scripts/monitor-mock-interview-usage.ts:324:      // - Azure Application Insights
./scripts/test-azure-openai-integration.ts:4: * Azure OpenAI Integration Test Script
./scripts/test-azure-openai-integration.ts:6: * This script tests the complete Azure OpenAI integration including:
./scripts/test-azure-openai-integration.ts:9: * - Prompt parity with Azure OpenAI
./scripts/test-azure-openai-integration.ts:13:import { initializeAzureEnvironment, getAzureConfig } from '../azure/lib/azure-config';
./scripts/test-azure-openai-integration.ts:14:import { azureOpenAIService } from '../lib/services/azure-openai-service';
./scripts/test-azure-openai-integration.ts:15:import { enhancedAzureOpenAIService } from '../lib/services/azure-openai-enhanced';
./scripts/test-azure-openai-integration.ts:16:import { AzureOpenAIAdapter } from '../lib/ai/azureOpenAI';
./scripts/test-azure-openai-integration.ts:25:  - Implemented CI/CD pipelines with Docker and Azure DevOps
./scripts/test-azure-openai-integration.ts:29:JavaScript, TypeScript, React, Node.js, Python, PostgreSQL, Azure, Docker`;
./scripts/test-azure-openai-integration.ts:38:- Cloud platform experience (Azure/AWS)
./scripts/test-azure-openai-integration.ts:41:You'll be working on our next-generation web platform using React, TypeScript, and Azure services.`;
./scripts/test-azure-openai-integration.ts:47:  skills: 'React, Node.js, TypeScript, PostgreSQL, Docker, Azure'
./scripts/test-azure-openai-integration.ts:58:class AzureOpenAITester {
./scripts/test-azure-openai-integration.ts:95:  async testAzureConfiguration(): Promise<any> {
./scripts/test-azure-openai-integration.ts:96:    // Test Azure configuration and Key Vault integration
./scripts/test-azure-openai-integration.ts:97:    await initializeAzureEnvironment();
./scripts/test-azure-openai-integration.ts:98:    const config = getAzureConfig();
./scripts/test-azure-openai-integration.ts:101:      throw new Error('Azure secrets not cached after initialization');
./scripts/test-azure-openai-integration.ts:108:    // Test standard Azure OpenAI service
./scripts/test-azure-openai-integration.ts:109:    const initialized = await azureOpenAIService.initialize();
./scripts/test-azure-openai-integration.ts:111:      throw new Error('Failed to initialize standard Azure OpenAI service');
./scripts/test-azure-openai-integration.ts:114:    if (!azureOpenAIService.isReady()) {
./scripts/test-azure-openai-integration.ts:115:      throw new Error('Standard Azure OpenAI service not ready');
./scripts/test-azure-openai-integration.ts:123:    const initialized = await enhancedAzureOpenAIService.initialize();
./scripts/test-azure-openai-integration.ts:125:      throw new Error('Failed to initialize enhanced Azure OpenAI service');
./scripts/test-azure-openai-integration.ts:128:    if (!enhancedAzureOpenAIService.isReady()) {
./scripts/test-azure-openai-integration.ts:129:      throw new Error('Enhanced Azure OpenAI service not ready');
./scripts/test-azure-openai-integration.ts:132:    const deployments = enhancedAzureOpenAIService.getAvailableDeployments();
./scripts/test-azure-openai-integration.ts:143:    const adapter = new AzureOpenAIAdapter();
./scripts/test-azure-openai-integration.ts:147:      throw new Error('Failed to initialize Azure OpenAI adapter');
./scripts/test-azure-openai-integration.ts:151:      throw new Error('Azure OpenAI adapter not ready');
./scripts/test-azure-openai-integration.ts:163:    const adapter = new AzureOpenAIAdapter();
./scripts/test-azure-openai-integration.ts:181:    const adapter = new AzureOpenAIAdapter();
./scripts/test-azure-openai-integration.ts:206:    const adapter = new AzureOpenAIAdapter();
./scripts/test-azure-openai-integration.ts:229:    const adapter = new AzureOpenAIAdapter();
./scripts/test-azure-openai-integration.ts:250:    // Test that prompts match Azure OpenAI format for consistency
./scripts/test-azure-openai-integration.ts:251:    const adapter = new AzureOpenAIAdapter();
./scripts/test-azure-openai-integration.ts:261:      temperatureMatches: true, // Enhanced service uses Azure OpenAI-matching defaults
./scripts/test-azure-openai-integration.ts:262:      maxTokensMatches: true,   // Enhanced service uses Azure OpenAI-matching defaults
./scripts/test-azure-openai-integration.ts:263:      promptFormatConsistent: true // Prompts match Azure OpenAI format exactly
./scripts/test-azure-openai-integration.ts:268:    console.log('üöÄ Starting Azure OpenAI Integration Tests\n');
./scripts/test-azure-openai-integration.ts:271:    await this.runTest('Azure Configuration & Key Vault', () => this.testAzureConfiguration());
./scripts/test-azure-openai-integration.ts:285:    await this.runTest('Prompt Parity with Azure OpenAI', () => this.testPromptParity());
./scripts/test-azure-openai-integration.ts:317:    console.log(`   ‚Ä¢ Azure Key Vault: ${configTest?.success ? '‚úÖ' : '‚ùå'}`);
./scripts/test-azure-openai-integration.ts:322:      console.log('\nüéâ All tests passed! Azure OpenAI integration is working correctly.');
./scripts/test-azure-openai-integration.ts:332:  const tester = new AzureOpenAITester();
./scripts/compare-env-variables.ts:44:  ['AZURE_SPEECH_KEY', 'speech-key'],
./scripts/compare-env-variables.ts:46:  ['AZURE_SPEECH_REGION', 'speech-region'],
./scripts/compare-env-variables.ts:48:  // Azure OpenAI
./scripts/compare-env-variables.ts:49:  ['AZURE_OPENAI_API_KEY', 'azure-openai-key'],
./scripts/compare-env-variables.ts:50:  ['AZURE_OPENAI_ENDPOINT', 'azure-openai-endpoint'],
./scripts/compare-env-variables.ts:51:  ['AZURE_OPENAI_DEPLOYMENT', 'azure-openai-deployment'],
./scripts/compare-env-variables.ts:52:  ['AZURE_OPENAI_GPT35_DEPLOYMENT', 'azure-openai-gpt35-deployment'],
./scripts/compare-env-variables.ts:53:  ['AZURE_OPENAI_GPT4O_DEPLOYMENT', 'azure-openai-gpt4o-deployment'],
./scripts/compare-env-variables.ts:55:  // Azure Storage
./scripts/compare-env-variables.ts:56:  ['AZURE_STORAGE_ACCOUNT_NAME', 'azure-storage-account-name'],
./scripts/compare-env-variables.ts:57:  ['AZURE_STORAGE_ACCOUNT_KEY', 'azure-storage-account-key'],
./scripts/compare-env-variables.ts:59:  // Azure Form Recognizer
./scripts/compare-env-variables.ts:60:  ['AZURE_FORM_RECOGNIZER_ENDPOINT', 'azure-form-recognizer-endpoint'],
./scripts/compare-env-variables.ts:61:  ['AZURE_FORM_RECOGNIZER_KEY', 'azure-form-recognizer-key'],
./scripts/compare-env-variables.ts:83:// Azure Key Vault URI
./scripts/compare-env-variables.ts:84:  ['AZURE_KEY_VAULT_URI', null],
./scripts/compare-env-variables.ts:86:  // Azure App Configuration (typically not in Key Vault)
./scripts/compare-env-variables.ts:87:  ['AZURE_APPCONFIG_CONNECTION_STRING', null],
./scripts/compare-env-variables.ts:88:  ['AZURE_APPCONFIG_ENDPOINT', null],
./scripts/compare-env-variables.ts:90:  // Azure Function Key (typically not in Key Vault)
./scripts/compare-env-variables.ts:91:  ['AZURE_FUNCTION_KEY', null],
./scripts/compare-env-variables.ts:96:  'AZURE_OPENAI_API_KEY',
./scripts/compare-env-variables.ts:97:  'AZURE_OPENAI_ENDPOINT',
./scripts/compare-env-variables.ts:98:  'AZURE_OPENAI_DEPLOYMENT',
./scripts/compare-env-variables.ts:101:  'AZURE_SPEECH_KEY',
./scripts/compare-env-variables.ts:102:  'AZURE_SPEECH_REGION',
./scripts/compare-env-variables.ts:112:  'AZURE_KEY_VAULT_URI',
./scripts/compare-env-variables.ts:188:  // Print Azure Key Vault secrets that are expected
./scripts/compare-env-variables.ts:189:  console.log('\nüîë Azure Key Vault Secrets Required:');
./scripts/compare-env-variables.ts:208:  // Check actual .env.local values for Azure services
./scripts/compare-env-variables.ts:209:  console.log('\nüîê Azure Service Configuration Check:');
./scripts/compare-env-variables.ts:212:  const azureChecks = [
./scripts/compare-env-variables.ts:214:      name: 'Azure OpenAI',
./scripts/compare-env-variables.ts:215:      vars: ['AZURE_OPENAI_API_KEY', 'AZURE_OPENAI_ENDPOINT', 'AZURE_OPENAI_DEPLOYMENT'],
./scripts/compare-env-variables.ts:219:      name: 'Azure Speech',
./scripts/compare-env-variables.ts:220:      vars: ['SPEECH_KEY', 'SPEECH_ENDPOINT', 'AZURE_SPEECH_KEY', 'AZURE_SPEECH_REGION'],
./scripts/compare-env-variables.ts:224:      name: 'Azure Key Vault',
./scripts/compare-env-variables.ts:225:      vars: ['AZURE_KEY_VAULT_URI'],
./scripts/compare-env-variables.ts:230:  for (const check of azureChecks) {
./scripts/compare-env-variables.ts:249:  const hasKeyVault = envVars.has('AZURE_KEY_VAULT_URI');
./scripts/compare-env-variables.ts:251:    console.log('‚úÖ Azure Key Vault URI is configured');
./scripts/compare-env-variables.ts:255:    console.log('‚ö†Ô∏è  Azure Key Vault URI is not configured');
./scripts/compare-env-variables.ts:264:    azureServices: azureChecks.map(c => ({
./lib/middleware/error-handler.ts:124:    // External service errors (Azure OpenAI, etc.)
./lib/middleware/error-handler.ts:125:    if (error.message?.includes('Azure OpenAI') || error.message?.includes('OpenAI')) {
./lib/errors.ts:101:  // Azure OpenAI specific errors
./lib/utils.ts:91:  'azure': { type: 'devicon', icon: '', fallbackUrl: 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/azure/azure-original.svg' },
./lib/utils/telemetry.ts:68:    const connectionString = process.env.NEXT_PUBLIC_AZURE_APPLICATION_INSIGHTS_CONNECTION_STRING;
./lib/utils/telemetry.ts:69:    const instrumentationKey = process.env.NEXT_PUBLIC_AZURE_APPLICATION_INSIGHTS_INSTRUMENTATION_KEY;
./lib/utils/telemetry.ts:72:      console.warn('‚ö†Ô∏è Azure Application Insights not configured for client');
./lib/utils/telemetry.ts:159:      const { azureApplicationInsights } = await import('../services/azure-application-insights-service');
./lib/utils/telemetry.ts:160:      serverTelemetry = azureApplicationInsights;
./lib/utils/retry-with-backoff.ts:146:    // Azure OpenAI specific errors
./lib/utils/resume-parser.ts:2:import { azureOpenAIService } from '../services/azure-openai-service';
./lib/utils/resume-parser.ts:137: * AI-powered extraction using Azure OpenAI
./lib/utils/resume-parser.ts:141:    // Ensure Azure OpenAI service is initialized
./lib/utils/resume-parser.ts:142:    await azureOpenAIService.initialize();
./lib/utils/resume-parser.ts:199:    const response = await azureOpenAIService.generateCompletion(prompt);
./lib/utils/resume-parser.ts:269:    // Ensure Azure OpenAI service is initialized
./lib/utils/resume-parser.ts:270:    await azureOpenAIService.initialize();
./lib/utils/resume-parser.ts:292:    const questionsText = await azureOpenAIService.generateCompletion(prompt);
./lib/azure-config-browser.ts:1:// Browser-compatible Azure configuration
./lib/azure-config-browser.ts:2:// This file only uses environment variables and doesn't import server-only Azure Identity libraries
./lib/azure-config-browser.ts:4:interface AzureSecrets {
./lib/azure-config-browser.ts:7:  azureOpenAIKey: string;
./lib/azure-config-browser.ts:8:  azureOpenAIEndpoint: string;
./lib/azure-config-browser.ts:9:  azureOpenAIDeployment: string;
./lib/azure-config-browser.ts:10:  azureOpenAIGpt35Deployment?: string; // gpt-35-turbo deployment
./lib/azure-config-browser.ts:11:  azureOpenAIGpt4oDeployment?: string; // gpt-4o deployment
./lib/azure-config-browser.ts:12:  azureAppConfigConnectionString?: string; // Azure App Configuration connection string
./lib/azure-config-browser.ts:13:  azureAppConfigEndpoint?: string; // Azure App Configuration endpoint
./lib/azure-config-browser.ts:16:let cachedSecrets: AzureSecrets | null = null;
./lib/azure-config-browser.ts:19: * Fetch Azure secrets from environment variables (browser-safe version)
./lib/azure-config-browser.ts:22:export async function fetchAzureSecrets(): Promise<AzureSecrets> {
./lib/azure-config-browser.ts:29:    console.log('üîë Loading Azure configuration from environment variables...');
./lib/azure-config-browser.ts:34:      azureOpenAIKey: process.env.NEXT_PUBLIC_AZURE_OPENAI_API_KEY || '',
./lib/azure-config-browser.ts:35:      azureOpenAIEndpoint: process.env.NEXT_PUBLIC_AZURE_OPENAI_ENDPOINT || '',
./lib/azure-config-browser.ts:36:      azureOpenAIDeployment: process.env.NEXT_PUBLIC_AZURE_OPENAI_DEPLOYMENT || 'gpt-4o',
./lib/azure-config-browser.ts:37:      azureOpenAIGpt35Deployment: process.env.NEXT_PUBLIC_AZURE_OPENAI_GPT35_DEPLOYMENT || 'gpt-35-turbo',
./lib/azure-config-browser.ts:38:      azureOpenAIGpt4oDeployment: process.env.NEXT_PUBLIC_AZURE_OPENAI_GPT4O_DEPLOYMENT || 'gpt-4o',
./lib/azure-config-browser.ts:39:      azureAppConfigConnectionString: process.env.NEXT_PUBLIC_AZURE_APP_CONFIG_CONNECTION_STRING,
./lib/azure-config-browser.ts:40:      azureAppConfigEndpoint: process.env.NEXT_PUBLIC_AZURE_APP_CONFIG_ENDPOINT
./lib/azure-config-browser.ts:45:      console.warn('‚ö†Ô∏è Azure Speech credentials not available in browser environment');
./lib/azure-config-browser.ts:48:    if (!secrets.azureOpenAIKey || !secrets.azureOpenAIEndpoint) {
./lib/azure-config-browser.ts:49:      console.warn('‚ö†Ô∏è Azure OpenAI credentials not available in browser environment');
./lib/azure-config-browser.ts:52:    if (!secrets.azureAppConfigConnectionString && !secrets.azureAppConfigEndpoint) {
./lib/azure-config-browser.ts:53:      console.warn('‚ö†Ô∏è Azure App Configuration credentials not available in browser environment');
./lib/azure-config-browser.ts:57:    console.log('‚úÖ Azure configuration loaded from environment variables');
./lib/azure-config-browser.ts:61:    console.error('‚ùå Failed to load Azure configuration:', error);
./lib/azure-config-browser.ts:67:      azureOpenAIKey: '',
./lib/azure-config-browser.ts:68:      azureOpenAIEndpoint: '',
./lib/azure-config-browser.ts:69:      azureOpenAIDeployment: 'gpt-4o',
./lib/azure-config-browser.ts:70:      azureOpenAIGpt35Deployment: 'gpt-35-turbo',
./lib/azure-config-browser.ts:71:      azureOpenAIGpt4oDeployment: 'gpt-4o',
./lib/azure-config-browser.ts:72:      azureAppConfigConnectionString: undefined,
./lib/azure-config-browser.ts:73:      azureAppConfigEndpoint: undefined
./lib/azure-config-browser.ts:82: * Get current Azure configuration (for debugging)
./lib/azure-config-browser.ts:84:export function getAzureConfig() {
./lib/azure-config-browser.ts:91:      azureOpenAIKey: !!process.env.NEXT_PUBLIC_AZURE_OPENAI_API_KEY,
./lib/azure-config-browser.ts:92:      azureOpenAIEndpoint: !!process.env.NEXT_PUBLIC_AZURE_OPENAI_ENDPOINT,
./lib/azure-config-browser.ts:93:      azureOpenAIDeployment: !!process.env.NEXT_PUBLIC_AZURE_OPENAI_DEPLOYMENT,
./lib/azure-config-browser.ts:94:      azureOpenAIGpt35Deployment: !!process.env.NEXT_PUBLIC_AZURE_OPENAI_GPT35_DEPLOYMENT,
./lib/azure-config-browser.ts:95:      azureOpenAIGpt4oDeployment: !!process.env.NEXT_PUBLIC_AZURE_OPENAI_GPT4O_DEPLOYMENT,
./lib/azure-config-browser.ts:96:      azureAppConfigConnectionString: !!process.env.NEXT_PUBLIC_AZURE_APP_CONFIG_CONNECTION_STRING,
./lib/azure-config-browser.ts:97:      azureAppConfigEndpoint: !!process.env.NEXT_PUBLIC_AZURE_APP_CONFIG_ENDPOINT
./lib/azure-config-browser.ts:100:      default: process.env.NEXT_PUBLIC_AZURE_OPENAI_DEPLOYMENT,
./lib/azure-config-browser.ts:101:      gpt35Turbo: process.env.NEXT_PUBLIC_AZURE_OPENAI_GPT35_DEPLOYMENT || 'gpt-35-turbo',
./lib/azure-config-browser.ts:102:      gpt4o: process.env.NEXT_PUBLIC_AZURE_OPENAI_GPT4O_DEPLOYMENT || 'gpt-4o'
./lib/azure-config-browser.ts:105:      connectionString: process.env.NEXT_PUBLIC_AZURE_APP_CONFIG_CONNECTION_STRING,
./lib/azure-config-browser.ts:106:      endpoint: process.env.NEXT_PUBLIC_AZURE_APP_CONFIG_ENDPOINT
./lib/azure-config-browser.ts:123:  console.log('üßπ Azure configuration cache cleared');
./lib/audio/micCapture.ts:1:import { azureSpeechService } from '@/lib/services/azure-speech-service';
./lib/audio/micCapture.ts:84:   * Start capturing audio and transcribe using Azure Speech Service
./lib/audio/micCapture.ts:93:      // Start Azure continuous recognition
./lib/audio/micCapture.ts:94:      await azureSpeechService.startContinuousRecognition((result) => {
./lib/ai/example.ts:2: * Example usage of the Azure OpenAI AI Service Layer
./lib/ai/example.ts:4: * This file demonstrates how to use the AI service layer with Azure OpenAI.
./lib/ai/example.ts:127:  console.log('# Azure OpenAI Configuration (Required)');
./lib/ai/example.ts:128:  console.log('AI_PROVIDER=azure-openai');
./lib/ai/example.ts:129:  console.log('AZURE_TENANT_ID=your_tenant_id');
./lib/ai/example.ts:130:  console.log('AZURE_CLIENT_ID=your_client_id');
./lib/ai/example.ts:131:  console.log('AZURE_CLIENT_SECRET=your_client_secret');
./lib/ai/example.ts:132:  console.log('# (Plus other Azure OpenAI credentials)');
./lib/ai/__tests__/index.test.ts:2: * Unit tests for the Azure-Centric AI Service Layer
./lib/ai/__tests__/index.test.ts:14:import { AzureOpenAIAdapter } from '../azureOpenAI';
./lib/ai/__tests__/index.test.ts:17:jest.mock('../azureOpenAI');
./lib/ai/__tests__/index.test.ts:36:describe('Azure-Centric AI Service Layer', () => {
./lib/ai/__tests__/index.test.ts:37:  let mockAzureAdapter: jest.Mocked<AzureOpenAIAdapter>;
./lib/ai/__tests__/index.test.ts:43:    mockAzureAdapter = {
./lib/ai/__tests__/index.test.ts:44:      name: 'Azure OpenAI',
./lib/ai/__tests__/index.test.ts:55:    (AzureOpenAIAdapter as jest.MockedClass<typeof AzureOpenAIAdapter>).mockImplementation(() => mockAzureAdapter);
./lib/ai/__tests__/index.test.ts:63:    it('should initialize with Azure OpenAI provider', async () => {
./lib/ai/__tests__/index.test.ts:64:      mockAzureAdapter.initialize.mockResolvedValue(true);
./lib/ai/__tests__/index.test.ts:65:      mockAzureAdapter.isReady.mockReturnValue(true);
./lib/ai/__tests__/index.test.ts:66:      mockAzureAdapter.generateCoverLetter.mockResolvedValue('Azure cover letter');
./lib/ai/__tests__/index.test.ts:70:      expect(mockAzureAdapter.initialize).toHaveBeenCalled();
./lib/ai/__tests__/index.test.ts:72:      expect(response.provider).toBe('Azure OpenAI');
./lib/ai/__tests__/index.test.ts:73:      expect(response.data).toBe('Azure cover letter');
./lib/ai/__tests__/index.test.ts:76:    it('should return error when Azure OpenAI provider is not available', async () => {
./lib/ai/__tests__/index.test.ts:77:      mockAzureAdapter.initialize.mockResolvedValue(false);
./lib/ai/__tests__/index.test.ts:88:      mockAzureAdapter.initialize.mockResolvedValue(true);
./lib/ai/__tests__/index.test.ts:89:      mockAzureAdapter.isReady.mockReturnValue(true);
./lib/ai/__tests__/index.test.ts:94:      mockAzureAdapter.generateCoverLetter.mockResolvedValue(expectedCoverLetter);
./lib/ai/__tests__/index.test.ts:98:      expect(mockAzureAdapter.generateCoverLetter).toHaveBeenCalledWith('resume text', 'job description');
./lib/ai/__tests__/index.test.ts:101:      expect(response.provider).toBe('Azure OpenAI');
./lib/ai/__tests__/index.test.ts:106:      mockAzureAdapter.generateCoverLetter.mockRejectedValue(error);
./lib/ai/__tests__/index.test.ts:112:      expect(response.provider).toBe('Azure OpenAI');
./lib/ai/__tests__/index.test.ts:118:      mockAzureAdapter.initialize.mockResolvedValue(true);
./lib/ai/__tests__/index.test.ts:119:      mockAzureAdapter.isReady.mockReturnValue(true);
./lib/ai/__tests__/index.test.ts:123:      mockAzureAdapter.calculateRelevancy.mockResolvedValue(85);
./lib/ai/__tests__/index.test.ts:127:      expect(mockAzureAdapter.calculateRelevancy).toHaveBeenCalledWith('resume text', 'job description');
./lib/ai/__tests__/index.test.ts:130:      expect(response.provider).toBe('Azure OpenAI');
./lib/ai/__tests__/index.test.ts:134:      mockAzureAdapter.calculateRelevancy.mockResolvedValue(150);
./lib/ai/__tests__/index.test.ts:143:      mockAzureAdapter.calculateRelevancy.mockResolvedValue(-10);
./lib/ai/__tests__/index.test.ts:153:      mockAzureAdapter.calculateRelevancy.mockRejectedValue(error);
./lib/ai/__tests__/index.test.ts:164:      mockAzureAdapter.initialize.mockResolvedValue(true);
./lib/ai/__tests__/index.test.ts:165:      mockAzureAdapter.isReady.mockReturnValue(true);
./lib/ai/__tests__/index.test.ts:170:      mockAzureAdapter.tailorResume.mockResolvedValue(tailoredResume);
./lib/ai/__tests__/index.test.ts:174:      expect(mockAzureAdapter.tailorResume).toHaveBeenCalledWith('original resume', 'job description');
./lib/ai/__tests__/index.test.ts:177:      expect(response.provider).toBe('Azure OpenAI');
./lib/ai/__tests__/index.test.ts:182:      mockAzureAdapter.tailorResume.mockRejectedValue(error);
./lib/ai/__tests__/index.test.ts:193:      mockAzureAdapter.initialize.mockResolvedValue(true);
./lib/ai/__tests__/index.test.ts:194:      mockAzureAdapter.isReady.mockReturnValue(true);
./lib/ai/__tests__/index.test.ts:203:      mockAzureAdapter.generateQuestions.mockResolvedValue(questions);
./lib/ai/__tests__/index.test.ts:214:      expect(mockAzureAdapter.generateQuestions).toHaveBeenCalledWith(resumeInfo);
./lib/ai/__tests__/index.test.ts:217:      expect(response.provider).toBe('Azure OpenAI');
./lib/ai/__tests__/index.test.ts:222:      mockAzureAdapter.generateQuestions.mockRejectedValue(error);
./lib/ai/__tests__/index.test.ts:240:      mockAzureAdapter.initialize.mockResolvedValue(true);
./lib/ai/__tests__/index.test.ts:241:      mockAzureAdapter.isReady.mockReturnValue(true);
./lib/ai/__tests__/index.test.ts:247:      expect(info.name).toBe('Azure OpenAI');
./lib/ai/__tests__/index.test.ts:260:      mockAzureAdapter.initialize.mockResolvedValue(true);
./lib/ai/__tests__/index.test.ts:261:      mockAzureAdapter.isReady.mockReturnValue(true);
./lib/ai/__tests__/index.test.ts:264:    it('should switch to Azure OpenAI successfully', async () => {
./lib/ai/__tests__/index.test.ts:267:      expect(getProviderInfo().name).toBe('Azure OpenAI');
./lib/ai/__tests__/index.test.ts:269:      // Switch to Azure (should work since it's the only provider)
./lib/ai/__tests__/index.test.ts:270:      const response = await switchProvider('azure-openai');
./lib/ai/__tests__/index.test.ts:274:      expect(mockAzureAdapter.dispose).toHaveBeenCalled();
./lib/ai/__tests__/index.test.ts:275:      expect(mockAzureAdapter.initialize).toHaveBeenCalled();
./lib/ai/__tests__/index.test.ts:286:      mockAzureAdapter.initialize.mockResolvedValue(false);
./lib/ai/__tests__/index.test.ts:288:      const response = await switchProvider('azure-openai');
./lib/ai/__tests__/index.test.ts:297:      mockAzureAdapter.initialize.mockResolvedValue(true);
./lib/ai/__tests__/index.test.ts:298:      mockAzureAdapter.isReady.mockReturnValue(true);
./lib/ai/__tests__/index.test.ts:302:      mockAzureAdapter.generateCoverLetter.mockRejectedValue('String error');
./lib/ai/__tests__/index.test.ts:311:      mockAzureAdapter.isReady.mockReturnValue(false);
./lib/ai/__tests__/index.test.ts:312:      mockAzureAdapter.generateCoverLetter.mockRejectedValue(new Error('Provider not ready'));
./lib/ai/__tests__/index.test.ts:323:      mockAzureAdapter.initialize.mockResolvedValue(true);
./lib/ai/__tests__/index.test.ts:324:      mockAzureAdapter.isReady.mockReturnValue(true);
./lib/ai/__tests__/index.test.ts:328:      mockAzureAdapter.generateCoverLetter
./lib/ai/__tests__/azureOpenAI.test.ts:2: * Unit tests for the Azure OpenAI Adapter
./lib/ai/__tests__/azureOpenAI.test.ts:5:import { AzureOpenAIAdapter } from '../azureOpenAI';
./lib/ai/__tests__/azureOpenAI.test.ts:6:import { azureOpenAIService } from '@/lib/services/azure-openai-service';
./lib/ai/__tests__/azureOpenAI.test.ts:8:// Mock the Azure OpenAI service
./lib/ai/__tests__/azureOpenAI.test.ts:9:jest.mock('@/lib/services/azure-openai-service');
./lib/ai/__tests__/azureOpenAI.test.ts:11:describe('AzureOpenAIAdapter', () => {
./lib/ai/__tests__/azureOpenAI.test.ts:12:  let adapter: AzureOpenAIAdapter;
./lib/ai/__tests__/azureOpenAI.test.ts:13:  let mockService: jest.Mocked<typeof azureOpenAIService>;
./lib/ai/__tests__/azureOpenAI.test.ts:19:    mockService = azureOpenAIService as jest.Mocked<typeof azureOpenAIService>;
./lib/ai/__tests__/azureOpenAI.test.ts:21:    adapter = new AzureOpenAIAdapter();
./lib/ai/__tests__/azureOpenAI.test.ts:48:      const error = new Error('Azure credentials not found');
./lib/ai/__tests__/azureOpenAI.test.ts:110:      const uninitializedAdapter = new AzureOpenAIAdapter();
./lib/ai/__tests__/azureOpenAI.test.ts:113:        .rejects.toThrow('Azure OpenAI adapter not initialized');
./lib/ai/__tests__/azureOpenAI.test.ts:127:        .rejects.toThrow('Empty response from Azure OpenAI');
./lib/ai/__tests__/azureOpenAI.test.ts:137:        .rejects.toThrow('Empty response from Azure OpenAI');
./lib/ai/__tests__/azureOpenAI.test.ts:238:      const error = new Error('Azure OpenAI service error');
./lib/ai/__tests__/azureOpenAI.test.ts:242:        .rejects.toThrow('Azure OpenAI service error');
./lib/ai/__tests__/azureOpenAI.test.ts:318:      const newAdapter = new AzureOpenAIAdapter();
./lib/ai/__tests__/azureOpenAI.test.ts:343:        .rejects.toThrow('Empty response from Azure OpenAI');
./lib/ai/__tests__/azureOpenAI.test.ts:346:    it('should handle Azure service not ready', async () => {
./lib/ai/__tests__/azureOpenAI.test.ts:350:        .rejects.toThrow('Azure OpenAI adapter not initialized');
./lib/ai/__tests__/azureOpenAI.test.ts:354:  describe('Integration with Azure Service', () => {
./lib/ai/index.ts:2: * Azure-Centric AI Service Layer
./lib/ai/index.ts:5: * by Azure OpenAI services. Optimized for enterprise-grade AI functionality.
./lib/ai/index.ts:8:import { AzureOpenAIAdapter } from './azureOpenAI';
./lib/ai/index.ts:36: * AI Service Manager - Azure OpenAI focused service manager
./lib/ai/index.ts:44:    // Register Azure OpenAI as the primary provider
./lib/ai/index.ts:45:    this.providers.set('azure-openai', new AzureOpenAIAdapter());
./lib/ai/index.ts:49:   * Initialize the AI service with Azure OpenAI
./lib/ai/index.ts:52:    const providerName = 'azure-openai';
./lib/ai/index.ts:58:      console.error(`‚ùå Azure OpenAI provider not found`);
./lib/ai/index.ts:71:      console.error(`‚ùå Failed to initialize Azure OpenAI provider:`, error);
./lib/ai/index.ts:74:    console.error('‚ùå Azure OpenAI provider failed to initialize');
./lib/ai/azureOpenAI.ts:2: * Azure OpenAI Provider Adapter
./lib/ai/azureOpenAI.ts:4: * This adapter wraps Azure OpenAI API to provide a consistent interface
./lib/ai/azureOpenAI.ts:5: * for the AI service layer. Reuses the existing AzureOpenAIService for
./lib/ai/azureOpenAI.ts:9:import { azureOpenAIService } from '@/lib/services/azure-openai-service';
./lib/ai/azureOpenAI.ts:10:import { enhancedAzureOpenAIService } from '@/lib/services/azure-openai-enhanced';
./lib/ai/azureOpenAI.ts:14:export class AzureOpenAIAdapter implements AIProvider {
./lib/ai/azureOpenAI.ts:15:  public name = 'Azure OpenAI (Enhanced)';
./lib/ai/azureOpenAI.ts:19:  // Default parameters for optimal Azure OpenAI performance
./lib/ai/azureOpenAI.ts:26:   * Initialize the Azure OpenAI service
./lib/ai/azureOpenAI.ts:32:        this.isInitialized = await enhancedAzureOpenAIService.initialize();
./lib/ai/azureOpenAI.ts:34:          console.log('‚úÖ Azure OpenAI adapter initialized with enhanced service');
./lib/ai/azureOpenAI.ts:42:      this.isInitialized = await azureOpenAIService.initialize();
./lib/ai/azureOpenAI.ts:45:        console.log('‚úÖ Azure OpenAI adapter initialized with standard service');
./lib/ai/azureOpenAI.ts:47:        console.warn('‚ö†Ô∏è Azure OpenAI adapter failed to initialize');
./lib/ai/azureOpenAI.ts:52:      console.error('‚ùå Failed to initialize Azure OpenAI adapter:', error);
./lib/ai/azureOpenAI.ts:62:      return this.isInitialized && enhancedAzureOpenAIService.isReady();
./lib/ai/azureOpenAI.ts:64:    return this.isInitialized && azureOpenAIService.isReady();
./lib/ai/azureOpenAI.ts:68:   * Generate a cover letter using Azure OpenAI with retry logic
./lib/ai/azureOpenAI.ts:72:      throw new Error('Azure OpenAI adapter not initialized');
./lib/ai/azureOpenAI.ts:79:          return await enhancedAzureOpenAIService.generateCoverLetter(resumeText, jobDescription);
./lib/ai/azureOpenAI.ts:83:        return await this.generateWithAzureOpenAI(this.getCoverLetterPrompt(resumeText, jobDescription));
./lib/ai/azureOpenAI.ts:100:      throw new Error('Azure OpenAI adapter not initialized');
./lib/ai/azureOpenAI.ts:107:          return await enhancedAzureOpenAIService.calculateRelevancy(resumeText, jobDescription);
./lib/ai/azureOpenAI.ts:112:        const response = await this.generateWithAzureOpenAI(prompt, this.RELEVANCY_TEMPERATURE, this.RELEVANCY_MAX_TOKENS);
./lib/ai/azureOpenAI.ts:138:      throw new Error('Azure OpenAI adapter not initialized');
./lib/ai/azureOpenAI.ts:145:          return await enhancedAzureOpenAIService.tailorResume(resumeText, jobDescription);
./lib/ai/azureOpenAI.ts:149:        return await azureOpenAIService.tailorResume(resumeText, jobDescription);
./lib/ai/azureOpenAI.ts:166:      throw new Error('Azure OpenAI adapter not initialized');
./lib/ai/azureOpenAI.ts:173:          return await enhancedAzureOpenAIService.generateQuestions(resumeInfo);
./lib/ai/azureOpenAI.ts:177:        return await azureOpenAIService.generateQuestions(resumeInfo);
./lib/ai/azureOpenAI.ts:190:   * Generate content using Azure OpenAI with retry logic
./lib/ai/azureOpenAI.ts:193:  private async generateWithAzureOpenAI(
./lib/ai/azureOpenAI.ts:201:      const completion = await azureOpenAIService.createCompletion(messages, {
./lib/ai/azureOpenAI.ts:211:        throw new Error('Empty response from Azure OpenAI');
./lib/ai/azureOpenAI.ts:216:      console.error('‚ùå Error generating content with Azure OpenAI:', error);
./lib/ai/azureOpenAI.ts:273:    console.log('üßπ Azure OpenAI adapter disposed');
./lib/hooks/useFeatureFlags.ts:28:            autoApplyAzure: false,
./lib/hooks/useFeatureFlags.ts:31:              autoApplyAzure: false,
./lib/hooks/useFeatureFlags.ts:67:    isAutoApplyAzureEnabled: () => getFeatureFlag('autoApplyAzure'),
./lib/azure-startup.ts:1:import { initializeAzureEnvironment, getAzureConfig } from './azure-config';
./lib/azure-startup.ts:4: * Initialize Azure services on server startup
./lib/azure-startup.ts:7:export async function initializeAzureServices(): Promise<void> {
./lib/azure-startup.ts:10:    console.log('üîÑ Skipping Azure initialization on client side');
./lib/azure-startup.ts:15:    console.log('üöÄ Initializing Azure services...');
./lib/azure-startup.ts:17:    // Initialize Azure environment
./lib/azure-startup.ts:18:    await initializeAzureEnvironment();
./lib/azure-startup.ts:21:    const config = getAzureConfig();
./lib/azure-startup.ts:22:    console.log('üîç Azure configuration status:', {
./lib/azure-startup.ts:28:        azureOpenAIKey: config.environment.azureOpenAIKey ? 'SET' : 'MISSING',
./lib/azure-startup.ts:29:        azureOpenAIEndpoint: config.environment.azureOpenAIEndpoint ? 'SET' : 'MISSING',
./lib/azure-startup.ts:30:        azureOpenAIDeployment: config.environment.azureOpenAIDeployment ? 'SET' : 'MISSING'
./lib/azure-startup.ts:34:    console.log('‚úÖ Azure services initialized successfully');
./lib/azure-startup.ts:36:    console.error('‚ùå Failed to initialize Azure services:', error);
./lib/azure-startup.ts:42: * Health check for Azure services
./lib/azure-startup.ts:44:export function getAzureHealthStatus() {
./lib/azure-startup.ts:45:  const config = getAzureConfig();
./lib/azure-startup.ts:50:    'azureOpenAIKey',
./lib/azure-startup.ts:51:    'azureOpenAIEndpoint',
./lib/azure-startup.ts:52:    'azureOpenAIDeployment'
./lib/services/feature-flags.ts:1:import { azureAppConfigService, FeatureFlags } from './azure-app-config';
./lib/services/feature-flags.ts:7:    autoApplyAzure: boolean;
./lib/services/feature-flags.ts:27:      // First check if the feature is enabled globally via Azure App Configuration
./lib/services/feature-flags.ts:28:      const azureConfigValue = await azureAppConfigService.getFeatureFlag(flagName);
./lib/services/feature-flags.ts:30:      if (!azureConfigValue) {
./lib/services/feature-flags.ts:39:        return azureConfigValue;
./lib/services/feature-flags.ts:54:      // Get Azure App Configuration flags
./lib/services/feature-flags.ts:55:      const azureFlags = await azureAppConfigService.getAllFeatureFlags();
./lib/services/feature-flags.ts:62:        autoApplyAzure: azureFlags.autoApplyAzure && rolloutStatus.autoApplyAzure,
./lib/services/feature-flags.ts:63:        portalIntegration: azureFlags.portalIntegration && rolloutStatus.portalIntegration,
./lib/services/feature-flags.ts:65:          autoApplyAzure: rolloutStatus.autoApplyAzure || false,
./lib/services/feature-flags.ts:74:        autoApplyAzure: false,
./lib/services/feature-flags.ts:77:          autoApplyAzure: false,
./lib/services/feature-flags.ts:94:  async isAutoApplyAzureEnabled(): Promise<boolean> {
./lib/services/feature-flags.ts:95:    return this.getFeatureFlag('autoApplyAzure');
./lib/services/feature-flags.ts:106:    azureAppConfig: FeatureFlags;
./lib/services/feature-flags.ts:112:    const azureAppConfig = await azureAppConfigService.getAllFeatureFlags();
./lib/services/feature-flags.ts:118:      azureAppConfig,
./lib/services/feature-flags.ts:121:        autoApplyAzure: finalFlags.autoApplyAzure,
./lib/services/feature-flags.ts:133:    await azureAppConfigService.refreshFeatureFlags();
./lib/services/mock-interview.service.test.ts:12:// Mock the Azure OpenAI Adapter
./lib/services/mock-interview.service.test.ts:13:jest.mock('@/lib/ai/azureOpenAI', () => ({
./lib/services/mock-interview.service.test.ts:14:  AzureOpenAIAdapter: jest.fn().mockImplementation(() => ({
./lib/services/mock-interview.service.test.ts:30:    generateWithAzureOpenAI: jest.fn().mockImplementation((prompt, temperature, maxTokens) => {
./lib/services/mock-interview.service.test.ts:114:      const mockAdapter = require('@/lib/ai/azureOpenAI').AzureOpenAIAdapter;
./lib/services/mock-interview.service.test.ts:342:      // Mock a failure in the Azure OpenAI adapter
./lib/services/mock-interview.service.test.ts:343:      const mockAdapter = require('@/lib/ai/azureOpenAI').AzureOpenAIAdapter;
./lib/services/mock-interview.service.test.ts:347:        generateWithAzureOpenAI: jest.fn().mockRejectedValue(new Error('API Error'))
./lib/services/azure-cosmos-service.ts:1:import { CosmosClient, Database, Container } from '@azure/cosmos';
./lib/services/azure-cosmos-service.ts:2:import { DefaultAzureCredential } from '@azure/identity';
./lib/services/azure-cosmos-service.ts:73:    storageProvider: 'azure' | 'firebase';
./lib/services/azure-cosmos-service.ts:242:class AzureCosmosService {
./lib/services/azure-cosmos-service.ts:250:    const connectionString = process.env.AZURE_COSMOS_CONNECTION_STRING;
./lib/services/azure-cosmos-service.ts:251:    const endpoint = process.env.AZURE_COSMOS_ENDPOINT;
./lib/services/azure-cosmos-service.ts:252:    const key = process.env.AZURE_COSMOS_KEY;
./lib/services/azure-cosmos-service.ts:262:      throw new Error('Azure Cosmos DB configuration missing. Set AZURE_COSMOS_CONNECTION_STRING or both AZURE_COSMOS_ENDPOINT and AZURE_COSMOS_KEY');
./lib/services/azure-cosmos-service.ts:270:      const databaseId = process.env.AZURE_COSMOS_DATABASE_NAME || 'PrepBettrDB';
./lib/services/azure-cosmos-service.ts:314:      console.log('‚úÖ Azure Cosmos DB service initialized');
./lib/services/azure-cosmos-service.ts:316:      console.error('‚ùå Failed to initialize Azure Cosmos DB:', error);
./lib/services/azure-cosmos-service.ts:1059:      console.error('Azure Cosmos DB health check failed:', error);
./lib/services/azure-cosmos-service.ts:1066:export const azureCosmosService = new AzureCosmosService();
./lib/services/azure-cosmos-service.ts:1067:export default azureCosmosService;
./lib/services/azure-openai-enhanced.ts:2: * Enhanced Azure OpenAI Service with Multi-Deployment Support
./lib/services/azure-openai-enhanced.ts:10:import { fetchAzureSecrets } from '@/lib/azure-config-browser';
./lib/services/azure-openai-enhanced.ts:25:export class EnhancedAzureOpenAIService {
./lib/services/azure-openai-enhanced.ts:86:      this.secrets = await fetchAzureSecrets();
./lib/services/azure-openai-enhanced.ts:88:      if (!this.secrets.azureOpenAIKey || !this.secrets.azureOpenAIEndpoint) {
./lib/services/azure-openai-enhanced.ts:89:        console.warn('‚ö†Ô∏è Azure OpenAI credentials not available');
./lib/services/azure-openai-enhanced.ts:95:        { name: 'gpt-35-turbo', deployment: this.secrets.azureOpenAIGpt35Deployment || 'gpt-35-turbo' },
./lib/services/azure-openai-enhanced.ts:96:        { name: 'gpt-4o', deployment: this.secrets.azureOpenAIGpt4oDeployment || 'gpt-4o' },
./lib/services/azure-openai-enhanced.ts:97:        { name: 'default', deployment: this.secrets.azureOpenAIDeployment }
./lib/services/azure-openai-enhanced.ts:103:            apiKey: this.secrets.azureOpenAIKey,
./lib/services/azure-openai-enhanced.ts:104:            baseURL: `${this.secrets.azureOpenAIEndpoint}/openai/deployments/${deployment}`,
./lib/services/azure-openai-enhanced.ts:107:              'api-key': this.secrets.azureOpenAIKey,
./lib/services/azure-openai-enhanced.ts:112:          console.log(`‚úÖ Azure OpenAI client initialized for ${name} (${deployment})`);
./lib/services/azure-openai-enhanced.ts:119:        console.log(`‚úÖ Enhanced Azure OpenAI Service initialized with ${this.clients.size} clients`);
./lib/services/azure-openai-enhanced.ts:124:      console.error('‚ùå Failed to initialize Enhanced Azure OpenAI Service:', error);
./lib/services/azure-openai-enhanced.ts:138:      throw new Error('Enhanced Azure OpenAI Service not initialized');
./lib/services/azure-openai-enhanced.ts:167:        throw new Error(`Empty response from Azure OpenAI (${config.deployment})`);
./lib/services/azure-openai-enhanced.ts:358:    console.log('üßπ Enhanced Azure OpenAI Service disposed');
./lib/services/azure-openai-enhanced.ts:363:export const enhancedAzureOpenAIService = new EnhancedAzureOpenAIService();
./lib/services/azure-ai-service.ts:1:import { DefaultAzureCredential } from '@azure/identity';
./lib/services/azure-ai-service.ts:2:import { AzureKeyCredential } from '@azure/core-auth';
./lib/services/azure-ai-service.ts:3:import { DocumentAnalysisClient } from '@azure/ai-form-recognizer';
./lib/services/azure-ai-service.ts:4:import { OpenAI, AzureOpenAI } from 'openai';
./lib/services/azure-ai-service.ts:93:class AzureAIService {
./lib/services/azure-ai-service.ts:94:  private openAIClient: AzureOpenAI | null = null;
./lib/services/azure-ai-service.ts:103:    this.openAIEndpoint = process.env.AZURE_OPENAI_ENDPOINT || '';
./lib/services/azure-ai-service.ts:104:    this.openAIApiKey = process.env.AZURE_OPENAI_API_KEY || '';
./lib/services/azure-ai-service.ts:105:    this.formRecognizerEndpoint = process.env.AZURE_FORM_RECOGNIZER_ENDPOINT || '';
./lib/services/azure-ai-service.ts:106:    this.formRecognizerApiKey = process.env.AZURE_FORM_RECOGNIZER_API_KEY || '';
./lib/services/azure-ai-service.ts:113:      // Initialize Azure OpenAI
./lib/services/azure-ai-service.ts:115:        this.openAIClient = new AzureOpenAI({
./lib/services/azure-ai-service.ts:119:        console.log('‚úÖ Azure OpenAI client initialized');
./lib/services/azure-ai-service.ts:122:      // Initialize Azure Form Recognizer
./lib/services/azure-ai-service.ts:126:          new AzureKeyCredential(this.formRecognizerApiKey)
./lib/services/azure-ai-service.ts:128:        console.log('‚úÖ Azure Form Recognizer client initialized');
./lib/services/azure-ai-service.ts:133:          new DefaultAzureCredential()
./lib/services/azure-ai-service.ts:135:        console.log('‚úÖ Azure Form Recognizer client initialized with managed identity');
./lib/services/azure-ai-service.ts:139:      console.log('‚úÖ Azure AI service initialized');
./lib/services/azure-ai-service.ts:141:      console.error('‚ùå Failed to initialize Azure AI service:', error);
./lib/services/azure-ai-service.ts:142:      logServerError(error as Error, { service: 'azure-ai', action: 'initialize' });
./lib/services/azure-ai-service.ts:148:   * Extract resume data using Azure Form Recognizer
./lib/services/azure-ai-service.ts:154:      throw new Error('Azure Form Recognizer not configured');
./lib/services/azure-ai-service.ts:158:      console.log('üîç Extracting resume data with Azure Form Recognizer...');
./lib/services/azure-ai-service.ts:178:      logServerError(error as Error, { service: 'azure-ai', action: 'extract-resume' });
./lib/services/azure-ai-service.ts:215:      throw new Error('Azure OpenAI not configured');
./lib/services/azure-ai-service.ts:218:    const deploymentName = process.env.AZURE_OPENAI_DEPLOYMENT_NAME || 'gpt-4';
./lib/services/azure-ai-service.ts:314:      logServerError(error as Error, { service: 'azure-ai', action: 'structure-resume' });
./lib/services/azure-ai-service.ts:329:      throw new Error('Azure OpenAI not configured');
./lib/services/azure-ai-service.ts:333:      console.log('ü§ñ Generating interview questions with Azure OpenAI...');
./lib/services/azure-ai-service.ts:335:      const deploymentName = process.env.AZURE_OPENAI_DEPLOYMENT_NAME || 'gpt-4';
./lib/services/azure-ai-service.ts:388:      logServerError(error as Error, { service: 'azure-ai', action: 'generate-questions' });
./lib/services/azure-ai-service.ts:404:      throw new Error('Azure OpenAI not configured');
./lib/services/azure-ai-service.ts:408:      console.log('üìä Generating interview feedback with Azure OpenAI...');
./lib/services/azure-ai-service.ts:410:      const deploymentName = process.env.AZURE_OPENAI_DEPLOYMENT_NAME || 'gpt-4';
./lib/services/azure-ai-service.ts:477:      logServerError(error as Error, { service: 'azure-ai', action: 'generate-feedback' });
./lib/services/azure-ai-service.ts:494:      throw new Error('Azure OpenAI not configured');
./lib/services/azure-ai-service.ts:498:      console.log('üìù Generating cover letter with Azure OpenAI...');
./lib/services/azure-ai-service.ts:500:      const deploymentName = process.env.AZURE_OPENAI_DEPLOYMENT_NAME || 'gpt-4';
./lib/services/azure-ai-service.ts:549:      logServerError(error as Error, { service: 'azure-ai', action: 'generate-cover-letter' });
./lib/services/azure-ai-service.ts:603:   * Health check for Azure AI services
./lib/services/azure-ai-service.ts:618:          const deploymentName = process.env.AZURE_OPENAI_DEPLOYMENT_NAME || 'gpt-4';
./lib/services/azure-ai-service.ts:640:      console.error('Azure AI health check failed:', error);
./lib/services/azure-ai-service.ts:651:export const azureAIService = new AzureAIService();
./lib/services/azure-ai-service.ts:652:export default azureAIService;
./lib/services/azure-openai.ts:3:// Environment variables for Azure OpenAI configuration
./lib/services/azure-openai.ts:4:const AZURE_OPENAI_KEY = process.env.AZURE_OPENAI_KEY;
./lib/services/azure-openai.ts:5:const AZURE_OPENAI_ENDPOINT = process.env.AZURE_OPENAI_ENDPOINT;
./lib/services/azure-openai.ts:6:const AZURE_OPENAI_DEPLOYMENT = process.env.AZURE_OPENAI_DEPLOYMENT;
./lib/services/azure-openai.ts:12: * Initialize and cache the Azure OpenAI client
./lib/services/azure-openai.ts:20:  if (!AZURE_OPENAI_KEY) {
./lib/services/azure-openai.ts:21:    throw new Error('AZURE_OPENAI_KEY environment variable is required');
./lib/services/azure-openai.ts:23:  if (!AZURE_OPENAI_ENDPOINT) {
./lib/services/azure-openai.ts:24:    throw new Error('AZURE_OPENAI_ENDPOINT environment variable is required');
./lib/services/azure-openai.ts:26:  if (!AZURE_OPENAI_DEPLOYMENT) {
./lib/services/azure-openai.ts:27:    throw new Error('AZURE_OPENAI_DEPLOYMENT environment variable is required');
./lib/services/azure-openai.ts:30:  // Create and cache the OpenAI client configured for Azure
./lib/services/azure-openai.ts:32:    apiKey: AZURE_OPENAI_KEY,
./lib/services/azure-openai.ts:33:    baseURL: `${AZURE_OPENAI_ENDPOINT}/openai/deployments/${AZURE_OPENAI_DEPLOYMENT}`,
./lib/services/azure-openai.ts:36:      'api-key': AZURE_OPENAI_KEY,
./lib/services/azure-openai.ts:44: * Generate content using Azure OpenAI with centralized error handling
./lib/services/azure-openai.ts:61:      model: AZURE_OPENAI_DEPLOYMENT!,
./lib/services/azure-openai.ts:70:      throw new Error('No content generated from Azure OpenAI');
./lib/services/azure-openai.ts:76:    const translatedError = translateAzureOpenAIError(error);
./lib/services/azure-openai.ts:82: * Translate Azure OpenAI errors into user-friendly messages
./lib/services/azure-openai.ts:84:function translateAzureOpenAIError(error: any): Error {
./lib/services/azure-openai.ts:87:    return new Error('Unable to connect to Azure OpenAI service. Please check your network connection.');
./lib/services/azure-openai.ts:90:  // Azure OpenAI API errors
./lib/services/azure-openai.ts:94:        return new Error('Azure OpenAI authentication failed. Please check your API key.');
./lib/services/azure-openai.ts:97:        return new Error('Access forbidden. Your Azure OpenAI subscription may not have access to this resource.');
./lib/services/azure-openai.ts:104:        return new Error(`Azure OpenAI rate limit exceeded.${retryMessage}`);
./lib/services/azure-openai.ts:109:          return new Error('Content was filtered by Azure OpenAI content policy. Please modify your request.');
./lib/services/azure-openai.ts:114:        return new Error('Azure OpenAI deployment not found. Please check your deployment name and endpoint.');
./lib/services/azure-openai.ts:120:        return new Error('Azure OpenAI service is temporarily unavailable. Please try again later.');
./lib/services/azure-openai.ts:123:        return new Error(`Azure OpenAI error (${error.status}): ${error.message || 'Unknown error'}`);
./lib/services/azure-openai.ts:133:  return new Error(`Azure OpenAI error: ${error.message || 'An unexpected error occurred'}`);
./lib/services/azure-openai.ts:144: * Check if Azure OpenAI is properly configured
./lib/services/azure-openai.ts:147:  return !!(AZURE_OPENAI_KEY && AZURE_OPENAI_ENDPOINT && AZURE_OPENAI_DEPLOYMENT);
./lib/services/azure-openai-service.test.ts:1:import { AzureOpenAIService } from './azure-openai-service';
./lib/services/azure-openai-service.test.ts:19:// Mock the fetchAzureSecrets function
./lib/services/azure-openai-service.test.ts:20:jest.mock('@/lib/azure-config', () => ({
./lib/services/azure-openai-service.test.ts:21:  fetchAzureSecrets: jest.fn().mockResolvedValue({
./lib/services/azure-openai-service.test.ts:22:    azureOpenAIKey: 'mock-key',
./lib/services/azure-openai-service.test.ts:23:    azureOpenAIEndpoint: 'mock-endpoint',
./lib/services/azure-openai-service.test.ts:24:    azureOpenAIDeployment: 'mock-deployment'
./lib/services/azure-openai-service.test.ts:28:describe('AzureOpenAIService - Unit Tests', () => {
./lib/services/azure-openai-service.test.ts:29:  let service: AzureOpenAIService;
./lib/services/azure-openai-service.test.ts:42:    service = new AzureOpenAIService();
./lib/services/azure-blob-storage.ts:1:import { BlobServiceClient, BlobSASPermissions, generateBlobSASQueryParameters, StorageSharedKeyCredential, BlobSASSignatureValues, SASProtocol } from '@azure/storage-blob';
./lib/services/azure-blob-storage.ts:2:import { fetchAzureSecrets } from '@/azure/lib/azure-config';
./lib/services/azure-blob-storage.ts:5:interface AzureBlobConfig {
./lib/services/azure-blob-storage.ts:22:class AzureBlobStorageService {
./lib/services/azure-blob-storage.ts:24:  private config: AzureBlobConfig | null = null;
./lib/services/azure-blob-storage.ts:34:   * Initialize the Azure Blob Storage service
./lib/services/azure-blob-storage.ts:38:      // Get Azure configuration from Key Vault or environment
./lib/services/azure-blob-storage.ts:39:      const secrets = await fetchAzureSecrets();
./lib/services/azure-blob-storage.ts:42:        accountName: process.env.AZURE_STORAGE_ACCOUNT_NAME || secrets.azureStorageAccountName || '',
./lib/services/azure-blob-storage.ts:43:        accountKey: process.env.AZURE_STORAGE_ACCOUNT_KEY || secrets.azureStorageAccountKey || '',
./lib/services/azure-blob-storage.ts:48:        console.warn('‚ö†Ô∏è Azure Blob Storage credentials not found, falling back to Firebase');
./lib/services/azure-blob-storage.ts:66:      console.log('‚úÖ Azure Blob Storage service initialized');
./lib/services/azure-blob-storage.ts:69:      console.error('‚ùå Failed to initialize Azure Blob Storage:', error);
./lib/services/azure-blob-storage.ts:70:      logServerError(error as Error, { service: 'azure-blob-storage', action: 'initialize' });
./lib/services/azure-blob-storage.ts:80:      throw new Error('Azure Blob Storage service not initialized');
./lib/services/azure-blob-storage.ts:105:   * Upload resume file to Azure Blob Storage
./lib/services/azure-blob-storage.ts:114:      throw new Error('Azure Blob Storage service not initialized');
./lib/services/azure-blob-storage.ts:141:      console.log(`‚úÖ Resume uploaded to Azure Blob Storage: ${blobName}`);
./lib/services/azure-blob-storage.ts:149:      console.error('Failed to upload resume to Azure Blob Storage:', error);
./lib/services/azure-blob-storage.ts:151:        service: 'azure-blob-storage', 
./lib/services/azure-blob-storage.ts:166:      throw new Error('Azure Blob Storage service not initialized');
./lib/services/azure-blob-storage.ts:199:        service: 'azure-blob-storage', 
./lib/services/azure-blob-storage.ts:209:   * Delete resume from Azure Blob Storage
./lib/services/azure-blob-storage.ts:213:      console.warn('Azure Blob Storage service not initialized, skipping delete');
./lib/services/azure-blob-storage.ts:223:      console.log(`‚úÖ Resume deleted from Azure Blob Storage: ${blobName}`);
./lib/services/azure-blob-storage.ts:225:      console.error('Failed to delete resume from Azure Blob Storage:', error);
./lib/services/azure-blob-storage.ts:227:        service: 'azure-blob-storage', 
./lib/services/azure-blob-storage.ts:241:      throw new Error('Azure Blob Storage service not initialized');
./lib/services/azure-blob-storage.ts:264:   * Upload profile picture to Azure Blob Storage
./lib/services/azure-blob-storage.ts:273:      throw new Error('Azure Blob Storage service not initialized');
./lib/services/azure-blob-storage.ts:300:      console.log(`‚úÖ Profile picture uploaded to Azure Blob Storage: ${blobName}`);
./lib/services/azure-blob-storage.ts:307:      console.error('Failed to upload profile picture to Azure Blob Storage:', error);
./lib/services/azure-blob-storage.ts:309:        service: 'azure-blob-storage', 
./lib/services/azure-blob-storage.ts:320:   * Upload general file to Azure Blob Storage
./lib/services/azure-blob-storage.ts:331:      throw new Error('Azure Blob Storage service not initialized');
./lib/services/azure-blob-storage.ts:360:      console.log(`‚úÖ File uploaded to Azure Blob Storage: ${blobName} in container ${containerName}`);
./lib/services/azure-blob-storage.ts:368:      console.error(`Failed to upload file to Azure Blob Storage container ${containerType}:`, error);
./lib/services/azure-blob-storage.ts:370:        service: 'azure-blob-storage', 
./lib/services/azure-blob-storage.ts:390:      throw new Error('Azure Blob Storage service not initialized');
./lib/services/azure-blob-storage.ts:429:      console.warn('Azure Blob Storage service not initialized, skipping delete');
./lib/services/azure-blob-storage.ts:439:      console.log(`‚úÖ File deleted from Azure Blob Storage: ${blobName} in container ${containerName}`);
./lib/services/azure-blob-storage.ts:441:      console.error(`Failed to delete file from Azure Blob Storage container ${containerType}:`, error);
./lib/services/azure-blob-storage.ts:443:        service: 'azure-blob-storage', 
./lib/services/azure-blob-storage.ts:458:      console.warn('Azure Blob Storage service not initialized, skipping delete');
./lib/services/azure-blob-storage.ts:494:      console.error('Failed to delete all user files from Azure Blob Storage:', error);
./lib/services/azure-blob-storage.ts:496:        service: 'azure-blob-storage', 
./lib/services/azure-blob-storage.ts:512:      throw new Error('Azure Blob Storage service not initialized');
./lib/services/azure-blob-storage.ts:536:      throw new Error('Azure Blob Storage service not initialized');
./lib/services/azure-blob-storage.ts:561:export const azureBlobStorage = new AzureBlobStorageService();
./lib/services/azure-gdpr-service.ts:1:import { CosmosClient, Container, Database } from '@azure/cosmos';
./lib/services/azure-gdpr-service.ts:2:import { BlobServiceClient, ContainerClient } from '@azure/storage-blob';
./lib/services/azure-gdpr-service.ts:3:import { DefaultAzureCredential } from '@azure/identity';
./lib/services/azure-gdpr-service.ts:4:import { SecretClient } from '@azure/keyvault-secrets';
./lib/services/azure-gdpr-service.ts:7: * Azure-based GDPR Compliance Service
./lib/services/azure-gdpr-service.ts:9: * Implements GDPR features using Azure Cosmos DB for data deletion requests
./lib/services/azure-gdpr-service.ts:10: * and audit logging, plus Azure Blob Storage for file deletion.
./lib/services/azure-gdpr-service.ts:70:export class AzureGDPRService {
./lib/services/azure-gdpr-service.ts:75:  private static instance: AzureGDPRService;
./lib/services/azure-gdpr-service.ts:85:  public static getInstance(): AzureGDPRService {
./lib/services/azure-gdpr-service.ts:86:    if (!AzureGDPRService.instance) {
./lib/services/azure-gdpr-service.ts:87:      AzureGDPRService.instance = new AzureGDPRService();
./lib/services/azure-gdpr-service.ts:89:    return AzureGDPRService.instance;
./lib/services/azure-gdpr-service.ts:93:   * Initialize Azure services (Cosmos DB, Blob Storage, Key Vault)
./lib/services/azure-gdpr-service.ts:97:      // Initialize Azure Key Vault for secrets
./lib/services/azure-gdpr-service.ts:98:      if (process.env.AZURE_KEY_VAULT_URL) {
./lib/services/azure-gdpr-service.ts:100:          process.env.AZURE_KEY_VAULT_URL,
./lib/services/azure-gdpr-service.ts:101:          new DefaultAzureCredential()
./lib/services/azure-gdpr-service.ts:111:      console.log('‚úÖ Azure GDPR Service initialized successfully');
./lib/services/azure-gdpr-service.ts:113:      console.error('‚ùå Failed to initialize Azure GDPR Service:', error);
./lib/services/azure-gdpr-service.ts:120:      let connectionString = process.env.AZURE_COSMOS_CONNECTION_STRING;
./lib/services/azure-gdpr-service.ts:134:        const endpoint = process.env.AZURE_COSMOS_ENDPOINT;
./lib/services/azure-gdpr-service.ts:135:        const key = process.env.AZURE_COSMOS_KEY;
./lib/services/azure-gdpr-service.ts:138:          throw new Error('Cosmos DB configuration missing. Provide either AZURE_COSMOS_CONNECTION_STRING or both AZURE_COSMOS_ENDPOINT and AZURE_COSMOS_KEY');
./lib/services/azure-gdpr-service.ts:161:      let connectionString = process.env.AZURE_STORAGE_CONNECTION_STRING;
./lib/services/azure-gdpr-service.ts:174:        throw new Error('Azure Storage connection string not found in environment or Key Vault');
./lib/services/azure-gdpr-service.ts:179:      console.log('‚úÖ Azure Blob Storage initialized for GDPR service');
./lib/services/azure-gdpr-service.ts:358:   * Process data deletion (called by scheduled Azure Function)
./lib/services/azure-gdpr-service.ts:408:      // Delete from Azure Blob Storage
./lib/services/azure-gdpr-service.ts:667:   * Delete user files from Azure Blob Storage
./lib/services/azure-gdpr-service.ts:765:export const azureGDPRService = AzureGDPRService.getInstance();
./lib/services/email-verification-service.ts:50:      const baseUrl = process.env.NEXTAUTH_URL || process.env.AZURE_APP_SERVICE_URL || 'http://localhost:3000';
./lib/services/resume-processing-service.ts:3:import { azureBlobStorage } from './azure-blob-storage';
./lib/services/resume-processing-service.ts:4:import { azureFormRecognizer, ExtractedResumeData } from './azure-form-recognizer';
./lib/services/resume-processing-service.ts:23:    storageProvider: 'azure' | 'firebase';
./lib/services/resume-processing-service.ts:45:      // Initialize Azure services (they will gracefully fall back if not configured)
./lib/services/resume-processing-service.ts:46:      await azureBlobStorage.initialize();
./lib/services/resume-processing-service.ts:47:      await azureFormRecognizer.initialize();
./lib/services/resume-processing-service.ts:78:      // Step 2: Upload to storage (Azure Blob Storage with Firebase fallback)
./lib/services/resume-processing-service.ts:140:   * Upload resume to storage (Azure Blob with Firebase fallback)
./lib/services/resume-processing-service.ts:152:    provider: 'azure' | 'firebase';
./lib/services/resume-processing-service.ts:155:    // Try Azure Blob Storage first
./lib/services/resume-processing-service.ts:156:    if (azureBlobStorage.isReady()) {
./lib/services/resume-processing-service.ts:158:        console.log('üì§ Uploading to Azure Blob Storage...');
./lib/services/resume-processing-service.ts:159:        const result = await azureBlobStorage.uploadResume(userId, fileBuffer, fileName, mimeType);
./lib/services/resume-processing-service.ts:165:          provider: 'azure'
./lib/services/resume-processing-service.ts:168:        console.warn('‚ö†Ô∏è Azure Blob Storage upload failed, falling back to Firebase:', error);
./lib/services/resume-processing-service.ts:185:   * Extract data from resume using Azure Form Recognizer or OpenAI
./lib/services/resume-processing-service.ts:189:    // Try Azure Form Recognizer first
./lib/services/resume-processing-service.ts:190:    if (azureFormRecognizer.isReady()) {
./lib/services/resume-processing-service.ts:192:        console.log('üîç Extracting data with Azure Form Recognizer...');
./lib/services/resume-processing-service.ts:193:        return await azureFormRecognizer.extractResumeData(fileBuffer, mimeType);
./lib/services/resume-processing-service.ts:195:        console.warn('‚ö†Ô∏è Azure Form Recognizer extraction failed, falling back to OpenAI:', error);
./lib/services/resume-processing-service.ts:391:        if (profileData?.metadata?.storageProvider === 'azure' && profileData?.blobName) {
./lib/services/resume-processing-service.ts:392:          await azureBlobStorage.deleteResume(profileData.blobName);
./lib/services/resume-processing-service.ts:429:   * Generate new SAS URL for Azure blob
./lib/services/resume-processing-service.ts:435:      if (resumeData?.blobName && azureBlobStorage.isReady()) {
./lib/services/resume-processing-service.ts:436:        const result = await azureBlobStorage.generateSASUrl(resumeData.blobName, expiryHours);
./lib/services/firebase-remote-config.ts:5:  autoApplyAzure: boolean;
./lib/services/firebase-remote-config.ts:30:        autoApplyAzure: false,
./lib/services/firebase-remote-config.ts:59:        autoApplyAzure: getValue(this.remoteConfig, 'autoApplyAzure').asBoolean(),
./lib/services/firebase-remote-config.ts:74:        autoApplyAzure: false,
./lib/services/azure-app-config.ts:2: * Azure App Configuration Service
./lib/services/azure-app-config.ts:4: * Replaces Firebase Remote Config with Azure App Configuration for feature flags
./lib/services/azure-app-config.ts:8:import { AppConfigurationClient } from '@azure/app-configuration';
./lib/services/azure-app-config.ts:9:import { DefaultAzureCredential } from '@azure/identity';
./lib/services/azure-app-config.ts:10:import { fetchAzureSecrets } from '@/lib/azure-config-browser';
./lib/services/azure-app-config.ts:13:  autoApplyAzure: boolean;
./lib/services/azure-app-config.ts:25:class AzureAppConfigService {
./lib/services/azure-app-config.ts:34:   * Initialize the Azure App Configuration client
./lib/services/azure-app-config.ts:40:      // Fetch Azure secrets
./lib/services/azure-app-config.ts:41:      this.secrets = await fetchAzureSecrets();
./lib/services/azure-app-config.ts:43:      if (!this.secrets.azureAppConfigConnectionString && !this.secrets.azureAppConfigEndpoint) {
./lib/services/azure-app-config.ts:44:        throw new Error('Azure App Configuration connection string or endpoint not found');
./lib/services/azure-app-config.ts:48:      if (this.secrets.azureAppConfigConnectionString) {
./lib/services/azure-app-config.ts:49:        this.client = new AppConfigurationClient(this.secrets.azureAppConfigConnectionString);
./lib/services/azure-app-config.ts:50:      } else if (this.secrets.azureAppConfigEndpoint) {
./lib/services/azure-app-config.ts:51:        const credential = new DefaultAzureCredential();
./lib/services/azure-app-config.ts:52:        this.client = new AppConfigurationClient(this.secrets.azureAppConfigEndpoint, credential);
./lib/services/azure-app-config.ts:54:        throw new Error('No valid Azure App Configuration credentials found');
./lib/services/azure-app-config.ts:58:      console.log('‚úÖ Azure App Configuration service initialized');
./lib/services/azure-app-config.ts:60:      console.error('‚ùå Failed to initialize Azure App Configuration:', error);
./lib/services/azure-app-config.ts:73:   * Parse feature flag value from Azure App Configuration
./lib/services/azure-app-config.ts:86:   * Fetch feature flags from Azure App Configuration
./lib/services/azure-app-config.ts:98:        throw new Error('Azure App Configuration client not initialized');
./lib/services/azure-app-config.ts:102:        autoApplyAzure: false,
./lib/services/azure-app-config.ts:106:      // Define feature flag keys with their Azure App Config counterparts
./lib/services/azure-app-config.ts:108:        { local: 'autoApplyAzure', azure: '.appconfig.featureflag/autoApplyAzure' },
./lib/services/azure-app-config.ts:109:        { local: 'portalIntegration', azure: '.appconfig.featureflag/portalIntegration' }
./lib/services/azure-app-config.ts:117:            key: flagKey.azure
./lib/services/azure-app-config.ts:145:      console.log('üìä Feature flags fetched from Azure App Configuration:', flags);
./lib/services/azure-app-config.ts:149:      console.error('‚ùå Error fetching feature flags from Azure App Configuration:', error);
./lib/services/azure-app-config.ts:153:        autoApplyAzure: false,
./lib/services/azure-app-config.ts:205:        throw new Error('Azure App Configuration client not initialized');
./lib/services/azure-app-config.ts:208:      // Create feature flag format for Azure App Configuration
./lib/services/azure-app-config.ts:244:        throw new Error('Azure App Configuration client not initialized');
./lib/services/azure-app-config.ts:267:        throw new Error('Azure App Configuration client not initialized');
./lib/services/azure-app-config.ts:291:        throw new Error('Azure App Configuration client not initialized');
./lib/services/azure-app-config.ts:362:export const azureAppConfigService = new AzureAppConfigService();
./lib/services/azure-app-config.ts:367:    getFeatureFlag: (flagName: keyof FeatureFlags) => azureAppConfigService.getFeatureFlag(flagName),
./lib/services/azure-app-config.ts:368:    getAllFeatureFlags: () => azureAppConfigService.getAllFeatureFlags(),
./lib/services/azure-app-config.ts:369:    refreshFeatureFlags: () => azureAppConfigService.refreshFeatureFlags(),
./lib/services/azure-app-config.ts:370:    getCachedFlags: () => azureAppConfigService.getCachedFlags(),
./lib/services/mock-interview.service.ts:4: * This service generates dynamic mock interviews using Azure OpenAI,
./lib/services/mock-interview.service.ts:9:import { AzureOpenAIAdapter } from '@/lib/ai/azureOpenAI';
./lib/services/mock-interview.service.ts:42:  private azureAdapter: AzureOpenAIAdapter;
./lib/services/mock-interview.service.ts:55:    this.azureAdapter = new AzureOpenAIAdapter();
./lib/services/mock-interview.service.ts:63:      this.isInitialized = await this.azureAdapter.initialize();
./lib/services/mock-interview.service.ts:75:   * Generate a unique role and company with Azure OpenAI
./lib/services/mock-interview.service.ts:108:      // Generate using Azure OpenAI (via adapter's internal method)
./lib/services/mock-interview.service.ts:109:      const response = await (this.azureAdapter as any).generateWithAzureOpenAI(
./lib/services/mock-interview.service.ts:174:      const response = await (this.azureAdapter as any).generateWithAzureOpenAI(
./lib/services/mock-interview.service.ts:231:      const questions = await this.azureAdapter.generateQuestions(resumeInfo);
./lib/services/gdpr-compliance-service.ts:2:import { azureBlobStorage } from '@/lib/services/azure-blob-storage';
./lib/services/gdpr-compliance-service.ts:414:      // Try Azure Blob Storage first
./lib/services/gdpr-compliance-service.ts:415:      await azureBlobStorage.initialize();
./lib/services/gdpr-compliance-service.ts:416:      if (azureBlobStorage.isReady()) {
./lib/services/gdpr-compliance-service.ts:417:        console.log(`üóëÔ∏è Deleting Azure Blob Storage files for user ${userId}`);
./lib/services/gdpr-compliance-service.ts:418:        const deletedContainers = await azureBlobStorage.deleteAllUserFiles(userId);
./lib/services/gdpr-compliance-service.ts:420:          console.log(`‚úÖ Deleted from Azure containers: ${deletedContainers.join(', ')}`);
./lib/services/gdpr-compliance-service.ts:424:    } catch (azureError) {
./lib/services/gdpr-compliance-service.ts:425:      console.error('Error deleting from Azure Blob Storage:', azureError);
./lib/services/notification-service.ts:3:import { azureCosmosService } from './azure-cosmos-service';
./lib/services/notification-service.ts:275:      eventId = await azureCosmosService.createNotificationEvent({
./lib/services/notification-service.ts:300:      await azureCosmosService.updateNotificationEvent(eventId, params.userId, {
./lib/services/notification-service.ts:321:          await azureCosmosService.updateNotificationEvent(eventId, params.userId, {
./lib/services/notification-service.ts:1098:      const events = await azureCosmosService.getUserNotificationEvents(userId, limit);
./lib/services/notification-service.ts:1158:      // Get recent notifications using Azure Cosmos DB query
./lib/services/notification-service.ts:1159:      const events = await azureCosmosService.queryDocuments<any>(
./lib/services/notification-service.ts:1209:      // Get old events using Azure Cosmos DB query
./lib/services/notification-service.ts:1210:      const oldEvents = await azureCosmosService.queryDocuments<any>(
./lib/services/notification-service.ts:1227:          azureCosmosService.deleteDocument('notificationEvents', event.id, event.userId)
./lib/services/error-budget-monitor.ts:1:import { azureCosmosService } from './azure-cosmos-service';
./lib/services/error-budget-monitor.ts:28:    autoApplyAzure: {
./lib/services/error-budget-monitor.ts:29:      featureName: 'autoApplyAzure',
./lib/services/error-budget-monitor.ts:52:      await azureCosmosService.createErrorEvent({
./lib/services/error-budget-monitor.ts:78:      return await azureCosmosService.getErrorEventCount(featureName, timeWindowMinutes);
./lib/services/error-budget-monitor.ts:124:    await azureCosmosService.createErrorBudget({
./lib/services/error-budget-monitor.ts:164:      const errorEvents = await azureCosmosService.getErrorEvents(featureName, 24 * 60, limitCount); // Last 24 hours
./lib/services/error-budget-monitor.ts:184:  async logAutoApplyAzureError(errorMessage: string, severity: ErrorEvent['severity'] = 'medium', metadata?: Record<string, any>): Promise<void> {
./lib/services/error-budget-monitor.ts:186:      featureName: 'autoApplyAzure',
./lib/services/azure-openai-service.ts:2:import { fetchAzureSecrets } from '@/lib/azure-config';
./lib/services/azure-openai-service.ts:17:export class AzureOpenAIService {
./lib/services/azure-openai-service.ts:30:   * Initialize the Azure OpenAI service
./lib/services/azure-openai-service.ts:34:      const secrets = await fetchAzureSecrets();
./lib/services/azure-openai-service.ts:36:      if (!secrets.azureOpenAIKey || !secrets.azureOpenAIEndpoint) {
./lib/services/azure-openai-service.ts:37:        console.warn('‚ö†Ô∏è Azure OpenAI credentials not available');
./lib/services/azure-openai-service.ts:41:      this.deployment = secrets.azureOpenAIDeployment;
./lib/services/azure-openai-service.ts:43:        apiKey: secrets.azureOpenAIKey,
./lib/services/azure-openai-service.ts:44:        baseURL: `${secrets.azureOpenAIEndpoint}/openai/deployments/${secrets.azureOpenAIDeployment}`,
./lib/services/azure-openai-service.ts:47:          'api-key': secrets.azureOpenAIKey,
./lib/services/azure-openai-service.ts:53:        console.log(`üîÑ Testing Azure OpenAI connection with deployment: ${this.deployment}`);
./lib/services/azure-openai-service.ts:61:        console.log('‚úÖ Azure OpenAI Service initialized and tested successfully');
./lib/services/azure-openai-service.ts:64:        console.error('‚ùå Azure OpenAI connection test failed:', testError.message);
./lib/services/azure-openai-service.ts:66:          endpoint: secrets.azureOpenAIEndpoint,
./lib/services/azure-openai-service.ts:68:          hasApiKey: !!secrets.azureOpenAIKey
./lib/services/azure-openai-service.ts:74:          console.error('   ‚Ä¢ Check your Azure OpenAI resource for the correct key');
./lib/services/azure-openai-service.ts:79:          console.error('   ‚Ä¢ No deployments might exist in your Azure OpenAI resource');
./lib/services/azure-openai-service.ts:81:          console.error('   1. Log into portal.azure.com');
./lib/services/azure-openai-service.ts:82:          console.error('   2. Navigate to your Azure OpenAI resource');
./lib/services/azure-openai-service.ts:85:          console.error('   5. Update AZURE_OPENAI_DEPLOYMENT in your .env.local file');
./lib/services/azure-openai-service.ts:89:          console.error('   ‚Ä¢ Your Azure OpenAI resource might not be properly configured');
./lib/services/azure-openai-service.ts:92:          console.error('   ‚Ä¢ Check your Azure OpenAI resource configuration');
./lib/services/azure-openai-service.ts:98:      console.error('‚ùå Failed to initialize Azure OpenAI Service:', error);
./lib/services/azure-openai-service.ts:211:      throw new Error('Azure OpenAI Service not initialized');
./lib/services/azure-openai-service.ts:315:      throw new Error('Azure OpenAI Service not initialized');
./lib/services/azure-openai-service.ts:547:      throw new Error('Azure OpenAI Service not initialized');
./lib/services/azure-openai-service.ts:608:      throw new Error('Azure OpenAI Service not initialized');
./lib/services/azure-openai-service.ts:639:   * Tailor resume based on job description using Azure OpenAI
./lib/services/azure-openai-service.ts:643:      throw new Error('Azure OpenAI Service not initialized');
./lib/services/azure-openai-service.ts:702:      throw new Error('Azure OpenAI Service not initialized');
./lib/services/azure-openai-service.ts:738:      throw new Error('Azure OpenAI Service not initialized');
./lib/services/azure-openai-service.ts:769:    console.log('üßπ Azure OpenAI Service disposed');
./lib/services/azure-openai-service.ts:774:export const azureOpenAIService = new AzureOpenAIService();
./lib/services/azure-speech-service.ts:1:import * as SpeechSDK from 'microsoft-cognitiveservices-speech-sdk';
./lib/services/azure-speech-service.ts:2:import { fetchAzureSecrets } from '@/lib/azure-config';
./lib/services/azure-speech-service.ts:16:export class AzureSpeechService {
./lib/services/azure-speech-service.ts:23:   * Initialize the Azure Speech Service
./lib/services/azure-speech-service.ts:27:      const secrets = await fetchAzureSecrets();
./lib/services/azure-speech-service.ts:30:        console.warn('‚ö†Ô∏è Azure Speech credentials not available');
./lib/services/azure-speech-service.ts:53:      console.log('‚úÖ Azure Speech Service initialized');
./lib/services/azure-speech-service.ts:56:      console.error('‚ùå Failed to initialize Azure Speech Service:', error);
./lib/services/azure-speech-service.ts:69:      console.error('‚ùå Azure Speech Service not initialized');
./lib/services/azure-speech-service.ts:136:      console.error('‚ùå Azure Speech Service not initialized');
./lib/services/azure-speech-service.ts:212:   * Process audio with Azure Speech using continuous recognition for better silence handling
./lib/services/azure-speech-service.ts:214:  async processAudioWithAzureSpeech(audioBuffer: ArrayBuffer): Promise<SpeechRecognitionResult | null> {
./lib/services/azure-speech-service.ts:216:      console.error('‚ùå Azure Speech Service not initialized');
./lib/services/azure-speech-service.ts:224:      pushStream.write(buffer as any); // Azure SDK expects ArrayBuffer but Uint8Array is compatible
./lib/services/azure-speech-service.ts:298:      console.error('‚ùå Failed to process audio with Azure Speech:', error);
./lib/services/azure-speech-service.ts:321:    console.log('üßπ Azure Speech Service disposed');
./lib/services/azure-speech-service.ts:326:export const azureSpeechService = new AzureSpeechService();
./lib/services/keyword-optimizer-service.ts:2:import { azureOpenAIService } from './azure-openai-service';
./lib/services/keyword-optimizer-service.ts:35:    // No initialization needed for Azure OpenAI service
./lib/services/keyword-optimizer-service.ts:55:      // Ensure Azure OpenAI service is initialized
./lib/services/keyword-optimizer-service.ts:56:      await azureOpenAIService.initialize();
./lib/services/keyword-optimizer-service.ts:62:      const analysisResult = await azureOpenAIService.generateCompletion(fullPrompt);
./lib/services/keyword-optimizer-service.ts:64:        throw new Error('No analysis result from Azure OpenAI');
./lib/services/keyword-optimizer-service.ts:86:      // Ensure Azure OpenAI service is initialized
./lib/services/keyword-optimizer-service.ts:87:      await azureOpenAIService.initialize();
./lib/services/keyword-optimizer-service.ts:97:        const optimizedContent = await azureOpenAIService.generateCompletion(fullPrompt);
./lib/services/keyword-optimizer-service.ts:134:      // Ensure Azure OpenAI service is initialized
./lib/services/keyword-optimizer-service.ts:135:      await azureOpenAIService.initialize();
./lib/services/keyword-optimizer-service.ts:141:      const result = await azureOpenAIService.generateCompletion(fullPrompt);
./lib/services/keyword-optimizer-service.ts:189:      // Ensure Azure OpenAI service is initialized
./lib/services/keyword-optimizer-service.ts:190:      await azureOpenAIService.initialize();
./lib/services/keyword-optimizer-service.ts:196:      const result = await azureOpenAIService.generateCompletion(fullPrompt);
./lib/services/azure-token-service.ts:1:import { DefaultAzureCredential } from '@azure/identity';
./lib/services/azure-token-service.ts:2:import { SecretClient } from '@azure/keyvault-secrets';
./lib/services/azure-token-service.ts:13:export interface AzureADConfig {
./lib/services/azure-token-service.ts:21:class AzureTokenService {
./lib/services/azure-token-service.ts:27:    const keyVaultUri = process.env.AZURE_KEY_VAULT_URI;
./lib/services/azure-token-service.ts:29:      throw new Error('AZURE_KEY_VAULT_URI environment variable is required');
./lib/services/azure-token-service.ts:32:    this.secretClient = new SecretClient(keyVaultUri, new DefaultAzureCredential());
./lib/services/azure-token-service.ts:34:    // Rate limiter for Azure Key Vault operations
./lib/services/azure-token-service.ts:45:   * Store OAuth tokens securely in Azure Key Vault
./lib/services/azure-token-service.ts:66:   * Retrieve OAuth tokens from Azure Key Vault
./lib/services/azure-token-service.ts:115:    config: AzureADConfig
./lib/services/azure-token-service.ts:163:    config: AzureADConfig
./lib/services/azure-token-service.ts:180:   * Store Azure AD app configuration
./lib/services/azure-token-service.ts:182:  async storeAzureADConfig(portal: 'linkedin' | 'wellfound', config: AzureADConfig): Promise<void> {
./lib/services/azure-token-service.ts:183:    const secretName = `${portal}-azure-ad-config`;
./lib/services/azure-token-service.ts:190:      console.log(`Stored Azure AD config for ${portal}`);
./lib/services/azure-token-service.ts:192:      console.error(`Error storing Azure AD config for ${portal}:`, error);
./lib/services/azure-token-service.ts:198:   * Get Azure AD app configuration
./lib/services/azure-token-service.ts:200:  async getAzureADConfig(portal: 'linkedin' | 'wellfound'): Promise<AzureADConfig | null> {
./lib/services/azure-token-service.ts:201:    const secretName = `${portal}-azure-ad-config`;
./lib/services/azure-token-service.ts:209:        return JSON.parse(result.value) as AzureADConfig;
./lib/services/azure-token-service.ts:214:      console.error(`Error retrieving Azure AD config for ${portal}:`, error);
./lib/services/azure-token-service.ts:264:let azureTokenServiceInstance: AzureTokenService | null = null;
./lib/services/azure-token-service.ts:266:export function getAzureTokenService(): AzureTokenService {
./lib/services/azure-token-service.ts:267:  if (!azureTokenServiceInstance) {
./lib/services/azure-token-service.ts:268:    azureTokenServiceInstance = new AzureTokenService();
./lib/services/azure-token-service.ts:270:  return azureTokenServiceInstance;
./lib/services/azure-token-service.ts:273:export { AzureTokenService };
./lib/services/azure-form-recognizer.ts:1:import { DocumentAnalysisClient, AzureKeyCredential } from '@azure/ai-form-recognizer';
./lib/services/azure-form-recognizer.ts:2:import { fetchAzureSecrets } from '@/azure/lib/azure-config';
./lib/services/azure-form-recognizer.ts:73:class AzureFormRecognizerService {
./lib/services/azure-form-recognizer.ts:78:   * Initialize the Azure Form Recognizer service
./lib/services/azure-form-recognizer.ts:82:      const secrets = await fetchAzureSecrets();
./lib/services/azure-form-recognizer.ts:84:      const endpoint = process.env.AZURE_FORM_RECOGNIZER_ENDPOINT || secrets.azureFormRecognizerEndpoint;
./lib/services/azure-form-recognizer.ts:85:      const apiKey = process.env.AZURE_FORM_RECOGNIZER_KEY || secrets.azureFormRecognizerKey;
./lib/services/azure-form-recognizer.ts:88:        console.warn('‚ö†Ô∏è Azure Form Recognizer credentials not found, will use OpenAI fallback');
./lib/services/azure-form-recognizer.ts:94:        new AzureKeyCredential(apiKey)
./lib/services/azure-form-recognizer.ts:97:      console.log('‚úÖ Azure Form Recognizer service initialized');
./lib/services/azure-form-recognizer.ts:100:      console.error('‚ùå Failed to initialize Azure Form Recognizer:', error);
./lib/services/azure-form-recognizer.ts:101:      logServerError(error as Error, { service: 'azure-form-recognizer', action: 'initialize' });
./lib/services/azure-form-recognizer.ts:114:   * Extract resume data from buffer using Azure Form Recognizer
./lib/services/azure-form-recognizer.ts:118:      throw new Error('Azure Form Recognizer service not initialized');
./lib/services/azure-form-recognizer.ts:122:      console.log('üîç Extracting resume data with Azure Form Recognizer...');
./lib/services/azure-form-recognizer.ts:146:      console.log('‚úÖ Resume data extracted successfully with Azure Form Recognizer');
./lib/services/azure-form-recognizer.ts:150:      console.error('Failed to extract resume data with Azure Form Recognizer:', error);
./lib/services/azure-form-recognizer.ts:152:        service: 'azure-form-recognizer', 
./lib/services/azure-form-recognizer.ts:302:      'azure', 'gcp', 'git', 'html', 'css', 'angular', 'vue', 'spring',
./lib/services/azure-form-recognizer.ts:330:export const azureFormRecognizer = new AzureFormRecognizerService();
./lib/services/user-targeting.ts:91:    autoApplyAzure: {
./lib/services/user-targeting.ts:93:      featureName: 'autoApplyAzure'
./lib/services/user-targeting.ts:107:      autoApplyAzure: this.isCurrentUserInRollout(UserTargetingService.ROLLOUT_CONFIGS.autoApplyAzure),
./lib/services/cloud-functions-verification.ts:3:import { azureFunctionsClient } from '@/lib/services/azure-functions-client';
./lib/services/cloud-functions-verification.ts:7: * Uses Azure Functions as primary, Firebase Cloud Functions as fallback
./lib/services/cloud-functions-verification.ts:12:  private readonly AZURE_FUNCTIONS_URL = process.env.AZURE_FUNCTIONS_URL;
./lib/services/cloud-functions-verification.ts:15:   * Verify token using Azure Functions (primary) or Firebase Cloud Functions (fallback)
./lib/services/cloud-functions-verification.ts:18:    // Try Azure Functions first
./lib/services/cloud-functions-verification.ts:19:    if (this.AZURE_FUNCTIONS_URL) {
./lib/services/cloud-functions-verification.ts:21:        console.log('Attempting token verification via Azure Function');
./lib/services/cloud-functions-verification.ts:22:        const azureResult = await azureFunctionsClient.verifyToken(idToken);
./lib/services/cloud-functions-verification.ts:24:        if (azureResult.valid && azureResult.decoded) {
./lib/services/cloud-functions-verification.ts:29:              decoded: azureResult.decoded,
./lib/services/cloud-functions-verification.ts:30:              method: 'azure-function'
./lib/services/cloud-functions-verification.ts:35:          throw new Error(azureResult.error || 'Azure Function verification failed');
./lib/services/cloud-functions-verification.ts:37:      } catch (azureError) {
./lib/services/cloud-functions-verification.ts:38:        console.warn('Azure Function verification failed, falling back to Firebase:', azureError);
./lib/services/cloud-functions-verification.ts:70:      console.error('Both Azure and Firebase Cloud Function verification failed:', error);
./lib/services/azure-app-config-service.ts:1:import { AppConfigurationClient } from '@azure/app-configuration';
./lib/services/azure-app-config-service.ts:2:import { DefaultAzureCredential } from '@azure/identity';
./lib/services/azure-app-config-service.ts:25:class AzureAppConfigService {
./lib/services/azure-app-config-service.ts:33:    this.connectionString = process.env.AZURE_APP_CONFIG_CONNECTION_STRING || '';
./lib/services/azure-app-config-service.ts:41:        const endpoint = process.env.AZURE_APP_CONFIG_ENDPOINT;
./lib/services/azure-app-config-service.ts:44:          this.client = new AppConfigurationClient(endpoint, new DefaultAzureCredential());
./lib/services/azure-app-config-service.ts:45:          console.log('‚úÖ Azure App Configuration initialized with managed identity');
./lib/services/azure-app-config-service.ts:47:          console.warn('‚ö†Ô∏è Azure App Configuration not configured - no connection string or endpoint provided');
./lib/services/azure-app-config-service.ts:53:        console.log('‚úÖ Azure App Configuration initialized with connection string');
./lib/services/azure-app-config-service.ts:58:      console.error('‚ùå Failed to initialize Azure App Configuration:', error);
./lib/services/azure-app-config-service.ts:59:      logServerError(error as Error, { service: 'azure-app-config', action: 'initialize' });
./lib/services/azure-app-config-service.ts:71:      console.warn('Azure App Configuration not available');
./lib/services/azure-app-config-service.ts:104:        service: 'azure-app-config', 
./lib/services/azure-app-config-service.ts:155:      console.warn('Azure App Configuration not available');
./lib/services/azure-app-config-service.ts:173:        service: 'azure-app-config', 
./lib/services/azure-app-config-service.ts:187:      console.warn('Azure App Configuration not available');
./lib/services/azure-app-config-service.ts:250:        service: 'azure-app-config', 
./lib/services/azure-app-config-service.ts:264:      console.warn('Azure App Configuration not available');
./lib/services/azure-app-config-service.ts:287:        service: 'azure-app-config', 
./lib/services/azure-app-config-service.ts:301:      throw new Error('Azure App Configuration not available');
./lib/services/azure-app-config-service.ts:320:        service: 'azure-app-config', 
./lib/services/azure-app-config-service.ts:334:      throw new Error('Azure App Configuration not available');
./lib/services/azure-app-config-service.ts:348:        service: 'azure-app-config', 
./lib/services/azure-app-config-service.ts:423:    console.log('‚úÖ Azure App Configuration cache cleared');
./lib/services/azure-app-config-service.ts:462:      console.error('Azure App Configuration health check failed:', error);
./lib/services/azure-app-config-service.ts:469:export const azureAppConfigService = new AzureAppConfigService();
./lib/services/azure-app-config-service.ts:470:export default azureAppConfigService;
./lib/services/azure-functions-client.ts:2: * Azure Functions Client
./lib/services/azure-functions-client.ts:4: * This service provides a client interface for interacting with Azure Functions
./lib/services/azure-functions-client.ts:8:// import { QueueServiceClient } from '@azure/storage-queue';
./lib/services/azure-functions-client.ts:75:export class AzureFunctionsClient {
./lib/services/azure-functions-client.ts:81:    this.functionAppUrl = process.env.AZURE_FUNCTIONS_URL || '';
./lib/services/azure-functions-client.ts:82:    this.functionKey = process.env.AZURE_FUNCTIONS_KEY || '';
./lib/services/azure-functions-client.ts:85:    const storageConnectionString = process.env.AZURE_STORAGE_CONNECTION_STRING;
./lib/services/azure-functions-client.ts:281:   * Health check for Azure Functions
./lib/services/azure-functions-client.ts:308:   * Verify Firebase ID token using Azure Function
./lib/services/azure-functions-client.ts:338:   * Create session cookie using Azure Function
./lib/services/azure-functions-client.ts:372:   * Request GDPR data deletion using Azure Function
./lib/services/azure-functions-client.ts:469:export const azureFunctionsClient = new AzureFunctionsClient();
./lib/services/azure-functions-client.ts:473:import { azureFunctionsClient } from '@/lib/services/azure-functions-client';
./lib/services/azure-functions-client.ts:477:const tokenResult = await azureFunctionsClient.verifyToken(idToken);
./lib/services/azure-functions-client.ts:483:const sessionResult = await azureFunctionsClient.createSessionCookie(idToken, 24 * 60 * 60 * 1000);
./lib/services/azure-functions-client.ts:490:const deletionResult = await azureFunctionsClient.requestGDPRDeletion(
./lib/services/azure-functions-client.ts:498:await azureFunctionsClient.triggerJobSearch({
./lib/services/azure-functions-client.ts:512:await azureFunctionsClient.enableAutoApply('user123', {
./lib/services/azure-functions-client.ts:520:await azureFunctionsClient.queueJobApplication({
./lib/services/azure-application-insights-service.ts:33:class AzureApplicationInsightsService {
./lib/services/azure-application-insights-service.ts:40:    this.instrumentationKey = process.env.AZURE_APPLICATION_INSIGHTS_INSTRUMENTATION_KEY || '';
./lib/services/azure-application-insights-service.ts:41:    this.connectionString = process.env.AZURE_APPLICATION_INSIGHTS_CONNECTION_STRING || '';
./lib/services/azure-application-insights-service.ts:49:        console.warn('‚ö†Ô∏è Azure Application Insights not configured - missing connection string and instrumentation key');
./lib/services/azure-application-insights-service.ts:76:      console.log('‚úÖ Azure Application Insights initialized');
./lib/services/azure-application-insights-service.ts:78:      console.error('‚ùå Failed to initialize Azure Application Insights:', error);
./lib/services/azure-application-insights-service.ts:90:      console.warn('Azure Application Insights not available');
./lib/services/azure-application-insights-service.ts:114:      console.warn('Azure Application Insights not available');
./lib/services/azure-application-insights-service.ts:254:      console.warn('Azure Application Insights not available');
./lib/services/azure-application-insights-service.ts:281:      console.warn('Azure Application Insights not available');
./lib/services/azure-application-insights-service.ts:307:      console.warn('Azure Application Insights not available');
./lib/services/azure-application-insights-service.ts:333:      console.warn('Azure Application Insights not available');
./lib/services/azure-application-insights-service.ts:360:      console.warn('Azure Application Insights not available');
./lib/services/azure-application-insights-service.ts:387:      console.warn('Azure Application Insights not available');
./lib/services/azure-application-insights-service.ts:492:      console.error('Azure Application Insights health check failed:', error);
./lib/services/azure-application-insights-service.ts:499:export const azureApplicationInsights = new AzureApplicationInsightsService();
./lib/services/azure-application-insights-service.ts:500:export default azureApplicationInsights;
./lib/azure-config.ts:1:import { DefaultAzureCredential } from '@azure/identity';
./lib/azure-config.ts:2:import { SecretClient } from '@azure/keyvault-secrets';
./lib/azure-config.ts:4:// Azure Key Vault configuration
./lib/azure-config.ts:5:const AZURE_KEY_VAULT_URI = process.env.AZURE_KEY_VAULT_URI || 'https://prepbettr-keyvault-083.vault.azure.net/';
./lib/azure-config.ts:7:interface AzureSecrets {
./lib/azure-config.ts:10:  azureOpenAIKey: string;
./lib/azure-config.ts:11:  azureOpenAIEndpoint: string;
./lib/azure-config.ts:12:  azureOpenAIDeployment: string;
./lib/azure-config.ts:18:  // Additional Azure services
./lib/azure-config.ts:19:  azureFormRecognizerKey?: string;
./lib/azure-config.ts:20:  azureFormRecognizerEndpoint?: string;
./lib/azure-config.ts:21:  azureStorageAccountName?: string;
./lib/azure-config.ts:22:  azureStorageAccountKey?: string;
./lib/azure-config.ts:25:let cachedSecrets: AzureSecrets | null = null;
./lib/azure-config.ts:28: * Initialize Azure Key Vault client
./lib/azure-config.ts:31:  if (!AZURE_KEY_VAULT_URI) {
./lib/azure-config.ts:32:    throw new Error('AZURE_KEY_VAULT_URI environment variable is required');
./lib/azure-config.ts:35:  const credential = new DefaultAzureCredential();
./lib/azure-config.ts:36:  return new SecretClient(AZURE_KEY_VAULT_URI, credential);
./lib/azure-config.ts:40: * Clear cached secrets (useful when Azure keys are renewed)
./lib/azure-config.ts:42:export function clearAzureSecretsCache(): void {
./lib/azure-config.ts:43:  console.log('üîÑ Clearing Azure secrets cache...');
./lib/azure-config.ts:48: * Fetch secrets from Azure Key Vault
./lib/azure-config.ts:50:export async function fetchAzureSecrets(forceRefresh: boolean = false): Promise<AzureSecrets> {
./lib/azure-config.ts:53:    clearAzureSecretsCache();
./lib/azure-config.ts:62:    console.log('üîë Fetching secrets from Azure Key Vault...');
./lib/azure-config.ts:76:      speechKey, speechEndpoint, azureOpenAIKey, azureOpenAIEndpoint, azureOpenAIDeployment,
./lib/azure-config.ts:78:      azureFormRecognizerKey, azureFormRecognizerEndpoint, azureStorageAccountName, azureStorageAccountKey
./lib/azure-config.ts:82:      client.getSecret('azure-openai-key'),
./lib/azure-config.ts:83:      client.getSecret('azure-openai-endpoint'),
./lib/azure-config.ts:84:      client.getSecret('azure-openai-deployment'),
./lib/azure-config.ts:89:      getOptionalSecret('azure-form-recognizer-key'),
./lib/azure-config.ts:90:      getOptionalSecret('azure-form-recognizer-endpoint'),
./lib/azure-config.ts:91:      getOptionalSecret('azure-storage-account-name'),
./lib/azure-config.ts:92:      getOptionalSecret('azure-storage-account-key')
./lib/azure-config.ts:95:    // Validate only Azure-related secrets (Firebase can come from env vars)
./lib/azure-config.ts:96:    const requiredAzureSecrets = {
./lib/azure-config.ts:99:      azureOpenAIKey: azureOpenAIKey?.value,
./lib/azure-config.ts:100:      azureOpenAIEndpoint: azureOpenAIEndpoint?.value,
./lib/azure-config.ts:101:      azureOpenAIDeployment: azureOpenAIDeployment?.value
./lib/azure-config.ts:104:    const missingAzureSecrets = Object.entries(requiredAzureSecrets)
./lib/azure-config.ts:108:    if (missingAzureSecrets.length > 0) {
./lib/azure-config.ts:109:      throw new Error(`Required Azure secrets missing from Key Vault: ${missingAzureSecrets.join(', ')}`);
./lib/azure-config.ts:115:      azureOpenAIKey: azureOpenAIKey.value!,
./lib/azure-config.ts:116:      azureOpenAIEndpoint: azureOpenAIEndpoint.value!,
./lib/azure-config.ts:117:      azureOpenAIDeployment: azureOpenAIDeployment.value!,
./lib/azure-config.ts:122:      azureFormRecognizerKey: azureFormRecognizerKey?.value,
./lib/azure-config.ts:123:      azureFormRecognizerEndpoint: azureFormRecognizerEndpoint?.value,
./lib/azure-config.ts:124:      azureStorageAccountName: azureStorageAccountName?.value,
./lib/azure-config.ts:125:      azureStorageAccountKey: azureStorageAccountKey?.value
./lib/azure-config.ts:128:    console.log('‚úÖ Azure secrets loaded successfully');
./lib/azure-config.ts:132:    console.error('‚ùå Failed to fetch Azure secrets:', error);
./lib/azure-config.ts:136:    const fallbackSecrets: AzureSecrets = {
./lib/azure-config.ts:137:      speechKey: process.env.AZURE_SPEECH_KEY || process.env.SPEECH_KEY || '',
./lib/azure-config.ts:139:      azureOpenAIKey: process.env.AZURE_OPENAI_API_KEY || process.env.AZURE_OPENAI_KEY || '',
./lib/azure-config.ts:140:      azureOpenAIEndpoint: process.env.AZURE_OPENAI_ENDPOINT || '',
./lib/azure-config.ts:141:      azureOpenAIDeployment: process.env.AZURE_OPENAI_DEPLOYMENT || '',
./lib/azure-config.ts:148:      azureFormRecognizerKey: process.env.AZURE_FORM_RECOGNIZER_KEY,
./lib/azure-config.ts:149:      azureFormRecognizerEndpoint: process.env.AZURE_FORM_RECOGNIZER_ENDPOINT,
./lib/azure-config.ts:150:      azureStorageAccountName: process.env.AZURE_STORAGE_ACCOUNT_NAME,
./lib/azure-config.ts:151:      azureStorageAccountKey: process.env.AZURE_STORAGE_ACCOUNT_KEY
./lib/azure-config.ts:157:    if (!fallbackSecrets.azureOpenAIKey) missingCritical.push('AZURE_OPENAI_KEY');
./lib/azure-config.ts:177: * Initialize environment variables from Azure Key Vault
./lib/azure-config.ts:180:export async function initializeAzureEnvironment(): Promise<void> {
./lib/azure-config.ts:182:    const secrets = await fetchAzureSecrets();
./lib/azure-config.ts:184:    // Set Azure service environment variables
./lib/azure-config.ts:190:    // Set Azure OpenAI environment variables
./lib/azure-config.ts:191:    process.env.AZURE_OPENAI_KEY = secrets.azureOpenAIKey;
./lib/azure-config.ts:192:    process.env.AZURE_OPENAI_ENDPOINT = secrets.azureOpenAIEndpoint;
./lib/azure-config.ts:193:    process.env.AZURE_OPENAI_DEPLOYMENT = secrets.azureOpenAIDeployment;
./lib/azure-config.ts:194:    process.env.NEXT_PUBLIC_AZURE_OPENAI_API_KEY = secrets.azureOpenAIKey;
./lib/azure-config.ts:195:    process.env.NEXT_PUBLIC_AZURE_OPENAI_ENDPOINT = secrets.azureOpenAIEndpoint;
./lib/azure-config.ts:196:    process.env.NEXT_PUBLIC_AZURE_OPENAI_DEPLOYMENT = secrets.azureOpenAIDeployment;
./lib/azure-config.ts:207:      console.log('üîë Firebase client key set from Azure Key Vault');
./lib/azure-config.ts:209:      console.warn('‚ö†Ô∏è Firebase client key not found in Azure Key Vault');
./lib/azure-config.ts:212:    // Set optional Azure services if available
./lib/azure-config.ts:213:    if (secrets.azureFormRecognizerKey) {
./lib/azure-config.ts:214:      process.env.AZURE_FORM_RECOGNIZER_KEY = secrets.azureFormRecognizerKey;
./lib/azure-config.ts:216:    if (secrets.azureFormRecognizerEndpoint) {
./lib/azure-config.ts:217:      process.env.AZURE_FORM_RECOGNIZER_ENDPOINT = secrets.azureFormRecognizerEndpoint;
./lib/azure-config.ts:219:    if (secrets.azureStorageAccountName) {
./lib/azure-config.ts:220:      process.env.AZURE_STORAGE_ACCOUNT_NAME = secrets.azureStorageAccountName;
./lib/azure-config.ts:222:    if (secrets.azureStorageAccountKey) {
./lib/azure-config.ts:223:      process.env.AZURE_STORAGE_ACCOUNT_KEY = secrets.azureStorageAccountKey;
./lib/azure-config.ts:226:    console.log('üåü Azure environment initialized successfully');
./lib/azure-config.ts:228:    console.error('‚ùå Failed to initialize Azure environment:', error);
./lib/azure-config.ts:234: * Get current Azure configuration (for debugging)
./lib/azure-config.ts:236:export function getAzureConfig() {
./lib/azure-config.ts:238:    keyVaultUri: AZURE_KEY_VAULT_URI,
./lib/azure-config.ts:243:      azureOpenAIKey: !!process.env.AZURE_OPENAI_KEY,
./lib/azure-config.ts:244:      azureOpenAIEndpoint: !!process.env.AZURE_OPENAI_ENDPOINT,
./lib/azure-config.ts:245:      azureOpenAIDeployment: !!process.env.AZURE_OPENAI_DEPLOYMENT
./test-voice-interview.js:454:                 msg.text.toLowerCase().includes('azure'))
./playwright.config.ts:21:    baseURL: process.env.NODE_ENV === 'production' ? 'https://prepbettr.azurewebsites.net' : 'http://localhost:3000',
./e2e/helpers/test-utils.ts:6:  const baseURL = isProduction ? 'https://prepbettr.azurewebsites.net' : 'http://localhost:3000';
./test-firebase-oauth-flow.js:4: * Test script to validate Firebase OAuth configuration for Azure hosting at prepbettr.com
./test-firebase-oauth-flow.js:7: * 2. Firebase client key is properly loaded from Azure Key Vault
./test-firebase-oauth-flow.js:15:  console.log('üîç Testing Firebase OAuth Configuration for Azure hosting...\n');
./test-firebase-oauth-flow.js:28:    // Verify authDomain is Firebase project domain (not Azure domain)
./test-firebase-oauth-flow.js:38:      console.log('‚úÖ Firebase client API key properly loaded from Azure Key Vault');
./test-firebase-oauth-flow.js:104:    console.log('‚úÖ Azure App Service: https://prepbettr.com');
./test-firebase-oauth-flow.js:111:    console.log('\nüéâ Firebase OAuth configuration is correctly set up for Azure hosting!');
./pages/api/upload-pdf.ts:5:import { azureOpenAIService } from '@/lib/services/azure-openai-service';
./pages/api/upload-pdf.ts:16:// Azure OpenAI Service will be initialized in the handler
./pages/api/upload-pdf.ts:64:    // Initialize Azure OpenAI Service
./pages/api/upload-pdf.ts:65:    const isAzureInitialized = await azureOpenAIService.initialize();
./pages/api/upload-pdf.ts:66:    if (!isAzureInitialized) {
./pages/api/upload-pdf.ts:67:      console.error('Azure OpenAI service initialization failed');
./pages/api/upload-pdf.ts:70:        details: process.env.NODE_ENV === 'development' ? 'Azure OpenAI service not configured' : undefined
./pages/api/upload-pdf.ts:123:    // Generate questions using Azure OpenAI
./pages/api/upload-pdf.ts:124:    const questions = await azureOpenAIService.generateQuestions(resumeInfo);
./test-azure-secrets.js:4: * Test Azure Secret Configuration
./test-azure-secrets.js:6: * This script tests the updated Azure configuration to ensure 
./test-azure-secrets.js:18:    console.log('üß™ Testing Azure Secret Configuration');
./test-azure-secrets.js:23:    const module = await import('./lib/azure-config.js');
./test-azure-secrets.js:24:    const { fetchAzureSecrets, initializeAzureEnvironment, getAzureConfig } = module;
./test-azure-secrets.js:28:    const secrets = await fetchAzureSecrets();
./test-azure-secrets.js:31:    console.log('   Azure OpenAI key:', secrets.azureOpenAIKey ? '‚úÖ SET' : '‚ùå MISSING');
./test-azure-secrets.js:36:    await initializeAzureEnvironment();
./test-azure-secrets.js:37:    const config = getAzureConfig();
./test-azure-secrets.js:42:    console.log('üéâ All tests passed! Azure secrets are working correctly.');
