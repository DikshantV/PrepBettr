{
  "imports": [
    {
      "file": "./app/layout.tsx",
      "line": 9,
      "import": "@/lib/azure-startup",
      "fullStatement": "import { initializeAzureServices } from '@/lib/azure-startup';"
    },
    {
      "file": "./app/api/config/firebase/route.ts",
      "line": 2,
      "import": "@/lib/azure-config",
      "fullStatement": "import { initializeAzureEnvironment } from '@/lib/azure-config';"
    },
    {
      "file": "./azure/lib/azure-app-config.ts",
      "line": 8,
      "import": "@azure/app-configuration",
      "fullStatement": "import { AppConfigurationClient } from '@azure/app-configuration';"
    },
    {
      "file": "./azure/lib/azure-app-config.ts",
      "line": 9,
      "import": "@azure/identity",
      "fullStatement": "import { DefaultAzureCredential } from '@azure/identity';"
    },
    {
      "file": "./azure/lib/services/azure-openai-service.test.ts",
      "line": 1,
      "import": "./azure-openai-service",
      "fullStatement": "import { AzureOpenAIService } from './azure-openai-service';"
    },
    {
      "file": "./azure/lib/services/azure-openai-service.ts",
      "line": 2,
      "import": "../../../lib/azure-config-browser",
      "fullStatement": "import { fetchAzureSecrets } from '../../../lib/azure-config-browser';"
    },
    {
      "file": "./azure/lib/services/azure-speech-service.ts",
      "line": 1,
      "import": "microsoft-cognitiveservices-speech-sdk",
      "fullStatement": "import * as SpeechSDK from 'microsoft-cognitiveservices-speech-sdk';"
    },
    {
      "file": "./azure/lib/services/azure-speech-service.ts",
      "line": 2,
      "import": "../../../lib/azure-config-browser",
      "fullStatement": "import { fetchAzureSecrets } from '../../../lib/azure-config-browser';"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 1,
      "import": "@azure/identity",
      "fullStatement": "import { DefaultAzureCredential } from '@azure/identity';"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 2,
      "import": "@azure/keyvault-secrets",
      "fullStatement": "import { SecretClient } from '@azure/keyvault-secrets';"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 2,
      "import": "../lib/services/azure-openai-service",
      "fullStatement": "import { azureOpenAIService } from '../lib/services/azure-openai-service';"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 3,
      "import": "../azure/lib/services/azure-speech-service",
      "fullStatement": "import { azureSpeechService } from '../azure/lib/services/azure-speech-service';"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 4,
      "import": "../lib/azure-config",
      "fullStatement": "import { fetchAzureSecrets, getAzureConfig } from '../lib/azure-config';"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 5,
      "import": "../lib/azure-config-browser",
      "fullStatement": "import { fetchAzureSecrets as fetchBrowserSecrets } from '../lib/azure-config-browser';"
    },
    {
      "file": "./tests/api/resume/tailor/api.test.ts",
      "line": 4,
      "import": "@/lib/services/azure-openai-service",
      "fullStatement": "import { azureOpenAIService } from '@/lib/services/azure-openai-service';"
    },
    {
      "file": "./portals/linkedin.ts",
      "line": 2,
      "import": "../lib/services/azure-token-service",
      "fullStatement": "import { getAzureTokenService, AzureADConfig } from '../lib/services/azure-token-service';"
    },
    {
      "file": "./portals/wellfound.ts",
      "line": 2,
      "import": "../lib/services/azure-token-service",
      "fullStatement": "import { getAzureTokenService, AzureADConfig } from '../lib/services/azure-token-service';"
    },
    {
      "file": "./scripts/backfill-mock-interviews.ts",
      "line": 29,
      "import": "../lib/azure-config",
      "fullStatement": "import { initializeAzureEnvironment } from '../lib/azure-config';"
    },
    {
      "file": "./scripts/monitor-production-metrics.js",
      "line": 10,
      "import": "@azure/identity",
      "fullStatement": "import { DefaultAzureCredential } from '@azure/identity';"
    },
    {
      "file": "./scripts/monitor-production-metrics.js",
      "line": 11,
      "import": "@azure/monitor-query",
      "fullStatement": "import { LogsQueryClient, MetricsQueryClient, MetricsQueryResult } from '@azure/monitor-query';"
    },
    {
      "file": "./scripts/voice-system-test.ts",
      "line": 8,
      "import": "../lib/services/azure-speech-service",
      "fullStatement": "import { azureSpeechService } from '../lib/services/azure-speech-service';"
    },
    {
      "file": "./scripts/voice-system-test.ts",
      "line": 9,
      "import": "../lib/services/azure-openai-service",
      "fullStatement": "import { azureOpenAIService } from '../lib/services/azure-openai-service';"
    },
    {
      "file": "./scripts/fetch-build-config.ts",
      "line": 12,
      "import": "@azure/app-configuration",
      "fullStatement": "import { AppConfigurationClient, ConfigurationSetting } from '@azure/app-configuration';"
    },
    {
      "file": "./scripts/fetch-build-config.ts",
      "line": 13,
      "import": "@azure/identity",
      "fullStatement": "import { DefaultAzureCredential } from '@azure/identity';"
    },
    {
      "file": "./scripts/check-azure-health.ts",
      "line": 13,
      "import": "../lib/services/azure-openai-service",
      "fullStatement": "import { azureOpenAIService } from '../lib/services/azure-openai-service';"
    },
    {
      "file": "./scripts/check-azure-health.ts",
      "line": 14,
      "import": "../azure/lib/services/azure-speech-service",
      "fullStatement": "import { azureSpeechService } from '../azure/lib/services/azure-speech-service';"
    },
    {
      "file": "./scripts/check-azure-health.ts",
      "line": 15,
      "import": "../lib/azure-config",
      "fullStatement": "import { fetchAzureSecrets, getAzureConfig } from '../lib/azure-config';"
    },
    {
      "file": "./scripts/check-azure-health.ts",
      "line": 16,
      "import": "../lib/azure-config-browser",
      "fullStatement": "import { fetchAzureSecrets as fetchBrowserSecrets } from '../lib/azure-config-browser';"
    },
    {
      "file": "./scripts/test-azure-app-config.ts",
      "line": 10,
      "import": "@/lib/services/azure-app-config",
      "fullStatement": "import { azureAppConfigService } from '@/lib/services/azure-app-config';"
    },
    {
      "file": "./scripts/test-resume-processing.ts",
      "line": 4,
      "import": "../lib/services/azure-blob-storage",
      "fullStatement": "import { azureBlobStorage } from '../lib/services/azure-blob-storage';"
    },
    {
      "file": "./scripts/test-resume-processing.ts",
      "line": 5,
      "import": "../lib/services/azure-form-recognizer",
      "fullStatement": "import { azureFormRecognizer } from '../lib/services/azure-form-recognizer';"
    },
    {
      "file": "./scripts/setup-azure-app-config-production.ts",
      "line": 12,
      "import": "@azure/app-configuration",
      "fullStatement": "import { AppConfigurationClient } from '@azure/app-configuration';"
    },
    {
      "file": "./scripts/setup-azure-app-config-production.ts",
      "line": 13,
      "import": "@azure/identity",
      "fullStatement": "import { DefaultAzureCredential } from '@azure/identity';"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 13,
      "import": "../azure/lib/azure-config",
      "fullStatement": "import { initializeAzureEnvironment, getAzureConfig } from '../azure/lib/azure-config';"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 14,
      "import": "../lib/services/azure-openai-service",
      "fullStatement": "import { azureOpenAIService } from '../lib/services/azure-openai-service';"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 15,
      "import": "../lib/services/azure-openai-enhanced",
      "fullStatement": "import { enhancedAzureOpenAIService } from '../lib/services/azure-openai-enhanced';"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 16,
      "import": "../lib/ai/azureOpenAI",
      "fullStatement": "import { AzureOpenAIAdapter } from '../lib/ai/azureOpenAI';"
    },
    {
      "file": "./lib/utils/resume-parser.ts",
      "line": 2,
      "import": "../services/azure-openai-service",
      "fullStatement": "import { azureOpenAIService } from '../services/azure-openai-service';"
    },
    {
      "file": "./lib/audio/micCapture.ts",
      "line": 1,
      "import": "@/lib/services/azure-speech-service",
      "fullStatement": "import { azureSpeechService } from '@/lib/services/azure-speech-service';"
    },
    {
      "file": "./lib/ai/__tests__/index.test.ts",
      "line": 14,
      "import": "../azureOpenAI",
      "fullStatement": "import { AzureOpenAIAdapter } from '../azureOpenAI';"
    },
    {
      "file": "./lib/ai/__tests__/azureOpenAI.test.ts",
      "line": 5,
      "import": "../azureOpenAI",
      "fullStatement": "import { AzureOpenAIAdapter } from '../azureOpenAI';"
    },
    {
      "file": "./lib/ai/__tests__/azureOpenAI.test.ts",
      "line": 6,
      "import": "@/lib/services/azure-openai-service",
      "fullStatement": "import { azureOpenAIService } from '@/lib/services/azure-openai-service';"
    },
    {
      "file": "./lib/ai/index.ts",
      "line": 8,
      "import": "./azureOpenAI",
      "fullStatement": "import { AzureOpenAIAdapter } from './azureOpenAI';"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 9,
      "import": "@/lib/services/azure-openai-service",
      "fullStatement": "import { azureOpenAIService } from '@/lib/services/azure-openai-service';"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 10,
      "import": "@/lib/services/azure-openai-enhanced",
      "fullStatement": "import { enhancedAzureOpenAIService } from '@/lib/services/azure-openai-enhanced';"
    },
    {
      "file": "./lib/azure-startup.ts",
      "line": 1,
      "import": "./azure-config",
      "fullStatement": "import { initializeAzureEnvironment, getAzureConfig } from './azure-config';"
    },
    {
      "file": "./lib/services/feature-flags.ts",
      "line": 1,
      "import": "./azure-app-config",
      "fullStatement": "import { azureAppConfigService, FeatureFlags } from './azure-app-config';"
    },
    {
      "file": "./lib/services/azure-cosmos-service.ts",
      "line": 1,
      "import": "@azure/cosmos",
      "fullStatement": "import { CosmosClient, Database, Container } from '@azure/cosmos';"
    },
    {
      "file": "./lib/services/azure-cosmos-service.ts",
      "line": 2,
      "import": "@azure/identity",
      "fullStatement": "import { DefaultAzureCredential } from '@azure/identity';"
    },
    {
      "file": "./lib/services/azure-openai-enhanced.ts",
      "line": 10,
      "import": "@/lib/azure-config-browser",
      "fullStatement": "import { fetchAzureSecrets } from '@/lib/azure-config-browser';"
    },
    {
      "file": "./lib/services/azure-ai-service.ts",
      "line": 1,
      "import": "@azure/identity",
      "fullStatement": "import { DefaultAzureCredential } from '@azure/identity';"
    },
    {
      "file": "./lib/services/azure-ai-service.ts",
      "line": 2,
      "import": "@azure/core-auth",
      "fullStatement": "import { AzureKeyCredential } from '@azure/core-auth';"
    },
    {
      "file": "./lib/services/azure-ai-service.ts",
      "line": 3,
      "import": "@azure/ai-form-recognizer",
      "fullStatement": "import { DocumentAnalysisClient } from '@azure/ai-form-recognizer';"
    },
    {
      "file": "./lib/services/azure-openai-service.test.ts",
      "line": 1,
      "import": "./azure-openai-service",
      "fullStatement": "import { AzureOpenAIService } from './azure-openai-service';"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 1,
      "import": "@azure/storage-blob",
      "fullStatement": "import { BlobServiceClient, BlobSASPermissions, generateBlobSASQueryParameters, StorageSharedKeyCredential, BlobSASSignatureValues, SASProtocol } from '@azure/storage-blob';"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 2,
      "import": "@/azure/lib/azure-config",
      "fullStatement": "import { fetchAzureSecrets } from '@/azure/lib/azure-config';"
    },
    {
      "file": "./lib/services/azure-gdpr-service.ts",
      "line": 1,
      "import": "@azure/cosmos",
      "fullStatement": "import { CosmosClient, Container, Database } from '@azure/cosmos';"
    },
    {
      "file": "./lib/services/azure-gdpr-service.ts",
      "line": 2,
      "import": "@azure/storage-blob",
      "fullStatement": "import { BlobServiceClient, ContainerClient } from '@azure/storage-blob';"
    },
    {
      "file": "./lib/services/azure-gdpr-service.ts",
      "line": 3,
      "import": "@azure/identity",
      "fullStatement": "import { DefaultAzureCredential } from '@azure/identity';"
    },
    {
      "file": "./lib/services/azure-gdpr-service.ts",
      "line": 4,
      "import": "@azure/keyvault-secrets",
      "fullStatement": "import { SecretClient } from '@azure/keyvault-secrets';"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 3,
      "import": "./azure-blob-storage",
      "fullStatement": "import { azureBlobStorage } from './azure-blob-storage';"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 4,
      "import": "./azure-form-recognizer",
      "fullStatement": "import { azureFormRecognizer, ExtractedResumeData } from './azure-form-recognizer';"
    },
    {
      "file": "./lib/services/azure-app-config.ts",
      "line": 8,
      "import": "@azure/app-configuration",
      "fullStatement": "import { AppConfigurationClient } from '@azure/app-configuration';"
    },
    {
      "file": "./lib/services/azure-app-config.ts",
      "line": 9,
      "import": "@azure/identity",
      "fullStatement": "import { DefaultAzureCredential } from '@azure/identity';"
    },
    {
      "file": "./lib/services/azure-app-config.ts",
      "line": 10,
      "import": "@/lib/azure-config-browser",
      "fullStatement": "import { fetchAzureSecrets } from '@/lib/azure-config-browser';"
    },
    {
      "file": "./lib/services/mock-interview.service.ts",
      "line": 9,
      "import": "@/lib/ai/azureOpenAI",
      "fullStatement": "import { AzureOpenAIAdapter } from '@/lib/ai/azureOpenAI';"
    },
    {
      "file": "./lib/services/gdpr-compliance-service.ts",
      "line": 2,
      "import": "@/lib/services/azure-blob-storage",
      "fullStatement": "import { azureBlobStorage } from '@/lib/services/azure-blob-storage';"
    },
    {
      "file": "./lib/services/notification-service.ts",
      "line": 3,
      "import": "./azure-cosmos-service",
      "fullStatement": "import { azureCosmosService } from './azure-cosmos-service';"
    },
    {
      "file": "./lib/services/error-budget-monitor.ts",
      "line": 1,
      "import": "./azure-cosmos-service",
      "fullStatement": "import { azureCosmosService } from './azure-cosmos-service';"
    },
    {
      "file": "./lib/services/azure-openai-service.ts",
      "line": 2,
      "import": "@/lib/azure-config",
      "fullStatement": "import { fetchAzureSecrets } from '@/lib/azure-config';"
    },
    {
      "file": "./lib/services/azure-speech-service.ts",
      "line": 1,
      "import": "microsoft-cognitiveservices-speech-sdk",
      "fullStatement": "import * as SpeechSDK from 'microsoft-cognitiveservices-speech-sdk';"
    },
    {
      "file": "./lib/services/azure-speech-service.ts",
      "line": 2,
      "import": "@/lib/azure-config",
      "fullStatement": "import { fetchAzureSecrets } from '@/lib/azure-config';"
    },
    {
      "file": "./lib/services/keyword-optimizer-service.ts",
      "line": 2,
      "import": "./azure-openai-service",
      "fullStatement": "import { azureOpenAIService } from './azure-openai-service';"
    },
    {
      "file": "./lib/services/azure-token-service.ts",
      "line": 1,
      "import": "@azure/identity",
      "fullStatement": "import { DefaultAzureCredential } from '@azure/identity';"
    },
    {
      "file": "./lib/services/azure-token-service.ts",
      "line": 2,
      "import": "@azure/keyvault-secrets",
      "fullStatement": "import { SecretClient } from '@azure/keyvault-secrets';"
    },
    {
      "file": "./lib/services/azure-form-recognizer.ts",
      "line": 1,
      "import": "@azure/ai-form-recognizer",
      "fullStatement": "import { DocumentAnalysisClient, AzureKeyCredential } from '@azure/ai-form-recognizer';"
    },
    {
      "file": "./lib/services/azure-form-recognizer.ts",
      "line": 2,
      "import": "@/azure/lib/azure-config",
      "fullStatement": "import { fetchAzureSecrets } from '@/azure/lib/azure-config';"
    },
    {
      "file": "./lib/services/cloud-functions-verification.ts",
      "line": 3,
      "import": "@/lib/services/azure-functions-client",
      "fullStatement": "import { azureFunctionsClient } from '@/lib/services/azure-functions-client';"
    },
    {
      "file": "./lib/services/azure-app-config-service.ts",
      "line": 1,
      "import": "@azure/app-configuration",
      "fullStatement": "import { AppConfigurationClient } from '@azure/app-configuration';"
    },
    {
      "file": "./lib/services/azure-app-config-service.ts",
      "line": 2,
      "import": "@azure/identity",
      "fullStatement": "import { DefaultAzureCredential } from '@azure/identity';"
    },
    {
      "file": "./lib/services/azure-functions-client.ts",
      "line": 8,
      "import": "@azure/storage-queue",
      "fullStatement": "// import { QueueServiceClient } from '@azure/storage-queue';"
    },
    {
      "file": "./lib/services/azure-functions-client.ts",
      "line": 473,
      "import": "@/lib/services/azure-functions-client",
      "fullStatement": "import { azureFunctionsClient } from '@/lib/services/azure-functions-client';"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 1,
      "import": "@azure/identity",
      "fullStatement": "import { DefaultAzureCredential } from '@azure/identity';"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 2,
      "import": "@azure/keyvault-secrets",
      "fullStatement": "import { SecretClient } from '@azure/keyvault-secrets';"
    },
    {
      "file": "./pages/api/upload-pdf.ts",
      "line": 5,
      "import": "@/lib/services/azure-openai-service",
      "fullStatement": "import { azureOpenAIService } from '@/lib/services/azure-openai-service';"
    }
  ],
  "services": [
    {
      "file": "./types/resume-tailoring.ts",
      "line": 236,
      "service": "openai",
      "content": "// Azure OpenAI API interfaces"
    },
    {
      "file": "./types/resume-tailoring.ts",
      "line": 237,
      "service": "openai",
      "content": "export interface AzureOpenAIAnalysisPrompt {"
    },
    {
      "file": "./types/resume-tailoring.ts",
      "line": 243,
      "service": "openai",
      "content": "export interface AzureOpenAIResponse {"
    },
    {
      "file": "./app/dashboard/settings/page.tsx",
      "line": 106,
      "service": "openai",
      "content": "Automatically apply to jobs using advanced Azure OpenAI integration"
    },
    {
      "file": "./azure/processScheduledDeletions/index.js",
      "line": 1,
      "service": "cosmos",
      "content": "const { CosmosClient } = require('@azure/cosmos');"
    },
    {
      "file": "./azure/followUpWorker/index.js",
      "line": 1,
      "service": "functions",
      "content": "const { app } = require('@azure/functions');"
    },
    {
      "file": "./azure/followUpWorker/index.js",
      "line": 5,
      "service": "openai",
      "content": "const { initializeAzureOpenAI, getAzureOpenAIClient } = require('../lib/azure-openai-client');"
    },
    {
      "file": "./azure/followUpWorker/index.js",
      "line": 261,
      "service": "openai",
      "content": "// Initialize Azure OpenAI client"
    },
    {
      "file": "./azure/followUpWorker/index.js",
      "line": 262,
      "service": "openai",
      "content": "await initializeAzureOpenAI();"
    },
    {
      "file": "./azure/followUpWorker/index.js",
      "line": 263,
      "service": "openai",
      "content": "const client = await getAzureOpenAIClient();"
    },
    {
      "file": "./azure/health/index.js",
      "line": 28,
      "service": "openai",
      "content": "azure_openai: !!process.env.AZURE_OPENAI_KEY,"
    },
    {
      "file": "./azure/onUserPlanChange/index.js",
      "line": 1,
      "service": "cosmos",
      "content": "const { CosmosClient } = require('@azure/cosmos');"
    },
    {
      "file": "./azure/TokenRefreshTimer/index.js",
      "line": 1,
      "service": "keyvault",
      "content": "const { SecretClient } = require('@azure/keyvault-secrets');"
    },
    {
      "file": "./azure/TokenRefreshTimer/index.js",
      "line": 2,
      "service": "identity",
      "content": "const { DefaultAzureCredential } = require('@azure/identity');"
    },
    {
      "file": "./azure/TokenRefreshTimer/index.js",
      "line": 19,
      "service": "keyvault",
      "content": "const secretClient = new SecretClient(keyVaultUri, new DefaultAzureCredential());"
    },
    {
      "file": "./azure/TokenRefreshTimer/index.js",
      "line": 51,
      "service": "keyvault",
      "content": "const configSecret = await secretClient.getSecret(`${portal}-azure-ad-config`);"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 2,
      "service": "keyvault",
      "content": "const { SecretClient } = require('@azure/keyvault-secrets');"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 3,
      "service": "identity",
      "content": "const { DefaultAzureCredential } = require('@azure/identity');"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 28,
      "service": "identity",
      "content": "new DefaultAzureCredential()"
    },
    {
      "file": "./azure/processGDPRScheduledDeletions/index.js",
      "line": 1,
      "service": "cosmos",
      "content": "const { CosmosClient } = require('@azure/cosmos');"
    },
    {
      "file": "./azure/processGDPRScheduledDeletions/index.js",
      "line": 2,
      "service": "storage",
      "content": "const { BlobServiceClient } = require('@azure/storage-blob');"
    },
    {
      "file": "./azure/processGDPRScheduledDeletions/index.js",
      "line": 3,
      "service": "identity",
      "content": "const { DefaultAzureCredential } = require('@azure/identity');"
    },
    {
      "file": "./azure/processGDPRScheduledDeletions/index.js",
      "line": 4,
      "service": "keyvault",
      "content": "const { SecretClient } = require('@azure/keyvault-secrets');"
    },
    {
      "file": "./azure/processGDPRScheduledDeletions/index.js",
      "line": 28,
      "service": "keyvault",
      "content": "? new SecretClient(process.env.AZURE_KEY_VAULT_URL, new DefaultAzureCredential())"
    },
    {
      "file": "./azure/applicationWorker/index.js",
      "line": 1,
      "service": "functions",
      "content": "const { app } = require('@azure/functions');"
    },
    {
      "file": "./azure/applicationWorker/index.js",
      "line": 8,
      "service": "openai",
      "content": "// Azure OpenAI client - will be initialized from Key Vault secrets"
    },
    {
      "file": "./azure/applicationWorker/index.js",
      "line": 9,
      "service": "openai",
      "content": "let azureOpenAIClient = null;"
    },
    {
      "file": "./azure/applicationWorker/index.js",
      "line": 12,
      "service": "openai",
      "content": "* Initialize Azure OpenAI client"
    },
    {
      "file": "./azure/applicationWorker/index.js",
      "line": 14,
      "service": "openai",
      "content": "async function initializeAzureOpenAI() {"
    },
    {
      "file": "./azure/applicationWorker/index.js",
      "line": 15,
      "service": "openai",
      "content": "if (azureOpenAIClient) {"
    },
    {
      "file": "./azure/applicationWorker/index.js",
      "line": 16,
      "service": "openai",
      "content": "return azureOpenAIClient;"
    },
    {
      "file": "./azure/applicationWorker/index.js",
      "line": 22,
      "service": "openai",
      "content": "if (!secrets.azureOpenAIKey || !secrets.azureOpenAIEndpoint) {"
    },
    {
      "file": "./azure/applicationWorker/index.js",
      "line": 23,
      "service": "openai",
      "content": "console.warn('⚠️ Azure OpenAI credentials not available, using fallback');"
    },
    {
      "file": "./azure/applicationWorker/index.js",
      "line": 27,
      "service": "openai",
      "content": "azureOpenAIClient = new OpenAI({"
    },
    {
      "file": "./azure/applicationWorker/index.js",
      "line": 28,
      "service": "openai",
      "content": "apiKey: secrets.azureOpenAIKey,"
    },
    {
      "file": "./azure/applicationWorker/index.js",
      "line": 29,
      "service": "openai",
      "content": "baseURL: `${secrets.azureOpenAIEndpoint}/openai/deployments/${secrets.azureOpenAIDeployment}`,"
    },
    {
      "file": "./azure/applicationWorker/index.js",
      "line": 32,
      "service": "openai",
      "content": "'api-key': secrets.azureOpenAIKey,"
    },
    {
      "file": "./azure/applicationWorker/index.js",
      "line": 36,
      "service": "openai",
      "content": "console.log('✅ Azure OpenAI client initialized for application worker');"
    },
    {
      "file": "./azure/applicationWorker/index.js",
      "line": 37,
      "service": "openai",
      "content": "return azureOpenAIClient;"
    },
    {
      "file": "./azure/applicationWorker/index.js",
      "line": 39,
      "service": "openai",
      "content": "console.error('❌ Failed to initialize Azure OpenAI client:', error);"
    },
    {
      "file": "./azure/applicationWorker/index.js",
      "line": 181,
      "service": "openai",
      "content": "const client = await initializeAzureOpenAI();"
    },
    {
      "file": "./azure/applicationWorker/index.js",
      "line": 184,
      "service": "openai",
      "content": "console.warn('Azure OpenAI client not available, using fallback scoring');"
    },
    {
      "file": "./azure/applicationWorker/index.js",
      "line": 222,
      "service": "openai",
      "content": "console.error('Error calculating job relevancy with Azure OpenAI:', error);"
    },
    {
      "file": "./azure/applicationWorker/index.js",
      "line": 241,
      "service": "openai",
      "content": "const client = await initializeAzureOpenAI();"
    },
    {
      "file": "./azure/applicationWorker/index.js",
      "line": 244,
      "service": "openai",
      "content": "console.warn('Azure OpenAI client not available, using fallback cover letter');"
    },
    {
      "file": "./azure/applicationWorker/index.js",
      "line": 284,
      "service": "openai",
      "content": "console.error('Error generating cover letter with Azure OpenAI:', error);"
    },
    {
      "file": "./azure/applicationWorker/index.js",
      "line": 310,
      "service": "openai",
      "content": "const client = await initializeAzureOpenAI();"
    },
    {
      "file": "./azure/applicationWorker/index.js",
      "line": 313,
      "service": "openai",
      "content": "console.warn('Azure OpenAI client not available, returning original resume');"
    },
    {
      "file": "./azure/applicationWorker/index.js",
      "line": 348,
      "service": "openai",
      "content": "console.error('Error tailoring resume with Azure OpenAI:', error);"
    },
    {
      "file": "./azure/searchScheduler/index.js",
      "line": 1,
      "service": "functions",
      "content": "const { app } = require('@azure/functions');"
    },
    {
      "file": "./azure/notificationScheduler/index.js",
      "line": 1,
      "service": "functions",
      "content": "const { app } = require('@azure/functions');"
    },
    {
      "file": "./azure/deleteUserData/index.js",
      "line": 2,
      "service": "cosmos",
      "content": "const { CosmosClient } = require('@azure/cosmos');"
    },
    {
      "file": "./azure/deleteUserData/index.js",
      "line": 3,
      "service": "storage",
      "content": "const { BlobServiceClient } = require('@azure/storage-blob');"
    },
    {
      "file": "./azure/deleteUserData/index.js",
      "line": 4,
      "service": "identity",
      "content": "const { DefaultAzureCredential } = require('@azure/identity');"
    },
    {
      "file": "./azure/deleteUserData/index.js",
      "line": 5,
      "service": "keyvault",
      "content": "const { SecretClient } = require('@azure/keyvault-secrets');"
    },
    {
      "file": "./azure/deleteUserData/index.js",
      "line": 18,
      "service": "identity",
      "content": "const credential = new DefaultAzureCredential();"
    },
    {
      "file": "./azure/lib/middleware/function-error-handler.js",
      "line": 301,
      "service": "openai",
      "content": "// Azure OpenAI specific errors"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 6,
      "service": "identity",
      "content": "const identity_1 = require(\"@azure/identity\");"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 7,
      "service": "keyvault",
      "content": "const keyvault_secrets_1 = require(\"@azure/keyvault-secrets\");"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 18,
      "service": "identity",
      "content": "const credential = new identity_1.DefaultAzureCredential();"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 19,
      "service": "keyvault",
      "content": "return new keyvault_secrets_1.SecretClient(AZURE_KEY_VAULT_URI, credential);"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 33,
      "service": "openai",
      "content": "const [speechKey, speechEndpoint, azureOpenAIKey, azureOpenAIEndpoint, azureOpenAIDeployment, azureOpenAIGpt35, azureOpenAIGpt4o, storageAccountName, storageAccountKey, formRecognizerEndpoint, formRecognizerKey] = await Promise.all(["
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 36,
      "service": "keyvault",
      "content": "client.getSecret('azure-openai-key'),"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 37,
      "service": "keyvault",
      "content": "client.getSecret('azure-openai-endpoint'),"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 38,
      "service": "keyvault",
      "content": "client.getSecret('azure-openai-deployment'),"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 39,
      "service": "keyvault",
      "content": "client.getSecret('azure-openai-gpt35-deployment').catch(() => null), // Optional"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 40,
      "service": "keyvault",
      "content": "client.getSecret('azure-openai-gpt4o-deployment').catch(() => null), // Optional"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 41,
      "service": "keyvault",
      "content": "client.getSecret('azure-storage-account-name').catch(() => null), // Optional"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 42,
      "service": "keyvault",
      "content": "client.getSecret('azure-storage-account-key').catch(() => null), // Optional"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 43,
      "service": "keyvault",
      "content": "client.getSecret('azure-form-recognizer-endpoint').catch(() => null), // Optional"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 44,
      "service": "keyvault",
      "content": "client.getSecret('azure-form-recognizer-key').catch(() => null) // Optional"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 46,
      "service": "openai",
      "content": "if (!speechKey.value || !speechEndpoint.value || !azureOpenAIKey.value || !azureOpenAIEndpoint.value || !azureOpenAIDeployment.value) {"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 52,
      "service": "openai",
      "content": "azureOpenAIKey: azureOpenAIKey.value,"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 53,
      "service": "openai",
      "content": "azureOpenAIEndpoint: azureOpenAIEndpoint.value,"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 54,
      "service": "openai",
      "content": "azureOpenAIDeployment: azureOpenAIDeployment.value,"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 55,
      "service": "openai",
      "content": "azureOpenAIGpt35Deployment: azureOpenAIGpt35?.value || 'gpt-35-turbo',"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 56,
      "service": "openai",
      "content": "azureOpenAIGpt4oDeployment: azureOpenAIGpt4o?.value || 'gpt-4o',"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 72,
      "service": "openai",
      "content": "azureOpenAIKey: process.env.AZURE_OPENAI_KEY || '',"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 73,
      "service": "openai",
      "content": "azureOpenAIEndpoint: process.env.AZURE_OPENAI_ENDPOINT || '',"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 74,
      "service": "openai",
      "content": "azureOpenAIDeployment: process.env.AZURE_OPENAI_DEPLOYMENT || '',"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 75,
      "service": "openai",
      "content": "azureOpenAIGpt35Deployment: process.env.AZURE_OPENAI_GPT35_DEPLOYMENT || 'gpt-35-turbo',"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 76,
      "service": "openai",
      "content": "azureOpenAIGpt4oDeployment: process.env.AZURE_OPENAI_GPT4O_DEPLOYMENT || 'gpt-4o',"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 82,
      "service": "openai",
      "content": "if (!fallbackSecrets.speechKey || !fallbackSecrets.azureOpenAIKey) {"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 99,
      "service": "openai",
      "content": "process.env.AZURE_OPENAI_KEY = secrets.azureOpenAIKey;"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 100,
      "service": "openai",
      "content": "process.env.AZURE_OPENAI_ENDPOINT = secrets.azureOpenAIEndpoint;"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 101,
      "service": "openai",
      "content": "process.env.AZURE_OPENAI_DEPLOYMENT = secrets.azureOpenAIDeployment;"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 102,
      "service": "openai",
      "content": "process.env.AZURE_OPENAI_GPT35_DEPLOYMENT = secrets.azureOpenAIGpt35Deployment;"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 103,
      "service": "openai",
      "content": "process.env.AZURE_OPENAI_GPT4O_DEPLOYMENT = secrets.azureOpenAIGpt4oDeployment;"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 104,
      "service": "openai",
      "content": "// Set Azure OpenAI keys for public environment"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 105,
      "service": "openai",
      "content": "process.env.NEXT_PUBLIC_AZURE_OPENAI_API_KEY = secrets.azureOpenAIKey;"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 106,
      "service": "openai",
      "content": "process.env.NEXT_PUBLIC_AZURE_OPENAI_ENDPOINT = secrets.azureOpenAIEndpoint;"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 107,
      "service": "openai",
      "content": "process.env.NEXT_PUBLIC_AZURE_OPENAI_DEPLOYMENT = secrets.azureOpenAIDeployment;"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 108,
      "service": "openai",
      "content": "process.env.NEXT_PUBLIC_AZURE_OPENAI_GPT35_DEPLOYMENT = secrets.azureOpenAIGpt35Deployment;"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 109,
      "service": "openai",
      "content": "process.env.NEXT_PUBLIC_AZURE_OPENAI_GPT4O_DEPLOYMENT = secrets.azureOpenAIGpt4oDeployment;"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 127,
      "service": "openai",
      "content": "azureOpenAIKey: !!process.env.AZURE_OPENAI_KEY,"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 128,
      "service": "openai",
      "content": "azureOpenAIEndpoint: !!process.env.AZURE_OPENAI_ENDPOINT,"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 129,
      "service": "openai",
      "content": "azureOpenAIDeployment: !!process.env.AZURE_OPENAI_DEPLOYMENT,"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 130,
      "service": "openai",
      "content": "azureOpenAIGpt35Deployment: !!process.env.AZURE_OPENAI_GPT35_DEPLOYMENT,"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 131,
      "service": "openai",
      "content": "azureOpenAIGpt4oDeployment: !!process.env.AZURE_OPENAI_GPT4O_DEPLOYMENT"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 134,
      "service": "openai",
      "content": "default: process.env.AZURE_OPENAI_DEPLOYMENT,"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 135,
      "service": "openai",
      "content": "gpt35Turbo: process.env.AZURE_OPENAI_GPT35_DEPLOYMENT || 'gpt-35-turbo',"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 136,
      "service": "openai",
      "content": "gpt4o: process.env.AZURE_OPENAI_GPT4O_DEPLOYMENT || 'gpt-4o'"
    },
    {
      "file": "./azure/lib/azure-app-config.ts",
      "line": 8,
      "service": "appconfig",
      "content": "import { AppConfigurationClient } from '@azure/app-configuration';"
    },
    {
      "file": "./azure/lib/azure-app-config.ts",
      "line": 9,
      "service": "identity",
      "content": "import { DefaultAzureCredential } from '@azure/identity';"
    },
    {
      "file": "./azure/lib/azure-app-config.ts",
      "line": 51,
      "service": "identity",
      "content": "this.client = new AppConfigurationClient(this.connectionString, new DefaultAzureCredential());"
    },
    {
      "file": "./azure/lib/services/azure-openai-service.test.ts",
      "line": 1,
      "service": "openai",
      "content": "import { AzureOpenAIService } from './azure-openai-service';"
    },
    {
      "file": "./azure/lib/services/azure-openai-service.test.ts",
      "line": 3,
      "service": "openai",
      "content": "// Mock the Azure OpenAI client"
    },
    {
      "file": "./azure/lib/services/azure-openai-service.test.ts",
      "line": 5,
      "service": "openai",
      "content": "AzureOpenAI: jest.fn().mockImplementation(() => ({"
    },
    {
      "file": "./azure/lib/services/azure-openai-service.test.ts",
      "line": 23,
      "service": "openai",
      "content": "azureOpenAIKey: 'mock-key',"
    },
    {
      "file": "./azure/lib/services/azure-openai-service.test.ts",
      "line": 24,
      "service": "openai",
      "content": "azureOpenAIEndpoint: 'mock-endpoint',"
    },
    {
      "file": "./azure/lib/services/azure-openai-service.test.ts",
      "line": 25,
      "service": "openai",
      "content": "azureOpenAIDeployment: 'mock-deployment'"
    },
    {
      "file": "./azure/lib/services/azure-openai-service.test.ts",
      "line": 29,
      "service": "openai",
      "content": "describe('AzureOpenAIService - Preliminary Questions Flow', () => {"
    },
    {
      "file": "./azure/lib/services/azure-openai-service.test.ts",
      "line": 30,
      "service": "openai",
      "content": "let service: AzureOpenAIService;"
    },
    {
      "file": "./azure/lib/services/azure-openai-service.test.ts",
      "line": 33,
      "service": "openai",
      "content": "service = new AzureOpenAIService();"
    },
    {
      "file": "./azure/lib/services/test-preliminary-tracking.js",
      "line": 4,
      "service": "openai",
      "content": "const { AzureOpenAIService } = require('./azure-openai-service.ts');"
    },
    {
      "file": "./azure/lib/services/test-preliminary-tracking.js",
      "line": 10,
      "service": "openai",
      "content": "azureOpenAIKey: 'test-key',"
    },
    {
      "file": "./azure/lib/services/test-preliminary-tracking.js",
      "line": 11,
      "service": "openai",
      "content": "azureOpenAIEndpoint: 'test-endpoint',"
    },
    {
      "file": "./azure/lib/services/test-preliminary-tracking.js",
      "line": 12,
      "service": "openai",
      "content": "azureOpenAIDeployment: 'test-deployment'"
    },
    {
      "file": "./azure/lib/services/test-preliminary-tracking.js",
      "line": 19,
      "service": "openai",
      "content": "const service = new AzureOpenAIService();"
    },
    {
      "file": "./azure/lib/services/queue-service.js",
      "line": 1,
      "service": "storage",
      "content": "const { QueueServiceClient } = require('@azure/storage-queue');"
    },
    {
      "file": "./azure/lib/services/queue-service.js",
      "line": 2,
      "service": "identity",
      "content": "const { DefaultAzureCredential } = require('@azure/identity');"
    },
    {
      "file": "./azure/lib/services/test-question-generator.js",
      "line": 8,
      "service": "openai",
      "content": "const { AzureOpenAIService } = require('./azure-openai-service.ts');"
    },
    {
      "file": "./azure/lib/services/test-question-generator.js",
      "line": 14,
      "service": "openai",
      "content": "azureOpenAIKey: 'test-key',"
    },
    {
      "file": "./azure/lib/services/test-question-generator.js",
      "line": 15,
      "service": "openai",
      "content": "azureOpenAIEndpoint: 'test-endpoint',"
    },
    {
      "file": "./azure/lib/services/test-question-generator.js",
      "line": 16,
      "service": "openai",
      "content": "azureOpenAIDeployment: 'test-deployment'"
    },
    {
      "file": "./azure/lib/services/test-question-generator.js",
      "line": 21,
      "service": "openai",
      "content": "class MockAzureOpenAIService extends AzureOpenAIService {"
    },
    {
      "file": "./azure/lib/services/test-question-generator.js",
      "line": 63,
      "service": "openai",
      "content": "console.log('✅ Mock Azure OpenAI Service initialized');"
    },
    {
      "file": "./azure/lib/services/test-question-generator.js",
      "line": 72,
      "service": "openai",
      "content": "const service = new MockAzureOpenAIService();"
    },
    {
      "file": "./azure/lib/services/test-preliminary-flow.js",
      "line": 2,
      "service": "openai",
      "content": "* Manual test script for AzureOpenAIService preliminary questions flow"
    },
    {
      "file": "./azure/lib/services/test-preliminary-flow.js",
      "line": 6,
      "service": "openai",
      "content": "// Mock implementation of AzureOpenAIService for testing"
    },
    {
      "file": "./azure/lib/services/test-preliminary-flow.js",
      "line": 7,
      "service": "openai",
      "content": "class MockAzureOpenAIService {"
    },
    {
      "file": "./azure/lib/services/test-preliminary-flow.js",
      "line": 111,
      "service": "openai",
      "content": "const service = new MockAzureOpenAIService();"
    },
    {
      "file": "./azure/lib/services/azure-openai-service.ts",
      "line": 1,
      "service": "openai",
      "content": "import { AzureOpenAI } from 'openai';"
    },
    {
      "file": "./azure/lib/services/azure-openai-service.ts",
      "line": 34,
      "service": "openai",
      "content": "export class AzureOpenAIService {"
    },
    {
      "file": "./azure/lib/services/azure-openai-service.ts",
      "line": 35,
      "service": "openai",
      "content": "private client: AzureOpenAI | null = null;"
    },
    {
      "file": "./azure/lib/services/azure-openai-service.ts",
      "line": 58,
      "service": "openai",
      "content": "* Initialize the Azure OpenAI service"
    },
    {
      "file": "./azure/lib/services/azure-openai-service.ts",
      "line": 64,
      "service": "openai",
      "content": "if (!secrets.azureOpenAIKey || !secrets.azureOpenAIEndpoint || !secrets.azureOpenAIDeployment) {"
    },
    {
      "file": "./azure/lib/services/azure-openai-service.ts",
      "line": 65,
      "service": "openai",
      "content": "console.warn('⚠️ Azure OpenAI credentials not available');"
    },
    {
      "file": "./azure/lib/services/azure-openai-service.ts",
      "line": 69,
      "service": "openai",
      "content": "this.client = new AzureOpenAI({"
    },
    {
      "file": "./azure/lib/services/azure-openai-service.ts",
      "line": 70,
      "service": "openai",
      "content": "apiKey: secrets.azureOpenAIKey,"
    },
    {
      "file": "./azure/lib/services/azure-openai-service.ts",
      "line": 71,
      "service": "openai",
      "content": "endpoint: secrets.azureOpenAIEndpoint,"
    },
    {
      "file": "./azure/lib/services/azure-openai-service.ts",
      "line": 72,
      "service": "openai",
      "content": "deployment: secrets.azureOpenAIDeployment,"
    },
    {
      "file": "./azure/lib/services/azure-openai-service.ts",
      "line": 78,
      "service": "openai",
      "content": "this.modelDeployment = secrets.azureOpenAIDeployment;"
    },
    {
      "file": "./azure/lib/services/azure-openai-service.ts",
      "line": 81,
      "service": "openai",
      "content": "console.log('✅ Azure OpenAI Service initialized');"
    },
    {
      "file": "./azure/lib/services/azure-openai-service.ts",
      "line": 84,
      "service": "openai",
      "content": "console.error('❌ Failed to initialize Azure OpenAI Service:', error);"
    },
    {
      "file": "./azure/lib/services/azure-openai-service.ts",
      "line": 196,
      "service": "openai",
      "content": "throw new Error('Azure OpenAI Service not initialized');"
    },
    {
      "file": "./azure/lib/services/azure-openai-service.ts",
      "line": 248,
      "service": "openai",
      "content": "throw new Error('Azure OpenAI Service not initialized');"
    },
    {
      "file": "./azure/lib/services/azure-openai-service.ts",
      "line": 377,
      "service": "openai",
      "content": "throw new Error('Azure OpenAI Service not initialized');"
    },
    {
      "file": "./azure/lib/services/azure-openai-service.ts",
      "line": 501,
      "service": "openai",
      "content": "throw new Error('Azure OpenAI Service not initialized');"
    },
    {
      "file": "./azure/lib/services/azure-openai-service.ts",
      "line": 529,
      "service": "openai",
      "content": "throw new Error('Azure OpenAI Service not initialized');"
    },
    {
      "file": "./azure/lib/services/azure-openai-service.ts",
      "line": 585,
      "service": "openai",
      "content": "console.log('🧹 Azure OpenAI Service disposed');"
    },
    {
      "file": "./azure/lib/services/azure-openai-service.ts",
      "line": 590,
      "service": "openai",
      "content": "export const azureOpenAIService = new AzureOpenAIService();"
    },
    {
      "file": "./azure/lib/services/azure-speech-service.ts",
      "line": 1,
      "service": "speech",
      "content": "import * as SpeechSDK from 'microsoft-cognitiveservices-speech-sdk';"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 1,
      "service": "identity",
      "content": "import { DefaultAzureCredential } from '@azure/identity';"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 2,
      "service": "keyvault",
      "content": "import { SecretClient } from '@azure/keyvault-secrets';"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 10,
      "service": "openai",
      "content": "azureOpenAIKey: string;"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 11,
      "service": "openai",
      "content": "azureOpenAIEndpoint: string;"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 12,
      "service": "openai",
      "content": "azureOpenAIDeployment: string;"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 13,
      "service": "openai",
      "content": "azureOpenAIGpt35Deployment?: string; // gpt-35-turbo deployment"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 14,
      "service": "openai",
      "content": "azureOpenAIGpt4oDeployment?: string; // gpt-4o deployment"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 32,
      "service": "identity",
      "content": "const credential = new DefaultAzureCredential();"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 33,
      "service": "keyvault",
      "content": "return new SecretClient(AZURE_KEY_VAULT_URI, credential);"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 35,
      "service": "identity",
      "content": "console.error('❌ Failed to create DefaultAzureCredential:', error);"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 55,
      "service": "openai",
      "content": "const [speechKey, speechEndpoint, azureOpenAIKey, azureOpenAIEndpoint, azureOpenAIDeployment, azureOpenAIGpt35, azureOpenAIGpt4o, storageAccountName, storageAccountKey, formRecognizerEndpoint, formRecognizerKey] = await Promise.all(["
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 58,
      "service": "keyvault",
      "content": "client.getSecret('azure-openai-key'),"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 59,
      "service": "keyvault",
      "content": "client.getSecret('azure-openai-endpoint'),"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 60,
      "service": "keyvault",
      "content": "client.getSecret('azure-openai-deployment'),"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 61,
      "service": "keyvault",
      "content": "client.getSecret('azure-openai-gpt35-deployment').catch(() => null), // Optional"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 62,
      "service": "keyvault",
      "content": "client.getSecret('azure-openai-gpt4o-deployment').catch(() => null),  // Optional"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 63,
      "service": "keyvault",
      "content": "client.getSecret('azure-storage-account-name').catch(() => null), // Optional"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 64,
      "service": "keyvault",
      "content": "client.getSecret('azure-storage-account-key').catch(() => null), // Optional"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 65,
      "service": "keyvault",
      "content": "client.getSecret('azure-form-recognizer-endpoint').catch(() => null), // Optional"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 66,
      "service": "keyvault",
      "content": "client.getSecret('azure-form-recognizer-key').catch(() => null) // Optional"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 69,
      "service": "openai",
      "content": "if (!speechKey.value || !speechEndpoint.value || !azureOpenAIKey.value || !azureOpenAIEndpoint.value || !azureOpenAIDeployment.value) {"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 76,
      "service": "openai",
      "content": "azureOpenAIKey: azureOpenAIKey.value,"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 77,
      "service": "openai",
      "content": "azureOpenAIEndpoint: azureOpenAIEndpoint.value,"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 78,
      "service": "openai",
      "content": "azureOpenAIDeployment: azureOpenAIDeployment.value,"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 79,
      "service": "openai",
      "content": "azureOpenAIGpt35Deployment: azureOpenAIGpt35?.value || 'gpt-35-turbo',"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 80,
      "service": "openai",
      "content": "azureOpenAIGpt4oDeployment: azureOpenAIGpt4o?.value || 'gpt-4o',"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 98,
      "service": "openai",
      "content": "azureOpenAIKey: process.env.AZURE_OPENAI_KEY || '',"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 99,
      "service": "openai",
      "content": "azureOpenAIEndpoint: process.env.AZURE_OPENAI_ENDPOINT || '',"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 100,
      "service": "openai",
      "content": "azureOpenAIDeployment: process.env.AZURE_OPENAI_DEPLOYMENT || '',"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 101,
      "service": "openai",
      "content": "azureOpenAIGpt35Deployment: process.env.AZURE_OPENAI_GPT35_DEPLOYMENT || 'gpt-35-turbo',"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 102,
      "service": "openai",
      "content": "azureOpenAIGpt4oDeployment: process.env.AZURE_OPENAI_GPT4O_DEPLOYMENT || 'gpt-4o',"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 109,
      "service": "openai",
      "content": "if (!fallbackSecrets.speechKey || !fallbackSecrets.azureOpenAIKey) {"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 129,
      "service": "openai",
      "content": "process.env.AZURE_OPENAI_KEY = secrets.azureOpenAIKey;"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 130,
      "service": "openai",
      "content": "process.env.AZURE_OPENAI_ENDPOINT = secrets.azureOpenAIEndpoint;"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 131,
      "service": "openai",
      "content": "process.env.AZURE_OPENAI_DEPLOYMENT = secrets.azureOpenAIDeployment;"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 132,
      "service": "openai",
      "content": "process.env.AZURE_OPENAI_GPT35_DEPLOYMENT = secrets.azureOpenAIGpt35Deployment;"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 133,
      "service": "openai",
      "content": "process.env.AZURE_OPENAI_GPT4O_DEPLOYMENT = secrets.azureOpenAIGpt4oDeployment;"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 135,
      "service": "openai",
      "content": "// Set Azure OpenAI keys for public environment"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 136,
      "service": "openai",
      "content": "process.env.NEXT_PUBLIC_AZURE_OPENAI_API_KEY = secrets.azureOpenAIKey;"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 137,
      "service": "openai",
      "content": "process.env.NEXT_PUBLIC_AZURE_OPENAI_ENDPOINT = secrets.azureOpenAIEndpoint;"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 138,
      "service": "openai",
      "content": "process.env.NEXT_PUBLIC_AZURE_OPENAI_DEPLOYMENT = secrets.azureOpenAIDeployment;"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 139,
      "service": "openai",
      "content": "process.env.NEXT_PUBLIC_AZURE_OPENAI_GPT35_DEPLOYMENT = secrets.azureOpenAIGpt35Deployment;"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 140,
      "service": "openai",
      "content": "process.env.NEXT_PUBLIC_AZURE_OPENAI_GPT4O_DEPLOYMENT = secrets.azureOpenAIGpt4oDeployment;"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 159,
      "service": "openai",
      "content": "azureOpenAIKey: !!process.env.AZURE_OPENAI_KEY,"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 160,
      "service": "openai",
      "content": "azureOpenAIEndpoint: !!process.env.AZURE_OPENAI_ENDPOINT,"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 161,
      "service": "openai",
      "content": "azureOpenAIDeployment: !!process.env.AZURE_OPENAI_DEPLOYMENT,"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 162,
      "service": "openai",
      "content": "azureOpenAIGpt35Deployment: !!process.env.AZURE_OPENAI_GPT35_DEPLOYMENT,"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 163,
      "service": "openai",
      "content": "azureOpenAIGpt4oDeployment: !!process.env.AZURE_OPENAI_GPT4O_DEPLOYMENT"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 166,
      "service": "openai",
      "content": "default: process.env.AZURE_OPENAI_DEPLOYMENT,"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 167,
      "service": "openai",
      "content": "gpt35Turbo: process.env.AZURE_OPENAI_GPT35_DEPLOYMENT || 'gpt-35-turbo',"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 168,
      "service": "openai",
      "content": "gpt4o: process.env.AZURE_OPENAI_GPT4O_DEPLOYMENT || 'gpt-4o'"
    },
    {
      "file": "./azure/jobSearchWorker/index.js",
      "line": 1,
      "service": "functions",
      "content": "const { app } = require('@azure/functions');"
    },
    {
      "file": "./azure/jobSearchWorker/index.js",
      "line": 8,
      "service": "openai",
      "content": "// Azure OpenAI client - will be initialized from Key Vault secrets"
    },
    {
      "file": "./azure/jobSearchWorker/index.js",
      "line": 9,
      "service": "openai",
      "content": "let azureOpenAIClient = null;"
    },
    {
      "file": "./azure/jobSearchWorker/index.js",
      "line": 12,
      "service": "openai",
      "content": "* Initialize Azure OpenAI client"
    },
    {
      "file": "./azure/jobSearchWorker/index.js",
      "line": 14,
      "service": "openai",
      "content": "async function initializeAzureOpenAI() {"
    },
    {
      "file": "./azure/jobSearchWorker/index.js",
      "line": 15,
      "service": "openai",
      "content": "if (azureOpenAIClient) {"
    },
    {
      "file": "./azure/jobSearchWorker/index.js",
      "line": 16,
      "service": "openai",
      "content": "return azureOpenAIClient;"
    },
    {
      "file": "./azure/jobSearchWorker/index.js",
      "line": 22,
      "service": "openai",
      "content": "if (!secrets.azureOpenAIKey || !secrets.azureOpenAIEndpoint) {"
    },
    {
      "file": "./azure/jobSearchWorker/index.js",
      "line": 23,
      "service": "openai",
      "content": "console.warn('⚠️ Azure OpenAI credentials not available, using fallback');"
    },
    {
      "file": "./azure/jobSearchWorker/index.js",
      "line": 27,
      "service": "openai",
      "content": "azureOpenAIClient = new OpenAI({"
    },
    {
      "file": "./azure/jobSearchWorker/index.js",
      "line": 28,
      "service": "openai",
      "content": "apiKey: secrets.azureOpenAIKey,"
    },
    {
      "file": "./azure/jobSearchWorker/index.js",
      "line": 29,
      "service": "openai",
      "content": "baseURL: `${secrets.azureOpenAIEndpoint}/openai/deployments/${secrets.azureOpenAIDeployment}`,"
    },
    {
      "file": "./azure/jobSearchWorker/index.js",
      "line": 32,
      "service": "openai",
      "content": "'api-key': secrets.azureOpenAIKey,"
    },
    {
      "file": "./azure/jobSearchWorker/index.js",
      "line": 36,
      "service": "openai",
      "content": "console.log('✅ Azure OpenAI client initialized for job search worker');"
    },
    {
      "file": "./azure/jobSearchWorker/index.js",
      "line": 37,
      "service": "openai",
      "content": "return azureOpenAIClient;"
    },
    {
      "file": "./azure/jobSearchWorker/index.js",
      "line": 39,
      "service": "openai",
      "content": "console.error('❌ Failed to initialize Azure OpenAI client:', error);"
    },
    {
      "file": "./azure/jobSearchWorker/index.js",
      "line": 253,
      "service": "openai",
      "content": "const client = await initializeAzureOpenAI();"
    },
    {
      "file": "./azure/jobSearchWorker/index.js",
      "line": 256,
      "service": "openai",
      "content": "console.warn('Azure OpenAI client not available, using fallback relevancy calculation');"
    },
    {
      "file": "./azure/jobSearchWorker/index.js",
      "line": 293,
      "service": "openai",
      "content": "console.error('Error calculating job relevancy with Azure OpenAI:', error);"
    },
    {
      "file": "./azure/test-voice-function.js",
      "line": 2,
      "service": "speech",
      "content": "const sdk = require('microsoft-cognitiveservices-speech-sdk');"
    },
    {
      "file": "./azure/test-voice-function.js",
      "line": 22,
      "service": "openai",
      "content": "messages: [{ role: 'user', content: 'Say \"Hello from Azure OpenAI!\"' }],"
    },
    {
      "file": "./azure/HttpTrigger1/index.js",
      "line": 2,
      "service": "speech",
      "content": "const sdk = require('microsoft-cognitiveservices-speech-sdk');"
    },
    {
      "file": "./azure/HttpTrigger1/index.js",
      "line": 16,
      "service": "openai",
      "content": "apiKey: process.env.AZURE_OPENAI_KEY,"
    },
    {
      "file": "./azure/HttpTrigger1/index.js",
      "line": 17,
      "service": "openai",
      "content": "baseURL: `${process.env.AZURE_OPENAI_ENDPOINT}/openai/deployments/${process.env.AZURE_OPENAI_DEPLOYMENT}`,"
    },
    {
      "file": "./azure/HttpTrigger1/index.js",
      "line": 20,
      "service": "openai",
      "content": "'api-key': process.env.AZURE_OPENAI_KEY,"
    },
    {
      "file": "./azure/test-azure-integration.js",
      "line": 26,
      "service": "openai",
      "content": "const required = ['speechKey', 'azureOpenAIKey', 'azureOpenAIEndpoint'];"
    },
    {
      "file": "./azure/test-azure-integration.js",
      "line": 80,
      "service": "openai",
      "content": "if (secrets.azureOpenAIKey && secrets.azureOpenAIEndpoint) {"
    },
    {
      "file": "./azure/test-azure-integration.js",
      "line": 82,
      "service": "openai",
      "content": "console.log(`   Endpoint: ${secrets.azureOpenAIEndpoint}`);"
    },
    {
      "file": "./azure/test-azure-integration.js",
      "line": 83,
      "service": "openai",
      "content": "console.log(`   Deployment: ${secrets.azureOpenAIDeployment}`);"
    },
    {
      "file": "./next.config.js",
      "line": 37,
      "service": "cosmos",
      "content": "'@azure/cosmos',"
    },
    {
      "file": "./next.config.js",
      "line": 38,
      "service": "storage",
      "content": "'@azure/storage-blob',"
    },
    {
      "file": "./next.config.js",
      "line": 39,
      "service": "keyvault",
      "content": "'@azure/keyvault-secrets',"
    },
    {
      "file": "./next.config.js",
      "line": 40,
      "service": "identity",
      "content": "'@azure/identity',"
    },
    {
      "file": "./next.config.js",
      "line": 41,
      "service": "appconfig",
      "content": "'@azure/app-configuration',"
    },
    {
      "file": "./next.config.js",
      "line": 59,
      "service": "cosmos",
      "content": "'@azure/cosmos': 'commonjs @azure/cosmos',"
    },
    {
      "file": "./next.config.js",
      "line": 60,
      "service": "storage",
      "content": "'@azure/storage-blob': 'commonjs @azure/storage-blob',"
    },
    {
      "file": "./next.config.js",
      "line": 61,
      "service": "keyvault",
      "content": "'@azure/keyvault-secrets': 'commonjs @azure/keyvault-secrets',"
    },
    {
      "file": "./tests/integration/resume-tailor-parity.js",
      "line": 4,
      "service": "openai",
      "content": "* Simple integration test to verify Azure OpenAI resume tailoring functionality"
    },
    {
      "file": "./tests/integration/resume-tailor-parity.js",
      "line": 84,
      "service": "openai",
      "content": "console.log('🧪 Testing Azure OpenAI Resume Tailoring...\\n');"
    },
    {
      "file": "./tests/resume-tailor-endpoint.test.ts",
      "line": 8,
      "service": "openai",
      "content": "test('Azure OpenAI integration requirements', () => {"
    },
    {
      "file": "./tests/resume-tailor-endpoint.test.ts",
      "line": 9,
      "service": "openai",
      "content": "// Test that verifies Azure OpenAI is being used instead of Google Generative AI"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 2,
      "service": "openai",
      "content": "import { azureOpenAIService } from '../lib/services/azure-openai-service';"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 9,
      "service": "openai",
      "content": "it('should have valid API version for Azure OpenAI', async () => {"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 10,
      "service": "openai",
      "content": "// Valid API versions for Azure OpenAI as of 2024"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 21,
      "service": "openai",
      "content": "'../lib/services/azure-openai-service.ts',"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 22,
      "service": "openai",
      "content": "'../lib/services/azure-openai.ts',"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 23,
      "service": "openai",
      "content": "'../azure/lib/services/azure-openai-service.ts',"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 43,
      "service": "openai",
      "content": "it('should validate Azure OpenAI deployment name matches available models', async () => {"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 46,
      "service": "openai",
      "content": "// Common Azure OpenAI deployment names"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 55,
      "service": "openai",
      "content": "const deployment = secrets.azureOpenAIDeployment;"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 103,
      "service": "openai",
      "content": "expect(serverSecrets.azureOpenAIKey).toBeDefined();"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 104,
      "service": "openai",
      "content": "expect(browserSecrets.azureOpenAIKey).toBeDefined();"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 106,
      "service": "openai",
      "content": "expect(serverSecrets.azureOpenAIEndpoint).toBeDefined();"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 107,
      "service": "openai",
      "content": "expect(browserSecrets.azureOpenAIEndpoint).toBeDefined();"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 109,
      "service": "openai",
      "content": "expect(serverSecrets.azureOpenAIDeployment).toBeDefined();"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 110,
      "service": "openai",
      "content": "expect(browserSecrets.azureOpenAIDeployment).toBeDefined();"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 119,
      "service": "openai",
      "content": "azureOpenAIService.dispose();"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 123,
      "service": "openai",
      "content": "it('should successfully initialize Azure OpenAI Service', async () => {"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 124,
      "service": "openai",
      "content": "const initialized = await azureOpenAIService.initialize();"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 126,
      "service": "openai",
      "content": "if (process.env.CI && !process.env.AZURE_OPENAI_KEY) {"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 132,
      "service": "openai",
      "content": "expect(azureOpenAIService.isReady()).toBe(true);"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 133,
      "service": "openai",
      "content": "console.log('✅ Azure OpenAI Service initialized successfully');"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 154,
      "service": "openai",
      "content": "delete process.env.AZURE_OPENAI_KEY;"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 155,
      "service": "openai",
      "content": "delete process.env.AZURE_OPENAI_ENDPOINT;"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 157,
      "service": "openai",
      "content": "const initialized = await azureOpenAIService.initialize();"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 159,
      "service": "openai",
      "content": "expect(azureOpenAIService.isReady()).toBe(false);"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 173,
      "service": "openai",
      "content": "const deployment = secrets.azureOpenAIDeployment;"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 198,
      "service": "openai",
      "content": "expect(secrets.azureOpenAIEndpoint).toMatch("
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 199,
      "service": "openai",
      "content": "/^https:\\/\\/[a-z0-9-]+\\.openai\\.azure\\.com\\/?$/i"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 212,
      "service": "openai",
      "content": "const azureOpenAI = await import('../lib/services/azure-openai-service');"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 215,
      "service": "openai",
      "content": "expect(azureOpenAI.azureOpenAIService).toHaveProperty('retryWithBackoff');"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 225,
      "service": "openai",
      "content": "expect(window.AZURE_OPENAI_KEY).toBeUndefined();"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 236,
      "service": "openai",
      "content": "expect(secrets.azureOpenAIKey).toBeTruthy();"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 237,
      "service": "openai",
      "content": "expect(secrets.azureOpenAIKey.length).toBeGreaterThan(20);"
    },
    {
      "file": "./tests/api/resume/tailor/simple.test.js",
      "line": 10,
      "service": "openai",
      "content": "jest.mock('@/lib/services/azure-openai-service', () => ({"
    },
    {
      "file": "./tests/api/resume/tailor/simple.test.js",
      "line": 11,
      "service": "openai",
      "content": "azureOpenAIService: {"
    },
    {
      "file": "./tests/api/resume/tailor/simple.test.js",
      "line": 64,
      "service": "openai",
      "content": "const { azureOpenAIService } = require('@/lib/services/azure-openai-service');"
    },
    {
      "file": "./tests/api/resume/tailor/simple.test.js",
      "line": 77,
      "service": "openai",
      "content": "azureOpenAIService.initialize.mockResolvedValue(true);"
    },
    {
      "file": "./tests/api/resume/tailor/simple.test.js",
      "line": 78,
      "service": "openai",
      "content": "azureOpenAIService.tailorResume.mockResolvedValue('Tailored resume content');"
    },
    {
      "file": "./tests/api/resume/tailor/api.test.ts",
      "line": 4,
      "service": "openai",
      "content": "import { azureOpenAIService } from '@/lib/services/azure-openai-service';"
    },
    {
      "file": "./tests/api/resume/tailor/api.test.ts",
      "line": 8,
      "service": "openai",
      "content": "jest.mock('@/lib/services/azure-openai-service');"
    },
    {
      "file": "./tests/api/resume/tailor/api.test.ts",
      "line": 12,
      "service": "openai",
      "content": "let mockAzureOpenAIService;"
    },
    {
      "file": "./tests/api/resume/tailor/api.test.ts",
      "line": 17,
      "service": "openai",
      "content": "mockAzureOpenAIService = azureOpenAIService;"
    },
    {
      "file": "./tests/api/resume/tailor/api.test.ts",
      "line": 110,
      "service": "openai",
      "content": "describe('Azure OpenAI Service Integration', () => {"
    },
    {
      "file": "./tests/api/resume/tailor/api.test.ts",
      "line": 132,
      "service": "openai",
      "content": "it('should return 503 when Azure OpenAI service is not available', async () => {"
    },
    {
      "file": "./tests/api/resume/tailor/api.test.ts",
      "line": 134,
      "service": "openai",
      "content": "const originalModule = jest.requireActual('@/lib/services/azure-openai-service');"
    },
    {
      "file": "./tests/api/resume/tailor/api.test.ts",
      "line": 135,
      "service": "openai",
      "content": "jest.doMock('@/lib/services/azure-openai-service', () => ({"
    },
    {
      "file": "./tests/api/resume/tailor/api.test.ts",
      "line": 137,
      "service": "openai",
      "content": "azureOpenAIService: {"
    },
    {
      "file": "./tests/api/resume/tailor/api.test.ts",
      "line": 138,
      "service": "openai",
      "content": "...originalModule.azureOpenAIService,"
    },
    {
      "file": "./tests/api/resume/tailor/api.test.ts",
      "line": 153,
      "service": "openai",
      "content": "error: 'Azure OpenAI service is not available. Please try again later.',"
    },
    {
      "file": "./tests/api/resume/tailor/api.test.ts",
      "line": 165,
      "service": "openai",
      "content": "mockAzureOpenAIService.initialize.mockResolvedValue(true);"
    },
    {
      "file": "./tests/api/resume/tailor/api.test.ts",
      "line": 166,
      "service": "openai",
      "content": "mockAzureOpenAIService.tailorResume.mockResolvedValue(tailoredResumeContent);"
    },
    {
      "file": "./tests/api/resume/tailor/api.test.ts",
      "line": 181,
      "service": "openai",
      "content": "expect(mockAzureOpenAIService.tailorResume).toHaveBeenCalledWith("
    },
    {
      "file": "./tests/api/resume/tailor/api.test.ts",
      "line": 191,
      "service": "openai",
      "content": "mockAzureOpenAIService.initialize.mockResolvedValue(true);"
    },
    {
      "file": "./tests/api/resume/tailor/api.test.ts",
      "line": 192,
      "service": "openai",
      "content": "mockAzureOpenAIService.tailorResume.mockRejectedValue(rateLimitError);"
    },
    {
      "file": "./tests/api/resume/tailor/api.test.ts",
      "line": 212,
      "service": "openai",
      "content": "mockAzureOpenAIService.initialize.mockResolvedValue(true);"
    },
    {
      "file": "./tests/api/resume/tailor/api.test.ts",
      "line": 213,
      "service": "openai",
      "content": "mockAzureOpenAIService.tailorResume.mockRejectedValue(authError);"
    },
    {
      "file": "./tests/api/resume/tailor/api.test.ts",
      "line": 225,
      "service": "openai",
      "content": "error: 'Authentication failed with Azure OpenAI service.',"
    },
    {
      "file": "./tests/api/resume/tailor/api.test.ts",
      "line": 233,
      "service": "openai",
      "content": "mockAzureOpenAIService.initialize.mockResolvedValue(true);"
    },
    {
      "file": "./tests/api/resume/tailor/api.test.ts",
      "line": 234,
      "service": "openai",
      "content": "mockAzureOpenAIService.tailorResume.mockRejectedValue(serverError);"
    },
    {
      "file": "./tests/api/resume/tailor/api.test.ts",
      "line": 246,
      "service": "openai",
      "content": "error: 'Azure OpenAI service is temporarily unavailable. Please try again later.',"
    },
    {
      "file": "./tests/e2e/resume-url-extraction.test.ts",
      "line": 29,
      "service": "openai",
      "content": "// Mock Azure OpenAI Service"
    },
    {
      "file": "./tests/e2e/resume-url-extraction.test.ts",
      "line": 30,
      "service": "openai",
      "content": "jest.mock('@/lib/services/azure-openai-service', () => ({"
    },
    {
      "file": "./tests/e2e/resume-url-extraction.test.ts",
      "line": 31,
      "service": "openai",
      "content": "azureOpenAIService: {"
    },
    {
      "file": "./tests/e2e/resume-url-extraction.test.ts",
      "line": 408,
      "service": "openai",
      "content": "test('should handle Azure OpenAI service unavailability', async () => {"
    },
    {
      "file": "./tests/e2e/resume-url-extraction.test.ts",
      "line": 409,
      "service": "openai",
      "content": "const mockAzureService = require('@/lib/services/azure-openai-service').azureOpenAIService;"
    },
    {
      "file": "./components/AutoApplyDashboard.tsx",
      "line": 173,
      "service": "openai",
      "content": "// TODO: Implement actual job analysis with Azure OpenAI"
    },
    {
      "file": "./scripts/backfill-mock-interviews.ts",
      "line": 16,
      "service": "openai",
      "content": "*   - AZURE_OPENAI_API_KEY"
    },
    {
      "file": "./scripts/backfill-mock-interviews.ts",
      "line": 17,
      "service": "openai",
      "content": "*   - AZURE_OPENAI_ENDPOINT"
    },
    {
      "file": "./scripts/backfill-mock-interviews.ts",
      "line": 18,
      "service": "openai",
      "content": "*   - AZURE_OPENAI_DEPLOYMENT"
    },
    {
      "file": "./scripts/backfill-mock-interviews.ts",
      "line": 180,
      "service": "openai",
      "content": "'AZURE_OPENAI_API_KEY',"
    },
    {
      "file": "./scripts/backfill-mock-interviews.ts",
      "line": 181,
      "service": "openai",
      "content": "'AZURE_OPENAI_ENDPOINT',"
    },
    {
      "file": "./scripts/backfill-mock-interviews.ts",
      "line": 182,
      "service": "openai",
      "content": "'AZURE_OPENAI_DEPLOYMENT',"
    },
    {
      "file": "./scripts/monitor-production-metrics.js",
      "line": 10,
      "service": "identity",
      "content": "import { DefaultAzureCredential } from '@azure/identity';"
    },
    {
      "file": "./scripts/monitor-production-metrics.js",
      "line": 11,
      "service": "monitor",
      "content": "import { LogsQueryClient, MetricsQueryClient, MetricsQueryResult } from '@azure/monitor-query';"
    },
    {
      "file": "./scripts/monitor-production-metrics.js",
      "line": 32,
      "service": "identity",
      "content": "this.logsQueryClient = new LogsQueryClient(new DefaultAzureCredential());"
    },
    {
      "file": "./scripts/monitor-production-metrics.js",
      "line": 33,
      "service": "identity",
      "content": "this.metricsQueryClient = new MetricsQueryClient(new DefaultAzureCredential());"
    },
    {
      "file": "./scripts/debug-voice-interview.js",
      "line": 214,
      "service": "openai",
      "content": "// Analyze azure-openai-service.ts"
    },
    {
      "file": "./scripts/debug-voice-interview.js",
      "line": 215,
      "service": "openai",
      "content": "log('Analyzing azure-openai-service.ts...', 'debug');"
    },
    {
      "file": "./scripts/debug-voice-interview.js",
      "line": 216,
      "service": "openai",
      "content": "const openaiPath = path.join(__dirname, '..', 'lib', 'services', 'azure-openai-service.ts');"
    },
    {
      "file": "./scripts/debug-voice-interview.js",
      "line": 222,
      "service": "openai",
      "content": "file: 'lib/services/azure-openai-service.ts',"
    },
    {
      "file": "./scripts/debug-voice-interview.js",
      "line": 231,
      "service": "openai",
      "content": "file: 'lib/services/azure-openai-service.ts',"
    },
    {
      "file": "./scripts/debug-voice-interview.js",
      "line": 253,
      "service": "openai",
      "content": "file: 'lib/services/azure-openai-service.ts',"
    },
    {
      "file": "./scripts/debug-voice-interview.js",
      "line": 297,
      "service": "openai",
      "content": "source: 'lib/services/azure-openai-service.ts',"
    },
    {
      "file": "./scripts/debug-voice-interview.js",
      "line": 298,
      "service": "openai",
      "content": "target: 'lib/services/azure-openai-service.debug.ts'"
    },
    {
      "file": "./scripts/deployment-checklist.ts",
      "line": 94,
      "service": "openai",
      "content": "'AZURE_OPENAI_ENDPOINT',"
    },
    {
      "file": "./scripts/deployment-checklist.ts",
      "line": 95,
      "service": "openai",
      "content": "'AZURE_OPENAI_API_KEY',"
    },
    {
      "file": "./scripts/deployment-checklist.ts",
      "line": 96,
      "service": "openai",
      "content": "'AZURE_OPENAI_DEPLOYMENT',"
    },
    {
      "file": "./scripts/deployment-checklist.ts",
      "line": 238,
      "service": "openai",
      "content": "// Check Azure OpenAI"
    },
    {
      "file": "./scripts/deployment-checklist.ts",
      "line": 239,
      "service": "openai",
      "content": "if (process.env.AZURE_OPENAI_ENDPOINT && process.env.AZURE_OPENAI_KEY) {"
    },
    {
      "file": "./scripts/deployment-checklist.ts",
      "line": 240,
      "service": "openai",
      "content": "const response = await fetch(`${process.env.AZURE_OPENAI_ENDPOINT}/openai/deployments?api-version=2024-02-15-preview`, {"
    },
    {
      "file": "./scripts/deployment-checklist.ts",
      "line": 242,
      "service": "openai",
      "content": "'api-key': process.env.AZURE_OPENAI_KEY"
    },
    {
      "file": "./scripts/deployment-checklist.ts",
      "line": 248,
      "service": "openai",
      "content": "name: 'Azure OpenAI Connectivity',"
    },
    {
      "file": "./scripts/deployment-checklist.ts",
      "line": 250,
      "service": "openai",
      "content": "message: 'Successfully connected to Azure OpenAI'"
    },
    {
      "file": "./scripts/deployment-checklist.ts",
      "line": 254,
      "service": "openai",
      "content": "name: 'Azure OpenAI Connectivity',"
    },
    {
      "file": "./scripts/deployment-checklist.ts",
      "line": 256,
      "service": "openai",
      "content": "message: `Azure OpenAI returned status ${response.status}`"
    },
    {
      "file": "./scripts/deployment-checklist.ts",
      "line": 261,
      "service": "openai",
      "content": "name: 'Azure OpenAI Connectivity',"
    },
    {
      "file": "./scripts/deployment-checklist.ts",
      "line": 263,
      "service": "openai",
      "content": "message: 'Azure OpenAI credentials not configured'"
    },
    {
      "file": "./scripts/voice-system-test.ts",
      "line": 9,
      "service": "openai",
      "content": "import { azureOpenAIService } from '../lib/services/azure-openai-service';"
    },
    {
      "file": "./scripts/voice-system-test.ts",
      "line": 71,
      "service": "openai",
      "content": "const openaiResult = await this.runTest('Azure OpenAI Service Initialization', async () => {"
    },
    {
      "file": "./scripts/voice-system-test.ts",
      "line": 72,
      "service": "openai",
      "content": "const initialized = await azureOpenAIService.initialize();"
    },
    {
      "file": "./scripts/voice-system-test.ts",
      "line": 74,
      "service": "openai",
      "content": "return { ready: azureOpenAIService.isReady() };"
    },
    {
      "file": "./scripts/voice-system-test.ts",
      "line": 110,
      "service": "openai",
      "content": "azureOpenAIService.setInterviewContext({ type, maxQuestions: 3 });"
    },
    {
      "file": "./scripts/voice-system-test.ts",
      "line": 112,
      "service": "openai",
      "content": "const startResponse = await azureOpenAIService.startInterviewConversation();"
    },
    {
      "file": "./scripts/voice-system-test.ts",
      "line": 113,
      "service": "openai",
      "content": "const processResponse = await azureOpenAIService.processUserResponse("
    },
    {
      "file": "./scripts/voice-system-test.ts",
      "line": 131,
      "service": "openai",
      "content": "azureOpenAIService.clearConversation();"
    },
    {
      "file": "./scripts/voice-system-test.ts",
      "line": 134,
      "service": "openai",
      "content": "azureOpenAIService.setInterviewContext({"
    },
    {
      "file": "./scripts/voice-system-test.ts",
      "line": 141,
      "service": "openai",
      "content": "const start = await azureOpenAIService.startInterviewConversation();"
    },
    {
      "file": "./scripts/voice-system-test.ts",
      "line": 155,
      "service": "openai",
      "content": "const aiResponse = await azureOpenAIService.processUserResponse(userResponse);"
    },
    {
      "file": "./scripts/voice-system-test.ts",
      "line": 168,
      "service": "openai",
      "content": "const summary = await azureOpenAIService.generateInterviewSummary();"
    },
    {
      "file": "./scripts/voice-system-test.ts",
      "line": 189,
      "service": "openai",
      "content": "test: () => azureOpenAIService.processUserResponse('')"
    },
    {
      "file": "./scripts/voice-system-test.ts",
      "line": 193,
      "service": "openai",
      "content": "test: () => azureOpenAIService.processUserResponse('a'.repeat(5000))"
    },
    {
      "file": "./scripts/voice-system-test.ts",
      "line": 221,
      "service": "openai",
      "content": "await azureOpenAIService.processUserResponse(\"Yes, I understand the question.\");"
    },
    {
      "file": "./scripts/fetch-build-config.ts",
      "line": 12,
      "service": "appconfig",
      "content": "import { AppConfigurationClient, ConfigurationSetting } from '@azure/app-configuration';"
    },
    {
      "file": "./scripts/fetch-build-config.ts",
      "line": 13,
      "service": "identity",
      "content": "import { DefaultAzureCredential } from '@azure/identity';"
    },
    {
      "file": "./scripts/fetch-build-config.ts",
      "line": 42,
      "service": "identity",
      "content": "this.client = new AppConfigurationClient(connStr, new DefaultAzureCredential());"
    },
    {
      "file": "./scripts/fetch-build-config.ts",
      "line": 291,
      "service": "openai",
      "content": "description: 'Enable Azure OpenAI-powered automatic job application feature'"
    },
    {
      "file": "./scripts/check-azure-health.ts",
      "line": 8,
      "service": "openai",
      "content": "* 2. Deployment names match available Azure OpenAI models"
    },
    {
      "file": "./scripts/check-azure-health.ts",
      "line": 13,
      "service": "openai",
      "content": "import { azureOpenAIService } from '../lib/services/azure-openai-service';"
    },
    {
      "file": "./scripts/check-azure-health.ts",
      "line": 42,
      "service": "openai",
      "content": "log('Checking Azure OpenAI API versions...', 'info');"
    },
    {
      "file": "./scripts/check-azure-health.ts",
      "line": 52,
      "service": "openai",
      "content": "'lib/services/azure-openai-service.ts',"
    },
    {
      "file": "./scripts/check-azure-health.ts",
      "line": 53,
      "service": "openai",
      "content": "'lib/services/azure-openai.ts',"
    },
    {
      "file": "./scripts/check-azure-health.ts",
      "line": 54,
      "service": "openai",
      "content": "'azure/lib/services/azure-openai-service.ts',"
    },
    {
      "file": "./scripts/check-azure-health.ts",
      "line": 86,
      "service": "openai",
      "content": "log('Checking Azure OpenAI deployment names...', 'info');"
    },
    {
      "file": "./scripts/check-azure-health.ts",
      "line": 90,
      "service": "openai",
      "content": "const deployment = secrets.azureOpenAIDeployment;"
    },
    {
      "file": "./scripts/check-azure-health.ts",
      "line": 157,
      "service": "openai",
      "content": "// Test Azure OpenAI Service"
    },
    {
      "file": "./scripts/check-azure-health.ts",
      "line": 159,
      "service": "openai",
      "content": "const initialized = await azureOpenAIService.initialize();"
    },
    {
      "file": "./scripts/check-azure-health.ts",
      "line": 160,
      "service": "openai",
      "content": "if (initialized && azureOpenAIService.isReady()) {"
    },
    {
      "file": "./scripts/check-azure-health.ts",
      "line": 161,
      "service": "openai",
      "content": "log('Azure OpenAI Service initialized successfully', 'success');"
    },
    {
      "file": "./scripts/check-azure-health.ts",
      "line": 164,
      "service": "openai",
      "content": "log('Azure OpenAI Service initialization returned false', 'warning');"
    },
    {
      "file": "./scripts/check-azure-health.ts",
      "line": 167,
      "service": "openai",
      "content": "log(`Azure OpenAI Service initialization failed: ${(error as any).message}`, 'error');"
    },
    {
      "file": "./scripts/check-azure-health.ts",
      "line": 169,
      "service": "openai",
      "content": "azureOpenAIService.dispose();"
    },
    {
      "file": "./scripts/test-resume-processing.ts",
      "line": 42,
      "service": "openai",
      "content": "console.log(`   ✅ Azure Form Recognizer: ${results.azureFormRecognizerInit ? 'Ready' : 'Not configured (will use OpenAI fallback)'}`);"
    },
    {
      "file": "./scripts/test-resume-processing.ts",
      "line": 148,
      "service": "openai",
      "content": "console.log(`Azure Form Recognizer: ${results.azureFormRecognizerInit ? '✅ Ready' : '⚠️ Fallback to OpenAI'}`);"
    },
    {
      "file": "./scripts/setup-azure-app-config.ts",
      "line": 28,
      "service": "openai",
      "content": "description: 'Enable Azure OpenAI-powered automatic job application feature for gradual rollout',"
    },
    {
      "file": "./scripts/setup-azure-app-config.ts",
      "line": 153,
      "service": "appconfig",
      "content": "const { AppConfigurationClient } = require('@azure/app-configuration');"
    },
    {
      "file": "./scripts/test-azure-openai.js",
      "line": 4,
      "service": "openai",
      "content": "* Test script to validate Azure OpenAI deployment configuration"
    },
    {
      "file": "./scripts/test-azure-openai.js",
      "line": 27,
      "service": "openai",
      "content": "'AZURE_OPENAI_KEY',"
    },
    {
      "file": "./scripts/test-azure-openai.js",
      "line": 28,
      "service": "openai",
      "content": "'AZURE_OPENAI_ENDPOINT',"
    },
    {
      "file": "./scripts/test-azure-openai.js",
      "line": 29,
      "service": "openai",
      "content": "'AZURE_OPENAI_DEPLOYMENT',"
    },
    {
      "file": "./scripts/test-azure-openai.js",
      "line": 30,
      "service": "openai",
      "content": "'NEXT_PUBLIC_AZURE_OPENAI_API_KEY',"
    },
    {
      "file": "./scripts/test-azure-openai.js",
      "line": 31,
      "service": "openai",
      "content": "'NEXT_PUBLIC_AZURE_OPENAI_ENDPOINT',"
    },
    {
      "file": "./scripts/test-azure-openai.js",
      "line": 32,
      "service": "openai",
      "content": "'NEXT_PUBLIC_AZURE_OPENAI_DEPLOYMENT'"
    },
    {
      "file": "./scripts/test-azure-openai.js",
      "line": 54,
      "service": "openai",
      "content": "const { AzureOpenAI } = require('openai');"
    },
    {
      "file": "./scripts/test-azure-openai.js",
      "line": 55,
      "service": "openai",
      "content": "log('green', '✅ AzureOpenAI import successful');"
    },
    {
      "file": "./scripts/test-azure-openai.js",
      "line": 57,
      "service": "openai",
      "content": "// Test Azure OpenAI client instantiation"
    },
    {
      "file": "./scripts/test-azure-openai.js",
      "line": 58,
      "service": "openai",
      "content": "if (process.env.AZURE_OPENAI_KEY && process.env.AZURE_OPENAI_ENDPOINT) {"
    },
    {
      "file": "./scripts/test-azure-openai.js",
      "line": 59,
      "service": "openai",
      "content": "const client = new AzureOpenAI({"
    },
    {
      "file": "./scripts/test-azure-openai.js",
      "line": 60,
      "service": "openai",
      "content": "apiKey: process.env.AZURE_OPENAI_KEY,"
    },
    {
      "file": "./scripts/test-azure-openai.js",
      "line": 61,
      "service": "openai",
      "content": "endpoint: process.env.AZURE_OPENAI_ENDPOINT,"
    },
    {
      "file": "./scripts/test-azure-openai.js",
      "line": 62,
      "service": "openai",
      "content": "deployment: process.env.AZURE_OPENAI_DEPLOYMENT || 'gpt-4o',"
    },
    {
      "file": "./scripts/test-azure-openai.js",
      "line": 65,
      "service": "openai",
      "content": "log('green', '✅ AzureOpenAI client instantiation successful');"
    },
    {
      "file": "./scripts/test-azure-openai.js",
      "line": 137,
      "service": "openai",
      "content": "log('cyan', '🚀 Starting Azure OpenAI Deployment Test...\\n');"
    },
    {
      "file": "./scripts/test-azure-openai.js",
      "line": 156,
      "service": "openai",
      "content": "log('green', '\\n🎉 All tests passed! Azure OpenAI deployment should work correctly.');"
    },
    {
      "file": "./scripts/setup-remote-config.ts",
      "line": 21,
      "service": "openai",
      "content": "description: 'Enable Azure OpenAI-powered automatic job application feature for gradual rollout',"
    },
    {
      "file": "./scripts/setup-azure-app-config-production.ts",
      "line": 12,
      "service": "appconfig",
      "content": "import { AppConfigurationClient } from '@azure/app-configuration';"
    },
    {
      "file": "./scripts/setup-azure-app-config-production.ts",
      "line": 13,
      "service": "identity",
      "content": "import { DefaultAzureCredential } from '@azure/identity';"
    },
    {
      "file": "./scripts/setup-azure-app-config-production.ts",
      "line": 74,
      "service": "openai",
      "content": "description: 'Enable Azure OpenAI-powered automatic job application feature',"
    },
    {
      "file": "./scripts/setup-azure-app-config-production.ts",
      "line": 123,
      "service": "identity",
      "content": "this.client = new AppConfigurationClient(this.connectionString, new DefaultAzureCredential());"
    },
    {
      "file": "./scripts/test-key-vault.js",
      "line": 3,
      "service": "identity",
      "content": "const { DefaultAzureCredential } = require('@azure/identity');"
    },
    {
      "file": "./scripts/test-key-vault.js",
      "line": 4,
      "service": "keyvault",
      "content": "const { SecretClient } = require('@azure/keyvault-secrets');"
    },
    {
      "file": "./scripts/test-key-vault.js",
      "line": 18,
      "service": "identity",
      "content": "const credential = new DefaultAzureCredential();"
    },
    {
      "file": "./scripts/test-key-vault.js",
      "line": 19,
      "service": "keyvault",
      "content": "const client = new SecretClient(AZURE_KEY_VAULT_URI, credential);"
    },
    {
      "file": "./scripts/test-key-vault.js",
      "line": 25,
      "service": "openai",
      "content": "'azure-openai-key',"
    },
    {
      "file": "./scripts/test-key-vault.js",
      "line": 26,
      "service": "openai",
      "content": "'azure-openai-endpoint',"
    },
    {
      "file": "./scripts/test-key-vault.js",
      "line": 27,
      "service": "openai",
      "content": "'azure-openai-deployment',"
    },
    {
      "file": "./scripts/test-key-vault.js",
      "line": 28,
      "service": "openai",
      "content": "'azure-openai-gpt35-deployment',"
    },
    {
      "file": "./scripts/test-key-vault.js",
      "line": 29,
      "service": "openai",
      "content": "'azure-openai-gpt4o-deployment',"
    },
    {
      "file": "./scripts/test-key-vault.js",
      "line": 128,
      "service": "openai",
      "content": "'AZURE_OPENAI_API_KEY': process.env.AZURE_OPENAI_API_KEY,"
    },
    {
      "file": "./scripts/test-key-vault.js",
      "line": 129,
      "service": "openai",
      "content": "'AZURE_OPENAI_ENDPOINT': process.env.AZURE_OPENAI_ENDPOINT,"
    },
    {
      "file": "./scripts/test-key-vault.js",
      "line": 130,
      "service": "openai",
      "content": "'AZURE_OPENAI_DEPLOYMENT': process.env.AZURE_OPENAI_DEPLOYMENT,"
    },
    {
      "file": "./scripts/test-key-vault.js",
      "line": 147,
      "service": "identity",
      "content": "if (error.message.includes('DefaultAzureCredential')) {"
    },
    {
      "file": "./scripts/monitor-mock-interview-usage.ts",
      "line": 8,
      "service": "openai",
      "content": "* - Azure OpenAI token usage and costs"
    },
    {
      "file": "./scripts/monitor-mock-interview-usage.ts",
      "line": 30,
      "service": "openai",
      "content": "const COST_PER_1K_TOKENS = 0.03; // Azure OpenAI pricing (adjust as needed)"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 4,
      "service": "openai",
      "content": "* Azure OpenAI Integration Test Script"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 6,
      "service": "openai",
      "content": "* This script tests the complete Azure OpenAI integration including:"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 9,
      "service": "openai",
      "content": "* - Prompt parity with Azure OpenAI"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 14,
      "service": "openai",
      "content": "import { azureOpenAIService } from '../lib/services/azure-openai-service';"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 15,
      "service": "openai",
      "content": "import { enhancedAzureOpenAIService } from '../lib/services/azure-openai-enhanced';"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 16,
      "service": "openai",
      "content": "import { AzureOpenAIAdapter } from '../lib/ai/azureOpenAI';"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 58,
      "service": "openai",
      "content": "class AzureOpenAITester {"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 108,
      "service": "openai",
      "content": "// Test standard Azure OpenAI service"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 109,
      "service": "openai",
      "content": "const initialized = await azureOpenAIService.initialize();"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 111,
      "service": "openai",
      "content": "throw new Error('Failed to initialize standard Azure OpenAI service');"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 114,
      "service": "openai",
      "content": "if (!azureOpenAIService.isReady()) {"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 115,
      "service": "openai",
      "content": "throw new Error('Standard Azure OpenAI service not ready');"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 123,
      "service": "openai",
      "content": "const initialized = await enhancedAzureOpenAIService.initialize();"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 125,
      "service": "openai",
      "content": "throw new Error('Failed to initialize enhanced Azure OpenAI service');"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 128,
      "service": "openai",
      "content": "if (!enhancedAzureOpenAIService.isReady()) {"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 129,
      "service": "openai",
      "content": "throw new Error('Enhanced Azure OpenAI service not ready');"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 132,
      "service": "openai",
      "content": "const deployments = enhancedAzureOpenAIService.getAvailableDeployments();"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 143,
      "service": "openai",
      "content": "const adapter = new AzureOpenAIAdapter();"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 147,
      "service": "openai",
      "content": "throw new Error('Failed to initialize Azure OpenAI adapter');"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 151,
      "service": "openai",
      "content": "throw new Error('Azure OpenAI adapter not ready');"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 163,
      "service": "openai",
      "content": "const adapter = new AzureOpenAIAdapter();"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 181,
      "service": "openai",
      "content": "const adapter = new AzureOpenAIAdapter();"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 206,
      "service": "openai",
      "content": "const adapter = new AzureOpenAIAdapter();"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 229,
      "service": "openai",
      "content": "const adapter = new AzureOpenAIAdapter();"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 250,
      "service": "openai",
      "content": "// Test that prompts match Azure OpenAI format for consistency"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 251,
      "service": "openai",
      "content": "const adapter = new AzureOpenAIAdapter();"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 261,
      "service": "openai",
      "content": "temperatureMatches: true, // Enhanced service uses Azure OpenAI-matching defaults"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 262,
      "service": "openai",
      "content": "maxTokensMatches: true,   // Enhanced service uses Azure OpenAI-matching defaults"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 263,
      "service": "openai",
      "content": "promptFormatConsistent: true // Prompts match Azure OpenAI format exactly"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 268,
      "service": "openai",
      "content": "console.log('🚀 Starting Azure OpenAI Integration Tests\\n');"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 285,
      "service": "openai",
      "content": "await this.runTest('Prompt Parity with Azure OpenAI', () => this.testPromptParity());"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 322,
      "service": "openai",
      "content": "console.log('\\n🎉 All tests passed! Azure OpenAI integration is working correctly.');"
    },
    {
      "file": "./scripts/test-azure-openai-integration.ts",
      "line": 332,
      "service": "openai",
      "content": "const tester = new AzureOpenAITester();"
    },
    {
      "file": "./scripts/compare-env-variables.ts",
      "line": 48,
      "service": "openai",
      "content": "// Azure OpenAI"
    },
    {
      "file": "./scripts/compare-env-variables.ts",
      "line": 49,
      "service": "openai",
      "content": "['AZURE_OPENAI_API_KEY', 'azure-openai-key'],"
    },
    {
      "file": "./scripts/compare-env-variables.ts",
      "line": 50,
      "service": "openai",
      "content": "['AZURE_OPENAI_ENDPOINT', 'azure-openai-endpoint'],"
    },
    {
      "file": "./scripts/compare-env-variables.ts",
      "line": 51,
      "service": "openai",
      "content": "['AZURE_OPENAI_DEPLOYMENT', 'azure-openai-deployment'],"
    },
    {
      "file": "./scripts/compare-env-variables.ts",
      "line": 52,
      "service": "openai",
      "content": "['AZURE_OPENAI_GPT35_DEPLOYMENT', 'azure-openai-gpt35-deployment'],"
    },
    {
      "file": "./scripts/compare-env-variables.ts",
      "line": 53,
      "service": "openai",
      "content": "['AZURE_OPENAI_GPT4O_DEPLOYMENT', 'azure-openai-gpt4o-deployment'],"
    },
    {
      "file": "./scripts/compare-env-variables.ts",
      "line": 96,
      "service": "openai",
      "content": "'AZURE_OPENAI_API_KEY',"
    },
    {
      "file": "./scripts/compare-env-variables.ts",
      "line": 97,
      "service": "openai",
      "content": "'AZURE_OPENAI_ENDPOINT',"
    },
    {
      "file": "./scripts/compare-env-variables.ts",
      "line": 98,
      "service": "openai",
      "content": "'AZURE_OPENAI_DEPLOYMENT',"
    },
    {
      "file": "./scripts/compare-env-variables.ts",
      "line": 214,
      "service": "openai",
      "content": "name: 'Azure OpenAI',"
    },
    {
      "file": "./scripts/compare-env-variables.ts",
      "line": 215,
      "service": "openai",
      "content": "vars: ['AZURE_OPENAI_API_KEY', 'AZURE_OPENAI_ENDPOINT', 'AZURE_OPENAI_DEPLOYMENT'],"
    },
    {
      "file": "./lib/middleware/error-handler.ts",
      "line": 124,
      "service": "openai",
      "content": "// External service errors (Azure OpenAI, etc.)"
    },
    {
      "file": "./lib/middleware/error-handler.ts",
      "line": 125,
      "service": "openai",
      "content": "if (error.message?.includes('Azure OpenAI') || error.message?.includes('OpenAI')) {"
    },
    {
      "file": "./lib/errors.ts",
      "line": 101,
      "service": "openai",
      "content": "// Azure OpenAI specific errors"
    },
    {
      "file": "./lib/utils/telemetry.ts",
      "line": 159,
      "service": "insights",
      "content": "const { azureApplicationInsights } = await import('../services/azure-application-insights-service');"
    },
    {
      "file": "./lib/utils/telemetry.ts",
      "line": 160,
      "service": "insights",
      "content": "serverTelemetry = azureApplicationInsights;"
    },
    {
      "file": "./lib/utils/retry-with-backoff.ts",
      "line": 146,
      "service": "openai",
      "content": "// Azure OpenAI specific errors"
    },
    {
      "file": "./lib/utils/resume-parser.ts",
      "line": 2,
      "service": "openai",
      "content": "import { azureOpenAIService } from '../services/azure-openai-service';"
    },
    {
      "file": "./lib/utils/resume-parser.ts",
      "line": 137,
      "service": "openai",
      "content": "* AI-powered extraction using Azure OpenAI"
    },
    {
      "file": "./lib/utils/resume-parser.ts",
      "line": 141,
      "service": "openai",
      "content": "// Ensure Azure OpenAI service is initialized"
    },
    {
      "file": "./lib/utils/resume-parser.ts",
      "line": 142,
      "service": "openai",
      "content": "await azureOpenAIService.initialize();"
    },
    {
      "file": "./lib/utils/resume-parser.ts",
      "line": 199,
      "service": "openai",
      "content": "const response = await azureOpenAIService.generateCompletion(prompt);"
    },
    {
      "file": "./lib/utils/resume-parser.ts",
      "line": 269,
      "service": "openai",
      "content": "// Ensure Azure OpenAI service is initialized"
    },
    {
      "file": "./lib/utils/resume-parser.ts",
      "line": 270,
      "service": "openai",
      "content": "await azureOpenAIService.initialize();"
    },
    {
      "file": "./lib/utils/resume-parser.ts",
      "line": 292,
      "service": "openai",
      "content": "const questionsText = await azureOpenAIService.generateCompletion(prompt);"
    },
    {
      "file": "./lib/azure-config-browser.ts",
      "line": 7,
      "service": "openai",
      "content": "azureOpenAIKey: string;"
    },
    {
      "file": "./lib/azure-config-browser.ts",
      "line": 8,
      "service": "openai",
      "content": "azureOpenAIEndpoint: string;"
    },
    {
      "file": "./lib/azure-config-browser.ts",
      "line": 9,
      "service": "openai",
      "content": "azureOpenAIDeployment: string;"
    },
    {
      "file": "./lib/azure-config-browser.ts",
      "line": 10,
      "service": "openai",
      "content": "azureOpenAIGpt35Deployment?: string; // gpt-35-turbo deployment"
    },
    {
      "file": "./lib/azure-config-browser.ts",
      "line": 11,
      "service": "openai",
      "content": "azureOpenAIGpt4oDeployment?: string; // gpt-4o deployment"
    },
    {
      "file": "./lib/azure-config-browser.ts",
      "line": 34,
      "service": "openai",
      "content": "azureOpenAIKey: process.env.NEXT_PUBLIC_AZURE_OPENAI_API_KEY || '',"
    },
    {
      "file": "./lib/azure-config-browser.ts",
      "line": 35,
      "service": "openai",
      "content": "azureOpenAIEndpoint: process.env.NEXT_PUBLIC_AZURE_OPENAI_ENDPOINT || '',"
    },
    {
      "file": "./lib/azure-config-browser.ts",
      "line": 36,
      "service": "openai",
      "content": "azureOpenAIDeployment: process.env.NEXT_PUBLIC_AZURE_OPENAI_DEPLOYMENT || 'gpt-4o',"
    },
    {
      "file": "./lib/azure-config-browser.ts",
      "line": 37,
      "service": "openai",
      "content": "azureOpenAIGpt35Deployment: process.env.NEXT_PUBLIC_AZURE_OPENAI_GPT35_DEPLOYMENT || 'gpt-35-turbo',"
    },
    {
      "file": "./lib/azure-config-browser.ts",
      "line": 38,
      "service": "openai",
      "content": "azureOpenAIGpt4oDeployment: process.env.NEXT_PUBLIC_AZURE_OPENAI_GPT4O_DEPLOYMENT || 'gpt-4o',"
    },
    {
      "file": "./lib/azure-config-browser.ts",
      "line": 48,
      "service": "openai",
      "content": "if (!secrets.azureOpenAIKey || !secrets.azureOpenAIEndpoint) {"
    },
    {
      "file": "./lib/azure-config-browser.ts",
      "line": 49,
      "service": "openai",
      "content": "console.warn('⚠️ Azure OpenAI credentials not available in browser environment');"
    },
    {
      "file": "./lib/azure-config-browser.ts",
      "line": 67,
      "service": "openai",
      "content": "azureOpenAIKey: '',"
    },
    {
      "file": "./lib/azure-config-browser.ts",
      "line": 68,
      "service": "openai",
      "content": "azureOpenAIEndpoint: '',"
    },
    {
      "file": "./lib/azure-config-browser.ts",
      "line": 69,
      "service": "openai",
      "content": "azureOpenAIDeployment: 'gpt-4o',"
    },
    {
      "file": "./lib/azure-config-browser.ts",
      "line": 70,
      "service": "openai",
      "content": "azureOpenAIGpt35Deployment: 'gpt-35-turbo',"
    },
    {
      "file": "./lib/azure-config-browser.ts",
      "line": 71,
      "service": "openai",
      "content": "azureOpenAIGpt4oDeployment: 'gpt-4o',"
    },
    {
      "file": "./lib/azure-config-browser.ts",
      "line": 91,
      "service": "openai",
      "content": "azureOpenAIKey: !!process.env.NEXT_PUBLIC_AZURE_OPENAI_API_KEY,"
    },
    {
      "file": "./lib/azure-config-browser.ts",
      "line": 92,
      "service": "openai",
      "content": "azureOpenAIEndpoint: !!process.env.NEXT_PUBLIC_AZURE_OPENAI_ENDPOINT,"
    },
    {
      "file": "./lib/azure-config-browser.ts",
      "line": 93,
      "service": "openai",
      "content": "azureOpenAIDeployment: !!process.env.NEXT_PUBLIC_AZURE_OPENAI_DEPLOYMENT,"
    },
    {
      "file": "./lib/azure-config-browser.ts",
      "line": 94,
      "service": "openai",
      "content": "azureOpenAIGpt35Deployment: !!process.env.NEXT_PUBLIC_AZURE_OPENAI_GPT35_DEPLOYMENT,"
    },
    {
      "file": "./lib/azure-config-browser.ts",
      "line": 95,
      "service": "openai",
      "content": "azureOpenAIGpt4oDeployment: !!process.env.NEXT_PUBLIC_AZURE_OPENAI_GPT4O_DEPLOYMENT,"
    },
    {
      "file": "./lib/azure-config-browser.ts",
      "line": 100,
      "service": "openai",
      "content": "default: process.env.NEXT_PUBLIC_AZURE_OPENAI_DEPLOYMENT,"
    },
    {
      "file": "./lib/azure-config-browser.ts",
      "line": 101,
      "service": "openai",
      "content": "gpt35Turbo: process.env.NEXT_PUBLIC_AZURE_OPENAI_GPT35_DEPLOYMENT || 'gpt-35-turbo',"
    },
    {
      "file": "./lib/azure-config-browser.ts",
      "line": 102,
      "service": "openai",
      "content": "gpt4o: process.env.NEXT_PUBLIC_AZURE_OPENAI_GPT4O_DEPLOYMENT || 'gpt-4o'"
    },
    {
      "file": "./lib/ai/example.ts",
      "line": 2,
      "service": "openai",
      "content": "* Example usage of the Azure OpenAI AI Service Layer"
    },
    {
      "file": "./lib/ai/example.ts",
      "line": 4,
      "service": "openai",
      "content": "* This file demonstrates how to use the AI service layer with Azure OpenAI."
    },
    {
      "file": "./lib/ai/example.ts",
      "line": 127,
      "service": "openai",
      "content": "console.log('# Azure OpenAI Configuration (Required)');"
    },
    {
      "file": "./lib/ai/example.ts",
      "line": 128,
      "service": "openai",
      "content": "console.log('AI_PROVIDER=azure-openai');"
    },
    {
      "file": "./lib/ai/example.ts",
      "line": 132,
      "service": "openai",
      "content": "console.log('# (Plus other Azure OpenAI credentials)');"
    },
    {
      "file": "./lib/ai/__tests__/index.test.ts",
      "line": 14,
      "service": "openai",
      "content": "import { AzureOpenAIAdapter } from '../azureOpenAI';"
    },
    {
      "file": "./lib/ai/__tests__/index.test.ts",
      "line": 17,
      "service": "openai",
      "content": "jest.mock('../azureOpenAI');"
    },
    {
      "file": "./lib/ai/__tests__/index.test.ts",
      "line": 37,
      "service": "openai",
      "content": "let mockAzureAdapter: jest.Mocked<AzureOpenAIAdapter>;"
    },
    {
      "file": "./lib/ai/__tests__/index.test.ts",
      "line": 44,
      "service": "openai",
      "content": "name: 'Azure OpenAI',"
    },
    {
      "file": "./lib/ai/__tests__/index.test.ts",
      "line": 55,
      "service": "openai",
      "content": "(AzureOpenAIAdapter as jest.MockedClass<typeof AzureOpenAIAdapter>).mockImplementation(() => mockAzureAdapter);"
    },
    {
      "file": "./lib/ai/__tests__/index.test.ts",
      "line": 63,
      "service": "openai",
      "content": "it('should initialize with Azure OpenAI provider', async () => {"
    },
    {
      "file": "./lib/ai/__tests__/index.test.ts",
      "line": 72,
      "service": "openai",
      "content": "expect(response.provider).toBe('Azure OpenAI');"
    },
    {
      "file": "./lib/ai/__tests__/index.test.ts",
      "line": 76,
      "service": "openai",
      "content": "it('should return error when Azure OpenAI provider is not available', async () => {"
    },
    {
      "file": "./lib/ai/__tests__/index.test.ts",
      "line": 101,
      "service": "openai",
      "content": "expect(response.provider).toBe('Azure OpenAI');"
    },
    {
      "file": "./lib/ai/__tests__/index.test.ts",
      "line": 112,
      "service": "openai",
      "content": "expect(response.provider).toBe('Azure OpenAI');"
    },
    {
      "file": "./lib/ai/__tests__/index.test.ts",
      "line": 130,
      "service": "openai",
      "content": "expect(response.provider).toBe('Azure OpenAI');"
    },
    {
      "file": "./lib/ai/__tests__/index.test.ts",
      "line": 177,
      "service": "openai",
      "content": "expect(response.provider).toBe('Azure OpenAI');"
    },
    {
      "file": "./lib/ai/__tests__/index.test.ts",
      "line": 217,
      "service": "openai",
      "content": "expect(response.provider).toBe('Azure OpenAI');"
    },
    {
      "file": "./lib/ai/__tests__/index.test.ts",
      "line": 247,
      "service": "openai",
      "content": "expect(info.name).toBe('Azure OpenAI');"
    },
    {
      "file": "./lib/ai/__tests__/index.test.ts",
      "line": 264,
      "service": "openai",
      "content": "it('should switch to Azure OpenAI successfully', async () => {"
    },
    {
      "file": "./lib/ai/__tests__/index.test.ts",
      "line": 267,
      "service": "openai",
      "content": "expect(getProviderInfo().name).toBe('Azure OpenAI');"
    },
    {
      "file": "./lib/ai/__tests__/index.test.ts",
      "line": 270,
      "service": "openai",
      "content": "const response = await switchProvider('azure-openai');"
    },
    {
      "file": "./lib/ai/__tests__/index.test.ts",
      "line": 288,
      "service": "openai",
      "content": "const response = await switchProvider('azure-openai');"
    },
    {
      "file": "./lib/ai/__tests__/azureOpenAI.test.ts",
      "line": 2,
      "service": "openai",
      "content": "* Unit tests for the Azure OpenAI Adapter"
    },
    {
      "file": "./lib/ai/__tests__/azureOpenAI.test.ts",
      "line": 5,
      "service": "openai",
      "content": "import { AzureOpenAIAdapter } from '../azureOpenAI';"
    },
    {
      "file": "./lib/ai/__tests__/azureOpenAI.test.ts",
      "line": 6,
      "service": "openai",
      "content": "import { azureOpenAIService } from '@/lib/services/azure-openai-service';"
    },
    {
      "file": "./lib/ai/__tests__/azureOpenAI.test.ts",
      "line": 8,
      "service": "openai",
      "content": "// Mock the Azure OpenAI service"
    },
    {
      "file": "./lib/ai/__tests__/azureOpenAI.test.ts",
      "line": 9,
      "service": "openai",
      "content": "jest.mock('@/lib/services/azure-openai-service');"
    },
    {
      "file": "./lib/ai/__tests__/azureOpenAI.test.ts",
      "line": 11,
      "service": "openai",
      "content": "describe('AzureOpenAIAdapter', () => {"
    },
    {
      "file": "./lib/ai/__tests__/azureOpenAI.test.ts",
      "line": 12,
      "service": "openai",
      "content": "let adapter: AzureOpenAIAdapter;"
    },
    {
      "file": "./lib/ai/__tests__/azureOpenAI.test.ts",
      "line": 13,
      "service": "openai",
      "content": "let mockService: jest.Mocked<typeof azureOpenAIService>;"
    },
    {
      "file": "./lib/ai/__tests__/azureOpenAI.test.ts",
      "line": 19,
      "service": "openai",
      "content": "mockService = azureOpenAIService as jest.Mocked<typeof azureOpenAIService>;"
    },
    {
      "file": "./lib/ai/__tests__/azureOpenAI.test.ts",
      "line": 21,
      "service": "openai",
      "content": "adapter = new AzureOpenAIAdapter();"
    },
    {
      "file": "./lib/ai/__tests__/azureOpenAI.test.ts",
      "line": 110,
      "service": "openai",
      "content": "const uninitializedAdapter = new AzureOpenAIAdapter();"
    },
    {
      "file": "./lib/ai/__tests__/azureOpenAI.test.ts",
      "line": 113,
      "service": "openai",
      "content": ".rejects.toThrow('Azure OpenAI adapter not initialized');"
    },
    {
      "file": "./lib/ai/__tests__/azureOpenAI.test.ts",
      "line": 127,
      "service": "openai",
      "content": ".rejects.toThrow('Empty response from Azure OpenAI');"
    },
    {
      "file": "./lib/ai/__tests__/azureOpenAI.test.ts",
      "line": 137,
      "service": "openai",
      "content": ".rejects.toThrow('Empty response from Azure OpenAI');"
    },
    {
      "file": "./lib/ai/__tests__/azureOpenAI.test.ts",
      "line": 238,
      "service": "openai",
      "content": "const error = new Error('Azure OpenAI service error');"
    },
    {
      "file": "./lib/ai/__tests__/azureOpenAI.test.ts",
      "line": 242,
      "service": "openai",
      "content": ".rejects.toThrow('Azure OpenAI service error');"
    },
    {
      "file": "./lib/ai/__tests__/azureOpenAI.test.ts",
      "line": 318,
      "service": "openai",
      "content": "const newAdapter = new AzureOpenAIAdapter();"
    },
    {
      "file": "./lib/ai/__tests__/azureOpenAI.test.ts",
      "line": 343,
      "service": "openai",
      "content": ".rejects.toThrow('Empty response from Azure OpenAI');"
    },
    {
      "file": "./lib/ai/__tests__/azureOpenAI.test.ts",
      "line": 350,
      "service": "openai",
      "content": ".rejects.toThrow('Azure OpenAI adapter not initialized');"
    },
    {
      "file": "./lib/ai/index.ts",
      "line": 5,
      "service": "openai",
      "content": "* by Azure OpenAI services. Optimized for enterprise-grade AI functionality."
    },
    {
      "file": "./lib/ai/index.ts",
      "line": 8,
      "service": "openai",
      "content": "import { AzureOpenAIAdapter } from './azureOpenAI';"
    },
    {
      "file": "./lib/ai/index.ts",
      "line": 36,
      "service": "openai",
      "content": "* AI Service Manager - Azure OpenAI focused service manager"
    },
    {
      "file": "./lib/ai/index.ts",
      "line": 44,
      "service": "openai",
      "content": "// Register Azure OpenAI as the primary provider"
    },
    {
      "file": "./lib/ai/index.ts",
      "line": 45,
      "service": "openai",
      "content": "this.providers.set('azure-openai', new AzureOpenAIAdapter());"
    },
    {
      "file": "./lib/ai/index.ts",
      "line": 49,
      "service": "openai",
      "content": "* Initialize the AI service with Azure OpenAI"
    },
    {
      "file": "./lib/ai/index.ts",
      "line": 52,
      "service": "openai",
      "content": "const providerName = 'azure-openai';"
    },
    {
      "file": "./lib/ai/index.ts",
      "line": 58,
      "service": "openai",
      "content": "console.error(`❌ Azure OpenAI provider not found`);"
    },
    {
      "file": "./lib/ai/index.ts",
      "line": 71,
      "service": "openai",
      "content": "console.error(`❌ Failed to initialize Azure OpenAI provider:`, error);"
    },
    {
      "file": "./lib/ai/index.ts",
      "line": 74,
      "service": "openai",
      "content": "console.error('❌ Azure OpenAI provider failed to initialize');"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 2,
      "service": "openai",
      "content": "* Azure OpenAI Provider Adapter"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 4,
      "service": "openai",
      "content": "* This adapter wraps Azure OpenAI API to provide a consistent interface"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 5,
      "service": "openai",
      "content": "* for the AI service layer. Reuses the existing AzureOpenAIService for"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 9,
      "service": "openai",
      "content": "import { azureOpenAIService } from '@/lib/services/azure-openai-service';"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 10,
      "service": "openai",
      "content": "import { enhancedAzureOpenAIService } from '@/lib/services/azure-openai-enhanced';"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 14,
      "service": "openai",
      "content": "export class AzureOpenAIAdapter implements AIProvider {"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 15,
      "service": "openai",
      "content": "public name = 'Azure OpenAI (Enhanced)';"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 19,
      "service": "openai",
      "content": "// Default parameters for optimal Azure OpenAI performance"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 26,
      "service": "openai",
      "content": "* Initialize the Azure OpenAI service"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 32,
      "service": "openai",
      "content": "this.isInitialized = await enhancedAzureOpenAIService.initialize();"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 34,
      "service": "openai",
      "content": "console.log('✅ Azure OpenAI adapter initialized with enhanced service');"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 42,
      "service": "openai",
      "content": "this.isInitialized = await azureOpenAIService.initialize();"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 45,
      "service": "openai",
      "content": "console.log('✅ Azure OpenAI adapter initialized with standard service');"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 47,
      "service": "openai",
      "content": "console.warn('⚠️ Azure OpenAI adapter failed to initialize');"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 52,
      "service": "openai",
      "content": "console.error('❌ Failed to initialize Azure OpenAI adapter:', error);"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 62,
      "service": "openai",
      "content": "return this.isInitialized && enhancedAzureOpenAIService.isReady();"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 64,
      "service": "openai",
      "content": "return this.isInitialized && azureOpenAIService.isReady();"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 68,
      "service": "openai",
      "content": "* Generate a cover letter using Azure OpenAI with retry logic"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 72,
      "service": "openai",
      "content": "throw new Error('Azure OpenAI adapter not initialized');"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 79,
      "service": "openai",
      "content": "return await enhancedAzureOpenAIService.generateCoverLetter(resumeText, jobDescription);"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 83,
      "service": "openai",
      "content": "return await this.generateWithAzureOpenAI(this.getCoverLetterPrompt(resumeText, jobDescription));"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 100,
      "service": "openai",
      "content": "throw new Error('Azure OpenAI adapter not initialized');"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 107,
      "service": "openai",
      "content": "return await enhancedAzureOpenAIService.calculateRelevancy(resumeText, jobDescription);"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 112,
      "service": "openai",
      "content": "const response = await this.generateWithAzureOpenAI(prompt, this.RELEVANCY_TEMPERATURE, this.RELEVANCY_MAX_TOKENS);"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 138,
      "service": "openai",
      "content": "throw new Error('Azure OpenAI adapter not initialized');"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 145,
      "service": "openai",
      "content": "return await enhancedAzureOpenAIService.tailorResume(resumeText, jobDescription);"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 149,
      "service": "openai",
      "content": "return await azureOpenAIService.tailorResume(resumeText, jobDescription);"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 166,
      "service": "openai",
      "content": "throw new Error('Azure OpenAI adapter not initialized');"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 173,
      "service": "openai",
      "content": "return await enhancedAzureOpenAIService.generateQuestions(resumeInfo);"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 177,
      "service": "openai",
      "content": "return await azureOpenAIService.generateQuestions(resumeInfo);"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 190,
      "service": "openai",
      "content": "* Generate content using Azure OpenAI with retry logic"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 193,
      "service": "openai",
      "content": "private async generateWithAzureOpenAI("
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 201,
      "service": "openai",
      "content": "const completion = await azureOpenAIService.createCompletion(messages, {"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 211,
      "service": "openai",
      "content": "throw new Error('Empty response from Azure OpenAI');"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 216,
      "service": "openai",
      "content": "console.error('❌ Error generating content with Azure OpenAI:', error);"
    },
    {
      "file": "./lib/ai/azureOpenAI.ts",
      "line": 273,
      "service": "openai",
      "content": "console.log('🧹 Azure OpenAI adapter disposed');"
    },
    {
      "file": "./lib/azure-startup.ts",
      "line": 28,
      "service": "openai",
      "content": "azureOpenAIKey: config.environment.azureOpenAIKey ? 'SET' : 'MISSING',"
    },
    {
      "file": "./lib/azure-startup.ts",
      "line": 29,
      "service": "openai",
      "content": "azureOpenAIEndpoint: config.environment.azureOpenAIEndpoint ? 'SET' : 'MISSING',"
    },
    {
      "file": "./lib/azure-startup.ts",
      "line": 30,
      "service": "openai",
      "content": "azureOpenAIDeployment: config.environment.azureOpenAIDeployment ? 'SET' : 'MISSING'"
    },
    {
      "file": "./lib/azure-startup.ts",
      "line": 50,
      "service": "openai",
      "content": "'azureOpenAIKey',"
    },
    {
      "file": "./lib/azure-startup.ts",
      "line": 51,
      "service": "openai",
      "content": "'azureOpenAIEndpoint',"
    },
    {
      "file": "./lib/azure-startup.ts",
      "line": 52,
      "service": "openai",
      "content": "'azureOpenAIDeployment'"
    },
    {
      "file": "./lib/services/mock-interview.service.test.ts",
      "line": 12,
      "service": "openai",
      "content": "// Mock the Azure OpenAI Adapter"
    },
    {
      "file": "./lib/services/mock-interview.service.test.ts",
      "line": 13,
      "service": "openai",
      "content": "jest.mock('@/lib/ai/azureOpenAI', () => ({"
    },
    {
      "file": "./lib/services/mock-interview.service.test.ts",
      "line": 14,
      "service": "openai",
      "content": "AzureOpenAIAdapter: jest.fn().mockImplementation(() => ({"
    },
    {
      "file": "./lib/services/mock-interview.service.test.ts",
      "line": 30,
      "service": "openai",
      "content": "generateWithAzureOpenAI: jest.fn().mockImplementation((prompt, temperature, maxTokens) => {"
    },
    {
      "file": "./lib/services/mock-interview.service.test.ts",
      "line": 114,
      "service": "openai",
      "content": "const mockAdapter = require('@/lib/ai/azureOpenAI').AzureOpenAIAdapter;"
    },
    {
      "file": "./lib/services/mock-interview.service.test.ts",
      "line": 342,
      "service": "openai",
      "content": "// Mock a failure in the Azure OpenAI adapter"
    },
    {
      "file": "./lib/services/mock-interview.service.test.ts",
      "line": 343,
      "service": "openai",
      "content": "const mockAdapter = require('@/lib/ai/azureOpenAI').AzureOpenAIAdapter;"
    },
    {
      "file": "./lib/services/mock-interview.service.test.ts",
      "line": 347,
      "service": "openai",
      "content": "generateWithAzureOpenAI: jest.fn().mockRejectedValue(new Error('API Error'))"
    },
    {
      "file": "./lib/services/azure-cosmos-service.ts",
      "line": 1,
      "service": "cosmos",
      "content": "import { CosmosClient, Database, Container } from '@azure/cosmos';"
    },
    {
      "file": "./lib/services/azure-cosmos-service.ts",
      "line": 2,
      "service": "identity",
      "content": "import { DefaultAzureCredential } from '@azure/identity';"
    },
    {
      "file": "./lib/services/azure-openai-enhanced.ts",
      "line": 2,
      "service": "openai",
      "content": "* Enhanced Azure OpenAI Service with Multi-Deployment Support"
    },
    {
      "file": "./lib/services/azure-openai-enhanced.ts",
      "line": 25,
      "service": "openai",
      "content": "export class EnhancedAzureOpenAIService {"
    },
    {
      "file": "./lib/services/azure-openai-enhanced.ts",
      "line": 88,
      "service": "openai",
      "content": "if (!this.secrets.azureOpenAIKey || !this.secrets.azureOpenAIEndpoint) {"
    },
    {
      "file": "./lib/services/azure-openai-enhanced.ts",
      "line": 89,
      "service": "openai",
      "content": "console.warn('⚠️ Azure OpenAI credentials not available');"
    },
    {
      "file": "./lib/services/azure-openai-enhanced.ts",
      "line": 95,
      "service": "openai",
      "content": "{ name: 'gpt-35-turbo', deployment: this.secrets.azureOpenAIGpt35Deployment || 'gpt-35-turbo' },"
    },
    {
      "file": "./lib/services/azure-openai-enhanced.ts",
      "line": 96,
      "service": "openai",
      "content": "{ name: 'gpt-4o', deployment: this.secrets.azureOpenAIGpt4oDeployment || 'gpt-4o' },"
    },
    {
      "file": "./lib/services/azure-openai-enhanced.ts",
      "line": 97,
      "service": "openai",
      "content": "{ name: 'default', deployment: this.secrets.azureOpenAIDeployment }"
    },
    {
      "file": "./lib/services/azure-openai-enhanced.ts",
      "line": 103,
      "service": "openai",
      "content": "apiKey: this.secrets.azureOpenAIKey,"
    },
    {
      "file": "./lib/services/azure-openai-enhanced.ts",
      "line": 104,
      "service": "openai",
      "content": "baseURL: `${this.secrets.azureOpenAIEndpoint}/openai/deployments/${deployment}`,"
    },
    {
      "file": "./lib/services/azure-openai-enhanced.ts",
      "line": 107,
      "service": "openai",
      "content": "'api-key': this.secrets.azureOpenAIKey,"
    },
    {
      "file": "./lib/services/azure-openai-enhanced.ts",
      "line": 112,
      "service": "openai",
      "content": "console.log(`✅ Azure OpenAI client initialized for ${name} (${deployment})`);"
    },
    {
      "file": "./lib/services/azure-openai-enhanced.ts",
      "line": 119,
      "service": "openai",
      "content": "console.log(`✅ Enhanced Azure OpenAI Service initialized with ${this.clients.size} clients`);"
    },
    {
      "file": "./lib/services/azure-openai-enhanced.ts",
      "line": 124,
      "service": "openai",
      "content": "console.error('❌ Failed to initialize Enhanced Azure OpenAI Service:', error);"
    },
    {
      "file": "./lib/services/azure-openai-enhanced.ts",
      "line": 138,
      "service": "openai",
      "content": "throw new Error('Enhanced Azure OpenAI Service not initialized');"
    },
    {
      "file": "./lib/services/azure-openai-enhanced.ts",
      "line": 167,
      "service": "openai",
      "content": "throw new Error(`Empty response from Azure OpenAI (${config.deployment})`);"
    },
    {
      "file": "./lib/services/azure-openai-enhanced.ts",
      "line": 358,
      "service": "openai",
      "content": "console.log('🧹 Enhanced Azure OpenAI Service disposed');"
    },
    {
      "file": "./lib/services/azure-openai-enhanced.ts",
      "line": 363,
      "service": "openai",
      "content": "export const enhancedAzureOpenAIService = new EnhancedAzureOpenAIService();"
    },
    {
      "file": "./lib/services/azure-ai-service.ts",
      "line": 1,
      "service": "identity",
      "content": "import { DefaultAzureCredential } from '@azure/identity';"
    },
    {
      "file": "./lib/services/azure-ai-service.ts",
      "line": 3,
      "service": "formrecognizer",
      "content": "import { DocumentAnalysisClient } from '@azure/ai-form-recognizer';"
    },
    {
      "file": "./lib/services/azure-ai-service.ts",
      "line": 4,
      "service": "openai",
      "content": "import { OpenAI, AzureOpenAI } from 'openai';"
    },
    {
      "file": "./lib/services/azure-ai-service.ts",
      "line": 94,
      "service": "openai",
      "content": "private openAIClient: AzureOpenAI | null = null;"
    },
    {
      "file": "./lib/services/azure-ai-service.ts",
      "line": 103,
      "service": "openai",
      "content": "this.openAIEndpoint = process.env.AZURE_OPENAI_ENDPOINT || '';"
    },
    {
      "file": "./lib/services/azure-ai-service.ts",
      "line": 104,
      "service": "openai",
      "content": "this.openAIApiKey = process.env.AZURE_OPENAI_API_KEY || '';"
    },
    {
      "file": "./lib/services/azure-ai-service.ts",
      "line": 113,
      "service": "openai",
      "content": "// Initialize Azure OpenAI"
    },
    {
      "file": "./lib/services/azure-ai-service.ts",
      "line": 115,
      "service": "openai",
      "content": "this.openAIClient = new AzureOpenAI({"
    },
    {
      "file": "./lib/services/azure-ai-service.ts",
      "line": 119,
      "service": "openai",
      "content": "console.log('✅ Azure OpenAI client initialized');"
    },
    {
      "file": "./lib/services/azure-ai-service.ts",
      "line": 133,
      "service": "identity",
      "content": "new DefaultAzureCredential()"
    },
    {
      "file": "./lib/services/azure-ai-service.ts",
      "line": 215,
      "service": "openai",
      "content": "throw new Error('Azure OpenAI not configured');"
    },
    {
      "file": "./lib/services/azure-ai-service.ts",
      "line": 218,
      "service": "openai",
      "content": "const deploymentName = process.env.AZURE_OPENAI_DEPLOYMENT_NAME || 'gpt-4';"
    },
    {
      "file": "./lib/services/azure-ai-service.ts",
      "line": 329,
      "service": "openai",
      "content": "throw new Error('Azure OpenAI not configured');"
    },
    {
      "file": "./lib/services/azure-ai-service.ts",
      "line": 333,
      "service": "openai",
      "content": "console.log('🤖 Generating interview questions with Azure OpenAI...');"
    },
    {
      "file": "./lib/services/azure-ai-service.ts",
      "line": 335,
      "service": "openai",
      "content": "const deploymentName = process.env.AZURE_OPENAI_DEPLOYMENT_NAME || 'gpt-4';"
    },
    {
      "file": "./lib/services/azure-ai-service.ts",
      "line": 404,
      "service": "openai",
      "content": "throw new Error('Azure OpenAI not configured');"
    },
    {
      "file": "./lib/services/azure-ai-service.ts",
      "line": 408,
      "service": "openai",
      "content": "console.log('📊 Generating interview feedback with Azure OpenAI...');"
    },
    {
      "file": "./lib/services/azure-ai-service.ts",
      "line": 410,
      "service": "openai",
      "content": "const deploymentName = process.env.AZURE_OPENAI_DEPLOYMENT_NAME || 'gpt-4';"
    },
    {
      "file": "./lib/services/azure-ai-service.ts",
      "line": 494,
      "service": "openai",
      "content": "throw new Error('Azure OpenAI not configured');"
    },
    {
      "file": "./lib/services/azure-ai-service.ts",
      "line": 498,
      "service": "openai",
      "content": "console.log('📝 Generating cover letter with Azure OpenAI...');"
    },
    {
      "file": "./lib/services/azure-ai-service.ts",
      "line": 500,
      "service": "openai",
      "content": "const deploymentName = process.env.AZURE_OPENAI_DEPLOYMENT_NAME || 'gpt-4';"
    },
    {
      "file": "./lib/services/azure-ai-service.ts",
      "line": 618,
      "service": "openai",
      "content": "const deploymentName = process.env.AZURE_OPENAI_DEPLOYMENT_NAME || 'gpt-4';"
    },
    {
      "file": "./lib/services/azure-openai.ts",
      "line": 3,
      "service": "openai",
      "content": "// Environment variables for Azure OpenAI configuration"
    },
    {
      "file": "./lib/services/azure-openai.ts",
      "line": 4,
      "service": "openai",
      "content": "const AZURE_OPENAI_KEY = process.env.AZURE_OPENAI_KEY;"
    },
    {
      "file": "./lib/services/azure-openai.ts",
      "line": 5,
      "service": "openai",
      "content": "const AZURE_OPENAI_ENDPOINT = process.env.AZURE_OPENAI_ENDPOINT;"
    },
    {
      "file": "./lib/services/azure-openai.ts",
      "line": 6,
      "service": "openai",
      "content": "const AZURE_OPENAI_DEPLOYMENT = process.env.AZURE_OPENAI_DEPLOYMENT;"
    },
    {
      "file": "./lib/services/azure-openai.ts",
      "line": 12,
      "service": "openai",
      "content": "* Initialize and cache the Azure OpenAI client"
    },
    {
      "file": "./lib/services/azure-openai.ts",
      "line": 20,
      "service": "openai",
      "content": "if (!AZURE_OPENAI_KEY) {"
    },
    {
      "file": "./lib/services/azure-openai.ts",
      "line": 21,
      "service": "openai",
      "content": "throw new Error('AZURE_OPENAI_KEY environment variable is required');"
    },
    {
      "file": "./lib/services/azure-openai.ts",
      "line": 23,
      "service": "openai",
      "content": "if (!AZURE_OPENAI_ENDPOINT) {"
    },
    {
      "file": "./lib/services/azure-openai.ts",
      "line": 24,
      "service": "openai",
      "content": "throw new Error('AZURE_OPENAI_ENDPOINT environment variable is required');"
    },
    {
      "file": "./lib/services/azure-openai.ts",
      "line": 26,
      "service": "openai",
      "content": "if (!AZURE_OPENAI_DEPLOYMENT) {"
    },
    {
      "file": "./lib/services/azure-openai.ts",
      "line": 27,
      "service": "openai",
      "content": "throw new Error('AZURE_OPENAI_DEPLOYMENT environment variable is required');"
    },
    {
      "file": "./lib/services/azure-openai.ts",
      "line": 30,
      "service": "openai",
      "content": "// Create and cache the OpenAI client configured for Azure"
    },
    {
      "file": "./lib/services/azure-openai.ts",
      "line": 32,
      "service": "openai",
      "content": "apiKey: AZURE_OPENAI_KEY,"
    },
    {
      "file": "./lib/services/azure-openai.ts",
      "line": 33,
      "service": "openai",
      "content": "baseURL: `${AZURE_OPENAI_ENDPOINT}/openai/deployments/${AZURE_OPENAI_DEPLOYMENT}`,"
    },
    {
      "file": "./lib/services/azure-openai.ts",
      "line": 36,
      "service": "openai",
      "content": "'api-key': AZURE_OPENAI_KEY,"
    },
    {
      "file": "./lib/services/azure-openai.ts",
      "line": 44,
      "service": "openai",
      "content": "* Generate content using Azure OpenAI with centralized error handling"
    },
    {
      "file": "./lib/services/azure-openai.ts",
      "line": 61,
      "service": "openai",
      "content": "model: AZURE_OPENAI_DEPLOYMENT!,"
    },
    {
      "file": "./lib/services/azure-openai.ts",
      "line": 70,
      "service": "openai",
      "content": "throw new Error('No content generated from Azure OpenAI');"
    },
    {
      "file": "./lib/services/azure-openai.ts",
      "line": 76,
      "service": "openai",
      "content": "const translatedError = translateAzureOpenAIError(error);"
    },
    {
      "file": "./lib/services/azure-openai.ts",
      "line": 82,
      "service": "openai",
      "content": "* Translate Azure OpenAI errors into user-friendly messages"
    },
    {
      "file": "./lib/services/azure-openai.ts",
      "line": 84,
      "service": "openai",
      "content": "function translateAzureOpenAIError(error: any): Error {"
    },
    {
      "file": "./lib/services/azure-openai.ts",
      "line": 87,
      "service": "openai",
      "content": "return new Error('Unable to connect to Azure OpenAI service. Please check your network connection.');"
    },
    {
      "file": "./lib/services/azure-openai.ts",
      "line": 90,
      "service": "openai",
      "content": "// Azure OpenAI API errors"
    },
    {
      "file": "./lib/services/azure-openai.ts",
      "line": 94,
      "service": "openai",
      "content": "return new Error('Azure OpenAI authentication failed. Please check your API key.');"
    },
    {
      "file": "./lib/services/azure-openai.ts",
      "line": 97,
      "service": "openai",
      "content": "return new Error('Access forbidden. Your Azure OpenAI subscription may not have access to this resource.');"
    },
    {
      "file": "./lib/services/azure-openai.ts",
      "line": 104,
      "service": "openai",
      "content": "return new Error(`Azure OpenAI rate limit exceeded.${retryMessage}`);"
    },
    {
      "file": "./lib/services/azure-openai.ts",
      "line": 109,
      "service": "openai",
      "content": "return new Error('Content was filtered by Azure OpenAI content policy. Please modify your request.');"
    },
    {
      "file": "./lib/services/azure-openai.ts",
      "line": 114,
      "service": "openai",
      "content": "return new Error('Azure OpenAI deployment not found. Please check your deployment name and endpoint.');"
    },
    {
      "file": "./lib/services/azure-openai.ts",
      "line": 120,
      "service": "openai",
      "content": "return new Error('Azure OpenAI service is temporarily unavailable. Please try again later.');"
    },
    {
      "file": "./lib/services/azure-openai.ts",
      "line": 123,
      "service": "openai",
      "content": "return new Error(`Azure OpenAI error (${error.status}): ${error.message || 'Unknown error'}`);"
    },
    {
      "file": "./lib/services/azure-openai.ts",
      "line": 133,
      "service": "openai",
      "content": "return new Error(`Azure OpenAI error: ${error.message || 'An unexpected error occurred'}`);"
    },
    {
      "file": "./lib/services/azure-openai.ts",
      "line": 144,
      "service": "openai",
      "content": "* Check if Azure OpenAI is properly configured"
    },
    {
      "file": "./lib/services/azure-openai.ts",
      "line": 147,
      "service": "openai",
      "content": "return !!(AZURE_OPENAI_KEY && AZURE_OPENAI_ENDPOINT && AZURE_OPENAI_DEPLOYMENT);"
    },
    {
      "file": "./lib/services/azure-openai-service.test.ts",
      "line": 1,
      "service": "openai",
      "content": "import { AzureOpenAIService } from './azure-openai-service';"
    },
    {
      "file": "./lib/services/azure-openai-service.test.ts",
      "line": 22,
      "service": "openai",
      "content": "azureOpenAIKey: 'mock-key',"
    },
    {
      "file": "./lib/services/azure-openai-service.test.ts",
      "line": 23,
      "service": "openai",
      "content": "azureOpenAIEndpoint: 'mock-endpoint',"
    },
    {
      "file": "./lib/services/azure-openai-service.test.ts",
      "line": 24,
      "service": "openai",
      "content": "azureOpenAIDeployment: 'mock-deployment'"
    },
    {
      "file": "./lib/services/azure-openai-service.test.ts",
      "line": 28,
      "service": "openai",
      "content": "describe('AzureOpenAIService - Unit Tests', () => {"
    },
    {
      "file": "./lib/services/azure-openai-service.test.ts",
      "line": 29,
      "service": "openai",
      "content": "let service: AzureOpenAIService;"
    },
    {
      "file": "./lib/services/azure-openai-service.test.ts",
      "line": 42,
      "service": "openai",
      "content": "service = new AzureOpenAIService();"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 1,
      "service": "storage",
      "content": "import { BlobServiceClient, BlobSASPermissions, generateBlobSASQueryParameters, StorageSharedKeyCredential, BlobSASSignatureValues, SASProtocol } from '@azure/storage-blob';"
    },
    {
      "file": "./lib/services/azure-gdpr-service.ts",
      "line": 1,
      "service": "cosmos",
      "content": "import { CosmosClient, Container, Database } from '@azure/cosmos';"
    },
    {
      "file": "./lib/services/azure-gdpr-service.ts",
      "line": 2,
      "service": "storage",
      "content": "import { BlobServiceClient, ContainerClient } from '@azure/storage-blob';"
    },
    {
      "file": "./lib/services/azure-gdpr-service.ts",
      "line": 3,
      "service": "identity",
      "content": "import { DefaultAzureCredential } from '@azure/identity';"
    },
    {
      "file": "./lib/services/azure-gdpr-service.ts",
      "line": 4,
      "service": "keyvault",
      "content": "import { SecretClient } from '@azure/keyvault-secrets';"
    },
    {
      "file": "./lib/services/azure-gdpr-service.ts",
      "line": 101,
      "service": "identity",
      "content": "new DefaultAzureCredential()"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 185,
      "service": "openai",
      "content": "* Extract data from resume using Azure Form Recognizer or OpenAI"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 195,
      "service": "openai",
      "content": "console.warn('⚠️ Azure Form Recognizer extraction failed, falling back to OpenAI:', error);"
    },
    {
      "file": "./lib/services/azure-app-config.ts",
      "line": 8,
      "service": "appconfig",
      "content": "import { AppConfigurationClient } from '@azure/app-configuration';"
    },
    {
      "file": "./lib/services/azure-app-config.ts",
      "line": 9,
      "service": "identity",
      "content": "import { DefaultAzureCredential } from '@azure/identity';"
    },
    {
      "file": "./lib/services/azure-app-config.ts",
      "line": 51,
      "service": "identity",
      "content": "const credential = new DefaultAzureCredential();"
    },
    {
      "file": "./lib/services/mock-interview.service.ts",
      "line": 4,
      "service": "openai",
      "content": "* This service generates dynamic mock interviews using Azure OpenAI,"
    },
    {
      "file": "./lib/services/mock-interview.service.ts",
      "line": 9,
      "service": "openai",
      "content": "import { AzureOpenAIAdapter } from '@/lib/ai/azureOpenAI';"
    },
    {
      "file": "./lib/services/mock-interview.service.ts",
      "line": 42,
      "service": "openai",
      "content": "private azureAdapter: AzureOpenAIAdapter;"
    },
    {
      "file": "./lib/services/mock-interview.service.ts",
      "line": 55,
      "service": "openai",
      "content": "this.azureAdapter = new AzureOpenAIAdapter();"
    },
    {
      "file": "./lib/services/mock-interview.service.ts",
      "line": 75,
      "service": "openai",
      "content": "* Generate a unique role and company with Azure OpenAI"
    },
    {
      "file": "./lib/services/mock-interview.service.ts",
      "line": 108,
      "service": "openai",
      "content": "// Generate using Azure OpenAI (via adapter's internal method)"
    },
    {
      "file": "./lib/services/mock-interview.service.ts",
      "line": 109,
      "service": "openai",
      "content": "const response = await (this.azureAdapter as any).generateWithAzureOpenAI("
    },
    {
      "file": "./lib/services/mock-interview.service.ts",
      "line": 174,
      "service": "openai",
      "content": "const response = await (this.azureAdapter as any).generateWithAzureOpenAI("
    },
    {
      "file": "./lib/services/azure-openai-service.ts",
      "line": 17,
      "service": "openai",
      "content": "export class AzureOpenAIService {"
    },
    {
      "file": "./lib/services/azure-openai-service.ts",
      "line": 30,
      "service": "openai",
      "content": "* Initialize the Azure OpenAI service"
    },
    {
      "file": "./lib/services/azure-openai-service.ts",
      "line": 36,
      "service": "openai",
      "content": "if (!secrets.azureOpenAIKey || !secrets.azureOpenAIEndpoint) {"
    },
    {
      "file": "./lib/services/azure-openai-service.ts",
      "line": 37,
      "service": "openai",
      "content": "console.warn('⚠️ Azure OpenAI credentials not available');"
    },
    {
      "file": "./lib/services/azure-openai-service.ts",
      "line": 41,
      "service": "openai",
      "content": "this.deployment = secrets.azureOpenAIDeployment;"
    },
    {
      "file": "./lib/services/azure-openai-service.ts",
      "line": 43,
      "service": "openai",
      "content": "apiKey: secrets.azureOpenAIKey,"
    },
    {
      "file": "./lib/services/azure-openai-service.ts",
      "line": 44,
      "service": "openai",
      "content": "baseURL: `${secrets.azureOpenAIEndpoint}/openai/deployments/${secrets.azureOpenAIDeployment}`,"
    },
    {
      "file": "./lib/services/azure-openai-service.ts",
      "line": 47,
      "service": "openai",
      "content": "'api-key': secrets.azureOpenAIKey,"
    },
    {
      "file": "./lib/services/azure-openai-service.ts",
      "line": 53,
      "service": "openai",
      "content": "console.log(`🔄 Testing Azure OpenAI connection with deployment: ${this.deployment}`);"
    },
    {
      "file": "./lib/services/azure-openai-service.ts",
      "line": 61,
      "service": "openai",
      "content": "console.log('✅ Azure OpenAI Service initialized and tested successfully');"
    },
    {
      "file": "./lib/services/azure-openai-service.ts",
      "line": 64,
      "service": "openai",
      "content": "console.error('❌ Azure OpenAI connection test failed:', testError.message);"
    },
    {
      "file": "./lib/services/azure-openai-service.ts",
      "line": 66,
      "service": "openai",
      "content": "endpoint: secrets.azureOpenAIEndpoint,"
    },
    {
      "file": "./lib/services/azure-openai-service.ts",
      "line": 68,
      "service": "openai",
      "content": "hasApiKey: !!secrets.azureOpenAIKey"
    },
    {
      "file": "./lib/services/azure-openai-service.ts",
      "line": 74,
      "service": "openai",
      "content": "console.error('   • Check your Azure OpenAI resource for the correct key');"
    },
    {
      "file": "./lib/services/azure-openai-service.ts",
      "line": 79,
      "service": "openai",
      "content": "console.error('   • No deployments might exist in your Azure OpenAI resource');"
    },
    {
      "file": "./lib/services/azure-openai-service.ts",
      "line": 82,
      "service": "openai",
      "content": "console.error('   2. Navigate to your Azure OpenAI resource');"
    },
    {
      "file": "./lib/services/azure-openai-service.ts",
      "line": 85,
      "service": "openai",
      "content": "console.error('   5. Update AZURE_OPENAI_DEPLOYMENT in your .env.local file');"
    },
    {
      "file": "./lib/services/azure-openai-service.ts",
      "line": 89,
      "service": "openai",
      "content": "console.error('   • Your Azure OpenAI resource might not be properly configured');"
    },
    {
      "file": "./lib/services/azure-openai-service.ts",
      "line": 92,
      "service": "openai",
      "content": "console.error('   • Check your Azure OpenAI resource configuration');"
    },
    {
      "file": "./lib/services/azure-openai-service.ts",
      "line": 98,
      "service": "openai",
      "content": "console.error('❌ Failed to initialize Azure OpenAI Service:', error);"
    },
    {
      "file": "./lib/services/azure-openai-service.ts",
      "line": 211,
      "service": "openai",
      "content": "throw new Error('Azure OpenAI Service not initialized');"
    },
    {
      "file": "./lib/services/azure-openai-service.ts",
      "line": 315,
      "service": "openai",
      "content": "throw new Error('Azure OpenAI Service not initialized');"
    },
    {
      "file": "./lib/services/azure-openai-service.ts",
      "line": 547,
      "service": "openai",
      "content": "throw new Error('Azure OpenAI Service not initialized');"
    },
    {
      "file": "./lib/services/azure-openai-service.ts",
      "line": 608,
      "service": "openai",
      "content": "throw new Error('Azure OpenAI Service not initialized');"
    },
    {
      "file": "./lib/services/azure-openai-service.ts",
      "line": 639,
      "service": "openai",
      "content": "* Tailor resume based on job description using Azure OpenAI"
    },
    {
      "file": "./lib/services/azure-openai-service.ts",
      "line": 643,
      "service": "openai",
      "content": "throw new Error('Azure OpenAI Service not initialized');"
    },
    {
      "file": "./lib/services/azure-openai-service.ts",
      "line": 702,
      "service": "openai",
      "content": "throw new Error('Azure OpenAI Service not initialized');"
    },
    {
      "file": "./lib/services/azure-openai-service.ts",
      "line": 738,
      "service": "openai",
      "content": "throw new Error('Azure OpenAI Service not initialized');"
    },
    {
      "file": "./lib/services/azure-openai-service.ts",
      "line": 769,
      "service": "openai",
      "content": "console.log('🧹 Azure OpenAI Service disposed');"
    },
    {
      "file": "./lib/services/azure-openai-service.ts",
      "line": 774,
      "service": "openai",
      "content": "export const azureOpenAIService = new AzureOpenAIService();"
    },
    {
      "file": "./lib/services/azure-speech-service.ts",
      "line": 1,
      "service": "speech",
      "content": "import * as SpeechSDK from 'microsoft-cognitiveservices-speech-sdk';"
    },
    {
      "file": "./lib/services/keyword-optimizer-service.ts",
      "line": 2,
      "service": "openai",
      "content": "import { azureOpenAIService } from './azure-openai-service';"
    },
    {
      "file": "./lib/services/keyword-optimizer-service.ts",
      "line": 35,
      "service": "openai",
      "content": "// No initialization needed for Azure OpenAI service"
    },
    {
      "file": "./lib/services/keyword-optimizer-service.ts",
      "line": 55,
      "service": "openai",
      "content": "// Ensure Azure OpenAI service is initialized"
    },
    {
      "file": "./lib/services/keyword-optimizer-service.ts",
      "line": 56,
      "service": "openai",
      "content": "await azureOpenAIService.initialize();"
    },
    {
      "file": "./lib/services/keyword-optimizer-service.ts",
      "line": 62,
      "service": "openai",
      "content": "const analysisResult = await azureOpenAIService.generateCompletion(fullPrompt);"
    },
    {
      "file": "./lib/services/keyword-optimizer-service.ts",
      "line": 64,
      "service": "openai",
      "content": "throw new Error('No analysis result from Azure OpenAI');"
    },
    {
      "file": "./lib/services/keyword-optimizer-service.ts",
      "line": 86,
      "service": "openai",
      "content": "// Ensure Azure OpenAI service is initialized"
    },
    {
      "file": "./lib/services/keyword-optimizer-service.ts",
      "line": 87,
      "service": "openai",
      "content": "await azureOpenAIService.initialize();"
    },
    {
      "file": "./lib/services/keyword-optimizer-service.ts",
      "line": 97,
      "service": "openai",
      "content": "const optimizedContent = await azureOpenAIService.generateCompletion(fullPrompt);"
    },
    {
      "file": "./lib/services/keyword-optimizer-service.ts",
      "line": 134,
      "service": "openai",
      "content": "// Ensure Azure OpenAI service is initialized"
    },
    {
      "file": "./lib/services/keyword-optimizer-service.ts",
      "line": 135,
      "service": "openai",
      "content": "await azureOpenAIService.initialize();"
    },
    {
      "file": "./lib/services/keyword-optimizer-service.ts",
      "line": 141,
      "service": "openai",
      "content": "const result = await azureOpenAIService.generateCompletion(fullPrompt);"
    },
    {
      "file": "./lib/services/keyword-optimizer-service.ts",
      "line": 189,
      "service": "openai",
      "content": "// Ensure Azure OpenAI service is initialized"
    },
    {
      "file": "./lib/services/keyword-optimizer-service.ts",
      "line": 190,
      "service": "openai",
      "content": "await azureOpenAIService.initialize();"
    },
    {
      "file": "./lib/services/keyword-optimizer-service.ts",
      "line": 196,
      "service": "openai",
      "content": "const result = await azureOpenAIService.generateCompletion(fullPrompt);"
    },
    {
      "file": "./lib/services/azure-token-service.ts",
      "line": 1,
      "service": "identity",
      "content": "import { DefaultAzureCredential } from '@azure/identity';"
    },
    {
      "file": "./lib/services/azure-token-service.ts",
      "line": 2,
      "service": "keyvault",
      "content": "import { SecretClient } from '@azure/keyvault-secrets';"
    },
    {
      "file": "./lib/services/azure-token-service.ts",
      "line": 32,
      "service": "keyvault",
      "content": "this.secretClient = new SecretClient(keyVaultUri, new DefaultAzureCredential());"
    },
    {
      "file": "./lib/services/azure-form-recognizer.ts",
      "line": 1,
      "service": "formrecognizer",
      "content": "import { DocumentAnalysisClient, AzureKeyCredential } from '@azure/ai-form-recognizer';"
    },
    {
      "file": "./lib/services/azure-form-recognizer.ts",
      "line": 88,
      "service": "openai",
      "content": "console.warn('⚠️ Azure Form Recognizer credentials not found, will use OpenAI fallback');"
    },
    {
      "file": "./lib/services/azure-app-config-service.ts",
      "line": 1,
      "service": "appconfig",
      "content": "import { AppConfigurationClient } from '@azure/app-configuration';"
    },
    {
      "file": "./lib/services/azure-app-config-service.ts",
      "line": 2,
      "service": "identity",
      "content": "import { DefaultAzureCredential } from '@azure/identity';"
    },
    {
      "file": "./lib/services/azure-app-config-service.ts",
      "line": 44,
      "service": "identity",
      "content": "this.client = new AppConfigurationClient(endpoint, new DefaultAzureCredential());"
    },
    {
      "file": "./lib/services/azure-functions-client.ts",
      "line": 8,
      "service": "storage",
      "content": "// import { QueueServiceClient } from '@azure/storage-queue';"
    },
    {
      "file": "./lib/services/azure-application-insights-service.ts",
      "line": 33,
      "service": "insights",
      "content": "class AzureApplicationInsightsService {"
    },
    {
      "file": "./lib/services/azure-application-insights-service.ts",
      "line": 499,
      "service": "insights",
      "content": "export const azureApplicationInsights = new AzureApplicationInsightsService();"
    },
    {
      "file": "./lib/services/azure-application-insights-service.ts",
      "line": 500,
      "service": "insights",
      "content": "export default azureApplicationInsights;"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 1,
      "service": "identity",
      "content": "import { DefaultAzureCredential } from '@azure/identity';"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 2,
      "service": "keyvault",
      "content": "import { SecretClient } from '@azure/keyvault-secrets';"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 10,
      "service": "openai",
      "content": "azureOpenAIKey: string;"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 11,
      "service": "openai",
      "content": "azureOpenAIEndpoint: string;"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 12,
      "service": "openai",
      "content": "azureOpenAIDeployment: string;"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 35,
      "service": "identity",
      "content": "const credential = new DefaultAzureCredential();"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 36,
      "service": "keyvault",
      "content": "return new SecretClient(AZURE_KEY_VAULT_URI, credential);"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 76,
      "service": "openai",
      "content": "speechKey, speechEndpoint, azureOpenAIKey, azureOpenAIEndpoint, azureOpenAIDeployment,"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 82,
      "service": "keyvault",
      "content": "client.getSecret('azure-openai-key'),"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 83,
      "service": "keyvault",
      "content": "client.getSecret('azure-openai-endpoint'),"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 84,
      "service": "keyvault",
      "content": "client.getSecret('azure-openai-deployment'),"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 99,
      "service": "openai",
      "content": "azureOpenAIKey: azureOpenAIKey?.value,"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 100,
      "service": "openai",
      "content": "azureOpenAIEndpoint: azureOpenAIEndpoint?.value,"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 101,
      "service": "openai",
      "content": "azureOpenAIDeployment: azureOpenAIDeployment?.value"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 115,
      "service": "openai",
      "content": "azureOpenAIKey: azureOpenAIKey.value!,"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 116,
      "service": "openai",
      "content": "azureOpenAIEndpoint: azureOpenAIEndpoint.value!,"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 117,
      "service": "openai",
      "content": "azureOpenAIDeployment: azureOpenAIDeployment.value!,"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 139,
      "service": "openai",
      "content": "azureOpenAIKey: process.env.AZURE_OPENAI_API_KEY || process.env.AZURE_OPENAI_KEY || '',"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 140,
      "service": "openai",
      "content": "azureOpenAIEndpoint: process.env.AZURE_OPENAI_ENDPOINT || '',"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 141,
      "service": "openai",
      "content": "azureOpenAIDeployment: process.env.AZURE_OPENAI_DEPLOYMENT || '',"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 157,
      "service": "openai",
      "content": "if (!fallbackSecrets.azureOpenAIKey) missingCritical.push('AZURE_OPENAI_KEY');"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 190,
      "service": "openai",
      "content": "// Set Azure OpenAI environment variables"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 191,
      "service": "openai",
      "content": "process.env.AZURE_OPENAI_KEY = secrets.azureOpenAIKey;"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 192,
      "service": "openai",
      "content": "process.env.AZURE_OPENAI_ENDPOINT = secrets.azureOpenAIEndpoint;"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 193,
      "service": "openai",
      "content": "process.env.AZURE_OPENAI_DEPLOYMENT = secrets.azureOpenAIDeployment;"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 194,
      "service": "openai",
      "content": "process.env.NEXT_PUBLIC_AZURE_OPENAI_API_KEY = secrets.azureOpenAIKey;"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 195,
      "service": "openai",
      "content": "process.env.NEXT_PUBLIC_AZURE_OPENAI_ENDPOINT = secrets.azureOpenAIEndpoint;"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 196,
      "service": "openai",
      "content": "process.env.NEXT_PUBLIC_AZURE_OPENAI_DEPLOYMENT = secrets.azureOpenAIDeployment;"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 243,
      "service": "openai",
      "content": "azureOpenAIKey: !!process.env.AZURE_OPENAI_KEY,"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 244,
      "service": "openai",
      "content": "azureOpenAIEndpoint: !!process.env.AZURE_OPENAI_ENDPOINT,"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 245,
      "service": "openai",
      "content": "azureOpenAIDeployment: !!process.env.AZURE_OPENAI_DEPLOYMENT"
    },
    {
      "file": "./pages/api/upload-pdf.ts",
      "line": 5,
      "service": "openai",
      "content": "import { azureOpenAIService } from '@/lib/services/azure-openai-service';"
    },
    {
      "file": "./pages/api/upload-pdf.ts",
      "line": 16,
      "service": "openai",
      "content": "// Azure OpenAI Service will be initialized in the handler"
    },
    {
      "file": "./pages/api/upload-pdf.ts",
      "line": 64,
      "service": "openai",
      "content": "// Initialize Azure OpenAI Service"
    },
    {
      "file": "./pages/api/upload-pdf.ts",
      "line": 65,
      "service": "openai",
      "content": "const isAzureInitialized = await azureOpenAIService.initialize();"
    },
    {
      "file": "./pages/api/upload-pdf.ts",
      "line": 67,
      "service": "openai",
      "content": "console.error('Azure OpenAI service initialization failed');"
    },
    {
      "file": "./pages/api/upload-pdf.ts",
      "line": 70,
      "service": "openai",
      "content": "details: process.env.NODE_ENV === 'development' ? 'Azure OpenAI service not configured' : undefined"
    },
    {
      "file": "./pages/api/upload-pdf.ts",
      "line": 123,
      "service": "openai",
      "content": "// Generate questions using Azure OpenAI"
    },
    {
      "file": "./pages/api/upload-pdf.ts",
      "line": 124,
      "service": "openai",
      "content": "const questions = await azureOpenAIService.generateQuestions(resumeInfo);"
    },
    {
      "file": "./test-azure-secrets.js",
      "line": 31,
      "service": "openai",
      "content": "console.log('   Azure OpenAI key:', secrets.azureOpenAIKey ? '✅ SET' : '❌ MISSING');"
    }
  ],
  "methods": [
    {
      "file": "./azure/TokenRefreshTimer/index.js",
      "line": 19,
      "method": "SecretClient",
      "type": "client_initialization",
      "context": "const secretClient = new SecretClient(keyVaultUri, new DefaultAzureCredential());"
    },
    {
      "file": "./azure/processGDPRScheduledDeletions/index.js",
      "line": 28,
      "method": "SecretClient",
      "type": "client_initialization",
      "context": "? new SecretClient(process.env.AZURE_KEY_VAULT_URL, new DefaultAzureCredential())"
    },
    {
      "file": "./azure/lib/azure-app-config.ts",
      "line": 51,
      "method": "AppConfigurationClient",
      "type": "client_initialization",
      "context": "this.client = new AppConfigurationClient(this.connectionString, new DefaultAzureCredential());"
    },
    {
      "file": "./azure/lib/azure-app-config.ts",
      "line": 313,
      "method": "AzureAppConfigService",
      "type": "client_initialization",
      "context": "appConfigService = new AzureAppConfigService(connectionString, configLabel);"
    },
    {
      "file": "./azure/lib/services/azure-openai-service.test.ts",
      "line": 33,
      "method": "AzureOpenAIService",
      "type": "client_initialization",
      "context": "service = new AzureOpenAIService();"
    },
    {
      "file": "./azure/lib/services/test-preliminary-tracking.js",
      "line": 19,
      "method": "AzureOpenAIService",
      "type": "client_initialization",
      "context": "const service = new AzureOpenAIService();"
    },
    {
      "file": "./azure/lib/services/test-question-generator.js",
      "line": 72,
      "method": "MockAzureOpenAIService",
      "type": "client_initialization",
      "context": "const service = new MockAzureOpenAIService();"
    },
    {
      "file": "./azure/lib/services/test-preliminary-flow.js",
      "line": 111,
      "method": "MockAzureOpenAIService",
      "type": "client_initialization",
      "context": "const service = new MockAzureOpenAIService();"
    },
    {
      "file": "./azure/lib/services/azure-openai-service.ts",
      "line": 590,
      "method": "AzureOpenAIService",
      "type": "client_initialization",
      "context": "export const azureOpenAIService = new AzureOpenAIService();"
    },
    {
      "file": "./azure/lib/services/azure-speech-service.ts",
      "line": 199,
      "method": "AzureSpeechService",
      "type": "client_initialization",
      "context": "export const azureSpeechService = new AzureSpeechService();"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 33,
      "method": "SecretClient",
      "type": "client_initialization",
      "context": "return new SecretClient(AZURE_KEY_VAULT_URI, credential);"
    },
    {
      "file": "./scripts/monitor-production-metrics.js",
      "line": 32,
      "method": "LogsQueryClient",
      "type": "client_initialization",
      "context": "this.logsQueryClient = new LogsQueryClient(new DefaultAzureCredential());"
    },
    {
      "file": "./scripts/monitor-production-metrics.js",
      "line": 33,
      "method": "MetricsQueryClient",
      "type": "client_initialization",
      "context": "this.metricsQueryClient = new MetricsQueryClient(new DefaultAzureCredential());"
    },
    {
      "file": "./scripts/fetch-build-config.ts",
      "line": 42,
      "method": "AppConfigurationClient",
      "type": "client_initialization",
      "context": "this.client = new AppConfigurationClient(connStr, new DefaultAzureCredential());"
    },
    {
      "file": "./scripts/fetch-build-config.ts",
      "line": 329,
      "method": "BuildTimeConfig",
      "type": "client_initialization",
      "context": "const fetcher = new BuildTimeConfigFetcher(process.env.AZURE_APPCONFIG_CONNECTION_STRING, label);"
    },
    {
      "file": "./scripts/setup-azure-app-config.ts",
      "line": 157,
      "method": "AppConfigurationClient",
      "type": "client_initialization",
      "context": "const client = new AppConfigurationClient(process.env.AZURE_APP_CONFIG_CONNECTION_STRING);"
    },
    {
      "file": "./scripts/setup-azure-app-config-production.ts",
      "line": 123,
      "method": "AppConfigurationClient",
      "type": "client_initialization",
      "context": "this.client = new AppConfigurationClient(this.connectionString, new DefaultAzureCredential());"
    },
    {
      "file": "./scripts/setup-azure-app-config-production.ts",
      "line": 280,
      "method": "AzureAppConfig",
      "type": "client_initialization",
      "context": "const manager = new AzureAppConfigManager();"
    },
    {
      "file": "./scripts/test-key-vault.js",
      "line": 19,
      "method": "SecretClient",
      "type": "client_initialization",
      "context": "const client = new SecretClient(AZURE_KEY_VAULT_URI, credential);"
    },
    {
      "file": "./lib/services/azure-cosmos-service.ts",
      "line": 1066,
      "method": "AzureCosmosService",
      "type": "client_initialization",
      "context": "export const azureCosmosService = new AzureCosmosService();"
    },
    {
      "file": "./lib/services/azure-openai-enhanced.ts",
      "line": 363,
      "method": "EnhancedAzureOpenAIService",
      "type": "client_initialization",
      "context": "export const enhancedAzureOpenAIService = new EnhancedAzureOpenAIService();"
    },
    {
      "file": "./lib/services/azure-ai-service.ts",
      "line": 651,
      "method": "AzureAIService",
      "type": "client_initialization",
      "context": "export const azureAIService = new AzureAIService();"
    },
    {
      "file": "./lib/services/azure-openai-service.test.ts",
      "line": 42,
      "method": "AzureOpenAIService",
      "type": "client_initialization",
      "context": "service = new AzureOpenAIService();"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 561,
      "method": "AzureBlobStorageService",
      "type": "client_initialization",
      "context": "export const azureBlobStorage = new AzureBlobStorageService();"
    },
    {
      "file": "./lib/services/azure-gdpr-service.ts",
      "line": 87,
      "method": "AzureGDPRService",
      "type": "client_initialization",
      "context": "AzureGDPRService.instance = new AzureGDPRService();"
    },
    {
      "file": "./lib/services/azure-app-config.ts",
      "line": 49,
      "method": "AppConfigurationClient",
      "type": "client_initialization",
      "context": "this.client = new AppConfigurationClient(this.secrets.azureAppConfigConnectionString);"
    },
    {
      "file": "./lib/services/azure-app-config.ts",
      "line": 52,
      "method": "AppConfigurationClient",
      "type": "client_initialization",
      "context": "this.client = new AppConfigurationClient(this.secrets.azureAppConfigEndpoint, credential);"
    },
    {
      "file": "./lib/services/azure-app-config.ts",
      "line": 362,
      "method": "AzureAppConfigService",
      "type": "client_initialization",
      "context": "export const azureAppConfigService = new AzureAppConfigService();"
    },
    {
      "file": "./lib/services/azure-openai-service.ts",
      "line": 774,
      "method": "AzureOpenAIService",
      "type": "client_initialization",
      "context": "export const azureOpenAIService = new AzureOpenAIService();"
    },
    {
      "file": "./lib/services/azure-speech-service.ts",
      "line": 326,
      "method": "AzureSpeechService",
      "type": "client_initialization",
      "context": "export const azureSpeechService = new AzureSpeechService();"
    },
    {
      "file": "./lib/services/azure-token-service.ts",
      "line": 32,
      "method": "SecretClient",
      "type": "client_initialization",
      "context": "this.secretClient = new SecretClient(keyVaultUri, new DefaultAzureCredential());"
    },
    {
      "file": "./lib/services/azure-token-service.ts",
      "line": 268,
      "method": "AzureTokenService",
      "type": "client_initialization",
      "context": "azureTokenServiceInstance = new AzureTokenService();"
    },
    {
      "file": "./lib/services/azure-form-recognizer.ts",
      "line": 330,
      "method": "AzureFormRecognizerService",
      "type": "client_initialization",
      "context": "export const azureFormRecognizer = new AzureFormRecognizerService();"
    },
    {
      "file": "./lib/services/azure-app-config-service.ts",
      "line": 44,
      "method": "AppConfigurationClient",
      "type": "client_initialization",
      "context": "this.client = new AppConfigurationClient(endpoint, new DefaultAzureCredential());"
    },
    {
      "file": "./lib/services/azure-app-config-service.ts",
      "line": 469,
      "method": "AzureAppConfigService",
      "type": "client_initialization",
      "context": "export const azureAppConfigService = new AzureAppConfigService();"
    },
    {
      "file": "./lib/services/azure-functions-client.ts",
      "line": 469,
      "method": "AzureFunctionsClient",
      "type": "client_initialization",
      "context": "export const azureFunctionsClient = new AzureFunctionsClient();"
    },
    {
      "file": "./lib/services/azure-application-insights-service.ts",
      "line": 499,
      "method": "AzureApplicationInsightsService",
      "type": "client_initialization",
      "context": "export const azureApplicationInsights = new AzureApplicationInsightsService();"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 36,
      "method": "SecretClient",
      "type": "client_initialization",
      "context": "return new SecretClient(AZURE_KEY_VAULT_URI, credential);"
    }
  ],
  "files": [
    "./types/feature-flags.ts",
    "./types/resume-tailoring.ts",
    "./app/dashboard/settings/page.tsx",
    "./app/layout.tsx",
    "./app/api/config/firebase/route.ts",
    "./azure/processScheduledDeletions/index.js",
    "./azure/test-functions.js",
    "./azure/followUpWorker/index.js",
    "./azure/health/index.js",
    "./azure/onUserPlanChange/index.js",
    "./azure/TokenRefreshTimer/index.js",
    "./azure/shared/authMiddleware.js",
    "./azure/processGDPRScheduledDeletions/index.js",
    "./azure/applicationWorker/index.js",
    "./azure/searchScheduler/index.js",
    "./azure/notificationScheduler/index.js",
    "./azure/deleteUserData/index.js",
    "./azure/lib/middleware/function-error-handler.js",
    "./azure/lib/compiled/azure-config.js",
    "./azure/lib/azure-app-config.ts",
    "./azure/lib/services/azure-openai-service.test.ts",
    "./azure/lib/services/test-preliminary-tracking.js",
    "./azure/lib/services/queue-service.js",
    "./azure/lib/services/automation-logs.js",
    "./azure/lib/services/test-question-generator.js",
    "./azure/lib/services/test-preliminary-flow.js",
    "./azure/lib/services/azure-openai-service.ts",
    "./azure/lib/services/azure-speech-service.ts",
    "./azure/lib/azure-config.ts",
    "./azure/jobSearchWorker/index.js",
    "./azure/test-voice-function.js",
    "./azure/HttpTrigger1/index.js",
    "./azure/createSessionCookie/index.js",
    "./azure/verifyToken/index.js",
    "./azure/test-azure-integration.js",
    "./constants/index.ts",
    "./next.config.js",
    "./tests/integration/resume-tailor-parity.js",
    "./tests/integration/staging-functions.spec.ts",
    "./tests/resume-tailor-endpoint.test.ts",
    "./tests/load/queue-throughput.js",
    "./tests/azure-services-health.test.ts",
    "./tests/api/resume/tailor/simple.test.js",
    "./tests/api/resume/tailor/api.test.ts",
    "./tests/e2e/resume-url-extraction.test.ts",
    "./portals/linkedin.ts",
    "./portals/wellfound.ts",
    "./components/Agent.tsx",
    "./components/AutoApplyDashboard.tsx",
    "./components/ProfileForm.tsx",
    "./components/admin/FeatureFlagManager.tsx",
    "./components/PdfUploadButton.tsx",
    "./scripts/backfill-mock-interviews.ts",
    "./scripts/test-azure-function.js",
    "./scripts/monitor-production-metrics.js",
    "./scripts/debug-voice-interview.js",
    "./scripts/deployment-checklist.ts",
    "./scripts/voice-system-test.ts",
    "./scripts/fetch-build-config.ts",
    "./scripts/test-feature-flags.ts",
    "./scripts/check-azure-health.ts",
    "./scripts/test-azure-app-config.ts",
    "./scripts/find-firebase-function-calls.js",
    "./scripts/test-resume-processing.ts",
    "./scripts/setup-azure-app-config.ts",
    "./scripts/test-azure-openai.js",
    "./scripts/setup-remote-config.ts",
    "./scripts/setup-azure-app-config-production.ts",
    "./scripts/test-key-vault.js",
    "./scripts/monitor-mock-interview-usage.ts",
    "./scripts/test-azure-openai-integration.ts",
    "./scripts/compare-env-variables.ts",
    "./lib/middleware/error-handler.ts",
    "./lib/errors.ts",
    "./lib/utils.ts",
    "./lib/utils/telemetry.ts",
    "./lib/utils/retry-with-backoff.ts",
    "./lib/utils/resume-parser.ts",
    "./lib/azure-config-browser.ts",
    "./lib/audio/micCapture.ts",
    "./lib/ai/example.ts",
    "./lib/ai/__tests__/index.test.ts",
    "./lib/ai/__tests__/azureOpenAI.test.ts",
    "./lib/ai/index.ts",
    "./lib/ai/azureOpenAI.ts",
    "./lib/hooks/useFeatureFlags.ts",
    "./lib/azure-startup.ts",
    "./lib/services/feature-flags.ts",
    "./lib/services/mock-interview.service.test.ts",
    "./lib/services/azure-cosmos-service.ts",
    "./lib/services/azure-openai-enhanced.ts",
    "./lib/services/azure-ai-service.ts",
    "./lib/services/azure-openai.ts",
    "./lib/services/azure-openai-service.test.ts",
    "./lib/services/azure-blob-storage.ts",
    "./lib/services/azure-gdpr-service.ts",
    "./lib/services/email-verification-service.ts",
    "./lib/services/resume-processing-service.ts",
    "./lib/services/firebase-remote-config.ts",
    "./lib/services/azure-app-config.ts",
    "./lib/services/mock-interview.service.ts",
    "./lib/services/gdpr-compliance-service.ts",
    "./lib/services/notification-service.ts",
    "./lib/services/error-budget-monitor.ts",
    "./lib/services/azure-openai-service.ts",
    "./lib/services/azure-speech-service.ts",
    "./lib/services/keyword-optimizer-service.ts",
    "./lib/services/azure-token-service.ts",
    "./lib/services/azure-form-recognizer.ts",
    "./lib/services/user-targeting.ts",
    "./lib/services/cloud-functions-verification.ts",
    "./lib/services/azure-app-config-service.ts",
    "./lib/services/azure-functions-client.ts",
    "./lib/services/azure-application-insights-service.ts",
    "./lib/azure-config.ts",
    "./test-voice-interview.js",
    "./playwright.config.ts",
    "./e2e/helpers/test-utils.ts",
    "./test-firebase-oauth-flow.js",
    "./pages/api/upload-pdf.ts",
    "./test-azure-secrets.js"
  ]
}