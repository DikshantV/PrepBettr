{
  "imports": [
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 4,
      "import": "firebase/auth",
      "fullStatement": "import { onAuthStateChanged } from \"firebase/auth\";"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 5,
      "import": "firebase/auth",
      "fullStatement": "import type { User as FirebaseUser } from \"firebase/auth\";"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 7,
      "import": "@/hooks/useFirebase",
      "fullStatement": "import { useFirebase } from \"@/hooks/useFirebase\";"
    },
    {
      "file": "./app/api/auth/signup/route.ts",
      "line": 4,
      "import": "@/services/firebase.service",
      "fullStatement": "import { FirebaseService } from '@/services/firebase.service';"
    },
    {
      "file": "./app/api/auth/signin/route.ts",
      "line": 4,
      "import": "@/services/firebase.service",
      "fullStatement": "import { FirebaseService } from '@/services/firebase.service';"
    },
    {
      "file": "./tests/quota-middleware.test.ts",
      "line": 7,
      "import": "@/lib/services/firebase-verification",
      "fullStatement": "import { firebaseVerification } from '@/lib/services/firebase-verification';"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 1,
      "import": "@firebase/rules-unit-testing",
      "fullStatement": "import { initializeTestEnvironment, RulesTestEnvironment } from '@firebase/rules-unit-testing';"
    },
    {
      "file": "./tests/api/resume/tailor/api.test.ts",
      "line": 3,
      "import": "@/lib/services/firebase-verification",
      "fullStatement": "import { firebaseVerification } from '@/lib/services/firebase-verification';"
    },
    {
      "file": "./components/AuthSync.tsx",
      "line": 4,
      "import": "firebase/auth",
      "fullStatement": "import { signInWithCustomToken } from 'firebase/auth';"
    },
    {
      "file": "./components/AuthSync.tsx",
      "line": 5,
      "import": "@/firebase/client",
      "fullStatement": "import { auth } from '@/firebase/client';"
    },
    {
      "file": "./components/AuthSync.tsx",
      "line": 7,
      "import": "@/lib/utils/firebase-auth-debug",
      "fullStatement": "import { debugFirebaseAuth } from '@/lib/utils/firebase-auth-debug';"
    },
    {
      "file": "./components/GoogleSignInButton.tsx",
      "line": 3,
      "import": "@/firebase/client",
      "fullStatement": "import { auth } from \"@/firebase/client\";"
    },
    {
      "file": "./components/GoogleSignInButton.tsx",
      "line": 4,
      "import": "firebase/auth",
      "fullStatement": "import { signInWithPopup } from \"firebase/auth\";"
    },
    {
      "file": "./components/GoogleSignInButton.tsx",
      "line": 9,
      "import": "@/firebase/client",
      "fullStatement": "import { googleProvider } from \"@/firebase/client\";"
    },
    {
      "file": "./components/ProfileForm.tsx",
      "line": 10,
      "import": "@/firebase/client",
      "fullStatement": "import { auth } from \"@/firebase/client\";"
    },
    {
      "file": "./components/AuthForm.tsx",
      "line": 7,
      "import": "@/firebase/client",
      "fullStatement": "import { auth } from \"@/firebase/client\";"
    },
    {
      "file": "./components/AuthDebug.tsx",
      "line": 5,
      "import": "@/hooks/useFirebase",
      "fullStatement": "import { useFirebase } from '@/hooks/useFirebase';"
    },
    {
      "file": "./components/AuthDebug.tsx",
      "line": 6,
      "import": "firebase/auth",
      "fullStatement": "import { User } from 'firebase/auth';"
    },
    {
      "file": "./components/PdfUploadButton.tsx",
      "line": 18,
      "import": "@/firebase/client",
      "fullStatement": "import { auth } from '@/firebase/client';"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 1,
      "import": "firebase-admin/app",
      "fullStatement": "import { initializeApp, cert, getApps, App } from \"firebase-admin/app\";"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 2,
      "import": "firebase-admin/auth",
      "fullStatement": "import { getAuth } from \"firebase-admin/auth\";"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 3,
      "import": "firebase-admin/firestore",
      "fullStatement": "import { getFirestore } from \"firebase-admin/firestore\";"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 4,
      "import": "firebase-admin/storage",
      "fullStatement": "import { getStorage, Storage } from \"firebase-admin/storage\";"
    },
    {
      "file": "./firebase/client.ts",
      "line": 1,
      "import": "firebase/firestore",
      "fullStatement": "import { getFirestore } from \"firebase/firestore\";"
    },
    {
      "file": "./firebase/client.ts",
      "line": 2,
      "import": "firebase/app",
      "fullStatement": "import { initializeApp, getApp, getApps } from \"firebase/app\";"
    },
    {
      "file": "./firebase/client.ts",
      "line": 3,
      "import": "firebase/auth",
      "fullStatement": "import { getAuth, GoogleAuthProvider } from \"firebase/auth\";"
    },
    {
      "file": "./hooks/useFirebase.ts",
      "line": 2,
      "import": "@/firebase/client",
      "fullStatement": "import { ensureFirebaseInitialized } from '@/firebase/client';"
    },
    {
      "file": "./scripts/backfill-mock-interviews.ts",
      "line": 26,
      "import": "../lib/firebase/admin",
      "fullStatement": "import { getAdminFirestore } from '../lib/firebase/admin';"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 20,
      "import": "firebase-admin/app",
      "fullStatement": "import { initializeApp, cert, getApps, deleteApp } from 'firebase-admin/app';"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 21,
      "import": "firebase-admin/firestore",
      "fullStatement": "import { getFirestore, Timestamp } from 'firebase-admin/firestore';"
    },
    {
      "file": "./scripts/monitor-mock-interview-usage.ts",
      "line": 18,
      "import": "../lib/firebase/admin",
      "fullStatement": "import { getAdminFirestore } from '../lib/firebase/admin';"
    },
    {
      "file": "./scripts/monitor-mock-interview-usage.ts",
      "line": 19,
      "import": "firebase-admin/firestore",
      "fullStatement": "import { Timestamp } from 'firebase-admin/firestore';"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 2,
      "import": "@/lib/firebase/admin",
      "fullStatement": "import { verifyIdToken } from '@/lib/firebase/admin';"
    },
    {
      "file": "./lib/utils/resume-parser.ts",
      "line": 1,
      "import": "../services/firebase-resume-service",
      "fullStatement": "import { WorkExperience, Education, Project } from '../services/firebase-resume-service';"
    },
    {
      "file": "./lib/utils/firebase-auth-debug.ts",
      "line": 3,
      "import": "@/firebase/client",
      "fullStatement": "import { auth } from '@/firebase/client';"
    },
    {
      "file": "./lib/utils/firebase-auth-debug.ts",
      "line": 4,
      "import": "firebase/auth",
      "fullStatement": "import { User, IdTokenResult } from 'firebase/auth';"
    },
    {
      "file": "./lib/firebase/admin.ts",
      "line": 1,
      "import": "firebase-admin/app",
      "fullStatement": "import { getApps, initializeApp, cert, App } from 'firebase-admin/app';"
    },
    {
      "file": "./lib/firebase/admin.ts",
      "line": 2,
      "import": "firebase-admin/auth",
      "fullStatement": "import { getAuth, Auth } from 'firebase-admin/auth';"
    },
    {
      "file": "./lib/firebase/admin.ts",
      "line": 3,
      "import": "firebase-admin/firestore",
      "fullStatement": "import { getFirestore, Firestore } from 'firebase-admin/firestore';"
    },
    {
      "file": "./lib/firebase/admin.ts",
      "line": 4,
      "import": "firebase-admin/storage",
      "fullStatement": "import { getStorage, Storage } from 'firebase-admin/storage';"
    },
    {
      "file": "./lib/hooks/useRealtimeFirestore.ts",
      "line": 16,
      "import": "@/firebase/client",
      "fullStatement": "import { db } from '@/firebase/client';"
    },
    {
      "file": "./lib/hooks/useCommunityInterview.ts",
      "line": 5,
      "import": "firebase/firestore",
      "fullStatement": "import { doc, getDoc } from 'firebase/firestore';"
    },
    {
      "file": "./lib/hooks/useCommunityInterview.ts",
      "line": 6,
      "import": "@/firebase/client",
      "fullStatement": "import { db } from '@/firebase/client';"
    },
    {
      "file": "./lib/hooks/useFirestore.ts",
      "line": 14,
      "import": "@/firebase/client",
      "fullStatement": "import { db } from '@/firebase/client';"
    },
    {
      "file": "./lib/hooks/useFirestore.ts",
      "line": 16,
      "import": "@/firebase/client",
      "fullStatement": "import { auth } from '@/firebase/client';"
    },
    {
      "file": "./lib/hooks/useFirestore.ts",
      "line": 17,
      "import": "firebase/auth",
      "fullStatement": "import { onAuthStateChanged } from 'firebase/auth';"
    },
    {
      "file": "./lib/services/firebase-resume-service.ts",
      "line": 1,
      "import": "firebase-admin/firestore",
      "fullStatement": "import { FieldValue } from 'firebase-admin/firestore';"
    },
    {
      "file": "./lib/services/firebase-resume-service.ts",
      "line": 2,
      "import": "../firebase/admin",
      "fullStatement": "import { getAdminStorage, getAdminFirestore } from '../firebase/admin';"
    },
    {
      "file": "./lib/services/email-verification-service.ts",
      "line": 3,
      "import": "@/lib/firebase/admin",
      "fullStatement": "import { getAdminFirestore } from '@/lib/firebase/admin';"
    },
    {
      "file": "./lib/services/email-verification-service.ts",
      "line": 4,
      "import": "firebase-admin/firestore",
      "fullStatement": "import { FieldValue } from 'firebase-admin/firestore';"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 1,
      "import": "firebase-admin/firestore",
      "fullStatement": "import { FieldValue } from 'firebase-admin/firestore';"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 2,
      "import": "@/lib/firebase/admin",
      "fullStatement": "import { getAdminFirestore } from '@/lib/firebase/admin';"
    },
    {
      "file": "./lib/services/firebase-verification.ts",
      "line": 1,
      "import": "@/firebase/admin",
      "fullStatement": "import { getAuthService } from \"@/firebase/admin\";"
    },
    {
      "file": "./lib/services/firebase-remote-config.ts",
      "line": 1,
      "import": "firebase/remote-config",
      "fullStatement": "import { getRemoteConfig, fetchAndActivate, getValue, getAll } from 'firebase/remote-config';"
    },
    {
      "file": "./lib/services/firebase-remote-config.ts",
      "line": 2,
      "import": "@/firebase/client",
      "fullStatement": "import { app } from '@/firebase/client';"
    },
    {
      "file": "./lib/services/gdpr-compliance-service.ts",
      "line": 1,
      "import": "firebase-admin/firestore",
      "fullStatement": "import { getFirestore } from 'firebase-admin/firestore';"
    },
    {
      "file": "./lib/services/gdpr-compliance-service.ts",
      "line": 3,
      "import": "@/firebase/admin",
      "fullStatement": "import { getDBService } from '@/firebase/admin';"
    },
    {
      "file": "./lib/services/user-targeting.ts",
      "line": 1,
      "import": "@/firebase/client",
      "fullStatement": "import { auth } from '@/firebase/client';"
    },
    {
      "file": "./lib/services/job-notification-integration.ts",
      "line": 4,
      "import": "@/lib/firebase/admin",
      "fullStatement": "import { getAdminFirestore } from '@/lib/firebase/admin';"
    },
    {
      "file": "./pages/api/upload-pdf.ts",
      "line": 6,
      "import": "../../lib/services/firebase-resume-service",
      "fullStatement": "import { updateUserResume } from '../../lib/services/firebase-resume-service';"
    },
    {
      "file": "./pages/api/upload-pdf.ts",
      "line": 8,
      "import": "../../lib/firebase/admin",
      "fullStatement": "import { verifyIdToken } from '../../lib/firebase/admin';"
    },
    {
      "file": "./services/firebase.service.ts",
      "line": 1,
      "import": "@/lib/firebase/admin",
      "fullStatement": "import { getAdminFirestore, getAdminStorage } from '@/lib/firebase/admin';"
    },
    {
      "file": "./services/firebase.service.ts",
      "line": 2,
      "import": "firebase-admin/firestore",
      "fullStatement": "import { Firestore } from 'firebase-admin/firestore';"
    },
    {
      "file": "./services/firebase.service.ts",
      "line": 3,
      "import": "firebase-admin/storage",
      "fullStatement": "import { Storage } from 'firebase-admin/storage';"
    },
    {
      "file": "./services/__tests__/firebase.service.test.ts",
      "line": 1,
      "import": "../firebase.service",
      "fullStatement": "import { FirebaseService, InterviewData, ResumeData } from '../firebase.service';"
    }
  ],
  "services": [
    {
      "file": "./middleware.ts",
      "line": 4,
      "service": "auth",
      "content": "// Edge-runtime compatible authentication check"
    },
    {
      "file": "./middleware.ts",
      "line": 5,
      "service": "auth",
      "content": "function isAuthenticatedFromRequest(request: NextRequest): boolean {"
    },
    {
      "file": "./middleware.ts",
      "line": 10,
      "service": "auth",
      "content": "// If no session cookie exists, user is not authenticated"
    },
    {
      "file": "./middleware.ts",
      "line": 20,
      "service": "auth",
      "content": "console.error('Error checking authentication in middleware:', error);"
    },
    {
      "file": "./middleware.ts",
      "line": 26,
      "service": "auth",
      "content": "// Only check authentication for dashboard routes"
    },
    {
      "file": "./middleware.ts",
      "line": 28,
      "service": "auth",
      "content": "const isAuthenticated = isAuthenticatedFromRequest(request);"
    },
    {
      "file": "./middleware.ts",
      "line": 30,
      "service": "auth",
      "content": "if (!isAuthenticated) {"
    },
    {
      "file": "./middleware.ts",
      "line": 37,
      "service": "auth",
      "content": "// For authenticated users trying to access sign-in or sign-up pages,"
    },
    {
      "file": "./middleware.ts",
      "line": 40,
      "service": "auth",
      "content": "const isAuthenticated = isAuthenticatedFromRequest(request);"
    },
    {
      "file": "./middleware.ts",
      "line": 42,
      "service": "auth",
      "content": "if (isAuthenticated) {"
    },
    {
      "file": "./test_responsive_verification.js",
      "line": 35,
      "service": "auth",
      "content": "'components/authenticated-layout.tsx',"
    },
    {
      "file": "./test_responsive_verification.js",
      "line": 64,
      "service": "auth",
      "content": "const authLayoutFile = 'app/(auth)/layout.tsx';"
    },
    {
      "file": "./test_responsive_verification.js",
      "line": 66,
      "service": "auth",
      "content": "if (fs.existsSync(authLayoutFile)) {"
    },
    {
      "file": "./test_responsive_verification.js",
      "line": 67,
      "service": "auth",
      "content": "const content = fs.readFileSync(authLayoutFile, 'utf8');"
    },
    {
      "file": "./test_responsive_verification.js",
      "line": 82,
      "service": "auth",
      "content": "console.log(`   ❌ ${authLayoutFile}: File not found\\n`);"
    },
    {
      "file": "./types/realtime.ts",
      "line": 64,
      "service": "firestore",
      "content": "// Firestore timestamp type"
    },
    {
      "file": "./contexts/SWRProvider.tsx",
      "line": 38,
      "service": "auth",
      "content": "// Don't show toast errors for auth-related issues or expected errors"
    },
    {
      "file": "./contexts/SWRProvider.tsx",
      "line": 39,
      "service": "auth",
      "content": "if (error?.code === 'permission-denied' || error?.message?.includes('auth')) {"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 4,
      "service": "auth",
      "content": "import { onAuthStateChanged } from \"firebase/auth\";"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 5,
      "service": "auth",
      "content": "import type { User as FirebaseUser } from \"firebase/auth\";"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 9,
      "service": "auth",
      "content": "// Define the auth context interface"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 10,
      "service": "auth",
      "content": "interface AuthContextType {"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 13,
      "service": "auth",
      "content": "isAuthenticated: boolean;"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 17,
      "service": "auth",
      "content": "const AuthContext = createContext<AuthContextType>({"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 20,
      "service": "auth",
      "content": "isAuthenticated: false,"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 23,
      "service": "auth",
      "content": "// AuthProvider props interface"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 24,
      "service": "auth",
      "content": "interface AuthProviderProps {"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 30,
      "service": "auth",
      "content": "function convertFirebaseUserToUser(firebaseUser: FirebaseUser): User {"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 33,
      "service": "auth",
      "content": "uid: firebaseUser.uid,"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 34,
      "service": "auth",
      "content": "email: firebaseUser.email ?? undefined,"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 35,
      "service": "auth",
      "content": "name: firebaseUser.displayName ?? undefined,"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 36,
      "service": "auth",
      "content": "picture: firebaseUser.photoURL ?? undefined,"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 37,
      "service": "auth",
      "content": "email_verified: firebaseUser.emailVerified,"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 48,
      "service": "auth",
      "content": "// AuthProvider component that manages auth state"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 49,
      "service": "auth",
      "content": "export function AuthProvider({ children, initialUser }: AuthProviderProps) {"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 52,
      "service": "auth",
      "content": "const { auth: firebaseAuth, isInitialized, error: firebaseError } = useFirebase();"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 55,
      "service": "auth",
      "content": "// Only set up auth listener if Firebase is initialized and auth is available"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 56,
      "service": "auth",
      "content": "if (!isInitialized || !firebaseAuth) {"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 58,
      "service": "auth",
      "content": "console.error('Firebase initialization error in AuthProvider:', firebaseError);"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 64,
      "service": "auth",
      "content": "const unsubscribe = onAuthStateChanged(firebaseAuth, (firebaseUser: FirebaseUser | null) => {"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 65,
      "service": "auth",
      "content": "if (firebaseUser) {"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 66,
      "service": "auth",
      "content": "const userData: User = convertFirebaseUserToUser(firebaseUser);"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 70,
      "service": "auth",
      "content": "// This prevents clearing the user when Firebase client auth hasn't loaded yet"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 79,
      "service": "auth",
      "content": "}, [isInitialized, firebaseAuth, initialUser, firebaseError]);"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 81,
      "service": "auth",
      "content": "const contextValue: AuthContextType = {"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 84,
      "service": "auth",
      "content": "isAuthenticated: !!user,"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 88,
      "service": "auth",
      "content": "<AuthContext.Provider value={contextValue}>"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 90,
      "service": "auth",
      "content": "</AuthContext.Provider>"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 94,
      "service": "auth",
      "content": "// Custom hook to use the auth context"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 95,
      "service": "auth",
      "content": "export function useAuth(): AuthContextType {"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 96,
      "service": "auth",
      "content": "const context = useContext(AuthContext);"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 99,
      "service": "auth",
      "content": "throw new Error(\"useAuth must be used within an AuthProvider\");"
    },
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 106,
      "service": "auth",
      "content": "export { AuthContext };"
    },
    {
      "file": "./check-env.js",
      "line": 8,
      "service": "storage",
      "content": "'NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET'"
    },
    {
      "file": "./app/admin/layout.tsx",
      "line": 3,
      "service": "auth",
      "content": "import { isAuthenticated, getCurrentUser } from \"@/lib/actions/auth.action\";"
    },
    {
      "file": "./app/admin/layout.tsx",
      "line": 4,
      "service": "auth",
      "content": "import { AuthProvider } from \"@/contexts/AuthContext\";"
    },
    {
      "file": "./app/admin/layout.tsx",
      "line": 5,
      "service": "auth",
      "content": "import AuthenticatedLayout from \"@/components/authenticated-layout\";"
    },
    {
      "file": "./app/admin/layout.tsx",
      "line": 16,
      "service": "auth",
      "content": "// Check authentication"
    },
    {
      "file": "./app/admin/layout.tsx",
      "line": 17,
      "service": "auth",
      "content": "if (!(await isAuthenticated())) {"
    },
    {
      "file": "./app/admin/layout.tsx",
      "line": 25,
      "service": "auth",
      "content": "<AuthProvider initialUser={user}>"
    },
    {
      "file": "./app/admin/layout.tsx",
      "line": 26,
      "service": "auth",
      "content": "<AuthenticatedLayout>"
    },
    {
      "file": "./app/admin/layout.tsx",
      "line": 28,
      "service": "auth",
      "content": "</AuthenticatedLayout>"
    },
    {
      "file": "./app/admin/layout.tsx",
      "line": 29,
      "service": "auth",
      "content": "</AuthProvider>"
    },
    {
      "file": "./app/dashboard/settings/page.tsx",
      "line": 29,
      "service": "storage",
      "content": "// Clear any local storage or session data"
    },
    {
      "file": "./app/dashboard/settings/page.tsx",
      "line": 30,
      "service": "storage",
      "content": "localStorage.clear();"
    },
    {
      "file": "./app/dashboard/settings/page.tsx",
      "line": 31,
      "service": "storage",
      "content": "sessionStorage.clear();"
    },
    {
      "file": "./app/dashboard/layout.server.tsx",
      "line": 3,
      "service": "auth",
      "content": "import { isAuthenticated } from \"@/lib/actions/auth.action\";"
    },
    {
      "file": "./app/dashboard/layout.server.tsx",
      "line": 4,
      "service": "auth",
      "content": "import AuthenticatedLayout from \"@/components/authenticated-layout\";"
    },
    {
      "file": "./app/dashboard/layout.server.tsx",
      "line": 11,
      "service": "auth",
      "content": "if (!(await isAuthenticated())) {"
    },
    {
      "file": "./app/dashboard/layout.server.tsx",
      "line": 16,
      "service": "auth",
      "content": "<AuthenticatedLayout>"
    },
    {
      "file": "./app/dashboard/layout.server.tsx",
      "line": 18,
      "service": "auth",
      "content": "</AuthenticatedLayout>"
    },
    {
      "file": "./app/dashboard/profile/page.tsx",
      "line": 4,
      "service": "auth",
      "content": "import { getCurrentUser } from '@/lib/actions/auth.action';"
    },
    {
      "file": "./app/dashboard/interview/[id]/FeedbackClientRealtime.tsx",
      "line": 7,
      "service": "auth",
      "content": "import { useAuth } from \"@/contexts/AuthContext\";"
    },
    {
      "file": "./app/dashboard/interview/[id]/FeedbackClientRealtime.tsx",
      "line": 11,
      "service": "firestore",
      "content": "} from \"@/lib/hooks/useRealtimeFirestore\";"
    },
    {
      "file": "./app/dashboard/interview/[id]/FeedbackClientRealtime.tsx",
      "line": 34,
      "service": "auth",
      "content": "const { user, loading: authLoading } = useAuth();"
    },
    {
      "file": "./app/dashboard/interview/[id]/FeedbackClientRealtime.tsx",
      "line": 85,
      "service": "auth",
      "content": "if (authLoading) {"
    },
    {
      "file": "./app/dashboard/interview/[id]/FeedbackClientRealtime.tsx",
      "line": 94,
      "service": "auth",
      "content": "<h2 className=\"text-xl font-semibold mb-2\">Authentication Required</h2>"
    },
    {
      "file": "./app/dashboard/interview/[id]/feedback/FeedbackClient.tsx",
      "line": 7,
      "service": "firestore",
      "content": "import { useInterview } from \"@/lib/hooks/useFirestore\";"
    },
    {
      "file": "./app/dashboard/interview/[id]/page.tsx",
      "line": 3,
      "service": "auth",
      "content": "import { getCurrentUser } from \"@/lib/actions/auth.action\";"
    },
    {
      "file": "./app/dashboard/interview/[id]/page.tsx",
      "line": 69,
      "service": "auth",
      "content": "'What is your approach to handling user authentication?'"
    },
    {
      "file": "./app/dashboard/interview/page.tsx",
      "line": 8,
      "service": "auth",
      "content": "import { getCurrentUser } from \"@/lib/actions/auth.action\";"
    },
    {
      "file": "./app/dashboard/layout.tsx",
      "line": 3,
      "service": "auth",
      "content": "import { isAuthenticated, getCurrentUser } from \"@/lib/actions/auth.action\";"
    },
    {
      "file": "./app/dashboard/layout.tsx",
      "line": 5,
      "service": "auth",
      "content": "import AuthenticatedLayout from \"@/components/authenticated-layout\";"
    },
    {
      "file": "./app/dashboard/layout.tsx",
      "line": 6,
      "service": "auth",
      "content": "import { AuthProvider } from \"@/contexts/AuthContext\";"
    },
    {
      "file": "./app/dashboard/layout.tsx",
      "line": 18,
      "service": "auth",
      "content": "// Check authentication"
    },
    {
      "file": "./app/dashboard/layout.tsx",
      "line": 19,
      "service": "auth",
      "content": "if (!(await isAuthenticated())) {"
    },
    {
      "file": "./app/dashboard/layout.tsx",
      "line": 27,
      "service": "auth",
      "content": "<AuthProvider initialUser={user}>"
    },
    {
      "file": "./app/dashboard/layout.tsx",
      "line": 28,
      "service": "auth",
      "content": "<AuthenticatedLayout>"
    },
    {
      "file": "./app/dashboard/layout.tsx",
      "line": 30,
      "service": "auth",
      "content": "</AuthenticatedLayout>"
    },
    {
      "file": "./app/dashboard/layout.tsx",
      "line": 31,
      "service": "auth",
      "content": "</AuthProvider>"
    },
    {
      "file": "./app/dashboard/DashboardClient.tsx",
      "line": 9,
      "service": "auth",
      "content": "import { useAuth } from \"@/contexts/AuthContext\";"
    },
    {
      "file": "./app/dashboard/DashboardClient.tsx",
      "line": 17,
      "service": "auth",
      "content": "const { user, loading } = useAuth();"
    },
    {
      "file": "./app/dashboard/DashboardClient.tsx",
      "line": 19,
      "service": "auth",
      "content": "// Show loading state while auth is being determined"
    },
    {
      "file": "./app/dashboard/page.tsx",
      "line": 3,
      "service": "auth",
      "content": "// The user is now provided via AuthContext from the layout"
    },
    {
      "file": "./app/dashboard/DashboardClientRealtime.tsx",
      "line": 9,
      "service": "auth",
      "content": "import { useAuth } from \"@/contexts/AuthContext\";"
    },
    {
      "file": "./app/dashboard/DashboardClientRealtime.tsx",
      "line": 13,
      "service": "firestore",
      "content": "} from \"@/lib/hooks/useRealtimeFirestore\";"
    },
    {
      "file": "./app/dashboard/DashboardClientRealtime.tsx",
      "line": 22,
      "service": "auth",
      "content": "const { user, loading: authLoading } = useAuth();"
    },
    {
      "file": "./app/dashboard/DashboardClientRealtime.tsx",
      "line": 38,
      "service": "auth",
      "content": "// Show loading state while auth is being determined"
    },
    {
      "file": "./app/dashboard/DashboardClientRealtime.tsx",
      "line": 39,
      "service": "auth",
      "content": "if (authLoading) {"
    },
    {
      "file": "./app/layout.tsx",
      "line": 4,
      "service": "auth",
      "content": "import { AuthProvider } from \"@/contexts/AuthContext\";"
    },
    {
      "file": "./app/layout.tsx",
      "line": 71,
      "service": "auth",
      "content": "<AuthProvider>"
    },
    {
      "file": "./app/layout.tsx",
      "line": 75,
      "service": "auth",
      "content": "</AuthProvider>"
    },
    {
      "file": "./app/community-mock-interview/interview/page.tsx",
      "line": 5,
      "service": "firestore",
      "content": "import { useInterview } from '@/lib/hooks/useFirestore';"
    },
    {
      "file": "./app/community-mock-interview/interview/page.tsx",
      "line": 10,
      "service": "storage",
      "content": "getCommunityInterviewFromStorage,"
    },
    {
      "file": "./app/community-mock-interview/interview/page.tsx",
      "line": 11,
      "service": "storage",
      "content": "setCommunityInterviewInStorage,"
    },
    {
      "file": "./app/community-mock-interview/interview/page.tsx",
      "line": 14,
      "service": "storage",
      "content": "} from '@/lib/utils/communityInterviewStorage';"
    },
    {
      "file": "./app/community-mock-interview/interview/page.tsx",
      "line": 19,
      "service": "firestore",
      "content": "const [dataSource, setDataSource] = useState<'url' | 'localStorage' | 'firestore' | null>(null);"
    },
    {
      "file": "./app/community-mock-interview/interview/page.tsx",
      "line": 28,
      "service": "firestore",
      "content": "// Fetch interview data using Firestore lookup (only if we have an ID)"
    },
    {
      "file": "./app/community-mock-interview/interview/page.tsx",
      "line": 29,
      "service": "firestore",
      "content": "const { interview, loading: firestoreLoading, error: firestoreError } = useInterview(urlInterviewId);"
    },
    {
      "file": "./app/community-mock-interview/interview/page.tsx",
      "line": 50,
      "service": "storage",
      "content": "// Priority 2: Check localStorage for recently stored data"
    },
    {
      "file": "./app/community-mock-interview/interview/page.tsx",
      "line": 51,
      "service": "storage",
      "content": "const storedData = getCommunityInterviewFromStorage();"
    },
    {
      "file": "./app/community-mock-interview/interview/page.tsx",
      "line": 54,
      "service": "storage",
      "content": "setDataSource('localStorage');"
    },
    {
      "file": "./app/community-mock-interview/interview/page.tsx",
      "line": 55,
      "service": "storage",
      "content": "console.log('✅ Using localStorage for interview data');"
    },
    {
      "file": "./app/community-mock-interview/interview/page.tsx",
      "line": 59,
      "service": "firestore",
      "content": "// Priority 3: Use Firestore data if available"
    },
    {
      "file": "./app/community-mock-interview/interview/page.tsx",
      "line": 60,
      "service": "firestore",
      "content": "if (interview && !firestoreLoading && !firestoreError) {"
    },
    {
      "file": "./app/community-mock-interview/interview/page.tsx",
      "line": 61,
      "service": "firestore",
      "content": "const firestoreData: CommunityInterviewData = {"
    },
    {
      "file": "./app/community-mock-interview/interview/page.tsx",
      "line": 70,
      "service": "firestore",
      "content": "setInterviewData(firestoreData);"
    },
    {
      "file": "./app/community-mock-interview/interview/page.tsx",
      "line": 71,
      "service": "firestore",
      "content": "setDataSource('firestore');"
    },
    {
      "file": "./app/community-mock-interview/interview/page.tsx",
      "line": 72,
      "service": "firestore",
      "content": "console.log('✅ Using Firestore for interview data');"
    },
    {
      "file": "./app/community-mock-interview/interview/page.tsx",
      "line": 76,
      "service": "firestore",
      "content": "// If we have an ID but no other data sources worked, wait for Firestore"
    },
    {
      "file": "./app/community-mock-interview/interview/page.tsx",
      "line": 77,
      "service": "firestore",
      "content": "if (urlInterviewId && firestoreLoading) {"
    },
    {
      "file": "./app/community-mock-interview/interview/page.tsx",
      "line": 87,
      "service": "firestore",
      "content": "}, [urlInterviewId, urlRole, urlType, urlLevel, urlTechstack, interview, firestoreLoading, firestoreError]);"
    },
    {
      "file": "./app/community-mock-interview/interview/page.tsx",
      "line": 90,
      "service": "firestore",
      "content": "if (firestoreLoading && !interviewData) {"
    },
    {
      "file": "./app/community-mock-interview/interview/page.tsx",
      "line": 94,
      "service": "firestore",
      "content": "// Show Firestore error state only if no other data sources are available"
    },
    {
      "file": "./app/community-mock-interview/interview/page.tsx",
      "line": 95,
      "service": "firestore",
      "content": "if (firestoreError && !interviewData) {"
    },
    {
      "file": "./app/community-mock-interview/interview/page.tsx",
      "line": 99,
      "service": "firestore",
      "content": "<p className=\"text-gray-300\">{firestoreError}</p>"
    },
    {
      "file": "./app/community-mock-interview/interview/page.tsx",
      "line": 116,
      "service": "storage",
      "content": "// Update localStorage with current data for future persistence (if not already from localStorage)"
    },
    {
      "file": "./app/community-mock-interview/interview/page.tsx",
      "line": 118,
      "service": "storage",
      "content": "if (interviewData && dataSource !== 'localStorage') {"
    },
    {
      "file": "./app/community-mock-interview/interview/page.tsx",
      "line": 119,
      "service": "storage",
      "content": "setCommunityInterviewInStorage(interviewData);"
    },
    {
      "file": "./app/api/config/firebase/route.ts",
      "line": 21,
      "service": "auth",
      "content": "authDomain: \"prepbettr.firebaseapp.com\","
    },
    {
      "file": "./app/api/config/firebase/route.ts",
      "line": 23,
      "service": "storage",
      "content": "storageBucket: \"prepbettr.firebasestorage.app\","
    },
    {
      "file": "./app/api/auth/signup/route.ts",
      "line": 3,
      "service": "auth",
      "content": "import { verifyFirebaseToken } from '@/lib/middleware/authMiddleware';"
    },
    {
      "file": "./app/api/auth/signup/route.ts",
      "line": 28,
      "service": "auth",
      "content": "const authResult = await verifyFirebaseToken(idToken);"
    },
    {
      "file": "./app/api/auth/signup/route.ts",
      "line": 30,
      "service": "auth",
      "content": "if (!authResult.success || !authResult.user) {"
    },
    {
      "file": "./app/api/auth/signup/route.ts",
      "line": 40,
      "service": "auth",
      "content": "const existingUser = await firebaseService.getUser(authResult.user.uid);"
    },
    {
      "file": "./app/api/auth/signup/route.ts",
      "line": 49,
      "service": "firestore",
      "content": "// Create new user in Firestore"
    },
    {
      "file": "./app/api/auth/signup/route.ts",
      "line": 50,
      "service": "auth",
      "content": "await firebaseService.createUser(authResult.user.uid, {"
    },
    {
      "file": "./app/api/auth/signup/route.ts",
      "line": 69,
      "service": "auth",
      "content": "uid: authResult.user.uid,"
    },
    {
      "file": "./app/api/auth/signup/route.ts",
      "line": 72,
      "service": "auth",
      "content": "picture: authResult.user.picture"
    },
    {
      "file": "./app/api/auth/signin/route.ts",
      "line": 3,
      "service": "auth",
      "content": "import { verifyFirebaseToken } from '@/lib/middleware/authMiddleware';"
    },
    {
      "file": "./app/api/auth/signin/route.ts",
      "line": 21,
      "service": "auth",
      "content": "const authResult = await verifyFirebaseToken(idToken);"
    },
    {
      "file": "./app/api/auth/signin/route.ts",
      "line": 23,
      "service": "auth",
      "content": "if (!authResult.success || !authResult.user) {"
    },
    {
      "file": "./app/api/auth/signin/route.ts",
      "line": 32,
      "service": "firestore",
      "content": "// Check if user exists in Firestore"
    },
    {
      "file": "./app/api/auth/signin/route.ts",
      "line": 33,
      "service": "auth",
      "content": "const existingUser = await firebaseService.getUser(authResult.user.uid);"
    },
    {
      "file": "./app/api/auth/signin/route.ts",
      "line": 56,
      "service": "auth",
      "content": "uid: authResult.user.uid,"
    },
    {
      "file": "./app/api/auth/signin/route.ts",
      "line": 57,
      "service": "auth",
      "content": "email: authResult.user.email,"
    },
    {
      "file": "./app/api/auth/signin/route.ts",
      "line": 58,
      "service": "auth",
      "content": "name: authResult.user.name,"
    },
    {
      "file": "./app/api/auth/signin/route.ts",
      "line": 59,
      "service": "auth",
      "content": "picture: authResult.user.picture,"
    },
    {
      "file": "./app/marketing/privacy/page.tsx",
      "line": 52,
      "service": "storage",
      "content": "However, no method of transmission over the Internet or electronic storage is 100% secure."
    },
    {
      "file": "./app/marketing/terms/page.tsx",
      "line": 35,
      "service": "auth",
      "content": "<li>Notify us immediately of any unauthorized use of your account</li>"
    },
    {
      "file": "./app/marketing/terms/page.tsx",
      "line": 43,
      "service": "auth",
      "content": "<li>Authorize us to charge your payment method</li>"
    },
    {
      "file": "./app/marketing/terms/page.tsx",
      "line": 60,
      "service": "auth",
      "content": "<li>Attempt to gain unauthorized access to any accounts or systems</li>"
    },
    {
      "file": "./app/account/layout.tsx",
      "line": 3,
      "service": "auth",
      "content": "import { isAuthenticated, getCurrentUser } from \"@/lib/actions/auth.action\";"
    },
    {
      "file": "./app/account/layout.tsx",
      "line": 4,
      "service": "auth",
      "content": "import { AuthProvider } from \"@/contexts/AuthContext\";"
    },
    {
      "file": "./app/account/layout.tsx",
      "line": 6,
      "service": "auth",
      "content": "import AuthenticatedLayout from \"@/components/authenticated-layout\";"
    },
    {
      "file": "./app/account/layout.tsx",
      "line": 17,
      "service": "auth",
      "content": "// Check authentication"
    },
    {
      "file": "./app/account/layout.tsx",
      "line": 18,
      "service": "auth",
      "content": "if (!(await isAuthenticated())) {"
    },
    {
      "file": "./app/account/layout.tsx",
      "line": 26,
      "service": "auth",
      "content": "<AuthProvider initialUser={user}>"
    },
    {
      "file": "./app/account/layout.tsx",
      "line": 28,
      "service": "auth",
      "content": "<AuthenticatedLayout>"
    },
    {
      "file": "./app/account/layout.tsx",
      "line": 30,
      "service": "auth",
      "content": "</AuthenticatedLayout>"
    },
    {
      "file": "./app/account/layout.tsx",
      "line": 32,
      "service": "auth",
      "content": "</AuthProvider>"
    },
    {
      "file": "./app/(auth)/sign-up/page.tsx",
      "line": 3,
      "service": "auth",
      "content": "import AuthForm from \"@/components/AuthForm\";"
    },
    {
      "file": "./app/(auth)/sign-up/page.tsx",
      "line": 6,
      "service": "auth",
      "content": "return <AuthForm type=\"sign-up\" />;"
    },
    {
      "file": "./app/(auth)/profile/page.tsx",
      "line": 4,
      "service": "auth",
      "content": "import { getCurrentUser } from '@/lib/actions/auth.action';"
    },
    {
      "file": "./app/(auth)/layout.tsx",
      "line": 3,
      "service": "auth",
      "content": "const AuthLayout = ({ children }: { children: ReactNode }) => {"
    },
    {
      "file": "./app/(auth)/layout.tsx",
      "line": 4,
      "service": "auth",
      "content": "// Authentication redirect is now handled by middleware"
    },
    {
      "file": "./app/(auth)/layout.tsx",
      "line": 5,
      "service": "auth",
      "content": "// This layout just provides the structure for auth pages"
    },
    {
      "file": "./app/(auth)/layout.tsx",
      "line": 18,
      "service": "auth",
      "content": "export default AuthLayout;"
    },
    {
      "file": "./app/(auth)/sign-in/page.tsx",
      "line": 3,
      "service": "auth",
      "content": "import AuthForm from \"@/components/AuthForm\";"
    },
    {
      "file": "./app/(auth)/sign-in/page.tsx",
      "line": 4,
      "service": "auth",
      "content": "import AuthDebugInfo from \"@/components/AuthDebugInfo\";"
    },
    {
      "file": "./app/(auth)/sign-in/page.tsx",
      "line": 9,
      "service": "auth",
      "content": "<AuthForm type=\"sign-in\" />"
    },
    {
      "file": "./app/(auth)/sign-in/page.tsx",
      "line": 10,
      "service": "auth",
      "content": "<AuthDebugInfo />"
    },
    {
      "file": "./test-mock-interviews.js",
      "line": 7,
      "service": "admin",
      "content": "const admin = require('firebase-admin');"
    },
    {
      "file": "./test-mock-interviews.js",
      "line": 16,
      "service": "firestore",
      "content": "const db = admin.firestore();"
    },
    {
      "file": "./test-mock-interviews.js",
      "line": 19,
      "service": "firestore",
      "content": "console.log('🔍 Checking for public mock interviews in Firestore...\\n');"
    },
    {
      "file": "./test-mock-interviews.js",
      "line": 53,
      "service": "firestore",
      "content": "console.log('\\n⚠️  Index required. Deploy indexes with: firebase deploy --only firestore:indexes');"
    },
    {
      "file": "./debug-redirect-issue.js",
      "line": 13,
      "service": "auth",
      "content": "console.log('=== Test 1: Simulate successful auth flow ===');"
    },
    {
      "file": "./debug-redirect-issue.js",
      "line": 32,
      "service": "auth",
      "content": "console.log('\\n=== Test 3: Check auth API responses ===');"
    },
    {
      "file": "./debug-redirect-issue.js",
      "line": 34,
      "service": "auth",
      "content": "const signinTest = await fetch(`${baseUrl}/api/auth/signin`, {"
    },
    {
      "file": "./debug-redirect-issue.js",
      "line": 45,
      "service": "auth",
      "content": "// Test sign-in page to see if it redirects authenticated users"
    },
    {
      "file": "./debug-redirect-issue.js",
      "line": 63,
      "service": "auth",
      "content": "console.log('   ✓ \"Firebase auth successful, user: [some-uid]\"');"
    },
    {
      "file": "./debug-redirect-issue.js",
      "line": 70,
      "service": "auth",
      "content": "console.log('   - POST request to /api/auth/signin (should be 200)');"
    },
    {
      "file": "./debug-redirect-issue.js",
      "line": 71,
      "service": "auth",
      "content": "console.log('   - POST request to /api/auth/signup (if user creation needed)');"
    },
    {
      "file": "./azure/followUpWorker/index.js",
      "line": 8,
      "service": "storage",
      "content": "app.storageQueue('followUpWorker', {"
    },
    {
      "file": "./azure/followUpWorker/index.js",
      "line": 10,
      "service": "storage",
      "content": "connection: 'AzureWebJobsStorage',"
    },
    {
      "file": "./azure/followUpWorker/index.js",
      "line": 407,
      "service": "storage",
      "content": "// Store follow-up record (TODO: implement proper storage)"
    },
    {
      "file": "./azure/followUpWorker/index.js",
      "line": 474,
      "service": "storage",
      "content": "// Utility functions (TODO: Implement with proper data storage)"
    },
    {
      "file": "./azure/followUpWorker/index.js",
      "line": 521,
      "service": "firestore",
      "content": "// TODO: Store in database (Firestore, etc.)"
    },
    {
      "file": "./azure/onUserPlanChange/index.js",
      "line": 52,
      "service": "firestore",
      "content": "// Azure Cosmos DB doesn't provide \"before/after\" like Firestore"
    },
    {
      "file": "./azure/TokenRefreshTimer/index.js",
      "line": 98,
      "service": "auth",
      "content": "* Refresh an OAuth token"
    },
    {
      "file": "./azure/TokenRefreshTimer/index.js",
      "line": 135,
      "service": "auth",
      "content": "return 'https://www.linkedin.com/oauth/v2/accessToken';"
    },
    {
      "file": "./azure/TokenRefreshTimer/index.js",
      "line": 137,
      "service": "auth",
      "content": "return 'https://api.wellfound.com/oauth/token';"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 1,
      "service": "admin",
      "content": "const admin = require('firebase-admin');"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 6,
      "service": "auth",
      "content": "* Firebase Authentication Middleware for Azure Functions"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 8,
      "service": "auth",
      "content": "* This middleware validates Firebase ID tokens and ensures only authenticated users"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 20,
      "service": "auth",
      "content": "return firebaseApp.auth();"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 66,
      "service": "admin",
      "content": "firebaseApp = admin.initializeApp({"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 76,
      "service": "auth",
      "content": "return firebaseApp.auth();"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 85,
      "service": "auth",
      "content": "* Extract Bearer token from Authorization header"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 87,
      "service": "auth",
      "content": "function extractBearerToken(authHeader) {"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 88,
      "service": "auth",
      "content": "if (!authHeader) {"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 92,
      "service": "auth",
      "content": "const parts = authHeader.split(' ');"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 105,
      "service": "auth",
      "content": "const auth = await initializeFirebase();"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 106,
      "service": "auth",
      "content": "const decodedToken = await auth.verifyIdToken(idToken, true);"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 123,
      "service": "auth",
      "content": "* Authentication middleware for Azure Functions"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 126,
      "service": "auth",
      "content": "* const { authMiddleware } = require('../shared/authMiddleware');"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 129,
      "service": "auth",
      "content": "*   const authResult = await authMiddleware(context, req);"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 130,
      "service": "auth",
      "content": "*   if (!authResult.success) {"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 131,
      "service": "auth",
      "content": "*     context.res = authResult.response;"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 135,
      "service": "auth",
      "content": "*   const user = authResult.user;"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 139,
      "service": "auth",
      "content": "async function authMiddleware(context, req) {"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 141,
      "service": "auth",
      "content": "// Extract token from Authorization header"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 142,
      "service": "auth",
      "content": "const authHeader = req.headers.authorization || req.headers.Authorization;"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 143,
      "service": "auth",
      "content": "const token = extractBearerToken(authHeader);"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 155,
      "service": "auth",
      "content": "error: 'Missing or invalid Authorization header',"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 156,
      "service": "auth",
      "content": "message: 'Please provide a valid Bearer token in the Authorization header'"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 182,
      "service": "auth",
      "content": "// Log successful authentication (for monitoring)"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 184,
      "service": "auth",
      "content": "context.log(`Authenticated user: ${user.uid} (${user.email})`);"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 193,
      "service": "auth",
      "content": "context.log.error('Authentication middleware error:', error);"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 204,
      "service": "auth",
      "content": "error: 'Authentication system error',"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 213,
      "service": "auth",
      "content": "* Optional: Role-based authorization middleware"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 218,
      "service": "auth",
      "content": "const authResult = await authMiddleware(context, req);"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 220,
      "service": "auth",
      "content": "if (!authResult.success) {"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 221,
      "service": "auth",
      "content": "return authResult;"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 224,
      "service": "auth",
      "content": "const user = authResult.user;"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 249,
      "service": "auth",
      "content": "return authResult;"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 253,
      "service": "auth",
      "content": "* Utility to create authenticated Azure Function wrapper"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 256,
      "service": "auth",
      "content": "* const { createAuthenticatedFunction } = require('../shared/authMiddleware');"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 258,
      "service": "auth",
      "content": "* module.exports = createAuthenticatedFunction(async function (context, req, user) {"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 260,
      "service": "auth",
      "content": "*   // 'user' contains the authenticated Firebase user"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 263,
      "service": "auth",
      "content": "function createAuthenticatedFunction(handlerFunction, options = {}) {"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 265,
      "service": "auth",
      "content": "const { requiredRoles = [], skipAuth = false } = options;"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 267,
      "service": "auth",
      "content": "if (skipAuth) {"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 271,
      "service": "auth",
      "content": "const authResult = requiredRoles.length > 0"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 273,
      "service": "auth",
      "content": ": await authMiddleware(context, req);"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 275,
      "service": "auth",
      "content": "if (!authResult.success) {"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 276,
      "service": "auth",
      "content": "context.res = authResult.response;"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 280,
      "service": "auth",
      "content": "// Call the actual handler with the authenticated user"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 281,
      "service": "auth",
      "content": "return await handlerFunction(context, req, authResult.user);"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 293,
      "service": "auth",
      "content": "* Health check endpoint (no auth required)"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 304,
      "service": "auth",
      "content": "service: 'Azure Functions Auth Middleware'"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 310,
      "service": "auth",
      "content": "authMiddleware,"
    },
    {
      "file": "./azure/shared/authMiddleware.js",
      "line": 313,
      "service": "auth",
      "content": "createAuthenticatedFunction,"
    },
    {
      "file": "./azure/processGDPRScheduledDeletions/index.js",
      "line": 2,
      "service": "storage",
      "content": "const { BlobServiceClient } = require('@azure/storage-blob');"
    },
    {
      "file": "./azure/processGDPRScheduledDeletions/index.js",
      "line": 5,
      "service": "admin",
      "content": "const admin = require('firebase-admin');"
    },
    {
      "file": "./azure/processGDPRScheduledDeletions/index.js",
      "line": 58,
      "service": "storage",
      "content": "// Initialize Azure Blob Storage"
    },
    {
      "file": "./azure/processGDPRScheduledDeletions/index.js",
      "line": 59,
      "service": "storage",
      "content": "let storageConnection = process.env.AZURE_STORAGE_CONNECTION_STRING;"
    },
    {
      "file": "./azure/processGDPRScheduledDeletions/index.js",
      "line": 61,
      "service": "storage",
      "content": "if (!storageConnection && keyVaultClient) {"
    },
    {
      "file": "./azure/processGDPRScheduledDeletions/index.js",
      "line": 63,
      "service": "storage",
      "content": "const secret = await keyVaultClient.getSecret('storage-connection-string');"
    },
    {
      "file": "./azure/processGDPRScheduledDeletions/index.js",
      "line": 64,
      "service": "storage",
      "content": "storageConnection = secret.value;"
    },
    {
      "file": "./azure/processGDPRScheduledDeletions/index.js",
      "line": 66,
      "service": "storage",
      "content": "context.log.warn('Could not retrieve Storage connection from Key Vault:', error.message);"
    },
    {
      "file": "./azure/processGDPRScheduledDeletions/index.js",
      "line": 70,
      "service": "storage",
      "content": "if (!storageConnection) {"
    },
    {
      "file": "./azure/processGDPRScheduledDeletions/index.js",
      "line": 71,
      "service": "storage",
      "content": "throw new Error('Azure Storage connection string not found');"
    },
    {
      "file": "./azure/processGDPRScheduledDeletions/index.js",
      "line": 74,
      "service": "storage",
      "content": "blobServiceClient = BlobServiceClient.fromConnectionString(storageConnection);"
    },
    {
      "file": "./azure/processGDPRScheduledDeletions/index.js",
      "line": 100,
      "service": "admin",
      "content": "credential: admin.credential.cert(firebaseConfig),"
    },
    {
      "file": "./azure/processGDPRScheduledDeletions/index.js",
      "line": 185,
      "service": "storage",
      "content": "// Delete from Azure Blob Storage"
    },
    {
      "file": "./azure/processGDPRScheduledDeletions/index.js",
      "line": 187,
      "service": "storage",
      "content": "const deletedBlobContainers = await deleteFromBlobStorage(context, request.userId);"
    },
    {
      "file": "./azure/processGDPRScheduledDeletions/index.js",
      "line": 189,
      "service": "storage",
      "content": "deletedData.push(`blob-storage (${deletedBlobContainers.join(', ')})`);"
    },
    {
      "file": "./azure/processGDPRScheduledDeletions/index.js",
      "line": 192,
      "service": "storage",
      "content": "const errorMsg = `Failed to delete from blob storage: ${error.message}`;"
    },
    {
      "file": "./azure/processGDPRScheduledDeletions/index.js",
      "line": 197,
      "service": "auth",
      "content": "// Delete from Firebase Authentication"
    },
    {
      "file": "./azure/processGDPRScheduledDeletions/index.js",
      "line": 199,
      "service": "auth",
      "content": "await admin.auth().deleteUser(request.userId);"
    },
    {
      "file": "./azure/processGDPRScheduledDeletions/index.js",
      "line": 200,
      "service": "auth",
      "content": "deletedData.push('firebase-auth (1 user)');"
    },
    {
      "file": "./azure/processGDPRScheduledDeletions/index.js",
      "line": 201,
      "service": "auth",
      "content": "context.log(`✅ Deleted Firebase authentication record for user ${request.userId}`);"
    },
    {
      "file": "./azure/processGDPRScheduledDeletions/index.js",
      "line": 203,
      "service": "auth",
      "content": "const errorMsg = `Failed to delete Firebase auth record: ${error.message}`;"
    },
    {
      "file": "./azure/processGDPRScheduledDeletions/index.js",
      "line": 313,
      "service": "storage",
      "content": "* Delete user files from Azure Blob Storage"
    },
    {
      "file": "./azure/processGDPRScheduledDeletions/index.js",
      "line": 315,
      "service": "storage",
      "content": "async function deleteFromBlobStorage(context, userId) {"
    },
    {
      "file": "./azure/applicationWorker/index.js",
      "line": 45,
      "service": "storage",
      "content": "app.storageQueue('applicationWorker', {"
    },
    {
      "file": "./azure/applicationWorker/index.js",
      "line": 47,
      "service": "storage",
      "content": "connection: 'AzureWebJobsStorage',"
    },
    {
      "file": "./azure/applicationWorker/index.js",
      "line": 373,
      "service": "storage",
      "content": "// Store application in database (TODO: implement proper storage)"
    },
    {
      "file": "./azure/applicationWorker/index.js",
      "line": 436,
      "service": "storage",
      "content": "// Utility functions (TODO: Implement with proper data storage)"
    },
    {
      "file": "./azure/applicationWorker/index.js",
      "line": 477,
      "service": "firestore",
      "content": "// TODO: Store in database (Firestore, etc.)"
    },
    {
      "file": "./azure/searchScheduler/index.js",
      "line": 73,
      "service": "auth",
      "content": "authLevel: 'function',"
    },
    {
      "file": "./azure/searchScheduler/index.js",
      "line": 148,
      "service": "firestore",
      "content": "// TODO: In production, this would query Firebase Firestore or another database"
    },
    {
      "file": "./azure/deleteUserData/index.js",
      "line": 1,
      "service": "admin",
      "content": "const admin = require('firebase-admin');"
    },
    {
      "file": "./azure/deleteUserData/index.js",
      "line": 3,
      "service": "storage",
      "content": "const { BlobServiceClient } = require('@azure/storage-blob');"
    },
    {
      "file": "./azure/deleteUserData/index.js",
      "line": 6,
      "service": "auth",
      "content": "const { createAuthenticatedFunction, authMiddleware } = require('../shared/authMiddleware');"
    },
    {
      "file": "./azure/deleteUserData/index.js",
      "line": 43,
      "service": "storage",
      "content": "// Initialize Azure Storage client"
    },
    {
      "file": "./azure/deleteUserData/index.js",
      "line": 45,
      "service": "storage",
      "content": "const storageConnectionString = process.env.AZURE_STORAGE_CONNECTION_STRING;"
    },
    {
      "file": "./azure/deleteUserData/index.js",
      "line": 46,
      "service": "storage",
      "content": "blobServiceClient = BlobServiceClient.fromConnectionString(storageConnectionString);"
    },
    {
      "file": "./azure/deleteUserData/index.js",
      "line": 70,
      "service": "auth",
      "content": "async function handleDeleteUserData(context, req, authenticatedUser) {"
    },
    {
      "file": "./azure/deleteUserData/index.js",
      "line": 78,
      "service": "auth",
      "content": "'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Functions-Key',"
    },
    {
      "file": "./azure/deleteUserData/index.js",
      "line": 94,
      "service": "auth",
      "content": "const requestingUserId = authenticatedUser.uid;"
    },
    {
      "file": "./azure/deleteUserData/index.js",
      "line": 95,
      "service": "auth",
      "content": "const isAdmin = authenticatedUser.custom_claims?.roles?.includes('admin') || false;"
    },
    {
      "file": "./azure/deleteUserData/index.js",
      "line": 106,
      "service": "auth",
      "content": "// Verify authorization - either admin or user deleting their own data"
    },
    {
      "file": "./azure/deleteUserData/index.js",
      "line": 110,
      "service": "auth",
      "content": "error: 'Users can only delete their own data. You are authenticated as: ' + requestingUserId,"
    },
    {
      "file": "./azure/deleteUserData/index.js",
      "line": 180,
      "service": "storage",
      "content": "// Delete from Azure Blob Storage"
    },
    {
      "file": "./azure/deleteUserData/index.js",
      "line": 196,
      "service": "firestore",
      "content": "deletedCollections.push({ collection: 'azure-storage', count: deletedBlobsCount });"
    },
    {
      "file": "./azure/deleteUserData/index.js",
      "line": 197,
      "service": "storage",
      "content": "context.log(`Deleted ${deletedBlobsCount} files from Azure Storage`);"
    },
    {
      "file": "./azure/deleteUserData/index.js",
      "line": 200,
      "service": "storage",
      "content": "context.log.error('Error deleting from Azure Storage:', error);"
    },
    {
      "file": "./azure/deleteUserData/index.js",
      "line": 201,
      "service": "firestore",
      "content": "deletionErrors.push({ collection: 'azure-storage', error: error.message });"
    },
    {
      "file": "./azure/deleteUserData/index.js",
      "line": 204,
      "service": "auth",
      "content": "// Delete Firebase Authentication record"
    },
    {
      "file": "./azure/deleteUserData/index.js",
      "line": 206,
      "service": "auth",
      "content": "await admin.auth().deleteUser(userId);"
    },
    {
      "file": "./azure/deleteUserData/index.js",
      "line": 207,
      "service": "auth",
      "content": "deletedCollections.push({ collection: 'firebase-auth', count: 1 });"
    },
    {
      "file": "./azure/deleteUserData/index.js",
      "line": 208,
      "service": "auth",
      "content": "context.log(`Deleted Firebase authentication record for user: ${userId}`);"
    },
    {
      "file": "./azure/deleteUserData/index.js",
      "line": 210,
      "service": "auth",
      "content": "context.log.error('Error deleting Firebase auth record:', error);"
    },
    {
      "file": "./azure/deleteUserData/index.js",
      "line": 211,
      "service": "auth",
      "content": "deletionErrors.push({ collection: 'firebase-auth', error: error.message });"
    },
    {
      "file": "./azure/deleteUserData/index.js",
      "line": 291,
      "service": "auth",
      "content": "// Export authenticated function"
    },
    {
      "file": "./azure/deleteUserData/index.js",
      "line": 292,
      "service": "auth",
      "content": "module.exports = createAuthenticatedFunction(handleDeleteUserData);"
    },
    {
      "file": "./azure/lib/middleware/function-error-handler.js",
      "line": 324,
      "service": "auth",
      "content": "// Authentication errors"
    },
    {
      "file": "./azure/lib/middleware/function-error-handler.js",
      "line": 326,
      "service": "auth",
      "content": "error.message.includes('unauthorized') ||"
    },
    {
      "file": "./azure/lib/middleware/function-error-handler.js",
      "line": 327,
      "service": "auth",
      "content": "error.message.includes('authentication') ||"
    },
    {
      "file": "./azure/lib/middleware/function-error-handler.js",
      "line": 331,
      "service": "auth",
      "content": "'Authentication failed',"
    },
    {
      "file": "./azure/lib/middleware/function-error-handler.js",
      "line": 333,
      "service": "auth",
      "content": "'AUTH_ERROR'"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 33,
      "service": "storage",
      "content": "const [speechKey, speechEndpoint, azureOpenAIKey, azureOpenAIEndpoint, azureOpenAIDeployment, azureOpenAIGpt35, azureOpenAIGpt4o, storageAccountName, storageAccountKey, formRecognizerEndpoint, formRecognizerKey] = await Promise.all(["
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 41,
      "service": "storage",
      "content": "client.getSecret('azure-storage-account-name').catch(() => null), // Optional"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 42,
      "service": "storage",
      "content": "client.getSecret('azure-storage-account-key').catch(() => null), // Optional"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 57,
      "service": "storage",
      "content": "azureStorageAccountName: storageAccountName?.value,"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 58,
      "service": "storage",
      "content": "azureStorageAccountKey: storageAccountKey?.value,"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 77,
      "service": "storage",
      "content": "azureStorageAccountName: process.env.AZURE_STORAGE_ACCOUNT_NAME,"
    },
    {
      "file": "./azure/lib/compiled/azure-config.js",
      "line": 78,
      "service": "storage",
      "content": "azureStorageAccountKey: process.env.AZURE_STORAGE_ACCOUNT_KEY,"
    },
    {
      "file": "./azure/lib/services/queue-service.js",
      "line": 1,
      "service": "storage",
      "content": "const { QueueServiceClient } = require('@azure/storage-queue');"
    },
    {
      "file": "./azure/lib/services/queue-service.js",
      "line": 20,
      "service": "storage",
      "content": "const connectionString = process.env.AzureWebJobsStorage;"
    },
    {
      "file": "./azure/lib/services/queue-service.js",
      "line": 22,
      "service": "storage",
      "content": "throw new Error('AzureWebJobsStorage connection string is required');"
    },
    {
      "file": "./azure/lib/services/automation-logs.js",
      "line": 231,
      "service": "firestore",
      "content": "// This would typically query a database or storage"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 15,
      "service": "storage",
      "content": "azureStorageAccountName?: string; // Azure Storage Account Name"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 16,
      "service": "storage",
      "content": "azureStorageAccountKey?: string; // Azure Storage Account Key"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 55,
      "service": "storage",
      "content": "const [speechKey, speechEndpoint, azureOpenAIKey, azureOpenAIEndpoint, azureOpenAIDeployment, azureOpenAIGpt35, azureOpenAIGpt4o, storageAccountName, storageAccountKey, formRecognizerEndpoint, formRecognizerKey] = await Promise.all(["
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 63,
      "service": "storage",
      "content": "client.getSecret('azure-storage-account-name').catch(() => null), // Optional"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 64,
      "service": "storage",
      "content": "client.getSecret('azure-storage-account-key').catch(() => null), // Optional"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 81,
      "service": "storage",
      "content": "azureStorageAccountName: storageAccountName?.value,"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 82,
      "service": "storage",
      "content": "azureStorageAccountKey: storageAccountKey?.value,"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 103,
      "service": "storage",
      "content": "azureStorageAccountName: process.env.AZURE_STORAGE_ACCOUNT_NAME,"
    },
    {
      "file": "./azure/lib/azure-config.ts",
      "line": 104,
      "service": "storage",
      "content": "azureStorageAccountKey: process.env.AZURE_STORAGE_ACCOUNT_KEY,"
    },
    {
      "file": "./azure/jobSearchWorker/index.js",
      "line": 45,
      "service": "storage",
      "content": "app.storageQueue('jobSearchWorker', {"
    },
    {
      "file": "./azure/jobSearchWorker/index.js",
      "line": 47,
      "service": "storage",
      "content": "connection: 'AzureWebJobsStorage',"
    },
    {
      "file": "./azure/jobSearchWorker/index.js",
      "line": 104,
      "service": "storage",
      "content": "// Store discovered jobs for user (TODO: implement proper storage)"
    },
    {
      "file": "./azure/jobSearchWorker/index.js",
      "line": 458,
      "service": "storage",
      "content": "// Utility functions (TODO: Implement with proper data storage)"
    },
    {
      "file": "./azure/jobSearchWorker/index.js",
      "line": 480,
      "service": "firestore",
      "content": "// TODO: Store discovered jobs in database (Firestore, etc.)"
    },
    {
      "file": "./azure/HttpTrigger1/index.js",
      "line": 5,
      "service": "storage",
      "content": "// In-memory session storage (in production, use Azure Table Storage or Cosmos DB)"
    },
    {
      "file": "./azure/createSessionCookie/index.js",
      "line": 1,
      "service": "auth",
      "content": "const { createAuthenticatedFunction, initializeFirebase } = require('../shared/authMiddleware');"
    },
    {
      "file": "./azure/createSessionCookie/index.js",
      "line": 5,
      "service": "auth",
      "content": "* Requires authentication - user must provide valid Firebase ID token"
    },
    {
      "file": "./azure/createSessionCookie/index.js",
      "line": 7,
      "service": "auth",
      "content": "async function handleCreateSessionCookie(context, req, authenticatedUser) {"
    },
    {
      "file": "./azure/createSessionCookie/index.js",
      "line": 15,
      "service": "auth",
      "content": "'Access-Control-Allow-Headers': 'Content-Type, Authorization',"
    },
    {
      "file": "./azure/createSessionCookie/index.js",
      "line": 28,
      "service": "auth",
      "content": "const auth = await initializeFirebase();"
    },
    {
      "file": "./azure/createSessionCookie/index.js",
      "line": 30,
      "service": "auth",
      "content": "// Get idToken from request body or use the authenticated token"
    },
    {
      "file": "./azure/createSessionCookie/index.js",
      "line": 32,
      "service": "auth",
      "content": "const tokenToUse = idToken || req.headers.authorization?.replace('Bearer ', '');"
    },
    {
      "file": "./azure/createSessionCookie/index.js",
      "line": 37,
      "service": "auth",
      "content": "error: 'ID token is required in request body or Authorization header',"
    },
    {
      "file": "./azure/createSessionCookie/index.js",
      "line": 48,
      "service": "auth",
      "content": "const sessionCookie = await auth.createSessionCookie(tokenToUse, {"
    },
    {
      "file": "./azure/createSessionCookie/index.js",
      "line": 53,
      "service": "auth",
      "content": "context.log(`Session cookie created successfully for user: ${authenticatedUser.uid} (${duration}ms)`);"
    },
    {
      "file": "./azure/createSessionCookie/index.js",
      "line": 61,
      "service": "auth",
      "content": "userId: authenticatedUser.uid,"
    },
    {
      "file": "./azure/createSessionCookie/index.js",
      "line": 72,
      "service": "auth",
      "content": "if (error.code === 'auth/id-token-expired') {"
    },
    {
      "file": "./azure/createSessionCookie/index.js",
      "line": 75,
      "service": "auth",
      "content": "} else if (error.code === 'auth/id-token-revoked') {"
    },
    {
      "file": "./azure/createSessionCookie/index.js",
      "line": 78,
      "service": "auth",
      "content": "} else if (error.code === 'auth/argument-error') {"
    },
    {
      "file": "./azure/createSessionCookie/index.js",
      "line": 92,
      "service": "auth",
      "content": "// Export authenticated function"
    },
    {
      "file": "./azure/createSessionCookie/index.js",
      "line": 93,
      "service": "auth",
      "content": "module.exports = createAuthenticatedFunction(handleCreateSessionCookie);"
    },
    {
      "file": "./azure/verifyToken/index.js",
      "line": 1,
      "service": "auth",
      "content": "const { verifyFirebaseToken } = require('../shared/authMiddleware');"
    },
    {
      "file": "./azure/verifyToken/index.js",
      "line": 8,
      "service": "auth",
      "content": "* 2. With Authorization Bearer header (for authenticated requests)"
    },
    {
      "file": "./azure/verifyToken/index.js",
      "line": 18,
      "service": "auth",
      "content": "'Access-Control-Allow-Headers': 'Content-Type, Authorization',"
    },
    {
      "file": "./azure/verifyToken/index.js",
      "line": 34,
      "service": "auth",
      "content": "const authHeader = req.headers.authorization;"
    },
    {
      "file": "./azure/verifyToken/index.js",
      "line": 38,
      "service": "auth",
      "content": "} else if (authHeader && authHeader.startsWith('Bearer ')) {"
    },
    {
      "file": "./azure/verifyToken/index.js",
      "line": 39,
      "service": "auth",
      "content": "token = authHeader.substring(7);"
    },
    {
      "file": "./azure/verifyToken/index.js",
      "line": 45,
      "service": "auth",
      "content": "error: 'No token provided in request body or Authorization header',"
    },
    {
      "file": "./test-auth-flow.js",
      "line": 54,
      "service": "auth",
      "content": "const req = https.request('https://prepbettr.com/api/auth/signin', {"
    },
    {
      "file": "./test-auth-flow.js",
      "line": 100,
      "service": "auth",
      "content": "const req = https.request('https://prepbettr.com/api/auth/signup', {"
    },
    {
      "file": "./test-auth-flow.js",
      "line": 140,
      "service": "auth",
      "content": "'/api/auth/google',"
    },
    {
      "file": "./test-auth-flow.js",
      "line": 141,
      "service": "auth",
      "content": "'/api/auth/callback',"
    },
    {
      "file": "./test-auth-flow.js",
      "line": 142,
      "service": "auth",
      "content": "'/api/auth/session',"
    },
    {
      "file": "./test-auth-flow.js",
      "line": 143,
      "service": "auth",
      "content": "'/api/auth/token'"
    },
    {
      "file": "./test-auth-flow.js",
      "line": 183,
      "service": "auth",
      "content": "console.log('✅ Authentication APIs respond with expected errors');"
    },
    {
      "file": "./test-auth-flow.js",
      "line": 188,
      "service": "auth",
      "content": "console.log('   4. Frontend not properly handling Google OAuth flow');"
    },
    {
      "file": "./next.config.js",
      "line": 14,
      "service": "storage",
      "content": "hostname: 'storage.googleapis.com',"
    },
    {
      "file": "./next.config.js",
      "line": 38,
      "service": "storage",
      "content": "'@azure/storage-blob',"
    },
    {
      "file": "./next.config.js",
      "line": 42,
      "service": "admin",
      "content": "'firebase-admin',"
    },
    {
      "file": "./next.config.js",
      "line": 60,
      "service": "storage",
      "content": "'@azure/storage-blob': 'commonjs @azure/storage-blob',"
    },
    {
      "file": "./tests/community-interview-flow.manual.js",
      "line": 33,
      "service": "storage",
      "content": "// Test 2: Simulate localStorage storage"
    },
    {
      "file": "./tests/community-interview-flow.manual.js",
      "line": 34,
      "service": "storage",
      "content": "console.log('🧪 Test 2: LocalStorage Persistence');"
    },
    {
      "file": "./tests/community-interview-flow.manual.js",
      "line": 35,
      "service": "storage",
      "content": "const testLocalStorage = () => {"
    },
    {
      "file": "./tests/community-interview-flow.manual.js",
      "line": 37,
      "service": "storage",
      "content": "const mockLocalStorage = {"
    },
    {
      "file": "./tests/community-interview-flow.manual.js",
      "line": 38,
      "service": "storage",
      "content": "storage: new Map(),"
    },
    {
      "file": "./tests/community-interview-flow.manual.js",
      "line": 40,
      "service": "storage",
      "content": "return this.storage.get(key) || null;"
    },
    {
      "file": "./tests/community-interview-flow.manual.js",
      "line": 43,
      "service": "storage",
      "content": "this.storage.set(key, value);"
    },
    {
      "file": "./tests/community-interview-flow.manual.js",
      "line": 46,
      "service": "storage",
      "content": "this.storage.delete(key);"
    },
    {
      "file": "./tests/community-interview-flow.manual.js",
      "line": 50,
      "service": "storage",
      "content": "// Test storage functionality"
    },
    {
      "file": "./tests/community-interview-flow.manual.js",
      "line": 51,
      "service": "storage",
      "content": "const storageKey = 'communityMockInterviewSelection';"
    },
    {
      "file": "./tests/community-interview-flow.manual.js",
      "line": 57,
      "service": "storage",
      "content": "mockLocalStorage.setItem(storageKey, JSON.stringify(dataToStore));"
    },
    {
      "file": "./tests/community-interview-flow.manual.js",
      "line": 58,
      "service": "storage",
      "content": "const retrieved = JSON.parse(mockLocalStorage.getItem(storageKey));"
    },
    {
      "file": "./tests/community-interview-flow.manual.js",
      "line": 67,
      "service": "storage",
      "content": "testLocalStorage();"
    },
    {
      "file": "./tests/community-interview-flow.manual.js",
      "line": 68,
      "service": "storage",
      "content": "console.log('✅ LocalStorage test passed\\n');"
    },
    {
      "file": "./tests/community-interview-flow.manual.js",
      "line": 73,
      "service": "firestore",
      "content": "const simulateDataResolution = (urlParams, localStorageData, firestoreData) => {"
    },
    {
      "file": "./tests/community-interview-flow.manual.js",
      "line": 83,
      "service": "storage",
      "content": "// Priority 2: localStorage (recent data)"
    },
    {
      "file": "./tests/community-interview-flow.manual.js",
      "line": 84,
      "service": "storage",
      "content": "if (localStorageData && localStorageData.id) {"
    },
    {
      "file": "./tests/community-interview-flow.manual.js",
      "line": 85,
      "service": "storage",
      "content": "const isStale = Date.now() - localStorageData.timestamp > 24 * 60 * 60 * 1000;"
    },
    {
      "file": "./tests/community-interview-flow.manual.js",
      "line": 87,
      "service": "storage",
      "content": "console.log('🎯 Using localStorage (Priority 2)');"
    },
    {
      "file": "./tests/community-interview-flow.manual.js",
      "line": 89,
      "service": "storage",
      "content": "source: 'localStorage',"
    },
    {
      "file": "./tests/community-interview-flow.manual.js",
      "line": 90,
      "service": "storage",
      "content": "data: localStorageData"
    },
    {
      "file": "./tests/community-interview-flow.manual.js",
      "line": 95,
      "service": "firestore",
      "content": "// Priority 3: Firestore data"
    },
    {
      "file": "./tests/community-interview-flow.manual.js",
      "line": 96,
      "service": "firestore",
      "content": "if (firestoreData && firestoreData.id) {"
    },
    {
      "file": "./tests/community-interview-flow.manual.js",
      "line": 97,
      "service": "firestore",
      "content": "console.log('🎯 Using Firestore (Priority 3)');"
    },
    {
      "file": "./tests/community-interview-flow.manual.js",
      "line": 99,
      "service": "firestore",
      "content": "source: 'firestore',"
    },
    {
      "file": "./tests/community-interview-flow.manual.js",
      "line": 100,
      "service": "firestore",
      "content": "data: firestoreData"
    },
    {
      "file": "./tests/community-interview-flow.manual.js",
      "line": 120,
      "service": "storage",
      "content": "console.log('\\nScenario 2: Only localStorage available');"
    },
    {
      "file": "./tests/community-interview-flow.manual.js",
      "line": 128,
      "service": "firestore",
      "content": "console.log('\\nScenario 3: Only Firestore available');"
    },
    {
      "file": "./tests/community-interview-flow.manual.js",
      "line": 131,
      "service": "storage",
      "content": "null, // No localStorage"
    },
    {
      "file": "./tests/community-interview-flow.manual.js",
      "line": 175,
      "service": "storage",
      "content": "console.log('1. Clicking community interview card stores data in localStorage');"
    },
    {
      "file": "./tests/community-interview-flow.manual.js",
      "line": 177,
      "service": "firestore",
      "content": "console.log('3. Community interview page resolves data from URL → localStorage → Firestore');"
    },
    {
      "file": "./tests/integration/resume-tailor-parity.js",
      "line": 108,
      "service": "auth",
      "content": "console.log('\\n💡 Note: Authentication required. This test requires a valid session.');"
    },
    {
      "file": "./tests/integration/resume-tailor-parity.js",
      "line": 109,
      "service": "auth",
      "content": "console.log('   To test manually, use the web interface or provide valid authentication.');"
    },
    {
      "file": "./tests/integration/staging-functions.spec.ts",
      "line": 5,
      "service": "firestore",
      "content": "const FIREBASE_EMULATOR_HOST = process.env.FIRESTORE_EMULATOR_HOST || 'localhost:8080';"
    },
    {
      "file": "./tests/integration/staging-functions.spec.ts",
      "line": 9,
      "service": "firestore",
      "content": "// Setup test data in Firestore emulator"
    },
    {
      "file": "./tests/integration/staging-functions.spec.ts",
      "line": 20,
      "service": "auth",
      "content": "// Mock authentication for testing"
    },
    {
      "file": "./tests/integration/staging-functions.spec.ts",
      "line": 22,
      "service": "storage",
      "content": "window.localStorage.setItem('test_user', JSON.stringify({"
    },
    {
      "file": "./tests/integration/staging-functions.spec.ts",
      "line": 62,
      "service": "firestore",
      "content": "// Verify data is stored in Firestore emulator"
    },
    {
      "file": "./tests/integration/staging-functions.spec.ts",
      "line": 64,
      "service": "firestore",
      "content": "`http://${FIREBASE_EMULATOR_HOST}/emulator/v1/projects/test-project/databases/(default)/documents/interviews`,"
    },
    {
      "file": "./tests/integration/staging-functions.spec.ts",
      "line": 67,
      "service": "auth",
      "content": "'Authorization': 'Bearer test-token',"
    },
    {
      "file": "./tests/integration/staging-functions.spec.ts",
      "line": 80,
      "service": "storage",
      "content": "window.localStorage.setItem('test_user', JSON.stringify({"
    },
    {
      "file": "./tests/integration/staging-functions.spec.ts",
      "line": 103,
      "service": "storage",
      "content": "window.localStorage.setItem('test_user', JSON.stringify({"
    },
    {
      "file": "./tests/integration/staging-functions.spec.ts",
      "line": 133,
      "service": "firestore",
      "content": "// Verify data is stored in Firestore emulator"
    },
    {
      "file": "./tests/integration/staging-functions.spec.ts",
      "line": 135,
      "service": "firestore",
      "content": "`http://${FIREBASE_EMULATOR_HOST}/emulator/v1/projects/test-project/databases/(default)/documents/resumes`,"
    },
    {
      "file": "./tests/integration/staging-functions.spec.ts",
      "line": 138,
      "service": "auth",
      "content": "'Authorization': 'Bearer test-token',"
    },
    {
      "file": "./tests/integration/staging-functions.spec.ts",
      "line": 150,
      "service": "storage",
      "content": "window.localStorage.setItem('test_user', JSON.stringify({"
    },
    {
      "file": "./tests/integration/staging-functions.spec.ts",
      "line": 182,
      "service": "storage",
      "content": "window.localStorage.setItem('test_user', JSON.stringify({"
    },
    {
      "file": "./tests/integration/staging-functions.spec.ts",
      "line": 221,
      "service": "storage",
      "content": "window.localStorage.setItem('test_user', JSON.stringify({"
    },
    {
      "file": "./tests/integration/staging-functions.spec.ts",
      "line": 255,
      "service": "auth",
      "content": "'Authorization': 'Bearer test-token'"
    },
    {
      "file": "./tests/integration/staging-functions.spec.ts",
      "line": 271,
      "service": "auth",
      "content": "test('should validate API authentication', async ({ request }) => {"
    },
    {
      "file": "./tests/integration/staging-functions.spec.ts",
      "line": 272,
      "service": "auth",
      "content": "// Test without authentication"
    },
    {
      "file": "./tests/integration/staging-functions.spec.ts",
      "line": 290,
      "service": "auth",
      "content": "'Authorization': 'Bearer test-token'"
    },
    {
      "file": "./tests/integration/staging-functions.spec.ts",
      "line": 301,
      "service": "firestore",
      "content": "test('should respect Firestore security rules', async ({ request }) => {"
    },
    {
      "file": "./tests/integration/staging-functions.spec.ts",
      "line": 307,
      "service": "auth",
      "content": "'Authorization': 'Bearer different-user-token'"
    },
    {
      "file": "./tests/integration/staging-functions.spec.ts",
      "line": 315,
      "service": "firestore",
      "content": "test('should handle Firestore connection issues', async ({ page }) => {"
    },
    {
      "file": "./tests/integration/staging-functions.spec.ts",
      "line": 316,
      "service": "firestore",
      "content": "// Simulate Firestore connection issue by intercepting requests"
    },
    {
      "file": "./tests/integration/staging-functions.spec.ts",
      "line": 317,
      "service": "firestore",
      "content": "await page.route('**/firestore.googleapis.com/**', route => {"
    },
    {
      "file": "./tests/integration/staging-functions.spec.ts",
      "line": 322,
      "service": "storage",
      "content": "window.localStorage.setItem('test_user', JSON.stringify({"
    },
    {
      "file": "./tests/integration/staging-functions.spec.ts",
      "line": 348,
      "service": "storage",
      "content": "window.localStorage.setItem('test_user', JSON.stringify({"
    },
    {
      "file": "./tests/resume-tailor-endpoint.test.ts",
      "line": 30,
      "service": "auth",
      "content": "const expectedAuthError = {"
    },
    {
      "file": "./tests/resume-tailor-endpoint.test.ts",
      "line": 31,
      "service": "auth",
      "content": "error: 'Authentication required'"
    },
    {
      "file": "./tests/resume-tailor-endpoint.test.ts",
      "line": 45,
      "service": "auth",
      "content": "expect(expectedAuthError).toHaveProperty('error');"
    },
    {
      "file": "./tests/resume-tailor-endpoint.test.ts",
      "line": 52,
      "service": "auth",
      "content": "AUTHENTICATION_REQUIRED: 401,"
    },
    {
      "file": "./tests/global-setup.ts",
      "line": 11,
      "service": "firestore",
      "content": "process.env.FIRESTORE_EMULATOR_HOST = 'localhost:8080';"
    },
    {
      "file": "./tests/global-setup.ts",
      "line": 12,
      "service": "auth",
      "content": "process.env.FIREBASE_AUTH_EMULATOR_HOST = 'localhost:9099';"
    },
    {
      "file": "./tests/global-setup.ts",
      "line": 13,
      "service": "storage",
      "content": "process.env.FIREBASE_STORAGE_EMULATOR_HOST = 'localhost:9199';"
    },
    {
      "file": "./tests/global-setup.ts",
      "line": 19,
      "service": "auth",
      "content": "execSync('firebase emulators:start --only firestore,auth,storage --import=./tests/fixtures/emulator-data --export-on-exit=./tests/fixtures/emulator-data &', {"
    },
    {
      "file": "./tests/load/queue-throughput.js",
      "line": 47,
      "service": "firestore",
      "content": "const FIRESTORE_EMULATOR = __ENV.FIRESTORE_EMULATOR_HOST || 'localhost:8080';"
    },
    {
      "file": "./tests/load/queue-throughput.js",
      "line": 92,
      "service": "auth",
      "content": "// Generate authentication token for testing"
    },
    {
      "file": "./tests/load/queue-throughput.js",
      "line": 95,
      "service": "auth",
      "content": "// In real implementation, this would call your auth service"
    },
    {
      "file": "./tests/load/queue-throughput.js",
      "line": 114,
      "service": "auth",
      "content": "'Authorization': token,"
    },
    {
      "file": "./tests/load/queue-throughput.js",
      "line": 171,
      "service": "auth",
      "content": "'Authorization': token,"
    },
    {
      "file": "./tests/load/queue-throughput.js",
      "line": 222,
      "service": "auth",
      "content": "'Authorization': token,"
    },
    {
      "file": "./tests/load/queue-throughput.js",
      "line": 284,
      "service": "auth",
      "content": "'Authorization': getTestToken(),"
    },
    {
      "file": "./tests/load/queue-throughput.js",
      "line": 310,
      "service": "auth",
      "content": "'Authorization': getTestToken(),"
    },
    {
      "file": "./tests/load/queue-throughput.js",
      "line": 385,
      "service": "auth",
      "content": "'Authorization': getTestToken('admin'),"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 5,
      "service": "firestore",
      "content": "describe('Firestore Security Rules', () => {"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 10,
      "service": "firestore",
      "content": "const rulesPath = resolve(__dirname, '../firestore.rules');"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 15,
      "service": "firestore",
      "content": "firestore: {"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 30,
      "service": "firestore",
      "content": "await testEnv.clearFirestore();"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 36,
      "service": "auth",
      "content": "const context = testEnv.authenticatedContext(userId);"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 37,
      "service": "firestore",
      "content": "const userDoc = context.firestore().doc(`users/${userId}`);"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 52,
      "service": "auth",
      "content": "const context1 = testEnv.authenticatedContext(userId1);"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 53,
      "service": "auth",
      "content": "const context2 = testEnv.authenticatedContext(userId2);"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 56,
      "service": "firestore",
      "content": "const user1Doc = context1.firestore().doc(`users/${userId1}`);"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 63,
      "service": "firestore",
      "content": "const user1DocAsUser2 = context2.firestore().doc(`users/${userId1}`);"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 67,
      "service": "auth",
      "content": "it('should deny unauthenticated access to user documents', async () => {"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 68,
      "service": "auth",
      "content": "const context = testEnv.unauthenticatedContext();"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 69,
      "service": "firestore",
      "content": "const userDoc = context.firestore().doc('users/test-user');"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 78,
      "service": "auth",
      "content": "const context = testEnv.authenticatedContext(userId);"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 79,
      "service": "firestore",
      "content": "const interviewDoc = context.firestore().doc('interviews/interview-1');"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 94,
      "service": "auth",
      "content": "const context = testEnv.authenticatedContext(userId);"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 95,
      "service": "firestore",
      "content": "const interviewDoc = context.firestore().doc('interviews/interview-1');"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 109,
      "service": "auth",
      "content": "const context = testEnv.authenticatedContext(userId);"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 110,
      "service": "firestore",
      "content": "const interviewDoc = context.firestore().doc('interviews/interview-1');"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 124,
      "service": "auth",
      "content": "it('should allow authenticated users to read finalized interviews', async () => {"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 128,
      "service": "auth",
      "content": "const context1 = testEnv.authenticatedContext(userId1);"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 129,
      "service": "auth",
      "content": "const context2 = testEnv.authenticatedContext(userId2);"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 132,
      "service": "firestore",
      "content": "const interviewDoc = context1.firestore().doc('interviews/interview-1');"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 143,
      "service": "firestore",
      "content": "const interviewDocAsUser2 = context2.firestore().doc('interviews/interview-1');"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 151,
      "service": "auth",
      "content": "const context1 = testEnv.authenticatedContext(userId1);"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 152,
      "service": "auth",
      "content": "const context2 = testEnv.authenticatedContext(userId2);"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 155,
      "service": "firestore",
      "content": "const interviewDoc = context1.firestore().doc('interviews/interview-1');"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 166,
      "service": "firestore",
      "content": "const interviewDocAsUser2 = context2.firestore().doc('interviews/interview-1');"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 174,
      "service": "auth",
      "content": "const context = testEnv.authenticatedContext(userId);"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 175,
      "service": "firestore",
      "content": "const usageDoc = context.firestore().doc(`usage/${userId}`);"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 190,
      "service": "auth",
      "content": "const context1 = testEnv.authenticatedContext(userId1);"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 191,
      "service": "auth",
      "content": "const context2 = testEnv.authenticatedContext(userId2);"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 194,
      "service": "firestore",
      "content": "const usage1Doc = context1.firestore().doc(`usage/${userId1}`);"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 202,
      "service": "firestore",
      "content": "const usage1DocAsUser2 = context2.firestore().doc(`usage/${userId1}`);"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 210,
      "service": "auth",
      "content": "const context = testEnv.authenticatedContext(userId);"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 211,
      "service": "firestore",
      "content": "const applicationDoc = context.firestore().doc('applications/app-1');"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 224,
      "service": "auth",
      "content": "const context = testEnv.authenticatedContext(userId);"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 225,
      "service": "firestore",
      "content": "const applicationDoc = context.firestore().doc('applications/app-1');"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 239,
      "service": "auth",
      "content": "const context = testEnv.authenticatedContext(userId);"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 240,
      "service": "firestore",
      "content": "const eventDoc = context.firestore().doc('subscription_events/event-1');"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 253,
      "service": "auth",
      "content": "it('should deny unauthenticated access to subscription events', async () => {"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 254,
      "service": "auth",
      "content": "const context = testEnv.unauthenticatedContext();"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 255,
      "service": "firestore",
      "content": "const eventDoc = context.firestore().doc('subscription_events/event-1');"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 221,
      "service": "auth",
      "content": "describe('Security and Authentication', () => {"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 233,
      "service": "auth",
      "content": "it('should use proper authentication headers', async () => {"
    },
    {
      "file": "./tests/azure-services-health.test.ts",
      "line": 242,
      "service": "auth",
      "content": "console.log('✅ Authentication keys are properly configured');"
    },
    {
      "file": "./tests/api/resume/tailor/simple.test.js",
      "line": 38,
      "service": "auth",
      "content": "expect(data.error).toBe('Authentication required');"
    },
    {
      "file": "./tests/api/resume/tailor/api.test.ts",
      "line": 30,
      "service": "auth",
      "content": "describe('Authentication', () => {"
    },
    {
      "file": "./tests/api/resume/tailor/api.test.ts",
      "line": 37,
      "service": "auth",
      "content": "expect(responseBody).toEqual({ error: 'Authentication required' });"
    },
    {
      "file": "./tests/api/resume/tailor/api.test.ts",
      "line": 208,
      "service": "auth",
      "content": "it('should handle authentication errors (401)', async () => {"
    },
    {
      "file": "./tests/api/resume/tailor/api.test.ts",
      "line": 209,
      "service": "auth",
      "content": "const authError = new Error('Authentication failed');"
    },
    {
      "file": "./tests/api/resume/tailor/api.test.ts",
      "line": 210,
      "service": "auth",
      "content": "authError.status = 401;"
    },
    {
      "file": "./tests/api/resume/tailor/api.test.ts",
      "line": 213,
      "service": "auth",
      "content": "mockAzureOpenAIService.tailorResume.mockRejectedValue(authError);"
    },
    {
      "file": "./tests/api/resume/tailor/api.test.ts",
      "line": 225,
      "service": "auth",
      "content": "error: 'Authentication failed with Azure OpenAI service.',"
    },
    {
      "file": "./tests/e2e/resume-url-extraction.test.ts",
      "line": 7,
      "service": "auth",
      "content": "* 3. Authentication enforcement (401 for unauthenticated requests)"
    },
    {
      "file": "./tests/e2e/resume-url-extraction.test.ts",
      "line": 15,
      "service": "admin",
      "content": "jest.mock('firebase-admin', () => ({"
    },
    {
      "file": "./tests/e2e/resume-url-extraction.test.ts",
      "line": 17,
      "service": "auth",
      "content": "auth: () => ({"
    },
    {
      "file": "./tests/e2e/resume-url-extraction.test.ts",
      "line": 21,
      "service": "auth",
      "content": "auth: () => ({"
    },
    {
      "file": "./tests/e2e/resume-url-extraction.test.ts",
      "line": 95,
      "service": "auth",
      "content": "// Mock successful authentication by default"
    },
    {
      "file": "./tests/e2e/resume-url-extraction.test.ts",
      "line": 96,
      "service": "admin",
      "content": "const mockFirebaseAdmin = require('firebase-admin');"
    },
    {
      "file": "./tests/e2e/resume-url-extraction.test.ts",
      "line": 97,
      "service": "auth",
      "content": "mockFirebaseAdmin.auth().verifyIdToken.mockResolvedValue({"
    },
    {
      "file": "./tests/e2e/resume-url-extraction.test.ts",
      "line": 313,
      "service": "auth",
      "content": "describe('3. Authentication Tests', () => {"
    },
    {
      "file": "./tests/e2e/resume-url-extraction.test.ts",
      "line": 326,
      "service": "auth",
      "content": "expect(data.error).toContain('Authentication required');"
    },
    {
      "file": "./tests/e2e/resume-url-extraction.test.ts",
      "line": 330,
      "service": "admin",
      "content": "const mockFirebaseAdmin = require('firebase-admin');"
    },
    {
      "file": "./tests/e2e/resume-url-extraction.test.ts",
      "line": 331,
      "service": "auth",
      "content": "mockFirebaseAdmin.auth().verifyIdToken.mockRejectedValueOnce(new Error('Invalid token'));"
    },
    {
      "file": "./tests/e2e/resume-url-extraction.test.ts",
      "line": 347,
      "service": "auth",
      "content": "test('should return 401 for unauthenticated resume tailoring requests', async () => {"
    },
    {
      "file": "./tests/e2e/resume-url-extraction.test.ts",
      "line": 361,
      "service": "auth",
      "content": "expect(data.error).toContain('Authentication required');"
    },
    {
      "file": "./debug-auth.js",
      "line": 8,
      "service": "auth",
      "content": "const middlewarePath = path.join(__dirname, 'lib', 'middleware', 'authMiddleware.ts');"
    },
    {
      "file": "./debug-auth-flow.js",
      "line": 4,
      "service": "auth",
      "content": "* Debug script to test authentication flow and identify redirect issues"
    },
    {
      "file": "./debug-auth-flow.js",
      "line": 9,
      "service": "auth",
      "content": "async function debugAuthFlow() {"
    },
    {
      "file": "./debug-auth-flow.js",
      "line": 10,
      "service": "auth",
      "content": "console.log('🔍 Debugging authentication flow...\\n');"
    },
    {
      "file": "./debug-auth-flow.js",
      "line": 13,
      "service": "auth",
      "content": "console.log('=== Step 1: Check current authentication state ===');"
    },
    {
      "file": "./debug-auth-flow.js",
      "line": 15,
      "service": "auth",
      "content": "// Test if we can access dashboard without auth (should redirect)"
    },
    {
      "file": "./debug-auth-flow.js",
      "line": 16,
      "service": "auth",
      "content": "console.log('Testing dashboard access without authentication...');"
    },
    {
      "file": "./debug-auth-flow.js",
      "line": 34,
      "service": "auth",
      "content": "authDomain: config.authDomain,"
    },
    {
      "file": "./debug-auth-flow.js",
      "line": 38,
      "service": "auth",
      "content": "console.log('\\n=== Step 4: Test auth API endpoints ===');"
    },
    {
      "file": "./debug-auth-flow.js",
      "line": 41,
      "service": "auth",
      "content": "const signInTest = await fetch(`${baseUrl}/api/auth/signin`, {"
    },
    {
      "file": "./debug-auth-flow.js",
      "line": 47,
      "service": "auth",
      "content": "const signUpTest = await fetch(`${baseUrl}/api/auth/signup`, {"
    },
    {
      "file": "./debug-auth-flow.js",
      "line": 62,
      "service": "auth",
      "content": "console.log('\\n=== Authentication Flow Analysis ===');"
    },
    {
      "file": "./debug-auth-flow.js",
      "line": 63,
      "service": "auth",
      "content": "console.log('✅ Dashboard correctly redirects unauthenticated users');"
    },
    {
      "file": "./debug-auth-flow.js",
      "line": 66,
      "service": "auth",
      "content": "console.log('✅ Auth API endpoints are responding');"
    },
    {
      "file": "./debug-auth-flow.js",
      "line": 74,
      "service": "auth",
      "content": "console.log('   - \"Firebase auth successful, user: [uid]\"');"
    },
    {
      "file": "./debug-auth-flow.js",
      "line": 85,
      "service": "auth",
      "content": "debugAuthFlow();"
    },
    {
      "file": "./portals/linkedin.ts",
      "line": 81,
      "service": "auth",
      "content": "throw new Error('LinkedIn Azure AD configuration not found. Please configure OAuth app first.');"
    },
    {
      "file": "./portals/linkedin.ts",
      "line": 86,
      "service": "auth",
      "content": "* Generate OAuth authorization URL for LinkedIn"
    },
    {
      "file": "./portals/linkedin.ts",
      "line": 88,
      "service": "auth",
      "content": "generateAuthUrl(userId: string, state?: string): string {"
    },
    {
      "file": "./portals/linkedin.ts",
      "line": 101,
      "service": "auth",
      "content": "return `https://www.linkedin.com/oauth/v2/authorization?${params.toString()}`;"
    },
    {
      "file": "./portals/linkedin.ts",
      "line": 105,
      "service": "auth",
      "content": "* Exchange authorization code for access token"
    },
    {
      "file": "./portals/linkedin.ts",
      "line": 113,
      "service": "auth",
      "content": "const response = await fetch('https://www.linkedin.com/oauth/v2/accessToken', {"
    },
    {
      "file": "./portals/linkedin.ts",
      "line": 119,
      "service": "auth",
      "content": "grant_type: 'authorization_code',"
    },
    {
      "file": "./portals/linkedin.ts",
      "line": 150,
      "service": "auth",
      "content": "* Get authenticated user profile"
    },
    {
      "file": "./portals/linkedin.ts",
      "line": 166,
      "service": "auth",
      "content": "'Authorization': `Bearer ${accessToken}`,"
    },
    {
      "file": "./portals/linkedin.ts",
      "line": 220,
      "service": "auth",
      "content": "'Authorization': `Bearer ${accessToken}`,"
    },
    {
      "file": "./portals/linkedin.ts",
      "line": 277,
      "service": "auth",
      "content": "'Authorization': `Bearer ${accessToken}`,"
    },
    {
      "file": "./portals/linkedin.ts",
      "line": 319,
      "service": "auth",
      "content": "'Authorization': `Bearer ${accessToken}`,"
    },
    {
      "file": "./portals/wellfound.ts",
      "line": 87,
      "service": "auth",
      "content": "// 1000 requests per hour per authenticated user"
    },
    {
      "file": "./portals/wellfound.ts",
      "line": 103,
      "service": "auth",
      "content": "throw new Error('Wellfound Azure AD configuration not found. Please configure OAuth app first.');"
    },
    {
      "file": "./portals/wellfound.ts",
      "line": 108,
      "service": "auth",
      "content": "* Generate OAuth authorization URL for Wellfound"
    },
    {
      "file": "./portals/wellfound.ts",
      "line": 110,
      "service": "auth",
      "content": "generateAuthUrl(userId: string, state?: string): string {"
    },
    {
      "file": "./portals/wellfound.ts",
      "line": 123,
      "service": "auth",
      "content": "return `https://angel.co/api/oauth/authorize?${params.toString()}`;"
    },
    {
      "file": "./portals/wellfound.ts",
      "line": 127,
      "service": "auth",
      "content": "* Exchange authorization code for access token"
    },
    {
      "file": "./portals/wellfound.ts",
      "line": 135,
      "service": "auth",
      "content": "const response = await fetch('https://angel.co/api/oauth/token', {"
    },
    {
      "file": "./portals/wellfound.ts",
      "line": 141,
      "service": "auth",
      "content": "grant_type: 'authorization_code',"
    },
    {
      "file": "./portals/wellfound.ts",
      "line": 172,
      "service": "auth",
      "content": "* Get authenticated user profile"
    },
    {
      "file": "./portals/wellfound.ts",
      "line": 188,
      "service": "auth",
      "content": "'Authorization': `Bearer ${accessToken}`,"
    },
    {
      "file": "./portals/wellfound.ts",
      "line": 241,
      "service": "auth",
      "content": "'Authorization': `Bearer ${accessToken}`,"
    },
    {
      "file": "./portals/wellfound.ts",
      "line": 280,
      "service": "auth",
      "content": "'Authorization': `Bearer ${accessToken}`,"
    },
    {
      "file": "./portals/wellfound.ts",
      "line": 323,
      "service": "auth",
      "content": "'Authorization': `Bearer ${accessToken}`,"
    },
    {
      "file": "./portals/wellfound.ts",
      "line": 358,
      "service": "auth",
      "content": "'Authorization': `Bearer ${accessToken}`,"
    },
    {
      "file": "./portals/wellfound.ts",
      "line": 499,
      "service": "auth",
      "content": "'Authorization': `Bearer ${accessToken}`,"
    },
    {
      "file": "./portals/wellfound.ts",
      "line": 533,
      "service": "auth",
      "content": "'Authorization': `Bearer ${accessToken}`,"
    },
    {
      "file": "./components/InterviewCardClient.tsx",
      "line": 11,
      "service": "auth",
      "content": "import { useAuth } from \"@/contexts/AuthContext\";"
    },
    {
      "file": "./components/InterviewCardClient.tsx",
      "line": 12,
      "service": "storage",
      "content": "import { setCommunityInterviewInStorage } from \"@/lib/utils/communityInterviewStorage\";"
    },
    {
      "file": "./components/InterviewCardClient.tsx",
      "line": 39,
      "service": "auth",
      "content": "const { user } = useAuth();"
    },
    {
      "file": "./components/InterviewCardClient.tsx",
      "line": 62,
      "service": "storage",
      "content": "// Store community interview data in localStorage for persistence"
    },
    {
      "file": "./components/InterviewCardClient.tsx",
      "line": 63,
      "service": "storage",
      "content": "setCommunityInterviewInStorage({"
    },
    {
      "file": "./components/ui/alert.tsx",
      "line": 2,
      "service": "auth",
      "content": "import { cva, type VariantProps } from \"class-variance-authority\""
    },
    {
      "file": "./components/ui/floating-navbar/floating-navbar.tsx",
      "line": 10,
      "service": "auth",
      "content": "import { useAuth } from '@/contexts/AuthContext';"
    },
    {
      "file": "./components/ui/floating-navbar/floating-navbar.tsx",
      "line": 30,
      "service": "auth",
      "content": "const { user, loading } = useAuth();"
    },
    {
      "file": "./components/ui/floating-navbar/floating-navbar.tsx",
      "line": 91,
      "service": "auth",
      "content": "{/* Placeholder for auth button */}"
    },
    {
      "file": "./components/ui/badge.tsx",
      "line": 2,
      "service": "auth",
      "content": "import { cva, type VariantProps } from \"class-variance-authority\""
    },
    {
      "file": "./components/ui/sidebar.tsx",
      "line": 5,
      "service": "auth",
      "content": "import { cva, VariantProps } from \"class-variance-authority\""
    },
    {
      "file": "./components/ui/button.tsx",
      "line": 3,
      "service": "auth",
      "content": "import { cva, type VariantProps } from \"class-variance-authority\""
    },
    {
      "file": "./components/ResumeProcessingStatus.tsx",
      "line": 9,
      "service": "firestore",
      "content": "import { useRealtimeApplicationStatus } from \"@/lib/hooks/useRealtimeFirestore\";"
    },
    {
      "file": "./components/AuthSync.tsx",
      "line": 4,
      "service": "auth",
      "content": "import { signInWithCustomToken } from 'firebase/auth';"
    },
    {
      "file": "./components/AuthSync.tsx",
      "line": 5,
      "service": "auth",
      "content": "import { auth } from '@/firebase/client';"
    },
    {
      "file": "./components/AuthSync.tsx",
      "line": 6,
      "service": "auth",
      "content": "import { useAuth } from '@/contexts/AuthContext';"
    },
    {
      "file": "./components/AuthSync.tsx",
      "line": 7,
      "service": "auth",
      "content": "import { debugFirebaseAuth } from '@/lib/utils/firebase-auth-debug';"
    },
    {
      "file": "./components/AuthSync.tsx",
      "line": 9,
      "service": "auth",
      "content": "export function AuthSync() {"
    },
    {
      "file": "./components/AuthSync.tsx",
      "line": 10,
      "service": "auth",
      "content": "const { user } = useAuth();"
    },
    {
      "file": "./components/AuthSync.tsx",
      "line": 13,
      "service": "auth",
      "content": "async function syncAuth() {"
    },
    {
      "file": "./components/AuthSync.tsx",
      "line": 16,
      "service": "auth",
      "content": "console.log('=== Auth Sync Debug ===');"
    },
    {
      "file": "./components/AuthSync.tsx",
      "line": 18,
      "service": "auth",
      "content": "console.log('Firebase current user:', auth.currentUser);"
    },
    {
      "file": "./components/AuthSync.tsx",
      "line": 20,
      "service": "auth",
      "content": "debugFirebaseAuth();"
    },
    {
      "file": "./components/AuthSync.tsx",
      "line": 24,
      "service": "auth",
      "content": "// there's an authentication mismatch"
    },
    {
      "file": "./components/AuthSync.tsx",
      "line": 25,
      "service": "auth",
      "content": "if (user && !auth.currentUser) {"
    },
    {
      "file": "./components/AuthSync.tsx",
      "line": 26,
      "service": "auth",
      "content": "console.warn('Authentication mismatch detected: Server has user but Firebase client does not');"
    },
    {
      "file": "./components/AuthSync.tsx",
      "line": 27,
      "service": "firestore",
      "content": "console.warn('This may cause Firestore permission errors');"
    },
    {
      "file": "./components/AuthSync.tsx",
      "line": 30,
      "service": "auth",
      "content": "// Try to get a fresh token from the server to sync Firebase auth"
    },
    {
      "file": "./components/AuthSync.tsx",
      "line": 32,
      "service": "auth",
      "content": "const response = await fetch('/api/auth/sync-firebase');"
    },
    {
      "file": "./components/AuthSync.tsx",
      "line": 36,
      "service": "auth",
      "content": "await signInWithCustomToken(auth, customToken);"
    },
    {
      "file": "./components/AuthSync.tsx",
      "line": 37,
      "service": "auth",
      "content": "console.log('Successfully synced Firebase authentication');"
    },
    {
      "file": "./components/AuthSync.tsx",
      "line": 41,
      "service": "auth",
      "content": "console.error('Failed to sync Firebase authentication:', error);"
    },
    {
      "file": "./components/AuthSync.tsx",
      "line": 46,
      "service": "auth",
      "content": "// Run auth sync after a short delay to allow Firebase to initialize"
    },
    {
      "file": "./components/AuthSync.tsx",
      "line": 47,
      "service": "auth",
      "content": "const timer = setTimeout(syncAuth, 1000);"
    },
    {
      "file": "./components/UserProfile.tsx",
      "line": 3,
      "service": "auth",
      "content": "import { useAuth } from \"@/contexts/AuthContext\";"
    },
    {
      "file": "./components/UserProfile.tsx",
      "line": 8,
      "service": "auth",
      "content": "* Example component demonstrating how to use the useAuth context"
    },
    {
      "file": "./components/UserProfile.tsx",
      "line": 9,
      "service": "auth",
      "content": "* This component can be used anywhere within the AuthProvider tree"
    },
    {
      "file": "./components/UserProfile.tsx",
      "line": 13,
      "service": "auth",
      "content": "const { user, isAuthenticated, loading } = useAuth();"
    },
    {
      "file": "./components/UserProfile.tsx",
      "line": 28,
      "service": "auth",
      "content": "// Not authenticated"
    },
    {
      "file": "./components/UserProfile.tsx",
      "line": 29,
      "service": "auth",
      "content": "if (!isAuthenticated || !user) {"
    },
    {
      "file": "./components/UserProfile.tsx",
      "line": 37,
      "service": "auth",
      "content": "// Authenticated user"
    },
    {
      "file": "./components/GoogleSignInButton.tsx",
      "line": 3,
      "service": "auth",
      "content": "import { auth } from \"@/firebase/client\";"
    },
    {
      "file": "./components/GoogleSignInButton.tsx",
      "line": 4,
      "service": "auth",
      "content": "import { signInWithPopup } from \"firebase/auth\";"
    },
    {
      "file": "./components/GoogleSignInButton.tsx",
      "line": 45,
      "service": "auth",
      "content": "const result = await signInWithPopup(auth, googleProvider);"
    },
    {
      "file": "./components/GoogleSignInButton.tsx",
      "line": 47,
      "service": "auth",
      "content": "console.log('Firebase auth successful, user:', user.uid);"
    },
    {
      "file": "./components/GoogleSignInButton.tsx",
      "line": 61,
      "service": "auth",
      "content": "const signInResponse = await fetch('/api/auth/signin', {"
    },
    {
      "file": "./components/GoogleSignInButton.tsx",
      "line": 86,
      "service": "auth",
      "content": "const createUserResponse = await fetch('/api/auth/signup', {"
    },
    {
      "file": "./components/GoogleSignInButton.tsx",
      "line": 110,
      "service": "auth",
      "content": "const retrySignIn = await fetch('/api/auth/signin', {"
    },
    {
      "file": "./components/GoogleSignInButton.tsx",
      "line": 142,
      "service": "auth",
      "content": "console.error('Authentication error:', error);"
    },
    {
      "file": "./components/providers/TelemetryProvider.tsx",
      "line": 5,
      "service": "auth",
      "content": "import { useAuth } from '@/contexts/AuthContext';"
    },
    {
      "file": "./components/providers/TelemetryProvider.tsx",
      "line": 30,
      "service": "auth",
      "content": "const { user } = useAuth();"
    },
    {
      "file": "./components/ProfileForm.tsx",
      "line": 10,
      "service": "auth",
      "content": "import { auth } from \"@/firebase/client\";"
    },
    {
      "file": "./components/ProfileForm.tsx",
      "line": 81,
      "service": "auth",
      "content": "const response = await fetch('/api/auth/resend-verification', {"
    },
    {
      "file": "./components/ProfileForm.tsx",
      "line": 121,
      "service": "auth",
      "content": "const currentUser = auth.currentUser;"
    },
    {
      "file": "./components/ProfileForm.tsx",
      "line": 123,
      "service": "auth",
      "content": "throw new Error(\"User not authenticated\");"
    },
    {
      "file": "./components/ProfileForm.tsx",
      "line": 128,
      "service": "auth",
      "content": "toast.error(\"Authentication Error\", {"
    },
    {
      "file": "./components/ProfileForm.tsx",
      "line": 206,
      "service": "auth",
      "content": "await fetch('/api/auth/signout', { method: 'POST' });"
    },
    {
      "file": "./components/AuthForm.tsx",
      "line": 7,
      "service": "auth",
      "content": "import { auth } from \"@/firebase/client\";"
    },
    {
      "file": "./components/AuthForm.tsx",
      "line": 17,
      "service": "auth",
      "content": "} from \"firebase/auth\";"
    },
    {
      "file": "./components/AuthForm.tsx",
      "line": 22,
      "service": "auth",
      "content": "import { signIn, signUp } from \"@/lib/actions/auth.action\";"
    },
    {
      "file": "./components/AuthForm.tsx",
      "line": 26,
      "service": "auth",
      "content": "const authFormSchema = (type: FormType) => {"
    },
    {
      "file": "./components/AuthForm.tsx",
      "line": 34,
      "service": "auth",
      "content": "const AuthForm = ({ type }: { type: FormType }) => {"
    },
    {
      "file": "./components/AuthForm.tsx",
      "line": 39,
      "service": "auth",
      "content": "const formSchema = authFormSchema(type);"
    },
    {
      "file": "./components/AuthForm.tsx",
      "line": 58,
      "service": "auth",
      "content": "auth,"
    },
    {
      "file": "./components/AuthForm.tsx",
      "line": 84,
      "service": "auth",
      "content": "await trackUserAction('signup', 'auth', {"
    },
    {
      "file": "./components/AuthForm.tsx",
      "line": 94,
      "service": "auth",
      "content": "auth,"
    },
    {
      "file": "./components/AuthForm.tsx",
      "line": 111,
      "service": "auth",
      "content": "const response = await fetch('/api/auth/signin', {"
    },
    {
      "file": "./components/AuthForm.tsx",
      "line": 120,
      "service": "auth",
      "content": "console.log('AuthForm: Sign in successful, redirecting to dashboard');"
    },
    {
      "file": "./components/AuthForm.tsx",
      "line": 125,
      "service": "auth",
      "content": "await trackUserAction('signin', 'auth', {"
    },
    {
      "file": "./components/AuthForm.tsx",
      "line": 166,
      "service": "auth",
      "content": "console.log('AuthForm: Attempting router.replace to /dashboard');"
    },
    {
      "file": "./components/AuthForm.tsx",
      "line": 171,
      "service": "auth",
      "content": "console.log('AuthForm: Fallback to window.location.replace');"
    },
    {
      "file": "./components/AuthForm.tsx",
      "line": 255,
      "service": "auth",
      "content": "export default AuthForm;"
    },
    {
      "file": "./components/CommunityInterviewPage.tsx",
      "line": 8,
      "service": "auth",
      "content": "import { getCurrentUser } from \"@/lib/actions/auth.action\";"
    },
    {
      "file": "./components/authenticated-layout.tsx",
      "line": 83,
      "service": "auth",
      "content": "import { useAuth } from \"@/contexts/AuthContext\";"
    },
    {
      "file": "./components/authenticated-layout.tsx",
      "line": 177,
      "service": "auth",
      "content": "interface AuthenticatedLayoutProps {"
    },
    {
      "file": "./components/authenticated-layout.tsx",
      "line": 181,
      "service": "auth",
      "content": "export const AuthenticatedLayout = ({ children }: AuthenticatedLayoutProps) => {"
    },
    {
      "file": "./components/authenticated-layout.tsx",
      "line": 184,
      "service": "auth",
      "content": "const { user } = useAuth();"
    },
    {
      "file": "./components/authenticated-layout.tsx",
      "line": 469,
      "service": "auth",
      "content": "export default AuthenticatedLayout;"
    },
    {
      "file": "./components/DashboardLayout.tsx",
      "line": 7,
      "service": "auth",
      "content": "import { useAuth } from '@/contexts/AuthContext';"
    },
    {
      "file": "./components/DashboardLayout.tsx",
      "line": 8,
      "service": "auth",
      "content": "import { signOut } from '@/lib/actions/auth.action';"
    },
    {
      "file": "./components/DashboardLayout.tsx",
      "line": 44,
      "service": "auth",
      "content": "const { user } = useAuth();"
    },
    {
      "file": "./components/EmailVerificationBanner.tsx",
      "line": 5,
      "service": "auth",
      "content": "import { useAuth } from \"@/contexts/AuthContext\";"
    },
    {
      "file": "./components/EmailVerificationBanner.tsx",
      "line": 10,
      "service": "auth",
      "content": "const { user } = useAuth();"
    },
    {
      "file": "./components/EmailVerificationBanner.tsx",
      "line": 21,
      "service": "auth",
      "content": "const response = await fetch('/api/auth/resend-verification', {"
    },
    {
      "file": "./components/AuthDebug.tsx",
      "line": 4,
      "service": "auth",
      "content": "import { useAuth } from '@/contexts/AuthContext';"
    },
    {
      "file": "./components/AuthDebug.tsx",
      "line": 6,
      "service": "auth",
      "content": "import { User } from 'firebase/auth';"
    },
    {
      "file": "./components/AuthDebug.tsx",
      "line": 8,
      "service": "auth",
      "content": "export function AuthDebug() {"
    },
    {
      "file": "./components/AuthDebug.tsx",
      "line": 9,
      "service": "auth",
      "content": "const { user, loading } = useAuth();"
    },
    {
      "file": "./components/AuthDebug.tsx",
      "line": 10,
      "service": "auth",
      "content": "const { auth: firebaseAuth, isInitialized } = useFirebase();"
    },
    {
      "file": "./components/AuthDebug.tsx",
      "line": 11,
      "service": "auth",
      "content": "const [firebaseUser, setFirebaseUser] = useState<User | null>(null);"
    },
    {
      "file": "./components/AuthDebug.tsx",
      "line": 14,
      "service": "auth",
      "content": "if (!isInitialized || !firebaseAuth) {"
    },
    {
      "file": "./components/AuthDebug.tsx",
      "line": 15,
      "service": "auth",
      "content": "console.log('Firebase auth not available for debug');"
    },
    {
      "file": "./components/AuthDebug.tsx",
      "line": 20,
      "service": "auth",
      "content": "setFirebaseUser(firebaseAuth.currentUser);"
    },
    {
      "file": "./components/AuthDebug.tsx",
      "line": 22,
      "service": "auth",
      "content": "const unsubscribe = firebaseAuth.onAuthStateChanged((fbUser: User | null) => {"
    },
    {
      "file": "./components/AuthDebug.tsx",
      "line": 23,
      "service": "auth",
      "content": "setFirebaseUser(fbUser);"
    },
    {
      "file": "./components/AuthDebug.tsx",
      "line": 27,
      "service": "auth",
      "content": "}, [isInitialized, firebaseAuth]);"
    },
    {
      "file": "./components/AuthDebug.tsx",
      "line": 35,
      "service": "auth",
      "content": "<h3 className=\"font-bold\">Auth Debug Info</h3>"
    },
    {
      "file": "./components/AuthDebug.tsx",
      "line": 37,
      "service": "auth",
      "content": "<p><strong>Auth Context Loading:</strong> {loading ? 'Yes' : 'No'}</p>"
    },
    {
      "file": "./components/AuthDebug.tsx",
      "line": 39,
      "service": "auth",
      "content": "<p><strong>Firebase User:</strong> {firebaseUser ? `${firebaseUser.email} (${firebaseUser.uid})` : 'None'}</p>"
    },
    {
      "file": "./components/AuthDebug.tsx",
      "line": 40,
      "service": "auth",
      "content": "<p><strong>Auth Match:</strong> {user && firebaseUser && user.id === firebaseUser.uid ? '✅ Match' : '❌ Mismatch'}</p>"
    },
    {
      "file": "./components/InterviewCardRealtime.tsx",
      "line": 9,
      "service": "firestore",
      "content": "import { useRealtimeInterview } from \"@/lib/hooks/useRealtimeFirestore\";"
    },
    {
      "file": "./components/AuthDebugInfo.tsx",
      "line": 4,
      "service": "auth",
      "content": "import { useAuth } from '@/contexts/AuthContext';"
    },
    {
      "file": "./components/AuthDebugInfo.tsx",
      "line": 9,
      "service": "auth",
      "content": "authState: any;"
    },
    {
      "file": "./components/AuthDebugInfo.tsx",
      "line": 13,
      "service": "auth",
      "content": "export default function AuthDebugInfo() {"
    },
    {
      "file": "./components/AuthDebugInfo.tsx",
      "line": 15,
      "service": "auth",
      "content": "const auth = useAuth();"
    },
    {
      "file": "./components/AuthDebugInfo.tsx",
      "line": 29,
      "service": "auth",
      "content": "authState: {"
    },
    {
      "file": "./components/AuthDebugInfo.tsx",
      "line": 30,
      "service": "auth",
      "content": "user: auth.user ? { uid: auth.user.uid, email: auth.user.email } : null,"
    },
    {
      "file": "./components/AuthDebugInfo.tsx",
      "line": 31,
      "service": "auth",
      "content": "loading: auth.loading,"
    },
    {
      "file": "./components/AuthDebugInfo.tsx",
      "line": 32,
      "service": "auth",
      "content": "isAuthenticated: auth.isAuthenticated"
    },
    {
      "file": "./components/AuthDebugInfo.tsx",
      "line": 44,
      "service": "auth",
      "content": "}, [auth]);"
    },
    {
      "file": "./components/AuthDebugInfo.tsx",
      "line": 50,
      "service": "auth",
      "content": "<div className=\"font-bold mb-2\">🔍 Auth Debug Info</div>"
    },
    {
      "file": "./components/AuthDebugInfo.tsx",
      "line": 54,
      "service": "auth",
      "content": "<div>Auth Loading: {debugInfo.authState.loading ? 'Yes' : 'No'}</div>"
    },
    {
      "file": "./components/AuthDebugInfo.tsx",
      "line": 55,
      "service": "auth",
      "content": "<div>Authenticated: {debugInfo.authState.isAuthenticated ? '✅' : '❌'}</div>"
    },
    {
      "file": "./components/AuthDebugInfo.tsx",
      "line": 56,
      "service": "auth",
      "content": "<div>User: {debugInfo.authState.user?.email || 'None'}</div>"
    },
    {
      "file": "./components/PdfUploadButton.tsx",
      "line": 17,
      "service": "auth",
      "content": "import { useAuth } from '@/contexts/AuthContext';"
    },
    {
      "file": "./components/PdfUploadButton.tsx",
      "line": 18,
      "service": "auth",
      "content": "import { auth } from '@/firebase/client';"
    },
    {
      "file": "./components/PdfUploadButton.tsx",
      "line": 37,
      "service": "storage",
      "content": "storageProvider?: 'azure' | 'firebase';"
    },
    {
      "file": "./components/PdfUploadButton.tsx",
      "line": 318,
      "service": "auth",
      "content": "const { user } = useAuth();"
    },
    {
      "file": "./components/PdfUploadButton.tsx",
      "line": 319,
      "service": "auth",
      "content": "const [authHeaders, setAuthHeaders] = useState<Record<string, string>>({"
    },
    {
      "file": "./components/PdfUploadButton.tsx",
      "line": 324,
      "service": "auth",
      "content": "// Update headers with auth token when user changes"
    },
    {
      "file": "./components/PdfUploadButton.tsx",
      "line": 326,
      "service": "auth",
      "content": "const updateAuthHeaders = async () => {"
    },
    {
      "file": "./components/PdfUploadButton.tsx",
      "line": 328,
      "service": "auth",
      "content": "if (user && auth.currentUser) {"
    },
    {
      "file": "./components/PdfUploadButton.tsx",
      "line": 329,
      "service": "auth",
      "content": "const idToken = await auth.currentUser.getIdToken();"
    },
    {
      "file": "./components/PdfUploadButton.tsx",
      "line": 330,
      "service": "auth",
      "content": "setAuthHeaders(prev => ({"
    },
    {
      "file": "./components/PdfUploadButton.tsx",
      "line": 332,
      "service": "auth",
      "content": "'Authorization': `Bearer ${idToken}`"
    },
    {
      "file": "./components/PdfUploadButton.tsx",
      "line": 335,
      "service": "auth",
      "content": "// Remove auth header if no user"
    },
    {
      "file": "./components/PdfUploadButton.tsx",
      "line": 336,
      "service": "auth",
      "content": "setAuthHeaders(prev => {"
    },
    {
      "file": "./components/PdfUploadButton.tsx",
      "line": 337,
      "service": "auth",
      "content": "const { Authorization, ...rest } = prev;"
    },
    {
      "file": "./components/PdfUploadButton.tsx",
      "line": 342,
      "service": "auth",
      "content": "console.error('Error getting auth token:', error);"
    },
    {
      "file": "./components/PdfUploadButton.tsx",
      "line": 343,
      "service": "auth",
      "content": "// Continue without auth token - server will handle development mode"
    },
    {
      "file": "./components/PdfUploadButton.tsx",
      "line": 347,
      "service": "auth",
      "content": "updateAuthHeaders();"
    },
    {
      "file": "./components/PdfUploadButton.tsx",
      "line": 354,
      "service": "auth",
      "content": "headers: authHeaders"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 1,
      "service": "admin",
      "content": "import { initializeApp, cert, getApps, App } from \"firebase-admin/app\";"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 2,
      "service": "auth",
      "content": "import { getAuth } from \"firebase-admin/auth\";"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 3,
      "service": "firestore",
      "content": "import { getFirestore } from \"firebase-admin/firestore\";"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 4,
      "service": "storage",
      "content": "import { getStorage, Storage } from \"firebase-admin/storage\";"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 11,
      "service": "storage",
      "content": "'NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET'"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 26,
      "service": "auth",
      "content": "auth: ReturnType<typeof getAuth>;"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 27,
      "service": "firestore",
      "content": "db: ReturnType<typeof getFirestore>;"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 28,
      "service": "storage",
      "content": "storage: Storage;"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 141,
      "service": "auth",
      "content": "auth: {} as any,"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 143,
      "service": "storage",
      "content": "storage: {} as any"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 153,
      "service": "auth",
      "content": "auth: {} as any,"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 155,
      "service": "storage",
      "content": "storage: {} as any"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 170,
      "service": "auth",
      "content": "auth: getAuth(existingApp),"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 171,
      "service": "firestore",
      "content": "db: getFirestore(existingApp),"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 172,
      "service": "storage",
      "content": "storage: getStorage(existingApp)"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 198,
      "service": "firestore",
      "content": "process.env.FIRESTORE_EMULATOR_HOST = '';"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 203,
      "service": "firestore",
      "content": "// Force Firestore to use REST instead of gRPC to avoid SSL issues"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 204,
      "service": "firestore",
      "content": "process.env.GOOGLE_CLOUD_FIRESTORE_EMULATOR_HOST = '';"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 205,
      "service": "firestore",
      "content": "process.env.FIRESTORE_PREFER_REST = 'true';"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 219,
      "service": "storage",
      "content": "storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET!,"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 223,
      "service": "auth",
      "content": "const auth = getAuth(app);"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 225,
      "service": "firestore",
      "content": "// Initialize Firestore"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 228,
      "service": "firestore",
      "content": "// Initialize Firestore"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 229,
      "service": "firestore",
      "content": "db = getFirestore(app);"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 232,
      "service": "firestore",
      "content": "// for configuring Firestore transport settings"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 234,
      "service": "firestore",
      "content": "console.warn('Failed to initialize Firestore, falling back to basic initialization:', error);"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 235,
      "service": "firestore",
      "content": "// Fallback to basic Firestore initialization"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 236,
      "service": "firestore",
      "content": "db = getFirestore(app);"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 239,
      "service": "storage",
      "content": "const storage = getStorage(app);"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 241,
      "service": "storage",
      "content": "console.log(`Firebase Admin initialized successfully with bucket: ${process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET}`);"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 243,
      "service": "auth",
      "content": "return { app, auth, db, storage };"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 271,
      "service": "auth",
      "content": "export const getAuthService = () => getFirebaseAdmin().auth;"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 273,
      "service": "storage",
      "content": "export const getStorageService = () => getFirebaseAdmin().storage;"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 287,
      "service": "auth",
      "content": "export const auth = new Proxy({} as any, {"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 290,
      "service": "auth",
      "content": "return (admin.auth as any)[prop];"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 301,
      "service": "storage",
      "content": "export const storage = new Proxy({} as any, {"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 304,
      "service": "storage",
      "content": "return (admin.storage as any)[prop];"
    },
    {
      "file": "./firebase/client.ts",
      "line": 1,
      "service": "firestore",
      "content": "import { getFirestore } from \"firebase/firestore\";"
    },
    {
      "file": "./firebase/client.ts",
      "line": 2,
      "service": "admin",
      "content": "import { initializeApp, getApp, getApps } from \"firebase/app\";"
    },
    {
      "file": "./firebase/client.ts",
      "line": 3,
      "service": "auth",
      "content": "import { getAuth, GoogleAuthProvider } from \"firebase/auth\";"
    },
    {
      "file": "./firebase/client.ts",
      "line": 7,
      "service": "auth",
      "content": "let auth: any = null;"
    },
    {
      "file": "./firebase/client.ts",
      "line": 37,
      "service": "auth",
      "content": "authDomain: \"prepbettr.firebaseapp.com\","
    },
    {
      "file": "./firebase/client.ts",
      "line": 39,
      "service": "storage",
      "content": "storageBucket: \"prepbettr.firebasestorage.app\","
    },
    {
      "file": "./firebase/client.ts",
      "line": 48,
      "service": "auth",
      "content": "if (isInitialized) return { app, auth, db };"
    },
    {
      "file": "./firebase/client.ts",
      "line": 54,
      "service": "auth",
      "content": "return { app, auth, db };"
    },
    {
      "file": "./firebase/client.ts",
      "line": 74,
      "service": "admin",
      "content": "app = !getApps().length ? initializeApp(firebaseConfig) : getApp();"
    },
    {
      "file": "./firebase/client.ts",
      "line": 75,
      "service": "auth",
      "content": "auth = getAuth(app);"
    },
    {
      "file": "./firebase/client.ts",
      "line": 76,
      "service": "firestore",
      "content": "db = getFirestore(app);"
    },
    {
      "file": "./firebase/client.ts",
      "line": 83,
      "service": "auth",
      "content": "auth = null;"
    },
    {
      "file": "./firebase/client.ts",
      "line": 89,
      "service": "auth",
      "content": "auth = null;"
    },
    {
      "file": "./firebase/client.ts",
      "line": 95,
      "service": "auth",
      "content": "return { app, auth, db };"
    },
    {
      "file": "./firebase/client.ts",
      "line": 103,
      "service": "auth",
      "content": "auth = getAuth(app);"
    },
    {
      "file": "./firebase/client.ts",
      "line": 104,
      "service": "firestore",
      "content": "db = getFirestore(app);"
    },
    {
      "file": "./firebase/client.ts",
      "line": 112,
      "service": "storage",
      "content": "export async function ensureFirebaseInitialized() {"
    },
    {
      "file": "./firebase/client.ts",
      "line": 116,
      "service": "auth",
      "content": "return { app, auth, db };"
    },
    {
      "file": "./firebase/client.ts",
      "line": 119,
      "service": "auth",
      "content": "const googleProvider = new GoogleAuthProvider();"
    },
    {
      "file": "./firebase/client.ts",
      "line": 121,
      "service": "auth",
      "content": "export { auth, db, googleProvider, app };"
    },
    {
      "file": "./hooks/useFirebase.ts",
      "line": 2,
      "service": "storage",
      "content": "import { ensureFirebaseInitialized } from '@/firebase/client';"
    },
    {
      "file": "./hooks/useFirebase.ts",
      "line": 7,
      "service": "auth",
      "content": "auth: any;"
    },
    {
      "file": "./hooks/useFirebase.ts",
      "line": 13,
      "service": "auth",
      "content": "auth: null,"
    },
    {
      "file": "./hooks/useFirebase.ts",
      "line": 23,
      "service": "auth",
      "content": "const { app, auth, db } = await ensureFirebaseInitialized();"
    },
    {
      "file": "./hooks/useFirebase.ts",
      "line": 28,
      "service": "auth",
      "content": "auth,"
    },
    {
      "file": "./scripts/migrate-users.js",
      "line": 12,
      "service": "admin",
      "content": "const { initializeApp, cert, getApps } = require('firebase-admin/app');"
    },
    {
      "file": "./scripts/migrate-users.js",
      "line": 13,
      "service": "firestore",
      "content": "const { getFirestore, FieldValue } = require('firebase-admin/firestore');"
    },
    {
      "file": "./scripts/migrate-users.js",
      "line": 85,
      "service": "firestore",
      "content": "console.log('🚀 Starting Firestore subscription schema migration...');"
    },
    {
      "file": "./scripts/migrate-users.js",
      "line": 89,
      "service": "firestore",
      "content": "const db = getFirestore(app);"
    },
    {
      "file": "./scripts/migrate-users.js",
      "line": 91,
      "service": "firestore",
      "content": "console.log('📊 Fetching users from Firestore...');"
    },
    {
      "file": "./scripts/migrate-users.js",
      "line": 101,
      "service": "firestore",
      "content": "// Process users in batches to avoid overwhelming Firestore"
    },
    {
      "file": "./scripts/backfill-mock-interviews.ts",
      "line": 6,
      "service": "firestore",
      "content": "* This script seeds the first 20 Azure-generated mock interviews to Firestore"
    },
    {
      "file": "./scripts/backfill-mock-interviews.ts",
      "line": 26,
      "service": "firestore",
      "content": "import { getAdminFirestore } from '../lib/firebase/admin';"
    },
    {
      "file": "./scripts/backfill-mock-interviews.ts",
      "line": 39,
      "service": "firestore",
      "content": "const COLLECTION_NAME = 'mockInterviews'; // Firestore collection name"
    },
    {
      "file": "./scripts/backfill-mock-interviews.ts",
      "line": 130,
      "service": "firestore",
      "content": "* Save interviews to Firestore"
    },
    {
      "file": "./scripts/backfill-mock-interviews.ts",
      "line": 132,
      "service": "firestore",
      "content": "async function saveToFirestore(interviews: any[]): Promise<void> {"
    },
    {
      "file": "./scripts/backfill-mock-interviews.ts",
      "line": 133,
      "service": "firestore",
      "content": "const db = getAdminFirestore();"
    },
    {
      "file": "./scripts/backfill-mock-interviews.ts",
      "line": 146,
      "service": "firestore",
      "content": "console.log(`💾 Saved ${interviews.length} interviews to Firestore`);"
    },
    {
      "file": "./scripts/backfill-mock-interviews.ts",
      "line": 150,
      "service": "firestore",
      "content": "* Verify existing mock interviews in Firestore"
    },
    {
      "file": "./scripts/backfill-mock-interviews.ts",
      "line": 153,
      "service": "firestore",
      "content": "const db = getAdminFirestore();"
    },
    {
      "file": "./scripts/backfill-mock-interviews.ts",
      "line": 242,
      "service": "firestore",
      "content": "// Save batch to Firestore"
    },
    {
      "file": "./scripts/backfill-mock-interviews.ts",
      "line": 243,
      "service": "firestore",
      "content": "await saveToFirestore(validInterviews);"
    },
    {
      "file": "./scripts/backfill-mock-interviews.ts",
      "line": 273,
      "service": "firestore",
      "content": "console.log(`\\n🎯 Total mock interviews in Firestore: ${finalCount}`);"
    },
    {
      "file": "./scripts/backfill-mock-interviews.ts",
      "line": 299,
      "service": "firestore",
      "content": "export { main, generateMockInterview, saveToFirestore, getExistingInterviewCount };"
    },
    {
      "file": "./scripts/deployment-checklist.ts",
      "line": 76,
      "service": "auth",
      "content": "// Firebase Authentication (Required)"
    },
    {
      "file": "./scripts/deployment-checklist.ts",
      "line": 78,
      "service": "auth",
      "content": "'NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN',"
    },
    {
      "file": "./scripts/deployment-checklist.ts",
      "line": 80,
      "service": "storage",
      "content": "'NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET',"
    },
    {
      "file": "./scripts/deployment-checklist.ts",
      "line": 91,
      "service": "storage",
      "content": "'AZURE_STORAGE_CONNECTION_STRING',"
    },
    {
      "file": "./scripts/fetch-build-config.ts",
      "line": 265,
      "service": "auth",
      "content": "NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: 'prepbettr.firebaseapp.com',"
    },
    {
      "file": "./scripts/fetch-build-config.ts",
      "line": 266,
      "service": "storage",
      "content": "NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: 'prepbettr.firebasestorage.app',"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 4,
      "service": "firestore",
      "content": "* Firestore Migration Script - Seed Auto-Apply Collections"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 6,
      "service": "firestore",
      "content": "* This script seeds the Firestore database with mock data for the auto-apply feature."
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 15,
      "service": "firestore",
      "content": "* npm run seed-firestore"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 20,
      "service": "admin",
      "content": "import { initializeApp, cert, getApps, deleteApp } from 'firebase-admin/app';"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 21,
      "service": "firestore",
      "content": "import { getFirestore, Timestamp } from 'firebase-admin/firestore';"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 32,
      "service": "firestore",
      "content": "return getFirestore();"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 57,
      "service": "firestore",
      "content": "return getFirestore(app);"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 60,
      "service": "firestore",
      "content": "// Utility function to convert ISO string dates to Firestore Timestamps"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 86,
      "service": "firestore",
      "content": "async function seedUsers(db: FirebaseFirestore.Firestore) {"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 106,
      "service": "firestore",
      "content": "async function seedAutoApplySettings(db: FirebaseFirestore.Firestore) {"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 126,
      "service": "firestore",
      "content": "async function seedJobListings(db: FirebaseFirestore.Firestore) {"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 133,
      "service": "firestore",
      "content": "// Transform job listing to match Firestore schema"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 134,
      "service": "firestore",
      "content": "const firestoreJobListing = {"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 136,
      "service": "firestore",
      "content": "// Add additional fields for Firestore schema"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 148,
      "service": "firestore",
      "content": "// Remove fields that don't exist in Firestore schema"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 149,
      "service": "firestore",
      "content": "delete (firestoreJobListing as any).relevancyScore;"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 150,
      "service": "firestore",
      "content": "delete (firestoreJobListing as any).matchedSkills;"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 151,
      "service": "firestore",
      "content": "delete (firestoreJobListing as any).missingSkills;"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 152,
      "service": "firestore",
      "content": "delete (firestoreJobListing as any).applicationStatus;"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 154,
      "service": "firestore",
      "content": "const convertedData = convertDatesToTimestamps(firestoreJobListing);"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 167,
      "service": "firestore",
      "content": "async function seedApplications(db: FirebaseFirestore.Firestore) {"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 174,
      "service": "firestore",
      "content": "// Transform application to match Firestore schema"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 175,
      "service": "firestore",
      "content": "const firestoreApplication = {"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 179,
      "service": "firestore",
      "content": "// Add additional fields for Firestore schema"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 186,
      "service": "firestore",
      "content": "delete (firestoreApplication as any).automationLog;"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 188,
      "service": "firestore",
      "content": "const convertedData = convertDatesToTimestamps(firestoreApplication);"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 201,
      "service": "firestore",
      "content": "async function seedAutomationLogs(db: FirebaseFirestore.Firestore) {"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 210,
      "service": "firestore",
      "content": "const firestoreLogEntry = {"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 219,
      "service": "firestore",
      "content": "const convertedData = convertDatesToTimestamps(firestoreLogEntry);"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 232,
      "service": "firestore",
      "content": "const firestoreLogEntry = {"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 241,
      "service": "firestore",
      "content": "const convertedData = convertDatesToTimestamps(firestoreLogEntry);"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 254,
      "service": "firestore",
      "content": "// Create Firestore indexes configuration"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 256,
      "service": "firestore",
      "content": "console.log('🔄 Creating firestore.indexes.json...');"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 308,
      "service": "firestore",
      "content": "fs.writeFileSync('firestore.indexes.json', JSON.stringify(indexes, null, 2));"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 309,
      "service": "firestore",
      "content": "console.log('✅ Created firestore.indexes.json\\n');"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 315,
      "service": "firestore",
      "content": "console.log('🚀 Starting Firestore Auto-Apply Collections Migration\\n');"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 338,
      "service": "firestore",
      "content": "console.log('1. Deploy indexes: firebase deploy --only firestore:indexes');"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 339,
      "service": "firestore",
      "content": "console.log('2. Update security rules: firebase deploy --only firestore:rules');"
    },
    {
      "file": "./scripts/firebase/mock-data.ts",
      "line": 2,
      "service": "firestore",
      "content": "* Mock data for seeding Firestore collections"
    },
    {
      "file": "./scripts/test-resume-processing.ts",
      "line": 4,
      "service": "storage",
      "content": "import { azureBlobStorage } from '../lib/services/azure-blob-storage';"
    },
    {
      "file": "./scripts/test-resume-processing.ts",
      "line": 10,
      "service": "storage",
      "content": "azureBlobStorageInit: boolean;"
    },
    {
      "file": "./scripts/test-resume-processing.ts",
      "line": 20,
      "service": "storage",
      "content": "azureBlobStorageInit: false,"
    },
    {
      "file": "./scripts/test-resume-processing.ts",
      "line": 29,
      "service": "storage",
      "content": "// Test 1: Azure Blob Storage Initialization"
    },
    {
      "file": "./scripts/test-resume-processing.ts",
      "line": 30,
      "service": "storage",
      "content": "console.log('1️⃣ Testing Azure Blob Storage initialization...');"
    },
    {
      "file": "./scripts/test-resume-processing.ts",
      "line": 32,
      "service": "storage",
      "content": "results.azureBlobStorageInit = await azureBlobStorage.initialize();"
    },
    {
      "file": "./scripts/test-resume-processing.ts",
      "line": 33,
      "service": "storage",
      "content": "console.log(`   ✅ Azure Blob Storage: ${results.azureBlobStorageInit ? 'Ready' : 'Not configured (will use Firebase fallback)'}`);"
    },
    {
      "file": "./scripts/test-resume-processing.ts",
      "line": 35,
      "service": "storage",
      "content": "console.log(`   ⚠️ Azure Blob Storage: Error - ${error}`);"
    },
    {
      "file": "./scripts/test-resume-processing.ts",
      "line": 120,
      "service": "storage",
      "content": "console.log(`   📊 Storage provider: ${result.data?.storageProvider}`);"
    },
    {
      "file": "./scripts/test-resume-processing.ts",
      "line": 147,
      "service": "storage",
      "content": "console.log(`Azure Blob Storage: ${results.azureBlobStorageInit ? '✅ Ready' : '⚠️ Fallback to Firebase'}`);"
    },
    {
      "file": "./scripts/setup-azure-app-config.ts",
      "line": 218,
      "service": "auth",
      "content": "console.log('# (with Azure managed identity for authentication)\\n');"
    },
    {
      "file": "./scripts/setup-azure-app-config.ts",
      "line": 264,
      "service": "firestore",
      "content": "console.log('- Error Budgets: Tracked automatically in Firestore');"
    },
    {
      "file": "./scripts/setup-remote-config.ts",
      "line": 122,
      "service": "firestore",
      "content": "console.log('- Error Budgets: Tracked automatically in Firestore');"
    },
    {
      "file": "./scripts/setup-azure-app-config-production.ts",
      "line": 22,
      "service": "storage",
      "content": "NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET || 'prepbettr.firebasestorage.app',"
    },
    {
      "file": "./scripts/setup-azure-app-config-production.ts",
      "line": 24,
      "service": "auth",
      "content": "NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: 'prepbettr.firebaseapp.com',"
    },
    {
      "file": "./scripts/test-key-vault.js",
      "line": 30,
      "service": "storage",
      "content": "'azure-storage-account-name',"
    },
    {
      "file": "./scripts/test-key-vault.js",
      "line": 31,
      "service": "storage",
      "content": "'azure-storage-account-key',"
    },
    {
      "file": "./scripts/test-key-vault.js",
      "line": 148,
      "service": "auth",
      "content": "console.log('\\n💡 Authentication Tips:');"
    },
    {
      "file": "./scripts/monitor-mock-interview-usage.ts",
      "line": 7,
      "service": "firestore",
      "content": "* - Firestore write operations for mock interviews"
    },
    {
      "file": "./scripts/monitor-mock-interview-usage.ts",
      "line": 18,
      "service": "firestore",
      "content": "import { getAdminFirestore } from '../lib/firebase/admin';"
    },
    {
      "file": "./scripts/monitor-mock-interview-usage.ts",
      "line": 19,
      "service": "firestore",
      "content": "import { Timestamp } from 'firebase-admin/firestore';"
    },
    {
      "file": "./scripts/monitor-mock-interview-usage.ts",
      "line": 34,
      "service": "firestore",
      "content": "firestoreWrites: number;"
    },
    {
      "file": "./scripts/monitor-mock-interview-usage.ts",
      "line": 55,
      "service": "firestore",
      "content": "private db = getAdminFirestore();"
    },
    {
      "file": "./scripts/monitor-mock-interview-usage.ts",
      "line": 73,
      "service": "firestore",
      "content": "console.log(`   - Firestore writes: ${ALERT_THRESHOLD_WRITES}/hour`);"
    },
    {
      "file": "./scripts/monitor-mock-interview-usage.ts",
      "line": 127,
      "service": "firestore",
      "content": "// Count Firestore writes in the last hour"
    },
    {
      "file": "./scripts/monitor-mock-interview-usage.ts",
      "line": 132,
      "service": "firestore",
      "content": "const firestoreWrites = writesSnapshot.size;"
    },
    {
      "file": "./scripts/monitor-mock-interview-usage.ts",
      "line": 159,
      "service": "firestore",
      "content": "const errorRate = firestoreWrites > 0 ? (errors / firestoreWrites) * 100 : 0;"
    },
    {
      "file": "./scripts/monitor-mock-interview-usage.ts",
      "line": 164,
      "service": "firestore",
      "content": "firestoreWrites,"
    },
    {
      "file": "./scripts/monitor-mock-interview-usage.ts",
      "line": 188,
      "service": "firestore",
      "content": "hourStats.writes += firestoreWrites;"
    },
    {
      "file": "./scripts/monitor-mock-interview-usage.ts",
      "line": 193,
      "service": "firestore",
      "content": "// Store metrics in Firestore"
    },
    {
      "file": "./scripts/monitor-mock-interview-usage.ts",
      "line": 217,
      "service": "firestore",
      "content": "// Check Firestore feature flags collection"
    },
    {
      "file": "./scripts/monitor-mock-interview-usage.ts",
      "line": 257,
      "service": "firestore",
      "content": "* Store metrics in Firestore for historical tracking"
    },
    {
      "file": "./scripts/monitor-mock-interview-usage.ts",
      "line": 279,
      "service": "firestore",
      "content": "console.log(`├─ 📝 Firestore Writes (last hour): ${metrics.firestoreWrites}`);"
    },
    {
      "file": "./scripts/monitor-mock-interview-usage.ts",
      "line": 292,
      "service": "firestore",
      "content": "// Check Firestore writes threshold"
    },
    {
      "file": "./scripts/monitor-mock-interview-usage.ts",
      "line": 293,
      "service": "firestore",
      "content": "if (metrics.firestoreWrites > ALERT_THRESHOLD_WRITES) {"
    },
    {
      "file": "./scripts/monitor-mock-interview-usage.ts",
      "line": 294,
      "service": "firestore",
      "content": "alerts.push(`🚨 HIGH FIRESTORE WRITES: ${metrics.firestoreWrites} exceeds threshold of ${ALERT_THRESHOLD_WRITES}/hour`);"
    },
    {
      "file": "./scripts/monitor-mock-interview-usage.ts",
      "line": 318,
      "service": "firestore",
      "content": "// Store alerts in Firestore"
    },
    {
      "file": "./scripts/monitor-mock-interview-usage.ts",
      "line": 330,
      "service": "firestore",
      "content": "* Store alert in Firestore"
    },
    {
      "file": "./scripts/monitor-mock-interview-usage.ts",
      "line": 339,
      "service": "firestore",
      "content": "firestoreWrites: metrics.firestoreWrites,"
    },
    {
      "file": "./scripts/monitor-mock-interview-usage.ts",
      "line": 372,
      "service": "firestore",
      "content": "console.log(`📝 Total Firestore Writes: ${totalWrites}`);"
    },
    {
      "file": "./scripts/monitor-mock-interview-usage.ts",
      "line": 412,
      "service": "firestore",
      "content": "const totalWrites = metrics.reduce((sum, m) => sum + m.firestoreWrites, 0);"
    },
    {
      "file": "./scripts/compare-env-variables.ts",
      "line": 55,
      "service": "storage",
      "content": "// Azure Storage"
    },
    {
      "file": "./scripts/compare-env-variables.ts",
      "line": 56,
      "service": "storage",
      "content": "['AZURE_STORAGE_ACCOUNT_NAME', 'azure-storage-account-name'],"
    },
    {
      "file": "./scripts/compare-env-variables.ts",
      "line": 57,
      "service": "storage",
      "content": "['AZURE_STORAGE_ACCOUNT_KEY', 'azure-storage-account-key'],"
    },
    {
      "file": "./scripts/compare-env-variables.ts",
      "line": 68,
      "service": "storage",
      "content": "['NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET', null],"
    },
    {
      "file": "./scripts/compare-env-variables.ts",
      "line": 107,
      "service": "storage",
      "content": "'NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET',"
    },
    {
      "file": "./lib/middleware/error-handler.ts",
      "line": 100,
      "service": "auth",
      "content": "// Authentication errors"
    },
    {
      "file": "./lib/middleware/error-handler.ts",
      "line": 101,
      "service": "auth",
      "content": "if (error.message?.includes('unauthorized') || error.message?.includes('token')) {"
    },
    {
      "file": "./lib/middleware/error-handler.ts",
      "line": 103,
      "service": "auth",
      "content": "name: 'AuthenticationError',"
    },
    {
      "file": "./lib/middleware/error-handler.ts",
      "line": 104,
      "service": "auth",
      "content": "message: 'Authentication failed',"
    },
    {
      "file": "./lib/middleware/error-handler.ts",
      "line": 106,
      "service": "auth",
      "content": "code: 'AUTH_ERROR',"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 5,
      "service": "auth",
      "content": "* Firebase Authentication Middleware for Next.js API Routes"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 7,
      "service": "auth",
      "content": "* This middleware validates Firebase ID tokens and ensures only authenticated users"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 11,
      "service": "auth",
      "content": "export interface AuthenticatedUser {"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 21,
      "service": "auth",
      "content": "export interface AuthResult {"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 23,
      "service": "auth",
      "content": "user: AuthenticatedUser | null;"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 27,
      "service": "auth",
      "content": "export interface AuthRequest extends NextRequest {"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 28,
      "service": "auth",
      "content": "user?: AuthenticatedUser;"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 32,
      "service": "auth",
      "content": "* Extract Bearer token from Authorization header"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 34,
      "service": "auth",
      "content": "function extractBearerToken(authHeader: string | null): string | null {"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 35,
      "service": "auth",
      "content": "if (!authHeader) {"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 39,
      "service": "auth",
      "content": "const parts = authHeader.split(' ');"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 50,
      "service": "auth",
      "content": "export async function verifyFirebaseToken(idToken: string): Promise<AuthResult> {"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 85,
      "service": "auth",
      "content": "* Authentication middleware for Next.js API routes"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 88,
      "service": "auth",
      "content": "* import { authMiddleware } from '@/lib/middleware/authMiddleware';"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 91,
      "service": "auth",
      "content": "*   const authResult = await authMiddleware(request);"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 92,
      "service": "auth",
      "content": "*   if (!authResult.success) {"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 93,
      "service": "auth",
      "content": "*     return authResult.response;"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 96,
      "service": "auth",
      "content": "*   const user = authResult.user;"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 100,
      "service": "auth",
      "content": "export async function authMiddleware(request: NextRequest): Promise<{"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 102,
      "service": "auth",
      "content": "user: AuthenticatedUser | null;"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 106,
      "service": "auth",
      "content": "// Extract token from Authorization header"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 107,
      "service": "auth",
      "content": "const authHeader = request.headers.get('authorization');"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 108,
      "service": "auth",
      "content": "const token = extractBearerToken(authHeader);"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 116,
      "service": "auth",
      "content": "error: 'Missing or invalid Authorization header',"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 117,
      "service": "auth",
      "content": "message: 'Please provide a valid Bearer token in the Authorization header'"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 141,
      "service": "auth",
      "content": "console.log(`Authenticated user: ${verificationResult.user?.uid} (${verificationResult.user?.email})`);"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 149,
      "service": "auth",
      "content": "console.error('Authentication middleware error:', error);"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 156,
      "service": "auth",
      "content": "error: 'Authentication system error',"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 166,
      "service": "auth",
      "content": "* Role-based authorization middleware"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 175,
      "service": "auth",
      "content": "user: AuthenticatedUser | null;"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 178,
      "service": "auth",
      "content": "const authResult = await authMiddleware(request);"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 180,
      "service": "auth",
      "content": "if (!authResult.success) {"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 181,
      "service": "auth",
      "content": "return authResult;"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 184,
      "service": "auth",
      "content": "const user = authResult.user!;"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 206,
      "service": "auth",
      "content": "return authResult;"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 217,
      "service": "auth",
      "content": "* Higher-order function to create authenticated API handlers"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 220,
      "service": "auth",
      "content": "* import { withAuth } from '@/lib/middleware/authMiddleware';"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 222,
      "service": "auth",
      "content": "* export const GET = withAuth(async (request: NextRequest, user: AuthenticatedUser) => {"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 227,
      "service": "auth",
      "content": "export function withAuth<T extends any[]>("
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 228,
      "service": "auth",
      "content": "handler: (request: NextRequest, user: AuthenticatedUser, ...args: T) => Promise<NextResponse>,"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 229,
      "service": "auth",
      "content": "options: { requiredRoles?: string[]; skipAuth?: boolean } = {}"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 232,
      "service": "auth",
      "content": "const { requiredRoles = [], skipAuth = false } = options;"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 234,
      "service": "auth",
      "content": "if (skipAuth) {"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 238,
      "service": "auth",
      "content": "const authResult = requiredRoles.length > 0"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 240,
      "service": "auth",
      "content": ": await authMiddleware(request);"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 242,
      "service": "auth",
      "content": "if (!authResult.success || !authResult.user) {"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 243,
      "service": "auth",
      "content": "return authResult.response!;"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 246,
      "service": "auth",
      "content": "// Call the actual handler with the authenticated user"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 247,
      "service": "auth",
      "content": "return await handler(request, authResult.user, ...args);"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 254,
      "service": "auth",
      "content": "export function withAdminAuth<T extends any[]>("
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 255,
      "service": "auth",
      "content": "handler: (request: NextRequest, user: AuthenticatedUser, ...args: T) => Promise<NextResponse>"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 257,
      "service": "auth",
      "content": "return withAuth(handler, { requiredRoles: ['admin'] });"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 263,
      "service": "auth",
      "content": "export async function getUserFromSessionCookie(sessionCookie: string): Promise<AuthResult> {"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 265,
      "service": "auth",
      "content": "// Note: Session cookie verification needs direct Firebase Admin auth access"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 266,
      "service": "auth",
      "content": "const { getAdminAuth } = await import('@/lib/firebase/admin');"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 267,
      "service": "auth",
      "content": "const adminAuth = getAdminAuth();"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 268,
      "service": "auth",
      "content": "const decodedClaims = await adminAuth.verifySessionCookie(sessionCookie, true);"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 293,
      "service": "auth",
      "content": "* Middleware for API routes that need to handle both authenticated and anonymous users"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 295,
      "service": "auth",
      "content": "export async function optionalAuth(request: NextRequest): Promise<{"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 296,
      "service": "auth",
      "content": "user: AuthenticatedUser | null;"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 297,
      "service": "auth",
      "content": "isAuthenticated: boolean;"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 299,
      "service": "auth",
      "content": "const authHeader = request.headers.get('authorization');"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 300,
      "service": "auth",
      "content": "const token = extractBearerToken(authHeader);"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 305,
      "service": "auth",
      "content": "isAuthenticated: false"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 313,
      "service": "auth",
      "content": "isAuthenticated: verificationResult.success"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 318,
      "service": "auth",
      "content": "* Health check utility (no auth required)"
    },
    {
      "file": "./lib/middleware/authMiddleware.ts",
      "line": 325,
      "service": "auth",
      "content": "service: 'Next.js API Auth Middleware'"
    },
    {
      "file": "./lib/errors.ts",
      "line": 105,
      "service": "auth",
      "content": "return createErrorResponse('Service authentication failed. Please try again later.', 500);"
    },
    {
      "file": "./lib/utils/telemetry.ts",
      "line": 438,
      "service": "auth",
      "content": "appInsights.setAuthenticatedUserContext(userId, email);"
    },
    {
      "file": "./lib/utils/telemetry.ts",
      "line": 466,
      "service": "auth",
      "content": "appInsights.clearAuthenticatedUserContext();"
    },
    {
      "file": "./lib/utils/communityInterviewStorage.ts",
      "line": 1,
      "service": "storage",
      "content": "// Utility functions for managing community interview localStorage data"
    },
    {
      "file": "./lib/utils/communityInterviewStorage.ts",
      "line": 14,
      "service": "storage",
      "content": "export const COMMUNITY_INTERVIEW_STORAGE_KEY = 'communityMockInterviewSelection';"
    },
    {
      "file": "./lib/utils/communityInterviewStorage.ts",
      "line": 17,
      "service": "storage",
      "content": "* Safely get community interview data from localStorage"
    },
    {
      "file": "./lib/utils/communityInterviewStorage.ts",
      "line": 19,
      "service": "storage",
      "content": "export const getCommunityInterviewFromStorage = (): CommunityInterviewData | null => {"
    },
    {
      "file": "./lib/utils/communityInterviewStorage.ts",
      "line": 23,
      "service": "storage",
      "content": "const stored = localStorage.getItem(COMMUNITY_INTERVIEW_STORAGE_KEY);"
    },
    {
      "file": "./lib/utils/communityInterviewStorage.ts",
      "line": 31,
      "service": "storage",
      "content": "localStorage.removeItem(COMMUNITY_INTERVIEW_STORAGE_KEY);"
    },
    {
      "file": "./lib/utils/communityInterviewStorage.ts",
      "line": 38,
      "service": "storage",
      "content": "localStorage.removeItem(COMMUNITY_INTERVIEW_STORAGE_KEY);"
    },
    {
      "file": "./lib/utils/communityInterviewStorage.ts",
      "line": 44,
      "service": "storage",
      "content": "* Store community interview data in localStorage"
    },
    {
      "file": "./lib/utils/communityInterviewStorage.ts",
      "line": 46,
      "service": "storage",
      "content": "export const setCommunityInterviewInStorage = (data: Omit<CommunityInterviewData, 'timestamp'>): void => {"
    },
    {
      "file": "./lib/utils/communityInterviewStorage.ts",
      "line": 54,
      "service": "storage",
      "content": "localStorage.setItem(COMMUNITY_INTERVIEW_STORAGE_KEY, JSON.stringify(dataWithTimestamp));"
    },
    {
      "file": "./lib/utils/communityInterviewStorage.ts",
      "line": 61,
      "service": "storage",
      "content": "* Clear community interview data from localStorage"
    },
    {
      "file": "./lib/utils/communityInterviewStorage.ts",
      "line": 63,
      "service": "storage",
      "content": "export const clearCommunityInterviewFromStorage = (): void => {"
    },
    {
      "file": "./lib/utils/communityInterviewStorage.ts",
      "line": 67,
      "service": "storage",
      "content": "localStorage.removeItem(COMMUNITY_INTERVIEW_STORAGE_KEY);"
    },
    {
      "file": "./lib/utils/communityInterviewStorage.ts",
      "line": 68,
      "service": "storage",
      "content": "console.log('Community interview data cleared from storage');"
    },
    {
      "file": "./lib/utils/communityInterviewStorage.ts",
      "line": 78,
      "service": "storage",
      "content": "const stored = getCommunityInterviewFromStorage();"
    },
    {
      "file": "./lib/utils/communityInterviewStorage.ts",
      "line": 96,
      "service": "storage",
      "content": "window.clearCommunityInterview = clearCommunityInterviewFromStorage;"
    },
    {
      "file": "./lib/utils/communityInterviewStorage.ts",
      "line": 98,
      "service": "storage",
      "content": "window.getCommunityInterview = getCommunityInterviewFromStorage;"
    },
    {
      "file": "./lib/utils/firebase-auth-debug.ts",
      "line": 3,
      "service": "auth",
      "content": "import { auth } from '@/firebase/client';"
    },
    {
      "file": "./lib/utils/firebase-auth-debug.ts",
      "line": 4,
      "service": "auth",
      "content": "import { User, IdTokenResult } from 'firebase/auth';"
    },
    {
      "file": "./lib/utils/firebase-auth-debug.ts",
      "line": 6,
      "service": "auth",
      "content": "export function debugFirebaseAuth() {"
    },
    {
      "file": "./lib/utils/firebase-auth-debug.ts",
      "line": 7,
      "service": "auth",
      "content": "if (!auth) {"
    },
    {
      "file": "./lib/utils/firebase-auth-debug.ts",
      "line": 8,
      "service": "auth",
      "content": "console.log('=== Firebase Auth Debug ===');"
    },
    {
      "file": "./lib/utils/firebase-auth-debug.ts",
      "line": 9,
      "service": "auth",
      "content": "console.log('Firebase auth not available');"
    },
    {
      "file": "./lib/utils/firebase-auth-debug.ts",
      "line": 14,
      "service": "auth",
      "content": "const currentUser = auth.currentUser;"
    },
    {
      "file": "./lib/utils/firebase-auth-debug.ts",
      "line": 16,
      "service": "auth",
      "content": "console.log('=== Firebase Auth Debug ===');"
    },
    {
      "file": "./lib/utils/firebase-auth-debug.ts",
      "line": 21,
      "service": "auth",
      "content": "console.log('Auth Ready:', !!currentUser);"
    },
    {
      "file": "./lib/utils/firebase-auth-debug.ts",
      "line": 40,
      "service": "auth",
      "content": "console.log('No Firebase user authenticated');"
    },
    {
      "file": "./lib/utils/firebase-auth-debug.ts",
      "line": 45,
      "service": "auth",
      "content": "export function waitForFirebaseAuth(): Promise<User | null> {"
    },
    {
      "file": "./lib/utils/firebase-auth-debug.ts",
      "line": 47,
      "service": "auth",
      "content": "if (!auth) {"
    },
    {
      "file": "./lib/utils/firebase-auth-debug.ts",
      "line": 52,
      "service": "auth",
      "content": "const unsubscribe = auth.onAuthStateChanged((user: User | null) => {"
    },
    {
      "file": "./lib/firebase/admin.ts",
      "line": 1,
      "service": "admin",
      "content": "import { getApps, initializeApp, cert, App } from 'firebase-admin/app';"
    },
    {
      "file": "./lib/firebase/admin.ts",
      "line": 2,
      "service": "auth",
      "content": "import { getAuth, Auth } from 'firebase-admin/auth';"
    },
    {
      "file": "./lib/firebase/admin.ts",
      "line": 3,
      "service": "firestore",
      "content": "import { getFirestore, Firestore } from 'firebase-admin/firestore';"
    },
    {
      "file": "./lib/firebase/admin.ts",
      "line": 4,
      "service": "storage",
      "content": "import { getStorage, Storage } from 'firebase-admin/storage';"
    },
    {
      "file": "./lib/firebase/admin.ts",
      "line": 7,
      "service": "auth",
      "content": "let adminAuth: Auth | null = null;"
    },
    {
      "file": "./lib/firebase/admin.ts",
      "line": 8,
      "service": "firestore",
      "content": "let adminDb: Firestore | null = null;"
    },
    {
      "file": "./lib/firebase/admin.ts",
      "line": 9,
      "service": "storage",
      "content": "let adminStorage: Storage | null = null;"
    },
    {
      "file": "./lib/firebase/admin.ts",
      "line": 58,
      "service": "storage",
      "content": "storageBucket: process.env.FIREBASE_STORAGE_BUCKET || `${process.env.FIREBASE_PROJECT_ID}.appspot.com`,"
    },
    {
      "file": "./lib/firebase/admin.ts",
      "line": 80,
      "service": "auth",
      "content": "* Get Firebase Admin Auth instance"
    },
    {
      "file": "./lib/firebase/admin.ts",
      "line": 82,
      "service": "auth",
      "content": "export function getAdminAuth(): Auth {"
    },
    {
      "file": "./lib/firebase/admin.ts",
      "line": 83,
      "service": "auth",
      "content": "if (!adminAuth) {"
    },
    {
      "file": "./lib/firebase/admin.ts",
      "line": 87,
      "service": "auth",
      "content": "adminAuth = {} as Auth;"
    },
    {
      "file": "./lib/firebase/admin.ts",
      "line": 89,
      "service": "auth",
      "content": "adminAuth = getAuth(app);"
    },
    {
      "file": "./lib/firebase/admin.ts",
      "line": 92,
      "service": "auth",
      "content": "return adminAuth;"
    },
    {
      "file": "./lib/firebase/admin.ts",
      "line": 96,
      "service": "firestore",
      "content": "* Get Firebase Admin Firestore instance"
    },
    {
      "file": "./lib/firebase/admin.ts",
      "line": 98,
      "service": "firestore",
      "content": "export function getAdminFirestore(): Firestore {"
    },
    {
      "file": "./lib/firebase/admin.ts",
      "line": 103,
      "service": "firestore",
      "content": "adminDb = {} as Firestore;"
    },
    {
      "file": "./lib/firebase/admin.ts",
      "line": 105,
      "service": "firestore",
      "content": "adminDb = getFirestore(app);"
    },
    {
      "file": "./lib/firebase/admin.ts",
      "line": 112,
      "service": "storage",
      "content": "* Get Firebase Admin Storage instance"
    },
    {
      "file": "./lib/firebase/admin.ts",
      "line": 114,
      "service": "storage",
      "content": "export function getAdminStorage(): Storage {"
    },
    {
      "file": "./lib/firebase/admin.ts",
      "line": 115,
      "service": "storage",
      "content": "if (!adminStorage) {"
    },
    {
      "file": "./lib/firebase/admin.ts",
      "line": 119,
      "service": "storage",
      "content": "adminStorage = {} as Storage;"
    },
    {
      "file": "./lib/firebase/admin.ts",
      "line": 121,
      "service": "storage",
      "content": "adminStorage = getStorage(app);"
    },
    {
      "file": "./lib/firebase/admin.ts",
      "line": 124,
      "service": "storage",
      "content": "return adminStorage;"
    },
    {
      "file": "./lib/firebase/admin.ts",
      "line": 132,
      "service": "auth",
      "content": "const auth = getAdminAuth();"
    },
    {
      "file": "./lib/firebase/admin.ts",
      "line": 133,
      "service": "auth",
      "content": "const decodedToken = await auth.verifyIdToken(token);"
    },
    {
      "file": "./lib/hooks/useOfflineSupport.ts",
      "line": 94,
      "service": "storage",
      "content": "// Try to store in localStorage for persistence"
    },
    {
      "file": "./lib/hooks/useOfflineSupport.ts",
      "line": 96,
      "service": "storage",
      "content": "const existingQueue = JSON.parse(localStorage.getItem('offlineQueue') || '[]');"
    },
    {
      "file": "./lib/hooks/useOfflineSupport.ts",
      "line": 98,
      "service": "storage",
      "content": "localStorage.setItem('offlineQueue', JSON.stringify(existingQueue));"
    },
    {
      "file": "./lib/hooks/useOfflineSupport.ts",
      "line": 142,
      "service": "storage",
      "content": "// Update localStorage"
    },
    {
      "file": "./lib/hooks/useOfflineSupport.ts",
      "line": 144,
      "service": "storage",
      "content": "localStorage.setItem('offlineQueue', JSON.stringify(offlineQueue));"
    },
    {
      "file": "./lib/hooks/useOfflineSupport.ts",
      "line": 185,
      "service": "storage",
      "content": "const persistedQueue = JSON.parse(localStorage.getItem('offlineQueue') || '[]');"
    },
    {
      "file": "./lib/hooks/useOfflineSupport.ts",
      "line": 212,
      "service": "storage",
      "content": "localStorage.removeItem('offlineQueue');"
    },
    {
      "file": "./lib/hooks/useRealtimeFirestore.ts",
      "line": 15,
      "service": "firestore",
      "content": "} from 'firebase/firestore';"
    },
    {
      "file": "./lib/hooks/useRealtimeFirestore.ts",
      "line": 17,
      "service": "auth",
      "content": "import { useAuth } from '@/contexts/AuthContext';"
    },
    {
      "file": "./lib/hooks/useRealtimeFirestore.ts",
      "line": 29,
      "service": "auth",
      "content": "const { user } = useAuth();"
    },
    {
      "file": "./lib/hooks/useRealtimeFirestore.ts",
      "line": 84,
      "service": "auth",
      "content": "const { user, loading: authLoading } = useAuth();"
    },
    {
      "file": "./lib/hooks/useRealtimeFirestore.ts",
      "line": 100,
      "service": "auth",
      "content": "if (authLoading || !user) {"
    },
    {
      "file": "./lib/hooks/useRealtimeFirestore.ts",
      "line": 101,
      "service": "auth",
      "content": "if (!authLoading) {"
    },
    {
      "file": "./lib/hooks/useRealtimeFirestore.ts",
      "line": 133,
      "service": "auth",
      "content": "}, [user, authLoading, mutate]);"
    },
    {
      "file": "./lib/hooks/useRealtimeFirestore.ts",
      "line": 138,
      "service": "auth",
      "content": "isLoading: authLoading || isLoading,"
    },
    {
      "file": "./lib/hooks/useRealtimeFirestore.ts",
      "line": 198,
      "service": "auth",
      "content": "const { user, loading: authLoading } = useAuth();"
    },
    {
      "file": "./lib/hooks/useRealtimeFirestore.ts",
      "line": 209,
      "service": "auth",
      "content": "const { user, loading: authLoading } = useAuth();"
    },
    {
      "file": "./lib/hooks/useRealtimeFirestore.ts",
      "line": 225,
      "service": "auth",
      "content": "if (authLoading || !user || !interviewId) {"
    },
    {
      "file": "./lib/hooks/useRealtimeFirestore.ts",
      "line": 226,
      "service": "auth",
      "content": "if (!authLoading) {"
    },
    {
      "file": "./lib/hooks/useRealtimeFirestore.ts",
      "line": 260,
      "service": "auth",
      "content": "}, [interviewId, user, authLoading, mutate]);"
    },
    {
      "file": "./lib/hooks/useRealtimeFirestore.ts",
      "line": 265,
      "service": "auth",
      "content": "isLoading: authLoading || isLoading,"
    },
    {
      "file": "./lib/hooks/useRealtimeFirestore.ts",
      "line": 272,
      "service": "auth",
      "content": "const { user } = useAuth();"
    },
    {
      "file": "./lib/hooks/useCommunityInterview.ts",
      "line": 5,
      "service": "firestore",
      "content": "import { doc, getDoc } from 'firebase/firestore';"
    },
    {
      "file": "./lib/hooks/useFirestore.ts",
      "line": 13,
      "service": "firestore",
      "content": "} from 'firebase/firestore';"
    },
    {
      "file": "./lib/hooks/useFirestore.ts",
      "line": 15,
      "service": "auth",
      "content": "import { useAuth } from '@/contexts/AuthContext';"
    },
    {
      "file": "./lib/hooks/useFirestore.ts",
      "line": 16,
      "service": "auth",
      "content": "import { auth } from '@/firebase/client';"
    },
    {
      "file": "./lib/hooks/useFirestore.ts",
      "line": 17,
      "service": "auth",
      "content": "import { onAuthStateChanged } from 'firebase/auth';"
    },
    {
      "file": "./lib/hooks/useFirestore.ts",
      "line": 24,
      "service": "auth",
      "content": "const { user, loading: authLoading } = useAuth();"
    },
    {
      "file": "./lib/hooks/useFirestore.ts",
      "line": 28,
      "service": "auth",
      "content": "if (authLoading) return; // Wait for auth to resolve"
    },
    {
      "file": "./lib/hooks/useFirestore.ts",
      "line": 62,
      "service": "auth",
      "content": "}, [user, authLoading]);"
    },
    {
      "file": "./lib/hooks/useFirestore.ts",
      "line": 64,
      "service": "auth",
      "content": "return { interviews, loading: authLoading || localLoading, error };"
    },
    {
      "file": "./lib/hooks/useFirestore.ts",
      "line": 72,
      "service": "auth",
      "content": "const { user, loading: authLoading } = useAuth();"
    },
    {
      "file": "./lib/hooks/useFirestore.ts",
      "line": 76,
      "service": "auth",
      "content": "if (authLoading) return; // Wait for auth to resolve"
    },
    {
      "file": "./lib/hooks/useFirestore.ts",
      "line": 112,
      "service": "auth",
      "content": "}, [user, authLoading]);"
    },
    {
      "file": "./lib/hooks/useFirestore.ts",
      "line": 114,
      "service": "auth",
      "content": "return { interviews, loading: authLoading || localLoading, error };"
    },
    {
      "file": "./lib/hooks/useFirestore.ts",
      "line": 117,
      "service": "auth",
      "content": "// Hook for fetching a specific interview (with auth check)"
    },
    {
      "file": "./lib/hooks/useFirestore.ts",
      "line": 122,
      "service": "auth",
      "content": "const { user, loading: authLoading } = useAuth();"
    },
    {
      "file": "./lib/hooks/useFirestore.ts",
      "line": 132,
      "service": "auth",
      "content": "if (authLoading) return; // Wait for auth to resolve"
    },
    {
      "file": "./lib/hooks/useFirestore.ts",
      "line": 167,
      "service": "auth",
      "content": "}, [interviewId, user, authLoading]);"
    },
    {
      "file": "./lib/hooks/useFirestore.ts",
      "line": 169,
      "service": "auth",
      "content": "return { interview, loading: authLoading || localLoading, error };"
    },
    {
      "file": "./lib/hooks/useFirestore.ts",
      "line": 178,
      "service": "auth",
      "content": "const { user, loading: authLoading } = useAuth();"
    },
    {
      "file": "./lib/hooks/useFirestore.ts",
      "line": 180,
      "service": "auth",
      "content": "// Wait for Firebase Auth to be ready"
    },
    {
      "file": "./lib/hooks/useFirestore.ts",
      "line": 182,
      "service": "auth",
      "content": "const unsubscribe = onAuthStateChanged(auth, (firebaseUser) => {"
    },
    {
      "file": "./lib/hooks/useFirestore.ts",
      "line": 184,
      "service": "auth",
      "content": "if (!firebaseUser && user) {"
    },
    {
      "file": "./lib/hooks/useFirestore.ts",
      "line": 185,
      "service": "auth",
      "content": "// Firebase auth is not ready but we have a user from server context"
    },
    {
      "file": "./lib/hooks/useFirestore.ts",
      "line": 186,
      "service": "auth",
      "content": "console.log('Firebase auth state not ready, but user exists from server');"
    },
    {
      "file": "./lib/hooks/useFirestore.ts",
      "line": 201,
      "service": "auth",
      "content": "if (authLoading || !firebaseReady) return; // Wait for both auth and Firebase to resolve"
    },
    {
      "file": "./lib/hooks/useFirestore.ts",
      "line": 209,
      "service": "auth",
      "content": "// Check if Firebase user is authenticated"
    },
    {
      "file": "./lib/hooks/useFirestore.ts",
      "line": 210,
      "service": "auth",
      "content": "const currentUser = auth.currentUser;"
    },
    {
      "file": "./lib/hooks/useFirestore.ts",
      "line": 212,
      "service": "auth",
      "content": "console.error('Firebase Auth user not found, but user context exists');"
    },
    {
      "file": "./lib/hooks/useFirestore.ts",
      "line": 213,
      "service": "auth",
      "content": "setError('Authentication required. Please sign in again.');"
    },
    {
      "file": "./lib/hooks/useFirestore.ts",
      "line": 247,
      "service": "auth",
      "content": "setError('Permission denied. Please check your authentication.');"
    },
    {
      "file": "./lib/hooks/useFirestore.ts",
      "line": 259,
      "service": "auth",
      "content": "}, [interviewId, user, authLoading, firebaseReady]);"
    },
    {
      "file": "./lib/hooks/useFirestore.ts",
      "line": 261,
      "service": "auth",
      "content": "return { feedback, loading: authLoading || localLoading || !firebaseReady, error };"
    },
    {
      "file": "./lib/actions/feedback.action.ts",
      "line": 7,
      "service": "auth",
      "content": "return { success: false, feedback: null, error: 'Static mode', details: 'Auth disabled in static mode' };"
    },
    {
      "file": "./lib/actions/auth.action.ts",
      "line": 3,
      "service": "auth",
      "content": "console.warn('Auth disabled in static mode');"
    },
    {
      "file": "./lib/actions/auth.action.ts",
      "line": 4,
      "service": "auth",
      "content": "return { success: false, error: 'Static mode', message: 'Auth disabled in static mode' };"
    },
    {
      "file": "./lib/actions/auth.action.ts",
      "line": 23,
      "service": "auth",
      "content": "export async function isAuthenticated() {"
    },
    {
      "file": "./lib/services/azure-cosmos-service.ts",
      "line": 73,
      "service": "storage",
      "content": "storageProvider: 'azure' | 'firebase';"
    },
    {
      "file": "./lib/services/azure-cosmos-service.ts",
      "line": 892,
      "service": "firestore",
      "content": "// Profile operations (for Firestore profiles collection)"
    },
    {
      "file": "./lib/services/azure-cosmos-service.ts",
      "line": 945,
      "service": "firestore",
      "content": "// Generic query operations for complex Firestore-like queries"
    },
    {
      "file": "./lib/services/firebase-resume-service.ts",
      "line": 1,
      "service": "firestore",
      "content": "import { FieldValue } from 'firebase-admin/firestore';"
    },
    {
      "file": "./lib/services/firebase-resume-service.ts",
      "line": 2,
      "service": "firestore",
      "content": "import { getAdminStorage, getAdminFirestore } from '../firebase/admin';"
    },
    {
      "file": "./lib/services/firebase-resume-service.ts",
      "line": 61,
      "service": "storage",
      "content": "* Upload resume file to Firebase Cloud Storage"
    },
    {
      "file": "./lib/services/firebase-resume-service.ts",
      "line": 63,
      "service": "storage",
      "content": "export async function uploadResumeToStorage("
    },
    {
      "file": "./lib/services/firebase-resume-service.ts",
      "line": 70,
      "service": "storage",
      "content": "const storage = getAdminStorage();"
    },
    {
      "file": "./lib/services/firebase-resume-service.ts",
      "line": 71,
      "service": "storage",
      "content": "const bucket = storage.bucket();"
    },
    {
      "file": "./lib/services/firebase-resume-service.ts",
      "line": 90,
      "service": "storage",
      "content": "const fileUrl = `https://storage.googleapis.com/${bucket.name}/${filePath}`;"
    },
    {
      "file": "./lib/services/firebase-resume-service.ts",
      "line": 94,
      "service": "storage",
      "content": "console.error('Error uploading resume to storage:', error);"
    },
    {
      "file": "./lib/services/firebase-resume-service.ts",
      "line": 95,
      "service": "storage",
      "content": "throw new Error('Failed to upload resume to cloud storage');"
    },
    {
      "file": "./lib/services/firebase-resume-service.ts",
      "line": 100,
      "service": "storage",
      "content": "* Delete resume file from Firebase Cloud Storage"
    },
    {
      "file": "./lib/services/firebase-resume-service.ts",
      "line": 102,
      "service": "storage",
      "content": "export async function deleteResumeFromStorage(filePath: string): Promise<void> {"
    },
    {
      "file": "./lib/services/firebase-resume-service.ts",
      "line": 104,
      "service": "storage",
      "content": "const storage = getAdminStorage();"
    },
    {
      "file": "./lib/services/firebase-resume-service.ts",
      "line": 105,
      "service": "storage",
      "content": "const bucket = storage.bucket();"
    },
    {
      "file": "./lib/services/firebase-resume-service.ts",
      "line": 114,
      "service": "storage",
      "content": "console.error('Error deleting resume from storage:', error);"
    },
    {
      "file": "./lib/services/firebase-resume-service.ts",
      "line": 121,
      "service": "firestore",
      "content": "* Get user's existing resume from Firestore"
    },
    {
      "file": "./lib/services/firebase-resume-service.ts",
      "line": 125,
      "service": "firestore",
      "content": "const db = getAdminFirestore();"
    },
    {
      "file": "./lib/services/firebase-resume-service.ts",
      "line": 140,
      "service": "firestore",
      "content": "* Save resume data to Firestore"
    },
    {
      "file": "./lib/services/firebase-resume-service.ts",
      "line": 142,
      "service": "firestore",
      "content": "export async function saveResumeToFirestore(resumeData: ResumeData): Promise<string> {"
    },
    {
      "file": "./lib/services/firebase-resume-service.ts",
      "line": 144,
      "service": "firestore",
      "content": "const db = getAdminFirestore();"
    },
    {
      "file": "./lib/services/firebase-resume-service.ts",
      "line": 159,
      "service": "firestore",
      "content": "console.error('Error saving resume to Firestore:', error);"
    },
    {
      "file": "./lib/services/firebase-resume-service.ts",
      "line": 165,
      "service": "firestore",
      "content": "* Delete user's existing resume (both storage and Firestore)"
    },
    {
      "file": "./lib/services/firebase-resume-service.ts",
      "line": 172,
      "service": "storage",
      "content": "// Delete from storage"
    },
    {
      "file": "./lib/services/firebase-resume-service.ts",
      "line": 173,
      "service": "storage",
      "content": "await deleteResumeFromStorage(existingResume.filePath);"
    },
    {
      "file": "./lib/services/firebase-resume-service.ts",
      "line": 175,
      "service": "firestore",
      "content": "// Delete from Firestore"
    },
    {
      "file": "./lib/services/firebase-resume-service.ts",
      "line": 176,
      "service": "firestore",
      "content": "const db = getAdminFirestore();"
    },
    {
      "file": "./lib/services/firebase-resume-service.ts",
      "line": 203,
      "service": "storage",
      "content": "// Upload new resume to storage"
    },
    {
      "file": "./lib/services/firebase-resume-service.ts",
      "line": 204,
      "service": "storage",
      "content": "const { fileUrl, filePath } = await uploadResumeToStorage("
    },
    {
      "file": "./lib/services/firebase-resume-service.ts",
      "line": 227,
      "service": "firestore",
      "content": "// Save to Firestore"
    },
    {
      "file": "./lib/services/firebase-resume-service.ts",
      "line": 228,
      "service": "firestore",
      "content": "const docId = await saveResumeToFirestore(resumeData);"
    },
    {
      "file": "./lib/services/azure-ai-service.ts",
      "line": 2,
      "service": "auth",
      "content": "import { AzureKeyCredential } from '@azure/core-auth';"
    },
    {
      "file": "./lib/services/azure-openai.ts",
      "line": 51,
      "service": "auth",
      "content": "* - Authentication errors (401, 403)"
    },
    {
      "file": "./lib/services/azure-openai.ts",
      "line": 94,
      "service": "auth",
      "content": "return new Error('Azure OpenAI authentication failed. Please check your API key.');"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 1,
      "service": "firestore",
      "content": "import { BlobServiceClient, BlobSASPermissions, generateBlobSASQueryParameters, StorageSharedKeyCredential, BlobSASSignatureValues, SASProtocol } from '@azure/storage-blob';"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 22,
      "service": "storage",
      "content": "class AzureBlobStorageService {"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 34,
      "service": "storage",
      "content": "* Initialize the Azure Blob Storage service"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 42,
      "service": "storage",
      "content": "accountName: process.env.AZURE_STORAGE_ACCOUNT_NAME || secrets.azureStorageAccountName || '',"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 43,
      "service": "storage",
      "content": "accountKey: process.env.AZURE_STORAGE_ACCOUNT_KEY || secrets.azureStorageAccountKey || '',"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 48,
      "service": "storage",
      "content": "console.warn('⚠️ Azure Blob Storage credentials not found, falling back to Firebase');"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 53,
      "service": "storage",
      "content": "const sharedKeyCredential = new StorageSharedKeyCredential("
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 66,
      "service": "storage",
      "content": "console.log('✅ Azure Blob Storage service initialized');"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 69,
      "service": "storage",
      "content": "console.error('❌ Failed to initialize Azure Blob Storage:', error);"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 70,
      "service": "storage",
      "content": "logServerError(error as Error, { service: 'azure-blob-storage', action: 'initialize' });"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 80,
      "service": "storage",
      "content": "throw new Error('Azure Blob Storage service not initialized');"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 105,
      "service": "storage",
      "content": "* Upload resume file to Azure Blob Storage"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 114,
      "service": "storage",
      "content": "throw new Error('Azure Blob Storage service not initialized');"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 141,
      "service": "storage",
      "content": "console.log(`✅ Resume uploaded to Azure Blob Storage: ${blobName}`);"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 149,
      "service": "storage",
      "content": "console.error('Failed to upload resume to Azure Blob Storage:', error);"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 151,
      "service": "storage",
      "content": "service: 'azure-blob-storage',"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 166,
      "service": "storage",
      "content": "throw new Error('Azure Blob Storage service not initialized');"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 174,
      "service": "storage",
      "content": "const sharedKeyCredential = new StorageSharedKeyCredential("
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 199,
      "service": "storage",
      "content": "service: 'azure-blob-storage',"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 209,
      "service": "storage",
      "content": "* Delete resume from Azure Blob Storage"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 213,
      "service": "storage",
      "content": "console.warn('Azure Blob Storage service not initialized, skipping delete');"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 223,
      "service": "storage",
      "content": "console.log(`✅ Resume deleted from Azure Blob Storage: ${blobName}`);"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 225,
      "service": "storage",
      "content": "console.error('Failed to delete resume from Azure Blob Storage:', error);"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 227,
      "service": "storage",
      "content": "service: 'azure-blob-storage',"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 241,
      "service": "storage",
      "content": "throw new Error('Azure Blob Storage service not initialized');"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 264,
      "service": "storage",
      "content": "* Upload profile picture to Azure Blob Storage"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 273,
      "service": "storage",
      "content": "throw new Error('Azure Blob Storage service not initialized');"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 300,
      "service": "storage",
      "content": "console.log(`✅ Profile picture uploaded to Azure Blob Storage: ${blobName}`);"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 307,
      "service": "storage",
      "content": "console.error('Failed to upload profile picture to Azure Blob Storage:', error);"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 309,
      "service": "storage",
      "content": "service: 'azure-blob-storage',"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 320,
      "service": "storage",
      "content": "* Upload general file to Azure Blob Storage"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 331,
      "service": "storage",
      "content": "throw new Error('Azure Blob Storage service not initialized');"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 360,
      "service": "storage",
      "content": "console.log(`✅ File uploaded to Azure Blob Storage: ${blobName} in container ${containerName}`);"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 368,
      "service": "storage",
      "content": "console.error(`Failed to upload file to Azure Blob Storage container ${containerType}:`, error);"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 370,
      "service": "storage",
      "content": "service: 'azure-blob-storage',"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 390,
      "service": "storage",
      "content": "throw new Error('Azure Blob Storage service not initialized');"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 398,
      "service": "storage",
      "content": "const sharedKeyCredential = new StorageSharedKeyCredential("
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 429,
      "service": "storage",
      "content": "console.warn('Azure Blob Storage service not initialized, skipping delete');"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 439,
      "service": "storage",
      "content": "console.log(`✅ File deleted from Azure Blob Storage: ${blobName} in container ${containerName}`);"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 441,
      "service": "storage",
      "content": "console.error(`Failed to delete file from Azure Blob Storage container ${containerType}:`, error);"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 443,
      "service": "storage",
      "content": "service: 'azure-blob-storage',"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 458,
      "service": "storage",
      "content": "console.warn('Azure Blob Storage service not initialized, skipping delete');"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 494,
      "service": "storage",
      "content": "console.error('Failed to delete all user files from Azure Blob Storage:', error);"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 496,
      "service": "storage",
      "content": "service: 'azure-blob-storage',"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 512,
      "service": "storage",
      "content": "throw new Error('Azure Blob Storage service not initialized');"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 536,
      "service": "storage",
      "content": "throw new Error('Azure Blob Storage service not initialized');"
    },
    {
      "file": "./lib/services/azure-blob-storage.ts",
      "line": 561,
      "service": "storage",
      "content": "export const azureBlobStorage = new AzureBlobStorageService();"
    },
    {
      "file": "./lib/services/azure-gdpr-service.ts",
      "line": 2,
      "service": "storage",
      "content": "import { BlobServiceClient, ContainerClient } from '@azure/storage-blob';"
    },
    {
      "file": "./lib/services/azure-gdpr-service.ts",
      "line": 10,
      "service": "storage",
      "content": "* and audit logging, plus Azure Blob Storage for file deletion."
    },
    {
      "file": "./lib/services/azure-gdpr-service.ts",
      "line": 93,
      "service": "storage",
      "content": "* Initialize Azure services (Cosmos DB, Blob Storage, Key Vault)"
    },
    {
      "file": "./lib/services/azure-gdpr-service.ts",
      "line": 108,
      "service": "storage",
      "content": "// Initialize Blob Storage"
    },
    {
      "file": "./lib/services/azure-gdpr-service.ts",
      "line": 109,
      "service": "storage",
      "content": "await this.initializeBlobStorage();"
    },
    {
      "file": "./lib/services/azure-gdpr-service.ts",
      "line": 159,
      "service": "storage",
      "content": "private async initializeBlobStorage(): Promise<void> {"
    },
    {
      "file": "./lib/services/azure-gdpr-service.ts",
      "line": 161,
      "service": "storage",
      "content": "let connectionString = process.env.AZURE_STORAGE_CONNECTION_STRING;"
    },
    {
      "file": "./lib/services/azure-gdpr-service.ts",
      "line": 166,
      "service": "storage",
      "content": "const secret = await this.keyVaultClient.getSecret('storage-connection-string');"
    },
    {
      "file": "./lib/services/azure-gdpr-service.ts",
      "line": 169,
      "service": "storage",
      "content": "console.warn('Could not retrieve Storage connection from Key Vault:', keyVaultError);"
    },
    {
      "file": "./lib/services/azure-gdpr-service.ts",
      "line": 174,
      "service": "storage",
      "content": "throw new Error('Azure Storage connection string not found in environment or Key Vault');"
    },
    {
      "file": "./lib/services/azure-gdpr-service.ts",
      "line": 179,
      "service": "storage",
      "content": "console.log('✅ Azure Blob Storage initialized for GDPR service');"
    },
    {
      "file": "./lib/services/azure-gdpr-service.ts",
      "line": 181,
      "service": "storage",
      "content": "console.error('❌ Failed to initialize Blob Storage:', error);"
    },
    {
      "file": "./lib/services/azure-gdpr-service.ts",
      "line": 408,
      "service": "storage",
      "content": "// Delete from Azure Blob Storage"
    },
    {
      "file": "./lib/services/azure-gdpr-service.ts",
      "line": 410,
      "service": "storage",
      "content": "const deletedBlobContainers = await this.deleteFromBlobStorage(request.userId);"
    },
    {
      "file": "./lib/services/azure-gdpr-service.ts",
      "line": 412,
      "service": "storage",
      "content": "deletedData.push(`blob-storage (${deletedBlobContainers.join(', ')})`);"
    },
    {
      "file": "./lib/services/azure-gdpr-service.ts",
      "line": 415,
      "service": "storage",
      "content": "const errorMsg = `Failed to delete from blob storage: ${error}`;"
    },
    {
      "file": "./lib/services/azure-gdpr-service.ts",
      "line": 667,
      "service": "storage",
      "content": "* Delete user files from Azure Blob Storage"
    },
    {
      "file": "./lib/services/azure-gdpr-service.ts",
      "line": 669,
      "service": "storage",
      "content": "private async deleteFromBlobStorage(userId: string): Promise<string[]> {"
    },
    {
      "file": "./lib/services/email-verification-service.ts",
      "line": 3,
      "service": "firestore",
      "content": "import { getAdminFirestore } from '@/lib/firebase/admin';"
    },
    {
      "file": "./lib/services/email-verification-service.ts",
      "line": 4,
      "service": "firestore",
      "content": "import { FieldValue } from 'firebase-admin/firestore';"
    },
    {
      "file": "./lib/services/email-verification-service.ts",
      "line": 10,
      "service": "firestore",
      "content": "private _db: ReturnType<typeof getAdminFirestore> | null = null;"
    },
    {
      "file": "./lib/services/email-verification-service.ts",
      "line": 14,
      "service": "firestore",
      "content": "this._db = getAdminFirestore();"
    },
    {
      "file": "./lib/services/email-verification-service.ts",
      "line": 50,
      "service": "auth",
      "content": "const baseUrl = process.env.NEXTAUTH_URL || process.env.AZURE_APP_SERVICE_URL || 'http://localhost:3000';"
    },
    {
      "file": "./lib/services/email-verification-service.ts",
      "line": 51,
      "service": "auth",
      "content": "const verificationUrl = `${baseUrl}/api/auth/verify-email?token=${token}`;"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 1,
      "service": "firestore",
      "content": "import { FieldValue } from 'firebase-admin/firestore';"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 2,
      "service": "firestore",
      "content": "import { getAdminFirestore } from '@/lib/firebase/admin';"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 3,
      "service": "storage",
      "content": "import { azureBlobStorage } from './azure-blob-storage';"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 6,
      "service": "storage",
      "content": "uploadResumeToStorage,"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 7,
      "service": "storage",
      "content": "deleteResumeFromStorage,"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 23,
      "service": "storage",
      "content": "storageProvider: 'azure' | 'firebase';"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 46,
      "service": "storage",
      "content": "await azureBlobStorage.initialize();"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 60,
      "service": "storage",
      "content": "* Process uploaded resume: storage, extraction, and data persistence"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 78,
      "service": "storage",
      "content": "// Step 2: Upload to storage (Azure Blob Storage with Firebase fallback)"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 79,
      "service": "storage",
      "content": "const storageResult = await this.uploadToStorage(userId, fileBuffer, fileName, mimeType);"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 90,
      "service": "firestore",
      "content": "// Step 5: Save to Firestore profiles collection"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 91,
      "service": "firestore",
      "content": "const resumeId = await this.saveToFirestore(userId, {"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 93,
      "service": "storage",
      "content": "fileUrl: storageResult.fileUrl,"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 94,
      "service": "storage",
      "content": "filePath: storageResult.filePath,"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 95,
      "service": "storage",
      "content": "blobName: storageResult.blobName,"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 96,
      "service": "storage",
      "content": "sasUrl: storageResult.sasUrl,"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 104,
      "service": "storage",
      "content": "storageProvider: storageResult.provider"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 114,
      "service": "storage",
      "content": "fileUrl: storageResult.fileUrl,"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 115,
      "service": "storage",
      "content": "sasUrl: storageResult.sasUrl,"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 118,
      "service": "storage",
      "content": "storageProvider: storageResult.provider"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 140,
      "service": "storage",
      "content": "* Upload resume to storage (Azure Blob with Firebase fallback)"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 142,
      "service": "storage",
      "content": "private async uploadToStorage("
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 155,
      "service": "storage",
      "content": "// Try Azure Blob Storage first"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 156,
      "service": "storage",
      "content": "if (azureBlobStorage.isReady()) {"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 158,
      "service": "storage",
      "content": "console.log('📤 Uploading to Azure Blob Storage...');"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 159,
      "service": "storage",
      "content": "const result = await azureBlobStorage.uploadResume(userId, fileBuffer, fileName, mimeType);"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 168,
      "service": "storage",
      "content": "console.warn('⚠️ Azure Blob Storage upload failed, falling back to Firebase:', error);"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 173,
      "service": "storage",
      "content": "// Fallback to Firebase Storage"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 174,
      "service": "storage",
      "content": "console.log('📤 Uploading to Firebase Storage...');"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 175,
      "service": "storage",
      "content": "const { fileUrl, filePath } = await uploadResumeToStorage(userId, fileBuffer, fileName, mimeType);"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 353,
      "service": "firestore",
      "content": "* Save resume data to Firestore profiles collection"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 355,
      "service": "firestore",
      "content": "private async saveToFirestore(userId: string, resumeData: any): Promise<string> {"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 357,
      "service": "firestore",
      "content": "const db = getAdminFirestore();"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 370,
      "service": "firestore",
      "content": "console.log(`✅ Resume data saved to Firestore for user: ${userId}`);"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 373,
      "service": "firestore",
      "content": "console.error('Failed to save resume data to Firestore:', error);"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 384,
      "service": "firestore",
      "content": "const db = getAdminFirestore();"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 390,
      "service": "storage",
      "content": "// Delete from storage based on provider"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 391,
      "service": "storage",
      "content": "if (profileData?.metadata?.storageProvider === 'azure' && profileData?.blobName) {"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 392,
      "service": "storage",
      "content": "await azureBlobStorage.deleteResume(profileData.blobName);"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 394,
      "service": "storage",
      "content": "await deleteResumeFromStorage(profileData.filePath);"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 409,
      "service": "firestore",
      "content": "* Get user's resume data from Firestore"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 413,
      "service": "firestore",
      "content": "const db = getAdminFirestore();"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 435,
      "service": "storage",
      "content": "if (resumeData?.blobName && azureBlobStorage.isReady()) {"
    },
    {
      "file": "./lib/services/resume-processing-service.ts",
      "line": 436,
      "service": "storage",
      "content": "const result = await azureBlobStorage.generateSASUrl(resumeData.blobName, expiryHours);"
    },
    {
      "file": "./lib/services/firebase-verification.ts",
      "line": 1,
      "service": "auth",
      "content": "import { getAuthService } from \"@/firebase/admin\";"
    },
    {
      "file": "./lib/services/firebase-verification.ts",
      "line": 8,
      "service": "auth",
      "content": "private readonly FIREBASE_AUTH_URL = 'https://identitytoolkit.googleapis.com/v1/accounts:lookup';"
    },
    {
      "file": "./lib/services/firebase-verification.ts",
      "line": 17,
      "service": "auth",
      "content": "// Safely get auth service with better error handling"
    },
    {
      "file": "./lib/services/firebase-verification.ts",
      "line": 18,
      "service": "auth",
      "content": "let adminAuth;"
    },
    {
      "file": "./lib/services/firebase-verification.ts",
      "line": 20,
      "service": "auth",
      "content": "adminAuth = getAuthService();"
    },
    {
      "file": "./lib/services/firebase-verification.ts",
      "line": 38,
      "service": "auth",
      "content": "const verificationPromise = adminAuth.verifyIdToken(idToken, true);"
    },
    {
      "file": "./lib/services/firebase-verification.ts",
      "line": 95,
      "service": "auth",
      "content": "const response = await fetch(`${this.FIREBASE_AUTH_URL}?key=${this.FIREBASE_WEB_API_KEY}`, {"
    },
    {
      "file": "./lib/services/firebase-verification.ts",
      "line": 126,
      "service": "auth",
      "content": "auth_time: parseInt(user.lastLoginAt) / 1000,"
    },
    {
      "file": "./lib/services/firebase-verification.ts",
      "line": 237,
      "service": "auth",
      "content": "// Safely get auth service with better error handling"
    },
    {
      "file": "./lib/services/firebase-verification.ts",
      "line": 238,
      "service": "auth",
      "content": "let adminAuth;"
    },
    {
      "file": "./lib/services/firebase-verification.ts",
      "line": 240,
      "service": "auth",
      "content": "adminAuth = getAuthService();"
    },
    {
      "file": "./lib/services/firebase-verification.ts",
      "line": 256,
      "service": "auth",
      "content": "const sessionCookie = await adminAuth.createSessionCookie(idToken, { expiresIn });"
    },
    {
      "file": "./lib/services/firebase-verification.ts",
      "line": 283,
      "service": "auth",
      "content": "const adminAuth = getAuthService();"
    },
    {
      "file": "./lib/services/firebase-verification.ts",
      "line": 284,
      "service": "auth",
      "content": "const decodedToken = await adminAuth.verifySessionCookie(sessionCookie, true);"
    },
    {
      "file": "./lib/services/gdpr-compliance-service.ts",
      "line": 1,
      "service": "firestore",
      "content": "import { getFirestore } from 'firebase-admin/firestore';"
    },
    {
      "file": "./lib/services/gdpr-compliance-service.ts",
      "line": 2,
      "service": "storage",
      "content": "import { azureBlobStorage } from '@/lib/services/azure-blob-storage';"
    },
    {
      "file": "./lib/services/gdpr-compliance-service.ts",
      "line": 41,
      "service": "firestore",
      "content": "private db: ReturnType<typeof getFirestore> | null = null;"
    },
    {
      "file": "./lib/services/gdpr-compliance-service.ts",
      "line": 207,
      "service": "firestore",
      "content": "// Delete from Firestore collections"
    },
    {
      "file": "./lib/services/gdpr-compliance-service.ts",
      "line": 223,
      "service": "storage",
      "content": "// Delete from Firebase Storage"
    },
    {
      "file": "./lib/services/gdpr-compliance-service.ts",
      "line": 224,
      "service": "storage",
      "content": "const storageDeleted = await this.deleteFromStorage(request.userId);"
    },
    {
      "file": "./lib/services/gdpr-compliance-service.ts",
      "line": 225,
      "service": "storage",
      "content": "if (storageDeleted) deletedData.push('storage');"
    },
    {
      "file": "./lib/services/gdpr-compliance-service.ts",
      "line": 410,
      "service": "storage",
      "content": "private async deleteFromStorage(userId: string): Promise<boolean> {"
    },
    {
      "file": "./lib/services/gdpr-compliance-service.ts",
      "line": 414,
      "service": "storage",
      "content": "// Try Azure Blob Storage first"
    },
    {
      "file": "./lib/services/gdpr-compliance-service.ts",
      "line": 415,
      "service": "storage",
      "content": "await azureBlobStorage.initialize();"
    },
    {
      "file": "./lib/services/gdpr-compliance-service.ts",
      "line": 416,
      "service": "storage",
      "content": "if (azureBlobStorage.isReady()) {"
    },
    {
      "file": "./lib/services/gdpr-compliance-service.ts",
      "line": 417,
      "service": "storage",
      "content": "console.log(`🗑️ Deleting Azure Blob Storage files for user ${userId}`);"
    },
    {
      "file": "./lib/services/gdpr-compliance-service.ts",
      "line": 418,
      "service": "storage",
      "content": "const deletedContainers = await azureBlobStorage.deleteAllUserFiles(userId);"
    },
    {
      "file": "./lib/services/gdpr-compliance-service.ts",
      "line": 425,
      "service": "storage",
      "content": "console.error('Error deleting from Azure Blob Storage:', azureError);"
    },
    {
      "file": "./lib/services/gdpr-compliance-service.ts",
      "line": 428,
      "service": "storage",
      "content": "// Also attempt Firebase Storage cleanup for legacy files"
    },
    {
      "file": "./lib/services/gdpr-compliance-service.ts",
      "line": 431,
      "service": "storage",
      "content": "const { getStorage } = await import('firebase-admin/storage');"
    },
    {
      "file": "./lib/services/gdpr-compliance-service.ts",
      "line": 432,
      "service": "storage",
      "content": "const storage = getStorage();"
    },
    {
      "file": "./lib/services/gdpr-compliance-service.ts",
      "line": 433,
      "service": "storage",
      "content": "const bucket = storage.bucket();"
    },
    {
      "file": "./lib/services/gdpr-compliance-service.ts",
      "line": 442,
      "service": "storage",
      "content": "console.log(`✅ Deleted ${files.length} legacy Firebase Storage files for user ${userId}`);"
    },
    {
      "file": "./lib/services/gdpr-compliance-service.ts",
      "line": 446,
      "service": "storage",
      "content": "console.error('Error deleting from Firebase Storage:', firebaseError);"
    },
    {
      "file": "./lib/services/notification-service.ts",
      "line": 346,
      "service": "storage",
      "content": "<mj-font name=\"Inter\" href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap\" />"
    },
    {
      "file": "./lib/services/notification-service.ts",
      "line": 422,
      "service": "auth",
      "content": "<mj-button background-color=\"#059669\" color=\"#ffffff\" href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/jobs/${jobData.jobId}\" target=\"_blank\">"
    },
    {
      "file": "./lib/services/notification-service.ts",
      "line": 433,
      "service": "auth",
      "content": "<a href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/settings/notifications\" style=\"color: #2563eb;\">Manage notification preferences</a>"
    },
    {
      "file": "./lib/services/notification-service.ts",
      "line": 462,
      "service": "storage",
      "content": "<mj-font name=\"Inter\" href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap\" />"
    },
    {
      "file": "./lib/services/notification-service.ts",
      "line": 528,
      "service": "auth",
      "content": "<mj-button background-color=\"#2563eb\" color=\"#ffffff\" href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/applications/${appData.applicationId}\" target=\"_blank\" padding-bottom=\"15px\">"
    },
    {
      "file": "./lib/services/notification-service.ts",
      "line": 531,
      "service": "auth",
      "content": "<mj-button background-color=\"#059669\" color=\"#ffffff\" href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/dashboard\" target=\"_blank\">"
    },
    {
      "file": "./lib/services/notification-service.ts",
      "line": 542,
      "service": "auth",
      "content": "<a href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/settings/automation\" style=\"color: #2563eb;\">Manage automation settings</a>"
    },
    {
      "file": "./lib/services/notification-service.ts",
      "line": 573,
      "service": "storage",
      "content": "<mj-font name=\"Inter\" href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap\" />"
    },
    {
      "file": "./lib/services/notification-service.ts",
      "line": 631,
      "service": "auth",
      "content": "<mj-button background-color=\"#2563eb\" color=\"#ffffff\" href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/applications/${followUpData.applicationId}/follow-up\" target=\"_blank\" padding-bottom=\"15px\">"
    },
    {
      "file": "./lib/services/notification-service.ts",
      "line": 634,
      "service": "auth",
      "content": "<mj-button background-color=\"#059669\" color=\"#ffffff\" href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/applications/${followUpData.applicationId}\" target=\"_blank\">"
    },
    {
      "file": "./lib/services/notification-service.ts",
      "line": 654,
      "service": "auth",
      "content": "<a href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/settings/follow-up\" style=\"color: #2563eb;\">Manage follow-up settings</a>"
    },
    {
      "file": "./lib/services/notification-service.ts",
      "line": 683,
      "service": "storage",
      "content": "<mj-font name=\"Inter\" href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap\" />"
    },
    {
      "file": "./lib/services/notification-service.ts",
      "line": 767,
      "service": "auth",
      "content": "<mj-button background-color=\"#2563eb\" color=\"#ffffff\" href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/dashboard\" target=\"_blank\" padding-bottom=\"15px\">"
    },
    {
      "file": "./lib/services/notification-service.ts",
      "line": 770,
      "service": "auth",
      "content": "<mj-button background-color=\"#059669\" color=\"#ffffff\" href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/jobs\" target=\"_blank\">"
    },
    {
      "file": "./lib/services/notification-service.ts",
      "line": 781,
      "service": "auth",
      "content": "<a href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/settings/notifications\" style=\"color: #2563eb;\">Manage notification preferences</a>"
    },
    {
      "file": "./lib/services/notification-service.ts",
      "line": 858,
      "service": "auth",
      "content": "<a href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/jobs/${jobData.jobId}\" class=\"button\" style=\"background-color: #059669;\">Manage in PrepBettr</a>"
    },
    {
      "file": "./lib/services/notification-service.ts",
      "line": 864,
      "service": "auth",
      "content": "<a href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/settings/notifications\" style=\"color: #2563eb;\">Manage notification preferences</a>"
    },
    {
      "file": "./lib/services/notification-service.ts",
      "line": 920,
      "service": "auth",
      "content": "<a href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/applications/${appData.applicationId}\" class=\"button\">Track Application</a>"
    },
    {
      "file": "./lib/services/notification-service.ts",
      "line": 921,
      "service": "auth",
      "content": "<a href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/dashboard\" class=\"button\" style=\"background-color: #059669;\">View Dashboard</a>"
    },
    {
      "file": "./lib/services/notification-service.ts",
      "line": 927,
      "service": "auth",
      "content": "<a href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/settings/automation\" style=\"color: #2563eb;\">Manage automation settings</a>"
    },
    {
      "file": "./lib/services/notification-service.ts",
      "line": 982,
      "service": "auth",
      "content": "<a href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/applications/${followUpData.applicationId}/follow-up\" class=\"button\">Send Follow-up</a>"
    },
    {
      "file": "./lib/services/notification-service.ts",
      "line": 983,
      "service": "auth",
      "content": "<a href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/applications/${followUpData.applicationId}\" class=\"button\" style=\"background-color: #059669;\">View Application</a>"
    },
    {
      "file": "./lib/services/notification-service.ts",
      "line": 994,
      "service": "auth",
      "content": "<a href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/settings/follow-up\" style=\"color: #2563eb;\">Manage follow-up settings</a>"
    },
    {
      "file": "./lib/services/notification-service.ts",
      "line": 1068,
      "service": "auth",
      "content": "<a href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/dashboard\" class=\"button\">View Full Dashboard</a>"
    },
    {
      "file": "./lib/services/notification-service.ts",
      "line": 1069,
      "service": "auth",
      "content": "<a href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/jobs\" class=\"button\" style=\"background-color: #059669;\">Browse All Jobs</a>"
    },
    {
      "file": "./lib/services/notification-service.ts",
      "line": 1075,
      "service": "auth",
      "content": "<a href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/settings/notifications\" style=\"color: #2563eb;\">Manage notification preferences</a>"
    },
    {
      "file": "./lib/services/azure-openai-service.ts",
      "line": 72,
      "service": "auth",
      "content": "console.error('🔐 Authentication Error (401):');"
    },
    {
      "file": "./lib/services/keyword-optimizer-service.ts",
      "line": 93,
      "service": "auth",
      "content": "const fullPrompt = `You are an expert resume writer specializing in ATS optimization. Rewrite resume sections to include relevant keywords while maintaining authenticity and readability."
    },
    {
      "file": "./lib/services/keyword-optimizer-service.ts",
      "line": 294,
      "service": "auth",
      "content": "3. Maintaining authenticity while optimizing"
    },
    {
      "file": "./lib/services/keyword-optimizer-service.ts",
      "line": 308,
      "service": "auth",
      "content": "Optimize this ${section} section for ATS compatibility while maintaining authenticity."
    },
    {
      "file": "./lib/services/azure-token-service.ts",
      "line": 5,
      "service": "auth",
      "content": "export interface OAuthTokens {"
    },
    {
      "file": "./lib/services/azure-token-service.ts",
      "line": 24,
      "service": "auth",
      "content": "private tokenCache: Map<string, OAuthTokens> = new Map();"
    },
    {
      "file": "./lib/services/azure-token-service.ts",
      "line": 45,
      "service": "auth",
      "content": "* Store OAuth tokens securely in Azure Key Vault"
    },
    {
      "file": "./lib/services/azure-token-service.ts",
      "line": 47,
      "service": "auth",
      "content": "async storeTokens(portal: 'linkedin' | 'wellfound', userId: string, tokens: OAuthTokens): Promise<void> {"
    },
    {
      "file": "./lib/services/azure-token-service.ts",
      "line": 61,
      "service": "auth",
      "content": "throw new Error(`Failed to store OAuth tokens: ${error}`);"
    },
    {
      "file": "./lib/services/azure-token-service.ts",
      "line": 66,
      "service": "auth",
      "content": "* Retrieve OAuth tokens from Azure Key Vault"
    },
    {
      "file": "./lib/services/azure-token-service.ts",
      "line": 68,
      "service": "auth",
      "content": "async getTokens(portal: 'linkedin' | 'wellfound', userId: string): Promise<OAuthTokens | null> {"
    },
    {
      "file": "./lib/services/azure-token-service.ts",
      "line": 85,
      "service": "auth",
      "content": "const tokens: OAuthTokens = JSON.parse(result.value);"
    },
    {
      "file": "./lib/services/azure-token-service.ts",
      "line": 103,
      "service": "auth",
      "content": "needsRefresh(tokens: OAuthTokens): boolean {"
    },
    {
      "file": "./lib/services/azure-token-service.ts",
      "line": 109,
      "service": "auth",
      "content": "* Refresh OAuth tokens using refresh token"
    },
    {
      "file": "./lib/services/azure-token-service.ts",
      "line": 116,
      "service": "auth",
      "content": "): Promise<OAuthTokens | null> {"
    },
    {
      "file": "./lib/services/azure-token-service.ts",
      "line": 139,
      "service": "auth",
      "content": "const newTokens: OAuthTokens = {"
    },
    {
      "file": "./lib/services/azure-token-service.ts",
      "line": 254,
      "service": "auth",
      "content": "return 'https://www.linkedin.com/oauth/v2/accessToken';"
    },
    {
      "file": "./lib/services/azure-token-service.ts",
      "line": 256,
      "service": "auth",
      "content": "return 'https://api.wellfound.com/oauth/token'; // Note: Wellfound uses AngelList API"
    },
    {
      "file": "./lib/services/user-targeting.ts",
      "line": 1,
      "service": "auth",
      "content": "import { auth } from '@/firebase/client';"
    },
    {
      "file": "./lib/services/user-targeting.ts",
      "line": 53,
      "service": "auth",
      "content": "return auth.currentUser?.uid || null;"
    },
    {
      "file": "./lib/services/user-targeting.ts",
      "line": 72,
      "service": "storage",
      "content": "* This could be based on device fingerprinting, localStorage, etc."
    },
    {
      "file": "./lib/services/user-targeting.ts",
      "line": 76,
      "service": "storage",
      "content": "let anonymousId = localStorage.getItem('prep_anonymous_id');"
    },
    {
      "file": "./lib/services/user-targeting.ts",
      "line": 81,
      "service": "storage",
      "content": "localStorage.setItem('prep_anonymous_id', anonymousId);"
    },
    {
      "file": "./lib/services/cloud-functions-verification.ts",
      "line": 50,
      "service": "auth",
      "content": "'Authorization': `Bearer ${idToken}`, // Send token in header"
    },
    {
      "file": "./lib/services/cloud-functions-verification.ts",
      "line": 88,
      "service": "auth",
      "content": "'Authorization': `Bearer ${idToken}`,"
    },
    {
      "file": "./lib/services/job-notification-integration.ts",
      "line": 4,
      "service": "firestore",
      "content": "import { getAdminFirestore } from '@/lib/firebase/admin';"
    },
    {
      "file": "./lib/services/job-notification-integration.ts",
      "line": 79,
      "service": "firestore",
      "content": "private db = getAdminFirestore();"
    },
    {
      "file": "./lib/services/azure-functions-client.ts",
      "line": 5,
      "service": "auth",
      "content": "* including job automation, Firebase replacements (auth, GDPR), and other services."
    },
    {
      "file": "./lib/services/azure-functions-client.ts",
      "line": 8,
      "service": "storage",
      "content": "// import { QueueServiceClient } from '@azure/storage-queue';"
    },
    {
      "file": "./lib/services/azure-functions-client.ts",
      "line": 85,
      "service": "storage",
      "content": "const storageConnectionString = process.env.AZURE_STORAGE_CONNECTION_STRING;"
    },
    {
      "file": "./lib/services/azure-functions-client.ts",
      "line": 86,
      "service": "storage",
      "content": "if (storageConnectionString) {"
    },
    {
      "file": "./lib/services/azure-functions-client.ts",
      "line": 87,
      "service": "storage",
      "content": "// this.queueServiceClient = QueueServiceClient.fromConnectionString(storageConnectionString);"
    },
    {
      "file": "./lib/services/azure-functions-client.ts",
      "line": 268,
      "service": "firestore",
      "content": "// This would query the automation logs from storage or Application Insights"
    },
    {
      "file": "./lib/auth.ts",
      "line": 11,
      "service": "auth",
      "content": "// Extract token from Authorization header"
    },
    {
      "file": "./lib/auth.ts",
      "line": 12,
      "service": "auth",
      "content": "const authHeader = request.headers.get('authorization');"
    },
    {
      "file": "./lib/auth.ts",
      "line": 13,
      "service": "auth",
      "content": "if (!authHeader || !authHeader.startsWith('Bearer ')) {"
    },
    {
      "file": "./lib/auth.ts",
      "line": 17,
      "service": "auth",
      "content": "const token = authHeader.substring(7); // Remove \"Bearer \" prefix"
    },
    {
      "file": "./lib/auth.ts",
      "line": 25,
      "service": "auth",
      "content": "// 3. Validate the token against your auth system (Firebase Auth, etc.)"
    },
    {
      "file": "./lib/auth.ts",
      "line": 43,
      "service": "auth",
      "content": "export async function requireAuth(request: NextRequest): Promise<UserSession> {"
    },
    {
      "file": "./lib/auth.ts",
      "line": 46,
      "service": "auth",
      "content": "throw new Error('Authentication required');"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 21,
      "service": "storage",
      "content": "azureStorageAccountName?: string;"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 22,
      "service": "storage",
      "content": "azureStorageAccountKey?: string;"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 78,
      "service": "storage",
      "content": "azureFormRecognizerKey, azureFormRecognizerEndpoint, azureStorageAccountName, azureStorageAccountKey"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 91,
      "service": "storage",
      "content": "getOptionalSecret('azure-storage-account-name'),"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 92,
      "service": "storage",
      "content": "getOptionalSecret('azure-storage-account-key')"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 124,
      "service": "storage",
      "content": "azureStorageAccountName: azureStorageAccountName?.value,"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 125,
      "service": "storage",
      "content": "azureStorageAccountKey: azureStorageAccountKey?.value"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 150,
      "service": "storage",
      "content": "azureStorageAccountName: process.env.AZURE_STORAGE_ACCOUNT_NAME,"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 151,
      "service": "storage",
      "content": "azureStorageAccountKey: process.env.AZURE_STORAGE_ACCOUNT_KEY"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 219,
      "service": "storage",
      "content": "if (secrets.azureStorageAccountName) {"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 220,
      "service": "storage",
      "content": "process.env.AZURE_STORAGE_ACCOUNT_NAME = secrets.azureStorageAccountName;"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 222,
      "service": "storage",
      "content": "if (secrets.azureStorageAccountKey) {"
    },
    {
      "file": "./lib/azure-config.ts",
      "line": 223,
      "service": "storage",
      "content": "process.env.AZURE_STORAGE_ACCOUNT_KEY = secrets.azureStorageAccountKey;"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 1,
      "service": "functions",
      "content": "const functions = require('firebase-functions');"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 2,
      "service": "admin",
      "content": "const admin = require('firebase-admin');"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 12,
      "service": "auth",
      "content": "// Verify authentication"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 13,
      "service": "auth",
      "content": "if (!context.auth) {"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 15,
      "service": "auth",
      "content": "'unauthenticated',"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 16,
      "service": "auth",
      "content": "'Request must be authenticated'"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 21,
      "service": "auth",
      "content": "const requestingUserId = context.auth.uid;"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 24,
      "service": "auth",
      "content": "if (userId !== requestingUserId && !context.auth.token?.admin) {"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 34,
      "service": "firestore",
      "content": "const db = admin.firestore();"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 35,
      "service": "storage",
      "content": "const storage = admin.storage();"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 41,
      "service": "auth",
      "content": "requestedBy: context.auth.email || requestingUserId,"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 42,
      "service": "firestore",
      "content": "requestDate: admin.firestore.FieldValue.serverTimestamp(),"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 67,
      "service": "firestore",
      "content": "// Delete from Firestore collections"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 89,
      "service": "storage",
      "content": "// Delete from Firebase Storage"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 91,
      "service": "storage",
      "content": "const bucket = storage.bucket();"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 99,
      "service": "firestore",
      "content": "deletedCollections.push('storage');"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 100,
      "service": "storage",
      "content": "console.log(`Deleted ${files.length} files from storage`);"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 103,
      "service": "storage",
      "content": "console.error('Error deleting from storage:', error);"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 106,
      "service": "auth",
      "content": "// Delete the user's authentication record"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 108,
      "service": "auth",
      "content": "await admin.auth().deleteUser(userIdToDelete);"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 109,
      "service": "auth",
      "content": "deletedCollections.push('auth');"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 110,
      "service": "auth",
      "content": "console.log(`Deleted authentication record for user: ${userIdToDelete}`);"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 112,
      "service": "auth",
      "content": "console.error('Error deleting auth record:', error);"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 118,
      "service": "firestore",
      "content": "completedDate: admin.firestore.FieldValue.serverTimestamp(),"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 126,
      "service": "firestore",
      "content": "timestamp: admin.firestore.FieldValue.serverTimestamp(),"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 129,
      "service": "auth",
      "content": "requestedBy: context.auth.email || requestingUserId"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 150,
      "service": "firestore",
      "content": "failedAt: admin.firestore.FieldValue.serverTimestamp()"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 170,
      "service": "firestore",
      "content": "const db = admin.firestore();"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 195,
      "service": "auth",
      "content": "auth: { uid: 'system', email: 'system@prepbettr.com' }"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 206,
      "service": "firestore",
      "content": "failedAt: admin.firestore.FieldValue.serverTimestamp()"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 222,
      "service": "auth",
      "content": "// Verify authentication"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 223,
      "service": "auth",
      "content": "if (!context.auth) {"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 225,
      "service": "auth",
      "content": "'unauthenticated',"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 226,
      "service": "auth",
      "content": "'Request must be authenticated'"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 231,
      "service": "auth",
      "content": "const requestingUserId = context.auth.uid;"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 234,
      "service": "auth",
      "content": "if (userId && userId !== requestingUserId && !context.auth.token?.admin) {"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 242,
      "service": "firestore",
      "content": "const db = admin.firestore();"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 247,
      "service": "firestore",
      "content": "exportDate: admin.firestore.FieldValue.serverTimestamp(),"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 248,
      "service": "auth",
      "content": "requestedBy: context.auth.email || requestingUserId,"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 283,
      "service": "firestore",
      "content": "timestamp: admin.firestore.FieldValue.serverTimestamp(),"
    },
    {
      "file": "./functions/gdpr-functions.js",
      "line": 284,
      "service": "auth",
      "content": "requestedBy: context.auth.email || requestingUserId"
    },
    {
      "file": "./functions/index.js",
      "line": 1,
      "service": "functions",
      "content": "const functions = require('firebase-functions');"
    },
    {
      "file": "./functions/index.js",
      "line": 2,
      "service": "admin",
      "content": "const admin = require('firebase-admin');"
    },
    {
      "file": "./functions/index.js",
      "line": 10,
      "service": "firestore",
      "content": "exports.onUserPlanChange = functions.firestore"
    },
    {
      "file": "./functions/index.js",
      "line": 18,
      "service": "firestore",
      "content": "const db = admin.firestore();"
    },
    {
      "file": "./functions/index.js",
      "line": 36,
      "service": "firestore",
      "content": "const timestamp = admin.firestore.FieldValue.serverTimestamp();"
    },
    {
      "file": "./functions/index.js",
      "line": 38,
      "service": "firestore",
      "content": "// Batch update Firestore - reset counts and update limits"
    },
    {
      "file": "./functions/index.js",
      "line": 65,
      "service": "auth",
      "content": "res.set('Access-Control-Allow-Headers', 'Content-Type, Authorization');"
    },
    {
      "file": "./functions/index.js",
      "line": 74,
      "service": "auth",
      "content": "const authHeader = req.headers.authorization;"
    },
    {
      "file": "./functions/index.js",
      "line": 76,
      "service": "auth",
      "content": "if (!idToken && !authHeader) {"
    },
    {
      "file": "./functions/index.js",
      "line": 80,
      "service": "auth",
      "content": "const token = idToken || authHeader.split('Bearer ')[1];"
    },
    {
      "file": "./functions/index.js",
      "line": 87,
      "service": "auth",
      "content": "const decodedToken = await admin.auth().verifyIdToken(token, true);"
    },
    {
      "file": "./functions/index.js",
      "line": 113,
      "service": "auth",
      "content": "auth_time: decodedToken.auth_time,"
    },
    {
      "file": "./functions/index.js",
      "line": 125,
      "service": "auth",
      "content": "if (error.code === 'auth/id-token-expired') {"
    },
    {
      "file": "./functions/index.js",
      "line": 128,
      "service": "auth",
      "content": "} else if (error.code === 'auth/id-token-revoked') {"
    },
    {
      "file": "./functions/index.js",
      "line": 131,
      "service": "auth",
      "content": "} else if (error.code === 'auth/argument-error') {"
    },
    {
      "file": "./functions/index.js",
      "line": 150,
      "service": "auth",
      "content": "res.set('Access-Control-Allow-Headers', 'Content-Type, Authorization');"
    },
    {
      "file": "./functions/index.js",
      "line": 158,
      "service": "auth",
      "content": "const authHeader = req.headers.authorization;"
    },
    {
      "file": "./functions/index.js",
      "line": 161,
      "service": "auth",
      "content": "if (!authHeader) {"
    },
    {
      "file": "./functions/index.js",
      "line": 165,
      "service": "auth",
      "content": "const token = authHeader.split('Bearer ')[1];"
    },
    {
      "file": "./functions/index.js",
      "line": 170,
      "service": "auth",
      "content": "const decodedToken = await admin.auth().verifyIdToken(token, true);"
    },
    {
      "file": "./functions/index.js",
      "line": 173,
      "service": "auth",
      "content": "const userRecord = await admin.auth().getUser(decodedToken.uid);"
    },
    {
      "file": "./functions/index.js",
      "line": 208,
      "service": "auth",
      "content": "res.set('Access-Control-Allow-Headers', 'Content-Type, Authorization');"
    },
    {
      "file": "./functions/index.js",
      "line": 223,
      "service": "auth",
      "content": "const sessionCookie = await admin.auth().createSessionCookie(idToken, { expiresIn });"
    },
    {
      "file": "./functions/index.js",
      "line": 248,
      "service": "auth",
      "content": "res.set('Access-Control-Allow-Headers', 'Content-Type, Authorization');"
    },
    {
      "file": "./functions/index.js",
      "line": 263,
      "service": "auth",
      "content": "const decodedToken = await admin.auth().verifySessionCookie(sessionCookie, true);"
    },
    {
      "file": "./functions/index.js",
      "line": 289,
      "service": "auth",
      "content": "// Check if request is from an authenticated admin user"
    },
    {
      "file": "./functions/index.js",
      "line": 290,
      "service": "auth",
      "content": "if (!context.auth || !context.auth.token.admin) {"
    },
    {
      "file": "./functions/index.js",
      "line": 307,
      "service": "auth",
      "content": "await admin.auth().setCustomUserClaims(uid, claims);"
    },
    {
      "file": "./test-firestore-read.ts",
      "line": 34,
      "service": "firestore",
      "content": "console.log('Starting Firestore read operation tests...');"
    },
    {
      "file": "./e2e/smoke-tests.spec.ts",
      "line": 27,
      "service": "auth",
      "content": "test('Authentication flow is accessible', async ({ page }) => {"
    },
    {
      "file": "./e2e/smoke-tests.spec.ts",
      "line": 31,
      "service": "auth",
      "content": "const authSelectors = ["
    },
    {
      "file": "./e2e/smoke-tests.spec.ts",
      "line": 38,
      "service": "auth",
      "content": "'a[href*=\"auth\"]'"
    },
    {
      "file": "./e2e/smoke-tests.spec.ts",
      "line": 41,
      "service": "auth",
      "content": "let authFound = false;"
    },
    {
      "file": "./e2e/smoke-tests.spec.ts",
      "line": 42,
      "service": "auth",
      "content": "for (const selector of authSelectors) {"
    },
    {
      "file": "./e2e/smoke-tests.spec.ts",
      "line": 45,
      "service": "auth",
      "content": "authFound = true;"
    },
    {
      "file": "./e2e/smoke-tests.spec.ts",
      "line": 52,
      "service": "auth",
      "content": "expect(authFound).toBe(true);"
    },
    {
      "file": "./e2e/auth-performance.spec.ts",
      "line": 2,
      "service": "auth",
      "content": "import { AuthHelper, PerformanceHelper, NetworkHelper, TEST_USERS, getTestConfig } from './helpers/test-utils';"
    },
    {
      "file": "./e2e/auth-performance.spec.ts",
      "line": 4,
      "service": "auth",
      "content": "test.describe('Authentication Performance Tests', () => {"
    },
    {
      "file": "./e2e/auth-performance.spec.ts",
      "line": 5,
      "service": "auth",
      "content": "let authHelper: AuthHelper;"
    },
    {
      "file": "./e2e/auth-performance.spec.ts",
      "line": 10,
      "service": "auth",
      "content": "authHelper = new AuthHelper(page);"
    },
    {
      "file": "./e2e/auth-performance.spec.ts",
      "line": 14,
      "service": "auth",
      "content": "// Clear authentication state"
    },
    {
      "file": "./e2e/auth-performance.spec.ts",
      "line": 15,
      "service": "auth",
      "content": "await authHelper.clearAuthState();"
    },
    {
      "file": "./e2e/auth-performance.spec.ts",
      "line": 18,
      "service": "auth",
      "content": "test('should complete authentication flow within performance thresholds', async ({ page }) => {"
    },
    {
      "file": "./e2e/auth-performance.spec.ts",
      "line": 22,
      "service": "auth",
      "content": "// Measure complete authentication flow"
    },
    {
      "file": "./e2e/auth-performance.spec.ts",
      "line": 23,
      "service": "auth",
      "content": "const metrics = await performanceHelper.measureAuthFlowPerformance();"
    },
    {
      "file": "./e2e/auth-performance.spec.ts",
      "line": 29,
      "service": "auth",
      "content": "console.log(`- Total authentication flow: ${metrics.total}ms`);"
    },
    {
      "file": "./e2e/auth-performance.spec.ts",
      "line": 48,
      "service": "auth",
      "content": "test('should handle network monitoring during authentication', async ({ page }) => {"
    },
    {
      "file": "./e2e/auth-performance.spec.ts",
      "line": 49,
      "service": "auth",
      "content": "console.log('Testing network requests during authentication...');"
    },
    {
      "file": "./e2e/auth-performance.spec.ts",
      "line": 52,
      "service": "auth",
      "content": "const authRequests = await networkHelper.monitorAuthRequests();"
    },
    {
      "file": "./e2e/auth-performance.spec.ts",
      "line": 54,
      "service": "auth",
      "content": "// Perform authentication"
    },
    {
      "file": "./e2e/auth-performance.spec.ts",
      "line": 55,
      "service": "auth",
      "content": "await authHelper.signIn(TEST_USERS.existing);"
    },
    {
      "file": "./e2e/auth-performance.spec.ts",
      "line": 61,
      "service": "auth",
      "content": "console.log(`Captured ${authRequests.length} auth-related requests`);"
    },
    {
      "file": "./e2e/auth-performance.spec.ts",
      "line": 63,
      "service": "auth",
      "content": "// Look for critical auth API calls"
    },
    {
      "file": "./e2e/auth-performance.spec.ts",
      "line": 64,
      "service": "auth",
      "content": "const signInRequest = authRequests.find(req => req.url.includes('/api/auth/signin'));"
    },
    {
      "file": "./e2e/auth-performance.spec.ts",
      "line": 72,
      "service": "auth",
      "content": "const failedRequests = authRequests.filter(req => req.status >= 400);"
    },
    {
      "file": "./e2e/auth-performance.spec.ts",
      "line": 81,
      "service": "auth",
      "content": "test('should measure page load times across auth flow', async ({ page }) => {"
    },
    {
      "file": "./e2e/auth-performance.spec.ts",
      "line": 92,
      "service": "auth",
      "content": "// After authentication, measure dashboard load"
    },
    {
      "file": "./e2e/auth-performance.spec.ts",
      "line": 93,
      "service": "auth",
      "content": "await authHelper.signIn(TEST_USERS.existing);"
    },
    {
      "file": "./e2e/auth-performance.spec.ts",
      "line": 121,
      "service": "auth",
      "content": "// Perform authentication under throttled conditions"
    },
    {
      "file": "./e2e/auth-performance.spec.ts",
      "line": 122,
      "service": "auth",
      "content": "await authHelper.signIn(TEST_USERS.existing);"
    },
    {
      "file": "./e2e/auth-performance.spec.ts",
      "line": 125,
      "service": "auth",
      "content": "console.log(`Authentication under throttled network: ${throttledTime}ms`);"
    },
    {
      "file": "./e2e/auth-performance.spec.ts",
      "line": 135,
      "service": "auth",
      "content": "test('should handle concurrent authentication requests', async ({ browser }) => {"
    },
    {
      "file": "./e2e/auth-performance.spec.ts",
      "line": 136,
      "service": "auth",
      "content": "console.log('Testing concurrent authentication performance...');"
    },
    {
      "file": "./e2e/auth-performance.spec.ts",
      "line": 149,
      "service": "auth",
      "content": "// Run concurrent authentication flows"
    },
    {
      "file": "./e2e/auth-performance.spec.ts",
      "line": 152,
      "service": "auth",
      "content": "const helper = new AuthHelper(page);"
    },
    {
      "file": "./e2e/auth-performance.spec.ts",
      "line": 155,
      "service": "auth",
      "content": "await helper.clearAuthState();"
    },
    {
      "file": "./e2e/auth-performance.spec.ts",
      "line": 171,
      "service": "auth",
      "content": "console.log('Concurrent authentication results:');"
    },
    {
      "file": "./e2e/auth-performance.spec.ts",
      "line": 189,
      "service": "auth",
      "content": "console.log('✓ Concurrent authentication performance acceptable');"
    },
    {
      "file": "./e2e/quota-flows.spec.ts",
      "line": 30,
      "service": "auth",
      "content": "async function clearAuthState(page: Page) {"
    },
    {
      "file": "./e2e/quota-flows.spec.ts",
      "line": 34,
      "service": "storage",
      "content": "localStorage.clear();"
    },
    {
      "file": "./e2e/quota-flows.spec.ts",
      "line": 35,
      "service": "storage",
      "content": "sessionStorage.clear();"
    },
    {
      "file": "./e2e/quota-flows.spec.ts",
      "line": 37,
      "service": "storage",
      "content": "console.log('Storage access denied');"
    },
    {
      "file": "./e2e/quota-flows.spec.ts",
      "line": 100,
      "service": "auth",
      "content": "await clearAuthState(page);"
    },
    {
      "file": "./e2e/dashboard-carousel.spec.ts",
      "line": 272,
      "service": "auth",
      "content": "// This test assumes user authentication is handled"
    },
    {
      "file": "./e2e/dashboard-carousel.spec.ts",
      "line": 273,
      "service": "auth",
      "content": "// You may need to mock authentication or use a test user"
    },
    {
      "file": "./e2e/dashboard-carousel.spec.ts",
      "line": 275,
      "service": "auth",
      "content": "// Check if user is authenticated by looking for user-specific content"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 78,
      "service": "storage",
      "content": "async function clearCookiesAndStorage(page: Page) {"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 79,
      "service": "storage",
      "content": "// Clear all cookies and local storage"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 82,
      "service": "storage",
      "content": "// Safely clear storage without security errors"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 86,
      "service": "storage",
      "content": "localStorage.clear();"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 87,
      "service": "storage",
      "content": "sessionStorage.clear();"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 89,
      "service": "storage",
      "content": "// Storage access denied - this is expected in some browsers/contexts"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 90,
      "service": "storage",
      "content": "console.log('Storage access denied, continuing without clearing storage');"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 94,
      "service": "storage",
      "content": "// Ignore storage clearing errors as they're not critical for testing"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 95,
      "service": "storage",
      "content": "console.log('Could not access storage for clearing, continuing with test');"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 99,
      "service": "auth",
      "content": "test.describe('Authentication Flow End-to-End Tests', () => {"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 101,
      "service": "auth",
      "content": "// Clear any existing authentication state"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 102,
      "service": "storage",
      "content": "await clearCookiesAndStorage(page);"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 155,
      "service": "auth",
      "content": "test('should redirect already authenticated user to dashboard', async ({ page }) => {"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 168,
      "service": "auth",
      "content": "console.log('✓ Authenticated user redirected from sign-in to dashboard');"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 176,
      "service": "auth",
      "content": "test.describe('Test Case 3: Unauthenticated user hits /dashboard → middleware sends /sign-in (302)', () => {"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 177,
      "service": "auth",
      "content": "test('should redirect unauthenticated user to sign-in page', async ({ page }) => {"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 178,
      "service": "auth",
      "content": "console.log('Testing unauthenticated user access to dashboard...');"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 180,
      "service": "auth",
      "content": "// Step 1: Ensure user is not authenticated"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 181,
      "service": "storage",
      "content": "await clearCookiesAndStorage(page);"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 185,
      "service": "auth",
      "content": "console.log('✓ Attempted to access dashboard without authentication');"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 213,
      "service": "auth",
      "content": "// Step 3: Mock Google OAuth popup (since we can't actually test Google OAuth in e2e)"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 214,
      "service": "auth",
      "content": "// In a real scenario, you would need to mock the OAuth flow or use test credentials"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 220,
      "service": "auth",
      "content": "// Note: Testing actual Google OAuth requires either:"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 221,
      "service": "auth",
      "content": "// 1. Mocking the OAuth provider response"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 223,
      "service": "auth",
      "content": "// 3. Using a headless OAuth testing service"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 224,
      "service": "auth",
      "content": "console.log('⚠ Google OAuth testing requires additional setup for full e2e testing');"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 268,
      "service": "auth",
      "content": "// Last resort: check if we're still on sign-in page (which indicates auth failed)"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 270,
      "service": "auth",
      "content": "console.log('⚠ No explicit error message found, but stayed on sign-in page (auth failed)');"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 318,
      "service": "auth",
      "content": "// Step 4: Verify can't access dashboard without re-authentication"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 328,
      "service": "auth",
      "content": "test('should persist authentication across page reloads', async ({ page }) => {"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 329,
      "service": "auth",
      "content": "console.log('Testing authentication persistence...');"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 339,
      "service": "auth",
      "content": "// Step 3: Should still be on dashboard (authentication persisted)"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 341,
      "service": "auth",
      "content": "console.log('✓ Authentication persisted after page reload');"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 347,
      "service": "auth",
      "content": "console.log('✓ Authentication persisted in new tab');"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 377,
      "service": "auth",
      "content": "test('should have no hydration errors on authenticated dashboard page', async ({ page }) => {"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 409,
      "service": "auth",
      "content": "console.log('✓ No hydration errors on authenticated dashboard page');"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 414,
      "service": "auth",
      "content": "test('authentication flow works across different browsers', async ({ page, browserName }) => {"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 415,
      "service": "auth",
      "content": "console.log(`Testing authentication on ${browserName}...`);"
    },
    {
      "file": "./e2e/auth-flow.spec.ts",
      "line": 420,
      "service": "auth",
      "content": "console.log(`✓ Authentication working on ${browserName}`);"
    },
    {
      "file": "./e2e/community-interview-flow.spec.ts",
      "line": 12,
      "service": "auth",
      "content": "import { AuthHelper, TEST_USERS, getTestConfig } from './helpers/test-utils';"
    },
    {
      "file": "./e2e/community-interview-flow.spec.ts",
      "line": 36,
      "service": "auth",
      "content": "// and see if authentication is handled by the app or if we can work around it"
    },
    {
      "file": "./e2e/community-interview-flow.spec.ts",
      "line": 40,
      "service": "auth",
      "content": "// Wait for dashboard to load - if authentication is required, we'll be redirected"
    },
    {
      "file": "./e2e/community-interview-flow.spec.ts",
      "line": 44,
      "service": "auth",
      "content": "console.log('ℹ Dashboard did not load, trying to handle authentication...');"
    },
    {
      "file": "./e2e/community-interview-flow.spec.ts",
      "line": 58,
      "service": "auth",
      "content": "console.log('✓ Successfully authenticated and loaded dashboard');"
    },
    {
      "file": "./e2e/community-interview-flow.spec.ts",
      "line": 59,
      "service": "auth",
      "content": "} catch (authError) {"
    },
    {
      "file": "./e2e/community-interview-flow.spec.ts",
      "line": 60,
      "service": "auth",
      "content": "console.log('ℹ Authentication failed, tests may not work properly');"
    },
    {
      "file": "./e2e/helpers/test-utils.ts",
      "line": 31,
      "service": "auth",
      "content": "// Authentication helper functions"
    },
    {
      "file": "./e2e/helpers/test-utils.ts",
      "line": 32,
      "service": "auth",
      "content": "export class AuthHelper {"
    },
    {
      "file": "./e2e/helpers/test-utils.ts",
      "line": 35,
      "service": "auth",
      "content": "async clearAuthState() {"
    },
    {
      "file": "./e2e/helpers/test-utils.ts",
      "line": 38,
      "service": "storage",
      "content": "localStorage.clear();"
    },
    {
      "file": "./e2e/helpers/test-utils.ts",
      "line": 39,
      "service": "storage",
      "content": "sessionStorage.clear();"
    },
    {
      "file": "./e2e/helpers/test-utils.ts",
      "line": 115,
      "service": "auth",
      "content": "async isAuthenticated(): Promise<boolean> {"
    },
    {
      "file": "./e2e/helpers/test-utils.ts",
      "line": 127,
      "service": "auth",
      "content": "async waitForAuthenticationState(shouldBeAuthenticated: boolean) {"
    },
    {
      "file": "./e2e/helpers/test-utils.ts",
      "line": 130,
      "service": "auth",
      "content": "if (shouldBeAuthenticated) {"
    },
    {
      "file": "./e2e/helpers/test-utils.ts",
      "line": 144,
      "service": "auth",
      "content": "async monitorAuthRequests() {"
    },
    {
      "file": "./e2e/helpers/test-utils.ts",
      "line": 145,
      "service": "auth",
      "content": "const authRequests: any[] = [];"
    },
    {
      "file": "./e2e/helpers/test-utils.ts",
      "line": 149,
      "service": "auth",
      "content": "if (url.includes('/api/auth/') || url.includes('/sign-in') || url.includes('/dashboard')) {"
    },
    {
      "file": "./e2e/helpers/test-utils.ts",
      "line": 150,
      "service": "auth",
      "content": "authRequests.push({"
    },
    {
      "file": "./e2e/helpers/test-utils.ts",
      "line": 160,
      "service": "auth",
      "content": "if (url.includes('/api/auth/') || url.includes('/sign-in') || url.includes('/dashboard')) {"
    },
    {
      "file": "./e2e/helpers/test-utils.ts",
      "line": 161,
      "service": "auth",
      "content": "const matchingRequest = authRequests.find(req => req.url === url);"
    },
    {
      "file": "./e2e/helpers/test-utils.ts",
      "line": 169,
      "service": "auth",
      "content": "return authRequests;"
    },
    {
      "file": "./e2e/helpers/test-utils.ts",
      "line": 213,
      "service": "auth",
      "content": "async checkForAuthErrors() {"
    },
    {
      "file": "./e2e/helpers/test-utils.ts",
      "line": 257,
      "service": "auth",
      "content": "async measureAuthFlowPerformance() {"
    },
    {
      "file": "./e2e/hydration.spec.ts",
      "line": 48,
      "service": "auth",
      "content": "// Clear any existing authentication state"
    },
    {
      "file": "./e2e/hydration.spec.ts",
      "line": 54,
      "service": "storage",
      "content": "localStorage.clear();"
    },
    {
      "file": "./e2e/hydration.spec.ts",
      "line": 55,
      "service": "storage",
      "content": "sessionStorage.clear();"
    },
    {
      "file": "./e2e/hydration.spec.ts",
      "line": 57,
      "service": "storage",
      "content": "// Storage access denied - this is expected in some browsers/contexts"
    },
    {
      "file": "./e2e/hydration.spec.ts",
      "line": 61,
      "service": "storage",
      "content": "// Ignore storage clearing errors"
    },
    {
      "file": "./e2e/hydration.spec.ts",
      "line": 168,
      "service": "auth",
      "content": "test.describe('Hydration Error Detection - Authenticated Pages', () => {"
    },
    {
      "file": "./e2e/hydration.spec.ts",
      "line": 182,
      "service": "auth",
      "content": "test('should have no hydration errors on dashboard after authentication', async ({ page }) => {"
    },
    {
      "file": "./e2e/hydration.spec.ts",
      "line": 215,
      "service": "auth",
      "content": "console.log('✓ No hydration errors on authenticated dashboard');"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 4,
      "service": "auth",
      "content": "* Test script to validate Firebase OAuth configuration for Azure hosting at prepbettr.com"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 6,
      "service": "auth",
      "content": "* 1. Firebase config uses correct authDomain (prepbettr.firebaseapp.com)"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 8,
      "service": "auth",
      "content": "* 3. Authentication endpoints are working correctly"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 9,
      "service": "auth",
      "content": "* 4. CORS headers are configured for OAuth popups"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 14,
      "service": "auth",
      "content": "async function testFirebaseOAuthConfiguration() {"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 15,
      "service": "auth",
      "content": "console.log('🔍 Testing Firebase OAuth Configuration for Azure hosting...\\n');"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 18,
      "service": "auth",
      "content": "// Test 1: Verify Firebase config uses correct authDomain"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 24,
      "service": "auth",
      "content": "console.log(`   authDomain: ${config.authDomain}`);"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 28,
      "service": "auth",
      "content": "// Verify authDomain is Firebase project domain (not Azure domain)"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 29,
      "service": "auth",
      "content": "const expectedAuthDomain = 'prepbettr.firebaseapp.com';"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 30,
      "service": "auth",
      "content": "if (config.authDomain === expectedAuthDomain) {"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 31,
      "service": "auth",
      "content": "console.log('✅ authDomain correctly set to Firebase project domain');"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 33,
      "service": "auth",
      "content": "console.log(`❌ authDomain should be \"${expectedAuthDomain}\", got \"${config.authDomain}\"`);"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 43,
      "service": "auth",
      "content": "console.log('\\n=== Test 2: CORS Headers for OAuth Popups ===');"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 51,
      "service": "auth",
      "content": "console.log('CORS Headers for OAuth popups:');"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 56,
      "service": "auth",
      "content": "console.log('✅ CORP header correctly configured for OAuth popups');"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 58,
      "service": "auth",
      "content": "console.log('❌ CORP header missing or incorrect - OAuth popups may fail');"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 61,
      "service": "auth",
      "content": "console.log('\\n=== Test 3: Authentication API Endpoints ===');"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 63,
      "service": "auth",
      "content": "const signinTest = await fetch(`${baseUrl}/api/auth/signin`, {"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 69,
      "service": "auth",
      "content": "console.log(`   /api/auth/signin: ${signinTest.status} (expected: 401)`);"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 72,
      "service": "auth",
      "content": "const signupTest = await fetch(`${baseUrl}/api/auth/signup`, {"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 78,
      "service": "auth",
      "content": "console.log(`   /api/auth/signup: ${signupTest.status} (expected: 401)`);"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 81,
      "service": "auth",
      "content": "console.log('✅ Authentication endpoints working correctly');"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 83,
      "service": "auth",
      "content": "console.log('❌ Authentication endpoints not responding as expected');"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 86,
      "service": "auth",
      "content": "console.log('\\n=== Test 4: Authentication Flow Redirects ===');"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 87,
      "service": "auth",
      "content": "// Test dashboard redirect (should redirect to sign-in for unauthenticated users)"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 98,
      "service": "auth",
      "content": "console.log('✅ Authentication redirects working correctly');"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 100,
      "service": "auth",
      "content": "console.log('❌ Authentication redirects not configured properly');"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 105,
      "service": "auth",
      "content": "console.log('✅ Firebase authDomain: prepbettr.firebaseapp.com (Firebase project domain)');"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 106,
      "service": "auth",
      "content": "console.log('✅ Authentication method: Popup-based (signInWithPopup)');"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 107,
      "service": "auth",
      "content": "console.log('✅ OAuth flow: Firebase handles OAuth callbacks via firebaseapp.com');"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 108,
      "service": "auth",
      "content": "console.log('✅ Post-auth redirect: Users return to prepbettr.com after authentication');"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 109,
      "service": "auth",
      "content": "console.log('✅ Security: CORS headers configured for OAuth popup support');"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 111,
      "service": "auth",
      "content": "console.log('\\n🎉 Firebase OAuth configuration is correctly set up for Azure hosting!');"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 115,
      "service": "auth",
      "content": "console.log('3. OAuth popup should open to prepbettr.firebaseapp.com');"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 116,
      "service": "auth",
      "content": "console.log('4. After successful auth, popup closes and user returns to prepbettr.com');"
    },
    {
      "file": "./test-firebase-oauth-flow.js",
      "line": 124,
      "service": "auth",
      "content": "testFirebaseOAuthConfiguration();"
    },
    {
      "file": "./pages/api/upload-pdf.ts",
      "line": 53,
      "service": "auth",
      "content": "res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');"
    },
    {
      "file": "./pages/api/upload-pdf.ts",
      "line": 74,
      "service": "auth",
      "content": "// For now, skip Firebase auth in development if no token is provided"
    },
    {
      "file": "./pages/api/upload-pdf.ts",
      "line": 75,
      "service": "auth",
      "content": "// This allows testing without full auth setup"
    },
    {
      "file": "./pages/api/upload-pdf.ts",
      "line": 76,
      "service": "auth",
      "content": "const authHeader = req.headers.authorization;"
    },
    {
      "file": "./pages/api/upload-pdf.ts",
      "line": 78,
      "service": "auth",
      "content": "if (authHeader && authHeader.startsWith('Bearer ')) {"
    },
    {
      "file": "./pages/api/upload-pdf.ts",
      "line": 79,
      "service": "auth",
      "content": "const idToken = authHeader.split(' ')[1];"
    },
    {
      "file": "./pages/api/upload-pdf.ts",
      "line": 82,
      "service": "auth",
      "content": "return res.status(401).json({ error: 'Unauthorized - Invalid token' });"
    },
    {
      "file": "./pages/api/upload-pdf.ts",
      "line": 85,
      "service": "auth",
      "content": "// In production, always require auth"
    },
    {
      "file": "./pages/api/upload-pdf.ts",
      "line": 86,
      "service": "auth",
      "content": "return res.status(401).json({ error: 'Unauthorized - No token provided' });"
    },
    {
      "file": "./pages/api/upload-pdf.ts",
      "line": 88,
      "service": "auth",
      "content": "console.warn('Development mode: Skipping authentication for PDF upload');"
    },
    {
      "file": "./test-azure-secrets.js",
      "line": 12,
      "service": "admin",
      "content": "process.env.FIREBASE_CLIENT_EMAIL = 'firebase-adminsdk-fbsvc@prepbettr.iam.gserviceaccount.com';"
    },
    {
      "file": "./services/firebase.service.ts",
      "line": 1,
      "service": "firestore",
      "content": "import { getAdminFirestore, getAdminStorage } from '@/lib/firebase/admin';"
    },
    {
      "file": "./services/firebase.service.ts",
      "line": 2,
      "service": "firestore",
      "content": "import { Firestore } from 'firebase-admin/firestore';"
    },
    {
      "file": "./services/firebase.service.ts",
      "line": 3,
      "service": "storage",
      "content": "import { Storage } from 'firebase-admin/storage';"
    },
    {
      "file": "./services/firebase.service.ts",
      "line": 64,
      "service": "firestore",
      "content": "private db: Firestore;"
    },
    {
      "file": "./services/firebase.service.ts",
      "line": 65,
      "service": "storage",
      "content": "private storage: Storage;"
    },
    {
      "file": "./services/firebase.service.ts",
      "line": 69,
      "service": "firestore",
      "content": "this.db = getAdminFirestore();"
    },
    {
      "file": "./services/firebase.service.ts",
      "line": 70,
      "service": "storage",
      "content": "this.storage = getAdminStorage();"
    },
    {
      "file": "./services/firebase.service.ts",
      "line": 289,
      "service": "firestore",
      "content": "// Test Firestore connection"
    },
    {
      "file": "./services/__tests__/firebase.service.test.ts",
      "line": 4,
      "service": "admin",
      "content": "jest.mock('firebase-admin/app', () => ({"
    },
    {
      "file": "./services/__tests__/firebase.service.test.ts",
      "line": 10,
      "service": "firestore",
      "content": "jest.mock('firebase-admin/firestore', () => {"
    },
    {
      "file": "./services/__tests__/firebase.service.test.ts",
      "line": 28,
      "service": "firestore",
      "content": "const mockFirestore = {"
    },
    {
      "file": "./services/__tests__/firebase.service.test.ts",
      "line": 38,
      "service": "firestore",
      "content": "getFirestore: jest.fn(() => mockFirestore),"
    },
    {
      "file": "./services/__tests__/firebase.service.test.ts",
      "line": 42,
      "service": "storage",
      "content": "jest.mock('firebase-admin/storage', () => ({"
    },
    {
      "file": "./services/__tests__/firebase.service.test.ts",
      "line": 43,
      "service": "storage",
      "content": "getStorage: jest.fn(() => ({})),"
    },
    {
      "file": "./services/__tests__/firebase.service.test.ts",
      "line": 48,
      "service": "firestore",
      "content": "let mockFirestore: any;"
    },
    {
      "file": "./services/__tests__/firebase.service.test.ts",
      "line": 60,
      "service": "firestore",
      "content": "const { getFirestore } = require('firebase-admin/firestore');"
    },
    {
      "file": "./services/__tests__/firebase.service.test.ts",
      "line": 61,
      "service": "firestore",
      "content": "mockFirestore = getFirestore();"
    },
    {
      "file": "./services/__tests__/firebase.service.test.ts",
      "line": 62,
      "service": "firestore",
      "content": "mockCollection = mockFirestore.collection();"
    },
    {
      "file": "./services/__tests__/firebase.service.test.ts",
      "line": 94,
      "service": "firestore",
      "content": "expect(mockFirestore.collection).toHaveBeenCalledWith('interviews');"
    },
    {
      "file": "./services/__tests__/firebase.service.test.ts",
      "line": 130,
      "service": "firestore",
      "content": "expect(mockFirestore.collection).toHaveBeenCalledWith('interviews');"
    },
    {
      "file": "./services/__tests__/firebase.service.test.ts",
      "line": 316,
      "service": "storage",
      "content": "fileUrl: 'https://storage.example.com/resumes/resume.pdf',"
    },
    {
      "file": "./services/__tests__/firebase.service.test.ts",
      "line": 330,
      "service": "firestore",
      "content": "expect(mockFirestore.collection).toHaveBeenCalledWith('resumes');"
    },
    {
      "file": "./services/__tests__/firebase.service.test.ts",
      "line": 397,
      "service": "firestore",
      "content": "expect(mockFirestore.collection).toHaveBeenCalledWith('usage');"
    },
    {
      "file": "./services/__tests__/firebase.service.test.ts",
      "line": 438,
      "service": "firestore",
      "content": "mockFirestore.runTransaction.mockImplementation(async (callback) => {"
    },
    {
      "file": "./services/__tests__/firebase.service.test.ts",
      "line": 444,
      "service": "firestore",
      "content": "expect(mockFirestore.runTransaction).toHaveBeenCalled();"
    },
    {
      "file": "./services/__tests__/firebase.service.test.ts",
      "line": 462,
      "service": "firestore",
      "content": "mockFirestore.runTransaction.mockImplementation(async (callback) => {"
    },
    {
      "file": "./services/__tests__/firebase.service.test.ts",
      "line": 572,
      "service": "firestore",
      "content": "mockFirestore.batch.mockReturnValue(mockBatch);"
    },
    {
      "file": "./services/__tests__/firebase.service.test.ts",
      "line": 575,
      "service": "firestore",
      "content": "await firebaseService.batchDelete('interviews', docIds);"
    }
  ],
  "methods": [
    {
      "file": "./contexts/AuthContext.tsx",
      "line": 64,
      "method": "onAuthStateChanged",
      "context": "const unsubscribe = onAuthStateChanged(firebaseAuth, (firebaseUser: FirebaseUser | null) => {"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 37,
      "method": "doc",
      "context": "const userDoc = context.firestore().doc(`users/${userId}`);"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 56,
      "method": "doc",
      "context": "const user1Doc = context1.firestore().doc(`users/${userId1}`);"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 63,
      "method": "doc",
      "context": "const user1DocAsUser2 = context2.firestore().doc(`users/${userId1}`);"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 69,
      "method": "doc",
      "context": "const userDoc = context.firestore().doc('users/test-user');"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 79,
      "method": "doc",
      "context": "const interviewDoc = context.firestore().doc('interviews/interview-1');"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 95,
      "method": "doc",
      "context": "const interviewDoc = context.firestore().doc('interviews/interview-1');"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 110,
      "method": "doc",
      "context": "const interviewDoc = context.firestore().doc('interviews/interview-1');"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 132,
      "method": "doc",
      "context": "const interviewDoc = context1.firestore().doc('interviews/interview-1');"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 143,
      "method": "doc",
      "context": "const interviewDocAsUser2 = context2.firestore().doc('interviews/interview-1');"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 155,
      "method": "doc",
      "context": "const interviewDoc = context1.firestore().doc('interviews/interview-1');"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 166,
      "method": "doc",
      "context": "const interviewDocAsUser2 = context2.firestore().doc('interviews/interview-1');"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 175,
      "method": "doc",
      "context": "const usageDoc = context.firestore().doc(`usage/${userId}`);"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 194,
      "method": "doc",
      "context": "const usage1Doc = context1.firestore().doc(`usage/${userId1}`);"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 202,
      "method": "doc",
      "context": "const usage1DocAsUser2 = context2.firestore().doc(`usage/${userId1}`);"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 211,
      "method": "doc",
      "context": "const applicationDoc = context.firestore().doc('applications/app-1');"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 225,
      "method": "doc",
      "context": "const applicationDoc = context.firestore().doc('applications/app-1');"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 240,
      "method": "doc",
      "context": "const eventDoc = context.firestore().doc('subscription_events/event-1');"
    },
    {
      "file": "./tests/firestore-rules.test.ts",
      "line": 255,
      "method": "doc",
      "context": "const eventDoc = context.firestore().doc('subscription_events/event-1');"
    },
    {
      "file": "./components/GoogleSignInButton.tsx",
      "line": 45,
      "method": "signInWithPopup",
      "context": "const result = await signInWithPopup(auth, googleProvider);"
    },
    {
      "file": "./components/AuthDebug.tsx",
      "line": 22,
      "method": "onAuthStateChanged",
      "context": "const unsubscribe = firebaseAuth.onAuthStateChanged((fbUser: User | null) => {"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 170,
      "method": "getAuth",
      "context": "auth: getAuth(existingApp),"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 171,
      "method": "getFirestore",
      "context": "db: getFirestore(existingApp),"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 172,
      "method": "getStorage",
      "context": "storage: getStorage(existingApp)"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 223,
      "method": "getAuth",
      "context": "const auth = getAuth(app);"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 229,
      "method": "getFirestore",
      "context": "db = getFirestore(app);"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 236,
      "method": "getFirestore",
      "context": "db = getFirestore(app);"
    },
    {
      "file": "./firebase/admin.ts",
      "line": 239,
      "method": "getStorage",
      "context": "const storage = getStorage(app);"
    },
    {
      "file": "./firebase/client.ts",
      "line": 75,
      "method": "getAuth",
      "context": "auth = getAuth(app);"
    },
    {
      "file": "./firebase/client.ts",
      "line": 76,
      "method": "getFirestore",
      "context": "db = getFirestore(app);"
    },
    {
      "file": "./firebase/client.ts",
      "line": 103,
      "method": "getAuth",
      "context": "auth = getAuth(app);"
    },
    {
      "file": "./firebase/client.ts",
      "line": 104,
      "method": "getFirestore",
      "context": "db = getFirestore(app);"
    },
    {
      "file": "./scripts/migrate-users.js",
      "line": 89,
      "method": "getFirestore",
      "context": "const db = getFirestore(app);"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 32,
      "method": "getFirestore",
      "context": "return getFirestore();"
    },
    {
      "file": "./scripts/firebase/migrate-seed-data.ts",
      "line": 57,
      "method": "getFirestore",
      "context": "return getFirestore(app);"
    },
    {
      "file": "./lib/utils/firebase-auth-debug.ts",
      "line": 52,
      "method": "onAuthStateChanged",
      "context": "const unsubscribe = auth.onAuthStateChanged((user: User | null) => {"
    },
    {
      "file": "./lib/firebase/admin.ts",
      "line": 89,
      "method": "getAuth",
      "context": "adminAuth = getAuth(app);"
    },
    {
      "file": "./lib/firebase/admin.ts",
      "line": 105,
      "method": "getFirestore",
      "context": "adminDb = getFirestore(app);"
    },
    {
      "file": "./lib/firebase/admin.ts",
      "line": 121,
      "method": "getStorage",
      "context": "adminStorage = getStorage(app);"
    },
    {
      "file": "./lib/hooks/useFirestore.ts",
      "line": 182,
      "method": "onAuthStateChanged",
      "context": "const unsubscribe = onAuthStateChanged(auth, (firebaseUser) => {"
    },
    {
      "file": "./lib/services/gdpr-compliance-service.ts",
      "line": 432,
      "method": "getStorage",
      "context": "const storage = getStorage();"
    },
    {
      "file": "./services/__tests__/firebase.service.test.ts",
      "line": 61,
      "method": "getFirestore",
      "context": "mockFirestore = getFirestore();"
    },
    {
      "file": "./services/__tests__/firebase.service.test.ts",
      "line": 62,
      "method": "collection",
      "context": "mockCollection = mockFirestore.collection();"
    }
  ],
  "files": [
    "./middleware.ts",
    "./test_responsive_verification.js",
    "./types/realtime.ts",
    "./types/index.d.ts",
    "./contexts/SWRProvider.tsx",
    "./contexts/AuthContext.tsx",
    "./check-env.js",
    "./app/admin/layout.tsx",
    "./app/dashboard/settings/page.tsx",
    "./app/dashboard/layout.server.tsx",
    "./app/dashboard/profile/page.tsx",
    "./app/dashboard/interview/[id]/FeedbackClientRealtime.tsx",
    "./app/dashboard/interview/[id]/feedback/FeedbackClient.tsx",
    "./app/dashboard/interview/[id]/page.tsx",
    "./app/dashboard/interview/page.tsx",
    "./app/dashboard/layout.tsx",
    "./app/dashboard/DashboardClient.tsx",
    "./app/dashboard/page.tsx",
    "./app/dashboard/DashboardClientRealtime.tsx",
    "./app/layout.tsx",
    "./app/community-mock-interview/interview/page.tsx",
    "./app/api/config/firebase/route.ts",
    "./app/api/auth/signup/route.ts",
    "./app/api/auth/signin/route.ts",
    "./app/marketing/privacy/page.tsx",
    "./app/marketing/terms/page.tsx",
    "./app/account/layout.tsx",
    "./app/(auth)/sign-up/page.tsx",
    "./app/(auth)/profile/page.tsx",
    "./app/(auth)/layout.tsx",
    "./app/(auth)/sign-in/page.tsx",
    "./test-mock-interviews.js",
    "./debug-redirect-issue.js",
    "./azure/followUpWorker/index.js",
    "./azure/health/index.js",
    "./azure/onUserPlanChange/index.js",
    "./azure/TokenRefreshTimer/index.js",
    "./azure/shared/authMiddleware.js",
    "./azure/processGDPRScheduledDeletions/index.js",
    "./azure/applicationWorker/index.js",
    "./azure/searchScheduler/index.js",
    "./azure/deleteUserData/index.js",
    "./azure/lib/middleware/function-error-handler.js",
    "./azure/lib/compiled/azure-config.js",
    "./azure/lib/services/queue-service.js",
    "./azure/lib/services/automation-logs.js",
    "./azure/lib/azure-config.ts",
    "./azure/jobSearchWorker/index.js",
    "./azure/HttpTrigger1/index.js",
    "./azure/createSessionCookie/index.js",
    "./azure/verifyToken/index.js",
    "./test-auth-flow.js",
    "./constants/index.ts",
    "./next.config.js",
    "./tests/community-interview-flow.manual.js",
    "./tests/integration/resume-tailor-parity.js",
    "./tests/integration/staging-functions.spec.ts",
    "./tests/resume-tailor-endpoint.test.ts",
    "./tests/global-setup.ts",
    "./tests/quota-middleware.test.ts",
    "./tests/load/queue-throughput.js",
    "./tests/firestore-rules.test.ts",
    "./tests/azure-services-health.test.ts",
    "./tests/api/resume/tailor/simple.test.js",
    "./tests/api/resume/tailor/api.test.ts",
    "./tests/global-teardown.ts",
    "./tests/e2e/resume-url-extraction.test.ts",
    "./debug-auth.js",
    "./debug-auth-flow.js",
    "./portals/linkedin.ts",
    "./portals/wellfound.ts",
    "./components/InterviewCardClient.tsx",
    "./components/ui/alert.tsx",
    "./components/ui/floating-navbar/floating-navbar.tsx",
    "./components/ui/badge.tsx",
    "./components/ui/sidebar.tsx",
    "./components/ui/button.tsx",
    "./components/ResumeProcessingStatus.tsx",
    "./components/AuthSync.tsx",
    "./components/UserProfile.tsx",
    "./components/GoogleSignInButton.tsx",
    "./components/providers/TelemetryProvider.tsx",
    "./components/ProfileForm.tsx",
    "./components/AuthForm.tsx",
    "./components/CommunityInterviewPage.tsx",
    "./components/authenticated-layout.tsx",
    "./components/DashboardLayout.tsx",
    "./components/EmailVerificationBanner.tsx",
    "./components/tech-icons.ts",
    "./components/AuthDebug.tsx",
    "./components/InterviewCardRealtime.tsx",
    "./components/AuthDebugInfo.tsx",
    "./components/PdfUploadButton.tsx",
    "./firebase/admin.ts",
    "./firebase/client.ts",
    "./test-ensure-mock-interviews.ts",
    "./hooks/useFirebase.ts",
    "./scripts/migrate-users.js",
    "./scripts/backfill-mock-interviews.ts",
    "./scripts/deployment-checklist.ts",
    "./scripts/fetch-build-config.ts",
    "./scripts/test-feature-flags.ts",
    "./scripts/firebase/migrate-seed-data.ts",
    "./scripts/firebase/mock-data.ts",
    "./scripts/find-firebase-function-calls.js",
    "./scripts/test-resume-processing.ts",
    "./scripts/setup-azure-app-config.ts",
    "./scripts/setup-remote-config.ts",
    "./scripts/setup-azure-app-config-production.ts",
    "./scripts/test-key-vault.js",
    "./scripts/monitor-mock-interview-usage.ts",
    "./scripts/compare-env-variables.ts",
    "./lib/middleware/error-handler.ts",
    "./lib/middleware/authMiddleware.ts",
    "./lib/errors.ts",
    "./lib/utils.ts",
    "./lib/utils/telemetry.ts",
    "./lib/utils/communityInterviewStorage.ts",
    "./lib/utils/jwt-decoder.ts",
    "./lib/utils/resume-parser.ts",
    "./lib/utils/firebase-auth-debug.ts",
    "./lib/firebase/admin.ts",
    "./lib/hooks/useOfflineSupport.ts",
    "./lib/hooks/useRealtimeFirestore.ts",
    "./lib/hooks/useCommunityInterview.ts",
    "./lib/hooks/useFirestore.ts",
    "./lib/actions/feedback.action.ts",
    "./lib/actions/auth.action.ts",
    "./lib/services/mock-interview.service.test.ts",
    "./lib/services/azure-cosmos-service.ts",
    "./lib/services/firebase-resume-service.ts",
    "./lib/services/azure-ai-service.ts",
    "./lib/services/azure-openai.ts",
    "./lib/services/azure-blob-storage.ts",
    "./lib/services/azure-gdpr-service.ts",
    "./lib/services/email-verification-service.ts",
    "./lib/services/resume-processing-service.ts",
    "./lib/services/firebase-verification.ts",
    "./lib/services/firebase-remote-config.ts",
    "./lib/services/azure-app-config.ts",
    "./lib/services/mock-interview.service.ts",
    "./lib/services/gdpr-compliance-service.ts",
    "./lib/services/notification-service.ts",
    "./lib/services/azure-openai-service.ts",
    "./lib/services/keyword-optimizer-service.ts",
    "./lib/services/azure-token-service.ts",
    "./lib/services/user-targeting.ts",
    "./lib/services/cloud-functions-verification.ts",
    "./lib/services/job-notification-integration.ts",
    "./lib/services/azure-functions-client.ts",
    "./lib/auth.ts",
    "./lib/azure-config.ts",
    "./functions/gdpr-functions.js",
    "./functions/index.js",
    "./test-firestore-read.ts",
    "./e2e/smoke-tests.spec.ts",
    "./e2e/auth-performance.spec.ts",
    "./e2e/quota-flows.spec.ts",
    "./e2e/dashboard-carousel.spec.ts",
    "./e2e/auth-flow.spec.ts",
    "./e2e/community-interview-flow.spec.ts",
    "./e2e/helpers/test-utils.ts",
    "./e2e/hydration.spec.ts",
    "./test-firestore-error.ts",
    "./test-firebase-oauth-flow.js",
    "./pages/api/upload-pdf.ts",
    "./test-azure-secrets.js",
    "./services/firebase.service.ts",
    "./services/__tests__/firebase.service.test.ts"
  ]
}