[{"filePath":"/Users/dikshantvashistha/PrepBettr/app/admin/analytics-client.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[780,783],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[780,783],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","line":59,"column":6,"nodeType":"ArrayExpression","endLine":59,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [loadData, period]","fix":{"range":[1716,1724],"text":"[loadData, period]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from 'react';\nimport { AnalyticsCharts } from '@/components/admin/analytics-charts';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\n\ninterface AnalyticsData {\n  revenue: {\n    total: number;\n    byDay: { date: string; amount: number }[];\n  };\n  subscriptions: {\n    byPlan: { free: number; premium: number; total: number };\n    byStatus: Record<string, number>;\n    mrr: number;\n  };\n  churn: {\n    rate: number;\n    count: number;\n    period: number;\n  };\n  userGrowth: {\n    total: number;\n    byDay: { date: string; count: number }[];\n  };\n  recentEvents: any[];\n  period: { days: number; start: string; end: string };\n}\n\nconst fetchAnalytics = async (period: string = '30'): Promise<AnalyticsData> => {\n  const response = await fetch(`/api/admin/analytics?period=${period}`);\n  if (!response.ok) throw new Error('Failed to load analytics');\n  return response.json();\n};\n\nexport function AdminAnalyticsClient() {\n  const [data, setData] = useState<AnalyticsData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [period, setPeriod] = useState('30');\n\n  const loadData = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const analyticsData = await fetchAnalytics(period);\n      setData(analyticsData);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An error occurred');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadData();\n  }, [period]);\n\n  if (loading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-end\">\n          <Skeleton className=\"h-10 w-32\" />\n        </div>\n        <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n          {Array.from({ length: 4 }).map((_, i) => (\n            <Skeleton key={i} className=\"h-32\" />\n          ))}\n        </div>\n        <div className=\"grid gap-6 md:grid-cols-2\">\n          <Skeleton className=\"h-96\" />\n          <Skeleton className=\"h-96\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <Alert variant=\"destructive\">\n        <AlertDescription>\n          Error loading analytics: {error}\n        </AlertDescription>\n      </Alert>\n    );\n  }\n\n  if (!data) {\n    return <div>No data available</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-end\">\n        <Select value={period} onValueChange={setPeriod}>\n          <SelectTrigger className=\"w-32\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"7\">7 days</SelectItem>\n            <SelectItem value=\"30\">30 days</SelectItem>\n            <SelectItem value=\"90\">90 days</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n      \n      <AnalyticsCharts data={data} />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/app/api/auth/logout/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used.","line":6,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { cookies } from 'next/headers';\n\nconst SESSION_COOKIE_NAME = 'session';\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Clear the session cookie\n    const cookieStore = await cookies();\n    cookieStore.set(SESSION_COOKIE_NAME, '', {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: 0, // Expire immediately\n      path: '/',\n      sameSite: 'lax',\n    });\n\n    return NextResponse.json({\n      success: true,\n      message: 'Logged out successfully'\n    });\n\n  } catch (error) {\n    console.error('Logout error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/app/api/auth/signout/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used.","line":6,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { cookies } from 'next/headers';\n\nconst SESSION_COOKIE_NAME = 'session';\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Clear session cookie\n    const cookieStore = await cookies();\n    cookieStore.delete(SESSION_COOKIE_NAME);\n    \n    return NextResponse.json({\n      success: true,\n      message: 'Signed out successfully'\n    });\n\n  } catch (error) {\n    console.error('Signout error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/app/api/auth/signup/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3937,3940],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3937,3940],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { cookies } from 'next/headers';\nimport { verifyFirebaseToken } from '@/lib/middleware/authMiddleware';\nimport { firebaseUserService } from '@/lib/services/firebase-user-service';\n\nconst SESSION_COOKIE_NAME = 'session';\nconst SESSION_DURATION_S = 7 * 24 * 60 * 60; // 7 days\n\nexport async function POST(request: NextRequest) {\n  const timestamp = new Date().toISOString();\n  console.log(`üÜï [${timestamp}] AUTH SIGNUP POST called`);\n  \n  try {\n    const { email, password, name, idToken } = await request.json();\n    \n    console.log(`üÜï [${timestamp}] Signup request details:`, {\n      hasEmail: !!email,\n      hasPassword: !!password,\n      hasName: !!name,\n      hasIdToken: !!idToken,\n      idTokenPrefix: idToken ? idToken.substring(0, 50) + '...' : 'none'\n    });\n\n    if (!email) {\n      return NextResponse.json(\n        { error: 'Email is required' },\n        { status: 400 }\n      );\n    }\n\n    let authResult;\n    let sessionToken = idToken;\n    let isNewUser = false;\n\n    if (idToken) {\n      // Handle Firebase ID token flow (for Google Sign-in)\n      console.log(`üîê [${timestamp}] Verifying Firebase ID token for Google Sign-up`);\n      console.log(`üîê [${timestamp}] ID Token format check:`, {\n        length: idToken.length,\n        parts: idToken.split('.').length,\n        startsCorrectly: idToken.startsWith('eyJ'),\n        preview: idToken.substring(0, 100) + '...'\n      });\n      \n      try {\n        authResult = await verifyFirebaseToken(idToken);\n        console.log(`üîê [${timestamp}] Firebase token verification result:`, {\n          success: authResult.success,\n          hasUser: !!authResult.user,\n          uid: authResult.user?.uid,\n          error: authResult.error\n        });\n      } catch (verifyError) {\n        console.error(`üîê [${timestamp}] Firebase token verification threw error:`, verifyError);\n        authResult = {\n          success: false,\n          user: null,\n          error: verifyError instanceof Error ? verifyError.message : 'Token verification failed'\n        };\n      }\n      \n      if (!authResult.success || !authResult.user) {\n        console.error(`‚ùå [${timestamp}] Firebase ID token verification failed:`, {\n          error: authResult.error,\n          success: authResult.success,\n          hasUser: !!authResult.user\n        });\n        return NextResponse.json(\n          { error: `Invalid ID token: ${authResult.error}` },\n          { status: 401 }\n        );\n      }\n      \n      console.log(`‚úÖ [${timestamp}] Firebase ID token verified for uid: ${authResult.user.uid}`);\n      console.log(`‚úÖ [${timestamp}] Token claims:`, {\n        email: authResult.user.email,\n        name: authResult.user.name,\n        emailVerified: authResult.user.email_verified\n      });\n      \n      // For Google sign-in, user already exists in Firebase Auth\n      // We just need to ensure the profile exists in Firestore\n      \n    } else if (password) {\n      // Handle email/password flow - create new Firebase Auth user\n      console.log(`üÜï Creating new Firebase Auth user for: ${email}`);\n      try {\n        const newUserRecord = await firebaseUserService.createAuthUser({\n          email,\n          password,\n          displayName: name,\n          emailVerified: false\n        });\n        \n        authResult = {\n          success: true,\n          user: {\n            uid: newUserRecord.uid,\n            email: newUserRecord.email!,\n            name: newUserRecord.displayName || name,\n            email_verified: newUserRecord.emailVerified\n          }\n        };\n\n        // Create a custom token for the new user\n        const auth = await import('@/lib/firebase/admin').then(m => m.getAdminAuth());\n        sessionToken = await auth.createCustomToken(newUserRecord.uid);\n        isNewUser = true;\n        \n        console.log(`‚úÖ Firebase Auth user created for uid: ${authResult.user.uid}`);\n      } catch (error: any) {\n        console.error('‚ùå Firebase Auth user creation failed:', error);\n        \n        // Handle specific Firebase Auth errors\n        if (error.code === 'auth/email-already-exists') {\n          console.log(`‚ö†Ô∏è Account creation attempt for existing email: ${email}`);\n          return NextResponse.json(\n            { \n              error: 'This email is already registered. Please sign in instead or use a different email.',\n              code: 'email_already_exists',\n              action: 'redirect_to_signin'\n            },\n            { status: 409 }\n          );\n        }\n        \n        if (error.code === 'auth/invalid-email') {\n          return NextResponse.json(\n            { \n              error: 'Please enter a valid email address.',\n              code: 'invalid_email'\n            },\n            { status: 400 }\n          );\n        }\n        \n        if (error.code === 'auth/weak-password') {\n          return NextResponse.json(\n            { \n              error: 'Password must be at least 6 characters long.',\n              code: 'weak_password'\n            },\n            { status: 400 }\n          );\n        }\n        \n        // Generic Firebase error handling\n        const errorMessage = error.message || 'Failed to create account';\n        console.error(`‚ùå Unhandled Firebase Auth error code: ${error.code}, message: ${errorMessage}`);\n        \n        return NextResponse.json(\n          { \n            error: errorMessage.includes('Firebase') ? 'Authentication service error. Please try again.' : errorMessage,\n            code: error.code || 'auth_error'\n          },\n          { status: 400 }\n        );\n      }\n    } else {\n      return NextResponse.json(\n        { error: 'Password or ID token is required' },\n        { status: 400 }\n      );\n    }\n\n    if (!authResult.user || !authResult.user.uid) {\n      console.error('‚ùå Authentication failed - no user data');\n      return NextResponse.json(\n        { error: 'Authentication failed' },\n        { status: 401 }\n      );\n    }\n\n    try {\n      // Check if user profile already exists in Firestore\n      console.log(`üîç Checking if user profile exists for uid: ${authResult.user.uid}`);\n      const existingProfile = await firebaseUserService.getUserProfile(authResult.user.uid);\n      \n      if (existingProfile && !isNewUser) {\n        console.log(`‚ö†Ô∏è User profile already exists for uid: ${authResult.user.uid}`);\n        return NextResponse.json(\n          { error: 'User already exists' },\n          { status: 409 }\n        );\n      }\n\n      // Create or ensure user profile exists in Firestore with retry logic\n      let userProfile;\n      try {\n        userProfile = await firebaseUserService.ensureUserProfile(authResult.user.uid, {\n          email: authResult.user.email,\n          displayName: authResult.user.name || name,\n          emailVerified: authResult.user.email_verified,\n          plan: 'free'\n        });\n      } catch (profileError) {\n        console.error(`‚ùå Failed to create user profile for uid: ${authResult.user.uid}:`, profileError);\n        \n        // If this was a new Firebase Auth user creation and profile creation failed,\n        // we should clean up the orphaned Firebase Auth account\n        if (isNewUser) {\n          console.log(`üßπ Cleaning up orphaned Firebase Auth account for uid: ${authResult.user.uid}`);\n          try {\n            await firebaseUserService.deleteUser(authResult.user.uid);\n            console.log(`‚úÖ Cleaned up orphaned Firebase Auth account`);\n          } catch (cleanupError) {\n            console.error(`‚ùå Failed to cleanup orphaned Firebase Auth account:`, cleanupError);\n            // Don't fail the request for cleanup errors - log for manual review\n          }\n        }\n        \n        throw profileError;\n      }\n      \n      console.log(`‚úÖ User profile ${existingProfile ? 'confirmed' : 'created'} for uid: ${authResult.user.uid}`);\n\n      // Set session cookie\n      const cookieStore = await cookies();\n      cookieStore.set(SESSION_COOKIE_NAME, sessionToken, {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === 'production',\n        maxAge: SESSION_DURATION_S,\n        path: '/',\n        sameSite: 'lax',\n      });\n      \n      console.log(`üç™ Session cookie set for uid: ${authResult.user.uid}`);\n\n      // Return success with user data and token for localStorage\n      return NextResponse.json({\n        success: true,\n        token: sessionToken,\n        user: {\n          uid: userProfile.uid,\n          email: userProfile.email,\n          name: userProfile.displayName,\n          email_verified: userProfile.emailVerified,\n          plan: userProfile.plan,\n          profilePictureUrl: userProfile.profilePictureUrl,\n          createdAt: userProfile.createdAt,\n          updatedAt: userProfile.updatedAt\n        }\n      });\n      \n    } catch (profileError) {\n      console.error('‚ùå Failed to handle user profile:', profileError);\n      return NextResponse.json(\n        { error: 'Failed to create user profile' },\n        { status: 500 }\n      );\n    }\n\n  } catch (error) {\n    console.error('‚ùå Signup error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/app/api/auth/verify/route.ts","messages":[{"ruleId":"prefer-const","severity":2,"message":"'statusCode' is never reassigned. Use 'const' instead.","line":53,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":53,"endColumn":21,"fix":{"range":[2049,2070],"text":"const statusCode = 401;"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { verifyFirebaseToken } from '@/lib/middleware/authMiddleware';\n\nexport async function GET(request: NextRequest) {\n  const timestamp = new Date().toISOString();\n  console.log(`üîç [${timestamp}] AUTH VERIFY GET called - User-Agent: ${request.headers.get('user-agent')?.substring(0, 50)}`);\n  try {\n    const authHeader = request.headers.get('authorization');\n    \n    console.log(`üîç [${timestamp}] Authorization header check:`, {\n      hasAuthHeader: !!authHeader,\n      startsWithBearer: authHeader?.startsWith('Bearer ') || false,\n      headerPreview: authHeader ? authHeader.substring(0, 20) + '...' : 'none'\n    });\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      console.error(`üîç [${timestamp}] Missing or invalid authorization header`);\n      return NextResponse.json(\n        { error: 'Missing or invalid authorization header' },\n        { status: 401 }\n      );\n    }\n\n    const token = authHeader.substring(7); // Remove 'Bearer ' prefix\n    \n    console.log(`üîç [${timestamp}] Token details:`, {\n      tokenLength: token.length,\n      tokenParts: token.split('.').length,\n      tokenPrefix: token.substring(0, 50) + '...',\n      isJWT: token.includes('.')\n    });\n    \n    console.log(`üîç [${timestamp}] Calling verifyFirebaseToken...`);\n    const authResult = await verifyFirebaseToken(token);\n    \n    console.log(`üîç [${timestamp}] Firebase token verification result:`, {\n      success: authResult.success,\n      hasUser: !!authResult.user,\n      uid: authResult.user?.uid,\n      email: authResult.user?.email,\n      error: authResult.error\n    });\n    \n    if (!authResult.success || !authResult.user) {\n      console.error(`üîç [${timestamp}] Token verification failed:`, {\n        success: authResult.success,\n        hasUser: !!authResult.user,\n        error: authResult.error\n      });\n      \n      // Provide specific error responses for different failure types\n      const errorMessage = authResult.error || 'Invalid or expired token';\n      let statusCode = 401;\n      let shouldRefresh = false;\n      \n      // Check if this is a token expiration issue\n      if (errorMessage.includes('expired') || errorMessage.includes('kid')) {\n        shouldRefresh = true;\n      }\n      \n      return NextResponse.json(\n        { \n          error: errorMessage,\n          shouldRefresh,\n          code: 'TOKEN_VERIFICATION_FAILED'\n        },\n        { status: statusCode }\n      );\n    }\n\n    console.log(`üîç [${timestamp}] Token verification successful for uid: ${authResult.user.uid}`);\n    return NextResponse.json({\n      success: true,\n      user: authResult.user\n    });\n\n  } catch (error) {\n    console.error(`üîç [${timestamp}] Token verification error:`, error);\n    return NextResponse.json(\n      { error: `Token verification failed: ${error instanceof Error ? error.message : 'Unknown error'}` },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  // Support both GET and POST for flexibility\n  return GET(request);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/app/api/config/[key]/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[389,392],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[389,392],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2068,2071],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2068,2071],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":94,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2618,2621],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2618,2621],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'resolvedParams' is assigned a value but never used.","line":180,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":180,"endColumn":23}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * GET /api/config/[key]\n * \n * Unified configuration API endpoint for feature flags and app settings.\n * Used by useUnifiedConfig hook for client-side configuration access.\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\n\n/**\n * Route parameters\n */\ninterface RouteParams {\n  key: string;\n}\n\n/**\n * Response schema\n */\ninterface ConfigResponse {\n  key: string;\n  value: any;\n  source: 'default' | 'environment' | 'azure' | 'firebase';\n  success: boolean;\n  error?: string;\n}\n\n/**\n * Default configuration values\n * This acts as fallback when external configuration services are unavailable\n */\nconst DEFAULT_CONFIG = {\n  // Feature flags\n  'features.voiceInterviewV2': false,\n  'features.autoApplyAzure': false,\n  'features.voiceInterview': true,\n  'features.premiumFeatures': true,\n  'features.newUI': false,\n  \n  // Application core settings\n  'core.app.environment': process.env.ENVIRONMENT || process.env.NODE_ENV || 'development',\n  'core.app.version': '1.0.0',\n  'core.app.debug': process.env.ENVIRONMENT === 'development',\n  'core.app.maintenanceMode': false,\n  \n  // Usage quotas (server-side only, safe to expose limits)\n  'quotas.freeInterviews': 3,\n  'quotas.freeResumes': 5,\n  'quotas.premiumInterviews': 50,\n  \n  // Performance settings\n  'perf.cacheTimeout': 300000, // 5 minutes\n  'perf.maxRetries': 3,\n  'perf.requestTimeout': 30000, // 30 seconds\n} as const;\n\n/**\n * Validate configuration key format\n */\nfunction validateConfigKey(key: string): { isValid: boolean; error?: string } {\n  if (!key || typeof key !== 'string') {\n    return { isValid: false, error: 'Configuration key is required' };\n  }\n\n  if (key.length > 100) {\n    return { isValid: false, error: 'Configuration key too long' };\n  }\n\n  // Allow alphanumeric, dots, underscores, hyphens\n  if (!/^[a-zA-Z0-9._-]+$/.test(key)) {\n    return { isValid: false, error: 'Invalid characters in configuration key' };\n  }\n\n  return { isValid: true };\n}\n\n/**\n * Get configuration value with fallback hierarchy\n */\nasync function getConfigValue(key: string): Promise<{\n  value: any;\n  source: 'default' | 'environment' | 'azure' | 'firebase';\n}> {\n  // 1. Try Azure App Configuration (if available in production)\n  if (process.env.ENVIRONMENT === 'production') {\n    try {\n      // In a real implementation, this would use Azure App Configuration SDK\n      // For now, we'll use environment variables as a proxy\n      const envKey = key.replace(/\\./g, '_').toUpperCase();\n      const envValue = process.env[envKey];\n      \n      if (envValue !== undefined) {\n        // Parse boolean and numeric values\n        let parsedValue: any = envValue;\n        if (envValue === 'true') parsedValue = true;\n        else if (envValue === 'false') parsedValue = false;\n        else if (/^\\d+$/.test(envValue)) parsedValue = parseInt(envValue, 10);\n        else if (/^\\d+\\.\\d+$/.test(envValue)) parsedValue = parseFloat(envValue);\n        \n        return { value: parsedValue, source: 'environment' };\n      }\n    } catch (error) {\n      console.warn(`Failed to fetch config from environment for key ${key}:`, error);\n    }\n  }\n\n  // 2. Try Firebase Remote Config (fallback)\n  try {\n    // For client-side feature flags, we can use Firebase Remote Config\n    // This would require the Firebase Admin SDK in a real implementation\n    // For now, we'll skip this step\n  } catch (error) {\n    console.warn(`Failed to fetch config from Firebase for key ${key}:`, error);\n  }\n\n  // 3. Use default configuration\n  const defaultValue = DEFAULT_CONFIG[key as keyof typeof DEFAULT_CONFIG];\n  if (defaultValue !== undefined) {\n    return { value: defaultValue, source: 'default' };\n  }\n\n  // 4. Return undefined for unknown keys\n  return { value: undefined, source: 'default' };\n}\n\n/**\n * GET handler for configuration values\n */\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<RouteParams> }\n): Promise<NextResponse<ConfigResponse>> {\n  const resolvedParams = await params;\n  try {\n    const key = decodeURIComponent(resolvedParams.key);\n    \n    // Validate configuration key\n    const keyValidation = validateConfigKey(key);\n    if (!keyValidation.isValid) {\n      return NextResponse.json({\n        key,\n        value: undefined,\n        source: 'default',\n        success: false,\n        error: keyValidation.error\n      }, { status: 400 });\n    }\n\n    // Get configuration value\n    const { value, source } = await getConfigValue(key);\n\n    return NextResponse.json({\n      key,\n      value,\n      source,\n      success: true\n    });\n\n  } catch (error) {\n    console.error('Failed to get configuration value:', error);\n    \n    return NextResponse.json({\n      key: resolvedParams.key || 'unknown',\n      value: undefined,\n      source: 'default',\n      success: false,\n      error: error instanceof Error ? error.message : 'Internal server error'\n    }, { status: 500 });\n  }\n}\n\n/**\n * POST handler for updating configuration values (admin only)\n * This would typically require authentication and authorization\n */\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: Promise<RouteParams> }\n): Promise<NextResponse> {\n  const resolvedParams = await params;\n  \n  // TODO: Add authentication middleware\n  // TODO: Add authorization checks for admin users\n  // TODO: Implement configuration updates to Azure App Configuration\n  \n  return NextResponse.json({\n    error: 'Configuration updates not yet implemented'\n  }, { status: 501 });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/app/api/config/firebase/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used.","line":11,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":34}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { fetchAzureSecrets } from '@/lib/azure-config';\n\n/**\n * Firebase Configuration API Endpoint\n * \n * Provides Firebase client configuration from Azure Key Vault\n * This is used for client-side Firebase initialization when\n * environment variables are not directly available\n */\nexport async function GET(request: NextRequest) {\n  try {\n    console.log('üî• Fetching Firebase config from Azure Key Vault...');\n    \n    // Get secrets from Azure Key Vault\n    const secrets = await fetchAzureSecrets();\n    \n    // Construct Firebase configuration\n    const firebaseConfig = {\n      apiKey: secrets.firebaseClientKey || process.env.NEXT_PUBLIC_FIREBASE_CLIENT_KEY || '',\n      authDomain: `${secrets.firebaseProjectId || 'prepbettr'}.firebaseapp.com`,\n      projectId: secrets.firebaseProjectId || process.env.FIREBASE_PROJECT_ID || 'prepbettr',\n      storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET || `${secrets.firebaseProjectId || 'prepbettr'}.appspot.com`,\n      messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID || '',\n      appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID || ''\n    };\n    \n    // Validate required fields\n    if (!firebaseConfig.projectId) {\n      console.error('üî• Firebase configuration missing: projectId is required');\n      return NextResponse.json(\n        { error: 'Firebase configuration incomplete: missing projectId' },\n        { status: 500 }\n      );\n    }\n    \n    console.log('üî• Firebase config provided:', {\n      projectId: firebaseConfig.projectId,\n      authDomain: firebaseConfig.authDomain,\n      hasApiKey: !!firebaseConfig.apiKey,\n      storageBucket: firebaseConfig.storageBucket\n    });\n    \n    return NextResponse.json(firebaseConfig);\n    \n  } catch (error) {\n    console.error('üî• Error fetching Firebase config:', error);\n    \n    // Fallback to environment variables only\n    const fallbackConfig = {\n      apiKey: process.env.NEXT_PUBLIC_FIREBASE_CLIENT_KEY || '',\n      authDomain: `${process.env.FIREBASE_PROJECT_ID || 'prepbettr'}.firebaseapp.com`,\n      projectId: process.env.FIREBASE_PROJECT_ID || 'prepbettr',\n      storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET || `${process.env.FIREBASE_PROJECT_ID || 'prepbettr'}.appspot.com`,\n      messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID || '',\n      appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID || ''\n    };\n    \n    console.log('üî• Using fallback Firebase config:', {\n      projectId: fallbackConfig.projectId,\n      hasApiKey: !!fallbackConfig.apiKey\n    });\n    \n    return NextResponse.json(fallbackConfig);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/app/api/documents/analyze/resume/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AnalyzeResumeRequest' is defined but never used.","line":21,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1080,1083],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1080,1083],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":185,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":185,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5154,5157],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5154,5157],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":187,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":187,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5309,5312],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5309,5312],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used.","line":246,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":246,"endColumn":38}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Enhanced Resume Analysis API - App Router Endpoint\n * \n * POST /api/documents/analyze/resume\n * \n * Enhanced resume upload and analysis using Azure AI Foundry Document Intelligence.\n * Provides backward compatibility with existing upload endpoints while adding\n * advanced capabilities like ATS optimization and job matching.\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { \n  enhancedResumeProcessingService,\n  EnhancedResumeProcessingOptions\n} from '@/lib/services/enhanced-resume-processing-service';\nimport { verifyIdToken } from '@/lib/firebase/admin';\nimport { logServerError } from '@/lib/errors';\n\nexport const runtime = 'nodejs';\n\ninterface AnalyzeResumeRequest {\n  file: File;\n  jobDescription?: string;\n  options?: {\n    generateQuestions?: boolean;\n    maxQuestions?: number;\n    includeAtsAnalysis?: boolean;\n    includeJobMatching?: boolean;\n    forceFoundryProcessing?: boolean;\n  };\n}\n\ninterface AnalyzeResumeResponse {\n  success: boolean;\n  data?: {\n    resumeId: string;\n    fileUrl: string;\n    sasUrl?: string;\n    extractedData: any;\n    interviewQuestions: string[];\n    storageProvider: string;\n    // Enhanced fields\n    atsScore?: number;\n    jobMatchScore?: number;\n    missingKeywords?: string[];\n    processingMethod: string;\n    processingTime: number;\n    confidence?: number;\n    recommendations?: Array<{\n      category: string;\n      priority: string;\n      suggestion: string;\n      impact: string;\n    }>;\n  };\n  error?: string;\n  message?: string;\n}\n\n/**\n * POST /api/documents/analyze/resume\n * Enhanced resume analysis with Azure AI Foundry Document Intelligence\n */\nexport async function POST(request: NextRequest): Promise<NextResponse<AnalyzeResumeResponse>> {\n  const startTime = Date.now();\n  \n  try {\n    console.log('üìÑ Enhanced resume analysis API called');\n\n    // Handle authentication\n    const authHeader = request.headers.get('authorization');\n    let userId: string;\n    \n    if (authHeader && authHeader.startsWith('Bearer ')) {\n      const idToken = authHeader.split(' ')[1];\n      const decodedToken = await verifyIdToken(idToken);\n      \n      if (!decodedToken) {\n        return NextResponse.json(\n          { success: false, error: 'Unauthorized - Invalid token' },\n          { status: 401 }\n        );\n      }\n      userId = decodedToken.uid;\n    } else if (process.env.NODE_ENV === 'production') {\n      return NextResponse.json(\n        { success: false, error: 'Unauthorized - No token provided' },\n        { status: 401 }\n      );\n    } else {\n      console.warn('‚ö†Ô∏è Development mode: Using mock user ID');\n      userId = 'dev-user-enhanced-001';\n    }\n\n    // Parse multipart form data\n    const formData = await request.formData();\n    const file = formData.get('file') as File;\n    const jobDescription = formData.get('jobDescription') as string || undefined;\n    const optionsJson = formData.get('options') as string;\n\n    if (!file) {\n      return NextResponse.json(\n        { success: false, error: 'No file uploaded' },\n        { status: 400 }\n      );\n    }\n\n    // Validate file type and size\n    const allowedTypes = [\n      'application/pdf',\n      'application/msword',\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      'text/plain'\n    ];\n\n    if (!allowedTypes.includes(file.type)) {\n      return NextResponse.json(\n        { \n          success: false, \n          error: 'Unsupported file type. Please upload PDF, DOCX, DOC, or TXT files.' \n        },\n        { status: 400 }\n      );\n    }\n\n    const maxFileSize = 10 * 1024 * 1024; // 10MB\n    if (file.size > maxFileSize) {\n      return NextResponse.json(\n        { \n          success: false, \n          error: 'File size exceeds 10MB limit. Please use a smaller file.' \n        },\n        { status: 400 }\n      );\n    }\n\n    // Parse options\n    let options: EnhancedResumeProcessingOptions = {\n      generateQuestions: true,\n      maxQuestions: 10,\n      includeAtsAnalysis: true,\n      includeJobMatching: !!jobDescription\n    };\n\n    if (optionsJson) {\n      try {\n        const parsedOptions = JSON.parse(optionsJson);\n        options = { ...options, ...parsedOptions };\n      } catch (parseError) {\n        console.warn('‚ö†Ô∏è Failed to parse options JSON:', parseError);\n      }\n    }\n\n    if (jobDescription) {\n      options.jobDescription = jobDescription;\n    }\n\n    console.log(`üìã Processing options:`, {\n      fileName: file.name,\n      fileSize: file.size,\n      fileType: file.type,\n      hasJobDescription: !!jobDescription,\n      ...options\n    });\n\n    // Convert File to Buffer\n    const fileBuffer = Buffer.from(await file.arrayBuffer());\n\n    // Initialize and process resume using enhanced service\n    const result = await enhancedResumeProcessingService.processResume(\n      userId,\n      fileBuffer,\n      file.name,\n      file.type,\n      file.size,\n      options\n    );\n\n    const totalTime = Date.now() - startTime;\n\n    if (result.success && result.data) {\n      console.log(`‚úÖ Enhanced resume analysis completed in ${totalTime}ms`);\n      \n      // Extract recommendations from ATS analysis if available\n      let recommendations: any[] = [];\n      if (result.data.extractedData && 'atsAnalysis' in result.data.extractedData) {\n        const atsAnalysis = (result.data.extractedData as any).atsAnalysis;\n        if (atsAnalysis && atsAnalysis.recommendations) {\n          recommendations = atsAnalysis.recommendations.map((rec: string) => ({\n            category: 'ats-optimization',\n            priority: 'medium',\n            suggestion: rec,\n            impact: 'Improve ATS compatibility and keyword matching'\n          }));\n        }\n      }\n\n      return NextResponse.json({\n        success: true,\n        data: {\n          ...result.data,\n          recommendations\n        },\n        message: `Resume analyzed successfully using ${result.data.processingMethod}`\n      });\n\n    } else {\n      console.error(`‚ùå Enhanced resume analysis failed in ${totalTime}ms:`, result.error);\n      \n      return NextResponse.json(\n        {\n          success: false,\n          error: result.error || 'Failed to analyze resume'\n        },\n        { status: 500 }\n      );\n    }\n\n  } catch (error: unknown) {\n    const totalTime = Date.now() - startTime;\n    console.error(`‚ùå Enhanced resume analysis API error (${totalTime}ms):`, error);\n    \n    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n    \n    logServerError(error as Error, {\n      service: 'enhanced-resume-analysis-api',\n      action: 'analyze'\n    }, {\n      processingTime: totalTime\n    });\n\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Failed to analyze resume',\n        message: process.env.NODE_ENV === 'development' ? errorMessage : undefined\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * OPTIONS handler for CORS\n */\nexport async function OPTIONS(request: NextRequest): Promise<NextResponse> {\n  return new NextResponse(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    },\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/app/api/documents/ats/optimize/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ATSOptimizeRequest' is defined but never used.","line":22,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[828,831],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[828,831],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1270,1273],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1270,1273],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":42,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1292,1295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1292,1295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'userId' is assigned a value but never used.","line":98,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":98,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":104,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3039,3042],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3039,3042],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":106,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3105,3108],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3105,3108],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":221,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":221,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6750,6753],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6750,6753],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":226,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":226,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6993,6996],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6993,6996],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":294,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":294,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9078,9081],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9078,9081],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":296,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":296,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9106,9109],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9106,9109],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":297,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":297,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9130,9133],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9130,9133],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":299,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":299,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9165,9168],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9165,9168],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":300,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":300,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9200,9203],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9200,9203],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used.","line":351,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":351,"endColumn":38}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * ATS Optimization API - App Router Endpoint\n * \n * POST /api/documents/ats/optimize\n * \n * Provides ATS optimization analysis for resumes including:\n * - ATS compatibility scoring\n * - Job matching with semantic similarity\n * - Keyword analysis and optimization\n * - Skills normalization using industry taxonomies\n * - Detailed recommendations for improvement\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { verifyIdToken } from '@/lib/firebase/admin';\nimport { atsOptimizationService, type ATSAnalysisResult, type JobMatchResult } from '@/lib/services/ats-optimization-service';\nimport { azureFormRecognizer } from '@/lib/services/azure-form-recognizer';\nimport { logServerError } from '@/lib/errors';\n\nexport const runtime = 'nodejs';\n\ninterface ATSOptimizeRequest {\n  file?: File;\n  resumeData?: any;\n  jobDescription?: string;\n  options?: {\n    targetRole?: string;\n    companyName?: string;\n    targetIndustry?: string;\n    experienceLevel?: 'entry' | 'mid' | 'senior' | 'executive';\n    includeSkillsNormalization?: boolean;\n    includeRecommendations?: boolean;\n  };\n}\n\ninterface ATSOptimizeResponse {\n  success: boolean;\n  data?: {\n    atsAnalysis: ATSAnalysisResult;\n    jobMatchAnalysis?: JobMatchResult;\n    skillsNormalization?: any;\n    resumeData?: any;\n    processingTime: number;\n    analysisTimestamp: string;\n    recommendations: {\n      immediate: Array<{\n        category: string;\n        priority: 'high' | 'medium' | 'low';\n        action: string;\n        expectedImpact: string;\n        timeToImplement: string;\n      }>;\n      longTerm: Array<{\n        category: string;\n        skill: string;\n        reasoning: string;\n        learningResources: string[];\n        timeframe: string;\n      }>;\n    };\n  };\n  error?: string;\n  message?: string;\n}\n\n/**\n * POST /api/documents/ats/optimize\n * ATS optimization analysis for resume improvement\n */\nexport async function POST(request: NextRequest): Promise<NextResponse<ATSOptimizeResponse>> {\n  const startTime = Date.now();\n  \n  try {\n    console.log('üéØ ATS optimization API called');\n\n    // Handle authentication\n    const authHeader = request.headers.get('authorization');\n    let userId: string;\n    \n    if (authHeader && authHeader.startsWith('Bearer ')) {\n      const idToken = authHeader.split(' ')[1];\n      const decodedToken = await verifyIdToken(idToken);\n      \n      if (!decodedToken) {\n        return NextResponse.json(\n          { success: false, error: 'Unauthorized - Invalid token' },\n          { status: 401 }\n        );\n      }\n      userId = decodedToken.uid;\n    } else if (process.env.NODE_ENV === 'production') {\n      return NextResponse.json(\n        { success: false, error: 'Unauthorized - No token provided' },\n        { status: 401 }\n      );\n    } else {\n      console.warn('‚ö†Ô∏è Development mode: Using mock user ID');\n      userId = 'dev-user-ats-001';\n    }\n\n    // Parse request data\n    const contentType = request.headers.get('content-type') || '';\n    let file: File | undefined;\n    let resumeData: any;\n    let jobDescription: string | undefined;\n    let options: any = {};\n\n    if (contentType.includes('multipart/form-data')) {\n      // Handle file upload with form data\n      const formData = await request.formData();\n      file = formData.get('file') as File;\n      jobDescription = formData.get('jobDescription') as string || undefined;\n      const optionsJson = formData.get('options') as string;\n      \n      if (optionsJson) {\n        try {\n          options = JSON.parse(optionsJson);\n        } catch (parseError) {\n          console.warn('‚ö†Ô∏è Failed to parse options JSON:', parseError);\n        }\n      }\n    } else {\n      // Handle JSON request with existing resume data\n      const body = await request.json();\n      resumeData = body.resumeData;\n      jobDescription = body.jobDescription;\n      options = body.options || {};\n    }\n\n    // Validate input - need either file or resume data\n    if (!file && !resumeData) {\n      return NextResponse.json(\n        { success: false, error: 'Either file or resumeData is required' },\n        { status: 400 }\n      );\n    }\n\n    // Extract resume data if file provided\n    if (file && !resumeData) {\n      console.log('üìÑ Extracting resume data from file...');\n      \n      // Validate file type\n      const allowedTypes = [\n        'application/pdf',\n        'application/msword',\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n        'text/plain'\n      ];\n\n      if (!allowedTypes.includes(file.type)) {\n        return NextResponse.json(\n          { \n            success: false, \n            error: 'Unsupported file type. Please upload PDF, DOCX, DOC, or TXT files.' \n          },\n          { status: 400 }\n        );\n      }\n\n      // Validate file size\n      const maxFileSize = 10 * 1024 * 1024; // 10MB\n      if (file.size > maxFileSize) {\n        return NextResponse.json(\n          { \n            success: false, \n            error: 'File size exceeds 10MB limit.' \n          },\n          { status: 400 }\n        );\n      }\n\n      try {\n        const fileBuffer = Buffer.from(await file.arrayBuffer());\n        resumeData = await azureFormRecognizer.extractResumeData(fileBuffer, file.type);\n      } catch (extractionError) {\n        console.error('‚ùå Resume data extraction failed:', extractionError);\n        return NextResponse.json(\n          { \n            success: false, \n            error: 'Failed to extract resume data from file' \n          },\n          { status: 500 }\n        );\n      }\n    }\n\n    console.log('üîç Starting ATS analysis with options:', {\n      hasJobDescription: !!jobDescription,\n      targetRole: options.targetRole,\n      targetIndustry: options.targetIndustry,\n      experienceLevel: options.experienceLevel\n    });\n\n    // Perform ATS analysis\n    const atsAnalysis = await atsOptimizationService.analyzeATS(\n      resumeData,\n      jobDescription,\n      options.targetIndustry\n    );\n\n    console.log(`‚úÖ ATS analysis completed with score: ${atsAnalysis.atsScore}/100`);\n\n    // Perform job matching if job description provided\n    let jobMatchAnalysis: JobMatchResult | undefined;\n    if (jobDescription) {\n      console.log('üéØ Performing job matching analysis...');\n      try {\n        jobMatchAnalysis = await atsOptimizationService.analyzeJobMatch(\n          resumeData,\n          jobDescription,\n          options.targetRole,\n          options.experienceLevel\n        );\n        console.log(`‚úÖ Job matching completed with score: ${jobMatchAnalysis.overallMatchScore}/100`);\n      } catch (matchError) {\n        console.warn('‚ö†Ô∏è Job matching analysis failed:', matchError);\n      }\n    }\n\n    // Perform skills normalization if requested\n    let skillsNormalization: any;\n    if (options.includeSkillsNormalization && resumeData.skills) {\n      console.log('üîß Performing skills normalization...');\n      try {\n        const skillsList = Array.isArray(resumeData.skills) \n          ? resumeData.skills.map((s: any) => typeof s === 'string' ? s : s.skill || s.name)\n          : [resumeData.skills];\n        \n        skillsNormalization = await atsOptimizationService.normalizeSkills(\n          skillsList,\n          options.targetIndustry,\n          options.experienceLevel\n        );\n        console.log(`‚úÖ Skills normalization completed for ${skillsList.length} skills`);\n      } catch (skillsError) {\n        console.warn('‚ö†Ô∏è Skills normalization failed:', skillsError);\n      }\n    }\n\n    // Generate comprehensive recommendations\n    const recommendations = generateRecommendations(\n      atsAnalysis,\n      jobMatchAnalysis,\n      skillsNormalization\n    );\n\n    const processingTime = Date.now() - startTime;\n    console.log(`‚úÖ ATS optimization analysis completed in ${processingTime}ms`);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        atsAnalysis,\n        jobMatchAnalysis,\n        skillsNormalization,\n        resumeData: file ? resumeData : undefined, // Include resume data only if extracted from file\n        processingTime,\n        analysisTimestamp: new Date().toISOString(),\n        recommendations\n      },\n      message: `ATS analysis completed with score ${atsAnalysis.atsScore}/100`\n    });\n\n  } catch (error: unknown) {\n    const processingTime = Date.now() - startTime;\n    console.error(`‚ùå ATS optimization API error (${processingTime}ms):`, error);\n    \n    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n    \n    logServerError(error as Error, {\n      service: 'ats-optimization-api',\n      action: 'optimize'\n    }, {\n      processingTime\n    });\n\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Failed to perform ATS optimization analysis',\n        message: process.env.NODE_ENV === 'development' ? errorMessage : undefined\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Generate comprehensive recommendations from analysis results\n */\nfunction generateRecommendations(\n  atsAnalysis: ATSAnalysisResult,\n  jobMatchAnalysis?: JobMatchResult,\n  skillsNormalization?: any\n): {\n  immediate: Array<any>;\n  longTerm: Array<any>;\n} {\n  const immediate: Array<any> = [];\n  const longTerm: Array<any> = [];\n\n  // Extract immediate recommendations from ATS analysis\n  if (atsAnalysis.prioritizedRecommendations) {\n    atsAnalysis.prioritizedRecommendations\n      .filter(rec => rec.priority === 'high' || rec.priority === 'medium')\n      .forEach(rec => {\n        immediate.push({\n          category: rec.category,\n          priority: rec.priority,\n          action: rec.recommendation,\n          expectedImpact: rec.expectedImpact,\n          timeToImplement: rec.timeToImplement\n        });\n      });\n  }\n\n  // Extract long-term recommendations from job matching\n  if (jobMatchAnalysis?.recommendations) {\n    jobMatchAnalysis.recommendations\n      .filter(rec => rec.category === 'skills' && rec.priority === 'high')\n      .forEach(rec => {\n        longTerm.push({\n          category: rec.category,\n          skill: rec.recommendation,\n          reasoning: rec.reasoning,\n          learningResources: rec.resources,\n          timeframe: rec.timeframe\n        });\n      });\n  }\n\n  // Extract skill development recommendations\n  if (skillsNormalization?.industryAlignment?.recommendations) {\n    skillsNormalization.industryAlignment.recommendations.forEach((rec: string) => {\n      longTerm.push({\n        category: 'skills',\n        skill: 'Industry alignment',\n        reasoning: rec,\n        learningResources: ['Online courses', 'Industry certifications'],\n        timeframe: '2-6 months'\n      });\n    });\n  }\n\n  return { immediate, longTerm };\n}\n\n/**\n * OPTIONS handler for CORS\n */\nexport async function OPTIONS(request: NextRequest): Promise<NextResponse> {\n  return new NextResponse(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    },\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/app/api/documents/optimize/ats/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'foundryDocumentIntelligenceService' is defined but never used.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ATSOptimizationRequest' is defined but never used.","line":18,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":135,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3853,3856],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3853,3856],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":175,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":175,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4935,4938],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4935,4938],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":300,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":300,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8412,8415],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8412,8415],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":302,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":302,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8455,8458],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8455,8458],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":303,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":303,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8475,8478],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8475,8478],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":356,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":356,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9791,9794],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9791,9794],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":368,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":368,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10286,10289],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10286,10289],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":372,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":372,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10411,10414],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10411,10414],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":388,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":388,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11024,11027],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11024,11027],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'options' is assigned a value but never used.","line":402,"column":71,"nodeType":null,"messageId":"unusedVar","endLine":402,"endColumn":78},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":402,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":402,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11328,11331],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11328,11331],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":402,"column":91,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":402,"endColumn":94,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11339,11342],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11339,11342],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":442,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":442,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12553,12556],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12553,12556],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'options' is assigned a value but never used.","line":442,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":442,"endColumn":48},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":442,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":442,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12567,12570],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12567,12570],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":442,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":442,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12578,12581],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12578,12581],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":443,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":443,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12600,12603],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12600,12603],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":498,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":498,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14107,14110],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14107,14110],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'options' is assigned a value but never used.","line":498,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":498,"endColumn":51},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":498,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":498,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14121,14124],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14121,14124],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":498,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":498,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14132,14135],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14132,14135],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":547,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":547,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15539,15542],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15539,15542],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'experienceLevel' is defined but never used.","line":547,"column":76,"nodeType":null,"messageId":"unusedVar","endLine":547,"endColumn":91},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":547,"column":102,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":547,"endColumn":105,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15594,15597],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15594,15597],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":575,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":575,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16704,16707],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16704,16707],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":612,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":612,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17695,17698],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17695,17698],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":612,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":612,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17701,17704],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17701,17704],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":613,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":613,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17731,17734],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17731,17734],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used.","line":707,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":707,"endColumn":38}],"suppressedMessages":[],"errorCount":31,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * ATS Optimization API - App Router Endpoint\n * \n * POST /api/documents/optimize/ats\n * \n * Provides ATS (Applicant Tracking System) optimization analysis and recommendations\n * for resumes. Can analyze existing resume data or process new documents.\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { enhancedResumeProcessingService } from '@/lib/services/enhanced-resume-processing-service';\nimport { foundryDocumentIntelligenceService } from '@/lib/azure-ai-foundry/documents/document-client';\nimport { verifyIdToken } from '@/lib/firebase/admin';\nimport { logServerError } from '@/lib/errors';\n\nexport const runtime = 'nodejs';\n\ninterface ATSOptimizationRequest {\n  // Option 1: Analyze existing resume by user ID\n  userId?: string;\n  \n  // Option 2: Upload new document for analysis\n  file?: File;\n  \n  // Job description for targeted optimization\n  jobDescription?: string;\n  \n  // Analysis options\n  options?: {\n    includeKeywordDensity?: boolean;\n    includeFormatting?: boolean;\n    includeStructuralAnalysis?: boolean;\n    targetIndustry?: string;\n    experienceLevel?: 'entry' | 'mid' | 'senior' | 'executive';\n  };\n}\n\ninterface ATSOptimizationResponse {\n  success: boolean;\n  data?: {\n    atsScore: number; // 0-100\n    overallGrade: 'A' | 'B' | 'C' | 'D' | 'F';\n    \n    // Detailed analysis\n    keywordAnalysis: {\n      totalKeywords: number;\n      matchedKeywords: string[];\n      missingKeywords: string[];\n      keywordDensity: number;\n      recommendations: string[];\n    };\n    \n    formatAnalysis: {\n      score: number;\n      issues: Array<{\n        type: 'critical' | 'warning' | 'suggestion';\n        issue: string;\n        solution: string;\n        impact: string;\n      }>;\n    };\n    \n    structuralAnalysis: {\n      score: number;\n      hasContactInfo: boolean;\n      hasProfessionalSummary: boolean;\n      hasWorkExperience: boolean;\n      hasEducation: boolean;\n      hasSkillsSection: boolean;\n      recommendations: string[];\n    };\n    \n    industryAlignment?: {\n      score: number;\n      relevantSkills: string[];\n      suggestedSkills: string[];\n      industryKeywords: string[];\n    };\n    \n    improvements: Array<{\n      priority: 'high' | 'medium' | 'low';\n      category: 'keywords' | 'formatting' | 'structure' | 'content';\n      description: string;\n      implementation: string;\n      expectedImpact: string;\n    }>;\n    \n    processingTime: number;\n    lastAnalyzed: string;\n  };\n  error?: string;\n  message?: string;\n}\n\n/**\n * POST /api/documents/optimize/ats\n * ATS optimization analysis and recommendations\n */\nexport async function POST(request: NextRequest): Promise<NextResponse<ATSOptimizationResponse>> {\n  const startTime = Date.now();\n  \n  try {\n    console.log('üéØ ATS optimization API called');\n\n    // Handle authentication\n    const authHeader = request.headers.get('authorization');\n    let currentUserId: string;\n    \n    if (authHeader && authHeader.startsWith('Bearer ')) {\n      const idToken = authHeader.split(' ')[1];\n      const decodedToken = await verifyIdToken(idToken);\n      \n      if (!decodedToken) {\n        return NextResponse.json(\n          { success: false, error: 'Unauthorized - Invalid token' },\n          { status: 401 }\n        );\n      }\n      currentUserId = decodedToken.uid;\n    } else if (process.env.NODE_ENV === 'production') {\n      return NextResponse.json(\n        { success: false, error: 'Unauthorized - No token provided' },\n        { status: 401 }\n      );\n    } else {\n      console.warn('‚ö†Ô∏è Development mode: Using mock user ID');\n      currentUserId = 'dev-user-ats-001';\n    }\n\n    // Parse request data\n    const isFormData = request.headers.get('content-type')?.includes('multipart/form-data');\n    let userId: string | undefined;\n    let file: File | undefined;\n    let jobDescription: string | undefined;\n    let options: any = {};\n\n    if (isFormData) {\n      // Handle file upload\n      const formData = await request.formData();\n      file = formData.get('file') as File;\n      jobDescription = formData.get('jobDescription') as string;\n      const optionsJson = formData.get('options') as string;\n      \n      if (optionsJson) {\n        try {\n          options = JSON.parse(optionsJson);\n        } catch (parseError) {\n          console.warn('‚ö†Ô∏è Failed to parse options JSON:', parseError);\n        }\n      }\n    } else {\n      // Handle JSON request\n      const body = await request.json();\n      userId = body.userId;\n      jobDescription = body.jobDescription;\n      options = body.options || {};\n    }\n\n    // Set default options\n    options = {\n      includeKeywordDensity: true,\n      includeFormatting: true,\n      includeStructuralAnalysis: true,\n      experienceLevel: 'mid',\n      ...options\n    };\n\n    console.log(`üìã ATS optimization options:`, {\n      hasFile: !!file,\n      targetUserId: userId,\n      hasJobDescription: !!jobDescription,\n      ...options\n    });\n\n    let resumeData: any;\n\n    // Get or process resume data\n    if (file) {\n      // Process new file upload\n      const allowedTypes = [\n        'application/pdf',\n        'application/msword',\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n        'text/plain'\n      ];\n\n      if (!allowedTypes.includes(file.type)) {\n        return NextResponse.json(\n          { \n            success: false, \n            error: 'Unsupported file type. Please upload PDF, DOCX, DOC, or TXT files.' \n          },\n          { status: 400 }\n        );\n      }\n\n      const maxFileSize = 10 * 1024 * 1024; // 10MB\n      if (file.size > maxFileSize) {\n        return NextResponse.json(\n          { \n            success: false, \n            error: 'File size exceeds 10MB limit. Please use a smaller file.' \n          },\n          { status: 400 }\n        );\n      }\n\n      // Process file for ATS analysis only\n      const fileBuffer = Buffer.from(await file.arrayBuffer());\n      \n      const result = await enhancedResumeProcessingService.processResume(\n        currentUserId,\n        fileBuffer,\n        file.name,\n        file.type,\n        file.size,\n        {\n          generateQuestions: false,\n          includeAtsAnalysis: true,\n          includeJobMatching: !!jobDescription,\n          jobDescription\n        }\n      );\n\n      if (!result.success || !result.data) {\n        throw new Error(result.error || 'Failed to process resume for ATS analysis');\n      }\n\n      resumeData = result.data.extractedData;\n\n    } else if (userId) {\n      // Use existing resume data\n      const targetUserId = userId || currentUserId;\n      const existingData = await enhancedResumeProcessingService.getUserResumeData(targetUserId);\n      \n      if (!existingData) {\n        return NextResponse.json(\n          { success: false, error: 'No resume found for the specified user' },\n          { status: 404 }\n        );\n      }\n      \n      resumeData = existingData.extractedData;\n    } else {\n      return NextResponse.json(\n        { success: false, error: 'Either provide a file to analyze or specify a userId for existing resume' },\n        { status: 400 }\n      );\n    }\n\n    // Perform comprehensive ATS analysis\n    const atsAnalysis = await performComprehensiveATSAnalysis(\n      resumeData, \n      jobDescription, \n      options\n    );\n\n    const totalTime = Date.now() - startTime;\n\n    console.log(`‚úÖ ATS optimization analysis completed in ${totalTime}ms`);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        ...atsAnalysis,\n        processingTime: totalTime,\n        lastAnalyzed: new Date().toISOString()\n      },\n      message: 'ATS optimization analysis completed successfully'\n    });\n\n  } catch (error: unknown) {\n    const totalTime = Date.now() - startTime;\n    console.error(`‚ùå ATS optimization API error (${totalTime}ms):`, error);\n    \n    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n    \n    logServerError(error as Error, {\n      service: 'ats-optimization-api',\n      action: 'analyze'\n    }, {\n      processingTime: totalTime\n    });\n\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Failed to perform ATS optimization analysis',\n        message: process.env.NODE_ENV === 'development' ? errorMessage : undefined\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Perform comprehensive ATS analysis\n */\nasync function performComprehensiveATSAnalysis(\n  resumeData: any,\n  jobDescription?: string,\n  options: any = {}\n): Promise<any> {\n  \n  // Extract text content for analysis\n  const resumeText = extractResumeText(resumeData);\n  \n  // 1. Keyword Analysis\n  const keywordAnalysis = analyzeKeywords(resumeText, jobDescription, options);\n  \n  // 2. Format Analysis  \n  const formatAnalysis = analyzeFormat(resumeData, options);\n  \n  // 3. Structural Analysis\n  const structuralAnalysis = analyzeStructure(resumeData, options);\n  \n  // 4. Industry Alignment (if specified)\n  const industryAlignment = options.targetIndustry \n    ? analyzeIndustryAlignment(resumeData, options.targetIndustry, options.experienceLevel)\n    : undefined;\n    \n  // Calculate overall ATS score\n  const atsScore = calculateOverallATSScore({\n    keywordAnalysis,\n    formatAnalysis,\n    structuralAnalysis,\n    industryAlignment\n  });\n  \n  // Determine grade\n  const overallGrade = getGradeFromScore(atsScore);\n  \n  // Generate improvement recommendations\n  const improvements = generateImprovementRecommendations({\n    keywordAnalysis,\n    formatAnalysis,  \n    structuralAnalysis,\n    industryAlignment,\n    atsScore\n  });\n\n  return {\n    atsScore,\n    overallGrade,\n    keywordAnalysis,\n    formatAnalysis,\n    structuralAnalysis,\n    industryAlignment,\n    improvements\n  };\n}\n\n/**\n * Extract text content from resume data\n */\nfunction extractResumeText(resumeData: any): string {\n  if (!resumeData) return '';\n  \n  let text = '';\n  \n  // Handle Foundry extraction format\n  if (resumeData.personalInfo && typeof resumeData.personalInfo === 'object') {\n    // Extract from Foundry format\n    if (resumeData.personalInfo.name?.content) text += resumeData.personalInfo.name.content + ' ';\n    if (resumeData.personalInfo.email?.content) text += resumeData.personalInfo.email.content + ' ';\n    \n    if (resumeData.skills) {\n      text += resumeData.skills.map((s: any) => s.skill || s).join(' ') + ' ';\n    }\n    \n    if (resumeData.experience) {\n      resumeData.experience.forEach((exp: any) => {\n        text += (exp.company?.content || exp.company || '') + ' ';\n        text += (exp.position?.content || exp.position || '') + ' ';\n        text += (exp.description?.content || exp.description || '') + ' ';\n      });\n    }\n  } else {\n    // Handle legacy format\n    if (resumeData.personalInfo?.name) text += resumeData.personalInfo.name + ' ';\n    if (resumeData.personalInfo?.email) text += resumeData.personalInfo.email + ' ';\n    \n    if (resumeData.skills) {\n      text += resumeData.skills.join(' ') + ' ';\n    }\n    \n    if (resumeData.experience) {\n      resumeData.experience.forEach((exp: any) => {\n        text += (exp.company || '') + ' ';\n        text += (exp.position || '') + ' ';\n        text += (exp.description || '') + ' ';\n      });\n    }\n  }\n  \n  return text;\n}\n\n/**\n * Analyze keywords and density\n */\nfunction analyzeKeywords(resumeText: string, jobDescription?: string, options: any = {}): any {\n  const resumeWords = extractWords(resumeText);\n  \n  if (jobDescription) {\n    const jobWords = extractWords(jobDescription);\n    const jobKeywords = extractKeywords(jobWords);\n    \n    const matchedKeywords = jobKeywords.filter(keyword => \n      resumeWords.some(word => word.toLowerCase().includes(keyword.toLowerCase()))\n    );\n    \n    const missingKeywords = jobKeywords.filter(keyword => \n      !matchedKeywords.includes(keyword)\n    );\n    \n    const keywordDensity = matchedKeywords.length / jobKeywords.length;\n    \n    return {\n      totalKeywords: jobKeywords.length,\n      matchedKeywords,\n      missingKeywords: missingKeywords.slice(0, 10), // Top 10 missing\n      keywordDensity,\n      recommendations: generateKeywordRecommendations(missingKeywords, keywordDensity)\n    };\n  } else {\n    // Generic keyword analysis\n    const keywords = extractKeywords(resumeWords);\n    return {\n      totalKeywords: keywords.length,\n      matchedKeywords: keywords,\n      missingKeywords: [],\n      keywordDensity: 1.0,\n      recommendations: ['Provide a job description for targeted keyword analysis']\n    };\n  }\n}\n\n/**\n * Analyze resume format for ATS compatibility\n */\nfunction analyzeFormat(resumeData: any, options: any = {}): any {\n  const issues: any[] = [];\n  let score = 100;\n  \n  // Check for common ATS issues\n  if (!resumeData.personalInfo?.email) {\n    issues.push({\n      type: 'critical',\n      issue: 'Missing email address',\n      solution: 'Add a professional email address in the contact section',\n      impact: 'ATS systems require contact information to process applications'\n    });\n    score -= 20;\n  }\n  \n  if (!resumeData.personalInfo?.phone) {\n    issues.push({\n      type: 'warning',\n      issue: 'Missing phone number',\n      solution: 'Add your phone number for recruiter contact',\n      impact: 'Recruiters may not be able to reach you quickly'\n    });\n    score -= 10;\n  }\n  \n  if (!resumeData.skills || resumeData.skills.length < 5) {\n    issues.push({\n      type: 'warning',\n      issue: 'Limited skills section',\n      solution: 'Add more relevant technical and soft skills',\n      impact: 'ATS systems heavily weight skill keywords for matching'\n    });\n    score -= 15;\n  }\n  \n  // Check document structure\n  const hasHeaders = resumeData.metadata?.documentStructure?.hasHeaders;\n  if (!hasHeaders) {\n    issues.push({\n      type: 'suggestion',\n      issue: 'Unclear section headers',\n      solution: 'Use clear, standard section headers like \"Experience\", \"Education\", \"Skills\"',\n      impact: 'ATS systems rely on section headers to categorize information'\n    });\n    score -= 5;\n  }\n  \n  return {\n    score: Math.max(0, score),\n    issues\n  };\n}\n\n/**\n * Analyze resume structure\n */\nfunction analyzeStructure(resumeData: any, options: any = {}): any {\n  const recommendations: string[] = [];\n  let score = 100;\n  \n  const hasContactInfo = !!(resumeData.personalInfo?.email || resumeData.personalInfo?.phone);\n  const hasProfessionalSummary = !!resumeData.summary;\n  const hasWorkExperience = resumeData.experience && resumeData.experience.length > 0;\n  const hasEducation = resumeData.education && resumeData.education.length > 0;\n  const hasSkillsSection = resumeData.skills && resumeData.skills.length > 0;\n  \n  if (!hasContactInfo) {\n    recommendations.push('Add complete contact information including email and phone');\n    score -= 20;\n  }\n  \n  if (!hasProfessionalSummary) {\n    recommendations.push('Include a professional summary to highlight your value proposition');\n    score -= 15;\n  }\n  \n  if (!hasWorkExperience) {\n    recommendations.push('Add relevant work experience with specific achievements');\n    score -= 25;\n  }\n  \n  if (!hasEducation) {\n    recommendations.push('Include your educational background');\n    score -= 10;\n  }\n  \n  if (!hasSkillsSection) {\n    recommendations.push('Create a dedicated skills section with relevant keywords');\n    score -= 20;\n  }\n  \n  return {\n    score: Math.max(0, score),\n    hasContactInfo,\n    hasProfessionalSummary,\n    hasWorkExperience,\n    hasEducation,\n    hasSkillsSection,\n    recommendations\n  };\n}\n\n/**\n * Analyze industry alignment\n */\nfunction analyzeIndustryAlignment(resumeData: any, targetIndustry: string, experienceLevel: string): any {\n  // Industry-specific keywords database (simplified)\n  const industryKeywords: Record<string, string[]> = {\n    'technology': ['javascript', 'python', 'cloud', 'api', 'database', 'agile', 'devops'],\n    'healthcare': ['patient care', 'medical', 'clinical', 'hipaa', 'healthcare', 'treatment'],\n    'finance': ['financial analysis', 'risk management', 'compliance', 'accounting', 'investment'],\n    'marketing': ['digital marketing', 'seo', 'social media', 'analytics', 'campaign', 'brand']\n  };\n  \n  const keywords = industryKeywords[targetIndustry.toLowerCase()] || [];\n  const resumeText = extractResumeText(resumeData).toLowerCase();\n  \n  const relevantSkills = keywords.filter(keyword => resumeText.includes(keyword));\n  const suggestedSkills = keywords.filter(keyword => !resumeText.includes(keyword)).slice(0, 5);\n  \n  const score = keywords.length > 0 ? (relevantSkills.length / keywords.length) * 100 : 50;\n  \n  return {\n    score,\n    relevantSkills,\n    suggestedSkills,\n    industryKeywords: keywords\n  };\n}\n\n/**\n * Calculate overall ATS score\n */\nfunction calculateOverallATSScore(analysis: any): number {\n  const weights = {\n    keyword: 0.4,\n    format: 0.3,\n    structure: 0.2,\n    industry: 0.1\n  };\n  \n  let score = 0;\n  score += (analysis.keywordAnalysis.keywordDensity * 100) * weights.keyword;\n  score += analysis.formatAnalysis.score * weights.format;\n  score += analysis.structuralAnalysis.score * weights.structure;\n  \n  if (analysis.industryAlignment) {\n    score += analysis.industryAlignment.score * weights.industry;\n  } else {\n    // Redistribute industry weight to other factors\n    score += analysis.formatAnalysis.score * weights.industry;\n  }\n  \n  return Math.round(Math.max(0, Math.min(100, score)));\n}\n\n/**\n * Convert score to letter grade\n */\nfunction getGradeFromScore(score: number): 'A' | 'B' | 'C' | 'D' | 'F' {\n  if (score >= 90) return 'A';\n  if (score >= 80) return 'B';\n  if (score >= 70) return 'C';\n  if (score >= 60) return 'D';\n  return 'F';\n}\n\n/**\n * Generate improvement recommendations\n */\nfunction generateImprovementRecommendations(analysis: any): any[] {\n  const improvements: any[] = [];\n  \n  // Keyword improvements\n  if (analysis.keywordAnalysis.keywordDensity < 0.5) {\n    improvements.push({\n      priority: 'high',\n      category: 'keywords',\n      description: 'Increase keyword density by including more relevant terms from the job description',\n      implementation: `Add these missing keywords: ${analysis.keywordAnalysis.missingKeywords.slice(0, 5).join(', ')}`,\n      expectedImpact: 'Significantly improve ATS matching and visibility to recruiters'\n    });\n  }\n  \n  // Format improvements\n  if (analysis.formatAnalysis.score < 80) {\n    improvements.push({\n      priority: 'high',\n      category: 'formatting',\n      description: 'Address critical formatting issues for better ATS parsing',\n      implementation: 'Fix the formatting issues identified in the analysis',\n      expectedImpact: 'Ensure ATS systems can properly read and categorize your information'\n    });\n  }\n  \n  // Structure improvements\n  if (analysis.structuralAnalysis.score < 70) {\n    improvements.push({\n      priority: 'medium',\n      category: 'structure',\n      description: 'Improve resume structure with missing essential sections',\n      implementation: analysis.structuralAnalysis.recommendations.join('; '),\n      expectedImpact: 'Create a more complete professional profile for ATS systems'\n    });\n  }\n  \n  // Industry alignment improvements\n  if (analysis.industryAlignment && analysis.industryAlignment.score < 60) {\n    improvements.push({\n      priority: 'medium',\n      category: 'content',\n      description: 'Enhance industry-specific content and keywords',\n      implementation: `Consider adding these industry keywords: ${analysis.industryAlignment.suggestedSkills.join(', ')}`,\n      expectedImpact: 'Better alignment with industry expectations and job requirements'\n    });\n  }\n  \n  return improvements;\n}\n\n// Helper functions\nfunction extractWords(text: string): string[] {\n  return text.toLowerCase()\n    .replace(/[^\\w\\s]/g, ' ')\n    .split(/\\s+/)\n    .filter(word => word.length > 2);\n}\n\nfunction extractKeywords(words: string[]): string[] {\n  const stopWords = new Set(['the', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by']);\n  const wordCount: Record<string, number> = {};\n  \n  words.forEach(word => {\n    if (!stopWords.has(word)) {\n      wordCount[word] = (wordCount[word] || 0) + 1;\n    }\n  });\n  \n  return Object.entries(wordCount)\n    .sort((a, b) => b[1] - a[1])\n    .slice(0, 20)\n    .map(([word]) => word);\n}\n\nfunction generateKeywordRecommendations(missingKeywords: string[], density: number): string[] {\n  const recommendations: string[] = [];\n  \n  if (density < 0.3) {\n    recommendations.push('Keyword density is low. Consider incorporating more job-relevant terms throughout your resume.');\n  }\n  \n  if (missingKeywords.length > 5) {\n    recommendations.push(`High number of missing keywords (${missingKeywords.length}). Focus on adding the most relevant ones to your experience descriptions.`);\n  }\n  \n  if (missingKeywords.length > 0) {\n    recommendations.push(`Consider adding these keywords naturally: ${missingKeywords.slice(0, 3).join(', ')}`);\n  }\n  \n  return recommendations;\n}\n\n/**\n * OPTIONS handler for CORS\n */\nexport async function OPTIONS(request: NextRequest): Promise<NextResponse> {\n  return new NextResponse(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    },\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/app/api/health/auth/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used.","line":4,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":34}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { firebaseUserService } from '@/lib/services/firebase-user-service';\n\nexport async function GET(request: NextRequest) {\n  const timestamp = new Date().toISOString();\n  console.log(`üè• [${timestamp}] Auth health check requested`);\n  \n  try {\n    const healthResult = await firebaseUserService.healthCheck();\n    \n    console.log(`üè• [${timestamp}] Auth health check result:`, healthResult);\n    \n    return NextResponse.json({\n      status: healthResult.healthy ? 'healthy' : 'unhealthy',\n      timestamp,\n      checks: {\n        firebaseAuth: healthResult.details.firebaseAuth,\n        firestore: healthResult.details.firestore,\n      },\n      services: {\n        name: 'PrepBettr Auth System',\n        version: '1.0.0'\n      }\n    }, { \n      status: healthResult.healthy ? 200 : 503 \n    });\n    \n  } catch (error) {\n    console.error(`üè• [${timestamp}] Auth health check failed:`, error);\n    \n    return NextResponse.json({\n      status: 'error',\n      timestamp,\n      error: error instanceof Error ? error.message : 'Unknown error',\n      checks: {\n        firebaseAuth: 'error',\n        firestore: 'error'\n      }\n    }, { status: 500 });\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/app/api/health/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[170,173],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[170,173],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\n\ninterface HealthStatus {\n  service: string;\n  status: 'healthy' | 'unhealthy' | 'degraded';\n  timestamp: string;\n  details?: any;\n}\n\ninterface OverallHealth {\n  status: 'healthy' | 'unhealthy' | 'degraded';\n  timestamp: string;\n  services: {\n    [key: string]: HealthStatus;\n  };\n  summary: {\n    total: number;\n    healthy: number;\n    unhealthy: number;\n    degraded: number;\n  };\n}\n\nasync function checkFirebaseHealth(): Promise<HealthStatus> {\n  try {\n    const response = await fetch(`${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/api/health/firebase`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    \n    if (!response.ok) {\n      return {\n        service: 'firebase',\n        status: 'unhealthy',\n        timestamp: new Date().toISOString(),\n        details: { error: `HTTP ${response.status}` }\n      };\n    }\n    \n    const data = await response.json();\n    return {\n      service: 'firebase',\n      status: data.status === 'healthy' ? 'healthy' : 'unhealthy',\n      timestamp: new Date().toISOString(),\n      details: data.details\n    };\n  } catch (error) {\n    return {\n      service: 'firebase',\n      status: 'unhealthy',\n      timestamp: new Date().toISOString(),\n      details: { error: error instanceof Error ? error.message : 'Unknown error' }\n    };\n  }\n}\n\nasync function checkDatabaseHealth(): Promise<HealthStatus> {\n  // For now, return healthy - can be expanded to check actual database connections\n  return {\n    service: 'database',\n    status: 'healthy',\n    timestamp: new Date().toISOString(),\n    details: { note: 'Basic health check - no database connectivity test implemented' }\n  };\n}\n\nasync function checkSystemHealth(): Promise<HealthStatus> {\n  const memoryUsage = process.memoryUsage();\n  const uptime = process.uptime();\n  \n  // Simple memory health check - consider degraded if using > 80% of heap\n  const memoryUsagePercent = (memoryUsage.heapUsed / memoryUsage.heapTotal) * 100;\n  const status = memoryUsagePercent > 80 ? 'degraded' : 'healthy';\n  \n  return {\n    service: 'system',\n    status,\n    timestamp: new Date().toISOString(),\n    details: {\n      uptime: Math.round(uptime),\n      memory: {\n        used: Math.round(memoryUsage.heapUsed / 1024 / 1024),\n        total: Math.round(memoryUsage.heapTotal / 1024 / 1024),\n        percentage: Math.round(memoryUsagePercent),\n        unit: 'MB'\n      }\n    }\n  };\n}\n\nexport async function GET() {\n  try {\n    console.log('üè• General health check requested');\n    \n    // Check all services in parallel\n    const [firebaseHealth, databaseHealth, systemHealth] = await Promise.all([\n      checkFirebaseHealth(),\n      checkDatabaseHealth(),\n      checkSystemHealth()\n    ]);\n    \n    const services = {\n      firebase: firebaseHealth,\n      database: databaseHealth,\n      system: systemHealth\n    };\n    \n    // Calculate summary\n    const serviceStatuses = Object.values(services);\n    const summary = {\n      total: serviceStatuses.length,\n      healthy: serviceStatuses.filter(s => s.status === 'healthy').length,\n      unhealthy: serviceStatuses.filter(s => s.status === 'unhealthy').length,\n      degraded: serviceStatuses.filter(s => s.status === 'degraded').length\n    };\n    \n    // Determine overall status\n    let overallStatus: 'healthy' | 'unhealthy' | 'degraded';\n    if (summary.unhealthy > 0) {\n      overallStatus = 'unhealthy';\n    } else if (summary.degraded > 0) {\n      overallStatus = 'degraded';\n    } else {\n      overallStatus = 'healthy';\n    }\n    \n    const response: OverallHealth = {\n      status: overallStatus,\n      timestamp: new Date().toISOString(),\n      services,\n      summary\n    };\n    \n    console.log('üè• General health check result:', { status: overallStatus, summary });\n    \n    // Return appropriate HTTP status\n    const httpStatus = overallStatus === 'healthy' ? 200 : \n                      overallStatus === 'degraded' ? 200 : 503;\n    \n    return NextResponse.json(response, {\n      status: httpStatus,\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-cache'\n      }\n    });\n    \n  } catch (error) {\n    console.error('‚ùå General health check failed:', error);\n    \n    return NextResponse.json({\n      status: 'unhealthy',\n      timestamp: new Date().toISOString(),\n      services: {},\n      summary: { total: 0, healthy: 0, unhealthy: 1, degraded: 0 },\n      error: error instanceof Error ? error.message : 'Unknown error'\n    }, {\n      status: 503,\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-cache'\n      }\n    });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/app/api/interview/agent/handoff/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1173,1176],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1173,1176],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":126,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4054,4057],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4054,4057],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { InterviewWorkflow } from '@/lib/azure-ai-foundry/workflows/interview-workflow';\nimport type { AgentHandoff } from '@/lib/azure-ai-foundry/workflows/workflow-types';\n\n// Initialize workflow lazily to avoid build-time issues\nlet workflow: InterviewWorkflow | null = null;\n\nfunction getWorkflow(): InterviewWorkflow {\n  if (!workflow) {\n    workflow = new InterviewWorkflow();\n  }\n  return workflow;\n}\n\n/**\n * POST /api/interview/agent/handoff\n * \n * Trigger agent handoff and advance to next stage\n * \n * Request Body:\n * - sessionId: string (required)\n * - fromAgent?: AgentType (current agent)\n * - toAgent?: AgentType (target agent, auto-determined if not provided)\n * - insights?: string[] (key insights to pass to next agent)\n * - focusAreas?: string[] (areas for next agent to focus on)\n * - instructions?: string (additional instructions for handoff)\n * - force?: boolean (force handoff even if current stage incomplete)\n * \n * Response:\n * - success: boolean\n * - handoff: AgentHandoff information\n * - status: updated WorkflowStatus\n */\nexport async function POST(request: NextRequest) {\n  let body: any = {};\n  try {\n    body = await request.json();\n    \n    if (!body.sessionId) {\n      return NextResponse.json({\n        error: 'Session ID is required'\n      }, { status: 400 });\n    }\n\n    const sessionId = body.sessionId;\n    \n    console.log(`[API] Agent handoff requested for session: ${sessionId}`);\n    console.log(`- From: ${body.fromAgent || 'auto'}`);\n    console.log(`- To: ${body.toAgent || 'auto'}`);\n    console.log(`- Force: ${body.force || false}`);\n\n    // Get workflow instance (initialized lazily)\n    const workflowInstance = getWorkflow();\n\n    // Get current status to validate handoff\n    const currentStatus = await workflowInstance.getStatus(sessionId);\n    \n    // Validate that handoff is possible\n    if (!body.force) {\n      if (currentStatus.state === 'completed') {\n        return NextResponse.json({\n          success: false,\n          error: 'Interview is already completed',\n          code: 'INVALID_STATE'\n        }, { status: 400 });\n      }\n      \n      if (currentStatus.state === 'failed') {\n        return NextResponse.json({\n          success: false,\n          error: 'Interview has failed, cannot perform handoff',\n          code: 'INVALID_STATE'\n        }, { status: 400 });\n      }\n      \n      if (currentStatus.pendingAgents.length === 0) {\n        return NextResponse.json({\n          success: false,\n          error: 'No pending agents for handoff',\n          code: 'INVALID_STATE'\n        }, { status: 400 });\n      }\n    }\n\n    // Determine agents for handoff\n    const fromAgent = body.fromAgent || currentStatus.activeAgents[0];\n    const toAgent = body.toAgent || currentStatus.pendingAgents[0];\n\n    // Build handoff context\n    const handoffContext: AgentHandoff = {\n      sessionId,\n      fromAgent,\n      toAgent,\n      context: {\n        previousQuestions: [], // Would be populated from session state\n        insights: body.insights || [\n          `Completed ${currentStatus.currentStage} stage`,\n          `Generated ${currentStatus.metrics.totalQuestionsGenerated} questions so far`\n        ],\n        focusAreas: body.focusAreas || [],\n        instructions: body.instructions\n      },\n      timestamp: Date.now()\n    };\n\n    console.log(`[API] Executing handoff: ${fromAgent} ‚Üí ${toAgent}`);\n\n    // Trigger stage advancement (which handles the agent transition)\n    await workflowInstance.advanceStage(sessionId);\n    \n    // Get updated status\n    const updatedStatus = await workflowInstance.getStatus(sessionId);\n\n    return NextResponse.json({\n      success: true,\n      sessionId,\n      handoff: handoffContext,\n      status: updatedStatus,\n      message: `Agent handoff completed: ${fromAgent} ‚Üí ${toAgent}`,\n      timing: {\n        handoffTimestamp: handoffContext.timestamp,\n        nextStageStartTime: updatedStatus.stages[updatedStatus.currentStageIndex - 1]?.startTime\n      }\n    });\n\n  } catch (error: any) {\n    console.error('[API] Error during agent handoff:', error);\n    \n    if (error.code === 'SESSION_NOT_FOUND') {\n      return NextResponse.json({\n        success: false,\n        error: 'Session not found',\n        sessionId: body.sessionId\n      }, { status: 404 });\n    }\n\n    return NextResponse.json({\n      success: false,\n      error: error.message || 'Failed to execute agent handoff',\n      code: error.code || 'UNKNOWN_ERROR',\n      sessionId: body.sessionId,\n      recoverable: error.recoverable ?? true\n    }, { status: 500 });\n  }\n}\n\n/**\n * GET /api/interview/agent/handoff\n * \n * Get handoff API documentation\n */\nexport async function GET() {\n  return NextResponse.json({\n    endpoint: 'POST /api/interview/agent/handoff',\n    description: 'Trigger agent handoff and advance to next interview stage',\n    requiredFields: ['sessionId'],\n    optionalFields: [\n      'fromAgent',\n      'toAgent',\n      'insights',\n      'focusAreas', \n      'instructions',\n      'force'\n    ],\n    agentTypes: ['technical', 'behavioral', 'industry'],\n    validTransitions: {\n      technical: ['behavioral', 'industry'],\n      behavioral: ['industry', 'wrap-up'],\n      industry: ['wrap-up']\n    },\n    example: {\n      sessionId: 'interview_abc123',\n      fromAgent: 'technical',\n      toAgent: 'behavioral',\n      insights: [\n        'Candidate shows strong algorithmic thinking',\n        'Good understanding of system design principles'\n      ],\n      focusAreas: [\n        'Leadership experience',\n        'Team collaboration'\n      ],\n      instructions: 'Focus on senior-level behavioral scenarios'\n    },\n    notes: [\n      'Agents are automatically determined based on stage progression if not specified',\n      'Set force: true to skip validation checks',\n      'Handoffs update session state and trigger next agent'\n    ]\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/app/api/interview/session/[id]/complete/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":136,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4733,4736],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4733,4736],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":203,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":203,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6618,6621],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6618,6621],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { InterviewWorkflow } from '@/lib/azure-ai-foundry/workflows/interview-workflow';\n\n// Lazy initialization to avoid build-time issues\nlet workflow: InterviewWorkflow | null = null;\n\nfunction getWorkflow(): InterviewWorkflow {\n  if (!workflow) {\n    workflow = new InterviewWorkflow();\n  }\n  return workflow;\n}\n\n/**\n * POST /api/interview/session/[id]/complete\n * \n * Complete an interview session and get comprehensive results\n * \n * Path Parameters:\n * - id: sessionId (string)\n * \n * Request Body (optional):\n * - force?: boolean (force completion even if not all stages done)\n * - includeReport?: boolean (generate detailed PDF report)\n * - candidateFeedback?: boolean (include candidate-specific feedback)\n * - sharing?: { recruiterId?, managerEmails? } (sharing configuration)\n * \n * Response:\n * - result: InterviewResult (comprehensive interview analysis)\n * - exports: available export options\n * - sharing: sharing configuration applied\n */\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  const resolvedParams = await params;\n  const sessionId = resolvedParams.id;\n  \n  try {\n    const body = await request.json().catch(() => ({}));\n\n    if (!sessionId) {\n      return NextResponse.json({\n        error: 'Session ID is required'\n      }, { status: 400 });\n    }\n\n    console.log(`[API] Completing interview session: ${sessionId}`);\n    console.log(`- Force: ${body.force || false}`);\n    console.log(`- Include Report: ${body.includeReport || false}`);\n    console.log(`- Candidate Feedback: ${body.candidateFeedback || false}`);\n\n    // Get current status for validation\n    const currentStatus = await getWorkflow().getStatus(sessionId);\n    \n    if (!body.force && currentStatus.state === 'completed') {\n      return NextResponse.json({\n        success: false,\n        error: 'Interview is already completed',\n        sessionId,\n        existingResult: await getWorkflow().completeInterview(sessionId)\n      }, { status: 400 });\n    }\n\n    if (currentStatus.state === 'failed') {\n      return NextResponse.json({\n        success: false,\n        error: 'Interview has failed, cannot complete normally',\n        sessionId,\n        suggestion: 'Use force: true to get partial results'\n      }, { status: 400 });\n    }\n\n    // Complete the interview workflow\n    const result = await getWorkflow().completeInterview(sessionId);\n\n    // Enhance result with requested features\n    if (body.includeReport) {\n      result.exports.reportAvailable = true;\n      // In production, would generate PDF here\n    }\n\n    if (body.candidateFeedback) {\n      result.feedback.candidateFeedback = {\n        positives: [\n          'Demonstrated strong technical knowledge',\n          'Clear communication throughout the interview'\n        ],\n        developmentAreas: [\n          'Consider deepening system design knowledge',\n          'Practice explaining complex concepts simply'\n        ],\n        resources: [\n          'System Design Interview book',\n          'LeetCode practice problems',\n          'Leadership communication courses'\n        ],\n        encouragement: 'Thank you for your time today. You showed great potential and we appreciate your thoughtful responses.'\n      };\n    }\n\n    // Handle sharing configuration\n    const sharingConfig = {\n      recruiterId: body.sharing?.recruiterId,\n      managerEmails: body.sharing?.managerEmails || [],\n      shareCandidateFeedback: body.candidateFeedback || false,\n      shareDetailedReport: body.includeReport || false,\n      generatedAt: new Date().toISOString()\n    };\n\n    console.log(`[API] Interview completed successfully`);\n    console.log(`- Total duration: ${result.summary.totalDurationMinutes} minutes`);\n    console.log(`- Stages completed: ${result.summary.stagesCompleted}/${result.summary.totalStages}`);\n    console.log(`- Questions asked: ${result.summary.questionsAsked}`);\n    console.log(`- Overall outcome: ${result.outcome}`);\n\n    return NextResponse.json({\n      success: true,\n      sessionId,\n      result,\n      sharing: sharingConfig,\n      exports: {\n        pdfReportUrl: result.exports.reportAvailable ? `/api/interview/session/${sessionId}/report.pdf` : null,\n        candidateSummaryUrl: body.candidateFeedback ? `/api/interview/session/${sessionId}/candidate-summary` : null,\n        recruiterReportUrl: `/api/interview/session/${sessionId}/recruiter-report`,\n        rawDataUrl: `/api/interview/session/${sessionId}/raw-data`\n      },\n      metadata: {\n        completedAt: new Date().toISOString(),\n        processingTime: result.metadata.generationDuration,\n        apiVersion: '1.0.0'\n      }\n    });\n\n  } catch (error: any) {\n    console.error(`[API] Error completing interview:`, error);\n    \n    if (error.code === 'SESSION_NOT_FOUND') {\n      return NextResponse.json({\n        success: false,\n        error: 'Session not found',\n        sessionId: resolvedParams.id\n      }, { status: 404 });\n    }\n\n    return NextResponse.json({\n      success: false,\n      error: error.message || 'Failed to complete interview',\n      code: error.code || 'UNKNOWN_ERROR',\n      sessionId: resolvedParams.id,\n      recoverable: error.recoverable ?? false\n    }, { status: 500 });\n  }\n}\n\n/**\n * GET /api/interview/session/[id]/complete\n * \n * Get completion status and available options\n */\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  const resolvedParams = await params;\n  const sessionId = resolvedParams.id;\n  \n  try {\n    \n    // Get current session status\n    const status = await getWorkflow().getStatus(sessionId);\n    \n    const canComplete = status.state === 'in-progress' || status.state === 'completed';\n    const completionOptions = {\n      canForceComplete: status.state !== 'completed',\n      canGenerateReport: true,\n      canProvideCandidateFeedback: true,\n      availableExports: ['pdf', 'candidate-summary', 'recruiter-report', 'raw-data']\n    };\n\n    return NextResponse.json({\n      sessionId,\n      canComplete,\n      currentState: status.state,\n      completionOptions,\n      progress: {\n        stagesCompleted: status.stages.filter(s => s.status === 'completed').length,\n        totalStages: status.totalStages,\n        progressPercentage: status.progressPercentage\n      },\n      example: {\n        force: false,\n        includeReport: true,\n        candidateFeedback: true,\n        sharing: {\n          recruiterId: 'recruiter_123',\n          managerEmails: ['manager@company.com']\n        }\n      }\n    });\n\n  } catch (error: any) {\n    if (error.code === 'SESSION_NOT_FOUND') {\n      return NextResponse.json({\n        error: 'Session not found',\n        sessionId: resolvedParams.id\n      }, { status: 404 });\n    }\n\n    return NextResponse.json({\n      error: error.message || 'Failed to get completion info',\n      sessionId: resolvedParams.id\n    }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/app/api/interview/session/[id]/status/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2333,2336],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2333,2336],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { InterviewWorkflow } from '@/lib/azure-ai-foundry/workflows/interview-workflow';\n\n// Lazy initialization to avoid build-time issues\nlet workflow: InterviewWorkflow | null = null;\n\nfunction getWorkflow(): InterviewWorkflow {\n  if (!workflow) {\n    workflow = new InterviewWorkflow();\n  }\n  return workflow;\n}\n\n/**\n * GET /api/interview/session/[id]/status\n * \n * Get current status of an interview session\n * \n * Path Parameters:\n * - id: sessionId (string)\n * \n * Query Parameters:\n * - refresh?: boolean (force refresh timing data)\n * \n * Response:\n * - status: WorkflowStatus (complete status object)\n * - timing: real-time timing information\n * - progress: percentage and stage information\n */\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  const resolvedParams = await params;\n  const sessionId = resolvedParams.id;\n  \n  try {\n    const { searchParams } = new URL(request.url);\n    const refresh = searchParams.get('refresh') === 'true';\n\n    if (!sessionId) {\n      return NextResponse.json({\n        error: 'Session ID is required'\n      }, { status: 400 });\n    }\n\n    console.log(`[API] Getting status for session: ${sessionId}${refresh ? ' (refresh)' : ''}`);\n\n    // Get current workflow status\n    const status = await getWorkflow().getStatus(sessionId);\n\n    return NextResponse.json({\n      success: true,\n      sessionId,\n      status,\n      timestamp: Date.now(),\n      // Additional computed fields for convenience\n      computed: {\n        isActive: status.state === 'in-progress',\n        isCompleted: status.state === 'completed',\n        canAdvance: status.currentStageIndex < status.totalStages && status.state !== 'failed',\n        currentStageName: status.currentStage ? \n          status.stages.find(s => s.stage.id === status.currentStage)?.stage.name : \n          null,\n        nextStageName: status.currentStageIndex < status.totalStages ? \n          status.stages[status.currentStageIndex]?.stage.name : \n          null,\n        estimatedCompletionTime: new Date(status.timing.startTime + status.timing.totalEstimatedMinutes * 60000).toISOString(),\n        healthStatus: status.error ? 'error' : status.state === 'failed' ? 'failed' : 'healthy'\n      }\n    });\n\n  } catch (error: any) {\n    console.error(`[API] Error getting session status:`, error);\n    \n    if (error.code === 'SESSION_NOT_FOUND') {\n      return NextResponse.json({\n        success: false,\n        error: 'Session not found',\n        sessionId: resolvedParams.id\n      }, { status: 404 });\n    }\n\n    return NextResponse.json({\n      success: false,\n      error: error.message || 'Failed to get session status',\n      code: error.code || 'UNKNOWN_ERROR',\n      sessionId: resolvedParams.id\n    }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/app/api/interview/start-multi-agent/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":100,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3649,3652],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3649,3652],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { InterviewWorkflow } from '@/lib/azure-ai-foundry/workflows/interview-workflow';\nimport type { InterviewConfig } from '@/lib/azure-ai-foundry/workflows/workflow-types';\nimport { nanoid } from 'nanoid';\n\n// Lazy initialization to avoid build-time issues\nlet workflow: InterviewWorkflow | null = null;\n\nfunction getWorkflow(): InterviewWorkflow {\n  if (!workflow) {\n    workflow = new InterviewWorkflow();\n  }\n  return workflow;\n}\n\n/**\n * POST /api/interview/start-multi-agent\n * \n * Start a new multi-agent interview session\n * \n * Request Body:\n * - role: string (required)\n * - experienceLevel: 'entry' | 'mid' | 'senior' | 'executive' (required)  \n * - industry?: string\n * - candidateProfile: { name, skills, ... } (required)\n * - companyInfo?: { name, industry, size, culture }\n * - customization?: { enabledStages, stageDurations, ... }\n * - metadata?: { source, recruiterId, ... }\n * \n * Response: \n * - sessionId: string\n * - status: WorkflowStatus\n */\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    \n    // Validate required fields\n    if (!body.role || !body.experienceLevel || !body.candidateProfile?.name || !body.candidateProfile?.skills) {\n      return NextResponse.json({\n        error: 'Missing required fields',\n        required: ['role', 'experienceLevel', 'candidateProfile.name', 'candidateProfile.skills']\n      }, { status: 400 });\n    }\n\n    // Generate session ID if not provided\n    const sessionId = body.sessionId || `interview_${nanoid(12)}`;\n\n    // Build interview configuration\n    const config: InterviewConfig = {\n      sessionId,\n      role: body.role,\n      experienceLevel: body.experienceLevel,\n      industry: body.industry,\n      roleType: body.roleType,\n      candidateProfile: {\n        name: body.candidateProfile.name,\n        email: body.candidateProfile.email,\n        skills: body.candidateProfile.skills || [],\n        previousRoles: body.candidateProfile.previousRoles || [],\n        yearsExperience: body.candidateProfile.yearsExperience,\n        education: body.candidateProfile.education,\n        certifications: body.candidateProfile.certifications || []\n      },\n      companyInfo: body.companyInfo,\n      customization: {\n        enabledStages: body.customization?.enabledStages,\n        stageDurations: body.customization?.stageDurations,\n        maxDurationMinutes: body.customization?.maxDurationMinutes || 45,\n        customInstructions: body.customization?.customInstructions,\n        agentOverrides: body.customization?.agentOverrides,\n        questionsPerStage: body.customization?.questionsPerStage,\n        focusAreas: body.customization?.focusAreas\n      },\n      metadata: {\n        source: body.metadata?.source || 'api',\n        recruiterId: body.metadata?.recruiterId,\n        jobPostingId: body.metadata?.jobPostingId,\n        interviewType: body.metadata?.interviewType || 'screening',\n        scheduledAt: body.metadata?.scheduledAt || new Date().toISOString(),\n        tags: body.metadata?.tags || []\n      }\n    };\n\n    console.log(`[API] Starting multi-agent interview for ${config.candidateProfile.name} - Role: ${config.role}`);\n\n    // Start the interview workflow\n    const startedSessionId = await getWorkflow().startMultiAgentInterview(config);\n    \n    // Get initial status\n    const status = await getWorkflow().getStatus(startedSessionId);\n\n    return NextResponse.json({\n      success: true,\n      sessionId: startedSessionId,\n      status,\n      message: 'Multi-agent interview started successfully'\n    }, { status: 201 });\n\n  } catch (error: any) {\n    console.error('[API] Error starting multi-agent interview:', error);\n    \n    return NextResponse.json({\n      success: false,\n      error: error.message || 'Failed to start interview',\n      code: error.code || 'UNKNOWN_ERROR',\n      recoverable: error.recoverable ?? true\n    }, { status: error.code === 'CONFIGURATION_ERROR' ? 400 : 500 });\n  }\n}\n\n/**\n * GET /api/interview/start-multi-agent\n * \n * Get API documentation and requirements\n */\nexport async function GET() {\n  return NextResponse.json({\n    endpoint: 'POST /api/interview/start-multi-agent',\n    description: 'Start a new multi-agent interview session',\n    requiredFields: [\n      'role',\n      'experienceLevel', \n      'candidateProfile.name',\n      'candidateProfile.skills'\n    ],\n    optionalFields: [\n      'sessionId',\n      'industry',\n      'roleType',\n      'companyInfo',\n      'customization',\n      'metadata'\n    ],\n    experienceLevels: ['entry', 'mid', 'senior', 'executive'],\n    defaultStages: ['technical', 'behavioral', 'industry', 'wrap-up'],\n    defaultDurations: {\n      technical: 15,\n      behavioral: 10,\n      industry: 10,\n      'wrap-up': 5\n    },\n    example: {\n      role: 'Senior Frontend Developer',\n      experienceLevel: 'senior',\n      candidateProfile: {\n        name: 'John Doe',\n        skills: ['React', 'TypeScript', 'Node.js'],\n        yearsExperience: 5\n      },\n      companyInfo: {\n        name: 'Tech Corp',\n        industry: 'technology',\n        size: 'medium'\n      },\n      customization: {\n        enabledStages: ['technical', 'behavioral'],\n        stageDurations: { technical: 20 }\n      }\n    }\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/app/api/voice/conversation/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'migrationOpenAIClient' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'context' is defined but never used.","line":227,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":227,"endColumn":36}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { migrationOpenAIClient } from '@/lib/azure-ai-foundry/clients/migration-wrapper';\nimport { azureOpenAIServiceServer } from '@/azure/lib/services/azure-openai-service-server';\nimport { logger } from '@/lib/utils/logger';\nimport { InterviewContext } from '@/lib/voice/azure-adapters';\nimport { ErrorCode, createErrorResponse, getHTTPStatusFromErrorCode } from '@/lib/utils/structured-errors';\n\ninterface ConversationRequest {\n  action: 'start' | 'process' | 'summary';\n  interviewContext?: InterviewContext;\n  userTranscript?: string;\n}\n\n/**\n * Azure OpenAI Conversation API Endpoint\n * Handles interview conversation flow using Azure OpenAI\n */\nexport async function POST(request: NextRequest) {\n    try {\n      const body: ConversationRequest = await request.json();\n      const { action } = body;\n\n      logger.api.request('POST /api/voice/conversation', `Action: ${action}`);\n      console.log('üéØ [CONVERSATION API] Processing request', { action, timestamp: new Date().toISOString() });\n\n      // Initialize Azure OpenAI service if needed\n      if (!azureOpenAIServiceServer.isReady()) {\n        console.log('üîß [CONVERSATION API] Initializing Azure OpenAI service...');\n        const initialized = await azureOpenAIServiceServer.initialize();\n        if (!initialized) {\n          console.error('‚ùå [CONVERSATION API] Failed to initialize Azure OpenAI service');\n          logger.error('Failed to initialize Azure OpenAI service');\n          const err = createErrorResponse(ErrorCode.SERVICE_UNAVAILABLE, { service: 'azure-openai' }, 'AI service unavailable');\n          const status = getHTTPStatusFromErrorCode(err.error.code);\n          const res = NextResponse.json(err, { status });\n          if (err.error.retryable && err.error.retryAfter) {\n            res.headers.set('Retry-After', String(err.error.retryAfter));\n            res.headers.set('X-Retry-After', String(err.error.retryAfter));\n          }\n          return res;\n        }\n        console.log('‚úÖ [CONVERSATION API] Azure OpenAI service initialized successfully');\n      }\n\n      switch (action) {\n        case 'start': {\n          const { interviewContext } = body;\n          if (!interviewContext) {\n            const err = createErrorResponse(\n              ErrorCode.MISSING_REQUIRED_FIELD,\n              { field: 'interviewContext' },\n              'Interview context required for start action'\n            );\n            return NextResponse.json(err, { status: getHTTPStatusFromErrorCode(err.error.code) });\n          }\n\n          // Set interview context in the service\n          azureOpenAIServiceServer.setInterviewContext({\n            type: mapInterviewType(interviewContext.type),\n            position: extractJobRole(interviewContext),\n            company: extractCompanyName(interviewContext),\n            difficulty: 'medium', // Default difficulty\n            preliminaryCollected: false,\n            currentQuestionCount: 0,\n            maxQuestions: 10\n          });\n\n          // Start the interview conversation\n          const response = await azureOpenAIServiceServer.startInterviewConversation();\n          \n          logger.api.response('POST /api/voice/conversation', 200, {\n            action: 'start',\n            questionNumber: response.questionNumber,\n            isComplete: response.isComplete\n          });\n\n          return NextResponse.json({\n            message: response.content,\n            questionNumber: response.questionNumber,\n            isComplete: response.isComplete,\n            hasAudio: false, // TTS will be handled separately\n            followUpSuggestions: response.followUpSuggestions\n          });\n        }\n\n        case 'process': {\n          const { userTranscript } = body;\n          if (!userTranscript || !userTranscript.trim()) {\n            console.warn('üìù [CONVERSATION API] Empty transcript received');\n            const err = createErrorResponse(\n              ErrorCode.MISSING_REQUIRED_FIELD,\n              { field: 'userTranscript' },\n              'User transcript required for process action'\n            );\n            return NextResponse.json(err, { status: getHTTPStatusFromErrorCode(err.error.code) });\n          }\n\n          console.log('üß™ [CONVERSATION API] Processing user transcript', {\n            length: userTranscript.trim().length,\n            preview: userTranscript.trim().substring(0, 50) + '...'\n          });\n\n          try {\n            // Process user response and get AI reply\n            const response = await azureOpenAIServiceServer.processUserResponse(userTranscript.trim());\n\n            console.log('‚úÖ [CONVERSATION API] Successfully processed response', {\n              contentLength: response.content?.length,\n              questionNumber: response.questionNumber,\n              isComplete: response.isComplete\n            });\n\n            logger.api.response('POST /api/voice/conversation', 200, {\n              action: 'process',\n              questionNumber: response.questionNumber,\n              isComplete: response.isComplete,\n              transcriptLength: userTranscript.length\n            });\n\n            return NextResponse.json({\n              message: response.content,\n              questionNumber: response.questionNumber,\n              isComplete: response.isComplete,\n              hasAudio: false, // TTS will be handled separately\n              followUpSuggestions: response.followUpSuggestions\n            });\n          } catch (processError) {\n            console.error('‚ùå [CONVERSATION API] Process user response failed:', processError);\n            throw processError; // Re-throw to be caught by outer error handler\n          }\n        }\n\n        case 'summary': {\n          try {\n            // Generate interview summary\n            const summary = await azureOpenAIServiceServer.generateInterviewSummary();\n\n            logger.api.response('POST /api/voice/conversation', 200, {\n              action: 'summary',\n              hasSummary: !!summary\n            });\n\n            return NextResponse.json({\n              summary,\n              conversationHistory: azureOpenAIServiceServer.getConversationHistory()\n            });\n          } catch (error) {\n            logger.warn('Failed to generate summary, returning empty response', { error: error instanceof Error ? error.message : String(error) });\n            return NextResponse.json({\n              summary: null,\n              error: 'Summary generation failed'\n            });\n          }\n        }\n\n        default:\n          const err = createErrorResponse(\n            ErrorCode.INVALID_PARAMETER,\n            { action },\n            `Invalid action: ${action}`\n          );\n          return NextResponse.json(err, { status: getHTTPStatusFromErrorCode(err.error.code) });\n      }\n\n    } catch (error) {\n      logger.error('Conversation processing failed', error instanceof Error ? error : new Error(String(error)));\n\n      // Provide helpful structured error responses\n      let code: ErrorCode = ErrorCode.INTERNAL_SERVER_ERROR;\n      const message = error instanceof Error ? error.message.toLowerCase() : '';\n\n      if (message.includes('quota') || message.includes('rate limit')) {\n        code = ErrorCode.RATE_LIMIT_EXCEEDED;\n      } else if (message.includes('authentication') || message.includes('unauthorized')) {\n        code = ErrorCode.AUTH_TOKEN_INVALID;\n      } else if (message.includes('timeout')) {\n        code = ErrorCode.SERVICE_TIMEOUT;\n      } else if (message.includes('azure') || message.includes('openai')) {\n        code = ErrorCode.AZURE_OPENAI_ERROR;\n      }\n\n      const err = createErrorResponse(code, { context: 'voice.conversation' });\n      const status = getHTTPStatusFromErrorCode(code);\n      const res = NextResponse.json(err, { status });\n      if (err.error.retryable && err.error.retryAfter) {\n        res.headers.set('Retry-After', String(err.error.retryAfter));\n        res.headers.set('X-Retry-After', String(err.error.retryAfter));\n      }\n      return res;\n    }\n}\n\n/**\n * Health check endpoint for conversation service\n */\nexport async function GET() {\n  const isReady = azureOpenAIServiceServer.isReady();\n  \n  return NextResponse.json({\n    service: 'Azure OpenAI Conversation',\n    status: isReady ? 'ready' : 'not_initialized',\n    timestamp: new Date().toISOString()\n  }, { \n    status: isReady ? 200 : 503 \n  });\n}\n\n// Helper functions\nfunction mapInterviewType(type: string): 'technical' | 'behavioral' | 'general' {\n  const normalizedType = type.toLowerCase();\n  if (normalizedType.includes('technical')) return 'technical';\n  if (normalizedType.includes('behavioral')) return 'behavioral';\n  return 'general';\n}\n\nfunction extractJobRole(context: InterviewContext): string | undefined {\n  // Try to extract job role from various sources\n  if (context.resumeInfo?.candidateName) return context.resumeInfo.candidateName;\n  if (context.questions && context.questions.length > 0) {\n    // Look for role mentions in questions\n    const roleMatch = context.questions[0].match(/(\\w+\\s+\\w+)\\s+(developer|engineer|manager|analyst|designer)/i);\n    if (roleMatch) return roleMatch[0];\n  }\n  return undefined;\n}\n\nfunction extractCompanyName(context: InterviewContext): string | undefined {\n  // Extract company name from context if available\n  // This could be enhanced to parse from resume info or questions\n  return undefined;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/app/api/voice/session/[id]/transcript/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'QueryParams' is defined but never used.","line":45,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'addTranscriptEntry' is defined but never used.","line":61,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":28}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * GET /api/voice/session/[id]/transcript\n * \n * Retrieves transcript events for an Azure AI Foundry voice session.\n * In future versions, this will use Redis or database for persistence.\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { getVoiceLiveClient } from '@/lib/azure-ai-foundry/voice/voice-live-client';\n\n/**\n * Transcript entry structure\n */\ninterface TranscriptEntry {\n  text: string;\n  timestamp: number;\n  confidence?: number;\n  isFinal: boolean;\n  source: 'user' | 'assistant';\n  duration?: number;\n}\n\n/**\n * Response schema\n */\ninterface TranscriptResponse {\n  success: boolean;\n  sessionId: string;\n  transcripts: TranscriptEntry[];\n  totalEntries: number;\n  error?: string;\n  retrievedAt: string;\n}\n\n/**\n * Route parameters\n */\ninterface RouteParams {\n  id: string;\n}\n\n/**\n * Query parameters\n */\ninterface QueryParams {\n  limit?: string;\n  offset?: string;\n  final_only?: string;\n  source?: string;\n}\n\n/**\n * In-memory storage for transcripts (replace with Redis/database in production)\n * Key: sessionId, Value: array of transcript entries\n */\nconst transcriptStorage = new Map<string, TranscriptEntry[]>();\n\n/**\n * Add transcript entry to storage\n */\nfunction addTranscriptEntry(sessionId: string, entry: TranscriptEntry): void {\n  if (!transcriptStorage.has(sessionId)) {\n    transcriptStorage.set(sessionId, []);\n  }\n  \n  const transcripts = transcriptStorage.get(sessionId)!;\n  transcripts.push(entry);\n  \n  // Limit storage to last 1000 entries per session to prevent memory issues\n  if (transcripts.length > 1000) {\n    transcripts.splice(0, transcripts.length - 1000);\n  }\n  \n  console.log(`üìù [TranscriptStorage] Added entry for session ${sessionId}: \"${entry.text.substring(0, 50)}...\"`);\n}\n\n/**\n * Clear transcript storage for a session\n */\nfunction clearTranscriptStorage(sessionId: string): void {\n  transcriptStorage.delete(sessionId);\n  console.log(`üóëÔ∏è [TranscriptStorage] Cleared storage for session ${sessionId}`);\n}\n\n/**\n * Validate session ID format\n */\nfunction validateSessionId(sessionId: string): { isValid: boolean; error?: string } {\n  if (!sessionId || typeof sessionId !== 'string') {\n    return { isValid: false, error: 'Session ID is required' };\n  }\n\n  if (sessionId.length < 10 || sessionId.length > 100) {\n    return { isValid: false, error: 'Invalid session ID format' };\n  }\n\n  // Basic format validation\n  if (!/^[a-zA-Z0-9\\-_]+$/.test(sessionId)) {\n    return { isValid: false, error: 'Session ID contains invalid characters' };\n  }\n\n  return { isValid: true };\n}\n\n/**\n * Parse and validate query parameters\n */\nfunction parseQueryParams(searchParams: URLSearchParams): {\n  limit: number;\n  offset: number;\n  finalOnly: boolean;\n  source?: 'user' | 'assistant';\n  isValid: boolean;\n  error?: string;\n} {\n  let limit = 100; // Default limit\n  let offset = 0;  // Default offset\n  let finalOnly = false;\n  let source: 'user' | 'assistant' | undefined;\n\n  // Parse limit\n  const limitParam = searchParams.get('limit');\n  if (limitParam) {\n    const parsedLimit = parseInt(limitParam, 10);\n    if (isNaN(parsedLimit) || parsedLimit < 1 || parsedLimit > 1000) {\n      return { limit, offset, finalOnly, source, isValid: false, error: 'Limit must be between 1 and 1000' };\n    }\n    limit = parsedLimit;\n  }\n\n  // Parse offset\n  const offsetParam = searchParams.get('offset');\n  if (offsetParam) {\n    const parsedOffset = parseInt(offsetParam, 10);\n    if (isNaN(parsedOffset) || parsedOffset < 0) {\n      return { limit, offset, finalOnly, source, isValid: false, error: 'Offset must be a non-negative number' };\n    }\n    offset = parsedOffset;\n  }\n\n  // Parse final_only\n  const finalOnlyParam = searchParams.get('final_only');\n  if (finalOnlyParam) {\n    finalOnly = ['true', '1', 'yes'].includes(finalOnlyParam.toLowerCase());\n  }\n\n  // Parse source filter\n  const sourceParam = searchParams.get('source');\n  if (sourceParam) {\n    if (!['user', 'assistant'].includes(sourceParam)) {\n      return { limit, offset, finalOnly, source, isValid: false, error: 'Source must be either \"user\" or \"assistant\"' };\n    }\n    source = sourceParam as 'user' | 'assistant';\n  }\n\n  return { limit, offset, finalOnly, source, isValid: true };\n}\n\n/**\n * GET handler for retrieving session transcripts\n */\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<RouteParams> }\n): Promise<NextResponse<TranscriptResponse>> {\n  try {\n    const resolvedParams = await params;\n    const sessionId = resolvedParams.id;\n    console.log(`üìñ [API] Retrieving transcripts for session: ${sessionId}`);\n\n    // Validate session ID\n    const sessionValidation = validateSessionId(sessionId);\n    if (!sessionValidation.isValid) {\n      console.error('‚ùå [API] Invalid session ID:', sessionValidation.error);\n      return NextResponse.json({\n        success: false,\n        sessionId,\n        transcripts: [],\n        totalEntries: 0,\n        error: sessionValidation.error,\n        retrievedAt: new Date().toISOString()\n      }, { status: 400 });\n    }\n\n    // Parse query parameters\n    const { searchParams } = new URL(request.url);\n    const queryValidation = parseQueryParams(searchParams);\n    if (!queryValidation.isValid) {\n      console.error('‚ùå [API] Invalid query parameters:', queryValidation.error);\n      return NextResponse.json({\n        success: false,\n        sessionId,\n        transcripts: [],\n        totalEntries: 0,\n        error: queryValidation.error,\n        retrievedAt: new Date().toISOString()\n      }, { status: 400 });\n    }\n\n    const { limit, offset, finalOnly, source } = queryValidation;\n\n    // Check if session exists in voice client\n    const voiceClient = getVoiceLiveClient();\n    const sessionMeta = voiceClient.getSession(sessionId);\n\n    if (!sessionMeta) {\n      console.warn(`‚ö†Ô∏è [API] Session not found in voice client: ${sessionId}`);\n      // Still check transcript storage in case session was recently stopped\n    }\n\n    // Retrieve transcripts from storage\n    let transcripts = transcriptStorage.get(sessionId) || [];\n\n    // Apply filters\n    if (finalOnly) {\n      transcripts = transcripts.filter(entry => entry.isFinal);\n    }\n\n    if (source) {\n      transcripts = transcripts.filter(entry => entry.source === source);\n    }\n\n    const totalEntries = transcripts.length;\n\n    // Apply pagination\n    const paginatedTranscripts = transcripts.slice(offset, offset + limit);\n\n    console.log(`üìñ [API] Retrieved ${paginatedTranscripts.length} transcripts (total: ${totalEntries}) for session ${sessionId}`);\n\n    return NextResponse.json({\n      success: true,\n      sessionId,\n      transcripts: paginatedTranscripts,\n      totalEntries,\n      retrievedAt: new Date().toISOString()\n    }, { status: 200 });\n\n  } catch (error) {\n    console.error('‚ùå [API] Failed to retrieve transcripts:', error);\n    \n    const resolvedParams = await params;\n    const sessionId = resolvedParams.id || 'unknown';\n    \n    return NextResponse.json({\n      success: false,\n      sessionId,\n      transcripts: [],\n      totalEntries: 0,\n      error: error instanceof Error ? error.message : 'Internal server error',\n      retrievedAt: new Date().toISOString()\n    }, { status: 500 });\n  }\n}\n\n/**\n * DELETE handler for clearing session transcripts\n */\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: Promise<RouteParams> }\n): Promise<NextResponse> {\n  try {\n    const resolvedParams = await params;\n    const sessionId = resolvedParams.id;\n    console.log(`üóëÔ∏è [API] Clearing transcripts for session: ${sessionId}`);\n\n    // Validate session ID\n    const sessionValidation = validateSessionId(sessionId);\n    if (!sessionValidation.isValid) {\n      return NextResponse.json({\n        error: sessionValidation.error\n      }, { status: 400 });\n    }\n\n    // Clear transcript storage\n    clearTranscriptStorage(sessionId);\n\n    return NextResponse.json({\n      success: true,\n      sessionId,\n      message: 'Transcripts cleared successfully',\n      clearedAt: new Date().toISOString()\n    }, { status: 200 });\n\n  } catch (error) {\n    console.error('‚ùå [API] Failed to clear transcripts:', error);\n    \n    return NextResponse.json({\n      error: error instanceof Error ? error.message : 'Internal server error'\n    }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/app/api/voice/session/[id]/ws/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1051,1054],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1051,1054],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1133,1136],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1133,1136],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1349,1352],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1349,1352],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1675,1678],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1675,1678],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2021,2024],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2021,2024],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2045,2048],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2045,2048],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2095,2098],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2095,2098],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2119,2122],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2119,2122],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":60,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":75,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2573,2576],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2573,2576],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":79,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2837,2840],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2837,2840],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2902,2905],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2902,2905],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":89,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3043,3046],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3043,3046],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":93,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3199,3202],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3199,3202],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":101,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3441,3444],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3441,3444],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":102,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":102,"endColumn":15}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const runtime = 'edge';\n\n/**\n * WebSocket proxy for Azure AI Foundry realtime voice sessions\n *\n * Route: /api/voice/session/[id]/ws\n * - Upgrades client HTTP request to WebSocket\n * - Connects to Azure Foundry realtime WebSocket (server-side)\n * - Bi-directionally pipes messages between client and Azure\n * - Ensures API keys remain on server only\n */\n\nimport type { NextRequest } from 'next/server';\nimport { getVoiceSessionStorage } from '@/lib/azure-ai-foundry/voice/voice-session-storage';\n\nexport async function GET(req: NextRequest, { params }: { params: Promise<{ id: string }> }) {\n  const resolvedParams = await params;\n  const sessionId = resolvedParams.id;\n\n  // Validate session\n  const sessionStorage = getVoiceSessionStorage();\n  const session = sessionStorage.getSession(sessionId);\n  if (!session || !session.wsUrl) {\n    return new Response('Session not found or missing WebSocket URL', { status: 404 });\n  }\n\n  // Create a WebSocket pair (client <-> server)\n  const { 0: clientSocket, 1: serverSocket } = new (globalThis as any).WebSocketPair();\n\n  // Accept the client side of the pair\n  (clientSocket as any).accept();\n\n  let upstream: WebSocket | null = null;\n  let closed = false;\n\n  const closeBoth = (code = 1000, reason = 'Normal Closure') => {\n    if (closed) return;\n    closed = true;\n    try { (clientSocket as any).close(code, reason); } catch {}\n    try { upstream?.close(code, reason); } catch {}\n  };\n\n  try {\n    // Connect to Azure Foundry realtime WebSocket\n    upstream = new WebSocket(session.wsUrl, ['realtime']);\n\n    upstream.addEventListener('open', () => {\n      // Connection established with Azure\n      (clientSocket as any).send(JSON.stringify({ type: 'control', data: { connected: true }, sessionId }));\n    });\n\n    upstream.addEventListener('message', (event) => {\n      try {\n        // Forward as-is to client. If binary, forward binary; else text\n        if (event.data instanceof ArrayBuffer || event.data instanceof Uint8Array) {\n          (clientSocket as any).send(event.data as any);\n        } else {\n          (clientSocket as any).send(event.data as any);\n        }\n      } catch (err) {\n        // Swallow send errors and close\n        closeBoth(1011, 'Upstream->Client forward error');\n      }\n    });\n\n    upstream.addEventListener('close', (event) => {\n      closeBoth(event.code || 1000, event.reason || 'Upstream closed');\n    });\n\n    upstream.addEventListener('error', () => {\n      closeBoth(1011, 'Upstream error');\n    });\n\n    // Forward messages from client -> upstream\n    (clientSocket as any).addEventListener('message', (event: MessageEvent) => {\n      try {\n        if (upstream && upstream.readyState === upstream.OPEN) {\n          if (event.data instanceof ArrayBuffer || event.data instanceof Uint8Array) {\n            upstream.send(event.data as any);\n          } else {\n            upstream.send(event.data as any);\n          }\n        }\n      } catch {\n        closeBoth(1011, 'Client->Upstream forward error');\n      }\n    });\n\n    (clientSocket as any).addEventListener('close', (event: CloseEvent) => {\n      closeBoth(event.code || 1000, event.reason || 'Client closed');\n    });\n\n    (clientSocket as any).addEventListener('error', () => {\n      closeBoth(1011, 'Client error');\n    });\n\n    // Return the other end of the pair to complete the upgrade\n    return new Response(null, {\n      status: 101,\n      webSocket: serverSocket,\n    } as any);\n  } catch (err) {\n    try { closeBoth(1011, 'WebSocket setup failure'); } catch {}\n    return new Response('Failed to establish WebSocket proxy', { status: 500 });\n  }\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/app/api/voice/session/start/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1086,1089],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1086,1089],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * POST /api/voice/session/start\n * \n * Creates a new Azure AI Foundry voice session for real-time streaming.\n * Returns session ID and WebSocket URL for client connection.\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { getVoiceLiveClient } from '@/lib/azure-ai-foundry/voice/voice-live-client';\nimport type { VoiceSessionOptions } from '@/lib/azure-ai-foundry/voice/voice-live-client';\nimport { getVoiceSessionStorage } from '@/lib/azure-ai-foundry/voice/voice-session-storage';\n\n/**\n * Request body schema\n */\ninterface StartSessionRequest {\n  voiceName?: string;\n  locale?: string;\n  speakingRate?: number;\n  emotionalTone?: string;\n  audioSettings?: {\n    noiseSuppression?: boolean;\n    echoCancellation?: boolean;\n    interruptionDetection?: boolean;\n    sampleRate?: number;\n  };\n}\n\n/**\n * Response schema\n */\ninterface StartSessionResponse {\n  sessionId: string;\n  wsUrl: string;\n  options: VoiceSessionOptions;\n  createdAt: string;\n  success: boolean;\n  error?: string;\n}\n\n/**\n * Validate request body\n */\nfunction validateStartSessionRequest(body: any): { isValid: boolean; errors: string[] } {\n  const errors: string[] = [];\n\n  if (body.voiceName && typeof body.voiceName !== 'string') {\n    errors.push('voiceName must be a string');\n  }\n\n  if (body.locale && typeof body.locale !== 'string') {\n    errors.push('locale must be a string');\n  }\n\n  if (body.speakingRate && (typeof body.speakingRate !== 'number' || body.speakingRate <= 0 || body.speakingRate > 3)) {\n    errors.push('speakingRate must be a number between 0 and 3');\n  }\n\n  if (body.emotionalTone && typeof body.emotionalTone !== 'string') {\n    errors.push('emotionalTone must be a string');\n  }\n\n  if (body.audioSettings) {\n    if (typeof body.audioSettings !== 'object') {\n      errors.push('audioSettings must be an object');\n    } else {\n      const { noiseSuppression, echoCancellation, interruptionDetection, sampleRate } = body.audioSettings;\n      \n      if (noiseSuppression !== undefined && typeof noiseSuppression !== 'boolean') {\n        errors.push('audioSettings.noiseSuppression must be a boolean');\n      }\n      \n      if (echoCancellation !== undefined && typeof echoCancellation !== 'boolean') {\n        errors.push('audioSettings.echoCancellation must be a boolean');\n      }\n      \n      if (interruptionDetection !== undefined && typeof interruptionDetection !== 'boolean') {\n        errors.push('audioSettings.interruptionDetection must be a boolean');\n      }\n      \n      if (sampleRate !== undefined && (typeof sampleRate !== 'number' || ![8000, 16000, 24000, 48000].includes(sampleRate))) {\n        errors.push('audioSettings.sampleRate must be one of: 8000, 16000, 24000, 48000');\n      }\n    }\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n}\n\n/**\n * POST handler for starting voice sessions\n */\nexport async function POST(request: NextRequest): Promise<NextResponse<StartSessionResponse>> {\n  try {\n    console.log('üöÄ [API] Starting voice session...');\n    \n    // Parse request body\n    let body: StartSessionRequest;\n    try {\n      body = await request.json();\n    } catch (error) {\n      console.error('‚ùå [API] Invalid JSON in request body:', error);\n      return NextResponse.json({\n        success: false,\n        error: 'Invalid JSON in request body',\n        sessionId: '',\n        wsUrl: '',\n        options: {},\n        createdAt: new Date().toISOString()\n      }, { status: 400 });\n    }\n\n    // Validate request body\n    const validation = validateStartSessionRequest(body);\n    if (!validation.isValid) {\n      console.error('‚ùå [API] Request validation failed:', validation.errors);\n      return NextResponse.json({\n        success: false,\n        error: `Validation failed: ${validation.errors.join(', ')}`,\n        sessionId: '',\n        wsUrl: '',\n        options: {},\n        createdAt: new Date().toISOString()\n      }, { status: 400 });\n    }\n\n    // Create voice session options\n    const sessionOptions: VoiceSessionOptions = {\n      voiceName: body.voiceName,\n      locale: body.locale,\n      speakingRate: body.speakingRate,\n      emotionalTone: body.emotionalTone,\n      audioSettings: body.audioSettings\n    };\n\n    // Get voice client and create session\n    const voiceClient = getVoiceLiveClient();\n    const session = await voiceClient.createSession(sessionOptions);\n\n    console.log(`‚úÖ [API] Voice session created: ${session.sessionId}`);\n\n    // Store session in edge-compatible storage for WebSocket proxy access\n    const sessionStorage = getVoiceSessionStorage();\n    sessionStorage.storeSession({\n      sessionId: session.sessionId,\n      wsUrl: session.wsUrl,\n      createdAt: session.createdAt\n    });\n\n    // Return session details with proxy WebSocket URL\n    const baseUrl = request.nextUrl.origin;\n    const proxyWsUrl = `${baseUrl.replace(/^http/, 'ws')}/api/voice/session/${session.sessionId}/ws`;\n    \n    const response: StartSessionResponse = {\n      success: true,\n      sessionId: session.sessionId,\n      wsUrl: proxyWsUrl,\n      options: session.options,\n      createdAt: session.createdAt.toISOString()\n    };\n\n    return NextResponse.json(response, { status: 201 });\n\n  } catch (error) {\n    console.error('‚ùå [API] Failed to create voice session:', error);\n    \n    // Determine error message and status code\n    let errorMessage = 'Internal server error';\n    let statusCode = 500;\n\n    if (error instanceof Error) {\n      errorMessage = error.message;\n      \n      // Handle specific error types\n      if (error.message.includes('configuration')) {\n        statusCode = 503; // Service Unavailable\n        errorMessage = 'Voice service configuration error';\n      } else if (error.message.includes('Session creation failed')) {\n        statusCode = 502; // Bad Gateway  \n        errorMessage = 'Failed to create session with Azure AI Foundry';\n      }\n    }\n\n    return NextResponse.json({\n      success: false,\n      error: errorMessage,\n      sessionId: '',\n      wsUrl: '',\n      options: {},\n      createdAt: new Date().toISOString()\n    }, { status: statusCode });\n  }\n}\n\n/**\n * GET handler for health check\n */\nexport async function GET(): Promise<NextResponse> {\n  return NextResponse.json({\n    endpoint: '/api/voice/session/start',\n    method: 'POST',\n    description: 'Create a new Azure AI Foundry voice session',\n    status: 'available'\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/app/community-mock-interview/interview/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2929,2932],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2929,2932],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2956,2959],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2956,2959],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":64,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3029,3032],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3029,3032],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3114,3117],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3114,3117],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":92,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":95,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3146,3149],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3146,3149],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":124,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":127,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3178,3181],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3178,3181],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":156,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":159,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3210,3213],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3210,3213],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":66,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3283,3286],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3283,3286],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useEffect\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":117,"column":5,"nodeType":"Identifier","endLine":117,"endColumn":14},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useEffect\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":124,"column":5,"nodeType":"Identifier","endLine":124,"endColumn":14}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { Suspense, useEffect, useState } from 'react';\nimport { useSearchParams } from 'next/navigation';\nimport { useInterview } from '@/lib/hooks/useFirestore';\nimport BanterLoader from '@/components/ui/BanterLoader';\nimport CommunityInterviewPage from \"@/components/CommunityInterviewPage\";\nimport {\n    CommunityInterviewData,\n    getCommunityInterviewFromStorage,\n    setCommunityInterviewInStorage,\n    parseTechstack,\n    addDebugFunctions\n} from '@/lib/utils/communityInterviewStorage';\n\nconst InterviewPageContent = () => {\n    const searchParams = useSearchParams();\n    const [interviewData, setInterviewData] = useState<CommunityInterviewData | null>(null);\n    const [dataSource, setDataSource] = useState<'url' | 'localStorage' | 'firestore' | null>(null);\n    \n    // Extract all potential data sources\n    const urlInterviewId = searchParams?.get('id') || null;\n    const urlRole = searchParams?.get('role') || null;\n    const urlType = searchParams?.get('type') || null;\n    const urlLevel = searchParams?.get('level') || null;\n    const urlTechstack = parseTechstack(searchParams?.get('techstack') || null);\n    \n    // Fetch interview data using Firestore lookup (only if we have an ID)\n    const { interview, loading: firestoreLoading, error: firestoreError } = useInterview(urlInterviewId || '');\n    \n    // Data resolution effect\n    useEffect(() => {\n        const resolveInterviewData = () => {\n            // Priority 1: Check if URL has complete data (preferred for direct links)\n            if (urlInterviewId && urlRole && urlType) {\n                const urlData: CommunityInterviewData = {\n                    id: urlInterviewId,\n                    role: decodeURIComponent(urlRole),\n                    type: decodeURIComponent(urlType),\n                    techstack: urlTechstack.length > 0 ? urlTechstack : ['General'],\n                    level: urlLevel ? decodeURIComponent(urlLevel) : undefined,\n                    timestamp: Date.now()\n                };\n                setInterviewData(urlData);\n                setDataSource('url');\n                console.log('‚úÖ Using URL parameters for interview data');\n                return;\n            }\n            \n            // Priority 2: Check localStorage for recently stored data\n            const storedData = getCommunityInterviewFromStorage();\n            if (storedData && (!urlInterviewId || urlInterviewId === storedData.id)) {\n                setInterviewData(storedData);\n                setDataSource('localStorage');\n                console.log('‚úÖ Using localStorage for interview data');\n                return;\n            }\n            \n            // Priority 3: Use Firestore data if available\n            if (interview && !firestoreLoading && !firestoreError) {\n                const firestoreData: CommunityInterviewData = {\n                    id: interview.id,\n                    role: (interview as any).role || (interview as any).jobTitle || 'Unknown Role',\n                    type: (interview as any).type || 'technical',\n                    techstack: Array.isArray((interview as any).techstack) ? (interview as any).techstack : ((interview as any).techstack ? [(interview as any).techstack] : ['General']),\n                    level: (interview as any).level,\n                    createdAt: typeof interview.createdAt === 'string' ? interview.createdAt : interview.createdAt.toISOString(),\n                    timestamp: Date.now()\n                };\n                setInterviewData(firestoreData);\n                setDataSource('firestore');\n                console.log('‚úÖ Using Firestore for interview data');\n                return;\n            }\n            \n            // If we have an ID but no other data sources worked, wait for Firestore\n            if (urlInterviewId && firestoreLoading) {\n                return; // Still loading\n            }\n            \n            // No valid data found\n            setInterviewData(null);\n            setDataSource(null);\n        };\n        \n        resolveInterviewData();\n    }, [urlInterviewId, urlRole, urlType, urlLevel, urlTechstack, interview, firestoreLoading, firestoreError]);\n    \n    // Show loading state\n    if (firestoreLoading && !interviewData) {\n        return <BanterLoader overlay />;\n    }\n    \n    // Show Firestore error state only if no other data sources are available\n    if (firestoreError && !interviewData) {\n        return (\n            <div className=\"flex flex-col items-center justify-center min-h-screen\">\n                <h2 className=\"text-xl font-semibold text-red-400 mb-4\">Error Loading Interview</h2>\n                <p className=\"text-gray-300\">{firestoreError}</p>\n                <p className=\"text-gray-500 mt-2\">Please try again or contact support if the issue persists.</p>\n            </div>\n        );\n    }\n    \n    // Show no interview selected state\n    if (!interviewData) {\n        return (\n            <div className=\"flex flex-col items-center justify-center min-h-screen\">\n                <h2 className=\"text-xl font-semibold text-gray-400 mb-4\">No Interview Selected</h2>\n                <p className=\"text-gray-300\">Please select an interview from the dashboard to get started.</p>\n                <p className=\"text-gray-500 mt-2\">Make sure the interview link is complete and valid.</p>\n            </div>\n        );\n    }\n    \n    // Update localStorage with current data for future persistence (if not already from localStorage)\n    useEffect(() => {\n        if (interviewData && dataSource !== 'localStorage') {\n            setCommunityInterviewInStorage(interviewData);\n        }\n    }, [interviewData, dataSource]);\n    \n    // Add debug functions in development\n    useEffect(() => {\n        addDebugFunctions();\n    }, []);\n    \n    return (\n        <>\n            {/* Debug info in development */}\n            {process.env.NODE_ENV === 'development' && (\n                <div className=\"fixed top-4 right-4 bg-gray-800 p-2 rounded text-xs text-white z-50\">\n                    Data source: {dataSource}\n                </div>\n            )}\n            <CommunityInterviewPage \n                interviewId={interviewData.id}\n                role={interviewData.role}\n                type={interviewData.type}\n                techstack={interviewData.techstack}\n                level={interviewData.level}\n            />\n        </>\n    );\n};\n\nconst Page = () => {\n    return (\n        <Suspense fallback={<BanterLoader overlay />}>\n            <InterviewPageContent />\n        </Suspense>\n    );\n};\n\nexport default Page;\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/app/dashboard/DashboardClient.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'hasPastInterviews' is assigned a value but never used.","line":52,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":28}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport Link from \"next/link\";\nimport Image from \"next/image\";\nimport BanterLoader from \"@/components/ui/BanterLoader\";\n\nimport { Button } from \"@/components/ui/button\";\nimport InterviewCardClient from \"@/components/InterviewCardClient\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n\ninterface DashboardClientProps {\n  userInterviews: Interview[];\n  publicInterviews: Interview[];\n}\n\nexport default function DashboardClient({ userInterviews, publicInterviews }: DashboardClientProps) {\n    const { user, loading } = useAuth();\n\n    // Show loading state while auth is being determined\n    if (loading) {\n        return (\n            <>\n                <BanterLoader overlay text=\"Loading your dashboard...\" />\n                <section className=\"card-cta\">\n                    <div className=\"flex flex-col items-center gap-6 max-w-lg\">\n                        <h2 className=\"text-white dark:text-white text-center\">Get Interview-Ready with AI-Powered Practice & Feedback</h2>\n                        <p className=\"text-lg text-white text-center\">\n                            Please wait while we load your dashboard...\n                        </p>\n                    </div>\n                </section>\n            </>\n        );\n    }\n\n    // Show sign in message only if not loading and no user\n    if (!user) {\n        return (\n            <>\n                <section className=\"card-cta\">\n                    <div className=\"flex flex-col gap-6 max-w-lg\">\n                        <h2 className=\"text-white dark:text-white\">Get Interview-Ready with AI-Powered Practice & Feedback</h2>\n                        <p className=\"text-lg\">\n                            Please sign in to access your interviews\n                        </p>\n                    </div>\n                </section>\n            </>\n        );\n    }\n\n    const hasPastInterviews = userInterviews.length > 0;\n    const hasPublicInterviews = publicInterviews && publicInterviews.length > 0;\n\n    return (\n        <>\n            <section className=\"card-cta\">\n                <div className=\"flex flex-col gap-6 max-w-lg\">\n                    <h2 className=\"text-white dark:text-white\">Get Interview-Ready with AI-Powered Practice & Feedback</h2>\n                    <p className=\"text-lg\">\n                        Practice real interview questions & get instant feedback\n                    </p>\n\n                    <Button asChild className=\"btn-primary max-sm:w-full\">\n                        <Link href=\"/dashboard/interview\">Start an Interview</Link>\n                    </Button>\n                </div>\n\n                <Image\n                    src=\"/robot.png\"\n                    alt=\"robo-dude\"\n                    width={400}\n                    height={400}\n                    className=\"max-sm:hidden\"\n                />\n            </section>\n\n\n            <section className=\"flex flex-col gap-6 mt-8\">\n                <h2 className=\"text-white dark:text-white\">Mock Interviews</h2>\n\n                <div className=\"interviews-section\">\n                    {hasPublicInterviews ? (\n                        publicInterviews.slice(0, 4).map((interview) => (\n                            <InterviewCardClient\n                                key={interview.id}\n                                interviewId={interview.id}\n                                role={interview.role || interview.jobTitle || 'Unknown Role'}\n                                type={interview.type || 'technical'}\n                                techstack={Array.isArray(interview.techstack) ? interview.techstack : interview.techstack ? [interview.techstack] : []}\n                                createdAt={typeof interview.createdAt === 'string' ? interview.createdAt : interview.createdAt.toISOString()}\n                            />\n                        ))\n                    ) : (\n                        <p>There are no interviews available</p>\n                    )}\n                </div>\n            </section>\n        </>\n    );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/app/dashboard/DashboardClientRealtime.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":112,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3606,3609],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3606,3609],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":112,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3641,3644],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3641,3644],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":164,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5595,5598],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5595,5598],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":164,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5630,5633],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5630,5633],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport Link from \"next/link\";\nimport Image from \"next/image\";\nimport { useRef } from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport InterviewCardClient from \"@/components/InterviewCardClient\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { \n  useRealtimeUserInterviews, \n  useRealtimePublicInterviews \n} from \"@/lib/hooks/useRealtimeFirestore\";\nimport {\n  DataSuspense,\n  DashboardSkeleton,\n  InterviewCardSkeleton\n} from \"@/components/ui/LoadingStates\";\nimport { normalizeTechstack } from \"@/lib/utils\";\n\nexport default function DashboardClientRealtime() {\n  const { user, loading: authLoading } = useAuth();\n  const carouselRef = useRef<HTMLUListElement>(null);\n  \n  // Real-time hooks with SWR caching\n  const {\n    data: userInterviews = [],\n    isLoading: userInterviewsLoading,\n    error: userInterviewsError\n  } = useRealtimeUserInterviews();\n\n  const {\n    data: publicInterviews = [],\n    isLoading: publicInterviewsLoading,\n    error: publicInterviewsError\n  } = useRealtimePublicInterviews(8); // Load more for dashboard\n\n  // Show loading state while auth is being determined\n  if (authLoading) {\n    return <DashboardSkeleton />;\n  }\n\n  // Show sign in message only if not loading and no user\n  if (!user) {\n    return (\n      <section className=\"card-cta\">\n        <div className=\"flex flex-col gap-6 max-w-lg\">\n          <h2 className=\"text-white dark:text-white\">Get Interview-Ready with AI-Powered Practice & Feedback</h2>\n          <p className=\"text-lg\">\n            Please sign in to access your interviews\n          </p>\n        </div>\n      </section>\n    );\n  }\n\n  const hasUserInterviews = userInterviews.length > 0;\n  const hasPublicInterviews = publicInterviews.length > 0;\n\n  const scrollCarousel = (direction: 'left' | 'right') => {\n    if (carouselRef.current) {\n      const scrollAmount = direction === 'left' ? -400 : 400;\n      carouselRef.current.scrollBy({ left: scrollAmount, behavior: 'smooth' });\n    }\n  };\n\n  return (\n    <div className=\"space-y-8\" data-testid=\"dashboard\">\n      {/* Hero Section */}\n      <section className=\"card-cta\">\n        <div className=\"flex flex-col gap-6 max-w-lg\">\n          <h2 className=\"text-white dark:text-white\">Get Interview-Ready with AI-Powered Practice & Feedback</h2>\n          <p className=\"text-lg\">\n            Practice real interview questions & get instant feedback\n          </p>\n\n          <Button asChild className=\"btn-primary max-sm:w-full\">\n            <Link href=\"/dashboard/interview\">Start an Interview</Link>\n          </Button>\n        </div>\n\n        <Image\n          src=\"/robot.png\"\n          alt=\"robo-dude\"\n          width={400}\n          height={400}\n          className=\"max-sm:hidden\"\n        />\n      </section>\n\n      {/* Your Recent Interviews */}\n      {user && (\n        <section className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-white dark:text-white\">Your Recent Interviews</h2>\n          </div>\n\n          <DataSuspense\n            isLoading={userInterviewsLoading}\n            error={userInterviewsError}\n            isEmpty={!hasUserInterviews}\n            emptyMessage=\"You haven't created any interviews yet. Start your first interview above!\"\n            fallback={\n              <div className=\"interviews-section\">\n                {Array.from({ length: 3 }).map((_, i) => (\n                  <InterviewCardSkeleton key={i} />\n                ))}\n              </div>\n            }\n          >\n            <div className=\"interviews-section\">\n              {(userInterviews as any[]).slice(0, 6).map((interview: any) => (\n                <InterviewCardClient\n                  key={interview.id}\n                  interviewId={interview.id}\n                  role={interview.role}\n                  type={interview.type}\n                  techstack={normalizeTechstack(interview.techstack)}\n                  createdAt={interview.createdAt}\n                />\n              ))}\n            </div>\n            \n            {userInterviews.length > 6 && (\n              <div className=\"text-center\">\n                <Button variant=\"outline\" asChild>\n                  <Link href=\"/dashboard/interviews\">View All Your Interviews</Link>\n                </Button>\n              </div>\n            )}\n          </DataSuspense>\n        </section>\n      )}\n\n      {/* Mock Interviews (Public) - Horizontal Carousel */}\n      <section className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-white dark:text-white\">Community Mock Interviews</h2>\n        </div>\n\n        <DataSuspense\n          isLoading={publicInterviewsLoading}\n          error={publicInterviewsError}\n          isEmpty={!hasPublicInterviews}\n          emptyMessage=\"No public interviews available at the moment.\"\n          fallback={\n            <div className=\"relative\">\n              <ul className=\"no-list flex overflow-x-auto scroll-snap-x gap-4 no-scrollbar\">\n                {Array.from({ length: 4 }).map((_, i) => (\n                  <li key={i} className=\"flex-shrink-0 w-[360px] scroll-snap-start\">\n                    <InterviewCardSkeleton />\n                  </li>\n                ))}\n              </ul>\n            </div>\n          }\n        >\n          <div className=\"relative flex items-center\">\n            {/* Carousel Container */}\n            <ul \n              ref={carouselRef}\n              className=\"no-list flex overflow-x-auto scroll-snap-x gap-4 no-scrollbar flex-1\"\n            >\n              {(publicInterviews as any[]).slice(0, 8).map((interview: any) => {\n                const isCommunityCard = true;\n                return (\n                  <li key={interview.id} className=\"flex-shrink-0 w-[360px] scroll-snap-start\">\n                    <InterviewCardClient\n                      interviewId={interview.id}\n                      role={interview.role}\n                      type={interview.type}\n                      techstack={normalizeTechstack(interview.techstack)}\n                      createdAt={interview.createdAt}\n                      context=\"community-mock-interview\"\n                      isCommunityCard={isCommunityCard}\n                    />\n                  </li>\n                );\n              })}\n            </ul>\n\n            {/* Navigation Buttons - Highly visible for debugging */}\n            <div className=\"flex flex-col gap-2 ml-4 shrink-0\">\n              <Button\n                variant=\"default\"\n                size=\"lg\"\n                className=\"bg-red-500 hover:bg-red-600 text-white h-12 w-12 rounded-full shadow-2xl border-4 border-white\"\n                onClick={() => scrollCarousel('left')}\n                aria-label=\"Previous interviews\"\n              >\n                ‚Üê\n              </Button>\n              \n              <Button\n                variant=\"default\"\n                size=\"lg\"\n                className=\"bg-blue-500 hover:bg-blue-600 text-white h-12 w-12 rounded-full shadow-2xl border-4 border-white\"\n                onClick={() => scrollCarousel('right')}\n                aria-label=\"Next interviews\"\n              >\n                ‚Üí\n              </Button>\n            </div>\n          </div>\n        </DataSuspense>\n      </section>\n\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/app/dashboard/auto-apply/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setUserProfile' is assigned a value but never used.","line":122,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":122,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSettings' is assigned a value but never used.","line":123,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":123,"endColumn":31}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport dynamic from 'next/dynamic';\nimport { UserProfile, AutoApplySettings, JobSearchFilters } from '@/types/auto-apply';\n\n// Dynamic import for AutoApplyDashboard component that requires DOM APIs\nconst AutoApplyDashboard = dynamic(() => import('@/components/AutoApplyDashboard').then(mod => ({ default: mod.AutoApplyDashboard })), {\n  ssr: false,\n  loading: () => (\n    <div className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        {Array.from({ length: 4 }, (_, i) => (\n          <div key={i} className=\"bg-gray-800 border border-gray-700 rounded-lg p-6 animate-pulse\">\n            <div className=\"h-4 bg-gray-700 rounded mb-2\"></div>\n            <div className=\"h-8 bg-gray-600 rounded mb-1\"></div>\n            <div className=\"h-3 bg-gray-700 rounded\"></div>\n          </div>\n        ))}\n      </div>\n      <div className=\"bg-gray-800 border border-gray-700 rounded-lg p-6 animate-pulse\">\n        <div className=\"h-6 bg-gray-700 rounded mb-4 w-1/3\"></div>\n        <div className=\"space-y-2\">\n          <div className=\"h-4 bg-gray-700 rounded\"></div>\n          <div className=\"h-4 bg-gray-700 rounded w-2/3\"></div>\n        </div>\n      </div>\n    </div>\n  )\n});\n\n// Mock data for development\nconst mockUserProfile: UserProfile = {\n  id: '1',\n  email: 'user@example.com',\n  name: 'John Doe',\n  phone: '+1-555-0123',\n  location: 'San Francisco, CA',\n  linkedinUrl: 'https://linkedin.com/in/johndoe',\n  githubUrl: 'https://github.com/johndoe',\n  skills: ['JavaScript', 'React', 'Node.js', 'Python', 'AWS'],\n  experience: [\n    {\n      id: '1',\n      company: 'Tech Corp',\n      position: 'Senior Software Engineer',\n      startDate: '2020-01',\n      endDate: undefined,\n      isCurrent: true,\n      description: 'Leading frontend development for web applications',\n      achievements: ['Increased performance by 40%', 'Led team of 5 developers'],\n      technologies: ['React', 'TypeScript', 'AWS'],\n      location: 'San Francisco, CA'\n    }\n  ],\n  education: [\n    {\n      id: '1',\n      institution: 'University of California',\n      degree: 'Bachelor of Science',\n      fieldOfStudy: 'Computer Science',\n      startDate: '2016-08',\n      endDate: '2020-05',\n      gpa: 3.8\n    }\n  ],\n  summary: 'Experienced software engineer with expertise in full-stack development',\n  targetRoles: ['Software Engineer', 'Full Stack Developer', 'Frontend Engineer'],\n  salaryRange: {\n    min: 100000,\n    max: 150000,\n    currency: 'USD'\n  },\n  workPreferences: {\n    remote: true,\n    hybrid: true,\n    onsite: false,\n    locations: ['San Francisco', 'New York', 'Remote']\n  },\n  createdAt: '2024-01-01T00:00:00Z',\n  updatedAt: '2024-01-01T00:00:00Z'\n};\n\nconst mockSettings: AutoApplySettings = {\n  userId: '1',\n  isEnabled: true,\n  filters: {\n    keywords: ['JavaScript', 'React', 'Frontend'],\n    locations: ['San Francisco', 'Remote'],\n    jobTypes: ['full-time'],\n    workArrangements: ['remote', 'hybrid'],\n    experienceLevel: ['mid-senior'],\n    companySize: ['medium', 'large'],\n    datePosted: 'past-week',\n    portals: ['LinkedIn', 'Indeed'],\n    minimumRelevancyScore: 70\n  } as JobSearchFilters,\n  autoApplyThreshold: 80,\n  dailyApplicationLimit: 10,\n  useCustomCoverLetter: true,\n  coverLetterTemplate: 'Dear Hiring Manager, I am excited to apply for this position...',\n  useCustomResume: false,\n  followUpEnabled: true,\n  followUpSchedule: {\n    initialDays: 3,\n    secondDays: 7\n  },\n  notifications: {\n    email: true,\n    newJobsFound: true,\n    applicationsSubmitted: true,\n    followUpReminders: true,\n    errorAlerts: true\n  },\n  blacklistedCompanies: ['Company A', 'Company B'],\n  preferredCompanies: ['Google', 'Meta', 'Apple'],\n  createdAt: '2024-01-01T00:00:00Z',\n  updatedAt: '2024-01-01T00:00:00Z'\n};\n\nexport default function AutoApplyPage() {\n  const [userProfile, setUserProfile] = useState<UserProfile>(mockUserProfile);\n  const [settings, setSettings] = useState<AutoApplySettings>(mockSettings);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    // TODO: Load user profile and settings from API\n    setLoading(true);\n    // Remove artificial delay - data is immediately available\n    setLoading(false);\n  }, []);\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-6\">\n      <div className=\"mb-6\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <h1 className=\"text-3xl font-bold text-white\">Auto Apply with AI</h1>\n        </div>\n        <p className=\"text-gray-300\">\n          Automate your job search with AI-powered job matching and application submission.\n        </p>\n      </div>\n\n      <AutoApplyDashboard \n        userProfile={userProfile} \n        settings={settings}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/app/dashboard/interview/[id]/FeedbackClientRealtime.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useParams' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1800,1803],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1800,1803],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":63,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'clipboardError' is defined but never used.","line":68,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":80,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":102,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2954,2957],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2954,2957],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":173,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":173,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5113,5116],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5113,5116],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":175,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":175,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5255,5258],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5255,5258],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":182,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":182,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5517,5520],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5517,5520],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":189,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5753,5756],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5753,5756],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":191,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5892,5895],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5892,5895],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":192,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":192,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5987,5990],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5987,5990],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":234,"column":119,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":234,"endColumn":122,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7606,7609],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7606,7609],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useParams } from \"next/navigation\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { \n  useRealtimeInterview, \n  useRealtimeFeedback \n} from \"@/lib/hooks/useRealtimeFirestore\";\nimport { \n  DataSuspense, \n  FeedbackSkeleton\n} from \"@/components/ui/LoadingStates\";\nimport DisplayTechIcons from \"@/components/DisplayTechIcons\";\nimport Link from \"next/link\";\nimport { ArrowLeft, Download, Share2 } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { toast } from \"sonner\";\nimport { normalizeTechstack } from \"@/lib/utils\";\n\ninterface FeedbackClientRealtimeProps {\n  interviewId: string;\n  initialInterview?: Interview;\n  initialFeedback?: Feedback;\n}\n\nexport default function FeedbackClientRealtime({\n  interviewId,\n  initialInterview,\n  initialFeedback\n}: FeedbackClientRealtimeProps) {\n  const { user, loading: authLoading } = useAuth();\n  const [isSharing, setIsSharing] = useState(false);\n\n  // Real-time hooks\n  const {\n    interview,\n    loading: interviewLoading,\n    error: interviewError\n  } = useRealtimeInterview(interviewId);\n\n  const {\n    feedback,\n    loading: feedbackLoading,\n    error: feedbackError\n  } = useRealtimeFeedback(interviewId);\n\n  // Use real-time data or fallback to initial data\n  const currentInterview = interview || initialInterview;\n  const currentFeedback = feedback || initialFeedback;\n\n  const handleShare = async () => {\n    setIsSharing(true);\n    try {\n      const shareUrl = `${window.location.origin}/dashboard/interview/${interviewId}/feedback`;\n      await navigator.share({\n        title: `Interview Feedback - ${(currentInterview as any)?.role}`,\n        text: 'Check out my interview feedback!',\n        url: shareUrl,\n      });\n    } catch (error) {\n      // Fallback to clipboard\n      try {\n        await navigator.clipboard.writeText(window.location.href);\n        toast.success('Link copied to clipboard!');\n      } catch (clipboardError) {\n        toast.error('Failed to share or copy link');\n      }\n    } finally {\n      setIsSharing(false);\n    }\n  };\n\n  const handleDownloadPDF = async () => {\n    try {\n      // This would call an API to generate PDF\n      toast.success('PDF generation started. You\\'ll receive it shortly.');\n    } catch (error) {\n      toast.error('Failed to generate PDF');\n    }\n  };\n\n  if (authLoading) {\n    return <FeedbackSkeleton />;\n  }\n\n  if (!user) {\n    return (\n      <div className=\"max-w-4xl mx-auto p-6\">\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <h2 className=\"text-xl font-semibold mb-2\">Authentication Required</h2>\n            <p className=\"text-muted-foreground\">Please sign in to view feedback.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const formatDate = (timestamp: any) => {\n    if (!timestamp) return \"Recent\";\n    \n    let date: Date;\n    if (timestamp?.toDate) {\n      date = timestamp.toDate();\n    } else if (timestamp?.seconds) {\n      date = new Date(timestamp.seconds * 1000);\n    } else {\n      date = new Date(timestamp);\n    }\n    \n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <Button variant=\"ghost\" size=\"sm\" asChild>\n            <Link href=\"/dashboard\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Dashboard\n            </Link>\n          </Button>\n          \n          <div>\n            <h1 className=\"text-2xl font-bold\">Interview Feedback</h1>\n          </div>\n        </div>\n\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" size=\"sm\" onClick={handleShare} disabled={isSharing}>\n            <Share2 className=\"w-4 h-4 mr-2\" />\n            {isSharing ? 'Sharing...' : 'Share'}\n          </Button>\n          \n          <Button variant=\"outline\" size=\"sm\" onClick={handleDownloadPDF}>\n            <Download className=\"w-4 h-4 mr-2\" />\n            Export PDF\n          </Button>\n        </div>\n      </div>\n\n      {/* Interview Details */}\n      <DataSuspense\n        isLoading={interviewLoading}\n        error={interviewError}\n        isEmpty={!currentInterview}\n        emptyMessage=\"Interview not found\"\n        fallback={\n          <Card>\n            <CardHeader>\n              <div className=\"space-y-2\">\n                <div className=\"h-6 w-48 bg-muted rounded animate-pulse\" />\n                <div className=\"h-4 w-32 bg-muted rounded animate-pulse\" />\n              </div>\n            </CardHeader>\n          </Card>\n        }\n      >\n        {currentInterview && (\n          <Card>\n            <CardHeader>\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <CardTitle className=\"text-xl\">{(currentInterview as any).role}</CardTitle>\n                  <div className=\"flex gap-2 mt-2\">\n                    <Badge variant=\"outline\">{(currentInterview as any).type}</Badge>\n                    <Badge variant=\"secondary\">\n                      {formatDate(currentInterview.createdAt)}\n                    </Badge>\n                  </div>\n                </div>\n                \n                {(currentInterview as any).finalized && (\n                  <Badge className=\"bg-green-100 text-green-800\">\n                    Completed ‚úì\n                  </Badge>\n                )}\n              </div>\n              \n              {(currentInterview as any).techstack && (\n                <div className=\"flex flex-wrap gap-2 mt-4\">\n                  {normalizeTechstack((currentInterview as any).techstack).map((tech) => (\n                    <DisplayTechIcons key={tech} name={tech as any} size={20} />\n                  ))}\n                </div>\n              )}\n            </CardHeader>\n          </Card>\n        )}\n      </DataSuspense>\n\n      {/* Feedback Content */}\n      <DataSuspense\n        isLoading={feedbackLoading}\n        error={feedbackError}\n        isEmpty={!currentFeedback}\n        emptyMessage=\"No feedback available yet. Complete your interview to receive feedback.\"\n        fallback={<FeedbackSkeleton />}\n      >\n        {currentFeedback && (\n          <div className=\"space-y-6\">\n            {/* Overall Score */}\n            {currentFeedback.overallScore && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    Overall Performance\n                    <Badge variant=\"secondary\" className=\"text-lg px-3 py-1\">\n                      {currentFeedback.overallScore}/10\n                    </Badge>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"w-full bg-gray-200 rounded-full h-3\">\n                    <div \n                      className=\"bg-gradient-to-r from-red-400 via-yellow-400 to-green-400 h-3 rounded-full transition-all duration-300\"\n                      style={{ width: `${(currentFeedback.overallScore / 10) * 100}%` }}\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Category Feedback */}\n            {currentFeedback.categories && Object.entries(currentFeedback.categories).map(([category, data]: [string, any]) => (\n              <Card key={category}>\n                <CardHeader>\n                  <CardTitle className=\"capitalize flex items-center justify-between\">\n                    {category.replace(/([A-Z])/g, ' $1').trim()}\n                    {data.score && (\n                      <Badge variant=\"outline\" className=\"ml-2\">\n                        {data.score}/10\n                      </Badge>\n                    )}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {data.feedback && (\n                    <p className=\"text-muted-foreground\">{data.feedback}</p>\n                  )}\n                  \n                  {data.strengths && data.strengths.length > 0 && (\n                    <div>\n                      <h4 className=\"font-semibold text-green-700 mb-2\">Strengths:</h4>\n                      <ul className=\"list-disc list-inside space-y-1\">\n                        {data.strengths.map((strength: string, index: number) => (\n                          <li key={index} className=\"text-sm\">{strength}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n                  \n                  {data.improvements && data.improvements.length > 0 && (\n                    <div>\n                      <h4 className=\"font-semibold text-red-700 mb-2\">Areas for Improvement:</h4>\n                      <ul className=\"list-disc list-inside space-y-1\">\n                        {data.improvements.map((improvement: string, index: number) => (\n                          <li key={index} className=\"text-sm\">{improvement}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n                  \n                  {data.suggestions && data.suggestions.length > 0 && (\n                    <div>\n                      <h4 className=\"font-semibold text-blue-700 mb-2\">Suggestions:</h4>\n                      <ul className=\"list-disc list-inside space-y-1\">\n                        {data.suggestions.map((suggestion: string, index: number) => (\n                          <li key={index} className=\"text-sm\">{suggestion}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n\n            {/* General Feedback */}\n            {currentFeedback.generalFeedback && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>General Feedback</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground whitespace-pre-wrap\">\n                    {currentFeedback.generalFeedback}\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Next Steps */}\n            {currentFeedback.nextSteps && currentFeedback.nextSteps.length > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Recommended Next Steps</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-2\">\n                    {currentFeedback.nextSteps.map((step: string, index: number) => (\n                      <li key={index} className=\"flex items-start gap-2\">\n                        <span className=\"flex-shrink-0 w-5 h-5 bg-primary text-primary-foreground rounded-full text-xs flex items-center justify-center mt-0.5\">\n                          {index + 1}\n                        </span>\n                        <span>{step}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Timestamp */}\n            <Card>\n              <CardContent className=\"p-4\">\n                <p className=\"text-sm text-muted-foreground text-center\">\n                  Feedback generated on {formatDate(currentFeedback.createdAt)}\n                  {currentFeedback.updatedAt && currentFeedback.updatedAt !== currentFeedback.createdAt && (\n                    <span> ‚Ä¢ Updated {formatDate(currentFeedback.updatedAt)}</span>\n                  )}\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </DataSuspense>\n\n      {/* Actions */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex justify-center gap-4\">\n            <Button asChild>\n              <Link href=\"/dashboard/interview\">\n                Start New Interview\n              </Link>\n            </Button>\n            \n            <Button variant=\"outline\" asChild>\n              <Link href=\"/dashboard\">\n                Back to Dashboard\n              </Link>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/app/dashboard/interview/[id]/InterviewHeader.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1440,1443],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1440,1443],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport Image from \"next/image\";\nimport { getRandomInterviewCover } from \"@/lib/utils\";\nimport DisplayTechIcons from \"@/components/DisplayTechIcons\";\n\ninterface InterviewHeaderProps {\n    role: string;\n    techstack: string[];\n    type: string;\n    interviewId?: string;\n    onToggleEditor: () => void;\n}\n\nexport default function InterviewHeader({ \n    role, \n    techstack, \n    type, \n    interviewId,\n    onToggleEditor \n}: InterviewHeaderProps) {\n    return (\n        <div className=\"flex flex-col w-full mb-6\">\n            <div className=\"flex items-center gap-4 p-4\">\n                <div className=\"flex items-center gap-4 flex-1\">\n                    <Image\n                        src={getRandomInterviewCover(interviewId)}\n                        alt=\"cover-image\"\n                        width={48}\n                        height={48}\n                        className=\"rounded-full object-cover border-2 border-primary/20\"\n                    />\n                    <div className=\"border-l border-gray-600 h-10 mx-2\"></div>\n                    <div>\n                        <h2 className=\"text-2xl font-bold capitalize text-white\">{role} Interview</h2>\n                        <div className=\"flex items-center gap-2 mt-1\">\n                            <div className=\"flex gap-1\">\n                              {techstack.map((tech) => (\n                                <DisplayTechIcons key={tech} name={tech as any} size={16} />\n                              ))}\n                            </div>\n                            <span className=\"text-sm text-gray-400\">‚Ä¢</span>\n                            <span className=\"text-sm text-gray-300\">{type} Interview</span>\n                        </div>\n                    </div>\n                </div>\n                \n                <button\n                    onClick={onToggleEditor}\n                    className=\"p-2.5 text-gray-400 hover:text-white hover:bg-dark-300 rounded-lg transition-colors border border-dark-300 hover:border-gray-600\"\n                    aria-label=\"Toggle code editor\"\n                    title=\"Toggle code editor\"\n                >\n                    <svg \n                        className=\"w-6 h-6\" \n                        aria-hidden=\"true\" \n                        xmlns=\"http://www.w3.org/2000/svg\" \n                        width=\"24\" \n                        height=\"24\" \n                        fill=\"none\" \n                        viewBox=\"0 0 24 24\"\n                    >\n                        <path \n                            stroke=\"currentColor\" \n                            strokeLinecap=\"round\" \n                            strokeLinejoin=\"round\" \n                            strokeWidth=\"2\" \n                            d=\"m8 8-4 4 4 4m8 0 4-4-4-4m-2-3-4 14\"\n                        />\n                    </svg>\n                </button>\n            </div>\n        </div>\n    );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/app/dashboard/interview/[id]/feedback/FeedbackClient.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useLoading' is defined but never used.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'interviewError' is assigned a value but never used.","line":17,"column":58,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":72},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2196,2199],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2196,2199],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport dayjs from \"dayjs\";\nimport Link from \"next/link\";\nimport Image from \"next/image\";\nimport { redirect, useParams } from \"next/navigation\";\nimport { useInterview } from \"@/lib/hooks/useFirestore\";\nimport { useServerFeedback } from \"@/lib/hooks/useServerFeedback\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLoading } from \"@/contexts/LoadingContext\";\nimport { useEffect } from \"react\";\n\nconst FeedbackClient = () => {\n    const params = useParams();\n    const id = params?.id as string;\n    const { feedback, loading: feedbackLoading, error: feedbackError } = useServerFeedback(id);\n    const { interview, loading: interviewLoading, error: interviewError } = useInterview(id);\n\n    if (!interviewLoading && !interview) redirect(\"/\");\n\n    // Show error message if feedback loading failed\n    if (feedbackError) {\n        return (\n            <section className=\"section-feedback\">\n                <div className=\"flex flex-row justify-center\">\n                    <h1 className=\"text-4xl font-semibold text-white\">\n                        Error Loading Feedback\n                    </h1>\n                </div>\n                <div className=\"feedback-content\">\n                    <p className=\"text-red-400 text-center\">\n                        {feedbackError}\n                    </p>\n                    <div className=\"buttons mt-8\">\n                        <Button asChild className=\"btn-secondary flex-1\">\n                            <Link href=\"/dashboard\" className=\"flex w-full justify-center\">\n                                <p className=\"text-sm font-semibold text-primary-200 text-center\">\n                                    Back to dashboard\n                                </p>\n                            </Link>\n                        </Button>\n                    </div>\n                </div>\n            </section>\n        );\n    }\n\n    return (\n        <section className=\"section-feedback\">\n            <div className=\"flex flex-row justify-center\">\n                <h1 className=\"text-4xl font-semibold text-white\">\n                    Feedback on the Interview -{\" \"}\n                    <span className=\"capitalize\">{(interview as any)?.role || \"Loading...\"}</span> Interview\n                </h1>\n            </div>\n\n            {!feedbackLoading ? (\n                <div className=\"feedback-content\">\n                    <div className=\"flex flex-row justify-center \">\n                        <div className=\"flex flex-row gap-5\">\n                            {/* Overall Impression */}\n                            <div className=\"flex flex-row gap-2 items-center\">\n                                <Image src=\"/star.svg\" width={22} height={22} alt=\"star\" />\n                                <p>\n                                    Overall Impression:{\" \"}\n                                    <span className=\"text-primary-200 font-bold\">\n                                        {feedback?.totalScore || \"---\"}\n                                    </span>\n                                    /100\n                                </p>\n                            </div>\n\n                            {/* Date */}\n                            <div className=\"flex flex-row gap-2\">\n                                <Image src=\"/calendar.svg\" width={22} height={22} alt=\"calendar\" />\n                                <p>\n                                    {feedback?.createdAt\n                                        ? dayjs(feedback.createdAt).format(\"MMM D, YYYY h:mm A\")\n                                        : \"N/A\"}\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n\n                    <hr />\n\n                    <p>{feedback?.finalAssessment || \"No assessment available.\"}</p>\n\n                    {/* Interview Breakdown */}\n                    <div className=\"flex flex-col gap-4\">\n                        <h2 className=\"text-white\">Breakdown of the Interview:</h2>\n                        {feedback?.categoryScores?.map((category, index) => (\n                            <div key={index}>\n                                <p className=\"font-bold\">\n                                    {index + 1}. {category.name} ({category.score}/100)\n                                </p>\n                                <p>{category.comment}</p>\n                            </div>\n                        ))}\n                    </div>\n\n                    <div className=\"flex flex-col gap-3\">\n                        <h3 className=\"text-white\">Strengths</h3>\n                        <ul>\n                            {feedback?.strengths?.map((strength, index) => (\n                                <li key={index}>{strength}</li>\n                            ))}\n                        </ul>\n                    </div>\n\n                    <div className=\"flex flex-col gap-3\">\n                        <h3 className=\"text-white\">Areas for Improvement</h3>\n                        <ul>\n                            {feedback?.areasForImprovement?.map((area, index) => (\n                                <li key={index}>{area}</li>\n                            ))}\n                        </ul>\n                    </div>\n                </div>\n            ) : (\n                null // Global loader handles this\n            )}\n\n            <div className=\"buttons\">\n                <Button asChild className=\"btn-secondary flex-1\">\n                    <Link href=\"/dashboard\" className=\"flex w-full justify-center\">\n                        <p className=\"text-sm font-semibold text-primary-200 text-center\">\n                            Back to dashboard\n                        </p>\n                    </Link>\n                </Button>\n\n                <Button asChild className=\"btn-primary flex-1\">\n                    <Link\n                        href={`/dashboard/interview/${id}`}\n                        className=\"flex w-full justify-center\"\n                    >\n                        <p className=\"text-sm font-semibold text-black text-center\">\n                            Retake Interview\n                        </p>\n                    </Link>\n                </Button>\n            </div>\n        </section>\n    );\n};\n\nexport default FeedbackClient;\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/app/dashboard/interview/[id]/feedback/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'params' is defined but never used.","line":22,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":52}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import FeedbackClient from './FeedbackClient';\n\nexport async function generateStaticParams() {\n    // Generate static params for mock interviews only\n    // In production, you'd fetch actual interview IDs from the database\n    return [\n        { id: 'mock-interview-1' },\n        { id: 'mock-interview-2' },\n        { id: 'mock-interview-3' },\n        { id: 'mock-interview-4' },\n        { id: 'mock-interview-5' },\n        { id: 'mock-interview-6' },\n        { id: 'mock-interview-7' },\n        { id: 'mock-interview-8' },\n    ];\n}\n\ninterface PageProps {\n    params: Promise<{ id: string }>;\n}\n\nexport default async function FeedbackPage({ params }: PageProps) {\n    return <FeedbackClient />;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/app/dashboard/interview/[id]/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MOCK_INTERVIEW_TEMPLATES' is defined but never used.","line":5,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":55},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'InterviewTemplate' is defined but never used.","line":6,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2445,2448],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2445,2448],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2473,2476],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2473,2476],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2541,2544],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2541,2544],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2570,2573],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2570,2573],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2641,2644],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2641,2644],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":119,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4220,4223],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4220,4223],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":119,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4248,4251],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4248,4251],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":120,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4312,4315],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4312,4315],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":120,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4341,4344],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4341,4344],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":121,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4408,4411],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4408,4411],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// export const dynamic = 'force-dynamic'; // Commented out for static export\n\nimport { getCurrentUser } from \"@/lib/actions/auth.action\";\nimport InterviewClient from \"./InterviewClient\";\nimport { questionBankService, MOCK_INTERVIEW_TEMPLATES } from '@/lib/services/question-bank-service';\nimport type { InterviewTemplate } from '@/lib/services/question-bank-service';\n\nexport interface InterviewData {\n    interview: {\n        id: string;\n        role: string;\n        type: string;\n        questions: {\n            id: string;\n            content: string;\n            type: string;\n            difficulty: string;\n            techStack: string[];\n            answer?: string;\n            feedback?: string;\n        }[];\n        techstack: string[];\n        createdAt: string;\n    };\n    feedback: {\n        id: string;\n        overall: string;\n        strengths: string[];\n        areasForImprovement: string[];\n    } | null;\n    user: {\n        id: string;\n        name: string;\n        email: string;\n    };\n}\n\nasync function getInterviewData(id: string) {\n    try {\n        // Check if this is a mock interview ID and generate appropriate data\n        if (id.startsWith('mock-interview-')) {\n            const mockIndex = parseInt(id.split('-')[2]) - 1;\n            \n            // Get interview template from question bank service\n            const templates = questionBankService.getAllTemplates();\n            const selectedTemplate = templates[mockIndex % templates.length];\n            \n            const mockData = {\n                interview: {\n                    id,\n                    role: selectedTemplate.role,\n                    type: selectedTemplate.type,\n                    questions: selectedTemplate.questions.map((q, idx) => ({\n                        id: `${idx + 1}`,\n                        content: q,\n                        type: selectedTemplate.type.toLowerCase(),\n                        difficulty: selectedTemplate.difficulty,\n                        techStack: selectedTemplate.techStack\n                    })),\n                    techstack: selectedTemplate.techStack,\n                    createdAt: new Date().toISOString(),\n                },\n                feedback: null,\n            };\n            \n            const currentUser = await getCurrentUser();\n            \n            return {\n                ...mockData,\n                user: currentUser ? {\n                    id: (currentUser as any).uid || (currentUser as any).id || 'static-user',\n                    name: (currentUser as any).name || (currentUser as any).displayName || 'User',\n                    email: (currentUser as any).email || 'user@example.com'\n                } : {\n                    id: 'static-user',\n                    name: 'User',\n                    email: 'user@example.com'\n                }\n            };\n        }\n        \n        // In a real app, you would fetch this data from the database\n        // const response = await fetch(`/api/interview/${id}`);\n        // const result = await response.json();\n\n        // Default mock data for non-mock interviews\n        const mockData = {\n            interview: {\n                id,\n                role: 'Developer',\n                type: 'Technical',\n                questions: [\n                    {\n                        id: '1',\n                        content: 'Explain the concept of React hooks',\n                        type: 'technical',\n                        difficulty: 'medium',\n                        techStack: ['React', 'JavaScript']\n                    },\n                    {\n                        id: '2',\n                        content: 'What is the virtual DOM?',\n                        type: 'technical',\n                        difficulty: 'easy',\n                        techStack: ['React', 'JavaScript']\n                    }\n                ],\n                techstack: ['JavaScript', 'React', 'Node.js'],\n                createdAt: new Date().toISOString(),\n            },\n            feedback: null,\n        };\n\n        const currentUser = await getCurrentUser();\n        \n        return {\n            ...mockData,\n            user: currentUser ? {\n                id: (currentUser as any).uid || (currentUser as any).id || 'static-user',\n                name: (currentUser as any).name || (currentUser as any).displayName || 'User',\n                email: (currentUser as any).email || 'user@example.com'\n            } : {\n                id: 'static-user',\n                name: 'User',\n                email: 'user@example.com'\n            }\n        };\n    } catch (error) {\n        console.error('Error fetching interview data:', error);\n        throw error;\n    }\n}\n\n// import { Metadata } from 'next';\n\ninterface PageParams {\n    id: string;\n}\n\ninterface PageProps {\n    params: Promise<PageParams>;\n}\n\nexport async function generateStaticParams() {\n    // Generate static params for mock interviews only\n    // In production, you'd fetch actual interview IDs from the database\n    return [\n        { id: 'mock-interview-1' },\n        { id: 'mock-interview-2' },\n        { id: 'mock-interview-3' },\n        { id: 'mock-interview-4' },\n        { id: 'mock-interview-5' },\n        { id: 'mock-interview-6' },\n        { id: 'mock-interview-7' },\n        { id: 'mock-interview-8' },\n    ];\n}\n\nexport default async function Page({ params }: PageProps) {\n    const { id } = await params;\n    const interviewData = await getInterviewData(id);\n\n    return <InterviewClient\n        interview={interviewData.interview}\n        feedback={interviewData.feedback}\n        user={interviewData.user}\n    />;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/app/dashboard/interview/debug-page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[745,748],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[745,748],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[812,815],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[812,815],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[835,838],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[835,838],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[857,860],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[857,860],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[885,888],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[885,888],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[908,911],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[908,911],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState } from 'react';\nimport { ChevronDown } from 'lucide-react';\nimport Agent from \"@/components/Agent\";\nimport { CodeEditorWrapper } from \"@/components/CodeEditorWrapper\";\nimport PdfUploadButton from \"@/components/dynamic/PdfUploadButtonDynamic\";\n\nconst SUPPORTED_LANGUAGES = [\n  { value: 'javascript', label: 'JavaScript' },\n  { value: 'typescript', label: 'TypeScript' },\n  { value: 'python', label: 'Python' },\n  { value: 'java', label: 'Java' },\n  { value: 'csharp', label: 'C#' },\n  { value: 'cpp', label: 'C++' },\n  { value: 'go', label: 'Go' },\n  { value: 'ruby', label: 'Ruby' },\n];\n\ninterface ResumeData {\n  questions: string[];\n  fileUrl: string;\n  resumeId: string;\n  extractedData?: {\n    personalInfo?: any;\n    summary?: string;\n    skills?: string[];\n    experience?: any[];\n    education?: any[];\n    projects?: any[];\n    certifications?: any[];\n    languages?: any[];\n  };\n}\n\n// DEBUG: Mock user without auth check\nconst mockUser = {\n  id: 'debug-user-123',\n  name: 'Debug User',\n  email: 'debug@example.com'\n};\n\nconst DebugPage = () => {\n    const [isEditorExpanded, setIsEditorExpanded] = useState(false);\n    const [selectedLanguage, setSelectedLanguage] = useState('javascript');\n    const [isLanguageDropdownOpen, setIsLanguageDropdownOpen] = useState(false);\n    const [resumeData, setResumeData] = useState<ResumeData | null>(null);\n    \n    // Handle successful resume upload\n    const handleResumeUpload = (uploadResult: ResumeData) => {\n        console.log('Resume uploaded successfully:', uploadResult);\n        setResumeData(uploadResult);\n    };\n\n    // Handle resume replacement\n    const handleResumeReplaced = () => {\n        console.log('Resume being replaced...');\n    };\n\n    return (\n        <div className=\"flex flex-col gap-8\">\n            <div className=\"mb-6 p-4 border-b border-gray-700\">\n                <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                        <h2 className=\"text-2xl font-bold text-white\">\n                            AI-Powered Mock Interview [DEBUG MODE]\n                        </h2>\n                    </div>\n                    <div className=\"flex items-center gap-4\">\n                    </div>\n                </div>\n            </div>\n            \n            <div className=\"\">\n                <div className=\"flex justify-between items-center mb-6\">\n                    <h3 className=\"text-xl font-semibold text-white\">Interview Panel</h3>\n                    <div className=\"flex items-center gap-4\">\n                        <PdfUploadButton \n                            onQuestionsGenerated={handleResumeUpload}\n                            onResumeReplaced={handleResumeReplaced}\n                        />\n                        <div className=\"flex items-center gap-2\">\n                            <button\n                                onClick={() => setIsEditorExpanded(!isEditorExpanded)}\n                                className=\"p-2 text-gray-300 hover:text-white rounded-lg border border-gray-600 hover:bg-gray-700 transition-colors shadow-sm\"\n                                aria-label={isEditorExpanded ? 'Hide code editor' : 'Show code editor'}\n                                title={isEditorExpanded ? 'Hide code editor' : 'Show code editor'}\n                            >\n                                <svg \n                                    className=\"w-6 h-6\" \n                                    aria-hidden=\"true\" \n                                    xmlns=\"http://www.w3.org/2000/svg\" \n                                    width=\"24\" \n                                    height=\"24\" \n                                    fill=\"none\" \n                                    viewBox=\"0 0 24 24\"\n                                >\n                                    <path \n                                        stroke=\"currentColor\" \n                                        strokeLinecap=\"round\" \n                                        strokeLinejoin=\"round\" \n                                        strokeWidth=\"2\" \n                                        d=\"m8 8-4 4 4 4m8 0 4-4-4-4m-2-3-4 14\"\n                                    />\n                                </svg>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"space-y-4\">\n                    <Agent\n                        userName={mockUser.name}\n                        userId={mockUser.id}\n                        type=\"generate\"\n                        resumeInfo={resumeData?.extractedData}\n                        resumeQuestions={resumeData?.questions}\n                    />\n                </div>\n            </div>\n\n            {isEditorExpanded && (\n                <div className=\"\">\n                    <div className=\"flex justify-between items-center mb-4\">\n                        <h3 className=\"text-xl font-semibold text-white\">Code Editor</h3>\n                        <div className=\"relative\">\n                            <button\n                                type=\"button\"\n                                onClick={(e) => {\n                                    e.stopPropagation();\n                                    setIsLanguageDropdownOpen(!isLanguageDropdownOpen);\n                                }}\n                                className=\"flex items-center gap-1 px-3 py-1.5 text-sm font-medium text-gray-200 bg-gray-800 border border-gray-600 rounded-lg hover:bg-gray-700 transition-colors\"\n                            >\n                                {SUPPORTED_LANGUAGES.find(lang => lang.value === selectedLanguage)?.label || 'Language'}\n                                <ChevronDown className=\"w-4 h-4 ml-1\" />\n                            </button>\n                            {isLanguageDropdownOpen && (\n                                <div className=\"absolute right-0 z-10 mt-1 w-40 origin-top-right rounded-md bg-gray-800 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none\">\n                                    <div className=\"py-1\">\n                                        {SUPPORTED_LANGUAGES.map((language) => (\n                                            <button\n                                                key={language.value}\n                                                onClick={(e) => {\n                                                    e.stopPropagation();\n                                                    setSelectedLanguage(language.value);\n                                                    setIsLanguageDropdownOpen(false);\n                                                }}\n                                                className={`block w-full text-left px-4 py-2 text-sm ${\n                                                    selectedLanguage === language.value\n                                                        ? 'bg-gray-700 text-white'\n                                                        : 'text-gray-200 hover:bg-gray-700'\n                                                }`}\n                                            >\n                                                {language.label}\n                                            </button>\n                                        ))}\n                                    </div>\n                                </div>\n                            )}\n                        </div>\n                    </div>\n                    <CodeEditorWrapper \n                        initialValue={`// Write your ${SUPPORTED_LANGUAGES.find(lang => lang.value === selectedLanguage)?.label || 'code'} here\\n// The interviewer may ask you to solve coding problems\\n// Use this editor to write and test your solutions`} \n                        language={selectedLanguage}\n                        className=\"h-[500px] transition-all duration-300\"\n                        isExpanded={true}\n                        onToggleExpand={() => setIsEditorExpanded(false)}\n                    />\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default DebugPage;\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/app/dashboard/interview/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1006,1009],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1006,1009],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1073,1076],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1073,1076],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1096,1099],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1096,1099],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1118,1121],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1118,1121],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1146,1149],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1146,1149],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1169,1172],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1169,1172],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { ChevronDown } from 'lucide-react';\nimport Agent from \"@/components/Agent\";\nimport { CodeEditorWrapper } from \"@/components/CodeEditorWrapper\";\n// Removed server-only import - auth handled by middleware and client auth state\nimport PdfUploadButton from \"@/components/dynamic/PdfUploadButtonDynamic\";\nimport BanterLoader from \"@/components/ui/BanterLoader\";\n\nconst SUPPORTED_LANGUAGES = [\n  { value: 'javascript', label: 'JavaScript' },\n  { value: 'typescript', label: 'TypeScript' },\n  { value: 'python', label: 'Python' },\n  { value: 'java', label: 'Java' },\n  { value: 'csharp', label: 'C#' },\n  { value: 'cpp', label: 'C++' },\n  { value: 'go', label: 'Go' },\n  { value: 'ruby', label: 'Ruby' },\n];\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n}\n\ninterface ResumeData {\n  questions: string[];\n  fileUrl: string;\n  resumeId: string;\n  extractedData?: {\n    personalInfo?: any;\n    summary?: string;\n    skills?: string[];\n    experience?: any[];\n    education?: any[];\n    projects?: any[];\n    certifications?: any[];\n    languages?: any[];\n  };\n}\n\nconst Page = () => {\n    const router = useRouter();\n    const [isEditorExpanded, setIsEditorExpanded] = useState(false);\n    const [selectedLanguage, setSelectedLanguage] = useState('javascript');\n    const [isLanguageDropdownOpen, setIsLanguageDropdownOpen] = useState(false);\n    const [user, setUser] = useState<User | null>(null);\n    const [isLoading, setIsLoading] = useState(true);\n    const [resumeData, setResumeData] = useState<ResumeData | null>(null);\n    \n\n    useEffect(() => {\n        // Check for user auth via API call instead of direct import\n        const fetchUser = async () => {\n            try {\n                const response = await fetch('/api/auth/user');\n                if (!response.ok) {\n                    console.error('Auth API failed with status:', response.status);\n                    router.push('/sign-in');\n                    return;\n                }\n                \n                const userData = await response.json();\n                if (!userData.user) {\n                    console.error('No user data received from auth API');\n                    router.push('/sign-in');\n                    return;\n                }\n                \n                setUser({\n                    id: userData.user.uid || userData.user.id,\n                    name: userData.user.name || userData.user.displayName || 'User',\n                    email: userData.user.email || ''\n                });\n                \n            } catch (error) {\n                console.error('Error fetching user:', error);\n                router.push('/sign-in');\n            } finally {\n                setIsLoading(false);\n            }\n        };\n\n        fetchUser();\n    }, [router]);\n\n    // Handle successful resume upload\n    const handleResumeUpload = (uploadResult: ResumeData) => {\n        console.log('Resume uploaded successfully:', uploadResult);\n        setResumeData(uploadResult);\n    };\n\n    // Handle resume replacement\n    const handleResumeReplaced = () => {\n        console.log('Resume being replaced...');\n        // Could show a confirmation dialog here if needed\n    };\n\n    if (isLoading) {\n        return (\n            <BanterLoader overlay />\n        );\n    }\n\n    if (!user) {\n        return null; // Redirecting to sign-in\n    }\n\n    return (\n        <div className=\"flex flex-col gap-8\">\n            <div className=\"mb-6 p-4 border-b border-gray-700\">\n                <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                        <h2 className=\"text-2xl font-bold text-white\">\n                            AI-Powered Mock Interview\n                        </h2>\n                    </div>\n                    <div className=\"flex items-center gap-4\">\n                    </div>\n                </div>\n            </div>\n            \n            <div className=\"\">\n                <div className=\"flex justify-between items-center mb-6\">\n                    <h3 className=\"text-xl font-semibold text-white\">Interview Panel</h3>\n                    <div className=\"flex items-center gap-4\">\n                        <PdfUploadButton \n                            onQuestionsGenerated={handleResumeUpload}\n                            onResumeReplaced={handleResumeReplaced}\n                        />\n                        <div className=\"flex items-center gap-2\">\n\n                            <button\n                                onClick={() => setIsEditorExpanded(!isEditorExpanded)}\n                                className=\"p-2 text-gray-300 hover:text-white rounded-lg border border-gray-600 hover:bg-gray-700 transition-colors shadow-sm\"\n                                aria-label={isEditorExpanded ? 'Hide code editor' : 'Show code editor'}\n                                title={isEditorExpanded ? 'Hide code editor' : 'Show code editor'}\n                            >\n                                <svg \n                                    className=\"w-6 h-6\" \n                                    aria-hidden=\"true\" \n                                    xmlns=\"http://www.w3.org/2000/svg\" \n                                    width=\"24\" \n                                    height=\"24\" \n                                    fill=\"none\" \n                                    viewBox=\"0 0 24 24\"\n                                >\n                                    <path \n                                        stroke=\"currentColor\" \n                                        strokeLinecap=\"round\" \n                                        strokeLinejoin=\"round\" \n                                        strokeWidth=\"2\" \n                                        d=\"m8 8-4 4 4 4m8 0 4-4-4-4m-2-3-4 14\"\n                                    />\n                                </svg>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"space-y-4\">\n                    <Agent\n                        userName={user.name}\n                        userId={user.id}\n                        type=\"generate\"\n                        resumeInfo={resumeData?.extractedData}\n                        resumeQuestions={resumeData?.questions}\n                    />\n                </div>\n            </div>\n\n            {isEditorExpanded && (\n                <div className=\"\">\n                    <div className=\"flex justify-between items-center mb-4\">\n                        <h3 className=\"text-xl font-semibold text-white\">Code Editor</h3>\n                        <div className=\"relative\">\n                            <button\n                                type=\"button\"\n                                onClick={(e) => {\n                                    e.stopPropagation();\n                                    setIsLanguageDropdownOpen(!isLanguageDropdownOpen);\n                                }}\n                                className=\"flex items-center gap-1 px-3 py-1.5 text-sm font-medium text-gray-200 bg-gray-800 border border-gray-600 rounded-lg hover:bg-gray-700 transition-colors\"\n                            >\n                                {SUPPORTED_LANGUAGES.find(lang => lang.value === selectedLanguage)?.label || 'Language'}\n                                <ChevronDown className=\"w-4 h-4 ml-1\" />\n                            </button>\n                            {isLanguageDropdownOpen && (\n                                <div className=\"absolute right-0 z-10 mt-1 w-40 origin-top-right rounded-md bg-gray-800 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none\">\n                                    <div className=\"py-1\">\n                                        {SUPPORTED_LANGUAGES.map((language) => (\n                                            <button\n                                                key={language.value}\n                                                onClick={(e) => {\n                                                    e.stopPropagation();\n                                                    setSelectedLanguage(language.value);\n                                                    setIsLanguageDropdownOpen(false);\n                                                }}\n                                                className={`block w-full text-left px-4 py-2 text-sm ${\n                                                    selectedLanguage === language.value\n                                                        ? 'bg-gray-700 text-white'\n                                                        : 'text-gray-200 hover:bg-gray-700'\n                                                }`}\n                                            >\n                                                {language.label}\n                                            </button>\n                                        ))}\n                                    </div>\n                                </div>\n                            )}\n                        </div>\n                    </div>\n                    <CodeEditorWrapper \n                        initialValue={`// Write your ${SUPPORTED_LANGUAGES.find(lang => lang.value === selectedLanguage)?.label || 'code'} here\\n// The interviewer may ask you to solve coding problems\\n// Use this editor to write and test your solutions`} \n                        language={selectedLanguage}\n                        className=\"h-[500px] transition-all duration-300\"\n                        isExpanded={true}\n                        onToggleExpand={() => setIsEditorExpanded(false)}\n                    />\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Page;","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/app/dashboard/layout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getUserInterviews' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getPublicInterviews' is defined but never used.","line":4,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DashboardClient' is defined but never used.","line":8,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":23}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ReactNode } from \"react\";\nimport { redirect } from \"next/navigation\";\nimport { isAuthenticated, getCurrentUser } from \"@/lib/actions/auth.action\";\nimport { getUserInterviews, getPublicInterviews } from \"@/lib/actions/dashboard.action\";\nimport AuthenticatedLayout from \"@/components/authenticated-layout\";\nimport { AuthProvider } from \"@/contexts/AuthContext\";\nimport { AuthSync } from \"@/components/AuthSync\";\nimport DashboardClient from \"./DashboardClient\";\n\n// Force dynamic rendering since we use cookies\nexport const dynamic = 'force-dynamic'; // Required for cookie access\nexport const revalidate = 0; // Disable caching for auth\n\ninterface DashboardLayoutProps {\n  children: ReactNode;\n}\n\nexport default async function Layout({ children }: DashboardLayoutProps) {\n  console.log('üè† Dashboard layout: Starting authentication check...');\n  \n  // Check authentication\n  const isAuth = await isAuthenticated();\n  console.log('üè† Dashboard layout: Authentication result:', isAuth);\n  \n  if (!isAuth) {\n    console.log('üè† Dashboard layout: User not authenticated, redirecting to sign-in');\n    redirect('/sign-in');\n  }\n\n  // Get the current user to pass to the context\n  console.log('üè† Dashboard layout: Getting current user...');\n  const user = await getCurrentUser();\n  console.log('üè† Dashboard layout: Current user:', user ? { uid: user.uid, email: user.email } : null);\n  \n  return (\n    <AuthProvider initialUser={user}>\n      <AuthSync />\n      <AuthenticatedLayout>\n        {children}\n      </AuthenticatedLayout>\n    </AuthProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/app/dashboard/settings/page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":110,"column":32,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5279,5362],"text":"\n                            You&apos;re in the beta rollout!\n                          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5279,5362],"text":"\n                            You&lsquo;re in the beta rollout!\n                          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5279,5362],"text":"\n                            You&#39;re in the beta rollout!\n                          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5279,5362],"text":"\n                            You&rsquo;re in the beta rollout!\n                          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":131,"column":32,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[6442,6525],"text":"\n                            You&apos;re in the beta rollout!\n                          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[6442,6525],"text":"\n                            You&lsquo;re in the beta rollout!\n                          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[6442,6525],"text":"\n                            You&#39;re in the beta rollout!\n                          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[6442,6525],"text":"\n                            You&rsquo;re in the beta rollout!\n                          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":148,"column":74,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[7260,7414],"text":"\n                        These features are currently in beta rollout. You&apos;ll be automatically included as we expand to more users.\n                      "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[7260,7414],"text":"\n                        These features are currently in beta rollout. You&lsquo;ll be automatically included as we expand to more users.\n                      "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[7260,7414],"text":"\n                        These features are currently in beta rollout. You&#39;ll be automatically included as we expand to more users.\n                      "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[7260,7414],"text":"\n                        These features are currently in beta rollout. You&rsquo;ll be automatically included as we expand to more users.\n                      "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useRef } from 'react';\nimport { Clock, LogOut, Zap, AlertCircle } from 'lucide-react';\nimport { useRouter } from 'next/navigation';\nimport {\n  Tabs,\n  TabsList,\n  TabsTrigger,\n  TabsContent,\n} from '@/components/ui/tabs';\nimport { Switch } from '@/components/ui/switch';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Button } from '@/components/ui/button';\nimport { Separator } from '@/components/ui/separator';\nimport { Select, SelectTrigger, SelectContent, SelectItem, SelectValue } from '@/components/ui/select';\nimport { useFeatureFlags } from '@/lib/hooks/useFeatureFlags';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\n\nexport default function SettingsPage() {\n  const [reminderTime, setReminderTime] = useState('08:00');\n  const timeInputRef = useRef<HTMLInputElement>(null);\n  const router = useRouter();\n  const { flags, loading, refreshFlags, isAutoApplyAzureEnabled, isPortalIntegrationEnabled } = useFeatureFlags();\n\n  const handleLogout = async () => {\n    try {\n      // Clear any local storage or session data\n      localStorage.clear();\n      sessionStorage.clear();\n      \n      // Call logout API and redirect to marketing page\n      await fetch(\"/api/profile/logout\", { method: \"POST\" });\n      router.push('/marketing');\n      router.refresh();\n    } catch (error) {\n      console.error('Error during logout:', error);\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto px-6 py-10\">\n      <h1 className=\"text-3xl font-bold mb-6 text-white dark:text-white\">Settings</h1>\n\n      <Tabs defaultValue=\"interview\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"interview\">Interview</TabsTrigger>\n          <TabsTrigger value=\"ai\">AI</TabsTrigger>\n          <TabsTrigger value=\"notifications\">Notifications</TabsTrigger>\n          <TabsTrigger value=\"privacy\">Privacy</TabsTrigger>\n          <TabsTrigger value=\"account\">Account</TabsTrigger>\n        </TabsList>\n\n        {/* Interview Preferences */}\n        <TabsContent value=\"interview\" className=\"space-y-4 bg-gray-900 p-6 rounded-lg border border-gray-700\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"target-roles\" className=\"text-gray-300\">Target Roles</Label>\n            <Input id=\"target-roles\" placeholder=\"e.g. Frontend Engineer, PM\" className=\"bg-gray-800 border-gray-600 text-white placeholder-gray-400 focus:border-blue-500 focus-visible:ring-blue-500\" />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label className=\"text-gray-300\">Experience Level</Label>\n            <Select>\n              <SelectTrigger className=\"bg-gray-800 border-gray-600 text-white\">\n                <SelectValue placeholder=\"Choose experience level\" />\n              </SelectTrigger>\n              <SelectContent className=\"bg-gray-800 border-gray-600\">\n                <SelectItem value=\"fresher\" className=\"text-white hover:bg-gray-700\">Fresher</SelectItem>\n                <SelectItem value=\"mid\" className=\"text-white hover:bg-gray-700\">Mid-level</SelectItem>\n                <SelectItem value=\"senior\" className=\"text-white hover:bg-gray-700\">Senior</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label className=\"text-gray-300\">Preferred Question Types</Label>\n            <Input placeholder=\"e.g. Coding, Behavioral\" className=\"bg-gray-800 border-gray-600 text-white placeholder-gray-400 focus:border-blue-500 focus-visible:ring-blue-500\" />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label className=\"text-gray-300\">Preferred Domain</Label>\n            <Input placeholder=\"e.g. Fintech, Edtech\" className=\"bg-gray-800 border-gray-600 text-white placeholder-gray-400 focus:border-blue-500 focus-visible:ring-blue-500\" />\n          </div>\n        </TabsContent>\n\n        {/* AI Personalization */}\n        <TabsContent value=\"ai\" className=\"space-y-4 bg-gray-900 p-6 rounded-lg border border-gray-700\">\n          <div className=\"space-y-4\">\n            <div>\n              <h3 className=\"text-lg font-semibold text-white mb-4 flex items-center gap-2\">\n                <Zap className=\"h-5 w-5 text-blue-400\" />\n                New AI Engine (Beta)\n              </h3>\n              \n              {loading ? (\n                <div className=\"animate-pulse bg-gray-800 h-4 w-full rounded mb-2\"></div>\n              ) : (\n                <>\n                  <div className=\"space-y-3\">\n                    {/* Azure Auto-Apply Feature */}\n                    <div className=\"flex items-center justify-between p-3 bg-gray-800 rounded-lg border border-gray-700\">\n                      <div className=\"flex-1\">\n                        <Label className=\"text-white font-medium\">Auto-Apply with Azure AI</Label>\n                        <p className=\"text-sm text-gray-400 mt-1\">\n                          Automatically apply to jobs using advanced Azure OpenAI integration\n                        </p>\n                        {flags?.rolloutStatus?.autoApplyAzure && (\n                          <span className=\"inline-block mt-1 px-2 py-1 text-xs bg-blue-900 text-blue-200 rounded\">\n                            You're in the beta rollout!\n                          </span>\n                        )}\n                      </div>\n                      <div className=\"flex items-center ml-4\">\n                        <Switch \n                          checked={isAutoApplyAzureEnabled()} \n                          disabled={!flags?.rolloutStatus?.autoApplyAzure}\n                        />\n                      </div>\n                    </div>\n\n                    {/* Portal Integration Feature */}\n                    <div className=\"flex items-center justify-between p-3 bg-gray-800 rounded-lg border border-gray-700\">\n                      <div className=\"flex-1\">\n                        <Label className=\"text-white font-medium\">Enhanced Portal Integration</Label>\n                        <p className=\"text-sm text-gray-400 mt-1\">\n                          Seamless integration with LinkedIn, Indeed, and other job portals\n                        </p>\n                        {flags?.rolloutStatus?.portalIntegration && (\n                          <span className=\"inline-block mt-1 px-2 py-1 text-xs bg-blue-900 text-blue-200 rounded\">\n                            You're in the beta rollout!\n                          </span>\n                        )}\n                      </div>\n                      <div className=\"flex items-center ml-4\">\n                        <Switch \n                          checked={isPortalIntegrationEnabled()} \n                          disabled={!flags?.rolloutStatus?.portalIntegration}\n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  {(!flags?.rolloutStatus?.autoApplyAzure && !flags?.rolloutStatus?.portalIntegration) && (\n                    <Alert className=\"mt-4 border-blue-600 bg-blue-900/20\">\n                      <AlertCircle className=\"h-4 w-4 text-blue-400\" />\n                      <AlertDescription className=\"text-blue-200\">\n                        These features are currently in beta rollout. You'll be automatically included as we expand to more users.\n                      </AlertDescription>\n                    </Alert>\n                  )}\n\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    onClick={refreshFlags}\n                    className=\"mt-2 bg-gray-800 border-gray-600 text-white hover:bg-gray-700\"\n                  >\n                    Check for Updates\n                  </Button>\n                </>\n              )}\n            </div>\n\n            <Separator className=\"border-gray-600\" />\n\n            <div className=\"space-y-3\">\n              <h4 className=\"text-white font-medium\">General AI Settings</h4>\n              <div className=\"flex items-center justify-between\">\n                <Label className=\"text-white\">Enable Smart Feedback</Label>\n                <div className=\"flex items-center\">\n                  <Switch defaultChecked />\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <Label className=\"text-white\">Adaptive Difficulty</Label>\n                <div className=\"flex items-center\">\n                  <Switch defaultChecked />\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <Label className=\"text-white\">Use Past Performance</Label>\n                <div className=\"flex items-center\">\n                  <Switch />\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"space-y-2\">\n            <Label className=\"text-gray-300\">Preferred Language</Label>\n            <Select>\n              <SelectTrigger className=\"bg-gray-800 border-gray-600 text-white\">\n                <SelectValue placeholder=\"Choose a language\" />\n              </SelectTrigger>\n              <SelectContent className=\"bg-gray-800 border-gray-600\">\n                <SelectItem value=\"en\" className=\"text-white hover:bg-gray-700\">English</SelectItem>\n                <SelectItem value=\"zh\" className=\"text-white hover:bg-gray-700\">Chinese (Mandarin)</SelectItem>\n                <SelectItem value=\"hi\" className=\"text-white hover:bg-gray-700\">Hindi</SelectItem>\n                <SelectItem value=\"es\" className=\"text-white hover:bg-gray-700\">Spanish</SelectItem>\n                <SelectItem value=\"fr\" className=\"text-white hover:bg-gray-700\">French</SelectItem>\n                <SelectItem value=\"ar\" className=\"text-white hover:bg-gray-700\">Arabic</SelectItem>\n                <SelectItem value=\"bn\" className=\"text-white hover:bg-gray-700\">Bengali</SelectItem>\n                <SelectItem value=\"pt\" className=\"text-white hover:bg-gray-700\">Portuguese</SelectItem>\n                <SelectItem value=\"ru\" className=\"text-white hover:bg-gray-700\">Russian</SelectItem>\n                <SelectItem value=\"ja\" className=\"text-white hover:bg-gray-700\">Japanese</SelectItem>\n                <SelectItem value=\"de\" className=\"text-white hover:bg-gray-700\">German</SelectItem>\n                <SelectItem value=\"ko\" className=\"text-white hover:bg-gray-700\">Korean</SelectItem>\n                <SelectItem value=\"it\" className=\"text-white hover:bg-gray-700\">Italian</SelectItem>\n                <SelectItem value=\"tr\" className=\"text-white hover:bg-gray-700\">Turkish</SelectItem>\n                <SelectItem value=\"nl\" className=\"text-white hover:bg-gray-700\">Dutch</SelectItem>\n                <SelectItem value=\"pl\" className=\"text-white hover:bg-gray-700\">Polish</SelectItem>\n                <SelectItem value=\"uk\" className=\"text-white hover:bg-gray-700\">Ukrainian</SelectItem>\n                <SelectItem value=\"vi\" className=\"text-white hover:bg-gray-700\">Vietnamese</SelectItem>\n                <SelectItem value=\"th\" className=\"text-white hover:bg-gray-700\">Thai</SelectItem>\n                <SelectItem value=\"fa\" className=\"text-white hover:bg-gray-700\">Persian</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </TabsContent>\n\n        {/* Notifications */}\n        <TabsContent value=\"notifications\" className=\"space-y-4 bg-gray-900 p-6 rounded-lg border border-gray-700\">\n          <div className=\"flex items-center justify-between\">\n            <Label className=\"text-white\">Daily Practice Reminder</Label>\n            <div className=\"flex items-center\">\n              <Switch defaultChecked />\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label className=\"text-gray-300\">Reminder Time</Label>\n            <div className=\"relative w-40\">\n              <Input\n                ref={timeInputRef}\n                type=\"time\"\n                value={reminderTime}\n                onChange={(e) => setReminderTime(e.target.value)}\n                className=\"pl-10 pr-3 py-2 w-full bg-gray-800 border-gray-600 text-white [&::-webkit-calendar-picker-indicator]:hidden [&::-webkit-inner-spin-button]:hidden [&::-webkit-clear-button]:hidden\"\n              />\n              <button\n                type=\"button\"\n                onClick={() => timeInputRef.current?.showPicker()}\n                className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400 hover:text-white transition-colors\"\n              >\n                <Clock className=\"h-4 w-4\" />\n              </button>\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <Label className=\"text-white\">Email Notifications</Label>\n            <div className=\"flex items-center\">\n              <Switch />\n            </div>\n          </div>\n        </TabsContent>\n\n        {/* Privacy & GDPR */}\n        <TabsContent value=\"privacy\" className=\"space-y-4 bg-gray-900 p-6 rounded-lg border border-gray-700\">\n          <div className=\"space-y-6\">\n            <div>\n              <h3 className=\"text-lg font-semibold text-white mb-4\">Data Consent Preferences</h3>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label className=\"text-white\">Analytics & Performance</Label>\n                    <p className=\"text-sm text-gray-400\">Help us improve the platform by sharing usage analytics</p>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <Switch defaultChecked />\n                  </div>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label className=\"text-white\">Marketing Communications</Label>\n                    <p className=\"text-sm text-gray-400\">Receive updates about new features and tips</p>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <Switch />\n                  </div>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label className=\"text-white\">Functional Cookies</Label>\n                    <p className=\"text-sm text-gray-400\">Essential for the platform to work properly</p>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <Switch defaultChecked disabled />\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <Separator className=\"border-gray-600\" />\n\n            <div>\n              <h3 className=\"text-lg font-semibold text-white mb-4\">Data Management</h3>\n              <div className=\"space-y-3\">\n                <div className=\"flex flex-col sm:flex-row gap-3\">\n                  <Button \n                    variant=\"outline\" \n                    className=\"bg-gray-800 border-gray-600 text-white hover:bg-gray-700\"\n                  >\n                    Download My Data\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    className=\"bg-gray-800 border-gray-600 text-white hover:bg-gray-700\"\n                  >\n                    View Data Usage\n                  </Button>\n                </div>\n                <p className=\"text-sm text-gray-400\">\n                  You can export all your personal data or view how your data is being used.\n                </p>\n              </div>\n            </div>\n\n            <Separator className=\"border-gray-600\" />\n\n            <div>\n              <h3 className=\"text-lg font-semibold text-white mb-4\">Right to be Forgotten</h3>\n              <div className=\"space-y-3\">\n                <Button \n                  variant=\"destructive\" \n                  className=\"bg-red-600 hover:bg-red-700 text-white\"\n                >\n                  Request Data Deletion\n                </Button>\n                <p className=\"text-sm text-gray-400\">\n                  Permanently delete all your personal data within 30 days. This action cannot be undone.\n                </p>\n              </div>\n            </div>\n\n            <Separator className=\"border-gray-600\" />\n\n            <div>\n              <h3 className=\"text-lg font-semibold text-white mb-4\">Privacy Information</h3>\n              <div className=\"space-y-2\">\n                <a \n                  href=\"/marketing/privacy\" \n                  className=\"text-blue-400 hover:text-blue-300 text-sm underline\"\n                >\n                  Privacy Policy\n                </a>\n                <br />\n                <a \n                  href=\"/marketing/cookies\" \n                  className=\"text-blue-400 hover:text-blue-300 text-sm underline\"\n                >\n                  Cookie Policy\n                </a>\n                <br />\n                <a \n                  href=\"/marketing/terms\" \n                  className=\"text-blue-400 hover:text-blue-300 text-sm underline\"\n                >\n                  Terms of Service\n                </a>\n              </div>\n            </div>\n          </div>\n        </TabsContent>\n\n        {/* Account Settings */}\n        <TabsContent value=\"account\" className=\"space-y-4 bg-gray-900 p-6 rounded-lg border border-gray-700\">\n          <div className=\"space-y-2\">\n            <Label className=\"text-gray-300\">Change Password</Label>\n            <Input type=\"password\" placeholder=\"New Password\" className=\"bg-gray-800 border-gray-600 text-white placeholder-gray-400 focus:border-blue-500 focus-visible:ring-blue-500\" />\n            <Button className=\"mt-2 bg-blue-600 hover:bg-blue-700 text-white border-blue-500\">Update Password</Button>\n          </div>\n\n          <Separator className=\"my-4 border-gray-600\" />\n\n          {/* Logout Section */}\n          <div className=\"space-y-2\">\n            <Label className=\"text-gray-300\">Account Actions</Label>\n            <div className=\"flex gap-4\">\n              <Button \n                onClick={handleLogout}\n                variant=\"outline\" \n                className=\"bg-gray-800 border-gray-600 text-white hover:bg-gray-700 hover:text-white border-gray-500 flex items-center gap-2\"\n              >\n                <LogOut className=\"h-4 w-4\" />\n                Sign Out\n              </Button>\n              <Button variant=\"destructive\" className=\"bg-red-600 hover:bg-red-700 text-white border-red-500\">\n                Delete My Account\n              </Button>\n            </div>\n          </div>\n        </TabsContent>\n\n      </Tabs>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/app/layout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'initializeAzureServices' is defined but never used.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":33}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Toaster } from \"sonner\";\nimport type { Metadata } from \"next\";\nimport { Mona_Sans } from \"next/font/google\";\nimport { LoadingProvider } from \"@/contexts/LoadingContext\";\nimport { RouterLoadingHandler } from \"@/components/RouterLoadingHandler\";\nimport { TelemetryProvider } from \"@/components/providers/TelemetryProvider\";\nimport Providers from \"./providers\";\nimport { initializeAzureServices } from '@/lib/azure-startup';\nimport { RetryWithBackoff } from '@/lib/utils/retry-with-backoff';\nimport { ErrorHandler } from '@/lib/middleware/error-handler';\n\nimport \"./globals.css\";\nimport TestHelperInitializer from \"@/components/test/TestHelperInitializer\";\n\n// Initialize Azure services on server-side\n// initializeAzureServices(); // Temporarily disabled for testing\n\n// Initialize retry logic and error handler with Application Insights\nconst instrumentationKey = process.env.NEXT_PUBLIC_AZURE_APPLICATION_INSIGHTS_INSTRUMENTATION_KEY;\n\nif (instrumentationKey) {\n  RetryWithBackoff.initialize(instrumentationKey);\n  ErrorHandler.initialize(instrumentationKey);\n}\n\nconst monaSans = Mona_Sans({\n    variable: \"--font-mona-sans\",\n    subsets: [\"latin\"],\n});\n\nexport const metadata: Metadata = {\n    title: \"PrepBettr\",\n    description: \"An AI-powered platform for preparing for mock interviews\",\n    icons: {\n        icon: [\n            { url: '/icon', sizes: '512x512', type: 'image/png' },\n        ],\n        apple: [\n            { url: '/apple-icon', sizes: '1024x1024', type: 'image/png' },\n        ],\n        other: [\n            {\n                rel: 'icon',\n                url: '/favicon.ico',\n                sizes: '256x256',\n            },\n        ],\n    },\n};\n\nexport default function RootLayout({\n                                       children,\n                                   }: Readonly<{\n    children: React.ReactNode;\n}>) {\n    return (\n        <html lang=\"en\" className=\"dark\">\n        <body className={`${monaSans.className} antialiased`} style={{ \n          backgroundColor: \"#0a0a0a\",\n          backgroundImage: \"url('/pattern.png')\",\n          backgroundSize: \"cover\",\n          backgroundPosition: \"center\",\n          backgroundRepeat: \"no-repeat\",\n          backgroundAttachment: \"fixed\",\n          \"--color-background\": \"transparent\",\n          \"--background\": \"transparent\"\n        } as React.CSSProperties} suppressHydrationWarning={true}>\n        <Providers>\n            <LoadingProvider>\n                <RouterLoadingHandler />\n                <TelemetryProvider>\n                    {/* TestHelperInitializer for E2E tests */}\n                    {(process.env.NODE_ENV === 'test' || process.env.NEXT_PUBLIC_TESTING === 'true') && <TestHelperInitializer />}\n                    {children}\n                </TelemetryProvider>\n            </LoadingProvider>\n        </Providers>\n\n        <Toaster />\n        </body>\n        </html>\n    );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/components/Agent.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AgentState' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AudioState' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'createAddUserMessageAction' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AUDIO_CONFIG' is defined but never used.","line":34,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'disposeAudioResources' is defined but never used.","line":38,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SavedMessage' is defined but never used.","line":49,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1633,1636],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1633,1636],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":64,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1656,1659],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1656,1659],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1678,1681],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1678,1681],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":66,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1706,1709],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1706,1709],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":67,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1729,1732],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1729,1732],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useFoundryVoice' is assigned a value but never used.","line":94,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":94,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":148,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":148,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":172,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":172,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6582,6585],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6582,6585],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":174,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":174,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6693,6696],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6693,6696],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleEndInterview'. Either include it or remove the dependency array.","line":193,"column":8,"nodeType":"ArrayExpression","endLine":193,"endColumn":54,"suggestions":[{"desc":"Update the dependencies array to be: [state.isInterviewComplete, isInterviewActive, handleEndInterview]","fix":{"range":[7397,7443],"text":"[state.isInterviewComplete, isInterviewActive, handleEndInterview]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'state.messages'. Either include it or remove the dependency array.","line":219,"column":8,"nodeType":"ArrayExpression","endLine":219,"endColumn":91,"suggestions":[{"desc":"Update the dependencies array to be: [isInterviewFinished, state.messages.length, interviewId, userId, type, feedbackId, state.messages]","fix":{"range":[8459,8542],"text":"[isInterviewFinished, state.messages.length, interviewId, userId, type, feedbackId, state.messages]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":289,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":289,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11091,11094],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11091,11094],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":290,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":290,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11140,11143],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11140,11143],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":291,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":291,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11203,11206],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11203,11206],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":362,"column":94,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":362,"endColumn":97,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14028,14031],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14028,14031],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":365,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":365,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14251,14254],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14251,14254],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":367,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":367,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14438,14441],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14438,14441],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":380,"column":94,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":380,"endColumn":97,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15155,15158],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15155,15158],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":383,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":383,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15378,15381],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15378,15381],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":385,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":385,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15565,15568],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15565,15568],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'source' is assigned a value but never used.","line":428,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":428,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":432,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":432,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17527,17530],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17527,17530],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":434,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":434,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17644,17647],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17644,17647],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":511,"column":91,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":511,"endColumn":94,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21968,21971],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21968,21971],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":513,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":513,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22163,22166],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22163,22166],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":558,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":558,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24076,24079],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24076,24079],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":559,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":559,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24149,24152],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24149,24152],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":754,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":754,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[35464,35467],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[35464,35467],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":754,"column":105,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":754,"endColumn":108,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[35510,35513],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[35510,35513],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":764,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":764,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[36229,36232],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[36229,36232],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":764,"column":104,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":764,"endColumn":107,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[36274,36277],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[36274,36277],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":35,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport Image from \"next/image\";\nimport { useReducer, useEffect, useRef } from \"react\";\nimport { useRouter } from \"next/navigation\";\n\n// Feature flag support for Azure AI Foundry voice system\nimport { useFeatureFlag } from \"@/lib/hooks/useUnifiedConfig\";\n\nimport { cn } from \"@/lib/utils\";\nimport { createFeedback } from \"@/lib/actions/general.action\";\nimport { logger } from \"@/lib/utils/logger\";\nimport { handleAsyncError, showErrorNotification } from \"@/lib/utils/error-utils\";\nimport {\n  AgentState,\n  InterviewState,\n  AudioState, \n  agentReducer,\n  initialAgentState,\n  selectIsRecording,\n  selectIsProcessing,\n  selectIsSpeaking,\n  selectIsWaiting,\n  selectIsInterviewActive,\n  selectIsInterviewFinished,\n  selectShouldShowFeedback,\n  createStartInterviewAction,\n  createEndInterviewAction,\n  createAddUserMessageAction,\n  createAddAIMessageAction,\n  createUserSpokeAction\n} from \"@/lib/voice/agent-state\";\nimport {\n  AUDIO_CONFIG,\n  prepareAudioForUpload,\n  createOptimizedAudioContext,\n  resumeAudioContext,\n  disposeAudioResources\n} from \"@/lib/voice/audio-utils\";\nimport {\n  InterviewContext,\n  speechToText,\n  startConversation,\n  processAndPlayResponse,\n  endConversation,\n  playAIResponse,\n  playDirectAudioWithFallback\n} from \"@/lib/voice/azure-adapters\";\nimport { SavedMessage } from \"@/lib/types/voice\";\n\ninterface ExtractedResumeData {\n    personalInfo?: {\n        name?: string;\n        email?: string;\n        phone?: string;\n        address?: string;\n        linkedin?: string;\n        github?: string;\n        website?: string;\n    };\n    summary?: string;\n    skills?: string[];\n    experience?: any[];\n    education?: any[];\n    projects?: any[];\n    certifications?: any[];\n    languages?: any[];\n}\n\ninterface AgentProps {\n    userName: string;\n    userId: string;\n    interviewId?: string;\n    feedbackId?: string;\n    type: string;\n    questions?: string[];\n    profileImage?: string;\n    resumeInfo?: ExtractedResumeData;\n    resumeQuestions?: string[];\n}\n\nconst Agent = ({\n    userName,\n    userId,\n    interviewId,\n    feedbackId,\n    type,\n    questions,\n    resumeInfo,\n    resumeQuestions,\n}: AgentProps) => {\n    // CRITICAL: ALL hooks must be called at the top level before any conditional logic\n    // This prevents \"Rules of Hooks\" violations\n    const { enabled: useFoundryVoice, loading: flagLoading } = useFeatureFlag('voiceInterviewV2');\n    const router = useRouter();\n    const [state, dispatch] = useReducer(agentReducer, initialAgentState);\n    \n    // Audio recording state - MUST be called before any conditional returns\n    const audioSamplesRef = useRef<Float32Array[]>([]);\n    const isCurrentlyRecordingRef = useRef<boolean>(false);\n    const recordingTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n    const audioCleanupRef = useRef<(() => Promise<void>) | null>(null);\n    \n    // Voice activity detection state - MUST be called before any conditional returns\n    const silenceTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n    const lastVoiceActivityRef = useRef<number>(0);\n    const recordingStartTimeRef = useRef<number>(0);\n    const SILENCE_DURATION_MS = 3500; // Allow users time to think - 3.5 seconds of silence\n    const MIN_RECORDING_DURATION_MS = 1200;  // Ensure we capture complete thoughts\n    \n    // Derived selectors from state - calculated values don't violate hooks rules\n    const isRecording = selectIsRecording(state);\n    const isProcessing = selectIsProcessing(state);\n    const isSpeaking = selectIsSpeaking(state);\n    const isWaiting = selectIsWaiting(state);\n    const isInterviewActive = selectIsInterviewActive(state);\n    const isInterviewFinished = selectIsInterviewFinished(state);\n    const shouldShowFeedback = selectShouldShowFeedback(state);\n\n    // ALL useEffect hooks MUST be called at top level before any conditional returns\n    // Load user profile image with fallbacks\n    useEffect(() => {\n        const loadUserProfileImage = async () => {\n            try {\n                // Use existing auth endpoint that returns user data\n                const response = await fetch(\"/api/auth/user\");\n                if (response.ok) {\n                    const userData = await response.json();\n                    const user = userData?.user;\n                    \n                    if (user) {\n                        // Try multiple sources for profile image\n                        const profileImage = \n                            user.photoURL || // Firebase photoURL\n                            user.image || // Custom image field\n                            user.avatar || // Avatar field\n                            `https://ui-avatars.com/api/?name=${encodeURIComponent(user.displayName || user.name || userName)}&background=6366f1&color=fff&size=40`; // Generated avatar fallback\n                        \n                        if (profileImage) {\n                            dispatch({ type: 'SET_USER_IMAGE', payload: profileImage });\n                        }\n                    }\n                } else {\n                    // Silently fall back to generated avatar if auth fails\n                    const fallbackImage = `https://ui-avatars.com/api/?name=${encodeURIComponent(userName)}&background=6366f1&color=fff&size=40`;\n                    dispatch({ type: 'SET_USER_IMAGE', payload: fallbackImage });\n                }\n            } catch (error) {\n                // Generate fallback avatar instead of logging error\n                // This prevents console spam for a non-critical feature\n                const fallbackImage = `https://ui-avatars.com/api/?name=${encodeURIComponent(userName)}&background=6366f1&color=fff&size=40`;\n                dispatch({ type: 'SET_USER_IMAGE', payload: fallbackImage });\n            }\n        };\n        \n        // Add timeout to prevent hanging requests\n        const timeoutPromise = new Promise((_, reject) => {\n            setTimeout(() => reject(new Error('Profile image request timeout')), 5000);\n        });\n        \n        Promise.race([loadUserProfileImage(), timeoutPromise])\n            .catch(() => {\n                // Timeout fallback - use generated avatar\n                const fallbackImage = `https://ui-avatars.com/api/?name=${encodeURIComponent(userName)}&background=6366f1&color=fff&size=40`;\n                dispatch({ type: 'SET_USER_IMAGE', payload: fallbackImage });\n            });\n    }, [userName]);\n    \n    // Handle tab visibility changes for audio context\n    useEffect(() => {\n        const handleVisibilityChange = () => {\n            if (!document.hidden && (window as any).audioContext) {\n                handleAsyncError(\n                    () => resumeAudioContext((window as any).audioContext),\n                    'Failed to resume audio context on tab focus'\n                );\n            }\n        };\n        \n        document.addEventListener('visibilitychange', handleVisibilityChange);\n        return () => document.removeEventListener('visibilitychange', handleVisibilityChange);\n    }, []);\n\n    // Auto-end interview when complete\n    useEffect(() => {\n        if (state.isInterviewComplete && isInterviewActive) {\n            logger.success('Interview completed - auto-ending in 2 seconds');\n            const timeoutId = setTimeout(() => {\n                handleEndInterview();\n            }, 2000);\n            return () => clearTimeout(timeoutId);\n        }\n    }, [state.isInterviewComplete, isInterviewActive]);\n\n    // Generate feedback when interview finishes\n    useEffect(() => {\n        if (isInterviewFinished && state.messages.length > 0 && interviewId && type !== \"generate\") {\n            handleAsyncError(\n                async () => {\n                    const { success, feedbackId: id } = await createFeedback({\n                        interviewId: interviewId!,\n                        userId: userId!,\n                        transcript: state.messages,\n                        feedbackId,\n                    });\n                    \n                    if (success && id) {\n                        dispatch({ \n                            type: 'SET_FEEDBACK_GENERATED', \n                            payload: { generated: true, id } \n                        });\n                        logger.success('Feedback generated successfully', { id });\n                    }\n                },\n                'Failed to generate feedback'\n            );\n        }\n        // No cleanup needed for this effect\n    }, [isInterviewFinished, state.messages.length, interviewId, userId, type, feedbackId]);\n    \n    // Cleanup on unmount - MUST be at top level\n    useEffect(() => {\n        return () => {\n            if (audioCleanupRef.current) {\n                audioCleanupRef.current();\n            }\n            if (recordingTimeoutRef.current) {\n                clearTimeout(recordingTimeoutRef.current);\n            }\n        };\n    }, []);\n\n    // NOW we can safely do conditional logic after ALL hooks have been called\n    // Show loading state while feature flag is being fetched\n    if (flagLoading) {\n        return (\n            <div className=\"flex items-center justify-center min-h-screen\">\n                <div className=\"text-lg text-gray-600 dark:text-gray-300\">\n                    Loading interview system...\n                </div>\n            </div>\n        );\n    }\n    \n    // Azure AI Foundry voice system temporarily disabled due to build issues\n    // if (useFoundryVoice) {\n    //     console.log('üöÄ [Agent] Using Azure AI Foundry voice system');\n    //     return (\n    //         <FoundryVoiceAgent\n    //             userName={userName}\n    //             userId={userId}\n    //             interviewId={interviewId}\n    //             feedbackId={feedbackId}\n    //             type={type}\n    //             questions={questions}\n    //             resumeInfo={resumeInfo}\n    //             resumeQuestions={resumeQuestions}\n    //         />\n    //     );\n    // }\n    \n    // Fall back to legacy Speech SDK + OpenAI system\n    console.log('üìª [Agent] Using legacy Speech SDK + OpenAI system');\n\n    const handleEndInterview = async (): Promise<void> => {\n        try {\n            logger.info('Ending interview', { totalMessages: state.messages.length, questionNumber: state.questionNumber });\n            \n            dispatch(createEndInterviewAction());\n            \n            // Generate summary if possible\n            await handleAsyncError(\n                async () => {\n                    const summaryData = await endConversation();\n                    if (summaryData.summary) {\n                        logger.info('Interview summary generated', { summaryLength: summaryData.summary.length });\n                    }\n                },\n                'Failed to generate interview summary'\n            );\n            \n            // Clean up audio resources\n            if (audioCleanupRef.current) {\n                await audioCleanupRef.current();\n                audioCleanupRef.current = null;\n            }\n            \n            // Clean up global window functions\n            delete (window as any).audioContext;\n            delete (window as any).startAudioContextRecording;\n            delete (window as any).stopAudioContextRecording;\n            \n            // Clear recording timeout if active\n            if (recordingTimeoutRef.current) {\n                clearTimeout(recordingTimeoutRef.current);\n                recordingTimeoutRef.current = null;\n            }\n            \n            logger.success('Interview ended successfully');\n        } catch (error) {\n            logger.error('Failed to end interview properly', error);\n            dispatch(createEndInterviewAction()); // Force end on error\n        }\n    };\n\n    /**\n     * Process audio recording and handle transcription\n     */\n    const processAudioRecording = async (audioChunks: Float32Array[], sampleRate: number): Promise<void> => {\n        const { blob, hasValidAudio } = prepareAudioForUpload(audioChunks, sampleRate);\n        \n        if (!hasValidAudio) {\n            logger.warn('No valid audio detected, resuming waiting state');\n            dispatch({ type: 'RESET_TO_WAITING' });\n            return;\n        }\n\n        try {\n            // Convert to text\n            const transcript = await speechToText(blob);\n            \n            if (!transcript?.trim()) {\n                logger.warn('Empty transcript received');\n                dispatch({ type: 'RESET_TO_WAITING' });\n                return;\n            }\n\n            // Mark user as having spoken if first speech detected\n            if (!state.hasUserSpoken) {\n                dispatch(createUserSpokeAction());\n            }\n\n            // Process conversation with AI\n            await handleConversationTurn(transcript);\n\n        } catch (error) {\n            logger.error('Audio processing failed', error);\n            dispatch({ type: 'RESET_TO_WAITING' });\n            showErrorNotification(error instanceof Error ? error : new Error('Audio processing failed'));\n        }\n    };\n\n    /**\n     * Handle conversation turn with Azure services\n     */\n    const handleConversationTurn = async (userTranscript: string): Promise<void> => {\n        try {\n            console.log('üéØ [AGENT] Starting conversation turn with transcript:', userTranscript.substring(0, 50) + '...');\n            \n            const response = await processAndPlayResponse(\n                userTranscript,\n                () => {\n                    console.log('üéØ [AGENT] AI response started - dispatching START_SPEAKING');\n                    dispatch({ type: 'START_SPEAKING' });\n                },\n                () => {\n                    console.log('üéØ [AGENT] AI response completed - dispatching RESET_TO_WAITING');\n                    dispatch({ type: 'RESET_TO_WAITING' });\n                    \n                    // Use response data after it's available\n                    setTimeout(() => {\n                        if (!response.isComplete && !state.isInterviewComplete && (window as any).startAudioContextRecording) {\n                            logger.audio.record('Auto-starting recording after AI response');\n                            setTimeout(() => {\n                                if ((window as any).startAudioContextRecording) {\n                                    console.log('üéØ [AGENT] Auto-starting recording after AI response');\n                                    (window as any).startAudioContextRecording();\n                                }\n                            }, 500);\n                        }\n                    }, 100); // Small delay to ensure response is available\n                },\n                (error) => {\n                    console.warn('üéØ [AGENT] Audio playback had issues:', error.message);\n                    logger.warn('Audio playback had issues, continuing conversation', error);\n                    dispatch({ type: 'RESET_TO_WAITING' });\n                    \n                    // Use response data after it's available  \n                    setTimeout(() => {\n                        if (!response.isComplete && !state.isInterviewComplete && (window as any).startAudioContextRecording) {\n                            logger.audio.record('Continuing recording despite audio issues');\n                            setTimeout(() => {\n                                if ((window as any).startAudioContextRecording) {\n                                    console.log('üéØ [AGENT] Continuing recording despite audio issues');\n                                    (window as any).startAudioContextRecording();\n                                }\n                            }, 1000);\n                        }\n                    }, 100);\n                }\n            );\n\n            console.log('üéØ [AGENT] Got response:', {\n                questionNumber: response.questionNumber,\n                isComplete: response.isComplete,\n                userMessageLength: response.userMessage.content.length,\n                aiMessageLength: response.aiMessage.content.length\n            });\n\n            const { userMessage, aiMessage, questionNumber, isComplete } = response;\n\n            // Update state with messages and progress\n            dispatch({ type: 'ADD_MESSAGES', payload: [userMessage, aiMessage] });\n            \n            if (questionNumber !== undefined) {\n                dispatch({ type: 'SET_QUESTION_NUMBER', payload: questionNumber });\n            }\n            \n            if (isComplete !== undefined) {\n                dispatch({ type: 'SET_INTERVIEW_COMPLETE', payload: isComplete });\n            }\n\n        } catch (error) {\n            console.error('üéØ [AGENT] Conversation processing failed:', error);\n            logger.error('Conversation processing failed', error instanceof Error ? error : new Error('Conversation failed'));\n            dispatch({ type: 'RESET_TO_WAITING' });\n            showErrorNotification(error instanceof Error ? error : new Error('Conversation failed'));\n        }\n    };\n\n    const handleStartInterview = async (): Promise<void> => {\n        try {\n            logger.info('Starting Azure-powered voice interview', { userName, type, interviewId });\n            \n            dispatch(createStartInterviewAction());\n\n            // Setup optimized audio context\n            const { context, source, workletNode, cleanup } = await createOptimizedAudioContext();\n            \n            // Store cleanup function\n            audioCleanupRef.current = cleanup;\n            (window as any).audioContext = context;\n            \n            dispatch({ type: 'SET_AUDIO_STREAM', payload: context.state as any }); // Store reference\n\n            // Build interview context\n            const interviewContext: InterviewContext = {\n                userName,\n                questions: resumeQuestions || questions,\n                type,\n                userId,\n                interviewId,\n                feedbackId,\n                resumeInfo: resumeInfo ? {\n                    hasResume: true,\n                    candidateName: resumeInfo.personalInfo?.name || userName,\n                    summary: resumeInfo.summary,\n                    skills: resumeInfo.skills?.join(', ') || '',\n                    experience: resumeInfo.experience?.map(exp => \n                        `${exp.position} at ${exp.company} (${exp.startDate} - ${exp.endDate || 'Present'})`\n                    ).join(', ') || '',\n                    education: resumeInfo.education?.map(edu => \n                        `${edu.degree} in ${edu.field} from ${edu.institution}`\n                    ).join(', ') || '',\n                    yearsOfExperience: resumeInfo.experience?.length || 0\n                } : {\n                    hasResume: false\n                }\n            };\n\n            // Start conversation with Azure\n            console.log('üéØ [AGENT DEBUG] About to start conversation...');\n            const data = await startConversation(interviewContext);\n            console.log('üéØ [AGENT DEBUG] Received conversation data:', {\n                messageLength: data.message?.length,\n                questionNumber: data.questionNumber,\n                isComplete: data.isComplete,\n                hasAudio: data.hasAudio\n            });\n            \n            // Update state with initial AI message and progress\n            console.log('üéØ [AGENT DEBUG] Adding AI message to state...');\n            dispatch(createAddAIMessageAction(data.message));\n            \n            if (data.questionNumber !== undefined) {\n                dispatch({ type: 'SET_QUESTION_NUMBER', payload: data.questionNumber });\n            }\n            \n            if (data.isComplete !== undefined) {\n                dispatch({ type: 'SET_INTERVIEW_COMPLETE', payload: data.isComplete });\n            }\n\n            // Setup audio recording handlers with voice activity detection\n            workletNode.port.onmessage = (event) => {\n                if (event.data.type === 'audiodata' && isCurrentlyRecordingRef.current) {\n                    audioSamplesRef.current.push(new Float32Array(event.data.audioData));\n                    logger.audio.record(`Audio chunk received (${event.data.audioData.length} samples)`);\n                } else if (event.data.type === 'level') {\n                    const rms = event.data.rms;\n                    \n                    if (isCurrentlyRecordingRef.current) {\n                        if (rms > 0.005) { // Lowered threshold for better voice detection\n                            // Voice detected - reset silence timeout\n                            lastVoiceActivityRef.current = Date.now();\n                            if (silenceTimeoutRef.current) {\n                                clearTimeout(silenceTimeoutRef.current);\n                                silenceTimeoutRef.current = null;\n                            }\n                            logger.audio.record(`Voice activity: RMS ${rms.toFixed(4)}`);\n                        } else if (lastVoiceActivityRef.current > 0) {\n                            // Check if we've been silent for too long\n                            const silenceDuration = Date.now() - lastVoiceActivityRef.current;\n                            const recordingDuration = Date.now() - recordingStartTimeRef.current;\n                            \n                            // Standard processing trigger - give users time to think\n                            if (silenceDuration > SILENCE_DURATION_MS && !silenceTimeoutRef.current) {\n                                // Check if we've recorded for minimum duration\n                                if (recordingDuration >= MIN_RECORDING_DURATION_MS) {\n                                    logger.audio.record('Voice activity stopped - auto-stopping recording');\n                                    silenceTimeoutRef.current = setTimeout(() => {\n                                        if (isCurrentlyRecordingRef.current && (window as any).stopAudioContextRecording) {\n                                            logger.audio.record('Auto-stopping recording after silence');\n                                            (window as any).stopAudioContextRecording();\n                                        }\n                                    }, 100); // Small delay to ensure clean stop\n                                } else {\n                                    logger.audio.record(`Recording too short (${recordingDuration}ms), continuing...`);\n                                }\n                            }\n                        }\n                    }\n                }\n            };\n\n            const startRecording = () => {\n                if (isCurrentlyRecordingRef.current) return;\n                \n                logger.audio.record('Starting audio recording');\n                audioSamplesRef.current = [];\n                isCurrentlyRecordingRef.current = true;\n                recordingStartTimeRef.current = Date.now();\n                dispatch({ type: 'START_RECORDING' });\n\n                recordingTimeoutRef.current = setTimeout(() => {\n                    logger.warn('Recording timeout reached (8s)');\n                    stopRecording();\n                }, 30000); // Increased to 30 seconds for better user experience\n            };\n\n            const stopRecording = () => {\n                if (!isCurrentlyRecordingRef.current) return;\n                \n                logger.audio.record('Stopping audio recording');\n                isCurrentlyRecordingRef.current = false;\n                dispatch({ type: 'STOP_RECORDING' });\n                \n                if (recordingTimeoutRef.current) {\n                    clearTimeout(recordingTimeoutRef.current);\n                    recordingTimeoutRef.current = null;\n                }\n                \n                if (audioSamplesRef.current.length > 0) {\n                    processAudioRecording(audioSamplesRef.current, context.sampleRate);\n                }\n            };\n\n            // Store global functions for manual control\n            (window as any).startAudioContextRecording = startRecording;\n            (window as any).stopAudioContextRecording = stopRecording;\n\n            // Play opening message and setup auto-recording\n            await handleAsyncError(\n                async () => {\n                    if (data.hasAudio) {\n                        await playDirectAudioWithFallback(\n                            data.audioData!,\n                            data.message,\n                            () => dispatch({ type: 'START_SPEAKING' }),\n                            () => {\n                                dispatch({ type: 'RESET_TO_WAITING' });\n                                // Auto-start recording for initial greeting\n                                if (data.questionNumber === 0) {\n                                    logger.audio.record('Auto-starting recording after greeting');\n                                    startRecording();\n                                }\n                            }\n                        );\n                    } else {\n                        await playAIResponse(\n                            data.message,\n                            () => dispatch({ type: 'START_SPEAKING' }),\n                            () => {\n                                dispatch({ type: 'RESET_TO_WAITING' });\n                                // Auto-start recording after opening message (first question)\n                                if ((data.questionNumber || 0) <= 1 && !data.isComplete) {\n                                    logger.audio.record('Auto-starting recording after AI greeting');\n                                    setTimeout(() => startRecording(), 1000); // Small delay\n                                }\n                            }\n                        );\n                    }\n                },\n                'Failed to play opening message'\n            );\n            \n            logger.success('Voice interview started successfully');\n\n        } catch (error) {\n            logger.error('Failed to start interview', error);\n            dispatch({ type: 'SET_INTERVIEW_STATE', payload: InterviewState.READY });\n            showErrorNotification(error instanceof Error ? error : new Error('Failed to start interview'));\n        }\n    };\n\n\n\n    return (\n        <div data-testid={isInterviewActive ? \"interview-session-active\" : \"interview-session-inactive\"} className=\"space-y-8\">\n            <div className=\"call-view\" data-testid=\"session-id\" data-session-id={interviewId}>\n                {/* AI Interviewer Card */}\n                <div className=\"card-interviewer\">\n                    <div className=\"avatar\">\n                        <Image\n                            src=\"/ai-avatar.png\"\n                            alt=\"profile-image\"\n                            width={65}\n                            height={54}\n                            className=\"object-cover\"\n                        />\n                        {isSpeaking && <span className=\"animate-speak\" data-testid=\"ai-speaking-indicator\" />}\n                        {isProcessing && <span className=\"animate-speak bg-blue-500\" data-testid=\"ai-processing-indicator\" />}\n                        {isRecording && <span className=\"animate-speak bg-red-500\" data-testid=\"voice-recording-indicator\" />}\n                    </div>\n                    <h3 data-testid=\"current-agent\">AI Interviewer</h3>\n                </div>\n\n                {/* User Profile Card */}\n                <div className=\"card-border\">\n                    <div className=\"card-content\">\n                        <div className=\"relative w-[120px] h-[120px] rounded-full overflow-hidden\">\n                            {state.userImage ? (\n                                <Image\n                                    src={state.userImage}\n                                    alt=\"profile-image\"\n                                    fill\n                                    sizes=\"120px\"\n                                    className=\"object-cover\"\n                                    onError={(e) => {\n                                        const target = e.target as HTMLImageElement;\n                                        target.onerror = null;\n                                        target.src = \"/user-avatar.png\";\n                                    }}\n                                />\n                            ) : (\n                                <div className=\"w-full h-full flex items-center justify-center bg-gray-100 dark:bg-gray-800 rounded-full\">\n                                    <svg \n                                        className=\"w-12 h-12 text-gray-500\" \n                                        aria-hidden=\"true\" \n                                        xmlns=\"http://www.w3.org/2000/svg\" \n                                        fill=\"none\" \n                                        viewBox=\"0 0 24 24\"\n                                    >\n                                        <path \n                                            stroke=\"currentColor\" \n                                            strokeLinecap=\"round\" \n                                            strokeLinejoin=\"round\" \n                                            strokeWidth=\"2\" \n                                            d=\"M12 21a9 9 0 1 0 0-18 9 9 0 0 0 0 18Zm0 0a8.949 8.949 0 0 0 4.951-1.488A3.987 3.987 0 0 0 13 16h-2a3.987 3.987 0 0 0-3.951 3.512A8.948 8.948 0 0 0 12 21Zm3-11a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z\"\n                                        />\n                                    </svg>\n                                </div>\n                            )}\n                        </div>\n                        <h3>{userName}</h3>\n                    </div>\n                </div>\n            </div>\n\n            {state.messages.length > 0 && (\n                <div className=\"transcript-border mt-8\">\n                    <div className=\"dark-gradient rounded-2xl min-h-12 px-5 py-3 flex flex-col border-l-4 border-blue-500\">\n                        <div className=\"transcript-header mb-3\">\n                            <h4 className=\"text-sm font-medium text-gray-600 dark:text-gray-400 text-left\">Live Transcript</h4>\n                        </div>\n                        <div className=\"transcript-messages max-h-40 overflow-y-auto space-y-2\" data-testid=\"conversation-transcript\">\n                            {/* Show only the last 5 messages before the currently spoken one */}\n                            {state.messages.slice(-6, -1).concat(state.messages.slice(-1)).map((message, index, displayedMessages) => {\n                                const isLastMessage = index === displayedMessages.length - 1;\n                                const isCurrentQuestion = message.role === \"assistant\" && isLastMessage;\n                                const actualIndex = state.messages.indexOf(message); // Get actual index in full array\n                                return (\n                                    <div \n                                        key={actualIndex}\n                                        className={cn(\n                                            \"transcript-message p-2 rounded-lg\",\n                                            message.role === \"assistant\" \n                                                ? \"bg-blue-50 dark:bg-blue-900/20\" \n                                                : \"bg-gray-50 dark:bg-gray-800/50\"\n                                        )}\n                                        data-testid={isCurrentQuestion ? \"current-question\" : `message-${actualIndex}`}\n                                    >\n                                        <div className=\"flex items-start space-x-2\">\n                                            <span className={cn(\n                                                \"text-xs font-medium uppercase tracking-wide\",\n                                                message.role === \"assistant\" \n                                                    ? \"text-blue-600 dark:text-blue-400\" \n                                                    : \"text-gray-600 dark:text-gray-400\"\n                                            )}>\n                                                {message.role === \"assistant\" ? \"AI\" : \"You\"}\n                                            </span>\n                                        </div>\n                                        <p className=\"text-sm text-gray-800 dark:text-gray-200 mt-1\">\n                                            {message.content}\n                                        </p>\n                                    </div>\n                                );\n                            })}\n                            {/* Show indicator if there are more messages */}\n                            {state.messages.length > 6 && (\n                                <div className=\"text-xs text-gray-500 dark:text-gray-400 text-center py-2 italic\">\n                                    ... {state.messages.length - 6} earlier messages (stored for feedback)\n                                </div>\n                            )}\n                        </div>\n                    </div>\n                    {/* Status indicators for testing */}\n                    <div className=\"hidden\">\n                        <div data-testid=\"response-processed\" className={state.messages.length > 0 ? \"processed\" : \"pending\"} />\n                        <div data-testid=\"current-phase\">technical</div>\n                        <div data-testid=\"questions-answered-count\">{Math.floor(state.messages.length / 2)}</div>\n                    </div>\n                </div>\n            )}\n\n            {/* Simple Interview Controls */}\n            <div className=\"w-full flex justify-center gap-4 mt-8\">\n                {!isInterviewActive ? (\n                    <>\n                        <button className=\"relative btn-call\" onClick={handleStartInterview} data-testid=\"start-interview-btn\">\n                            <span className=\"relative\">\n                                Start Interview\n                            </span>\n                        </button>\n                        {shouldShowFeedback && (\n                            <button \n                                className=\"btn-secondary\" \n                                onClick={() => router.push(`/dashboard/interview/${interviewId}/feedback`)}\n                                data-testid=\"view-feedback-btn\"\n                            >\n                                View Feedback\n                            </button>\n                        )}\n                    </>\n                ) : (\n                    <>\n                        <button className=\"btn-disconnect\" onClick={handleEndInterview} data-testid=\"end-interview-btn\">\n                            End Interview\n                        </button>\n                        \n                        {/* Voice Recording Controls */}\n                        {isWaiting && (\n                            <button \n                                className=\"inline-block px-7 py-3 font-bold text-sm leading-5 text-white transition-colors duration-150 bg-green-600 hover:bg-green-700 border border-transparent rounded-full shadow-sm focus:outline-none focus:shadow-2xl active:bg-green-800 min-w-28 cursor-pointer\" \n                                onClick={() => (window as any).startAudioContextRecording && (window as any).startAudioContextRecording()}\n                                data-testid=\"voice-record-btn\"\n                                disabled={!isWaiting}\n                            >\n                                üé§ Record\n                            </button>\n                        )}\n                        {isRecording && (\n                            <button \n                                className=\"inline-block px-7 py-3 font-bold text-sm leading-5 text-white transition-colors duration-150 bg-red-600 hover:bg-red-700 border border-transparent rounded-full shadow-sm focus:outline-none focus:shadow-2xl active:bg-red-800 min-w-28 cursor-pointer\" \n                                onClick={() => (window as any).stopAudioContextRecording && (window as any).stopAudioContextRecording()}\n                                data-testid=\"voice-stop-btn\"\n                            >\n                                ‚èπÔ∏è Stop\n                            </button>\n                        )}\n                    </>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default Agent;\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/components/AuthDebug.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":3,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'User' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'firebaseLoading' is assigned a value but never used.","line":10,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":55}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from 'react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useFirebase } from '@/hooks/useFirebase';\nimport { User } from 'firebase/auth';\n\nexport function AuthDebug() {\n  const { user, loading } = useAuth();\n  const { user: firebaseUser, loading: firebaseLoading } = useFirebase();\n\n  if (process.env.NODE_ENV !== 'development') {\n    return null;\n  }\n\n  return (\n    <div className=\"bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded mb-4\">\n      <h3 className=\"font-bold\">Auth Debug Info</h3>\n      <div className=\"text-sm mt-2\">\n        <p><strong>Auth Context Loading:</strong> {loading ? 'Yes' : 'No'}</p>\n        <p><strong>User from Context:</strong> {user ? `${user.name} (${user.uid})` : 'None'}</p>\n        <p><strong>Firebase User:</strong> {firebaseUser ? `${firebaseUser.email} (${firebaseUser.uid})` : 'None'}</p>\n        <p><strong>Auth Match:</strong> {user && firebaseUser && user.uid === firebaseUser.uid ? '‚úÖ Match' : '‚ùå Mismatch'}</p>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/components/AuthDebugInfo.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[216,219],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[216,219],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'auth.user'. Either include it or remove the dependency array.","line":35,"column":7,"nodeType":"ArrayExpression","endLine":35,"endColumn":77,"suggestions":[{"desc":"Update the dependencies array to be: [auth.user, auth.loading, auth.isAuthenticated]","fix":{"range":[1042,1112],"text":"[auth.user, auth.loading, auth.isAuthenticated]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState, useMemo, useCallback } from 'react';\nimport { useAuth } from '@/contexts/AuthContext';\n\ninterface DebugInfo {\n  cookieExists: boolean;\n  cookieValue: string;\n  authState: any;\n  currentPath: string;\n}\n\n// Deep equality check for debug info to prevent unnecessary updates\nfunction deepEqual(a: DebugInfo | null, b: DebugInfo | null): boolean {\n  if (a === b) return true;\n  if (!a || !b) return false;\n  \n  return (\n    a.cookieExists === b.cookieExists &&\n    a.cookieValue === b.cookieValue &&\n    a.currentPath === b.currentPath &&\n    JSON.stringify(a.authState) === JSON.stringify(b.authState)\n  );\n}\n\nexport default function AuthDebugInfo() {\n  const [debugInfo, setDebugInfo] = useState<DebugInfo | null>(null);\n  const auth = useAuth();\n\n  // Memoize auth state to prevent unnecessary updates\n  const memoizedAuthState = useMemo(() => ({\n    user: auth.user ? { uid: auth.user.uid, email: auth.user.email } : null,\n    loading: auth.loading,\n    isAuthenticated: auth.isAuthenticated\n  }), [auth.user?.uid, auth.user?.email, auth.loading, auth.isAuthenticated]);\n\n  const updateDebugInfo = useCallback(() => {\n    // Check for session cookie\n    const cookies = document.cookie.split(';').reduce((acc, cookie) => {\n      const [name, value] = cookie.trim().split('=');\n      acc[name] = value;\n      return acc;\n    }, {} as Record<string, string>);\n\n    const newDebugInfo: DebugInfo = {\n      cookieExists: !!cookies.session,\n      cookieValue: cookies.session ? `${cookies.session.substring(0, 20)}...` : 'Not found',\n      authState: memoizedAuthState,\n      currentPath: window.location.pathname\n    };\n\n    // Only update state if the debug info actually changed\n    setDebugInfo(prevDebugInfo => {\n      if (deepEqual(prevDebugInfo, newDebugInfo)) {\n        return prevDebugInfo; // No change, prevent re-render\n      }\n      return newDebugInfo;\n    });\n  }, [memoizedAuthState]);\n\n  useEffect(() => {\n    // Update immediately when memoized auth state changes\n    updateDebugInfo();\n  }, [updateDebugInfo]); // Only depend on the memoized callback\n\n  if (!debugInfo) return null;\n\n  return (\n    <div className=\"fixed bottom-4 right-4 bg-black/80 text-white p-4 rounded-lg text-xs font-mono z-50 max-w-sm\">\n      <div className=\"font-bold mb-2\">üîç Auth Debug Info</div>\n      <div className=\"space-y-1\">\n        <div>Path: {debugInfo.currentPath}</div>\n        <div>Cookie: {debugInfo.cookieExists ? '‚úÖ' : '‚ùå'} {debugInfo.cookieValue}</div>\n        <div>Auth Loading: {debugInfo.authState.loading ? 'Yes' : 'No'}</div>\n        <div>Authenticated: {debugInfo.authState.isAuthenticated ? '‚úÖ' : '‚ùå'}</div>\n        <div>User: {debugInfo.authState.user?.email || 'None'}</div>\n      </div>\n      <button \n        onClick={() => window.location.href = '/dashboard'}\n        className=\"mt-2 px-2 py-1 bg-blue-600 rounded text-xs\"\n      >\n        Force Navigate to Dashboard\n      </button>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/components/AutoApplyDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":3,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'APPLICATION_STATUS_LABELS' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'APPLICATION_STATUS_COLORS' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Settings' is defined but never used.","line":21,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Upload' is defined but never used.","line":21,"column":54,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":60}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  AutoApplyDashboardProps,\n  JobListing,\n  JobSearchFilters,\n  UserProfile,\n  AutoApplySettings,\n  JOB_PORTALS,\n  APPLICATION_STATUS_LABELS,\n  APPLICATION_STATUS_COLORS,\n} from '@/types/auto-apply';\nimport { JobListingTable } from './JobListingTable';\nimport { JobFilters } from './JobFilters';\nimport { ResumeUpload } from './ResumeUpload';\nimport { SettingsForm } from './SettingsForm';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Bot, Search, Settings, BarChart3, Download, Upload, Play, Pause } from 'lucide-react';\n\n// Mock job data for demonstration\nconst mockJobs: JobListing[] = [\n  {\n    id: '1',\n    title: 'Senior Frontend Developer',\n    company: 'Tech Innovations Inc.',\n    location: 'San Francisco, CA',\n    salary: {\n      min: 120000,\n      max: 160000,\n      currency: 'USD',\n      period: 'yearly'\n    },\n    jobType: 'full-time',\n    workArrangement: 'hybrid',\n    description: 'Join our team to build cutting-edge web applications using React and TypeScript.',\n    requirements: ['5+ years React experience', 'TypeScript proficiency', 'Frontend architecture'],\n    responsibilities: ['Lead frontend development', 'Mentor junior developers', 'Code reviews'],\n    postedDate: '2024-01-15',\n    jobPortal: JOB_PORTALS[0], // LinkedIn\n    originalUrl: 'https://linkedin.com/jobs/123',\n    relevancyScore: 88,\n    matchedSkills: ['React', 'TypeScript', 'JavaScript'],\n    missingSkills: ['Vue.js'],\n    applicationStatus: 'ready_to_apply',\n    createdAt: '2024-01-15T08:00:00Z',\n    updatedAt: '2024-01-15T08:00:00Z'\n  },\n  {\n    id: '2',\n    title: 'Full Stack Engineer',\n    company: 'StartupXYZ',\n    location: 'Remote',\n    salary: {\n      min: 100000,\n      max: 140000,\n      currency: 'USD',\n      period: 'yearly'\n    },\n    jobType: 'full-time',\n    workArrangement: 'remote',\n    description: 'Build scalable web applications from frontend to backend.',\n    requirements: ['Node.js', 'React', 'Database design'],\n    responsibilities: ['Full-stack development', 'API design', 'Database optimization'],\n    postedDate: '2024-01-14',\n    jobPortal: JOB_PORTALS[1], // Indeed\n    originalUrl: 'https://indeed.com/jobs/456',\n    relevancyScore: 92,\n    matchedSkills: ['React', 'Node.js', 'JavaScript', 'Python'],\n    missingSkills: ['MongoDB'],\n    applicationStatus: 'applied',\n    createdAt: '2024-01-14T10:30:00Z',\n    updatedAt: '2024-01-14T10:30:00Z'\n  },\n  {\n    id: '3',\n    title: 'Software Development Engineer',\n    company: 'Big Tech Corp',\n    location: 'Seattle, WA',\n    salary: {\n      min: 150000,\n      max: 200000,\n      currency: 'USD',\n      period: 'yearly'\n    },\n    jobType: 'full-time',\n    workArrangement: 'onsite',\n    description: 'Work on large-scale distributed systems and cloud infrastructure.',\n    requirements: ['AWS', 'Microservices', 'System design'],\n    responsibilities: ['System architecture', 'Performance optimization', 'Code quality'],\n    postedDate: '2024-01-13',\n    jobPortal: JOB_PORTALS[0], // LinkedIn\n    originalUrl: 'https://linkedin.com/jobs/789',\n    relevancyScore: 75,\n    matchedSkills: ['JavaScript', 'Python', 'AWS'],\n    missingSkills: ['Kubernetes', 'Docker'],\n    applicationStatus: 'analyzing',\n    createdAt: '2024-01-13T14:15:00Z',\n    updatedAt: '2024-01-13T14:15:00Z'\n  }\n];\n\nexport const AutoApplyDashboard: React.FC<AutoApplyDashboardProps> = ({ userProfile, settings }) => {\n  const [jobListings, setJobListings] = useState<JobListing[]>(mockJobs);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [searchLoading, setSearchLoading] = useState<boolean>(false);\n  const [currentSettings, setCurrentSettings] = useState<AutoApplySettings>(settings);\n  const [activeTab, setActiveTab] = useState<string>('search');\n  const [stats, setStats] = useState({\n    totalApplications: 127,\n    pendingApplications: 23,\n    interviewRequests: 8,\n    averageRelevancyScore: 82\n  });\n\n  const handleSearch = async (filters: JobSearchFilters) => {\n    setSearchLoading(true);\n    try {\n      // TODO: Implement actual job search API call\n      console.log('Searching with filters:', filters);\n      \n      // For now, just filter mock jobs based on keywords\n      const filteredJobs = mockJobs.filter(job => \n        filters.keywords.some(keyword => \n          job.title.toLowerCase().includes(keyword.toLowerCase()) ||\n          job.description.toLowerCase().includes(keyword.toLowerCase())\n        )\n      );\n      \n      setJobListings(filteredJobs);\n    } catch (error) {\n      console.error('Search failed:', error);\n    } finally {\n      setSearchLoading(false);\n    }\n  };\n\n  const handleApply = async (jobId: string) => {\n    setLoading(true);\n    try {\n      // TODO: Implement actual job application logic\n      console.log(`Applying for job with ID: ${jobId}`);\n      \n      // Update job status to \"applying\" then \"applied\"\n      setJobListings(prev => prev.map(job => \n        job.id === jobId \n          ? { ...job, applicationStatus: 'applying' }\n          : job\n      ));\n      \n      // For now, immediately mark as applied (remove simulation delay)\n      setJobListings(prev => prev.map(job => \n        job.id === jobId \n          ? { ...job, applicationStatus: 'applied' }\n          : job\n      ));\n      \n      // Update stats\n      setStats(prev => ({ ...prev, totalApplications: prev.totalApplications + 1 }));\n      \n    } catch (error) {\n      console.error('Application failed:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAnalyze = async (jobId: string) => {\n    setLoading(true);\n    try {\n      // TODO: Implement actual job analysis with Azure OpenAI\n      console.log(`Analyzing job with ID: ${jobId}`);\n      \n      // Update job status to \"analyzing\"\n      setJobListings(prev => prev.map(job => \n        job.id === jobId \n          ? { ...job, applicationStatus: 'analyzing' }\n          : job\n      ));\n      \n      // Generate random relevancy score for demo (remove delay)\n      const relevancyScore = Math.floor(Math.random() * 40) + 60; // 60-100\n      \n      setJobListings(prev => prev.map(job => \n        job.id === jobId \n          ? { \n              ...job, \n              applicationStatus: 'ready_to_apply',\n              relevancyScore \n            }\n          : job\n      ));\n      \n    } catch (error) {\n      console.error('Analysis failed:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleView = (jobId: string) => {\n    const job = jobListings.find(j => j.id === jobId);\n    if (job) {\n      window.open(job.originalUrl, '_blank');\n    }\n  };\n\n  const handleProfileExtracted = (profile: Partial<UserProfile>) => {\n    console.log('Extracted profile:', profile);\n    // TODO: Update user profile with extracted data\n  };\n\n  const handleSettingsChange = (newSettings: AutoApplySettings) => {\n    setCurrentSettings(newSettings);\n  };\n\n  const handleSettingsSave = async () => {\n    setLoading(true);\n    try {\n      // TODO: Save settings to API\n      console.log('Saving settings:', currentSettings);\n      // Remove artificial delay - let the actual API call determine timing\n    } catch (error) {\n      console.error('Failed to save settings:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const downloadSummaryReport = async () => {\n    // TODO: Generate and download summary report\n    console.log('Generating summary report...');\n    \n    const reportData = {\n      userProfile,\n      stats,\n      jobListings,\n      settings: currentSettings,\n      generatedAt: new Date().toISOString()\n    };\n    \n    const dataStr = JSON.stringify(reportData, null, 2);\n    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);\n    \n    const exportFileDefaultName = `auto-apply-report-${new Date().toISOString().split('T')[0]}.json`;\n    \n    const linkElement = document.createElement('a');\n    linkElement.setAttribute('href', dataUri);\n    linkElement.setAttribute('download', exportFileDefaultName);\n    linkElement.click();\n  };\n\n  const toggleAutoApply = () => {\n    const newSettings = {\n      ...currentSettings,\n      isEnabled: !currentSettings.isEnabled\n    };\n    setCurrentSettings(newSettings);\n    handleSettingsSave();\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Stats Overview - Dark theme optimized */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card className=\"bg-gray-900 border-gray-700\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-white\">Total Applications</CardTitle>\n            <BarChart3 className=\"h-4 w-4 text-gray-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white\">{stats.totalApplications}</div>\n            <p className=\"text-xs text-gray-400\">\n              +12 from last week\n            </p>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"bg-gray-900 border-gray-700\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-white\">Pending</CardTitle>\n            <Bot className=\"h-4 w-4 text-gray-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white\">{stats.pendingApplications}</div>\n            <p className=\"text-xs text-gray-400\">\n              Awaiting response\n            </p>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"bg-gray-900 border-gray-700\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-white\">Interviews</CardTitle>\n            <Search className=\"h-4 w-4 text-gray-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white\">{stats.interviewRequests}</div>\n            <p className=\"text-xs text-gray-400\">\n              6.3% response rate\n            </p>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"bg-gray-900 border-gray-700\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-white\">Avg. Match Score</CardTitle>\n            <BarChart3 className=\"h-4 w-4 text-gray-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white\">{stats.averageRelevancyScore}%</div>\n            <p className=\"text-xs text-gray-400\">\n              +2% improvement\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Auto-Apply Toggle - Dark theme with enhanced contrast */}\n      <Card className=\"bg-gray-900 border-gray-700\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center gap-2 text-white mb-3\">\n                <Bot className=\"h-5 w-5 text-blue-400\" />\n                Auto-Apply Status\n              </CardTitle>\n              <CardDescription className=\"text-gray-300\">\n                AI agent will automatically search and apply to relevant jobs\n              </CardDescription>\n            </div>\n            <Button \n              onClick={toggleAutoApply}\n              variant={currentSettings.isEnabled ? 'default' : 'outline'}\n              className={currentSettings.isEnabled ? 'bg-green-600 hover:bg-green-700 text-white border-green-600' : 'border-gray-600 text-gray-300 hover:bg-gray-800 hover:text-white'}\n            >\n              {currentSettings.isEnabled ? (\n                <><Pause className=\"h-4 w-4 mr-2\" /> Active</>\n              ) : (\n                <><Play className=\"h-4 w-4 mr-2\" /> Start</>\n              )}\n            </Button>\n          </div>\n        </CardHeader>\n        {currentSettings.isEnabled && (\n          <CardContent>\n            <div className=\"text-sm text-gray-300\">\n              Next scheduled search: in 2 hours ‚Ä¢ Daily limit: {currentSettings.dailyApplicationLimit} applications\n            </div>\n          </CardContent>\n        )}\n      </Card>\n\n      {/* Main Tabs - Dark theme with accessible contrast */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4 bg-gray-800 border border-gray-600\">\n          <TabsTrigger value=\"search\" className=\"text-gray-300 data-[state=active]:text-white data-[state=active]:bg-gray-700\">Job Search</TabsTrigger>\n          <TabsTrigger value=\"profile\" className=\"text-gray-300 data-[state=active]:text-white data-[state=active]:bg-gray-700\">Profile</TabsTrigger>\n          <TabsTrigger value=\"settings\" className=\"text-gray-300 data-[state=active]:text-white data-[state=active]:bg-gray-700\">Settings</TabsTrigger>\n          <TabsTrigger value=\"analytics\" className=\"text-gray-300 data-[state=active]:text-white data-[state=active]:bg-gray-700\">Analytics</TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"search\" className=\"space-y-4\">\n          <JobFilters\n            filters={currentSettings.filters}\n            onChange={(newFilters) => {\n              const newSettings = { ...currentSettings, filters: newFilters };\n              setCurrentSettings(newSettings);\n            }}\n            onSearch={() => handleSearch(currentSettings.filters)}\n            loading={searchLoading}\n          />\n          \n          <JobListingTable\n            jobs={jobListings}\n            onApply={handleApply}\n            onAnalyze={handleAnalyze}\n            onView={handleView}\n            loading={loading}\n          />\n        </TabsContent>\n        \n        <TabsContent value=\"profile\" className=\"space-y-4\">\n          <ResumeUpload \n            onProfileExtracted={handleProfileExtracted}\n            loading={loading}\n          />\n          \n          <Card className=\"bg-gray-900 border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Current Profile Summary</CardTitle>\n              <CardDescription className=\"text-gray-300\">Your extracted profile information</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <h4 className=\"font-semibold mb-2 text-white\">Contact Info</h4>\n                  <p className=\"text-sm text-gray-300\">{userProfile.name}</p>\n                  <p className=\"text-sm text-gray-300\">{userProfile.email}</p>\n                  <p className=\"text-sm text-gray-300\">{userProfile.location}</p>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold mb-2 text-white\">Skills</h4>\n                  <div className=\"flex flex-wrap gap-1\">\n                    {userProfile.skills.slice(0, 8).map((skill, index) => (\n                      <span key={index} className=\"px-2 py-1 bg-blue-600 text-white text-xs rounded border border-blue-500\">\n                        {skill}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n        \n        <TabsContent value=\"settings\" className=\"space-y-4\">\n          <SettingsForm\n            settings={currentSettings}\n            onChange={handleSettingsChange}\n            onSave={handleSettingsSave}\n            loading={loading}\n          />\n        </TabsContent>\n        \n        <TabsContent value=\"analytics\" className=\"space-y-4\">\n          <Card className=\"bg-gray-900 border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Application Analytics</CardTitle>\n              <CardDescription className=\"text-gray-300\">Track your job search performance</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <h4 className=\"font-semibold mb-2 text-white\">Applications by Status</h4>\n                    <div className=\"space-y-2\">\n                      {Object.entries({\n                        applied: 87,\n                        pending: 23,\n                        interview: 8,\n                        rejected: 9\n                      }).map(([status, count]) => (\n                        <div key={status} className=\"flex justify-between items-center border-b border-gray-700 pb-1\">\n                          <span className=\"text-sm capitalize text-gray-300\">{status}</span>\n                          <span className=\"font-semibold text-white\">{count}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold mb-2 text-white\">Top Job Portals</h4>\n                    <div className=\"space-y-2\">\n                      {[{ name: 'LinkedIn', count: 45 }, { name: 'Indeed', count: 32 }, { name: 'Glassdoor', count: 28 }].map((portal) => (\n                        <div key={portal.name} className=\"flex justify-between items-center border-b border-gray-700 pb-1\">\n                          <span className=\"text-sm text-gray-300\">{portal.name}</span>\n                          <span className=\"font-semibold text-white\">{portal.count}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n                \n                <Button onClick={downloadSummaryReport} className=\"w-full bg-blue-600 hover:bg-blue-700 text-white border-blue-600\">\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Download Detailed Report\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/components/FirebaseClientInit.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":42,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1313,1316],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1313,1316],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1430,1433],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1430,1433],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":48,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1554,1557],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1554,1557],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect } from 'react';\n\n/**\n * Firebase Client Initialization Component\n * \n * This component ensures Firebase client environment variables are properly\n * set from Azure Key Vault before Firebase services are used\n */\nexport default function FirebaseClientInit() {\n  useEffect(() => {\n    const initializeFirebaseConfig = async () => {\n      try {\n        // Check if Firebase config is already available\n        const hasFirebaseConfig = !!(\n          process.env.NEXT_PUBLIC_FIREBASE_CLIENT_KEY ||\n          process.env.NEXT_PUBLIC_FIREBASE_API_KEY ||\n          process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID\n        );\n\n        if (hasFirebaseConfig) {\n          console.log('üî• Firebase client config already available');\n          return;\n        }\n\n        console.log('üî• Firebase client config not found, checking Azure Key Vault...');\n        \n        // Try to fetch from server-side Azure configuration\n        const response = await fetch('/api/config/firebase', {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n\n        if (response.ok) {\n          const config = await response.json();\n          \n          // Set client-side environment variables\n          if (config.apiKey) {\n            (window as any).__NEXT_FIREBASE_API_KEY__ = config.apiKey;\n          }\n          if (config.projectId) {\n            (window as any).__NEXT_FIREBASE_PROJECT_ID__ = config.projectId;\n          }\n          if (config.authDomain) {\n            (window as any).__NEXT_FIREBASE_AUTH_DOMAIN__ = config.authDomain;\n          }\n          \n          console.log('üî• Firebase client config loaded from server:', {\n            hasApiKey: !!config.apiKey,\n            projectId: config.projectId,\n            authDomain: config.authDomain\n          });\n        } else {\n          console.warn('üî• Failed to fetch Firebase config from server, using fallback');\n        }\n      } catch (error) {\n        console.error('üî• Error initializing Firebase client config:', error);\n      }\n    };\n\n    // Initialize Firebase config on client side only\n    if (typeof window !== 'undefined') {\n      initializeFirebaseConfig();\n    }\n  }, []);\n\n  // This component doesn't render anything\n  return null;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/components/FoundryVoiceAgent.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1112,1115],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1112,1115],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1133,1136],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1133,1136],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1153,1156],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1153,1156],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1179,1182],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1179,1182],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":48,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1200,1203],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1200,1203],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'router' is assigned a value but never used.","line":73,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handoffToAgent' is assigned a value but never used.","line":145,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":145,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":183,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":183,"endColumn":21},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'handleEndInterview' function makes the dependencies of useEffect Hook (at line 254) change on every render. To fix this, wrap the definition of 'handleEndInterview' in its own useCallback() Hook.","line":228,"column":9,"nodeType":"VariableDeclarator","endLine":243,"endColumn":4,"suggestions":[{"desc":"Wrap the definition of 'handleEndInterview' in its own useCallback() Hook.","fix":{"range":[6597,7156],"text":"useCallback(async (): Promise<void> => {\n    try {\n      logger.info('Ending Azure AI Foundry interview', { \n        totalMessages: state.messages.length, \n        questionNumber: state.questionNumber \n      });\n\n      // Stop the voice session via the bridge hook\n      await stopVoiceSession();\n\n      logger.success('Azure AI Foundry interview ended successfully');\n    } catch (error) {\n      logger.error('Failed to end Foundry interview properly', error);\n      showErrorNotification(error instanceof Error ? error : new Error('Failed to end interview'));\n    }\n  })"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'dispatch' and 'state.messages'. Either include them or remove the dependency array.","line":279,"column":6,"nodeType":"ArrayExpression","endLine":279,"endColumn":89,"suggestions":[{"desc":"Update the dependencies array to be: [isInterviewFinished, state.messages.length, interviewId, userId, type, feedbackId, state.messages, dispatch]","fix":{"range":[8328,8411],"text":"[isInterviewFinished, state.messages.length, interviewId, userId, type, feedbackId, state.messages, dispatch]"}}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * FoundryVoiceAgent Component\n * \n * Azure AI Foundry-powered voice interview agent that replaces the legacy\n * Speech SDK + OpenAI pipeline with unified real-time voice capabilities.\n */\n\n\"use client\";\n\nimport Image from \"next/image\";\nimport { useEffect } from \"react\";\nimport { useRouter } from \"next/navigation\";\n\nimport { cn } from \"@/lib/utils\";\nimport { createFeedback } from \"@/lib/actions/general.action\";\nimport { logger } from \"@/lib/utils/logger\";\nimport { handleAsyncError, showErrorNotification } from \"@/lib/utils/error-utils\";\n\n// Import new voice agent bridge hook\nimport { \n  useVoiceAgentBridge, \n  type UseVoiceAgentBridgeConfig \n} from \"@/lib/azure-ai-foundry/voice/useVoiceAgentBridge\";\n\n// Import voice types\nimport type { \n  TranscriptEntry,\n  SentimentAnalysis,\n  VoiceSettings\n} from \"@/lib/azure-ai-foundry/voice/types\";\n\ninterface ExtractedResumeData {\n  personalInfo?: {\n    name?: string;\n    email?: string;\n    phone?: string;\n    address?: string;\n    linkedin?: string;\n    github?: string;\n    website?: string;\n  };\n  summary?: string;\n  skills?: string[];\n  experience?: any[];\n  education?: any[];\n  projects?: any[];\n  certifications?: any[];\n  languages?: any[];\n}\n\ninterface FoundryAgentProps {\n  userName: string;\n  userId: string;\n  interviewId?: string;\n  feedbackId?: string;\n  type: string;\n  questions?: string[];\n  profileImage?: string;\n  resumeInfo?: ExtractedResumeData;\n  resumeQuestions?: string[];\n}\n\nconst FoundryVoiceAgent = ({\n  userName,\n  userId,\n  interviewId,\n  feedbackId,\n  type,\n  questions,\n  resumeInfo,\n  resumeQuestions,\n}: FoundryAgentProps) => {\n  const router = useRouter();\n\n  // Voice configuration for Azure AI Foundry\n  const voiceSettings: Partial<VoiceSettings> = {\n    voice: 'en-US-AriaNeural',\n    language: 'en-US',\n    personality: 'professional',\n    speakingPace: 'normal',\n    responseStyle: 'conversational',\n    inputSampleRate: 16000,\n    outputSampleRate: 24000\n  };\n\n  // Hook configuration\n  const bridgeConfig: UseVoiceAgentBridgeConfig = {\n    userName,\n    userId,\n    interviewId,\n    feedbackId,\n    type,\n    questions,\n    resumeInfo,\n    resumeQuestions,\n    voiceSettings,\n    bridgeConfig: {\n      sessionTimeout: 1800000, // 30 minutes\n      maxRetries: 3,\n      errorRecoveryMode: 'graceful',\n      sentimentMonitoring: true,\n      recordingEnabled: true,\n      transcriptStorage: 'both'\n    },\n    // Event callbacks\n    onTranscriptReceived: (entry: TranscriptEntry) => {\n      logger.info('üìù [FoundryVoiceAgent] Transcript received', {\n        speaker: entry.speaker,\n        textLength: entry.text.length,\n        confidence: entry.confidence\n      });\n    },\n    onSentimentAnalysis: (sentiment: SentimentAnalysis) => {\n      if (sentiment.stressIndicators.hasHighStressWords) {\n        logger.warn('üòü [FoundryVoiceAgent] User stress detected', {\n          level: sentiment.label,\n          score: sentiment.score,\n          stressWords: sentiment.stressIndicators.stressWords\n        });\n      }\n    },\n    onAgentResponse: (response) => {\n      logger.info('ü§ñ [FoundryVoiceAgent] Agent response', {\n        agent: response.agent,\n        textLength: response.text.length,\n        hasAudio: !!response.audioData\n      });\n    },\n    onSessionError: (error: Error) => {\n      logger.error('‚ùå [FoundryVoiceAgent] Session error', error);\n      showErrorNotification(error);\n    }\n  };\n\n  // Use the voice agent bridge hook\n  const {\n    state,\n    dispatch,\n    voiceBridge,\n    startVoiceSession,\n    stopVoiceSession,\n    retryConnection,\n    startRecording,\n    stopRecording,\n    handoffToAgent,\n    sendResponse,\n    isRecording,\n    isProcessing,\n    isSpeaking,\n    isWaiting,\n    isInterviewActive,\n    isInterviewFinished,\n    shouldShowFeedback,\n    isVoiceConnected,\n    canStartRecording,\n    sessionMetrics\n  } = useVoiceAgentBridge(bridgeConfig);\n\n  // Load user profile image (reusing existing logic)\n  useEffect(() => {\n    const loadUserProfileImage = async () => {\n      try {\n        const response = await fetch(\"/api/auth/user\");\n        if (response.ok) {\n          const userData = await response.json();\n          const user = userData?.user;\n\n          if (user) {\n            const profileImage =\n              user.photoURL ||\n              user.image ||\n              user.avatar ||\n              `https://ui-avatars.com/api/?name=${encodeURIComponent(user.displayName || user.name || userName)}&background=6366f1&color=fff&size=40`;\n\n            if (profileImage) {\n              dispatch({ type: 'SET_USER_IMAGE', payload: profileImage });\n            }\n          }\n        } else {\n          const fallbackImage = `https://ui-avatars.com/api/?name=${encodeURIComponent(userName)}&background=6366f1&color=fff&size=40`;\n          dispatch({ type: 'SET_USER_IMAGE', payload: fallbackImage });\n        }\n      } catch (error) {\n        const fallbackImage = `https://ui-avatars.com/api/?name=${encodeURIComponent(userName)}&background=6366f1&color=fff&size=40`;\n        dispatch({ type: 'SET_USER_IMAGE', payload: fallbackImage });\n      }\n    };\n\n    const timeoutPromise = new Promise((_, reject) => {\n      setTimeout(() => reject(new Error('Profile image request timeout')), 5000);\n    });\n\n    Promise.race([loadUserProfileImage(), timeoutPromise]).catch(() => {\n      const fallbackImage = `https://ui-avatars.com/api/?name=${encodeURIComponent(userName)}&background=6366f1&color=fff&size=40`;\n      dispatch({ type: 'SET_USER_IMAGE', payload: fallbackImage });\n    });\n  }, [userName, dispatch]);\n\n  // Voice session handlers and controls are now managed by the hook\n  // The hook handles all voice session lifecycle, transcript processing, and agent communication\n\n  /**\n   * Start the voice interview with Azure AI Foundry\n   */\n  const handleStartInterview = async (): Promise<void> => {\n    try {\n      logger.info('Starting Azure AI Foundry voice interview', { userName, type, interviewId });\n\n      // Start the voice session via the bridge hook\n      await startVoiceSession();\n\n      // Send initial greeting\n      await sendResponse(\n        `Hello ${userName}! I'm excited to conduct your interview today. Please introduce yourself and tell me a bit about your background.`\n      );\n\n      logger.success('Azure AI Foundry voice interview started successfully');\n\n    } catch (error) {\n      logger.error('Failed to start Foundry voice interview', error);\n      showErrorNotification(error instanceof Error ? error : new Error('Failed to start interview'));\n    }\n  };\n\n  /**\n   * End the voice interview\n   */\n  const handleEndInterview = async (): Promise<void> => {\n    try {\n      logger.info('Ending Azure AI Foundry interview', { \n        totalMessages: state.messages.length, \n        questionNumber: state.questionNumber \n      });\n\n      // Stop the voice session via the bridge hook\n      await stopVoiceSession();\n\n      logger.success('Azure AI Foundry interview ended successfully');\n    } catch (error) {\n      logger.error('Failed to end Foundry interview properly', error);\n      showErrorNotification(error instanceof Error ? error : new Error('Failed to end interview'));\n    }\n  };\n\n  // Auto-end interview when complete\n  useEffect(() => {\n    if (state.isInterviewComplete && isInterviewActive) {\n      logger.success('Interview completed - auto-ending in 2 seconds');\n      const timeoutId = setTimeout(() => {\n        handleEndInterview();\n      }, 2000);\n      return () => clearTimeout(timeoutId);\n    }\n  }, [state.isInterviewComplete, isInterviewActive, handleEndInterview]);\n\n  // Generate feedback when interview finishes (reusing existing logic)\n  useEffect(() => {\n    if (isInterviewFinished && state.messages.length > 0 && interviewId && type !== \"generate\") {\n      handleAsyncError(\n        async () => {\n          const { success, feedbackId: id } = await createFeedback({\n            interviewId: interviewId!,\n            userId: userId!,\n            transcript: state.messages,\n            feedbackId,\n          });\n\n          if (success && id) {\n            dispatch({\n              type: 'SET_FEEDBACK_GENERATED',\n              payload: { generated: true, id }\n            });\n            logger.success('Feedback generated successfully', { id });\n          }\n        },\n        'Failed to generate feedback'\n      );\n    }\n  }, [isInterviewFinished, state.messages.length, interviewId, userId, type, feedbackId]);\n\n  // Manual recording controls (bridge hook handles cleanup automatically)\n  const handleStartRecording = () => {\n    startRecording();\n  };\n\n  const handleStopRecording = () => {\n    stopRecording();\n  };\n\n  return (\n    <div className={cn(\n      \"flex flex-col items-center justify-center min-h-screen p-8 bg-gradient-to-br from-indigo-50 to-blue-100\",\n      \"dark:from-slate-900 dark:to-indigo-950\"\n    )}>\n      {/* Connection Status */}\n      {voiceBridge.lastError && (\n        <div className=\"mb-6 p-4 bg-red-50 border border-red-200 rounded-lg\" data-testid=\"connection-error\">\n          <p className=\"text-red-700 text-sm\">\n            ‚ö†Ô∏è Connection Error: {voiceBridge.lastError}\n          </p>\n          {voiceBridge.retryCount > 0 && (\n            <p className=\"text-red-600 text-xs mt-1\">\n              Retry attempts: {voiceBridge.retryCount}/3\n            </p>\n          )}\n          <button\n            onClick={retryConnection}\n            className=\"mt-2 px-3 py-1 text-xs bg-red-600 text-white rounded hover:bg-red-700\"\n            disabled={voiceBridge.isInitializing}\n            data-testid=\"retry-connection-btn\"\n          >\n            {voiceBridge.isInitializing ? 'Retrying...' : 'Retry Connection'}\n          </button>\n        </div>\n      )}\n      \n      {/* Connection Recovered Indicator */}\n      {!voiceBridge.lastError && voiceBridge.retryCount > 0 && (\n        <div className=\"mb-4 text-center\" data-testid=\"connection-restored\">\n          <span className=\"text-green-600 text-sm\">‚úÖ Connection Restored</span>\n        </div>\n      )}\n\n      {/* Voice Session Status */}\n      <div className=\"mb-6 text-center\">\n        <div className=\"text-sm text-gray-600 dark:text-gray-300\">\n          Session: <span className=\"font-medium capitalize\" data-testid=\"connection-state\">{voiceBridge.connectionState}</span>\n        </div>\n        {isVoiceConnected && (\n          <div className=\"text-xs text-green-600 dark:text-green-400 mt-1\" data-testid=\"voice-ready-indicator\">\n            üé§ Azure AI Foundry Connected\n            {voiceBridge.sessionId && (\n              <span className=\"ml-2 font-mono\" data-testid=\"session-id\" data-session-id={voiceBridge.sessionId}>#{voiceBridge.sessionId.slice(-8)}</span>\n            )}\n          </div>\n        )}\n        {sessionMetrics && (\n          <div className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\" data-testid=\"session-metrics\">\n            Latency: {sessionMetrics.connectionLatency}ms | \n            Accuracy: {(sessionMetrics.transcriptionAccuracy * 100).toFixed(1)}%\n          </div>\n        )}\n      </div>\n      \n      {/* Voice Activity Indicator */}\n      {isRecording && (\n        <div className=\"mb-4 text-center\" data-testid=\"voice-active-indicator\">\n          <span className=\"text-red-500 animate-pulse\">üé§ Recording Active</span>\n        </div>\n      )}\n\n      {/* Agent Avatar */}\n      <div className=\"relative mb-8\">\n        <div className={cn(\n          \"w-32 h-32 rounded-full border-4 transition-all duration-300\",\n          isSpeaking ? \"border-blue-500 shadow-lg animate-pulse\" : \"border-gray-300\",\n          isRecording ? \"border-red-500 shadow-red-200 shadow-lg\" : \"\",\n          isProcessing ? \"border-yellow-500 shadow-yellow-200 shadow-lg animate-spin\" : \"\"\n        )}>\n          <Image\n            src=\"/ai-agent-avatar.png\"\n            alt=\"AI Interview Agent\"\n            width={120}\n            height={120}\n            className=\"rounded-full object-cover w-full h-full\"\n            priority\n          />\n        </div>\n\n        {/* Status indicator */}\n        <div className={cn(\n          \"absolute bottom-2 right-2 w-6 h-6 rounded-full border-2 border-white\",\n          isVoiceConnected ? \"bg-green-500\" : \"bg-gray-400\"\n        )} />\n      </div>\n\n      {/* User Avatar */}\n      {state.userImage && (\n        <div className=\"mb-8\">\n          <div className={cn(\n            \"w-16 h-16 rounded-full border-2 transition-all\",\n            isRecording ? \"border-red-400 shadow-lg\" : \"border-gray-300\"\n          )}>\n            <Image\n              src={state.userImage}\n              alt={userName}\n              width={64}\n              height={64}\n              className=\"rounded-full object-cover w-full h-full\"\n            />\n          </div>\n        </div>\n      )}\n\n      {/* Interview Controls */}\n      <div className=\"flex flex-col items-center space-y-4 mb-8\" data-testid={isInterviewActive ? \"interview-session-active\" : \"interview-session-inactive\"}>\n        {!isInterviewActive ? (\n          <button\n            onClick={handleStartInterview}\n            disabled={voiceBridge.isInitializing}\n            className={cn(\n              \"px-8 py-3 rounded-lg font-medium transition-all\",\n              \"bg-blue-600 hover:bg-blue-700 text-white\",\n              \"disabled:opacity-50 disabled:cursor-not-allowed\",\n              voiceBridge.isInitializing && \"animate-pulse\"\n            )}\n            data-testid=\"start-interview-btn\"\n          >\n            {voiceBridge.isInitializing ? \"Initializing...\" : \"Start Interview\"}\n          </button>\n        ) : (\n          <div className=\"flex space-x-4\">\n            <button\n              onClick={handleStartRecording}\n              disabled={!canStartRecording}\n              className=\"px-6 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium disabled:opacity-50\"\n              data-testid=\"voice-record-btn\"\n            >\n              üé§ Start Recording\n            </button>\n            <button\n              onClick={handleStopRecording}\n              disabled={!isRecording || !isVoiceConnected}\n              className=\"px-6 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg font-medium disabled:opacity-50\"\n              data-testid=\"voice-stop-btn\"\n            >\n              ‚èπÔ∏è Stop Recording\n            </button>\n            <button\n              onClick={handleEndInterview}\n              className=\"px-6 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg font-medium\"\n              data-testid=\"end-interview-btn\"\n            >\n              End Interview\n            </button>\n          </div>\n        )}\n      </div>\n\n      {/* Status Display */}\n      <div className=\"mt-8 text-center\">\n        <div className=\"text-lg font-medium text-gray-800 dark:text-gray-200\" data-testid=\"interview-status\">\n          {isRecording && \"üé§ Listening...\"}\n          {isProcessing && \"ü§î Processing...\"}\n          {isSpeaking && \"üó£Ô∏è Speaking...\"}\n          {isWaiting && \"‚è≥ Ready for your response...\"}\n          {isInterviewFinished && shouldShowFeedback && \"‚úÖ Interview completed!\"}\n        </div>\n\n        {state.questionNumber !== undefined && (\n          <div className=\"mt-2 text-sm text-gray-600 dark:text-gray-400\" data-testid=\"question-progress\">\n            Question {state.questionNumber} of {(resumeQuestions || questions)?.length || \"?\"}\n          </div>\n        )}\n        \n        {/* Hidden status indicators for testing */}\n        <div className=\"hidden\">\n          <div data-testid=\"current-agent\">AI Foundry Agent</div>\n          <div data-testid=\"current-phase\">technical</div>\n          <div data-testid=\"response-processed\" className={state.messages.length > 0 ? \"processed\" : \"pending\"} />\n          <div data-testid=\"questions-answered-count\">{state.questionNumber || 0}</div>\n          {voiceBridge.isInitializing && <div data-testid=\"agent-handoff-pending\" />}\n          {!voiceBridge.isInitializing && isVoiceConnected && <div data-testid=\"agent-handoff-complete\" />}\n          {voiceBridge.lastError && voiceBridge.retryCount > 0 && <div data-testid=\"backup-agent-active\" />}\n          {!voiceBridge.lastError && voiceBridge.retryCount === 0 && <div data-testid=\"system-recovered\" />}\n        </div>\n      </div>\n\n      {/* Messages Display */}\n      {state.messages.length > 0 && (\n        <div className=\"mt-12 w-full max-w-2xl\">\n          <h3 className=\"text-lg font-medium mb-4 text-gray-800 dark:text-gray-200\">\n            Live Transcript\n          </h3>\n          <div className=\"space-y-3 max-h-60 overflow-y-auto\" data-testid=\"conversation-transcript\">\n            {/* Show only the last 5 messages before the currently spoken one */}\n            {state.messages.slice(-6, -1).concat(state.messages.slice(-1)).map((message, index, displayedMessages) => {\n              const isLastMessage = index === displayedMessages.length - 1;\n              const isCurrentQuestion = message.role !== 'user' && isLastMessage;\n              const actualIndex = state.messages.indexOf(message); // Get actual index in full array\n              return (\n                <div\n                  key={actualIndex}\n                  className={cn(\n                    \"p-3 rounded-lg\",\n                    message.role === 'user'\n                      ? \"bg-blue-100 dark:bg-blue-900 ml-8\"\n                      : \"bg-gray-100 dark:bg-gray-800 mr-8\"\n                  )}\n                  data-testid={isCurrentQuestion ? \"current-question\" : `message-${actualIndex}`}\n                >\n                  <div className=\"text-xs text-gray-500 mb-1\">\n                    {message.role === 'user' ? 'üë§ You' : 'ü§ñ AI'}\n                  </div>\n                  <div className=\"text-sm\">{message.content}</div>\n                </div>\n              );\n            })}\n            {/* Show indicator if there are more messages */}\n            {state.messages.length > 6 && (\n              <div className=\"text-xs text-gray-500 dark:text-gray-400 text-center py-2 italic\">\n                ... {state.messages.length - 6} earlier messages (stored for feedback)\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Debug Info (development only) */}\n      {process.env.NODE_ENV === 'development' && (\n        <div className=\"mt-8 p-4 bg-gray-100 dark:bg-gray-800 rounded-lg text-xs font-mono\">\n          <div>Voice State: {voiceBridge.connectionState}</div>\n          <div>Agent State: {state.interviewState}</div>\n          <div>Messages: {state.messages.length}</div>\n          <div>Question: {state.questionNumber}</div>\n          <div>Session ID: {voiceBridge.sessionId || 'None'}</div>\n          <div>Voice Connected: {isVoiceConnected ? 'Yes' : 'No'}</div>\n          <div>Can Record: {canStartRecording ? 'Yes' : 'No'}</div>\n          {sessionMetrics && (\n            <div>Metrics: {JSON.stringify(sessionMetrics, null, 2)}</div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FoundryVoiceAgent;\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/components/GoogleAuthButton.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":6,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'RedirectGuard' is defined but never used.","line":8,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'authSuccess' is assigned a value but never used.","line":17,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setAuthSuccess' is assigned a value but never used.","line":17,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":159,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6112,6115],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6112,6115],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { authenticateWithGoogle, validateFirebaseIdToken } from \"@/lib/firebase/auth.js\";\nimport { useRouter } from \"next/navigation\";\nimport { toast } from \"sonner\";\nimport { useState, useEffect } from \"react\";\nimport { Button } from \"./ui/button\";\nimport RedirectGuard from \"@/lib/utils/redirect-guard\";\n\ninterface GoogleAuthButtonProps {\n  mode: 'signin' | 'signup';\n}\n\nexport default function GoogleAuthButton({ mode }: GoogleAuthButtonProps) {\n  const router = useRouter();\n  const [isLoading, setIsLoading] = useState(false);\n  const [authSuccess, setAuthSuccess] = useState(false);\n\n  // Note: Redirect is now handled by middleware after successful authentication\n  // The middleware will detect the session cookie and redirect authenticated users from /sign-in to /dashboard\n\n  const handleGoogleAuth = async () => {\n    if (isLoading) return; // Prevent multiple clicks\n    setIsLoading(true);\n    console.log(`Starting Google ${mode === 'signup' ? 'Sign Up' : 'Sign In'}...`);\n    \n    // Use the Firebase auth helper for better error handling\n    \n    try {\n      console.log('üîê Starting Google authentication using Firebase helper...');\n      const { user, idToken } = await authenticateWithGoogle();\n      \n      console.log('üîê Firebase authentication successful:', {\n        uid: user.uid,\n        email: user.email,\n        displayName: user.displayName,\n        emailVerified: user.emailVerified\n      });\n      \n      // Validate the Firebase ID token\n      if (!validateFirebaseIdToken(idToken)) {\n        throw new Error('Invalid Firebase ID token received');\n      }\n      \n      console.log('üîê Firebase ID token validated successfully');\n      console.log(`üîê Attempting ${mode} with Firebase ID token...`);\n      \n      if (!user.email) {\n        const error = new Error(\"No email provided by Google\");\n        console.error(error);\n        throw error;\n      }\n      \n      // Determine endpoint based on mode\n      const endpoint = mode === 'signup' ? '/api/auth/signup' : '/api/auth/signin';\n      \n      try {\n        const authResponse = await fetch(endpoint, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            idToken,\n            name: user.displayName || user.email?.split('@')[0] || 'User',\n            email: user.email,\n          }),\n        });\n\n        console.log(`üîê ${mode} response status:`, authResponse.status);\n        \n        if (!authResponse.ok) {\n          const errorText = await authResponse.text();\n          console.error(`üîê ${mode} failed with status ${authResponse.status}:`, errorText);\n        }\n        \n        if (authResponse.ok) {\n          const responseData = await authResponse.json();\n          console.log(`üöÄ GoogleAuthButton: ${mode} API call successful!`, {\n            status: authResponse.status,\n            hasToken: !!responseData.token,\n            hasUser: !!responseData.user,\n            responseKeys: Object.keys(responseData)\n          });\n          \n          // Store token in localStorage if provided\n          if (responseData.token) {\n            localStorage.setItem('auth_token', responseData.token);\n            console.log('üöÄ Token stored in localStorage');\n          }\n          \n          console.log('üöÄ About to show success toast and trigger redirect...');\n          toast.success(mode === 'signup' ? 'Account created successfully!' : 'Signed in successfully!');\n          \n          // Authentication successful! Let the middleware handle the redirect\n          console.log('üöÄ Authentication successful! Cookie set, page will refresh to trigger middleware redirect...');\n          \n          // Just refresh the current page - the middleware will see the session cookie \n          // and redirect authenticated users from /sign-in to /dashboard\n          setTimeout(() => {\n            console.log('üöÄ Refreshing page to allow middleware to handle redirect...');\n            window.location.reload();\n          }, 500);\n          \n          console.log('üöÄ GoogleAuthButton: Returning from successful auth handler');\n          return;\n        }\n\n        // Handle specific error cases\n        const errorData = await authResponse.json().catch(() => ({}));\n        \n        if (mode === 'signup' && authResponse.status === 409) {\n          // User already exists, try signing in instead\n          console.log('User already exists, attempting sign in...');\n          \n          const signInResponse = await fetch('/api/auth/signin', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ idToken }),\n          });\n\n          if (signInResponse.ok) {\n            const signInData = await signInResponse.json();\n            if (signInData.token) {\n              localStorage.setItem('auth_token', signInData.token);\n            }\n            \n            console.log('GoogleAuthButton: Sign in after signup conflict successful');\n            toast.success('Welcome back! Signed in successfully!');\n            \n            // Let middleware handle redirect after successful fallback sign-in\n            setTimeout(() => {\n              console.log('üöÄ Refreshing page to allow middleware redirect after signup conflict resolution...');\n              window.location.reload();\n            }, 500);\n            return;\n          }\n        }\n        \n        if (mode === 'signin' && authResponse.status === 401) {\n          // For sign-in, if user doesn't exist, suggest sign-up\n          console.log('User not found, suggesting sign up...');\n          toast.error('Account not found. Please sign up first or try with a different Google account.');\n          return;\n        }\n        \n        // Generic error handling\n        const error = new Error(`Failed to ${mode}: ${errorData.error || 'Unknown error'}`);\n        console.error(error);\n        throw error;\n        \n      } catch (error) {\n        console.error(`${mode} error:`, error);\n        throw error;\n      }\n      \n    } catch (error: any) {\n      console.error(`Google ${mode} Error:`, error);\n      \n      // Handle specific Firebase Auth errors\n      if (error.code === 'auth/account-exists-with-different-credential') {\n        toast.error(\n          'An account already exists with this email but different sign-in method. Please try signing in with email/password instead.',\n          {\n            duration: 8000,\n            action: {\n              label: 'Sign In',\n              onClick: () => router.push('/sign-in')\n            }\n          }\n        );\n      } else if (error.code === 'auth/popup-closed-by-user') {\n        toast.error('Sign-in was cancelled. Please try again.');\n      } else if (error.code === 'auth/popup-blocked') {\n        toast.error('Pop-up was blocked by your browser. Please allow pop-ups and try again.');\n      } else if (error.code === 'auth/network-request-failed') {\n        toast.error('Network error. Please check your connection and try again.');\n      } else {\n        toast.error(`Failed to ${mode === 'signup' ? 'sign up' : 'sign in'} with Google`);\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const buttonText = 'Google';\n  const loadingText = mode === 'signup' ? 'Creating account...' : 'Signing in...';\n\n  return (\n    <Button \n      variant=\"outline\" \n      type=\"button\" \n      className=\"w-full flex items-center justify-center gap-3 !bg-dark-200 hover:!bg-dark-200/80 !text-light-100 !border-white/20 hover:!border-white/30 !rounded-full !min-h-12\"\n      onClick={handleGoogleAuth}\n      disabled={isLoading}\n    >\n      {isLoading ? (\n        <>\n          <div className=\"animate-spin rounded-full h-5 w-5 border-t-2 border-b-2 border-gray-400\"></div>\n          <span>{loadingText}</span>\n        </>\n      ) : (\n        <>\n          <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\" fill=\"#4285F4\"/>\n            <path d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.28-1.93-6.14-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\" fill=\"#34A853\"/>\n            <path d=\"M5.86 14.09c-.26-.77-.41-1.6-.41-2.45 0-.85.15-1.68.41-2.45V6.35H2.18C1.42 7.8 1 9.39 1 11s.42 3.2 1.18 4.65l3.68-2.84.01.01z\" fill=\"#FBBC05\"/>\n            <path d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 6.35l3.68 2.84c.86-2.6 3.28-4.53 6.14-4.53z\" fill=\"#EA4335\"/>\n            <path d=\"M1 1h22v22H1z\" fill=\"none\"/>\n          </svg>\n          <span>{buttonText}</span>\n        </>\n      )}\n    </Button>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/components/GoogleSignInButton.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'router' is assigned a value but never used.","line":12,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { auth, googleProvider } from \"@/firebase/client\";\nimport { signInWithPopup } from \"firebase/auth\";\nimport { useRouter } from \"next/navigation\";\nimport { toast } from \"sonner\";\nimport { useState, useEffect } from \"react\";\nimport { Button } from \"./ui/button\";\nimport RedirectGuard from \"@/lib/utils/redirect-guard\";\n\nexport default function GoogleSignInButton() {\n  const router = useRouter();\n  const [isLoading, setIsLoading] = useState(false);\n  const [signInSuccess, setSignInSuccess] = useState(false);\n\n  // Handle redirect on successful sign-in\n  useEffect(() => {\n    if (signInSuccess) {\n      console.log('GoogleSignInButton: Successful Google sign-in, preparing redirect to /dashboard');\n      \n      const currentPath = typeof window !== 'undefined' ? window.location.pathname : '/sign-in';\n      const targetPath = '/dashboard';\n      \n      // Check if redirect is allowed\n      if (!RedirectGuard.canRedirect(targetPath)) {\n        console.error('GoogleSignInButton: Redirect blocked by RedirectGuard - potential loop detected');\n        toast.error('Authentication successful, but unable to redirect. Please navigate to dashboard manually.');\n        return;\n      }\n      \n      // Record the redirect attempt\n      RedirectGuard.recordRedirect(currentPath, targetPath);\n      \n      // Add a delay to ensure cookie propagation\n      const redirectTimer = setTimeout(() => {\n        console.log('GoogleSignInButton: Executing redirect to /dashboard');\n        \n        // Use window.location.href for reliable full page navigation\n        // This ensures fresh authentication state and avoids router-based issues\n        if (typeof window !== 'undefined') {\n          window.location.href = '/dashboard';\n        }\n      }, 500); // Increased delay for better cookie propagation\n      \n      // Cleanup timer if component unmounts\n      return () => clearTimeout(redirectTimer);\n    }\n  }, [signInSuccess]);\n\n  const handleGoogleSignIn = async () => {\n    if (isLoading) return; // Prevent multiple clicks\n    setIsLoading(true);\n    console.log('Starting Google Sign In...');\n    \n    // Defensive checks for Firebase initialization\n    if (!auth) {\n      console.error('Firebase Auth not initialized');\n      toast.error('Authentication service not available. Please check your configuration.');\n      setIsLoading(false);\n      return;\n    }\n    \n    if (!googleProvider) {\n      console.error('Google Auth Provider not initialized');\n      toast.error('Google authentication not available. Please check your configuration.');\n      setIsLoading(false);\n      return;\n    }\n    \n    console.log('Firebase Auth instance:', !!auth);\n    console.log('Google Provider instance:', !!googleProvider);\n    \n    try {\n      const result = await signInWithPopup(auth, googleProvider);\n      const user = result.user;\n      console.log('Firebase auth successful, user:', user.uid);\n      \n      if (!user.email) {\n        const error = new Error(\"No email provided by Google\");\n        console.error(error);\n        throw error;\n      }\n\n      // Get the ID token\n      const idToken = await user.getIdToken();\n      console.log('Got ID token, attempting sign in...');\n      \n      try {\n        // First, try to sign in\n        const signInResponse = await fetch('/api/auth/signin', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ idToken }),\n        });\n\n        console.log('Sign in response status:', signInResponse.status);\n        \n        if (signInResponse.ok) {\n          console.log('GoogleSignInButton: First sign in successful, redirecting to dashboard');\n          toast.success('Signed in successfully!');\n          \n          // Add small delay to ensure session cookie is set before redirect\n          setTimeout(() => {\n            setSignInSuccess(true);\n          }, 100);\n          return;\n        }\n\n        console.log('Sign in failed, checking if user needs to be created...');\n        // If sign in fails with 404, try to create the user first\n        if (signInResponse.status === 404) {\n          console.log('Creating new user...');\n          const createUserResponse = await fetch('/api/auth/signup', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              idToken,\n              name: user.displayName || user.email?.split('@')[0] || 'User',\n              email: user.email,\n            }),\n          });\n\n          console.log('Create user response status:', createUserResponse.status);\n          const createUserData = await createUserResponse.json().catch(() => ({}));\n          console.log('Create user response data:', createUserData);\n\n          if (!createUserResponse.ok) {\n            const error = new Error(`Failed to create user: ${createUserData.error || 'Unknown error'}`);\n            console.error(error);\n            throw error;\n          }\n\n          console.log('User created, attempting to sign in again...');\n          // After creating user, try to sign in again\n          const retrySignIn = await fetch('/api/auth/signin', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ idToken }),\n          });\n\n          console.log('Retry sign in status:', retrySignIn.status);\n\n          if (retrySignIn.ok) {\n            console.log('GoogleSignInButton: Second sign in successful, redirecting to dashboard');\n            toast.success('Signed in successfully!');\n            \n            // Add small delay to ensure session cookie is set before redirect\n            setTimeout(() => {\n              setSignInSuccess(true);\n            }, 100);\n            return;\n          }\n\n          const retryData = await retrySignIn.json().catch(() => ({}));\n          const error = new Error(`Failed to sign in after user creation: ${retryData.error || 'Unknown error'}`);\n          console.error(error);\n          throw error;\n        } else {\n          const errorData = await signInResponse.json().catch(() => ({}));\n          const error = new Error(`Failed to sign in: ${errorData.error || 'Unknown error'}`);\n          console.error(error);\n          throw error;\n        }\n      } catch (error) {\n        console.error('Authentication error:', error);\n        throw error;\n      }\n      \n    } catch (error) {\n      console.error(\"Google Sign-In Error:\", error);\n      toast.error(\"Failed to sign in with Google\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Button \n      variant=\"outline\" \n      type=\"button\" \n      className=\"w-full flex items-center justify-center gap-3 !bg-dark-200 hover:!bg-dark-200/80 !text-light-100 !border-white/20 hover:!border-white/30 !rounded-full !min-h-12\"\n      onClick={handleGoogleSignIn}\n      disabled={isLoading}\n    >\n      {isLoading ? (\n        <>\n          <div className=\"animate-spin rounded-full h-5 w-5 border-t-2 border-b-2 border-gray-400\"></div>\n          <span>Signing in...</span>\n        </>\n      ) : (\n        <>\n          <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\" fill=\"#4285F4\"/>\n            <path d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.28-1.93-6.14-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\" fill=\"#34A853\"/>\n            <path d=\"M5.86 14.09c-.26-.77-.41-1.6-.41-2.45 0-.85.15-1.68.41-2.45V6.35H2.18C1.42 7.8 1 9.39 1 11s.42 3.2 1.18 4.65l3.68-2.84.01.01z\" fill=\"#FBBC05\"/>\n            <path d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 6.35l3.68 2.84c.86-2.6 3.28-4.53 6.14-4.53z\" fill=\"#EA4335\"/>\n            <path d=\"M1 1h22v22H1z\" fill=\"none\"/>\n          </svg>\n          <span>Google</span>\n        </>\n      )}\n    </Button>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/components/InterviewCardRealtime.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useSWR' is defined but never used.","line":12,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'mutate' is defined but never used.","line":12,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[756,759],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[756,759],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2825,2828],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2825,2828],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleOptimisticAction' is assigned a value but never used.","line":122,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":122,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'action' is defined but never used.","line":122,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":122,"endColumn":47}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport Link from \"next/link\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport DisplayTechIcons from \"@/components/DisplayTechIcons\";\nimport { TechIconName, techIconMap } from \"@/components/tech-icons\";\nimport { useRealtimeInterview } from \"@/lib/hooks/useRealtimeFirestore\";\nimport { OptimisticUpdateIndicator } from \"@/components/ui/LoadingStates\";\nimport { useState } from \"react\";\nimport useSWR, { mutate } from \"swr\";\nimport { normalizeTechstack } from \"@/lib/utils\";\n\ninterface InterviewCardRealtimeProps {\n  interviewId: string;\n  role?: string;\n  type?: string;\n  techstack?: string;\n  createdAt?: any;\n  isOwner?: boolean;\n  className?: string;\n}\n\nexport default function InterviewCardRealtime({\n  interviewId,\n  role: initialRole,\n  type: initialType,\n  techstack: initialTechstack,\n  createdAt: initialCreatedAt,\n  isOwner = false,\n  className\n}: InterviewCardRealtimeProps) {\n  const [isUpdating, setIsUpdating] = useState(false);\n  \n  // Use real-time hook to get latest data\n  const { \n    interview, \n    loading: isLoading, \n    error \n  } = useRealtimeInterview(interviewId);\n\n  // Cast interview to proper type and use latest data from real-time hook or fall back to initial props\n  const interviewData = interview as Interview | null;\n  const role = interviewData?.role || initialRole || \"Loading...\";\n  const type = interviewData?.type || initialType || \"\";\n  const techstack = interviewData?.techstack || initialTechstack || \"\";\n  const createdAt = interviewData?.createdAt || initialCreatedAt;\n  const finalized = interviewData?.finalized || false;\n  const status = interviewData?.status || \"draft\";\n\n  // Show loading skeleton if we don't have any data\n  if (isLoading && !interview && !initialRole) {\n    return (\n      <Card className={`w-full animate-pulse ${className}`}>\n        <CardHeader className=\"space-y-2\">\n          <div className=\"flex justify-between items-start\">\n            <div className=\"h-5 w-32 bg-muted rounded\" />\n            <div className=\"h-4 w-16 bg-muted rounded\" />\n          </div>\n          <div className=\"h-4 w-24 bg-muted rounded\" />\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <div className=\"flex flex-wrap gap-2\">\n            <div className=\"h-6 w-16 bg-muted rounded\" />\n            <div className=\"h-6 w-20 bg-muted rounded\" />\n            <div className=\"h-6 w-18 bg-muted rounded\" />\n          </div>\n          <div className=\"flex justify-between items-center\">\n            <div className=\"h-4 w-28 bg-muted rounded\" />\n            <div className=\"h-8 w-24 bg-muted rounded\" />\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const formatDate = (timestamp: any) => {\n    if (!timestamp) return \"Recent\";\n    \n    let date: Date;\n    if (timestamp?.toDate) {\n      date = timestamp.toDate();\n    } else if (timestamp?.seconds) {\n      date = new Date(timestamp.seconds * 1000);\n    } else {\n      date = new Date(timestamp);\n    }\n    \n    return date.toLocaleDateString();\n  };\n\n  const getStatusColor = () => {\n    switch (status) {\n      case 'completed':\n      case 'finalized':\n        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';\n      case 'in_progress':\n        return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200';\n      case 'draft':\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-200';\n      default:\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-200';\n    }\n  };\n\n  const getStatusText = () => {\n    if (finalized) return 'Completed';\n    switch (status) {\n      case 'in_progress':\n        return 'In Progress';\n      case 'completed':\n        return 'Ready to Review';\n      case 'draft':\n        return 'Draft';\n      default:\n        return 'Available';\n    }\n  };\n\n  // Handle optimistic updates for actions like favoriting, etc.\n  const handleOptimisticAction = async (action: string) => {\n    setIsUpdating(true);\n    try {\n      // Perform action\n      // This would be your API call\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call\n      \n      // The real-time listener will update the data automatically\n      \n    } catch (error) {\n      console.error('Action failed:', error);\n    } finally {\n      setIsUpdating(false);\n    }\n  };\n\n  return (\n    <Card className={`w-full hover:shadow-lg transition-all duration-200 ${className}`}>\n      <CardHeader className=\"space-y-2\">\n        <div className=\"flex justify-between items-start\">\n          <CardTitle className=\"line-clamp-2\">{role}</CardTitle>\n          <div className=\"flex items-center gap-2\">\n            {isUpdating && (\n              <OptimisticUpdateIndicator isPending={true} message=\"Updating...\" />\n            )}\n            <Badge variant=\"secondary\" className={`text-xs ${getStatusColor()}`}>\n              {getStatusText()}\n            </Badge>\n          </div>\n        </div>\n        \n        {type && (\n          <Badge variant=\"outline\" className=\"w-fit text-xs\">\n            {type}\n          </Badge>\n        )}\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {/* Tech Stack */}\n        {techstack && (\n          <div className=\"flex flex-wrap gap-1\">\n            {normalizeTechstack(techstack).slice(0, 6).map((tech, index) => {\n              // Check if the tech string is a valid TechIconName\n              const isValidTechIcon = tech in techIconMap;\n              return isValidTechIcon ? (\n                <DisplayTechIcons key={index} name={tech as TechIconName} size={18} />\n              ) : null;\n            }).filter(Boolean)}\n          </div>\n        )}\n\n        {/* Footer */}\n        <div className=\"flex justify-between items-center pt-2\">\n          <span className=\"text-sm text-muted-foreground\">\n            Created {formatDate(createdAt)}\n            {isOwner && finalized && (\n              <span className=\"ml-2 text-green-600\">‚úì Public</span>\n            )}\n          </span>\n          \n          <div className=\"flex gap-2\">\n            {finalized && (\n              <Button variant=\"outline\" size=\"sm\" asChild>\n                <Link href={`/dashboard/interview/${interviewId}/feedback`}>\n                  View Feedback\n                </Link>\n              </Button>\n            )}\n            \n            <Button size=\"sm\" asChild>\n              <Link href={`/dashboard/interview/${interviewId}`}>\n                {isOwner ? 'Continue' : 'Practice'}\n              </Link>\n            </Button>\n          </div>\n        </div>\n\n        {/* Real-time indicator */}\n        {!isLoading && (\n          <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n            <div className=\"w-1.5 h-1.5 bg-green-400 rounded-full animate-pulse\" />\n            <span>Live updates</span>\n          </div>\n        )}\n      </CardContent>\n\n      {error && (\n        <CardContent className=\"pt-0\">\n          <div className=\"text-xs text-red-500 bg-red-50 p-2 rounded\">\n            Failed to load latest data. Showing cached version.\n          </div>\n        </CardContent>\n      )}\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/components/JobFilters.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'JobSearchFilters' is defined but never used.","line":2,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[924,927],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[924,927],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1236,1239],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1236,1239],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":75,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3120,3123],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3120,3123],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":93,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3888,3891],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3888,3891],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":110,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4695,4698],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4695,4698],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { JobFiltersProps, JobSearchFilters } from '@/types/auto-apply';\nimport { Button } from '@/components/ui/button';\nimport BanterLoader from '@/components/ui/BanterLoader';\n\nexport const JobFilters: React.FC<JobFiltersProps> = ({ filters, onChange, onSearch, loading }) => {\n  const handleKeywordChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const keywords = e.target.value.split(',').map(keyword => keyword.trim()).filter(Boolean);\n    onChange({\n      ...filters,\n      keywords,\n    });\n  };\n\n  const handleLocationChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const locations = e.target.value.split(',').map(location => location.trim()).filter(Boolean);\n    onChange({\n      ...filters,\n      locations,\n    });\n  };\n\n  const handleJobTypeChange = (jobType: string, checked: boolean) => {\n    const newJobTypes = checked\n      ? [...filters.jobTypes, jobType as any]\n      : filters.jobTypes.filter(type => type !== jobType);\n    onChange({\n      ...filters,\n      jobTypes: newJobTypes,\n    });\n  };\n\n  const handleWorkArrangementChange = (arrangement: string, checked: boolean) => {\n    const newArrangements = checked\n      ? [...filters.workArrangements, arrangement as any]\n      : filters.workArrangements.filter(arr => arr !== arrangement);\n    onChange({\n      ...filters,\n      workArrangements: newArrangements,\n    });\n  };\n\n  return (\n    <div className=\"bg-gray-900 border border-gray-700 p-6 rounded-lg shadow-md space-y-4\">\n      <h3 className=\"text-lg font-semibold text-white\">Job Search Filters</h3>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-200 mb-1\">Keywords</label>\n          <input\n            type=\"text\"\n            placeholder=\"React, JavaScript, Python...\"\n            className=\"w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n            onChange={handleKeywordChange}\n            value={filters.keywords.join(', ')}\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-200 mb-1\">Locations</label>\n          <input\n            type=\"text\"\n            placeholder=\"New York, Remote, San Francisco...\"\n            className=\"w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n            onChange={handleLocationChange}\n            value={filters.locations.join(', ')}\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-200 mb-1\">Date Posted</label>\n          <select\n            className=\"w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n            value={filters.datePosted}\n            onChange={(e) => onChange({ ...filters, datePosted: e.target.value as any })}\n          >\n            <option value=\"any\">Any time</option>\n            <option value=\"past-24-hours\">Past 24 hours</option>\n            <option value=\"past-week\">Past week</option>\n            <option value=\"past-month\">Past month</option>\n          </select>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-200 mb-2\">Job Type</label>\n          <div className=\"space-y-2\">\n            {['full-time', 'part-time', 'contract', 'internship'].map((type) => (\n              <label key={type} className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  checked={filters.jobTypes.includes(type as any)}\n                  onChange={(e) => handleJobTypeChange(type, e.target.checked)}\n                  className=\"mr-2 text-blue-500 bg-gray-800 border-gray-600 rounded focus:ring-blue-500 focus:ring-2\"\n                />\n                <span className=\"capitalize text-gray-300\">{type.replace('-', ' ')}</span>\n              </label>\n            ))}\n          </div>\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-200 mb-2\">Work Arrangement</label>\n          <div className=\"space-y-2\">\n            {['remote', 'hybrid', 'onsite'].map((arrangement) => (\n              <label key={arrangement} className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  checked={filters.workArrangements.includes(arrangement as any)}\n                  onChange={(e) => handleWorkArrangementChange(arrangement, e.target.checked)}\n                  className=\"mr-2 text-blue-500 bg-gray-800 border-gray-600 rounded focus:ring-blue-500 focus:ring-2\"\n                />\n                <span className=\"capitalize text-gray-300\">{arrangement}</span>\n              </label>\n            ))}\n          </div>\n        </div>\n      </div>\n\n\n      <Button onClick={onSearch} disabled={loading} className=\"w-full bg-blue-600 hover:bg-blue-700 text-white border-blue-600\">\n        {loading && <BanterLoader className=\"mr-2\" />}\n        {loading ? 'Searching...' : 'Search Jobs'}\n      </Button>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/components/JobListingTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'APPLICATION_STATUS_COLORS' is defined but never used.","line":2,"column":71,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":96}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { JobListing, JobListingTableProps, APPLICATION_STATUS_LABELS, APPLICATION_STATUS_COLORS } from '@/types/auto-apply';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { ExternalLink, BarChart3, Zap, Eye } from 'lucide-react';\nimport BanterLoader from '@/components/ui/BanterLoader';\n\nexport const JobListingTable: React.FC<JobListingTableProps> = ({ jobs, onApply, onAnalyze, onView, loading, pagination }) => {\n  if (jobs.length === 0) {\n    return (\n      <Card className=\"bg-gray-900 border-gray-700\">\n        <CardContent className=\"flex flex-col items-center justify-center py-12\">\n          <div className=\"text-gray-400 mb-4\">\n            <BarChart3 className=\"h-12 w-12\" />\n          </div>\n          <h3 className=\"text-lg font-semibold text-white mb-2\">No jobs found</h3>\n          <p className=\"text-gray-300 text-center max-w-md\">\n            Try adjusting your search filters or keywords to find more relevant positions.\n          </p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const formatSalary = (salary: JobListing['salary']) => {\n    if (!salary) return 'Not specified';\n    const formatNumber = (num: number) => new Intl.NumberFormat('en-US').format(num);\n    const min = salary.min ? formatNumber(salary.min) : '';\n    const max = salary.max ? formatNumber(salary.max) : '';\n    const range = min && max ? `${min} - ${max}` : min || max || 'Not specified';\n    return `${salary.currency} ${range}/${salary.period}`;\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffTime = Math.abs(now.getTime() - date.getTime());\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    if (diffDays === 1) return '1 day ago';\n    if (diffDays < 7) return `${diffDays} days ago`;\n    if (diffDays < 30) return `${Math.ceil(diffDays / 7)} weeks ago`;\n    // Use consistent date format to avoid hydration mismatch\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  // Dark theme optimized status colors with high contrast\n  const getStatusColor = (status: JobListing['applicationStatus']) => {\n    const colors = {\n      'discovered': 'bg-blue-600 text-white border border-blue-500',\n      'analyzing': 'bg-yellow-600 text-white border border-yellow-500',\n      'ready_to_apply': 'bg-green-600 text-white border border-green-500',\n      'applying': 'bg-orange-600 text-white border border-orange-500',\n      'applied': 'bg-purple-600 text-white border border-purple-500',\n      'application_viewed': 'bg-indigo-600 text-white border border-indigo-500',\n      'interview_request': 'bg-emerald-600 text-white border border-emerald-500',\n      'rejected': 'bg-red-600 text-white border border-red-500',\n      'withdrawn': 'bg-gray-600 text-white border border-gray-500',\n      'expired': 'bg-gray-700 text-gray-300 border border-gray-600'\n    };\n    return colors[status] || 'bg-gray-600 text-white border border-gray-500';\n  };\n\n  // Dark theme optimized relevancy score colors with better contrast\n  const getRelevancyColor = (score?: number) => {\n    if (!score) return 'text-gray-400';\n    if (score >= 85) return 'text-green-400 font-semibold';\n    if (score >= 70) return 'text-blue-400 font-medium';\n    if (score >= 50) return 'text-yellow-400';\n    return 'text-red-400';\n  };\n\n  return (\n    <Card className=\"bg-gray-900 border-gray-700\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 text-white\">\n          <BarChart3 className=\"h-5 w-5 text-blue-400\" />\n          Job Opportunities ({jobs.length})\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"p-0\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"border-b border-gray-700 bg-gray-800\">\n              <tr className=\"text-left\">\n                <th className=\"px-4 py-3 text-sm font-medium text-gray-200\">Job Details</th>\n                <th className=\"px-4 py-3 text-sm font-medium text-gray-200\">Company</th>\n                <th className=\"px-4 py-3 text-sm font-medium text-gray-200\">Portal</th>\n                <th className=\"px-4 py-3 text-sm font-medium text-gray-200\">Match Score</th>\n                <th className=\"px-4 py-3 text-sm font-medium text-gray-200\">Status</th>\n                <th className=\"px-4 py-3 text-sm font-medium text-gray-200\">Actions</th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-gray-700\">\n              {jobs.map((job) => (\n                <tr key={job.id} className=\"hover:bg-gray-800 transition-colors\">\n                  {/* Job Details */}\n                  <td className=\"px-4 py-4\">\n                    <div className=\"space-y-1\">\n                      <div className=\"font-medium text-white text-sm\">{job.title}</div>\n                      <div className=\"text-xs text-gray-400\">\n                        {job.location} ‚Ä¢ {job.workArrangement}\n                      </div>\n                      <div className=\"text-xs text-gray-400\">\n                        {formatSalary(job.salary)}\n                      </div>\n                      <div className=\"text-xs text-gray-500\">\n                        Posted {formatDate(job.postedDate)}\n                      </div>\n                    </div>\n                  </td>\n                  \n                  {/* Company */}\n                  <td className=\"px-4 py-4\">\n                    <div className=\"text-sm font-medium text-white\">{job.company}</div>\n                    <div className=\"text-xs text-gray-400 capitalize\">{job.jobType}</div>\n                  </td>\n                  \n                  {/* Portal */}\n                  <td className=\"px-4 py-4\">\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"text-sm font-medium text-white\">{job.jobPortal.name}</div>\n                      {job.jobPortal.supportsAutoApply && (\n                        <Badge variant=\"secondary\" className=\"text-xs bg-gray-700 text-gray-200 border-gray-600\">\n                          Auto-Apply\n                        </Badge>\n                      )}\n                    </div>\n                  </td>\n                  \n                  {/* Match Score */}\n                  <td className=\"px-4 py-4\">\n                    <div className={`text-sm font-semibold ${getRelevancyColor(job.relevancyScore)}`}>\n                      {job.relevancyScore ? `${job.relevancyScore}%` : 'N/A'}\n                    </div>\n                    {job.matchedSkills && job.matchedSkills.length > 0 && (\n                      <div className=\"text-xs text-gray-400 mt-1\">\n                        {job.matchedSkills.slice(0, 2).join(', ')}\n                        {job.matchedSkills.length > 2 && ` +${job.matchedSkills.length - 2}`}\n                      </div>\n                    )}\n                  </td>\n                  \n                  {/* Status */}\n                  <td className=\"px-4 py-4\">\n                    <Badge className={`text-xs ${getStatusColor(job.applicationStatus)}`}>\n                      {job.applicationStatus === 'applying' && (\n                        <BanterLoader className=\"mr-1\" />\n                      )}\n                      {APPLICATION_STATUS_LABELS[job.applicationStatus] || job.applicationStatus}\n                    </Badge>\n                  </td>\n                  \n                  {/* Actions - Dark theme with accessible button styling */}\n                  <td className=\"px-4 py-4\">\n                    <div className=\"flex items-center gap-1\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => onView(job.id)}\n                        className=\"h-8 w-8 p-0 text-gray-400 hover:text-white hover:bg-gray-700\"\n                        title=\"View job posting\"\n                      >\n                        <Eye className=\"h-3 w-3\" />\n                      </Button>\n                      \n                      {job.applicationStatus === 'discovered' && (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => onAnalyze(job.id)}\n                          className=\"h-8 w-8 p-0 text-blue-400 hover:text-blue-300 hover:bg-gray-700\"\n                          title=\"Analyze job match\"\n                          disabled={loading}\n                        >\n                          <BarChart3 className=\"h-3 w-3\" />\n                        </Button>\n                      )}\n                      \n                      {(job.applicationStatus === 'ready_to_apply' || job.applicationStatus === 'analyzing' || job.applicationStatus === 'applying') && (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => onApply(job.id)}\n                          className=\"h-8 w-8 p-0 text-green-400 hover:text-green-300 hover:bg-gray-700\"\n                          title=\"Apply to job\"\n                          disabled={loading || job.applicationStatus === 'applying'}\n                        >\n                          {job.applicationStatus === 'applying' ? (\n                            <BanterLoader />\n                          ) : (\n                            <Zap className=\"h-3 w-3\" />\n                          )}\n                        </Button>\n                      )}\n                      \n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => window.open(job.originalUrl, '_blank')}\n                        className=\"h-8 w-8 p-0 text-gray-400 hover:text-white hover:bg-gray-700\"\n                        title=\"Open original job posting\"\n                      >\n                        <ExternalLink className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        \n        {pagination && (\n          <div className=\"border-t border-gray-700 px-4 py-4 flex items-center justify-between bg-gray-800\">\n            <div className=\"text-sm text-gray-300\">\n              Showing {Math.min(pagination.pageSize, jobs.length)} of {pagination.total} jobs\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => pagination.onChange(pagination.current - 1)}\n                disabled={pagination.current <= 1}\n                className=\"border-gray-600 text-gray-300 hover:bg-gray-700 hover:text-white\"\n              >\n                Previous\n              </Button>\n              <span className=\"text-sm text-gray-300\">\n                Page {pagination.current} of {Math.ceil(pagination.total / pagination.pageSize)}\n              </span>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => pagination.onChange(pagination.current + 1)}\n                disabled={pagination.current >= Math.ceil(pagination.total / pagination.pageSize)}\n                className=\"border-gray-600 text-gray-300 hover:bg-gray-700 hover:text-white\"\n              >\n                Next\n              </Button>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/components/PdfUploadButton.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[878,881],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[878,881],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[951,954],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[951,954],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[976,979],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[976,979],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1000,1003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1000,1003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1030,1033],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1030,1033],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1055,1058],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1055,1058],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1473,1476],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1473,1476],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":144,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4112,4115],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4112,4115],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Authorization' is assigned a value but never used.","line":337,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":337,"endColumn":34}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React, { useState, useCallback, useRef } from 'react';\nimport { toast } from 'sonner';\nimport { UploadCloud, FileText, X } from 'lucide-react';\nimport BanterLoader from '@/components/ui/BanterLoader';\nimport { GlowingButton } from '@/components/ui/GlowingButton';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport Uploady, { \n  useItemProgressListener, \n  useItemErrorListener, \n  useItemFinalizeListener,\n  useItemStartListener,\n  useItemAbortListener\n} from '@rpldy/uploady';\nimport { asUploadButton } from '@rpldy/upload-button';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { auth } from '@/firebase/client';\nimport { useTelemetry } from '@/components/providers/TelemetryProvider';\n\ntype UploadResponse = {\n  success: boolean;\n  data?: {\n    message?: string;\n    resumeId?: string;\n    extractedData?: {\n      personalInfo?: any;\n      summary?: string;\n      skills?: string[];\n      experience?: any[];\n      education?: any[];\n      projects?: any[];\n      certifications?: any[];\n      languages?: any[];\n    };\n    interviewQuestions?: string[];\n    storageProvider?: 'azure' | 'firebase';\n    fileInfo?: {\n      fileName: string;\n      fileSize: number;\n      mimeType: string;\n      fileUrl: string;\n      sasUrl?: string;\n    };\n  };\n  error?: string;\n}\n\ninterface PdfUploadButtonProps {\n  onQuestionsGenerated?: (result: {\n    questions: string[];\n    fileUrl: string;\n    resumeId: string;\n    extractedData?: any;\n  }) => void;\n  onUploadStart?: () => void;\n  onUploadEnd?: () => void;\n  onResumeReplaced?: () => void;\n}\n\nconst PdfUploadButton = ({ \n  onQuestionsGenerated, \n  onUploadStart, \n  onUploadEnd,\n  onResumeReplaced \n}: PdfUploadButtonProps) => {\n  const [file, setFile] = useState<File | null>(null);\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const uploaderRef = useRef<HTMLButtonElement>(null);\n  const { trackResumeUpload, trackUserAction, trackError } = useTelemetry();\n\n  // Handle upload start\n  useItemStartListener(async (item) => {\n    const uploadFile = item.file as File;\n    \n    // If there's an existing file, this means we're replacing it\n    if (file) {\n      console.log('üîÑ Replacing existing resume file...');\n      onResumeReplaced?.();\n      \n      // Track resume replacement\n      await trackUserAction('resume_upload_replacement', 'resume_processing', {\n        oldFileName: file.name,\n        newFileName: uploadFile.name,\n        oldFileSize: file.size.toString(),\n        newFileSize: uploadFile.size.toString()\n      });\n    }\n    \n    setFile(uploadFile);\n    setIsUploading(true);\n    onUploadStart?.();\n    \n    // Track upload start\n    await trackUserAction('resume_upload_start', 'resume_processing', {\n      fileName: uploadFile.name,\n      fileSize: uploadFile.size.toString(),\n      fileType: uploadFile.type,\n      isReplacement: (!!file).toString()\n    });\n  });\n\n  // Handle upload progress\n  useItemProgressListener((item) => {\n    setUploadProgress(item.completed);\n  });\n\n  // Handle upload errors\n  useItemErrorListener(async (item) => {\n    setIsUploading(false);\n    const error = item.uploadResponse?.data?.error || 'Failed to upload file';\n    const errorMessage = typeof error === 'string' ? error : 'An unknown error occurred';\n    \n    toast.error('Upload failed', {\n      description: errorMessage\n    });\n    \n    // Track upload error\n    await trackError(new Error(errorMessage), {\n      action: 'resume_upload_error',\n      fileName: file?.name || 'unknown',\n      fileSize: file?.size.toString() || '0',\n      uploadProgress: uploadProgress.toString()\n    });\n    \n    setFile(null);\n    setUploadProgress(0);\n    onUploadEnd?.();\n  });\n\n  // Handle upload abort\n  useItemAbortListener(() => {\n    setIsUploading(false);\n    setFile(null);\n    setUploadProgress(0);\n    onUploadEnd?.();\n  });\n\n  // Handle successful upload\n  useItemFinalizeListener(async (item) => {\n    const endTime = Date.now();\n    // Extract start time from item data or use end time as fallback\n    const itemStartTime = (item as any).startTime || endTime;\n    const processingTime = endTime - itemStartTime;\n    \n    try {\n      const response = item.uploadResponse?.data as UploadResponse;\n      \n      if (response?.success) {\n        const questions = response.data?.interviewQuestions || [];\n        const extractedData = response.data?.extractedData;\n        const fileUrl = response.data?.fileInfo?.fileUrl || '';\n        const resumeId = response.data?.resumeId || '';\n        \n        if (questions.length > 0) {\n          toast.success('Resume processed successfully!', {\n            description: `Generated ${questions.length} interview questions`\n          });\n          \n          // Track successful resume upload and processing\n          if (file) {\n            await trackResumeUpload(\n              file.size,\n              file.type,\n              processingTime\n            );\n            \n            await trackUserAction('resume_upload_success', 'resume_processing', {\n              fileName: file.name,\n              questionsGenerated: questions.length.toString(),\n              processingTimeMs: processingTime.toString(),\n              resumeId\n            });\n          }\n          \n          onQuestionsGenerated?.({\n            questions,\n            fileUrl,\n            resumeId,\n            extractedData\n          });\n        } else {\n          toast.warning('Resume uploaded but no questions generated', {\n            description: 'The resume was processed but might not contain enough relevant content for question generation.'\n          });\n          \n          // Track upload with no questions generated\n          await trackUserAction('resume_upload_no_questions', 'resume_processing', {\n            fileName: file?.name || 'unknown',\n            processingTimeMs: processingTime.toString(),\n            resumeId\n          });\n          \n          // Still call the callback with empty questions so UI knows upload succeeded\n          onQuestionsGenerated?.({\n            questions: [],\n            fileUrl,\n            resumeId,\n            extractedData\n          });\n        }\n      } else {\n        throw new Error(response?.error || 'Failed to process resume');\n      }\n    } catch (error) {\n      console.error('Error processing PDF:', error);\n      const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';\n      \n      toast.error('Failed to process PDF', {\n        description: errorMessage\n      });\n      \n      // Track processing error\n      await trackError(error instanceof Error ? error : new Error(errorMessage), {\n        action: 'resume_processing_error',\n        fileName: file?.name || 'unknown',\n        processingTimeMs: processingTime.toString()\n      });\n    } finally {\n      setIsUploading(false);\n      onUploadEnd?.();\n    }\n  });\n\n  const removeFile = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    setFile(null);\n    setUploadProgress(0);\n    setIsUploading(false);\n    \n    // If you want to abort the current upload when removing the file\n    interface WindowWithUploader extends Window {\n      RPyldyUploader?: {\n        abortAll: () => void;\n      };\n    }\n    const uploader = (window as WindowWithUploader).RPyldyUploader;\n    if (uploader) {\n      uploader.abortAll();\n    }\n  }, []);\n\n  // Custom button component for Uploady\n  const CustomUploadButton = asUploadButton(({ onClick, isUploading: isUploadingProp }: { onClick: () => void, isUploading: boolean }) => (\n    <div className=\"relative\">\n      {isUploading && <BanterLoader overlay text=\"Uploading and Processing Resume...\" />}\n      <GlowingButton\n        onClick={onClick}\n        disabled={isUploading || isUploadingProp}\n        size=\"sm\"\n        className=\"w-auto h-10\"\n        innerClassName={`${\n          isUploading || isUploadingProp \n            ? 'bg-indigo-600 dark:bg-indigo-700' \n            : 'bg-slate-950 dark:bg-slate-900 hover:bg-slate-800 dark:hover:bg-slate-800'\n        }`}\n        aria-label=\"Upload resume/CV\"\n        title=\"Upload resume/CV (PDF)\"\n        ref={uploaderRef}\n      >\n        {isUploading || isUploadingProp ? (\n          <BanterLoader />\n        ) : (\n          <UploadCloud className=\"w-6 h-6\" />\n        )}\n      </GlowingButton>\n\n      <AnimatePresence>\n        {file && (\n          <motion.div \n            initial={{ opacity: 0, scale: 0.95 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0, scale: 0.95 }}\n            className=\"absolute right-0 z-10 mt-2 w-64 origin-top-right rounded-lg bg-white dark:bg-gray-800 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none\"\n          >\n            <div className=\"p-3\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <FileText className=\"w-4 h-4 text-indigo-600 dark:text-indigo-400 flex-shrink-0\" />\n                  <span className=\"text-xs font-medium text-gray-900 dark:text-gray-100 truncate\">\n                    {file.name}\n                  </span>\n                </div>\n                <div className=\"flex items-center\">\n                  {isUploading ? (\n                    <BanterLoader />\n                  ) : (\n                    <button\n                      type=\"button\"\n                      onClick={removeFile}\n                      className=\"text-gray-400 hover:text-red-500 transition-colors p-1 -mr-1\"\n                      aria-label=\"Remove file\"\n                    >\n                      <X className=\"w-3.5 h-3.5\" />\n                    </button>\n                  )}\n                </div>\n              </div>\n              <div className=\"mt-2 w-full bg-gray-200 rounded-full h-1.5 dark:bg-gray-700\">\n                <div \n                  className=\"h-1.5 rounded-full bg-indigo-500 transition-all duration-300\"\n                  style={{ width: `${uploadProgress}%` }}\n                />\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  ));\n\n  return <CustomUploadButton />;\n};\n\n// Main component with Uploady provider\nexport default function PdfUploadButtonWrapper(props: PdfUploadButtonProps) {\n  const { user } = useAuth();\n  const [authHeaders, setAuthHeaders] = useState<Record<string, string>>({\n    'Accept': 'application/json',\n    'Cache-Control': 'no-cache'\n  });\n\n  // Update headers with auth token when user changes\n  React.useEffect(() => {\n    const updateAuthHeaders = async () => {\n      try {\n        if (user && auth && auth.currentUser) {\n          const idToken = await auth.currentUser.getIdToken();\n          setAuthHeaders(prev => ({\n            ...prev,\n            'Authorization': `Bearer ${idToken}`\n          }));\n        } else {\n          // Remove auth header if no user\n          setAuthHeaders(prev => {\n            const { Authorization, ...rest } = prev;\n            return rest;\n          });\n        }\n      } catch (error) {\n        console.error('Error getting auth token:', error);\n        // Continue without auth token - server will handle development mode\n      }\n    };\n\n    updateAuthHeaders();\n  }, [user]);\n\n  return (\n    <Uploady\n      destination={{ \n        url: '/api/resume/upload',\n        headers: authHeaders\n      }}\n      accept=\"application/pdf\"\n      multiple={false}\n      autoUpload={true}\n      inputFieldName=\"file\"\n      fileFilter={(file: File | string) => {\n        // Additional client-side validation\n        if (typeof file === 'string') {\n          return false;\n        }\n        const isValid = file.type === 'application/pdf';\n        if (!isValid) {\n          toast.error('Invalid file type', {\n            description: 'Please upload a PDF file'\n          });\n        }\n        return isValid;\n      }}\n      formatServerResponse={(_response: string | UploadResponse) => {\n        try {\n          const response = typeof _response === 'string' ? JSON.parse(_response) : _response;\n          return {\n            success: response.success !== false,\n            data: response.data || response,\n            error: response.error\n          };\n        } catch (e) {\n          console.error('Error parsing server response:', e);\n          return {\n            success: false,\n            error: 'Invalid server response format',\n            data: {}\n          };\n        }\n      }}\n      maxGroupSize={1}\n      clearPendingOnAdd={true}\n      forceJsonResponse={true}\n    >\n      <PdfUploadButton {...props} />\n    </Uploady>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/components/PdfUploadButtonWrapper.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[976,979],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[976,979],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport dynamic from \"next/dynamic\";\n\n// Dynamic import for PdfUploadButton component that requires DOM and framer-motion APIs\nconst PdfUploadButton = dynamic(() => import('./PdfUploadButton'), {\n  ssr: false,\n  loading: () => (\n    <div className=\"relative\">\n      <button\n        type=\"button\"\n        disabled\n        className=\"p-2 text-gray-600 hover:text-gray-900 dark:text-gray-300 dark:hover:text-white rounded-lg border border-gray-300 dark:border-gray-600 bg-gray-100 dark:bg-gray-700 transition-colors shadow-sm animate-pulse\"\n        aria-label=\"Upload resume/CV\"\n        title=\"Loading upload component...\"\n      >\n        <div className=\"w-6 h-6 bg-gray-400 dark:bg-gray-500 rounded animate-pulse\"></div>\n      </button>\n    </div>\n  )\n});\n\n// Re-export component interface for external use\ninterface PdfUploadButtonProps {\n  onQuestionsGenerated?: (result: {\n    questions: string[];\n    fileUrl: string;\n    resumeId: string;\n    extractedData?: any;\n  }) => void;\n  onUploadStart?: () => void;\n  onUploadEnd?: () => void;\n  onResumeReplaced?: () => void;\n}\n\nexport type { PdfUploadButtonProps };\n\nexport default PdfUploadButton;\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/components/ResumeContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[354,357],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[354,357],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[375,378],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[375,378],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[395,398],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[395,398],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[421,424],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[421,424],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[442,445],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[442,445],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React, { createContext, useContext, useState, ReactNode } from 'react';\n\ninterface ExtractedResumeData {\n  personalInfo?: {\n    name?: string;\n    email?: string;\n    phone?: string;\n    address?: string;\n    linkedin?: string;\n    github?: string;\n    website?: string;\n  };\n  summary?: string;\n  skills?: string[];\n  experience?: any[];\n  education?: any[];\n  projects?: any[];\n  certifications?: any[];\n  languages?: any[];\n}\n\ninterface ResumeData {\n  questions: string[];\n  fileUrl: string;\n  resumeId: string;\n  extractedData?: ExtractedResumeData;\n}\n\ninterface ResumeContextValue {\n  resumeData: ResumeData | null;\n  setResumeData: (data: ResumeData | null) => void;\n  hasResume: boolean;\n  clearResume: () => void;\n}\n\nconst ResumeContext = createContext<ResumeContextValue | undefined>(undefined);\n\ninterface ResumeProviderProps {\n  children: ReactNode;\n}\n\nexport const ResumeProvider: React.FC<ResumeProviderProps> = ({ children }) => {\n  const [resumeData, setResumeData] = useState<ResumeData | null>(null);\n\n  const clearResume = () => {\n    setResumeData(null);\n  };\n\n  const value: ResumeContextValue = {\n    resumeData,\n    setResumeData,\n    hasResume: !!resumeData,\n    clearResume,\n  };\n\n  return (\n    <ResumeContext.Provider value={value}>\n      {children}\n    </ResumeContext.Provider>\n  );\n};\n\nexport const useResume = (): ResumeContextValue => {\n  const context = useContext(ResumeContext);\n  if (context === undefined) {\n    throw new Error('useResume must be used within a ResumeProvider');\n  }\n  return context;\n};\n\n// Export types for use in other components\nexport type { ResumeData, ExtractedResumeData };\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/components/ResumeProcessingStatus.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[744,747],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[744,747],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is assigned a value but never used.","line":32,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":10},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1637,1640],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1637,1640],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":94,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":97,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1677,1680],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1677,1680],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'currentStatus'. Either include it or remove the dependency array.","line":67,"column":6,"nodeType":"ArrayExpression","endLine":67,"endColumn":50,"suggestions":[{"desc":"Update the dependencies array to be: [currentStatus, currentStatus.status, onComplete, onError]","fix":{"range":[2091,2135],"text":"[currentStatus, currentStatus.status, onComplete, onError]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'formatTimeRemaining' is assigned a value but never used.","line":112,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":112,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":123,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":123,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":133,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":133,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":193,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":193,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6158,6161],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6158,6161],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":193,"column":91,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":193,"endColumn":94,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6205,6208],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6205,6208],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":206,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":206,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6654,6657],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6654,6657],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":208,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":208,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6778,6781],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6778,6781],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":214,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":214,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6928,6931],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6928,6931],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":223,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":223,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7501,7504],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7501,7504],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":255,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":255,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8558,8561],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8558,8561],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { CheckCircle2, AlertCircle, Clock, XCircle, RefreshCw } from \"lucide-react\";\nimport { useRealtimeApplicationStatus } from \"@/lib/hooks/useRealtimeFirestore\";\nimport { OptimisticUpdateIndicator } from \"@/components/ui/LoadingStates\";\nimport { ApplicationStatus } from \"@/types/realtime\";\nimport { toast } from \"sonner\";\n\ninterface ResumeProcessingStatusProps {\n  applicationId: string;\n  initialStatus?: ApplicationStatus;\n  onComplete?: (result: any) => void;\n  onError?: (error: string) => void;\n}\n\nexport default function ResumeProcessingStatus({\n  applicationId,\n  initialStatus,\n  onComplete,\n  onError\n}: ResumeProcessingStatusProps) {\n  const [lastUpdateTime, setLastUpdateTime] = useState<Date>(new Date());\n  \n  const {\n    status,\n    loading: isLoading,\n    error\n  } = useRealtimeApplicationStatus(applicationId);\n\n  // Use real-time data or fallback to initial status\n  const currentStatus = status || initialStatus;\n\n  // Handle status changes\n  useEffect(() => {\n    if (!currentStatus) return;\n\n    setLastUpdateTime(new Date());\n\n    // Handle completion\n    if (currentStatus.status === 'completed') {\n      toast.success('Processing completed successfully!');\n      onComplete?.(currentStatus);\n    }\n\n    // Handle errors\n    if (currentStatus.status === 'failed') {\n      const errorMessage = (currentStatus.details as any)?.errorDetails || (currentStatus as any).message || 'Processing failed';\n      toast.error('Processing failed', {\n        description: errorMessage\n      });\n      onError?.(errorMessage);\n    }\n\n    // Show warnings\n    if (currentStatus.details?.warningMessages?.length) {\n      currentStatus.details.warningMessages.forEach(warning => {\n        toast.warning('Processing Warning', {\n          description: warning\n        });\n      });\n    }\n  }, [currentStatus?.status, onComplete, onError]);\n\n  const getStatusIcon = () => {\n    switch (currentStatus?.status) {\n      case 'completed':\n        return <CheckCircle2 className=\"w-5 h-5 text-green-500\" />;\n      case 'failed':\n        return <XCircle className=\"w-5 h-5 text-red-500\" />;\n      case 'processing':\n        return <RefreshCw className=\"w-5 h-5 text-blue-500 animate-spin\" />;\n      default:\n        return <Clock className=\"w-5 h-5 text-yellow-500\" />;\n    }\n  };\n\n  const getStatusColor = () => {\n    switch (currentStatus?.status) {\n      case 'completed':\n        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';\n      case 'failed':\n        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';\n      case 'processing':\n        return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200';\n      default:\n        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200';\n    }\n  };\n\n  const getStatusText = () => {\n    switch (currentStatus?.status) {\n      case 'processing':\n        return 'Processing';\n      case 'completed':\n        return 'Completed';\n      case 'failed':\n        return 'Failed';\n      default:\n        return 'Unknown';\n    }\n  };\n\n  const getProcessingTypeLabel = () => {\n    return 'Processing';\n  };\n\n  const formatTimeRemaining = (seconds: number) => {\n    if (seconds < 60) return `${seconds}s`;\n    if (seconds < 3600) return `${Math.floor(seconds / 60)}m ${seconds % 60}s`;\n    return `${Math.floor(seconds / 3600)}h ${Math.floor((seconds % 3600) / 60)}m`;\n  };\n\n  const handleRetry = async () => {\n    try {\n      // This would call an API to retry the processing\n      toast.info('Retrying processing...');\n      // The real-time listener will pick up the status change\n    } catch (error) {\n      toast.error('Failed to retry processing');\n    }\n  };\n\n  const handleCancel = async () => {\n    try {\n      // This would call an API to cancel the processing\n      toast.info('Cancelling processing...');\n      // The real-time listener will pick up the status change\n    } catch (error) {\n      toast.error('Failed to cancel processing');\n    }\n  };\n\n  if (isLoading && !currentStatus) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"w-8 h-8 bg-muted rounded animate-pulse\" />\n            <div className=\"space-y-2 flex-1\">\n              <div className=\"h-4 w-32 bg-muted rounded animate-pulse\" />\n              <div className=\"h-2 w-full bg-muted rounded animate-pulse\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!currentStatus) {\n    return (\n      <Card>\n        <CardContent className=\"p-6 text-center\">\n          <AlertCircle className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\n          <p className=\"text-muted-foreground\">No processing status found</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            {getStatusIcon()}\n            <div>\n              <CardTitle className=\"text-lg\">{getProcessingTypeLabel()}</CardTitle>\n              <div className=\"flex items-center gap-2 mt-1\">\n                <Badge className={`text-xs ${getStatusColor()}`}>\n                  {getStatusText()}\n                </Badge>\n              </div>\n            </div>\n          </div>\n\n          {currentStatus.status === 'processing' && (\n            <OptimisticUpdateIndicator isPending={true} message=\"Processing...\" />\n          )}\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {/* Progress Bar */}\n        {currentStatus.status === 'processing' && (\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-muted-foreground\">\n                {(currentStatus.details as any)?.currentStep || (currentStatus.details as any)?.stage || 'Processing'}\n              </span>\n              <span className=\"font-medium\">{currentStatus.progress}%</span>\n            </div>\n            <Progress value={currentStatus.progress} className=\"h-2\" />\n            \n            <div className=\"text-xs text-muted-foreground\">\n              Progress: {currentStatus.progress}%\n            </div>\n          </div>\n        )}\n\n        {/* Current Message */}\n        {(currentStatus as any).message && (\n          <div className=\"p-3 bg-muted rounded-lg\">\n            <p className=\"text-sm\">{(currentStatus as any).message}</p>\n          </div>\n        )}\n\n\n        {/* Error Details */}\n        {currentStatus.status === 'failed' && (currentStatus.details as any)?.errorDetails && (\n          <div className=\"p-3 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg\">\n            <div className=\"flex items-start gap-2\">\n              <AlertCircle className=\"w-4 h-4 text-red-500 mt-0.5 flex-shrink-0\" />\n              <div className=\"space-y-1\">\n                <p className=\"text-sm font-medium text-red-800 dark:text-red-200\">\n                  Processing Failed\n                </p>\n                <p className=\"text-xs text-red-600 dark:text-red-300\">\n                  {(currentStatus.details as any).errorDetails}\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Actions */}\n        <div className=\"flex gap-2 pt-2\">\n          {currentStatus.status === 'failed' && (\n            <Button size=\"sm\" variant=\"outline\" onClick={handleRetry}>\n              <RefreshCw className=\"w-4 h-4 mr-2\" />\n              Retry\n            </Button>\n          )}\n          \n          {currentStatus.status === 'processing' && (\n            <Button size=\"sm\" variant=\"destructive\" onClick={handleCancel}>\n              Cancel\n            </Button>\n          )}\n          \n          {currentStatus.status === 'completed' && (\n            <Button size=\"sm\" onClick={() => onComplete?.(currentStatus)}>\n              View Result\n            </Button>\n          )}\n        </div>\n\n        {/* Timestamps */}\n        <div className=\"text-xs text-muted-foreground space-y-1 pt-2 border-t\">\n          <div>Last updated: {lastUpdateTime.toLocaleString()}</div>\n          <div>Updated At: {new Date(currentStatus.updatedAt as any).toLocaleString()}</div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/components/ResumeTailor.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'parsePdfFile' is defined but never used.","line":41,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":45,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'parseDocxFile' is defined but never used.","line":51,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":55,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":17},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":446,"column":71,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[18432,18538],"text":"\n                  Provide your resume and job description, then click &quot;Tailor My Resume\"\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[18432,18538],"text":"\n                  Provide your resume and job description, then click &ldquo;Tailor My Resume\"\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[18432,18538],"text":"\n                  Provide your resume and job description, then click &#34;Tailor My Resume\"\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[18432,18538],"text":"\n                  Provide your resume and job description, then click &rdquo;Tailor My Resume\"\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":446,"column":88,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[18432,18538],"text":"\n                  Provide your resume and job description, then click \"Tailor My Resume&quot;\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[18432,18538],"text":"\n                  Provide your resume and job description, then click \"Tailor My Resume&ldquo;\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[18432,18538],"text":"\n                  Provide your resume and job description, then click \"Tailor My Resume&#34;\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[18432,18538],"text":"\n                  Provide your resume and job description, then click \"Tailor My Resume&rdquo;\n                "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React, { useState } from 'react';\nimport { Upload, FileText, Zap, Download, Copy, Check, Link, AlertCircle } from 'lucide-react';\nimport BanterLoader from '@/components/ui/BanterLoader';\n\n// Function to generate tailored resume using server-side API\nasync function generateTailoredResume(resumeText: string, jobDescription: string): Promise<string> {\n  try {\n    const response = await fetch('/api/resume/tailor', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        resumeText,\n        jobDescription,\n      }),\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(data.error || 'Failed to generate tailored resume');\n    }\n\n    return data.tailoredResume;\n  } catch (error) {\n    console.error('Resume tailoring API Error:', error);\n    if (error instanceof TypeError && error.message.includes('fetch')) {\n      throw new Error('Network error: Unable to connect to the server. Please check your connection and try again.');\n    }\n    if (error instanceof Error) {\n      throw error;\n    }\n    throw new Error('Failed to generate tailored resume. Please try again.');\n  }\n}\n\n// Function to parse PDF files (client-side with limited functionality)\nasync function parsePdfFile(file: File): Promise<string> {\n  try {\n    const text = await file.text();\n    return text;\n  } catch (error) {\n    throw new Error('PDF parsing is not fully supported in browser. Please convert to text format or use the text input.');\n  }\n}\n\n// Function to parse DOCX files (simplified version)\nasync function parseDocxFile(file: File): Promise<string> {\n  try {\n    const text = await file.text();\n    return text;\n  } catch (error) {\n    throw new Error('DOCX parsing requires server-side processing. Please convert to text format or use the text input.');\n  }\n}\n\n// Function to extract text from URL (basic web scraping)\nasync function extractTextFromUrl(url: string): Promise<string> {\n  try {\n    const response = await fetch('/api/resume/extract-url', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ url }),\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(data.error || 'Failed to extract content from URL');\n    }\n\n    // Return the description field or concatenated structured fields\n    return data.description || data.jobDescription || '';\n  } catch (error) {\n    console.error('URL extraction API Error:', error);\n    if (error instanceof TypeError && error.message.includes('fetch')) {\n      throw new Error('Could not fetch job description from the provided URL. Please check your network connection and try again.');\n    }\n    if (error instanceof Error) {\n      throw error;\n    }\n    throw new Error('Could not fetch job description from the provided URL. Please try again.');\n  }\n}\n\nconst ResumeTailorSection = () => {\n  const [resumeText, setResumeText] = useState('');\n  const [jobDescription, setJobDescription] = useState('');\n  const [jobDescriptionUrl, setJobDescriptionUrl] = useState('');\n  const [tailoredResume, setTailoredResume] = useState('');\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [copied, setCopied] = useState(false);\n  const [inputMethod, setInputMethod] = useState<'paste' | 'url'>('paste');\n  const [error, setError] = useState<string | null>(null);\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>, type: 'resume' | 'job') => {\n    const files = event.target.files;\n    if (!files || files.length === 0) return;\n\n    setError(null);\n    \n    try {\n      const file = files[0];\n      let text = '';\n\n      // Validate file size (10MB limit)\n      if (file.size > 10 * 1024 * 1024) {\n        throw new Error('File size exceeds 10MB limit. Please use a smaller file.');\n      }\n\n      if (file.type === 'text/plain') {\n        text = await file.text();\n      } else if (file.type === 'application/pdf') {\n        // For now, ask users to convert to text\n        throw new Error('PDF files require server-side processing. Please convert to text format and paste the content instead.');\n      } else if (file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {\n        // For now, ask users to convert to text\n        throw new Error('DOCX files require server-side processing. Please convert to text format and paste the content instead.');\n      } else {\n        throw new Error('Unsupported file type. Please use TXT files or paste the content directly.');\n      }\n\n      if (type === 'resume') {\n        setResumeText(text);\n      } else {\n        setJobDescription(text);\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to process the file.';\n      setError(errorMessage);\n      console.error('Error parsing file:', error);\n    }\n  };\n\n  const handleUrlExtraction = async () => {\n    if (!jobDescriptionUrl.trim()) {\n      setError('Please enter a valid URL.');\n      return;\n    }\n\n    setError(null);\n    setIsProcessing(true);\n\n    try {\n      const text = await extractTextFromUrl(jobDescriptionUrl);\n      setJobDescription(text);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Could not fetch job description from the provided URL. Please check your network connection and try again.';\n      setError(errorMessage);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const tailorResume = async () => {\n    if (!resumeText.trim()) {\n      setError('Please provide your resume content.');\n      return;\n    }\n\n    if (!jobDescription.trim()) {\n      setError('Please provide the job description.');\n      return;\n    }\n\n    setError(null);\n    setIsProcessing(true);\n    setTailoredResume('');\n\n    try {\n      const tailoredContent = await generateTailoredResume(resumeText, jobDescription);\n      setTailoredResume(tailoredContent);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'An error occurred while tailoring your resume. Please check your network connection and try again.';\n      setError(errorMessage);\n      \n      // Fallback: Simple keyword highlighting\n      const keywords = extractKeywords(jobDescription);\n      const highlightedResume = highlightKeywords(resumeText, keywords);\n      setTailoredResume(`${highlightedResume}\\n\\n--- KEYWORD ANALYSIS ---\\nKey terms from job description: ${keywords.slice(0, 15).join(', ')}\\n\\nNote: AI tailoring failed, showing original resume with keyword highlights.`);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const extractKeywords = (text: string): string[] => {\n    const commonWords = new Set(['the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by']);\n    const words = text.toLowerCase()\n      .replace(/[^\\w\\s]/g, ' ')\n      .split(/\\s+/)\n      .filter(word => word.length > 2 && !commonWords.has(word));\n\n    const wordCount: { [key: string]: number } = {};\n    words.forEach(word => {\n      wordCount[word] = (wordCount[word] || 0) + 1;\n    });\n\n    return Object.entries(wordCount)\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, 20)\n      .map(([word]) => word);\n  };\n\n  const highlightKeywords = (resume: string, keywords: string[]): string => {\n    let highlighted = resume;\n    keywords.forEach(keyword => {\n      const regex = new RegExp(`\\\\b${keyword}\\\\b`, 'gi');\n      highlighted = highlighted.replace(regex, `**${keyword.toUpperCase()}**`);\n    });\n    return highlighted;\n  };\n\n  const copyToClipboard = async () => {\n    try {\n      await navigator.clipboard.writeText(tailoredResume);\n      setCopied(true);\n      // Reset copy status after a brief moment without blocking UI\n      setTimeout(() => setCopied(false), 2000);\n    } catch (err) {\n      console.error('Failed to copy text:', err);\n      setError('Failed to copy to clipboard.');\n    }\n  };\n\n  const downloadTailoredResume = () => {\n    try {\n      const blob = new Blob([tailoredResume], { type: 'text/plain;charset=utf-8' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'tailored-resume.txt';\n      a.style.display = 'none';\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n    } catch (err) {\n      console.error('Failed to download file:', err);\n      setError('Failed to download file.');\n    }\n  };\n\n  return (\n    <div className=\"w-full h-full p-6 mb-8\">\n      {isProcessing && <BanterLoader overlay text=\"Tailoring Resume with AI...\" />}\n      <div className=\"mb-6\">\n        <p className=\"text-gray-300\">\n          Upload your resume and provide a job description to get an AI-tailored version optimized for ATS systems and maximum job relevance.\n        </p>\n      </div>\n\n      {error && (\n        <div className=\"mb-6 p-4 bg-red-900/30 border border-red-500/60 rounded-lg flex items-start\">\n          <AlertCircle className=\"w-5 h-5 text-red-400 mr-2 mt-0.5 flex-shrink-0\" />\n          <p className=\"text-red-300 text-sm\">{error}</p>\n        </div>\n      )}\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 h-full\">\n        {/* Left Column - Inputs */}\n        <div className=\"space-y-6\">\n          {/* Resume Input Section - Enhanced dark theme consistency */}\n          <div className=\"bg-gray-900 border border-gray-700 rounded-lg p-6 shadow-md\">\n            <div className=\"flex items-center mb-4\">\n              <FileText className=\"w-5 h-5 text-blue-400 mr-2\" />\n              <h3 className=\"text-xl font-semibold text-white\">Your Resume</h3>\n            </div>\n\n            <div className=\"mb-4\">\n              <label className=\"block text-sm font-medium text-gray-200 mb-2\">\n                Upload Resume File (TXT format recommended)\n              </label>\n              <div className=\"flex items-center justify-center w-full\">\n                <label className=\"flex flex-col items-center justify-center w-full h-32 border-2 border-gray-600 border-dashed rounded-lg cursor-pointer bg-gray-800 hover:border-blue-500 hover:bg-gray-750 transition-colors\">\n                  <div className=\"flex flex-col items-center justify-center pt-5 pb-6\">\n                    <Upload className=\"w-8 h-8 mb-4 text-gray-400\" />\n                    <p className=\"mb-2 text-sm text-gray-300\">\n                      <span className=\"font-semibold\">Click to upload</span> or drag and drop\n                    </p>\n                    <p className=\"text-xs text-gray-400\">TXT files (PDF/DOCX coming soon)</p>\n                  </div>\n                  <input\n                    type=\"file\"\n                    className=\"hidden\"\n                    accept=\".txt\"\n                    onChange={(e) => handleFileUpload(e, 'resume')}\n                  />\n                </label>\n              </div>\n            </div>\n\n          </div>\n\n          {/* Job Description Section - Enhanced dark theme consistency */}\n          <div className=\"bg-gray-900 border border-gray-700 rounded-lg p-6 shadow-md\">\n            <div className=\"flex items-center mb-4\">\n              <FileText className=\"w-5 h-5 text-green-400 mr-2\" />\n              <h3 className=\"text-xl font-semibold text-white\">Job Description</h3>\n            </div>\n\n            {/* Input Method Toggle - Consistent with Auto-apply styling */}\n            <div className=\"flex mb-4 bg-gray-800 border border-gray-600 rounded-lg p-1\">\n              <button\n                onClick={() => setInputMethod('paste')}\n                className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${\n                  inputMethod === 'paste'\n                    ? 'bg-blue-600 text-white border border-blue-500'\n                    : 'text-gray-300 hover:text-white hover:bg-gray-700'\n                }`}\n              >\n                Paste Text\n              </button>\n              <button\n                onClick={() => setInputMethod('url')}\n                className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${\n                  inputMethod === 'url'\n                    ? 'bg-blue-600 text-white border border-blue-500'\n                    : 'text-gray-300 hover:text-white hover:bg-gray-700'\n                }`}\n              >\n                From URL\n              </button>\n            </div>\n\n            {inputMethod === 'paste' ? (\n              <div className=\"mb-4\">\n                <label htmlFor=\"job-description\" className=\"block text-sm font-medium text-gray-200 mb-2\">\n                  Paste the job description here\n                </label>\n                <textarea\n                  id=\"job-description\"\n                  rows={8}\n                  className=\"w-full px-3 py-2 bg-gray-800 border border-gray-600 text-white placeholder-gray-400 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  placeholder=\"Paste the job description here...\"\n                  value={jobDescription}\n                  onChange={(e) => {\n                    setJobDescription(e.target.value);\n                    setError(null);\n                  }}\n                />\n              </div>\n            ) : (\n              <div className=\"mb-4\">\n                <label htmlFor=\"job-url\" className=\"block text-sm font-medium text-gray-200 mb-2\">\n                  Enter job posting URL\n                </label>\n                <div className=\"flex\">\n                  <input\n                    id=\"job-url\"\n                    type=\"url\"\n                    className=\"flex-1 px-3 py-2 bg-gray-800 border border-gray-600 text-white placeholder-gray-400 rounded-l-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                    placeholder=\"https://company.com/job-posting\"\n                    value={jobDescriptionUrl}\n                    onChange={(e) => {\n                      setJobDescriptionUrl(e.target.value);\n                      setError(null);\n                    }}\n                  />\n                  <button\n                    onClick={handleUrlExtraction}\n                    disabled={!jobDescriptionUrl.trim() || isProcessing}\n                    className=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-700 disabled:text-gray-400 text-white rounded-r-md border-l-0 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  >\n                    <Link className=\"w-4 h-4\" />\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Tailor Button - Consistent with Auto-apply button styling */}\n          <button\n            onClick={tailorResume}\n            disabled={!resumeText || !jobDescription || isProcessing}\n            className={`w-full flex items-center justify-center px-6 py-3 text-base font-medium rounded-md transition-colors ${\n              !resumeText || !jobDescription || isProcessing\n                ? 'bg-gray-700 text-gray-400 cursor-not-allowed border border-gray-600'\n                : 'bg-blue-600 hover:bg-blue-700 text-white border border-blue-600'\n            } focus:outline-none focus:ring-2 focus:ring-blue-500`}\n          >\n            {isProcessing ? (\n              <>\n                <BanterLoader />\n                <span className=\"ml-3\">Tailoring Resume with AI...</span>\n              </>\n            ) : (\n              <>\n                <Zap className=\"w-5 h-5 mr-2\" />\n                Tailor My Resume\n              </>\n            )}\n          </button>\n        </div>\n\n        {/* Right Column - Results - Enhanced dark theme consistency */}\n        <div className=\"bg-gray-900 border border-gray-700 rounded-lg p-6 shadow-md flex flex-col h-full\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h2 className=\"text-xl font-semibold text-white\">ATS-Optimized Resume</h2>\n            {tailoredResume && (\n              <div className=\"flex space-x-2\">\n                <button\n                  onClick={copyToClipboard}\n                  className=\"inline-flex items-center px-3 py-1.5 border border-gray-600 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-300 bg-gray-800 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors\"\n                >\n                  {copied ? (\n                    <Check className=\"w-4 h-4 mr-1 text-green-400\" />\n                  ) : (\n                    <Copy className=\"w-4 h-4 mr-1\" />\n                  )}\n                  {copied ? 'Copied!' : 'Copy'}\n                </button>\n                <button\n                  onClick={downloadTailoredResume}\n                  className=\"inline-flex items-center px-3 py-1.5 border border-gray-600 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-300 bg-gray-800 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors\"\n                >\n                  <Download className=\"w-4 h-4 mr-1\" />\n                  Download\n                </button>\n              </div>\n            )}\n          </div>\n\n          {isProcessing ? (\n            <div className=\"border-2 border-dashed border-gray-600 rounded-lg p-8 text-center flex-1 flex items-center justify-center flex-col space-y-4\">\n              <BanterLoader />\n              <p className=\"text-gray-300\">Tailoring your resume with AI...</p>\n              <p className=\"text-sm text-gray-400\">Analyzing job requirements and optimizing for ATS compatibility</p>\n            </div>\n          ) : tailoredResume ? (\n            <div className=\"border border-gray-600 rounded-md p-4 flex-1 overflow-y-auto bg-gray-800\">\n              <pre className=\"whitespace-pre-wrap font-sans text-white text-sm leading-relaxed\">\n                {tailoredResume}\n              </pre>\n            </div>\n          ) : (\n            <div className=\"border-2 border-dashed border-gray-600 rounded-lg p-8 text-center flex-1 flex items-center justify-center\">\n              <div>\n                <FileText className=\"w-12 h-12 mx-auto text-gray-500 mb-4\" />\n                <p className=\"text-gray-400\">Your ATS-optimized resume will appear here</p>\n                <p className=\"text-sm text-gray-500 mt-2\">\n                  Provide your resume and job description, then click \"Tailor My Resume\"\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ResumeTailorSection;\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/components/RouterLoadingHandler.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useRouter' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useLoading } from '@/contexts/LoadingContext';\n\nexport const RouterLoadingHandler = () => {\n  const { showLoader, hideLoader } = useLoading();\n\n  useEffect(() => {\n    let navigationTimer: NodeJS.Timeout | null = null;\n\n    // Listen for browser navigation (back/forward buttons)\n    const handlePopState = () => {\n      showLoader('', 500);\n      \n      // Auto-hide after a maximum time to prevent infinite loading\n      navigationTimer = setTimeout(() => {\n        hideLoader(true); // Force hide\n      }, 3000); // 3 seconds max\n    };\n\n    // Listen for page load completion\n    const handleLoad = () => {\n      if (navigationTimer) {\n        clearTimeout(navigationTimer);\n      }\n      hideLoader();\n    };\n\n    // Listen for DOM content loaded (faster than full load)\n    const handleDOMContentLoaded = () => {\n      if (navigationTimer) {\n        clearTimeout(navigationTimer);\n      }\n      hideLoader();\n    };\n\n    // Only listen to popstate for browser navigation\n    window.addEventListener('popstate', handlePopState);\n    window.addEventListener('load', handleLoad);\n    window.addEventListener('DOMContentLoaded', handleDOMContentLoaded);\n\n    // Clean up on unmount\n    return () => {\n      if (navigationTimer) {\n        clearTimeout(navigationTimer);\n      }\n      window.removeEventListener('popstate', handlePopState);\n      window.removeEventListener('load', handleLoad);\n      window.removeEventListener('DOMContentLoaded', handleDOMContentLoaded);\n    };\n  }, [showLoader, hideLoader]);\n\n  return null;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/components/SettingsForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[511,514],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[511,514],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { SettingsFormProps } from '@/types/auto-apply';\nimport { Button } from '@/components/ui/button';\nimport BanterLoader from '@/components/ui/BanterLoader';\n\nexport const SettingsForm: React.FC<SettingsFormProps> = ({ settings, onChange, onSave, loading }) => {\n  const handleToggleChange = (field: keyof typeof settings, value: boolean) => {\n    onChange({\n      ...settings,\n      [field]: value,\n    });\n  };\n\n  const handleInputChange = (field: keyof typeof settings, value: any) => {\n    onChange({\n      ...settings,\n      [field]: value,\n    });\n  };\n\n  const handleNotificationChange = (field: keyof typeof settings.notifications, value: boolean) => {\n    onChange({\n      ...settings,\n      notifications: {\n        ...settings.notifications,\n        [field]: value,\n      },\n    });\n  };\n\n  return (\n    <div className=\"bg-gray-900 border border-gray-700 p-6 rounded-lg shadow-md space-y-4\">\n      <h3 className=\"text-lg font-semibold text-white\">Auto-Apply Settings</h3>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div>\n          <label className=\"flex items-center\">\n            <input\n              type=\"checkbox\"\n              checked={settings.isEnabled}\n              onChange={(e) => handleToggleChange('isEnabled', e.target.checked)}\n              className=\"mr-2 text-blue-500 bg-gray-800 border-gray-600 rounded focus:ring-blue-500 focus:ring-2\"\n            />\n            <span className=\"text-gray-200\">Enable Auto-Apply</span>\n          </label>\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-200 mb-1\">Daily Application Limit</label>\n          <input\n            type=\"number\"\n            value={settings.dailyApplicationLimit}\n            onChange={(e) => handleInputChange('dailyApplicationLimit', parseInt(e.target.value))}\n            min=\"1\"\n            max=\"50\"\n            className=\"w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-200 mb-1\">Auto-Apply Threshold (%)</label>\n          <input\n            type=\"number\"\n            value={settings.autoApplyThreshold}\n            onChange={(e) => handleInputChange('autoApplyThreshold', parseInt(e.target.value))}\n            min=\"0\"\n            max=\"100\"\n            className=\"w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n          />\n          <p className=\"text-xs text-gray-400 mt-1\">Minimum relevancy score to automatically apply</p>\n        </div>\n\n        <div>\n          <label className=\"flex items-center\">\n            <input\n              type=\"checkbox\"\n              checked={settings.useCustomCoverLetter}\n              onChange={(e) => handleToggleChange('useCustomCoverLetter', e.target.checked)}\n              className=\"mr-2 text-blue-500 bg-gray-800 border-gray-600 rounded focus:ring-blue-500 focus:ring-2\"\n            />\n            <span className=\"text-gray-200\">Use Custom Cover Letter</span>\n          </label>\n        </div>\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-medium text-gray-200 mb-1\">Blacklisted Companies</label>\n        <input\n          type=\"text\"\n          placeholder=\"Company 1, Company 2, ...\"\n          value={settings.blacklistedCompanies.join(', ')}\n          onChange={(e) => {\n            const companies = e.target.value.split(',').map(c => c.trim()).filter(Boolean);\n            handleInputChange('blacklistedCompanies', companies);\n          }}\n          className=\"w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n        />\n      </div>\n\n      <div>\n        <h4 className=\"text-md font-medium text-white mb-2\">Email Notifications</h4>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n          <label className=\"flex items-center\">\n            <input\n              type=\"checkbox\"\n              checked={settings.notifications.newJobsFound}\n              onChange={(e) => handleNotificationChange('newJobsFound', e.target.checked)}\n              className=\"mr-2 text-blue-500 bg-gray-800 border-gray-600 rounded focus:ring-blue-500 focus:ring-2\"\n            />\n            <span className=\"text-gray-200\">New jobs found</span>\n          </label>\n          <label className=\"flex items-center\">\n            <input\n              type=\"checkbox\"\n              checked={settings.notifications.applicationsSubmitted}\n              onChange={(e) => handleNotificationChange('applicationsSubmitted', e.target.checked)}\n              className=\"mr-2 text-blue-500 bg-gray-800 border-gray-600 rounded focus:ring-blue-500 focus:ring-2\"\n            />\n            <span className=\"text-gray-200\">Applications submitted</span>\n          </label>\n          <label className=\"flex items-center\">\n            <input\n              type=\"checkbox\"\n              checked={settings.notifications.errorAlerts}\n              onChange={(e) => handleNotificationChange('errorAlerts', e.target.checked)}\n              className=\"mr-2 text-blue-500 bg-gray-800 border-gray-600 rounded focus:ring-blue-500 focus:ring-2\"\n            />\n            <span className=\"text-gray-200\">Error alerts</span>\n          </label>\n        </div>\n      </div>\n\n      <Button onClick={onSave} disabled={loading} className=\"w-full bg-blue-600 hover:bg-blue-700 text-white border-blue-600\">\n        {loading && <BanterLoader className=\"mr-2\" />}\n        {loading ? 'Saving...' : 'Save Settings'}\n      </Button>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/components/admin/FeatureFlagManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Switch' is defined but never used.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Settings' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Users' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":8},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1055,1058],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1055,1058],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1160,1163],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1160,1163],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Switch } from '@/components/ui/switch';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  Settings, \n  Users, \n  AlertTriangle, \n  CheckCircle, \n  XCircle,\n  RefreshCw,\n  TrendingUp,\n  TrendingDown\n} from 'lucide-react';\n// Define types locally to avoid importing server-only modules\ninterface ErrorBudget {\n  featureName: string;\n  errorThreshold: number;\n  timeWindow: number;\n  currentErrors: number;\n  budgetExceeded: boolean;\n  startTime: Date;\n  endTime: Date;\n}\n\nexport default function FeatureFlagManager() {\n  const [flags, setFlags] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n  const [debugInfo, setDebugInfo] = useState<any>(null);\n  const [errorBudgets, setErrorBudgets] = useState<Record<string, ErrorBudget>>({});\n  const [rolloutPercentages, setRolloutPercentages] = useState({\n    autoApplyAzure: 20,\n    portalIntegration: 15,\n  });\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const loadData = async () => {\n    setLoading(true);\n    try {\n      // Use API calls instead of direct service imports\n      const [flagsResponse, debugResponse] = await Promise.all([\n        fetch('/api/feature-flags'),\n        fetch('/api/admin/feature-flags/debug'),\n      ]);\n      \n      let flagsData = null;\n      let debugData = null;\n      \n      if (flagsResponse.ok) {\n        flagsData = await flagsResponse.json();\n      }\n      \n      if (debugResponse.ok) {\n        debugData = await debugResponse.json();\n      }\n\n      setFlags(flagsData);\n      setDebugInfo(debugData);\n      // Note: Error budgets functionality temporarily disabled - requires API endpoint\n      setErrorBudgets({});\n    } catch (error) {\n      console.error('Error loading admin data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateRolloutPercentage = async (feature: keyof typeof rolloutPercentages, percentage: number) => {\n    if (percentage < 0 || percentage > 100) return;\n    \n    try {\n      // Update via API call\n      const response = await fetch('/api/admin/rollout', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ feature, percentage })\n      });\n      \n      if (response.ok) {\n        setRolloutPercentages(prev => ({ ...prev, [feature]: percentage }));\n        loadData(); // Refresh data\n      } else {\n        console.error('Failed to update rollout percentage');\n      }\n    } catch (error) {\n      console.error('Error updating rollout percentage:', error);\n    }\n  };\n\n  const increaseRollout = (feature: keyof typeof rolloutPercentages, increment: number = 5) => {\n    const newPercentage = Math.min(100, rolloutPercentages[feature] + increment);\n    updateRolloutPercentage(feature, newPercentage);\n  };\n\n  const decreaseRollout = (feature: keyof typeof rolloutPercentages, decrement: number = 5) => {\n    const newPercentage = Math.max(0, rolloutPercentages[feature] - decrement);\n    updateRolloutPercentage(feature, newPercentage);\n  };\n\n  const getBudgetStatus = (budget: ErrorBudget) => {\n    if (budget.budgetExceeded) return 'error';\n    if (budget.currentErrors > budget.errorThreshold * 0.8) return 'warning';\n    return 'ok';\n  };\n\n  const getBudgetColor = (status: string) => {\n    switch (status) {\n      case 'error': return 'text-red-500';\n      case 'warning': return 'text-yellow-500';\n      default: return 'text-green-500';\n    }\n  };\n\n  const getBudgetIcon = (status: string) => {\n    switch (status) {\n      case 'error': return XCircle;\n      case 'warning': return AlertTriangle;\n      default: return CheckCircle;\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"p-6 space-y-4\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-700 rounded w-1/3\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"h-48 bg-gray-800 rounded\"></div>\n            <div className=\"h-48 bg-gray-800 rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold text-white\">Feature Flag Management</h1>\n        <Button onClick={loadData} variant=\"outline\" className=\"flex items-center gap-2\">\n          <RefreshCw className=\"h-4 w-4\" />\n          Refresh\n        </Button>\n      </div>\n\n      <Tabs defaultValue=\"rollout\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"rollout\">Rollout Control</TabsTrigger>\n          <TabsTrigger value=\"monitoring\">Error Monitoring</TabsTrigger>\n          <TabsTrigger value=\"debug\">Debug Info</TabsTrigger>\n        </TabsList>\n\n        {/* Rollout Control */}\n        <TabsContent value=\"rollout\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {/* Auto Apply Azure */}\n            <Card className=\"bg-gray-900 border-gray-700\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center justify-between\">\n                  Auto Apply Azure\n                  <Badge variant={flags?.autoApplyAzure ? \"default\" : \"secondary\"}>\n                    {flags?.autoApplyAzure ? \"Active\" : \"Inactive\"}\n                  </Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label className=\"text-gray-300\">Rollout Percentage</Label>\n                    <span className=\"text-white font-bold\">\n                      {rolloutPercentages.autoApplyAzure}%\n                    </span>\n                  </div>\n                  <Progress \n                    value={rolloutPercentages.autoApplyAzure} \n                    className=\"h-2\"\n                  />\n                </div>\n\n                <div className=\"flex gap-2\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => decreaseRollout('autoApplyAzure')}\n                    className=\"flex items-center gap-1\"\n                  >\n                    <TrendingDown className=\"h-3 w-3\" />\n                    -5%\n                  </Button>\n                  <Button\n                    size=\"sm\" \n                    variant=\"outline\"\n                    onClick={() => increaseRollout('autoApplyAzure')}\n                    className=\"flex items-center gap-1\"\n                  >\n                    <TrendingUp className=\"h-3 w-3\" />\n                    +5%\n                  </Button>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label className=\"text-gray-300\">Custom Percentage</Label>\n                  <div className=\"flex gap-2\">\n                    <Input\n                      type=\"number\"\n                      min=\"0\"\n                      max=\"100\"\n                      value={rolloutPercentages.autoApplyAzure}\n                      onChange={(e) => setRolloutPercentages(prev => ({ \n                        ...prev, \n                        autoApplyAzure: parseInt(e.target.value) || 0 \n                      }))}\n                      className=\"bg-gray-800 border-gray-600 text-white\"\n                    />\n                    <Button\n                      size=\"sm\"\n                      onClick={() => updateRolloutPercentage('autoApplyAzure', rolloutPercentages.autoApplyAzure)}\n                    >\n                      Apply\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Portal Integration */}\n            <Card className=\"bg-gray-900 border-gray-700\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center justify-between\">\n                  Portal Integration\n                  <Badge variant={flags?.portalIntegration ? \"default\" : \"secondary\"}>\n                    {flags?.portalIntegration ? \"Active\" : \"Inactive\"}\n                  </Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label className=\"text-gray-300\">Rollout Percentage</Label>\n                    <span className=\"text-white font-bold\">\n                      {rolloutPercentages.portalIntegration}%\n                    </span>\n                  </div>\n                  <Progress \n                    value={rolloutPercentages.portalIntegration} \n                    className=\"h-2\"\n                  />\n                </div>\n\n                <div className=\"flex gap-2\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => decreaseRollout('portalIntegration')}\n                    className=\"flex items-center gap-1\"\n                  >\n                    <TrendingDown className=\"h-3 w-3\" />\n                    -5%\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => increaseRollout('portalIntegration')}\n                    className=\"flex items-center gap-1\"\n                  >\n                    <TrendingUp className=\"h-3 w-3\" />\n                    +5%\n                  </Button>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label className=\"text-gray-300\">Custom Percentage</Label>\n                  <div className=\"flex gap-2\">\n                    <Input\n                      type=\"number\"\n                      min=\"0\"\n                      max=\"100\"\n                      value={rolloutPercentages.portalIntegration}\n                      onChange={(e) => setRolloutPercentages(prev => ({ \n                        ...prev, \n                        portalIntegration: parseInt(e.target.value) || 0 \n                      }))}\n                      className=\"bg-gray-800 border-gray-600 text-white\"\n                    />\n                    <Button\n                      size=\"sm\"\n                      onClick={() => updateRolloutPercentage('portalIntegration', rolloutPercentages.portalIntegration)}\n                    >\n                      Apply\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Error Monitoring */}\n        <TabsContent value=\"monitoring\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {Object.entries(errorBudgets).map(([featureName, budget]) => {\n              const status = getBudgetStatus(budget);\n              const StatusIcon = getBudgetIcon(status);\n              \n              return (\n                <Card key={featureName} className=\"bg-gray-900 border-gray-700\">\n                  <CardHeader>\n                    <CardTitle className=\"text-white flex items-center gap-2\">\n                      <StatusIcon className={`h-5 w-5 ${getBudgetColor(status)}`} />\n                      {featureName}\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-gray-300\">Error Count</span>\n                      <span className={`font-bold ${getBudgetColor(status)}`}>\n                        {budget.currentErrors} / {budget.errorThreshold}\n                      </span>\n                    </div>\n                    \n                    <Progress \n                      value={(budget.currentErrors / budget.errorThreshold) * 100} \n                      className=\"h-2\"\n                    />\n                    \n                    <div className=\"text-xs text-gray-400\">\n                      Time Window: {budget.timeWindow} minutes\n                    </div>\n                    \n                    {budget.budgetExceeded && (\n                      <Alert className=\"border-red-600 bg-red-900/20\">\n                        <AlertTriangle className=\"h-4 w-4 text-red-400\" />\n                        <AlertDescription className=\"text-red-200\">\n                          Error budget exceeded! Consider reducing rollout.\n                        </AlertDescription>\n                      </Alert>\n                    )}\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </TabsContent>\n\n        {/* Debug Info */}\n        <TabsContent value=\"debug\" className=\"space-y-4\">\n          {debugInfo && (\n            <Card className=\"bg-gray-900 border-gray-700\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Debug Information</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <pre className=\"bg-gray-800 p-4 rounded text-sm text-gray-300 overflow-auto\">\n                  {JSON.stringify(debugInfo, null, 2)}\n                </pre>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/components/admin/analytics-charts.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[714,717],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[714,717],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":95,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":95,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":152,"column":57,"nodeType":null,"messageId":"unusedVar","endLine":152,"endColumn":62}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { DollarSign, Users, TrendingDown, Activity } from 'lucide-react';\n\ninterface AnalyticsData {\n  revenue: {\n    total: number;\n    byDay: { date: string; amount: number }[];\n  };\n  subscriptions: {\n    byPlan: { free: number; premium: number; total: number };\n    byStatus: Record<string, number>;\n    mrr: number;\n  };\n  churn: {\n    rate: number;\n    count: number;\n    period: number;\n  };\n  userGrowth: {\n    total: number;\n    byDay: { date: string; count: number }[];\n  };\n  recentEvents: any[];\n  period: { days: number; start: string; end: string };\n}\n\ninterface AnalyticsChartsProps {\n  data: AnalyticsData;\n}\n\nexport function AnalyticsCharts({ data }: AnalyticsChartsProps) {\n  const maxRevenue = Math.max(...data.revenue.byDay.map(d => d.amount), 1);\n  const premiumPercentage = (data.subscriptions.byPlan.premium / data.subscriptions.byPlan.total) * 100;\n  const freePercentage = (data.subscriptions.byPlan.free / data.subscriptions.byPlan.total) * 100;\n\n  return (\n    <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n      {/* Summary Cards */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Total Revenue</CardTitle>\n          <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">${data.revenue.total.toFixed(2)}</div>\n          <p className=\"text-xs text-muted-foreground\">Last {data.period.days} days</p>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\n          <Users className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">{data.subscriptions.byPlan.total}</div>\n          <p className=\"text-xs text-muted-foreground\">+{data.userGrowth.total} this period</p>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Churn Rate</CardTitle>\n          <TrendingDown className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">{data.churn.rate.toFixed(1)}%</div>\n          <p className=\"text-xs text-muted-foreground\">{data.churn.count} users churned</p>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">MRR Estimate</CardTitle>\n          <Activity className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">${data.subscriptions.mrr.toFixed(2)}</div>\n          <p className=\"text-xs text-muted-foreground\">Monthly recurring</p>\n        </CardContent>\n      </Card>\n\n      {/* Revenue Chart */}\n      <Card className=\"md:col-span-2\">\n        <CardHeader>\n          <CardTitle>Daily Revenue</CardTitle>\n          <CardDescription>Revenue over the last {data.period.days} days</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-2\">\n            {data.revenue.byDay.slice(-7).map((day, index) => (\n              <div key={day.date} className=\"flex items-center space-x-2\">\n                <div className=\"text-sm w-20\">{new Date(day.date).toLocaleDateString()}</div>\n                <div className=\"flex-1\">\n                  <Progress \n                    value={(day.amount / maxRevenue) * 100} \n                    className=\"h-2\" \n                  />\n                </div>\n                <div className=\"text-sm font-medium w-16\">${day.amount.toFixed(2)}</div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Subscription Breakdown */}\n      <Card className=\"md:col-span-2\">\n        <CardHeader>\n          <CardTitle>Subscription Breakdown</CardTitle>\n          <CardDescription>Distribution of users by plan</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <Badge variant=\"secondary\">Free</Badge>\n                  <span className=\"text-sm\">{data.subscriptions.byPlan.free} users</span>\n                </div>\n                <span className=\"text-sm font-medium\">{freePercentage.toFixed(1)}%</span>\n              </div>\n              <Progress value={freePercentage} className=\"h-2\" />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <Badge variant=\"default\">Premium</Badge>\n                  <span className=\"text-sm\">{data.subscriptions.byPlan.premium} users</span>\n                </div>\n                <span className=\"text-sm font-medium\">{premiumPercentage.toFixed(1)}%</span>\n              </div>\n              <Progress value={premiumPercentage} className=\"h-2\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Recent Events */}\n      <Card className=\"md:col-span-4\">\n        <CardHeader>\n          <CardTitle>Recent Subscription Events</CardTitle>\n          <CardDescription>Latest subscription activity</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-2\">\n            {data.recentEvents.slice(0, 10).map((event, index) => (\n              <div key={event.id} className=\"flex items-center justify-between p-2 border rounded\">\n                <div className=\"flex items-center space-x-3\">\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {event.eventType}\n                  </Badge>\n                  <span className=\"text-sm\">{event.userId}</span>\n                </div>\n                <span className=\"text-xs text-muted-foreground\">\n                  {new Date(event.timestamp).toLocaleString()}\n                </span>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/components/authenticated-layout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Settings2' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BarChart3' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CreditCard' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'User2' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Sparkles' is defined but never used.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DropdownMenuShortcut' is defined but never used.","line":60,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SidebarMenuSub' is defined but never used.","line":74,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SidebarMenuSubButton' is defined but never used.","line":75,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":75,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SidebarMenuSubItem' is defined but never used.","line":76,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Separator' is defined but never used.","line":82,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":82,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'activeTeam' is assigned a value but never used.","line":185,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":185,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setActiveTeam' is assigned a value but never used.","line":185,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":185,"endColumn":35}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport * as React from \"react\";\nimport Link from \"next/link\";\nimport Image from \"next/image\";\nimport { usePathname } from \"next/navigation\";\nimport {\n  AudioWaveform,\n  BookOpen,\n  Bot,\n  Command,\n  Frame,\n  GalleryVerticalEnd,\n  Map,\n  PieChart,\n  Settings2,\n  SquareTerminal,\n  Home,\n  MessageSquare,\n  User,\n  Settings,\n  FileText,\n  Shield,\n  Users,\n  BarChart3,\n  CreditCard,\n  Search,\n  ChevronUp,\n  User2,\n  ChevronsUpDown,\n  LogOut,\n  Sparkles,\n  Mail\n} from \"lucide-react\";\nimport {\n  Avatar,\n  AvatarFallback,\n  AvatarImage,\n} from \"@/components/ui/avatar\";\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\";\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarTrigger,\n  SidebarInput\n} from \"@/components/ui/sidebar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useRouter } from \"next/navigation\";\nimport { EmailVerificationBanner } from \"@/components/EmailVerificationBanner\";\n\n// This is sample data.\nconst data = {\n  user: {\n    name: \"PrepBettr User\",\n    email: \"user@prepbettr.com\",\n    avatar: \"/avatars/shadcn.jpg\",\n  },\n  teams: [\n    {\n      name: \"PrepBettr\",\n      logo: GalleryVerticalEnd,\n      plan: \"Enterprise\",\n    },\n    {\n      name: \"Acme Corp.\",\n      logo: AudioWaveform,\n      plan: \"Startup\",\n    },\n    {\n      name: \"Evil Corp.\",\n      logo: Command,\n      plan: \"Free\",\n    },\n  ],\n  navMain: [\n    {\n      title: \"Core Features\",\n      url: \"#\",\n      icon: SquareTerminal,\n      isActive: true,\n      items: [\n        {\n          title: \"Dashboard\",\n          url: \"/dashboard\",\n          icon: Home,\n        },\n        {\n          title: \"Interviews\",\n          url: \"/dashboard/interview\",\n          icon: MessageSquare,\n        },\n        {\n          title: \"Resume Tailor\",\n          url: \"/dashboard/resume-tailor\",\n          icon: FileText,\n        },\n        {\n          title: \"Cover Letter Generator\",\n          url: \"/dashboard/cover-letter-generator\",\n          icon: Mail,\n        },\n        {\n          title: \"Auto Apply\",\n          url: \"/dashboard/auto-apply\",\n          icon: Bot,\n        },\n      ],\n    },\n  ],\n  navSecondary: [\n    {\n      title: \"Support\",\n      url: \"#\",\n      icon: BookOpen,\n    },\n    {\n      title: \"Feedback\",\n      url: \"#\",\n      icon: PieChart,\n    },\n  ],\n  projects: [\n    {\n      name: \"Design Engineering\",\n      url: \"#\",\n      icon: Frame,\n    },\n    {\n      name: \"Sales & Marketing\",\n      url: \"#\",\n      icon: PieChart,\n    },\n    {\n      name: \"Travel\",\n      url: \"#\",\n      icon: Map,\n    },\n  ],\n};\n\ninterface AuthenticatedLayoutProps {\n  children: React.ReactNode;\n}\n\nexport const AuthenticatedLayout = ({ children }: AuthenticatedLayoutProps) => {\n  const pathname = usePathname();\n  const router = useRouter();\n  const { user } = useAuth();\n  const [activeTeam, setActiveTeam] = React.useState(data.teams[0]);\n  const [interviewNames, setInterviewNames] = React.useState<{[key: string]: string}>({});\n\n  // Effect to fetch interview names for breadcrumb display\n  React.useEffect(() => {\n    // Extract interview IDs from current path\n    const pathSegments = (pathname || '').split('/').filter(Boolean);\n    const interviewIndex = pathSegments.findIndex(segment => segment === 'interview');\n    \n    if (interviewIndex !== -1 && pathSegments[interviewIndex + 1]) {\n      const interviewId = pathSegments[interviewIndex + 1];\n      \n      // Only fetch if we don't already have this interview name\n      if (!interviewNames[interviewId] && interviewId.length > 10) { // Basic check for UUID-like ID\n        // For now, we'll use a mock name since we don't have a real API\n        // In a real app, you would fetch from your API\n        const mockInterviewName = `${interviewId.substring(0, 8)}... Interview`;\n        setInterviewNames(prev => ({ ...prev, [interviewId]: mockInterviewName }));\n      }\n    }\n  }, [pathname, interviewNames]);\n\n  const handleLogout = async () => {\n    try {\n      await fetch(\"/api/profile/logout\", { method: \"POST\" });\n      router.push(\"/marketing\");\n      router.refresh();\n    } catch (error) {\n      console.error('Logout failed:', error);\n    }\n  };\n\n  // Check if current route is admin or account\n  const isAdminRoute = pathname?.startsWith('/admin') ?? false;\n  \n  // Add admin items to navigation if on admin route\n  const navMainWithAdmin = isAdminRoute ? [\n    ...data.navMain,\n    {\n      title: \"Administration\",\n      url: \"#\",\n      icon: Shield,\n      isActive: false,\n      items: [\n        {\n          title: \"Admin Dashboard\",\n          url: \"/admin\",\n          icon: Shield,\n        },\n        {\n          title: \"Subscriptions\",\n          url: \"/admin/subscriptions\",\n          icon: Users,\n        },\n      ],\n    }\n  ] : data.navMain;\n\n  return (\n    <SidebarProvider \n      defaultOpen={false}\n      style={{\n        \"--sidebar-width\": \"20rem\", // 320px - larger than default 16rem\n        \"--sidebar-width-mobile\": \"22rem\", // 352px for mobile\n        \"--sidebar-width-icon\": \"5.5rem\", // Further increased collapsed width for better clarity\n      } as React.CSSProperties}\n    >\n      <Sidebar variant=\"sidebar\" collapsible=\"icon\">\n        <SidebarHeader className=\"group-data-[collapsible=icon]:h-16 group-data-[collapsible=icon]:flex group-data-[collapsible=icon]:items-center\">\n          <div className=\"flex items-center justify-center gap-3 px-2 py-2 group-data-[collapsible=icon]:justify-center group-data-[collapsible=icon]:px-0 group-data-[collapsible=icon]:py-0\">\n            <div className=\"flex aspect-square size-8 items-center justify-center rounded-lg text-sidebar-primary-foreground group-data-[collapsible=icon]:size-12\">\n              <Image\n                src=\"/logo.svg\"\n                alt=\"PrepBettr Logo\"\n                width={20}\n                height={20}\n                className=\"size-5 group-data-[collapsible=icon]:size-8\"\n              />\n            </div>\n            <span className=\"text-lg font-bold text-sidebar-foreground group-data-[collapsible=icon]:group-data-[state=collapsed]:hidden\">\n              PrepBettr\n            </span>\n          </div>\n        </SidebarHeader>\n        \n        <SidebarContent className=\"group-data-[collapsible=icon]:flex group-data-[collapsible=icon]:flex-col group-data-[collapsible=icon]:justify-center group-data-[collapsible=icon]:items-center group-data-[collapsible=icon]:h-full\">\n          {/* Search - hidden when collapsed */}\n          <SidebarGroup className=\"py-0 group-data-[collapsible=icon]:hidden\">\n            <SidebarGroupLabel className=\"group relative\">\n              <Search className=\"absolute left-2 top-1/2 size-4 -translate-y-1/2 text-muted-foreground\" />\n              <SidebarInput\n                placeholder=\"Search...\"\n                className=\"pl-8 focus-visible:ring-0\"\n              />\n            </SidebarGroupLabel>\n          </SidebarGroup>\n\n          {/* Navigation */}\n          <div className=\"group-data-[collapsible=icon]:flex group-data-[collapsible=icon]:flex-col group-data-[collapsible=icon]:items-center group-data-[collapsible=icon]:justify-center group-data-[collapsible=icon]:gap-6 group-data-[collapsible=icon]:flex-1\">\n          {navMainWithAdmin.map((item) => (\n            <Collapsible\n              key={item.title}\n              asChild\n              defaultOpen={item.isActive}\n              className=\"group/collapsible\"\n            >\n              <SidebarGroup className=\"mt-8\"> {/* Increased spacing between icons and section titles */}\n                <SidebarGroupLabel asChild>\n                  <CollapsibleTrigger className=\"group/label text-sm text-sidebar-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground flex items-center\">\n                    <item.icon className=\"size-5 mr-3 group-data-[collapsible=icon]:mr-0\" /> {/* Added horizontal gap for expanded state */}\n                    <span className=\"group-data-[collapsible=icon]:hidden\">{item.title}</span>\n                    <ChevronUp className=\"ml-auto size-4 transition-transform duration-200 group-data-[state=closed]/collapsible:rotate-180 group-data-[collapsible=icon]:hidden\" />\n                  </CollapsibleTrigger>\n                </SidebarGroupLabel>\n                <CollapsibleContent>\n                  <SidebarMenu>\n                    {item.items?.map((subItem) => {\n                      const isActive = pathname === subItem.url || \n                        (subItem.url !== '/dashboard' && pathname?.startsWith(subItem.url));\n                      \n                      return (\n                        <SidebarMenuItem key={subItem.title}>\n                          <SidebarMenuButton asChild isActive={isActive} className=\"group-data-[collapsible=icon]:!h-12 group-data-[collapsible=icon]:!p-0\">\n                            <Link href={subItem.url} className=\"flex items-center group-data-[collapsible=icon]:justify-center group-data-[collapsible=icon]:items-center group-data-[collapsible=icon]:h-12 group-data-[collapsible=icon]:w-full\">\n                              <subItem.icon className=\"size-5 mr-3 group-data-[collapsible=icon]:mr-0 group-data-[collapsible=icon]:mx-0\" />\n                              <span className=\"group-data-[collapsible=icon]:hidden\">{subItem.title}</span>\n                            </Link>\n                          </SidebarMenuButton>\n                        </SidebarMenuItem>\n                      );\n                    })}\n                  </SidebarMenu>\n                </CollapsibleContent>\n              </SidebarGroup>\n            </Collapsible>\n          ))}\n          </div>\n\n          {/* Secondary Navigation */}\n          <SidebarGroup className=\"mt-auto group-data-[collapsible=icon]:mt-0\">\n            <SidebarGroupLabel className=\"group-data-[collapsible=icon]:hidden\">Support</SidebarGroupLabel>\n            <SidebarMenu className=\"group-data-[collapsible=icon]:flex group-data-[collapsible=icon]:flex-col group-data-[collapsible=icon]:items-center group-data-[collapsible=icon]:gap-4\">\n              {data.navSecondary.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild size=\"sm\" className=\"group-data-[collapsible=icon]:!h-10 group-data-[collapsible=icon]:!p-0\">\n                    <a href={item.url} className=\"flex items-center group-data-[collapsible=icon]:justify-center group-data-[collapsible=icon]:items-center group-data-[collapsible=icon]:h-10 group-data-[collapsible=icon]:w-full\">\n                      <item.icon className=\"size-5 mr-3 group-data-[collapsible=icon]:mr-0 group-data-[collapsible=icon]:mx-0\" />\n                      <span className=\"group-data-[collapsible=icon]:hidden\">{item.title}</span>\n                    </a>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroup>\n        </SidebarContent>\n        \n        <SidebarFooter>\n          <SidebarMenu>\n            <SidebarMenuItem>\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <SidebarMenuButton\n                    size=\"lg\"\n                    className=\"data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground group-data-[collapsible=icon]:!justify-center group-data-[collapsible=icon]:!items-center group-data-[collapsible=icon]:!h-12 group-data-[collapsible=icon]:!p-0 group-data-[collapsible=icon]:!w-full group-data-[collapsible=icon]:!flex\"\n                  >\n                    <Avatar className=\"h-8 w-8 rounded-lg\">\n                      <AvatarImage\n                        src={user?.picture || data.user.avatar}\n                        alt={user?.name || data.user.name}\n                      />\n                      <AvatarFallback className=\"rounded-lg\">\n                        {(user?.name || user?.email || data.user.name).slice(0, 2).toUpperCase()}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"grid flex-1 text-left text-sm leading-tight group-data-[collapsible=icon]:hidden\">\n                      <span className=\"truncate font-semibold\">\n                        {user?.name || data.user.name}\n                      </span>\n                      <span className=\"truncate text-xs text-muted-foreground\">\n                        {user?.email || data.user.email}\n                      </span>\n                    </div>\n                    <ChevronsUpDown className=\"ml-auto size-4 group-data-[collapsible=icon]:hidden\" />\n                  </SidebarMenuButton>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent\n                  className=\"w-[--radix-dropdown-menu-trigger-width] min-w-56 rounded-lg\"\n                  side=\"bottom\"\n                  align=\"end\"\n                  sideOffset={4}\n                >\n                  <DropdownMenuLabel className=\"p-0 font-normal\">\n                    <div className=\"flex items-center gap-2 px-1 py-1.5 text-left text-sm\">\n                      <Avatar className=\"h-8 w-8 rounded-lg\">\n                        <AvatarImage\n                          src={user?.picture || data.user.avatar}\n                          alt={user?.name || data.user.name}\n                        />\n                        <AvatarFallback className=\"rounded-lg\">\n                          {(user?.name || user?.email || data.user.name).slice(0, 2).toUpperCase()}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"grid flex-1 text-left text-sm leading-tight\">\n                        <span className=\"truncate font-semibold\">\n                          {user?.name || data.user.name}\n                        </span>\n                        <span className=\"truncate text-xs text-muted-foreground\">\n                          {user?.email || data.user.email}\n                        </span>\n                      </div>\n                    </div>\n                  </DropdownMenuLabel>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuGroup>\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/dashboard/profile\">\n                        <User className=\"mr-2 h-4 w-4\" />\n                        Profile\n                      </Link>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/dashboard/settings\">\n                        <Settings className=\"mr-2 h-4 w-4\" />\n                        Settings\n                      </Link>\n                    </DropdownMenuItem>\n                  </DropdownMenuGroup>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem onClick={handleLogout} className=\"cursor-pointer\">\n                    <LogOut className=\"mr-2 h-4 w-4\" />\n                    Log out\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </SidebarMenuItem>\n          </SidebarMenu>\n        </SidebarFooter>\n        <SidebarRail />\n      </Sidebar>\n      \n      <SidebarInset>\n        \n        <header className=\"flex h-16 shrink-0 items-center gap-2 px-6 transition-[width,height] ease-linear group-has-data-[collapsible=icon]/sidebar-wrapper:h-16\">\n          <div className=\"flex items-center gap-2\">\n            <SidebarTrigger className=\"group-data-[collapsible=icon]:ml-0\" />\n            {/* Dynamic Breadcrumb based on current path */}\n            <Breadcrumb>\n              <BreadcrumbList>\n                {(pathname || '').split('/').filter(Boolean).map((segment, index, array) => {\n                  const href = '/' + array.slice(0, index + 1).join('/');\n                  const isLast = index === array.length - 1;\n                  let title = segment.charAt(0).toUpperCase() + segment.slice(1);\n\n                  if (array[index - 1] === 'interview' && interviewNames[segment]) {\n                    title = interviewNames[segment];\n                  }\n                  \n                  return (\n                    <React.Fragment key={segment}>\n                      <BreadcrumbItem className=\"hidden md:block\">\n                        {isLast ? (\n                          <BreadcrumbPage>{title}</BreadcrumbPage>\n                        ) : (\n                          <BreadcrumbLink href={href}>{title}</BreadcrumbLink>\n                        )}\n                      </BreadcrumbItem>\n                      {!isLast && <BreadcrumbSeparator className=\"hidden md:block\" />}\n                    </React.Fragment>\n                  );\n                })}\n              </BreadcrumbList>\n            </Breadcrumb>\n          </div>\n        </header>\n        \n        <div className=\"flex flex-1 flex-col gap-4 p-4 pt-0\">\n<EmailVerificationBanner />\n          {children}\n        </div>\n      </SidebarInset>\n    </SidebarProvider>\n  );\n};\n\nexport default AuthenticatedLayout;\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/components/dynamic/PdfUploadButtonDynamic.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[253,256],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[253,256],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport dynamic from 'next/dynamic';\nimport { UploadCloud } from 'lucide-react';\n\ninterface PdfUploadButtonProps {\n  onQuestionsGenerated?: (result: {\n    questions: string[];\n    fileUrl: string;\n    resumeId: string;\n    extractedData?: any;\n  }) => void;\n  onUploadStart?: () => void;\n  onUploadEnd?: () => void;\n  onResumeReplaced?: () => void;\n}\n\nconst PdfUploadButton = dynamic(\n  () => import('../PdfUploadButtonWrapper'),\n  { \n    ssr: false,\n    loading: () => (\n      <div className=\"relative\">\n        <button\n          type=\"button\"\n          disabled\n          className=\"p-2 text-gray-400 border border-gray-600 rounded-lg bg-gray-800 cursor-not-allowed opacity-50\"\n          aria-label=\"Loading upload button...\"\n          title=\"Loading upload button...\"\n        >\n          <UploadCloud className=\"w-6 h-6 animate-pulse\" />\n        </button>\n      </div>\n    )\n  }\n);\n\nexport default function PdfUploadButtonDynamic(props: PdfUploadButtonProps) {\n  return <PdfUploadButton {...props} />;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/components/providers/TelemetryProvider.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'router' is assigned a value but never used.","line":29,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { telemetry } from '@/lib/utils/telemetry-stub';\n\ninterface TelemetryContextValue {\n  trackPageView: (name: string, properties?: { [key: string]: string }) => Promise<void>;\n  trackEvent: (name: string, properties?: { [key: string]: string }, measurements?: { [key: string]: number }) => Promise<void>;\n  trackUserAction: (action: string, feature: string, properties?: { [key: string]: string }) => Promise<void>;\n  trackFeatureUsage: (featureName: string, properties?: { [key: string]: string }) => Promise<void>;\n  trackButtonClick: (buttonName: string, properties?: { [key: string]: string }) => Promise<void>;\n  trackFormSubmission: (formName: string, success?: boolean, properties?: { [key: string]: string }) => Promise<void>;\n  trackInterviewCompletion: (interviewId: string, questionCount: number, duration: number, score?: number) => Promise<void>;\n  trackResumeUpload: (fileSize: number, mimeType: string, processingTime: number) => Promise<void>;\n  trackError: (error: Error, context?: { [key: string]: string }) => Promise<void>;\n  isInitialized: boolean;\n}\n\nconst TelemetryContext = createContext<TelemetryContextValue | null>(null);\n\ninterface TelemetryProviderProps {\n  children: React.ReactNode;\n}\n\nexport function TelemetryProvider({ children }: TelemetryProviderProps) {\n  const [isInitialized, setIsInitialized] = useState(false);\n  const router = useRouter();\n  const { user } = useAuth();\n\n  useEffect(() => {\n    const initTelemetry = async () => {\n      try {\n        await telemetry.initialize();\n        setIsInitialized(true);\n\n        // Track initial page view\n        await telemetry.trackPageView({\n          name: document.title,\n          uri: window.location.pathname + window.location.search,\n          userId: user?.uid,\n          isLoggedIn: !!user\n        });\n      } catch (error) {\n        console.error('Failed to initialize telemetry:', error);\n      }\n    };\n\n    initTelemetry();\n  }, [user]);\n\n  // Set user context when user changes\n  useEffect(() => {\n    const updateUserContext = async () => {\n      if (!isInitialized) return;\n\n      if (user) {\n        await telemetry.setUser(user.uid, user.email || undefined, {\n          isEmailVerified: user.email_verified?.toString() || 'false',\n          creationTime: 'unknown' // metadata not available in AuthenticatedUser type\n        });\n      } else {\n        await telemetry.clearUser();\n      }\n    };\n\n    updateUserContext();\n  }, [user, isInitialized]);\n\n  // Track route changes\n  useEffect(() => {\n    if (!isInitialized) return;\n\n    const handleRouteChange = async (url: string) => {\n      await telemetry.trackPageView({\n        name: document.title,\n        uri: url,\n        userId: user?.uid,\n        isLoggedIn: !!user\n      });\n    };\n\n    // For Next.js app router, we need to listen for navigation events differently\n    // This is a simplified version - you might need to adjust based on your routing setup\n    const originalPushState = window.history.pushState;\n    const originalReplaceState = window.history.replaceState;\n\n    window.history.pushState = function(...args) {\n      originalPushState.apply(this, args);\n      handleRouteChange(window.location.pathname + window.location.search);\n    };\n\n    window.history.replaceState = function(...args) {\n      originalReplaceState.apply(this, args);\n      handleRouteChange(window.location.pathname + window.location.search);\n    };\n\n    window.addEventListener('popstate', () => {\n      handleRouteChange(window.location.pathname + window.location.search);\n    });\n\n    return () => {\n      window.history.pushState = originalPushState;\n      window.history.replaceState = originalReplaceState;\n      window.removeEventListener('popstate', () => {});\n    };\n  }, [isInitialized, user]);\n\n  const contextValue: TelemetryContextValue = {\n    trackPageView: async (name: string, properties?: { [key: string]: string }) => {\n      await telemetry.trackPageView({\n        name,\n        uri: window.location.pathname + window.location.search,\n        userId: user?.uid,\n        isLoggedIn: !!user,\n        properties\n      });\n    },\n\n    trackEvent: async (name: string, properties?: { [key: string]: string }, measurements?: { [key: string]: number }) => {\n      await telemetry.trackEvent({\n        name,\n        properties: {\n          userId: user?.uid || 'anonymous',\n          ...properties\n        },\n        measurements\n      });\n    },\n\n    trackUserAction: async (action: string, feature: string, properties?: { [key: string]: string }) => {\n      await telemetry.trackUserAction({\n        action,\n        feature,\n        userId: user?.uid,\n        properties\n      });\n    },\n\n    trackFeatureUsage: async (featureName: string, properties?: { [key: string]: string }) => {\n      await telemetry.trackFeatureUsage(featureName, user?.uid, properties);\n    },\n\n    trackButtonClick: async (buttonName: string, properties?: { [key: string]: string }) => {\n      await telemetry.trackButtonClick(buttonName, window.location.pathname, user?.uid, properties);\n    },\n\n    trackFormSubmission: async (formName: string, success?: boolean, properties?: { [key: string]: string }) => {\n      await telemetry.trackFormSubmission(formName, user?.uid, success, properties);\n    },\n\n    trackInterviewCompletion: async (interviewId: string, questionCount: number, duration: number, score?: number) => {\n      if (!user?.uid) return;\n      await telemetry.trackInterviewCompletion(user.uid, interviewId, questionCount, duration, score);\n    },\n\n    trackResumeUpload: async (fileSize: number, mimeType: string, processingTime: number) => {\n      if (!user?.uid) return;\n      await telemetry.trackResumeUpload(user.uid, fileSize, mimeType, processingTime);\n    },\n\n    trackError: async (error: Error, context?: { [key: string]: string }) => {\n      await telemetry.trackError({\n        error,\n        userId: user?.uid,\n        context\n      });\n    },\n\n    isInitialized\n  };\n\n  return (\n    <TelemetryContext.Provider value={contextValue}>\n      {children}\n    </TelemetryContext.Provider>\n  );\n}\n\nexport function useTelemetry(): TelemetryContextValue {\n  const context = useContext(TelemetryContext);\n  if (!context) {\n    throw new Error('useTelemetry must be used within a TelemetryProvider');\n  }\n  return context;\n}\n\nexport default TelemetryProvider;\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/components/test/TestHelperInitializer.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[621,624],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[621,624],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[647,650],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[647,650],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[705,708],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[705,708],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[754,757],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[754,757],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[816,819],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[816,819],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'currentSession' is assigned a value but never used.","line":37,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1167,1170],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1167,1170],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'currentResults' is assigned a value but never used.","line":38,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1203,1206],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1203,1206],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":119,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3879,3882],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3879,3882],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":137,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4751,4754],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4751,4754],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":149,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":149,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5254,5257],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5254,5257],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Test Helper Initializer for E2E Testing\n * \n * This component exposes test helper functions to the browser window object\n * during E2E tests, allowing Playwright tests to simulate various scenarios\n * like voice transcripts, agent failures, network issues, and session state.\n */\n\n'use client';\n\nimport { useEffect } from 'react';\n\ninterface WindowWithTestHelpers extends Window {\n  simulateVoiceTranscript?: (transcript: string) => void;\n  simulateAgentFailure?: (agentType: string) => void;\n  simulateNetworkInterruption?: (duration?: number) => void;\n  simulateSessionTimeout?: () => void;\n  interviewSession?: any;\n  interviewResults?: any;\n  testHelpers?: {\n    setInterviewSession: (session: any) => void;\n    setInterviewResults: (results: any) => void;\n    triggerError: (errorType: string, details?: any) => void;\n  };\n}\n\ndeclare const window: WindowWithTestHelpers;\n\nexport default function TestHelperInitializer() {\n  useEffect(() => {\n    // Only initialize test helpers in test environment\n    if (process.env.NODE_ENV !== 'test' && !process.env.PLAYWRIGHT_TEST) {\n      return;\n    }\n\n    // Store interview session state\n    let currentSession: any = null;\n    let currentResults: any = null;\n\n    // Voice transcript simulation\n    window.simulateVoiceTranscript = (transcript: string) => {\n      console.log('üé§ Test Helper: Simulating voice transcript:', transcript);\n      \n      // Trigger voice transcript event\n      const event = new CustomEvent('voiceTranscript', {\n        detail: {\n          transcript,\n          confidence: 0.95,\n          isFinal: true,\n          timestamp: Date.now()\n        }\n      });\n      \n      document.dispatchEvent(event);\n      \n      // Also dispatch to any voice components that might be listening\n      const voiceEvents = ['speechResult', 'transcriptionResult'];\n      voiceEvents.forEach(eventType => {\n        const voiceEvent = new CustomEvent(eventType, {\n          detail: { transcript, confidence: 0.95, isFinal: true }\n        });\n        document.dispatchEvent(voiceEvent);\n      });\n    };\n\n    // Agent failure simulation\n    window.simulateAgentFailure = (agentType: string) => {\n      console.log('‚ùå Test Helper: Simulating agent failure for:', agentType);\n      \n      const event = new CustomEvent('agentFailure', {\n        detail: {\n          agentType,\n          error: `Simulated ${agentType} agent failure`,\n          timestamp: Date.now(),\n          recoverable: true\n        }\n      });\n      \n      document.dispatchEvent(event);\n    };\n\n    // Network interruption simulation\n    window.simulateNetworkInterruption = (duration = 5000) => {\n      console.log('üåê Test Helper: Simulating network interruption for', duration, 'ms');\n      \n      // Simulate connection lost\n      const disconnectEvent = new CustomEvent('connectionLost', {\n        detail: { timestamp: Date.now(), duration }\n      });\n      document.dispatchEvent(disconnectEvent);\n\n      // Simulate connection restored after duration\n      setTimeout(() => {\n        const reconnectEvent = new CustomEvent('connectionRestored', {\n          detail: { timestamp: Date.now() }\n        });\n        document.dispatchEvent(reconnectEvent);\n        \n        // Add visual indicator for tests\n        const indicator = document.createElement('div');\n        indicator.setAttribute('data-testid', 'connection-restored');\n        indicator.style.display = 'none';\n        document.body.appendChild(indicator);\n      }, duration);\n    };\n\n    // Session timeout simulation\n    window.simulateSessionTimeout = () => {\n      console.log('‚è∞ Test Helper: Simulating session timeout');\n      \n      const event = new CustomEvent('sessionTimeout', {\n        detail: { timestamp: Date.now() }\n      });\n      document.dispatchEvent(event);\n    };\n\n    // Test helper utilities\n    window.testHelpers = {\n      setInterviewSession: (session: any) => {\n        console.log('üìù Test Helper: Setting interview session', session);\n        currentSession = session;\n        window.interviewSession = session;\n        \n        // Add session indicators for tests\n        const sessionIndicator = document.createElement('div');\n        sessionIndicator.setAttribute('data-testid', 'interview-session-active');\n        sessionIndicator.style.display = 'none';\n        document.body.appendChild(sessionIndicator);\n\n        const sessionIdIndicator = document.createElement('div');\n        sessionIdIndicator.setAttribute('data-testid', 'session-id');\n        sessionIdIndicator.setAttribute('data-session-id', session.id || session.config?.sessionId || 'test-session');\n        sessionIdIndicator.style.display = 'none';\n        document.body.appendChild(sessionIdIndicator);\n      },\n\n      setInterviewResults: (results: any) => {\n        console.log('üìä Test Helper: Setting interview results', results);\n        currentResults = results;\n        window.interviewResults = results;\n\n        // Add results indicator for tests\n        const resultsIndicator = document.createElement('div');\n        resultsIndicator.setAttribute('data-testid', 'results-ready');\n        resultsIndicator.style.display = 'none';\n        document.body.appendChild(resultsIndicator);\n      },\n\n      triggerError: (errorType: string, details?: any) => {\n        console.log('üí• Test Helper: Triggering error:', errorType, details);\n        \n        const event = new CustomEvent('testError', {\n          detail: { errorType, details, timestamp: Date.now() }\n        });\n        document.dispatchEvent(event);\n      }\n    };\n\n    // Add global test indicators\n    const addTestIndicator = (testId: string, condition: boolean = true) => {\n      if (condition && !document.querySelector(`[data-testid=\"${testId}\"]`)) {\n        const indicator = document.createElement('div');\n        indicator.setAttribute('data-testid', testId);\n        indicator.style.display = 'none';\n        document.body.appendChild(indicator);\n      }\n    };\n\n    // Add common test indicators\n    addTestIndicator('voice-ready-indicator');\n    addTestIndicator('voice-active-indicator');\n    addTestIndicator('agent-handoff-pending');\n    addTestIndicator('agent-handoff-complete');\n    addTestIndicator('backup-agent-active');\n    addTestIndicator('system-recovered');\n    addTestIndicator('interview-resumed');\n    addTestIndicator('response-processed');\n\n    // Mock current agent indicator\n    const currentAgentIndicator = document.createElement('div');\n    currentAgentIndicator.setAttribute('data-testid', 'current-agent');\n    currentAgentIndicator.textContent = 'TechnicalInterviewer';\n    currentAgentIndicator.style.display = 'none';\n    document.body.appendChild(currentAgentIndicator);\n\n    // Mock current phase indicator\n    const currentPhaseIndicator = document.createElement('div');\n    currentPhaseIndicator.setAttribute('data-testid', 'current-phase');\n    currentPhaseIndicator.textContent = 'technical';\n    currentPhaseIndicator.style.display = 'none';\n    document.body.appendChild(currentPhaseIndicator);\n\n    // Mock questions answered counter\n    const questionsAnsweredIndicator = document.createElement('div');\n    questionsAnsweredIndicator.setAttribute('data-testid', 'questions-answered-count');\n    questionsAnsweredIndicator.textContent = '0';\n    questionsAnsweredIndicator.style.display = 'none';\n    document.body.appendChild(questionsAnsweredIndicator);\n\n    console.log('‚úÖ Test helpers initialized for E2E testing');\n\n    // Cleanup function\n    return () => {\n      // Remove test helpers from window\n      delete window.simulateVoiceTranscript;\n      delete window.simulateAgentFailure;\n      delete window.simulateNetworkInterruption;\n      delete window.simulateSessionTimeout;\n      delete window.testHelpers;\n      delete window.interviewSession;\n      delete window.interviewResults;\n    };\n  }, []);\n\n  // This component renders nothing - it's just for side effects\n  return null;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/components/ui/LoadingStates.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Suspense' is defined but never used.","line":3,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":29}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { ReactNode, Suspense } from 'react';\nimport { Skeleton } from './skeleton';\nimport { Card, CardContent, CardHeader } from './card';\nimport BanterLoader from './BanterLoader';\n\n// Interview card skeleton\nexport function InterviewCardSkeleton() {\n  return (\n    <Card className=\"w-full\">\n      <CardHeader className=\"space-y-2\">\n        <div className=\"flex justify-between items-start\">\n          <Skeleton className=\"h-5 w-32\" />\n          <Skeleton className=\"h-4 w-16\" />\n        </div>\n        <Skeleton className=\"h-4 w-24\" />\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        <div className=\"flex flex-wrap gap-2\">\n          <Skeleton className=\"h-6 w-16\" />\n          <Skeleton className=\"h-6 w-20\" />\n          <Skeleton className=\"h-6 w-18\" />\n        </div>\n        <div className=\"flex justify-between items-center\">\n          <Skeleton className=\"h-4 w-28\" />\n          <Skeleton className=\"h-8 w-24\" />\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Dashboard loading skeleton\nexport function DashboardSkeleton() {\n  return (\n    <div className=\"space-y-8\">\n      {/* Hero section skeleton */}\n      <section className=\"card-cta\">\n        <div className=\"flex flex-col gap-6 max-w-lg\">\n          <Skeleton className=\"h-12 w-96\" />\n          <Skeleton className=\"h-6 w-80\" />\n          <Skeleton className=\"h-10 w-40\" />\n        </div>\n        <div className=\"max-sm:hidden\">\n          <Skeleton className=\"h-80 w-80 rounded-lg\" />\n        </div>\n      </section>\n\n      {/* Interviews section skeleton */}\n      <section className=\"flex flex-col gap-6\">\n        <Skeleton className=\"h-8 w-48\" />\n        <div className=\"interviews-section\">\n          {Array.from({ length: 4 }).map((_, i) => (\n            <InterviewCardSkeleton key={i} />\n          ))}\n        </div>\n      </section>\n    </div>\n  );\n}\n\n// Feedback page skeleton\nexport function FeedbackSkeleton() {\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-8 p-6\">\n      {/* Header skeleton */}\n      <div className=\"space-y-4\">\n        <Skeleton className=\"h-8 w-64\" />\n        <div className=\"flex gap-4\">\n          <Skeleton className=\"h-6 w-20\" />\n          <Skeleton className=\"h-6 w-24\" />\n          <Skeleton className=\"h-6 w-18\" />\n        </div>\n      </div>\n\n      {/* Feedback cards skeleton */}\n      {Array.from({ length: 3 }).map((_, i) => (\n        <Card key={i} className=\"w-full\">\n          <CardHeader>\n            <Skeleton className=\"h-6 w-48\" />\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Skeleton className=\"h-4 w-full\" />\n            <Skeleton className=\"h-4 w-3/4\" />\n            <Skeleton className=\"h-4 w-1/2\" />\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n\n// Interview detail skeleton\nexport function InterviewDetailSkeleton() {\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"space-y-2\">\n        <Skeleton className=\"h-8 w-64\" />\n        <div className=\"flex gap-2\">\n          <Skeleton className=\"h-6 w-16\" />\n          <Skeleton className=\"h-6 w-20\" />\n        </div>\n      </div>\n\n      {/* Questions */}\n      <div className=\"space-y-4\">\n        {Array.from({ length: 5 }).map((_, i) => (\n          <Card key={i}>\n            <CardContent className=\"p-4 space-y-2\">\n              <Skeleton className=\"h-5 w-3/4\" />\n              <Skeleton className=\"h-4 w-full\" />\n              <Skeleton className=\"h-4 w-2/3\" />\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n}\n\n// Real-time status indicator\nexport function RealtimeStatusIndicator({ \n  isConnected, \n  lastUpdate \n}: { \n  isConnected: boolean; \n  lastUpdate?: Date;\n}) {\n  return (\n    <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n      <div \n        className={`w-2 h-2 rounded-full ${\n          isConnected ? 'bg-green-500 animate-pulse' : 'bg-red-500'\n        }`} \n      />\n      <span>\n        {isConnected ? 'Live' : 'Disconnected'}\n        {lastUpdate && (\n          <span className=\"ml-1\">\n            ‚Ä¢ Updated {lastUpdate.toLocaleTimeString()}\n          </span>\n        )}\n      </span>\n    </div>\n  );\n}\n\n// Enhanced suspense wrapper with error boundary\ninterface DataSuspenseProps {\n  children: ReactNode;\n  fallback?: ReactNode;\n  error?: string | null;\n  isLoading?: boolean;\n  isEmpty?: boolean;\n  emptyMessage?: string;\n}\n\nexport function DataSuspense({\n  children,\n  fallback,\n  error,\n  isLoading,\n  isEmpty = false,\n  emptyMessage = \"No data available\"\n}: DataSuspenseProps) {\n  // Show error state\n  if (error) {\n    return (\n      <Card className=\"w-full p-6 text-center\">\n        <CardContent>\n          <div className=\"text-destructive mb-2\">‚ö†Ô∏è Error</div>\n          <p className=\"text-muted-foreground\">{error}</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Show loading state\n  if (isLoading) {\n    return fallback || <BanterLoader text=\"Loading...\" />;\n  }\n\n  // Show empty state\n  if (isEmpty) {\n    return (\n      <Card className=\"w-full p-6 text-center\">\n        <CardContent>\n          <div className=\"text-muted-foreground mb-2\">üì≠</div>\n          <p className=\"text-muted-foreground\">{emptyMessage}</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Show data\n  return <>{children}</>;\n}\n\n// Optimistic update indicator\nexport function OptimisticUpdateIndicator({ \n  isPending, \n  message = \"Saving...\" \n}: { \n  isPending: boolean; \n  message?: string;\n}) {\n  if (!isPending) return null;\n\n  return (\n    <div className=\"flex items-center gap-2 text-xs text-muted-foreground bg-muted px-2 py-1 rounded\">\n      <div className=\"w-3 h-3 border-2 border-primary border-t-transparent rounded-full animate-spin\" />\n      <span>{message}</span>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/components/ui/TimelineCompact.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'rem' is defined but never used.","line":2,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'IconRepeat' is defined but never used.","line":3,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":59},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'IconRocket' is defined but never used.","line":3,"column":79,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":89},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'theme' is assigned a value but never used.","line":7,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'resolvedTheme' is assigned a value but never used.","line":7,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":31}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { Timeline, Text, rem } from '@mantine/core';\nimport { IconUpload, IconBulb, IconMessageDots, IconRepeat, IconQuestionMark, IconRocket, IconTarget, IconTrophy, IconAnalyze } from '@tabler/icons-react';\nimport { useTheme } from 'next-themes';\n\nexport default function TimelineCompact() {\n  const { theme, resolvedTheme } = useTheme();\n  \n  return (\n    <div className=\"w-full h-full flex items-center justify-center p-4\">\n      <Timeline\n        active={7}\n        bulletSize={32}\n        lineWidth={3}\n        radius=\"lg\"\n        color=\"dark\"\n        classNames={{\n          root: 'w-full max-w-md',\n          item: 'mb-2 last:mb-0',\n          itemTitle: 'text-sm md:text-base font-bold text-neutral-900 dark:text-white mb-1 tracking-tight',\n          itemBullet: '!bg-black !border !border-white [&>*]:!bg-black',\n          itemBody: 'text-xs text-neutral-600 dark:text-neutral-300 leading-relaxed font-normal',\n        }}\n        styles={{\n          itemBullet: {\n            backgroundColor: '#000000 !important',\n            border: '1px solid white !important',\n            borderRadius: '50% !important',\n          },\n        }}\n      >\n        <Timeline.Item \n          title=\"Upload Your Resume\" \n          bullet={<IconUpload size={16} color=\"white\" />}\n        >\n          <Text className=\"text-xs text-neutral-500 dark:text-neutral-400\">\n            Upload your resume and let our AI analyze your experience\n          </Text>\n        </Timeline.Item>\n        <Timeline.Item \n          title=\"AI Question Generation\" \n          bullet={<IconQuestionMark size={16} color=\"white\" />}\n        >\n          <Text className=\"text-xs text-neutral-500 dark:text-neutral-400\">\n            Get personalized questions based on your target role\n          </Text>\n        </Timeline.Item>\n        <Timeline.Item \n          title=\"Practice Interview\" \n          bullet={<IconBulb size={16} color=\"white\" />}\n        >\n          <Text className=\"text-xs text-neutral-500 dark:text-neutral-400\">\n            Practice with voice or text-based mock interviews\n          </Text>\n        </Timeline.Item>\n        <Timeline.Item \n          title=\"Real-time Feedback\" \n          bullet={<IconMessageDots size={16} color=\"white\" />}\n        >\n          <Text className=\"text-xs text-neutral-500 dark:text-neutral-400\">\n            Receive instant AI-powered feedback and suggestions\n          </Text>\n        </Timeline.Item>\n        <Timeline.Item \n          title=\"Performance Analytics\" \n          bullet={<IconAnalyze size={16} color=\"white\" />}\n        >\n          <Text className=\"text-xs text-neutral-500 dark:text-neutral-400\">\n            Track your progress with detailed analytics\n          </Text>\n        </Timeline.Item>\n        <Timeline.Item \n          title=\"Skill Improvement\" \n          bullet={<IconTarget size={16} color=\"white\" />}\n        >\n          <Text className=\"text-xs text-neutral-500 dark:text-neutral-400\">\n            Focus on weak areas with targeted practice\n          </Text>\n        </Timeline.Item>\n        <Timeline.Item \n          title=\"Land Your Dream Job\" \n          bullet={<IconTrophy size={16} color=\"white\" />}\n        >\n          <Text className=\"text-xs text-neutral-500 dark:text-neutral-400\">\n            Apply with confidence and ace your interviews\n          </Text>\n        </Timeline.Item>\n      </Timeline>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/components/ui/bento-grid-features.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'motion' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":16},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":114,"column":11,"nodeType":"JSXOpeningElement","endLine":120,"endColumn":13},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":141,"column":11,"nodeType":"JSXOpeningElement","endLine":147,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport createGlobe from \"cobe\";\nimport { useEffect, useRef } from \"react\";\nimport { motion } from \"motion/react\";\nimport { IconBrandYoutubeFilled } from \"@tabler/icons-react\";\nimport TimelineCompact from \"./TimelineCompact\";\n\n\nexport function FeaturesSectionDemo() {\n  const features = [\n    {\n      title: \"Hack job hunting\",\n      description:\n        \"Manage your entire application pipeline with a single click.\",\n      skeleton: <SkeletonOne />,\n      className:\n        \"col-span-1 lg:col-span-4 border-b lg:border-r dark:border-neutral-800\",\n    },\n    {\n      title: \"Mock interviews\",\n      description:\n        \"Practice with AI-generated questions tailored to your target role and get instant feedback.\",\n      skeleton: <SkeletonTwo />,\n      className: \"border-b col-span-1 lg:col-span-2 dark:border-neutral-800\",\n    },\n    {\n      title: \"Watch our AI on YouTube\",\n      description:\n        \"Learn how to land your next role in just 30* days\",\n      skeleton: <SkeletonThree />,\n      className:\n        \"col-span-1 lg:col-span-3 lg:border-r  dark:border-neutral-800\",\n    },\n    {\n      title: \"Used by Learners Everywhere\",\n      description:\n        \"Join thousands of users who trust PrepBettr to advance their careers.\",\n      skeleton: <SkeletonFour />,\n      className: \"col-span-1 lg:col-span-3 border-b lg:border-none\",\n    },\n  ];\n  return (\n    <div className=\"relative z-20 py-10 lg:py-40 max-w-7xl mx-auto bg-black\">\n      <div className=\"px-8\">\n        <h4 className=\"text-3xl lg:text-5xl lg:leading-tight max-w-5xl mx-auto text-center tracking-tight font-medium text-black dark:text-white\">\n          Packed with everything you need\n        </h4>\n\n        <p className=\"text-sm lg:text-base  max-w-2xl  my-4 mx-auto text-neutral-500 text-center font-normal dark:text-neutral-300\">\n          From ATS Resume Optimizer, Cover Letter Generator, Auto-Apply and Smart Tracker, \n          Everything you need to master your job application process\n        </p>\n      </div>\n\n      <div className=\"relative \">\n        <div className=\"grid grid-cols-1 lg:grid-cols-6 mt-12 xl:border rounded-md dark:border-neutral-800\">\n          {features.map((feature) => (\n            <FeatureCard key={feature.title} className={feature.className}>\n              <FeatureTitle>{feature.title}</FeatureTitle>\n              <FeatureDescription>{feature.description}</FeatureDescription>\n              <div className=\" h-full w-full\">{feature.skeleton}</div>\n            </FeatureCard>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst FeatureCard = ({\n  children,\n  className,\n}: {\n  children?: React.ReactNode;\n  className?: string;\n}) => {\n  return (\n    <div className={cn(`p-4 sm:p-8 relative overflow-hidden`, className)}>\n      {children}\n    </div>\n  );\n};\n\nconst FeatureTitle = ({ children }: { children?: React.ReactNode }) => {\n  return (\n    <p className=\" max-w-5xl mx-auto text-left tracking-tight text-black dark:text-white text-xl md:text-2xl md:leading-snug\">\n      {children}\n    </p>\n  );\n};\n\nconst FeatureDescription = ({ children }: { children?: React.ReactNode }) => {\n  return (\n    <p\n      className={cn(\n        \"text-sm md:text-base  max-w-4xl text-left mx-auto\",\n        \"text-neutral-500 text-center font-normal dark:text-neutral-300\",\n        \"text-left max-w-sm mx-0 md:text-sm my-2\"\n      )}\n    >\n      {children}\n    </p>\n  );\n};\n\nexport const SkeletonOne = () => {\n  return (\n    <div className=\"relative flex py-8 px-2 gap-10 h-full\">\n      <div className=\"w-full  p-5  mx-auto bg-transparent shadow-2xl group h-full\">\n        <div className=\"flex flex-1 w-full h-full flex-col space-y-2  \">\n          {/* TODO */}\n          <img\n            src=\"/ProductMockup2.png\"\n            alt=\"header\"\n            width={800}\n            height={800}\n            className=\"h-full w-full aspect-square object-cover object-left-top rounded-sm\"\n          />\n        </div>\n      </div>\n\n      <div className=\"absolute bottom-0 z-40 inset-x-0 h-60 bg-gradient-to-t from-white dark:from-black via-white dark:via-black to-transparent w-full pointer-events-none\" />\n      <div className=\"absolute top-0 z-40 inset-x-0 h-60 bg-gradient-to-b from-white dark:from-black via-transparent to-transparent w-full pointer-events-none\" />\n    </div>\n  );\n};\n\nexport const SkeletonThree = () => {\n  return (\n    <a\n      href=\"https://www.youtube.com/watch?v=RPa3_AD1_Vs\"\n      target=\"__blank\"\n      className=\"relative flex gap-10  h-full group/image\"\n    >\n      <div className=\"w-full  mx-auto bg-transparent dark:bg-transparent group h-full\">\n        <div className=\"flex flex-1 w-full h-full flex-col space-y-2  relative\">\n          {/* TODO */}\n          <IconBrandYoutubeFilled className=\"h-20 w-20 absolute z-10 inset-0 text-red-500 m-auto \" />\n          <img\n            src=\"/YTThumbnail.png\"\n            alt=\"YouTube video thumbnail\"\n            width={800}\n            height={800}\n            className=\"h-full w-full aspect-square object-cover object-center rounded-sm blur-none group-hover/image:blur-md transition-all duration-200\"\n          />\n        </div>\n      </div>\n    </a>\n  );\n};\n\nexport const SkeletonTwo = () => {\n  return (\n    <div className=\"relative flex flex-col items-center justify-center h-full w-full\">\n      <TimelineCompact />\n    </div>\n  );\n};\n\nexport const SkeletonFour = () => {\n  return (\n    <div className=\"h-60 md:h-60  flex flex-col items-center justify-center relative bg-transparent dark:bg-transparent mt-10\">\n      <Globe className=\"absolute left-1/2 transform -translate-x-1/2 translate-y-32\" />\n    </div>\n  );\n};\n\nexport const Globe = ({ className }: { className?: string }) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    let phi = 0;\n\n    if (!canvasRef.current) return;\n\n    const globe = createGlobe(canvasRef.current, {\n      devicePixelRatio: 2,\n      width: 600 * 2,\n      height: 600 * 2,\n      phi: 0,\n      theta: 0,\n      dark: 1,\n      diffuse: 1.2,\n      mapSamples: 16000,\n      mapBrightness: 6,\n      baseColor: [0.3, 0.3, 0.3],\n      markerColor: [0.1, 0.8, 1],\n      glowColor: [1, 1, 1],\n      markers: [\n        // longitude latitude\n        { location: [37.7595, -122.4367], size: 0.03 }, // San Francisco\n        { location: [40.7128, -74.006], size: 0.1 }, // New York\n        { location: [51.5074, -0.1278], size: 0.08 }, // London\n        { location: [48.8566, 2.3522], size: 0.06 }, // Paris\n        { location: [35.6762, 139.6503], size: 0.09 }, // Tokyo\n        { location: [55.7558, 37.6176], size: 0.05 }, // Moscow\n        { location: [-33.8688, 151.2093], size: 0.07 }, // Sydney\n        { location: [19.4326, -99.1332], size: 0.04 }, // Mexico City\n        { location: [-23.5505, -46.6333], size: 0.06 }, // S√£o Paulo\n        { location: [28.6139, 77.209], size: 0.08 }, // New Delhi\n        { location: [39.9042, 116.4074], size: 0.07 }, // Beijing\n        { location: [1.3521, 103.8198], size: 0.05 }, // Singapore\n        { location: [25.2048, 55.2708], size: 0.04 }, // Dubai\n        { location: [-26.2041, 28.0473], size: 0.06 }, // Johannesburg\n        { location: [52.3676, 4.9041], size: 0.05 }, // Amsterdam\n        { location: [59.9311, 10.7583], size: 0.04 }, // Oslo\n        { location: [41.9028, 12.4964], size: 0.05 }, // Rome\n        { location: [50.1109, 8.6821], size: 0.04 }, // Frankfurt\n        { location: [43.6532, -79.3832], size: 0.06 }, // Toronto\n        { location: [49.2827, -123.1207], size: 0.05 }, // Vancouver\n        { location: [-34.6037, -58.3816], size: 0.07 }, // Buenos Aires\n        { location: [30.0444, 31.2357], size: 0.05 }, // Cairo\n        { location: [13.7563, 100.5018], size: 0.06 }, // Bangkok\n        { location: [60.1699, 24.9384], size: 0.04 }, // Helsinki\n        { location: [-1.2921, 36.8219], size: 0.05 }, // Nairobi\n      ],\n      onRender: (state) => {\n        // Called on every animation frame.\n        // `state` will be an empty object, return updated params.\n        state.phi = phi;\n        phi += 0.01;\n      },\n    });\n\n    return () => {\n      globe.destroy();\n    };\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      style={{ width: 600, height: 600, maxWidth: \"100%\", aspectRatio: 1 }}\n      className={className}\n    />\n  );\n};\n\n// Export alias for backward compatibility\nexport const BentoGridFeatures = FeaturesSectionDemo;\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/actions/auth.action.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'auth' is assigned a value but never used.","line":22,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Authentication Actions\n * \n * Compatibility layer that bridges components with the unified auth system\n */\n\nimport {\n  getUnifiedAuth,\n  verifyToken,\n  AuthenticatedUser,\n  AuthResult\n} from '@/lib/shared/auth';\nimport { cookies } from 'next/headers';\n\n/**\n * Check if the current user is authenticated\n * @param token - Optional token to verify\n * @returns Promise<boolean>\n */\nexport async function isAuthenticated(token?: string): Promise<boolean> {\n  try {\n    const auth = getUnifiedAuth();\n    \n    if (token) {\n      const result = await verifyToken(token);\n      return result.valid;\n    }\n    \n    // For server-side checks, read session cookie\n    const cookieStore = await cookies();\n    const sessionCookie = cookieStore.get('session');\n    \n    if (!sessionCookie?.value) {\n      console.log('üîí Server auth check: No session cookie found');\n      return false;\n    }\n    \n    const sessionValue = sessionCookie.value.trim();\n    \n    // Accept mock tokens for development\n    if (sessionValue.startsWith('mock-token-')) {\n      console.log('üîí Server auth check: Found mock token');\n      return true;\n    }\n    \n    // For Firebase session cookies/tokens, validate structure\n    if (sessionValue.includes('.')) {\n      const parts = sessionValue.split('.');\n      if (parts.length >= 3) {\n        try {\n          // Try to decode the payload without verification (for performance)\n          const payload = JSON.parse(atob(parts[1].replace(/-/g, '+').replace(/_/g, '/')));\n          \n          // Check if token is not obviously expired\n          const now = Math.floor(Date.now() / 1000);\n          if (payload.exp && payload.exp < now) {\n            console.log('üîí Server auth check: Token expired');\n            return false;\n          }\n          \n          console.log('üîí Server auth check: Valid JWT structure found');\n          return true;\n        } catch (decodeError) {\n          console.error('üîí Server auth check: Failed to decode token payload:', decodeError);\n          return false;\n        }\n      }\n    }\n    \n    // Fallback for non-JWT tokens\n    const hasValidLength = sessionValue.length > 0;\n    console.log('üîí Server auth check: Non-JWT token validation:', hasValidLength);\n    \n    return hasValidLength;\n  } catch (error) {\n    console.error('üîí Server auth check error:', error);\n    return false;\n  }\n}\n\n/**\n * Get the current authenticated user\n * @param token - Auth token\n * @returns Promise<AuthenticatedUser | null>\n */\nexport async function getCurrentUser(token?: string): Promise<AuthenticatedUser | null> {\n  try {\n    if (token) {\n      const result = await verifyToken(token);\n      return result.valid ? result.user || null : null;\n    }\n    \n    // For server-side, try to extract user from session cookie\n    const cookieStore = await cookies();\n    const sessionCookie = cookieStore.get('session');\n    \n    if (!sessionCookie?.value) {\n      console.log('üîí Server getCurrentUser: No session cookie found');\n      return null;\n    }\n    \n    const sessionValue = sessionCookie.value.trim();\n    \n    // Handle mock tokens for development\n    if (sessionValue.startsWith('mock-token-')) {\n      console.log('üîí Server getCurrentUser: Using mock user');\n      return { uid: 'mock-user', email: 'mock@example.com', email_verified: true };\n    }\n    \n    // For Firebase session cookies/tokens, extract user from payload\n    if (sessionValue.includes('.')) {\n      const parts = sessionValue.split('.');\n      if (parts.length >= 3) {\n        try {\n          const payload = JSON.parse(atob(parts[1].replace(/-/g, '+').replace(/_/g, '/')));\n          \n          // Check if token is expired\n          const now = Math.floor(Date.now() / 1000);\n          if (payload.exp && payload.exp < now) {\n            console.log('üîí Server getCurrentUser: Token expired');\n            return null;\n          }\n          \n          console.log('üîí Server getCurrentUser: Extracted user from session cookie');\n          return {\n            uid: payload.uid || payload.sub || 'unknown',\n            email: payload.email || 'unknown@session.com',\n            email_verified: payload.email_verified || false,\n            name: payload.name || payload.display_name\n          };\n        } catch (decodeError) {\n          console.error('üîí Server getCurrentUser: Failed to decode session payload:', decodeError);\n          return null;\n        }\n      }\n    }\n    \n    // Fallback for non-JWT tokens - return minimal user info\n    if (sessionValue.length > 0) {\n      console.log('üîí Server getCurrentUser: Using fallback session user');\n      return { uid: 'session-user', email: 'unknown@session.com', email_verified: false };\n    }\n    \n    return null;\n  } catch (error) {\n    console.error('üîí Server getCurrentUser error:', error);\n    return null;\n  }\n}\n\n/**\n * Sign out the current user (client-side)\n * This is a compatibility function - actual sign out happens on client\n */\nexport async function signOut(): Promise<void> {\n  // In a real implementation, this would handle server-side logout\n  // For now, this is a placeholder for client-side logout\n  if (typeof window !== 'undefined') {\n    // Clear any client-side auth state\n    localStorage.removeItem('auth_token');\n    sessionStorage.removeItem('auth_token');\n  }\n}\n\n/**\n * Sign in with credentials (server-side validation)\n * @param token - Firebase ID token\n * @returns Promise<AuthResult>\n */\nexport async function signIn(token: string): Promise<AuthResult> {\n  try {\n    const result = await verifyToken(token);\n    return {\n      success: result.valid,\n      user: result.user || null,\n      error: result.error\n    };\n  } catch (error) {\n    return {\n      success: false,\n      user: null,\n      error: error instanceof Error ? error.message : 'Authentication failed'\n    };\n  }\n}\n\n/**\n * Verify Firebase token (legacy compatibility)\n * @param token - Firebase ID token\n * @returns Promise<AuthResult>\n */\nexport async function verifyFirebaseToken(token: string): Promise<AuthResult> {\n  return signIn(token);\n}\n\n// Re-export types for convenience\nexport type { AuthenticatedUser, AuthResult };\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/actions/feedback.action.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'interviewId' is defined but never used.","line":6,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":59}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Static export stubs\nexport async function generateFeedback() {\n  return { error: 'Static mode' };\n}\n\nexport async function getFeedbackByInterviewId(interviewId: string) {\n  return { success: false, feedback: null, error: 'Static mode', details: 'Auth disabled in static mode' };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/actions/general.action.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'params' is defined but never used.","line":6,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[155,158],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[155,158],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'params' is defined but never used.","line":10,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":54},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[289,292],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[289,292],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[370,373],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[370,373],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Static export stubs\nexport async function startVoiceConversation() {\n  return { error: 'Static mode' };\n}\n\nexport async function createFeedback(params: any) {\n  return { success: false, feedbackId: null, error: 'Static mode' };\n}\n\nexport async function getFeedbackByInterviewId(params: any) {\n  // Return null for static mode - no feedback available\n  return null as any;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/ai/__tests__/azureOpenAI.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":98,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2795,2798],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2795,2798],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":124,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3710,3713],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3710,3713],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":134,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4038,4041],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4038,4041],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":164,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4968,4971],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4968,4971],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":183,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":183,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5593,5596],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5593,5596],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":198,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":198,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5974,5977],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5974,5977],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":213,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":213,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6405,6408],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6405,6408],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":340,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":340,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10476,10479],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10476,10479],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":369,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":369,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11409,11412],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11409,11412],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":387,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":387,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11973,11976],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11973,11976],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Unit tests for the Azure OpenAI Adapter\n */\n\nimport { AzureOpenAIAdapter } from '../azureOpenAI';\nimport { azureOpenAIService } from '@/lib/services/azure-openai-service';\n\n// Mock the Azure OpenAI service\njest.mock('@/lib/services/azure-openai-service');\n\ndescribe('AzureOpenAIAdapter', () => {\n  let adapter: AzureOpenAIAdapter;\n  let mockService: jest.Mocked<typeof azureOpenAIService>;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Set up mock service\n    mockService = azureOpenAIService as jest.Mocked<typeof azureOpenAIService>;\n    \n    adapter = new AzureOpenAIAdapter();\n  });\n\n  afterEach(() => {\n    adapter.dispose();\n  });\n\n  describe('Initialization', () => {\n    it('should initialize successfully when service initializes', async () => {\n      mockService.initialize.mockResolvedValue(true);\n\n      const result = await adapter.initialize();\n\n      expect(result).toBe(true);\n      expect(mockService.initialize).toHaveBeenCalled();\n    });\n\n    it('should fail to initialize when service fails', async () => {\n      mockService.initialize.mockResolvedValue(false);\n\n      const result = await adapter.initialize();\n\n      expect(result).toBe(false);\n      expect(mockService.initialize).toHaveBeenCalled();\n    });\n\n    it('should handle initialization errors', async () => {\n      const error = new Error('Azure credentials not found');\n      mockService.initialize.mockRejectedValue(error);\n\n      const result = await adapter.initialize();\n\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('isReady', () => {\n    it('should return true when initialized and service is ready', async () => {\n      mockService.initialize.mockResolvedValue(true);\n      mockService.isReady.mockReturnValue(true);\n\n      await adapter.initialize();\n\n      expect(adapter.isReady()).toBe(true);\n    });\n\n    it('should return false when not initialized', () => {\n      mockService.isReady.mockReturnValue(true);\n\n      expect(adapter.isReady()).toBe(false);\n    });\n\n    it('should return false when service is not ready', async () => {\n      mockService.initialize.mockResolvedValue(true);\n      mockService.isReady.mockReturnValue(false);\n\n      await adapter.initialize();\n\n      expect(adapter.isReady()).toBe(false);\n    });\n  });\n\n  describe('generateCoverLetter', () => {\n    beforeEach(async () => {\n      mockService.initialize.mockResolvedValue(true);\n      mockService.isReady.mockReturnValue(true);\n      await adapter.initialize();\n    });\n\n    it('should generate cover letter successfully', async () => {\n      const mockCompletion = {\n        choices: [{\n          message: {\n            content: 'Dear Hiring Manager, I am excited to apply...'\n          }\n        }]\n      };\n      mockService.createCompletion.mockResolvedValue(mockCompletion as any);\n\n      const result = await adapter.generateCoverLetter('resume text', 'job description');\n\n      expect(mockService.createCompletion).toHaveBeenCalledWith(\n        [{ role: 'user', content: expect.stringContaining('job description') }],\n        { temperature: 0.7, maxTokens: 1500 }\n      );\n      expect(result).toBe('Dear Hiring Manager, I am excited to apply...');\n    });\n\n    it('should throw error when not initialized', async () => {\n      const uninitializedAdapter = new AzureOpenAIAdapter();\n\n      await expect(uninitializedAdapter.generateCoverLetter('resume', 'job'))\n        .rejects.toThrow('Azure OpenAI adapter not initialized');\n    });\n\n    it('should handle empty response', async () => {\n      const mockCompletion = {\n        choices: [{\n          message: {\n            content: ''\n          }\n        }]\n      };\n      mockService.createCompletion.mockResolvedValue(mockCompletion as any);\n\n      await expect(adapter.generateCoverLetter('resume', 'job'))\n        .rejects.toThrow('Empty response from Azure OpenAI');\n    });\n\n    it('should handle missing choices', async () => {\n      const mockCompletion = {\n        choices: []\n      };\n      mockService.createCompletion.mockResolvedValue(mockCompletion as any);\n\n      await expect(adapter.generateCoverLetter('resume', 'job'))\n        .rejects.toThrow('Empty response from Azure OpenAI');\n    });\n\n    it('should handle API errors', async () => {\n      const apiError = new Error('Rate limit exceeded');\n      mockService.createCompletion.mockRejectedValue(apiError);\n\n      await expect(adapter.generateCoverLetter('resume', 'job'))\n        .rejects.toThrow('Rate limit exceeded');\n    });\n  });\n\n  describe('calculateRelevancy', () => {\n    beforeEach(async () => {\n      mockService.initialize.mockResolvedValue(true);\n      mockService.isReady.mockReturnValue(true);\n      await adapter.initialize();\n    });\n\n    it('should calculate relevancy score successfully', async () => {\n      const mockCompletion = {\n        choices: [{\n          message: {\n            content: '87'\n          }\n        }]\n      };\n      mockService.createCompletion.mockResolvedValue(mockCompletion as any);\n\n      const result = await adapter.calculateRelevancy('resume text', 'job description');\n\n      expect(mockService.createCompletion).toHaveBeenCalledWith(\n        [{ role: 'user', content: expect.stringContaining('ATS') }],\n        { temperature: 0.1, maxTokens: 50 }\n      );\n      expect(result).toBe(87);\n    });\n\n    it('should handle response with extra text', async () => {\n      const mockCompletion = {\n        choices: [{\n          message: {\n            content: 'Based on the analysis, the score is 94.'\n          }\n        }]\n      };\n      mockService.createCompletion.mockResolvedValue(mockCompletion as any);\n\n      const result = await adapter.calculateRelevancy('resume', 'job');\n\n      expect(result).toBe(94);\n    });\n\n    it('should clamp scores to valid range', async () => {\n      const mockCompletion = {\n        choices: [{\n          message: {\n            content: '150'\n          }\n        }]\n      };\n      mockService.createCompletion.mockResolvedValue(mockCompletion as any);\n\n      const result = await adapter.calculateRelevancy('resume', 'job');\n\n      expect(result).toBe(100); // Clamped to maximum\n    });\n\n    it('should throw error when no score found', async () => {\n      const mockCompletion = {\n        choices: [{\n          message: {\n            content: 'No numeric value available'\n          }\n        }]\n      };\n      mockService.createCompletion.mockResolvedValue(mockCompletion as any);\n\n      await expect(adapter.calculateRelevancy('resume', 'job'))\n        .rejects.toThrow('Could not extract relevancy score from response');\n    });\n  });\n\n  describe('tailorResume', () => {\n    beforeEach(async () => {\n      mockService.initialize.mockResolvedValue(true);\n      mockService.isReady.mockReturnValue(true);\n      await adapter.initialize();\n    });\n\n    it('should tailor resume successfully', async () => {\n      const tailoredContent = 'John Doe\\nSenior Software Engineer...';\n      mockService.tailorResume.mockResolvedValue(tailoredContent);\n\n      const result = await adapter.tailorResume('original resume', 'job description');\n\n      expect(mockService.tailorResume).toHaveBeenCalledWith('original resume', 'job description');\n      expect(result).toBe(tailoredContent);\n    });\n\n    it('should handle service errors', async () => {\n      const error = new Error('Azure OpenAI service error');\n      mockService.tailorResume.mockRejectedValue(error);\n\n      await expect(adapter.tailorResume('resume', 'job'))\n        .rejects.toThrow('Azure OpenAI service error');\n    });\n  });\n\n  describe('generateQuestions', () => {\n    beforeEach(async () => {\n      mockService.initialize.mockResolvedValue(true);\n      mockService.isReady.mockReturnValue(true);\n      await adapter.initialize();\n    });\n\n    it('should generate questions successfully', async () => {\n      const questions = [\n        'Tell me about your experience',\n        'How do you handle challenges?',\n        'What are your strengths?'\n      ];\n      mockService.generateQuestions.mockResolvedValue(questions);\n\n      const resumeInfo = {\n        name: 'John Doe',\n        experience: '5 years',\n        education: 'BS',\n        skills: 'React, Node.js'\n      };\n\n      const result = await adapter.generateQuestions(resumeInfo);\n\n      expect(mockService.generateQuestions).toHaveBeenCalledWith(resumeInfo);\n      expect(result).toEqual(questions);\n    });\n\n    it('should handle service errors', async () => {\n      const error = new Error('Question generation failed');\n      mockService.generateQuestions.mockRejectedValue(error);\n\n      const resumeInfo = {\n        name: 'Test',\n        experience: 'test',\n        education: 'test',\n        skills: 'test'\n      };\n\n      await expect(adapter.generateQuestions(resumeInfo))\n        .rejects.toThrow('Question generation failed');\n    });\n  });\n\n  describe('dispose', () => {\n    it('should dispose resources properly', async () => {\n      mockService.initialize.mockResolvedValue(true);\n      mockService.isReady.mockReturnValue(true);\n      await adapter.initialize();\n      \n      expect(adapter.isReady()).toBe(true);\n      \n      adapter.dispose();\n      \n      expect(adapter.isReady()).toBe(false);\n    });\n\n    it('should handle dispose when not initialized', () => {\n      expect(() => adapter.dispose()).not.toThrow();\n      expect(adapter.isReady()).toBe(false);\n    });\n  });\n\n  describe('Error Handling', () => {\n    beforeEach(async () => {\n      mockService.initialize.mockResolvedValue(true);\n      mockService.isReady.mockReturnValue(true);\n      await adapter.initialize();\n    });\n\n    it('should handle service initialization failures', async () => {\n      mockService.initialize.mockResolvedValue(false);\n      const newAdapter = new AzureOpenAIAdapter();\n\n      const result = await newAdapter.initialize();\n\n      expect(result).toBe(false);\n      expect(newAdapter.isReady()).toBe(false);\n    });\n\n    it('should handle network errors in createCompletion', async () => {\n      const networkError = new Error('Network connection failed');\n      mockService.createCompletion.mockRejectedValue(networkError);\n\n      await expect(adapter.generateCoverLetter('resume', 'job'))\n        .rejects.toThrow('Network connection failed');\n    });\n\n    it('should handle malformed completion responses', async () => {\n      const malformedCompletion = {\n        choices: [{\n          // Missing message property\n        }]\n      };\n      mockService.createCompletion.mockResolvedValue(malformedCompletion as any);\n\n      await expect(adapter.generateCoverLetter('resume', 'job'))\n        .rejects.toThrow('Empty response from Azure OpenAI');\n    });\n\n    it('should handle Azure service not ready', async () => {\n      mockService.isReady.mockReturnValue(false);\n\n      await expect(adapter.generateCoverLetter('resume', 'job'))\n        .rejects.toThrow('Azure OpenAI adapter not initialized');\n    });\n  });\n\n  describe('Integration with Azure Service', () => {\n    beforeEach(async () => {\n      mockService.initialize.mockResolvedValue(true);\n      mockService.isReady.mockReturnValue(true);\n      await adapter.initialize();\n    });\n\n    it('should use correct parameters for cover letter generation', async () => {\n      const mockCompletion = {\n        choices: [{\n          message: {\n            content: 'Generated cover letter'\n          }\n        }]\n      };\n      mockService.createCompletion.mockResolvedValue(mockCompletion as any);\n\n      await adapter.generateCoverLetter('resume text', 'job desc');\n\n      expect(mockService.createCompletion).toHaveBeenCalledWith(\n        [{ role: 'user', content: expect.stringContaining('cover letter') }],\n        { temperature: 0.7, maxTokens: 1500 }\n      );\n    });\n\n    it('should use correct parameters for relevancy calculation', async () => {\n      const mockCompletion = {\n        choices: [{\n          message: {\n            content: '75'\n          }\n        }]\n      };\n      mockService.createCompletion.mockResolvedValue(mockCompletion as any);\n\n      await adapter.calculateRelevancy('resume', 'job');\n\n      expect(mockService.createCompletion).toHaveBeenCalledWith(\n        [{ role: 'user', content: expect.stringContaining('relevancy') }],\n        { temperature: 0.1, maxTokens: 50 }\n      );\n    });\n\n    it('should delegate tailorResume to service directly', async () => {\n      mockService.tailorResume.mockResolvedValue('tailored content');\n\n      await adapter.tailorResume('original', 'job');\n\n      expect(mockService.tailorResume).toHaveBeenCalledWith('original', 'job');\n      expect(mockService.createCompletion).not.toHaveBeenCalled();\n    });\n\n    it('should delegate generateQuestions to service directly', async () => {\n      const questions = ['Q1', 'Q2'];\n      mockService.generateQuestions.mockResolvedValue(questions);\n\n      const resumeInfo = {\n        name: 'Test',\n        experience: 'test',\n        education: 'test',\n        skills: 'test'\n      };\n\n      await adapter.generateQuestions(resumeInfo);\n\n      expect(mockService.generateQuestions).toHaveBeenCalledWith(resumeInfo);\n      expect(mockService.createCompletion).not.toHaveBeenCalled();\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/ai/azure-ai.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'migrationOpenAIClient' is defined but never used.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[926,929],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[926,929],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'service' is assigned a value but never used.","line":132,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":132,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":169,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":169,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5387,5390],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5387,5390],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'service' is assigned a value but never used.","line":178,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":178,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":236,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":236,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7711,7714],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7711,7714],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'service' is assigned a value but never used.","line":302,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":302,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'service' is assigned a value but never used.","line":347,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":347,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'service' is assigned a value but never used.","line":391,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":391,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":438,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":438,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14185,14188],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14185,14188],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Unified Azure AI Facade\n * \n * Central entry point for all Azure AI services including OpenAI, Cognitive Services,\n * and Azure AI Foundry. Provides simplified access to Azure's AI capabilities\n * with intelligent routing and fallback mechanisms.\n */\n\nimport { azureOpenAIService } from '@/lib/services/azure-openai-service';\nimport { enhancedAzureOpenAIService } from '@/lib/services/azure-openai-enhanced';\nimport { azureFormRecognizer } from '@/lib/services/azure-form-recognizer';\nimport { foundryDocumentIntelligenceService } from '@/lib/azure-ai-foundry/documents/document-client';\nimport { migrationOpenAIClient } from '@/lib/azure-ai-foundry/clients/migration-wrapper';\nimport { unifiedConfigService } from '@/lib/services/unified-config-service';\nimport { logServerError } from '@/lib/errors';\nimport { retryWithExponentialBackoff } from '@/lib/utils/retry-with-backoff';\n\nexport interface AzureAIResponse<T = any> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  provider: 'azure-openai' | 'azure-foundry' | 'azure-form-recognizer';\n  processingTime?: number;\n  confidence?: number;\n}\n\nexport interface ResumeExtractionOptions {\n  includeAtsAnalysis?: boolean;\n  includeJobMatching?: boolean;\n  jobDescription?: string;\n  forceFoundryProcessing?: boolean;\n}\n\nexport interface QuestionGenerationOptions {\n  maxQuestions?: number;\n  difficulty?: 'easy' | 'medium' | 'hard';\n  focusAreas?: string[];\n  interviewType?: 'behavioral' | 'technical' | 'mixed';\n}\n\n/**\n * Azure AI Unified Service\n * Provides centralized access to all Azure AI capabilities\n */\nclass AzureAIService {\n  private initialized = false;\n  private availableServices = {\n    openai: false,\n    enhanced: false,\n    formRecognizer: false,\n    foundry: false\n  };\n\n  /**\n   * Initialize all Azure AI services\n   */\n  async initialize(): Promise<void> {\n    if (this.initialized) {\n      return;\n    }\n\n    console.log('üöÄ Initializing Azure AI unified service...');\n    const startTime = Date.now();\n\n    try {\n      // Initialize Azure OpenAI services\n      const [openaiReady, enhancedReady, formRecognizerReady] = await Promise.allSettled([\n        azureOpenAIService.initialize(),\n        enhancedAzureOpenAIService.initialize(),\n        azureFormRecognizer.initialize()\n      ]);\n\n      this.availableServices.openai = openaiReady.status === 'fulfilled' && openaiReady.value;\n      this.availableServices.enhanced = enhancedReady.status === 'fulfilled' && enhancedReady.value;\n      this.availableServices.formRecognizer = formRecognizerReady.status === 'fulfilled' && formRecognizerReady.value;\n\n      // Initialize Azure AI Foundry if feature flag is enabled\n      try {\n        const foundryEnabled = await unifiedConfigService.get('features.foundryResumeProcessing', false);\n        if (foundryEnabled) {\n          this.availableServices.foundry = await foundryDocumentIntelligenceService.initialize();\n        }\n      } catch (error) {\n        console.warn('‚ö†Ô∏è Foundry initialization skipped:', error);\n      }\n\n      this.initialized = true;\n      const initTime = Date.now() - startTime;\n      \n      console.log('‚úÖ Azure AI unified service initialized', {\n        duration: `${initTime}ms`,\n        services: this.availableServices\n      });\n    } catch (error) {\n      console.error('‚ùå Azure AI service initialization failed:', error);\n      logServerError(error as Error, { \n        service: 'azure-ai-unified', \n        action: 'initialize' \n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Get service status information\n   */\n  getStatus() {\n    return {\n      initialized: this.initialized,\n      services: this.availableServices\n    };\n  }\n\n  /**\n   * Generate text completions using Azure OpenAI\n   */\n  async generateCompletion(\n    prompt: string, \n    options: {\n      temperature?: number;\n      maxTokens?: number;\n      model?: string;\n      userId?: string;\n    } = {}\n  ): Promise<AzureAIResponse<string>> {\n    await this.initialize();\n\n    const startTime = Date.now();\n    \n    try {\n      // Use enhanced service if available, fallback to standard\n      const service = this.availableServices.enhanced ? enhancedAzureOpenAIService : azureOpenAIService;\n      \n      const result = await retryWithExponentialBackoff(\n        async () => {\n          if (this.availableServices.enhanced) {\n            return await enhancedAzureOpenAIService.generateContent(prompt, 'general');\n          } else {\n            // Fall back to basic service, but it doesn't have generateCompletion\n            throw new Error('Basic Azure OpenAI service does not support completion generation');\n          }\n        },\n        'azure_ai_completion',\n        options.userId,\n        { maxRetries: 3, baseDelay: 1000 }\n      );\n\n      return {\n        success: true,\n        data: result,\n        provider: this.availableServices.enhanced ? 'azure-foundry' : 'azure-openai',\n        processingTime: Date.now() - startTime\n      };\n    } catch (error) {\n      console.error('‚ùå Azure AI completion failed:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Completion failed',\n        provider: this.availableServices.enhanced ? 'azure-foundry' : 'azure-openai',\n        processingTime: Date.now() - startTime\n      };\n    }\n  }\n\n  /**\n   * Generate interview questions from resume data\n   */\n  async generateQuestions(\n    resumeData: any,\n    options: QuestionGenerationOptions = {}\n  ): Promise<AzureAIResponse<string[]>> {\n    await this.initialize();\n\n    const startTime = Date.now();\n    \n    try {\n      // Use enhanced service if available\n      const service = this.availableServices.enhanced ? enhancedAzureOpenAIService : azureOpenAIService;\n      \n      const questions = await retryWithExponentialBackoff(\n        async () => {\n          if (this.availableServices.enhanced) {\n            return await enhancedAzureOpenAIService.generateQuestions(resumeData);\n          } else {\n            return await azureOpenAIService.generateQuestions(resumeData);\n          }\n        },\n        'azure_ai_questions',\n        undefined,\n        { maxRetries: 2, baseDelay: 1000 }\n      );\n\n      // Filter to max questions if specified\n      const filteredQuestions = options.maxQuestions \n        ? questions.slice(0, options.maxQuestions)\n        : questions;\n\n      return {\n        success: true,\n        data: filteredQuestions,\n        provider: this.availableServices.enhanced ? 'azure-foundry' : 'azure-openai',\n        processingTime: Date.now() - startTime\n      };\n    } catch (error) {\n      console.error('‚ùå Azure AI question generation failed:', error);\n      \n      // Return default questions as fallback\n      const defaultQuestions = [\n        \"Tell me about yourself and your professional background.\",\n        \"What interests you most about this position?\",\n        \"Describe a challenging project you've worked on.\",\n        \"How do you stay updated with industry trends?\",\n        \"Where do you see yourself in 5 years?\",\n        \"What are your greatest strengths?\",\n        \"Describe a time when you had to work under pressure.\",\n        \"How do you handle feedback and criticism?\"\n      ];\n\n      return {\n        success: false,\n        data: defaultQuestions.slice(0, options.maxQuestions || 8),\n        error: error instanceof Error ? error.message : 'Question generation failed',\n        provider: this.availableServices.enhanced ? 'azure-foundry' : 'azure-openai',\n        processingTime: Date.now() - startTime\n      };\n    }\n  }\n\n  /**\n   * Extract data from resume documents\n   */\n  async extractResumeData(\n    fileBuffer: Buffer,\n    mimeType: string,\n    options: ResumeExtractionOptions = {}\n  ): Promise<AzureAIResponse<any>> {\n    await this.initialize();\n\n    const startTime = Date.now();\n\n    try {\n      // Use Azure AI Foundry if available and enabled\n      if (this.availableServices.foundry && (options.forceFoundryProcessing || \n          await unifiedConfigService.get('features.foundryResumeProcessing', false))) {\n        \n        const extraction = await foundryDocumentIntelligenceService.analyzeResume(\n          fileBuffer,\n          mimeType,\n          {\n            includeAtsAnalysis: options.includeAtsAnalysis,\n            modelType: 'resume-analysis'\n          }\n        );\n\n        return {\n          success: true,\n          data: extraction,\n          provider: 'azure-foundry',\n          processingTime: Date.now() - startTime,\n          confidence: extraction.metadata?.overallConfidence\n        };\n      }\n\n      // Fallback to Azure Form Recognizer\n      if (this.availableServices.formRecognizer) {\n        const extraction = await azureFormRecognizer.extractResumeData(fileBuffer, mimeType);\n\n        return {\n          success: true,\n          data: extraction,\n          provider: 'azure-form-recognizer',\n          processingTime: Date.now() - startTime,\n          confidence: 0.85 // Default confidence for Form Recognizer\n        };\n      }\n\n      throw new Error('No Azure document extraction services available');\n    } catch (error) {\n      console.error('‚ùå Azure resume extraction failed:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Extraction failed',\n        provider: this.availableServices.foundry ? 'azure-foundry' : 'azure-form-recognizer',\n        processingTime: Date.now() - startTime\n      };\n    }\n  }\n\n  /**\n   * Generate tailored resume content\n   */\n  async tailorResume(\n    resumeText: string,\n    jobDescription: string,\n    options: { userId?: string } = {}\n  ): Promise<AzureAIResponse<string>> {\n    await this.initialize();\n\n    const startTime = Date.now();\n\n    try {\n      const service = this.availableServices.enhanced ? enhancedAzureOpenAIService : azureOpenAIService;\n      \n      const tailoredContent = await retryWithExponentialBackoff(\n        async () => {\n          if (this.availableServices.enhanced) {\n            return await enhancedAzureOpenAIService.tailorResume(resumeText, jobDescription);\n          } else {\n            return await azureOpenAIService.tailorResume(resumeText, jobDescription);\n          }\n        },\n        'azure_ai_tailor',\n        options.userId,\n        { maxRetries: 3, baseDelay: 2000 }\n      );\n\n      return {\n        success: true,\n        data: tailoredContent,\n        provider: this.availableServices.enhanced ? 'azure-foundry' : 'azure-openai',\n        processingTime: Date.now() - startTime\n      };\n    } catch (error) {\n      console.error('‚ùå Azure AI resume tailoring failed:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Resume tailoring failed',\n        provider: this.availableServices.enhanced ? 'azure-foundry' : 'azure-openai',\n        processingTime: Date.now() - startTime\n      };\n    }\n  }\n\n  /**\n   * Generate cover letters\n   */\n  async generateCoverLetter(\n    resumeText: string,\n    jobDescription: string,\n    options: { userId?: string } = {}\n  ): Promise<AzureAIResponse<string>> {\n    await this.initialize();\n\n    const startTime = Date.now();\n\n    try {\n      const service = this.availableServices.enhanced ? enhancedAzureOpenAIService : azureOpenAIService;\n      \n      const coverLetter = await retryWithExponentialBackoff(\n        async () => {\n          if (this.availableServices.enhanced) {\n            return await enhancedAzureOpenAIService.generateCoverLetter(resumeText, jobDescription);\n          } else {\n            throw new Error('Cover letter generation requires enhanced Azure OpenAI service');\n          }\n        },\n        'azure_ai_cover_letter',\n        options.userId,\n        { maxRetries: 3, baseDelay: 2000 }\n      );\n\n      return {\n        success: true,\n        data: coverLetter,\n        provider: this.availableServices.enhanced ? 'azure-foundry' : 'azure-openai',\n        processingTime: Date.now() - startTime\n      };\n    } catch (error) {\n      console.error('‚ùå Azure AI cover letter generation failed:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Cover letter generation failed',\n        provider: this.availableServices.enhanced ? 'azure-foundry' : 'azure-openai',\n        processingTime: Date.now() - startTime\n      };\n    }\n  }\n\n  /**\n   * Calculate relevancy score between resume and job description\n   */\n  async calculateRelevancy(\n    resumeText: string,\n    jobDescription: string\n  ): Promise<AzureAIResponse<number>> {\n    await this.initialize();\n\n    const startTime = Date.now();\n\n    try {\n      const service = this.availableServices.enhanced ? enhancedAzureOpenAIService : azureOpenAIService;\n      \n      const score = await retryWithExponentialBackoff(\n        async () => {\n          if (this.availableServices.enhanced) {\n            return await enhancedAzureOpenAIService.calculateRelevancy(resumeText, jobDescription);\n          } else {\n            throw new Error('Relevancy calculation requires enhanced Azure OpenAI service');\n          }\n        },\n        'azure_ai_relevancy',\n        undefined,\n        { maxRetries: 2, baseDelay: 1000 }\n      );\n\n      return {\n        success: true,\n        data: Math.max(0, Math.min(100, score)), // Ensure 0-100 range\n        provider: this.availableServices.enhanced ? 'azure-foundry' : 'azure-openai',\n        processingTime: Date.now() - startTime,\n        confidence: 0.9\n      };\n    } catch (error) {\n      console.error('‚ùå Azure AI relevancy calculation failed:', error);\n      return {\n        success: false,\n        data: 50, // Default middle score\n        error: error instanceof Error ? error.message : 'Relevancy calculation failed',\n        provider: this.availableServices.enhanced ? 'azure-foundry' : 'azure-openai',\n        processingTime: Date.now() - startTime\n      };\n    }\n  }\n}\n\n// Export singleton instance\nexport const azureAI = new AzureAIService();\n\n// For backward compatibility, export individual service references\nexport {\n  azureOpenAIService,\n  enhancedAzureOpenAIService,\n  azureFormRecognizer,\n  foundryDocumentIntelligenceService\n};\n\n// Export types with unique names to avoid conflicts\nexport type UnifiedAzureAIResponse<T = any> = AzureAIResponse<T>;\nexport type UnifiedResumeExtractionOptions = ResumeExtractionOptions;\nexport type UnifiedQuestionGenerationOptions = QuestionGenerationOptions;\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/ai/azureOpenAI.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'migrationOpenAIClient' is defined but never used.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'RetryOptions' is defined but never used.","line":13,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":51}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Azure OpenAI Provider Adapter\n * \n * This adapter wraps Azure OpenAI API to provide a consistent interface\n * for the AI service layer. Reuses the existing AzureOpenAIService for\n * consistent configuration and error handling.\n */\n\nimport { azureOpenAIService } from '@/lib/services/azure-openai-service';\nimport { migrationOpenAIClient } from '@/lib/azure-ai-foundry/clients/migration-wrapper';\nimport { enhancedAzureOpenAIService } from '@/lib/services/azure-openai-enhanced';\nimport { AIProvider, ResumeInfo } from './index';\nimport { retryWithExponentialBackoff, RetryOptions } from '@/lib/utils/retry-with-backoff';\n\nexport class AzureOpenAIAdapter implements AIProvider {\n  public name = 'Azure OpenAI (Enhanced)';\n  private isInitialized = false;\n  private useEnhancedService = true; // Feature flag for enhanced multi-deployment service\n  \n  // Default parameters for optimal Azure OpenAI performance\n  private readonly DEFAULT_TEMPERATURE = 0.7; // Balanced creativity\n  private readonly DEFAULT_MAX_TOKENS = 1500;  // Comprehensive responses\n  private readonly RELEVANCY_TEMPERATURE = 0.1; // For precise scoring\n  private readonly RELEVANCY_MAX_TOKENS = 50;   // Short numeric response\n\n  /**\n   * Initialize the Azure OpenAI service\n   */\n  async initialize(): Promise<boolean> {\n    try {\n      // Try enhanced service first, fallback to standard service\n      if (this.useEnhancedService) {\n        this.isInitialized = await enhancedAzureOpenAIService.initialize();\n        if (this.isInitialized) {\n          console.log('‚úÖ Azure OpenAI adapter initialized with enhanced service');\n          return true;\n        }\n        console.warn('‚ö†Ô∏è Enhanced service failed, falling back to standard service');\n        this.useEnhancedService = false;\n      }\n      \n      // Fallback to standard service\n      this.isInitialized = await azureOpenAIService.initialize();\n      \n      if (this.isInitialized) {\n        console.log('‚úÖ Azure OpenAI adapter initialized with standard service');\n      } else {\n        console.warn('‚ö†Ô∏è Azure OpenAI adapter failed to initialize');\n      }\n      \n      return this.isInitialized;\n    } catch (error) {\n      console.error('‚ùå Failed to initialize Azure OpenAI adapter:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Check if the adapter is ready\n   */\n  isReady(): boolean {\n    if (this.useEnhancedService) {\n      return this.isInitialized && enhancedAzureOpenAIService.isReady();\n    }\n    return this.isInitialized && azureOpenAIService.isReady();\n  }\n\n  /**\n   * Generate a cover letter using Azure OpenAI with retry logic\n   */\n  async generateCoverLetter(resumeText: string, jobDescription: string, userId?: string): Promise<string> {\n    if (!this.isReady()) {\n      throw new Error('Azure OpenAI adapter not initialized');\n    }\n\n    return await retryWithExponentialBackoff(\n      async () => {\n        // Use enhanced service if available for optimal model selection\n        if (this.useEnhancedService) {\n          return await enhancedAzureOpenAIService.generateCoverLetter(resumeText, jobDescription);\n        }\n\n        // Fallback to custom implementation\n        return await this.generateWithAzureOpenAI(this.getCoverLetterPrompt(resumeText, jobDescription));\n      },\n      'generate_cover_letter',\n      userId,\n      {\n        maxRetries: 3,\n        baseDelay: 2000, // 2 seconds base delay for AI operations\n        maxDelay: 60000  // 1 minute max delay\n      }\n    );\n  }\n\n  /**\n   * Calculate relevancy score between resume and job description with retry logic\n   */\n  async calculateRelevancy(resumeText: string, jobDescription: string, userId?: string): Promise<number> {\n    if (!this.isReady()) {\n      throw new Error('Azure OpenAI adapter not initialized');\n    }\n\n    return await retryWithExponentialBackoff(\n      async () => {\n        // Use enhanced service for efficient gpt-35-turbo scoring\n        if (this.useEnhancedService) {\n          return await enhancedAzureOpenAIService.calculateRelevancy(resumeText, jobDescription);\n        }\n\n        // Fallback implementation\n        const prompt = this.getRelevancyPrompt(resumeText, jobDescription);\n        const response = await this.generateWithAzureOpenAI(prompt, this.RELEVANCY_TEMPERATURE, this.RELEVANCY_MAX_TOKENS);\n        \n        // Extract number from response\n        const scoreMatch = response.trim().match(/\\d+/);\n        if (!scoreMatch) {\n          throw new Error('Could not extract relevancy score from response');\n        }\n        \n        const score = parseInt(scoreMatch[0], 10);\n        return Math.max(0, Math.min(100, score)); // Ensure score is between 0-100\n      },\n      'calculate_relevancy',\n      userId,\n      {\n        maxRetries: 2, // Fewer retries for quick scoring operations\n        baseDelay: 1000,\n        maxDelay: 30000\n      }\n    );\n  }\n\n  /**\n   * Tailor resume to match job description with retry logic\n   */\n  async tailorResume(resumeText: string, jobDescription: string, userId?: string): Promise<string> {\n    if (!this.isReady()) {\n      throw new Error('Azure OpenAI adapter not initialized');\n    }\n\n    return await retryWithExponentialBackoff(\n      async () => {\n        // Use enhanced service for optimal gpt-4o quality\n        if (this.useEnhancedService) {\n          return await enhancedAzureOpenAIService.tailorResume(resumeText, jobDescription);\n        }\n\n        // Fallback to standard service\n        return await azureOpenAIService.tailorResume(resumeText, jobDescription);\n      },\n      'tailor_resume',\n      userId,\n      {\n        maxRetries: 3,\n        baseDelay: 3000, // 3 seconds base delay for complex operations\n        maxDelay: 90000  // 1.5 minutes max delay\n      }\n    );\n  }\n\n  /**\n   * Generate interview questions based on resume information with retry logic\n   */\n  async generateQuestions(resumeInfo: ResumeInfo, userId?: string): Promise<string[]> {\n    if (!this.isReady()) {\n      throw new Error('Azure OpenAI adapter not initialized');\n    }\n\n    return await retryWithExponentialBackoff(\n      async () => {\n        // Use enhanced service for efficient gpt-35-turbo question generation\n        if (this.useEnhancedService) {\n          return await enhancedAzureOpenAIService.generateQuestions(resumeInfo);\n        }\n\n        // Fallback to standard service\n        return await azureOpenAIService.generateQuestions(resumeInfo);\n      },\n      'generate_questions',\n      userId,\n      {\n        maxRetries: 2,\n        baseDelay: 1500,\n        maxDelay: 45000\n      }\n    );\n  }\n\n  /**\n   * Generate content using Azure OpenAI with retry logic\n   * Uses optimized parameters for consistent high-quality responses\n   */\n  private async generateWithAzureOpenAI(\n    prompt: string, \n    temperature: number = this.DEFAULT_TEMPERATURE, \n    maxTokens: number = this.DEFAULT_MAX_TOKENS\n  ): Promise<string> {\n    const messages = [{ role: 'user' as const, content: prompt }];\n    \n    try {\n      const completion = await azureOpenAIService.createCompletion(messages, {\n        temperature,\n        maxTokens,\n        topP: 0.9,           // Balanced creativity settings\n        frequencyPenalty: 0.1, // Reduce repetition\n        presencePenalty: 0.1   // Encourage diverse content\n      });\n      \n      const content = completion.choices[0]?.message?.content;\n      if (!content) {\n        throw new Error('Empty response from Azure OpenAI');\n      }\n      \n      return content;\n    } catch (error) {\n      console.error('‚ùå Error generating content with Azure OpenAI:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get cover letter generation prompt with optimized structure\n   */\n  private getCoverLetterPrompt(resumeText: string, jobDescription: string): string {\n    return `You are an expert career coach and professional writer. Please generate a compelling cover letter based on the provided resume and job description.\n\nJOB DESCRIPTION:\n${jobDescription}\n\nRESUME:\n${resumeText}\n\nPlease generate a cover letter that:\n1. Is tailored to the specific job description\n2. Highlights the most relevant skills and experiences from the resume\n3. Has a professional and engaging tone\n4. Is well-structured and easy to read\n5. Is approximately 3-4 paragraphs long\n\nReturn ONLY the cover letter content with no additional commentary or explanations.`;\n  }\n\n  /**\n   * Get relevancy analysis prompt with structured requirements\n   */\n  private getRelevancyPrompt(resumeText: string, jobDescription: string): string {\n    return `You are an expert ATS (Applicant Tracking System) analyzer. Please analyze the relevancy between this resume and job description.\n\nJOB DESCRIPTION:\n${jobDescription}\n\nRESUME:\n${resumeText}\n\nAnalyze the match between the resume and job description considering:\n1. Skills alignment (technical and soft skills)\n2. Experience relevance (years and type of experience)\n3. Education and certifications match\n4. Industry experience\n5. Role responsibilities alignment\n6. Keywords and terminology match\n\nReturn ONLY a single number between 0 and 100 representing the percentage match/relevancy score. No explanations or additional text.`;\n  }\n\n  /**\n   * Dispose of resources\n   */\n  dispose(): void {\n    // The underlying service manages its own resources\n    this.isInitialized = false;\n    this.useEnhancedService = true; // Reset for next initialization\n    console.log('üßπ Azure OpenAI adapter disposed');\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/ai/example.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'switchProvider' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Example usage of the Azure OpenAI AI Service Layer\n * \n * This file demonstrates how to use the AI service layer with Azure OpenAI.\n */\n\nimport { \n  generateCoverLetter, \n  calculateRelevancy, \n  tailorResume, \n  generateQuestions,\n  getProviderInfo,\n  switchProvider \n} from './index';\n\nasync function exampleUsage() {\n  console.log('üöÄ AI Service Layer Example');\n  \n  // Example resume and job description\n  const resumeText = `\nJohn Doe\nSoftware Engineer\n\nExperience:\n- 5 years of experience in web development\n- Proficient in React, Node.js, TypeScript\n- Led team of 3 developers\n- Built scalable web applications\n\nEducation:\n- Bachelor of Science in Computer Science\n- University of Technology\n\nSkills:\n- React, Angular, Vue.js\n- Node.js, Express.js\n- TypeScript, JavaScript\n- AWS, Docker, Kubernetes\n  `;\n\n  const jobDescription = `\nSenior React Developer\n\nWe are seeking a Senior React Developer to join our growing team.\n\nRequirements:\n- 4+ years of React experience\n- Strong TypeScript skills\n- Experience with modern web technologies\n- Team leadership experience\n- AWS cloud experience preferred\n\nResponsibilities:\n- Lead frontend development initiatives\n- Mentor junior developers\n- Architect scalable React applications\n- Collaborate with backend teams\n  `;\n\n  const resumeInfo = {\n    name: 'John Doe',\n    experience: '5 years of experience in web development with React, Node.js, TypeScript',\n    education: 'Bachelor of Science in Computer Science',\n    skills: 'React, Angular, Vue.js, Node.js, Express.js, TypeScript, JavaScript, AWS, Docker, Kubernetes'\n  };\n\n  try {\n    // Check current provider\n    console.log('\\nüìä Current Provider:', getProviderInfo());\n\n    // 1. Generate Cover Letter\n    console.log('\\nüìù Generating Cover Letter...');\n    const coverLetterResponse = await generateCoverLetter(resumeText, jobDescription);\n    \n    if (coverLetterResponse.success) {\n      console.log(`‚úÖ Cover Letter Generated (${coverLetterResponse.provider}):`);\n      console.log(coverLetterResponse.data?.substring(0, 200) + '...');\n    } else {\n      console.log('‚ùå Cover Letter Error:', coverLetterResponse.error);\n    }\n\n    // 2. Calculate Relevancy Score\n    console.log('\\nüéØ Calculating Relevancy Score...');\n    const relevancyResponse = await calculateRelevancy(resumeText, jobDescription);\n    \n    if (relevancyResponse.success) {\n      console.log(`‚úÖ Relevancy Score (${relevancyResponse.provider}): ${relevancyResponse.data}/100`);\n    } else {\n      console.log('‚ùå Relevancy Error:', relevancyResponse.error);\n    }\n\n    // 3. Tailor Resume\n    console.log('\\nüìã Tailoring Resume...');\n    const tailoredResponse = await tailorResume(resumeText, jobDescription);\n    \n    if (tailoredResponse.success) {\n      console.log(`‚úÖ Resume Tailored (${tailoredResponse.provider}):`);\n      console.log(tailoredResponse.data?.substring(0, 200) + '...');\n    } else {\n      console.log('‚ùå Resume Tailoring Error:', tailoredResponse.error);\n    }\n\n    // 4. Generate Interview Questions\n    console.log('\\n‚ùì Generating Interview Questions...');\n    const questionsResponse = await generateQuestions(resumeInfo);\n    \n    if (questionsResponse.success) {\n      console.log(`‚úÖ Questions Generated (${questionsResponse.provider}):`);\n      questionsResponse.data?.forEach((question, i) => {\n        console.log(`  ${i + 1}. ${question}`);\n      });\n    } else {\n      console.log('‚ùå Questions Error:', questionsResponse.error);\n    }\n\n    // 5. Provider Info Example\n    console.log('\\nüìä Final Provider Info:', getProviderInfo());\n\n  } catch (error) {\n    console.error('‚ùå Unexpected error:', error);\n  }\n}\n\n// Environment variable examples\nfunction showEnvironmentExamples() {\n  console.log('\\nüîß Environment Variable Examples:');\n  console.log('# Azure OpenAI Configuration (Required)');\n  console.log('AI_PROVIDER=azure-openai');\n  console.log('AZURE_TENANT_ID=your_tenant_id');\n  console.log('AZURE_CLIENT_ID=your_client_id');\n  console.log('AZURE_CLIENT_SECRET=your_client_secret');\n  console.log('# (Plus other Azure OpenAI credentials)');\n}\n\n// Run example if this file is executed directly\nif (require.main === module) {\n  showEnvironmentExamples();\n  exampleUsage().catch(console.error);\n}\n\nexport { exampleUsage, showEnvironmentExamples };\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/ai/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AzureAIResponse' is defined but never used.","line":12,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1013,1016],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1013,1016],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Azure-Centric AI Service Layer\n * \n * This module provides a unified interface for AI operations backed\n * by Azure OpenAI services. Optimized for enterprise-grade AI functionality.\n * \n * Updated to use the new unified Azure AI facade for improved service\n * management and intelligent routing between Azure services.\n */\n\nimport { AzureOpenAIAdapter } from './azureOpenAI';\nimport { azureAI, AzureAIResponse } from './azure-ai';\n\nexport interface AIProvider {\n  name: string;\n  initialize(): Promise<boolean>;\n  isReady(): boolean;\n  generateCoverLetter(resumeText: string, jobDescription: string): Promise<string>;\n  calculateRelevancy(resumeText: string, jobDescription: string): Promise<number>;\n  tailorResume(resumeText: string, jobDescription: string): Promise<string>;\n  generateQuestions(resumeInfo: ResumeInfo): Promise<string[]>;\n  dispose(): void;\n}\n\nexport interface ResumeInfo {\n  name: string;\n  experience: string;\n  education: string;\n  skills: string;\n}\n\nexport interface AIResponse<T = any> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  provider?: string;\n}\n\n/**\n * AI Service Manager - Azure OpenAI focused service manager\n */\nclass AIServiceManager {\n  private currentProvider: AIProvider | null = null;\n  private providers: Map<string, AIProvider> = new Map();\n  private initialized = false;\n\n  constructor() {\n    // Register Azure OpenAI as the primary provider\n    this.providers.set('azure-openai', new AzureOpenAIAdapter());\n  }\n\n  /**\n   * Initialize the AI service with Azure OpenAI\n   */\n  async initialize(): Promise<boolean> {\n    const providerName = 'azure-openai';\n    \n    console.log(`üöÄ Initializing AI Service with provider: ${providerName}`);\n    \n    const provider = this.providers.get(providerName);\n    if (!provider) {\n      console.error(`‚ùå Azure OpenAI provider not found`);\n      return false;\n    }\n\n    try {\n      const success = await provider.initialize();\n      if (success) {\n        this.currentProvider = provider;\n        this.initialized = true;\n        console.log(`‚úÖ AI Service initialized successfully with ${provider.name}`);\n        return true;\n      }\n    } catch (error) {\n      console.error(`‚ùå Failed to initialize Azure OpenAI provider:`, error);\n    }\n\n    console.error('‚ùå Azure OpenAI provider failed to initialize');\n    return false;\n  }\n\n\n  /**\n   * Get the current provider\n   */\n  getCurrentProvider(): AIProvider | null {\n    return this.currentProvider;\n  }\n\n  /**\n   * Check if the service is ready\n   */\n  isReady(): boolean {\n    return this.initialized && this.currentProvider?.isReady() === true;\n  }\n\n  /**\n   * Get current provider name\n   */\n  getProviderName(): string {\n    return this.currentProvider?.name || 'none';\n  }\n\n  /**\n   * Switch to a different provider at runtime\n   */\n  async switchProvider(providerName: string): Promise<boolean> {\n    console.log(`üîÑ Switching to provider: ${providerName}`);\n    \n    const provider = this.providers.get(providerName);\n    if (!provider) {\n      console.error(`‚ùå Provider '${providerName}' not found`);\n      return false;\n    }\n\n    // Clean up current provider\n    if (this.currentProvider) {\n      this.currentProvider.dispose();\n    }\n\n    try {\n      const success = await provider.initialize();\n      if (success) {\n        this.currentProvider = provider;\n        console.log(`‚úÖ Successfully switched to ${provider.name}`);\n        return true;\n      }\n    } catch (error) {\n      console.error(`‚ùå Failed to switch to provider '${providerName}':`, error);\n    }\n\n    return false;\n  }\n\n  /**\n   * Dispose of all resources\n   */\n  dispose(): void {\n    if (this.currentProvider) {\n      this.currentProvider.dispose();\n    }\n    this.currentProvider = null;\n    this.initialized = false;\n    console.log('üßπ AI Service Manager disposed');\n  }\n}\n\n// Singleton instance\nconst aiServiceManager = new AIServiceManager();\n\n/**\n * Ensure the AI service is initialized\n */\nasync function ensureInitialized(): Promise<void> {\n  if (!aiServiceManager.isReady()) {\n    const success = await aiServiceManager.initialize();\n    if (!success) {\n      throw new Error('Failed to initialize AI service - no providers available');\n    }\n  }\n}\n\n/**\n * Generate a cover letter based on resume and job description\n */\nexport async function generateCoverLetter(resumeText: string, jobDescription: string): Promise<AIResponse<string>> {\n  try {\n    await ensureInitialized();\n    \n    const provider = aiServiceManager.getCurrentProvider();\n    if (!provider) {\n      throw new Error('No AI provider available');\n    }\n\n    const coverLetter = await provider.generateCoverLetter(resumeText, jobDescription);\n    \n    return {\n      success: true,\n      data: coverLetter,\n      provider: provider.name\n    };\n  } catch (error) {\n    console.error('‚ùå Error generating cover letter:', error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error occurred',\n      provider: aiServiceManager.getProviderName()\n    };\n  }\n}\n\n/**\n * Calculate relevancy score between resume and job description (0-100)\n */\nexport async function calculateRelevancy(resumeText: string, jobDescription: string): Promise<AIResponse<number>> {\n  try {\n    await ensureInitialized();\n    \n    const provider = aiServiceManager.getCurrentProvider();\n    if (!provider) {\n      throw new Error('No AI provider available');\n    }\n\n    const score = await provider.calculateRelevancy(resumeText, jobDescription);\n    \n    return {\n      success: true,\n      data: Math.max(0, Math.min(100, score)), // Ensure score is between 0-100\n      provider: provider.name\n    };\n  } catch (error) {\n    console.error('‚ùå Error calculating relevancy:', error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error occurred',\n      provider: aiServiceManager.getProviderName()\n    };\n  }\n}\n\n/**\n * Tailor resume to match job description\n */\nexport async function tailorResume(resumeText: string, jobDescription: string): Promise<AIResponse<string>> {\n  try {\n    await ensureInitialized();\n    \n    const provider = aiServiceManager.getCurrentProvider();\n    if (!provider) {\n      throw new Error('No AI provider available');\n    }\n\n    const tailoredResume = await provider.tailorResume(resumeText, jobDescription);\n    \n    return {\n      success: true,\n      data: tailoredResume,\n      provider: provider.name\n    };\n  } catch (error) {\n    console.error('‚ùå Error tailoring resume:', error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error occurred',\n      provider: aiServiceManager.getProviderName()\n    };\n  }\n}\n\n/**\n * Generate interview questions based on resume information\n */\nexport async function generateQuestions(resumeInfo: ResumeInfo): Promise<AIResponse<string[]>> {\n  try {\n    await ensureInitialized();\n    \n    const provider = aiServiceManager.getCurrentProvider();\n    if (!provider) {\n      throw new Error('No AI provider available');\n    }\n\n    const questions = await provider.generateQuestions(resumeInfo);\n    \n    return {\n      success: true,\n      data: questions,\n      provider: provider.name\n    };\n  } catch (error) {\n    console.error('‚ùå Error generating questions:', error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error occurred',\n      provider: aiServiceManager.getProviderName()\n    };\n  }\n}\n\n/**\n * Get current AI provider information\n */\nexport function getProviderInfo(): { name: string; isReady: boolean } {\n  return {\n    name: aiServiceManager.getProviderName(),\n    isReady: aiServiceManager.isReady()\n  };\n}\n\n/**\n * Switch AI provider at runtime (for testing or hot-swapping)\n */\nexport async function switchProvider(providerName: string): Promise<AIResponse<boolean>> {\n  try {\n    const success = await aiServiceManager.switchProvider(providerName);\n    \n    return {\n      success,\n      data: success,\n      provider: aiServiceManager.getProviderName()\n    };\n  } catch (error) {\n    console.error('‚ùå Error switching provider:', error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error occurred',\n      provider: aiServiceManager.getProviderName()\n    };\n  }\n}\n\n/**\n * Dispose of AI service resources\n */\nexport function dispose(): void {\n  aiServiceManager.dispose();\n}\n\n// Export the unified Azure AI service for modern usage\nexport { azureAI };\nexport { azureAI as unifiedAI }; // Alias for clarity\n\n// Export types from the unified service\nexport type {\n  AzureAIResponse,\n  ResumeExtractionOptions,\n  QuestionGenerationOptions\n} from './azure-ai';\n\n// Re-export individual services for direct access if needed\nexport {\n  azureOpenAIService,\n  enhancedAzureOpenAIService,\n  azureFormRecognizer,\n  foundryDocumentIntelligenceService\n} from './azure-ai';\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/audio/__tests__/micCapture.simple.test.js","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":1,"column":24,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":1,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'context' is defined but never used.","line":30,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'processorName' is defined but never used.","line":30,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'base' is defined but never used.","line":60,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":24}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { MicCapture } = require('../micCapture.js');\n\n// Mock AudioContext and related APIs for testing\nclass MockAudioContext {\n  constructor() {\n    this.sampleRate = 48000;\n    this.state = 'running';\n    this.audioWorklet = {\n      addModule: jest.fn().mockResolvedValue(undefined)\n    };\n  }\n  \n  createMediaStreamSource() {\n    return {\n      connect: jest.fn(),\n      disconnect: jest.fn()\n    };\n  }\n  \n  resume() {\n    return Promise.resolve();\n  }\n  \n  close() {\n    return Promise.resolve();\n  }\n}\n\nclass MockAudioWorkletNode {\n  constructor(context, processorName) {\n    this.port = {\n      postMessage: jest.fn(),\n      onmessage: null\n    };\n  }\n  \n  connect() {}\n  disconnect() {}\n}\n\nclass MockMediaStream {\n  getTracks() {\n    return [{ stop: jest.fn() }];\n  }\n}\n\n// Mock navigator.mediaDevices\nconst mockGetUserMedia = jest.fn();\nObject.defineProperty(navigator, 'mediaDevices', {\n  value: {\n    getUserMedia: mockGetUserMedia\n  },\n  configurable: true\n});\n\n// Mock global constructors\nglobal.AudioContext = MockAudioContext;\nglobal.AudioWorkletNode = MockAudioWorkletNode;\nglobal.URL = class MockURL {\n  constructor(url, base) {\n    this.href = url;\n  }\n};\n\ndescribe('MicCapture', () => {\n  let micCapture;\n  \n  beforeEach(() => {\n    micCapture = new MicCapture();\n    mockGetUserMedia.mockResolvedValue(new MockMediaStream());\n  });\n  \n  afterEach(async () => {\n    if (micCapture.capturing) {\n      await micCapture.dispose();\n    }\n    jest.clearAllMocks();\n  });\n  \n  describe('Properties', () => {\n    test('should return correct sample rate', () => {\n      expect(micCapture.sampleRate).toBe(16000);\n    });\n    \n    test('should return correct frame size (100ms at 16kHz)', () => {\n      expect(micCapture.frameSize).toBe(1600);\n    });\n  });\n  \n  describe('Offline Sine Wave Test', () => {\n    test('should process sine wave without byte-order flip', async () => {\n      // Create a mock shared buffer for testing\n      const frameSize = 1600; // 100ms at 16kHz\n      const bufferFrames = 10;\n      const headerSize = 2;\n      const bufferSize = headerSize + (frameSize * bufferFrames);\n      const sharedBuffer = new SharedArrayBuffer(bufferSize * Int16Array.BYTES_PER_ELEMENT);\n      const sharedBufferView = new Int16Array(sharedBuffer);\n      \n      // Initialize buffer indices\n      Atomics.store(sharedBufferView, 0, 0); // writeIndex\n      Atomics.store(sharedBufferView, 1, 0); // readIndex\n      \n      // Generate a sine wave at 440Hz (A4) for testing\n      const sampleRate = 16000;\n      const frequency = 440;\n      const amplitude = 16000; // Use a significant amplitude for testing\n      const testSamples = frameSize;\n      \n      // Generate sine wave samples\n      const sineWave = new Int16Array(testSamples);\n      for (let i = 0; i < testSamples; i++) {\n        const t = i / sampleRate;\n        const sample = Math.round(amplitude * Math.sin(2 * Math.PI * frequency * t));\n        sineWave[i] = Math.max(-32768, Math.min(32767, sample));\n      }\n      \n      // Simulate writing sine wave to shared buffer\n      for (let i = 0; i < testSamples; i++) {\n        const bufferIndex = headerSize + i;\n        sharedBufferView[bufferIndex] = sineWave[i];\n      }\n      \n      // Update write index to indicate data is available\n      Atomics.store(sharedBufferView, 0, testSamples);\n      \n      // Mock the shared buffer in micCapture\n      micCapture.sharedBufferView = sharedBufferView;\n      micCapture.isCapturing = true;\n      \n      // Read one frame using the private readFrame method\n      const frame = micCapture.readFrame();\n      \n      expect(frame).not.toBeNull();\n      expect(frame.length).toBe(frameSize);\n      \n      // Verify that the data matches our sine wave (no byte-order flip)\n      for (let i = 0; i < Math.min(testSamples, frame.length); i++) {\n        expect(frame[i]).toBe(sineWave[i]);\n      }\n      \n      // Test byte conversion manually (not using async iterator for now)\n      const uint8Frame = new Uint8Array(frame.length * 2);\n      for (let i = 0; i < frame.length; i++) {\n        const sample = frame[i];\n        uint8Frame[i * 2] = sample & 0xFF;         // Low byte\n        uint8Frame[i * 2 + 1] = (sample >> 8) & 0xFF; // High byte\n      }\n      \n      expect(uint8Frame).toBeInstanceOf(Uint8Array);\n      expect(uint8Frame.length).toBe(frameSize * 2); // 2 bytes per sample\n      \n      // Verify byte order (little-endian)\n      for (let i = 0; i < Math.min(10, frameSize); i++) { // Test first 10 samples\n        const originalSample = sineWave[i];\n        const lowByte = uint8Frame[i * 2];\n        const highByte = uint8Frame[i * 2 + 1];\n        const reconstructedSample = lowByte | (highByte << 8);\n        \n        // Handle signed 16-bit conversion\n        const signedSample = reconstructedSample > 32767 ? reconstructedSample - 65536 : reconstructedSample;\n        expect(signedSample).toBe(originalSample);\n      }\n    });\n    \n    test('should handle empty buffer gracefully', () => {\n      // Mock empty shared buffer\n      const frameSize = 1600;\n      const bufferFrames = 10;\n      const headerSize = 2;\n      const bufferSize = headerSize + (frameSize * bufferFrames);\n      const sharedBuffer = new SharedArrayBuffer(bufferSize * Int16Array.BYTES_PER_ELEMENT);\n      const sharedBufferView = new Int16Array(sharedBuffer);\n      \n      // Initialize buffer indices (both at 0, indicating empty buffer)\n      Atomics.store(sharedBufferView, 0, 0); // writeIndex\n      Atomics.store(sharedBufferView, 1, 0); // readIndex\n      \n      micCapture.sharedBufferView = sharedBufferView;\n      \n      // Read frame from empty buffer\n      const frame = micCapture.readFrame();\n      expect(frame).toBeNull();\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/audio/__tests__/micCapture.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'context' is defined but never used.","line":30,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'processorName' is defined but never used.","line":30,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[991,994],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[991,994],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1040,1043],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1040,1043],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1097,1100],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1097,1100],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'base' is defined but never used.","line":53,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":163,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4889,4892],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4889,4892],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":164,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4952,4955],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4952,4955],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":167,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":167,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5078,5081],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5078,5081],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":179,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":179,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5489,5492],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5489,5492],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":216,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7069,7072],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7069,7072],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":219,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":219,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7191,7194],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7191,7194],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MicCapture } from '../micCapture';\n\n// Mock AudioContext and related APIs for testing\nclass MockAudioContext {\n  sampleRate = 48000;\n  state = 'running';\n  \n  audioWorklet = {\n    addModule: jest.fn().mockResolvedValue(undefined)\n  };\n  \n  createMediaStreamSource = jest.fn().mockReturnValue({\n    connect: jest.fn(),\n    disconnect: jest.fn()\n  });\n  \n  resume = jest.fn().mockResolvedValue(undefined);\n  close = jest.fn().mockResolvedValue(undefined);\n}\n\nclass MockAudioWorkletNode {\n  port = {\n    postMessage: jest.fn(),\n    onmessage: null\n  };\n  \n  connect = jest.fn();\n  disconnect = jest.fn();\n  \n  constructor(context, processorName) {}\n}\n\nclass MockMediaStream {\n  getTracks = jest.fn().mockReturnValue([\n    { stop: jest.fn() }\n  ]);\n}\n\n// Mock navigator.mediaDevices\nconst mockGetUserMedia = jest.fn();\nObject.defineProperty(navigator, 'mediaDevices', {\n  value: {\n    getUserMedia: mockGetUserMedia\n  },\n  configurable: true\n});\n\n// Mock global constructors\n(global as any).AudioContext = MockAudioContext;\n(global as any).AudioWorkletNode = MockAudioWorkletNode;\n(global as any).URL = class {\n  href: string;\n  constructor(url: string, base?: string) {\n    this.href = url;\n  }\n};\n\ndescribe('MicCapture', () => {\n  let micCapture: MicCapture;\n  \n  beforeEach(() => {\n    micCapture = new MicCapture();\n    mockGetUserMedia.mockResolvedValue(new MockMediaStream());\n  });\n  \n  afterEach(async () => {\n    if (micCapture.capturing) {\n      await micCapture.dispose();\n    }\n    jest.clearAllMocks();\n  });\n  \n  describe('Initialization', () => {\n    test('should initialize successfully', async () => {\n      await expect(micCapture.initialize()).resolves.not.toThrow();\n      expect(mockGetUserMedia).toHaveBeenCalledWith({\n        audio: {\n          sampleRate: 48000,\n          channelCount: 1,\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true\n        }\n      });\n    });\n    \n    test('should throw error if initialization fails', async () => {\n      mockGetUserMedia.mockRejectedValue(new Error('Permission denied'));\n      await expect(micCapture.initialize()).rejects.toThrow('Failed to initialize microphone capture');\n    });\n  });\n  \n  describe('Capture Control', () => {\n    beforeEach(async () => {\n      await micCapture.initialize();\n    });\n    \n    test('should start capture successfully', async () => {\n      await expect(micCapture.startCapture()).resolves.not.toThrow();\n      expect(micCapture.capturing).toBe(true);\n    });\n    \n    test('should stop capture successfully', async () => {\n      await micCapture.startCapture();\n      micCapture.stopCapture();\n      expect(micCapture.capturing).toBe(false);\n    });\n    \n    test('should throw error when starting capture without initialization', async () => {\n      const uninitializedCapture = new MicCapture();\n      await expect(uninitializedCapture.startCapture()).rejects.toThrow('MicCapture not initialized');\n    });\n  });\n  \n  describe('Properties', () => {\n    test('should return correct sample rate', () => {\n      expect(micCapture.sampleRate).toBe(16000);\n    });\n    \n    test('should return correct frame size (100ms at 16kHz)', () => {\n      expect(micCapture.frameSize).toBe(1600);\n    });\n  });\n  \n  describe('Offline Sine Wave Test', () => {\n    test('should process sine wave without byte-order flip', async () => {\n      // Create a mock shared buffer for testing\n      const frameSize = 1600; // 100ms at 16kHz\n      const bufferFrames = 10;\n      const headerSize = 2;\n      const bufferSize = headerSize + (frameSize * bufferFrames);\n      const sharedBuffer = new SharedArrayBuffer(bufferSize * Int16Array.BYTES_PER_ELEMENT);\n      const sharedBufferView = new Int16Array(sharedBuffer);\n      \n      // Initialize buffer indices\n      Atomics.store(sharedBufferView, 0, 0); // writeIndex\n      Atomics.store(sharedBufferView, 1, 0); // readIndex\n      \n      // Generate a sine wave at 440Hz (A4) for testing\n      const sampleRate = 16000;\n      const frequency = 440;\n      const amplitude = 16000; // Use a significant amplitude for testing\n      const testSamples = frameSize;\n      \n      // Generate sine wave samples\n      const sineWave = new Int16Array(testSamples);\n      for (let i = 0; i < testSamples; i++) {\n        const t = i / sampleRate;\n        const sample = Math.round(amplitude * Math.sin(2 * Math.PI * frequency * t));\n        sineWave[i] = Math.max(-32768, Math.min(32767, sample));\n      }\n      \n      // Simulate writing sine wave to shared buffer\n      for (let i = 0; i < testSamples; i++) {\n        const bufferIndex = headerSize + i;\n        sharedBufferView[bufferIndex] = sineWave[i];\n      }\n      \n      // Update write index to indicate data is available\n      Atomics.store(sharedBufferView, 0, testSamples);\n      \n      // Mock the shared buffer in micCapture\n      (micCapture as any).sharedBufferView = sharedBufferView;\n      (micCapture as any).isCapturing = true;\n      \n      // Read one frame using the private readFrame method\n      const frame = (micCapture as any).readFrame();\n      \n      expect(frame).not.toBeNull();\n      expect(frame.length).toBe(frameSize);\n      \n      // Verify that the data matches our sine wave (no byte-order flip)\n      for (let i = 0; i < Math.min(testSamples, frame.length); i++) {\n        expect(frame[i]).toBe(sineWave[i]);\n      }\n      \n      // Test byte conversion to Uint8Array\n      micCapture.stopCapture();\n      (micCapture as any).isCapturing = true;\n      \n      // Get one frame from the async iterator\n      const iterator = micCapture.read();\n      const result = await iterator.next();\n      \n      expect(result.done).toBe(false);\n      expect(result.value).toBeInstanceOf(Uint8Array);\n      expect(result.value!.length).toBe(frameSize * 2); // 2 bytes per sample\n      \n      // Verify byte order (little-endian)\n      const uint8Frame = result.value!;\n      for (let i = 0; i < Math.min(10, frameSize); i++) { // Test first 10 samples\n        const originalSample = sineWave[i];\n        const lowByte = uint8Frame[i * 2];\n        const highByte = uint8Frame[i * 2 + 1];\n        const reconstructedSample = lowByte | (highByte << 8);\n        \n        // Handle signed 16-bit conversion\n        const signedSample = reconstructedSample > 32767 ? reconstructedSample - 65536 : reconstructedSample;\n        expect(signedSample).toBe(originalSample);\n      }\n    });\n    \n    test('should handle empty buffer gracefully', async () => {\n      // Mock empty shared buffer\n      const frameSize = 1600;\n      const bufferFrames = 10;\n      const headerSize = 2;\n      const bufferSize = headerSize + (frameSize * bufferFrames);\n      const sharedBuffer = new SharedArrayBuffer(bufferSize * Int16Array.BYTES_PER_ELEMENT);\n      const sharedBufferView = new Int16Array(sharedBuffer);\n      \n      // Initialize buffer indices (both at 0, indicating empty buffer)\n      Atomics.store(sharedBufferView, 0, 0); // writeIndex\n      Atomics.store(sharedBufferView, 1, 0); // readIndex\n      \n      (micCapture as any).sharedBufferView = sharedBufferView;\n      \n      // Read frame from empty buffer\n      const frame = (micCapture as any).readFrame();\n      expect(frame).toBeNull();\n    });\n  });\n  \n  describe('Resource Cleanup', () => {\n    test('should dispose resources properly', async () => {\n      await micCapture.initialize();\n      await micCapture.startCapture();\n      \n      await expect(micCapture.dispose()).resolves.not.toThrow();\n      expect(micCapture.capturing).toBe(false);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/audio/__tests__/micProcessor.test.js","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":1,"column":26,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":1,"endColumn":55},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'result' is assigned a value but never used.","line":26,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":17}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { MicProcessor } = require('../micProcessor.js');\n\ndescribe('MicProcessor', () => {\n  let processor;\n  let input;\n  let output;\n  let parameters;\n\n  beforeEach(() => {\n    processor = new MicProcessor();\n    input = [[]]; // Empty input since we're simulating\n    output = [];\n    parameters = {};\n  });\n\n  test('should initialize without error', () => {\n    expect(processor).toBeDefined();\n  });\n\n  test('should process input without error', () => {\n    const result = processor.process(input, output, parameters);\n    expect(result).toBe(true);\n  });\n\n  test('should not process if no shared buffer is set', () => {\n    const result = processor.process(input, output, parameters);\n\n    // Simulate an input\n    input[0] = [0.5];\n    const nextResult = processor.process(input, output, parameters);\n    expect(nextResult).toBe(true);\n    expect(processor.sharedBufferView).toBeNull();\n  });\n\n  test('should process and queue frames when shared buffer is set', () => {\n    // Set up shared buffer\n    const sharedBuffer = new SharedArrayBuffer(3200 * Int16Array.BYTES_PER_ELEMENT); // enough buffer for 2 frames & header\n    const sharedBufferView = new Int16Array(sharedBuffer);\n    processor.port.onmessage({ data: { type: 'setSharedBuffer', buffer: sharedBuffer } });\n\n    // Simulate an input\n    input[0] = [0.5];\n    while (!processor.process(input, output, parameters)) {\n      input[0].push(0.5); // Fill with samples\n      if (processor.outputIndex >= processor.frameSize) break;\n    }\n\n    // Check if buffer is written\n    const currentWriteIndex = Atomics.load(sharedBufferView, 0);\n    expect(currentWriteIndex).toBeGreaterThan(0); // Ensure some data has been written\n  });\n\n  test('writeFrameToSharedBuffer should handle full buffers gracefully', () => {\n    // Simulate a full buffer\n    const sharedBuffer = new SharedArrayBuffer(3200 * Int16Array.BYTES_PER_ELEMENT);\n    const sharedBufferView = new Int16Array(sharedBuffer);\n    Atomics.store(sharedBufferView, 0, 1600 * 2); // Simulate full buffer\n    Atomics.store(sharedBufferView, 1, 0); // Read index at start\n\n    processor.port.onmessage({ data: { type: 'setSharedBuffer', buffer: sharedBuffer } });\n\n    // Fill output buffer\n    processor.outputBuffer.fill(1);\n    processor.writeFrameToSharedBuffer();\n\n    // Buffer should remain unchanged\n    const currentWriteIndex = Atomics.load(sharedBufferView, 0);\n    expect(currentWriteIndex).toBe(1600 * 2);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/audio/micCapture.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1436,1439],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1436,1439],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1475,1478],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1475,1478],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { azureSpeechService } from '@/lib/services/azure-speech-service';\n\nexport class MicCapture {\n  private audioContext: AudioContext | null = null;\n  private mediaStream: MediaStream | null = null;\n  private sourceNode: MediaStreamAudioSourceNode | null = null;\n  private workletNode: AudioWorkletNode | null = null;\n  private sharedBuffer: SharedArrayBuffer | null = null;\n  sharedBufferView: Int16Array | null = null;\n  isCapturing = false;\n  \n  // Buffer parameters\n  private readonly SAMPLE_RATE = 16000;\n  private readonly FRAME_SIZE = Math.floor(this.SAMPLE_RATE * 0.1); // 100ms = 1600 samples\n  private readonly BUFFER_FRAMES = 10; // Buffer for 1 second\n  private readonly HEADER_SIZE = 2; // writeIndex, readIndex\n  \n  constructor() {}\n  \n  /**\n   * Initialize the microphone capture system\n   */\n  async initialize(): Promise<void> {\n    try {\n      // Request microphone access\n      this.mediaStream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          sampleRate: 48000,\n          channelCount: 1,\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true\n        }\n      });\n      \n      // Create AudioContext\n      this.audioContext = new AudioContext({ sampleRate: 48000 });\n      \n      // Load the audio worklet\n      let workletUrl;\n      try {\n        // Try to use import.meta.url if available (ES modules)\n        const metaUrl = (globalThis as any).importMeta?.url || (globalThis as any).import?.meta?.url;\n        if (metaUrl) {\n          workletUrl = new URL('./micProcessor.js', metaUrl);\n        } else {\n          // Fallback for testing environments and other cases\n          workletUrl = { href: './micProcessor.js' };\n        }\n      } catch {\n        // Fallback for any errors\n        workletUrl = { href: './micProcessor.js' };\n      }\n      await this.audioContext.audioWorklet.addModule(workletUrl.href);\n      \n      // Create shared buffer for communication\n      const bufferSize = this.HEADER_SIZE + (this.FRAME_SIZE * this.BUFFER_FRAMES);\n      this.sharedBuffer = new SharedArrayBuffer(bufferSize * Int16Array.BYTES_PER_ELEMENT);\n      this.sharedBufferView = new Int16Array(this.sharedBuffer);\n      \n      // Initialize buffer indices\n      Atomics.store(this.sharedBufferView, 0, 0); // writeIndex\n      Atomics.store(this.sharedBufferView, 1, 0); // readIndex\n      \n      // Create audio nodes\n      this.sourceNode = this.audioContext.createMediaStreamSource(this.mediaStream);\n      this.workletNode = new AudioWorkletNode(this.audioContext, 'mic-processor');\n      \n      // Send shared buffer to worklet\n      this.workletNode.port.postMessage({\n        type: 'setSharedBuffer',\n        buffer: this.sharedBuffer\n      });\n      \n      // Connect the audio graph\n      this.sourceNode.connect(this.workletNode);\n      \n    } catch (error) {\n      throw new Error(`Failed to initialize microphone capture: ${error}`);\n    }\n  }\n  \n  /**\n   * Start capturing audio and transcribe using Azure Speech Service\n   */\n  async startCapture(): Promise<void> {\n    if (!this.audioContext || !this.workletNode) {\n      throw new Error('MicCapture not initialized. Call initialize() first.');\n    }\n    \n    if (this.audioContext.state === 'suspended') {\n      await this.audioContext.resume();\n      // Start Azure continuous recognition\n      await azureSpeechService.startContinuousRecognition((result) => {\n        console.log('Recognized Text:', result.text);\n        // TODO: Handle recognized text\n      }, (error) => {\n        console.error('Recognition Error:', error);\n      });\n\n    }\n    \n    this.isCapturing = true;\n  }\n  \n  /**\n   * Stop capturing audio\n   */\n  stopCapture(): void {\n    this.isCapturing = false;\n  }\n  \n  /**\n   * Async iterator that yields Uint8Array frames of ‚â§100ms audio data\n   */\n  async *read(): AsyncIterableIterator<Uint8Array> {\n    if (!this.sharedBufferView) {\n      throw new Error('MicCapture not initialized. Call initialize() first.');\n    }\n    \n    while (this.isCapturing) {\n      const frame = this.readFrame();\n      if (frame) {\n        // Convert Int16Array to Uint8Array (little-endian byte order)\n        const uint8Frame = new Uint8Array(frame.length * 2);\n        for (let i = 0; i < frame.length; i++) {\n          const sample = frame[i];\n          uint8Frame[i * 2] = sample & 0xFF;         // Low byte\n          uint8Frame[i * 2 + 1] = (sample >> 8) & 0xFF; // High byte\n        }\n        yield uint8Frame;\n      } else {\n        // No data available, wait a bit before trying again\n        await new Promise(resolve => setTimeout(resolve, 10));\n      }\n    }\n  }\n  \n  /**\n   * Read a single frame from the shared buffer\n   */\n  readFrame(): Int16Array | null {\n    if (!this.sharedBufferView) return null;\n    \n    const writeIndex = Atomics.load(this.sharedBufferView, 0);\n    const readIndex = Atomics.load(this.sharedBufferView, 1);\n    \n    // Check if data is available\n    if (readIndex === writeIndex) {\n      return null; // No data available\n    }\n    \n    const bufferSize = this.sharedBufferView.length - this.HEADER_SIZE;\n    const frame = new Int16Array(this.FRAME_SIZE);\n    \n    // Read frame from shared buffer\n    for (let i = 0; i < this.FRAME_SIZE; i++) {\n      const bufferIndex = this.HEADER_SIZE + ((readIndex + i) % bufferSize);\n      frame[i] = this.sharedBufferView[bufferIndex];\n    }\n    \n    // Update read index atomically\n    const nextReadIndex = (readIndex + this.FRAME_SIZE) % bufferSize;\n    Atomics.store(this.sharedBufferView, 1, nextReadIndex);\n    \n    return frame;\n  }\n  \n  /**\n   * Cleanup resources\n   */\n  async dispose(): Promise<void> {\n    this.stopCapture();\n    \n    if (this.workletNode) {\n      this.workletNode.disconnect();\n      this.workletNode = null;\n    }\n    \n    if (this.sourceNode) {\n      this.sourceNode.disconnect();\n      this.sourceNode = null;\n    }\n    \n    if (this.audioContext) {\n      await this.audioContext.close();\n      this.audioContext = null;\n    }\n    \n    if (this.mediaStream) {\n      this.mediaStream.getTracks().forEach(track => track.stop());\n      this.mediaStream = null;\n    }\n    \n    this.sharedBuffer = null;\n    this.sharedBufferView = null;\n  }\n  \n  /**\n   * Get the current capture status\n   */\n  get capturing(): boolean {\n    return this.isCapturing;\n  }\n  \n  /**\n   * Get the sample rate\n   */\n  get sampleRate(): number {\n    return this.SAMPLE_RATE;\n  }\n  \n  /**\n   * Get the frame size in samples\n   */\n  get frameSize(): number {\n    return this.FRAME_SIZE;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/audio/micProcessor.js","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'outputs' is defined but never used.","line":33,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'parameters' is defined but never used.","line":33,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":38}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"class MicProcessor extends AudioWorkletProcessor {\n  constructor() {\n    super();\n    \n    // Downsampling parameters\n    this.inputSampleRate = 48000;\n    this.outputSampleRate = 16000;\n    this.downsampleRatio = this.inputSampleRate / this.outputSampleRate; // 3.0\n    \n    // Buffer for accumulating samples\n    this.inputBuffer = [];\n    this.sampleIndex = 0;\n    \n    // Frame size for 100ms at 16kHz = 1600 samples\n    this.frameSize = Math.floor(this.outputSampleRate * 0.1); // 1600 samples\n    this.outputBuffer = new Int16Array(this.frameSize);\n    this.outputIndex = 0;\n    \n    // SharedArrayBuffer for communication with main thread\n    this.sharedBuffer = null;\n    this.sharedBufferView = null;\n    this.writeIndex = 0;\n    \n    // Listen for messages from main thread\n    this.port.onmessage = (event) => {\n      if (event.data.type === 'setSharedBuffer') {\n        this.sharedBuffer = event.data.buffer;\n        this.sharedBufferView = new Int16Array(this.sharedBuffer);\n      }\n    };\n  }\n  \n  process(inputs, outputs, parameters) {\n    const input = inputs[0];\n    \n    if (!input || !input[0] || !this.sharedBufferView) {\n      return true;\n    }\n    \n    const inputChannel = input[0];\n    \n    // Process each sample\n    for (let i = 0; i < inputChannel.length; i++) {\n      this.inputBuffer.push(inputChannel[i]);\n      \n      // Check if we have enough samples for downsampling\n      while (this.inputBuffer.length >= Math.floor(this.sampleIndex + this.downsampleRatio)) {\n        // Linear interpolation for downsampling\n        const exactIndex = this.sampleIndex;\n        const lowerIndex = Math.floor(exactIndex);\n        const upperIndex = Math.min(lowerIndex + 1, this.inputBuffer.length - 1);\n        const fraction = exactIndex - lowerIndex;\n        \n        const interpolatedSample = this.inputBuffer[lowerIndex] * (1 - fraction) + \n                                 this.inputBuffer[upperIndex] * fraction;\n        \n        // Convert to 16-bit PCM\n        const pcmSample = Math.max(-32768, Math.min(32767, Math.round(interpolatedSample * 32767)));\n        \n        this.outputBuffer[this.outputIndex] = pcmSample;\n        this.outputIndex++;\n        \n        // If we have a complete frame, write to shared buffer\n        if (this.outputIndex >= this.frameSize) {\n          this.writeFrameToSharedBuffer();\n          this.outputIndex = 0;\n        }\n        \n        this.sampleIndex += this.downsampleRatio;\n      }\n      \n      // Remove processed samples from input buffer to prevent memory leak\n      if (this.inputBuffer.length > this.downsampleRatio * 2) {\n        const samplesToRemove = Math.floor(this.sampleIndex);\n        this.inputBuffer.splice(0, samplesToRemove);\n        this.sampleIndex -= samplesToRemove;\n      }\n    }\n    \n    return true;\n  }\n  \n  writeFrameToSharedBuffer() {\n    if (!this.sharedBufferView) return;\n    \n    // SharedBuffer layout: [writeIndex, readIndex, ...data]\n    const headerSize = 2;\n    const bufferSize = this.sharedBufferView.length - headerSize;\n    const currentWriteIndex = Atomics.load(this.sharedBufferView, 0);\n    const readIndex = Atomics.load(this.sharedBufferView, 1);\n    \n    // Check if buffer has space\n    const nextWriteIndex = (currentWriteIndex + this.frameSize) % bufferSize;\n    if (nextWriteIndex === readIndex) {\n      // Buffer full, skip this frame\n      return;\n    }\n    \n    // Write frame to shared buffer\n    for (let i = 0; i < this.frameSize; i++) {\n      const bufferIndex = headerSize + ((currentWriteIndex + i) % bufferSize);\n      this.sharedBufferView[bufferIndex] = this.outputBuffer[i];\n    }\n    \n    // Update write index atomically\n    Atomics.store(this.sharedBufferView, 0, nextWriteIndex);\n    \n    // Notify main thread\n    this.port.postMessage({ type: 'frameReady', frameSize: this.frameSize });\n  }\n};\n\nregisterProcessor('mic-processor', MicProcessor);\n\n// For unit tests\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = { MicProcessor };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/auth-unified.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":225,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":225,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5553,5556],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5553,5556],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":226,"column":30,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":226,"endColumn":58},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":236,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":236,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5811,5814],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5811,5814],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Unified Basic Authentication Utility\n * \n * Replacement for lib/auth.ts using the unified auth library\n * Provides simplified authentication functions for basic use cases\n */\n\nimport { NextRequest } from 'next/server';\nimport { \n  verifyAuthHeader,\n  getUserFromSessionCookie,\n  extractUserFromRequest,\n  AuthenticatedUser,\n  UserSession,\n  AuthResult,\n  createNextHealthResponse\n} from '@/lib/shared/auth';\n\n// ===== SIMPLIFIED AUTH INTERFACE =====\n\n/**\n * Verify session from NextRequest\n * \n * Replaces the old verifySession function with unified implementation\n */\nexport async function verifySession(request: NextRequest): Promise<UserSession | null> {\n  try {\n    const user = await extractUserFromRequest(request);\n    \n    if (!user) {\n      return null;\n    }\n\n    return {\n      userId: user.uid,\n      email: user.email,\n      verified: user.email_verified\n    };\n  } catch (error) {\n    console.error('Session verification error:', error);\n    return null;\n  }\n}\n\n/**\n * Require authentication and return user session\n * \n * Replaces the old requireAuth function\n */\nexport async function requireAuth(request: NextRequest): Promise<UserSession> {\n  const session = await verifySession(request);\n  if (!session) {\n    throw new Error('Authentication required');\n  }\n  return session;\n}\n\n/**\n * Get authenticated user from request\n * \n * Enhanced version that returns full user details\n */\nexport async function getAuthenticatedUser(request: NextRequest): Promise<AuthenticatedUser | null> {\n  return extractUserFromRequest(request);\n}\n\n/**\n * Check if request is authenticated\n */\nexport async function isAuthenticated(request: NextRequest): Promise<boolean> {\n  const user = await getAuthenticatedUser(request);\n  return !!user;\n}\n\n/**\n * Verify token directly (for custom implementations)\n */\nexport async function verifyToken(token: string): Promise<AuthResult> {\n  const { verifyToken: coreVerifyToken } = await import('@/lib/shared/auth');\n  const result = await coreVerifyToken(token);\n  \n  return {\n    success: result.valid,\n    user: result.user || null,\n    error: result.error\n  };\n}\n\n// ===== SESSION MANAGEMENT =====\n\n/**\n * Get user from session cookie (for server components)\n * \n * Unified implementation replacing the old function\n */\nexport async function getUserFromSession(sessionCookie: string): Promise<AuthResult> {\n  try {\n    const user = await getUserFromSessionCookie(sessionCookie);\n    \n    return {\n      success: !!user,\n      user: user,\n      error: user ? undefined : 'Session verification failed'\n    };\n  } catch (error) {\n    return {\n      success: false,\n      user: null,\n      error: error instanceof Error ? error.message : 'Session verification failed'\n    };\n  }\n}\n\n/**\n * Extract user session from various sources\n */\nexport async function extractSession(request: NextRequest): Promise<UserSession | null> {\n  try {\n    // Try authorization header first\n    const authHeader = request.headers.get('authorization');\n    if (authHeader) {\n      const authResult = await verifyAuthHeader(authHeader);\n      if (authResult.success && authResult.user) {\n        return {\n          userId: authResult.user.uid,\n          email: authResult.user.email,\n          verified: authResult.user.email_verified\n        };\n      }\n    }\n\n    // Try session cookie as fallback\n    const sessionCookie = request.cookies.get('session')?.value;\n    if (sessionCookie) {\n      const user = await getUserFromSessionCookie(sessionCookie);\n      if (user) {\n        return {\n          userId: user.uid,\n          email: user.email,\n          verified: user.email_verified\n        };\n      }\n    }\n\n    return null;\n  } catch (error) {\n    console.error('Session extraction error:', error);\n    return null;\n  }\n}\n\n// ===== ROLE AND PERMISSION HELPERS =====\n\n/**\n * Check if user has specific role\n */\nexport async function userHasRole(request: NextRequest, role: string): Promise<boolean> {\n  const user = await getAuthenticatedUser(request);\n  if (!user) return false;\n  \n  const roles = user.custom_claims?.roles || [];\n  return roles.includes(role);\n}\n\n/**\n * Check if user has any of the specified roles\n */\nexport async function userHasAnyRole(request: NextRequest, requiredRoles: string[]): Promise<boolean> {\n  const user = await getAuthenticatedUser(request);\n  if (!user) return false;\n  \n  const userRoles = user.custom_claims?.roles || [];\n  return requiredRoles.some(role => userRoles.includes(role));\n}\n\n/**\n * Check if user is admin\n */\nexport async function isAdmin(request: NextRequest): Promise<boolean> {\n  return userHasRole(request, 'admin');\n}\n\n/**\n * Get user roles\n */\nexport async function getUserRoles(request: NextRequest): Promise<string[]> {\n  const user = await getAuthenticatedUser(request);\n  return user?.custom_claims?.roles || [];\n}\n\n// ===== UTILITY FUNCTIONS =====\n\n/**\n * Health check utility (no auth required)\n * \n * Replaces the old createHealthCheckResponse\n */\nexport function createHealthCheckResponse() {\n  return createNextHealthResponse();\n}\n\n/**\n * Create error response for authentication failures\n */\nexport function createAuthErrorResponse(message: string, statusCode: number = 401) {\n  return new Response(\n    JSON.stringify({\n      error: message,\n      timestamp: new Date().toISOString()\n    }),\n    {\n      status: statusCode,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n  );\n}\n\n// ===== PERFORMANCE MONITORING =====\n\n/**\n * Get authentication performance metrics\n */\nexport function getAuthPerformanceMetrics(): Record<string, any> {\n  const { getAuthMetrics } = require('@/lib/shared/auth');\n  return getAuthMetrics();\n}\n\n/**\n * Benchmark authentication performance\n */\nexport async function benchmarkAuth(\n  request: NextRequest,\n  iterations: number = 100\n): Promise<Record<string, any>> {\n  const { benchmarkNextAuth } = await import('@/lib/shared/auth');\n  return benchmarkNextAuth(request, iterations);\n}\n\n// ===== MIGRATION HELPERS =====\n\n/**\n * Validate that unified auth is working correctly\n */\nexport async function validateUnifiedAuth(): Promise<{\n  valid: boolean;\n  issues: string[];\n}> {\n  const issues: string[] = [];\n\n  try {\n    const { authSystemHealthCheck } = await import('@/lib/shared/auth');\n    const health = await authSystemHealthCheck();\n    \n    if (!health.healthy) {\n      issues.push('Authentication system health check failed');\n    }\n\n    return {\n      valid: issues.length === 0,\n      issues\n    };\n  } catch (error) {\n    issues.push(`Health check failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    return {\n      valid: false,\n      issues\n    };\n  }\n}\n\n// ===== LEGACY TYPE EXPORTS =====\n\n// Re-export types for backward compatibility\nexport type { AuthenticatedUser, UserSession, AuthResult };\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/agents/__tests__/agents.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":8,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":11,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2090,2093],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2090,2093],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":8,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":11,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2263,2266],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2263,2266],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":138,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4519,4522],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4519,4522],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'factory' is assigned a value but never used.","line":327,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":327,"endColumn":20}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { jest } from '@jest/globals';\nimport { TechnicalInterviewer } from '../technical-interviewer';\nimport { BehavioralInterviewer } from '../behavioral-interviewer';\nimport { IndustryExpert } from '../industry-expert';\nimport { AgentFactory } from '../agent-factory';\nimport { AgentOrchestrator } from '../agent-orchestrator';\nimport { InterviewContext } from '../../types/agent-types';\n\n// Mock the FoundryClientBase to avoid actual API calls\njest.mock('../../clients/foundry-client', () => ({\n  FoundryClientBase: jest.fn().mockImplementation(() => ({\n    request: jest.fn().mockResolvedValue({\n      data: {\n        choices: [\n          {\n            message: {\n              content: JSON.stringify([\n                {\n                  text: 'What is your experience with React?',\n                  category: 'frontend',\n                  difficulty: 'intermediate',\n                  followUps: ['Tell me about state management', 'How do you handle side effects?']\n                },\n                {\n                  text: 'Explain the concept of closures in JavaScript',\n                  category: 'javascript',\n                  difficulty: 'intermediate',\n                  followUps: ['Can you provide an example?', 'When would you use closures?']\n                }\n              ])\n            }\n          }\n        ],\n        usage: {\n          total_tokens: 150,\n          prompt_tokens: 100,\n          completion_tokens: 50\n        }\n      }\n    })\n  }))\n}));\n\ndescribe('Agent System Tests', () => {\n  // Mock foundry client and config for constructor calls\n  const mockFoundryClient = {\n    request: jest.fn().mockResolvedValue({\n      data: {\n        choices: [{\n          message: {\n            content: JSON.stringify([{\n              id: 'mock-q-1',\n              text: 'Mock question',\n              type: 'technical',\n              category: 'technical',\n              difficulty: 'medium',\n              expectedDuration: 300,\n              tags: ['mock'],\n              metadata: { topic: 'test' }\n            }])\n          }\n        }]\n      }\n    })\n  } as any;\n  \n  const mockConfig = {\n    apiKey: 'test-api-key',\n    endpoint: 'https://test.openai.azure.com',\n    models: { 'gpt-4': { name: 'gpt-4', maxTokens: 4096 } }\n  } as any;\n\n  const mockContext: InterviewContext = {\n    sessionId: 'test-session-123',\n    candidateName: 'John Doe',\n    role: 'Senior Frontend Developer',\n    experienceLevel: 'mid',\n    industry: 'technology',\n    candidateProfile: {\n      name: 'John Doe',\n      experience: 'mid-level',\n      skills: ['JavaScript', 'React', 'Node.js'],\n      targetRole: 'Senior Frontend Developer',\n      industry: 'technology',\n      previousRoles: ['Software Developer', 'Frontend Developer']\n    },\n    jobRole: 'Senior Frontend Developer',\n    companyInfo: {\n      name: 'Tech Corp',\n      industry: 'technology',\n      size: 'medium'\n    },\n    interviewConfig: {\n      duration: 60,\n      focusAreas: ['frontend', 'javascript', 'react'],\n      difficulty: 'mid',\n      includeFollowUps: true\n    },\n    previousQuestions: [],\n    previousAnswers: [],\n    currentPhase: 'technical',\n    metadata: {}\n  };\n\n  describe('TechnicalInterviewer', () => {\n    let technicalAgent: TechnicalInterviewer;\n\n    beforeEach(() => {\n      technicalAgent = new TechnicalInterviewer(mockFoundryClient, mockConfig);\n    });\n\n    test('should create technical interviewer with correct configuration', () => {\n      expect(technicalAgent).toBeInstanceOf(TechnicalInterviewer);\n      expect(technicalAgent.id).toBe('technical-interviewer');\n      expect(technicalAgent.name).toBe('Technical Interviewer');\n      expect(technicalAgent.type).toBe('technical');\n    });\n\n    test('should generate technical questions', async () => {\n      const questions = await technicalAgent.generateQuestions(mockContext);\n      \n      expect(questions).toBeDefined();\n      expect(Array.isArray(questions)).toBe(true);\n      expect(questions.length).toBeGreaterThan(0);\n      \n      // Verify question structure\n      const firstQuestion = questions[0];\n      expect(firstQuestion).toHaveProperty('text');\n      expect(firstQuestion).toHaveProperty('category');\n      expect(firstQuestion).toHaveProperty('difficulty');\n      expect(firstQuestion).toHaveProperty('followUps');\n    });\n\n    test('should return fallback questions when API fails', async () => {\n      // Mock API failure\n      const mockFailingClient = {\n        request: jest.fn().mockRejectedValue(new Error('API Error'))\n      } as any;\n      const failingAgent = new TechnicalInterviewer(mockFailingClient, mockConfig);\n\n      const questions = await failingAgent.generateQuestions(mockContext);\n      \n      expect(questions).toBeDefined();\n      expect(questions.length).toBeGreaterThan(0);\n      // Should return fallback questions\n      expect(questions[0].id).toContain('tech-fallback');\n    });\n  });\n\n  describe('BehavioralInterviewer', () => {\n    let behavioralAgent: BehavioralInterviewer;\n\n    beforeEach(() => {\n      behavioralAgent = new BehavioralInterviewer(mockFoundryClient, mockConfig);\n    });\n\n    test('should create behavioral interviewer with correct configuration', () => {\n      expect(behavioralAgent).toBeInstanceOf(BehavioralInterviewer);\n      expect(behavioralAgent.id).toBe('behavioral-interviewer');\n      expect(behavioralAgent.name).toBe('Behavioral Interviewer');\n      expect(behavioralAgent.type).toBe('behavioral');\n    });\n\n    test('should generate behavioral questions', async () => {\n      const questions = await behavioralAgent.generateQuestions(mockContext);\n      \n      expect(questions).toBeDefined();\n      expect(Array.isArray(questions)).toBe(true);\n      expect(questions.length).toBeGreaterThan(0);\n    });\n\n    test('should include leadership questions for senior candidates', async () => {\n      const seniorContext = {\n        ...mockContext,\n        candidateProfile: {\n          ...mockContext.candidateProfile!,\n          experience: 'senior'\n        }\n      };\n\n      const questions = await behavioralAgent.generateQuestions(seniorContext);\n      expect(questions.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('IndustryExpert', () => {\n    let industryAgent: IndustryExpert;\n\n    beforeEach(() => {\n      industryAgent = new IndustryExpert(mockFoundryClient, mockConfig);\n    });\n\n    test('should create industry expert with correct configuration', () => {\n      expect(industryAgent).toBeInstanceOf(IndustryExpert);\n      expect(industryAgent.id).toBe('industry-expert');\n      expect(industryAgent.name).toBe('Industry Expert');\n      expect(industryAgent.type).toBe('industry');\n    });\n\n    test('should generate industry-specific questions', async () => {\n      const questions = await industryAgent.generateQuestions(mockContext);\n      \n      expect(questions).toBeDefined();\n      expect(Array.isArray(questions)).toBe(true);\n      expect(questions.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('AgentFactory', () => {\n    let factory: AgentFactory;\n\n    beforeEach(() => {\n      factory = AgentFactory.getInstance(mockFoundryClient, mockConfig);\n      factory.clearCache(); // Clear cache between tests\n    });\n\n    test('should create agents of different types', () => {\n      const technical = factory.createAgent('technical');\n      const behavioral = factory.createAgent('behavioral');\n      const industry = factory.createAgent('industry');\n\n      expect(technical).toBeInstanceOf(TechnicalInterviewer);\n      expect(behavioral).toBeInstanceOf(BehavioralInterviewer);\n      expect(industry).toBeInstanceOf(IndustryExpert);\n    });\n\n    test('should return cached instances', () => {\n      const agent1 = factory.createAgent('technical');\n      const agent2 = factory.createAgent('technical');\n\n      expect(agent1).toBe(agent2); // Same instance\n    });\n\n    test('should create default agent set', () => {\n      const agentSet = factory.createDefaultSet();\n\n      expect(agentSet).toHaveProperty('technical');\n      expect(agentSet).toHaveProperty('behavioral');\n      expect(agentSet).toHaveProperty('industry');\n    });\n\n    test('should create agents based on requirements', () => {\n      const agents = factory.createAgentsForRequirements({\n        includeTechnical: true,\n        includeBehavioral: true,\n        includeIndustry: false,\n        experienceLevel: 'senior'\n      });\n\n      expect(agents).toHaveLength(2);\n      expect(agents[0]).toBeInstanceOf(TechnicalInterviewer);\n      expect(agents[1]).toBeInstanceOf(BehavioralInterviewer);\n    });\n\n    test('should provide agent information', () => {\n      const techInfo = factory.getAgentInfo('technical');\n\n      expect(techInfo).toHaveProperty('type', 'technical');\n      expect(techInfo).toHaveProperty('name', 'Technical Interviewer');\n      expect(techInfo).toHaveProperty('defaultModel', 'gpt-4.5');\n      expect(techInfo).toHaveProperty('capabilities');\n      expect(Array.isArray(techInfo.capabilities)).toBe(true);\n    });\n  });\n\n  describe('AgentOrchestrator', () => {\n    let orchestrator: AgentOrchestrator;\n\n    beforeEach(() => {\n      orchestrator = new AgentOrchestrator();\n    });\n\n    test('should create standard session configuration', () => {\n      const config = orchestrator.createStandardSession({\n        sessionId: 'test-session',\n        candidateProfile: mockContext.candidateProfile!,\n        jobRole: 'Senior Developer',\n        experienceLevel: 'senior'\n      });\n\n      expect(config.sessionId).toBe('test-session');\n      expect(config.phases).toBeDefined();\n      expect(config.phases.length).toBeGreaterThan(0);\n      expect(config.context).toBeDefined();\n    });\n\n    test('should execute interview session', async () => {\n      const config = orchestrator.createStandardSession({\n        sessionId: 'test-execution',\n        candidateProfile: mockContext.candidateProfile!,\n        jobRole: 'Frontend Developer',\n        experienceLevel: 'mid'\n      });\n\n      const result = await orchestrator.startSession(config);\n\n      expect(result.sessionId).toBe('test-execution');\n      expect(result.allQuestions).toBeDefined();\n      expect(result.phaseResults).toBeDefined();\n      expect(result.metrics).toBeDefined();\n      expect(result.metrics.successRate).toBeGreaterThan(0);\n    });\n\n    test('should track session state', async () => {\n      const config = orchestrator.createStandardSession({\n        sessionId: 'state-test',\n        candidateProfile: mockContext.candidateProfile!,\n        jobRole: 'Developer'\n      });\n\n      // Start session in background\n      const sessionPromise = orchestrator.startSession(config);\n\n      // Check that session is tracked initially\n      expect(orchestrator.getActiveSessions()).toContain('state-test');\n\n      // Wait for completion\n      await sessionPromise;\n\n      // Session should be cleaned up\n      expect(orchestrator.getActiveSessions()).not.toContain('state-test');\n    });\n  });\n\n  describe('Integration Tests', () => {\n    test('should complete full interview workflow', async () => {\n      const factory = AgentFactory.getInstance();\n      const orchestrator = new AgentOrchestrator();\n\n      // Create session\n      const config = orchestrator.createStandardSession({\n        sessionId: 'integration-test',\n        candidateProfile: {\n          name: 'Jane Smith',\n          experience: 'senior',\n          skills: ['Python', 'Machine Learning', 'AWS'],\n          targetRole: 'Senior Data Scientist',\n          industry: 'technology',\n          previousRoles: ['Data Scientist', 'ML Engineer']\n        },\n        jobRole: 'Senior Data Scientist',\n        companyInfo: {\n          name: 'AI Startup',\n          industry: 'technology',\n          size: 'startup'\n        },\n        experienceLevel: 'senior'\n      });\n\n      // Execute session\n      const result = await orchestrator.startSession(config);\n\n      // Validate results\n      expect(result.allQuestions.length).toBeGreaterThan(0);\n      expect(result.metrics.successRate).toBeGreaterThan(0);\n      expect(result.phaseResults.length).toBeGreaterThan(0);\n\n      // Verify questions from different agents\n      const hasVariousCategories = result.allQuestions.some(q => \n        ['technical', 'behavioral', 'industry'].includes(q.category || '')\n      );\n      expect(hasVariousCategories).toBe(true);\n\n      console.log('Integration test results:', {\n        totalQuestions: result.allQuestions.length,\n        phases: result.phaseResults.length,\n        successRate: result.metrics.successRate,\n        executionTime: result.metrics.totalExecutionTime\n      });\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/agents/agent-orchestrator.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[417,420],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[417,420],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[498,501],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[498,501],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1748,1751],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1748,1751],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FoundryAgent, InterviewContext, Question } from '../types/agent-types';\nimport { AgentFactory, AgentType, AgentFactoryConfig } from './agent-factory';\n\n/**\n * Orchestrator session state (different from global SessionState)\n */\ninterface OrchestratorSessionState {\n  sessionId: string;\n  currentPhase: number;\n  totalPhases: number;\n  completedQuestions: number;\n  allQuestions: Question[];\n  agentResponses: any[];\n  startTime: number;\n  lastUpdateTime: number;\n  metadata: Record<string, any>;\n}\n\n/**\n * Interview phase configuration\n */\nexport interface InterviewPhase {\n  /** Unique identifier for the phase */\n  id: string;\n  /** Display name for the phase */\n  name: string;\n  /** Agent type to use for this phase */\n  agentType: AgentType;\n  /** Optional agent configuration overrides */\n  agentConfig?: AgentFactoryConfig;\n  /** Number of questions to generate in this phase */\n  questionCount: number;\n  /** Whether this phase is optional */\n  optional?: boolean;\n  /** Conditions that must be met to include this phase */\n  conditions?: {\n    minExperienceLevel?: 'entry' | 'mid' | 'senior' | 'executive';\n    requiredIndustry?: string[];\n    requiredRoleType?: 'individual-contributor' | 'management' | 'leadership';\n  };\n}\n\n/**\n * Interview session configuration\n */\nexport interface InterviewSessionConfig {\n  /** Unique session identifier */\n  sessionId: string;\n  /** Interview phases to execute */\n  phases: InterviewPhase[];\n  /** Global context for the interview */\n  context: InterviewContext;\n  /** Maximum total interview duration in minutes */\n  maxDurationMinutes?: number;\n  /** Whether to allow skipping optional phases */\n  allowSkipOptional?: boolean;\n  /** Custom session metadata */\n  metadata?: Record<string, any>;\n}\n\n/**\n * Interview session result\n */\nexport interface InterviewSessionResult {\n  /** Session identifier */\n  sessionId: string;\n  /** All generated questions across all phases */\n  allQuestions: Question[];\n  /** Questions organized by phase */\n  phaseResults: Array<{\n    phase: InterviewPhase;\n    questions: Question[];\n    agent: FoundryAgent;\n    executionTime: number;\n    success: boolean;\n    error?: string;\n  }>;\n  /** Session execution metrics */\n  metrics: {\n    totalExecutionTime: number;\n    totalCost: number;\n    totalTokensUsed: number;\n    phasesCompleted: number;\n    phasesSkipped: number;\n    successRate: number;\n  };\n  /** Final session state */\n  finalState: OrchestratorSessionState;\n}\n\n/**\n * AgentOrchestrator manages multi-agent interview sessions\n * \n * Coordinates the execution of different interview phases using specialized agents,\n * manages session state, tracks progress, and provides comprehensive reporting.\n */\nexport class AgentOrchestrator {\n  private agentFactory: AgentFactory;\n  private activeSessions: Map<string, OrchestratorSessionState> = new Map();\n\n  constructor() {\n    this.agentFactory = AgentFactory.getInstance();\n  }\n\n  /**\n   * Start a new interview session\n   * \n   * @param config - Session configuration\n   * @returns Promise resolving to session result\n   */\n  async startSession(config: InterviewSessionConfig): Promise<InterviewSessionResult> {\n    const startTime = Date.now();\n    console.log(`Starting interview session: ${config.sessionId}`);\n\n    // Initialize session state\n    const sessionState: OrchestratorSessionState = {\n      sessionId: config.sessionId,\n      currentPhase: 0,\n      totalPhases: config.phases.length,\n      completedQuestions: 0,\n      allQuestions: [],\n      agentResponses: [],\n      startTime,\n      lastUpdateTime: startTime,\n      metadata: config.metadata || {}\n    };\n\n    this.activeSessions.set(config.sessionId, sessionState);\n\n    const phaseResults: InterviewSessionResult['phaseResults'] = [];\n    let totalCost = 0;\n    let totalTokensUsed = 0;\n    let phasesCompleted = 0;\n    let phasesSkipped = 0;\n\n    // Execute each phase\n    for (let i = 0; i < config.phases.length; i++) {\n      const phase = config.phases[i];\n      const phaseStartTime = Date.now();\n\n      try {\n        // Check if phase should be executed\n        if (phase.optional && !this.shouldExecutePhase(phase, config.context)) {\n          console.log(`Skipping optional phase: ${phase.name}`);\n          phasesSkipped++;\n          continue;\n        }\n\n        console.log(`Executing phase ${i + 1}/${config.phases.length}: ${phase.name}`);\n\n        // Create agent for this phase\n        const agent = this.agentFactory.createAgent(phase.agentType, phase.agentConfig);\n\n        // Update context with session history\n        const phaseContext: InterviewContext = {\n          ...config.context,\n          sessionHistory: {\n            previousQuestions: sessionState.allQuestions\n          }\n        };\n\n        // Generate questions for this phase\n        const questions = await agent.generateQuestions(phaseContext);\n\n        // Limit questions to requested count\n        const limitedQuestions = questions.slice(0, phase.questionCount);\n\n        // Update session state\n        sessionState.currentPhase = i + 1;\n        sessionState.allQuestions.push(...limitedQuestions);\n        sessionState.completedQuestions += limitedQuestions.length;\n        sessionState.lastUpdateTime = Date.now();\n\n        const executionTime = Date.now() - phaseStartTime;\n\n        // Track phase result\n        phaseResults.push({\n          phase,\n          questions: limitedQuestions,\n          agent,\n          executionTime,\n          success: true\n        });\n\n        phasesCompleted++;\n\n        // Update cost and token tracking (placeholder - would integrate with actual usage tracking)\n        totalCost += this.estimatePhaseCost(limitedQuestions.length, phase.agentType);\n        totalTokensUsed += this.estimatePhaseTokens(limitedQuestions.length, phase.agentType);\n\n        console.log(`Phase ${phase.name} completed: ${limitedQuestions.length} questions generated in ${executionTime}ms`);\n\n      } catch (error) {\n        console.error(`Error executing phase ${phase.name}:`, error);\n        \n        const executionTime = Date.now() - phaseStartTime;\n        phaseResults.push({\n          phase,\n          questions: [],\n          agent: this.agentFactory.createAgent(phase.agentType), // Create agent for consistency\n          executionTime,\n          success: false,\n          error: error instanceof Error ? error.message : 'Unknown error'\n        });\n\n        // Continue with next phase rather than failing entire session\n        if (!phase.optional) {\n          console.warn(`Required phase ${phase.name} failed, but continuing session`);\n        }\n      }\n    }\n\n    const totalExecutionTime = Date.now() - startTime;\n\n    // Calculate final metrics\n    const successfulPhases = phaseResults.filter(r => r.success).length;\n    const successRate = config.phases.length > 0 ? successfulPhases / config.phases.length : 0;\n\n    const result: InterviewSessionResult = {\n      sessionId: config.sessionId,\n      allQuestions: sessionState.allQuestions,\n      phaseResults,\n      metrics: {\n        totalExecutionTime,\n        totalCost,\n        totalTokensUsed,\n        phasesCompleted,\n        phasesSkipped,\n        successRate\n      },\n      finalState: sessionState\n    };\n\n    // Clean up session from active sessions\n    this.activeSessions.delete(config.sessionId);\n\n    console.log(`Interview session ${config.sessionId} completed:`, {\n      totalQuestions: result.allQuestions.length,\n      phases: phasesCompleted,\n      duration: `${totalExecutionTime}ms`,\n      successRate: `${(successRate * 100).toFixed(1)}%`\n    });\n\n    return result;\n  }\n\n  /**\n   * Create a standard interview session configuration\n   * \n   * @param params - Basic interview parameters\n   * @returns Complete session configuration\n   */\n  createStandardSession(params: {\n    sessionId: string;\n    candidateProfile: InterviewContext['candidateProfile'];\n    jobRole: string;\n    companyInfo?: InterviewContext['companyInfo'];\n    experienceLevel?: 'entry' | 'mid' | 'senior' | 'executive';\n    includePhases?: {\n      technical?: boolean;\n      behavioral?: boolean;\n      industry?: boolean;\n    };\n  }): InterviewSessionConfig {\n    const phases: InterviewPhase[] = [];\n\n    // Technical phase (default: included)\n    if (params.includePhases?.technical !== false) {\n      phases.push({\n        id: 'technical',\n        name: 'Technical Assessment',\n        agentType: 'technical',\n        questionCount: params.experienceLevel === 'entry' ? 4 : 6,\n        agentConfig: {\n          temperature: params.experienceLevel === 'entry' ? 0.3 : 0.5\n        }\n      });\n    }\n\n    // Behavioral phase (default: included)\n    if (params.includePhases?.behavioral !== false) {\n      phases.push({\n        id: 'behavioral',\n        name: 'Behavioral Interview',\n        agentType: 'behavioral',\n        questionCount: 5,\n        agentConfig: {\n          temperature: 0.7\n        }\n      });\n    }\n\n    // Industry phase (optional for senior+ or specific industries)\n    if (params.includePhases?.industry !== false) {\n      phases.push({\n        id: 'industry',\n        name: 'Industry Knowledge',\n        agentType: 'industry',\n        questionCount: 4,\n        optional: true,\n        conditions: {\n          minExperienceLevel: 'mid'\n        },\n        agentConfig: {\n          temperature: 0.6\n        }\n      });\n    }\n\n    return {\n      sessionId: params.sessionId,\n      phases,\n      context: {\n        sessionId: params.sessionId,\n        candidateName: params.candidateProfile.name || 'Candidate',\n        role: params.jobRole,\n        experienceLevel: params.experienceLevel || 'mid',\n        industry: params.candidateProfile.industry,\n        resumeContent: params.candidateProfile.resumeContent,\n        candidateProfile: params.candidateProfile,\n        jobRole: params.jobRole,\n        companyInfo: params.companyInfo,\n        interviewConfig: {\n          duration: 60,\n          focusAreas: ['technical', 'behavioral'],\n          difficulty: params.experienceLevel === 'executive' ? 'expert' : (params.experienceLevel || 'mid'),\n          includeFollowUps: true\n        },\n        previousQuestions: [],\n        previousAnswers: [],\n        currentPhase: 'technical',\n        metadata: {\n          sessionType: 'standard',\n          createdAt: new Date().toISOString()\n        }\n      },\n      maxDurationMinutes: 60,\n      allowSkipOptional: true,\n      metadata: {\n        experienceLevel: params.experienceLevel,\n        createdAt: new Date().toISOString()\n      }\n    };\n  }\n\n  /**\n   * Get active session state\n   */\n  getSessionState(sessionId: string): OrchestratorSessionState | undefined {\n    return this.activeSessions.get(sessionId);\n  }\n\n  /**\n   * Get all active session IDs\n   */\n  getActiveSessions(): string[] {\n    return Array.from(this.activeSessions.keys());\n  }\n\n  /**\n   * Cancel an active session\n   */\n  cancelSession(sessionId: string): boolean {\n    return this.activeSessions.delete(sessionId);\n  }\n\n  /**\n   * Determine if a phase should be executed based on conditions\n   */\n  private shouldExecutePhase(phase: InterviewPhase, context: InterviewContext): boolean {\n    if (!phase.conditions) return true;\n\n    const { conditions } = phase;\n\n    // Check experience level requirement\n    if (conditions.minExperienceLevel) {\n      const experienceLevels = ['entry', 'mid', 'senior', 'executive'];\n      const candidateLevel = context.candidateProfile?.experience?.toLowerCase() || 'mid';\n      const candidateIndex = experienceLevels.indexOf(candidateLevel);\n      const requiredIndex = experienceLevels.indexOf(conditions.minExperienceLevel);\n      \n      if (candidateIndex < requiredIndex) {\n        return false;\n      }\n    }\n\n    // Check industry requirement\n    if (conditions.requiredIndustry) {\n      const candidateIndustry = context.companyInfo?.industry?.toLowerCase();\n      const hasRequiredIndustry = conditions.requiredIndustry.some(\n        industry => candidateIndustry?.includes(industry.toLowerCase())\n      );\n      if (!hasRequiredIndustry) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Estimate cost for a phase (placeholder implementation)\n   */\n  private estimatePhaseCost(questionCount: number, agentType: AgentType): number {\n    const costPerQuestion = {\n      'technical': 0.05, // Higher cost for complex technical questions\n      'behavioral': 0.03,\n      'industry': 0.04\n    };\n\n    return questionCount * (costPerQuestion[agentType] || 0.03);\n  }\n\n  /**\n   * Estimate token usage for a phase (placeholder implementation)\n   */\n  private estimatePhaseTokens(questionCount: number, agentType: AgentType): number {\n    const tokensPerQuestion = {\n      'technical': 150, // More tokens for detailed technical questions\n      'behavioral': 100,\n      'industry': 120\n    };\n\n    return questionCount * (tokensPerQuestion[agentType] || 100);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/agents/base-agent.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SessionState' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'context' is defined but never used.","line":83,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":83,"endColumn":57},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":210,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":210,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6992,6995],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6992,6995],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Base Agent Class and Core Interfaces for Azure AI Foundry Agent System\n * \n * This module provides the foundational classes and interfaces for implementing\n * specialized interview agents (technical, behavioral, industry expert).\n */\n\nimport { FoundryClientBase } from '../clients/foundry-client';\nimport { FoundryConfig } from '../config/foundry-config';\nimport { \n  Question, \n  InterviewContext, \n  SessionState, \n  AgentMetadata, \n  FoundryAgent \n} from '../types/agent-types';\n\n// ===== BASE AGENT CLASS =====\n\nexport abstract class BaseAgent implements FoundryAgent {\n  protected foundryClient: FoundryClientBase;\n  protected config: FoundryConfig;\n  \n  // Required by FoundryAgent interface\n  public abstract readonly id: string;\n  public abstract readonly name: string;\n  public abstract readonly type: 'technical' | 'behavioral' | 'industry';\n  \n  public abstract readonly metadata: AgentMetadata;\n  public abstract readonly instructions: string;\n  protected abstract readonly modelName: string;\n\n  constructor(foundryClient: FoundryClientBase, config: FoundryConfig) {\n    this.foundryClient = foundryClient;\n    this.config = config;\n  }\n\n  /**\n   * Generate interview questions based on context\n   */\n  public async generateQuestions(context: InterviewContext): Promise<Question[]> {\n    try {\n      console.log(`ü§ñ ${this.metadata.name} generating questions for ${context.candidateProfile.targetRole}`);\n      \n      const prompt = this.buildQuestionsPrompt(context);\n      \n      const response = await this.foundryClient.request(`/chat/completions`, {\n        method: 'POST',\n        body: {\n          model: this.modelName,\n          messages: [\n            {\n              role: 'system',\n              content: this.instructions\n            },\n            {\n              role: 'user',\n              content: prompt\n            }\n          ],\n          temperature: 0.7,\n          max_tokens: 2000\n        }\n      });\n\n      const questionsText = response.data?.choices?.[0]?.message?.content || response.raw || '';\n      const questions = this.parseQuestionsFromResponse(questionsText, context);\n      \n      // Log usage for monitoring\n      this.logUsage(context, response.data);\n      \n      return questions;\n      \n    } catch (error) {\n      console.error(`‚ùå Error generating questions for ${this.metadata.name}:`, error);\n      return this.getFallbackQuestions(context);\n    }\n  }\n\n  /**\n   * Process candidate response and return follow-up or acknowledgment\n   */\n  public async processResponse(response: string, context: InterviewContext): Promise<string> {\n    try {\n      // For now, just return a simple acknowledgment\n      // In a full implementation, this would analyze the response and provide feedback\n      console.log(`üìù ${this.metadata.name} processed response: ${response.substring(0, 50)}...`);\n      \n      // Return acknowledgment or follow-up question\n      return \"Thank you for your response. That's a good approach to the problem.\";\n      \n    } catch (error) {\n      console.error(`‚ùå Error processing response for ${this.metadata.name}:`, error);\n      return \"Thank you for your response. Let's continue with the next question.\";\n    }\n  }\n\n  /**\n   * Check if agent has completed its interview phase\n   */\n  public isComplete(context: InterviewContext): boolean {\n    const agentQuestions = context.previousQuestions.filter(\n      q => q.category === this.getQuestionCategory()\n    );\n    \n    const responses = context.responses?.filter(r => \n      agentQuestions.some(q => q.id === r.questionId)\n    ) || [];\n\n    // Complete if we have responses to at least 3 questions or reached max questions\n    return responses.length >= Math.min(3, this.metadata.maxQuestions || 5);\n  }\n\n  // ===== PROTECTED HELPER METHODS =====\n\n  protected buildQuestionsPrompt(context: InterviewContext): string {\n    return `\nGenerate ${this.getQuestionCount(context)} interview questions for:\n\n**Candidate Profile:**\n- Target Role: ${context.candidateProfile.targetRole}\n- Experience: ${context.candidateProfile.experience}\n- Skills: ${context.candidateProfile.skills.join(', ')}\n- Industry: ${context.candidateProfile.industry}\n\n**Interview Requirements:**\n- Difficulty: ${context.interviewConfig.difficulty}\n- Focus Areas: ${context.interviewConfig.focusAreas.join(', ')}\n|- Duration per question: ~${Math.floor(context.interviewConfig.duration / (this.metadata.maxQuestions || 5))} minutes\n\n**Previously Asked Questions:**\n${context.previousQuestions.map(q => `- ${q.text}`).join('\\n') || 'None'}\n\nReturn questions in JSON format:\n[\n  {\n    \"id\": \"unique-id\",\n    \"text\": \"Question text here\",\n    \"category\": \"${this.getQuestionCategory()}\",\n    \"difficulty\": \"easy|medium|hard\",\n    \"expectedDuration\": 180,\n    \"followUpQuestions\": [\"follow-up if needed\"],\n    \"tags\": [\"relevant\", \"tags\"],\n    \"metadata\": {\n      \"skill\": \"specific skill\",\n      \"topic\": \"topic area\"\n    }\n  }\n]\n    `.trim();\n  }\n\n  protected parseQuestionsFromResponse(responseText: string, context: InterviewContext): Question[] {\n    try {\n      // Try to extract JSON from the response\n      const jsonMatch = responseText.match(/\\[[\\s\\S]*\\]/);\n      if (!jsonMatch) {\n        console.warn(`‚ö†Ô∏è Could not find JSON in ${this.metadata.name} response, using fallback`);\n        return this.getFallbackQuestions(context);\n      }\n\n      const questions = JSON.parse(jsonMatch[0]) as Question[];\n      \n      // Validate and clean questions\n      return questions\n        .filter(q => q.text && q.id)\n        .map(q => ({\n          ...q,\n          category: this.getQuestionCategory(),\n          id: q.id || `${this.metadata.name.toLowerCase()}-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`\n        }))\n        .slice(0, this.metadata.maxQuestions || 5);\n        \n    } catch (error) {\n      console.error(`‚ùå Error parsing questions from ${this.metadata.name}:`, error);\n      return this.getFallbackQuestions(context);\n    }\n  }\n\n  protected getFallbackQuestions(context: InterviewContext): Question[] {\n    return [\n      {\n        id: `${this.metadata.name.toLowerCase()}-fallback-${Date.now()}`,\n        text: this.getDefaultQuestion(context),\n        type: this.getQuestionCategory() || 'general',\n        category: this.getQuestionCategory() || 'general',\n        difficulty: 'medium',\n        expectedDuration: 180,\n        tags: ['fallback', this.metadata.specialty || 'general'],\n        metadata: {\n          topic: 'general'\n        }\n      }\n    ];\n  }\n\n  protected getQuestionCount(context: InterviewContext): number {\n    const remainingTime = context.interviewConfig.duration;\n    const avgTimePerQuestion = this.metadata.averageDuration || 5;\n    const maxQuestions = Math.min(\n      this.metadata.maxQuestions || 5,\n      Math.floor(remainingTime / avgTimePerQuestion)\n    );\n    return Math.max(1, maxQuestions);\n  }\n\n  /**\n   * Log usage metrics for monitoring and cost tracking\n   */\n  protected logUsage(context: InterviewContext, responseData: any): void {\n    try {\n      const usage = responseData?.usage;\n      if (usage) {\n        console.log(`üìä ${this.metadata.name} usage - Tokens: ${usage.total_tokens} (${usage.prompt_tokens}+${usage.completion_tokens})`);\n        \n        // TODO: Integrate with Application Insights or monitoring service\n        // trackEvent('agent_usage', {\n        //   agent: this.metadata.name,\n        //   sessionId: context.sessionId,\n        //   tokens: usage.total_tokens,\n        //   model: this.modelName\n        // });\n      }\n    } catch (error) {\n      console.warn(`‚ö†Ô∏è Failed to log usage for ${this.metadata.name}:`, error);\n    }\n  }\n\n  /**\n   * Handle errors with context-aware logging\n   */\n  protected handleError(error: Error, context: InterviewContext, operation: string): void {\n    console.error(`‚ùå ${this.metadata.name} error in ${operation}:`, {\n      error: error.message,\n      sessionId: context.sessionId,\n      agent: this.metadata.name,\n      operation,\n      timestamp: new Date().toISOString()\n    });\n    \n    // TODO: Integrate with error tracking service\n    // reportError(error, {\n    //   context: `agent_${operation}`,\n    //   metadata: {\n    //     agent: this.metadata.name,\n    //     sessionId: context.sessionId\n    //   }\n    // });\n  }\n\n  // ===== ABSTRACT METHODS =====\n\n  protected abstract getQuestionCategory(): Question['category'];\n  protected abstract getDefaultQuestion(context: InterviewContext): string;\n}\n\n// ===== UTILITY FUNCTIONS =====\n\nexport function generateQuestionId(agentName: string, category: string): string {\n  const timestamp = Date.now();\n  const random = Math.random().toString(36).substr(2, 5);\n  return `${agentName.toLowerCase()}-${category}-${timestamp}-${random}`;\n}\n\nexport function calculateInterviewProgress(context: InterviewContext): number {\n  const totalExpectedQuestions = 9; // 3 per agent type\n  const completedQuestions = context.responses?.length || 0;\n  return Math.min(100, Math.round((completedQuestions / totalExpectedQuestions) * 100));\n}\n\nexport function getEstimatedRemainingTime(context: InterviewContext, currentAgent: FoundryAgent): number {\n  const completedQuestions = context.responses?.length || 0;\n  const avgTimePerQuestion = currentAgent.metadata.averageDuration || 5;\n  const remainingQuestions = Math.max(0, (currentAgent.metadata.maxQuestions || 5) - completedQuestions);\n  return remainingQuestions * avgTimePerQuestion;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/agents/behavioral-interviewer.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'context' is defined but never used.","line":194,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":194,"endColumn":39}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { BaseAgent } from './base-agent';\nimport { FoundryClientBase } from '../clients/foundry-client';\nimport { FoundryConfig } from '../config/foundry-config';\nimport { InterviewContext, Question, AgentMetadata } from '../types/agent-types';\n\n/**\n * BehavioralInterviewer agent specializing in behavioral and situational questions\n * Uses GPT-4o model for human-focused behavioral assessment\n */\nexport class BehavioralInterviewer extends BaseAgent {\n  // Required BaseAgent interface properties\n  readonly id = 'behavioral-interviewer';\n  readonly name = 'Behavioral Interviewer';\n  readonly type = 'behavioral' as const;\n  \n  protected readonly modelName = 'gpt-4o';\n  \n  public readonly instructions = `You are a behavioral interview specialist focused on assessing soft skills, leadership potential, and cultural fit.\n\nROLE GUIDELINES:\n- Ask questions about past experiences, challenging situations, and interpersonal skills\n- Focus on STAR method responses (Situation, Task, Action, Result)\n- Assess communication skills, problem-solving approach, and emotional intelligence\n- Adapt questions based on the candidate's seniority level and role requirements\n\nQUESTION TYPES TO FOCUS ON:\n- Leadership and teamwork experiences\n- Conflict resolution and difficult conversations\n- Adaptability and learning from failure\n- Decision-making under pressure\n- Career motivation and goal alignment\n\nINTERVIEW STYLE:\n- Be empathetic and encouraging\n- Ask follow-up questions to understand context and impact\n- Help candidates structure their responses using the STAR method\n- Focus on specific examples rather than hypothetical scenarios\n\nAlways tailor questions to the candidate's background and the specific role requirements.`;\n  \n  public readonly metadata: AgentMetadata = {\n    id: 'behavioral-interviewer',\n    name: 'Behavioral Interviewer',\n    description: 'Specializes in behavioral and soft skills assessment',\n    version: '1.0.0',\n    supportedPhases: ['behavioral', 'cultural-fit'],\n    capabilities: ['behavioral-assessment', 'soft-skills-evaluation', 'cultural-fit-analysis'],\n    modelRequirements: {\n      minimumTokens: 2000,\n      preferredModels: ['gpt-4o', 'gpt-4']\n    },\n    tags: ['behavioral', 'soft-skills', 'teamwork', 'leadership'],\n    // Legacy compatibility\n    maxQuestions: 5,\n    averageDuration: 6\n  };\n\n  constructor(foundryClient: FoundryClientBase, config: FoundryConfig) {\n    super(foundryClient, config);\n  }\n\n\n  /**\n   * Build behavioral-specific prompt based on context\n   */\n  private buildPrompt(context: InterviewContext): string {\n    const { candidateProfile, jobRole, companyInfo, sessionHistory } = context;\n    \n    let prompt = `Generate 5-7 behavioral interview questions for a candidate interviewing for: ${jobRole}`;\n    \n    if (companyInfo?.name) {\n      prompt += ` at ${companyInfo.name}`;\n    }\n    \n    prompt += '\\n\\nCandidate Background:\\n';\n    \n    if (candidateProfile?.experience) {\n      prompt += `- Experience Level: ${candidateProfile.experience}\\n`;\n    }\n    \n    if (candidateProfile?.skills?.length) {\n      prompt += `- Key Skills: ${candidateProfile.skills.join(', ')}\\n`;\n    }\n    \n    // Remove references to undefined properties\n    if (candidateProfile?.industry) {\n      prompt += `- Industry: ${candidateProfile.industry}\\n`;\n    }\n    \n    if (sessionHistory?.previousQuestions?.length) {\n      prompt += `\\nPreviously Asked Questions:\\n${sessionHistory.previousQuestions.map(q => `- ${q.text}`).join('\\n')}\\n\\nAvoid repeating these topics and build upon previous responses.\\n`;\n    }\n    \n    prompt += `\\nFOCUS AREAS:\n- Past experiences demonstrating relevant skills\n- Leadership and teamwork scenarios\n- Problem-solving and decision-making situations\n- Adaptability and learning from challenges\n- Communication and interpersonal skills\n- Career motivation and cultural fit\n\nFORMAT: Return each question as a JSON object with:\n- \"text\": the question text\n- \"category\": behavioral category (leadership, teamwork, problem-solving, etc.)\n- \"followUps\": 1-2 potential follow-up questions\n- \"difficulty\": beginner/intermediate/advanced based on role seniority\n\nEnsure questions encourage STAR method responses and are appropriate for the candidate's experience level.`;\n\n    return prompt;\n  }\n\n  /**\n   * Get fallback behavioral questions when AI generation fails\n   */\n  private getFallbackBehavioralQuestions(context: InterviewContext): Question[] {\n    const experienceLevel = context.candidateProfile?.experience?.toLowerCase() || 'intermediate';\n    \n    const fallbackQuestions: Question[] = [\n      {\n        id: 'behavioral-1',\n        text: 'Tell me about a time when you had to work with a difficult team member. How did you handle the situation?',\n        type: 'behavioral',\n        category: 'behavioral',\n        difficulty: 'medium',\n        expectedDuration: 300,\n        tags: ['teamwork', 'conflict-resolution'],\n        metadata: {\n          topic: 'teamwork'\n        }\n      },\n      {\n        id: 'behavioral-2',\n        text: 'Describe a situation where you had to learn something new quickly to complete a project.',\n        type: 'behavioral',\n        category: 'behavioral',\n        difficulty: 'easy',\n        expectedDuration: 240,\n        tags: ['adaptability', 'learning'],\n        metadata: {\n          topic: 'adaptability'\n        }\n      },\n      {\n        id: 'behavioral-3',\n        text: 'Give me an example of a time when you had to make a decision without having all the information you needed.',\n        type: 'behavioral',\n        category: 'behavioral',\n        difficulty: 'medium',\n        expectedDuration: 360,\n        tags: ['decision-making', 'problem-solving'],\n        metadata: {\n          topic: 'decision-making'\n        }\n      },\n      {\n        id: 'behavioral-4',\n        text: 'Tell me about a time when you received constructive criticism. How did you respond?',\n        type: 'behavioral',\n        category: 'behavioral',\n        difficulty: 'easy',\n        expectedDuration: 240,\n        tags: ['growth-mindset', 'feedback'],\n        metadata: {\n          topic: 'growth-mindset'\n        }\n      }\n    ];\n\n    // Add senior-level questions if appropriate\n    if (experienceLevel.includes('senior') || experienceLevel.includes('lead') || experienceLevel.includes('principal')) {\n      fallbackQuestions.push({\n        id: 'behavioral-5',\n        text: 'Describe a time when you had to influence others without having direct authority over them.',\n        type: 'behavioral',\n        category: 'behavioral',\n        difficulty: 'hard',\n        expectedDuration: 420,\n        tags: ['leadership', 'influence'],\n        metadata: {\n          topic: 'leadership'\n        }\n      });\n    }\n\n    return fallbackQuestions;\n  }\n\n  // Required BaseAgent abstract methods\n  protected getQuestionCategory(): Question['category'] {\n    return 'behavioral';\n  }\n\n  protected getDefaultQuestion(context: InterviewContext): string {\n    return 'Tell me about a time when you had to work with a difficult team member. How did you handle the situation?';\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/agents/industry-expert.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":208,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":208,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7601,7604],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7601,7604],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { BaseAgent } from './base-agent';\nimport { FoundryClientBase } from '../clients/foundry-client';\nimport { FoundryConfig } from '../config/foundry-config';\nimport { InterviewContext, Question, AgentMetadata } from '../types/agent-types';\n\n/**\n * IndustryExpert agent specializing in industry-specific knowledge and trends\n * Uses specialized models for domain expertise and industry insights\n */\nexport class IndustryExpert extends BaseAgent {\n  // Required BaseAgent interface properties\n  readonly id = 'industry-expert';\n  readonly name = 'Industry Expert';\n  readonly type = 'industry' as const;\n  \n  protected readonly modelName = 'llama-4';\n  \n  public readonly instructions = `You are an industry expert with deep knowledge across various sectors and business domains.\n\nEXPERTISE AREAS:\n- Technology trends and emerging technologies\n- Business strategy and market dynamics\n- Industry-specific regulations and compliance\n- Competitive landscape analysis\n- Best practices and industry standards\n- Innovation and future outlook\n\nROLE GUIDELINES:\n- Ask questions that assess industry knowledge and awareness\n- Focus on current trends, challenges, and opportunities in the candidate's field\n- Evaluate strategic thinking and business acumen\n- Assess understanding of industry regulations and standards\n- Test knowledge of competitive landscape and market positioning\n\nQUESTION TYPES TO FOCUS ON:\n- Industry trends and future predictions\n- Regulatory changes and compliance requirements\n- Competitive analysis and market positioning\n- Technology adoption and innovation\n- Business model evolution and disruption\n- Ethical considerations and sustainability\n\nINTERVIEW STYLE:\n- Be knowledgeable and analytical\n- Ask thought-provoking questions about industry direction\n- Encourage strategic thinking and business reasoning\n- Focus on practical application of industry knowledge\n- Assess both current knowledge and learning agility\n\nTailor questions to the specific industry and role level of the candidate.`;\n  \n  public readonly metadata: AgentMetadata = {\n    id: 'industry-expert',\n    name: 'Industry Expert',\n    description: 'Specializes in industry-specific knowledge and market insights',\n    version: '1.0.0',\n    supportedPhases: ['industry', 'market-analysis'],\n    capabilities: ['industry-analysis', 'market-knowledge', 'trend-assessment'],\n    modelRequirements: {\n      minimumTokens: 2500,\n      preferredModels: ['llama-4', 'gpt-4']\n    },\n    tags: ['industry', 'market', 'trends', 'business'],\n    // Legacy compatibility\n    maxQuestions: 4,\n    averageDuration: 7\n  };\n\n  constructor(foundryClient: FoundryClientBase, config: FoundryConfig) {\n    super(foundryClient, config);\n  }\n\n  /**\n   * Generate industry-specific interview questions based on context\n   */\n  async generateQuestions(context: InterviewContext): Promise<Question[]> {\n    try {\n      const prompt = this.buildPrompt(context);\n      \n      const response = await this.foundryClient.request('/chat/completions', {\n        method: 'POST',\n        body: {\n          model: 'llama-4',\n          messages: [\n            { role: 'system', content: this.getSystemInstructions() },\n            { role: 'user', content: prompt }\n          ],\n          temperature: 0.6,\n          max_tokens: 2500\n        }\n      });\n\n      const questionsText = response.data?.choices?.[0]?.message?.content || response.raw || '';\n      const questions = this.parseQuestionsFromResponse(questionsText, context);\n      \n      return questions.length > 0 ? questions : this.getFallbackQuestions(context);\n    } catch (error) {\n      console.error('Error generating industry questions:', error);\n      return this.getFallbackQuestions(context);\n    }\n  }\n\n  private getSystemInstructions(): string {\n    return `You are an industry expert with deep knowledge across various sectors and business domains.\n\nEXPERTISE AREAS:\n- Technology trends and emerging technologies\n- Business strategy and market dynamics\n- Industry-specific regulations and compliance\n- Competitive landscape analysis\n- Best practices and industry standards\n- Innovation and future outlook\n\nROLE GUIDELINES:\n- Ask questions that assess industry knowledge and awareness\n- Focus on current trends, challenges, and opportunities in the candidate's field\n- Evaluate strategic thinking and business acumen\n- Assess understanding of industry regulations and standards\n- Test knowledge of competitive landscape and market positioning\n\nQUESTION TYPES TO FOCUS ON:\n- Industry trends and future predictions\n- Regulatory changes and compliance requirements\n- Competitive analysis and market positioning\n- Technology adoption and innovation\n- Business model evolution and disruption\n- Ethical considerations and sustainability\n\nINTERVIEW STYLE:\n- Be knowledgeable and analytical\n- Ask thought-provoking questions about industry direction\n- Encourage strategic thinking and business reasoning\n- Focus on practical application of industry knowledge\n- Assess both current knowledge and learning agility\n\nTailor questions to the specific industry and role level of the candidate.`;\n  }\n\n  /**\n   * Build industry-specific prompt based on context\n   */\n  private buildPrompt(context: InterviewContext): string {\n    const { candidateProfile, jobRole, companyInfo, sessionHistory } = context;\n    \n    // Extract industry from company or job role\n    const industry = this.extractIndustry(companyInfo, jobRole);\n    \n    let prompt = `Generate 5-7 industry-specific interview questions for a candidate interviewing for: ${jobRole}`;\n    \n    if (companyInfo?.name) {\n      prompt += ` at ${companyInfo.name}`;\n    }\n    \n    if (industry) {\n      prompt += ` in the ${industry} industry`;\n    }\n    \n    prompt += '\\n\\nCandidate Background:\\n';\n    \n    if (candidateProfile?.experience) {\n      prompt += `- Experience Level: ${candidateProfile.experience}\\n`;\n    }\n    \n    if (candidateProfile?.skills?.length) {\n      prompt += `- Technical Skills: ${candidateProfile.skills.join(', ')}\\n`;\n    }\n    \n    if (candidateProfile?.industry) {\n      prompt += `- Industry Background: ${candidateProfile.industry}\\n`;\n    }\n    \n    if (companyInfo?.industry) {\n      prompt += `\\nTarget Industry: ${companyInfo.industry}\\n`;\n    }\n    \n    if (companyInfo?.size) {\n      prompt += `Company Size: ${companyInfo.size}\\n`;\n    }\n    \n    if (sessionHistory?.previousQuestions?.length) {\n      prompt += `\\nPreviously Asked Questions:\\n${sessionHistory.previousQuestions.map(q => `- ${q.text}`).join('\\n')}\\n\\nBuild upon previous responses and avoid repetition.\\n`;\n    }\n    \n    prompt += `\\nFOCUS AREAS FOR ${industry?.toUpperCase() || 'THIS'} INDUSTRY:\n- Current market trends and disruptions\n- Regulatory environment and compliance challenges  \n- Competitive landscape and positioning\n- Technology adoption and digital transformation\n- Business model innovation and evolution\n- Sustainability and ethical considerations\n- Future outlook and growth opportunities\n\nFORMAT: Return each question as a JSON object with:\n- \"text\": the question text focusing on industry knowledge\n- \"category\": industry category (trends, regulation, competition, technology, etc.)\n- \"followUps\": 1-2 follow-up questions to drill deeper\n- \"difficulty\": beginner/intermediate/advanced based on role seniority\n- \"industryContext\": brief context about why this knowledge is important\n\nEnsure questions test both current industry knowledge and strategic thinking abilities.`;\n\n    return prompt;\n  }\n\n  /**\n   * Extract industry from company info and job role\n   */\n  private extractIndustry(companyInfo?: any, jobRole?: string): string | null {\n    // Check explicit industry field first\n    if (companyInfo?.industry) {\n      return companyInfo.industry;\n    }\n    \n    // Infer from company name or job role\n    const combinedText = `${companyInfo?.name || ''} ${jobRole || ''}`.toLowerCase();\n    \n    const industryKeywords = {\n      'technology': ['tech', 'software', 'saas', 'ai', 'data', 'cloud', 'developer', 'engineer'],\n      'finance': ['bank', 'fintech', 'financial', 'investment', 'trading', 'credit', 'payment'],\n      'healthcare': ['health', 'medical', 'pharma', 'biotech', 'hospital', 'clinical'],\n      'retail': ['retail', 'ecommerce', 'commerce', 'shopping', 'store', 'marketplace'],\n      'manufacturing': ['manufacturing', 'automotive', 'industrial', 'factory', 'production'],\n      'consulting': ['consulting', 'advisory', 'strategy', 'management', 'professional services'],\n      'education': ['education', 'learning', 'school', 'university', 'training', 'academic']\n    };\n    \n    for (const [industry, keywords] of Object.entries(industryKeywords)) {\n      if (keywords.some(keyword => combinedText.includes(keyword))) {\n        return industry;\n      }\n    }\n    \n    return null;\n  }\n\n  /**\n   * Get fallback industry questions when AI generation fails\n   */\n  protected getFallbackQuestions(context: InterviewContext): Question[] {\n    const industry = this.extractIndustry(context.companyInfo, context.jobRole) || 'technology';\n    \n    const fallbackQuestions: Question[] = [\n      {\n        id: 'industry-1',\n        text: `What do you see as the biggest trend currently shaping the ${industry} industry?`,\n        type: 'industry',\n        category: 'industry',\n        difficulty: 'medium',\n        expectedDuration: 360,\n        tags: ['trends', 'market-analysis'],\n        metadata: {\n          topic: 'trends'\n        }\n      },\n      {\n        id: 'industry-2',\n        text: 'How do you stay updated with industry developments and emerging technologies?',\n        type: 'industry',\n        category: 'industry',\n        difficulty: 'easy',\n        expectedDuration: 240,\n        tags: ['learning', 'industry-knowledge'],\n        metadata: {\n          topic: 'learning'\n        }\n      },\n      {\n        id: 'industry-3',\n        text: `What regulatory or compliance challenges do you think companies in ${industry} face today?`,\n        type: 'industry',\n        category: 'industry',\n        difficulty: 'medium',\n        expectedDuration: 420,\n        tags: ['regulation', 'compliance'],\n        metadata: {\n          topic: 'regulation'\n        }\n      },\n      {\n        id: 'industry-4',\n        text: 'How do you think artificial intelligence and automation will impact this industry?',\n        type: 'industry',\n        category: 'industry',\n        difficulty: 'medium',\n        expectedDuration: 480,\n        tags: ['technology', 'future-trends'],\n        metadata: {\n          topic: 'technology'\n        }\n      }\n    ];\n\n    // Add industry-specific questions based on detected industry\n    const industrySpecific = this.getIndustrySpecificQuestions(industry);\n    fallbackQuestions.push(...industrySpecific);\n\n    return fallbackQuestions;\n  }\n\n  /**\n   * Get industry-specific fallback questions\n   */\n  private getIndustrySpecificQuestions(industry: string): Question[] {\n    const specificQuestions: { [key: string]: Question[] } = {\n      'technology': [\n        {\n          id: 'tech-specific-1',\n          text: 'How do you approach evaluating new technologies for adoption in a business context?',\n          type: 'industry',\n          category: 'industry',\n          difficulty: 'hard',\n          expectedDuration: 540,\n          tags: ['technology-evaluation', 'strategic-thinking'],\n          metadata: {\n            topic: 'technology-evaluation'\n          }\n        }\n      ],\n      'finance': [\n        {\n          id: 'finance-specific-1',\n          text: 'How do you see fintech disrupting traditional financial services?',\n          type: 'industry',\n          category: 'industry',\n          difficulty: 'hard',\n          expectedDuration: 480,\n          tags: ['fintech', 'disruption'],\n          metadata: {\n            topic: 'disruption'\n          }\n        }\n      ],\n      'healthcare': [\n        {\n          id: 'health-specific-1',\n          text: 'What role do you think digital health technologies play in improving patient outcomes?',\n          type: 'industry',\n          category: 'industry',\n          difficulty: 'medium',\n          expectedDuration: 420,\n          tags: ['digital-health', 'patient-outcomes'],\n          metadata: {\n            topic: 'digital-health'\n          }\n        }\n      ]\n    };\n\n    return specificQuestions[industry] || [];\n  }\n\n  // Required BaseAgent abstract methods\n  protected getQuestionCategory(): Question['category'] {\n    return 'industry';\n  }\n\n  protected getDefaultQuestion(context: InterviewContext): string {\n    const industry = this.extractIndustry(context.companyInfo, context.jobRole) || context.candidateProfile?.industry || 'technology';\n    return `What do you see as the biggest trend currently shaping the ${industry} industry?`;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/agents/technical-interviewer.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'experience' is assigned a value but never used.","line":76,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Technical Interviewer Agent\n * \n * Specialized agent for conducting technical interviews focusing on\n * coding skills, system design, algorithms, and technical knowledge.\n */\n\nimport { BaseAgent } from './base-agent';\nimport { FoundryClientBase } from '../clients/foundry-client';\nimport { FoundryConfig } from '../config/foundry-config';\nimport { Question, InterviewContext, AgentMetadata } from '../types/agent-types';\n\nexport class TechnicalInterviewer extends BaseAgent {\n  // Required BaseAgent interface properties\n  readonly id = 'technical-interviewer';\n  readonly name = 'Technical Interviewer';\n  readonly type = 'technical' as const;\n  \n  protected readonly modelName = 'gpt-4.5'; // Use GPT-4.5 for technical interviews\n  \n  public readonly instructions = `You are a Senior Technical Interviewer with 10+ years of experience conducting technical interviews for software engineering roles. Your goal is to assess the candidate's technical competency through thoughtful, practical questions.\n\n## Your Responsibilities:\n1. Generate technical questions appropriate for the candidate's experience level\n2. Focus on problem-solving approach over perfect solutions\n3. Include a mix of coding, system design, and conceptual questions\n4. Provide questions that reveal thinking process and technical depth\n5. Consider the target role and required technical skills\n\n## Question Categories:\n- **Coding Problems**: Algorithm implementation, data structures, optimization\n- **System Design**: Scalability, architecture, trade-offs, design patterns\n- **Technical Concepts**: Language-specific features, frameworks, best practices\n- **Debugging**: Code analysis, troubleshooting, performance issues\n- **Experience-Based**: Real-world scenarios, past project challenges\n\n## Guidelines:\n- Tailor difficulty to candidate's experience level (entry/mid/senior/expert)\n- Ask open-ended questions that allow for discussion\n- Include practical, real-world scenarios when possible\n- Focus on understanding reasoning and approach\n- Keep questions relevant to the target role and industry\n\n## Response Format:\nAlways respond with valid JSON array containing question objects with all required fields.\nEnsure questions are clear, specific, and actionable.`;\n  \n  public readonly metadata: AgentMetadata = {\n    id: 'technical-interviewer',\n    name: 'Technical Interviewer',\n    description: 'Specializes in technical questions for software engineering roles',\n    version: '1.0.0',\n    supportedPhases: ['technical', 'coding'],\n    capabilities: ['question-generation', 'code-review', 'algorithm-assessment'],\n    modelRequirements: {\n      minimumTokens: 4000,\n      preferredModels: ['gpt-4', 'gpt-4.5']\n    },\n    tags: ['technical', 'coding', 'algorithms', 'system-design'],\n    // Legacy compatibility\n    specialty: 'Technical Skills Assessment',\n    modelPreference: 'gpt-4.5',\n    maxQuestions: 5,\n    averageDuration: 8 // 8 minutes per technical question on average\n  };\n\n  constructor(foundryClient: FoundryClientBase, config: FoundryConfig) {\n    super(foundryClient, config);\n  }\n\n  protected getQuestionCategory(): Question['category'] {\n    return 'technical';\n  }\n\n  protected getDefaultQuestion(context: InterviewContext): string {\n    const { targetRole, experience, skills } = context.candidateProfile;\n    const { difficulty } = context.interviewConfig;\n    \n    // Generate role-specific default questions based on context\n    if (targetRole.toLowerCase().includes('frontend') || skills.includes('React')) {\n      return `Describe how you would implement a reusable component in React that handles user input validation. What patterns would you use and why?`;\n    }\n    \n    if (targetRole.toLowerCase().includes('backend') || skills.includes('Node.js')) {\n      return `Design a RESTful API for a ${context.candidateProfile.industry} application. What endpoints would you create and how would you handle authentication and error cases?`;\n    }\n    \n    if (targetRole.toLowerCase().includes('fullstack')) {\n      return `Walk me through how you would architect a real-time chat application. Consider both frontend and backend components, data flow, and scalability.`;\n    }\n    \n    // General technical question based on experience level\n    switch (difficulty) {\n      case 'entry':\n        return `Explain the difference between let, const, and var in JavaScript. When would you use each one and why?`;\n      case 'mid':\n        return `Describe a challenging technical problem you've solved recently. What was your approach and what trade-offs did you consider?`;\n      case 'senior':\n        return `How would you design a system to handle 1 million concurrent users? Walk me through your architecture decisions and scaling strategies.`;\n      case 'expert':\n        return `Discuss a time when you had to optimize performance in a critical system. What was your methodology for identifying bottlenecks and implementing solutions?`;\n      default:\n        return `Tell me about a technical decision you made recently and explain your reasoning process.`;\n    }\n  }\n\n\n\n  /**\n   * Enhanced completion check for technical interviews\n   */\n  public isComplete(context: InterviewContext): boolean {\n    const technicalQuestions = context.previousQuestions.filter(q => q.category === 'technical');\n    const technicalResponses = context.responses?.filter(r => \n      technicalQuestions.some(q => q.id === r.questionId)\n    ) || [];\n\n    // Technical interview complete if:\n    // - At least 3 questions answered, OR\n    // - Reached max questions for this agent, OR\n    // - Spent more than 30 minutes on technical questions\n    const minQuestionsAnswered = technicalResponses.length >= 3;\n    const reachedMaxQuestions = technicalQuestions.length >= (this.metadata.maxQuestions || 5);\n    \n    return minQuestionsAnswered || reachedMaxQuestions;\n  }\n\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/clients/foundry-client.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1839,1842],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1839,1842],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1902,1905],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1902,1905],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":87,"column":11,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":87,"endColumn":52,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[2903,2944],"text":"// @ts-expect-error node-fetch v2 compatibility"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":89,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2995,2998],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2995,2998],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":94,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3090,3093],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3090,3093],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":108,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3480,3483],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3480,3483],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'no-console').","line":120,"column":11,"severity":1,"nodeType":null,"fix":{"range":[3952,3990],"text":" "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":158,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5193,5196],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5193,5196],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":192,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":192,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6331,6334],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6331,6334],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":192,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":192,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6342,6345],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6342,6345],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":231,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":231,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7577,7580],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7577,7580],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":231,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":231,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7588,7591],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7588,7591],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'client' is assigned a value but never used.","line":312,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":312,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":366,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":366,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11529,11532],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11529,11532],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":370,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":370,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11606,11609],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11606,11609],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_modelKey' is assigned a value but never used.","line":168,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":168,"endColumn":48,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":14,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import fetch from 'node-fetch';\nimport { DefaultAzureCredential } from '@azure/identity';\nimport { type TokenCredential } from '@azure/core-auth';\nimport { AIProjectClient } from '@azure/ai-projects';\nimport { AgentsClient } from '@azure/ai-agents';\nimport {\n  getFoundryConfig,\n  validateFoundryConfig,\n  type FoundryConfig,\n  type ConnectionSettings,\n} from '../config/foundry-config';\n\n// Client-side safety check\nconst isClient = typeof window !== 'undefined';\n\nif (isClient) {\n  console.warn('[Azure AI Foundry Client] Running on client side - clients will not be initialized');\n}\n\n/**\n * Unified Azure AI Foundry Client\n * \n * Combines HTTP request functionality with Azure SDK client factories.\n * Provides both low-level request() method and high-level SDK helpers.\n */\nexport class FoundryClientBase {\n  protected config!: FoundryConfig;\n  private projectsClientInstance: AIProjectClient | null = null;\n  private agentsClientInstance: AgentsClient | null = null;\n  private currentSdkConfig: FoundryConfig | null = null;\n\n  constructor() {}\n\n  /**\n   * Initialize configuration\n   */\n  async init(forceRefresh = false): Promise<void> {\n    this.config = await getFoundryConfig(forceRefresh);\n    const { isValid, errors } = validateFoundryConfig(this.config);\n    if (!isValid) {\n      throw new Error(`Invalid Foundry configuration: ${errors.join(', ')}`);\n    }\n  }\n\n  /**\n   * Build default headers with API key\n   */\n  protected buildHeaders(extra?: Record<string, string>): Record<string, string> {\n    return {\n      'Content-Type': 'application/json',\n      'api-key': this.config.apiKey, // Azure AI Foundry uses 'api-key' header\n      'User-Agent': 'PrepBettr/FoundryClient',\n      ...(extra || {}),\n    };\n  }\n\n  /**\n   * Core request helper with retry logic based on connection settings\n   */\n  public async request<T = any>(\n    path: string,\n    options: { method?: string; body?: any; headers?: Record<string, string> } = {}\n  ): Promise<{ status: number; data: T | null; raw: string }> {\n    const baseUrl = this.config.endpoint.replace(/\\/$/, '');\n    // Azure AI Foundry uses openai/deployments/{deployment-name} format\n    const normalizedPath = path.startsWith('/') ? path : `/${path}`;\n    const url = `${baseUrl}/openai/deployments/gpt-4o${normalizedPath}?api-version=2024-02-15-preview`;\n    const { connection } = this.config;\n\n    const method = options.method || 'GET';\n    const headers = this.buildHeaders(options.headers);\n    const body = options.body ? JSON.stringify(options.body) : undefined;\n\n    let attempt = 0;\n    const max = connection.retryPolicy.maxRetries;\n    const start = Date.now();\n\n    while (true) {\n      try {\n        const controller = new AbortController();\n        const timeout = setTimeout(() => controller.abort(), connection.timeout);\n\n        const res = await fetch(url, {\n          method,\n          headers,\n          body,\n          // @ts-ignore node-fetch v2 compatibility\n          signal: controller.signal,\n        } as any);\n\n        clearTimeout(timeout);\n\n        const raw = await res.text();\n        let data: any = null;\n        try {\n          data = raw ? JSON.parse(raw) : null;\n        } catch {\n          // non-JSON response\n        }\n\n        if (!res.ok && this.shouldRetry(res.status) && attempt < max) {\n          attempt++;\n          await this.delay(this.backoff(attempt, connection));\n          continue;\n        }\n\n        return { status: res.status, data, raw };\n      } catch (err: any) {\n        // AbortError / network errors\n        if (attempt < max) {\n          attempt++;\n          await this.delay(this.backoff(attempt, connection));\n          continue;\n        }\n        throw new Error(`Foundry request failed after ${attempt} retries: ${err?.message || err}`);\n      } finally {\n        // Optional: log slow requests\n        const elapsed = Date.now() - start;\n        if (elapsed > Math.max(2000, this.config.connection.timeout)) {\n          // eslint-disable-next-line no-console\n          console.warn(`[FoundryClient] Slow request ${method} ${url} took ${elapsed}ms`);\n        }\n      }\n    }\n  }\n\n  /**\n   * Basic retry policy on transient status codes\n   */\n  protected shouldRetry(status: number): boolean {\n    return [408, 409, 429, 500, 502, 503, 504].includes(status);\n  }\n\n  /**\n   * Exponential backoff with optional jitter\n   */\n  protected backoff(attempt: number, conn: ConnectionSettings): number {\n    const { baseDelay, maxDelay, exponentialBase, jitter } = conn.retryPolicy;\n    const delay = Math.min(maxDelay, baseDelay * Math.pow(exponentialBase, attempt - 1));\n    return jitter ? Math.floor(Math.random() * delay) : delay;\n    }\n\n  protected delay(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Validate connectivity to Foundry endpoint\n   */\n  async validateConnection(): Promise<{ ok: boolean; status?: number; error?: string }>\n  {\n    if (!this.config) await this.init();\n    try {\n      const res = await this.request('/', { method: 'GET' });\n      // Root might be 404 but still proves connectivity\n      const ok = res.status < 500;\n      return { ok, status: res.status };\n    } catch (err: any) {\n      return { ok: false, error: err?.message || String(err) };\n    }\n  }\n\n  /**\n   * Placeholder for text completion call via model inference.\n   * Implement with specific Foundry Inference API once finalized.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async completeText(_prompt: string, _modelKey = 'gpt-4o'): Promise<string> {\n    throw new Error('completeText not implemented yet for Foundry Inference API');\n  }\n\n  /**\n   * Azure SDK Client Methods\n   */\n\n  /**\n   * Create Azure AI Projects client with proper authentication\n   */\n  private createProjectsClient(config: FoundryConfig): AIProjectClient {\n    if (isClient) {\n      throw new Error('Projects client cannot be initialized on client side');\n    }\n\n    try {\n      const credential: TokenCredential = new DefaultAzureCredential();\n      console.log(`üîß Creating Azure AI Projects client for endpoint: ${config.endpoint}`);\n      \n      const client = new AIProjectClient(config.endpoint, credential, {\n        additionalPolicies: [{\n          policy: {\n            name: 'PrepBettrUserAgent',\n            sendRequest: async (request: any, next: any) => {\n              const existingUserAgent = request.headers.get('User-Agent') || '';\n              request.headers.set('User-Agent', `PrepBettr/1.0 ${existingUserAgent}`);\n              return next(request);\n            }\n          },\n          position: 'perCall'\n        }],\n        retryOptions: {\n          maxRetries: 3,\n          retryDelayInMs: 1000\n        }\n      });\n\n      console.log('‚úÖ Azure AI Projects client created successfully');\n      return client;\n\n    } catch (error) {\n      console.error('‚ùå Failed to create Azure AI Projects client:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create Azure AI Agents client with proper authentication\n   */\n  private createAgentsClient(config: FoundryConfig): AgentsClient {\n    if (isClient) {\n      throw new Error('Agents client cannot be initialized on client side');\n    }\n\n    try {\n      const credential: TokenCredential = new DefaultAzureCredential();\n      console.log(`ü§ñ Creating Azure AI Agents client for project: ${config.projectId}`);\n      \n      const client = new AgentsClient(config.endpoint, credential, {\n        additionalPolicies: [{\n          policy: {\n            name: 'PrepBettrAgentUserAgent',\n            sendRequest: async (request: any, next: any) => {\n              const existingUserAgent = request.headers.get('User-Agent') || '';\n              request.headers.set('User-Agent', `PrepBettr-Agent/1.0 ${existingUserAgent}`);\n              \n              if (config.projectId) {\n                request.headers.set('X-Project-Id', config.projectId);\n              }\n              \n              return next(request);\n            }\n          },\n          position: 'perCall'\n        }],\n        retryOptions: {\n          maxRetries: 3,\n          retryDelayInMs: 1000\n        }\n      });\n\n      console.log('‚úÖ Azure AI Agents client created successfully');\n      return client;\n\n    } catch (error) {\n      console.error('‚ùå Failed to create Azure AI Agents client:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get or create Azure AI Projects client (singleton pattern)\n   */\n  async getProjectsClient(forceRefresh: boolean = false): Promise<AIProjectClient> {\n    if (isClient) {\n      throw new Error('Projects client is not available on client side');\n    }\n\n    const config = await getFoundryConfig(forceRefresh);\n    \n    if (forceRefresh || !this.projectsClientInstance || !this.currentSdkConfig || \n        this.currentSdkConfig.endpoint !== config.endpoint || this.currentSdkConfig.apiKey !== config.apiKey) {\n      \n      console.log('üîÑ Creating new Azure AI Projects client instance...');\n      this.projectsClientInstance = this.createProjectsClient(config);\n      this.currentSdkConfig = { ...config };\n    }\n\n    return this.projectsClientInstance;\n  }\n\n  /**\n   * Get or create Azure AI Agents client (singleton pattern)\n   */\n  async getAgentsClient(forceRefresh: boolean = false): Promise<AgentsClient> {\n    if (isClient) {\n      throw new Error('Agents client is not available on client side');\n    }\n\n    const config = await getFoundryConfig(forceRefresh);\n    \n    if (forceRefresh || !this.agentsClientInstance || !this.currentSdkConfig || \n        this.currentSdkConfig.endpoint !== config.endpoint || this.currentSdkConfig.apiKey !== config.apiKey) {\n      \n      console.log('üîÑ Creating new Azure AI Agents client instance...');\n      this.agentsClientInstance = this.createAgentsClient(config);\n      this.currentSdkConfig = { ...config };\n    }\n\n    return this.agentsClientInstance;\n  }\n\n  /**\n   * Test connection to Azure AI Foundry services\n   */\n  async testFoundryConnection(): Promise<boolean> {\n    if (isClient) {\n      console.warn('‚ö†Ô∏è Cannot test foundry connection on client side');\n      return false;\n    }\n\n    try {\n      console.log('üîç Testing Azure AI Foundry connection...');\n      const client = await this.getProjectsClient();\n      \n      // TODO: Add actual connection test based on Azure AI Projects SDK\n      console.log('‚úÖ Azure AI Foundry connection test successful');\n      return true;\n\n    } catch (error) {\n      console.error('‚ùå Azure AI Foundry connection test failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Clear SDK client instances (useful for testing or configuration updates)\n   */\n  clearFoundryClients(): void {\n    if (isClient) return;\n    \n    console.log('üîÑ Clearing Azure AI Foundry client instances...');\n    this.projectsClientInstance = null;\n    this.agentsClientInstance = null;\n    this.currentSdkConfig = null;\n  }\n\n  /**\n   * Get current foundry configuration (for debugging)\n   */\n  async getCurrentFoundryConfig(): Promise<FoundryConfig | null> {\n    if (isClient) {\n      console.warn('‚ö†Ô∏è Cannot access foundry config on client side');\n      return null;\n    }\n\n    try {\n      return await getFoundryConfig();\n    } catch (error) {\n      console.error('‚ùå Failed to get current foundry configuration:', error);\n      return null;\n    }\n  }\n}\n\n/**\n * Type exports for external use\n */\nexport type FoundryClientOptions = {\n  endpoint?: string;\n  apiKey?: string;\n  projectId?: string;\n  forceRefresh?: boolean;\n};\n\nexport type FoundryRequestOptions = {\n  method?: string;\n  body?: any;\n  headers?: Record<string, string>;\n};\n\nexport type FoundryResponse<T = any> = {\n  status: number;\n  data: T | null;\n  raw: string;\n};\n\n// Re-export Azure SDK types for convenience\nexport type { AIProjectClient, AgentsClient };\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/clients/migration-wrapper.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ModelConfig' is defined but never used.","line":13,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[839,842],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[839,842],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":190,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5577,5580],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5577,5580],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":234,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":234,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7120,7123],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7120,7123],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":301,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":301,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9399,9402],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9399,9402],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'config' is defined but never used.","line":315,"column":67,"nodeType":null,"messageId":"unusedVar","endLine":315,"endColumn":73},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":386,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":386,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11892,11895],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11892,11895],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Azure AI Foundry Migration Wrapper\n * \n * Drop-in replacement for Azure OpenAI SDK that routes requests through\n * Azure AI Foundry while maintaining full API compatibility.\n * \n * This allows for seamless migration from legacy OpenAI/Azure OpenAI clients\n * to the new Azure AI Foundry infrastructure without changing existing code.\n */\n\nimport { FoundryClientBase } from './foundry-client';\nimport { FoundryModelManager } from '../managers/model-manager';\nimport type { ModelConfig } from '../config/foundry-config';\nimport type { TokenUsage } from '../types/foundry-types';\n\n/**\n * OpenAI SDK Compatible Interfaces\n * These match the exact structure expected by existing code\n */\nexport interface ChatCompletionMessage {\n  role: 'system' | 'user' | 'assistant' | 'function';\n  content: string;\n  name?: string;\n  function_call?: any;\n}\n\nexport interface ChatCompletionCreateParams {\n  model: string;\n  messages: ChatCompletionMessage[];\n  temperature?: number;\n  max_tokens?: number;\n  top_p?: number;\n  frequency_penalty?: number;\n  presence_penalty?: number;\n  stream?: boolean;\n  stop?: string | string[];\n  n?: number;\n  logit_bias?: Record<string, number>;\n  user?: string;\n}\n\nexport interface ChatCompletionChoice {\n  index: number;\n  message: ChatCompletionMessage;\n  finish_reason: string | null;\n}\n\nexport interface ChatCompletionResponse {\n  id: string;\n  object: 'chat.completion';\n  created: number;\n  model: string;\n  choices: ChatCompletionChoice[];\n  usage?: TokenUsage;\n}\n\nexport interface CompletionCreateParams {\n  model: string;\n  prompt: string;\n  temperature?: number;\n  max_tokens?: number;\n  top_p?: number;\n  frequency_penalty?: number;\n  presence_penalty?: number;\n  stop?: string | string[];\n  n?: number;\n}\n\nexport interface CompletionChoice {\n  text: string;\n  index: number;\n  finish_reason: string | null;\n}\n\nexport interface CompletionResponse {\n  id: string;\n  object: 'text_completion';\n  created: number;\n  model: string;\n  choices: CompletionChoice[];\n  usage?: TokenUsage;\n}\n\nexport interface ModelListResponse {\n  object: 'list';\n  data: Array<{\n    id: string;\n    object: 'model';\n    created: number;\n    owned_by: string;\n  }>;\n}\n\n/**\n * Migration OpenAI Client\n * \n * Provides full compatibility with OpenAI SDK while using Azure AI Foundry backend.\n * Includes cost tracking, usage monitoring, and intelligent model selection.\n */\nexport class MigrationOpenAIClient extends FoundryClientBase {\n  private modelManager: FoundryModelManager;\n  private isInitialized = false;\n\n  // Nested API structure to match OpenAI SDK\n  public readonly chat: {\n    completions: {\n      create: (params: ChatCompletionCreateParams) => Promise<ChatCompletionResponse>;\n    };\n  };\n\n  public readonly completions: {\n    create: (params: CompletionCreateParams) => Promise<CompletionResponse>;\n  };\n\n  constructor() {\n    super(); // Call parent constructor\n    this.modelManager = new FoundryModelManager();\n\n    // Create nested API structure to match OpenAI SDK exactly\n    this.chat = {\n      completions: {\n        create: this.createChatCompletion.bind(this)\n      }\n    };\n\n    this.completions = {\n      create: this.createCompletion.bind(this)\n    };\n  }\n\n  /**\n   * Initialize the migration client\n   */\n  async init(): Promise<void> {\n    if (this.isInitialized) return;\n\n    await super.init(); // Call parent init\n    await this.modelManager.init();\n    this.isInitialized = true;\n\n    console.log('‚úÖ MigrationOpenAIClient initialized with Azure AI Foundry backend');\n  }\n\n  /**\n   * Create chat completion (main method used by existing code)\n   */\n  async createChatCompletion(params: ChatCompletionCreateParams): Promise<ChatCompletionResponse> {\n    await this.ensureInitialized();\n    \n    const startTime = Date.now();\n    const mappedModel = this.mapModel(params.model);\n    const modelConfig = this.modelManager.getModel(mappedModel) || this.modelManager.getDefaultModelConfig();\n\n    // Log cost estimation before the request\n    const estimatedTokens = this.estimateTokens(params);\n    const estimatedCost = (estimatedTokens / 1000) * modelConfig.costPerToken;\n    console.info(`[Cost] Estimated cost for ${mappedModel}: $${estimatedCost.toFixed(4)} (~${estimatedTokens} tokens)`);\n\n    try {\n      // Convert OpenAI request to Foundry request format\n      const foundryRequest = {\n        messages: params.messages,\n        model: mappedModel,\n        temperature: params.temperature ?? modelConfig.temperature,\n        max_tokens: params.max_tokens ?? modelConfig.maxTokens,\n        top_p: params.top_p ?? modelConfig.topP,\n        frequency_penalty: params.frequency_penalty ?? modelConfig.frequencyPenalty,\n        presence_penalty: params.presence_penalty ?? modelConfig.presencePenalty,\n        stream: false, // Foundry doesn't support streaming yet\n        stop: params.stop,\n        n: params.n ?? 1\n      };\n\n      // Make request through Foundry client (inherited method)\n      const foundryResponse = await this.request(`/chat/completions`, {\n        method: 'POST',\n        body: foundryRequest\n      });\n\n      if (foundryResponse.status !== 200) {\n        throw new Error(`Foundry API returned status ${foundryResponse.status}: ${foundryResponse.raw}`);\n      }\n\n      // Convert Foundry response to OpenAI format\n      const openAIResponse: ChatCompletionResponse = {\n        id: foundryResponse.data?.id || `chatcmpl-${Date.now()}`,\n        object: 'chat.completion',\n        created: Math.floor(Date.now() / 1000),\n        model: mappedModel,\n        choices: foundryResponse.data?.choices?.map((choice: any, index: number) => ({\n          index,\n          message: {\n            role: choice.message?.role || 'assistant',\n            content: choice.message?.content || '',\n            function_call: choice.message?.function_call\n          },\n          finish_reason: choice.finish_reason || 'stop'\n        })) || [{\n          index: 0,\n          message: {\n            role: 'assistant',\n            content: foundryResponse.data?.content || foundryResponse.raw\n          },\n          finish_reason: 'stop'\n        }],\n        usage: foundryResponse.data?.usage ? {\n          prompt_tokens: foundryResponse.data.usage.prompt_tokens || 0,\n          completion_tokens: foundryResponse.data.usage.completion_tokens || 0,\n          total_tokens: foundryResponse.data.usage.total_tokens || 0\n        } : undefined\n      };\n\n      // Track usage metrics\n      const latency = Date.now() - startTime;\n      const actualUsage = openAIResponse.usage || {\n        prompt_tokens: estimatedTokens * 0.7,\n        completion_tokens: estimatedTokens * 0.3,\n        total_tokens: estimatedTokens\n      };\n\n      this.modelManager.trackUsage({\n        modelName: mappedModel,\n        tokenUsage: actualUsage,\n        latency,\n        success: true\n      });\n\n      // Log actual cost\n      const actualCost = (actualUsage.total_tokens / 1000) * modelConfig.costPerToken;\n      console.info(`[Cost] Actual cost for ${mappedModel}: $${actualCost.toFixed(4)} (${actualUsage.total_tokens} tokens, ${latency}ms)`);\n\n      return openAIResponse;\n\n    } catch (error: any) {\n      // Track failed usage\n      const latency = Date.now() - startTime;\n      this.modelManager.trackUsage({\n        modelName: mappedModel,\n        tokenUsage: {\n          prompt_tokens: 0,\n          completion_tokens: 0,\n          total_tokens: 0\n        },\n        latency,\n        success: false,\n        errorCode: error.status?.toString() || 'UNKNOWN_ERROR'\n      });\n\n      console.error(`[Cost] Failed request for ${mappedModel} after ${latency}ms:`, error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Create text completion (legacy method, less common but still used)\n   */\n  async createCompletion(params: CompletionCreateParams): Promise<CompletionResponse> {\n    await this.ensureInitialized();\n\n    const startTime = Date.now();\n    const mappedModel = this.mapModel(params.model);\n    const modelConfig = this.modelManager.getModel(mappedModel) || this.modelManager.getDefaultModelConfig();\n\n    // Estimate cost\n    const estimatedTokens = params.prompt.length / 4; // Rough token estimation\n    const estimatedCost = (estimatedTokens / 1000) * modelConfig.costPerToken;\n    console.info(`[Cost] Estimated cost for ${mappedModel} completion: $${estimatedCost.toFixed(4)}`);\n\n    try {\n      // Convert to chat completion format for Foundry\n      const chatParams: ChatCompletionCreateParams = {\n        model: mappedModel,\n        messages: [{ role: 'user', content: params.prompt }],\n        temperature: params.temperature,\n        max_tokens: params.max_tokens,\n        top_p: params.top_p,\n        frequency_penalty: params.frequency_penalty,\n        presence_penalty: params.presence_penalty,\n        stop: params.stop,\n        n: params.n\n      };\n\n      const chatResponse = await this.createChatCompletion(chatParams);\n\n      // Convert chat response to completion format\n      const completionResponse: CompletionResponse = {\n        id: chatResponse.id,\n        object: 'text_completion',\n        created: chatResponse.created,\n        model: mappedModel,\n        choices: chatResponse.choices.map(choice => ({\n          text: choice.message.content,\n          index: choice.index,\n          finish_reason: choice.finish_reason\n        })),\n        usage: chatResponse.usage\n      };\n\n      return completionResponse;\n\n    } catch (error: any) {\n      const latency = Date.now() - startTime;\n      console.error(`[Cost] Failed completion request for ${mappedModel} after ${latency}ms:`, error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * List available models\n   */\n  async listModels(): Promise<ModelListResponse> {\n    await this.ensureInitialized();\n\n    const availableModels = this.modelManager.getAvailableModels();\n    const modelList = Object.entries(availableModels).map(([name, config]) => ({\n      id: name,\n      object: 'model' as const,\n      created: Math.floor(Date.now() / 1000),\n      owned_by: 'azure-ai-foundry'\n    }));\n\n    return {\n      object: 'list',\n      data: modelList\n    };\n  }\n\n  /**\n   * Map legacy model names to Azure AI Foundry model names\n   * \n   * @param legacyModelName - Original model name from legacy code\n   * @returns Mapped model name for Azure AI Foundry\n   */\n  mapModel(legacyModelName: string): string {\n    // Define model mapping based on your specifications\n    const modelMapping: Record<string, string> = {\n      // GPT-4 variants ‚Üí gpt-4.5 (though we'll use gpt-4o as it's available)\n      'gpt-4': 'gpt-4o',\n      'gpt-4-turbo': 'gpt-4-turbo',\n      'gpt-4o': 'gpt-4o', // Already correct\n      \n      // GPT-3.5 variants ‚Üí gpt-4o (upgrade path)\n      'gpt-3.5': 'gpt-4o',\n      'gpt-3.5-turbo': 'gpt-4o',\n      'gpt-35-turbo': 'gpt-4o', // Common Azure OpenAI deployment name\n      \n      // Phi models (if they exist in your foundry config)\n      'phi-4': 'phi-4',\n      \n      // Default fallback\n      'default': 'gpt-4o'\n    };\n\n    const mapped = modelMapping[legacyModelName] || modelMapping['default'];\n    \n    if (legacyModelName !== mapped) {\n      console.log(`[ModelMapping] ${legacyModelName} ‚Üí ${mapped}`);\n    }\n\n    return mapped;\n  }\n\n  /**\n   * Estimate token count for cost calculation\n   */\n  private estimateTokens(params: ChatCompletionCreateParams): number {\n    const messageContent = params.messages.map(m => m.content).join(' ');\n    // Rough estimation: 1 token ‚âà 4 characters for English text\n    const inputTokens = Math.ceil(messageContent.length / 4);\n    const outputTokens = Math.min(params.max_tokens || 150, 500); // Conservative estimate\n    return inputTokens + outputTokens;\n  }\n\n  /**\n   * Ensure client is initialized before use\n   */\n  private async ensureInitialized(): Promise<void> {\n    if (!this.isInitialized) {\n      await this.init();\n    }\n  }\n\n  /**\n   * Get usage statistics\n   */\n  getUsageStats(): Record<string, any> {\n    // Delegate to model manager for usage statistics\n    return {\n      availableModels: Object.keys(this.modelManager.getAvailableModels()),\n      initialized: this.isInitialized\n    };\n  }\n\n  /**\n   * Clean up resources\n   */\n  dispose(): void {\n    this.isInitialized = false;\n    console.log('üßπ MigrationOpenAIClient disposed');\n  }\n}\n\n// Export singleton instance for drop-in replacement\nexport const migrationOpenAIClient = new MigrationOpenAIClient();\n\n// Export class for custom instantiation\nexport { MigrationOpenAIClient as OpenAI };\nexport { MigrationOpenAIClient as OpenAIClient };\n\n// Default export for CommonJS compatibility\nexport default MigrationOpenAIClient;\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/config/foundry-config.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'foundryDeploymentName' is assigned a value but never used.","line":161,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":161,"endColumn":28}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Azure AI Foundry Configuration\n * \n * This module handles configuration for Azure AI Foundry services,\n * including model configurations, retry policies, and connection settings.\n * Follows the existing pattern established in lib/azure-config.ts.\n */\n\nimport { DefaultAzureCredential } from '@azure/identity';\nimport { SecretClient } from '@azure/keyvault-secrets';\n\n// Client-side safety check\nconst isClient = typeof window !== 'undefined';\n\nif (isClient) {\n  console.warn('[Azure AI Foundry Config] Running on client side - using fallback implementations');\n}\n\n// Azure Key Vault configuration (reuse existing vault)\nconst AZURE_KEY_VAULT_URI = process.env.AZURE_KEY_VAULT_URI || 'https://prepbettr-keyvault-083.vault.azure.net/';\n\n/**\n * Model configuration interface\n */\nexport interface ModelConfig {\n  deploymentName: string;\n  modelName: string;\n  version: string;\n  maxTokens: number;\n  temperature: number;\n  topP: number;\n  frequencyPenalty: number;\n  presencePenalty: number;\n  costPerToken: number; // Cost in USD per 1K tokens\n  capabilities: string[];\n  isDefault?: boolean;\n}\n\n/**\n * Retry policy configuration\n */\nexport interface RetryPolicy {\n  maxRetries: number;\n  baseDelay: number; // milliseconds\n  maxDelay: number; // milliseconds\n  exponentialBase: number;\n  jitter: boolean;\n}\n\n/**\n * Connection settings\n */\nexport interface ConnectionSettings {\n  timeout: number; // milliseconds\n  keepAlive: boolean;\n  maxConnections: number;\n  retryPolicy: RetryPolicy;\n}\n\n/**\n * Document Intelligence configuration\n */\nexport interface DocumentIntelligenceConfig {\n  endpoint: string;\n  apiKey: string;\n  projectId?: string;\n  region?: string;\n}\n\n/**\n * Main foundry configuration interface\n */\nexport interface FoundryConfig {\n  endpoint: string;\n  apiKey: string;\n  projectId: string;\n  resourceId: string;\n  resourceGroup: string;\n  region: string;\n  models: Record<string, ModelConfig>;\n  connection: ConnectionSettings;\n  environment: 'development' | 'staging' | 'production';\n  docIntelligence?: DocumentIntelligenceConfig;\n}\n\nlet cachedFoundryConfig: FoundryConfig | null = null;\n\n/**\n * Initialize Azure Key Vault client (reusing existing pattern)\n */\nfunction createKeyVaultClient(): SecretClient {\n  if (!AZURE_KEY_VAULT_URI) {\n    throw new Error('AZURE_KEY_VAULT_URI environment variable is required');\n  }\n  \n  const credential = new DefaultAzureCredential();\n  return new SecretClient(AZURE_KEY_VAULT_URI, credential);\n}\n\n/**\n * Clear cached foundry configuration\n */\nexport function clearFoundryConfigCache(): void {\n  if (isClient) return;\n  console.log('üîÑ Clearing Azure AI Foundry config cache...');\n  cachedFoundryConfig = null;\n}\n\n/**\n * Fetch Azure AI Foundry configuration from Azure Key Vault with environment variable fallback\n * \n * @param forceRefresh - Force refresh the cached configuration\n * @returns Promise<FoundryConfig> - The foundry configuration\n */\nexport async function getFoundryConfig(forceRefresh: boolean = false): Promise<FoundryConfig> {\n  if (isClient) {\n    // Client-side fallback - return empty config with all required fields\n    return {\n      endpoint: '',\n      apiKey: '',\n      projectId: '',\n      resourceId: '',\n      resourceGroup: '',\n      region: '',\n      models: {},\n      connection: getDefaultConnectionSettings(),\n      environment: 'development'\n    };\n  }\n\n  // Clear cache if force refresh is requested\n  if (forceRefresh) {\n    clearFoundryConfigCache();\n  }\n  \n  // Return cached configuration if available\n  if (cachedFoundryConfig) {\n    return cachedFoundryConfig;\n  }\n\n  try {\n    console.log('üîë Fetching Azure AI Foundry configuration from Key Vault...');\n    const client = createKeyVaultClient();\n\n    // Helper function to suppress expected 404 errors for optional secrets\n    const getOptionalSecret = (name: string) => \n      client.getSecret(name).catch(err => {\n        if (err.statusCode !== 404) {\n          console.warn(`‚ö†Ô∏è Unexpected error fetching optional secret '${name}':`, err.message);\n        }\n        return null;\n      });\n\n    // Fetch foundry-specific secrets\n    const [\n      foundryEndpoint,\n      foundryApiKey,\n      foundryProjectId,\n      foundryResourceGroup,\n      foundryRegion,\n      foundryDeploymentName,\n      docIntEndpoint,\n      docIntApiKey,\n      docIntProjectId\n    ] = await Promise.all([\n      getOptionalSecret('azure-foundry-endpoint'),\n      getOptionalSecret('azure-foundry-api-key'), \n      getOptionalSecret('azure-foundry-project-id'),\n      getOptionalSecret('azure-foundry-resource-group'),\n      getOptionalSecret('azure-foundry-region'),\n      getOptionalSecret('azure-foundry-deployment-name'),\n      getOptionalSecret('azure-foundry-docint-endpoint'),\n      getOptionalSecret('azure-foundry-docint-api-key'),\n      getOptionalSecret('azure-foundry-docint-project-id')\n    ]);\n\n    cachedFoundryConfig = {\n      endpoint: foundryEndpoint?.value || process.env.AZURE_FOUNDRY_ENDPOINT || '',\n      apiKey: foundryApiKey?.value || process.env.AZURE_FOUNDRY_API_KEY || '',\n      projectId: foundryProjectId?.value || process.env.AZURE_FOUNDRY_PROJECT_ID || 'prepbettr-interview-agents',\n      resourceId: process.env.AZURE_FOUNDRY_RESOURCE_ID || '',\n      resourceGroup: foundryResourceGroup?.value || process.env.AZURE_FOUNDRY_RESOURCE_GROUP || 'PrepBettr_group',\n      region: foundryRegion?.value || process.env.AZURE_FOUNDRY_REGION || 'eastus',\n      environment: (process.env.ENVIRONMENT || process.env.NODE_ENV || 'development') as 'development' | 'staging' | 'production',\n      models: getDefaultModelConfigurations(),\n      connection: getDefaultConnectionSettings(),\n      docIntelligence: (docIntEndpoint?.value || docIntApiKey?.value || process.env.AZURE_FOUNDRY_DOCINT_ENDPOINT || process.env.AZURE_FOUNDRY_DOCINT_API_KEY) ? {\n        endpoint: docIntEndpoint?.value || process.env.AZURE_FOUNDRY_DOCINT_ENDPOINT || '',\n        apiKey: docIntApiKey?.value || process.env.AZURE_FOUNDRY_DOCINT_API_KEY || '',\n        projectId: docIntProjectId?.value || process.env.AZURE_FOUNDRY_DOCINT_PROJECT_ID,\n        region: foundryRegion?.value || process.env.AZURE_FOUNDRY_REGION || 'eastus'\n      } : undefined\n    };\n\n    // Validate required configuration\n    const requiredFields = ['endpoint', 'apiKey', 'projectId', 'resourceGroup'];\n    const missingFields = requiredFields.filter(field => !cachedFoundryConfig![field as keyof FoundryConfig]);\n\n    if (missingFields.length > 0) {\n      console.warn(`‚ö†Ô∏è Azure AI Foundry missing configuration: ${missingFields.join(', ')}`);\n      console.log('üí° Add these secrets to Azure Key Vault or set environment variables:');\n      missingFields.forEach(field => {\n        const envVar = `AZURE_FOUNDRY_${field.toUpperCase()}`;\n        console.log(`   - ${envVar}`);\n      });\n    } else {\n      console.log('‚úÖ Azure AI Foundry configuration loaded successfully');\n    }\n\n    return cachedFoundryConfig;\n\n  } catch (error) {\n    console.error('‚ùå Failed to fetch Azure AI Foundry configuration:', error);\n    \n    // Fallback to environment variables\n    console.log('üîÑ Falling back to environment variables for Azure AI Foundry...');\n    const fallbackConfig: FoundryConfig = {\n      endpoint: process.env.AZURE_FOUNDRY_ENDPOINT || '',\n      apiKey: process.env.AZURE_FOUNDRY_API_KEY || '',\n      projectId: process.env.AZURE_FOUNDRY_PROJECT_ID || 'prepbettr-interview-agents',\n      resourceId: process.env.AZURE_FOUNDRY_RESOURCE_ID || '',\n      resourceGroup: process.env.AZURE_FOUNDRY_RESOURCE_GROUP || 'PrepBettr_group',\n      region: process.env.AZURE_FOUNDRY_REGION || 'eastus',\n      environment: (process.env.ENVIRONMENT || process.env.NODE_ENV || 'development') as 'development' | 'staging' | 'production',\n      models: getDefaultModelConfigurations(),\n      connection: getDefaultConnectionSettings(),\n      docIntelligence: (process.env.AZURE_FOUNDRY_DOCINT_ENDPOINT || process.env.AZURE_FOUNDRY_DOCINT_API_KEY) ? {\n        endpoint: process.env.AZURE_FOUNDRY_DOCINT_ENDPOINT || '',\n        apiKey: process.env.AZURE_FOUNDRY_DOCINT_API_KEY || '',\n        projectId: process.env.AZURE_FOUNDRY_DOCINT_PROJECT_ID,\n        region: process.env.AZURE_FOUNDRY_REGION || 'eastus'\n      } : undefined\n    };\n\n    // Log missing critical configuration\n    if (!fallbackConfig.endpoint || !fallbackConfig.apiKey) {\n      console.error('‚ùå Critical Azure AI Foundry configuration missing from environment variables');\n      console.log('üí° Set AZURE_FOUNDRY_ENDPOINT and AZURE_FOUNDRY_API_KEY environment variables');\n    }\n\n    cachedFoundryConfig = fallbackConfig;\n    return cachedFoundryConfig;\n  }\n}\n\n/**\n * Get environment-specific configuration defaults\n */\nexport function getEnvironmentDefaults(): Partial<FoundryConfig> {\n  const environment = process.env.ENVIRONMENT || process.env.NODE_ENV || 'development';\n  \n  const defaults: Record<string, Partial<FoundryConfig>> = {\n    development: {\n      region: 'eastus2',\n      resourceGroup: 'PrepBettr_group'\n    },\n    staging: {\n      region: 'eastus2', \n      resourceGroup: 'PrepBettr_group'\n    },\n    production: {\n      region: 'eastus2',\n      resourceGroup: 'PrepBettr_group'\n    }\n  };\n\n  return defaults[environment] || defaults.development;\n}\n\n/**\n * Get default model configurations for Azure AI Foundry\n */\nexport function getDefaultModelConfigurations(): Record<string, ModelConfig> {\n  return {\n    'gpt-4o': {\n      deploymentName: process.env.AZURE_FOUNDRY_GPT4O_DEPLOYMENT || 'gpt-4o',\n      modelName: 'gpt-4o',\n      version: '2024-05-13',\n      maxTokens: 4096,\n      temperature: 0.7,\n      topP: 0.9,\n      frequencyPenalty: 0,\n      presencePenalty: 0,\n      costPerToken: 0.005, // $5 per 1K tokens\n      capabilities: ['text-generation', 'reasoning', 'coding', 'analysis'],\n      isDefault: true\n    },\n    'gpt-4-turbo': {\n      deploymentName: process.env.AZURE_FOUNDRY_GPT4_TURBO_DEPLOYMENT || 'gpt-4-turbo',\n      modelName: 'gpt-4-turbo',\n      version: '2024-04-09',\n      maxTokens: 4096,\n      temperature: 0.7,\n      topP: 0.9,\n      frequencyPenalty: 0,\n      presencePenalty: 0,\n      costPerToken: 0.01, // $10 per 1K tokens\n      capabilities: ['text-generation', 'reasoning', 'coding', 'analysis', 'function-calling']\n    },\n    'phi-4': {\n      deploymentName: process.env.AZURE_FOUNDRY_PHI4_DEPLOYMENT || 'phi-4',\n      modelName: 'phi-4',\n      version: '2024-12-12',\n      maxTokens: 2048,\n      temperature: 0.6,\n      topP: 0.85,\n      frequencyPenalty: 0.1,\n      presencePenalty: 0.1,\n      costPerToken: 0.001, // $1 per 1K tokens (estimated for smaller model)\n      capabilities: ['text-generation', 'reasoning', 'lightweight-tasks']\n    }\n  };\n}\n\n/**\n * Get default connection settings\n */\nexport function getDefaultConnectionSettings(): ConnectionSettings {\n  const environment = process.env.ENVIRONMENT || process.env.NODE_ENV || 'development';\n  \n  return {\n    timeout: environment === 'production' ? 30000 : 60000, // 30s prod, 60s dev\n    keepAlive: true,\n    maxConnections: environment === 'production' ? 10 : 5,\n    retryPolicy: {\n      maxRetries: 3,\n      baseDelay: 1000, // 1 second\n      maxDelay: 10000, // 10 seconds\n      exponentialBase: 2,\n      jitter: true\n    }\n  };\n}\n\n/**\n * Get model configuration by name\n */\nexport function getModelConfig(modelName: string): ModelConfig | null {\n  const models = getDefaultModelConfigurations();\n  return models[modelName] || null;\n}\n\n/**\n * Get default model configuration\n */\nexport function getDefaultModel(): ModelConfig {\n  const models = getDefaultModelConfigurations();\n  const defaultModel = Object.values(models).find(model => model.isDefault);\n  return defaultModel || models['gpt-4o'];\n}\n\n/**\n * Validate foundry configuration\n */\nexport function validateFoundryConfig(config: FoundryConfig): { isValid: boolean; errors: string[] } {\n  const errors: string[] = [];\n  \n  if (!config.endpoint) {\n    errors.push('Missing foundry endpoint');\n  }\n  \n  if (!config.apiKey) {\n    errors.push('Missing foundry API key');\n  }\n  \n  if (!config.projectId) {\n    errors.push('Missing foundry project ID');\n  }\n  \n  if (!config.resourceGroup) {\n    errors.push('Missing foundry resource group');\n  }\n  \n  // Validate endpoint format\n  if (config.endpoint && !config.endpoint.startsWith('https://')) {\n    errors.push('Foundry endpoint must use HTTPS');\n  }\n  \n  // Validate models configuration\n  const models = Object.values(config.models);\n  if (models.length === 0) {\n    errors.push('No models configured');\n  }\n  \n  const hasDefault = models.some(model => model.isDefault);\n  if (!hasDefault) {\n    errors.push('No default model configured');\n  }\n  \n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n}\n\n/**\n * Get foundry configuration for specific environment\n */\nexport async function getFoundryConfigForEnvironment(\n  environment: 'development' | 'staging' | 'production'\n): Promise<FoundryConfig> {\n  // Get config without modifying process.env to avoid webpack issues\n  const config = await getFoundryConfig(true); // Force refresh\n  \n  // Override the environment in the returned config\n  return {\n    ...config,\n    environment\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/documents/document-client.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":173,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":173,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4474,4477],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4474,4477],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":277,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":277,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7423,7426],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7423,7426],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":277,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":277,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7434,7437],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7434,7437],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":435,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":435,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12156,12159],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12156,12159],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":488,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":488,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13963,13966],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13963,13966],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":488,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":488,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13997,14000],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13997,14000],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":515,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":515,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14974,14977],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14974,14977],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'entities' is defined but never used.","line":578,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":578,"endColumn":58},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":578,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":578,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16787,16790],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16787,16790],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'entities' is defined but never used.","line":644,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":644,"endColumn":58},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":644,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":644,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19271,19274],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19271,19274],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'entities' is defined but never used.","line":816,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":816,"endColumn":53},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":816,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":816,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24659,24662],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24659,24662],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":825,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":825,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25072,25075],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25072,25075],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'entities' is defined but never used.","line":873,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":873,"endColumn":52},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":873,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":873,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26284,26287],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26284,26287],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'entities' is defined but never used.","line":909,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":909,"endColumn":58},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":909,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":909,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27340,27343],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27340,27343],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'entities' is defined but never used.","line":948,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":948,"endColumn":53},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":948,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":948,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[28461,28464],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[28461,28464],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":990,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":990,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29870,29873],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29870,29873],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1004,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1004,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30344,30347],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30344,30347],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1011,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1011,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30526,30529],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30526,30529],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1013,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1013,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30601,30604],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30601,30604],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'jobDescription' is defined but never used.","line":1079,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":1079,"endColumn":54},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1079,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1079,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[32763,32766],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[32763,32766],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'resumeSkills' is defined but never used.","line":1084,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":1084,"endColumn":42},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1084,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1084,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[32927,32930],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[32927,32930],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'jobSkills' is defined but never used.","line":1084,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":1084,"endColumn":60},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1084,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1084,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[32945,32948],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[32945,32948],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1084,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1084,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[32953,32956],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[32953,32956],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'experience' is defined but never used.","line":1093,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":1093,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1093,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1093,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[33151,33154],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[33151,33154],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'jobRequirements' is defined but never used.","line":1093,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":1093,"endColumn":68},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1093,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1093,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[33175,33178],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[33175,33178],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1093,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1093,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[33181,33184],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[33181,33184],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'education' is defined but never used.","line":1103,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":1103,"endColumn":42},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1103,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1103,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[33403,33406],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[33403,33406],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'jobRequirements' is defined but never used.","line":1103,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":1103,"endColumn":66},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1103,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1103,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[33427,33430],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[33427,33430],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1103,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1103,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[33433,33436],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[33433,33436],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'extraction' is defined but never used.","line":1111,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1111,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'jobDescription' is defined but never used.","line":1111,"column":64,"nodeType":null,"messageId":"unusedVar","endLine":1111,"endColumn":78},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1111,"column":89,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1111,"endColumn":92,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[33644,33647],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[33644,33647],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'analysis' is defined but never used.","line":1121,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":1121,"endColumn":46},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1121,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1121,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[33862,33865],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[33862,33865],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'analysis' is defined but never used.","line":1126,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":1126,"endColumn":48},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1126,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1126,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[33994,33997],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[33994,33997],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1126,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1126,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[34000,34003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[34000,34003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":49,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Azure AI Foundry Document Intelligence Client\n * \n * Enhanced document analysis using Azure AI Foundry's Document Intelligence service.\n * Provides advanced OCR, layout analysis, and structured extraction capabilities.\n * Replaces and enhances the existing Azure Form Recognizer implementation.\n */\n\nimport { DefaultAzureCredential } from '@azure/identity';\nimport { DocumentAnalysisClient, AzureKeyCredential } from '@azure/ai-form-recognizer';\nimport { getFoundryConfig } from '../config/foundry-config';\nimport { logServerError } from '@/lib/errors';\nimport { retryWithExponentialBackoff } from '@/lib/utils/retry-with-backoff';\n\n// Client-side safety check\nconst isClient = typeof window !== 'undefined';\n\nif (isClient) {\n  console.warn('[Document Intelligence Client] Running on client side - clients will not be initialized');\n}\n\n/**\n * Enhanced extraction interfaces extending existing types\n */\nexport interface DocumentBoundingBox {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\nexport interface DocumentField {\n  content: string;\n  confidence: number;\n  boundingBox?: DocumentBoundingBox;\n}\n\nexport interface DocumentTable {\n  rowCount: number;\n  columnCount: number;\n  cells: Array<{\n    content: string;\n    rowIndex: number;\n    columnIndex: number;\n    confidence: number;\n  }>;\n}\n\nexport interface FoundryResumeExtraction {\n  // Core personal information with confidence scores\n  personalInfo: {\n    name?: DocumentField;\n    email?: DocumentField;\n    phone?: DocumentField;\n    address?: DocumentField;\n    linkedin?: DocumentField;\n    github?: DocumentField;\n    website?: DocumentField;\n  };\n  \n  // Professional summary and objectives\n  summary?: DocumentField;\n  objective?: DocumentField;\n  \n  // Enhanced skills extraction with proficiency levels\n  skills: Array<{\n    skill: string;\n    proficiency?: 'beginner' | 'intermediate' | 'advanced' | 'expert';\n    category: 'technical' | 'soft' | 'language' | 'certification' | 'tool';\n    confidence: number;\n    yearsOfExperience?: number;\n  }>;\n  \n  // Work experience with enhanced metadata\n  experience: Array<{\n    company: DocumentField;\n    position: DocumentField;\n    startDate?: DocumentField;\n    endDate?: DocumentField;\n    isCurrent?: boolean;\n    description: DocumentField;\n    achievements: DocumentField[];\n    technologies: string[];\n    location?: DocumentField;\n    managementScope?: {\n      teamSize?: number;\n      budget?: string;\n      responsibilities: string[];\n    };\n    quantifiableResults: Array<{\n      metric: string;\n      value: number;\n      unit: string;\n      impact: string;\n    }>;\n    confidence: number;\n  }>;\n  \n  // Education with validation\n  education: Array<{\n    institution: DocumentField;\n    degree: DocumentField;\n    field: DocumentField;\n    startDate?: DocumentField;\n    endDate?: DocumentField;\n    gpa?: DocumentField;\n    description?: DocumentField;\n    location?: DocumentField;\n    honors?: string[];\n    relevantCoursework?: string[];\n    confidence: number;\n  }>;\n  \n  // Projects with impact assessment\n  projects: Array<{\n    name: DocumentField;\n    description: DocumentField;\n    technologies: string[];\n    url?: DocumentField;\n    github?: DocumentField;\n    startDate?: DocumentField;\n    endDate?: DocumentField;\n    role?: string;\n    teamSize?: number;\n    impact?: string;\n    confidence: number;\n  }>;\n  \n  // Certifications with verification\n  certifications: Array<{\n    name: DocumentField;\n    issuer: DocumentField;\n    date?: DocumentField;\n    expiryDate?: DocumentField;\n    credentialId?: DocumentField;\n    url?: DocumentField;\n    status: 'active' | 'expired' | 'unknown';\n    confidence: number;\n  }>;\n  \n  // Languages with proficiency\n  languages: Array<{\n    name: string;\n    proficiency: 'basic' | 'conversational' | 'fluent' | 'native';\n    confidence: number;\n  }>;\n  \n  // Document analysis metadata\n  metadata: {\n    processingTime: number;\n    pageCount: number;\n    modelUsed: string;\n    overallConfidence: number;\n    languageDetected?: string;\n    documentStructure: {\n      hasHeaders: boolean;\n      hasBulletPoints: boolean;\n      hasTables: boolean;\n      columnLayout: boolean;\n    };\n  };\n  \n  // ATS optimization data\n  atsAnalysis?: {\n    score: number;\n    recommendations: string[];\n    keywordDensity: Record<string, number>;\n    formatIssues: string[];\n    structuralOptimizations: string[];\n  };\n  \n  // Raw extraction data for debugging/export\n  rawExtraction?: any;\n}\n\n/**\n * Job matching interface\n */\nexport interface JobMatchAnalysis {\n  overallScore: number; // 0-100\n  skillsMatch: {\n    matchedSkills: string[];\n    missingSkills: string[];\n    skillGapScore: number;\n  };\n  experienceMatch: {\n    yearsMatch: boolean;\n    industryMatch: boolean;\n    roleMatch: boolean;\n    seniorityMatch: boolean;\n  };\n  educationMatch: {\n    degreeMatch: boolean;\n    fieldMatch: boolean;\n    institutionPrestige?: number;\n  };\n  keywordAnalysis: {\n    totalKeywords: number;\n    matchedKeywords: number;\n    missedKeywords: string[];\n    keywordDensity: number;\n  };\n  recommendations: Array<{\n    category: 'skills' | 'experience' | 'education' | 'keywords' | 'formatting';\n    priority: 'high' | 'medium' | 'low';\n    suggestion: string;\n    impact: string;\n  }>;\n}\n\n/**\n * Document model configurations for different analysis types\n */\ninterface DocumentModelConfig {\n  modelId: string;\n  locale?: string;\n  pages?: string;\n}\n\n/**\n * Azure AI Foundry Document Intelligence Service\n */\nclass FoundryDocumentIntelligenceService {\n  private client: DocumentAnalysisClient | null = null;\n  private isInitialized = false;\n  \n  // Model configurations for different document types\n  private readonly modelConfigs: Record<string, DocumentModelConfig> = {\n    'resume-analysis': {\n      modelId: 'prebuilt-layout'\n    },\n    'resume-structured': {\n      modelId: 'prebuilt-document'\n    },\n    'general-document': {\n      modelId: 'prebuilt-read'\n    }\n  };\n\n  /**\n   * Initialize the Azure AI Foundry Document Intelligence service\n   */\n  async initialize(): Promise<boolean> {\n    if (isClient) {\n      console.warn('‚ö†Ô∏è Document Intelligence client cannot be initialized on client side');\n      return false;\n    }\n\n    if (this.isInitialized) {\n      return true;\n    }\n\n    try {\n      const config = await getFoundryConfig();\n      \n      // Check if Document Intelligence is configured in Foundry config\n      const docIntEndpoint = process.env.AZURE_FOUNDRY_DOCINT_ENDPOINT || config.docIntelligence?.endpoint;\n      const docIntApiKey = process.env.AZURE_FOUNDRY_DOCINT_API_KEY || config.docIntelligence?.apiKey;\n\n      if (!docIntEndpoint || !docIntApiKey) {\n        console.warn('‚ö†Ô∏è Azure AI Foundry Document Intelligence credentials not found');\n        console.log('üí° Configure AZURE_FOUNDRY_DOCINT_ENDPOINT and AZURE_FOUNDRY_DOCINT_API_KEY');\n        return false;\n      }\n\n      console.log('üîß Initializing Azure AI Foundry Document Intelligence client...');\n      \n      // Create client with either API key or managed identity\n      const credential = docIntApiKey.startsWith('https://') \n        ? new DefaultAzureCredential()\n        : new AzureKeyCredential(docIntApiKey);\n      \n      this.client = new DocumentAnalysisClient(docIntEndpoint, credential, {\n        additionalPolicies: [{\n          policy: {\n            name: 'PrepBettrDocumentIntelligence',\n            sendRequest: async (request: any, next: any) => {\n              // Add custom headers for tracking\n              request.headers.set('X-Client-Name', 'PrepBettr');\n              request.headers.set('X-Client-Version', '2.0');\n              return next(request);\n            }\n          },\n          position: 'perCall'\n        }],\n        retryOptions: {\n          maxRetries: config.connection.retryPolicy.maxRetries,\n          retryDelayInMs: config.connection.retryPolicy.baseDelay\n        }\n      });\n\n      this.isInitialized = true;\n      console.log('‚úÖ Azure AI Foundry Document Intelligence service initialized');\n      return true;\n\n    } catch (error) {\n      console.error('‚ùå Failed to initialize Document Intelligence service:', error);\n      logServerError(error as Error, { \n        service: 'foundry-document-intelligence', \n        action: 'initialize' \n      });\n      return false;\n    }\n  }\n\n  /**\n   * Check if service is ready\n   */\n  isReady(): boolean {\n    return !isClient && this.isInitialized && this.client !== null;\n  }\n\n  /**\n   * Analyze resume document with enhanced extraction\n   */\n  async analyzeResume(\n    documentBuffer: Buffer, \n    mimeType: string,\n    options?: {\n      includeAtsAnalysis?: boolean;\n      modelType?: 'resume-analysis' | 'resume-structured' | 'general-document';\n    }\n  ): Promise<FoundryResumeExtraction> {\n    if (!this.isReady()) {\n      throw new Error('Document Intelligence service not initialized');\n    }\n\n    const startTime = Date.now();\n    const modelType = options?.modelType || 'resume-analysis';\n    const modelConfig = this.modelConfigs[modelType];\n\n    try {\n      console.log(`üîç Analyzing resume with model: ${modelConfig.modelId}`);\n\n      const result = await retryWithExponentialBackoff(\n        async () => {\n          const poller = await this.client!.beginAnalyzeDocument(\n            modelConfig.modelId,\n            documentBuffer,\n            {\n              locale: modelConfig.locale\n            }\n          );\n          return await poller.pollUntilDone();\n        },\n        'document-intelligence-analyze',\n        undefined,\n        {\n          maxRetries: 3,\n          baseDelay: 2000,\n          maxDelay: 30000\n        }\n      );\n\n      const processingTime = Date.now() - startTime;\n      \n      // Extract structured data from the analysis result\n      const extraction = await this.extractStructuredData(result, processingTime);\n      \n      // Add ATS analysis if requested\n      if (options?.includeAtsAnalysis) {\n        extraction.atsAnalysis = await this.performAtsAnalysis(extraction);\n      }\n\n      console.log(`‚úÖ Resume analysis completed in ${processingTime}ms`);\n      return extraction;\n\n    } catch (error) {\n      console.error('‚ùå Failed to analyze resume with Document Intelligence:', error);\n      logServerError(error as Error, {\n        service: 'foundry-document-intelligence',\n        action: 'analyze-resume'\n      }, {\n        mimeType,\n        modelType,\n        processingTime: Date.now() - startTime\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Compare resume against job description for matching analysis\n   */\n  async compareWithJobDescription(\n    resumeExtraction: FoundryResumeExtraction,\n    jobDescription: string\n  ): Promise<JobMatchAnalysis> {\n    try {\n      console.log('üéØ Performing job match analysis...');\n      \n      // Extract job requirements from description\n      const jobRequirements = await this.extractJobRequirements(jobDescription);\n      \n      // Perform multi-dimensional matching\n      const skillsMatch = this.analyzeSkillsMatch(resumeExtraction.skills, jobRequirements.skills);\n      const experienceMatch = this.analyzeExperienceMatch(resumeExtraction.experience, jobRequirements);\n      const educationMatch = this.analyzeEducationMatch(resumeExtraction.education, jobRequirements);\n      const keywordAnalysis = this.analyzeKeywords(resumeExtraction, jobDescription);\n      \n      // Calculate overall score\n      const overallScore = this.calculateOverallMatchScore({\n        skillsMatch,\n        experienceMatch,\n        educationMatch,\n        keywordAnalysis\n      });\n      \n      // Generate recommendations\n      const recommendations = this.generateMatchRecommendations({\n        skillsMatch,\n        experienceMatch,\n        educationMatch,\n        keywordAnalysis\n      });\n\n      return {\n        overallScore,\n        skillsMatch,\n        experienceMatch,\n        educationMatch,\n        keywordAnalysis,\n        recommendations\n      };\n\n    } catch (error) {\n      console.error('‚ùå Failed to perform job match analysis:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Extract structured data from Document Intelligence result\n   */\n  private async extractStructuredData(result: any, processingTime: number): Promise<FoundryResumeExtraction> {\n    const pages = result.pages || [];\n    const keyValuePairs = result.keyValuePairs || [];\n    const entities = result.entities || [];\n    const content = result.content || '';\n\n    // Extract personal information using key-value pairs and patterns\n    const personalInfo = this.extractPersonalInfo(keyValuePairs, content, entities);\n    \n    // Extract skills with proficiency assessment\n    const skills = this.extractEnhancedSkills(content, entities);\n    \n    // Extract work experience with quantifiable results\n    const experience = this.extractWorkExperience(content, entities);\n    \n    // Extract education with validation\n    const education = this.extractEducation(content, entities);\n    \n    // Extract projects with impact assessment\n    const projects = this.extractProjects(content, entities);\n    \n    // Extract certifications\n    const certifications = this.extractCertifications(content, entities);\n    \n    // Extract languages\n    const languages = this.extractLanguages(content, entities);\n    \n    // Analyze document structure\n    const documentStructure = this.analyzeDocumentStructure(result);\n    \n    return {\n      personalInfo,\n      skills,\n      experience,\n      education,\n      projects,\n      certifications,\n      languages,\n      metadata: {\n        processingTime,\n        pageCount: pages.length,\n        modelUsed: 'azure-foundry-document-intelligence',\n        overallConfidence: this.calculateOverallConfidence(result),\n        languageDetected: result.languages?.[0]?.locale,\n        documentStructure\n      },\n      rawExtraction: result // Store for debugging/export\n    };\n  }\n\n  /**\n   * Extract personal information with confidence scores\n   */\n  private extractPersonalInfo(keyValuePairs: any[], content: string, entities: any[]): FoundryResumeExtraction['personalInfo'] {\n    const personalInfo: FoundryResumeExtraction['personalInfo'] = {};\n\n    // Extract from key-value pairs first (highest confidence)\n    keyValuePairs.forEach(pair => {\n      const key = pair.key?.content?.toLowerCase() || '';\n      const value = pair.value;\n      \n      if (key.includes('name') && !personalInfo.name) {\n        personalInfo.name = {\n          content: value.content,\n          confidence: value.confidence || 0.9\n        };\n      } else if (key.includes('email') && !personalInfo.email) {\n        personalInfo.email = {\n          content: value.content,\n          confidence: value.confidence || 0.95\n        };\n      } else if (key.includes('phone') && !personalInfo.phone) {\n        personalInfo.phone = {\n          content: value.content,\n          confidence: value.confidence || 0.9\n        };\n      }\n    });\n\n    // Extract from entities if not found in key-value pairs\n    entities.forEach((entity: any) => {\n      if (entity.category === 'Person' && !personalInfo.name) {\n        personalInfo.name = {\n          content: entity.content,\n          confidence: entity.confidence\n        };\n      } else if (entity.category === 'Email' && !personalInfo.email) {\n        personalInfo.email = {\n          content: entity.content,\n          confidence: entity.confidence\n        };\n      } else if (entity.category === 'PhoneNumber' && !personalInfo.phone) {\n        personalInfo.phone = {\n          content: entity.content,\n          confidence: entity.confidence\n        };\n      }\n    });\n\n    // Fallback to regex patterns with lower confidence\n    if (!personalInfo.email) {\n      const emailMatch = content.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/);\n      if (emailMatch) {\n        personalInfo.email = {\n          content: emailMatch[0],\n          confidence: 0.8\n        };\n      }\n    }\n\n    if (!personalInfo.phone) {\n      const phoneMatch = content.match(/(\\+?1?[-. \\s]?)?\\(?[0-9]{3}\\)?[-. \\s]?[0-9]{3}[-. \\s]?[0-9]{4}/);\n      if (phoneMatch) {\n        personalInfo.phone = {\n          content: phoneMatch[0],\n          confidence: 0.75\n        };\n      }\n    }\n\n    // Extract LinkedIn and GitHub URLs\n    const linkedinMatch = content.match(/linkedin\\.com\\/in\\/[\\w-]+/i);\n    if (linkedinMatch) {\n      personalInfo.linkedin = {\n        content: `https://${linkedinMatch[0]}`,\n        confidence: 0.9\n      };\n    }\n\n    const githubMatch = content.match(/github\\.com\\/[\\w-]+/i);\n    if (githubMatch) {\n      personalInfo.github = {\n        content: `https://${githubMatch[0]}`,\n        confidence: 0.9\n      };\n    }\n\n    return personalInfo;\n  }\n\n  /**\n   * Extract skills with proficiency levels and categorization\n   */\n  private extractEnhancedSkills(content: string, entities: any[]): FoundryResumeExtraction['skills'] {\n    const skills: FoundryResumeExtraction['skills'] = [];\n    \n    // Technical skills database for categorization\n    const technicalSkills = [\n      'javascript', 'typescript', 'python', 'java', 'react', 'node', 'angular', 'vue',\n      'sql', 'mongodb', 'postgresql', 'mysql', 'docker', 'kubernetes', 'aws', 'azure',\n      'tensorflow', 'pytorch', 'machine learning', 'data science', 'blockchain'\n    ];\n    \n    const softSkills = [\n      'leadership', 'teamwork', 'communication', 'problem solving', 'critical thinking',\n      'project management', 'agile', 'scrum'\n    ];\n\n    // Extract from content with pattern matching\n    const skillsSection = content.match(/(?:skills?|technologies|competencies)[:\\s]*([^]*?)(?=\\n\\s*[A-Z][^:]*:|$)/i);\n    if (skillsSection) {\n      const skillsText = skillsSection[1];\n      \n      // Split by common delimiters\n      const detectedSkills = skillsText\n        .replace(/[‚Ä¢\\\\-\\\\*]/g, ',')\n        .split(/[,\\\\n]/)\n        .map(skill => skill.trim())\n        .filter(skill => skill.length > 0 && skill.length < 50);\n      \n      detectedSkills.forEach(skill => {\n        const lowerSkill = skill.toLowerCase();\n        let category: 'technical' | 'soft' | 'language' | 'certification' | 'tool' = 'tool';\n        let proficiency: 'beginner' | 'intermediate' | 'advanced' | 'expert' | undefined;\n        \n        // Categorize skill\n        if (technicalSkills.some(tech => lowerSkill.includes(tech))) {\n          category = 'technical';\n        } else if (softSkills.some(soft => lowerSkill.includes(soft))) {\n          category = 'soft';\n        }\n        \n        // Detect proficiency indicators\n        if (skill.match(/expert|advanced|senior|lead/i)) {\n          proficiency = 'expert';\n        } else if (skill.match(/intermediate|mid|experienced/i)) {\n          proficiency = 'intermediate';\n        } else if (skill.match(/beginner|basic|junior/i)) {\n          proficiency = 'beginner';\n        } else if (skill.match(/proficient|skilled/i)) {\n          proficiency = 'advanced';\n        }\n        \n        skills.push({\n          skill: skill,\n          proficiency,\n          category,\n          confidence: 0.8,\n          yearsOfExperience: this.extractYearsOfExperience(skill, content)\n        });\n      });\n    }\n\n    return skills;\n  }\n\n  /**\n   * Extract work experience with quantifiable results and management scope\n   */\n  private extractWorkExperience(content: string, entities: any[]): FoundryResumeExtraction['experience'] {\n    const experience: FoundryResumeExtraction['experience'] = [];\n    \n    // Pattern to match experience sections\n    const expSection = content.match(/(?:experience|employment|work history)[:\\s]*([^]*?)(?=\\n\\s*(?:education|skills?|projects?)[:\\s]|$)/i);\n    if (!expSection) return experience;\n    \n    const expText = expSection[1];\n    \n    // Split into individual job entries (basic pattern)\n    const jobEntries = expText.split(/\\n(?=[A-Z].*(?:Inc\\.|Corp\\.|LLC|Ltd\\.|Company|\\d{4}))/);\n    \n    jobEntries.forEach(entry => {\n      if (entry.trim().length < 50) return; // Skip short entries\n      \n      const job = this.parseJobEntry(entry.trim());\n      if (job.company.content && job.position.content) {\n        experience.push(job);\n      }\n    });\n\n    return experience;\n  }\n\n  /**\n   * Parse individual job entry\n   */\n  private parseJobEntry(entry: string): FoundryResumeExtraction['experience'][0] {\n    const lines = entry.split('\\n').map(line => line.trim());\n    \n    // Extract company and position (usually first few lines)\n    const companyMatch = lines[0].match(/^(.+?)(?:\\s+[-‚Äì‚Äî]\\s+(.+))?$/);\n    const company = companyMatch ? companyMatch[1] : lines[0];\n    const position = companyMatch ? companyMatch[2] || lines[1] : lines[1];\n    \n    // Extract dates\n    const datePattern = /(\\d{1,2}\\/\\d{4}|\\w+\\s+\\d{4}|\\d{4})\\s*[-‚Äì‚Äî]\\s*(\\d{1,2}\\/\\d{4}|\\w+\\s+\\d{4}|\\d{4}|present)/i;\n    const dateMatch = entry.match(datePattern);\n    \n    // Extract achievements and quantifiable results\n    const achievements = lines\n      .filter(line => line.match(/^[‚Ä¢\\\\-\\\\*]/) || line.includes('achieved') || line.includes('%') || line.includes('$'))\n      .map(line => ({\n        content: line.replace(/^[‚Ä¢\\\\-\\\\*]\\s*/, ''),\n        confidence: 0.8\n      }));\n    \n    // Extract quantifiable results\n    const quantifiableResults = this.extractQuantifiableResults(entry);\n    \n    // Extract management scope\n    const managementScope = this.extractManagementScope(entry);\n    \n    return {\n      company: {\n        content: company,\n        confidence: 0.9\n      },\n      position: {\n        content: position,\n        confidence: 0.9\n      },\n      startDate: dateMatch ? {\n        content: dateMatch[1],\n        confidence: 0.8\n      } : undefined,\n      endDate: dateMatch ? {\n        content: dateMatch[2],\n        confidence: 0.8\n      } : undefined,\n      isCurrent: dateMatch ? dateMatch[2].toLowerCase().includes('present') : false,\n      description: {\n        content: lines.slice(2).join(' '),\n        confidence: 0.7\n      },\n      achievements,\n      technologies: this.extractTechnologies(entry),\n      managementScope,\n      quantifiableResults,\n      confidence: 0.8\n    };\n  }\n\n  /**\n   * Extract quantifiable results from job description\n   */\n  private extractQuantifiableResults(text: string): Array<{\n    metric: string;\n    value: number;\n    unit: string;\n    impact: string;\n  }> {\n    const results: Array<{\n      metric: string;\n      value: number;\n      unit: string;\n      impact: string;\n    }> = [];\n    \n    // Pattern for percentages\n    const percentMatches = text.match(/(\\w+[^.]*?)(\\d+)%/g);\n    percentMatches?.forEach(match => {\n      const parts = match.match(/(\\w+[^.]*?)(\\d+)%/);\n      if (parts) {\n        results.push({\n          metric: parts[1].trim(),\n          value: parseInt(parts[2]),\n          unit: 'percentage',\n          impact: match\n        });\n      }\n    });\n    \n    // Pattern for monetary values\n    const moneyMatches = text.match(/\\$[\\d,]+(?:\\.\\d{2})?[KMB]?/g);\n    moneyMatches?.forEach(match => {\n      const value = match.replace(/[\\$,]/g, '');\n      results.push({\n        metric: 'revenue/savings',\n        value: parseFloat(value),\n        unit: 'currency',\n        impact: match\n      });\n    });\n    \n    return results;\n  }\n\n  /**\n   * Extract management scope information\n   */\n  private extractManagementScope(text: string): FoundryResumeExtraction['experience'][0]['managementScope'] {\n    const teamSizeMatch = text.match(/(?:managed|led|supervised).*?(\\d+).*?(?:people|team|members|employees)/i);\n    const budgetMatch = text.match(/budget.*?\\$[\\d,]+(?:\\.\\d{2})?[KMB]?/i);\n    \n    if (teamSizeMatch || budgetMatch) {\n      return {\n        teamSize: teamSizeMatch ? parseInt(teamSizeMatch[1]) : undefined,\n        budget: budgetMatch ? budgetMatch[0] : undefined,\n        responsibilities: text.match(/(?:managed|led|supervised|oversaw)[^.]+/gi) || []\n      };\n    }\n    \n    return undefined;\n  }\n\n  /**\n   * Extract technologies from text\n   */\n  private extractTechnologies(text: string): string[] {\n    const techKeywords = [\n      'javascript', 'typescript', 'python', 'java', 'react', 'angular', 'vue', 'node',\n      'sql', 'mongodb', 'postgresql', 'docker', 'kubernetes', 'aws', 'azure', 'git'\n    ];\n    \n    return techKeywords.filter(tech => \n      text.toLowerCase().includes(tech.toLowerCase())\n    );\n  }\n\n  /**\n   * Extract years of experience for a skill from context\n   */\n  private extractYearsOfExperience(skill: string, content: string): number | undefined {\n    const skillPattern = new RegExp(`${skill}.*?(\\\\d+)\\\\s*years?`, 'i');\n    const match = content.match(skillPattern);\n    return match ? parseInt(match[1]) : undefined;\n  }\n\n  /**\n   * Extract education information\n   */\n  private extractEducation(content: string, entities: any[]): FoundryResumeExtraction['education'] {\n    const education: FoundryResumeExtraction['education'] = [];\n    \n    const eduSection = content.match(/(?:education|academic)[:\\s]*([^]*?)(?=\\n\\s*(?:experience|skills?|projects?)[:\\s]|$)/i);\n    if (!eduSection) return education;\n    \n    const eduText = eduSection[1];\n    const lines = eduText.split('\\n').filter(line => line.trim());\n    \n    let currentEdu: any = {};\n    \n    lines.forEach(line => {\n      line = line.trim();\n      if (!line) return;\n      \n      // Check if this looks like a new education entry\n      if (line.match(/university|college|institute|school/i)) {\n        if (currentEdu.institution) {\n          education.push(currentEdu);\n        }\n        currentEdu = {\n          institution: {\n            content: line,\n            confidence: 0.9\n          },\n          confidence: 0.8\n        };\n      } else if (line.match(/bachelor|master|phd|doctorate|degree/i)) {\n        currentEdu.degree = {\n          content: line,\n          confidence: 0.9\n        };\n      } else if (line.match(/\\d{4}/)) {\n        const dateMatch = line.match(/(\\d{4})\\s*[-‚Äì‚Äî]\\s*(\\d{4})/);\n        if (dateMatch) {\n          currentEdu.startDate = {\n            content: dateMatch[1],\n            confidence: 0.8\n          };\n          currentEdu.endDate = {\n            content: dateMatch[2],\n            confidence: 0.8\n          };\n        }\n      }\n    });\n    \n    if (currentEdu.institution) {\n      education.push(currentEdu);\n    }\n    \n    return education;\n  }\n\n  /**\n   * Extract projects information\n   */\n  private extractProjects(content: string, entities: any[]): FoundryResumeExtraction['projects'] {\n    const projects: FoundryResumeExtraction['projects'] = [];\n    \n    const projSection = content.match(/(?:projects?)[:\\s]*([^]*?)(?=\\n\\s*(?:experience|education|skills?)[:\\s]|$)/i);\n    if (!projSection) return projects;\n    \n    const projText = projSection[1];\n    const projectEntries = projText.split(/\\n(?=[A-Z][^:\\n]+)/);\n    \n    projectEntries.forEach(entry => {\n      if (entry.trim().length < 20) return;\n      \n      const lines = entry.split('\\n').map(line => line.trim());\n      const projectName = lines[0];\n      const description = lines.slice(1).join(' ');\n      \n      projects.push({\n        name: {\n          content: projectName,\n          confidence: 0.8\n        },\n        description: {\n          content: description,\n          confidence: 0.7\n        },\n        technologies: this.extractTechnologies(entry),\n        confidence: 0.7\n      });\n    });\n    \n    return projects;\n  }\n\n  /**\n   * Extract certifications\n   */\n  private extractCertifications(content: string, entities: any[]): FoundryResumeExtraction['certifications'] {\n    const certifications: FoundryResumeExtraction['certifications'] = [];\n    \n    const certSection = content.match(/(?:certifications?|certificates)[:\\s]*([^]*?)(?=\\n\\s*(?:experience|education|skills?|projects?)[:\\s]|$)/i);\n    if (!certSection) return certifications;\n    \n    const certText = certSection[1];\n    const lines = certText.split('\\n').filter(line => line.trim());\n    \n    lines.forEach(line => {\n      line = line.trim();\n      if (line.length < 10) return;\n      \n      const parts = line.split(/[-‚Äì‚Äî,]/);\n      const name = parts[0]?.trim();\n      const issuer = parts[1]?.trim();\n      \n      if (name) {\n        certifications.push({\n          name: {\n            content: name,\n            confidence: 0.8\n          },\n          issuer: {\n            content: issuer || 'Unknown',\n            confidence: issuer ? 0.7 : 0.3\n          },\n          status: 'unknown',\n          confidence: 0.7\n        });\n      }\n    });\n    \n    return certifications;\n  }\n\n  /**\n   * Extract languages\n   */\n  private extractLanguages(content: string, entities: any[]): FoundryResumeExtraction['languages'] {\n    const languages: FoundryResumeExtraction['languages'] = [];\n    \n    const langSection = content.match(/(?:languages?)[:\\s]*([^]*?)(?=\\n\\s*[A-Z][^:]*:|$)/i);\n    if (!langSection) return languages;\n    \n    const langText = langSection[1];\n    const langEntries = langText.split(/[,\\n]/).filter(entry => entry.trim());\n    \n    langEntries.forEach(entry => {\n      entry = entry.trim();\n      const parts = entry.split(/[-‚Äì‚Äî:]/);\n      const name = parts[0]?.trim();\n      const proficiencyText = parts[1]?.trim().toLowerCase();\n      \n      let proficiency: 'basic' | 'conversational' | 'fluent' | 'native' = 'conversational';\n      \n      if (proficiencyText) {\n        if (proficiencyText.includes('native') || proficiencyText.includes('mother tongue')) {\n          proficiency = 'native';\n        } else if (proficiencyText.includes('fluent') || proficiencyText.includes('advanced')) {\n          proficiency = 'fluent';\n        } else if (proficiencyText.includes('basic') || proficiencyText.includes('beginner')) {\n          proficiency = 'basic';\n        }\n      }\n      \n      if (name && name.length > 2) {\n        languages.push({\n          name: name,\n          proficiency,\n          confidence: 0.7\n        });\n      }\n    });\n    \n    return languages;\n  }\n\n  /**\n   * Analyze document structure\n   */\n  private analyzeDocumentStructure(result: any): FoundryResumeExtraction['metadata']['documentStructure'] {\n    const content = result.content || '';\n    \n    return {\n      hasHeaders: /^[A-Z][^a-z]*$/m.test(content),\n      hasBulletPoints: /[‚Ä¢\\\\-\\\\*]/.test(content),\n      hasTables: result.tables && result.tables.length > 0,\n      columnLayout: content.includes('\\t') || content.match(/\\s{4,}/) !== null\n    };\n  }\n\n  /**\n   * Calculate overall confidence score\n   */\n  private calculateOverallConfidence(result: any): number {\n    const pages = result.pages || [];\n    if (pages.length === 0) return 0;\n    \n    let totalConfidence = 0;\n    let totalElements = 0;\n    \n    pages.forEach((page: any) => {\n      const lines = page.lines || [];\n      lines.forEach((line: any) => {\n        totalConfidence += line.confidence || 0;\n        totalElements++;\n      });\n    });\n    \n    return totalElements > 0 ? totalConfidence / totalElements : 0;\n  }\n\n  /**\n   * Perform ATS optimization analysis\n   */\n  private async performAtsAnalysis(extraction: FoundryResumeExtraction): Promise<FoundryResumeExtraction['atsAnalysis']> {\n    // Simplified ATS analysis - can be enhanced with more sophisticated algorithms\n    const recommendations: string[] = [];\n    const formatIssues: string[] = [];\n    const structuralOptimizations: string[] = [];\n    \n    // Check for common ATS issues\n    if (!extraction.personalInfo.email) {\n      formatIssues.push('Missing email address');\n    }\n    \n    if (!extraction.personalInfo.phone) {\n      formatIssues.push('Missing phone number');\n    }\n    \n    if (extraction.skills.length < 5) {\n      recommendations.push('Add more relevant skills to improve keyword matching');\n    }\n    \n    if (extraction.experience.length === 0) {\n      structuralOptimizations.push('Add work experience section');\n    }\n    \n    // Calculate keyword density\n    const keywordDensity: Record<string, number> = {};\n    const allText = JSON.stringify(extraction).toLowerCase();\n    \n    // Common job keywords\n    const jobKeywords = ['experience', 'skills', 'manage', 'develop', 'lead', 'project', 'team'];\n    jobKeywords.forEach(keyword => {\n      const matches = (allText.match(new RegExp(keyword, 'g')) || []).length;\n      keywordDensity[keyword] = matches;\n    });\n    \n    // Calculate ATS score (simplified)\n    let score = 70; // Base score\n    \n    if (extraction.personalInfo.email) score += 5;\n    if (extraction.personalInfo.phone) score += 5;\n    if (extraction.skills.length >= 10) score += 10;\n    if (extraction.experience.length >= 2) score += 10;\n    \n    score -= formatIssues.length * 5;\n    \n    return {\n      score: Math.max(0, Math.min(100, score)),\n      recommendations,\n      keywordDensity,\n      formatIssues,\n      structuralOptimizations\n    };\n  }\n\n  // Placeholder methods for job matching (to be implemented)\n  private async extractJobRequirements(jobDescription: string): Promise<any> {\n    // TODO: Implement job requirements extraction\n    return { skills: [], experience: [], education: [] };\n  }\n\n  private analyzeSkillsMatch(resumeSkills: any[], jobSkills: any[]): any {\n    // TODO: Implement skills matching algorithm\n    return {\n      matchedSkills: [],\n      missingSkills: [],\n      skillGapScore: 0\n    };\n  }\n\n  private analyzeExperienceMatch(experience: any[], jobRequirements: any): any {\n    // TODO: Implement experience matching\n    return {\n      yearsMatch: false,\n      industryMatch: false,\n      roleMatch: false,\n      seniorityMatch: false\n    };\n  }\n\n  private analyzeEducationMatch(education: any[], jobRequirements: any): any {\n    // TODO: Implement education matching\n    return {\n      degreeMatch: false,\n      fieldMatch: false\n    };\n  }\n\n  private analyzeKeywords(extraction: FoundryResumeExtraction, jobDescription: string): any {\n    // TODO: Implement keyword analysis\n    return {\n      totalKeywords: 0,\n      matchedKeywords: 0,\n      missedKeywords: [],\n      keywordDensity: 0\n    };\n  }\n\n  private calculateOverallMatchScore(analysis: any): number {\n    // TODO: Implement overall score calculation\n    return 0;\n  }\n\n  private generateMatchRecommendations(analysis: any): any[] {\n    // TODO: Implement recommendation generation\n    return [];\n  }\n\n  /**\n   * Dispose of resources\n   */\n  dispose(): void {\n    this.client = null;\n    this.isInitialized = false;\n    console.log('üßπ Document Intelligence service disposed');\n  }\n}\n\n// Export singleton instance\nexport const foundryDocumentIntelligenceService = new FoundryDocumentIntelligenceService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/errors/foundry-errors.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[253,256],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[253,256],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[399,402],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[399,402],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[901,904],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[901,904],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[979,982],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[979,982],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1013,1016],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1013,1016],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1528,1531],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1528,1531],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1874,1877],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1874,1877],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2080,2083],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2080,2083],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":108,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2738,2741],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2738,2741],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":124,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3196,3199],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3196,3199],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":141,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3621,3624],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3621,3624],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":158,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3968,3971],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3968,3971],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":159,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4000,4003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4000,4003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":165,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4181,4184],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4181,4184],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":172,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":172,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4371,4374],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4371,4374],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":179,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":179,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4590,4593],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4590,4593],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":186,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":186,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4781,4784],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4781,4784],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":193,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":193,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4931,4934],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4931,4934],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":197,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":197,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5052,5055],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5052,5055],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":201,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5177,5180],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5177,5180],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":205,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":205,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5293,5296],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5293,5296],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":209,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":209,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5421,5424],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5421,5424],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":213,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":213,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5540,5543],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5540,5543],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":220,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":220,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5692,5695],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5692,5695],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":24,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Azure AI Foundry Error Classes\n * \n * Provides typed error classes for consistent error handling across the foundry system.\n */\n\nexport class FoundryError extends Error {\n  public readonly code: string;\n  public readonly context?: Record<string, any>;\n  public readonly retryable: boolean;\n\n  constructor(\n    message: string,\n    code: string = 'FOUNDRY_ERROR',\n    context?: Record<string, any>,\n    retryable: boolean = false\n  ) {\n    super(message);\n    this.name = 'FoundryError';\n    this.code = code;\n    this.context = context;\n    this.retryable = retryable;\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      code: this.code,\n      context: this.context,\n      retryable: this.retryable,\n      stack: this.stack\n    };\n  }\n}\n\nexport class FoundryClientError extends FoundryError {\n  public readonly status?: number;\n  public readonly response?: any;\n\n  constructor(\n    message: string,\n    status?: number,\n    response?: any,\n    context?: Record<string, any>\n  ) {\n    const code = status ? `CLIENT_ERROR_${status}` : 'CLIENT_ERROR';\n    const retryable = status ? [408, 429, 500, 502, 503, 504].includes(status) : false;\n    \n    super(message, code, { ...context, status, response }, retryable);\n    this.name = 'FoundryClientError';\n    this.status = status;\n    this.response = response;\n  }\n}\n\nexport class FoundryConfigError extends FoundryError {\n  public readonly configKey?: string;\n\n  constructor(message: string, configKey?: string, context?: Record<string, any>) {\n    super(message, 'CONFIG_ERROR', { ...context, configKey }, false);\n    this.name = 'FoundryConfigError';\n    this.configKey = configKey;\n  }\n}\n\nexport class VoiceError extends Error {\n  public readonly code: string;\n  public readonly category: 'audio' | 'network' | 'session' | 'processing';\n  public readonly context?: Record<string, any>;\n  public readonly retryable: boolean;\n\n  constructor(\n    message: string,\n    category: 'audio' | 'network' | 'session' | 'processing',\n    code: string = 'VOICE_ERROR',\n    context?: Record<string, any>,\n    retryable: boolean = false\n  ) {\n    super(message);\n    this.name = 'VoiceError';\n    this.code = code;\n    this.category = category;\n    this.context = context;\n    this.retryable = retryable;\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      code: this.code,\n      category: this.category,\n      context: this.context,\n      retryable: this.retryable,\n      stack: this.stack\n    };\n  }\n}\n\nexport class VoiceSessionError extends VoiceError {\n  public readonly sessionId?: string;\n\n  constructor(\n    message: string,\n    sessionId?: string,\n    code: string = 'SESSION_ERROR',\n    context?: Record<string, any>,\n    retryable: boolean = false\n  ) {\n    super(message, 'session', code, { ...context, sessionId }, retryable);\n    this.name = 'VoiceSessionError';\n    this.sessionId = sessionId;\n  }\n}\n\nexport class VoiceAudioError extends VoiceError {\n  public readonly audioType: 'input' | 'output' | 'processing';\n\n  constructor(\n    message: string,\n    audioType: 'input' | 'output' | 'processing',\n    code: string = 'AUDIO_ERROR',\n    context?: Record<string, any>\n  ) {\n    super(message, 'audio', code, { ...context, audioType }, false);\n    this.name = 'VoiceAudioError';\n    this.audioType = audioType;\n  }\n}\n\nexport class AgentError extends FoundryError {\n  public readonly agentName?: string;\n  public readonly operation?: string;\n\n  constructor(\n    message: string,\n    agentName?: string,\n    operation?: string,\n    code: string = 'AGENT_ERROR',\n    context?: Record<string, any>,\n    retryable: boolean = true\n  ) {\n    super(message, code, { ...context, agentName, operation }, retryable);\n    this.name = 'AgentError';\n    this.agentName = agentName;\n    this.operation = operation;\n  }\n}\n\n/**\n * Error factory functions\n */\n\nexport const createFoundryClientError = (\n  message: string,\n  status?: number,\n  response?: any,\n  context?: Record<string, any>\n) => new FoundryClientError(message, status, response, context);\n\nexport const createFoundryConfigError = (\n  message: string,\n  configKey?: string,\n  context?: Record<string, any>\n) => new FoundryConfigError(message, configKey, context);\n\nexport const createVoiceSessionError = (\n  message: string,\n  sessionId?: string,\n  code?: string,\n  context?: Record<string, any>\n) => new VoiceSessionError(message, sessionId, code, context);\n\nexport const createVoiceAudioError = (\n  message: string,\n  audioType: 'input' | 'output' | 'processing',\n  code?: string,\n  context?: Record<string, any>\n) => new VoiceAudioError(message, audioType, code, context);\n\nexport const createAgentError = (\n  message: string,\n  agentName?: string,\n  operation?: string,\n  context?: Record<string, any>\n) => new AgentError(message, agentName, operation, 'AGENT_ERROR', context);\n\n/**\n * Error type guards\n */\n\nexport const isFoundryError = (error: any): error is FoundryError => {\n  return error instanceof FoundryError;\n};\n\nexport const isFoundryClientError = (error: any): error is FoundryClientError => {\n  return error instanceof FoundryClientError;\n};\n\nexport const isVoiceError = (error: any): error is VoiceError => {\n  return error instanceof VoiceError;\n};\n\nexport const isVoiceSessionError = (error: any): error is VoiceSessionError => {\n  return error instanceof VoiceSessionError;\n};\n\nexport const isVoiceAudioError = (error: any): error is VoiceAudioError => {\n  return error instanceof VoiceAudioError;\n};\n\nexport const isAgentError = (error: any): error is AgentError => {\n  return error instanceof AgentError;\n};\n\n/**\n * Check if error is retryable\n */\nexport const isRetryableError = (error: any): boolean => {\n  if (isFoundryError(error) || isVoiceError(error)) {\n    return error.retryable;\n  }\n  return false;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":214,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":214,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4677,4680],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4677,4680],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign object to a variable before exporting as module default","line":258,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":264,"endColumn":3}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Azure AI Foundry Integration Index\n * \n * Main entry point for Azure AI Foundry functionality in PrepBettr.\n * Exports all configuration, client, types, and utility functions.\n */\n\n// Configuration exports\nexport {\n  getFoundryConfig,\n  clearFoundryConfigCache,\n  validateFoundryConfig,\n  getModelConfig,\n  getDefaultModel,\n  getDefaultModelConfigurations,\n  getDefaultConnectionSettings,\n  getEnvironmentDefaults,\n  getFoundryConfigForEnvironment,\n  type FoundryConfig,\n  type ModelConfig,\n  type RetryPolicy,\n  type ConnectionSettings\n} from './config/foundry-config';\n\n// Client exports\nexport {\n  FoundryClientBase,\n  type FoundryClientOptions,\n  type FoundryRequestOptions,\n  type FoundryResponse,\n  type AIProjectClient,\n  type AgentsClient\n} from './clients/foundry-client';\n\n// Migration wrapper exports\nexport {\n  MigrationOpenAIClient,\n  migrationOpenAIClient,\n  type ChatCompletionMessage,\n  type ChatCompletionCreateParams\n} from './clients/migration-wrapper';\n\n// Model manager exports\nexport {\n  FoundryModelManager,\n  type ModelUsageEntry,\n  type ModelPerformanceMetrics,\n  type ModelSelectionCriteria\n} from './managers/model-manager';\n\n// Type definitions exports\nexport type {\n  FoundryResourceId,\n  FoundryProject,\n  ModelDeployment,\n  CompletionRequest,\n  CompletionResponse,\n  CompletionChoice,\n  ChatCompletionRequest,\n  ChatMessage,\n  ChatFunction,\n  ChatCompletionResponse,\n  ChatCompletionChoice,\n  TokenUsage,\n  FoundryAgent,\n  AgentCapability,\n  AgentTool,\n  AgentConfiguration,\n  AgentSession,\n  AgentMessage,\n  ToolCall,\n  EvaluationMetrics,\n  EvaluationRun,\n  EvaluationResult,\n  RateLimitInfo,\n  UsageStatistics,\n  HealthStatus,\n  StreamEvent,\n  StreamingCompletionChunk,\n  PaginatedResponse,\n  OperationStatus,\n  ApiVersionInfo,\n  RequestOptions\n} from './types/foundry-types';\n\n// Agent system exports\nexport {\n  BaseAgent,\n  generateQuestionId,\n  calculateInterviewProgress,\n  getEstimatedRemainingTime\n} from './agents/base-agent';\n\nexport type {\n  Question,\n  InterviewContext,\n  SessionState,\n  AgentMetadata\n} from './types/agent-types';\n\nexport {\n  TechnicalInterviewer\n} from './agents/technical-interviewer';\n\nexport {\n  BehavioralInterviewer\n} from './agents/behavioral-interviewer';\n\nexport {\n  IndustryExpert\n} from './agents/industry-expert';\n\nexport {\n  AgentFactory,\n  type AgentType,\n  type AgentFactoryConfig\n} from './agents/agent-factory';\n\n// Voice system exports\nexport {\n  VoiceSession\n} from './voice/voice-session';\n\nexport {\n  VoiceLiveClient,\n  getVoiceLiveClient,\n  type VoiceSessionOptions,\n  type AudioFrame,\n  type VoiceWebSocketMessage\n} from './voice/voice-live-client';\n\nexport {\n  voiceTelemetry,\n  VoiceTelemetry\n} from './voice/voice-telemetry';\n\nexport * from './voice/types';\n\n// Workflow system exports\nexport {\n  InterviewWorkflow\n} from './workflows/interview-workflow';\n\nexport * from './workflows/workflow-types';\n\n// Environment configuration exports\nexport * from './config/environment';\n\n// Error handling exports\nexport {\n  FoundryError,\n  FoundryClientError,\n  FoundryConfigError,\n  VoiceError,\n  VoiceSessionError,\n  VoiceAudioError,\n  AgentError,\n  createFoundryClientError,\n  createFoundryConfigError,\n  createVoiceSessionError,\n  createVoiceAudioError,\n  createAgentError,\n  isFoundryError,\n  isFoundryClientError,\n  isVoiceError,\n  isVoiceSessionError,\n  isVoiceAudioError,\n  isAgentError,\n  isRetryableError\n} from './errors/foundry-errors';\n\n/**\n * Convenience function to create a ready-to-use model manager\n */\nexport async function createFoundryModelManager() {\n  const { FoundryModelManager } = await import('./managers/model-manager');\n  const manager = new FoundryModelManager();\n  await manager.init();\n  return manager;\n}\n\n/**\n * Convenience function to create a ready-to-use foundry client\n */\nexport async function createFoundryClient() {\n  const { FoundryClientBase } = await import('./clients/foundry-client');\n  const client = new FoundryClientBase();\n  await client.init();\n  return client;\n}\n\n/**\n * Quick configuration check for Azure AI Foundry setup\n */\nexport async function checkFoundrySetup(): Promise<{\n  configured: boolean;\n  hasEndpoint: boolean;\n  hasApiKey: boolean;\n  modelCount: number;\n  errors: string[];\n}> {\n  try {\n    const { getFoundryConfig, validateFoundryConfig } = await import('./config/foundry-config');\n    const config = await getFoundryConfig();\n    const validation = validateFoundryConfig(config);\n    \n    return {\n      configured: validation.isValid,\n      hasEndpoint: !!config.endpoint,\n      hasApiKey: !!config.apiKey,\n      modelCount: Object.keys(config.models).length,\n      errors: validation.errors\n    };\n  } catch (error: any) {\n    return {\n      configured: false,\n      hasEndpoint: false,\n      hasApiKey: false,\n      modelCount: 0,\n      errors: [error.message || 'Configuration loading failed']\n    };\n  }\n}\n\n/**\n * Get recommended Azure AI Foundry environment variables\n */\nexport function getRequiredEnvironmentVariables(): string[] {\n  return [\n    'AZURE_FOUNDRY_ENDPOINT',\n    'AZURE_FOUNDRY_API_KEY',\n    'AZURE_FOUNDRY_PROJECT_ID',\n    'AZURE_FOUNDRY_RESOURCE_GROUP',\n    'AZURE_FOUNDRY_REGION'\n  ];\n}\n\n/**\n * Get optional Azure AI Foundry Document Intelligence environment variables\n */\nexport function getDocumentIntelligenceEnvironmentVariables(): string[] {\n  return [\n    'AZURE_FOUNDRY_DOCINT_ENDPOINT',\n    'AZURE_FOUNDRY_DOCINT_API_KEY',\n    'AZURE_FOUNDRY_DOCINT_PROJECT_ID'\n  ];\n}\n\n/**\n * Check if Azure AI Foundry is properly configured\n */\nexport function isFoundryConfigured(): boolean {\n  const requiredVars = getRequiredEnvironmentVariables();\n  return requiredVars.some(varName => !!process.env[varName]);\n}\n\n// Default export with main utilities\nexport default {\n  createFoundryModelManager,\n  createFoundryClient,\n  checkFoundrySetup,\n  getRequiredEnvironmentVariables,\n  isFoundryConfigured\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/managers/model-manager.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getFoundryConfig' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FoundryError' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":385,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":385,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10921,10924],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10921,10924],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Azure AI Foundry Model Manager\n * \n * Handles model configurations, deployments, cost tracking, and model selection logic.\n * Provides utilities for managing multiple models and their configurations.\n */\n\nimport {\n  getFoundryConfig,\n  getModelConfig,\n  getDefaultModel,\n  type ModelConfig\n} from '../config/foundry-config';\nimport { FoundryClientBase } from '../clients/foundry-client';\nimport type {\n  ModelDeployment,\n  UsageStatistics,\n  TokenUsage,\n  FoundryError\n} from '../types/foundry-types';\n\n/**\n * Model usage tracking entry\n */\nexport interface ModelUsageEntry {\n  modelName: string;\n  timestamp: string;\n  promptTokens: number;\n  completionTokens: number;\n  totalTokens: number;\n  cost: number; // in USD\n  latency: number; // in milliseconds\n  success: boolean;\n  errorCode?: string;\n}\n\n/**\n * Model performance metrics\n */\nexport interface ModelPerformanceMetrics {\n  averageLatency: number;\n  successRate: number;\n  totalCost: number;\n  totalTokens: number;\n  requestCount: number;\n  costPerToken: number;\n  tokensPerSecond: number;\n}\n\n/**\n * Model selection criteria\n */\nexport interface ModelSelectionCriteria {\n  maxCost?: number; // maximum cost per 1K tokens\n  maxLatency?: number; // maximum acceptable latency in ms\n  requiredCapabilities?: string[];\n  preferredModel?: string;\n  fallbackModels?: string[];\n}\n\n/**\n * FoundryModelManager class for managing model configurations and usage\n */\nexport class FoundryModelManager extends FoundryClientBase {\n  private usageHistory: ModelUsageEntry[] = [];\n  private deployments: Map<string, ModelDeployment> = new Map();\n\n  constructor() {\n    super();\n  }\n\n  /**\n   * Get all available model configurations\n   */\n  getAvailableModels(): Record<string, ModelConfig> {\n    return this.config?.models || {};\n  }\n\n  /**\n   * Get model configuration by name with fallback\n   */\n  getModel(modelName: string): ModelConfig | null {\n    return getModelConfig(modelName);\n  }\n\n  /**\n   * Get the default model configuration\n   */\n  getDefaultModelConfig(): ModelConfig {\n    return getDefaultModel();\n  }\n\n  /**\n   * Select best model based on criteria\n   */\n  selectModel(criteria: ModelSelectionCriteria = {}): ModelConfig {\n    const models = this.getAvailableModels();\n    const modelList = Object.values(models);\n\n    // Start with preferred model if specified\n    if (criteria.preferredModel && models[criteria.preferredModel]) {\n      const preferred = models[criteria.preferredModel];\n      if (this.modelMeetsCriteria(preferred, criteria)) {\n        return preferred;\n      }\n    }\n\n    // Try fallback models\n    if (criteria.fallbackModels) {\n      for (const fallbackName of criteria.fallbackModels) {\n        const fallback = models[fallbackName];\n        if (fallback && this.modelMeetsCriteria(fallback, criteria)) {\n          return fallback;\n        }\n      }\n    }\n\n    // Filter models by criteria\n    let candidates = modelList.filter(model => this.modelMeetsCriteria(model, criteria));\n\n    // Sort by cost (ascending) and capabilities (descending)\n    candidates = candidates.sort((a, b) => {\n      // Primary sort: cost\n      const costDiff = a.costPerToken - b.costPerToken;\n      if (Math.abs(costDiff) > 0.001) return costDiff;\n      \n      // Secondary sort: capabilities (more is better)\n      return b.capabilities.length - a.capabilities.length;\n    });\n\n    // Return best candidate or default model\n    return candidates[0] || this.getDefaultModelConfig();\n  }\n\n  /**\n   * Check if model meets selection criteria\n   */\n  private modelMeetsCriteria(model: ModelConfig, criteria: ModelSelectionCriteria): boolean {\n    // Check cost constraint\n    if (criteria.maxCost !== undefined && model.costPerToken > criteria.maxCost) {\n      return false;\n    }\n\n    // Check capabilities\n    if (criteria.requiredCapabilities) {\n      const hasAllCapabilities = criteria.requiredCapabilities.every(\n        capability => model.capabilities.includes(capability)\n      );\n      if (!hasAllCapabilities) {\n        return false;\n      }\n    }\n\n    // Note: maxLatency check would require historical performance data\n    // This could be implemented by tracking actual response times\n\n    return true;\n  }\n\n  /**\n   * Track usage for a model request\n   */\n  trackUsage({\n    modelName,\n    tokenUsage,\n    latency,\n    success,\n    errorCode\n  }: {\n    modelName: string;\n    tokenUsage: TokenUsage;\n    latency: number;\n    success: boolean;\n    errorCode?: string;\n  }): void {\n    const model = this.getModel(modelName);\n    if (!model) {\n      console.warn(`[ModelManager] Unknown model for usage tracking: ${modelName}`);\n      return;\n    }\n\n    const cost = (tokenUsage.total_tokens / 1000) * model.costPerToken;\n    \n    const entry: ModelUsageEntry = {\n      modelName,\n      timestamp: new Date().toISOString(),\n      promptTokens: tokenUsage.prompt_tokens,\n      completionTokens: tokenUsage.completion_tokens,\n      totalTokens: tokenUsage.total_tokens,\n      cost,\n      latency,\n      success,\n      errorCode\n    };\n\n    this.usageHistory.push(entry);\n    \n    // Keep only last 1000 entries to prevent memory bloat\n    if (this.usageHistory.length > 1000) {\n      this.usageHistory = this.usageHistory.slice(-1000);\n    }\n  }\n\n  /**\n   * Get performance metrics for a specific model\n   */\n  getModelMetrics(modelName: string, timeRangeHours = 24): ModelPerformanceMetrics {\n    const cutoff = Date.now() - (timeRangeHours * 60 * 60 * 1000);\n    const entries = this.usageHistory.filter(\n      entry => entry.modelName === modelName && \n               new Date(entry.timestamp).getTime() >= cutoff\n    );\n\n    if (entries.length === 0) {\n      return {\n        averageLatency: 0,\n        successRate: 0,\n        totalCost: 0,\n        totalTokens: 0,\n        requestCount: 0,\n        costPerToken: 0,\n        tokensPerSecond: 0\n      };\n    }\n\n    const totalLatency = entries.reduce((sum, e) => sum + e.latency, 0);\n    const successCount = entries.filter(e => e.success).length;\n    const totalCost = entries.reduce((sum, e) => sum + e.cost, 0);\n    const totalTokens = entries.reduce((sum, e) => sum + e.totalTokens, 0);\n    const totalTime = totalLatency / 1000; // convert to seconds\n\n    return {\n      averageLatency: totalLatency / entries.length,\n      successRate: successCount / entries.length,\n      totalCost,\n      totalTokens,\n      requestCount: entries.length,\n      costPerToken: totalTokens > 0 ? (totalCost / totalTokens) * 1000 : 0, // per 1K tokens\n      tokensPerSecond: totalTime > 0 ? totalTokens / totalTime : 0\n    };\n  }\n\n  /**\n   * Get usage statistics for all models\n   */\n  getUsageStatistics(timeRangeHours = 24): UsageStatistics {\n    const cutoff = Date.now() - (timeRangeHours * 60 * 60 * 1000);\n    const entries = this.usageHistory.filter(\n      entry => new Date(entry.timestamp).getTime() >= cutoff\n    );\n\n    const breakdown: UsageStatistics['breakdown'] = {};\n    const modelStats = new Map<string, { requests: number; tokens: number; errors: number; latency: number }>();\n\n    entries.forEach(entry => {\n      const stats = modelStats.get(entry.modelName) || { requests: 0, tokens: 0, errors: 0, latency: 0 };\n      stats.requests += 1;\n      stats.tokens += entry.totalTokens;\n      stats.errors += entry.success ? 0 : 1;\n      stats.latency += entry.latency;\n      modelStats.set(entry.modelName, stats);\n    });\n\n    modelStats.forEach((stats, modelName) => {\n      breakdown[modelName] = {\n        requests: stats.requests,\n        tokens: stats.tokens,\n        errors: stats.errors\n      };\n    });\n\n    const totalRequests = entries.length;\n    const totalTokens = entries.reduce((sum, e) => sum + e.totalTokens, 0);\n    const totalErrors = entries.filter(e => !e.success).length;\n    const totalLatency = entries.reduce((sum, e) => sum + e.latency, 0);\n\n    return {\n      totalRequests,\n      totalTokens,\n      averageLatency: totalRequests > 0 ? totalLatency / totalRequests : 0,\n      errorRate: totalRequests > 0 ? totalErrors / totalRequests : 0,\n      timeRange: {\n        start: new Date(cutoff).toISOString(),\n        end: new Date().toISOString()\n      },\n      breakdown\n    };\n  }\n\n  /**\n   * Get cost estimate for a request\n   */\n  estimateCost(modelName: string, estimatedTokens: number): number {\n    const model = this.getModel(modelName);\n    if (!model) {\n      console.warn(`[ModelManager] Unknown model for cost estimation: ${modelName}`);\n      return 0;\n    }\n\n    return (estimatedTokens / 1000) * model.costPerToken;\n  }\n\n  /**\n   * List models sorted by cost efficiency\n   */\n  getModelsByCostEfficiency(): ModelConfig[] {\n    const models = Object.values(this.getAvailableModels());\n    return models.sort((a, b) => a.costPerToken - b.costPerToken);\n  }\n\n  /**\n   * Get models by capability\n   */\n  getModelsByCapability(capability: string): ModelConfig[] {\n    const models = Object.values(this.getAvailableModels());\n    return models.filter(model => model.capabilities.includes(capability));\n  }\n\n  /**\n   * Clear usage history (for testing or privacy)\n   */\n  clearUsageHistory(): void {\n    this.usageHistory = [];\n    console.log('[ModelManager] Usage history cleared');\n  }\n\n  /**\n   * Export usage history for external analysis\n   */\n  exportUsageHistory(): ModelUsageEntry[] {\n    return [...this.usageHistory]; // Return copy\n  }\n\n  /**\n   * Get recommended model for specific use case\n   */\n  getRecommendedModel(useCase: 'interview' | 'code-generation' | 'reasoning' | 'lightweight'): ModelConfig {\n    const useCaseMap: Record<string, ModelSelectionCriteria> = {\n      interview: {\n        requiredCapabilities: ['text-generation', 'reasoning'],\n        maxCost: 0.01, // Max $10 per 1K tokens\n        preferredModel: 'gpt-4o'\n      },\n      'code-generation': {\n        requiredCapabilities: ['code-generation', 'reasoning'],\n        preferredModel: 'gpt-4-turbo'\n      },\n      reasoning: {\n        requiredCapabilities: ['reasoning'],\n        preferredModel: 'gpt-4o'\n      },\n      lightweight: {\n        maxCost: 0.002, // Max $2 per 1K tokens\n        preferredModel: 'phi-4',\n        fallbackModels: ['gpt-4o']\n      }\n    };\n\n    const criteria = useCaseMap[useCase] || {};\n    return this.selectModel(criteria);\n  }\n\n  /**\n   * Health check for model availability\n   */\n  async checkModelHealth(modelName: string): Promise<{ available: boolean; latency?: number; error?: string }> {\n    const model = this.getModel(modelName);\n    if (!model) {\n      return { available: false, error: 'Model not found in configuration' };\n    }\n\n    try {\n      const start = Date.now();\n      // Simple health check with minimal prompt\n      await this.request('/models/health-check', {\n        method: 'POST',\n        body: {\n          model: model.deploymentName,\n          prompt: 'test',\n          max_tokens: 1\n        }\n      });\n      const latency = Date.now() - start;\n      return { available: true, latency };\n    } catch (error: any) {\n      return { \n        available: false, \n        error: error.message || 'Health check failed' \n      };\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/types/agent-types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":87,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2084,2087],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2084,2087],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Agent Types for Azure AI Foundry\n * \n * Unified type definitions for interview agents and questions\n */\n\n// ===== CORE INTERFACES =====\n\nexport interface Question {\n  id: string;\n  text: string;\n  type: 'technical' | 'behavioral' | 'industry' | 'general';\n  category?: 'technical' | 'behavioral' | 'industry' | 'general'; // alias for compatibility\n  difficulty: 'easy' | 'medium' | 'hard';\n  expectedDuration?: number; // in seconds\n  expectedAnswer?: string;\n  followUpQuestions?: string[];\n  tags?: string[];\n  metadata?: {\n    skill?: string;\n    topic?: string;\n    scenario?: string;\n    category?: string;\n    keywords?: string[];\n    estimatedTime?: number;\n  };\n}\n\nexport interface CandidateProfile {\n  name?: string;\n  experience: string;\n  skills: string[];\n  targetRole: string;\n  industry: string;\n  resumeContent?: string;\n  previousRoles?: string[];\n  yearsExperience?: number;\n  education?: string;\n  certifications?: string[];\n}\n\nexport interface CompanyInfo {\n  name?: string;\n  industry?: string;\n  size?: string;\n  description?: string;\n}\n\nexport interface SessionHistory {\n  previousQuestions: Question[];\n  previousAnswers?: Array<{\n    questionId: string;\n    answer: string;\n    timestamp: number;\n  }>;\n}\n\nexport interface InterviewContext {\n  sessionId: string;\n  candidateName: string;\n  role: string;\n  experienceLevel: 'entry' | 'mid' | 'senior' | 'executive';\n  industry?: string;\n  resumeContent?: string;\n  candidateProfile: CandidateProfile;\n  jobRole?: string;\n  companyInfo?: CompanyInfo;\n  sessionHistory?: SessionHistory;\n  interviewConfig: {\n    duration: number; // total interview duration in minutes\n    focusAreas: string[];\n    difficulty: 'entry' | 'mid' | 'senior' | 'expert';\n    includeFollowUps: boolean;\n  };\n  previousQuestions: Question[];\n  previousAnswers: Array<{\n    questionId: string;\n    answer: string;\n    timestamp: number;\n  }>;\n  currentPhase: 'technical' | 'behavioral' | 'industry' | 'wrap-up';\n  responses?: {\n    questionId: string;\n    response: string;\n    timestamp: Date;\n  }[];\n  metadata: Record<string, any>;\n}\n\nexport interface SessionState {\n  sessionId: string;\n  currentAgent: string;\n  phase: 'technical' | 'behavioral' | 'industry' | 'completed';\n  startTime: Date;\n  lastActivity: Date;\n  context: InterviewContext;\n  agentQueue: string[];\n  completedAgents: string[];\n  metadata: {\n    totalQuestions: number;\n    averageResponseTime: number;\n    completionPercentage: number;\n  };\n}\n\nexport interface AgentMetadata {\n  id: string;\n  name: string;\n  description: string;\n  version: string;\n  supportedPhases: string[];\n  capabilities: string[];\n  modelRequirements: {\n    minimumTokens: number;\n    preferredModels: string[];\n  };\n  tags: string[];\n  // Legacy compatibility fields\n  specialty?: string;\n  modelPreference?: string;\n  maxQuestions?: number;\n  averageDuration?: number; // in minutes\n}\n\nexport interface AgentConfig {\n  agentId: string;\n  model: string;\n  systemInstructions: string;\n  temperature: number;\n  maxTokens: number;\n}\n\nexport interface FoundryAgent {\n  id: string;\n  name: string;\n  type: 'technical' | 'behavioral' | 'industry' | 'general';\n  metadata: AgentMetadata;\n  generateQuestions(context: InterviewContext): Promise<Question[]>;\n  processResponse(response: string, context: InterviewContext): Promise<string>;\n  isComplete(context: InterviewContext): boolean;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/types/foundry-types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":146,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3094,3097],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3094,3097],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":198,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":198,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4073,4076],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4073,4076],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":224,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":224,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4571,4574],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4571,4574],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":252,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":252,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5062,5065],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5062,5065],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":342,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":342,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6706,6709],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6706,6709],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":356,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":356,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6928,6931],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6928,6931],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Azure AI Foundry TypeScript Type Definitions\n * \n * Comprehensive type definitions for Azure AI Foundry services including\n * models, agents, projects, and inference capabilities.\n */\n\n// ====================\n// Core Types\n// ====================\n\n/**\n * Base Foundry resource identifier\n */\nexport interface FoundryResourceId {\n  subscriptionId: string;\n  resourceGroupName: string;\n  hubName: string;\n  projectName?: string;\n}\n\n/**\n * Foundry project metadata\n */\nexport interface FoundryProject {\n  id: string;\n  name: string;\n  description?: string;\n  resourceGroup: string;\n  location: string;\n  tags?: Record<string, string>;\n  createdAt: string;\n  modifiedAt: string;\n  status: 'Active' | 'Creating' | 'Deleting' | 'Failed' | 'Updating';\n}\n\n/**\n * Foundry model deployment information\n */\nexport interface ModelDeployment {\n  id: string;\n  name: string;\n  modelName: string;\n  modelVersion: string;\n  deploymentStatus: 'Creating' | 'Succeeded' | 'Failed' | 'Deleting';\n  endpoint?: string;\n  apiKey?: string;\n  properties: {\n    scaleSettings?: {\n      scaleType: 'Standard' | 'Manual';\n      capacity?: number;\n      maxCapacity?: number;\n    };\n    versionUpgradeOption?: 'OnceNewDefaultVersionAvailable' | 'OnceCurrentVersionExpired' | 'NoAutoUpgrade';\n  };\n}\n\n// ====================\n// Model Inference Types\n// ====================\n\n/**\n * Text completion request parameters\n */\nexport interface CompletionRequest {\n  model: string;\n  prompt: string;\n  max_tokens?: number;\n  temperature?: number;\n  top_p?: number;\n  frequency_penalty?: number;\n  presence_penalty?: number;\n  stop?: string | string[];\n  stream?: boolean;\n  logit_bias?: Record<string, number>;\n  user?: string;\n}\n\n/**\n * Text completion response\n */\nexport interface CompletionResponse {\n  id: string;\n  object: 'text_completion';\n  created: number;\n  model: string;\n  choices: CompletionChoice[];\n  usage: TokenUsage;\n}\n\n/**\n * Individual completion choice\n */\nexport interface CompletionChoice {\n  text: string;\n  index: number;\n  logprobs?: {\n    tokens: string[];\n    token_logprobs: (number | null)[];\n    top_logprobs: (Record<string, number> | null)[];\n    text_offset: number[];\n  };\n  finish_reason: 'stop' | 'length' | 'content_filter' | null;\n}\n\n/**\n * Chat completion request (OpenAI format)\n */\nexport interface ChatCompletionRequest {\n  model: string;\n  messages: ChatMessage[];\n  temperature?: number;\n  top_p?: number;\n  max_tokens?: number;\n  stream?: boolean;\n  stop?: string | string[];\n  presence_penalty?: number;\n  frequency_penalty?: number;\n  logit_bias?: Record<string, number>;\n  user?: string;\n  functions?: ChatFunction[];\n  function_call?: 'none' | 'auto' | { name: string };\n}\n\n/**\n * Chat message structure\n */\nexport interface ChatMessage {\n  role: 'system' | 'user' | 'assistant' | 'function';\n  content: string;\n  name?: string;\n  function_call?: {\n    name: string;\n    arguments: string;\n  };\n}\n\n/**\n * Chat function definition\n */\nexport interface ChatFunction {\n  name: string;\n  description?: string;\n  parameters: {\n    type: 'object';\n    properties: Record<string, any>;\n    required?: string[];\n  };\n}\n\n/**\n * Chat completion response\n */\nexport interface ChatCompletionResponse {\n  id: string;\n  object: 'chat.completion';\n  created: number;\n  model: string;\n  choices: ChatCompletionChoice[];\n  usage: TokenUsage;\n}\n\n/**\n * Chat completion choice\n */\nexport interface ChatCompletionChoice {\n  index: number;\n  message: ChatMessage;\n  finish_reason: 'stop' | 'length' | 'function_call' | 'content_filter' | null;\n}\n\n/**\n * Token usage information\n */\nexport interface TokenUsage {\n  prompt_tokens: number;\n  completion_tokens: number;\n  total_tokens: number;\n}\n\n// ====================\n// Agent Framework Types\n// ====================\n\n/**\n * Foundry agent definition\n */\nexport interface FoundryAgent {\n  id: string;\n  name: string;\n  description?: string;\n  version: string;\n  model: string;\n  systemPrompt?: string;\n  tools?: AgentTool[];\n  capabilities: AgentCapability[];\n  configuration: AgentConfiguration;\n  metadata?: Record<string, any>;\n  createdAt: string;\n  modifiedAt: string;\n  status: 'Active' | 'Draft' | 'Archived';\n}\n\n/**\n * Agent capabilities\n */\nexport type AgentCapability = \n  | 'text-generation'\n  | 'code-generation' \n  | 'reasoning'\n  | 'function-calling'\n  | 'retrieval'\n  | 'multimodal'\n  | 'streaming';\n\n/**\n * Agent tool definition\n */\nexport interface AgentTool {\n  type: 'function' | 'retrieval' | 'code_interpreter';\n  function?: {\n    name: string;\n    description?: string;\n    parameters: Record<string, any>;\n  };\n}\n\n/**\n * Agent configuration settings\n */\nexport interface AgentConfiguration {\n  maxTokens: number;\n  temperature: number;\n  topP: number;\n  frequencyPenalty: number;\n  presencePenalty: number;\n  timeout: number; // milliseconds\n  retryConfig: {\n    maxRetries: number;\n    baseDelay: number;\n  };\n}\n\n/**\n * Agent conversation session\n */\nexport interface AgentSession {\n  id: string;\n  agentId: string;\n  userId?: string;\n  messages: AgentMessage[];\n  context?: Record<string, any>;\n  createdAt: string;\n  lastActivityAt: string;\n  status: 'Active' | 'Completed' | 'Failed' | 'Timeout';\n}\n\n/**\n * Agent message in a conversation\n */\nexport interface AgentMessage {\n  id: string;\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  timestamp: string;\n  metadata?: {\n    tokens?: number;\n    latency?: number;\n    model?: string;\n    toolCalls?: ToolCall[];\n  };\n}\n\n/**\n * Tool call within agent message\n */\nexport interface ToolCall {\n  id: string;\n  type: 'function';\n  function: {\n    name: string;\n    arguments: string;\n    result?: string;\n  };\n}\n\n// ====================\n// Evaluation Types\n// ====================\n\n/**\n * Model evaluation metrics\n */\nexport interface EvaluationMetrics {\n  accuracy?: number;\n  precision?: number;\n  recall?: number;\n  f1Score?: number;\n  bleuScore?: number;\n  rougeScore?: {\n    rouge1: number;\n    rouge2: number;\n    rougeL: number;\n  };\n  perplexity?: number;\n  latency?: {\n    mean: number;\n    p95: number;\n    p99: number;\n  };\n  throughput?: number; // tokens per second\n}\n\n/**\n * Evaluation run configuration\n */\nexport interface EvaluationRun {\n  id: string;\n  name: string;\n  modelName: string;\n  datasetId: string;\n  metrics: EvaluationMetrics;\n  parameters: {\n    temperature: number;\n    maxTokens: number;\n    topP: number;\n  };\n  status: 'Running' | 'Completed' | 'Failed' | 'Cancelled';\n  createdAt: string;\n  completedAt?: string;\n  results?: EvaluationResult[];\n}\n\n/**\n * Individual evaluation result\n */\nexport interface EvaluationResult {\n  input: string;\n  expectedOutput: string;\n  actualOutput: string;\n  score: number;\n  metadata?: Record<string, any>;\n}\n\n// ====================\n// Error Types\n// ====================\n\n/**\n * Foundry API error response\n */\nexport interface FoundryError {\n  error: {\n    code: string;\n    message: string;\n    details?: Record<string, any>;\n    innererror?: {\n      code: string;\n      innererror?: FoundryError['error']['innererror'];\n    };\n  };\n}\n\n/**\n * Rate limiting information\n */\nexport interface RateLimitInfo {\n  remainingRequests: number;\n  remainingTokens: number;\n  resetTimeRequests?: string;\n  resetTimeTokens?: string;\n}\n\n// ====================\n// Monitoring Types\n// ====================\n\n/**\n * Model usage statistics\n */\nexport interface UsageStatistics {\n  totalRequests: number;\n  totalTokens: number;\n  averageLatency: number;\n  errorRate: number;\n  timeRange: {\n    start: string;\n    end: string;\n  };\n  breakdown: {\n    [model: string]: {\n      requests: number;\n      tokens: number;\n      errors: number;\n    };\n  };\n}\n\n/**\n * Health check status\n */\nexport interface HealthStatus {\n  status: 'healthy' | 'degraded' | 'unhealthy';\n  checks: {\n    [service: string]: {\n      status: 'pass' | 'fail' | 'warn';\n      responseTime?: number;\n      error?: string;\n    };\n  };\n  timestamp: string;\n}\n\n// ====================\n// Streaming Types\n// ====================\n\n/**\n * Server-sent event for streaming responses\n */\nexport interface StreamEvent {\n  id?: string;\n  event?: string;\n  data: string;\n  retry?: number;\n}\n\n/**\n * Streaming completion chunk\n */\nexport interface StreamingCompletionChunk {\n  id: string;\n  object: 'text_completion.chunk' | 'chat.completion.chunk';\n  created: number;\n  model: string;\n  choices: Array<{\n    index: number;\n    delta: {\n      content?: string;\n      role?: string;\n      function_call?: {\n        name?: string;\n        arguments?: string;\n      };\n    };\n    finish_reason?: 'stop' | 'length' | 'function_call' | 'content_filter' | null;\n  }>;\n}\n\n// ====================\n// Utility Types\n// ====================\n\n/**\n * Paginated response wrapper\n */\nexport interface PaginatedResponse<T> {\n  data: T[];\n  nextLink?: string;\n  count?: number;\n}\n\n/**\n * Foundry operation status\n */\nexport interface OperationStatus {\n  id: string;\n  status: 'NotStarted' | 'Running' | 'Succeeded' | 'Failed' | 'Cancelled';\n  createdDateTime: string;\n  lastActionDateTime?: string;\n  resourceLocation?: string;\n  percentComplete?: number;\n  error?: FoundryError['error'];\n}\n\n/**\n * API version information\n */\nexport interface ApiVersionInfo {\n  version: string;\n  preview?: boolean;\n  deprecated?: boolean;\n  supportedUntil?: string;\n}\n\n// ====================\n// Configuration Types\n// ====================\n\n/**\n * Foundry SDK configuration options\n */\nexport interface FoundryClientOptions {\n  endpoint: string;\n  apiKey: string;\n  projectId?: string;\n  apiVersion?: string;\n  timeout?: number;\n  retries?: number;\n  userAgent?: string;\n  defaultHeaders?: Record<string, string>;\n}\n\n/**\n * Request options for API calls\n */\nexport interface RequestOptions {\n  timeout?: number;\n  retries?: number;\n  headers?: Record<string, string>;\n  signal?: AbortSignal;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/types/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1132,1135],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1132,1135],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1322,1325],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1322,1325],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1521,1524],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1521,1524],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":102,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2095,2098],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2095,2098],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":113,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2332,2335],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2332,2335],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2482,2485],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2482,2485],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":136,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2731,2734],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2731,2734],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":151,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3034,3037],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3034,3037],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":160,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":160,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3192,3195],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3192,3195],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":192,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":192,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3832,3835],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3832,3835],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Azure AI Foundry Type Definitions\n * \n * This module exports TypeScript type definitions for Azure AI Foundry services,\n * including custom types for PrepBettr-specific use cases and re-exports from\n * the Azure AI SDK packages.\n */\n\n// Re-export types from Azure AI Projects SDK\nexport type {\n  AIProjectClient,\n} from '@azure/ai-projects';\n\nexport type {\n  AgentsClient,\n} from '@azure/ai-agents';\n\n// Re-export authentication types\nexport type {\n  AzureKeyCredential,\n  TokenCredential,\n} from '@azure/core-auth';\n\n// Re-export common Azure types\nexport type {\n  DefaultAzureCredential,\n} from '@azure/identity';\n\n/**\n * Configuration interface for Azure AI Foundry\n */\nexport interface FoundryConfig {\n  endpoint: string;\n  apiKey: string;\n  projectId: string;\n  resourceGroup: string;\n  region?: string;\n  deploymentName?: string;\n}\n\n/**\n * Azure AI Foundry Chat Completion Request\n * (Custom type for PrepBettr-specific use cases)\n */\nexport interface FoundryChatRequest {\n  messages: FoundryChatMessage[];\n  model?: string;\n  temperature?: number;\n  maxTokens?: number;\n  stream?: boolean;\n  metadata?: Record<string, any>;\n}\n\n/**\n * Chat message interface for Azure AI Foundry\n */\nexport interface FoundryChatMessage {\n  role: 'system' | 'user' | 'assistant';\n  content: string;\n  metadata?: Record<string, any>;\n}\n\n/**\n * Azure AI Foundry Chat Completion Response\n */\nexport interface FoundryChatResponse {\n  id: string;\n  choices: FoundryChatChoice[];\n  usage?: FoundryUsage;\n  metadata?: Record<string, any>;\n  created: number;\n}\n\n/**\n * Chat completion choice\n */\nexport interface FoundryChatChoice {\n  index: number;\n  message: FoundryChatMessage;\n  finishReason: 'stop' | 'length' | 'content_filter' | null;\n}\n\n/**\n * Token usage information\n */\nexport interface FoundryUsage {\n  promptTokens: number;\n  completionTokens: number;\n  totalTokens: number;\n}\n\n/**\n * Azure AI Agent Definition\n */\nexport interface FoundryAgent {\n  id: string;\n  name: string;\n  description?: string;\n  model: string;\n  instructions?: string;\n  tools?: FoundryTool[];\n  metadata?: Record<string, any>;\n  createdAt: string;\n  updatedAt: string;\n}\n\n/**\n * Azure AI Agent Tool Definition\n */\nexport interface FoundryTool {\n  type: 'function' | 'code_interpreter' | 'retrieval';\n  function?: FoundryFunction;\n  metadata?: Record<string, any>;\n}\n\n/**\n * Function tool definition\n */\nexport interface FoundryFunction {\n  name: string;\n  description?: string;\n  parameters?: Record<string, any>;\n}\n\n/**\n * Foundry Project Information\n */\nexport interface FoundryProject {\n  id: string;\n  name: string;\n  description?: string;\n  resourceGroup: string;\n  region: string;\n  createdAt: string;\n  updatedAt: string;\n  metadata?: Record<string, any>;\n}\n\n/**\n * Foundry Model Deployment\n */\nexport interface FoundryModelDeployment {\n  id: string;\n  name: string;\n  model: string;\n  version?: string;\n  status: 'pending' | 'running' | 'failed' | 'succeeded';\n  endpoint?: string;\n  createdAt: string;\n  updatedAt: string;\n  metadata?: Record<string, any>;\n}\n\n/**\n * Error types for Azure AI Foundry operations\n */\nexport interface FoundryError {\n  code: string;\n  message: string;\n  details?: Record<string, any>;\n  timestamp: string;\n}\n\n/**\n * Connection status for Azure AI Foundry services\n */\nexport interface FoundryConnectionStatus {\n  isConnected: boolean;\n  lastChecked: string;\n  latency?: number;\n  error?: FoundryError;\n}\n\n/**\n * Health check result for foundry services\n */\nexport interface FoundryHealthCheck {\n  status: 'healthy' | 'unhealthy' | 'degraded';\n  services: {\n    projects: FoundryConnectionStatus;\n    agents: FoundryConnectionStatus;\n  };\n  timestamp: string;\n}\n\n/**\n * Foundry service options for requests\n */\nexport interface FoundryRequestOptions {\n  timeout?: number;\n  retries?: number;\n  metadata?: Record<string, any>;\n  signal?: AbortSignal;\n}\n\n/**\n * PrepBettr-specific interview context for foundry agents\n */\nexport interface PrepBettrInterviewContext {\n  candidateName: string;\n  jobRole: string;\n  companyName?: string;\n  resumeContent?: string;\n  questionsList?: string[];\n  difficulty?: 'beginner' | 'intermediate' | 'advanced';\n  interviewType?: 'technical' | 'behavioral' | 'mixed';\n}\n\n/**\n * PrepBettr foundry agent response\n */\nexport interface PrepBettrFoundryResponse {\n  response: string;\n  nextQuestions?: string[];\n  feedback?: string;\n  confidence?: number;\n  metadata?: {\n    processingTime: number;\n    tokensUsed: number;\n    context: PrepBettrInterviewContext;\n  };\n}\n\n// TODO: Add more types as needed:\n// - Streaming response types\n// - Batch processing types  \n// - Model fine-tuning types\n// - Evaluation and metrics types\n// - Integration-specific types for PrepBettr workflows\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/voice/__tests__/useVoiceAgentBridge.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'voiceTelemetry' is defined but never used.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'errorUtils' is defined but never used.","line":14,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":106,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3090,3093],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3090,3093],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":127,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3695,3698],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3695,3698],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":142,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4235,4238],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4235,4238],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":228,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":228,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7169,7172],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7169,7172],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":235,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":235,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":330,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":330,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10450,10453],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10450,10453],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":338,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":338,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10696,10699],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10696,10699],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":344,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":344,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":367,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":367,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11568,11571],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11568,11571],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":372,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":372,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'result' is assigned a value but never used.","line":691,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":691,"endColumn":21}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Unit Tests for useVoiceAgentBridge Hook\n * \n * Tests voice session lifecycle, state transitions, event handling,\n * error recovery, metrics collection, and integration with agent state.\n */\n\nimport { renderHook, act } from '@testing-library/react';\nimport { useVoiceAgentBridge, UseVoiceAgentBridgeConfig } from '../useVoiceAgentBridge';\nimport { voiceInsights } from '../voice-insights';\nimport { voiceTelemetry } from '../voice-telemetry';\nimport { VoiceSession } from '../voice-session';\nimport { VoiceAgentBridge } from '../voice-agent-bridge';\nimport * as errorUtils from '@/lib/utils/error-utils';\n\n// Mock dependencies\njest.mock('../voice-insights');\njest.mock('../voice-telemetry');\njest.mock('../voice-session');\njest.mock('../voice-agent-bridge');\njest.mock('@/lib/utils/error-utils');\njest.mock('@/lib/utils/logger', () => ({\n  logger: {\n    info: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n    success: jest.fn(),\n    audio: {\n      record: jest.fn()\n    }\n  }\n}));\n\n// Mock fetch\nglobal.fetch = jest.fn();\n\n// Mock WebSocket for browser environment\nObject.defineProperty(window, 'WebSocket', {\n  writable: true,\n  value: jest.fn().mockImplementation(() => ({\n    close: jest.fn(),\n    send: jest.fn(),\n    readyState: 1,\n    OPEN: 1,\n    addEventListener: jest.fn(),\n    removeEventListener: jest.fn()\n  }))\n});\n\ndescribe('useVoiceAgentBridge Hook', () => {\n  // Default configuration for tests\n  const defaultConfig: UseVoiceAgentBridgeConfig = {\n    userName: 'Test User',\n    userId: 'user-123',\n    interviewId: 'interview-456',\n    feedbackId: 'feedback-789',\n    type: 'technical',\n    questions: ['Tell me about yourself', 'What are your strengths?'],\n    resumeQuestions: ['Describe your React experience'],\n    voiceSettings: {\n      voice: 'en-US-AriaNeural',\n      language: 'en-US',\n      temperature: 0.7,\n      maxTokens: 4096\n    },\n    bridgeConfig: {\n      sessionTimeout: 1800000,\n      maxRetries: 3,\n      errorRecoveryMode: 'graceful' as const,\n      sentimentMonitoring: true,\n      recordingEnabled: true,\n      transcriptStorage: 'both' as const\n    }\n  };\n\n  // Mock instances\n  let mockVoiceSession: jest.Mocked<VoiceSession>;\n  let mockVoiceAgentBridge: jest.Mocked<VoiceAgentBridge>;\n  let mockVoiceInsights: jest.Mocked<typeof voiceInsights>;\n  let mockFetch: jest.MockedFunction<typeof fetch>;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    jest.useFakeTimers();\n\n    // Setup mocks\n    mockFetch = fetch as jest.MockedFunction<typeof fetch>;\n    mockVoiceInsights = voiceInsights as jest.Mocked<typeof voiceInsights>;\n    \n    // Mock VoiceSession\n    mockVoiceSession = {\n      sessionId: 'session-123',\n      isActive: false,\n      start: jest.fn().mockResolvedValue(undefined),\n      stop: jest.fn(),\n      configuration: {},\n      getMetrics: jest.fn().mockReturnValue({}),\n      isConnected: jest.fn().mockReturnValue(false),\n      dispose: jest.fn(),\n      onSessionReady: null,\n      onTranscript: null,\n      onAudioResponse: null,\n      onTextResponse: null,\n      onError: null,\n      onDisconnect: null\n    } as any;\n\n    // Mock VoiceAgentBridge  \n    mockVoiceAgentBridge = {\n      start: jest.fn().mockResolvedValue(undefined),\n      stop: jest.fn(),\n      handoffToAgent: jest.fn().mockResolvedValue(undefined),\n      sendAudioResponse: jest.fn().mockResolvedValue(undefined),\n      on: jest.fn(),\n      getState: jest.fn().mockReturnValue({\n        currentAgent: null,\n        sessionActive: false,\n        lastActivity: Date.now(),\n        pendingHandoff: false,\n        errorCount: 0,\n        recovery: {\n          inProgress: false,\n          attempts: 0,\n          lastAttempt: 0\n        }\n      })\n    } as any;\n\n    // Setup constructor mocks\n    (VoiceSession as jest.MockedClass<typeof VoiceSession>).mockImplementation(() => mockVoiceSession);\n    (VoiceAgentBridge as jest.MockedClass<typeof VoiceAgentBridge>).mockImplementation(() => mockVoiceAgentBridge);\n\n    // Mock API response\n    mockFetch.mockResolvedValue({\n      ok: true,\n      json: jest.fn().mockResolvedValue({\n        sessionId: 'session-123',\n        wsUrl: 'wss://test.com/ws',\n        token: 'test-token',\n        deploymentId: 'gpt-4o-realtime-preview'\n      })\n    } as any);\n  });\n\n  afterEach(() => {\n    jest.runOnlyPendingTimers();\n    jest.useRealTimers();\n  });\n\n  describe('Hook Initialization', () => {\n    it('should initialize with correct default state', () => {\n      const { result } = renderHook(() => useVoiceAgentBridge(defaultConfig));\n\n      expect(result.current.voiceBridge.connectionState).toBe('idle');\n      expect(result.current.voiceBridge.bridge).toBeNull();\n      expect(result.current.voiceBridge.voiceSession).toBeNull();\n      expect(result.current.voiceBridge.sessionId).toBeNull();\n      expect(result.current.voiceBridge.lastError).toBeNull();\n      expect(result.current.voiceBridge.retryCount).toBe(0);\n      expect(result.current.voiceBridge.isInitializing).toBe(false);\n    });\n\n    it('should set user context on initialization', () => {\n      renderHook(() => useVoiceAgentBridge(defaultConfig));\n\n      expect(mockVoiceInsights.setUser).toHaveBeenCalledWith(\n        defaultConfig.userId,\n        defaultConfig.interviewId\n      );\n    });\n\n    it('should clear user context on unmount', () => {\n      const { unmount } = renderHook(() => useVoiceAgentBridge(defaultConfig));\n\n      unmount();\n\n      expect(mockVoiceInsights.clearUser).toHaveBeenCalled();\n    });\n  });\n\n  describe('Voice Session Lifecycle', () => {\n    it('should successfully start voice session', async () => {\n      const { result } = renderHook(() => useVoiceAgentBridge(defaultConfig));\n\n      await act(async () => {\n        await result.current.startVoiceSession();\n      });\n\n      // Check API call was made\n      expect(mockFetch).toHaveBeenCalledWith('/api/voice/session/start', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: expect.stringContaining('en-US-AriaNeural')\n      });\n\n      // Check VoiceSession was created\n      expect(VoiceSession).toHaveBeenCalledWith(expect.objectContaining({\n        endpoint: 'wss://test.com/ws',\n        apiKey: 'test-token',\n        deploymentId: 'gpt-4o-realtime-preview',\n        voice: 'en-US-AriaNeural'\n      }));\n\n      // Check bridge was started\n      expect(mockVoiceAgentBridge.start).toHaveBeenCalled();\n\n      // Check state updates\n      expect(result.current.voiceBridge.connectionState).toBe('connected');\n      expect(result.current.voiceBridge.sessionId).toBe('session-123');\n      expect(result.current.isInterviewActive).toBe(true);\n\n      // Check telemetry was tracked\n      expect(mockVoiceInsights.trackVoiceSession).toHaveBeenCalledWith(\n        'session_created',\n        expect.objectContaining({\n          sessionId: 'session-123',\n          userId: 'user-123',\n          interviewType: 'technical',\n          connectionState: 'connecting'\n        })\n      );\n    });\n\n    it('should handle session creation failure', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        json: jest.fn().mockResolvedValue({ error: 'API Error' })\n      } as any);\n\n      const { result } = renderHook(() => useVoiceAgentBridge(defaultConfig));\n\n      await act(async () => {\n        try {\n          await result.current.startVoiceSession();\n        } catch (error) {\n          // Expected to throw\n        }\n      });\n\n      expect(result.current.voiceBridge.connectionState).toBe('error');\n      expect(result.current.voiceBridge.lastError).toBe('API Error');\n    });\n\n    it('should successfully stop voice session', async () => {\n      const { result } = renderHook(() => useVoiceAgentBridge(defaultConfig));\n\n      // Start session first\n      await act(async () => {\n        await result.current.startVoiceSession();\n      });\n\n      // Stop session\n      await act(async () => {\n        await result.current.stopVoiceSession();\n      });\n\n      expect(mockVoiceAgentBridge.stop).toHaveBeenCalled();\n      expect(mockVoiceSession.stop).toHaveBeenCalled();\n      expect(result.current.voiceBridge.connectionState).toBe('idle');\n      expect(result.current.isInterviewActive).toBe(false);\n      expect(mockVoiceInsights.flush).toHaveBeenCalled();\n    });\n\n    it('should prevent concurrent session initialization', async () => {\n      const { result } = renderHook(() => useVoiceAgentBridge(defaultConfig));\n\n      // Start two sessions concurrently\n      const promise1 = act(async () => {\n        await result.current.startVoiceSession();\n      });\n\n      const promise2 = act(async () => {\n        await result.current.startVoiceSession();\n      });\n\n      await Promise.all([promise1, promise2]);\n\n      // Should only create one session\n      expect(VoiceSession).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe('Error Handling and Recovery', () => {\n    it('should handle session errors gracefully', async () => {\n      const { result } = renderHook(() => useVoiceAgentBridge(defaultConfig));\n\n      // Start session\n      await act(async () => {\n        await result.current.startVoiceSession();\n      });\n\n      // Simulate session error via bridge event handler\n      const sessionErrorHandler = mockVoiceAgentBridge.on.mock.calls.find(\n        call => call[0] === 'session:error'\n      )?.[1];\n\n      if (sessionErrorHandler) {\n        act(() => {\n          sessionErrorHandler({\n            sessionId: 'session-123',\n            error: new Error('Connection lost')\n          });\n        });\n\n        expect(result.current.voiceBridge.connectionState).toBe('error');\n        expect(result.current.voiceBridge.lastError).toBe('Connection lost');\n        expect(mockVoiceInsights.trackVoiceError).toHaveBeenCalledWith({\n          sessionId: 'session-123',\n          errorType: 'bridge',\n          errorMessage: 'Connection lost',\n          errorCode: 'Error',\n          isRecoverable: true,\n          stackTrace: expect.any(String),\n          context: {\n            userId: 'user-123',\n            interviewType: 'technical'\n          }\n        });\n      }\n    });\n\n    it('should retry connection with exponential backoff', async () => {\n      const { result } = renderHook(() => useVoiceAgentBridge(defaultConfig));\n\n      // Mock session creation to fail first time\n      mockFetch\n        .mockResolvedValueOnce({\n          ok: false,\n          json: jest.fn().mockResolvedValue({ error: 'Network error' })\n        } as any)\n        .mockResolvedValueOnce({\n          ok: true,\n          json: jest.fn().mockResolvedValue({\n            sessionId: 'session-retry-123',\n            wsUrl: 'wss://test.com/ws',\n            token: 'test-token'\n          })\n        } as any);\n\n      // Initial attempt should fail\n      await act(async () => {\n        try {\n          await result.current.startVoiceSession();\n        } catch (error) {\n          // Expected failure\n        }\n      });\n\n      expect(result.current.voiceBridge.connectionState).toBe('error');\n\n      // Retry should succeed\n      await act(async () => {\n        await result.current.retryConnection();\n      });\n\n      expect(result.current.voiceBridge.retryCount).toBe(1);\n      expect(result.current.voiceBridge.connectionState).toBe('connected');\n    });\n\n    it('should track retry failures in telemetry', async () => {\n      const { result } = renderHook(() => useVoiceAgentBridge(defaultConfig));\n\n      // Mock persistent failure\n      mockFetch.mockResolvedValue({\n        ok: false,\n        json: jest.fn().mockResolvedValue({ error: 'Persistent error' })\n      } as any);\n\n      await act(async () => {\n        try {\n          await result.current.retryConnection();\n        } catch (error) {\n          // Expected failure\n        }\n      });\n\n      expect(mockVoiceInsights.trackVoiceError).toHaveBeenCalledWith(\n        expect.objectContaining({\n          errorType: 'connection',\n          errorMessage: 'Retry failed',\n          isRecoverable: true\n        })\n      );\n    });\n  });\n\n  describe('Recording Controls', () => {\n    beforeEach(async () => {\n      const { result } = renderHook(() => useVoiceAgentBridge(defaultConfig));\n      \n      await act(async () => {\n        await result.current.startVoiceSession();\n      });\n\n      return { result };\n    });\n\n    it('should start recording when voice is connected', () => {\n      const { result } = renderHook(() => useVoiceAgentBridge(defaultConfig));\n\n      act(() => {\n        result.current.startRecording();\n      });\n\n      expect(result.current.isRecording).toBe(true);\n      expect(mockVoiceInsights.trackVoiceEvent).toHaveBeenCalledWith(\n        'recording_started',\n        {\n          sessionId: 'session-123',\n          userId: 'user-123'\n        }\n      );\n    });\n\n    it('should stop recording and track event', () => {\n      const { result } = renderHook(() => useVoiceAgentBridge(defaultConfig));\n\n      // Start recording first\n      act(() => {\n        result.current.startRecording();\n      });\n\n      // Stop recording\n      act(() => {\n        result.current.stopRecording();\n      });\n\n      expect(result.current.isRecording).toBe(false);\n      expect(mockVoiceInsights.trackVoiceEvent).toHaveBeenCalledWith(\n        'recording_stopped',\n        {\n          sessionId: 'session-123',\n          userId: 'user-123'\n        }\n      );\n    });\n\n    it('should prevent recording when not connected', () => {\n      const { result } = renderHook(() => useVoiceAgentBridge(defaultConfig));\n      \n      // Without starting session, recording should not work\n      act(() => {\n        result.current.startRecording();\n      });\n\n      expect(result.current.isRecording).toBe(false);\n    });\n  });\n\n  describe('Agent Controls', () => {\n    it('should handle agent handoff', async () => {\n      const { result } = renderHook(() => useVoiceAgentBridge(defaultConfig));\n\n      await act(async () => {\n        await result.current.startVoiceSession();\n      });\n\n      await act(async () => {\n        await result.current.handoffToAgent('technical-interviewer', { context: 'data' });\n      });\n\n      expect(mockVoiceAgentBridge.handoffToAgent).toHaveBeenCalledWith(\n        'technical-interviewer',\n        { context: 'data' }\n      );\n\n      expect(mockVoiceInsights.trackVoiceUsage).toHaveBeenCalledWith({\n        sessionId: 'session-123',\n        userId: 'user-123',\n        featureUsed: 'agent_handoff',\n        interactionCount: 1,\n        duration: 0\n      });\n    });\n\n    it('should send response through bridge', async () => {\n      const { result } = renderHook(() => useVoiceAgentBridge(defaultConfig));\n\n      await act(async () => {\n        await result.current.startVoiceSession();\n      });\n\n      await act(async () => {\n        await result.current.sendResponse('Hello, how are you?', 'audio-data');\n      });\n\n      expect(mockVoiceAgentBridge.sendAudioResponse).toHaveBeenCalledWith(\n        'Hello, how are you?',\n        'audio-data'\n      );\n    });\n  });\n\n  describe('Event Handling', () => {\n    it('should handle transcript events', async () => {\n      const mockOnTranscriptReceived = jest.fn();\n      const configWithCallbacks = {\n        ...defaultConfig,\n        onTranscriptReceived: mockOnTranscriptReceived\n      };\n\n      const { result } = renderHook(() => useVoiceAgentBridge(configWithCallbacks));\n\n      await act(async () => {\n        await result.current.startVoiceSession();\n      });\n\n      // Simulate transcript event\n      const transcriptHandler = mockVoiceAgentBridge.on.mock.calls.find(\n        call => call[0] === 'transcript:final'\n      )?.[1];\n\n      if (transcriptHandler) {\n        const mockTranscriptEntry = {\n          id: 'transcript-1',\n          timestamp: Date.now(),\n          speaker: 'user' as const,\n          text: 'Hello, I am a software developer',\n          confidence: 0.95\n        };\n\n        act(() => {\n          transcriptHandler({\n            sessionId: 'session-123',\n            entry: mockTranscriptEntry\n          });\n        });\n\n        expect(mockOnTranscriptReceived).toHaveBeenCalledWith(mockTranscriptEntry);\n        expect(result.current.state.hasUserSpoken).toBe(true);\n        expect(result.current.isProcessing).toBe(true);\n      }\n    });\n\n    it('should handle sentiment analysis events', async () => {\n      const mockOnSentimentAnalysis = jest.fn();\n      const configWithCallbacks = {\n        ...defaultConfig,\n        onSentimentAnalysis: mockOnSentimentAnalysis\n      };\n\n      const { result } = renderHook(() => useVoiceAgentBridge(configWithCallbacks));\n\n      await act(async () => {\n        await result.current.startVoiceSession();\n      });\n\n      // Simulate sentiment analysis event\n      const sentimentHandler = mockVoiceAgentBridge.on.mock.calls.find(\n        call => call[0] === 'sentiment:analysis'\n      )?.[1];\n\n      if (sentimentHandler) {\n        const mockSentiment = {\n          score: 0.7,\n          magnitude: 0.8,\n          label: 'positive' as const,\n          confidence: 0.9,\n          stressIndicators: {\n            hasHighStressWords: false,\n            stressWords: [],\n            speechPattern: 'normal' as const,\n            emotionalState: 'calm' as const\n          }\n        };\n\n        act(() => {\n          sentimentHandler({\n            sessionId: 'session-123',\n            sentiment: mockSentiment\n          });\n        });\n\n        expect(mockOnSentimentAnalysis).toHaveBeenCalledWith(mockSentiment);\n        expect(result.current.sessionMetrics?.transcriptionAccuracy).toBe(0.9);\n      }\n    });\n  });\n\n  describe('Metrics and Telemetry', () => {\n    it('should track session metrics', async () => {\n      const { result } = renderHook(() => useVoiceAgentBridge(defaultConfig));\n\n      await act(async () => {\n        await result.current.startVoiceSession();\n      });\n\n      // Simulate metrics update via sentiment analysis\n      const sentimentHandler = mockVoiceAgentBridge.on.mock.calls.find(\n        call => call[0] === 'sentiment:analysis'\n      )?.[1];\n\n      if (sentimentHandler) {\n        act(() => {\n          sentimentHandler({\n            sessionId: 'session-123',\n            sentiment: {\n              confidence: 0.85,\n              score: 0.6,\n              magnitude: 0.7,\n              label: 'positive',\n              stressIndicators: {\n                hasHighStressWords: false,\n                stressWords: [],\n                speechPattern: 'normal',\n                emotionalState: 'calm'\n              }\n            }\n          });\n        });\n\n        expect(mockVoiceInsights.trackVoiceMetric).toHaveBeenCalledWith({\n          sessionId: 'session-123',\n          metricName: 'transcript_accuracy',\n          value: 0.85,\n          unit: 'percentage',\n          timestamp: expect.any(Number)\n        });\n      }\n    });\n\n    it('should track usage analytics', async () => {\n      const { result } = renderHook(() => useVoiceAgentBridge(defaultConfig));\n\n      await act(async () => {\n        await result.current.startVoiceSession();\n      });\n\n      expect(mockVoiceInsights.trackVoiceUsage).toHaveBeenCalledWith({\n        sessionId: 'session-123',\n        userId: 'user-123',\n        featureUsed: 'voice_interview',\n        interactionCount: 1,\n        duration: 0\n      });\n    });\n  });\n\n  describe('State Selectors', () => {\n    it('should provide correct state selectors', () => {\n      const { result } = renderHook(() => useVoiceAgentBridge(defaultConfig));\n\n      // Initially all should be false/idle\n      expect(result.current.isRecording).toBe(false);\n      expect(result.current.isProcessing).toBe(false);\n      expect(result.current.isSpeaking).toBe(false);\n      expect(result.current.isWaiting).toBe(false);\n      expect(result.current.isInterviewActive).toBe(false);\n      expect(result.current.isInterviewFinished).toBe(false);\n      expect(result.current.shouldShowFeedback).toBe(false);\n      expect(result.current.isVoiceConnected).toBe(false);\n      expect(result.current.canStartRecording).toBe(false);\n    });\n\n    it('should update state selectors based on voice connection', async () => {\n      const { result } = renderHook(() => useVoiceAgentBridge(defaultConfig));\n\n      await act(async () => {\n        await result.current.startVoiceSession();\n      });\n\n      expect(result.current.isVoiceConnected).toBe(true);\n      expect(result.current.isInterviewActive).toBe(true);\n      expect(result.current.canStartRecording).toBe(true);\n    });\n  });\n\n  describe('Cleanup and Resource Management', () => {\n    it('should cleanup resources on unmount', () => {\n      const { unmount } = renderHook(() => useVoiceAgentBridge(defaultConfig));\n\n      unmount();\n\n      expect(mockVoiceInsights.clearUser).toHaveBeenCalled();\n      // Additional cleanup assertions would go here\n    });\n\n    it('should handle cleanup errors gracefully', () => {\n      mockVoiceAgentBridge.stop.mockImplementation(() => {\n        throw new Error('Cleanup error');\n      });\n\n      const { unmount } = renderHook(() => useVoiceAgentBridge(defaultConfig));\n\n      expect(() => unmount()).not.toThrow();\n    });\n  });\n\n  describe('Configuration Updates', () => {\n    it('should handle configuration updates', () => {\n      const { result, rerender } = renderHook(\n        ({ config }) => useVoiceAgentBridge(config),\n        { initialProps: { config: defaultConfig } }\n      );\n\n      const updatedConfig = {\n        ...defaultConfig,\n        userId: 'new-user-456'\n      };\n\n      rerender({ config: updatedConfig });\n\n      expect(mockVoiceInsights.setUser).toHaveBeenCalledWith('new-user-456', 'interview-456');\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/voice/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":208,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":208,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5429,5432],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5429,5432],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":255,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":255,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6754,6757],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6754,6757],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Azure AI Foundry Voice Integration Types\n * Comprehensive type definitions for voice-enabled interview system\n */\n\n// ===== VOICE CONFIGURATION TYPES =====\n\nexport interface VoiceSettings {\n  // Speech-to-Text Configuration\n  inputAudioFormat: 'pcm16' | 'pcm24' | 'opus';\n  inputSampleRate: number;\n  language: string;\n  \n  // Text-to-Speech Configuration  \n  outputAudioFormat: 'pcm16' | 'pcm24' | 'opus';\n  outputSampleRate: number;\n  voice: string;\n  \n  // Conversation Parameters\n  temperature: number;\n  maxTokens: number;\n  systemMessage: string;\n  \n  // Voice Activity Detection\n  turnDetection: {\n    type: 'server_vad' | 'none';\n    threshold?: number;\n    prefix_padding_ms?: number;\n    silence_duration_ms?: number;\n  };\n  \n  // Agent-specific Settings\n  personality?: 'professional' | 'friendly' | 'technical' | 'empathetic';\n  speakingPace?: 'slow' | 'normal' | 'fast';\n  responseStyle?: 'concise' | 'detailed' | 'conversational';\n}\n\nexport interface ConfigOptions extends VoiceSettings {\n  // Connection Settings\n  endpoint: string;\n  apiKey: string;\n  deploymentId: string;\n  \n  // Format Settings (legacy compatibility)\n  inputFormat: string;\n  outputFormat: string;\n  instructionMessage: string;\n}\n\n// ===== AGENT-SPECIFIC VOICE SETTINGS =====\n\nexport interface AgentVoiceConfig {\n  agentType: 'technical' | 'behavioral' | 'industry' | 'general';\n  defaultVoiceSettings: Partial<VoiceSettings>;\n  voicePersonality: {\n    systemPromptAddition: string;\n    responseCharacteristics: string[];\n  };\n  interactionStyle: {\n    questionPacing: number; // seconds between questions\n    followUpStyle: 'immediate' | 'delayed' | 'contextual';\n    errorRecovery: 'restart' | 'clarify' | 'skip';\n  };\n}\n\n// ===== REAL-TIME TRANSCRIPT TYPES =====\n\nexport interface TranscriptEntry {\n  id: string;\n  timestamp: number;\n  speaker: 'user' | 'agent';\n  text: string;\n  confidence?: number;\n  isPartial?: boolean;\n  wordTimings?: {\n    word: string;\n    startTime: number;\n    endTime: number;\n    confidence: number;\n  }[];\n}\n\nexport interface TranscriptSession {\n  sessionId: string;\n  startTime: number;\n  endTime?: number;\n  entries: TranscriptEntry[];\n  metadata: {\n    totalDuration: number;\n    wordCount: number;\n    averageConfidence: number;\n    language: string;\n  };\n}\n\n// ===== SENTIMENT DETECTION TYPES =====\n\nexport interface SentimentAnalysis {\n  score: number; // -1 to 1 (negative to positive)\n  magnitude: number; // 0 to 1 (intensity)\n  label: 'very_negative' | 'negative' | 'neutral' | 'positive' | 'very_positive';\n  confidence: number;\n  stressIndicators: {\n    hasHighStressWords: boolean;\n    stressWords: string[];\n    speechPattern: 'normal' | 'rushed' | 'hesitant' | 'unclear';\n    emotionalState: 'calm' | 'nervous' | 'excited' | 'frustrated';\n  };\n}\n\nexport interface SentimentTrend {\n  sessionId: string;\n  timeline: {\n    timestamp: number;\n    sentiment: SentimentAnalysis;\n    transcriptId: string;\n  }[];\n  summary: {\n    averageSentiment: number;\n    trendDirection: 'improving' | 'declining' | 'stable';\n    stressEvents: number;\n    recommendedInterventions: string[];\n  };\n}\n\n// ===== RECORDING AND STORAGE TYPES =====\n\nexport interface AudioChunk {\n  id: string;\n  sessionId: string;\n  timestamp: number;\n  duration: number; // in milliseconds\n  format: string;\n  sampleRate: number;\n  data: ArrayBuffer;\n  metadata: {\n    speaker: 'user' | 'agent';\n    quality: 'low' | 'medium' | 'high';\n    noiseLevel: number;\n  };\n}\n\nexport interface SessionRecording {\n  sessionId: string;\n  startTime: number;\n  endTime?: number;\n  totalDuration: number;\n  chunks: AudioChunk[];\n  storageLocation: {\n    containerName: string;\n    blobName: string;\n    url?: string;\n  };\n  processingStatus: 'uploading' | 'processing' | 'completed' | 'failed';\n  transcriptId?: string;\n}\n\n// ===== VOICE SESSION STATE TYPES =====\n\nexport interface VoiceSessionState {\n  sessionId: string;\n  status: 'initializing' | 'connected' | 'active' | 'paused' | 'ended' | 'error';\n  currentAgent: string;\n  activeTranscript: TranscriptSession;\n  sentimentAnalysis: SentimentTrend;\n  recording?: SessionRecording;\n  \n  // Real-time Metrics\n  metrics: {\n    connectionLatency: number;\n    audioLatency: number;\n    transcriptionAccuracy: number;\n    responseTime: number;\n    totalSpeakingTime: number;\n    silenceDuration: number;\n  };\n  \n  // Error Tracking\n  errors: {\n    timestamp: number;\n    type: 'connection' | 'audio' | 'transcription' | 'synthesis';\n    message: string;\n    recovered: boolean;\n  }[];\n}\n\n// ===== EVENT TYPES FOR VOICE BRIDGE =====\n\nexport interface VoiceEventTypes {\n  // Session Events\n  'session:started': { sessionId: string; agent: string };\n  'session:ended': { sessionId: string; reason: string };\n  'session:error': { sessionId: string; error: Error };\n  \n  // Transcription Events\n  'transcript:partial': { sessionId: string; text: string; confidence: number };\n  'transcript:final': { sessionId: string; entry: TranscriptEntry };\n  'transcript:error': { sessionId: string; error: string };\n  \n  // Audio Events\n  'audio:received': { sessionId: string; chunk: AudioChunk };\n  'audio:synthesis:start': { sessionId: string; text: string };\n  'audio:synthesis:complete': { sessionId: string; audioData: string };\n  'audio:playback:start': { sessionId: string };\n  'audio:playback:end': { sessionId: string };\n  \n  // Agent Events\n  'agent:handoff': { from: string; to: string; context: any };\n  'agent:response': { agent: string; text: string; audioData?: string };\n  'agent:thinking': { agent: string; isThinking: boolean };\n  \n  // Sentiment Events\n  'sentiment:analysis': { sessionId: string; sentiment: SentimentAnalysis };\n  'sentiment:stress:detected': { sessionId: string; level: 'moderate' | 'high'; suggestions: string[] };\n}\n\n// ===== UTILITY TYPES =====\n\nexport type VoiceEventHandler<T extends keyof VoiceEventTypes> = (event: VoiceEventTypes[T]) => void;\n\nexport interface VoiceCapabilities {\n  supportedLanguages: string[];\n  supportedVoices: string[];\n  supportedFormats: {\n    input: string[];\n    output: string[];\n  };\n  features: {\n    realTimeTranscription: boolean;\n    sentimentAnalysis: boolean;\n    voiceActivityDetection: boolean;\n    noiseReduction: boolean;\n    multipleAgents: boolean;\n  };\n}\n\n// ===== AZURE AI FOUNDRY SPECIFIC TYPES =====\n\nexport interface FoundryVoiceSession {\n  id: string;\n  status: 'active' | 'inactive' | 'terminated';\n  model: string;\n  modalities: ('text' | 'audio')[];\n  instructions: string;\n  voice: string;\n  inputAudioFormat: string;\n  outputAudioFormat: string;\n  turnDetection: VoiceSettings['turnDetection'];\n  temperature: number;\n  maxResponseOutputTokens: number | null;\n}\n\nexport interface FoundryVoiceMessage {\n  type: string;\n  [key: string]: any;\n}\n\nexport interface FoundryVoiceError {\n  type: string;\n  code: string;\n  message: string;\n  param?: string;\n  eventId?: string;\n}\n\n// ===== AGENT BRIDGE TYPES =====\n\nexport interface AgentBridgeConfig {\n  sessionTimeout: number;\n  maxRetries: number;\n  errorRecoveryMode: 'graceful' | 'immediate' | 'manual';\n  sentimentMonitoring: boolean;\n  recordingEnabled: boolean;\n  transcriptStorage: 'memory' | 'persistent' | 'both';\n}\n\nexport interface BridgeState {\n  currentAgent: string | null;\n  sessionActive: boolean;\n  lastActivity: number;\n  pendingHandoff: boolean;\n  errorCount: number;\n  recovery: {\n    inProgress: boolean;\n    attempts: number;\n    lastAttempt: number;\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/voice/useVoiceAgentBridge.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'VoiceSessionTelemetry' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'VoiceErrorTelemetry' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'VoiceMetricsTelemetry' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'VoiceUsageTelemetry' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'VoiceEventTypes' is defined but never used.","line":42,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BridgeState' is defined but never used.","line":46,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ConfigOptions' is defined but never used.","line":48,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":145,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3709,3712],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3709,3712],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":162,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4267,4270],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4267,4270],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":177,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4634,4637],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4634,4637],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":303,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":303,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9067,9070],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9067,9070],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":323,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":323,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9974,9977],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9974,9977],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'setupBridgeEventHandlers'. Either include it or remove the dependency array.","line":374,"column":6,"nodeType":"ArrayExpression","endLine":374,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [setupBridgeEventHandlers]","fix":{"range":[11683,11685],"text":"[setupBridgeEventHandlers]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":380,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":380,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11837,11840],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11837,11840],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":605,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":605,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18903,18906],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18903,18906],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Voice Agent Bridge React Hook\n * \n * Integrates Azure AI Foundry voice system with existing agent state management.\n * Provides a seamless bridge between real-time voice interactions and React state.\n */\n\nimport { useReducer, useEffect, useCallback, useRef, useState } from 'react';\nimport { VoiceAgentBridge } from './voice-agent-bridge';\nimport { VoiceSession } from './voice-session';\nimport { voiceInsights } from './voice-insights';\nimport type {\n  VoiceSessionTelemetry,\n  VoiceErrorTelemetry,\n  VoiceMetricsTelemetry,\n  VoiceUsageTelemetry\n} from './voice-insights';\nimport { logger } from '@/lib/utils/logger';\nimport { showErrorNotification } from '@/lib/utils/error-utils';\n\n// Import existing agent state management\nimport {\n  AgentState,\n  InterviewState,\n  agentReducer,\n  initialAgentState,\n  createStartInterviewAction,\n  createEndInterviewAction,\n  createAddUserMessageAction,\n  createAddAIMessageAction,\n  createUserSpokeAction,\n  selectIsRecording,\n  selectIsProcessing,\n  selectIsSpeaking,\n  selectIsWaiting,\n  selectIsInterviewActive,\n  selectIsInterviewFinished,\n  selectShouldShowFeedback,\n} from '@/lib/voice/agent-state';\n\nimport type {\n  VoiceEventTypes,\n  TranscriptEntry,\n  VoiceSettings,\n  AgentBridgeConfig,\n  BridgeState,\n  SentimentAnalysis,\n  ConfigOptions\n} from './types';\n\n// ===== VOICE BRIDGE STATE =====\n\ninterface VoiceBridgeState {\n  bridge: VoiceAgentBridge | null;\n  voiceSession: VoiceSession | null;\n  sessionId: string | null;\n  connectionState: 'idle' | 'connecting' | 'connected' | 'disconnected' | 'error';\n  lastError: string | null;\n  retryCount: number;\n  isInitializing: boolean;\n}\n\nconst initialVoiceBridgeState: VoiceBridgeState = {\n  bridge: null,\n  voiceSession: null,\n  sessionId: null,\n  connectionState: 'idle',\n  lastError: null,\n  retryCount: 0,\n  isInitializing: false,\n};\n\ntype VoiceBridgeAction =\n  | { type: 'BRIDGE_INITIALIZING' }\n  | { type: 'BRIDGE_CREATED'; payload: { bridge: VoiceAgentBridge; voiceSession: VoiceSession; sessionId: string } }\n  | { type: 'CONNECTION_STATE_CHANGED'; payload: 'idle' | 'connecting' | 'connected' | 'disconnected' | 'error' }\n  | { type: 'ERROR_OCCURRED'; payload: string }\n  | { type: 'RETRY_ATTEMPTED' }\n  | { type: 'BRIDGE_DESTROYED' };\n\nfunction voiceBridgeReducer(state: VoiceBridgeState, action: VoiceBridgeAction): VoiceBridgeState {\n  switch (action.type) {\n    case 'BRIDGE_INITIALIZING':\n      return {\n        ...state,\n        isInitializing: true,\n        lastError: null,\n        connectionState: 'connecting',\n      };\n\n    case 'BRIDGE_CREATED':\n      return {\n        ...state,\n        bridge: action.payload.bridge,\n        voiceSession: action.payload.voiceSession,\n        sessionId: action.payload.sessionId,\n        connectionState: 'connected',\n        isInitializing: false,\n        lastError: null,\n        retryCount: 0,\n      };\n\n    case 'CONNECTION_STATE_CHANGED':\n      return {\n        ...state,\n        connectionState: action.payload,\n      };\n\n    case 'ERROR_OCCURRED':\n      return {\n        ...state,\n        lastError: action.payload,\n        connectionState: 'error',\n        isInitializing: false,\n      };\n\n    case 'RETRY_ATTEMPTED':\n      return {\n        ...state,\n        retryCount: state.retryCount + 1,\n        connectionState: 'connecting',\n        lastError: null,\n      };\n\n    case 'BRIDGE_DESTROYED':\n      return {\n        ...initialVoiceBridgeState,\n      };\n\n    default:\n      return state;\n  }\n}\n\n// ===== HOOK CONFIGURATION =====\n\nexport interface UseVoiceAgentBridgeConfig {\n  // Agent Configuration\n  userName: string;\n  userId: string;\n  interviewId?: string;\n  feedbackId?: string;\n  type: string;\n  questions?: string[];\n  resumeInfo?: any;\n  resumeQuestions?: string[];\n\n  // Voice Configuration\n  voiceSettings?: Partial<VoiceSettings>;\n  bridgeConfig?: Partial<AgentBridgeConfig>;\n\n  // Callbacks\n  onTranscriptReceived?: (entry: TranscriptEntry) => void;\n  onSentimentAnalysis?: (sentiment: SentimentAnalysis) => void;\n  onAgentResponse?: (response: { agent: string; text: string; audioData?: string }) => void;\n  onSessionError?: (error: Error) => void;\n}\n\nexport interface VoiceAgentBridgeResult {\n  // Agent State (existing compatibility)\n  state: AgentState;\n  dispatch: React.Dispatch<any>;\n\n  // Voice Bridge State\n  voiceBridge: VoiceBridgeState;\n  \n  // Session Controls\n  startVoiceSession: () => Promise<void>;\n  stopVoiceSession: () => Promise<void>;\n  retryConnection: () => Promise<void>;\n\n  // Recording Controls  \n  startRecording: () => void;\n  stopRecording: () => void;\n\n  // Agent Controls\n  handoffToAgent: (agentName: string, context?: any) => Promise<void>;\n  sendResponse: (text: string, audioData?: string) => Promise<void>;\n\n  // State Selectors (existing compatibility)\n  isRecording: boolean;\n  isProcessing: boolean;\n  isSpeaking: boolean;\n  isWaiting: boolean;\n  isInterviewActive: boolean;\n  isInterviewFinished: boolean;\n  shouldShowFeedback: boolean;\n  \n  // Voice-specific State\n  isVoiceConnected: boolean;\n  canStartRecording: boolean;\n  sessionMetrics: {\n    connectionLatency: number;\n    audioLatency: number;\n    transcriptionAccuracy: number;\n  } | null;\n}\n\n// ===== MAIN HOOK IMPLEMENTATION =====\n\nexport function useVoiceAgentBridge(config: UseVoiceAgentBridgeConfig): VoiceAgentBridgeResult {\n  // Existing agent state management\n  const [agentState, agentDispatch] = useReducer(agentReducer, initialAgentState);\n  \n  // Voice bridge state management\n  const [voiceBridgeState, voiceBridgeDispatch] = useReducer(voiceBridgeReducer, initialVoiceBridgeState);\n  \n  // Session metrics tracking with Application Insights integration\n  const [sessionMetrics, setSessionMetrics] = useState<{\n    connectionLatency: number;\n    audioLatency: number;\n    transcriptionAccuracy: number;\n  } | null>(null);\n  \n  // Initialize voice insights with user context\n  useEffect(() => {\n    if (config.userId) {\n      voiceInsights.setUser(config.userId, config.interviewId);\n    }\n    return () => {\n      voiceInsights.clearUser();\n    };\n  }, [config.userId, config.interviewId]);\n\n  // Refs for cleanup and avoiding stale closures\n  const bridgeRef = useRef<VoiceAgentBridge | null>(null);\n  const voiceSessionRef = useRef<VoiceSession | null>(null);\n  const configRef = useRef(config);\n  \n  // Update config ref when config changes\n  useEffect(() => {\n    configRef.current = config;\n  }, [config]);\n\n  // ===== VOICE SESSION MANAGEMENT =====\n\n  const createVoiceSession = useCallback(async (): Promise<{ bridge: VoiceAgentBridge; voiceSession: VoiceSession; sessionId: string }> => {\n    const currentConfig = configRef.current;\n    \n    try {\n      logger.info('üöÄ [Voice Bridge Hook] Creating voice session', {\n        userId: currentConfig.userId,\n        type: currentConfig.type\n      });\n\n      // Create voice session via API\n      const response = await fetch('/api/voice/session/start', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          voiceName: currentConfig.voiceSettings?.voice || 'en-US-AriaNeural',\n          locale: currentConfig.voiceSettings?.language || 'en-US',\n          speakingRate: 1.0,\n          emotionalTone: currentConfig.voiceSettings?.personality || 'professional',\n          audioSettings: {\n            noiseSuppression: true,\n            echoCancellation: true,\n            interruptionDetection: true,\n            sampleRate: currentConfig.voiceSettings?.inputSampleRate || 16000\n          }\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to create voice session');\n      }\n\n      const sessionData = await response.json();\n      const sessionId = sessionData.sessionId;\n\n      // Create VoiceLiveClient instance\n      const { VoiceLiveClient } = await import('./voice-live-client');\n      const voiceClient = new VoiceLiveClient();\n      await voiceClient.init();\n      \n      // Create session metadata from API response\n      const sessionMetadata = {\n        sessionId,\n        wsUrl: sessionData.wsUrl || sessionData.endpoint,\n        options: {\n          voiceName: currentConfig.voiceSettings?.voice || 'neural-hd-professional',\n          locale: currentConfig.voiceSettings?.language || 'en-US',\n          speakingPace: currentConfig.voiceSettings?.speakingPace || 'normal',\n          emotionalTone: currentConfig.voiceSettings?.personality || 'professional',\n          audioSettings: {\n            noiseSuppression: true,\n            echoCancellation: true,\n            interruptionDetection: true,\n            sampleRate: currentConfig.voiceSettings?.inputSampleRate || 16000\n          }\n        },\n        createdAt: new Date()\n      };\n\n      // Create VoiceSession wrapper with client and metadata\n      const voiceSession = new VoiceSession(voiceClient, sessionMetadata);\n\n      // Create mock agent orchestrator for now\n      const mockAgentOrchestrator = {\n        handleInput: async (transcript: string, context: any) => {\n          // This would normally route to the actual agent system\n          // For now, we'll use the existing conversation processing\n          logger.info('ü§ñ [Voice Bridge Hook] Processing agent input', {\n            transcriptLength: transcript.length,\n            sessionId: context.sessionId\n          });\n          \n          // Add user message to agent state\n          agentDispatch(createAddUserMessageAction(transcript));\n          \n          // Generate a simple response for now\n          // In a real implementation, this would call the existing conversation system\n          const aiResponse = `Thank you for your response. Let me ask you another question about your experience.`;\n          \n          return {\n            text: aiResponse,\n            audioData: undefined // Will be synthesized by Azure\n          };\n        },\n        handoff: async (agentName: string, context: any) => {\n          logger.info('üîÑ [Voice Bridge Hook] Agent handoff requested', {\n            agentName,\n            sessionId: context.sessionId\n          });\n          // Handle agent switching logic here\n        }\n      };\n\n      // Create voice agent bridge\n      const bridge = new VoiceAgentBridge(\n        voiceSession,\n        mockAgentOrchestrator,\n        {\n          sessionTimeout: 1800000, // 30 minutes\n          maxRetries: 3,\n          errorRecoveryMode: 'graceful',\n          sentimentMonitoring: true,\n          recordingEnabled: true,\n          transcriptStorage: 'both',\n          ...currentConfig.bridgeConfig\n        }\n      );\n\n      // Set up bridge event handlers\n      setupBridgeEventHandlers(bridge, agentDispatch, currentConfig);\n\n      logger.success('‚úÖ [Voice Bridge Hook] Voice session created', {\n        sessionId,\n        agentType: currentConfig.type\n      });\n\n      return { bridge, voiceSession, sessionId };\n\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to create voice session';\n      logger.error('‚ùå [Voice Bridge Hook] Failed to create voice session', error);\n      \n      // Note: VoiceTelemetry.trackError expects sessionId as second param\n      const sessionId = 'creation_failed_' + Date.now();\n      // Import VoiceTelemetry directly from voice-telemetry\n      const { VoiceTelemetry } = await import('./voice-telemetry');\n      VoiceTelemetry.trackError(\n        error instanceof Error ? error : new Error(errorMessage),\n        sessionId,\n        'SESSION_CREATION_FAILED',\n        false // don't notify user - this will be handled by the caller\n      );\n\n      throw new Error(errorMessage);\n    }\n  }, []);\n\n  // ===== BRIDGE EVENT HANDLERS =====\n\n  const setupBridgeEventHandlers = useCallback((\n    bridge: VoiceAgentBridge,\n    dispatch: React.Dispatch<any>,\n    currentConfig: UseVoiceAgentBridgeConfig\n  ) => {\n    // Transcript events\n    bridge.on('transcript:final', (event) => {\n      logger.info('üìù [Voice Bridge Hook] Transcript received', {\n        speaker: event.entry.speaker,\n        textLength: event.entry.text.length,\n        confidence: event.entry.confidence\n      });\n\n      if (event.entry.speaker === 'user') {\n        // Mark user as having spoken if first speech detected\n        if (!agentState.hasUserSpoken) {\n          dispatch(createUserSpokeAction());\n        }\n        \n        dispatch(createAddUserMessageAction(event.entry.text));\n        dispatch({ type: 'STOP_RECORDING' });\n        dispatch({ type: 'START_PROCESSING' });\n      }\n\n      // Call user callback if provided\n      currentConfig.onTranscriptReceived?.(event.entry);\n    });\n\n    // Agent response events\n    bridge.on('agent:response', (event) => {\n      logger.info('üó£Ô∏è [Voice Bridge Hook] Agent response received', {\n        agent: event.agent,\n        textLength: event.text.length,\n        hasAudio: !!event.audioData\n      });\n\n      dispatch(createAddAIMessageAction(event.text));\n      dispatch({ type: 'START_SPEAKING' });\n\n      // Call user callback if provided\n      currentConfig.onAgentResponse?.(event);\n\n      // Auto-transition back to waiting after response\n      setTimeout(() => {\n        dispatch({ type: 'RESET_TO_WAITING' });\n        \n        // Auto-start recording for next user input if interview is still active\n        if (agentState.interviewState === InterviewState.ACTIVE) {\n          setTimeout(() => {\n            if (voiceBridgeState.connectionState === 'connected') {\n              dispatch({ type: 'START_RECORDING' });\n            }\n          }, 1000);\n        }\n      }, 2000);\n    });\n\n    // Session events\n    bridge.on('session:started', (event) => {\n      logger.info('üéôÔ∏è [Voice Bridge Hook] Voice session started', {\n        sessionId: event.sessionId,\n        agent: event.agent\n      });\n      \n      voiceBridgeDispatch({ type: 'CONNECTION_STATE_CHANGED', payload: 'connected' });\n    });\n\n    bridge.on('session:ended', (event) => {\n      logger.info('üèÅ [Voice Bridge Hook] Voice session ended', {\n        sessionId: event.sessionId,\n        reason: event.reason\n      });\n      \n      voiceBridgeDispatch({ type: 'CONNECTION_STATE_CHANGED', payload: 'disconnected' });\n    });\n\n    bridge.on('session:error', (event) => {\n      logger.error('üí• [Voice Bridge Hook] Voice session error', event.error);\n      \n      voiceBridgeDispatch({\n        type: 'ERROR_OCCURRED',\n        payload: event.error.message\n      });\n\n      // Call user callback if provided\n      currentConfig.onSessionError?.(event.error);\n      \n      showErrorNotification(event.error);\n    });\n\n    // Sentiment analysis events\n    bridge.on('sentiment:analysis', (event) => {\n      logger.info('üí≠ [Voice Bridge Hook] Sentiment analysis', {\n        sessionId: event.sessionId,\n        sentiment: event.sentiment.label,\n        score: event.sentiment.score\n      });\n\n      // Update session metrics\n      setSessionMetrics(prev => ({\n        connectionLatency: prev?.connectionLatency || 0,\n        audioLatency: prev?.audioLatency || 0,\n        transcriptionAccuracy: event.sentiment.confidence,\n      }));\n\n      // Call user callback if provided\n      currentConfig.onSentimentAnalysis?.(event.sentiment);\n    });\n\n    // Audio synthesis events\n    bridge.on('audio:synthesis:complete', (event) => {\n      logger.info('üéµ [Voice Bridge Hook] Audio synthesis complete', {\n        sessionId: event.sessionId,\n        hasAudioData: !!event.audioData\n      });\n    });\n\n  }, [agentState.hasUserSpoken, agentState.interviewState, voiceBridgeState.connectionState]);\n\n  // ===== SESSION CONTROL FUNCTIONS =====\n\n  const startVoiceSession = useCallback(async (): Promise<void> => {\n    if (voiceBridgeState.isInitializing) {\n      logger.warn('‚ö†Ô∏è [Voice Bridge Hook] Session creation already in progress');\n      return;\n    }\n\n    try {\n      voiceBridgeDispatch({ type: 'BRIDGE_INITIALIZING' });\n\n      const { bridge, voiceSession, sessionId } = await createVoiceSession();\n\n      // Store references\n      bridgeRef.current = bridge;\n      voiceSessionRef.current = voiceSession;\n\n      // Start the bridge\n      await bridge.start();\n\n      voiceBridgeDispatch({\n        type: 'BRIDGE_CREATED',\n        payload: { bridge, voiceSession, sessionId }\n      });\n\n      // Start the interview in agent state\n      agentDispatch(createStartInterviewAction());\n\n      logger.success('‚úÖ [Voice Bridge Hook] Voice session started successfully');\n\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to start voice session';\n      voiceBridgeDispatch({\n        type: 'ERROR_OCCURRED',\n        payload: errorMessage\n      });\n      throw error;\n    }\n  }, [voiceBridgeState.isInitializing, createVoiceSession]);\n\n  const stopVoiceSession = useCallback(async (): Promise<void> => {\n    try {\n      if (bridgeRef.current) {\n        bridgeRef.current.stop();\n        bridgeRef.current = null;\n      }\n\n      if (voiceSessionRef.current) {\n        voiceSessionRef.current.stop();\n        voiceSessionRef.current = null;\n      }\n\n      voiceBridgeDispatch({ type: 'BRIDGE_DESTROYED' });\n      agentDispatch(createEndInterviewAction());\n\n      logger.success('‚úÖ [Voice Bridge Hook] Voice session stopped successfully');\n\n    } catch (error) {\n      logger.error('‚ùå [Voice Bridge Hook] Failed to stop voice session', error);\n      throw error;\n    }\n  }, []);\n\n  const retryConnection = useCallback(async (): Promise<void> => {\n    logger.info('üîÑ [Voice Bridge Hook] Retrying connection');\n    \n    voiceBridgeDispatch({ type: 'RETRY_ATTEMPTED' });\n    \n    try {\n      // Stop existing session if any\n      if (bridgeRef.current) {\n        bridgeRef.current.stop();\n      }\n      \n      // Wait a bit before retrying\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Start new session\n      await startVoiceSession();\n      \n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Retry failed';\n      voiceBridgeDispatch({\n        type: 'ERROR_OCCURRED',\n        payload: errorMessage\n      });\n      throw error;\n    }\n  }, [startVoiceSession]);\n\n  // ===== RECORDING CONTROLS =====\n\n  const startRecording = useCallback(() => {\n    if (voiceBridgeState.connectionState === 'connected' && bridgeRef.current) {\n      agentDispatch({ type: 'START_RECORDING' });\n      logger.audio.record('üé§ [Voice Bridge Hook] Started recording via bridge');\n    }\n  }, [voiceBridgeState.connectionState]);\n\n  const stopRecording = useCallback(() => {\n    if (voiceBridgeState.connectionState === 'connected' && bridgeRef.current) {\n      agentDispatch({ type: 'STOP_RECORDING' });\n      logger.audio.record('‚èπÔ∏è [Voice Bridge Hook] Stopped recording via bridge');\n    }\n  }, [voiceBridgeState.connectionState]);\n\n  // ===== AGENT CONTROLS =====\n\n  const handoffToAgent = useCallback(async (agentName: string, context?: any): Promise<void> => {\n    if (bridgeRef.current) {\n      await bridgeRef.current.handoffToAgent(agentName, context);\n    }\n  }, []);\n\n  const sendResponse = useCallback(async (text: string, audioData?: string): Promise<void> => {\n    if (bridgeRef.current) {\n      await bridgeRef.current.sendAudioResponse(text, audioData);\n    }\n  }, []);\n\n  // ===== CLEANUP ON UNMOUNT =====\n\n  useEffect(() => {\n    return () => {\n      if (bridgeRef.current) {\n        bridgeRef.current.stop();\n      }\n      if (voiceSessionRef.current) {\n        voiceSessionRef.current.stop();\n      }\n    };\n  }, []);\n\n  // ===== DERIVED STATE SELECTORS =====\n\n  const isRecording = selectIsRecording(agentState);\n  const isProcessing = selectIsProcessing(agentState);\n  const isSpeaking = selectIsSpeaking(agentState);\n  const isWaiting = selectIsWaiting(agentState);\n  const isInterviewActive = selectIsInterviewActive(agentState);\n  const isInterviewFinished = selectIsInterviewFinished(agentState);\n  const shouldShowFeedback = selectShouldShowFeedback(agentState);\n\n  const isVoiceConnected = voiceBridgeState.connectionState === 'connected';\n  const canStartRecording = isVoiceConnected && !isRecording && (isWaiting || isInterviewActive);\n\n  // ===== RETURN HOOK RESULT =====\n\n  return {\n    // Agent State (existing compatibility)\n    state: agentState,\n    dispatch: agentDispatch,\n\n    // Voice Bridge State\n    voiceBridge: voiceBridgeState,\n\n    // Session Controls\n    startVoiceSession,\n    stopVoiceSession,\n    retryConnection,\n\n    // Recording Controls\n    startRecording,\n    stopRecording,\n\n    // Agent Controls\n    handoffToAgent,\n    sendResponse,\n\n    // State Selectors (existing compatibility)\n    isRecording,\n    isProcessing,\n    isSpeaking,\n    isWaiting,\n    isInterviewActive,\n    isInterviewFinished,\n    shouldShowFeedback,\n\n    // Voice-specific State\n    isVoiceConnected,\n    canStartRecording,\n    sessionMetrics,\n  };\n}\n\nexport default useVoiceAgentBridge;\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/voice/voice-agent-bridge.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[517,520],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[517,520],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1376,1379],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1376,1379],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1674,1677],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1674,1677],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":161,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":161,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4257,4260],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4257,4260],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":515,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":515,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15236,15239],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15236,15239],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":518,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":518,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15392,15395],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15392,15395],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":539,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":539,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15886,15889],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15886,15889],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Voice Agent Bridge\n * Connects VoiceSession with AgentOrchestrator to enable voice-controlled agent interactions\n */\n\nimport { VoiceSession } from './voice-session';\nimport { \n  VoiceEventTypes, \n  VoiceEventHandler, \n  BridgeState, \n  AgentBridgeConfig, \n  SentimentAnalysis,\n  TranscriptEntry,\n  SessionRecording,\n  AudioChunk\n} from './types';\nimport { VoiceTelemetry } from './voice-telemetry';\n\n// Event emitter for voice bridge\nclass VoiceEventEmitter {\n  private handlers: Map<string, VoiceEventHandler<any>[]> = new Map();\n\n  on<T extends keyof VoiceEventTypes>(event: T, handler: VoiceEventHandler<T>): void {\n    if (!this.handlers.has(event)) {\n      this.handlers.set(event, []);\n    }\n    this.handlers.get(event)!.push(handler);\n  }\n\n  emit<T extends keyof VoiceEventTypes>(event: T, data: VoiceEventTypes[T]): void {\n    const handlers = this.handlers.get(event);\n    if (handlers) {\n      handlers.forEach(handler => handler(data));\n    }\n  }\n\n  off<T extends keyof VoiceEventTypes>(event: T, handler: VoiceEventHandler<T>): void {\n    const handlers = this.handlers.get(event);\n    if (handlers) {\n      const index = handlers.indexOf(handler);\n      if (index !== -1) {\n        handlers.splice(index, 1);\n      }\n    }\n  }\n}\n\nexport class VoiceAgentBridge extends VoiceEventEmitter {\n  private voiceSession: VoiceSession;\n  private agentOrchestrator: any; // Will be typed when AgentOrchestrator is implemented\n  private config: AgentBridgeConfig;\n  private state: BridgeState;\n  private transcript: TranscriptEntry[] = [];\n  private recording: SessionRecording | null = null;\n\n  constructor(\n    voiceSession: VoiceSession, \n    agentOrchestrator: any, \n    config?: Partial<AgentBridgeConfig>\n  ) {\n    super();\n    \n    this.voiceSession = voiceSession;\n    this.agentOrchestrator = agentOrchestrator;\n    this.config = {\n      sessionTimeout: 1800000, // 30 minutes\n      maxRetries: 3,\n      errorRecoveryMode: 'graceful',\n      sentimentMonitoring: true,\n      recordingEnabled: true,\n      transcriptStorage: 'both',\n      ...config\n    };\n\n    this.state = {\n      currentAgent: null,\n      sessionActive: false,\n      lastActivity: Date.now(),\n      pendingHandoff: false,\n      errorCount: 0,\n      recovery: {\n        inProgress: false,\n        attempts: 0,\n        lastAttempt: 0\n      }\n    };\n\n    this.setupVoiceSessionHandlers();\n    this.initializeRecording();\n\n    // Use VoiceTelemetry.startSession instead of trackSessionCreated\n    VoiceTelemetry.startSession(this.voiceSession.sessionId);\n\n    console.log('üåâ [VOICE BRIDGE] Bridge created', {\n      sessionId: this.voiceSession.sessionId,\n      config: this.config\n    });\n  }\n\n  /**\n   * Start the voice bridge and begin listening\n   */\n  public async start(): Promise<void> {\n    try {\n      console.log('üöÄ [VOICE BRIDGE] Starting bridge', {\n        sessionId: this.voiceSession.sessionId\n      });\n\n      await this.voiceSession.start();\n      this.state.sessionActive = true;\n      this.state.lastActivity = Date.now();\n\n      this.emit('session:started', {\n        sessionId: this.voiceSession.sessionId,\n        agent: this.state.currentAgent || 'initial'\n      });\n\n      // Set up activity timeout\n      this.setupActivityTimeout();\n\n      // Session already tracked in constructor, no need to track again\n\n      console.log('‚úÖ [VOICE BRIDGE] Bridge started successfully');\n\n    } catch (error) {\n      const bridgeError = error instanceof Error ? error : new Error('Failed to start bridge');\n      \n      VoiceTelemetry.trackError(bridgeError, this.voiceSession.sessionId, 'BRIDGE_START_FAILED');\n\n      this.handleError(bridgeError);\n      throw bridgeError;\n    }\n  }\n\n  /**\n   * Stop the voice bridge\n   */\n  public stop(): void {\n    console.log('üõë [VOICE BRIDGE] Stopping bridge', {\n      sessionId: this.voiceSession.sessionId\n    });\n\n    this.state.sessionActive = false;\n    this.voiceSession.stop();\n\n    if (this.recording) {\n      this.finalizeRecording();\n    }\n\n    this.emit('session:ended', {\n      sessionId: this.voiceSession.sessionId,\n      reason: 'user_stopped'\n    });\n\n    console.log('üèÅ [VOICE BRIDGE] Bridge stopped');\n  }\n\n  /**\n   * Handle agent handoff\n   */\n  public async handoffToAgent(agentName: string, context?: any): Promise<void> {\n    if (this.state.pendingHandoff) {\n      console.warn('‚ö†Ô∏è [VOICE BRIDGE] Handoff already in progress');\n      return;\n    }\n\n    try {\n      this.state.pendingHandoff = true;\n      const previousAgent = this.state.currentAgent;\n\n      console.log('üîÑ [VOICE BRIDGE] Handing off to agent', {\n        from: previousAgent,\n        to: agentName,\n        sessionId: this.voiceSession.sessionId\n      });\n\n      // Notify agent orchestrator about handoff\n      if (this.agentOrchestrator?.handoff) {\n        await this.agentOrchestrator.handoff(agentName, context);\n      }\n\n      this.state.currentAgent = agentName;\n      this.state.pendingHandoff = false;\n      this.state.lastActivity = Date.now();\n\n      this.emit('agent:handoff', {\n        from: previousAgent || 'none',\n        to: agentName,\n        context\n      });\n\n      // Update voice session with agent-specific settings if available\n      const agentVoiceSettings = this.getAgentVoiceSettings(agentName);\n      if (agentVoiceSettings) {\n        // TODO: Implement updateSettings method in VoiceSession\n        console.log('üéõÔ∏è [VOICE BRIDGE] Would update voice settings for agent:', agentName, agentVoiceSettings);\n        // this.voiceSession.updateSettings(agentVoiceSettings);\n      }\n\n      console.log('‚úÖ [VOICE BRIDGE] Handoff completed', {\n        currentAgent: agentName\n      });\n\n    } catch (error) {\n      this.state.pendingHandoff = false;\n      const handoffError = error instanceof Error ? error : new Error('Agent handoff failed');\n      \n      VoiceTelemetry.trackError(handoffError, this.voiceSession.sessionId, 'AGENT_HANDOFF_FAILED');\n\n      this.handleError(handoffError);\n      throw handoffError;\n    }\n  }\n\n  /**\n   * Send synthesized audio response\n   */\n  public async sendAudioResponse(text: string, audioData?: string): Promise<void> {\n    try {\n      this.state.lastActivity = Date.now();\n\n      this.emit('agent:response', {\n        agent: this.state.currentAgent || 'unknown',\n        text,\n        audioData\n      });\n\n      // Add to transcript\n      this.addToTranscript('agent', text);\n\n      // Add to recording if enabled\n      if (audioData && this.config.recordingEnabled) {\n        this.addAudioToRecording('agent', audioData);\n      }\n\n      // Perform sentiment analysis if enabled\n      if (this.config.sentimentMonitoring) {\n        this.performSentimentAnalysis(text, 'agent');\n      }\n\n      console.log('üéµ [VOICE BRIDGE] Audio response sent', {\n        agent: this.state.currentAgent,\n        textLength: text.length,\n        hasAudio: !!audioData\n      });\n\n    } catch (error) {\n      const responseError = error instanceof Error ? error : new Error('Failed to send audio response');\n      VoiceTelemetry.trackError(responseError, this.voiceSession.sessionId, 'AUDIO_RESPONSE_FAILED');\n      this.handleError(responseError);\n    }\n  }\n\n  /**\n   * Get current session state\n   */\n  public getState(): BridgeState {\n    return { ...this.state };\n  }\n\n  /**\n   * Get current transcript\n   */\n  public getTranscript(): TranscriptEntry[] {\n    return [...this.transcript];\n  }\n\n  /**\n   * Get current recording\n   */\n  public getRecording(): SessionRecording | null {\n    return this.recording ? { ...this.recording } : null;\n  }\n\n  // ===== PRIVATE METHODS =====\n\n  private setupVoiceSessionHandlers(): void {\n    // Handle transcript from voice session\n    this.voiceSession.onTranscript((event) => {\n      this.handleUserTranscript(event.text);\n    });\n\n    // Handle audio responses using onResponse callback\n    this.voiceSession.onResponse((event) => {\n      this.handleAudioResponse(event.audioData.toString()); // Convert Blob to string if needed\n    });\n\n    // TODO: Add session ready, error, and disconnect handlers when VoiceSession API is complete\n    console.log('üîó [VOICE BRIDGE] Voice session handlers setup complete');\n  }\n\n  private async handleUserTranscript(transcript: string): Promise<void> {\n    try {\n      this.state.lastActivity = Date.now();\n\n      console.log('üìù [VOICE BRIDGE] User transcript received', {\n        transcript: transcript.substring(0, 100) + (transcript.length > 100 ? '...' : ''),\n        length: transcript.length\n      });\n\n      // Add to transcript\n      this.addToTranscript('user', transcript);\n\n      // Emit transcript event\n      const transcriptEntry: TranscriptEntry = {\n        id: `transcript-${Date.now()}`,\n        timestamp: Date.now(),\n        speaker: 'user',\n        text: transcript,\n        confidence: 0.95 // Will be real confidence from Azure\n      };\n\n      this.emit('transcript:final', {\n        sessionId: this.voiceSession.sessionId,\n        entry: transcriptEntry\n      });\n\n      // Perform sentiment analysis if enabled\n      if (this.config.sentimentMonitoring) {\n        this.performSentimentAnalysis(transcript, 'user');\n      }\n\n      // Route to agent orchestrator if available\n      if (this.agentOrchestrator?.handleInput) {\n        this.emit('agent:thinking', {\n          agent: this.state.currentAgent || 'system',\n          isThinking: true\n        });\n\n        const response = await this.agentOrchestrator.handleInput(transcript, {\n          sessionId: this.voiceSession.sessionId,\n          currentAgent: this.state.currentAgent,\n          context: this.getConversationContext()\n        });\n\n        this.emit('agent:thinking', {\n          agent: this.state.currentAgent || 'system',\n          isThinking: false\n        });\n\n        if (response) {\n          await this.sendAudioResponse(response.text, response.audioData);\n        }\n      }\n\n    } catch (error) {\n      const transcriptError = error instanceof Error ? error : new Error('Failed to handle transcript');\n      VoiceTelemetry.trackError(transcriptError, this.voiceSession.sessionId, 'TRANSCRIPT_PROCESSING_FAILED');\n      this.handleError(transcriptError);\n    }\n  }\n\n  private handleAudioResponse(audioData: string): void {\n    this.state.lastActivity = Date.now();\n\n    this.emit('audio:synthesis:complete', {\n      sessionId: this.voiceSession.sessionId,\n      audioData\n    });\n\n    // Add to recording if enabled\n    if (this.config.recordingEnabled) {\n      this.addAudioToRecording('agent', audioData);\n    }\n  }\n\n  private addToTranscript(speaker: 'user' | 'agent', text: string): void {\n    const entry: TranscriptEntry = {\n      id: `transcript-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      timestamp: Date.now(),\n      speaker,\n      text,\n      confidence: speaker === 'user' ? 0.95 : 1.0\n    };\n\n    this.transcript.push(entry);\n\n    // Store transcript based on configuration\n    if (this.config.transcriptStorage === 'persistent' || this.config.transcriptStorage === 'both') {\n      this.persistTranscript(entry);\n    }\n\n    console.log(`üìù [VOICE BRIDGE] Added to transcript`, {\n      speaker,\n      length: text.length,\n      totalEntries: this.transcript.length\n    });\n  }\n\n  private initializeRecording(): void {\n    if (!this.config.recordingEnabled) {\n      return;\n    }\n\n    this.recording = {\n      sessionId: this.voiceSession.sessionId,\n      startTime: Date.now(),\n      totalDuration: 0,\n      chunks: [],\n      storageLocation: {\n        containerName: 'voice-recordings',\n        blobName: `session-${this.voiceSession.sessionId}-${Date.now()}.wav`\n      },\n      processingStatus: 'uploading'\n    };\n\n    console.log('üéôÔ∏è [VOICE BRIDGE] Recording initialized', {\n      sessionId: this.voiceSession.sessionId,\n      blobName: this.recording.storageLocation.blobName\n    });\n  }\n\n  private addAudioToRecording(speaker: 'user' | 'agent', audioData: string): void {\n    if (!this.recording || !this.config.recordingEnabled) {\n      return;\n    }\n\n    try {\n      // Decode base64 audio data\n      const audioBuffer = this.base64ToArrayBuffer(audioData);\n      \n      const chunk: AudioChunk = {\n        id: `chunk-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        sessionId: this.voiceSession.sessionId,\n        timestamp: Date.now(),\n        duration: 1000, // Will be calculated based on audio data\n        format: 'pcm16',\n        sampleRate: 16000,\n        data: audioBuffer,\n        metadata: {\n          speaker,\n          quality: 'medium',\n          noiseLevel: 0.1\n        }\n      };\n\n      this.recording.chunks.push(chunk);\n      this.recording.totalDuration += chunk.duration;\n\n      console.log('üéµ [VOICE BRIDGE] Audio chunk added to recording', {\n        speaker,\n        chunkId: chunk.id,\n        totalChunks: this.recording.chunks.length\n      });\n\n    } catch (error) {\n      console.error('‚ùå [VOICE BRIDGE] Failed to add audio to recording:', error);\n    }\n  }\n\n  private finalizeRecording(): void {\n    if (!this.recording) {\n      return;\n    }\n\n    this.recording.endTime = Date.now();\n    this.recording.processingStatus = 'processing';\n\n    // In a real implementation, this would upload to blob storage\n    console.log('üì¶ [VOICE BRIDGE] Recording finalized', {\n      sessionId: this.voiceSession.sessionId,\n      duration: this.recording.totalDuration,\n      chunks: this.recording.chunks.length\n    });\n  }\n\n  private performSentimentAnalysis(text: string, speaker: 'user' | 'agent'): void {\n    // Simple sentiment analysis implementation\n    // In production, this would use Azure Cognitive Services\n    const stressWords = ['nervous', 'worried', 'difficult', 'hard', 'struggle', 'confused', 'stuck'];\n    const positiveWords = ['good', 'great', 'excellent', 'confident', 'sure', 'excited', 'happy'];\n    \n    const words = text.toLowerCase().split(' ');\n    const stressWordCount = words.filter(word => stressWords.includes(word)).length;\n    const positiveWordCount = words.filter(word => positiveWords.includes(word)).length;\n    \n    let score = 0;\n    if (positiveWordCount > stressWordCount) {\n      score = 0.7;\n    } else if (stressWordCount > positiveWordCount) {\n      score = -0.5;\n    }\n\n    const sentiment: SentimentAnalysis = {\n      score,\n      magnitude: Math.abs(score),\n      label: score > 0.5 ? 'positive' : score < -0.3 ? 'negative' : 'neutral',\n      confidence: 0.8,\n      stressIndicators: {\n        hasHighStressWords: stressWordCount > 0,\n        stressWords: words.filter(word => stressWords.includes(word)),\n        speechPattern: stressWordCount > 2 ? 'hesitant' : 'normal',\n        emotionalState: score > 0.5 ? 'calm' : score < -0.3 ? 'nervous' : 'calm'\n      }\n    };\n\n    this.emit('sentiment:analysis', {\n      sessionId: this.voiceSession.sessionId,\n      sentiment\n    });\n\n    if (sentiment.stressIndicators.hasHighStressWords && speaker === 'user') {\n      this.emit('sentiment:stress:detected', {\n        sessionId: this.voiceSession.sessionId,\n        level: stressWordCount > 2 ? 'high' : 'moderate',\n        suggestions: [\n          'Consider taking a brief pause',\n          'Remind the candidate to take their time',\n          'Ask if they need clarification'\n        ]\n      });\n    }\n  }\n\n  private getAgentVoiceSettings(agentName: string): Partial<any> {\n    // Return agent-specific voice settings\n    // This would be expanded when agent classes are implemented\n    const agentSettings: Record<string, any> = {\n      'technical': {\n        voice: 'en-US-JennyNeural',\n        temperature: 0.7,\n        responseStyle: 'detailed'\n      },\n      'behavioral': {\n        voice: 'en-US-AvaMultilingualNeural',\n        temperature: 0.8,\n        responseStyle: 'empathetic'\n      },\n      'general': {\n        voice: 'en-US-AriaNeural',\n        temperature: 0.6,\n        responseStyle: 'conversational'\n      }\n    };\n\n    return agentSettings[agentName] || {};\n  }\n\n  private getConversationContext(): any {\n    return {\n      transcriptLength: this.transcript.length,\n      lastMessages: this.transcript.slice(-5),\n      sessionDuration: Date.now() - (this.recording?.startTime || Date.now()),\n      currentAgent: this.state.currentAgent,\n      errorCount: this.state.errorCount\n    };\n  }\n\n  private persistTranscript(entry: TranscriptEntry): void {\n    // In production, this would save to persistent storage\n    console.log('üíæ [VOICE BRIDGE] Transcript entry persisted', {\n      id: entry.id,\n      speaker: entry.speaker,\n      length: entry.text.length\n    });\n  }\n\n  private setupActivityTimeout(): void {\n    const checkActivity = () => {\n      const timeSinceActivity = Date.now() - this.state.lastActivity;\n      \n      if (timeSinceActivity > this.config.sessionTimeout) {\n        console.log('‚è∞ [VOICE BRIDGE] Session timeout reached');\n        this.stop();\n        return;\n      }\n\n      setTimeout(checkActivity, 60000); // Check every minute\n    };\n\n    setTimeout(checkActivity, 60000);\n  }\n\n  private handleError(error: Error): void {\n    this.state.errorCount++;\n    \n    console.error('üí• [VOICE BRIDGE] Error occurred', {\n      message: error.message,\n      errorCount: this.state.errorCount\n    });\n\n    this.emit('session:error', {\n      sessionId: this.voiceSession.sessionId,\n      error\n    });\n\n    // Implement recovery based on configuration\n    if (this.config.errorRecoveryMode === 'graceful' && this.state.errorCount < this.config.maxRetries) {\n      this.attemptRecovery();\n    }\n  }\n\n  private async attemptRecovery(): Promise<void> {\n    if (this.state.recovery.inProgress) {\n      return;\n    }\n\n    this.state.recovery.inProgress = true;\n    this.state.recovery.attempts++;\n    this.state.recovery.lastAttempt = Date.now();\n\n    try {\n      console.log('üîß [VOICE BRIDGE] Attempting recovery', {\n        attempt: this.state.recovery.attempts,\n        maxRetries: this.config.maxRetries\n      });\n\n      // Simple recovery: try to reconnect voice session\n      if (this.voiceSession.getState() !== 'active') {\n        await this.voiceSession.start();\n      }\n\n      this.state.recovery.inProgress = false;\n      console.log('‚úÖ [VOICE BRIDGE] Recovery successful');\n\n    } catch (error) {\n      this.state.recovery.inProgress = false;\n      console.error('‚ùå [VOICE BRIDGE] Recovery failed:', error);\n      \n      if (this.state.recovery.attempts >= this.config.maxRetries) {\n        console.error('üö® [VOICE BRIDGE] Max recovery attempts reached, stopping bridge');\n        this.stop();\n      }\n    }\n  }\n\n  private base64ToArrayBuffer(base64: string): ArrayBuffer {\n    const binaryString = atob(base64);\n    const bytes = new Uint8Array(binaryString.length);\n    for (let i = 0; i < binaryString.length; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n    return bytes.buffer;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/voice/voice-insights.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[936,939],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[936,939],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":57,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1709,1712],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1709,1712],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":272,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":272,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8642,8645],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8642,8645],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":281,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":281,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8941,8944],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8941,8944],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":324,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":324,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10051,10054],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10051,10054],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Voice Insights - Application Insights integration for voice system\n * \n * Provides structured logging, metrics collection, and error tracking\n * for the Azure AI Foundry voice interview system.\n */\n\nimport { ApplicationInsights } from '@microsoft/applicationinsights-web';\nimport { logger } from '@/lib/utils/logger';\n\n// Voice-specific telemetry events\nexport interface VoiceSessionTelemetry {\n  sessionId: string;\n  userId?: string;\n  interviewType?: string;\n  connectionState: 'connecting' | 'connected' | 'disconnected' | 'error';\n  duration?: number;\n  audioLatency?: number;\n  transcriptionAccuracy?: number;\n  errorCount?: number;\n  retryAttempts?: number;\n}\n\nexport interface VoiceErrorTelemetry {\n  sessionId: string;\n  errorType: 'connection' | 'audio' | 'transcription' | 'synthesis' | 'bridge';\n  errorCode?: string;\n  errorMessage: string;\n  isRecoverable: boolean;\n  stackTrace?: string;\n  context?: Record<string, any>;\n}\n\nexport interface VoiceMetricsTelemetry {\n  sessionId: string;\n  metricName: 'stt_latency' | 'tts_latency' | 'connection_latency' | 'audio_quality' | 'transcript_accuracy';\n  value: number;\n  unit: 'ms' | 'percentage' | 'ratio' | 'count';\n  timestamp: number;\n  tags?: Record<string, string>;\n}\n\nexport interface VoiceUsageTelemetry {\n  sessionId: string;\n  userId: string;\n  featureUsed: 'voice_interview' | 'agent_handoff' | 'sentiment_analysis' | 'recording';\n  interactionCount: number;\n  duration: number;\n  quotaUsed?: number;\n  quotaRemaining?: number;\n}\n\nclass VoiceInsights {\n  private appInsights: ApplicationInsights | null = null;\n  private isInitialized = false;\n  private instrumentationKey: string | null = null;\n  private sessionBuffer: Map<string, any[]> = new Map();\n  private maxBufferSize = 100;\n\n  /**\n   * Initialize Application Insights for voice telemetry\n   */\n  public initialize(connectionString?: string): void {\n    try {\n      // Get connection string from environment or parameter\n      const insightsConnectionString = connectionString || \n        process.env.NEXT_PUBLIC_APPLICATIONINSIGHTS_CONNECTION_STRING ||\n        process.env.APPLICATIONINSIGHTS_CONNECTION_STRING;\n\n      if (!insightsConnectionString) {\n        logger.warn('[Voice Insights] Application Insights connection string not provided, using console fallback');\n        this.isInitialized = true; // Still mark as initialized for local development\n        return;\n      }\n\n      this.appInsights = new ApplicationInsights({\n        config: {\n          connectionString: insightsConnectionString,\n          // Voice-specific configuration\n          disableFetchTracking: false,\n          disableAjaxTracking: false,\n          disableExceptionTracking: false,\n          enableAutoRouteTracking: true,\n          enableCorsCorrelation: true,\n          enableRequestHeaderTracking: true,\n          enableResponseHeaderTracking: true,\n          // Performance optimizations\n          samplingPercentage: process.env.NODE_ENV === 'production' ? 10 : 100,\n          maxBatchInterval: 2000, // 2 seconds\n          maxBatchSizeInBytes: 64000\n        }\n      });\n\n      this.appInsights.loadAppInsights();\n      this.setupCustomTelemetryProcessor();\n      this.isInitialized = true;\n\n      logger.success('[Voice Insights] Application Insights initialized successfully');\n\n      // Track initialization\n      this.trackEvent('voice_insights_initialized', {\n        environment: process.env.NODE_ENV || 'development',\n        version: process.env.NEXT_PUBLIC_APP_VERSION || '1.0.0'\n      });\n\n    } catch (error) {\n      logger.error('[Voice Insights] Failed to initialize Application Insights', error);\n      this.isInitialized = true; // Fallback to console logging\n    }\n  }\n\n  /**\n   * Set up custom telemetry processor for voice-specific data\n   */\n  private setupCustomTelemetryProcessor(): void {\n    if (!this.appInsights) return;\n\n    // TODO: Find correct method name for adding telemetry processor in web SDK\n    // this.appInsights.addTelemetryProcessor((envelope) => {\n    //   // Add voice system context to all telemetry\n    //   if (envelope.data && envelope.data.baseData) {\n    //     envelope.data.baseData.properties = {\n    //       ...envelope.data.baseData.properties,\n    //       system: 'voice-interview',\n    //       timestamp: new Date().toISOString()\n    //     };\n    //   }\n    //   \n    //   return true;\n    // });\n    \n    logger.info('[Voice Insights] Custom telemetry processor setup skipped (not supported in web SDK)');\n  }\n\n  /**\n   * Track voice session lifecycle events\n   */\n  public trackVoiceSession(event: 'session_created' | 'session_started' | 'session_ended' | 'session_error', data: VoiceSessionTelemetry): void {\n    const eventName = `voice_${event}`;\n    \n    const properties = {\n      sessionId: data.sessionId,\n      userId: data.userId || 'anonymous',\n      interviewType: data.interviewType || 'general',\n      connectionState: data.connectionState,\n      duration: data.duration?.toString(),\n      audioLatency: data.audioLatency?.toString(),\n      transcriptionAccuracy: data.transcriptionAccuracy?.toString(),\n      errorCount: data.errorCount?.toString(),\n      retryAttempts: data.retryAttempts?.toString()\n    };\n\n    const measurements = {\n      duration: data.duration || 0,\n      audioLatency: data.audioLatency || 0,\n      transcriptionAccuracy: data.transcriptionAccuracy || 0,\n      errorCount: data.errorCount || 0,\n      retryAttempts: data.retryAttempts || 0\n    };\n\n    this.trackEvent(eventName, properties, measurements);\n\n    // Log for development\n    logger.info(`[Voice Insights] ${eventName}`, {\n      sessionId: data.sessionId,\n      state: data.connectionState,\n      duration: data.duration\n    });\n  }\n\n  /**\n   * Track voice system errors with detailed context\n   */\n  public trackVoiceError(error: VoiceErrorTelemetry): void {\n    const properties = {\n      sessionId: error.sessionId,\n      errorType: error.errorType,\n      errorCode: error.errorCode || 'unknown',\n      errorMessage: error.errorMessage,\n      isRecoverable: error.isRecoverable.toString(),\n      stackTrace: error.stackTrace,\n      ...error.context\n    };\n\n    // Track as both event and exception\n    this.trackEvent('voice_error', properties);\n    \n    if (this.appInsights && error.stackTrace) {\n      this.appInsights.trackException({\n        exception: new Error(error.errorMessage),\n        properties,\n        severityLevel: error.isRecoverable ? 1 : 3 // Warning vs Error\n      });\n    }\n\n    logger.error(`[Voice Insights] Voice error - ${error.errorType}`, {\n      sessionId: error.sessionId,\n      errorCode: error.errorCode,\n      message: error.errorMessage,\n      recoverable: error.isRecoverable\n    });\n  }\n\n  /**\n   * Track voice performance metrics\n   */\n  public trackVoiceMetric(metric: VoiceMetricsTelemetry): void {\n    const properties = {\n      sessionId: metric.sessionId,\n      metricName: metric.metricName,\n      unit: metric.unit,\n      timestamp: metric.timestamp.toString(),\n      ...metric.tags\n    };\n\n    const measurements = {\n      [metric.metricName]: metric.value\n    };\n\n    this.trackEvent('voice_metric', properties, measurements);\n\n    // Track as custom metric if available\n    if (this.appInsights) {\n      this.appInsights.trackMetric({\n        name: `voice_${metric.metricName}`,\n        average: metric.value\n      }, properties);\n    }\n\n    // Log significant metrics\n    if (metric.metricName === 'stt_latency' && metric.value > 1000) {\n      logger.warn('[Voice Insights] High STT latency detected', {\n        sessionId: metric.sessionId,\n        latency: metric.value\n      });\n    }\n  }\n\n  /**\n   * Track feature usage for quota and analytics\n   */\n  public trackVoiceUsage(usage: VoiceUsageTelemetry): void {\n    const properties = {\n      sessionId: usage.sessionId,\n      userId: usage.userId,\n      featureUsed: usage.featureUsed,\n      interactionCount: usage.interactionCount.toString(),\n      duration: usage.duration.toString(),\n      quotaUsed: usage.quotaUsed?.toString(),\n      quotaRemaining: usage.quotaRemaining?.toString()\n    };\n\n    const measurements = {\n      interactionCount: usage.interactionCount,\n      duration: usage.duration,\n      quotaUsed: usage.quotaUsed || 0,\n      quotaRemaining: usage.quotaRemaining || 0\n    };\n\n    this.trackEvent('voice_usage', properties, measurements);\n\n    logger.info('[Voice Insights] Feature usage tracked', {\n      feature: usage.featureUsed,\n      user: usage.userId,\n      interactions: usage.interactionCount\n    });\n  }\n\n  /**\n   * Track custom voice events\n   */\n  public trackVoiceEvent(eventName: string, properties?: Record<string, any>, measurements?: Record<string, number>): void {\n    this.trackEvent(`voice_${eventName}`, properties, measurements);\n  }\n\n  /**\n   * Batch track multiple events for performance\n   */\n  public batchTrackEvents(sessionId: string, events: Array<{\n    name: string;\n    properties?: Record<string, any>;\n    measurements?: Record<string, number>;\n  }>): void {\n    if (!this.isInitialized) return;\n\n    // Add to session buffer\n    if (!this.sessionBuffer.has(sessionId)) {\n      this.sessionBuffer.set(sessionId, []);\n    }\n\n    const buffer = this.sessionBuffer.get(sessionId)!;\n    buffer.push(...events);\n\n    // Flush if buffer is full\n    if (buffer.length >= this.maxBufferSize) {\n      this.flushSessionBuffer(sessionId);\n    }\n  }\n\n  /**\n   * Flush buffered events for a session\n   */\n  public flushSessionBuffer(sessionId: string): void {\n    const buffer = this.sessionBuffer.get(sessionId);\n    if (!buffer || buffer.length === 0) return;\n\n    logger.info('[Voice Insights] Flushing session buffer', {\n      sessionId,\n      eventCount: buffer.length\n    });\n\n    // Track all buffered events\n    for (const event of buffer) {\n      this.trackEvent(event.name, event.properties, event.measurements);\n    }\n\n    // Clear buffer\n    this.sessionBuffer.delete(sessionId);\n  }\n\n  /**\n   * Generic event tracking with fallback\n   */\n  private trackEvent(eventName: string, properties?: Record<string, any>, measurements?: Record<string, number>): void {\n    if (!this.isInitialized) {\n      logger.info(`[Voice Insights] ${eventName}`, { properties, measurements });\n      return;\n    }\n\n    try {\n      if (this.appInsights) {\n        this.appInsights.trackEvent({\n          name: eventName,\n          properties: properties || {},\n          measurements: measurements || {}\n        });\n      } else {\n        // Fallback to console logging\n        logger.info(`[Voice Insights] ${eventName}`, { properties, measurements });\n      }\n    } catch (error) {\n      logger.error('[Voice Insights] Failed to track event', error);\n    }\n  }\n\n  /**\n   * Set user context for telemetry correlation\n   */\n  public setUser(userId: string, accountId?: string): void {\n    if (!this.appInsights) return;\n\n    this.appInsights.setAuthenticatedUserContext(userId, accountId);\n    \n    logger.info('[Voice Insights] User context set', { userId, accountId });\n  }\n\n  /**\n   * Clear user context\n   */\n  public clearUser(): void {\n    if (!this.appInsights) return;\n\n    this.appInsights.clearAuthenticatedUserContext();\n    \n    logger.info('[Voice Insights] User context cleared');\n  }\n\n  /**\n   * Force flush all pending telemetry\n   */\n  public flush(): void {\n    if (!this.appInsights) return;\n\n    this.appInsights.flush();\n    \n    // Flush all session buffers\n    for (const sessionId of this.sessionBuffer.keys()) {\n      this.flushSessionBuffer(sessionId);\n    }\n\n    logger.info('[Voice Insights] Telemetry flushed');\n  }\n\n  /**\n   * Get initialization status\n   */\n  public get initialized(): boolean {\n    return this.isInitialized;\n  }\n\n  /**\n   * Get Application Insights instance\n   */\n  public get instance(): ApplicationInsights | null {\n    return this.appInsights;\n  }\n}\n\n// Export singleton instance\nexport const voiceInsights = new VoiceInsights();\n\n// Auto-initialize with environment variables\nif (typeof window !== 'undefined') {\n  voiceInsights.initialize();\n}\n\nexport default voiceInsights;\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/voice/voice-live-client.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1452,1455],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1452,1455],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2148,2151],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2148,2151],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":253,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":253,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7138,7141],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7138,7141],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":263,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":263,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7391,7394],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7391,7394],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":270,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":270,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7549,7552],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7549,7552],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":296,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":296,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8276,8279],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8276,8279],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Azure AI Foundry Voice Live Client\n * \n * Provides real-time voice streaming capabilities using Azure AI Foundry's voice services.\n * Features WebSocket-based audio streaming, exponential backoff retry logic, and session management.\n */\n\nimport { getEnv, type VoiceEnvironmentConfig, validateVoiceConfig } from './foundry-environment';\nimport { VoiceTelemetry, VoiceConnectionError } from './voice-telemetry';\n\n/**\n * Voice session options for creating new sessions\n */\nexport interface VoiceSessionOptions {\n  voiceName?: string;\n  locale?: string;\n  speakingRate?: number;\n  emotionalTone?: string;\n  audioSettings?: {\n    noiseSuppression?: boolean;\n    echoCancellation?: boolean;\n    interruptionDetection?: boolean;\n    sampleRate?: number;\n  };\n}\n\n/**\n * Voice session metadata returned when creating a session\n */\nexport interface VoiceSession {\n  sessionId: string;\n  wsUrl: string;\n  options: VoiceSessionOptions;\n  createdAt: Date;\n}\n\n/**\n * Voice settings that can be updated at runtime\n */\nexport interface VoiceSettings {\n  voiceName?: string;\n  speakingRate?: number;\n  emotionalTone?: string;\n}\n\n/**\n * WebSocket connection state\n */\nexport type ConnectionState = 'disconnected' | 'connecting' | 'connected' | 'error' | 'closed';\n\n/**\n * WebSocket message types for Azure AI Foundry voice service\n */\nexport interface VoiceWebSocketMessage {\n  type: 'audio' | 'transcript' | 'response' | 'control' | 'error' | 'config';\n  data?: any;\n  sessionId?: string;\n  timestamp?: number;\n}\n\n/**\n * Audio frame data for streaming\n */\nexport interface AudioFrame {\n  audioData: ArrayBuffer | Uint8Array;\n  timestamp: number;\n  sampleRate: number;\n  channels: number;\n}\n\n/**\n * WebSocket Manager with exponential backoff and retry logic\n */\nclass WebSocketManager {\n  private ws: WebSocket | null = null;\n  private connectionState: ConnectionState = 'disconnected';\n  private retryCount = 0;\n  private readonly maxRetries = 5;\n  private readonly baseDelay = 1000; // 1 second\n  private readonly maxDelay = 30000; // 30 seconds\n  private retryTimeoutId: NodeJS.Timeout | null = null;\n\n  private eventListeners = new Map<string, Set<(data: any) => void>>();\n\n  constructor(\n    private url: string,\n    private protocols?: string[]\n  ) {}\n\n  /**\n   * Connect to WebSocket with retry logic\n   */\n  async connect(): Promise<void> {\n    if (this.connectionState === 'connected' || this.connectionState === 'connecting') {\n      return;\n    }\n\n    this.connectionState = 'connecting';\n    console.log(`üîå [WebSocketManager] Connecting to ${this.url}...`);\n    \n    // Track connection attempt\n    const connectionStartTime = Date.now();\n    VoiceTelemetry.trackConnection('connecting', 'websocket', { retryCount: this.retryCount });\n\n    try {\n      this.ws = new WebSocket(this.url, this.protocols);\n      \n      this.ws.onopen = () => {\n        const connectionTime = Date.now() - connectionStartTime;\n        console.log('‚úÖ [WebSocketManager] Connected successfully');\n        this.connectionState = 'connected';\n        this.retryCount = 0; // Reset retry count on successful connection\n        \n        // Track successful connection\n        VoiceTelemetry.trackConnection('connected', 'websocket', { \n          connectionTime,\n          retryCount: 0 \n        });\n        \n        this.emit('connected', null);\n      };\n\n      this.ws.onclose = (event) => {\n        console.log(`üîå [WebSocketManager] Connection closed: ${event.code} ${event.reason}`);\n        this.connectionState = 'disconnected';\n        \n        // Track disconnection with reason\n        VoiceTelemetry.trackConnection('disconnected', 'websocket', {\n          disconnectionReason: `${event.code}: ${event.reason}`,\n          retryCount: this.retryCount\n        });\n        \n        this.emit('disconnected', { code: event.code, reason: event.reason });\n        \n        // Auto-retry if not a normal closure\n        if (event.code !== 1000 && this.retryCount < this.maxRetries) {\n          this.scheduleReconnect();\n        }\n      };\n\n      this.ws.onerror = (error) => {\n        console.error('‚ùå [WebSocketManager] Connection error:', error);\n        this.connectionState = 'error';\n        this.emit('error', error);\n      };\n\n      this.ws.onmessage = (event) => {\n        try {\n          const message: VoiceWebSocketMessage = JSON.parse(event.data);\n          console.log(`üì® [WebSocketManager] Received message type: ${message.type}`);\n          this.emit('message', message);\n          this.emit(message.type, message.data);\n        } catch (error) {\n          console.error('‚ùå [WebSocketManager] Failed to parse message:', error);\n          // Handle binary audio data\n          if (event.data instanceof ArrayBuffer || event.data instanceof Blob) {\n            this.emit('binaryData', event.data);\n          }\n        }\n      };\n\n      // Wait for connection to establish or fail\n      await this.waitForConnection();\n\n    } catch (error) {\n      console.error('‚ùå [WebSocketManager] Connection failed:', error);\n      this.connectionState = 'error';\n      \n      // Track connection failure\n      const connectionError = new VoiceConnectionError(\n        `Connection failed: ${error instanceof Error ? error.message : String(error)}`,\n        'websocket',\n        this.retryCount,\n        error instanceof Error ? error : undefined\n      );\n      \n      VoiceTelemetry.trackError(connectionError, 'websocket', 'WebSocket Connection', false);\n      \n      if (this.retryCount < this.maxRetries) {\n        this.scheduleReconnect();\n      } else {\n        throw connectionError;\n      }\n    }\n  }\n\n  /**\n   * Send data through WebSocket\n   */\n  send(data: string | ArrayBuffer | Uint8Array): boolean {\n    if (this.connectionState !== 'connected' || !this.ws) {\n      console.warn('‚ö†Ô∏è [WebSocketManager] Cannot send: not connected');\n      return false;\n    }\n\n    try {\n      this.ws.send(data);\n      return true;\n    } catch (error) {\n      console.error('‚ùå [WebSocketManager] Send failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Send audio frame with proper formatting\n   */\n  sendAudioFrame(frame: AudioFrame): boolean {\n    const message: VoiceWebSocketMessage = {\n      type: 'audio',\n      data: {\n        audioData: Array.from(new Uint8Array(frame.audioData)),\n        timestamp: frame.timestamp,\n        sampleRate: frame.sampleRate,\n        channels: frame.channels\n      },\n      timestamp: Date.now()\n    };\n\n    return this.send(JSON.stringify(message));\n  }\n\n  /**\n   * Close WebSocket connection\n   */\n  close(code: number = 1000, reason: string = 'Normal closure'): void {\n    console.log(`üîå [WebSocketManager] Closing connection: ${code} ${reason}`);\n    \n    if (this.retryTimeoutId) {\n      clearTimeout(this.retryTimeoutId);\n      this.retryTimeoutId = null;\n    }\n\n    if (this.ws) {\n      this.connectionState = 'closed';\n      this.ws.close(code, reason);\n      this.ws = null;\n    }\n\n    this.eventListeners.clear();\n  }\n\n  /**\n   * Get current connection state\n   */\n  getState(): ConnectionState {\n    return this.connectionState;\n  }\n\n  /**\n   * Add event listener\n   */\n  on(event: string, callback: (data: any) => void): void {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, new Set());\n    }\n    this.eventListeners.get(event)!.add(callback);\n  }\n\n  /**\n   * Remove event listener\n   */\n  off(event: string, callback: (data: any) => void): void {\n    this.eventListeners.get(event)?.delete(callback);\n  }\n\n  /**\n   * Emit event to listeners\n   */\n  private emit(event: string, data: any): void {\n    this.eventListeners.get(event)?.forEach(callback => {\n      try {\n        callback(data);\n      } catch (error) {\n        console.error(`‚ùå [WebSocketManager] Event listener error for ${event}:`, error);\n      }\n    });\n  }\n\n  /**\n   * Wait for WebSocket connection to establish\n   */\n  private waitForConnection(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        reject(new Error('Connection timeout'));\n      }, 10000); // 10 second timeout\n\n      const onConnected = () => {\n        clearTimeout(timeout);\n        this.off('connected', onConnected);\n        this.off('error', onError);\n        resolve();\n      };\n\n      const onError = (error: any) => {\n        clearTimeout(timeout);\n        this.off('connected', onConnected);\n        this.off('error', onError);\n        reject(error);\n      };\n\n      this.on('connected', onConnected);\n      this.on('error', onError);\n    });\n  }\n\n  /**\n   * Schedule reconnection with exponential backoff\n   */\n  private scheduleReconnect(): void {\n    this.retryCount++;\n    const delay = Math.min(\n      this.baseDelay * Math.pow(2, this.retryCount - 1) + Math.random() * 1000,\n      this.maxDelay\n    );\n\n    console.log(`üîÑ [WebSocketManager] Scheduling reconnect attempt ${this.retryCount}/${this.maxRetries} in ${delay}ms`);\n    \n    this.retryTimeoutId = setTimeout(() => {\n      this.connect().catch(error => {\n        console.error('‚ùå [WebSocketManager] Reconnection failed:', error);\n      });\n    }, delay);\n  }\n}\n\n/**\n * Azure AI Foundry Voice Live Client\n */\nexport class VoiceLiveClient {\n  private config: VoiceEnvironmentConfig | null = null;\n  private activeSessions = new Map<string, VoiceSession>();\n\n  /**\n   * Initialize the client with configuration\n   */\n  async init(forceRefresh = false): Promise<void> {\n    console.log('üîß [VoiceLiveClient] Initializing...');\n    \n    this.config = await getEnv(forceRefresh);\n    \n    const validation = validateVoiceConfig(this.config);\n    if (!validation.isValid) {\n      throw new Error(`Invalid voice configuration: ${validation.errors.join(', ')}`);\n    }\n\n    console.log('‚úÖ [VoiceLiveClient] Initialized successfully');\n  }\n\n  /**\n   * Create a new voice session with default settings\n   */\n  async createSession(options: VoiceSessionOptions = {}): Promise<VoiceSession> {\n    if (!this.config) {\n      await this.init();\n    }\n\n    // Apply default settings\n    const sessionOptions: VoiceSessionOptions = {\n      voiceName: options.voiceName || 'neural-hd-professional',\n      locale: options.locale || 'en-US',\n      speakingRate: options.speakingRate || 1.0,\n      emotionalTone: options.emotionalTone || 'neutral',\n      audioSettings: {\n        noiseSuppression: true,\n        echoCancellation: true,\n        interruptionDetection: true,\n        sampleRate: 16000,\n        ...options.audioSettings\n      }\n    };\n\n    console.log('üé§ [VoiceLiveClient] Creating voice session with options:', sessionOptions);\n\n    try {\n      // Call Azure AI Foundry API to create session\n      const response = await fetch(`${this.config!.endpoint}/openai/realtime/sessions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'api-key': this.config!.apiKey,\n          'X-Project-ID': this.config!.projectId\n        },\n        body: JSON.stringify({\n          model: this.config!.deploymentName || 'gpt-4o-realtime-preview',\n          voice: sessionOptions.voiceName,\n          input_audio_format: 'pcm16',\n          output_audio_format: 'pcm16',\n          turn_detection: sessionOptions.audioSettings?.interruptionDetection ? {\n            type: 'server_vad',\n            threshold: 0.5,\n            prefix_padding_ms: 300,\n            silence_duration_ms: 800\n          } : null,\n          tools: [],\n          tool_choice: 'none',\n          temperature: 0.7,\n          max_response_output_tokens: 4096\n        })\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Session creation failed: ${response.status} ${response.statusText} - ${errorText}`);\n      }\n\n      const sessionData = await response.json();\n      \n      const session: VoiceSession = {\n        sessionId: sessionData.id,\n        wsUrl: sessionData.websocket_url,\n        options: sessionOptions,\n        createdAt: new Date()\n      };\n\n      // Store session for later reference\n      this.activeSessions.set(session.sessionId, session);\n\n      console.log(`‚úÖ [VoiceLiveClient] Session created: ${session.sessionId}`);\n      return session;\n\n    } catch (error) {\n      console.error('‚ùå [VoiceLiveClient] Session creation failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create WebSocket manager for a session\n   */\n  createWebSocketManager(session: VoiceSession): WebSocketManager {\n    return new WebSocketManager(session.wsUrl, ['realtime']);\n  }\n\n  /**\n   * Update voice settings for active sessions\n   */\n  updateSettings(sessionId: string, settings: Partial<VoiceSettings>): boolean {\n    const session = this.activeSessions.get(sessionId);\n    if (!session) {\n      console.warn(`‚ö†Ô∏è [VoiceLiveClient] Session not found: ${sessionId}`);\n      return false;\n    }\n\n    // Update session options\n    Object.assign(session.options, settings);\n\n    console.log(`üîß [VoiceLiveClient] Updated settings for session ${sessionId}:`, settings);\n    return true;\n  }\n\n  /**\n   * Get active session by ID\n   */\n  getSession(sessionId: string): VoiceSession | undefined {\n    return this.activeSessions.get(sessionId);\n  }\n\n  /**\n   * Remove session from active sessions\n   */\n  removeSession(sessionId: string): void {\n    this.activeSessions.delete(sessionId);\n    console.log(`üóëÔ∏è [VoiceLiveClient] Removed session: ${sessionId}`);\n  }\n\n  /**\n   * Get all active sessions\n   */\n  getActiveSessions(): VoiceSession[] {\n    return Array.from(this.activeSessions.values());\n  }\n\n  /**\n   * Cleanup all sessions\n   */\n  cleanup(): void {\n    console.log('üßπ [VoiceLiveClient] Cleaning up all sessions');\n    this.activeSessions.clear();\n  }\n}\n\n// Singleton instance\nlet voiceLiveClientInstance: VoiceLiveClient | null = null;\n\n/**\n * Get shared VoiceLiveClient instance\n */\nexport function getVoiceLiveClient(): VoiceLiveClient {\n  if (!voiceLiveClientInstance) {\n    voiceLiveClientInstance = new VoiceLiveClient();\n  }\n  return voiceLiveClientInstance;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/voice/voice-session.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'VoiceAudioError' is defined but never used.","line":14,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'VoiceSessionError' is defined but never used.","line":14,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":60},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1200,1203],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1200,1203],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'sessionStartTime' is assigned a value but never used.","line":96,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":96,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":220,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":220,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5750,5753],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5750,5753],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":266,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":266,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7277,7280],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7277,7280],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":295,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":295,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8360,8363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8360,8363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":328,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":328,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9436,9439],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9436,9439],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":337,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":337,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9831,9834],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9831,9834],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":402,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":402,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11974,11977],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11974,11977],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Azure AI Foundry Voice Session\n * \n * Manages the lifecycle of a voice streaming session, including audio input/output,\n * transcript handling, and WebSocket communication.\n */\n\nimport { \n  VoiceLiveClient, \n  VoiceSession as VoiceSessionMetadata, \n  AudioFrame, \n  VoiceWebSocketMessage \n} from './voice-live-client';\nimport { VoiceTelemetry, VoiceAudioError, VoiceSessionError } from './voice-telemetry';\n\n/**\n * Audio processing configuration\n */\ninterface AudioConfig {\n  sampleRate: number;\n  channels: number;\n  chunkDurationMs: number;\n  bufferSize: number;\n}\n\n/**\n * Transcript event data\n */\nexport interface TranscriptEvent {\n  text: string;\n  timestamp: number;\n  confidence?: number;\n  isFinal: boolean;\n}\n\n/**\n * Audio response event data\n */\nexport interface AudioResponseEvent {\n  audioData: Blob;\n  timestamp: number;\n  duration?: number;\n}\n\n/**\n * Session state tracking\n */\nexport type SessionState = 'idle' | 'starting' | 'active' | 'stopping' | 'stopped' | 'error';\n\n/**\n * Voice Session class for managing real-time voice streaming\n */\nexport class VoiceSession {\n  private client: VoiceLiveClient;\n  private sessionMeta: VoiceSessionMetadata;\n  private websocketManager: any; // WebSocketManager from voice-live-client\n  \n  private state: SessionState = 'idle';\n  private audioContext: AudioContext | null = null;\n  private mediaStream: MediaStream | null = null;\n  private audioWorkletNode: AudioWorkletNode | null = null;\n  \n  private transcriptCallbacks = new Set<(event: TranscriptEvent) => void>();\n  private responseCallbacks = new Set<(event: AudioResponseEvent) => void>();\n  \n  private audioConfig: AudioConfig = {\n    sampleRate: 16000,\n    channels: 1,\n    chunkDurationMs: 20, // 20ms chunks\n    bufferSize: 320 // 20ms * 16kHz = 320 samples\n  };\n\n  // Cleanup handling\n  private cleanupHandlers = new Set<() => void>();\n  private isPageUnloading = false;\n\n  constructor(client: VoiceLiveClient, sessionMeta: VoiceSessionMetadata) {\n    this.client = client;\n    this.sessionMeta = sessionMeta;\n    this.websocketManager = client.createWebSocketManager(sessionMeta);\n    \n    // Setup page unload cleanup\n    this.setupPageUnloadCleanup();\n  }\n\n  /**\n   * Start the voice session and begin audio streaming\n   */\n  async start(audioStream?: MediaStream): Promise<void> {\n    if (this.state !== 'idle') {\n      console.warn(`‚ö†Ô∏è [VoiceSession] Cannot start: current state is ${this.state}`);\n      return;\n    }\n\n    this.state = 'starting';\n    const sessionStartTime = Date.now();\n    console.log(`üöÄ [VoiceSession] Starting session ${this.sessionMeta.sessionId}...`);\n    \n    // Initialize telemetry for this session\n    VoiceTelemetry.startSession(this.sessionMeta.sessionId);\n\n    try {\n      // Initialize audio context\n      await this.initializeAudioContext();\n\n      // Get audio stream (use provided or request new one)\n      if (audioStream) {\n        this.mediaStream = audioStream;\n      } else {\n        await this.requestMicrophoneAccess();\n      }\n\n      // Connect WebSocket\n      await this.websocketManager.connect();\n\n      // Setup WebSocket event handlers\n      this.setupWebSocketHandlers();\n\n      // Start audio processing\n      await this.startAudioProcessing();\n\n      this.state = 'active';\n      console.log(`‚úÖ [VoiceSession] Session ${this.sessionMeta.sessionId} started successfully`);\n\n    } catch (error) {\n      console.error(`‚ùå [VoiceSession] Failed to start session:`, error);\n      this.state = 'error';\n      await this.cleanup();\n      throw error;\n    }\n  }\n\n  /**\n   * Register callback for transcript events\n   */\n  onTranscript(callback: (event: TranscriptEvent) => void): void {\n    this.transcriptCallbacks.add(callback);\n    \n    // Add cleanup handler\n    this.cleanupHandlers.add(() => {\n      this.transcriptCallbacks.delete(callback);\n    });\n  }\n\n  /**\n   * Register callback for audio response events\n   */\n  onResponse(callback: (event: AudioResponseEvent) => void): void {\n    this.responseCallbacks.add(callback);\n    \n    // Add cleanup handler\n    this.cleanupHandlers.add(() => {\n      this.responseCallbacks.delete(callback);\n    });\n  }\n\n  /**\n   * Stop the session gracefully\n   */\n  async stop(graceful: boolean = true): Promise<void> {\n    if (this.state === 'stopped' || this.state === 'stopping') {\n      return;\n    }\n\n    this.state = 'stopping';\n    console.log(`üõë [VoiceSession] Stopping session ${this.sessionMeta.sessionId}...`);\n\n    try {\n      if (graceful) {\n        // Send final audio chunk and wait for pending responses\n        await this.flushAudioBuffers();\n        await this.waitForPendingResponses();\n      }\n\n      // Close WebSocket connection\n      this.websocketManager.close(graceful ? 1000 : 1001, graceful ? 'Normal closure' : 'Forced closure');\n\n      // Clean up audio resources\n      await this.cleanup();\n\n      // Remove from client's active sessions\n      this.client.removeSession(this.sessionMeta.sessionId);\n\n      this.state = 'stopped';\n      console.log(`‚úÖ [VoiceSession] Session ${this.sessionMeta.sessionId} stopped successfully`);\n\n    } catch (error) {\n      console.error(`‚ùå [VoiceSession] Error stopping session:`, error);\n      this.state = 'error';\n      throw error;\n    }\n  }\n\n  /**\n   * Get current session state\n   */\n  getState(): SessionState {\n    return this.state;\n  }\n\n  /**\n   * Get session ID\n   */\n  get sessionId(): string {\n    return this.sessionMeta.sessionId;\n  }\n\n  /**\n   * Get session metadata\n   */\n  getMetadata(): VoiceSessionMetadata {\n    return { ...this.sessionMeta };\n  }\n\n  /**\n   * Initialize audio context with optimal settings\n   */\n  private async initializeAudioContext(): Promise<void> {\n    try {\n      this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)({\n        sampleRate: this.audioConfig.sampleRate,\n        latencyHint: 'interactive'\n      });\n\n      // Resume context if suspended (required by browser policies)\n      if (this.audioContext.state === 'suspended') {\n        await this.audioContext.resume();\n      }\n\n      console.log(`üéµ [VoiceSession] Audio context initialized: ${this.audioContext.sampleRate}Hz`);\n\n    } catch (error) {\n      console.error('‚ùå [VoiceSession] Failed to initialize audio context:', error);\n      throw new Error('Audio context initialization failed');\n    }\n  }\n\n  /**\n   * Request microphone access\n   */\n  private async requestMicrophoneAccess(): Promise<void> {\n    try {\n      this.mediaStream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          sampleRate: this.audioConfig.sampleRate,\n          channelCount: this.audioConfig.channels,\n          echoCancellation: this.sessionMeta.options.audioSettings?.echoCancellation ?? true,\n          noiseSuppression: this.sessionMeta.options.audioSettings?.noiseSuppression ?? true,\n          autoGainControl: true\n        }\n      });\n\n      console.log('üé§ [VoiceSession] Microphone access granted');\n\n    } catch (error) {\n      console.error('‚ùå [VoiceSession] Failed to access microphone:', error);\n      throw new Error('Microphone access denied or failed');\n    }\n  }\n\n  /**\n   * Setup WebSocket event handlers\n   */\n  private setupWebSocketHandlers(): void {\n    // Handle transcript events\n    this.websocketManager.on('transcript', (data: any) => {\n      const transcriptEvent: TranscriptEvent = {\n        text: data.text || '',\n        timestamp: data.timestamp || Date.now(),\n        confidence: data.confidence,\n        isFinal: data.is_final || false\n      };\n\n      console.log(`üìù [VoiceSession] Transcript: \"${transcriptEvent.text}\" (confidence: ${transcriptEvent.confidence})`);\n      \n      // Track transcript event with telemetry\n      VoiceTelemetry.getInstance().logTranscriptEvent(\n        transcriptEvent.isFinal ? 'transcript_final' : 'transcript_partial',\n        this.sessionMeta.sessionId,\n        transcriptEvent.text,\n        transcriptEvent.confidence\n      );\n      \n      this.transcriptCallbacks.forEach(callback => {\n        try {\n          callback(transcriptEvent);\n        } catch (error) {\n          console.error('‚ùå [VoiceSession] Transcript callback error:', error);\n          VoiceTelemetry.trackError(error as Error, this.sessionMeta.sessionId, 'Transcript callback');\n        }\n      });\n    });\n\n    // Handle audio response events\n    this.websocketManager.on('response', async (data: any) => {\n      if (data.audio_data) {\n        try {\n          // Convert audio data to blob\n          const audioData = new Uint8Array(data.audio_data);\n          const audioBlob = new Blob([audioData], { type: 'audio/wav' });\n\n          const responseEvent: AudioResponseEvent = {\n            audioData: audioBlob,\n            timestamp: data.timestamp || Date.now(),\n            duration: data.duration\n          };\n\n          console.log(`üîä [VoiceSession] Audio response received (${audioBlob.size} bytes)`);\n\n          // Play audio response\n          await this.playAudioResponse(audioBlob);\n\n          this.responseCallbacks.forEach(callback => {\n            try {\n              callback(responseEvent);\n            } catch (error) {\n              console.error('‚ùå [VoiceSession] Response callback error:', error);\n            }\n          });\n\n        } catch (error) {\n          console.error('‚ùå [VoiceSession] Failed to process audio response:', error);\n        }\n      }\n    });\n\n    // Handle connection events\n    this.websocketManager.on('disconnected', (event: any) => {\n      console.warn(`‚ö†Ô∏è [VoiceSession] WebSocket disconnected: ${event.code} ${event.reason}`);\n      if (this.state === 'active' && !this.isPageUnloading) {\n        // Auto-reconnect logic is handled by WebSocketManager\n        console.log('üîÑ [VoiceSession] WebSocket will attempt to reconnect...');\n      }\n    });\n\n    // Handle errors\n    this.websocketManager.on('error', (error: any) => {\n      console.error('‚ùå [VoiceSession] WebSocket error:', error);\n      this.state = 'error';\n    });\n  }\n\n  /**\n   * Start audio processing and streaming\n   */\n  private async startAudioProcessing(): Promise<void> {\n    if (!this.audioContext || !this.mediaStream) {\n      throw new Error('Audio context or media stream not initialized');\n    }\n\n    try {\n      // Create audio source from media stream\n      const source = this.audioContext.createMediaStreamSource(this.mediaStream);\n\n      // Create processor for audio chunking\n      this.audioWorkletNode = await this.createAudioWorkletNode();\n\n      // Connect audio pipeline\n      source.connect(this.audioWorkletNode);\n      \n      console.log('üéµ [VoiceSession] Audio processing pipeline started');\n\n    } catch (error) {\n      console.error('‚ùå [VoiceSession] Failed to start audio processing:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create audio worklet node for processing audio chunks\n   */\n  private async createAudioWorkletNode(): Promise<AudioWorkletNode> {\n    if (!this.audioContext) {\n      throw new Error('Audio context not initialized');\n    }\n\n    // Create a simple ScriptProcessorNode as fallback if AudioWorklet is not available\n    // In production, you'd want to implement a proper AudioWorklet\n    const bufferSize = 4096; // Fixed buffer size for ScriptProcessorNode\n    const processor = this.audioContext.createScriptProcessor(bufferSize, 1, 1);\n\n    processor.onaudioprocess = (event) => {\n      const inputBuffer = event.inputBuffer.getChannelData(0);\n      \n      // Create audio frame\n      const audioFrame: AudioFrame = {\n        audioData: inputBuffer.buffer.slice(0), // Copy the buffer\n        timestamp: Date.now(),\n        sampleRate: this.audioConfig.sampleRate,\n        channels: this.audioConfig.channels\n      };\n\n      // Send audio frame to WebSocket\n      if (this.websocketManager.getState() === 'connected') {\n        this.websocketManager.sendAudioFrame(audioFrame);\n      }\n    };\n\n    // Connect to destination to keep the processor active\n    processor.connect(this.audioContext.destination);\n\n    return processor as any; // Type assertion for compatibility\n  }\n\n  /**\n   * Play audio response through speakers\n   */\n  private async playAudioResponse(audioBlob: Blob): Promise<void> {\n    try {\n      if (!this.audioContext) {\n        throw new Error('Audio context not available');\n      }\n\n      // Convert blob to array buffer\n      const arrayBuffer = await audioBlob.arrayBuffer();\n      \n      // Decode audio data\n      const audioBuffer = await this.audioContext.decodeAudioData(arrayBuffer);\n      \n      // Create audio source\n      const source = this.audioContext.createBufferSource();\n      source.buffer = audioBuffer;\n      source.connect(this.audioContext.destination);\n      \n      // Play audio\n      source.start();\n      \n      console.log(`üîä [VoiceSession] Playing audio response (${audioBuffer.duration.toFixed(2)}s)`);\n\n    } catch (error) {\n      console.error('‚ùå [VoiceSession] Failed to play audio response:', error);\n      // Don't throw error to avoid breaking the session\n    }\n  }\n\n  /**\n   * Flush any pending audio buffers\n   */\n  private async flushAudioBuffers(): Promise<void> {\n    // Implementation depends on the audio processing pipeline\n    console.log('üîÑ [VoiceSession] Flushing audio buffers...');\n    \n    // Send a flush signal to the WebSocket\n    const flushMessage: VoiceWebSocketMessage = {\n      type: 'control',\n      data: { action: 'flush' },\n      sessionId: this.sessionMeta.sessionId,\n      timestamp: Date.now()\n    };\n\n    this.websocketManager.send(JSON.stringify(flushMessage));\n    \n    // Wait a bit for any pending audio to be processed\n    await new Promise(resolve => setTimeout(resolve, 100));\n  }\n\n  /**\n   * Wait for any pending responses to complete\n   */\n  private async waitForPendingResponses(): Promise<void> {\n    console.log('‚è≥ [VoiceSession] Waiting for pending responses...');\n    \n    // Simple timeout-based wait - in production, you'd track pending requests\n    await new Promise(resolve => setTimeout(resolve, 500));\n  }\n\n  /**\n   * Setup page unload cleanup\n   */\n  private setupPageUnloadCleanup(): void {\n    const handlePageUnload = () => {\n      this.isPageUnloading = true;\n      this.stop(false); // Force stop on page unload\n    };\n\n    window.addEventListener('beforeunload', handlePageUnload);\n    window.addEventListener('unload', handlePageUnload);\n\n    this.cleanupHandlers.add(() => {\n      window.removeEventListener('beforeunload', handlePageUnload);\n      window.removeEventListener('unload', handlePageUnload);\n    });\n  }\n\n  /**\n   * Clean up all resources\n   */\n  private async cleanup(): Promise<void> {\n    console.log('üßπ [VoiceSession] Cleaning up resources...');\n\n    // Stop media stream\n    if (this.mediaStream) {\n      this.mediaStream.getTracks().forEach(track => {\n        track.stop();\n        console.log(`üõë [VoiceSession] Stopped ${track.kind} track`);\n      });\n      this.mediaStream = null;\n    }\n\n    // Disconnect audio nodes\n    if (this.audioWorkletNode) {\n      this.audioWorkletNode.disconnect();\n      this.audioWorkletNode = null;\n    }\n\n    // Close audio context\n    if (this.audioContext && this.audioContext.state !== 'closed') {\n      await this.audioContext.close();\n      this.audioContext = null;\n    }\n\n    // Run cleanup handlers\n    this.cleanupHandlers.forEach(handler => {\n      try {\n        handler();\n      } catch (error) {\n        console.error('‚ùå [VoiceSession] Cleanup handler error:', error);\n      }\n    });\n    this.cleanupHandlers.clear();\n\n    // Clear callbacks\n    this.transcriptCallbacks.clear();\n    this.responseCallbacks.clear();\n\n    console.log('‚úÖ [VoiceSession] Cleanup completed');\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/voice/voice-telemetry.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[508,511],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[508,511],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":64,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1642,1645],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1642,1645],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":255,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":255,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6928,6931],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6928,6931],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":290,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":290,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7877,7880],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7877,7880],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":389,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":389,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10768,10771],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10768,10771],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Azure AI Foundry Voice Telemetry\n * \n * Provides structured logging, error handling, and metrics collection\n * specifically for the voice system with Application Insights integration.\n */\n\nimport { logger } from '@/lib/utils/logger';\nimport { reportError, showErrorNotification } from '@/lib/utils/error-utils';\n\n// Type definitions for telemetry events\nexport interface VoiceTelemetryEvent {\n  name: string;\n  timestamp: number;\n  sessionId?: string;\n  userId?: string;\n  properties?: Record<string, any>;\n  measurements?: Record<string, number>;\n}\n\nexport interface ConnectionMetrics {\n  connectionTime: number;\n  retryCount: number;\n  reconnectCount: number;\n  disconnectionReason?: string;\n  networkLatency?: number;\n}\n\nexport interface AudioMetrics {\n  sttLatency: number;      // Speech-to-text latency\n  ttsLatency: number;      // Text-to-speech latency\n  audioQuality: number;    // 0-1 quality score\n  voiceActivity: number;   // Voice activity detection score\n  bufferUnderruns: number; // Audio buffer issues\n}\n\nexport interface SessionMetrics {\n  sessionDuration: number;\n  messageCount: number;\n  transcriptAccuracy: number;\n  errorCount: number;\n  userSatisfaction?: number;\n}\n\n/**\n * Voice system specific errors with context\n */\nexport class VoiceConnectionError extends Error {\n  constructor(\n    message: string,\n    public sessionId?: string,\n    public retryCount?: number,\n    public lastError?: Error\n  ) {\n    super(message);\n    this.name = 'VoiceConnectionError';\n  }\n}\n\nexport class VoiceAudioError extends Error {\n  constructor(\n    message: string,\n    public sessionId?: string,\n    public audioContext?: any,\n    public sampleRate?: number\n  ) {\n    super(message);\n    this.name = 'VoiceAudioError';\n  }\n}\n\nexport class VoiceSessionError extends Error {\n  constructor(\n    message: string,\n    public sessionId?: string,\n    public sessionState?: string,\n    public lastAction?: string\n  ) {\n    super(message);\n    this.name = 'VoiceSessionError';\n  }\n}\n\n/**\n * Voice Telemetry Service\n */\nexport class VoiceTelemetryService {\n  private events: VoiceTelemetryEvent[] = [];\n  private sessionStartTime: number = 0;\n  private lastEventTime: number = 0;\n  \n  // Metrics aggregation\n  private connectionMetrics: Partial<ConnectionMetrics> = {};\n  private audioMetrics: Partial<AudioMetrics> = {};\n  private sessionMetrics: Partial<SessionMetrics> = {};\n\n  /**\n   * Initialize telemetry for a session\n   */\n  startSession(sessionId: string, userId?: string): void {\n    this.sessionStartTime = Date.now();\n    this.lastEventTime = this.sessionStartTime;\n    \n    this.logEvent('voice_session_started', {\n      sessionId,\n      userId,\n      userAgent: navigator.userAgent,\n      timestamp: this.sessionStartTime\n    });\n\n    // Initialize metrics\n    this.connectionMetrics = {};\n    this.audioMetrics = { bufferUnderruns: 0 };\n    this.sessionMetrics = { messageCount: 0, errorCount: 0 };\n  }\n\n  /**\n   * Log connection events with metrics\n   */\n  logConnectionEvent(\n    event: 'connecting' | 'connected' | 'disconnected' | 'reconnecting' | 'failed',\n    sessionId: string,\n    metrics?: Partial<ConnectionMetrics>\n  ): void {\n    const now = Date.now();\n    const latency = now - this.lastEventTime;\n\n    this.logEvent(`voice_connection_${event}`, {\n      sessionId,\n      latency,\n      ...metrics\n    }, {\n      connection_time: metrics?.connectionTime || 0,\n      retry_count: metrics?.retryCount || 0,\n      network_latency: metrics?.networkLatency || latency\n    });\n\n    // Update connection metrics\n    Object.assign(this.connectionMetrics, metrics);\n\n    // Log specific connection issues\n    if (event === 'failed' || event === 'disconnected') {\n      this.sessionMetrics.errorCount = (this.sessionMetrics.errorCount || 0) + 1;\n      \n      if (metrics?.disconnectionReason) {\n        logger.warn(`Voice connection ${event}: ${metrics.disconnectionReason}`, {\n          sessionId,\n          retryCount: metrics.retryCount,\n          ...metrics\n        });\n      }\n    }\n\n    this.lastEventTime = now;\n  }\n\n  /**\n   * Log audio processing events with performance metrics\n   */\n  logAudioEvent(\n    event: 'stt_start' | 'stt_complete' | 'tts_start' | 'tts_complete' | 'audio_error' | 'buffer_underrun',\n    sessionId: string,\n    metrics?: Partial<AudioMetrics>\n  ): void {\n    const now = Date.now();\n    const eventLatency = now - this.lastEventTime;\n\n    this.logEvent(`voice_audio_${event}`, {\n      sessionId,\n      eventLatency,\n      ...metrics\n    }, {\n      stt_latency: metrics?.sttLatency || 0,\n      tts_latency: metrics?.ttsLatency || 0,\n      audio_quality: metrics?.audioQuality || 0,\n      voice_activity: metrics?.voiceActivity || 0\n    });\n\n    // Update audio metrics\n    Object.assign(this.audioMetrics, metrics);\n\n    // Track buffer issues\n    if (event === 'buffer_underrun') {\n      this.audioMetrics.bufferUnderruns = (this.audioMetrics.bufferUnderruns || 0) + 1;\n      logger.warn('Audio buffer underrun detected', { sessionId, ...metrics });\n    }\n\n    // Log performance warnings\n    if (metrics?.sttLatency && metrics.sttLatency > 2000) {\n      logger.warn('High STT latency detected', { \n        sessionId, \n        latency: metrics.sttLatency,\n        threshold: 2000 \n      });\n    }\n\n    if (metrics?.ttsLatency && metrics.ttsLatency > 1500) {\n      logger.warn('High TTS latency detected', { \n        sessionId, \n        latency: metrics.ttsLatency,\n        threshold: 1500 \n      });\n    }\n\n    this.lastEventTime = now;\n  }\n\n  /**\n   * Log transcript events with accuracy metrics\n   */\n  logTranscriptEvent(\n    event: 'transcript_partial' | 'transcript_final' | 'transcript_error',\n    sessionId: string,\n    text: string,\n    confidence?: number\n  ): void {\n    this.logEvent(`voice_${event}`, {\n      sessionId,\n      textLength: text.length,\n      confidence,\n      preview: text.substring(0, 50) + (text.length > 50 ? '...' : '')\n    }, {\n      text_length: text.length,\n      confidence: confidence || 0\n    });\n\n    // Track message count and accuracy\n    if (event === 'transcript_final') {\n      this.sessionMetrics.messageCount = (this.sessionMetrics.messageCount || 0) + 1;\n      \n      if (confidence) {\n        const currentAccuracy = this.sessionMetrics.transcriptAccuracy || 0;\n        const messageCount = this.sessionMetrics.messageCount || 1;\n        this.sessionMetrics.transcriptAccuracy = (currentAccuracy * (messageCount - 1) + confidence) / messageCount;\n      }\n    }\n\n    // Log low confidence warnings\n    if (confidence && confidence < 0.7) {\n      logger.warn('Low transcript confidence', { \n        sessionId, \n        confidence, \n        text: text.substring(0, 100),\n        threshold: 0.7 \n      });\n    }\n  }\n\n  /**\n   * Log session lifecycle events\n   */\n  logSessionEvent(\n    event: 'session_created' | 'session_active' | 'session_stopped' | 'session_error',\n    sessionId: string,\n    details?: Record<string, any>\n  ): void {\n    const now = Date.now();\n    const sessionDuration = this.sessionStartTime ? now - this.sessionStartTime : 0;\n\n    this.logEvent(`voice_${event}`, {\n      sessionId,\n      sessionDuration,\n      ...details\n    }, {\n      session_duration: sessionDuration,\n      message_count: this.sessionMetrics.messageCount || 0,\n      error_count: this.sessionMetrics.errorCount || 0\n    });\n\n    // Update session metrics\n    if (event === 'session_stopped') {\n      this.sessionMetrics.sessionDuration = sessionDuration;\n      this.generateSessionSummary(sessionId);\n    }\n  }\n\n  /**\n   * Handle and log voice system errors with context\n   */\n  logError(\n    error: Error | VoiceConnectionError | VoiceAudioError | VoiceSessionError,\n    sessionId?: string,\n    context?: string,\n    shouldNotifyUser = false\n  ): void {\n    const errorContext = {\n      sessionId,\n      context,\n      errorType: error.constructor.name,\n      ...(error as any).additionalContext\n    };\n\n    // Log structured error\n    this.logEvent('voice_error', {\n      sessionId,\n      errorMessage: error.message,\n      errorType: error.constructor.name,\n      context,\n      stack: error.stack?.substring(0, 500) // Truncate stack trace\n    });\n\n    // Report to centralized error handling\n    reportError(error, context || 'Voice System Error', errorContext);\n\n    // Update error count\n    this.sessionMetrics.errorCount = (this.sessionMetrics.errorCount || 0) + 1;\n\n    // Show user notification for critical errors\n    if (shouldNotifyUser) {\n      let userMessage = 'Voice system error occurred';\n      \n      if (error instanceof VoiceConnectionError) {\n        userMessage = 'Connection to voice service lost. Attempting to reconnect...';\n      } else if (error instanceof VoiceAudioError) {\n        userMessage = 'Audio processing error. Please check your microphone permissions.';\n      } else if (error instanceof VoiceSessionError) {\n        userMessage = 'Voice session error. Please try restarting the interview.';\n      }\n\n      showErrorNotification(userMessage, context);\n    }\n  }\n\n  /**\n   * Log performance metrics\n   */\n  logPerformanceMetric(\n    metricName: string,\n    value: number,\n    sessionId?: string,\n    unit = 'ms'\n  ): void {\n    this.logEvent('voice_performance_metric', {\n      sessionId,\n      metricName,\n      value,\n      unit\n    }, {\n      [metricName]: value\n    });\n\n    // Log performance warnings\n    const thresholds: Record<string, number> = {\n      'connection_time': 3000,\n      'stt_latency': 2000,\n      'tts_latency': 1500,\n      'session_init_time': 5000\n    };\n\n    if (thresholds[metricName] && value > thresholds[metricName]) {\n      logger.warn(`Performance threshold exceeded: ${metricName}`, {\n        sessionId,\n        value,\n        threshold: thresholds[metricName],\n        unit\n      });\n    }\n  }\n\n  /**\n   * Generate session summary for analytics\n   */\n  private generateSessionSummary(sessionId: string): void {\n    const properties = {\n      sessionId\n    };\n    \n    const measurements = {\n      duration: this.sessionMetrics.sessionDuration || 0,\n      messageCount: this.sessionMetrics.messageCount || 0,\n      errorCount: this.sessionMetrics.errorCount || 0,\n      transcriptAccuracy: this.sessionMetrics.transcriptAccuracy || 0,\n      connectionRetries: this.connectionMetrics.retryCount || 0,\n      audioBufferIssues: this.audioMetrics.bufferUnderruns || 0,\n      averageSttLatency: this.audioMetrics.sttLatency || 0,\n      averageTtsLatency: this.audioMetrics.ttsLatency || 0\n    };\n\n    this.logEvent('voice_session_summary', properties, measurements);\n\n    logger.info('Voice session summary', { ...properties, ...measurements });\n  }\n\n  /**\n   * Core event logging with Application Insights integration\n   */\n  private logEvent(\n    name: string,\n    properties?: Record<string, any>,\n    measurements?: Record<string, number>\n  ): void {\n    const event: VoiceTelemetryEvent = {\n      name,\n      timestamp: Date.now(),\n      properties,\n      measurements\n    };\n\n    // Store locally\n    this.events.push(event);\n\n    // Keep only last 100 events in memory\n    if (this.events.length > 100) {\n      this.events = this.events.slice(-100);\n    }\n\n    // Log to console for development\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`üîç [VoiceTelemetry] ${name}`, properties, measurements);\n    }\n\n    // TODO: Integration with Azure Application Insights\n    // if (window.appInsights) {\n    //   window.appInsights.trackEvent({\n    //     name: `voice_${name}`,\n    //     properties,\n    //     measurements\n    //   });\n    // }\n\n    // Standard logging\n    logger.info(`Voice telemetry: ${name}`, { properties, measurements });\n  }\n\n  /**\n   * Get current session metrics\n   */\n  getMetrics(): {\n    connection: ConnectionMetrics;\n    audio: AudioMetrics;\n    session: SessionMetrics;\n  } {\n    return {\n      connection: this.connectionMetrics as ConnectionMetrics,\n      audio: this.audioMetrics as AudioMetrics,\n      session: this.sessionMetrics as SessionMetrics\n    };\n  }\n\n  /**\n   * Export telemetry data for analysis\n   */\n  exportTelemetryData(): VoiceTelemetryEvent[] {\n    return [...this.events];\n  }\n\n  /**\n   * Clear telemetry data\n   */\n  clearTelemetryData(): void {\n    this.events = [];\n    this.connectionMetrics = {};\n    this.audioMetrics = { bufferUnderruns: 0 };\n    this.sessionMetrics = { messageCount: 0, errorCount: 0 };\n  }\n}\n\n// Singleton instance\nlet voiceTelemetryInstance: VoiceTelemetryService | null = null;\n\n/**\n * Get shared VoiceTelemetryService instance\n */\nexport function getVoiceTelemetry(): VoiceTelemetryService {\n  if (!voiceTelemetryInstance) {\n    voiceTelemetryInstance = new VoiceTelemetryService();\n  }\n  return voiceTelemetryInstance;\n}\n\n/**\n * Utility functions for common voice telemetry operations\n */\nexport const VoiceTelemetry = {\n  // Connection tracking\n  trackConnection: (event: 'connecting' | 'connected' | 'disconnected', sessionId: string, metrics?: Partial<ConnectionMetrics>) => {\n    getVoiceTelemetry().logConnectionEvent(event, sessionId, metrics);\n  },\n\n  // Audio performance tracking\n  trackAudioLatency: (type: 'stt' | 'tts', latency: number, sessionId: string) => {\n    const metrics = type === 'stt' ? { sttLatency: latency } : { ttsLatency: latency };\n    getVoiceTelemetry().logAudioEvent(`${type}_complete`, sessionId, metrics);\n  },\n\n  // Error tracking with user notifications\n  trackError: (error: Error, sessionId?: string, context?: string, notifyUser = false) => {\n    getVoiceTelemetry().logError(error, sessionId, context, notifyUser);\n  },\n\n  // Performance monitoring\n  trackPerformance: (metric: string, value: number, sessionId?: string) => {\n    getVoiceTelemetry().logPerformanceMetric(metric, value, sessionId);\n  },\n\n  // Session lifecycle\n  startSession: (sessionId: string, userId?: string) => {\n    getVoiceTelemetry().startSession(sessionId, userId);\n  },\n\n  endSession: (sessionId: string) => {\n    getVoiceTelemetry().logSessionEvent('session_stopped', sessionId);\n  },\n\n  // Singleton access methods\n  getInstance: () => getVoiceTelemetry()\n};\n\n/**\n * Export singleton instance for convenience\n */\nexport const voiceTelemetry = getVoiceTelemetry();\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/workflows/__tests__/interview-workflow.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":343,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":343,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12724,12727],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12724,12727],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":353,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":353,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12983,12986],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12983,12986],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { jest } from '@jest/globals';\nimport { InterviewWorkflow } from '../interview-workflow';\nimport type { InterviewConfig, ExperienceLevel } from '../workflow-types';\n\n// Mock the agent orchestrator and factory\njest.mock('../../agents/agent-orchestrator', () => ({\n  AgentOrchestrator: jest.fn().mockImplementation(() => ({\n    createStandardSession: jest.fn().mockReturnValue({\n      sessionId: 'test-session',\n      phases: [\n        {\n          id: 'technical',\n          name: 'Technical Assessment',\n          agentType: 'technical',\n          questionCount: 6\n        },\n        {\n          id: 'behavioral', \n          name: 'Behavioral Interview',\n          agentType: 'behavioral',\n          questionCount: 5\n        }\n      ],\n      context: {\n        candidateProfile: { name: 'Test User', skills: ['JavaScript'] },\n        jobRole: 'Developer'\n      }\n    }),\n    startSession: jest.fn().mockResolvedValue({\n      sessionId: 'test-session',\n      allQuestions: [\n        { id: 'q1', text: 'What is JavaScript?', category: 'technical', difficulty: 'beginner' },\n        { id: 'q2', text: 'Explain closures', category: 'technical', difficulty: 'intermediate' }\n      ],\n      phaseResults: [{\n        phase: { id: 'technical', name: 'Technical Assessment' },\n        questions: [],\n        agent: 'technical',\n        executionTime: 1000,\n        success: true\n      }],\n      metrics: {\n        totalExecutionTime: 1000,\n        totalCost: 0.05,\n        totalTokensUsed: 150,\n        phasesCompleted: 1,\n        phasesSkipped: 0,\n        successRate: 1.0\n      },\n      finalState: {}\n    })\n  }))\n}));\n\njest.mock('../../agents/agent-factory', () => ({\n  AgentFactory: {\n    getInstance: jest.fn().mockReturnValue({\n      createAgent: jest.fn().mockReturnValue({\n        generateQuestions: jest.fn().mockResolvedValue([\n          { id: 'q1', text: 'Sample question', category: 'test', difficulty: 'medium' }\n        ])\n      })\n    })\n  }\n}));\n\ndescribe('InterviewWorkflow', () => {\n  let workflow: InterviewWorkflow;\n  \n  beforeEach(() => {\n    workflow = new InterviewWorkflow();\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Single Agent Session Tests', () => {\n    const createBasicConfig = (experienceLevel: ExperienceLevel = 'mid'): InterviewConfig => ({\n      sessionId: 'test-single-agent',\n      role: 'Frontend Developer',\n      experienceLevel,\n      candidateProfile: {\n        name: 'Test Candidate',\n        skills: ['JavaScript', 'React'],\n        yearsExperience: 3\n      },\n      customization: {\n        enabledStages: ['technical'], // Single stage only\n        stageDurations: { technical: 15 }\n      }\n    });\n\n    test('should start single technical agent session', async () => {\n      const config = createBasicConfig();\n      \n      const sessionId = await workflow.startMultiAgentInterview(config);\n      \n      expect(sessionId).toBe('test-single-agent');\n      \n      const status = await workflow.getStatus(sessionId);\n      expect(status.sessionId).toBe(sessionId);\n      expect(status.totalStages).toBe(1);\n      expect(status.stages[0].stage.agentType).toBe('technical');\n      expect(status.state).toBe('in-progress');\n    });\n\n    test('should adjust parameters based on experience level', async () => {\n      const entryConfig = createBasicConfig('entry');\n      const seniorConfig = createBasicConfig('senior');\n      \n      await workflow.startMultiAgentInterview(entryConfig);\n      await workflow.startMultiAgentInterview({ ...seniorConfig, sessionId: 'test-senior' });\n      \n      const entryStatus = await workflow.getStatus('test-single-agent');\n      const seniorStatus = await workflow.getStatus('test-senior');\n      \n      expect(entryStatus.stages[0].stage.questionCount).toBe(6); // Default technical questions\n      expect(seniorStatus.stages[0].stage.questionCount).toBe(6);\n    });\n\n    test('should handle single agent completion', async () => {\n      const config = createBasicConfig();\n      \n      const sessionId = await workflow.startMultiAgentInterview(config);\n      const result = await workflow.completeInterview(sessionId);\n      \n      expect(result.sessionId).toBe(sessionId);\n      expect(result.outcome).toBe('completed');\n      expect(result.summary.stagesCompleted).toBeGreaterThan(0);\n      expect(result.stageResults).toHaveLength(1);\n      expect(result.stageResults[0].agent).toBe('technical');\n    });\n  });\n\n  describe('Agent Handoff Tests', () => {\n    const createTwoStageConfig = (): InterviewConfig => ({\n      sessionId: 'test-handoff',\n      role: 'Full Stack Developer',\n      experienceLevel: 'mid',\n      candidateProfile: {\n        name: 'Handoff Test User',\n        skills: ['JavaScript', 'Python', 'React'],\n        yearsExperience: 4\n      },\n      customization: {\n        enabledStages: ['technical', 'behavioral'],\n        stageDurations: { technical: 15, behavioral: 10 }\n      }\n    });\n\n    test('should simulate agent handoff between two agents', async () => {\n      const config = createTwoStageConfig();\n      \n      const sessionId = await workflow.startMultiAgentInterview(config);\n      \n      // Get initial status - should be on technical stage\n      const initialStatus = await workflow.getStatus(sessionId);\n      expect(initialStatus.currentStage).toBe('technical');\n      expect(initialStatus.activeAgents).toContain('technical');\n      expect(initialStatus.pendingAgents).toContain('behavioral');\n      \n      // Trigger handoff to next stage\n      await workflow.advanceStage(sessionId);\n      \n      // Check handoff occurred\n      const postHandoffStatus = await workflow.getStatus(sessionId);\n      expect(postHandoffStatus.currentStage).toBe('behavioral');\n      expect(postHandoffStatus.activeAgents).toContain('behavioral');\n      expect(postHandoffStatus.metrics.stageSwitches).toBe(2); // Start + handoff\n    });\n\n    test('should track handoff metrics', async () => {\n      const config = createTwoStageConfig();\n      \n      const sessionId = await workflow.startMultiAgentInterview(config);\n      \n      // Initial state\n      const status1 = await workflow.getStatus(sessionId);\n      expect(status1.metrics.stageSwitches).toBe(1);\n      \n      // After handoff\n      await workflow.advanceStage(sessionId);\n      const status2 = await workflow.getStatus(sessionId);\n      expect(status2.metrics.stageSwitches).toBe(2);\n      expect(status2.progressPercentage).toBeGreaterThan(status1.progressPercentage);\n    });\n\n    test('should handle multiple sequential handoffs', async () => {\n      const fullConfig: InterviewConfig = {\n        sessionId: 'test-multiple-handoffs',\n        role: 'Senior Engineer',\n        experienceLevel: 'senior',\n        candidateProfile: {\n          name: 'Multi Stage User',\n          skills: ['JavaScript', 'System Design', 'Leadership'],\n          yearsExperience: 7\n        },\n        customization: {\n          enabledStages: ['technical', 'behavioral', 'industry'],\n          stageDurations: { technical: 15, behavioral: 10, industry: 10 }\n        }\n      };\n      \n      const sessionId = await workflow.startMultiAgentInterview(fullConfig);\n      \n      // Should start with technical\n      const status1 = await workflow.getStatus(sessionId);\n      expect(status1.currentStage).toBe('technical');\n      \n      // First handoff: technical ‚Üí behavioral  \n      await workflow.advanceStage(sessionId);\n      const status2 = await workflow.getStatus(sessionId);\n      expect(status2.currentStage).toBe('behavioral');\n      \n      // Second handoff: behavioral ‚Üí industry\n      await workflow.advanceStage(sessionId);\n      const status3 = await workflow.getStatus(sessionId);\n      expect(status3.currentStage).toBe('industry');\n      \n      // Final completion\n      await workflow.advanceStage(sessionId);\n      const finalStatus = await workflow.getStatus(sessionId);\n      expect(finalStatus.state).toBe('completed');\n    });\n  });\n\n  describe('Full Three-Agent Workflow Tests', () => {\n    const createFullWorkflowConfig = (): InterviewConfig => ({\n      sessionId: 'test-full-workflow',\n      role: 'Senior Software Engineer',\n      experienceLevel: 'senior',\n      candidateProfile: {\n        name: 'Full Workflow User',\n        skills: ['JavaScript', 'Python', 'System Design', 'Leadership'],\n        previousRoles: ['Software Engineer', 'Team Lead'],\n        yearsExperience: 8\n      },\n      companyInfo: {\n        name: 'Tech Corporation',\n        industry: 'technology',\n        size: 'large'\n      },\n      customization: {\n        enabledStages: ['technical', 'behavioral', 'industry', 'wrap-up'],\n        questionsPerStage: { technical: 8, behavioral: 6, industry: 5, 'wrap-up': 2 },\n        focusAreas: ['system design', 'team leadership', 'industry trends']\n      }\n    });\n\n    test('should run complete three-agent workflow', async () => {\n      const config = createFullWorkflowConfig();\n      \n      const sessionId = await workflow.startMultiAgentInterview(config);\n      \n      // Verify initial setup\n      const initialStatus = await workflow.getStatus(sessionId);\n      expect(initialStatus.totalStages).toBe(4);\n      expect(initialStatus.currentStage).toBe('technical');\n      \n      // Execute all stages\n      await workflow.advanceStage(sessionId); // technical ‚Üí behavioral\n      await workflow.advanceStage(sessionId); // behavioral ‚Üí industry \n      await workflow.advanceStage(sessionId); // industry ‚Üí wrap-up\n      \n      const finalStatus = await workflow.getStatus(sessionId);\n      expect(finalStatus.state).toBe('completed');\n      expect(finalStatus.progressPercentage).toBe(100);\n    });\n\n    test('should generate comprehensive final feedback', async () => {\n      const config = createFullWorkflowConfig();\n      \n      const sessionId = await workflow.startMultiAgentInterview(config);\n      \n      // Fast-forward through all stages\n      await workflow.advanceStage(sessionId);\n      await workflow.advanceStage(sessionId);\n      await workflow.advanceStage(sessionId);\n      \n      const result = await workflow.completeInterview(sessionId);\n      \n      // Verify comprehensive results\n      expect(result.stageResults).toHaveLength(4);\n      expect(result.stageResults.map(r => r.agent)).toContain('technical');\n      expect(result.stageResults.map(r => r.agent)).toContain('behavioral');\n      expect(result.stageResults.map(r => r.agent)).toContain('industry');\n      \n      // Check feedback structure\n      expect(result.feedback.overallAssessment).toBeDefined();\n      expect(result.feedback.roleFitAssessment.overallFit).toBeGreaterThanOrEqual(0);\n      expect(result.feedback.recommendations.hiring).toBeDefined();\n      \n      // Check analytics\n      expect(result.analytics.metrics).toBeDefined();\n      expect(result.analytics.patterns).toBeDefined();\n      \n      // Check metadata\n      expect(result.metadata.aiModelsUsed).toContain('technical');\n      expect(result.metadata.aiModelsUsed).toContain('behavioral');\n      expect(result.metadata.aiModelsUsed).toContain('industry');\n    });\n\n    test('should handle workflow customization', async () => {\n      const customConfig: InterviewConfig = {\n        ...createFullWorkflowConfig(),\n        sessionId: 'test-customization',\n        customization: {\n          enabledStages: ['technical', 'behavioral'], // Skip industry and wrap-up\n          stageDurations: { technical: 20, behavioral: 15 }, // Custom durations\n          agentOverrides: {\n            technical: { temperature: 0.8, maxTokens: 2000 },\n            behavioral: { temperature: 0.6, maxTokens: 1200 }\n          }\n        }\n      };\n      \n      const sessionId = await workflow.startMultiAgentInterview(customConfig);\n      \n      const status = await workflow.getStatus(sessionId);\n      expect(status.totalStages).toBe(2); // Only technical and behavioral\n      expect(status.timing.totalEstimatedMinutes).toBe(35); // 20 + 15\n      \n      // Complete the custom workflow\n      await workflow.advanceStage(sessionId);\n      const result = await workflow.completeInterview(sessionId);\n      \n      expect(result.stageResults).toHaveLength(2);\n      expect(result.outcome).toBe('completed');\n    });\n  });\n\n  describe('Error Handling and Edge Cases', () => {\n    test('should handle session not found', async () => {\n      await expect(workflow.getStatus('nonexistent-session')).rejects.toThrow('Session not found');\n      await expect(workflow.completeInterview('nonexistent-session')).rejects.toThrow('Session not found');\n    });\n\n    test('should handle invalid configuration', async () => {\n      const invalidConfig = {\n        sessionId: 'test-invalid',\n        role: '', // Invalid empty role\n        experienceLevel: 'invalid-level' as any,\n        candidateProfile: {\n          name: '',\n          skills: []\n        }\n      };\n      \n      // Should handle gracefully or throw appropriate error\n      try {\n        await workflow.startMultiAgentInterview(invalidConfig);\n      } catch (error: any) {\n        expect(error.code).toBeDefined();\n      }\n    });\n\n    test('should handle premature completion', async () => {\n      const config = createFullWorkflowConfig();\n      config.sessionId = 'test-premature';\n      \n      const sessionId = await workflow.startMultiAgentInterview(config);\n      \n      // Try to complete without finishing all stages\n      const result = await workflow.completeInterview(sessionId);\n      \n      expect(result.outcome).toBe('completed');\n      // Should mark unfinished stages as skipped\n      const skippedStages = result.stageResults.filter(r => r.status === 'skipped');\n      expect(skippedStages.length).toBeGreaterThanOrEqual(0);\n    });\n  });\n\n  describe('Performance and Timing', () => {\n    test('should track accurate timing', async () => {\n      const config = createFullWorkflowConfig();\n      config.sessionId = 'test-timing';\n      \n      const startTime = Date.now();\n      const sessionId = await workflow.startMultiAgentInterview(config);\n      \n      const status = await workflow.getStatus(sessionId);\n      expect(status.timing.startTime).toBeGreaterThanOrEqual(startTime);\n      expect(status.timing.elapsedMinutes).toBeGreaterThanOrEqual(0);\n      expect(status.timing.totalEstimatedMinutes).toBe(40); // 15+10+10+5\n    });\n\n    test('should update progress correctly', async () => {\n      const config: InterviewConfig = {\n        sessionId: 'test-progress',\n        role: 'Developer',\n        experienceLevel: 'mid',\n        candidateProfile: { name: 'Test', skills: ['JS'] },\n        customization: { enabledStages: ['technical', 'behavioral'] }\n      };\n      \n      const sessionId = await workflow.startMultiAgentInterview(config);\n      \n      const status1 = await workflow.getStatus(sessionId);\n      expect(status1.progressPercentage).toBe(50); // 1/2 stages completed\n      \n      await workflow.advanceStage(sessionId);\n      const status2 = await workflow.getStatus(sessionId);\n      expect(status2.progressPercentage).toBe(100); // 2/2 stages completed\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/workflows/interview-workflow.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AgentType' is defined but never used.","line":1,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":175,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":175,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6101,6104],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6101,6104],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":276,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":276,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9423,9426],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9423,9426],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":387,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":387,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13199,13202],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13199,13202],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":419,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":419,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14206,14209],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14206,14209],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":420,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":420,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14312,14315],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14312,14315],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AgentFactory, AgentType } from '../agents/agent-factory';\nimport { AgentOrchestrator } from '../agents/agent-orchestrator';\nimport type { InterviewContext } from '../types/agent-types';\nimport type {\n  InterviewConfig,\n  WorkflowStatus,\n  InterviewResult,\n  SessionId,\n  InterviewStage,\n  InterviewStageConfig,\n  ExperienceLevel,\n  SessionState as WorkflowSessionState\n} from './workflow-types';\n\n/**\n * In-memory session store for simplicity. Replace with Redis/Firestore in production.\n */\nconst sessionStore: Map<SessionId, WorkflowSessionState> = new Map();\n\n/**\n * Default stage durations (minutes)\n */\nconst DEFAULT_STAGE_DURATIONS: Record<InterviewStage, number> = {\n  technical: 15,\n  behavioral: 10,\n  industry: 10,\n  'wrap-up': 5\n};\n\n/**\n * Default questions per stage\n */\nconst DEFAULT_QUESTIONS_PER_STAGE: Record<InterviewStage, number> = {\n  technical: 6,\n  behavioral: 5,\n  industry: 4,\n  'wrap-up': 0\n};\n\n/**\n * Map experience level to agent parameter adjustments\n */\nfunction getExperienceAdjustments(level: ExperienceLevel): { temperature: number; maxTokens: number } {\n  switch (level) {\n    case 'entry':\n      return { temperature: 0.3, maxTokens: 1200 };\n    case 'senior':\n      return { temperature: 0.6, maxTokens: 1800 };\n    case 'executive':\n      return { temperature: 0.7, maxTokens: 2000 };\n    case 'mid':\n    default:\n      return { temperature: 0.5, maxTokens: 1500 };\n  }\n}\n\n/**\n * Build interview phases based on configuration\n */\nfunction buildPhases(config: InterviewConfig): InterviewStageConfig[] {\n  const stages: InterviewStage[] = config.customization?.enabledStages ?? ['technical', 'behavioral', 'industry', 'wrap-up'];\n  const durations = { ...DEFAULT_STAGE_DURATIONS, ...(config.customization?.stageDurations || {}) };\n  const questionCounts = { ...DEFAULT_QUESTIONS_PER_STAGE, ...(config.customization?.questionsPerStage || {}) };\n\n  const base: InterviewStageConfig[] = [\n    {\n      id: 'technical',\n      name: 'Technical Assessment',\n      agentType: 'technical',\n      duration: durations.technical,\n      questionCount: questionCounts.technical,\n      required: true,\n      conditions: { minExperienceLevel: 'entry' },\n      instructions: `Focus on ${config.role} fundamentals and practical problem solving.`\n    },\n    {\n      id: 'behavioral',\n      name: 'Behavioral Evaluation',\n      agentType: 'behavioral',\n      duration: durations.behavioral,\n      questionCount: questionCounts.behavioral,\n      required: true,\n      instructions: 'Assess teamwork, leadership potential, and communication.'\n    },\n    {\n      id: 'industry',\n      name: 'Industry Knowledge Check',\n      agentType: 'industry',\n      duration: durations.industry,\n      questionCount: questionCounts.industry,\n      required: false,\n      conditions: { minExperienceLevel: 'mid' },\n      instructions: `Tailor to ${config.industry || config.companyInfo?.industry || 'the target'} industry.`\n    },\n    {\n      id: 'wrap-up',\n      name: 'Wrap-up and Feedback',\n      agentType: 'behavioral',\n      duration: durations['wrap-up'],\n      questionCount: questionCounts['wrap-up'],\n      required: true,\n      instructions: 'Summarize key insights and provide feedback.'\n    }\n  ];\n\n  return base.filter(s => stages.includes(s.id));\n}\n\n/**\n * InterviewWorkflow orchestrates a multi-agent interview using AgentOrchestrator\n */\nexport class InterviewWorkflow {\n  private factory = AgentFactory.getInstance();\n  private orchestrator = new AgentOrchestrator();\n\n  /**\n   * Start a multi-agent interview and return a session ID\n   */\n  async startMultiAgentInterview(config: InterviewConfig): Promise<SessionId> {\n    // Build phases and select agents\n    const phases = buildPhases(config);\n\n    // Adjust agent configs by experience level and apply any overrides\n    const adjustments = getExperienceAdjustments(config.experienceLevel);\n\n    // Transform candidateProfile to match CandidateProfile interface\n    const transformedCandidateProfile = {\n      name: config.candidateProfile.name,\n      experience: `${config.experienceLevel} level`, // Map experienceLevel to experience string\n      skills: config.candidateProfile.skills,\n      targetRole: config.role, // Map role to targetRole\n      industry: config.industry || config.companyInfo?.industry || 'Technology', // Default to Technology if not specified\n      previousRoles: config.candidateProfile.previousRoles,\n      yearsExperience: config.candidateProfile.yearsExperience,\n      education: config.candidateProfile.education,\n      certifications: config.candidateProfile.certifications\n    };\n\n    // Build orchestrator session config\n    const orchestratorConfig = this.orchestrator.createStandardSession({\n      sessionId: config.sessionId,\n      candidateProfile: transformedCandidateProfile,\n      jobRole: config.role,\n      companyInfo: config.companyInfo,\n      experienceLevel: config.experienceLevel,\n      includePhases: {\n        technical: !!phases.find(p => p.id === 'technical'),\n        behavioral: !!phases.find(p => p.id === 'behavioral'),\n        industry: !!phases.find(p => p.id === 'industry')\n      }\n    });\n\n    // Override default phase question counts and temps where applicable\n    orchestratorConfig.phases = orchestratorConfig.phases.map(phase => {\n      const def = phases.find(p => p.id === (phase.id as InterviewStage));\n      if (!def) return phase;\n      return {\n        ...phase,\n        questionCount: def.questionCount,\n        agentConfig: {\n          ...(phase.agentConfig || {}),\n          temperature: config.customization?.agentOverrides?.[def.agentType]?.temperature ?? adjustments.temperature,\n          maxTokens: config.customization?.agentOverrides?.[def.agentType]?.maxTokens ?? adjustments.maxTokens\n        }\n      };\n    });\n\n    // Compose InterviewContext with focus areas and metadata\n    const interviewContext: InterviewContext = {\n      candidateProfile: transformedCandidateProfile,\n      jobRole: config.role,\n      companyInfo: config.companyInfo,\n      sessionHistory: undefined,\n      focusAreas: config.customization?.focusAreas\n    } as any;\n\n    // Initialize session state\n    const startTime = Date.now();\n    const totalEstimatedMinutes = phases.reduce((sum, p) => sum + p.duration, 0);\n\n    const state: WorkflowSessionState = {\n      config,\n      interviewContext,\n      allQuestions: [],\n      stageHistory: [],\n      notes: [],\n      persistence: {\n        createdAt: startTime,\n        updatedAt: startTime,\n        version: '1.0.0',\n        checkpoints: []\n      },\n      status: {\n        sessionId: config.sessionId,\n        state: 'initializing',\n        currentStageIndex: 0,\n        totalStages: phases.length,\n        stages: phases.map(p => ({\n          stage: p,\n          status: 'pending',\n          questionsGenerated: 0,\n          questionsAnswered: 0\n        })),\n        progressPercentage: 0,\n        timing: {\n          startTime,\n          currentTime: startTime,\n          elapsedMinutes: 0,\n          estimatedRemainingMinutes: totalEstimatedMinutes,\n          totalEstimatedMinutes\n        },\n        activeAgents: [],\n        pendingAgents: phases.map(p => p.agentType),\n        metrics: {\n          totalQuestionsGenerated: 0,\n          totalQuestionsAnswered: 0,\n          averageResponseTime: 0,\n          stageSwitches: 0,\n          agentHandoffs: 0\n        }\n      }\n    };\n\n    sessionStore.set(config.sessionId, state);\n\n    // Start first phase immediately (no parallelism yet)\n    await this.advanceStage(config.sessionId, orchestratorConfig);\n\n    return config.sessionId;\n  }\n\n  /**\n   * Get current workflow status\n   */\n  async getStatus(sessionId: SessionId): Promise<WorkflowStatus> {\n    const state = sessionStore.get(sessionId);\n    if (!state) throw this.makeError('SESSION_NOT_FOUND', sessionId, 'Session not found', false);\n\n    // Update timing\n    const now = Date.now();\n    const elapsedMinutes = Math.floor((now - state.status.timing.startTime) / 60000);\n    const completedDurations = state.status.stages\n      .filter(s => s.status === 'completed' || s.status === 'skipped')\n      .reduce((sum, s) => sum + s.stage.duration, 0);\n\n    const remaining = Math.max(state.status.timing.totalEstimatedMinutes - completedDurations, 0);\n\n    state.status.timing.currentTime = now;\n    state.status.timing.elapsedMinutes = elapsedMinutes;\n    state.status.timing.estimatedRemainingMinutes = remaining;\n\n    return state.status;\n  }\n\n  /**\n   * Complete interview and return result\n   */\n  async completeInterview(sessionId: SessionId): Promise<InterviewResult> {\n    const state = sessionStore.get(sessionId);\n    if (!state) throw this.makeError('SESSION_NOT_FOUND', sessionId, 'Session not found', false);\n\n    // If not all stages are completed, mark remaining as skipped\n    const remainingStages = state.status.stages.filter(s => s.status === 'pending' || s.status === 'in-progress');\n    remainingStages.forEach(s => (s.status = 'skipped'));\n\n    state.status.state = 'completed';\n\n    // Build simple result (can be enhanced with AI-generated feedback later)\n    const totalDuration = Math.floor((state.status.timing.currentTime - state.status.timing.startTime) / 60000);\n\n    const stageResults = state.status.stages.map(s => ({\n      stage: s.stage,\n      agent: s.stage.agentType,\n      status: s.status,\n      duration: s.stage.duration,\n      questionsAsked: state.allQuestions.filter(q => (q as any).stageId === s.stage.id),\n      questionsAnswered: 0,\n      keyInsights: [],\n      recommendations: [],\n      strengths: [],\n      concerns: []\n    }));\n\n    const result: InterviewResult = {\n      sessionId,\n      outcome: 'completed',\n      summary: {\n        totalDurationMinutes: totalDuration,\n        stagesCompleted: state.status.stages.filter(s => s.status === 'completed').length,\n        totalStages: state.status.totalStages,\n        questionsAsked: state.allQuestions.length,\n        questionsAnswered: 0\n      },\n      stageResults,\n      feedback: {\n        overallAssessment: 'Interview completed. AI-generated detailed assessment pending integration.',\n        strengths: [],\n        improvementAreas: [],\n        roleFitAssessment: {\n          technicalFit: 0,\n          behavioralFit: 0,\n          industryKnowledge: 0,\n          overallFit: 0,\n          reasoning: 'Scoring to be computed by analysis pipeline.'\n        },\n        recommendations: {\n          hiring: 'maybe',\n          reasoning: 'Requires further analysis.',\n          nextSteps: ['Review responses', 'Schedule follow-up if needed']\n        }\n      },\n      analytics: {\n        metrics: {\n          averageResponseTime: 0,\n          questionDifficulty: 'medium',\n          knowledgeAreas: {},\n          confidenceLevel: 0,\n          communicationClarity: 0\n        },\n        patterns: {\n          responseLength: 'detailed',\n          questioningStyle: 'deep-diving',\n          confidenceIndicators: [],\n          stressIndicators: []\n        }\n      },\n      exports: {\n        reportAvailable: false\n      },\n      metadata: {\n        generatedAt: Date.now(),\n        generationDuration: 0,\n        aiModelsUsed: Array.from(new Set(state.status.stages.map(s => s.stage.agentType))),\n        totalCost: 0,\n        totalTokensUsed: 0,\n        qualityScore: 80\n      }\n    };\n\n    return result;\n  }\n\n  /**\n   * Advance to the next stage or execute current one if pending\n   */\n  async advanceStage(sessionId: SessionId, orchestratorConfig?: ReturnType<AgentOrchestrator['createStandardSession']>): Promise<void> {\n    const state = sessionStore.get(sessionId);\n    if (!state) throw this.makeError('SESSION_NOT_FOUND', sessionId, 'Session not found', false);\n\n    const s = state.status;\n    const currentIdx = s.currentStageIndex;\n    const current = s.stages[currentIdx];\n\n    // If all stages complete, update status\n    if (currentIdx >= s.totalStages) {\n      s.state = 'completed';\n      return;\n    }\n\n    if (current.status === 'pending') {\n      console.log(`[InterviewWorkflow] Starting stage: ${current.stage.name}`);\n      current.status = 'in-progress';\n      current.startTime = Date.now();\n      s.state = 'in-progress';\n      s.currentStage = current.stage.id;\n      s.activeAgents = [current.stage.agentType];\n      s.pendingAgents = s.stages.slice(currentIdx + 1).map(x => x.stage.agentType);\n\n      // Execute via orchestrator\n      const runConfig = orchestratorConfig ?? this.orchestrator.createStandardSession({\n        sessionId,\n        candidateProfile: state.interviewContext.candidateProfile,\n        jobRole: state.interviewContext.jobRole!,\n        companyInfo: state.interviewContext.companyInfo,\n        experienceLevel: state.config.experienceLevel,\n        includePhases: {\n          technical: current.stage.id === 'technical',\n          behavioral: current.stage.id === 'behavioral' || current.stage.id === 'wrap-up',\n          industry: current.stage.id === 'industry'\n        }\n      });\n\n      const result = await this.orchestrator.startSession(runConfig);\n\n      // Track generated questions\n      const stageQuestions = result.allQuestions.map(q => ({ ...q, stageId: current.stage.id }));\n      state.allQuestions.push(...(stageQuestions as any));\n\n      current.questionsGenerated += stageQuestions.length;\n      s.metrics.totalQuestionsGenerated += stageQuestions.length;\n\n      // Mark complete\n      current.status = 'completed';\n      current.endTime = Date.now();\n      s.metrics.stageSwitches += 1;\n\n      // Progress\n      s.currentStageIndex += 1;\n      s.progressPercentage = Math.round((s.currentStageIndex / s.totalStages) * 100);\n\n      // Move to next stage if exists\n      if (s.currentStageIndex < s.totalStages) {\n        const next = s.stages[s.currentStageIndex];\n        s.currentStage = next.stage.id;\n        s.activeAgents = [next.stage.agentType];\n        s.pendingAgents = s.stages.slice(s.currentStageIndex + 1).map(x => x.stage.agentType);\n      } else {\n        s.currentStage = undefined;\n        s.activeAgents = [];\n        s.pendingAgents = [];\n        s.state = 'completed';\n      }\n\n      state.persistence.updatedAt = Date.now();\n    }\n  }\n\n  /** Utility to build standardized errors */\n  private makeError(code: any, sessionId: SessionId, message: string, recoverable: boolean) {\n    const err = new Error(message) as any;\n    err.code = code;\n    err.sessionId = sessionId;\n    err.recoverable = recoverable;\n    return err;\n  }\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/azure-ai-foundry/workflows/workflow-types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":240,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":240,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5628,5631],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5628,5631],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":463,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":463,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11031,11034],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11031,11034],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Question, InterviewContext } from '../types/agent-types';\nimport { AgentType } from '../agents/agent-factory';\n\n/**\n * Unique identifier for interview sessions\n */\nexport type SessionId = string;\n\n/**\n * Interview stage definitions\n */\nexport type InterviewStage = 'technical' | 'behavioral' | 'industry' | 'wrap-up';\n\n/**\n * Interview stage status\n */\nexport type StageStatus = 'pending' | 'in-progress' | 'completed' | 'skipped' | 'failed';\n\n/**\n * Overall workflow status\n */\nexport type WorkflowState = 'initializing' | 'in-progress' | 'completed' | 'failed' | 'cancelled';\n\n/**\n * Experience level mapping for interview customization\n */\nexport type ExperienceLevel = 'entry' | 'mid' | 'senior' | 'executive';\n\n/**\n * Role type for interview customization\n */\nexport type RoleType = 'individual-contributor' | 'team-lead' | 'manager' | 'director' | 'executive';\n\n/**\n * Configuration for starting a multi-agent interview\n */\nexport interface InterviewConfig {\n  /** Unique session identifier */\n  sessionId: SessionId;\n  \n  /** Job role being interviewed for */\n  role: string;\n  \n  /** Candidate experience level */\n  experienceLevel: ExperienceLevel;\n  \n  /** Industry or domain */\n  industry?: string;\n  \n  /** Role type for leadership assessment */\n  roleType?: RoleType;\n  \n  /** Company information */\n  companyInfo?: {\n    name?: string;\n    industry?: string;\n    size?: 'startup' | 'small' | 'medium' | 'large' | 'enterprise';\n    culture?: string;\n  };\n  \n  /** Candidate profile information */\n  candidateProfile: {\n    name: string;\n    email?: string;\n    skills: string[];\n    previousRoles?: string[];\n    yearsExperience?: number;\n    education?: string;\n    certifications?: string[];\n  };\n  \n  /** Interview customization options */\n  customization?: {\n    /** Which stages to include */\n    enabledStages?: InterviewStage[];\n    \n    /** Custom stage durations in minutes */\n    stageDurations?: Partial<Record<InterviewStage, number>>;\n    \n    /** Maximum total interview time in minutes */\n    maxDurationMinutes?: number;\n    \n    /** Custom instructions for specific agents */\n    customInstructions?: Partial<Record<AgentType, string>>;\n    \n    /** Agent configuration overrides */\n    agentOverrides?: Partial<Record<AgentType, {\n      temperature?: number;\n      maxTokens?: number;\n      model?: string;\n    }>>;\n    \n    /** Question count per stage */\n    questionsPerStage?: Partial<Record<InterviewStage, number>>;\n    \n    /** Priority focus areas */\n    focusAreas?: string[];\n  };\n  \n  /** Metadata for tracking and analytics */\n  metadata?: {\n    source?: string;\n    recruiterId?: string;\n    jobPostingId?: string;\n    interviewType?: 'screening' | 'technical' | 'final' | 'cultural-fit';\n    scheduledAt?: string;\n    tags?: string[];\n  };\n}\n\n/**\n * Interview stage configuration\n */\nexport interface InterviewStageConfig {\n  /** Stage identifier */\n  id: InterviewStage;\n  \n  /** Display name */\n  name: string;\n  \n  /** Associated agent type */\n  agentType: AgentType;\n  \n  /** Duration in minutes */\n  duration: number;\n  \n  /** Number of questions to generate */\n  questionCount: number;\n  \n  /** Whether this stage is required */\n  required: boolean;\n  \n  /** Conditions for including this stage */\n  conditions?: {\n    minExperienceLevel?: ExperienceLevel;\n    requiredRoles?: RoleType[];\n    requiredIndustries?: string[];\n  };\n  \n  /** Stage-specific instructions */\n  instructions?: string;\n  \n  /** Success criteria for stage completion */\n  successCriteria?: {\n    minQuestionsAnswered?: number;\n    minDurationMinutes?: number;\n    requiredTopics?: string[];\n  };\n}\n\n/**\n * Current workflow status\n */\nexport interface WorkflowStatus {\n  /** Session identifier */\n  sessionId: SessionId;\n  \n  /** Current workflow state */\n  state: WorkflowState;\n  \n  /** Current active stage */\n  currentStage?: InterviewStage;\n  \n  /** Current stage index (0-based) */\n  currentStageIndex: number;\n  \n  /** Total number of stages */\n  totalStages: number;\n  \n  /** All stages with their status */\n  stages: Array<{\n    stage: InterviewStageConfig;\n    status: StageStatus;\n    startTime?: number;\n    endTime?: number;\n    questionsGenerated: number;\n    questionsAnswered: number;\n    error?: string;\n  }>;\n  \n  /** Overall progress percentage (0-100) */\n  progressPercentage: number;\n  \n  /** Time tracking */\n  timing: {\n    startTime: number;\n    currentTime: number;\n    elapsedMinutes: number;\n    estimatedRemainingMinutes: number;\n    totalEstimatedMinutes: number;\n  };\n  \n  /** Active agents */\n  activeAgents: AgentType[];\n  \n  /** Pending agent handoffs */\n  pendingAgents: AgentType[];\n  \n  /** Error information if failed */\n  error?: {\n    message: string;\n    stage?: InterviewStage;\n    timestamp: number;\n    recoverable: boolean;\n  };\n  \n  /** Real-time metrics */\n  metrics: {\n    totalQuestionsGenerated: number;\n    totalQuestionsAnswered: number;\n    averageResponseTime: number;\n    stageSwitches: number;\n    agentHandoffs: number;\n  };\n}\n\n/**\n * Interview session state for persistence\n */\nexport interface SessionState {\n  /** Session configuration */\n  config: InterviewConfig;\n  \n  /** Current workflow status */\n  status: WorkflowStatus;\n  \n  /** Interview context that gets passed between agents */\n  interviewContext: InterviewContext;\n  \n  /** All questions generated across stages */\n  allQuestions: Question[];\n  \n  /** Candidate responses (for future implementation) */\n  responses?: Array<{\n    questionId: string;\n    response: string;\n    timestamp: number;\n    stage: InterviewStage;\n    agent: AgentType;\n    metadata?: Record<string, any>;\n  }>;\n  \n  /** Stage transition history */\n  stageHistory: Array<{\n    fromStage?: InterviewStage;\n    toStage: InterviewStage;\n    timestamp: number;\n    reason: string;\n    agentHandoff?: {\n      fromAgent: AgentType;\n      toAgent: AgentType;\n    };\n  }>;\n  \n  /** Real-time notes and observations */\n  notes: Array<{\n    stage: InterviewStage;\n    agent: AgentType;\n    timestamp: number;\n    note: string;\n    type: 'observation' | 'recommendation' | 'concern' | 'highlight';\n  }>;\n  \n  /** Session persistence metadata */\n  persistence: {\n    createdAt: number;\n    updatedAt: number;\n    version: string;\n    checkpoints: Array<{\n      stage: InterviewStage;\n      timestamp: number;\n      state: 'saved' | 'recovered';\n    }>;\n  };\n}\n\n/**\n * Final interview result and feedback\n */\nexport interface InterviewResult {\n  /** Session identifier */\n  sessionId: SessionId;\n  \n  /** Overall interview outcome */\n  outcome: 'completed' | 'incomplete' | 'cancelled' | 'failed';\n  \n  /** Comprehensive summary */\n  summary: {\n    totalDurationMinutes: number;\n    stagesCompleted: number;\n    totalStages: number;\n    questionsAsked: number;\n    questionsAnswered: number;\n    overallScore?: number; // 0-100 scale\n  };\n  \n  /** Stage-specific results */\n  stageResults: Array<{\n    stage: InterviewStageConfig;\n    agent: AgentType;\n    status: StageStatus;\n    duration: number;\n    questionsAsked: Question[];\n    questionsAnswered: number;\n    keyInsights: string[];\n    recommendations: string[];\n    score?: number; // 0-100 scale\n    strengths: string[];\n    concerns: string[];\n  }>;\n  \n  /** AI-generated feedback and recommendations */\n  feedback: {\n    /** Overall assessment */\n    overallAssessment: string;\n    \n    /** Key strengths identified */\n    strengths: Array<{\n      category: string;\n      description: string;\n      evidence: string[];\n      stage: InterviewStage;\n    }>;\n    \n    /** Areas for improvement */\n    improvementAreas: Array<{\n      category: string;\n      description: string;\n      suggestions: string[];\n      priority: 'high' | 'medium' | 'low';\n      stage: InterviewStage;\n    }>;\n    \n    /** Role fit assessment */\n    roleFitAssessment: {\n      technicalFit: number; // 0-100\n      behavioralFit: number; // 0-100\n      industryKnowledge: number; // 0-100\n      overallFit: number; // 0-100\n      reasoning: string;\n    };\n    \n    /** Next steps and recommendations */\n    recommendations: {\n      hiring: 'strong-yes' | 'yes' | 'maybe' | 'no' | 'strong-no';\n      reasoning: string;\n      nextSteps: string[];\n      followUpQuestions?: string[];\n      additionalAssessments?: string[];\n    };\n    \n    /** Personalized candidate feedback */\n    candidateFeedback?: {\n      positives: string[];\n      developmentAreas: string[];\n      resources: string[];\n      encouragement: string;\n    };\n  };\n  \n  /** Interview analytics and insights */\n  analytics: {\n    /** Performance metrics */\n    metrics: {\n      averageResponseTime: number;\n      questionDifficulty: 'easy' | 'medium' | 'hard';\n      knowledgeAreas: Record<string, number>; // topic -> score\n      confidenceLevel: number; // 0-100\n      communicationClarity: number; // 0-100\n    };\n    \n    /** Behavioral patterns */\n    patterns: {\n      responseLength: 'concise' | 'detailed' | 'verbose';\n      questioningStyle: 'clarifying' | 'deep-diving' | 'surface-level';\n      confidenceIndicators: string[];\n      stressIndicators: string[];\n    };\n    \n    /** Comparative analysis */\n    benchmarks?: {\n      industryAverage: number;\n      roleAverage: number;\n      experienceLevelAverage: number;\n      percentile: number;\n    };\n  };\n  \n  /** Export and sharing options */\n  exports: {\n    /** PDF report generation metadata */\n    reportAvailable: boolean;\n    \n    /** Shareable summary for candidate */\n    candidateSummary?: {\n      overallScore: number;\n      keyStrengths: string[];\n      developmentAreas: string[];\n      nextSteps: string[];\n    };\n    \n    /** Detailed recruiter report */\n    recruiterReport?: {\n      recommendation: string;\n      detailedAssessment: string;\n      competencyBreakdown: Record<string, number>;\n      interviewNotes: string[];\n    };\n  };\n  \n  /** Metadata for tracking and analytics */\n  metadata: {\n    generatedAt: number;\n    generationDuration: number;\n    aiModelsUsed: AgentType[];\n    totalCost: number;\n    totalTokensUsed: number;\n    qualityScore: number; // Interview process quality 0-100\n  };\n}\n\n/**\n * Agent handoff information\n */\nexport interface AgentHandoff {\n  /** Session identifier */\n  sessionId: SessionId;\n  \n  /** Source agent */\n  fromAgent?: AgentType;\n  \n  /** Target agent */\n  toAgent: AgentType;\n  \n  /** Handoff context */\n  context: {\n    /** Completed questions from previous stages */\n    previousQuestions: Question[];\n    \n    /** Key insights to pass along */\n    insights: string[];\n    \n    /** Areas of focus for next agent */\n    focusAreas: string[];\n    \n    /** Continuation instructions */\n    instructions?: string;\n  };\n  \n  /** Handoff timestamp */\n  timestamp: number;\n}\n\n/**\n * Error types for workflow operations\n */\nexport interface WorkflowError extends Error {\n  code: 'SESSION_NOT_FOUND' | 'INVALID_STATE' | 'AGENT_ERROR' | 'TIMEOUT' | 'CONFIGURATION_ERROR';\n  sessionId: SessionId;\n  stage?: InterviewStage;\n  agent?: AgentType;\n  recoverable: boolean;\n  metadata?: Record<string, any>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/azure-config.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":134,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":134,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":135,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":135,"endColumn":20}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { DefaultAzureCredential } from '@azure/identity';\nimport { SecretClient } from '@azure/keyvault-secrets';\n\n// Client-side safety check - provide empty implementations when running on client\nconst isClient = typeof window !== 'undefined';\n\nif (isClient) {\n  console.warn('[Azure Config] Running on client side - using fallback implementations');\n}\n\n// Azure Key Vault configuration\nconst AZURE_KEY_VAULT_URI = process.env.AZURE_KEY_VAULT_URI || 'https://prepbettr-keyvault-083.vault.azure.net/';\n\ninterface AzureSecrets {\n  speechKey: string;\n  speechEndpoint: string;\n  azureOpenAIKey: string;\n  azureOpenAIEndpoint: string;\n  azureOpenAIDeployment: string;\n  // Firebase configuration\n  firebaseProjectId: string;\n  firebaseClientEmail: string;\n  firebasePrivateKey: string;\n  firebaseClientKey?: string;\n  // Additional Azure services\n  azureFormRecognizerKey?: string;\n  azureFormRecognizerEndpoint?: string;\n  // Storage configuration\n  azureStorageAccount?: string;\n  azureStorageAccountKey?: string;\n  azureStorageConnectionString?: string;\n  azureStorageContainer?: string;\n  storageProvider?: string;\n}\n\nlet cachedSecrets: AzureSecrets | null = null;\n\n/**\n * Initialize Azure Key Vault client\n */\nfunction createKeyVaultClient(): SecretClient {\n  if (!AZURE_KEY_VAULT_URI) {\n    throw new Error('AZURE_KEY_VAULT_URI environment variable is required');\n  }\n  \n  const credential = new DefaultAzureCredential();\n  return new SecretClient(AZURE_KEY_VAULT_URI, credential);\n}\n\n/**\n * Clear cached secrets (useful when Azure keys are renewed)\n */\nexport function clearAzureSecretsCache(): void {\n  if (isClient) return;\n  console.log('üîÑ Clearing Azure secrets cache...');\n  cachedSecrets = null;\n}\n\n/**\n * Fetch secrets from Azure Key Vault\n */\nexport async function fetchAzureSecrets(forceRefresh: boolean = false): Promise<AzureSecrets> {\n  if (isClient) {\n    return {\n      speechKey: '',\n      speechEndpoint: '',\n      azureOpenAIKey: '',\n      azureOpenAIEndpoint: '',\n      azureOpenAIDeployment: '',\n      firebaseProjectId: '',\n      firebaseClientEmail: '',\n      firebasePrivateKey: ''\n    };\n  }\n  // Clear cache if force refresh is requested\n  if (forceRefresh) {\n    clearAzureSecretsCache();\n  }\n  \n  // Return cached secrets if available\n  if (cachedSecrets) {\n    return cachedSecrets;\n  }\n\n  try {\n    console.log('üîë Fetching secrets from Azure Key Vault...');\n    const client = createKeyVaultClient();\n\n    // Helper function to suppress expected 404 errors for optional secrets\n    const getOptionalSecret = (name: string) => \n      client.getSecret(name).catch(err => {\n        if (err.statusCode !== 404) {\n          console.warn(`‚ö†Ô∏è Unexpected error fetching optional secret '${name}':`, err.message);\n        }\n        return null;\n      });\n\n    // Fetch all secrets (some are optional)\n    const [\n      speechKey, speechEndpoint, azureOpenAIKey, azureOpenAIEndpoint, azureOpenAIDeployment,\n      firebaseProjectId, firebaseClientEmail, firebasePrivateKey, firebaseClientKey,\n      azureFormRecognizerKey, azureFormRecognizerEndpoint, \n      azureStorageAccount, azureStorageAccountKey, azureStorageConnectionString,\n      azureStorageContainer, storageProvider\n    ] = await Promise.all([\n      client.getSecret('speech-key'),\n      client.getSecret('speech-endpoint'),\n      client.getSecret('azure-openai-key'),\n      client.getSecret('azure-openai-endpoint'),\n      client.getSecret('azure-openai-deployment'),\n      getOptionalSecret('firebase-project-id'),\n      getOptionalSecret('firebase-client-email'),\n      getOptionalSecret('firebase-private-key'),\n      getOptionalSecret('NEXT-PUBLIC-FIREBASE-CLIENT-KEY'),\n      getOptionalSecret('azure-form-recognizer-key'),\n      getOptionalSecret('azure-form-recognizer-endpoint'),\n      getOptionalSecret('azure-storage-account'),\n      getOptionalSecret('azure-storage-account-key'),\n      getOptionalSecret('azure-storage-connection-string'),\n      getOptionalSecret('azure-storage-container'),\n      getOptionalSecret('storage-provider')\n    ]);\n\n    // Validate only Azure-related secrets (Firebase can come from env vars)\n    const requiredAzureSecrets = {\n      speechKey: speechKey?.value,\n      speechEndpoint: speechEndpoint?.value,\n      azureOpenAIKey: azureOpenAIKey?.value,\n      azureOpenAIEndpoint: azureOpenAIEndpoint?.value,\n      azureOpenAIDeployment: azureOpenAIDeployment?.value\n    };\n\n    const missingAzureSecrets = Object.entries(requiredAzureSecrets)\n      .filter(([_, value]) => !value)\n      .map(([key, _]) => key);\n\n    if (missingAzureSecrets.length > 0) {\n      throw new Error(`Required Azure secrets missing from Key Vault: ${missingAzureSecrets.join(', ')}`);\n    }\n\n    cachedSecrets = {\n      speechKey: speechKey.value!,\n      speechEndpoint: speechEndpoint.value!,\n      azureOpenAIKey: azureOpenAIKey.value!,\n      azureOpenAIEndpoint: azureOpenAIEndpoint.value!,\n      azureOpenAIDeployment: azureOpenAIDeployment.value!,\n      firebaseProjectId: firebaseProjectId?.value || process.env.FIREBASE_PROJECT_ID || '',\n      firebaseClientEmail: firebaseClientEmail?.value || process.env.FIREBASE_CLIENT_EMAIL || '',\n      firebasePrivateKey: firebasePrivateKey?.value || process.env.FIREBASE_PRIVATE_KEY || '',\n      firebaseClientKey: firebaseClientKey?.value || '',\n      azureFormRecognizerKey: azureFormRecognizerKey?.value,\n      azureFormRecognizerEndpoint: azureFormRecognizerEndpoint?.value,\n      azureStorageAccount: azureStorageAccount?.value,\n      azureStorageAccountKey: azureStorageAccountKey?.value,\n      azureStorageConnectionString: azureStorageConnectionString?.value,\n      azureStorageContainer: azureStorageContainer?.value,\n      storageProvider: storageProvider?.value\n    };\n\n    console.log('‚úÖ Azure secrets loaded successfully');\n    return cachedSecrets;\n\n  } catch (error) {\n    console.error('‚ùå Failed to fetch Azure secrets:', error);\n    \n    // Fallback to environment variables if Key Vault fails\n    console.log('üîÑ Falling back to environment variables...');\n    const fallbackSecrets: AzureSecrets = {\n      speechKey: process.env.AZURE_SPEECH_KEY || process.env.SPEECH_KEY || '',\n      speechEndpoint: process.env.SPEECH_ENDPOINT || 'https://eastus2.api.cognitive.microsoft.com/',\n      azureOpenAIKey: process.env.AZURE_OPENAI_API_KEY || process.env.AZURE_OPENAI_KEY || '',\n      azureOpenAIEndpoint: process.env.AZURE_OPENAI_ENDPOINT || '',\n      azureOpenAIDeployment: process.env.AZURE_OPENAI_DEPLOYMENT || '',\n      // Firebase fallbacks\n      firebaseProjectId: process.env.FIREBASE_PROJECT_ID || '',\n      firebaseClientEmail: process.env.FIREBASE_CLIENT_EMAIL || '',\n      firebasePrivateKey: process.env.FIREBASE_PRIVATE_KEY || '',\n      firebaseClientKey: '',\n      // Optional fallbacks\n      azureFormRecognizerKey: process.env.AZURE_FORM_RECOGNIZER_KEY,\n      azureFormRecognizerEndpoint: process.env.AZURE_FORM_RECOGNIZER_ENDPOINT,\n      azureStorageAccount: process.env.AZURE_STORAGE_ACCOUNT_NAME,\n      azureStorageAccountKey: process.env.AZURE_STORAGE_ACCOUNT_KEY\n    };\n\n    // Only warn about critical missing secrets\n    const missingCritical = [];\n    if (!fallbackSecrets.speechKey) missingCritical.push('SPEECH_KEY');\n    if (!fallbackSecrets.azureOpenAIKey) missingCritical.push('AZURE_OPENAI_KEY');\n    \n    // Only warn about missing optional secrets if not available from environment\n    const missingOptional = [];\n    if (!fallbackSecrets.firebaseProjectId && !process.env.FIREBASE_PROJECT_ID) missingOptional.push('FIREBASE_PROJECT_ID');\n\n    if (missingCritical.length > 0) {\n      console.error(`‚ùå Critical secrets missing: ${missingCritical.join(', ')}`);\n    }\n    if (missingOptional.length > 0) {\n      console.warn(`‚ö†Ô∏è Optional secrets missing: ${missingOptional.join(', ')}`);\n    }\n\n    cachedSecrets = fallbackSecrets;\n    return cachedSecrets;\n  }\n}\n\n\n/**\n * Initialize environment variables from Azure Key Vault\n * This should be called at application startup\n */\nexport async function initializeAzureEnvironment(): Promise<void> {\n  if (isClient) return;\n  try {\n    const secrets = await fetchAzureSecrets();\n    \n    // Set Azure service environment variables\n    process.env.SPEECH_KEY = secrets.speechKey;\n    process.env.SPEECH_ENDPOINT = secrets.speechEndpoint;\n    \n    // Set Azure OpenAI environment variables\n    process.env.AZURE_OPENAI_KEY = secrets.azureOpenAIKey;\n    process.env.AZURE_OPENAI_ENDPOINT = secrets.azureOpenAIEndpoint;\n    process.env.AZURE_OPENAI_DEPLOYMENT = secrets.azureOpenAIDeployment;\n    \n    // Set Firebase environment variables\n    process.env.FIREBASE_PROJECT_ID = secrets.firebaseProjectId;\n    process.env.FIREBASE_CLIENT_EMAIL = secrets.firebaseClientEmail;\n    process.env.FIREBASE_PRIVATE_KEY = secrets.firebasePrivateKey;\n    \n    // Set client-side environment variables using string concatenation to avoid Next.js inlining\n    const nextPublicPrefix = 'NEXT_PUBLIC_';\n    process.env[nextPublicPrefix + 'SPEECH_KEY'] = secrets.speechKey;\n    process.env[nextPublicPrefix + 'SPEECH_ENDPOINT'] = secrets.speechEndpoint;\n    process.env[nextPublicPrefix + 'AZURE_OPENAI_API_KEY'] = secrets.azureOpenAIKey;\n    process.env[nextPublicPrefix + 'AZURE_OPENAI_ENDPOINT'] = secrets.azureOpenAIEndpoint;\n    process.env[nextPublicPrefix + 'AZURE_OPENAI_DEPLOYMENT'] = secrets.azureOpenAIDeployment;\n    process.env[nextPublicPrefix + 'FIREBASE_PROJECT_ID'] = secrets.firebaseProjectId;\n    \n    // Set the Firebase client key from secrets or environment\n    if (secrets.firebaseClientKey) {\n      process.env[nextPublicPrefix + 'FIREBASE_CLIENT_KEY'] = secrets.firebaseClientKey;\n      console.log('üîë Firebase client key set from Azure Key Vault');\n    } else {\n      console.warn('‚ö†Ô∏è Firebase client key not found in Azure Key Vault');\n    }\n    \n    // Set optional Azure services if available\n    if (secrets.azureFormRecognizerKey) {\n      process.env.AZURE_FORM_RECOGNIZER_KEY = secrets.azureFormRecognizerKey;\n    }\n    if (secrets.azureFormRecognizerEndpoint) {\n      process.env.AZURE_FORM_RECOGNIZER_ENDPOINT = secrets.azureFormRecognizerEndpoint;\n    }\n    // Set storage configuration\n    if (secrets.azureStorageAccount) {\n      process.env.AZURE_STORAGE_ACCOUNT = secrets.azureStorageAccount;\n    }\n    if (secrets.azureStorageAccountKey) {\n      process.env.AZURE_STORAGE_ACCOUNT_KEY = secrets.azureStorageAccountKey;\n    }\n    if (secrets.azureStorageConnectionString) {\n      process.env.AZURE_STORAGE_CONNECTION_STRING = secrets.azureStorageConnectionString;\n    }\n    if (secrets.azureStorageContainer) {\n      process.env.AZURE_STORAGE_CONTAINER = secrets.azureStorageContainer;\n    }\n    if (secrets.storageProvider) {\n      process.env.STORAGE_PROVIDER = secrets.storageProvider;\n    }\n\n    console.log('üåü Azure environment initialized successfully');\n  } catch (error) {\n    console.error('‚ùå Failed to initialize Azure environment:', error);\n    throw error;\n  }\n}\n\n/**\n * Get generic configuration values (used by storage abstraction and other services)\n */\nexport async function getConfiguration(): Promise<Record<string, string>> {\n  try {\n    const secrets = await fetchAzureSecrets();\n    \n    return {\n      // Azure Storage configuration\n      'AZURE_STORAGE_ACCOUNT': secrets.azureStorageAccount || process.env.AZURE_STORAGE_ACCOUNT || 'prepbettrstorage684',\n      'AZURE_STORAGE_ACCOUNT_KEY': secrets.azureStorageAccountKey || process.env.AZURE_STORAGE_ACCOUNT_KEY || '',\n      'AZURE_STORAGE_CONNECTION_STRING': secrets.azureStorageConnectionString || process.env.AZURE_STORAGE_CONNECTION_STRING || '',\n      'AZURE_STORAGE_CONTAINER': secrets.azureStorageContainer || process.env.AZURE_STORAGE_CONTAINER || 'resumes',\n      'STORAGE_PROVIDER': secrets.storageProvider || process.env.STORAGE_PROVIDER || 'firebase',\n      \n      // Azure AI services\n      'AZURE_OPENAI_KEY': secrets.azureOpenAIKey,\n      'AZURE_OPENAI_ENDPOINT': secrets.azureOpenAIEndpoint,\n      'AZURE_OPENAI_DEPLOYMENT': secrets.azureOpenAIDeployment,\n      'AZURE_SPEECH_KEY': secrets.speechKey,\n      'AZURE_SPEECH_ENDPOINT': secrets.speechEndpoint,\n      'AZURE_FORM_RECOGNIZER_KEY': secrets.azureFormRecognizerKey || '',\n      'AZURE_FORM_RECOGNIZER_ENDPOINT': secrets.azureFormRecognizerEndpoint || '',\n      \n      // Firebase configuration\n      'FIREBASE_PROJECT_ID': secrets.firebaseProjectId,\n      'FIREBASE_CLIENT_EMAIL': secrets.firebaseClientEmail,\n      'FIREBASE_PRIVATE_KEY': secrets.firebasePrivateKey,\n      'FIREBASE_CLIENT_KEY': secrets.firebaseClientKey || ''\n    };\n  } catch (error) {\n    console.warn('Failed to get configuration from Azure, using environment variables:', error);\n    \n    // Fallback to environment variables only\n    return {\n      'AZURE_STORAGE_ACCOUNT': process.env.AZURE_STORAGE_ACCOUNT || 'prepbettrstorage684',\n      'AZURE_STORAGE_ACCOUNT_KEY': process.env.AZURE_STORAGE_ACCOUNT_KEY || '',\n      'AZURE_STORAGE_CONNECTION_STRING': process.env.AZURE_STORAGE_CONNECTION_STRING || '',\n      'AZURE_STORAGE_CONTAINER': process.env.AZURE_STORAGE_CONTAINER || 'resumes',\n      'STORAGE_PROVIDER': process.env.STORAGE_PROVIDER || 'firebase',\n      'AZURE_OPENAI_KEY': process.env.AZURE_OPENAI_KEY || '',\n      'AZURE_OPENAI_ENDPOINT': process.env.AZURE_OPENAI_ENDPOINT || '',\n      'AZURE_OPENAI_DEPLOYMENT': process.env.AZURE_OPENAI_DEPLOYMENT || '',\n      'AZURE_SPEECH_KEY': process.env.AZURE_SPEECH_KEY || process.env.SPEECH_KEY || '',\n      'AZURE_SPEECH_ENDPOINT': process.env.SPEECH_ENDPOINT || '',\n      'AZURE_FORM_RECOGNIZER_KEY': process.env.AZURE_FORM_RECOGNIZER_KEY || '',\n      'AZURE_FORM_RECOGNIZER_ENDPOINT': process.env.AZURE_FORM_RECOGNIZER_ENDPOINT || '',\n      'FIREBASE_PROJECT_ID': process.env.FIREBASE_PROJECT_ID || '',\n      'FIREBASE_CLIENT_EMAIL': process.env.FIREBASE_CLIENT_EMAIL || '',\n      'FIREBASE_PRIVATE_KEY': process.env.FIREBASE_PRIVATE_KEY || '',\n      // Use string concatenation to avoid Next.js inlining\n      'FIREBASE_CLIENT_KEY': process.env['NEXT_PUBLIC_' + 'FIREBASE_CLIENT_KEY'] || ''\n    };\n  }\n}\n\n/**\n * Get current Azure configuration (for debugging)\n */\nexport function getAzureConfig() {\n  const nextPublicPrefix = 'NEXT_PUBLIC_';\n  return {\n    keyVaultUri: AZURE_KEY_VAULT_URI,\n    hasSecretsCache: !!cachedSecrets,\n    environment: {\n      speechKey: !!process.env[nextPublicPrefix + 'SPEECH_KEY'],\n      speechEndpoint: !!process.env[nextPublicPrefix + 'SPEECH_ENDPOINT'],\n      azureOpenAIKey: !!process.env.AZURE_OPENAI_KEY,\n      azureOpenAIEndpoint: !!process.env.AZURE_OPENAI_ENDPOINT,\n      azureOpenAIDeployment: !!process.env.AZURE_OPENAI_DEPLOYMENT\n    }\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/cache/redis-cache.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[491,494],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[491,494],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":18,"column":11,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":18,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":19,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1609,1612],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1609,1612],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1667,1670],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1667,1670],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":120,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3784,3787],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3784,3787],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":153,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4774,4777],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4774,4777],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":196,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":196,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6100,6103],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6100,6103],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":233,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":233,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7103,7106],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7103,7106],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":372,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":372,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10760,10763],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10760,10763],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":428,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":428,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12310,12313],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12310,12313],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":496,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":496,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13874,13877],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13874,13877],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":556,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":556,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15300,15303],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15300,15303],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":609,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":609,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16623,16626],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16623,16626],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'latency' is defined but never used.","line":618,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":618,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'latency' is defined but never used.","line":622,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":622,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":687,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":687,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18709,18712],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18709,18712],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":688,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":688,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18756,18759],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18756,18759],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":691,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":691,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18907,18910],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18907,18910],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":722,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":722,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19659,19662],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19659,19662],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":722,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":722,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19669,19672],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19669,19672],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":722,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":722,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19680,19683],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19680,19683],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":739,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":739,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20120,20123],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20120,20123],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":23,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Redis Cache Service - Intelligent Caching Layer\n * \n * Features:\n * - Automatic JSON serialization/deserialization\n * - Key namespacing by environment and service\n * - Fallback to in-memory cache for local development\n * - Circuit breaker pattern for Redis failures\n * - Connection pooling and retry logic\n * - Performance metrics tracking\n */\n\nimport { logServerError } from '@/lib/errors';\n\n// Conditional Redis import to avoid build errors when ioredis is not installed\nlet Redis: any = null;\ntry {\n  Redis = require('ioredis');\n} catch (error) {\n  if (process.env.NODE_ENV !== 'development') {\n    console.warn('‚ö†Ô∏è ioredis package not found - Redis cache will be disabled');\n  }\n}\n\n// ===== INTERFACES =====\n\nexport interface CacheOptions {\n  ttl?: number; // Time to live in seconds\n  tags?: string[]; // Cache tags for bulk invalidation\n  compress?: boolean; // Enable compression for large values\n  serialize?: boolean; // Custom serialization (default: true)\n}\n\nexport interface CacheStats {\n  hits: number;\n  misses: number;\n  errors: number;\n  hitRatio: number;\n  connectionStatus: 'connected' | 'disconnected' | 'connecting';\n  lastError?: string;\n  uptime?: number;\n}\n\nexport interface CacheConfig {\n  host: string;\n  port: number;\n  password?: string;\n  ssl?: boolean;\n  keyPrefix: string;\n  defaultTTL: number;\n  maxConnections: number;\n  retryDelayOnFailover: number;\n  retryTimeoutInMilliseconds: number;\n  enableCircuitBreaker: boolean;\n  circuitBreakerThreshold: number;\n  fallbackToMemory: boolean;\n}\n\n// ===== CACHE IMPLEMENTATION =====\n\nclass RedisCacheService {\n  private client: any = null;\n  private fallbackCache: Map<string, { value: any; expiry: number; tags?: string[] }> = new Map();\n  private config: CacheConfig;\n  private stats: CacheStats = {\n    hits: 0,\n    misses: 0,\n    errors: 0,\n    hitRatio: 0,\n    connectionStatus: 'disconnected'\n  };\n  \n  // Circuit breaker state\n  private circuitBreakerOpen = false;\n  private circuitBreakerCount = 0;\n  private lastCircuitBreakerReset = Date.now();\n  \n  // Performance tracking\n  private startTime = Date.now();\n  \n  constructor(config: Partial<CacheConfig>) {\n    this.config = {\n      host: config.host || process.env.REDIS_HOST || 'localhost',\n      port: config.port || parseInt(process.env.REDIS_PORT || '6379'),\n      password: config.password || process.env.REDIS_PASSWORD,\n      ssl: config.ssl || process.env.REDIS_SSL === 'true',\n      keyPrefix: config.keyPrefix || `${process.env.NODE_ENV || 'dev'}:`,\n      defaultTTL: config.defaultTTL || 300, // 5 minutes\n      maxConnections: config.maxConnections || 50,\n      retryDelayOnFailover: config.retryDelayOnFailover || 100,\n      retryTimeoutInMilliseconds: config.retryTimeoutInMilliseconds || 5000,\n      enableCircuitBreaker: config.enableCircuitBreaker !== undefined ? config.enableCircuitBreaker : true,\n      circuitBreakerThreshold: config.circuitBreakerThreshold || 5,\n      fallbackToMemory: config.fallbackToMemory !== undefined ? config.fallbackToMemory : true\n    };\n    \n    // Initialize Redis connection in non-development environments\n    if (process.env.NODE_ENV !== 'development' || process.env.FORCE_REDIS === 'true') {\n      this.initializeRedis();\n    } else {\n      console.log('üîß Redis cache running in memory-only mode for development');\n    }\n    \n    // Start periodic cleanup for fallback cache\n    this.startFallbackCleanup();\n  }\n  \n  // ===== INITIALIZATION =====\n  \n  private async initializeRedis(): Promise<void> {\n    try {\n      // Skip Redis initialization if Redis is not available\n      if (!Redis) {\n        console.log('üö´ Redis package not available - using memory-only cache');\n        return;\n      }\n      \n      this.stats.connectionStatus = 'connecting';\n      \n      const redisOptions: any = {\n        host: this.config.host,\n        port: this.config.port,\n        password: this.config.password,\n        tls: this.config.ssl ? {} : undefined,\n        keyPrefix: this.config.keyPrefix,\n        \n        // Connection settings\n        connectTimeout: 10000,\n        lazyConnect: true,\n        maxRetriesPerRequest: 3,\n        retryDelayOnFailover: this.config.retryDelayOnFailover,\n        \n        // Performance optimizations\n        enableReadyCheck: true,\n        maxLoadingTimeout: 5000,\n        keepAlive: 30000,\n        \n        // Connection pooling\n        family: 4, // Use IPv4\n        db: 0,\n      };\n      \n      this.client = new Redis(redisOptions);\n      \n      // Event handlers\n      this.client.on('connect', () => {\n        console.log('‚úÖ Redis connected successfully');\n        this.stats.connectionStatus = 'connected';\n        this.circuitBreakerOpen = false;\n        this.circuitBreakerCount = 0;\n      });\n      \n      this.client.on('error', (error: any) => {\n        console.error('‚ùå Redis connection error:', error);\n        this.stats.connectionStatus = 'disconnected';\n        this.stats.lastError = error.message;\n        this.stats.errors++;\n        \n        // Circuit breaker logic\n        if (this.config.enableCircuitBreaker) {\n          this.circuitBreakerCount++;\n          if (this.circuitBreakerCount >= this.config.circuitBreakerThreshold) {\n            this.circuitBreakerOpen = true;\n            console.warn('üö® Redis circuit breaker opened - falling back to memory cache');\n          }\n        }\n        \n        logServerError(error, { service: 'redis-cache', action: 'connection' });\n      });\n      \n      this.client.on('reconnecting', () => {\n        console.log('üîÑ Redis reconnecting...');\n        this.stats.connectionStatus = 'connecting';\n      });\n      \n      // Attempt initial connection\n      await this.client.connect();\n      \n    } catch (error) {\n      console.error('‚ùå Failed to initialize Redis:', error);\n      this.stats.connectionStatus = 'disconnected';\n      \n      if (!this.config.fallbackToMemory) {\n        throw error;\n      }\n      \n      console.log('‚ö†Ô∏è Continuing with memory-only cache');\n    }\n  }\n  \n  // ===== CORE CACHE OPERATIONS =====\n  \n  /**\n   * Get value from cache with automatic fallback\n   */\n  async get<T = any>(key: string): Promise<T | null> {\n    const fullKey = this.buildKey(key);\n    const startTime = Date.now();\n    \n    try {\n      // Try Redis first (if available and circuit breaker is closed)\n      if (this.isRedisAvailable()) {\n        const value = await this.client!.get(fullKey);\n        \n        if (value !== null) {\n          this.recordHit(Date.now() - startTime);\n          return this.deserialize<T>(value);\n        }\n        \n        this.recordMiss(Date.now() - startTime);\n        return null;\n      }\n      \n      // Fallback to memory cache\n      return this.getFromMemory<T>(fullKey);\n      \n    } catch (error) {\n      console.error(`Redis GET error for key ${key}:`, error);\n      this.recordError();\n      \n      // Fallback to memory cache on Redis error\n      if (this.config.fallbackToMemory) {\n        return this.getFromMemory<T>(fullKey);\n      }\n      \n      return null;\n    }\n  }\n  \n  /**\n   * Set value in cache with TTL and tags\n   */\n  async set(key: string, value: any, options: CacheOptions = {}): Promise<boolean> {\n    const fullKey = this.buildKey(key);\n    const ttl = options.ttl || this.config.defaultTTL;\n    const serializedValue = this.serialize(value, options.compress);\n    \n    try {\n      // Set in Redis (if available)\n      if (this.isRedisAvailable()) {\n        const result = await this.client!.setex(fullKey, ttl, serializedValue);\n        \n        // Store tags for bulk invalidation\n        if (options.tags && options.tags.length > 0) {\n          await this.setTags(fullKey, options.tags, ttl);\n        }\n        \n        return result === 'OK';\n      }\n      \n      // Fallback to memory cache\n      return this.setInMemory(fullKey, value, ttl, options.tags);\n      \n    } catch (error) {\n      console.error(`Redis SET error for key ${key}:`, error);\n      this.recordError();\n      \n      // Fallback to memory cache on Redis error\n      if (this.config.fallbackToMemory) {\n        return this.setInMemory(fullKey, value, ttl, options.tags);\n      }\n      \n      return false;\n    }\n  }\n  \n  /**\n   * Delete key from cache\n   */\n  async delete(key: string): Promise<boolean> {\n    const fullKey = this.buildKey(key);\n    \n    try {\n      if (this.isRedisAvailable()) {\n        const result = await this.client!.del(fullKey);\n        return result > 0;\n      }\n      \n      // Delete from memory cache\n      return this.fallbackCache.delete(fullKey);\n      \n    } catch (error) {\n      console.error(`Redis DEL error for key ${key}:`, error);\n      this.recordError();\n      \n      // Delete from memory cache on Redis error\n      this.fallbackCache.delete(fullKey);\n      return false;\n    }\n  }\n  \n  /**\n   * Check if key exists in cache\n   */\n  async exists(key: string): Promise<boolean> {\n    const fullKey = this.buildKey(key);\n    \n    try {\n      if (this.isRedisAvailable()) {\n        const result = await this.client!.exists(fullKey);\n        return result === 1;\n      }\n      \n      // Check memory cache\n      const cached = this.fallbackCache.get(fullKey);\n      return cached !== undefined && cached.expiry > Date.now();\n      \n    } catch (error) {\n      console.error(`Redis EXISTS error for key ${key}:`, error);\n      this.recordError();\n      return false;\n    }\n  }\n  \n  /**\n   * Increment numeric value atomically\n   */\n  async increment(key: string, delta: number = 1): Promise<number> {\n    const fullKey = this.buildKey(key);\n    \n    try {\n      if (this.isRedisAvailable()) {\n        return await this.client!.incrby(fullKey, delta);\n      }\n      \n      // Memory fallback for increment\n      const current = await this.get<number>(key) || 0;\n      const newValue = current + delta;\n      await this.set(key, newValue);\n      return newValue;\n      \n    } catch (error) {\n      console.error(`Redis INCR error for key ${key}:`, error);\n      this.recordError();\n      return 0;\n    }\n  }\n  \n  /**\n   * Set expiration on existing key\n   */\n  async expire(key: string, ttl: number): Promise<boolean> {\n    const fullKey = this.buildKey(key);\n    \n    try {\n      if (this.isRedisAvailable()) {\n        const result = await this.client!.expire(fullKey, ttl);\n        return result === 1;\n      }\n      \n      // Update expiry in memory cache\n      const cached = this.fallbackCache.get(fullKey);\n      if (cached) {\n        cached.expiry = Date.now() + (ttl * 1000);\n        return true;\n      }\n      \n      return false;\n      \n    } catch (error) {\n      console.error(`Redis EXPIRE error for key ${key}:`, error);\n      this.recordError();\n      return false;\n    }\n  }\n  \n  // ===== BULK OPERATIONS =====\n  \n  /**\n   * Get multiple keys at once\n   */\n  async mget<T = any>(keys: string[]): Promise<Record<string, T | null>> {\n    const fullKeys = keys.map(key => this.buildKey(key));\n    const result: Record<string, T | null> = {};\n    \n    try {\n      if (this.isRedisAvailable()) {\n        const values = await this.client!.mget(fullKeys);\n        \n        keys.forEach((key, index) => {\n          const value = values[index];\n          result[key] = value !== null ? this.deserialize<T>(value) : null;\n          \n          if (value !== null) {\n            this.stats.hits++;\n          } else {\n            this.stats.misses++;\n          }\n        });\n        \n        return result;\n      }\n      \n      // Memory fallback\n      keys.forEach(key => {\n        const fullKey = this.buildKey(key);\n        const cached = this.fallbackCache.get(fullKey);\n        \n        if (cached && cached.expiry > Date.now()) {\n          result[key] = cached.value;\n          this.stats.hits++;\n        } else {\n          result[key] = null;\n          this.stats.misses++;\n        }\n      });\n      \n      return result;\n      \n    } catch (error) {\n      console.error('Redis MGET error:', error);\n      this.recordError();\n      return result;\n    }\n  }\n  \n  /**\n   * Invalidate cache by tags\n   */\n  async invalidateByTag(tag: string): Promise<number> {\n    try {\n      if (this.isRedisAvailable()) {\n        const tagKey = this.buildTagKey(tag);\n        const keys = await this.client!.smembers(tagKey);\n        \n        if (keys.length > 0) {\n          const pipeline = this.client!.pipeline();\n          keys.forEach((key: any) => pipeline.del(key));\n          pipeline.del(tagKey);\n          \n          const results = await pipeline.exec();\n          return results?.length || 0;\n        }\n        \n        return 0;\n      }\n      \n      // Memory fallback - iterate through all keys\n      let deleted = 0;\n      for (const [key, cached] of this.fallbackCache.entries()) {\n        if (cached.tags?.includes(tag)) {\n          this.fallbackCache.delete(key);\n          deleted++;\n        }\n      }\n      \n      return deleted;\n      \n    } catch (error) {\n      console.error(`Error invalidating tag ${tag}:`, error);\n      this.recordError();\n      return 0;\n    }\n  }\n  \n  /**\n   * Clear all cache data\n   */\n  async clear(): Promise<boolean> {\n    try {\n      if (this.isRedisAvailable()) {\n        await this.client!.flushdb();\n      }\n      \n      // Clear memory cache\n      this.fallbackCache.clear();\n      \n      console.log('üßπ Cache cleared successfully');\n      return true;\n      \n    } catch (error) {\n      console.error('Error clearing cache:', error);\n      this.recordError();\n      return false;\n    }\n  }\n  \n  // ===== UTILITY METHODS =====\n  \n  /**\n   * Get cache statistics\n   */\n  getStats(): CacheStats {\n    const totalRequests = this.stats.hits + this.stats.misses;\n    this.stats.hitRatio = totalRequests > 0 ? (this.stats.hits / totalRequests) * 100 : 0;\n    \n    return {\n      ...this.stats,\n      uptime: Date.now() - this.startTime\n    };\n  }\n  \n  /**\n   * Health check\n   */\n  async healthCheck(): Promise<{ healthy: boolean; message?: string; details?: any }> {\n    try {\n      if (this.isRedisAvailable()) {\n        await this.client!.ping();\n        return { \n          healthy: true,\n          details: {\n            circuitBreakerOpen: this.circuitBreakerOpen,\n            ...this.getStats()\n          }\n        };\n      }\n      \n      return {\n        healthy: this.config.fallbackToMemory,\n        message: 'Redis unavailable, using memory cache',\n        details: {\n          fallbackCacheSize: this.fallbackCache.size,\n          ...this.getStats()\n        }\n      };\n      \n    } catch (error) {\n      return {\n        healthy: false,\n        message: error instanceof Error ? error.message : 'Unknown error',\n        details: this.getStats()\n      };\n    }\n  }\n  \n  /**\n   * Close Redis connection\n   */\n  async close(): Promise<void> {\n    if (this.client) {\n      await this.client.disconnect();\n      this.client = null;\n      this.stats.connectionStatus = 'disconnected';\n    }\n    \n    this.fallbackCache.clear();\n  }\n  \n  // ===== PRIVATE HELPER METHODS =====\n  \n  private buildKey(key: string): string {\n    return `${this.config.keyPrefix}${key}`;\n  }\n  \n  private buildTagKey(tag: string): string {\n    return `${this.config.keyPrefix}tag:${tag}`;\n  }\n  \n  private isRedisAvailable(): boolean {\n    return this.client !== null && \n           this.stats.connectionStatus === 'connected' && \n           !this.circuitBreakerOpen;\n  }\n  \n  private serialize(value: any, compress = false): string {\n    const serialized = JSON.stringify(value);\n    \n    if (compress && serialized.length > 1024) {\n      // Could implement compression here (zlib, etc.)\n      // For now, just return the JSON string\n      return serialized;\n    }\n    \n    return serialized;\n  }\n  \n  private deserialize<T>(value: string): T {\n    try {\n      return JSON.parse(value) as T;\n    } catch (error) {\n      console.error('Failed to deserialize cached value:', error);\n      return value as unknown as T;\n    }\n  }\n  \n  private async setTags(key: string, tags: string[], ttl: number): Promise<void> {\n    if (!this.isRedisAvailable() || !tags.length) return;\n    \n    const pipeline = this.client!.pipeline();\n    \n    tags.forEach(tag => {\n      const tagKey = this.buildTagKey(tag);\n      pipeline.sadd(tagKey, key);\n      pipeline.expire(tagKey, ttl);\n    });\n    \n    await pipeline.exec();\n  }\n  \n  private getFromMemory<T>(key: string): T | null {\n    const cached = this.fallbackCache.get(key);\n    \n    if (!cached) {\n      this.recordMiss(0);\n      return null;\n    }\n    \n    if (cached.expiry <= Date.now()) {\n      this.fallbackCache.delete(key);\n      this.recordMiss(0);\n      return null;\n    }\n    \n    this.recordHit(0);\n    return cached.value;\n  }\n  \n  private setInMemory(key: string, value: any, ttl: number, tags?: string[]): boolean {\n    this.fallbackCache.set(key, {\n      value,\n      expiry: Date.now() + (ttl * 1000),\n      tags\n    });\n    return true;\n  }\n  \n  private recordHit(latency: number): void {\n    this.stats.hits++;\n  }\n  \n  private recordMiss(latency: number): void {\n    this.stats.misses++;\n  }\n  \n  private recordError(): void {\n    this.stats.errors++;\n    \n    // Reset circuit breaker after 1 minute if errors decrease\n    if (this.circuitBreakerOpen && \n        Date.now() - this.lastCircuitBreakerReset > 60000) {\n      this.circuitBreakerOpen = false;\n      this.circuitBreakerCount = 0;\n      this.lastCircuitBreakerReset = Date.now();\n      console.log('üîÑ Redis circuit breaker reset');\n    }\n  }\n  \n  private startFallbackCleanup(): void {\n    // Clean expired entries every 5 minutes\n    setInterval(() => {\n      const now = Date.now();\n      for (const [key, cached] of this.fallbackCache.entries()) {\n        if (cached.expiry <= now) {\n          this.fallbackCache.delete(key);\n        }\n      }\n    }, 5 * 60 * 1000);\n  }\n}\n\n// ===== CACHE FACTORY =====\n\nlet cacheInstance: RedisCacheService | null = null;\n\nexport function createCache(config: Partial<CacheConfig>): RedisCacheService {\n  const defaultConfig: CacheConfig = {\n    host: process.env.REDIS_HOST || 'localhost',\n    port: parseInt(process.env.REDIS_PORT || '6379'),\n    password: process.env.REDIS_PASSWORD,\n    ssl: process.env.REDIS_SSL === 'true',\n    keyPrefix: `${process.env.NODE_ENV || 'dev'}:`,\n    defaultTTL: 300,\n    maxConnections: 50,\n    retryDelayOnFailover: 100,\n    retryTimeoutInMilliseconds: 5000,\n    enableCircuitBreaker: true,\n    circuitBreakerThreshold: 5,\n    fallbackToMemory: true\n  };\n  \n  return new RedisCacheService({ ...defaultConfig, ...config });\n}\n\nexport function getCache(): RedisCacheService {\n  if (!cacheInstance) {\n    cacheInstance = createCache({});\n  }\n  return cacheInstance;\n}\n\n// ===== CACHE DECORATORS =====\n\n/**\n * Decorator for caching function results\n */\nexport function cached(ttl: number = 300, keyGenerator?: (...args: any[]) => string) {\n  return function (target: any, propertyName: string, descriptor: PropertyDescriptor) {\n    const method = descriptor.value;\n    \n    descriptor.value = async function (...args: any[]) {\n      const cache = getCache();\n      const key = keyGenerator \n        ? keyGenerator(...args)\n        : `${target.constructor.name}:${propertyName}:${JSON.stringify(args)}`;\n      \n      // Try to get from cache first\n      const cachedResult = await cache.get(key);\n      if (cachedResult !== null) {\n        return cachedResult;\n      }\n      \n      // Execute original method\n      const result = await method.apply(this, args);\n      \n      // Cache the result\n      await cache.set(key, result, { ttl });\n      \n      return result;\n    };\n  };\n}\n\n// ===== CACHE MIDDLEWARE =====\n\n/**\n * Express middleware for response caching\n */\nexport function cacheMiddleware(ttl: number = 60) {\n  const cache = getCache();\n  \n  return async (req: any, res: any, next: any) => {\n    if (req.method !== 'GET') {\n      return next();\n    }\n    \n    const key = `http:${req.originalUrl || req.url}`;\n    const cachedResponse = await cache.get(key);\n    \n    if (cachedResponse) {\n      res.set(cachedResponse.headers);\n      res.status(cachedResponse.status);\n      res.send(cachedResponse.body);\n      return;\n    }\n    \n    // Capture response\n    const originalSend = res.send;\n    res.send = function (body: any) {\n      cache.set(key, {\n        status: res.statusCode,\n        headers: res.getHeaders(),\n        body\n      }, { ttl });\n      \n      originalSend.call(this, body);\n    };\n    \n    next();\n  };\n}\n\nexport default getCache;\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/config/environment-loader.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":124,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":124,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":160,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":160,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":186,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":186,"endColumn":19}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Environment Configuration Loader\n * \n * Provides centralized environment variable management with hierarchical loading:\n * 1. Azure App Configuration (primary)\n * 2. Azure Key Vault (sensitive secrets)\n * 3. Environment variables (fallback for local dev)\n * \n * Special handling for Cosmos DB connection strings and other sensitive data.\n */\n\nimport { unifiedConfigService } from '@/lib/services/unified-config-service';\nimport { logServerError } from '@/lib/errors';\n\n// ===== INTERFACES =====\n\nexport interface CosmosDbConfig {\n  connectionString: string;\n  database: string;\n  maxRUPerSecond: number;\n  batchSize: number;\n  connectionTimeout: number;\n  retryAttempts: number;\n}\n\nexport interface EnvironmentConfig {\n  environment: 'development' | 'staging' | 'production';\n  cosmosDb: CosmosDbConfig;\n  azure: {\n    appConfigConnectionString?: string;\n    appConfigEndpoint?: string;\n    keyVaultUrl?: string;\n  };\n  firebase: {\n    clientKey?: string;\n    adminKey?: string;\n  };\n  features: {\n    enableCosmosDb: boolean;\n    enableUnifiedConfig: boolean;\n    enableKeyVault: boolean;\n  };\n}\n\n// ===== CONFIGURATION LOADER =====\n\nclass EnvironmentConfigurationLoader {\n  private config: EnvironmentConfig | null = null;\n  private initialized = false;\n\n  /**\n   * Load environment configuration with hierarchy\n   */\n  async load(): Promise<EnvironmentConfig> {\n    if (this.config && this.initialized) {\n      return this.config;\n    }\n\n    try {\n      console.log('üîß Loading environment configuration...');\n\n      // Load base environment settings\n      const environment = this.getEnvironment();\n\n      // Load Cosmos DB configuration\n      const cosmosDb = await this.loadCosmosDbConfig();\n\n      // Load Azure service configuration\n      const azure = await this.loadAzureConfig();\n\n      // Load Firebase configuration\n      const firebase = await this.loadFirebaseConfig();\n\n      // Load feature flags\n      const features = await this.loadFeatureConfig();\n\n      this.config = {\n        environment,\n        cosmosDb,\n        azure,\n        firebase,\n        features\n      };\n\n      this.initialized = true;\n      console.log(`‚úÖ Environment configuration loaded for ${environment}`);\n\n      return this.config;\n    } catch (error) {\n      console.error('‚ùå Failed to load environment configuration:', error);\n      logServerError(error as Error, { service: 'environment-loader', action: 'load' });\n\n      // Return minimal fallback configuration\n      return this.getFallbackConfig();\n    }\n  }\n\n  /**\n   * Load Cosmos DB configuration with hierarchy\n   */\n  private async loadCosmosDbConfig(): Promise<CosmosDbConfig> {\n    try {\n      // Try unified config service first\n      const [connectionString, maxRUPerSecond, batchSize, connectionTimeout, retryAttempts] = await Promise.all([\n        this.getConfigValue('data.cosmos.connectionString', process.env.COSMOS_CONNECTION_STRING),\n        this.getConfigValue('data.cosmos.maxRUPerSecond', 4000),\n        this.getConfigValue('data.cosmos.batchSize', 100),\n        this.getConfigValue('data.cosmos.connectionTimeout', 10000),\n        this.getConfigValue('data.cosmos.retryAttempts', 3)\n      ]);\n\n      if (!connectionString) {\n        throw new Error('Cosmos DB connection string is required');\n      }\n\n      return {\n        connectionString,\n        database: process.env.COSMOS_DATABASE || 'prepbettr',\n        maxRUPerSecond: Number(maxRUPerSecond),\n        batchSize: Number(batchSize),\n        connectionTimeout: Number(connectionTimeout),\n        retryAttempts: Number(retryAttempts)\n      };\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Failed to load Cosmos DB config from unified service, using environment fallback');\n      \n      return {\n        connectionString: process.env.COSMOS_CONNECTION_STRING || '',\n        database: process.env.COSMOS_DATABASE || 'prepbettr',\n        maxRUPerSecond: Number(process.env.COSMOS_MAX_RU_PER_SECOND || 4000),\n        batchSize: Number(process.env.COSMOS_BATCH_SIZE || 100),\n        connectionTimeout: Number(process.env.COSMOS_CONNECTION_TIMEOUT || 10000),\n        retryAttempts: Number(process.env.COSMOS_RETRY_ATTEMPTS || 3)\n      };\n    }\n  }\n\n  /**\n   * Load Azure service configuration\n   */\n  private async loadAzureConfig() {\n    return {\n      appConfigConnectionString: process.env.AZURE_APP_CONFIG_CONNECTION_STRING,\n      appConfigEndpoint: process.env.AZURE_APP_CONFIG_ENDPOINT,\n      keyVaultUrl: process.env.AZURE_KEY_VAULT_URL\n    };\n  }\n\n  /**\n   * Load Firebase configuration\n   */\n  private async loadFirebaseConfig() {\n    try {\n      const [clientKey, adminKey] = await Promise.all([\n        this.getConfigValue('auth.firebase.clientKey', process.env.NEXT_PUBLIC_FIREBASE_CLIENT_KEY),\n        this.getConfigValue('auth.firebase.adminKey', process.env.FIREBASE_ADMIN_KEY)\n      ]);\n\n      return { clientKey, adminKey };\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Failed to load Firebase config from unified service, using environment fallback');\n      \n      return {\n        clientKey: process.env.NEXT_PUBLIC_FIREBASE_CLIENT_KEY,\n        adminKey: process.env.FIREBASE_ADMIN_KEY\n      };\n    }\n  }\n\n  /**\n   * Load feature configuration\n   */\n  private async loadFeatureConfig() {\n    try {\n      const [enableCosmosDb, enableUnifiedConfig, enableKeyVault] = await Promise.all([\n        this.getConfigValue('features.enableCosmosDb', true),\n        this.getConfigValue('features.enableUnifiedConfig', true),\n        this.getConfigValue('features.enableKeyVault', false)\n      ]);\n\n      return {\n        enableCosmosDb: Boolean(enableCosmosDb),\n        enableUnifiedConfig: Boolean(enableUnifiedConfig),\n        enableKeyVault: Boolean(enableKeyVault)\n      };\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Failed to load feature config from unified service, using defaults');\n      \n      return {\n        enableCosmosDb: process.env.NODE_ENV === 'production',\n        enableUnifiedConfig: true,\n        enableKeyVault: false\n      };\n    }\n  }\n\n  /**\n   * Get configuration value with fallback hierarchy\n   */\n  private async getConfigValue<T>(key: string, fallback: T): Promise<T> {\n    try {\n      // Try unified config service first\n      const value = await unifiedConfigService.get(key, fallback);\n      return value;\n    } catch (error) {\n      // Fall back to provided fallback value\n      console.warn(`‚ö†Ô∏è Failed to get config ${key} from unified service:`, error);\n      return fallback;\n    }\n  }\n\n  /**\n   * Determine current environment\n   */\n  private getEnvironment(): 'development' | 'staging' | 'production' {\n    const env = process.env.NODE_ENV || 'development';\n    const vercelEnv = process.env.VERCEL_ENV;\n    \n    if (env === 'production') {\n      return 'production';\n    } else if (vercelEnv === 'preview' || process.env.APP_ENV === 'staging') {\n      return 'staging';\n    } else {\n      return 'development';\n    }\n  }\n\n  /**\n   * Get fallback configuration when loading fails\n   */\n  private getFallbackConfig(): EnvironmentConfig {\n    console.warn('‚ö†Ô∏è Using fallback environment configuration');\n    \n    return {\n      environment: this.getEnvironment(),\n      cosmosDb: {\n        connectionString: process.env.COSMOS_CONNECTION_STRING || '',\n        database: process.env.COSMOS_DATABASE || 'prepbettr',\n        maxRUPerSecond: 4000,\n        batchSize: 100,\n        connectionTimeout: 10000,\n        retryAttempts: 3\n      },\n      azure: {\n        appConfigConnectionString: process.env.AZURE_APP_CONFIG_CONNECTION_STRING,\n        appConfigEndpoint: process.env.AZURE_APP_CONFIG_ENDPOINT,\n        keyVaultUrl: process.env.AZURE_KEY_VAULT_URL\n      },\n      firebase: {\n        clientKey: process.env.NEXT_PUBLIC_FIREBASE_CLIENT_KEY,\n        adminKey: process.env.FIREBASE_ADMIN_KEY\n      },\n      features: {\n        enableCosmosDb: process.env.NODE_ENV === 'production',\n        enableUnifiedConfig: false, // Disable if unified config failed\n        enableKeyVault: false\n      }\n    };\n  }\n\n  /**\n   * Refresh configuration (useful for hot reloading in development)\n   */\n  async refresh(): Promise<EnvironmentConfig> {\n    this.config = null;\n    this.initialized = false;\n    return await this.load();\n  }\n\n  /**\n   * Get current configuration (throws if not loaded)\n   */\n  getCurrentConfig(): EnvironmentConfig {\n    if (!this.config) {\n      throw new Error('Environment configuration not loaded. Call load() first.');\n    }\n    return this.config;\n  }\n\n  /**\n   * Check if configuration is loaded\n   */\n  isLoaded(): boolean {\n    return this.initialized && this.config !== null;\n  }\n\n  /**\n   * Export configuration for deployment scripts\n   */\n  exportForDeployment(): Record<string, string> {\n    const config = this.getCurrentConfig();\n    \n    return {\n      NODE_ENV: config.environment,\n      COSMOS_DATABASE: config.cosmosDb.database,\n      COSMOS_MAX_RU_PER_SECOND: config.cosmosDb.maxRUPerSecond.toString(),\n      COSMOS_BATCH_SIZE: config.cosmosDb.batchSize.toString(),\n      COSMOS_CONNECTION_TIMEOUT: config.cosmosDb.connectionTimeout.toString(),\n      COSMOS_RETRY_ATTEMPTS: config.cosmosDb.retryAttempts.toString(),\n      // NOTE: Don't export connection strings or sensitive keys for security\n      AZURE_APP_CONFIG_ENDPOINT: config.azure.appConfigEndpoint || '',\n      AZURE_KEY_VAULT_URL: config.azure.keyVaultUrl || ''\n    };\n  }\n}\n\n// ===== SINGLETON INSTANCE =====\n\nexport const environmentLoader = new EnvironmentConfigurationLoader();\n\n// ===== CONVENIENCE FUNCTIONS =====\n\n/**\n * Load environment configuration (idempotent)\n */\nexport async function loadEnvironmentConfig(): Promise<EnvironmentConfig> {\n  return await environmentLoader.load();\n}\n\n/**\n * Get Cosmos DB configuration\n */\nexport async function getCosmosDbConfig(): Promise<CosmosDbConfig> {\n  const config = await loadEnvironmentConfig();\n  return config.cosmosDb;\n}\n\n/**\n * Check if Cosmos DB is enabled\n */\nexport async function isCosmosDbEnabled(): Promise<boolean> {\n  try {\n    const config = await loadEnvironmentConfig();\n    return config.features.enableCosmosDb && !!config.cosmosDb.connectionString;\n  } catch (error) {\n    console.warn('Failed to check Cosmos DB status:', error);\n    return false;\n  }\n}\n\n/**\n * Get environment name\n */\nexport async function getEnvironmentName(): Promise<string> {\n  const config = await loadEnvironmentConfig();\n  return config.environment;\n}\n\nexport default environmentLoader;\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/errors.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[342,345],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[342,345],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":45,"column":28,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":45,"endColumn":50},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":55,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1086,1089],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1086,1089],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":96,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2462,2465],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2462,2465],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":147,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4478,4481],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4478,4481],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// lib/errors.ts\n\nexport interface StandardErrorResponse {\n  error: string;\n  status: number;\n}\n\nexport interface ServerErrorContext {\n  userId?: string;\n  url?: string;\n  method?: string;\n  timestamp?: string;\n  userAgent?: string;\n  ip?: string;\n  service?: string;\n  action?: string;\n  errorCode?: string;\n  category?: string;\n  details?: any;\n  context?: string;\n  requestId?: string;\n}\n\n/**\n * Creates a standardized error response\n */\nexport function createErrorResponse(\n  error: string,\n  status: number\n): StandardErrorResponse {\n  return {\n    error,\n    status\n  };\n}\n\n/**\n * Creates a NextResponse error for API routes\n */\nexport function createApiErrorResponse(\n  error: string,\n  status: number\n) {\n  // Import NextResponse dynamically to avoid module issues\n  const { NextResponse } = require('next/server');\n  return NextResponse.json({ error }, { status });\n}\n\n/**\n * Logs server errors with context but never exposes sensitive information\n */\nexport function logServerError(\n  error: Error | string,\n  context: ServerErrorContext,\n  additionalContext?: Record<string, any>\n): void {\n  const errorMessage = error instanceof Error ? error.message : error;\n  const errorStack = error instanceof Error ? error.stack : undefined;\n  \n  // Create safe logging context (no sensitive data)\n  const safeContext = {\n    timestamp: context.timestamp || new Date().toISOString(),\n    url: context.url,\n    method: context.method,\n    userId: context.userId ? `user_${context.userId.slice(-8)}` : 'anonymous', // Only last 8 chars for privacy\n    userAgent: context.userAgent ? context.userAgent.slice(0, 100) : undefined, // Truncate UA\n    ip: context.ip ? context.ip.replace(/\\d+$/, 'xxx') : undefined, // Mask last IP octet\n    ...additionalContext\n  };\n\n  console.error('Server Error:', {\n    message: errorMessage,\n    context: safeContext,\n    stack: errorStack\n  });\n\n  // In production, you might want to send this to a logging service\n  // like DataDog, Sentry, etc.\n  if (process.env.NODE_ENV === 'production') {\n    // Example: Send to external logging service\n    // logger.error(errorMessage, safeContext);\n  }\n}\n\n/**\n * Determines if an error should be retried\n */\nexport function isRetryableError(status: number): boolean {\n  // Retry for 5xx errors and specific 4xx errors\n  return status >= 500 || status === 408 || status === 429;\n}\n\n/**\n * Maps common error types to standard error responses\n */\nexport function mapErrorToResponse(error: any): StandardErrorResponse {\n  // Network/Connection errors\n  if (error.name === 'AbortError' || error.code === 'ECONNABORTED') {\n    return createErrorResponse('Request timeout. Please try again.', 408);\n  }\n  \n  if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {\n    return createErrorResponse('Network error. Please check your connection.', 503);\n  }\n\n  // Azure OpenAI specific errors\n  if (error.status) {\n    switch (error.status) {\n      case 401:\n        return createErrorResponse('Service authentication failed. Please try again later.', 500);\n      case 429:\n        return createErrorResponse('Service temporarily unavailable due to high demand. Please try again later.', 429);\n      case 400:\n        return createErrorResponse('Invalid request format. Please check your input.', 400);\n      default:\n        if (error.status >= 500) {\n          return createErrorResponse('Service temporarily unavailable. Please try again later.', 500);\n        }\n    }\n  }\n\n  // Generic API errors\n  if (error.message) {\n    if (error.message.includes('API key') || error.message.includes('credentials')) {\n      return createErrorResponse('Service configuration error. Please contact support.', 500);\n    }\n    if (error.message.includes('quota') || error.message.includes('limit') || error.message.includes('rate')) {\n      return createErrorResponse('Service temporarily unavailable due to usage limits. Please try again later.', 429);\n    }\n    if (error.message.includes('not initialized')) {\n      return createErrorResponse('Service is not properly configured. Please contact support.', 500);\n    }\n  }\n\n  // Default error response\n  return createErrorResponse('An unexpected error occurred. Please try again.', 500);\n}\n\n/**\n * Standard fallback message for network failures\n */\nexport const NETWORK_FAILURE_MESSAGE = \"Could not fetch job description from the provided URL.\";\n\n/**\n * Gets user-friendly error message for frontend display\n */\nexport function getUserFriendlyErrorMessage(error: any, context?: string): string {\n  if (error?.error) {\n    return error.error;\n  }\n  \n  if (context === 'url_extraction') {\n    return NETWORK_FAILURE_MESSAGE;\n  }\n  \n  if (error?.message) {\n    // Don't expose internal error messages to users\n    if (error.message.includes('API key') || \n        error.message.includes('credentials') ||\n        error.message.includes('internal') ||\n        error.message.includes('database')) {\n      return 'Service temporarily unavailable. Please try again later.';\n    }\n    return error.message;\n  }\n\n  return 'An unexpected error occurred. Please try again.';\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/firebase/admin.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[386,389],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[386,389],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[420,423],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[420,423],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":19,"column":11,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":19,"endColumn":36},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":21,"column":25,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":21,"endColumn":54},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[809,812],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[809,812],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[836,839],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[836,839],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[940,943],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[940,943],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":149,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":149,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5110,5113],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5110,5113],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'token' is defined but never used.","line":188,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":188,"endColumn":42}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Firebase Admin SDK Configuration\n * \n * Real Firebase Admin SDK implementation with Azure Key Vault integration\n */\n\n// Client-side safety check\nconst isClient = typeof window !== 'undefined';\n\nif (isClient) {\n  console.warn('[Firebase Admin] Running on client side - using fallback implementations');\n}\n\n// Only import server-side dependencies when running on server\nlet admin: any = null;\nlet getConfiguration: any = null;\n\nif (!isClient) {\n  admin = require('firebase-admin');\n  try {\n    const azureConfig = require('@/lib/azure-config');\n    getConfiguration = azureConfig.getConfiguration;\n  } catch (error) {\n    console.warn('üî• Failed to import azure-config, getConfiguration will be undefined:', error);\n    getConfiguration = null;\n  }\n}\n\n// Global Firebase Admin app instance\nlet adminApp: any = null;\nlet adminAuth: any = null;\n\n/**\n * Initialize Firebase Admin SDK\n */\nasync function initializeFirebaseAdmin(): Promise<any> {\n  if (isClient) {\n    throw new Error('Firebase Admin SDK not available on client side');\n  }\n  \n  if (adminApp) {\n    return adminApp;\n  }\n\n  try {\n    console.log('üî• Starting Firebase Admin SDK initialization...');\n    \n    // Check if Firebase Admin is already initialized\n    const existingApps = admin.apps;\n    if (existingApps.length > 0) {\n      console.log('üî• Found existing Firebase Admin app, reusing...');\n      adminApp = existingApps[0];\n      return adminApp;\n    }\n\n    // Get Firebase configuration from Azure Key Vault or environment variables\n    let config: Record<string, string> = {};\n    try {\n      if (getConfiguration && typeof getConfiguration === 'function') {\n        config = await getConfiguration();\n      } else {\n        console.warn('üî• getConfiguration not available, using environment variables directly');\n      }\n    } catch (configError) {\n      console.warn('üî• Failed to get config from Azure, using environment variables:', configError);\n      config = {};\n    }\n    \n    const firebaseConfig = {\n      projectId: config['FIREBASE_PROJECT_ID'] || process.env.FIREBASE_PROJECT_ID || process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID || 'prepbettr',\n      clientEmail: config['FIREBASE_CLIENT_EMAIL'] || process.env.FIREBASE_CLIENT_EMAIL,\n      privateKey: config['FIREBASE_PRIVATE_KEY'] || process.env.FIREBASE_PRIVATE_KEY\n    };\n\n    console.log('üî• Firebase config loaded:', {\n      projectId: firebaseConfig.projectId,\n      hasClientEmail: !!firebaseConfig.clientEmail,\n      hasPrivateKey: !!firebaseConfig.privateKey && firebaseConfig.privateKey.length > 0\n    });\n\n    // Validate project ID\n    if (!firebaseConfig.projectId || firebaseConfig.projectId === 'prepbettr') {\n      console.warn('üî• Using default project ID - this may cause authentication issues');\n    }\n    \n    // Initialize Firebase Admin SDK\n    if (firebaseConfig.clientEmail && firebaseConfig.privateKey) {\n      console.log('üî• Initializing with service account credentials...');\n      \n      // Clean up private key format (handle escaped newlines)\n      let cleanPrivateKey = firebaseConfig.privateKey;\n      if (cleanPrivateKey.includes('\\\\n')) {\n        cleanPrivateKey = cleanPrivateKey.replace(/\\\\n/g, '\\n');\n      }\n      \n      // Validate private key format\n      if (!cleanPrivateKey.includes('-----BEGIN PRIVATE KEY-----')) {\n        throw new Error('Invalid private key format - missing BEGIN marker');\n      }\n      if (!cleanPrivateKey.includes('-----END PRIVATE KEY-----')) {\n        throw new Error('Invalid private key format - missing END marker');\n      }\n      \n      adminApp = admin.initializeApp({\n        credential: admin.credential.cert({\n          projectId: firebaseConfig.projectId,\n          clientEmail: firebaseConfig.clientEmail,\n          privateKey: cleanPrivateKey\n        }),\n        projectId: firebaseConfig.projectId\n      });\n    } else {\n      console.warn('üî• Missing service account credentials, initializing with project ID only');\n      \n      adminApp = admin.initializeApp({\n        projectId: firebaseConfig.projectId\n      });\n    }\n\n    console.log('üî• Firebase Admin SDK initialized successfully');\n    return adminApp;\n    \n  } catch (error) {\n    console.error('üî• Failed to initialize Firebase Admin SDK:', error);\n    \n    // Create a minimal fallback for development\n    console.warn('üî• Creating minimal fallback Firebase Admin instance');\n    \n    try {\n      // Use the default project ID as fallback\n      const fallbackProjectId = process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID || process.env.FIREBASE_PROJECT_ID || 'prepbettr-dev';\n      \n      adminApp = admin.initializeApp({\n        projectId: fallbackProjectId\n      });\n      \n      console.log('üî• Fallback Firebase Admin instance created');\n      return adminApp;\n    } catch (fallbackError) {\n      console.error('üî• Failed to create fallback Firebase Admin instance:', fallbackError);\n      throw new Error(`Firebase Admin SDK initialization completely failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n}\n\n/**\n * Get Firebase Admin Auth instance\n */\nexport async function getAdminAuth(): Promise<any> {\n  if (isClient) {\n    throw new Error('Firebase Admin SDK not available on client side');\n  }\n  \n  if (adminAuth) {\n    return adminAuth;\n  }\n\n  const app = await initializeFirebaseAdmin();\n  adminAuth = admin.auth(app);\n  return adminAuth;\n}\n\nexport async function getAdminFirestore() {\n  if (isClient) {\n    throw new Error('Firebase Admin SDK not available on client side');\n  }\n  \n  // Get or initialize the Firebase Admin app\n  const app = await initializeFirebaseAdmin();\n  \n  // Return the real Firestore instance\n  return admin.firestore(app);\n}\n\nexport async function getAdminRemoteConfig() {\n  if (isClient) {\n    throw new Error('Firebase Admin SDK not available on client side');\n  }\n  \n  return {\n    getTemplate: async () => ({ parameters: {} }),\n    publishTemplate: async () => {},\n    getParameter: async () => ({ defaultValue: null }),\n    setParameter: async () => {}\n  };\n}\n\nexport async function verifyIdToken(token: string) {\n  if (isClient) {\n    throw new Error('Firebase Admin SDK not available on client side');\n  }\n  \n  console.warn('Firebase Admin verifyIdToken deprecated - use unified auth system');\n  return {\n    uid: 'mock-user-id',\n    email: 'mock@example.com'\n  };\n}\n\nexport async function getDBService() {\n  return getAdminFirestore();\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/firebase/schema/resume-schema.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":133,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3143,3146],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3143,3146],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":134,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3168,3171],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3168,3171],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":135,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3195,3198],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3195,3198],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":302,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":302,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7430,7433],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7430,7433],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Extended Firestore Schema for Enhanced Resume Processing\n * \n * Defines the enhanced schema for storing resume data with ATS analysis,\n * job matching scores, and processor versioning for backward compatibility.\n */\n\nimport { FieldValue, Timestamp } from 'firebase-admin/firestore';\n\n// Base resume data structure (existing)\nexport interface BaseResumeData {\n  personalInfo: {\n    name?: string;\n    email?: string;\n    phone?: string;\n    address?: string;\n    linkedin?: string;\n    github?: string;\n    website?: string;\n    location?: string;\n  };\n  summary?: string;\n  skills: Array<{\n    skill: string;\n    category?: 'technical' | 'soft' | 'language' | 'certification' | 'tool';\n    proficiency?: 'beginner' | 'intermediate' | 'advanced' | 'expert';\n    yearsOfExperience?: number;\n  }>;\n  experience: Array<{\n    company: string;\n    position: string;\n    startDate?: string;\n    endDate?: string;\n    isCurrent?: boolean;\n    location?: string;\n    description?: string;\n    achievements?: string[];\n    technologies?: string[];\n    managementScope?: {\n      teamSize?: number;\n      budget?: string;\n      responsibilities?: string[];\n    };\n    quantifiableResults?: Array<{\n      metric: string;\n      value: number;\n      unit: string;\n      impact: string;\n    }>;\n  }>;\n  education: Array<{\n    institution: string;\n    degree: string;\n    field: string;\n    startDate?: string;\n    endDate?: string;\n    gpa?: number;\n    location?: string;\n    honors?: string[];\n    relevantCoursework?: string[];\n  }>;\n  projects?: Array<{\n    name: string;\n    description: string;\n    technologies?: string[];\n    url?: string;\n    github?: string;\n    startDate?: string;\n    endDate?: string;\n    role?: string;\n    teamSize?: number;\n    impact?: string;\n  }>;\n  certifications?: Array<{\n    name: string;\n    issuer: string;\n    date?: string;\n    expiryDate?: string;\n    credentialId?: string;\n    url?: string;\n    status?: 'active' | 'expired' | 'pending';\n  }>;\n  languages?: Array<{\n    name: string;\n    proficiency: 'native' | 'fluent' | 'conversational' | 'basic';\n    certifications?: string[];\n  }>;\n  publications?: Array<{\n    title: string;\n    venue: string;\n    date?: string;\n    url?: string;\n    coAuthors?: string[];\n  }>;\n  awards?: Array<{\n    name: string;\n    issuer: string;\n    date?: string;\n    description?: string;\n  }>;\n}\n\n// Enhanced resume document structure\nexport interface EnhancedResumeDocument {\n  // User identification\n  userId: string;\n  \n  // File metadata\n  fileName: string;\n  fileUrl: string;\n  filePath?: string;\n  sasUrl?: string;\n  fileSize?: number;\n  mimeType?: string;\n  \n  // Extracted resume data\n  extractedData: BaseResumeData;\n  \n  // Interview questions\n  interviewQuestions: string[];\n  \n  // Enhanced ATS & Job Matching fields (NEW)\n  atsScore?: number;\n  jobMatchScore?: number;\n  missingKeywords?: string[];\n  \n  // Raw extraction data (encrypted at-rest)\n  rawExtraction?: {\n    method: 'foundry-document-intelligence' | 'azure-form-recognizer' | 'openai-extraction';\n    confidence?: number;\n    processingTime?: number;\n    originalText?: string;\n    aiResponse?: any;\n    boundingBoxes?: any;\n    tableStructures?: any;\n  };\n  \n  // Processor versioning for backward compatibility (NEW)\n  processorVersion: 'foundry-v1' | 'legacy-v1';\n  \n  // Job description context (if provided)\n  jobDescription?: string;\n  targetRole?: string;\n  companyName?: string;\n  targetIndustry?: string;\n  experienceLevel?: 'entry' | 'mid' | 'senior' | 'executive';\n  \n  // Detailed ATS analysis (NEW)\n  atsAnalysis?: {\n    overallGrade: string;\n    keywordAnalysis: {\n      score: number;\n      totalKeywords: number;\n      matchedKeywords: string[];\n      missingKeywords: string[];\n      keywordDensity: number;\n      recommendations: string[];\n    };\n    formatAnalysis: {\n      score: number;\n      issues: Array<{\n        type: 'critical' | 'warning' | 'suggestion';\n        issue: string;\n        solution: string;\n        impact: string;\n      }>;\n      strengths: string[];\n    };\n    structureAnalysis: {\n      score: number;\n      missingElements: string[];\n      presentElements: string[];\n      recommendations: string[];\n    };\n    contentAnalysis: {\n      score: number;\n      strengthAreas: string[];\n      improvementAreas: string[];\n      recommendations: string[];\n    };\n    prioritizedRecommendations: Array<{\n      priority: 'high' | 'medium' | 'low';\n      category: 'keywords' | 'formatting' | 'structure' | 'content';\n      recommendation: string;\n      implementation: string;\n      expectedImpact: string;\n      timeToImplement: string;\n    }>;\n  };\n  \n  // Job matching analysis (NEW)\n  jobMatchAnalysis?: {\n    matchGrade: string;\n    skillsMatch: {\n      score: number;\n      matchedSkills: Array<{\n        skill: string;\n        resumeLevel: string;\n        requiredLevel: string;\n        match: 'exceeds' | 'meets' | 'below';\n      }>;\n      missingSkills: Array<{\n        skill: string;\n        importance: 'high' | 'medium' | 'low';\n        canLearn: boolean;\n        timeToLearn: string;\n      }>;\n      skillGapAnalysis: {\n        criticalGaps: string[];\n        niceToHaveGaps: string[];\n        strengthAreas: string[];\n      };\n    };\n    experienceMatch: {\n      score: number;\n      yearsRequired: number;\n      yearsCandidate: number;\n      yearsMatch: 'exceeds' | 'meets' | 'below';\n      industryMatch: {\n        score: number;\n        relevantIndustries: string[];\n        transferableExperience: string[];\n      };\n      roleSimilarity: {\n        score: number;\n        similarRoles: string[];\n        levelMatch: string;\n      };\n    };\n    educationMatch: {\n      score: number;\n      degreeMatch: boolean;\n      fieldRelevance: 'high' | 'medium' | 'low';\n      institutionPrestige: string;\n      additionalQualifications: string[];\n    };\n    culturalFit: {\n      score: number;\n      indicators: string[];\n      concerns: string[];\n      strengths: string[];\n    };\n    recommendations: Array<{\n      category: 'skills' | 'experience' | 'education' | 'presentation';\n      priority: 'high' | 'medium' | 'low';\n      recommendation: string;\n      reasoning: string;\n      resources: string[];\n      timeframe: string;\n    }>;\n    interviewPreparation: string[];\n  };\n  \n  // Storage provider information\n  storageProvider?: 'firebase' | 'azure-blob';\n  \n  // Timestamps\n  uploadDate: Timestamp | FieldValue;\n  lastModified: Timestamp | FieldValue;\n  lastAnalyzed?: Timestamp | FieldValue;\n  \n  // Processing metadata\n  metadata?: {\n    processingMethod?: string;\n    processingTime?: number;\n    confidence?: number;\n    errorCount?: number;\n    lastError?: string;\n    retryCount?: number;\n  };\n}\n\n// Collection paths\nexport const FIRESTORE_PATHS = {\n  USERS: 'users',\n  PROFILES: 'profiles', // Current collection path\n  RESUMES: 'resumes',\n  MODEL_USAGE: 'modelUsage',\n  CONFIG_AUDIT: 'configAudit'\n} as const;\n\n// Migration tracking\nexport interface MigrationRecord {\n  migrationId: string;\n  version: string;\n  description: string;\n  executedAt: Timestamp;\n  executedBy: string;\n  recordsProcessed: number;\n  recordsUpdated: number;\n  recordsFailed: number;\n  errors?: Array<{\n    documentId: string;\n    error: string;\n    timestamp: Timestamp;\n  }>;\n  status: 'pending' | 'running' | 'completed' | 'failed';\n  durationMs?: number;\n}\n\n// Type guards for version checking\nexport function isEnhancedResumeDocument(doc: any): doc is EnhancedResumeDocument {\n  return doc && \n         typeof doc.processorVersion === 'string' &&\n         ['foundry-v1', 'legacy-v1'].includes(doc.processorVersion);\n}\n\nexport function isFoundryProcessedResume(doc: EnhancedResumeDocument): boolean {\n  return doc.processorVersion === 'foundry-v1';\n}\n\nexport function isLegacyProcessedResume(doc: EnhancedResumeDocument): boolean {\n  return doc.processorVersion === 'legacy-v1';\n}\n\n// Schema validation helpers\nexport function validateResumeDocument(doc: Partial<EnhancedResumeDocument>): {\n  valid: boolean;\n  errors: string[];\n} {\n  const errors: string[] = [];\n  \n  // Required fields\n  if (!doc.userId) errors.push('userId is required');\n  if (!doc.fileName) errors.push('fileName is required');\n  if (!doc.extractedData) errors.push('extractedData is required');\n  if (!doc.processorVersion) errors.push('processorVersion is required');\n  \n  // Processor version validation\n  if (doc.processorVersion && !['foundry-v1', 'legacy-v1'].includes(doc.processorVersion)) {\n    errors.push('processorVersion must be \"foundry-v1\" or \"legacy-v1\"');\n  }\n  \n  // ATS score validation\n  if (doc.atsScore !== undefined && (doc.atsScore < 0 || doc.atsScore > 100)) {\n    errors.push('atsScore must be between 0 and 100');\n  }\n  \n  // Job match score validation\n  if (doc.jobMatchScore !== undefined && (doc.jobMatchScore < 0 || doc.jobMatchScore > 100)) {\n    errors.push('jobMatchScore must be between 0 and 100');\n  }\n  \n  return {\n    valid: errors.length === 0,\n    errors\n  };\n}\n\n// Default values for new fields\nexport const DEFAULT_ENHANCED_FIELDS: Partial<EnhancedResumeDocument> = {\n  processorVersion: 'legacy-v1',\n  missingKeywords: [],\n  rawExtraction: undefined,\n  atsAnalysis: undefined,\n  jobMatchAnalysis: undefined\n};\n\n// Firestore security rules schema (for reference)\nexport const FIRESTORE_SECURITY_RULES_SCHEMA = `\n// Enhanced resume document rules\nmatch /profiles/{userId} {\n  allow read, write: if request.auth != null && request.auth.uid == userId;\n  \n  // Validate enhanced fields on write\n  allow update: if request.auth != null && \n                   request.auth.uid == userId &&\n                   validateEnhancedResumeFields(request.resource.data);\n}\n\nfunction validateEnhancedResumeFields(data) {\n  return data.keys().hasAll(['processorVersion']) &&\n         data.processorVersion in ['foundry-v1', 'legacy-v1'] &&\n         (data.atsScore == null || (data.atsScore >= 0 && data.atsScore <= 100)) &&\n         (data.jobMatchScore == null || (data.jobMatchScore >= 0 && data.jobMatchScore <= 100));\n}\n`;\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/hooks/use-retry.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ErrorCode' is defined but never used.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":269,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":269,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6830,6833],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6830,6833],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":280,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":280,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7089,7092],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7089,7092],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":316,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":316,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8174,8177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8174,8177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'execute' is assigned a value but never used.","line":403,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":403,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":437,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":437,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11182,11185],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11182,11185],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Client-side React Hooks for Retry Operations\n * \n * Provides React hooks that integrate with the retry middleware system\n * for handling voice conversation, file upload, and other API operations\n * with automatic retry logic and loading states.\n * \n * Features:\n * - React hooks with loading/error state management\n * - Automatic retry with exponential backoff\n * - AbortController integration for cancellation\n * - Toast notifications for user feedback\n * - TypeScript support with structured errors\n * \n * @version 1.0.0\n */\n\nimport { useState, useCallback, useRef, useEffect } from 'react';\nimport { \n  withRetry, \n  retryFetch, \n  RetryConfig, \n  RetryResult, \n  VOICE_SERVICE_RETRY_CONFIG, \n  FILE_UPLOAD_RETRY_CONFIG,\n  QUICK_RETRY_CONFIG,\n  DEFAULT_RETRY_CONFIG\n} from '@/lib/utils/retry-middleware';\nimport { \n  StructuredError, \n  APIResponse, \n  ErrorCode, \n  toStructuredError,\n  isRetryableError \n} from '@/lib/utils/structured-errors';\n\n// ===== HOOK TYPES =====\n\nexport interface UseRetryState<T> {\n  /** The result data if successful */\n  data: T | null;\n  \n  /** Current error if any */\n  error: StructuredError | null;\n  \n  /** Loading state */\n  loading: boolean;\n  \n  /** Number of retry attempts made */\n  retryCount: number;\n  \n  /** Total duration of operation in milliseconds */\n  totalDuration: number;\n  \n  /** Whether operation was successful */\n  success: boolean;\n}\n\nexport interface UseRetryActions {\n  /** Cancel ongoing operation */\n  cancel: () => void;\n  \n  /** Reset state to initial values */\n  reset: () => void;\n  \n  /** Check if operation can be cancelled */\n  canCancel: boolean;\n}\n\nexport interface UseRetryOptions<T> extends Partial<RetryConfig> {\n  /** Show toast notifications for errors and retries */\n  showToasts?: boolean;\n  \n  /** Custom error handler */\n  onError?: (error: StructuredError) => void;\n  \n  /** Custom success handler */\n  onSuccess?: (data: T) => void;\n  \n  /** Custom retry handler */\n  onRetry?: (error: StructuredError, attempt: number, delay: number) => void;\n  \n  /** Enable automatic retry on component mount */\n  autoRetry?: boolean;\n  \n  /** Delay before auto retry in milliseconds */\n  autoRetryDelay?: number;\n}\n\n// ===== BASE RETRY HOOK =====\n\n/**\n * Base hook for retry operations with React state management\n */\nexport function useRetry<T>(\n  operation: () => Promise<T>,\n  options: UseRetryOptions<T> = {}\n): [UseRetryState<T>, () => Promise<void>, UseRetryActions] {\n  const [state, setState] = useState<UseRetryState<T>>({\n    data: null,\n    error: null,\n    loading: false,\n    retryCount: 0,\n    totalDuration: 0,\n    success: false\n  });\n\n  const abortControllerRef = useRef<AbortController | null>(null);\n  const operationRef = useRef(operation);\n  const optionsRef = useRef(options);\n\n  // Update refs when dependencies change\n  useEffect(() => {\n    operationRef.current = operation;\n    optionsRef.current = options;\n  }, [operation, options]);\n\n  const execute = useCallback(async (): Promise<void> => {\n    // Cancel any existing operation\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n    }\n\n    // Create new abort controller\n    abortControllerRef.current = new AbortController();\n    \n    setState(prev => ({ \n      ...prev, \n      loading: true, \n      error: null, \n      retryCount: 0,\n      totalDuration: 0,\n      success: false\n    }));\n\n    const retryConfig: RetryConfig = {\n      ...DEFAULT_RETRY_CONFIG,\n      ...optionsRef.current,\n      abortSignal: abortControllerRef.current.signal,\n      onRetry: (error, attempt, delay) => {\n        setState(prev => ({ \n          ...prev, \n          retryCount: attempt,\n          error \n        }));\n        \n        // Show toast notification if enabled\n        if (optionsRef.current.showToasts && typeof window !== 'undefined') {\n          // You can integrate with your toast library here\n          console.log(`üîÑ Retrying in ${delay}ms (attempt ${attempt}): ${error.message}`);\n        }\n        \n        optionsRef.current.onRetry?.(error, attempt, delay);\n      },\n      onMaxRetriesReached: (error, totalAttempts) => {\n        if (optionsRef.current.showToasts && typeof window !== 'undefined') {\n          console.error(`‚ùå Operation failed after ${totalAttempts} attempts: ${error.message}`);\n        }\n      }\n    };\n\n    try {\n      const result: RetryResult<T> = await withRetry(operationRef.current, retryConfig);\n      \n      setState(prev => ({\n        ...prev,\n        loading: false,\n        totalDuration: result.totalDuration,\n        retryCount: result.totalAttempts - 1\n      }));\n\n      if (result.success && result.data !== undefined) {\n        setState(prev => ({\n          ...prev,\n          data: result.data!,\n          error: null,\n          success: true\n        }));\n        \n        if (optionsRef.current.showToasts && typeof window !== 'undefined') {\n          console.log('‚úÖ Operation completed successfully');\n        }\n        \n        optionsRef.current.onSuccess?.(result.data!);\n      } else if (result.error) {\n        setState(prev => ({\n          ...prev,\n          data: null,\n          error: result.error!,\n          success: false\n        }));\n        \n        optionsRef.current.onError?.(result.error);\n      }\n    } catch (error) {\n      const structuredError = toStructuredError(error);\n      \n      setState(prev => ({\n        ...prev,\n        loading: false,\n        data: null,\n        error: structuredError,\n        success: false\n      }));\n      \n      optionsRef.current.onError?.(structuredError);\n    }\n  }, []);\n\n  const cancel = useCallback(() => {\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n      setState(prev => ({ \n        ...prev, \n        loading: false \n      }));\n    }\n  }, []);\n\n  const reset = useCallback(() => {\n    cancel();\n    setState({\n      data: null,\n      error: null,\n      loading: false,\n      retryCount: 0,\n      totalDuration: 0,\n      success: false\n    });\n  }, [cancel]);\n\n  const actions: UseRetryActions = {\n    cancel,\n    reset,\n    canCancel: state.loading\n  };\n\n  // Auto-retry on mount if enabled\n  useEffect(() => {\n    if (options.autoRetry) {\n      const timer = setTimeout(() => {\n        execute();\n      }, options.autoRetryDelay || 0);\n      \n      return () => clearTimeout(timer);\n    }\n  }, [execute, options.autoRetry, options.autoRetryDelay]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n    };\n  }, []);\n\n  return [state, execute, actions];\n}\n\n// ===== SPECIALIZED HOOKS =====\n\n/**\n * Hook for voice conversation API calls with retry\n */\nexport function useVoiceConversation() {\n  interface ConversationRequest {\n    action: 'start' | 'process' | 'summary';\n    interviewContext?: any;\n    userTranscript?: string;\n  }\n\n  interface ConversationResponse {\n    message?: string;\n    questionNumber?: number;\n    isComplete?: boolean;\n    hasAudio?: boolean;\n    followUpSuggestions?: string[];\n    summary?: string;\n    conversationHistory?: any[];\n  }\n\n  const conversationOperation = useCallback(async (request: ConversationRequest): Promise<ConversationResponse> => {\n    const result = await retryFetch('/api/voice/conversation', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(request),\n    }, VOICE_SERVICE_RETRY_CONFIG);\n\n    if (!result.success || !result.data) {\n      throw result.error || new Error('Voice conversation request failed');\n    }\n\n    const apiResponse: APIResponse<ConversationResponse> = await result.data.json();\n    \n    if (!apiResponse.success) {\n      throw apiResponse.error;\n    }\n\n    return apiResponse.data;\n  }, []);\n\n  const [state, , actions] = useRetry(\n    () => conversationOperation({ action: 'start' }),\n    {\n      ...VOICE_SERVICE_RETRY_CONFIG,\n      showToasts: true,\n      onRetry: (error, attempt, delay) => {\n        console.log(`üéôÔ∏è Retrying voice operation: ${error.message} (attempt ${attempt}, delay ${delay}ms)`);\n      }\n    }\n  );\n\n  const startConversation = useCallback(async (interviewContext: any): Promise<ConversationResponse> => {\n    const result = await withRetry(\n      () => conversationOperation({ action: 'start', interviewContext }),\n      VOICE_SERVICE_RETRY_CONFIG\n    );\n    \n    if (!result.success) {\n      throw result.error;\n    }\n    \n    return result.data!;\n  }, [conversationOperation]);\n\n  const processResponse = useCallback(async (userTranscript: string): Promise<ConversationResponse> => {\n    const result = await withRetry(\n      () => conversationOperation({ action: 'process', userTranscript }),\n      VOICE_SERVICE_RETRY_CONFIG\n    );\n    \n    if (!result.success) {\n      throw result.error;\n    }\n    \n    return result.data!;\n  }, [conversationOperation]);\n\n  const getSummary = useCallback(async (): Promise<ConversationResponse> => {\n    const result = await withRetry(\n      () => conversationOperation({ action: 'summary' }),\n      VOICE_SERVICE_RETRY_CONFIG\n    );\n    \n    if (!result.success) {\n      throw result.error;\n    }\n    \n    return result.data!;\n  }, [conversationOperation]);\n\n  return {\n    state,\n    actions,\n    startConversation,\n    processResponse,\n    getSummary\n  };\n}\n\n/**\n * Hook for file upload operations with retry\n */\nexport function useFileUpload() {\n  interface UploadResponse {\n    message: string;\n    fileName: string;\n    extractedText: string;\n    questions: string[];\n  }\n\n  const uploadOperation = useCallback(async (file: File, authToken?: string): Promise<UploadResponse> => {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    const headers: Record<string, string> = {};\n    if (authToken) {\n      headers['Authorization'] = `Bearer ${authToken}`;\n    }\n\n    const result = await retryFetch('/api/upload-pdf', {\n      method: 'POST',\n      headers,\n      body: formData,\n    }, FILE_UPLOAD_RETRY_CONFIG);\n\n    if (!result.success || !result.data) {\n      throw result.error || new Error('File upload failed');\n    }\n\n    const apiResponse: APIResponse<UploadResponse> = await result.data.json();\n    \n    if (!apiResponse.success) {\n      throw apiResponse.error;\n    }\n\n    return apiResponse.data;\n  }, []);\n\n  const [state, execute, actions] = useRetry(\n    () => uploadOperation(new File([], 'dummy')), // Dummy operation, actual file passed to upload method\n    {\n      ...FILE_UPLOAD_RETRY_CONFIG,\n      showToasts: true,\n      onRetry: (error, attempt, delay) => {\n        console.log(`üìÑ Retrying file upload: ${error.message} (attempt ${attempt}, delay ${delay}ms)`);\n      }\n    }\n  );\n\n  const upload = useCallback(async (file: File, authToken?: string): Promise<UploadResponse> => {\n    const result = await withRetry(\n      () => uploadOperation(file, authToken),\n      FILE_UPLOAD_RETRY_CONFIG\n    );\n    \n    if (!result.success) {\n      throw result.error;\n    }\n    \n    return result.data!;\n  }, [uploadOperation]);\n\n  return {\n    state,\n    actions,\n    upload\n  };\n}\n\n/**\n * Hook for API calls with automatic retry based on response status\n */\nexport function useApiCall<T = any>() {\n  const apiOperation = useCallback(async (\n    url: string,\n    options: RequestInit = {},\n    customRetryConfig?: Partial<RetryConfig>\n  ): Promise<T> => {\n    const result = await retryFetch(url, options, {\n      ...QUICK_RETRY_CONFIG,\n      ...customRetryConfig\n    });\n\n    if (!result.success || !result.data) {\n      throw result.error || new Error('API request failed');\n    }\n\n    // Handle different response types\n    const contentType = result.data.headers.get('content-type');\n    if (contentType && contentType.includes('application/json')) {\n      const apiResponse: APIResponse<T> = await result.data.json();\n      \n      if (!apiResponse.success) {\n        throw apiResponse.error;\n      }\n      \n      return apiResponse.data;\n    }\n    \n    // For non-JSON responses, return the Response object\n    return result.data as unknown as T;\n  }, []);\n\n  const [state, , actions] = useRetry(\n    () => apiOperation('/api/health'), // Default health check\n    {\n      showToasts: true,\n      onRetry: (error, attempt, delay) => {\n        console.log(`üåê Retrying API call: ${error.message} (attempt ${attempt}, delay ${delay}ms)`);\n      }\n    }\n  );\n\n  const call = useCallback(async (\n    url: string,\n    options: RequestInit = {},\n    retryConfig?: Partial<RetryConfig>\n  ): Promise<T> => {\n    const result = await withRetry(\n      () => apiOperation(url, options, retryConfig),\n      { ...QUICK_RETRY_CONFIG, ...retryConfig }\n    );\n    \n    if (!result.success) {\n      throw result.error;\n    }\n    \n    return result.data!;\n  }, [apiOperation]);\n\n  return {\n    state,\n    actions,\n    call\n  };\n}\n\n// ===== UTILITY HOOKS =====\n\n/**\n * Hook for managing retry state without executing operation\n */\nexport function useRetryState<T>(): [UseRetryState<T>, (state: Partial<UseRetryState<T>>) => void] {\n  const [state, setState] = useState<UseRetryState<T>>({\n    data: null,\n    error: null,\n    loading: false,\n    retryCount: 0,\n    totalDuration: 0,\n    success: false\n  });\n\n  const updateState = useCallback((updates: Partial<UseRetryState<T>>) => {\n    setState(prev => ({ ...prev, ...updates }));\n  }, []);\n\n  return [state, updateState];\n}\n\n/**\n * Hook to check if an error is retryable\n */\nexport function useRetryCheck() {\n  const checkRetryable = useCallback((error: unknown): boolean => {\n    const structuredError = toStructuredError(error);\n    return isRetryableError(structuredError);\n  }, []);\n\n  const getRetryDelay = useCallback((error: unknown, attempt: number): number => {\n    const structuredError = toStructuredError(error);\n    const baseDelay = (structuredError.retryAfter || 1) * 1000;\n    return baseDelay * Math.pow(2, attempt - 1);\n  }, []);\n\n  return {\n    checkRetryable,\n    getRetryDelay\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/hooks/useFeatureFlags.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'flags'. Either include it or remove the dependency array.","line":74,"column":6,"nodeType":"ArrayExpression","endLine":74,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [flags]","fix":{"range":[2237,2239],"text":"[flags]"}}]}],"suppressedMessages":[{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useUnifiedConfig\" cannot be called inside a callback. React Hooks must be called in a React function component or a custom React Hook function.","line":131,"column":21,"nodeType":"Identifier","endLine":131,"endColumn":37,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { useUnifiedConfig } from '@/lib/hooks/useUnifiedConfig';\n\n// Define types locally to avoid importing server-only modules\nexport interface FeatureFlags {\n  autoApplyAzure: boolean;\n  portalIntegration: boolean;\n  voiceInterview: boolean;\n  premiumFeatures: boolean;\n  newUI: boolean;\n}\n\nexport interface EnhancedFeatureFlags extends FeatureFlags {\n  rolloutStatus: {\n    autoApplyAzure: boolean;\n    portalIntegration: boolean;\n    voiceInterview: boolean;\n    premiumFeatures: boolean;\n    newUI: boolean;\n  };\n}\n\n/**\n * Client-safe feature flags hook that uses API calls instead of direct service imports\n * This avoids bundling server-only modules for the client\n */\nexport const useFeatureFlags = () => {\n  const [flags, setFlags] = useState<EnhancedFeatureFlags | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Load feature flags on component mount using API instead of direct service import\n  useEffect(() => {\n    const loadFlags = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Fetch from API endpoint instead of direct service import\n        const response = await fetch('/api/feature-flags');\n        if (!response.ok) {\n          throw new Error('Failed to fetch feature flags');\n        }\n        \n        const enhancedFlags = await response.json();\n        setFlags(enhancedFlags);\n        setLoading(false);\n      } catch (err) {\n        console.error('Error loading feature flags:', err);\n        setError(err instanceof Error ? err.message : 'Failed to load feature flags');\n        setLoading(false);\n\n        // Set default flags if loading fails\n        if (!flags) {\n          setFlags({\n            autoApplyAzure: false,\n            portalIntegration: false,\n            voiceInterview: false,\n            premiumFeatures: false,\n            newUI: false,\n            rolloutStatus: {\n              autoApplyAzure: false,\n              portalIntegration: false,\n              voiceInterview: false,\n              premiumFeatures: false,\n              newUI: false,\n            },\n          });\n        }\n      }\n    };\n\n    loadFlags();\n  }, []);\n\n  const getFeatureFlag = (flagName: keyof FeatureFlags): boolean => {\n    return flags?.[flagName] || false;\n  };\n\n  const refreshFlags = async (): Promise<void> => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await fetch('/api/feature-flags?refresh=true');\n      if (!response.ok) {\n        throw new Error('Failed to refresh feature flags');\n      }\n      \n      const newFlags = await response.json();\n      setFlags(newFlags);\n      setLoading(false);\n    } catch (err) {\n      console.error('Error refreshing feature flags:', err);\n      setError(err instanceof Error ? err.message : 'Failed to refresh feature flags');\n      setLoading(false);\n    }\n  };\n\n  return {\n    flags,\n    loading,\n    error,\n    getFeatureFlag,\n    refreshFlags,\n    // Convenience methods for specific flags\n    isAutoApplyAzureEnabled: () => getFeatureFlag('autoApplyAzure'),\n    isPortalIntegrationEnabled: () => getFeatureFlag('portalIntegration'),\n    isVoiceInterviewEnabled: () => getFeatureFlag('voiceInterview'),\n    isPremiumFeaturesEnabled: () => getFeatureFlag('premiumFeatures'),\n    isNewUIEnabled: () => getFeatureFlag('newUI'),\n  };\n};\n\n/**\n * Simplified hook for individual feature flags using unified config directly\n * More performant for components that only need specific flags\n */\nexport const useUnifiedFeatureFlag = (flagName: keyof FeatureFlags) => {\n  const configKey = `features.${flagName}`;\n  return useUnifiedConfig<boolean>(configKey, false);\n};\n\n/**\n * Hook for getting multiple feature flags at once\n */\nexport const useUnifiedFeatureFlags = (flagNames: Array<keyof FeatureFlags>) => {\n  const results = flagNames.reduce((acc, flagName) => {\n    const configKey = `features.${flagName}`;\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    acc[flagName] = useUnifiedConfig<boolean>(configKey, false);\n    return acc;\n  }, {} as Record<keyof FeatureFlags, { value: boolean; loading: boolean; error: string | null }>);\n  \n  return results;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/hooks/useFirestore.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setError' is assigned a value but never used.","line":29,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setError' is assigned a value but never used.","line":72,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":25}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Firestore Hooks Compatibility Layer\n * \n * Mock implementations of Firestore hooks for backward compatibility\n * Components using these should be migrated to Azure Cosmos DB\n */\n\nimport { useState, useEffect } from 'react';\n\n// Mock interview data structure\ninterface Interview {\n  id: string;\n  userId: string;\n  questions: string[];\n  answers: string[];\n  feedback?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n/**\n * Mock useInterview hook\n * @param interviewId - Interview ID to fetch\n * @returns Mock interview data\n */\nexport function useInterview(interviewId: string) {\n  const [interview, setInterview] = useState<Interview | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    // Mock loading behavior\n    const timer = setTimeout(() => {\n      if (interviewId) {\n        // Return mock data\n        setInterview({\n          id: interviewId,\n          userId: 'mock-user',\n          questions: ['What is your experience?', 'What are your goals?'],\n          answers: ['I have 5 years experience', 'I want to grow'],\n          createdAt: new Date(),\n          updatedAt: new Date()\n        });\n      }\n      setLoading(false);\n    }, 500);\n\n    return () => clearTimeout(timer);\n  }, [interviewId]);\n\n  return {\n    interview,\n    loading,\n    error,\n    updateInterview: async (updates: Partial<Interview>) => {\n      // Mock update\n      if (interview) {\n        setInterview({ ...interview, ...updates, updatedAt: new Date() });\n      }\n    }\n  };\n}\n\n/**\n * Mock useInterviews hook\n * @param userId - User ID to fetch interviews for\n * @returns Mock interviews list\n */\nexport function useInterviews(userId: string) {\n  const [interviews, setInterviews] = useState<Interview[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    // Mock loading behavior\n    const timer = setTimeout(() => {\n      if (userId) {\n        // Return mock data\n        setInterviews([\n          {\n            id: 'interview-1',\n            userId,\n            questions: ['Tell me about yourself'],\n            answers: ['I am a software engineer'],\n            createdAt: new Date(),\n            updatedAt: new Date()\n          }\n        ]);\n      }\n      setLoading(false);\n    }, 500);\n\n    return () => clearTimeout(timer);\n  }, [userId]);\n\n  return {\n    interviews,\n    loading,\n    error\n  };\n}\n\nexport type { Interview };\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/hooks/useOfflineSupport.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[162,165],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[162,165],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'processOfflineQueue'. Either include it or remove the dependency array.","line":79,"column":6,"nodeType":"ArrayExpression","endLine":79,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [processOfflineQueue]","fix":{"range":[1970,1972],"text":"[processOfflineQueue]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":82,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2061,2064],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2061,2064],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'processOfflineQueue'. Either include it or remove the dependency array.","line":201,"column":6,"nodeType":"ArrayExpression","endLine":201,"endColumn":54,"suggestions":[{"desc":"Update the dependencies array to be: [connectionStatus.isOnline, offlineQueue.length, processOfflineQueue]","fix":{"range":[5667,5715],"text":"[connectionStatus.isOnline, offlineQueue.length, processOfflineQueue]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect } from 'react';\nimport { toast } from 'sonner';\n\ninterface OfflineQueueItem {\n  id: string;\n  action: string;\n  data: any;\n  timestamp: Date;\n  retries: number;\n  maxRetries: number;\n}\n\ninterface ConnectionStatus {\n  isOnline: boolean;\n  isConnected: boolean;\n  lastOnlineTime?: Date;\n  reconnectAttempts: number;\n}\n\nexport function useOfflineSupport() {\n  const [connectionStatus, setConnectionStatus] = useState<ConnectionStatus>({\n    isOnline: typeof navigator !== 'undefined' ? navigator.onLine : true,\n    isConnected: true,\n    reconnectAttempts: 0\n  });\n  \n  const [offlineQueue, setOfflineQueue] = useState<OfflineQueueItem[]>([]);\n  const [isProcessingQueue, setIsProcessingQueue] = useState(false);\n\n  // Monitor online/offline status\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n\n    const handleOnline = () => {\n      setConnectionStatus(prev => ({\n        ...prev,\n        isOnline: true,\n        isConnected: true,\n        lastOnlineTime: new Date(),\n        reconnectAttempts: 0\n      }));\n      \n      toast.success('Connection restored', {\n        description: 'Syncing pending changes...'\n      });\n      \n      // Process offline queue when back online\n      processOfflineQueue();\n    };\n\n    const handleOffline = () => {\n      setConnectionStatus(prev => ({\n        ...prev,\n        isOnline: false,\n        isConnected: false\n      }));\n      \n      toast.warning('You\\'re offline', {\n        description: 'Changes will be saved when connection is restored.',\n        duration: 5000\n      });\n    };\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    // Check initial status\n    setConnectionStatus(prev => ({\n      ...prev,\n      isOnline: navigator.onLine\n    }));\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  // Add action to offline queue\n  const queueOfflineAction = (action: string, data: any, maxRetries = 3) => {\n    const item: OfflineQueueItem = {\n      id: `${action}-${Date.now()}-${Math.random()}`,\n      action,\n      data,\n      timestamp: new Date(),\n      retries: 0,\n      maxRetries\n    };\n\n    setOfflineQueue(prev => [...prev, item]);\n    \n    // Try to store in localStorage for persistence\n    try {\n      const existingQueue = JSON.parse(localStorage.getItem('offlineQueue') || '[]');\n      existingQueue.push(item);\n      localStorage.setItem('offlineQueue', JSON.stringify(existingQueue));\n    } catch (error) {\n      console.warn('Failed to persist offline queue:', error);\n    }\n  };\n\n  // Process offline queue\n  const processOfflineQueue = async () => {\n    if (isProcessingQueue || offlineQueue.length === 0 || !connectionStatus.isOnline) {\n      return;\n    }\n\n    setIsProcessingQueue(true);\n    let successCount = 0;\n    let failureCount = 0;\n\n    // Process items one by one\n    for (const item of offlineQueue) {\n      try {\n        await processOfflineItem(item);\n        successCount++;\n        \n        // Remove from queue after successful processing\n        setOfflineQueue(prev => prev.filter(queueItem => queueItem.id !== item.id));\n        \n      } catch (error) {\n        console.error('Failed to process offline item:', error);\n        \n        // Increment retry count\n        const updatedItem = { ...item, retries: item.retries + 1 };\n        \n        if (updatedItem.retries >= updatedItem.maxRetries) {\n          // Remove from queue if max retries reached\n          setOfflineQueue(prev => prev.filter(queueItem => queueItem.id !== item.id));\n          failureCount++;\n        } else {\n          // Update retry count\n          setOfflineQueue(prev => \n            prev.map(queueItem => queueItem.id === item.id ? updatedItem : queueItem)\n          );\n        }\n      }\n    }\n\n    // Update localStorage\n    try {\n      localStorage.setItem('offlineQueue', JSON.stringify(offlineQueue));\n    } catch (error) {\n      console.warn('Failed to update persisted offline queue:', error);\n    }\n\n    setIsProcessingQueue(false);\n\n    // Show results\n    if (successCount > 0) {\n      toast.success(`Synced ${successCount} pending changes`);\n    }\n    \n    if (failureCount > 0) {\n      toast.error(`Failed to sync ${failureCount} changes. Please try again later.`);\n    }\n  };\n\n  // Process individual offline item\n  const processOfflineItem = async (item: OfflineQueueItem): Promise<void> => {\n    // This would contain the actual API calls based on action type\n    switch (item.action) {\n      case 'create_interview':\n        // await createInterviewAPI(item.data);\n        break;\n      case 'update_interview':\n        // await updateInterviewAPI(item.data);\n        break;\n      case 'delete_interview':\n        // await deleteInterviewAPI(item.data);\n        break;\n      case 'submit_feedback':\n        // await submitFeedbackAPI(item.data);\n        break;\n      default:\n        console.warn('Unknown offline action:', item.action);\n    }\n  };\n\n  // Load persisted offline queue on mount\n  useEffect(() => {\n    try {\n      const persistedQueue = JSON.parse(localStorage.getItem('offlineQueue') || '[]');\n      setOfflineQueue(persistedQueue);\n    } catch (error) {\n      console.warn('Failed to load persisted offline queue:', error);\n    }\n  }, []);\n\n  // Auto-process queue when online\n  useEffect(() => {\n    if (connectionStatus.isOnline && offlineQueue.length > 0) {\n      const timer = setTimeout(() => {\n        processOfflineQueue();\n      }, 1000); // Wait 1 second after coming online\n\n      return () => clearTimeout(timer);\n    }\n  }, [connectionStatus.isOnline, offlineQueue.length]);\n\n  return {\n    connectionStatus,\n    offlineQueue,\n    isProcessingQueue,\n    queueOfflineAction,\n    processOfflineQueue,\n    clearOfflineQueue: () => {\n      setOfflineQueue([]);\n      try {\n        localStorage.removeItem('offlineQueue');\n      } catch (error) {\n        console.warn('Failed to clear persisted offline queue:', error);\n      }\n    }\n  };\n}\n\n// Hook for checking if we should use cached data vs real-time data\nexport function useCacheStrategy() {\n  const { connectionStatus } = useOfflineSupport();\n  \n  return {\n    shouldUseCache: !connectionStatus.isOnline || !connectionStatus.isConnected,\n    cacheFirst: !connectionStatus.isOnline,\n    networkFirst: connectionStatus.isOnline && connectionStatus.isConnected\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/hooks/useRealtimeFirestore.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setError' is assigned a value but never used.","line":43,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setError' is assigned a value but never used.","line":95,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":95,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":231,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":231,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6066,6069],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6066,6069],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setError' is assigned a value but never used.","line":233,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":233,"endColumn":25}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Realtime Firestore Hooks Compatibility Layer\n * \n * SWR-based implementations of realtime Firestore hooks for backward compatibility\n * Components using these should be migrated to Azure services with SignalR\n */\n\nimport { useState, useEffect } from 'react';\n\n// Mock data structures\ninterface Interview {\n  id: string;\n  userId: string;\n  status: 'pending' | 'in-progress' | 'completed';\n  questions: string[];\n  answers: string[];\n  feedback?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\ninterface ApplicationStatus {\n  id: string;\n  userId: string;\n  status: 'processing' | 'completed' | 'error';\n  progress: number;\n  details: {\n    stage: string;\n    message: string;\n    warningMessages?: string[];\n  };\n  updatedAt: Date;\n}\n\n/**\n * Mock useRealtimeInterview hook\n * @param interviewId - Interview ID to watch\n * @returns Realtime interview data\n */\nexport function useRealtimeInterview(interviewId: string) {\n  const [interview, setInterview] = useState<Interview | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!interviewId) {\n      setLoading(false);\n      return;\n    }\n\n    // Mock realtime updates\n    const timer = setTimeout(() => {\n      setInterview({\n        id: interviewId,\n        userId: 'mock-user',\n        status: 'in-progress',\n        questions: ['What is your experience?', 'What are your goals?'],\n        answers: ['I have 5 years experience', 'I want to grow'],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      });\n      setLoading(false);\n    }, 1000);\n\n    // Remove periodic updates to prevent polling loops\n    // Real implementations should use SignalR or WebSocket connections\n    // const updateTimer = setInterval(() => {\n    //   setInterview(prev => prev ? {\n    //     ...prev,\n    //     updatedAt: new Date()\n    //   } : null);\n    // }, 10000);\n\n    return () => {\n      clearTimeout(timer);\n      // clearInterval(updateTimer); // Commented out since updateTimer is no longer defined\n    };\n  }, [interviewId]);\n\n  return {\n    interview,\n    loading,\n    error\n  };\n}\n\n/**\n * Mock useRealtimeApplicationStatus hook\n * @param applicationId - Application ID to watch\n * @returns Realtime application status\n */\nexport function useRealtimeApplicationStatus(applicationId: string) {\n  const [status, setStatus] = useState<ApplicationStatus | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!applicationId) {\n      setLoading(false);\n      return;\n    }\n\n    // Mock realtime status updates\n    let progress = 0;\n    const stages = [\n      'Initializing application',\n      'Processing documents',\n      'Analyzing requirements',\n      'Generating response',\n      'Finalizing application'\n    ];\n\n    const updateStatus = () => {\n      if (progress < 100) {\n        progress += 20;\n        const stageIndex = Math.floor(progress / 20) - 1;\n        \n        setStatus({\n          id: applicationId,\n          userId: 'mock-user',\n          status: progress < 100 ? 'processing' : 'completed',\n          progress,\n          details: {\n            stage: stages[stageIndex] || 'Completed',\n            message: `Processing... ${progress}% complete`,\n            warningMessages: progress > 60 ? ['Quality check passed'] : undefined\n          },\n          updatedAt: new Date()\n        });\n\n        if (progress >= 100) {\n          setLoading(false);\n        }\n      }\n    };\n\n    const initialTimer = setTimeout(() => {\n      updateStatus();\n      setLoading(false);\n    }, 500);\n\n    const progressTimer = setInterval(updateStatus, 2000);\n\n    return () => {\n      clearTimeout(initialTimer);\n      clearInterval(progressTimer);\n    };\n  }, [applicationId]);\n\n  return {\n    status,\n    loading,\n    error\n  };\n}\n\n// Static mock data for dashboard - no API calls\nexport function useRealtimeUserInterviews(userId?: string) {\n  // Return static mock data immediately, no API calls\n  const interviews = userId ? [\n    {\n      id: 'mock-interview-user',\n      userId,\n      role: 'Software Engineer',\n      type: 'technical',\n      techstack: ['React', 'TypeScript'],\n      status: 'completed',\n      questions: ['Tell me about yourself'],\n      answers: ['I am a developer'],\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    }\n  ] : [];\n\n  return { \n    data: interviews,\n    isLoading: false,\n    error: null\n  };\n}\n\nexport function useRealtimePublicInterviews(limit: number = 4) {\n  // Return static mock data immediately, no API calls\n  const interviews = [\n    {\n      id: 'public-interview-1',\n      userId: 'public-user-1',\n      role: 'Frontend Developer',\n      type: 'technical',\n      techstack: ['React', 'JavaScript'],\n      status: 'completed',\n      questions: ['How do you handle state management?'],\n      answers: ['I use React hooks and context'],\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    },\n    {\n      id: 'public-interview-2',\n      userId: 'public-user-2',\n      role: 'Backend Developer',\n      type: 'technical', \n      techstack: ['Node.js', 'Python'],\n      status: 'completed',\n      questions: ['Explain REST API design'],\n      answers: ['REST follows HTTP principles with resources'],\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    },\n    {\n      id: 'public-interview-3',\n      userId: 'public-user-3',\n      role: 'Data Scientist',\n      type: 'technical',\n      techstack: ['Python', 'Machine Learning'],\n      status: 'completed',\n      questions: ['Explain supervised learning'],\n      answers: ['Uses labeled data to train models'],\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    }\n  ].slice(0, limit);\n\n  return { \n    data: interviews,\n    isLoading: false,\n    error: null\n  };\n}\n\nexport function useRealtimeFeedback(interviewId: string) {\n  const [feedback, setFeedback] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!interviewId) {\n      setLoading(false);\n      return;\n    }\n\n    // Mock feedback loading\n    setTimeout(() => {\n      setFeedback({\n        id: interviewId,\n        score: 85,\n        comments: 'Great performance!',\n        areas: ['Technical skills', 'Communication'],\n        createdAt: new Date()\n      });\n      setLoading(false);\n    }, 1000);\n  }, [interviewId]);\n\n  return { feedback, loading, error };\n}\n\nexport type { Interview, ApplicationStatus };\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/hooks/useUnifiedConfig.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[596,599],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[596,599],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":66,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1804,1807],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1804,1807],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Client-side React hook for unified configuration service\n * \n * This provides a clean React interface to the unified config service\n * with proper state management, caching, and error handling.\n */\n\nimport { useState, useEffect, useCallback } from 'react';\n\nexport interface UseUnifiedConfigResult<T> {\n  value: T;\n  loading: boolean;\n  error: string | null;\n  refresh: () => Promise<void>;\n}\n\n/**\n * Hook to get a single configuration value with reactivity using API calls\n * This avoids bundling server-only modules for the client\n */\nexport function useUnifiedConfig<T = any>(\n  key: string,\n  defaultValue?: T\n): UseUnifiedConfigResult<T> {\n  const [value, setValue] = useState<T>(defaultValue as T);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchValue = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Use API endpoint instead of direct service import\n      const response = await fetch(`/api/config/${encodeURIComponent(key)}`);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch config: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      setValue(data.value !== undefined ? data.value : defaultValue as T);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Unknown error');\n      setValue(defaultValue as T);\n    } finally {\n      setLoading(false);\n    }\n  }, [key, defaultValue]);\n\n  const refresh = async () => {\n    await fetchValue();\n  };\n\n  useEffect(() => {\n    fetchValue();\n  }, [fetchValue]);\n\n  return { value, loading, error, refresh };\n}\n\n/**\n * Hook to get multiple configuration values at once\n */\nexport function useUnifiedConfigs<T extends Record<string, any>>(\n  keys: Array<keyof T>,\n  defaultValues?: Partial<T>\n): {\n  values: T;\n  loading: boolean;\n  error: string | null;\n  refresh: () => Promise<void>;\n} {\n  const [values, setValues] = useState<T>({} as T);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchValues = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Use API endpoints for each config key\n      const configPromises = keys.map(async (key) => {\n        const response = await fetch(`/api/config/${encodeURIComponent(String(key))}`);\n        if (!response.ok) {\n          throw new Error(`Failed to fetch config for ${String(key)}: ${response.statusText}`);\n        }\n        const data = await response.json();\n        return {\n          key,\n          value: data.value !== undefined ? data.value : defaultValues?.[key]\n        };\n      });\n      \n      const configResults = await Promise.all(configPromises);\n      \n      const result = {} as T;\n      configResults.forEach(({ key, value }) => {\n        result[key] = value;\n      });\n\n      setValues(result);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Unknown error');\n      setValues({ ...defaultValues } as T);\n    } finally {\n      setLoading(false);\n    }\n  }, [keys, defaultValues]);\n\n  const refresh = async () => {\n    await fetchValues();\n  };\n\n  useEffect(() => {\n    fetchValues();\n  }, [fetchValues]);\n\n  return { values, loading, error, refresh };\n}\n\n/**\n * Hook for feature flags specifically\n */\nexport function useFeatureFlag(flagName: string): {\n  enabled: boolean;\n  loading: boolean;\n  error: string | null;\n} {\n  const configKey = `features.${flagName}`;\n  const { value, loading, error } = useUnifiedConfig<boolean>(configKey, false);\n\n  return {\n    enabled: value,\n    loading,\n    error\n  };\n}\n\n/**\n * Hook for multiple feature flags\n */\nexport function useFeatureFlags<T extends Record<string, boolean>>(\n  flagNames: Array<keyof T>\n): {\n  flags: T;\n  loading: boolean;\n  error: string | null;\n} {\n  const configKeys = flagNames.map(name => `features.${String(name)}`);\n  const defaultFlags = flagNames.reduce((acc, name) => {\n    acc[name] = false as T[keyof T];\n    return acc;\n  }, {} as T);\n\n  const { values, loading, error } = useUnifiedConfigs(configKeys, defaultFlags);\n\n  // Transform config keys back to flag names\n  const flags = {} as T;\n  flagNames.forEach((flagName, index) => {\n    const configKey = configKeys[index];\n    flags[flagName] = (values[configKey] || false) as T[keyof T];\n  });\n\n  return { flags, loading, error };\n}\n\n/**\n * Hook for application configuration\n */\nexport function useAppConfig() {\n  const configKeys = [\n    'core.app.environment',\n    'core.app.version',\n    'core.app.debug',\n    'core.app.maintenanceMode'\n  ] as const;\n\n  type ConfigKeys = typeof configKeys[number];\n  type ConfigValues = {\n    [K in ConfigKeys]: K extends 'core.app.environment' | 'core.app.version' \n      ? string \n      : boolean\n  };\n\n  const { values, loading, error } = useUnifiedConfigs<ConfigValues>([...configKeys], {\n    'core.app.environment': 'development',\n    'core.app.version': '1.0.0',\n    'core.app.debug': false,\n    'core.app.maintenanceMode': false\n  } as ConfigValues);\n\n  return {\n    environment: values['core.app.environment'] as 'development' | 'staging' | 'production',\n    version: values['core.app.version'] as string,\n    debug: values['core.app.debug'] as boolean,\n    maintenanceMode: values['core.app.maintenanceMode'] as boolean,\n    loading,\n    error\n  };\n}\n\n/**\n * Hook for quotas and limits\n */\nexport function useQuotaConfig() {\n  const configKeys = [\n    'quotas.freeInterviews',\n    'quotas.freeResumes',\n    'quotas.premiumInterviews',\n    'quotas.premiumResumes'\n  ] as const;\n\n  type QuotaKeys = typeof configKeys[number];\n  type QuotaValues = Record<QuotaKeys, number>;\n\n  const { values, loading, error } = useUnifiedConfigs<QuotaValues>([...configKeys], {\n    'quotas.freeInterviews': 3,\n    'quotas.freeResumes': 2,\n    'quotas.premiumInterviews': 100,\n    'quotas.premiumResumes': 20\n  } as QuotaValues);\n\n  return {\n    freeInterviews: values['quotas.freeInterviews'] as number,\n    freeResumes: values['quotas.freeResumes'] as number,\n    premiumInterviews: values['quotas.premiumInterviews'] as number,\n    premiumResumes: values['quotas.premiumResumes'] as number,\n    loading,\n    error\n  };\n}\n\nexport default useUnifiedConfig;\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/middleware/authMiddleware-unified.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'nextAdminMiddleware' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":22},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":106,"column":40,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":106,"endColumn":68},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":185,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":185,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4604,4607],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4604,4607],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":186,"column":30,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":186,"endColumn":58},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":194,"column":32,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":194,"endColumn":60},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":204,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":204,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5061,5064],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5061,5064],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Unified Next.js Authentication Middleware\n * \n * Replacement for lib/middleware/authMiddleware.ts using the unified auth library\n * Eliminates code duplication and provides consistent authentication across platforms\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { \n  nextAuthMiddleware,\n  nextOptionalAuth,\n  nextRoleMiddleware,\n  nextAdminMiddleware,\n  withNextAuth,\n  withNextAdminAuth,\n  withNextRoleAuth,\n  getUserFromSessionCookie,\n  extractUserFromRequest,\n  AuthenticatedUser,\n  AuthMiddlewareOptions,\n  AuthResult\n} from '@/lib/shared/auth';\n\n// ===== MAIN MIDDLEWARE EXPORTS =====\n\n/**\n * Firebase Authentication Middleware for Next.js API Routes\n * \n * This middleware validates Firebase ID tokens and ensures only authenticated users\n * can access protected API endpoints.\n * \n * Replaces the old authMiddleware with unified implementation\n */\nexport async function authMiddleware(\n  request: NextRequest,\n  options: AuthMiddlewareOptions = {}\n): Promise<{\n  success: boolean;\n  user: AuthenticatedUser | null;\n  response?: NextResponse;\n}> {\n  const result = await nextAuthMiddleware(request, options);\n  \n  return {\n    success: result.success,\n    user: result.user,\n    response: result.response\n  };\n}\n\n/**\n * Verify Firebase ID token (unified implementation)\n */\nexport async function verifyFirebaseToken(idToken: string): Promise<AuthResult> {\n  const { verifyToken } = await import('@/lib/shared/auth');\n  const result = await verifyToken(idToken);\n  \n  return {\n    success: result.valid,\n    user: result.user || null,\n    error: result.error\n  };\n}\n\n/**\n * Role-based authorization middleware\n */\nexport async function roleMiddleware(\n  request: NextRequest, \n  requiredRoles: string[] = []\n): Promise<{\n  success: boolean;\n  user: AuthenticatedUser | null;\n  response?: NextResponse;\n}> {\n  const result = await nextRoleMiddleware(request, requiredRoles);\n  \n  return {\n    success: result.success,\n    user: result.user,\n    response: result.response\n  };\n}\n\n/**\n * Admin-only middleware\n */\nexport function adminMiddleware(request: NextRequest) {\n  return roleMiddleware(request, ['admin']);\n}\n\n/**\n * Middleware for API routes that need to handle both authenticated and anonymous users\n */\nexport async function optionalAuth(request: NextRequest): Promise<{\n  user: AuthenticatedUser | null;\n  isAuthenticated: boolean;\n}> {\n  return nextOptionalAuth(request);\n}\n\n/**\n * Health check utility (no auth required)\n */\nexport function createHealthCheckResponse() {\n  const { createNextHealthResponse } = require('@/lib/shared/auth');\n  return createNextHealthResponse();\n}\n\n// ===== HIGHER-ORDER FUNCTIONS =====\n\n/**\n * Higher-order function to create authenticated API handlers\n * \n * Usage:\n * import { withAuth } from '@/lib/middleware/authMiddleware-unified';\n * \n * export const GET = withAuth(async (request: NextRequest, user: AuthenticatedUser) => {\n *   // Your protected API logic here\n *   return NextResponse.json({ message: `Hello ${user.email}` });\n * });\n */\nexport { withNextAuth as withAuth };\n\n/**\n * Admin-only handler wrapper\n */\nexport { withNextAdminAuth as withAdminAuth };\n\n/**\n * Role-based handler wrapper\n */\nexport { withNextRoleAuth as withRoleAuth };\n\n// ===== UTILITY FUNCTIONS =====\n\n/**\n * Utility function to get user from session cookie (for server components)\n * \n * Replaces getUserFromSessionCookie from the old implementation\n */\nexport async function getUserFromSession(sessionCookie: string): Promise<AuthResult> {\n  try {\n    const user = await getUserFromSessionCookie(sessionCookie);\n    \n    return {\n      success: !!user,\n      user: user,\n      error: user ? undefined : 'Session verification failed'\n    };\n  } catch (error) {\n    return {\n      success: false,\n      user: null,\n      error: error instanceof Error ? error.message : 'Session verification failed'\n    };\n  }\n}\n\n/**\n * Extract user from request context (trying both auth header and session cookie)\n */\nexport async function getUserFromRequest(request: NextRequest): Promise<AuthenticatedUser | null> {\n  return extractUserFromRequest(request);\n}\n\n// ===== MIGRATION COMPATIBILITY =====\n\n/**\n * Legacy interface compatibility\n * Maintains the exact same interface as the old authMiddleware for easy migration\n */\nexport interface AuthRequest extends NextRequest {\n  user?: AuthenticatedUser;\n}\n\n// Re-export types for backward compatibility\nexport type { AuthenticatedUser, AuthResult };\n\n// ===== PERFORMANCE MONITORING =====\n\n/**\n * Get authentication performance metrics\n */\nexport function getAuthPerformanceMetrics(): Record<string, any> {\n  const { getAuthMetrics } = require('@/lib/shared/auth');\n  return getAuthMetrics();\n}\n\n/**\n * Reset authentication performance metrics\n */\nexport function resetAuthPerformanceMetrics(): void {\n  const { resetAuthMetrics } = require('@/lib/shared/auth');\n  resetAuthMetrics();\n}\n\n/**\n * Run authentication performance benchmark\n */\nexport async function runAuthBenchmark(\n  request: NextRequest,\n  iterations: number = 100\n): Promise<Record<string, any>> {\n  const { benchmarkNextAuth } = await import('@/lib/shared/auth');\n  return benchmarkNextAuth(request, iterations);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/middleware/error-handler.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1339,1342],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1339,1342],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1761,1764],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1761,1764],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { ApplicationInsights } from '@microsoft/applicationinsights-web';\n\nexport interface ErrorDetails {\n  userId?: string;\n  jobId?: string;\n  action?: string;\n  requestId?: string;\n  userAgent?: string;\n  path?: string;\n  method?: string;\n  statusCode?: number;\n  stack?: string;\n  timestamp: string;\n}\n\nexport interface ApiError extends Error {\n  statusCode?: number;\n  code?: string;\n  isOperational?: boolean;\n}\n\nexport class ErrorHandler {\n  private static appInsights?: ApplicationInsights;\n\n  static initialize(instrumentationKey?: string) {\n    if (instrumentationKey && typeof window !== 'undefined') {\n      this.appInsights = new ApplicationInsights({\n        config: {\n          instrumentationKey,\n          enableAutoRouteTracking: false,\n        }\n      });\n      this.appInsights.loadAppInsights();\n    }\n  }\n\n  /**\n   * Global error handler middleware for Next.js API routes\n   */\n  static withErrorHandler(\n    handler: (req: NextRequest) => Promise<NextResponse>\n  ) {\n    return async (req: NextRequest): Promise<NextResponse> => {\n      try {\n        return await handler(req);\n      } catch (error) {\n        return this.handleError(error, req);\n      }\n    };\n  }\n\n  /**\n   * Handle and log errors with structured logging\n   */\n  static handleError(error: any, req?: NextRequest): NextResponse {\n    const apiError = this.normalizeError(error);\n    const errorDetails = this.extractErrorDetails(apiError, req);\n\n    // Log the error\n    this.logError(apiError, errorDetails);\n\n    // Return appropriate response\n    return this.createErrorResponse(apiError, errorDetails);\n  }\n\n  /**\n   * Normalize different error types to ApiError\n   */\n  private static normalizeError(error: any): ApiError {\n    // Already an ApiError\n    if (error.statusCode && error.isOperational !== undefined) {\n      return error;\n    }\n\n    // Network/HTTP errors\n    if (error.code === 'ECONNRESET' || error.code === 'ENOTFOUND') {\n      return {\n        name: 'NetworkError',\n        message: 'Network connection failed',\n        statusCode: 503,\n        code: error.code,\n        isOperational: true,\n        stack: error.stack\n      };\n    }\n\n    // Validation errors\n    if (error.name === 'ValidationError' || error.name === 'ZodError') {\n      return {\n        name: 'ValidationError',\n        message: error.message || 'Validation failed',\n        statusCode: 400,\n        code: 'VALIDATION_ERROR',\n        isOperational: true,\n        stack: error.stack\n      };\n    }\n\n    // Authentication errors\n    if (error.message?.includes('unauthorized') || error.message?.includes('token')) {\n      return {\n        name: 'AuthenticationError',\n        message: 'Authentication failed',\n        statusCode: 401,\n        code: 'AUTH_ERROR',\n        isOperational: true,\n        stack: error.stack\n      };\n    }\n\n    // Rate limiting errors\n    if (error.message?.includes('rate limit') || error.message?.includes('throttled')) {\n      return {\n        name: 'RateLimitError',\n        message: 'Rate limit exceeded',\n        statusCode: 429,\n        code: 'RATE_LIMIT_ERROR',\n        isOperational: true,\n        stack: error.stack\n      };\n    }\n\n    // External service errors (Azure OpenAI, etc.)\n    if (error.message?.includes('Azure OpenAI') || error.message?.includes('OpenAI')) {\n      return {\n        name: 'ExternalServiceError',\n        message: 'External AI service error',\n        statusCode: 502,\n        code: 'AI_SERVICE_ERROR',\n        isOperational: true,\n        stack: error.stack\n      };\n    }\n\n    // Default to internal server error\n    return {\n      name: error.name || 'InternalError',\n      message: error.message || 'An internal server error occurred',\n      statusCode: 500,\n      code: 'INTERNAL_ERROR',\n      isOperational: false,\n      stack: error.stack\n    };\n  }\n\n  /**\n   * Extract error details from request and error\n   */\n  private static extractErrorDetails(error: ApiError, req?: NextRequest): ErrorDetails {\n    const url = req?.url ? new URL(req.url) : undefined;\n    const headers = req?.headers;\n\n    return {\n      userId: this.extractUserId(req),\n      jobId: this.extractJobId(req),\n      action: url?.pathname || 'unknown',\n      requestId: headers?.get('x-request-id') || undefined,\n      userAgent: headers?.get('user-agent') || undefined,\n      path: url?.pathname || undefined,\n      method: req?.method || undefined,\n      statusCode: error.statusCode || 500,\n      stack: error.stack,\n      timestamp: new Date().toISOString()\n    };\n  }\n\n  /**\n   * Extract user ID from request (cookies, headers, or body)\n   */\n  private static extractUserId(req?: NextRequest): string | undefined {\n    if (!req) return undefined;\n\n    // Try to get from cookies first\n    const sessionCookie = req.cookies.get('session')?.value;\n    if (sessionCookie) {\n      try {\n        // In a real implementation, you'd decode the session token\n        // For now, we'll just note that there's a session\n        return 'user_from_session';\n      } catch {\n        // Failed to decode session\n      }\n    }\n\n    // Try to get from headers\n    const userIdHeader = req.headers.get('x-user-id');\n    if (userIdHeader) {\n      return userIdHeader;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Extract job ID from request path or body\n   */\n  private static extractJobId(req?: NextRequest): string | undefined {\n    if (!req) return undefined;\n\n    const url = req.url ? new URL(req.url) : undefined;\n    \n    // Try to extract from path\n    const pathMatch = url?.pathname.match(/\\/jobs\\/([^\\/]+)/);\n    if (pathMatch) {\n      return pathMatch[1];\n    }\n\n    // Try to extract from query parameters\n    const jobId = url?.searchParams.get('jobId');\n    if (jobId) {\n      return jobId;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Log error with structured logging\n   */\n  private static logError(error: ApiError, details: ErrorDetails): void {\n    const logData = {\n      level: 'error',\n      message: `API Error: ${error.message}`,\n      properties: {\n        errorName: error.name,\n        errorCode: error.code,\n        statusCode: error.statusCode,\n        isOperational: error.isOperational,\n        userId: details.userId,\n        jobId: details.jobId,\n        action: details.action,\n        requestId: details.requestId,\n        userAgent: details.userAgent,\n        path: details.path,\n        method: details.method,\n        timestamp: details.timestamp\n      },\n      exception: {\n        message: error.message,\n        stack: error.stack,\n        name: error.name\n      }\n    };\n\n    // Log to console with structured format\n    console.error('API_ERROR', JSON.stringify(logData));\n\n    // Send to Application Insights if available\n    if (this.appInsights) {\n      this.appInsights.trackException({\n        exception: error,\n        properties: logData.properties,\n        severityLevel: error.isOperational ? 2 : 3 // Warning for operational, Error for programming errors\n      });\n\n      // Track custom metric for error rates\n      this.appInsights.trackMetric({\n        name: 'ApiError',\n        average: 1,\n        sampleCount: 1,\n        properties: {\n          errorCode: error.code || 'unknown',\n          statusCode: error.statusCode?.toString() || '500',\n          action: details.action || 'unknown'\n        }\n      });\n    }\n  }\n\n  /**\n   * Create appropriate error response\n   */\n  private static createErrorResponse(error: ApiError, details: ErrorDetails): NextResponse {\n    const response: {\n      error: {\n        message: string;\n        code: string;\n        timestamp: string;\n        requestId: string | undefined;\n        details?: {\n          stack?: string;\n          originalMessage: string;\n        };\n      };\n    } = {\n      error: {\n        message: error.isOperational ? error.message : 'An internal server error occurred',\n        code: error.code || 'INTERNAL_ERROR',\n        timestamp: details.timestamp,\n        requestId: details.requestId\n      }\n    };\n\n    // Don't expose internal error details in production\n    if (process.env.NODE_ENV !== 'production' && !error.isOperational) {\n      response.error.details = {\n        stack: error.stack,\n        originalMessage: error.message\n      };\n    }\n\n    return NextResponse.json(\n      response,\n      {\n        status: error.statusCode || 500,\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Request-ID': details.requestId || 'unknown'\n        }\n      }\n    );\n  }\n\n  /**\n   * Create an operational error (expected errors)\n   */\n  static createOperationalError(message: string, statusCode: number = 400, code?: string): ApiError {\n    return {\n      name: 'OperationalError',\n      message,\n      statusCode,\n      code: code || 'OPERATIONAL_ERROR',\n      isOperational: true\n    };\n  }\n\n  /**\n   * Create a programming error (unexpected errors)\n   */\n  static createProgrammingError(message: string, originalError?: Error): ApiError {\n    return {\n      name: 'ProgrammingError',\n      message,\n      statusCode: 500,\n      code: 'PROGRAMMING_ERROR',\n      isOperational: false,\n      stack: originalError?.stack\n    };\n  }\n}\n\n// Convenience function for wrapping API handlers\nexport function withErrorHandler(\n  handler: (req: NextRequest) => Promise<NextResponse>\n) {\n  return ErrorHandler.withErrorHandler(handler);\n}\n\n// Convenience functions for creating errors\nexport const createOperationalError = ErrorHandler.createOperationalError;\nexport const createProgrammingError = ErrorHandler.createProgrammingError;\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/monitoring/resume-processing-events.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":99,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2824,2827],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2824,2827],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":105,"column":31,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":105,"endColumn":81},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":106,"column":39,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":106,"endColumn":84},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":124,"column":29,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":124,"endColumn":59},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":278,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":278,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8842,8845],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8842,8845],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Application Insights Custom Events for Resume Processing\n * \n * Provides structured logging and monitoring for the enhanced resume processing pipeline.\n * Integrates with Azure Application Insights for dashboard visualization and alerting.\n */\n\n// Define Attributes interface for telemetry events\ninterface Attributes {\n  [key: string]: string | number | boolean | undefined;\n}\n\nexport interface ResumeProcessedEvent extends Attributes {\n  userId: string;\n  fileName: string;\n  fileSize: number;\n  mimeType: string;\n  processingMethod: 'foundry-document-intelligence' | 'azure-form-recognizer' | 'openai-extraction';\n  processingTime: number;\n  confidence?: number;\n  success: boolean;\n  errorMessage?: string;\n  retryCount?: number;\n  storageProvider: 'firebase' | 'azure-blob';\n  hasJobDescription: boolean;\n  targetRole?: string;\n  targetIndustry?: string;\n  experienceLevel?: string;\n}\n\nexport interface ATSScoreComputedEvent extends Attributes {\n  userId: string;\n  atsScore: number;\n  overallGrade: string;\n  processingTime: number;\n  keywordScore: number;\n  formatScore: number;\n  structureScore: number;\n  contentScore: number;\n  hasJobDescription: boolean;\n  targetIndustry?: string;\n  recommendationsCount: number;\n  criticalIssuesCount: number;\n  success: boolean;\n  errorMessage?: string;\n}\n\nexport interface JobMatchComputedEvent extends Attributes {\n  userId: string;\n  jobMatchScore: number;\n  matchGrade: string;\n  processingTime: number;\n  skillsMatchScore: number;\n  experienceMatchScore: number;\n  educationMatchScore: number;\n  culturalFitScore: number;\n  semanticSimilarity: number;\n  criticalGapsCount: number;\n  missingKeywordsCount: number;\n  targetRole?: string;\n  experienceLevel?: string;\n  success: boolean;\n  errorMessage?: string;\n}\n\nexport interface FoundryModelUsageEvent extends Attributes {\n  userId: string;\n  modelType: 'document-intelligence' | 'openai-gpt-4' | 'openai-embeddings';\n  operation: 'resume-analysis' | 'ats-optimization' | 'job-matching' | 'skills-normalization';\n  inputTokens?: number;\n  outputTokens?: number;\n  totalTokens?: number;\n  pagesProcessed?: number;\n  documentsProcessed?: number;\n  processingTime: number;\n  costEstimate?: number;\n  success: boolean;\n  errorType?: string;\n  rateLimited?: boolean;\n}\n\nexport interface ResumeProcessingErrorEvent extends Attributes {\n  userId: string;\n  errorType: 'extraction-failed' | 'ats-analysis-failed' | 'job-matching-failed' | 'storage-failed' | 'validation-failed';\n  errorMessage: string;\n  errorStack?: string;\n  processingMethod: string;\n  retryAttempt: number;\n  fileName?: string;\n  fileSize?: number;\n  processingTime: number;\n  recovery: 'fallback-used' | 'retry-scheduled' | 'failed-permanently';\n}\n\n/**\n * Resume Processing Telemetry Service\n */\nclass ResumeProcessingTelemetry {\n  private telemetry: any;\n\n  constructor() {\n    // Initialize Application Insights if available\n    if (typeof window !== 'undefined') {\n      // Client-side - use React Application Insights\n      const { ReactPlugin } = require('@microsoft/applicationinsights-react-js');\n      const { ApplicationInsights } = require('@microsoft/applicationinsights-web');\n      \n      if (process.env.NEXT_PUBLIC_APPINSIGHTS_INSTRUMENTATIONKEY) {\n        const reactPlugin = new ReactPlugin();\n        this.telemetry = new ApplicationInsights({\n          config: {\n            instrumentationKey: process.env.NEXT_PUBLIC_APPINSIGHTS_INSTRUMENTATIONKEY,\n            extensions: [reactPlugin],\n            extensionConfig: {\n              [reactPlugin.identifier]: {}\n            }\n          }\n        });\n        this.telemetry.loadAppInsights();\n      }\n    } else {\n      // Server-side - use Node.js Application Insights\n      try {\n        const appInsights = require('applicationinsights');\n        \n        if (process.env.APPLICATIONINSIGHTS_CONNECTION_STRING) {\n          appInsights.setup(process.env.APPLICATIONINSIGHTS_CONNECTION_STRING)\n            .setAutoDependencyCorrelation(true)\n            .setAutoCollectRequests(true)\n            .setAutoCollectPerformance(true, true)\n            .setAutoCollectExceptions(true)\n            .setAutoCollectDependencies(true)\n            .setAutoCollectConsole(true)\n            .setUseDiskRetryCaching(true)\n            .setSendLiveMetrics(true)\n            .start();\n            \n          this.telemetry = appInsights.defaultClient;\n        }\n      } catch (error) {\n        console.warn('Application Insights not available:', error);\n      }\n    }\n  }\n\n  /**\n   * Track resume processing completion\n   */\n  trackResumeProcessed(event: ResumeProcessedEvent): void {\n    this.trackEvent('ResumeProcessed', event);\n    \n    // Track processing time as a metric\n    this.trackMetric('ResumeProcessingTime', event.processingTime, {\n      processingMethod: event.processingMethod,\n      success: event.success.toString(),\n      hasJobDescription: event.hasJobDescription.toString()\n    });\n    \n    // Track file size distribution\n    this.trackMetric('ResumeFileSize', event.fileSize, {\n      mimeType: event.mimeType\n    });\n    \n    console.log(`üìä Resume processed: ${event.fileName} (${event.processingMethod}) in ${event.processingTime}ms`);\n  }\n\n  /**\n   * Track ATS score computation\n   */\n  trackATSScoreComputed(event: ATSScoreComputedEvent): void {\n    this.trackEvent('ATSScoreComputed', event);\n    \n    // Track ATS score distribution\n    this.trackMetric('ATSScore', event.atsScore, {\n      overallGrade: event.overallGrade,\n      hasJobDescription: event.hasJobDescription.toString(),\n      targetIndustry: event.targetIndustry || 'unknown'\n    });\n    \n    // Track individual component scores\n    this.trackMetric('ATSKeywordScore', event.keywordScore);\n    this.trackMetric('ATSFormatScore', event.formatScore);\n    this.trackMetric('ATSStructureScore', event.structureScore);\n    this.trackMetric('ATSContentScore', event.contentScore);\n    \n    console.log(`üéØ ATS score computed: ${event.atsScore}/100 (${event.overallGrade}) in ${event.processingTime}ms`);\n  }\n\n  /**\n   * Track job matching computation\n   */\n  trackJobMatchComputed(event: JobMatchComputedEvent): void {\n    this.trackEvent('JobMatchComputed', event);\n    \n    // Track job match score distribution\n    this.trackMetric('JobMatchScore', event.jobMatchScore, {\n      matchGrade: event.matchGrade,\n      targetRole: event.targetRole || 'unknown',\n      experienceLevel: event.experienceLevel || 'unknown'\n    });\n    \n    // Track semantic similarity effectiveness\n    this.trackMetric('SemanticSimilarity', event.semanticSimilarity);\n    \n    // Track skill gaps\n    this.trackMetric('CriticalSkillGaps', event.criticalGapsCount);\n    this.trackMetric('MissingKeywords', event.missingKeywordsCount);\n    \n    console.log(`üéØ Job match computed: ${event.jobMatchScore}/100 (${event.matchGrade}) in ${event.processingTime}ms`);\n  }\n\n  /**\n   * Track Foundry model usage for billing and quota monitoring\n   */\n  trackFoundryModelUsage(event: FoundryModelUsageEvent): void {\n    this.trackEvent('FoundryModelUsage', event);\n    \n    // Track token usage for cost monitoring\n    if (event.totalTokens) {\n      this.trackMetric('FoundryTokensUsed', event.totalTokens, {\n        modelType: event.modelType,\n        operation: event.operation\n      });\n    }\n    \n    // Track pages processed for Document Intelligence\n    if (event.pagesProcessed) {\n      this.trackMetric('FoundryPagesProcessed', event.pagesProcessed, {\n        modelType: event.modelType\n      });\n    }\n    \n    // Track estimated cost\n    if (event.costEstimate) {\n      this.trackMetric('FoundryCostEstimate', event.costEstimate, {\n        modelType: event.modelType,\n        operation: event.operation\n      });\n    }\n    \n    console.log(`üí∞ Foundry usage: ${event.modelType} (${event.operation}) - ${event.totalTokens || event.pagesProcessed} units`);\n  }\n\n  /**\n   * Track processing errors\n   */\n  trackResumeProcessingError(event: ResumeProcessingErrorEvent): void {\n    this.trackEvent('ResumeProcessingError', event);\n    \n    // Track error frequency by type\n    this.trackMetric('ResumeProcessingErrors', 1, {\n      errorType: event.errorType,\n      processingMethod: event.processingMethod,\n      recovery: event.recovery\n    });\n    \n    console.error(`‚ùå Resume processing error: ${event.errorType} - ${event.errorMessage}`);\n  }\n\n  /**\n   * Track custom metric\n   */\n  trackMetric(name: string, value: number, properties?: Record<string, string>): void {\n    if (this.telemetry) {\n      if (typeof window !== 'undefined') {\n        // Client-side\n        this.telemetry.trackMetric({ name, average: value }, properties);\n      } else {\n        // Server-side\n        this.telemetry.trackMetric({ name, value }, properties);\n      }\n    }\n  }\n\n  /**\n   * Track custom event\n   */\n  trackEvent(name: string, properties: Record<string, any>): void {\n    if (this.telemetry) {\n      // Convert all property values to strings for Application Insights\n      const stringProperties: Record<string, string> = {};\n      Object.entries(properties).forEach(([key, value]) => {\n        if (value !== null && value !== undefined) {\n          stringProperties[key] = typeof value === 'string' ? value : JSON.stringify(value);\n        }\n      });\n\n      if (typeof window !== 'undefined') {\n        // Client-side\n        this.telemetry.trackEvent({ name }, stringProperties);\n      } else {\n        // Server-side\n        this.telemetry.trackEvent({ name, properties: stringProperties });\n      }\n    }\n    \n    // Also log to console in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`üîç Event: ${name}`, properties);\n    }\n  }\n\n  /**\n   * Track dependency call (external service calls)\n   */\n  trackDependency(\n    name: string,\n    command: string,\n    startTime: number,\n    duration: number,\n    success: boolean,\n    properties?: Record<string, string>\n  ): void {\n    if (this.telemetry && typeof window === 'undefined') {\n      // Server-side only\n      this.telemetry.trackDependency({\n        name,\n        data: command,\n        startTime: new Date(startTime),\n        duration,\n        success,\n        properties\n      });\n    }\n  }\n\n  /**\n   * Create performance tracking wrapper for async operations\n   */\n  withPerformanceTracking<T>(\n    operationName: string,\n    operation: () => Promise<T>,\n    additionalProperties?: Record<string, string>\n  ): Promise<T> {\n    const startTime = Date.now();\n    \n    return operation()\n      .then(result => {\n        const duration = Date.now() - startTime;\n        \n        this.trackMetric(`${operationName}Duration`, duration, additionalProperties);\n        this.trackDependency(\n          operationName,\n          'internal-operation',\n          startTime,\n          duration,\n          true,\n          additionalProperties\n        );\n        \n        return result;\n      })\n      .catch(error => {\n        const duration = Date.now() - startTime;\n        \n        this.trackMetric(`${operationName}Duration`, duration, {\n          ...additionalProperties,\n          success: 'false'\n        });\n        \n        this.trackDependency(\n          operationName,\n          'internal-operation',\n          startTime,\n          duration,\n          false,\n          {\n            ...additionalProperties,\n            error: error.message\n          }\n        );\n        \n        throw error;\n      });\n  }\n\n  /**\n   * Flush telemetry (useful for serverless environments)\n   */\n  flush(): void {\n    if (this.telemetry) {\n      if (typeof window !== 'undefined') {\n        // Client-side\n        this.telemetry.flush();\n      } else {\n        // Server-side\n        this.telemetry.flush();\n      }\n    }\n  }\n}\n\n// Export singleton instance\nexport const resumeProcessingTelemetry = new ResumeProcessingTelemetry();\n\n// Export helper functions\nexport function createResumeProcessedEvent(\n  userId: string,\n  fileName: string,\n  fileSize: number,\n  mimeType: string,\n  processingMethod: ResumeProcessedEvent['processingMethod'],\n  processingTime: number,\n  success: boolean,\n  options: Partial<ResumeProcessedEvent> = {}\n): ResumeProcessedEvent {\n  return {\n    userId,\n    fileName,\n    fileSize,\n    mimeType,\n    processingMethod,\n    processingTime,\n    success,\n    storageProvider: 'firebase', // default\n    hasJobDescription: false, // default\n    ...options\n  };\n}\n\nexport function createATSScoreComputedEvent(\n  userId: string,\n  atsScore: number,\n  overallGrade: string,\n  processingTime: number,\n  componentScores: {\n    keywordScore: number;\n    formatScore: number;\n    structureScore: number;\n    contentScore: number;\n  },\n  options: Partial<ATSScoreComputedEvent> = {}\n): ATSScoreComputedEvent {\n  return {\n    userId,\n    atsScore,\n    overallGrade,\n    processingTime,\n    ...componentScores,\n    hasJobDescription: false, // default\n    recommendationsCount: 0, // default\n    criticalIssuesCount: 0, // default\n    success: true, // default\n    ...options\n  };\n}\n\nexport function createJobMatchComputedEvent(\n  userId: string,\n  jobMatchScore: number,\n  matchGrade: string,\n  processingTime: number,\n  componentScores: {\n    skillsMatchScore: number;\n    experienceMatchScore: number;\n    educationMatchScore: number;\n    culturalFitScore: number;\n    semanticSimilarity: number;\n  },\n  options: Partial<JobMatchComputedEvent> = {}\n): JobMatchComputedEvent {\n  return {\n    userId,\n    jobMatchScore,\n    matchGrade,\n    processingTime,\n    ...componentScores,\n    criticalGapsCount: 0, // default\n    missingKeywordsCount: 0, // default\n    success: true, // default\n    ...options\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/services/ats-optimization-service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fetchAzureSecrets' is defined but never used.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":267,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":267,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7217,7220],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7217,7220],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":384,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":384,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10893,10896],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10893,10896],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":486,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":486,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14257,14260],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14257,14260],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":490,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":490,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14432,14435],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14432,14435],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":491,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":491,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14510,14513],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14510,14513],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":494,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":494,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14716,14719],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14716,14719],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":516,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":516,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15386,15389],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15386,15389],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":542,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":542,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":602,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":602,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17855,17858],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17855,17858],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":672,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":672,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20471,20474],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20471,20474],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * ATS Optimization Service\n * \n * Provides comprehensive ATS (Applicant Tracking System) analysis including:\n * - Keyword density analysis and optimization\n * - Skills normalization using industry taxonomies (O*NET, ESCO, SFIA)\n * - Job matching using semantic similarity with embeddings\n * - ATS scoring and recommendations\n */\n\nimport { OpenAI } from 'openai';\nimport { MigrationOpenAIClient } from '@/lib/azure-ai-foundry/clients/migration-wrapper';\nimport { fetchAzureSecrets } from '@/azure/lib/azure-config';\nimport { \n  ATS_OPTIMIZATION_PROMPT,\n  SKILLS_NORMALIZATION_PROMPT,\n  JOB_MATCHING_PROMPT,\n  formatConditionalPrompt\n} from '@/prompts/resume/extraction-prompts';\n\n// Types for ATS analysis\nexport interface ATSAnalysisResult {\n  atsScore: number;\n  overallGrade: string;\n  analysis: {\n    keywordAnalysis: KeywordAnalysis;\n    formatAnalysis: FormatAnalysis;\n    structureAnalysis: StructureAnalysis;\n    contentAnalysis: ContentAnalysis;\n  };\n  prioritizedRecommendations: ATSRecommendation[];\n}\n\nexport interface KeywordAnalysis {\n  score: number;\n  totalKeywords: number;\n  matchedKeywords: string[];\n  missingKeywords: string[];\n  keywordDensity: number;\n  industryKeywords: IndustryKeyword[];\n  recommendations: string[];\n}\n\nexport interface IndustryKeyword {\n  keyword: string;\n  importance: 'critical' | 'high' | 'medium' | 'low';\n  category: 'technical' | 'soft' | 'industry' | 'role';\n  frequency: number;\n  variations: string[];\n}\n\nexport interface FormatAnalysis {\n  score: number;\n  issues: FormatIssue[];\n  strengths: string[];\n}\n\nexport interface FormatIssue {\n  type: 'critical' | 'warning' | 'suggestion';\n  issue: string;\n  solution: string;\n  impact: string;\n}\n\nexport interface StructureAnalysis {\n  score: number;\n  missingElements: string[];\n  presentElements: string[];\n  recommendations: string[];\n}\n\nexport interface ContentAnalysis {\n  score: number;\n  strengthAreas: string[];\n  improvementAreas: string[];\n  recommendations: string[];\n}\n\nexport interface ATSRecommendation {\n  priority: 'high' | 'medium' | 'low';\n  category: 'keywords' | 'formatting' | 'structure' | 'content';\n  recommendation: string;\n  implementation: string;\n  expectedImpact: string;\n  timeToImplement: string;\n}\n\n// Types for skills normalization\nexport interface SkillsNormalizationResult {\n  normalizedSkills: NormalizedSkill[];\n  skillCategories: SkillCategories;\n  industryAlignment: IndustryAlignment;\n}\n\nexport interface NormalizedSkill {\n  originalSkill: string;\n  normalizedSkill: string;\n  category: string;\n  subcategory: string;\n  proficiencyLevel: 'beginner' | 'intermediate' | 'advanced' | 'expert';\n  industryStandard: boolean;\n  frameworks: {\n    sfia?: string;\n    onet?: string;\n    esco?: string;\n  };\n  relatedSkills: string[];\n  marketDemand: 'high' | 'medium' | 'low';\n  salaryImpact: 'positive' | 'neutral' | 'negative';\n  learningPath: string[];\n}\n\nexport interface SkillCategories {\n  technical: string[];\n  soft: string[];\n  language: string[];\n  certification: string[];\n  tool: string[];\n}\n\nexport interface IndustryAlignment {\n  score: number;\n  wellAlignedSkills: string[];\n  missingIndustrySkills: string[];\n  emergingSkills: string[];\n  recommendations: string[];\n}\n\n// Types for job matching\nexport interface JobMatchResult {\n  overallMatchScore: number;\n  matchGrade: string;\n  analysis: {\n    skillsMatch: SkillsMatchAnalysis;\n    experienceMatch: ExperienceMatchAnalysis;\n    educationMatch: EducationMatchAnalysis;\n    culturalFit: CulturalFitAnalysis;\n  };\n  recommendations: JobMatchRecommendation[];\n  interviewPreparation: string[];\n  missingKeywords: string[];\n}\n\nexport interface SkillsMatchAnalysis {\n  score: number;\n  matchedSkills: MatchedSkill[];\n  missingSkills: MissingSkill[];\n  skillGapAnalysis: {\n    criticalGaps: string[];\n    niceToHaveGaps: string[];\n    strengthAreas: string[];\n  };\n}\n\nexport interface MatchedSkill {\n  skill: string;\n  resumeLevel: string;\n  requiredLevel: string;\n  match: 'exceeds' | 'meets' | 'below';\n}\n\nexport interface MissingSkill {\n  skill: string;\n  importance: 'high' | 'medium' | 'low';\n  canLearn: boolean;\n  timeToLearn: string;\n}\n\nexport interface ExperienceMatchAnalysis {\n  score: number;\n  yearsRequired: number;\n  yearsCandidate: number;\n  yearsMatch: 'exceeds' | 'meets' | 'below';\n  industryMatch: {\n    score: number;\n    relevantIndustries: string[];\n    transferableExperience: string[];\n  };\n  roleSimilarity: {\n    score: number;\n    similarRoles: string[];\n    levelMatch: string;\n  };\n}\n\nexport interface EducationMatchAnalysis {\n  score: number;\n  degreeMatch: boolean;\n  fieldRelevance: 'high' | 'medium' | 'low';\n  institutionPrestige: string;\n  additionalQualifications: string[];\n}\n\nexport interface CulturalFitAnalysis {\n  score: number;\n  indicators: string[];\n  concerns: string[];\n  strengths: string[];\n}\n\nexport interface JobMatchRecommendation {\n  category: 'skills' | 'experience' | 'education' | 'presentation';\n  priority: 'high' | 'medium' | 'low';\n  recommendation: string;\n  reasoning: string;\n  resources: string[];\n  timeframe: string;\n}\n\n// Industry taxonomy mappings\nconst INDUSTRY_TAXONOMIES = {\n  technology: {\n    frameworks: ['React', 'Angular', 'Vue.js', 'Node.js', 'Django', 'Spring'],\n    languages: ['JavaScript', 'Python', 'Java', 'TypeScript', 'Go', 'Rust'],\n    tools: ['Git', 'Docker', 'Kubernetes', 'AWS', 'Azure', 'Jenkins'],\n    concepts: ['Agile', 'DevOps', 'Microservices', 'API Design', 'Cloud Computing']\n  },\n  finance: {\n    regulations: ['SOX', 'GDPR', 'Basel III', 'IFRS', 'GAAP'],\n    tools: ['Excel', 'Bloomberg', 'SAP', 'Oracle', 'Tableau'],\n    concepts: ['Risk Management', 'Portfolio Management', 'Financial Modeling', 'Compliance']\n  },\n  healthcare: {\n    regulations: ['HIPAA', 'FDA', 'CLIA', 'Joint Commission'],\n    systems: ['Epic', 'Cerner', 'MEDITECH', 'Allscripts'],\n    concepts: ['Patient Care', 'Quality Assurance', 'Clinical Research', 'Healthcare Analytics']\n  },\n  marketing: {\n    platforms: ['Google Ads', 'Facebook Ads', 'LinkedIn', 'HubSpot', 'Salesforce'],\n    concepts: ['SEO', 'SEM', 'Content Marketing', 'Brand Management', 'Customer Acquisition'],\n    metrics: ['CTR', 'CAC', 'ROAS', 'LTV', 'Conversion Rate']\n  }\n};\n\nclass ATSOptimizationService {\n  private openai: OpenAI | MigrationOpenAIClient | null = null;\n\n  constructor() {\n    this.initializeOpenAI();\n  }\n\n  private async initializeOpenAI() {\n    try {\n      // Try Azure AI Foundry (Migration Client) first\n      const migrationClient = new MigrationOpenAIClient();\n      await migrationClient.init();\n      this.openai = migrationClient;\n      console.log('‚úÖ ATS Service using Azure AI Foundry client');\n    } catch (error) {\n      console.warn('Azure AI Foundry not available, falling back to OpenAI:', error);\n      // Fallback to standard OpenAI\n      if (process.env.OPENAI_API_KEY) {\n        this.openai = new OpenAI({\n          apiKey: process.env.OPENAI_API_KEY,\n        });\n        console.log('‚úÖ ATS Service using standard OpenAI client');\n      } else {\n        throw new Error('No AI service available for ATS optimization');\n      }\n    }\n  }\n\n  /**\n   * Perform comprehensive ATS analysis of a resume\n   */\n  async analyzeATS(\n    resumeData: any,\n    jobDescription?: string,\n    targetIndustry?: string\n  ): Promise<ATSAnalysisResult> {\n    if (!this.openai) {\n      await this.initializeOpenAI();\n    }\n\n    try {\n      const prompt = formatConditionalPrompt(ATS_OPTIMIZATION_PROMPT, {\n        RESUME_DATA: JSON.stringify(resumeData, null, 2),\n        jobDescription,\n        targetIndustry\n      });\n\n      const completion = await this.openai!.chat.completions.create({\n        model: process.env.AZURE_OPENAI_DEPLOYMENT || 'gpt-4',\n        messages: [\n          {\n            role: 'system',\n            content: 'You are an expert ATS (Applicant Tracking System) analyst. Provide detailed, actionable analysis to improve resume compatibility with ATS systems.'\n          },\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        temperature: 0.3, // Lower temperature for more consistent analysis\n        max_tokens: 4000,\n      });\n\n      const response = completion.choices[0].message.content;\n      if (!response) {\n        throw new Error('No response from AI service');\n      }\n\n      // Parse JSON response\n      const analysisResult = JSON.parse(response) as ATSAnalysisResult;\n\n      // Enhance with industry-specific analysis\n      if (targetIndustry) {\n        analysisResult.analysis.keywordAnalysis = await this.enhanceKeywordAnalysis(\n          analysisResult.analysis.keywordAnalysis,\n          resumeData,\n          targetIndustry\n        );\n      }\n\n      return analysisResult;\n    } catch (error) {\n      console.error('ATS analysis failed:', error);\n      throw new Error(`ATS analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Normalize and categorize skills using industry taxonomies\n   */\n  async normalizeSkills(\n    skills: string[],\n    targetIndustry?: string,\n    experienceLevel?: string\n  ): Promise<SkillsNormalizationResult> {\n    if (!this.openai) {\n      await this.initializeOpenAI();\n    }\n\n    try {\n      const prompt = formatConditionalPrompt(SKILLS_NORMALIZATION_PROMPT, {\n        SKILLS_LIST: skills.join(', '),\n        TARGET_INDUSTRY: targetIndustry,\n        EXPERIENCE_LEVEL: experienceLevel\n      });\n\n      const completion = await this.openai!.chat.completions.create({\n        model: process.env.AZURE_OPENAI_DEPLOYMENT || 'gpt-4',\n        messages: [\n          {\n            role: 'system',\n            content: 'You are an expert in skills taxonomy and industry standards. Use established frameworks like O*NET, ESCO, and SFIA to normalize and categorize skills.'\n          },\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        temperature: 0.2,\n        max_tokens: 3000,\n      });\n\n      const response = completion.choices[0].message.content;\n      if (!response) {\n        throw new Error('No response from AI service');\n      }\n\n      const normalizationResult = JSON.parse(response) as SkillsNormalizationResult;\n\n      // Enhance with industry-specific mappings\n      if (targetIndustry && INDUSTRY_TAXONOMIES[targetIndustry as keyof typeof INDUSTRY_TAXONOMIES]) {\n        normalizationResult.industryAlignment = await this.enhanceIndustryAlignment(\n          normalizationResult.industryAlignment,\n          skills,\n          targetIndustry\n        );\n      }\n\n      return normalizationResult;\n    } catch (error) {\n      console.error('Skills normalization failed:', error);\n      throw new Error(`Skills normalization failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Perform job matching analysis using semantic similarity\n   */\n  async analyzeJobMatch(\n    resumeData: any,\n    jobDescription: string,\n    targetRole?: string,\n    experienceLevel?: string\n  ): Promise<JobMatchResult> {\n    if (!this.openai) {\n      await this.initializeOpenAI();\n    }\n\n    try {\n      // First, get semantic embeddings for similarity analysis\n      const resumeEmbedding = await this.getResumeEmbedding(resumeData);\n      const jobEmbedding = await this.getJobDescriptionEmbedding(jobDescription);\n      const semanticSimilarity = this.calculateCosineSimilarity(resumeEmbedding, jobEmbedding);\n\n      const prompt = formatConditionalPrompt(JOB_MATCHING_PROMPT, {\n        RESUME_DATA: JSON.stringify(resumeData, null, 2),\n        JOB_DESCRIPTION: jobDescription,\n        targetRole,\n        experienceLevel\n      });\n\n      const completion = await this.openai!.chat.completions.create({\n        model: process.env.AZURE_OPENAI_DEPLOYMENT || 'gpt-4',\n        messages: [\n          {\n            role: 'system',\n            content: 'You are an expert job matching analyst. Provide detailed analysis of how well a candidate matches a job description, including specific skill gaps and recommendations.'\n          },\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        temperature: 0.3,\n        max_tokens: 4000,\n      });\n\n      const response = completion.choices[0].message.content;\n      if (!response) {\n        throw new Error('No response from AI service');\n      }\n\n      const matchResult = JSON.parse(response) as JobMatchResult;\n\n      // Enhance overall score with semantic similarity\n      matchResult.overallMatchScore = Math.round(\n        (matchResult.overallMatchScore * 0.7) + (semanticSimilarity * 100 * 0.3)\n      );\n\n      // Extract missing keywords from job description\n      matchResult.missingKeywords = await this.extractMissingKeywords(resumeData, jobDescription);\n\n      return matchResult;\n    } catch (error) {\n      console.error('Job matching analysis failed:', error);\n      throw new Error(`Job matching analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Calculate keyword density and relevance\n   */\n  async calculateKeywordDensity(\n    resumeText: string,\n    targetKeywords: string[]\n  ): Promise<{ density: number; matches: string[]; missing: string[] }> {\n    const resumeWords = resumeText.toLowerCase().split(/\\s+/);\n    const totalWords = resumeWords.length;\n    \n    const matches: string[] = [];\n    const missing: string[] = [];\n\n    for (const keyword of targetKeywords) {\n      const keywordLower = keyword.toLowerCase();\n      const keywordWords = keywordLower.split(/\\s+/);\n      \n      if (keywordWords.length === 1) {\n        // Single word keyword\n        if (resumeWords.includes(keywordLower)) {\n          matches.push(keyword);\n        } else {\n          missing.push(keyword);\n        }\n      } else {\n        // Multi-word keyword - check for phrase\n        const keywordRegex = new RegExp(keywordWords.join('\\\\s+'), 'i');\n        if (keywordRegex.test(resumeText)) {\n          matches.push(keyword);\n        } else {\n          missing.push(keyword);\n        }\n      }\n    }\n\n    const density = matches.length / totalWords;\n    return { density, matches, missing };\n  }\n\n  /**\n   * Get embedding representation of resume for semantic analysis\n   */\n  private async getResumeEmbedding(resumeData: any): Promise<number[]> {\n    // Create a text representation of key resume elements\n    const resumeText = [\n      resumeData.summary || '',\n      resumeData.skills?.map((s: any) => s.skill || s).join(' ') || '',\n      resumeData.experience?.map((exp: any) => \n        `${exp.position} ${exp.company} ${exp.description} ${exp.achievements?.join(' ') || ''} ${exp.technologies?.join(' ') || ''}`\n      ).join(' ') || '',\n      resumeData.education?.map((edu: any) => \n        `${edu.degree} ${edu.field} ${edu.institution}`\n      ).join(' ') || ''\n    ].join(' ');\n\n    return await this.getTextEmbedding(resumeText);\n  }\n\n  /**\n   * Get embedding representation of job description\n   */\n  private async getJobDescriptionEmbedding(jobDescription: string): Promise<number[]> {\n    return await this.getTextEmbedding(jobDescription);\n  }\n\n  /**\n   * Get text embedding using OpenAI's embedding API\n   */\n  private async getTextEmbedding(text: string): Promise<number[]> {\n    try {\n      // Check if embeddings API is available\n      if (this.openai && 'embeddings' in this.openai) {\n        const response = await (this.openai as any).embeddings.create({\n          model: 'text-embedding-ada-002',\n          input: text.slice(0, 8192), // Limit to avoid token limits\n        });\n        return response.data[0].embedding;\n      } else {\n        // Fallback: Use text-based similarity analysis\n        console.warn('Embeddings API not available, using text-based fallback');\n        return this.getTextBasedVector(text);\n      }\n    } catch (error) {\n      console.error('Failed to get embedding:', error);\n      // Return text-based vector as fallback\n      return this.getTextBasedVector(text);\n    }\n  }\n\n  /**\n   * Create a simple text-based vector representation\n   */\n  private getTextBasedVector(text: string): number[] {\n    // Simple text-based feature extraction\n    const words = text.toLowerCase().split(/\\s+/);\n    const vector = new Array(1536).fill(0);\n    \n    // Use word frequency and character patterns to create a pseudo-vector\n    words.forEach((word, index) => {\n      const hash = this.simpleHash(word);\n      const vectorIndex = Math.abs(hash) % 1536;\n      vector[vectorIndex] += 1;\n    });\n    \n    // Normalize the vector\n    const magnitude = Math.sqrt(vector.reduce((sum, val) => sum + val * val, 0));\n    if (magnitude > 0) {\n      for (let i = 0; i < vector.length; i++) {\n        vector[i] = vector[i] / magnitude;\n      }\n    }\n    \n    return vector;\n  }\n\n  /**\n   * Simple hash function for text\n   */\n  private simpleHash(str: string): number {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return hash;\n  }\n\n  /**\n   * Calculate cosine similarity between two vectors\n   */\n  private calculateCosineSimilarity(vector1: number[], vector2: number[]): number {\n    if (vector1.length !== vector2.length) {\n      console.warn('Vector lengths do not match');\n      return 0;\n    }\n\n    let dotProduct = 0;\n    let norm1 = 0;\n    let norm2 = 0;\n\n    for (let i = 0; i < vector1.length; i++) {\n      dotProduct += vector1[i] * vector2[i];\n      norm1 += vector1[i] * vector1[i];\n      norm2 += vector2[i] * vector2[i];\n    }\n\n    const magnitude = Math.sqrt(norm1) * Math.sqrt(norm2);\n    if (magnitude === 0) {\n      return 0;\n    }\n\n    return dotProduct / magnitude;\n  }\n\n  /**\n   * Extract missing keywords from job description that aren't in resume\n   */\n  private async extractMissingKeywords(resumeData: any, jobDescription: string): Promise<string[]> {\n    // Extract keywords from job description\n    const jobKeywords = this.extractKeywordsFromText(jobDescription);\n    \n    // Extract keywords from resume\n    const resumeText = JSON.stringify(resumeData);\n    const resumeKeywords = this.extractKeywordsFromText(resumeText);\n    \n    // Find missing keywords\n    const missingKeywords = jobKeywords.filter(keyword => \n      !resumeKeywords.some(resumeKeyword => \n        resumeKeyword.toLowerCase().includes(keyword.toLowerCase()) ||\n        keyword.toLowerCase().includes(resumeKeyword.toLowerCase())\n      )\n    );\n\n    // Filter to keep only important keywords (remove common words)\n    const importantKeywords = missingKeywords.filter(keyword => \n      keyword.length > 2 && \n      !['the', 'and', 'for', 'are', 'but', 'not', 'you', 'all', 'can', 'had', 'her', 'was', 'one', 'our', 'out', 'day', 'had', 'has', 'his', 'how', 'man', 'new', 'now', 'old', 'see', 'two', 'who', 'boy', 'did', 'its', 'let', 'put', 'say', 'she', 'too', 'use'].includes(keyword.toLowerCase())\n    );\n\n    return importantKeywords.slice(0, 20); // Limit to top 20 missing keywords\n  }\n\n  /**\n   * Extract keywords from text using simple NLP techniques\n   */\n  private extractKeywordsFromText(text: string): string[] {\n    // Remove common punctuation and split into words\n    const words = text\n      .toLowerCase()\n      .replace(/[^\\w\\s-]/g, ' ')\n      .split(/\\s+/)\n      .filter(word => word.length > 2);\n\n    // Count word frequency\n    const wordCount: { [key: string]: number } = {};\n    words.forEach(word => {\n      wordCount[word] = (wordCount[word] || 0) + 1;\n    });\n\n    // Extract phrases (2-3 word combinations)\n    const phrases: string[] = [];\n    for (let i = 0; i < words.length - 1; i++) {\n      const twoWordPhrase = `${words[i]} ${words[i + 1]}`;\n      phrases.push(twoWordPhrase);\n      \n      if (i < words.length - 2) {\n        const threeWordPhrase = `${words[i]} ${words[i + 1]} ${words[i + 2]}`;\n        phrases.push(threeWordPhrase);\n      }\n    }\n\n    // Combine single words and phrases, sort by frequency/importance\n    const allKeywords = [...Object.keys(wordCount), ...phrases];\n    \n    // Remove duplicates and sort by length (longer phrases first)\n    const uniqueKeywords = Array.from(new Set(allKeywords))\n      .sort((a, b) => b.length - a.length)\n      .slice(0, 100); // Limit to top 100 keywords\n\n    return uniqueKeywords;\n  }\n\n  /**\n   * Enhance keyword analysis with industry-specific terms\n   */\n  private async enhanceKeywordAnalysis(\n    keywordAnalysis: KeywordAnalysis,\n    resumeData: any,\n    targetIndustry: string\n  ): Promise<KeywordAnalysis> {\n    const industryData = INDUSTRY_TAXONOMIES[targetIndustry as keyof typeof INDUSTRY_TAXONOMIES];\n    \n    if (!industryData) {\n      return keywordAnalysis;\n    }\n\n    // Check for industry-specific keywords\n    const industryKeywords: IndustryKeyword[] = [];\n    const resumeText = JSON.stringify(resumeData).toLowerCase();\n\n    // Check technical frameworks/tools\n    Object.entries(industryData).forEach(([category, keywords]) => {\n      keywords.forEach(keyword => {\n        const isPresent = resumeText.includes(keyword.toLowerCase());\n        industryKeywords.push({\n          keyword,\n          importance: this.getKeywordImportance(keyword, category),\n          category: this.mapCategoryType(category),\n          frequency: isPresent ? 1 : 0,\n          variations: this.getKeywordVariations(keyword)\n        });\n      });\n    });\n\n    return {\n      ...keywordAnalysis,\n      industryKeywords,\n      totalKeywords: keywordAnalysis.totalKeywords + industryKeywords.length\n    };\n  }\n\n  /**\n   * Enhance industry alignment analysis\n   */\n  private async enhanceIndustryAlignment(\n    industryAlignment: IndustryAlignment,\n    skills: string[],\n    targetIndustry: string\n  ): Promise<IndustryAlignment> {\n    const industryData = INDUSTRY_TAXONOMIES[targetIndustry as keyof typeof INDUSTRY_TAXONOMIES];\n    \n    if (!industryData) {\n      return industryAlignment;\n    }\n\n    const allIndustrySkills = Object.values(industryData).flat();\n    const skillsLower = skills.map(s => s.toLowerCase());\n\n    const wellAligned = allIndustrySkills.filter(industrySkill =>\n      skillsLower.some(skill => \n        skill.includes(industrySkill.toLowerCase()) || \n        industrySkill.toLowerCase().includes(skill)\n      )\n    );\n\n    const missing = allIndustrySkills.filter(industrySkill =>\n      !skillsLower.some(skill => \n        skill.includes(industrySkill.toLowerCase()) || \n        industrySkill.toLowerCase().includes(skill)\n      )\n    );\n\n    return {\n      ...industryAlignment,\n      wellAlignedSkills: [...new Set([...industryAlignment.wellAlignedSkills, ...wellAligned])],\n      missingIndustrySkills: [...new Set([...industryAlignment.missingIndustrySkills, ...missing.slice(0, 10)])],\n      score: Math.round((wellAligned.length / allIndustrySkills.length) * 100)\n    };\n  }\n\n  /**\n   * Get keyword importance based on category and context\n   */\n  private getKeywordImportance(keyword: string, category: string): 'critical' | 'high' | 'medium' | 'low' {\n    // High-importance categories\n    if (['frameworks', 'languages', 'regulations'].includes(category)) {\n      return 'high';\n    }\n    \n    // Medium-importance categories\n    if (['tools', 'platforms'].includes(category)) {\n      return 'medium';\n    }\n    \n    // Default to low importance\n    return 'low';\n  }\n\n  /**\n   * Map category names to standard types\n   */\n  private mapCategoryType(category: string): 'technical' | 'soft' | 'industry' | 'role' {\n    const technicalCategories = ['frameworks', 'languages', 'tools', 'platforms', 'systems'];\n    const industryCategories = ['regulations', 'concepts', 'metrics'];\n    \n    if (technicalCategories.includes(category)) {\n      return 'technical';\n    }\n    \n    if (industryCategories.includes(category)) {\n      return 'industry';\n    }\n    \n    return 'role';\n  }\n\n  /**\n   * Get common variations of a keyword\n   */\n  private getKeywordVariations(keyword: string): string[] {\n    // Common variations and synonyms\n    const variations: { [key: string]: string[] } = {\n      'React': ['React.js', 'ReactJS', 'React JS'],\n      'Node.js': ['NodeJS', 'Node', 'Node JS'],\n      'JavaScript': ['JS', 'Javascript', 'ECMAScript'],\n      'TypeScript': ['TS', 'Typescript'],\n      'Python': ['py'],\n      'Docker': ['Containerization'],\n      'Kubernetes': ['K8s', 'K8S'],\n      'AWS': ['Amazon Web Services'],\n      'Azure': ['Microsoft Azure'],\n    };\n\n    return variations[keyword] || [keyword];\n  }\n}\n\n// Export singleton instance\nexport const atsOptimizationService = new ATSOptimizationService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/services/aws-ses-service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SendRawEmailCommand' is defined but never used.","line":3,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":58}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// lib/services/aws-ses-service.ts\n\nimport { SESClient, SendEmailCommand, SendRawEmailCommand } from '@aws-sdk/client-ses';\n\nexport interface EmailParams {\n  to: string | string[];\n  subject: string;\n  html?: string;\n  text?: string;\n  from?: string;\n}\n\nexport class AWSSESService {\n  private sesClient: SESClient;\n  private defaultFromEmail: string;\n\n  constructor() {\n    // Initialize SES client with region and credentials\n    this.sesClient = new SESClient({\n      region: process.env.AWS_SES_REGION || 'us-east-1',\n      credentials: {\n        accessKeyId: process.env.AWS_ACCESS_KEY_ID!,\n        secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY!,\n      },\n    });\n\n    this.defaultFromEmail = process.env.AWS_SES_FROM_EMAIL || 'noreply@prepbettr.com';\n  }\n\n  /**\n   * Send a single email using AWS SES\n   */\n  async sendEmail(params: EmailParams): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    try {\n      const { to, subject, html, text, from } = params;\n\n      // Ensure we have either HTML or text content\n      if (!html && !text) {\n        return {\n          success: false,\n          error: 'Either HTML or text content must be provided'\n        };\n      }\n\n      // Convert single recipient to array for consistent handling\n      const recipients = Array.isArray(to) ? to : [to];\n\n      // Validate email addresses\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      const invalidEmails = recipients.filter(email => !emailRegex.test(email));\n      if (invalidEmails.length > 0) {\n        return {\n          success: false,\n          error: `Invalid email addresses: ${invalidEmails.join(', ')}`\n        };\n      }\n\n      const command = new SendEmailCommand({\n        Source: from || this.defaultFromEmail,\n        Destination: {\n          ToAddresses: recipients,\n        },\n        Message: {\n          Subject: {\n            Data: subject,\n            Charset: 'UTF-8',\n          },\n          Body: {\n            ...(html && {\n              Html: {\n                Data: html,\n                Charset: 'UTF-8',\n              },\n            }),\n            ...(text && {\n              Text: {\n                Data: text,\n                Charset: 'UTF-8',\n              },\n            }),\n          },\n        },\n      });\n\n      const result = await this.sesClient.send(command);\n\n      console.log(`Email sent successfully to ${recipients.join(', ')}. MessageId: ${result.MessageId}`);\n\n      return {\n        success: true,\n        messageId: result.MessageId,\n      };\n\n    } catch (error) {\n      console.error('Error sending email via AWS SES:', error);\n      \n      let errorMessage = 'Failed to send email';\n      if (error instanceof Error) {\n        errorMessage = error.message;\n      }\n\n      return {\n        success: false,\n        error: errorMessage,\n      };\n    }\n  }\n\n  /**\n   * Send bulk emails (up to 50 recipients per call)\n   */\n  async sendBulkEmail(\n    recipients: string[],\n    subject: string,\n    html?: string,\n    text?: string,\n    from?: string\n  ): Promise<{ success: boolean; sent: number; failed: string[]; errors: string[] }> {\n    const results = {\n      success: true,\n      sent: 0,\n      failed: [] as string[],\n      errors: [] as string[],\n    };\n\n    // AWS SES allows up to 50 recipients per call\n    const batchSize = 50;\n    const batches = [];\n\n    for (let i = 0; i < recipients.length; i += batchSize) {\n      batches.push(recipients.slice(i, i + batchSize));\n    }\n\n    for (const batch of batches) {\n      try {\n        const result = await this.sendEmail({\n          to: batch,\n          subject,\n          html,\n          text,\n          from,\n        });\n\n        if (result.success) {\n          results.sent += batch.length;\n        } else {\n          results.failed.push(...batch);\n          results.errors.push(result.error || 'Unknown error');\n          results.success = false;\n        }\n      } catch (error) {\n        results.failed.push(...batch);\n        results.errors.push(error instanceof Error ? error.message : 'Unknown error');\n        results.success = false;\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Verify an email address with AWS SES (for sandbox mode)\n   */\n  async verifyEmailAddress(email: string): Promise<{ success: boolean; error?: string }> {\n    try {\n      const { VerifyEmailIdentityCommand } = await import('@aws-sdk/client-ses');\n      const command = new VerifyEmailIdentityCommand({\n        EmailAddress: email,\n      });\n\n      await this.sesClient.send(command);\n\n      console.log(`Verification email sent to ${email}`);\n\n      return { success: true };\n    } catch (error) {\n      console.error('Error verifying email address:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to verify email address',\n      };\n    }\n  }\n\n  /**\n   * Check if AWS SES is properly configured\n   */\n  async testConnection(): Promise<{ success: boolean; error?: string }> {\n    try {\n      // Try to get sending quota to test connection\n      const { GetSendQuotaCommand } = await import('@aws-sdk/client-ses');\n      const command = new GetSendQuotaCommand({});\n      \n      const result = await this.sesClient.send(command);\n      \n      console.log('AWS SES connection successful:', {\n        maxSendRate: result.MaxSendRate,\n        max24HourSend: result.Max24HourSend,\n        sentLast24Hours: result.SentLast24Hours,\n      });\n\n      return { success: true };\n    } catch (error) {\n      console.error('AWS SES connection test failed:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Connection test failed',\n      };\n    }\n  }\n}\n\n// Export singleton instance\nexport const awsSESService = new AWSSESService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/services/azure-ai-service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'OpenAI' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'mimeType' is defined but never used.","line":150,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":150,"endColumn":55},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fileBuffer' is defined but never used.","line":192,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":192,"endColumn":55},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":605,"column":93,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":605,"endColumn":96,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17283,17286],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17283,17286],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":627,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":627,"endColumn":23}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { DefaultAzureCredential } from '@azure/identity';\nimport { AzureKeyCredential } from '@azure/core-auth';\nimport { DocumentAnalysisClient } from '@azure/ai-form-recognizer';\nimport { OpenAI, AzureOpenAI } from 'openai';\nimport { logServerError } from '@/lib/errors';\n\nexport interface ExtractedResumeData {\n  personalInfo: {\n    name?: string;\n    email?: string;\n    phone?: string;\n    address?: string;\n    linkedin?: string;\n    github?: string;\n  };\n  summary?: string;\n  skills: string[];\n  experience: WorkExperience[];\n  education: Education[];\n  projects: Project[];\n  certifications: Certification[];\n  languages: string[];\n}\n\nexport interface WorkExperience {\n  company: string;\n  position: string;\n  startDate?: string;\n  endDate?: string;\n  isCurrent?: boolean;\n  description: string;\n  achievements?: string[];\n  technologies?: string[];\n}\n\nexport interface Education {\n  institution: string;\n  degree: string;\n  field: string;\n  startDate?: string;\n  endDate?: string;\n  gpa?: number;\n  description?: string;\n}\n\nexport interface Project {\n  name: string;\n  description: string;\n  technologies?: string[];\n  url?: string;\n  github?: string;\n  startDate?: string;\n  endDate?: string;\n}\n\nexport interface Certification {\n  name: string;\n  issuer: string;\n  date?: string;\n  expiryDate?: string;\n  credentialId?: string;\n  url?: string;\n}\n\nexport interface InterviewQuestionGenerationOptions {\n  jobTitle?: string;\n  company?: string;\n  jobDescription?: string;\n  maxQuestions?: number;\n  difficulty?: 'easy' | 'medium' | 'hard' | 'mixed';\n  categories?: string[];\n}\n\nexport interface FeedbackGenerationOptions {\n  jobTitle?: string;\n  company?: string;\n  interviewType?: string;\n}\n\nexport interface GeneratedFeedback {\n  overallScore: number;\n  strengths: string[];\n  improvements: string[];\n  detailedFeedback: string;\n  categoryScores: {\n    technical: number;\n    communication: number;\n    problemSolving: number;\n    experience: number;\n  };\n}\n\nclass AzureAIService {\n  private openAIClient: AzureOpenAI | null = null;\n  private formRecognizerClient: DocumentAnalysisClient | null = null;\n  private initialized = false;\n  private openAIEndpoint: string;\n  private openAIApiKey: string;\n  private formRecognizerEndpoint: string;\n  private formRecognizerApiKey: string;\n\n  constructor() {\n    this.openAIEndpoint = process.env.AZURE_OPENAI_ENDPOINT || '';\n    this.openAIApiKey = process.env.AZURE_OPENAI_API_KEY || '';\n    this.formRecognizerEndpoint = process.env.AZURE_FORM_RECOGNIZER_ENDPOINT || '';\n    this.formRecognizerApiKey = process.env.AZURE_FORM_RECOGNIZER_API_KEY || '';\n  }\n\n  async initialize(): Promise<void> {\n    if (this.initialized) return;\n\n    try {\n      // Initialize Azure OpenAI\n      if (this.openAIEndpoint && this.openAIApiKey) {\n        this.openAIClient = new AzureOpenAI({\n          endpoint: this.openAIEndpoint,\n          apiKey: this.openAIApiKey,\n        });\n        console.log('‚úÖ Azure OpenAI client initialized');\n      }\n\n      // Initialize Azure Form Recognizer\n      if (this.formRecognizerEndpoint && this.formRecognizerApiKey) {\n        this.formRecognizerClient = new DocumentAnalysisClient(\n          this.formRecognizerEndpoint,\n          new AzureKeyCredential(this.formRecognizerApiKey)\n        );\n        console.log('‚úÖ Azure Form Recognizer client initialized');\n      } else if (this.formRecognizerEndpoint) {\n        // Use managed identity\n        this.formRecognizerClient = new DocumentAnalysisClient(\n          this.formRecognizerEndpoint,\n          new DefaultAzureCredential()\n        );\n        console.log('‚úÖ Azure Form Recognizer client initialized with managed identity');\n      }\n\n      this.initialized = true;\n      console.log('‚úÖ Azure AI service initialized');\n    } catch (error) {\n      console.error('‚ùå Failed to initialize Azure AI service:', error);\n      logServerError(error as Error, { service: 'azure-ai', action: 'initialize' });\n      throw error;\n    }\n  }\n\n  /**\n   * Extract resume data using Azure Form Recognizer\n   */\n  async extractResumeData(fileBuffer: Buffer, mimeType: string): Promise<ExtractedResumeData> {\n    await this.initialize();\n\n    if (!this.formRecognizerClient) {\n      throw new Error('Azure Form Recognizer not configured');\n    }\n\n    try {\n      console.log('üîç Extracting resume data with Azure Form Recognizer...');\n\n      // Use the general document model for resume analysis\n      const poller = await this.formRecognizerClient.beginAnalyzeDocument(\n        'prebuilt-document',\n        fileBuffer\n      );\n      \n      const result = await poller.pollUntilDone();\n\n      // Extract text content\n      const extractedText = result.content || '';\n      \n      // Use OpenAI to structure the extracted text into resume data\n      const structuredData = await this.structureResumeData(extractedText);\n      \n      console.log('‚úÖ Resume data extracted successfully');\n      return structuredData;\n    } catch (error) {\n      console.error('‚ùå Failed to extract resume data:', error);\n      logServerError(error as Error, { service: 'azure-ai', action: 'extract-resume' });\n      \n      // Fallback: try with OpenAI only using text extraction\n      if (this.openAIClient) {\n        return this.extractResumeDataWithOpenAI(fileBuffer);\n      }\n      \n      throw error;\n    }\n  }\n\n  /**\n   * Fallback resume extraction using OpenAI only\n   */\n  private async extractResumeDataWithOpenAI(fileBuffer: Buffer): Promise<ExtractedResumeData> {\n    console.log('üîÑ Falling back to OpenAI-only resume extraction...');\n    \n    // For now, return a basic structure and let the text-based extraction handle it\n    // In a real implementation, you'd need to first extract text from the PDF/DOC\n    const basicData: ExtractedResumeData = {\n      personalInfo: {},\n      skills: [],\n      experience: [],\n      education: [],\n      projects: [],\n      certifications: [],\n      languages: []\n    };\n\n    return basicData;\n  }\n\n  /**\n   * Structure extracted text into resume data using OpenAI\n   */\n  private async structureResumeData(extractedText: string): Promise<ExtractedResumeData> {\n    if (!this.openAIClient) {\n      throw new Error('Azure OpenAI not configured');\n    }\n\n    const deploymentName = process.env.AZURE_OPENAI_DEPLOYMENT_NAME || 'gpt-4';\n\n    const prompt = `\nPlease analyze the following resume text and extract structured information. Return the data as a JSON object with the following structure:\n\n{\n  \"personalInfo\": {\n    \"name\": \"\",\n    \"email\": \"\",\n    \"phone\": \"\",\n    \"address\": \"\",\n    \"linkedin\": \"\",\n    \"github\": \"\"\n  },\n  \"summary\": \"\",\n  \"skills\": [],\n  \"experience\": [\n    {\n      \"company\": \"\",\n      \"position\": \"\",\n      \"startDate\": \"\",\n      \"endDate\": \"\",\n      \"isCurrent\": false,\n      \"description\": \"\",\n      \"achievements\": [],\n      \"technologies\": []\n    }\n  ],\n  \"education\": [\n    {\n      \"institution\": \"\",\n      \"degree\": \"\",\n      \"field\": \"\",\n      \"startDate\": \"\",\n      \"endDate\": \"\",\n      \"gpa\": 0,\n      \"description\": \"\"\n    }\n  ],\n  \"projects\": [\n    {\n      \"name\": \"\",\n      \"description\": \"\",\n      \"technologies\": [],\n      \"url\": \"\",\n      \"github\": \"\",\n      \"startDate\": \"\",\n      \"endDate\": \"\"\n    }\n  ],\n  \"certifications\": [\n    {\n      \"name\": \"\",\n      \"issuer\": \"\",\n      \"date\": \"\",\n      \"expiryDate\": \"\",\n      \"credentialId\": \"\",\n      \"url\": \"\"\n    }\n  ],\n  \"languages\": []\n}\n\nResume text:\n${extractedText}\n\nPlease extract and structure the information accurately. If some information is not available, use empty strings or arrays.\n`;\n\n    try {\n      const result = await this.openAIClient.chat.completions.create({\n        model: deploymentName,\n        messages: [\n          {\n            role: 'system',\n            content: 'You are an expert resume parser. Extract structured data from resume text and return valid JSON only.'\n          },\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        temperature: 0.1,\n        max_tokens: 2000\n      });\n\n      const response = result.choices[0]?.message?.content;\n      if (!response) {\n        throw new Error('No response from OpenAI');\n      }\n\n      // Parse the JSON response\n      const structuredData = JSON.parse(response);\n      return structuredData as ExtractedResumeData;\n    } catch (error) {\n      console.error('Failed to structure resume data with OpenAI:', error);\n      logServerError(error as Error, { service: 'azure-ai', action: 'structure-resume' });\n      throw error;\n    }\n  }\n\n  /**\n   * Generate interview questions based on resume data and job details\n   */\n  async generateInterviewQuestions(\n    resumeData: ExtractedResumeData,\n    options: InterviewQuestionGenerationOptions = {}\n  ): Promise<string[]> {\n    await this.initialize();\n\n    if (!this.openAIClient) {\n      throw new Error('Azure OpenAI not configured');\n    }\n\n    try {\n      console.log('ü§ñ Generating interview questions with Azure OpenAI...');\n\n      const deploymentName = process.env.AZURE_OPENAI_DEPLOYMENT_NAME || 'gpt-4';\n      const maxQuestions = options.maxQuestions || 10;\n      const difficulty = options.difficulty || 'mixed';\n\n      const resumeContext = this.buildResumeContext(resumeData);\n      const jobContext = options.jobTitle || options.company || options.jobDescription \n        ? `Job: ${options.jobTitle} at ${options.company}\\nDescription: ${options.jobDescription}` \n        : '';\n\n      const prompt = `\nBased on the following resume and job information, generate ${maxQuestions} interview questions with ${difficulty} difficulty level.\n\n${resumeContext}\n\n${jobContext}\n\nGenerate questions that:\n1. Test technical skills mentioned in the resume\n2. Explore experience and achievements\n3. Assess problem-solving abilities\n4. Evaluate cultural fit and motivation\n5. Are relevant to the job role (if provided)\n\nReturn only a JSON array of questions as strings, no additional text.\nExample format: [\"Question 1\", \"Question 2\", ...]\n`;\n\n      const result = await this.openAIClient.chat.completions.create({\n        model: deploymentName,\n        messages: [\n          {\n            role: 'system',\n            content: 'You are an expert interviewer. Generate relevant, challenging interview questions based on resume data and job requirements. Return only valid JSON array.'\n          },\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        temperature: 0.7,\n        max_tokens: 1500\n      });\n\n      const response = result.choices[0]?.message?.content;\n      if (!response) {\n        throw new Error('No response from OpenAI');\n      }\n\n      const questions = JSON.parse(response);\n      console.log(`‚úÖ Generated ${questions.length} interview questions`);\n      return questions;\n    } catch (error) {\n      console.error('‚ùå Failed to generate interview questions:', error);\n      logServerError(error as Error, { service: 'azure-ai', action: 'generate-questions' });\n      throw error;\n    }\n  }\n\n  /**\n   * Generate interview feedback based on questions and answers\n   */\n  async generateInterviewFeedback(\n    questions: string[],\n    answers: string[],\n    options: FeedbackGenerationOptions = {}\n  ): Promise<GeneratedFeedback> {\n    await this.initialize();\n\n    if (!this.openAIClient) {\n      throw new Error('Azure OpenAI not configured');\n    }\n\n    try {\n      console.log('üìä Generating interview feedback with Azure OpenAI...');\n\n      const deploymentName = process.env.AZURE_OPENAI_DEPLOYMENT_NAME || 'gpt-4';\n\n      // Combine questions and answers\n      const qaContent = questions.map((q, i) => `Q: ${q}\\nA: ${answers[i] || 'No answer provided'}`).join('\\n\\n');\n\n      const jobContext = options.jobTitle || options.company || options.interviewType\n        ? `Job Context: ${options.jobTitle} at ${options.company} (${options.interviewType})`\n        : '';\n\n      const prompt = `\nAnalyze the following interview questions and answers, then provide comprehensive feedback.\n\n${jobContext}\n\nInterview Content:\n${qaContent}\n\nPlease provide feedback in the following JSON format:\n{\n  \"overallScore\": 0-100,\n  \"strengths\": [\"strength1\", \"strength2\", ...],\n  \"improvements\": [\"improvement1\", \"improvement2\", ...],\n  \"detailedFeedback\": \"Detailed paragraph feedback\",\n  \"categoryScores\": {\n    \"technical\": 0-100,\n    \"communication\": 0-100,\n    \"problemSolving\": 0-100,\n    \"experience\": 0-100\n  }\n}\n\nEvaluate based on:\n- Technical knowledge and accuracy\n- Communication clarity and structure\n- Problem-solving approach\n- Relevant experience demonstration\n- Overall interview performance\n\nProvide constructive, actionable feedback.\n`;\n\n      const result = await this.openAIClient.chat.completions.create({\n        model: deploymentName,\n        messages: [\n          {\n            role: 'system',\n            content: 'You are an expert interview evaluator. Provide comprehensive, constructive feedback on interview performance. Return only valid JSON.'\n          },\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        temperature: 0.3,\n        max_tokens: 2000\n      });\n\n      const response = result.choices[0]?.message?.content;\n      if (!response) {\n        throw new Error('No response from OpenAI');\n      }\n\n      const feedback = JSON.parse(response);\n      console.log('‚úÖ Generated interview feedback successfully');\n      return feedback as GeneratedFeedback;\n    } catch (error) {\n      console.error('‚ùå Failed to generate interview feedback:', error);\n      logServerError(error as Error, { service: 'azure-ai', action: 'generate-feedback' });\n      throw error;\n    }\n  }\n\n  /**\n   * Generate cover letter based on resume and job description\n   */\n  async generateCoverLetter(\n    resumeData: ExtractedResumeData,\n    jobTitle: string,\n    company: string,\n    jobDescription?: string\n  ): Promise<string> {\n    await this.initialize();\n\n    if (!this.openAIClient) {\n      throw new Error('Azure OpenAI not configured');\n    }\n\n    try {\n      console.log('üìù Generating cover letter with Azure OpenAI...');\n\n      const deploymentName = process.env.AZURE_OPENAI_DEPLOYMENT_NAME || 'gpt-4';\n      const resumeContext = this.buildResumeContext(resumeData);\n\n      const prompt = `\nWrite a professional cover letter for the following job application:\n\nPosition: ${jobTitle}\nCompany: ${company}\nJob Description: ${jobDescription || 'Not provided'}\n\nCandidate Information:\n${resumeContext}\n\nWrite a compelling cover letter that:\n1. Opens with enthusiasm for the specific role and company\n2. Highlights relevant experience and achievements from the resume\n3. Demonstrates knowledge of the company/role\n4. Shows how the candidate's skills match the job requirements\n5. Closes with a strong call to action\n\nKeep it professional, concise (3-4 paragraphs), and personalized.\nReturn only the cover letter text, no additional formatting or explanations.\n`;\n\n      const result = await this.openAIClient.chat.completions.create({\n        model: deploymentName,\n        messages: [\n          {\n            role: 'system',\n            content: 'You are an expert career coach and professional writer. Write compelling, personalized cover letters that help candidates stand out.'\n          },\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        temperature: 0.6,\n        max_tokens: 1500\n      });\n\n      const response = result.choices[0]?.message?.content;\n      if (!response) {\n        throw new Error('No response from OpenAI');\n      }\n\n      console.log('‚úÖ Generated cover letter successfully');\n      return response;\n    } catch (error) {\n      console.error('‚ùå Failed to generate cover letter:', error);\n      logServerError(error as Error, { service: 'azure-ai', action: 'generate-cover-letter' });\n      throw error;\n    }\n  }\n\n  /**\n   * Build resume context string for prompts\n   */\n  private buildResumeContext(resumeData: ExtractedResumeData): string {\n    const parts: string[] = [];\n\n    // Personal info\n    if (resumeData.personalInfo.name) {\n      parts.push(`Name: ${resumeData.personalInfo.name}`);\n    }\n\n    // Summary\n    if (resumeData.summary) {\n      parts.push(`Summary: ${resumeData.summary}`);\n    }\n\n    // Skills\n    if (resumeData.skills.length > 0) {\n      parts.push(`Skills: ${resumeData.skills.join(', ')}`);\n    }\n\n    // Experience\n    if (resumeData.experience.length > 0) {\n      const expText = resumeData.experience.map(exp => \n        `${exp.position} at ${exp.company} (${exp.startDate} - ${exp.endDate || 'Present'}): ${exp.description}`\n      ).join('\\n');\n      parts.push(`Experience:\\n${expText}`);\n    }\n\n    // Education\n    if (resumeData.education.length > 0) {\n      const eduText = resumeData.education.map(edu => \n        `${edu.degree} in ${edu.field} from ${edu.institution}`\n      ).join('\\n');\n      parts.push(`Education:\\n${eduText}`);\n    }\n\n    // Projects\n    if (resumeData.projects.length > 0) {\n      const projText = resumeData.projects.map(proj => \n        `${proj.name}: ${proj.description}`\n      ).join('\\n');\n      parts.push(`Projects:\\n${projText}`);\n    }\n\n    return parts.join('\\n\\n');\n  }\n\n  /**\n   * Health check for Azure AI services\n   */\n  async healthCheck(): Promise<{ status: 'healthy' | 'unhealthy'; timestamp: Date; details: any }> {\n    try {\n      await this.initialize();\n      \n      const status = {\n        openAI: !!this.openAIClient,\n        formRecognizer: !!this.formRecognizerClient,\n        initialized: this.initialized\n      };\n\n      // Try a simple OpenAI call if available\n      if (this.openAIClient) {\n        try {\n          const deploymentName = process.env.AZURE_OPENAI_DEPLOYMENT_NAME || 'gpt-4';\n          await this.openAIClient.chat.completions.create({\n            model: deploymentName,\n            messages: [\n              { role: 'user', content: 'Hello' }\n            ],\n            max_tokens: 5\n          });\n          status.openAI = true;\n        } catch (error) {\n          status.openAI = false;\n        }\n      }\n\n      const isHealthy = status.initialized && (status.openAI || status.formRecognizer);\n      \n      return { \n        status: isHealthy ? 'healthy' : 'unhealthy', \n        timestamp: new Date(),\n        details: status\n      };\n    } catch (error) {\n      console.error('Azure AI health check failed:', error);\n      return { \n        status: 'unhealthy', \n        timestamp: new Date(),\n        details: { error: error instanceof Error ? error.message : 'Unknown error' }\n      };\n    }\n  }\n}\n\n// Export singleton instance\nexport const azureAIService = new AzureAIService();\nexport default azureAIService;\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/services/azure-app-config-service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[615,618],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[615,618],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":384,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":384,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10976,10979],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10976,10979],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":396,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":396,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11356,11359],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11356,11359],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":453,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":453,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13052,13055],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13052,13055],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AppConfigurationClient } from '@azure/app-configuration';\nimport { DefaultAzureCredential } from '@azure/identity';\nimport { logServerError } from '@/lib/errors';\n\nexport interface FeatureFlag {\n  key: string;\n  enabled: boolean;\n  conditions?: {\n    userSegment?: string[];\n    percentage?: number;\n    timeWindow?: {\n      start: string;\n      end: string;\n    };\n  };\n}\n\nexport interface ConfigValue {\n  key: string;\n  value: string;\n  label?: string;\n  contentType?: string;\n}\n\nclass AzureAppConfigService {\n  private client: AppConfigurationClient | null = null;\n  private cache: Map<string, { value: any; timestamp: number; ttl: number }> = new Map();\n  private initialized = false;\n  private connectionString: string;\n  private defaultTTL = 5 * 60 * 1000; // 5 minutes cache TTL\n\n  constructor() {\n    this.connectionString = process.env.AZURE_APP_CONFIG_CONNECTION_STRING || '';\n  }\n\n  async initialize(): Promise<void> {\n    if (this.initialized) return;\n\n    try {\n      if (!this.connectionString) {\n        const endpoint = process.env.AZURE_APP_CONFIG_ENDPOINT;\n        if (endpoint) {\n          // Use managed identity\n          this.client = new AppConfigurationClient(endpoint, new DefaultAzureCredential());\n          console.log('‚úÖ Azure App Configuration initialized with managed identity');\n        } else {\n          console.warn('‚ö†Ô∏è Azure App Configuration not configured - no connection string or endpoint provided');\n          return;\n        }\n      } else {\n        // Use connection string\n        this.client = new AppConfigurationClient(this.connectionString);\n        console.log('‚úÖ Azure App Configuration initialized with connection string');\n      }\n\n      this.initialized = true;\n    } catch (error) {\n      console.error('‚ùå Failed to initialize Azure App Configuration:', error);\n      logServerError(error as Error, { service: 'azure-app-config', action: 'initialize' });\n      throw error;\n    }\n  }\n\n  /**\n   * Get a configuration value\n   */\n  async getConfigValue(key: string, label?: string, useCache: boolean = true): Promise<string | null> {\n    await this.initialize();\n\n    if (!this.client) {\n      console.warn('Azure App Configuration not available');\n      return null;\n    }\n\n    const cacheKey = `config_${key}_${label || 'default'}`;\n\n    // Check cache first\n    if (useCache && this.cache.has(cacheKey)) {\n      const cached = this.cache.get(cacheKey)!;\n      if (Date.now() - cached.timestamp < cached.ttl) {\n        return cached.value;\n      } else {\n        this.cache.delete(cacheKey);\n      }\n    }\n\n    try {\n      const setting = await this.client.getConfigurationSetting({ key, label });\n      const value = setting.value || null;\n\n      // Cache the result\n      if (useCache) {\n        this.cache.set(cacheKey, {\n          value,\n          timestamp: Date.now(),\n          ttl: this.defaultTTL\n        });\n      }\n\n      return value;\n    } catch (error) {\n      console.error(`Failed to get config value for key ${key}:`, error);\n      logServerError(error as Error, { \n        service: 'azure-app-config', \n        action: 'get-config' \n      }, { key, label });\n      return null;\n    }\n  }\n\n  /**\n   * Get a configuration value as a specific type\n   */\n  async getConfigValueAs<T>(\n    key: string, \n    defaultValue: T, \n    parser?: (value: string) => T,\n    label?: string\n  ): Promise<T> {\n    const value = await this.getConfigValue(key, label);\n    \n    if (value === null) {\n      return defaultValue;\n    }\n\n    try {\n      if (parser) {\n        return parser(value);\n      }\n\n      // Auto-detect type based on default value\n      if (typeof defaultValue === 'boolean') {\n        return (value.toLowerCase() === 'true' || value === '1') as unknown as T;\n      } else if (typeof defaultValue === 'number') {\n        const numValue = parseFloat(value);\n        return (isNaN(numValue) ? defaultValue : numValue) as unknown as T;\n      } else if (typeof defaultValue === 'object') {\n        return JSON.parse(value) as T;\n      }\n\n      return value as unknown as T;\n    } catch (error) {\n      console.error(`Failed to parse config value for key ${key}:`, error);\n      return defaultValue;\n    }\n  }\n\n  /**\n   * Get multiple configuration values\n   */\n  async getMultipleConfigValues(keys: string[], label?: string): Promise<Record<string, string | null>> {\n    await this.initialize();\n\n    if (!this.client) {\n      console.warn('Azure App Configuration not available');\n      return keys.reduce((acc, key) => ({ ...acc, [key]: null }), {});\n    }\n\n    try {\n      const results: Record<string, string | null> = {};\n      \n      // Get all values in parallel\n      const promises = keys.map(async (key) => {\n        const value = await this.getConfigValue(key, label);\n        results[key] = value;\n      });\n\n      await Promise.all(promises);\n      return results;\n    } catch (error) {\n      console.error('Failed to get multiple config values:', error);\n      logServerError(error as Error, { \n        service: 'azure-app-config', \n        action: 'get-multiple-config' \n      }, { keys, label });\n      return keys.reduce((acc, key) => ({ ...acc, [key]: null }), {});\n    }\n  }\n\n  /**\n   * Check if a feature flag is enabled\n   */\n  async isFeatureEnabled(flagName: string, userId?: string, userSegment?: string): Promise<boolean> {\n    await this.initialize();\n\n    if (!this.client) {\n      console.warn('Azure App Configuration not available');\n      return false;\n    }\n\n    const cacheKey = `feature_${flagName}_${userId || 'anonymous'}_${userSegment || 'default'}`;\n\n    // Check cache first\n    if (this.cache.has(cacheKey)) {\n      const cached = this.cache.get(cacheKey)!;\n      if (Date.now() - cached.timestamp < cached.ttl) {\n        return cached.value;\n      } else {\n        this.cache.delete(cacheKey);\n      }\n    }\n\n    try {\n      // Get feature flag configuration\n      const featureFlagKey = `.appconfig.featureflag/${flagName}`;\n      const setting = await this.client.getConfigurationSetting({ key: featureFlagKey });\n\n      if (!setting.value) {\n        return false;\n      }\n\n      const flagConfig = JSON.parse(setting.value);\n      let enabled = flagConfig.enabled || false;\n\n      // Apply conditions if they exist\n      if (enabled && flagConfig.conditions) {\n        // Check user segment condition\n        if (flagConfig.conditions.client_filters) {\n          for (const filter of flagConfig.conditions.client_filters) {\n            if (filter.name === 'Microsoft.Targeting') {\n              const params = filter.parameters;\n              \n              // Check user segment\n              if (userSegment && params.Audience?.Groups) {\n                enabled = params.Audience.Groups.includes(userSegment);\n              }\n              \n              // Check percentage rollout\n              if (params.Audience?.DefaultRolloutPercentage !== undefined) {\n                const percentage = params.Audience.DefaultRolloutPercentage;\n                const hash = this.hashUserId(userId || 'anonymous');\n                enabled = (hash % 100) < percentage;\n              }\n            }\n          }\n        }\n      }\n\n      // Cache the result\n      this.cache.set(cacheKey, {\n        value: enabled,\n        timestamp: Date.now(),\n        ttl: this.defaultTTL\n      });\n\n      return enabled;\n    } catch (error) {\n      console.error(`Failed to check feature flag ${flagName}:`, error);\n      logServerError(error as Error, { \n        service: 'azure-app-config', \n        action: 'check-feature' \n      }, { flagName, userId, userSegment });\n      return false;\n    }\n  }\n\n  /**\n   * Get all configuration values with a specific label prefix\n   */\n  async getConfigsByPrefix(keyPrefix: string, label?: string): Promise<Record<string, string>> {\n    await this.initialize();\n\n    if (!this.client) {\n      console.warn('Azure App Configuration not available');\n      return {};\n    }\n\n    try {\n      const configs: Record<string, string> = {};\n      \n      // List all configuration settings with the prefix\n      const settingsIterable = this.client.listConfigurationSettings({\n        keyFilter: `${keyPrefix}*`,\n        labelFilter: label\n      });\n\n      for await (const setting of settingsIterable) {\n        if (setting.key && setting.value !== undefined) {\n          configs[setting.key] = setting.value;\n        }\n      }\n\n      return configs;\n    } catch (error) {\n      console.error(`Failed to get configs with prefix ${keyPrefix}:`, error);\n      logServerError(error as Error, { \n        service: 'azure-app-config', \n        action: 'get-by-prefix' \n      }, { keyPrefix, label });\n      return {};\n    }\n  }\n\n  /**\n   * Set a configuration value (for admin operations)\n   */\n  async setConfigValue(key: string, value: string, label?: string, contentType?: string): Promise<void> {\n    await this.initialize();\n\n    if (!this.client) {\n      throw new Error('Azure App Configuration not available');\n    }\n\n    try {\n      await this.client.setConfigurationSetting({\n        key,\n        value,\n        label,\n        contentType\n      });\n\n      // Invalidate cache\n      const cacheKey = `config_${key}_${label || 'default'}`;\n      this.cache.delete(cacheKey);\n\n      console.log(`‚úÖ Set config value for key: ${key}`);\n    } catch (error) {\n      console.error(`Failed to set config value for key ${key}:`, error);\n      logServerError(error as Error, { \n        service: 'azure-app-config', \n        action: 'set-config' \n      }, { key, label });\n      throw error;\n    }\n  }\n\n  /**\n   * Delete a configuration value\n   */\n  async deleteConfigValue(key: string, label?: string): Promise<void> {\n    await this.initialize();\n\n    if (!this.client) {\n      throw new Error('Azure App Configuration not available');\n    }\n\n    try {\n      await this.client.deleteConfigurationSetting({ key, label });\n\n      // Invalidate cache\n      const cacheKey = `config_${key}_${label || 'default'}`;\n      this.cache.delete(cacheKey);\n\n      console.log(`‚úÖ Deleted config value for key: ${key}`);\n    } catch (error) {\n      console.error(`Failed to delete config value for key ${key}:`, error);\n      logServerError(error as Error, { \n        service: 'azure-app-config', \n        action: 'delete-config' \n      }, { key, label });\n      throw error;\n    }\n  }\n\n  /**\n   * Get common feature flags for the application\n   */\n  async getFeatureFlags(): Promise<Record<string, boolean>> {\n    const commonFlags = [\n      'enableAutoApply',\n      'enableVoiceInterview',\n      'enablePremiumFeatures',\n      'enableAnalytics',\n      'maintenanceMode',\n      'enableNewUI',\n      'enableAIFeedback',\n      'enableResumeAnalysis'\n    ];\n\n    const flags: Record<string, boolean> = {};\n    \n    await Promise.all(\n      commonFlags.map(async (flag) => {\n        flags[flag] = await this.isFeatureEnabled(flag);\n      })\n    );\n\n    return flags;\n  }\n\n  /**\n   * Get application configuration\n   */\n  async getAppConfig(): Promise<Record<string, any>> {\n    const configKeys = {\n      maxFileSize: '10485760', // 10MB default\n      allowedFileTypes: 'pdf,doc,docx,txt',\n      sessionTimeout: '3600', // 1 hour\n      rateLimitPerHour: '100',\n      supportEmail: 'support@prepbettr.com',\n      apiBaseUrl: 'https://api.prepbettr.com',\n      enableLogging: 'true',\n      logLevel: 'info'\n    };\n\n    const config: Record<string, any> = {};\n\n    await Promise.all(\n      Object.entries(configKeys).map(async ([key, defaultValue]) => {\n        const value = await this.getConfigValue(key);\n        \n        // Parse values appropriately\n        if (key.includes('Size') || key.includes('Timeout') || key.includes('Limit')) {\n          config[key] = value ? parseInt(value, 10) : parseInt(defaultValue, 10);\n        } else if (key.includes('enable') || key.includes('Enable')) {\n          config[key] = value ? value.toLowerCase() === 'true' : defaultValue.toLowerCase() === 'true';\n        } else if (key === 'allowedFileTypes') {\n          config[key] = value ? value.split(',') : defaultValue.split(',');\n        } else {\n          config[key] = value || defaultValue;\n        }\n      })\n    );\n\n    return config;\n  }\n\n  /**\n   * Clear the cache\n   */\n  clearCache(): void {\n    this.cache.clear();\n    console.log('‚úÖ Azure App Configuration cache cleared');\n  }\n\n  /**\n   * Hash user ID for percentage-based feature flags\n   */\n  private hashUserId(userId: string): number {\n    let hash = 0;\n    for (let i = 0; i < userId.length; i++) {\n      const char = userId.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return Math.abs(hash);\n  }\n\n  /**\n   * Health check\n   */\n  async healthCheck(): Promise<{ status: 'healthy' | 'unhealthy'; timestamp: Date }> {\n    try {\n      await this.initialize();\n\n      if (!this.client) {\n        return { status: 'unhealthy', timestamp: new Date() };\n      }\n\n      // Try to read a test configuration\n      try {\n        await this.client.getConfigurationSetting({ key: 'healthCheck' });\n      } catch (error: any) {\n        // It's OK if the key doesn't exist, we just want to test connectivity\n        if (error.statusCode !== 404) {\n          throw error;\n        }\n      }\n\n      return { status: 'healthy', timestamp: new Date() };\n    } catch (error) {\n      console.error('Azure App Configuration health check failed:', error);\n      return { status: 'unhealthy', timestamp: new Date() };\n    }\n  }\n}\n\n// Export singleton instance\nexport const azureAppConfigService = new AzureAppConfigService();\nexport default azureAppConfigService;\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/services/azure-app-config.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[846,849],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[846,849],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'featureFlagError' is defined but never used.","line":124,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":124,"endColumn":34}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Azure App Configuration Service\n * \n * Replaces Firebase Remote Config with Azure App Configuration for feature flags\n * and configuration management.\n */\n\nimport { AppConfigurationClient } from '@azure/app-configuration';\nimport { DefaultAzureCredential } from '@azure/identity';\nimport { fetchAzureSecrets } from '@/lib/azure-config-browser';\n\nexport interface FeatureFlags {\n  autoApplyAzure: boolean;\n  portalIntegration: boolean;\n}\n\ninterface ConfigValue {\n  key: string;\n  value: string;\n  isFeatureFlag: boolean;\n  enabled?: boolean;\n  label?: string;\n}\n\nclass AzureAppConfigService {\n  private client: AppConfigurationClient | null = null;\n  private isInitialized = false;\n  private cache: FeatureFlags | null = null;\n  private cacheTimestamp = 0;\n  private readonly CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n  private secrets: any = null;\n\n  /**\n   * Initialize the Azure App Configuration client\n   */\n  private async initialize(): Promise<void> {\n    if (this.isInitialized && this.client) return;\n\n    try {\n      // Fetch Azure secrets\n      this.secrets = await fetchAzureSecrets();\n      \n      if (!this.secrets.azureAppConfigConnectionString && !this.secrets.azureAppConfigEndpoint) {\n        throw new Error('Azure App Configuration connection string or endpoint not found');\n      }\n\n      // Initialize client with connection string (preferred) or endpoint + credentials\n      if (this.secrets.azureAppConfigConnectionString) {\n        this.client = new AppConfigurationClient(this.secrets.azureAppConfigConnectionString);\n      } else if (this.secrets.azureAppConfigEndpoint) {\n        const credential = new DefaultAzureCredential();\n        this.client = new AppConfigurationClient(this.secrets.azureAppConfigEndpoint, credential);\n      } else {\n        throw new Error('No valid Azure App Configuration credentials found');\n      }\n\n      this.isInitialized = true;\n      console.log('‚úÖ Azure App Configuration service initialized');\n    } catch (error) {\n      console.error('‚ùå Failed to initialize Azure App Configuration:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Check if cache is still valid\n   */\n  private isCacheValid(): boolean {\n    return this.cache !== null && (Date.now() - this.cacheTimestamp) < this.CACHE_DURATION;\n  }\n\n  /**\n   * Parse feature flag value from Azure App Configuration\n   */\n  private parseFeatureFlagValue(value: string, enabled?: boolean): boolean {\n    if (enabled !== undefined) {\n      return enabled;\n    }\n    \n    // Try to parse as boolean\n    const lowerValue = value.toLowerCase();\n    return lowerValue === 'true' || lowerValue === '1' || lowerValue === 'enabled';\n  }\n\n  /**\n   * Fetch feature flags from Azure App Configuration\n   */\n  async fetchFeatureFlags(): Promise<FeatureFlags> {\n    // Return cached values if still valid\n    if (this.isCacheValid()) {\n      return this.cache!;\n    }\n\n    try {\n      await this.initialize();\n\n      if (!this.client) {\n        throw new Error('Azure App Configuration client not initialized');\n      }\n\n      const flags: FeatureFlags = {\n        autoApplyAzure: false,\n        portalIntegration: false,\n      };\n\n      // Define feature flag keys with their Azure App Config counterparts\n      const flagKeys = [\n        { local: 'autoApplyAzure', azure: '.appconfig.featureflag/autoApplyAzure' },\n        { local: 'portalIntegration', azure: '.appconfig.featureflag/portalIntegration' }\n      ];\n\n      // Fetch feature flags\n      for (const flagKey of flagKeys) {\n        try {\n          // Try to get as feature flag first\n          const configSetting = await this.client.getConfigurationSetting({\n            key: flagKey.azure\n          });\n\n          if (configSetting && configSetting.value) {\n            const featureFlagData = JSON.parse(configSetting.value);\n            flags[flagKey.local as keyof FeatureFlags] = featureFlagData.enabled === true;\n          }\n        } catch (featureFlagError) {\n          // Fallback: try to get as regular configuration setting\n          try {\n            const configSetting = await this.client.getConfigurationSetting({\n              key: flagKey.local\n            });\n\n            if (configSetting && configSetting.value !== undefined) {\n              flags[flagKey.local as keyof FeatureFlags] = this.parseFeatureFlagValue(configSetting.value);\n            }\n          } catch (regularError) {\n            console.warn(`Failed to fetch flag ${flagKey.local}, using default value:`, regularError);\n            // Keep default value (false)\n          }\n        }\n      }\n\n      // Update cache\n      this.cache = flags;\n      this.cacheTimestamp = Date.now();\n\n      console.log('üìä Feature flags fetched from Azure App Configuration:', flags);\n      return flags;\n\n    } catch (error) {\n      console.error('‚ùå Error fetching feature flags from Azure App Configuration:', error);\n\n      // Return cached values if available, otherwise default values\n      const defaultFlags: FeatureFlags = {\n        autoApplyAzure: false,\n        portalIntegration: false,\n      };\n\n      if (!this.cache) {\n        this.cache = defaultFlags;\n        this.cacheTimestamp = Date.now();\n      }\n\n      return this.cache;\n    }\n  }\n\n  /**\n   * Get a specific feature flag value\n   */\n  async getFeatureFlag(flagName: keyof FeatureFlags): Promise<boolean> {\n    const flags = await this.fetchFeatureFlags();\n    return flags[flagName];\n  }\n\n  /**\n   * Get all feature flags\n   */\n  async getAllFeatureFlags(): Promise<FeatureFlags> {\n    return this.fetchFeatureFlags();\n  }\n\n  /**\n   * Force refresh feature flags (ignoring cache)\n   */\n  async refreshFeatureFlags(): Promise<FeatureFlags> {\n    this.cache = null;\n    this.cacheTimestamp = 0;\n    return this.fetchFeatureFlags();\n  }\n\n  /**\n   * Get cached flags without making network request\n   */\n  getCachedFlags(): FeatureFlags | null {\n    return this.isCacheValid() ? this.cache : null;\n  }\n\n  /**\n   * Set a feature flag value (for testing or admin purposes)\n   */\n  async setFeatureFlag(flagName: keyof FeatureFlags, value: boolean, label?: string): Promise<void> {\n    try {\n      await this.initialize();\n\n      if (!this.client) {\n        throw new Error('Azure App Configuration client not initialized');\n      }\n\n      // Create feature flag format for Azure App Configuration\n      const featureFlagValue = {\n        id: flagName,\n        description: `Feature flag for ${flagName}`,\n        enabled: value,\n        conditions: {\n          client_filters: []\n        }\n      };\n\n      await this.client.setConfigurationSetting({\n        key: `.appconfig.featureflag/${flagName}`,\n        value: JSON.stringify(featureFlagValue),\n        contentType: 'application/vnd.microsoft.appconfig.ff+json;charset=utf-8',\n        label: label\n      });\n\n      // Invalidate cache\n      this.cache = null;\n      this.cacheTimestamp = 0;\n\n      console.log(`‚úÖ Feature flag ${flagName} set to ${value}`);\n    } catch (error) {\n      console.error(`‚ùå Failed to set feature flag ${flagName}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get configuration value (non-feature flag)\n   */\n  async getConfigValue(key: string, label?: string): Promise<string | undefined> {\n    try {\n      await this.initialize();\n\n      if (!this.client) {\n        throw new Error('Azure App Configuration client not initialized');\n      }\n\n      const configSetting = await this.client.getConfigurationSetting({\n        key,\n        label\n      });\n\n      return configSetting?.value;\n    } catch (error) {\n      console.error(`‚ùå Failed to get config value ${key}:`, error);\n      return undefined;\n    }\n  }\n\n  /**\n   * Set configuration value (non-feature flag)\n   */\n  async setConfigValue(key: string, value: string, label?: string): Promise<void> {\n    try {\n      await this.initialize();\n\n      if (!this.client) {\n        throw new Error('Azure App Configuration client not initialized');\n      }\n\n      await this.client.setConfigurationSetting({\n        key,\n        value,\n        label\n      });\n\n      console.log(`‚úÖ Config value ${key} set successfully`);\n    } catch (error) {\n      console.error(`‚ùå Failed to set config value ${key}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * List all configuration settings\n   */\n  async listAllSettings(keyFilter?: string, labelFilter?: string): Promise<Array<{key: string, value: string, label?: string}>> {\n    try {\n      await this.initialize();\n\n      if (!this.client) {\n        throw new Error('Azure App Configuration client not initialized');\n      }\n\n      const settings: Array<{key: string, value: string, label?: string}> = [];\n      \n      for await (const configSetting of this.client.listConfigurationSettings({\n        keyFilter,\n        labelFilter\n      })) {\n        if (configSetting.key && configSetting.value !== undefined) {\n          settings.push({\n            key: configSetting.key,\n            value: configSetting.value,\n            label: configSetting.label\n          });\n        }\n      }\n\n      return settings;\n    } catch (error) {\n      console.error('‚ùå Failed to list configuration settings:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Check if the service is ready\n   */\n  isReady(): boolean {\n    return this.isInitialized && this.client !== null;\n  }\n\n  /**\n   * Get service health status\n   */\n  async getHealthStatus(): Promise<{\n    healthy: boolean;\n    initialized: boolean;\n    lastFetch: number | null;\n    cacheValid: boolean;\n    error?: string;\n  }> {\n    try {\n      if (!this.isInitialized) {\n        await this.initialize();\n      }\n\n      // Test connection by fetching a simple config\n      await this.client?.getConfigurationSetting({ key: 'health-check' }).catch(() => {\n        // Ignore error for health check key that might not exist\n      });\n\n      return {\n        healthy: true,\n        initialized: this.isInitialized,\n        lastFetch: this.cacheTimestamp || null,\n        cacheValid: this.isCacheValid()\n      };\n    } catch (error) {\n      return {\n        healthy: false,\n        initialized: this.isInitialized,\n        lastFetch: this.cacheTimestamp || null,\n        cacheValid: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n}\n\n// Export singleton instance\nexport const azureAppConfigService = new AzureAppConfigService();\n\n// Export hook for React components (maintains compatibility)\nexport const useFeatureFlags = () => {\n  return {\n    getFeatureFlag: (flagName: keyof FeatureFlags) => azureAppConfigService.getFeatureFlag(flagName),\n    getAllFeatureFlags: () => azureAppConfigService.getAllFeatureFlags(),\n    refreshFeatureFlags: () => azureAppConfigService.refreshFeatureFlags(),\n    getCachedFlags: () => azureAppConfigService.getCachedFlags(),\n  };\n};\n\n// Export types\nexport type { ConfigValue };\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/services/azure-blob-storage.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":239,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":239,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7292,7295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7292,7295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'blobUrl' is assigned a value but never used.","line":295,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":295,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'containerName' is assigned a value but never used.","line":542,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":542,"endColumn":47}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { BlobServiceClient, BlobSASPermissions, generateBlobSASQueryParameters, StorageSharedKeyCredential, BlobSASSignatureValues, SASProtocol } from '@azure/storage-blob';\nimport { fetchAzureSecrets } from '@/azure/lib/azure-config';\nimport { logServerError } from '@/lib/errors';\n\ninterface AzureBlobConfig {\n  accountName: string;\n  accountKey: string;\n  containerName: string;\n}\n\ninterface UploadResult {\n  blobUrl: string;\n  blobName: string;\n  sasUrl?: string;\n}\n\ninterface SASTokenResult {\n  sasUrl: string;\n  expiresOn: Date;\n}\n\nclass AzureBlobStorageService {\n  private blobServiceClient: BlobServiceClient | null = null;\n  private config: AzureBlobConfig | null = null;\n  \n  // Container configurations\n  private readonly containers = {\n    resumes: 'user-resumes',\n    profilePictures: 'profile-pictures', \n    documents: 'user-documents'\n  };\n\n  /**\n   * Initialize the Azure Blob Storage service\n   */\n  async initialize(): Promise<boolean> {\n    try {\n      // Get Azure configuration from Key Vault or environment\n      const secrets = await fetchAzureSecrets();\n      \n      this.config = {\n        accountName: process.env.AZURE_STORAGE_ACCOUNT_NAME || secrets.azureStorageAccountName || '',\n        accountKey: process.env.AZURE_STORAGE_ACCOUNT_KEY || secrets.azureStorageAccountKey || '',\n        containerName: 'legacy' // Keeping for compatibility, but we use containers object now\n      };\n\n      if (!this.config.accountName || !this.config.accountKey) {\n        console.warn('‚ö†Ô∏è Azure Blob Storage credentials not found, falling back to Firebase');\n        return false;\n      }\n\n      // Create blob service client\n      const sharedKeyCredential = new StorageSharedKeyCredential(\n        this.config.accountName, \n        this.config.accountKey\n      );\n\n      this.blobServiceClient = new BlobServiceClient(\n        `https://${this.config.accountName}.blob.core.windows.net`,\n        sharedKeyCredential\n      );\n\n      // Ensure container exists\n      await this.ensureContainer();\n\n      console.log('‚úÖ Azure Blob Storage service initialized');\n      return true;\n    } catch (error) {\n      console.error('‚ùå Failed to initialize Azure Blob Storage:', error);\n      logServerError(error as Error, { service: 'azure-blob-storage', action: 'initialize' });\n      return false;\n    }\n  }\n\n  /**\n   * Ensure all containers exist\n   */\n  private async ensureContainer(): Promise<void> {\n    if (!this.blobServiceClient || !this.config) {\n      throw new Error('Azure Blob Storage service not initialized');\n    }\n\n    try {\n      // Ensure all containers exist\n      for (const containerName of Object.values(this.containers)) {\n        const containerClient = this.blobServiceClient.getContainerClient(containerName);\n        await containerClient.createIfNotExists({\n          access: 'container' // Allow container-level access\n        });\n      }\n    } catch (error) {\n      console.error('Failed to ensure containers exist:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Check if service is ready\n   */\n  isReady(): boolean {\n    return this.blobServiceClient !== null && this.config !== null;\n  }\n\n  /**\n   * Upload resume file to Azure Blob Storage\n   */\n  async uploadResume(\n    userId: string,\n    fileBuffer: Buffer,\n    fileName: string,\n    mimeType: string\n  ): Promise<UploadResult> {\n    if (!this.isReady()) {\n      throw new Error('Azure Blob Storage service not initialized');\n    }\n\n    try {\n      const blobName = `${userId}/${Date.now()}-${fileName}`;\n      const containerName = this.containers.resumes;\n      const containerClient = this.blobServiceClient!.getContainerClient(containerName);\n      const blockBlobClient = containerClient.getBlockBlobClient(blobName);\n\n      // Upload the file with metadata\n      await blockBlobClient.uploadData(fileBuffer, {\n        blobHTTPHeaders: {\n          blobContentType: mimeType\n        },\n        metadata: {\n          userId,\n          originalFileName: fileName,\n          uploadDate: new Date().toISOString(),\n          mimeType\n        }\n      });\n\n      const blobUrl = blockBlobClient.url;\n      \n      // Generate SAS URL for temporary access\n      const sasUrl = await this.generateSASUrlForContainer(containerName, blobName, 24);\n\n      console.log(`‚úÖ Resume uploaded to Azure Blob Storage: ${blobName}`);\n      \n      return {\n        blobUrl,\n        blobName,\n        sasUrl: sasUrl.sasUrl\n      };\n    } catch (error) {\n      console.error('Failed to upload resume to Azure Blob Storage:', error);\n      logServerError(error as Error, { \n        service: 'azure-blob-storage', \n        action: 'upload', \n        userId\n      }, {\n        fileName: fileName.substring(0, 50) // Truncate for privacy\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Generate SAS URL for temporary access to blob\n   */\n  async generateSASUrl(blobName: string, expiryHours: number = 1): Promise<SASTokenResult> {\n    if (!this.isReady() || !this.config) {\n      throw new Error('Azure Blob Storage service not initialized');\n    }\n\n    try {\n      const permissions = BlobSASPermissions.parse('r'); // Read-only permission\n      const expiresOn = new Date();\n      expiresOn.setHours(expiresOn.getHours() + expiryHours);\n\n      const sharedKeyCredential = new StorageSharedKeyCredential(\n        this.config.accountName,\n        this.config.accountKey\n      );\n\n      // This method is deprecated - use generateSASUrlForContainer instead\n      const containerName = this.containers.resumes; // Default to resumes container\n      const sasOptions: BlobSASSignatureValues = {\n        containerName,\n        blobName,\n        permissions,\n        expiresOn,\n        protocol: SASProtocol.Https\n      };\n\n      const sasToken = generateBlobSASQueryParameters(sasOptions, sharedKeyCredential);\n      const sasUrl = `https://${this.config.accountName}.blob.core.windows.net/${containerName}/${blobName}?${sasToken}`;\n\n      return {\n        sasUrl,\n        expiresOn\n      };\n    } catch (error) {\n      console.error('Failed to generate SAS URL:', error);\n      logServerError(error as Error, { \n        service: 'azure-blob-storage', \n        action: 'generate-sas'\n      }, {\n        blobName: blobName.substring(0, 50) \n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Delete resume from Azure Blob Storage\n   */\n  async deleteResume(blobName: string): Promise<void> {\n    if (!this.isReady()) {\n      console.warn('Azure Blob Storage service not initialized, skipping delete');\n      return;\n    }\n\n    try {\n      const containerName = this.containers.resumes;\n      const containerClient = this.blobServiceClient!.getContainerClient(containerName);\n      const blockBlobClient = containerClient.getBlockBlobClient(blobName);\n      \n      await blockBlobClient.deleteIfExists();\n      console.log(`‚úÖ Resume deleted from Azure Blob Storage: ${blobName}`);\n    } catch (error) {\n      console.error('Failed to delete resume from Azure Blob Storage:', error);\n      logServerError(error as Error, { \n        service: 'azure-blob-storage', \n        action: 'delete'\n      }, {\n        blobName: blobName.substring(0, 50) \n      });\n      // Don't throw - we don't want to block the operation if deletion fails\n    }\n  }\n\n  /**\n   * Get blob info\n   */\n  async getBlobInfo(blobName: string): Promise<any> {\n    if (!this.isReady()) {\n      throw new Error('Azure Blob Storage service not initialized');\n    }\n\n    try {\n      const containerName = this.containers.resumes; // Default to resumes container\n      const containerClient = this.blobServiceClient!.getContainerClient(containerName);\n      const blockBlobClient = containerClient.getBlockBlobClient(blobName);\n      \n      const properties = await blockBlobClient.getProperties();\n      return {\n        blobName,\n        contentLength: properties.contentLength,\n        contentType: properties.contentType,\n        lastModified: properties.lastModified,\n        metadata: properties.metadata\n      };\n    } catch (error) {\n      console.error('Failed to get blob info:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Upload profile picture to Azure Blob Storage\n   */\n  async uploadProfilePicture(\n    userId: string,\n    fileBuffer: Buffer,\n    fileName: string,\n    mimeType: string\n  ): Promise<UploadResult> {\n    if (!this.isReady()) {\n      throw new Error('Azure Blob Storage service not initialized');\n    }\n\n    try {\n      const blobName = `${userId}/${Date.now()}-${fileName}`;\n      const containerClient = this.blobServiceClient!.getContainerClient(this.containers.profilePictures);\n      const blockBlobClient = containerClient.getBlockBlobClient(blobName);\n\n      // Upload the file with metadata\n      await blockBlobClient.uploadData(fileBuffer, {\n        blobHTTPHeaders: {\n          blobContentType: mimeType\n        },\n        metadata: {\n          userId,\n          originalFileName: fileName,\n          uploadDate: new Date().toISOString(),\n          mimeType,\n          fileType: 'profile-picture'\n        }\n      });\n\n      const blobUrl = blockBlobClient.url;\n      \n      // Generate public URL (no SAS needed for profile pictures)\n      const publicUrl = `https://${this.config!.accountName}.blob.core.windows.net/${this.containers.profilePictures}/${blobName}`;\n\n      console.log(`‚úÖ Profile picture uploaded to Azure Blob Storage: ${blobName}`);\n      \n      return {\n        blobUrl: publicUrl,\n        blobName,\n      };\n    } catch (error) {\n      console.error('Failed to upload profile picture to Azure Blob Storage:', error);\n      logServerError(error as Error, { \n        service: 'azure-blob-storage', \n        action: 'upload-profile', \n        userId\n      }, {\n        fileName: fileName.substring(0, 50)\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Upload general file to Azure Blob Storage\n   */\n  async uploadFile(\n    containerType: keyof typeof this.containers,\n    userId: string,\n    fileBuffer: Buffer,\n    fileName: string,\n    mimeType: string,\n    metadata: Record<string, string> = {}\n  ): Promise<UploadResult> {\n    if (!this.isReady()) {\n      throw new Error('Azure Blob Storage service not initialized');\n    }\n\n    try {\n      const blobName = `${userId}/${Date.now()}-${fileName}`;\n      const containerName = this.containers[containerType];\n      const containerClient = this.blobServiceClient!.getContainerClient(containerName);\n      const blockBlobClient = containerClient.getBlockBlobClient(blobName);\n\n      // Upload the file with metadata\n      await blockBlobClient.uploadData(fileBuffer, {\n        blobHTTPHeaders: {\n          blobContentType: mimeType\n        },\n        metadata: {\n          userId,\n          originalFileName: fileName,\n          uploadDate: new Date().toISOString(),\n          mimeType,\n          containerType,\n          ...metadata\n        }\n      });\n\n      const blobUrl = blockBlobClient.url;\n      \n      // Generate SAS URL for secure access\n      const sasResult = await this.generateSASUrlForContainer(containerName, blobName, 24);\n\n      console.log(`‚úÖ File uploaded to Azure Blob Storage: ${blobName} in container ${containerName}`);\n      \n      return {\n        blobUrl,\n        blobName,\n        sasUrl: sasResult.sasUrl\n      };\n    } catch (error) {\n      console.error(`Failed to upload file to Azure Blob Storage container ${containerType}:`, error);\n      logServerError(error as Error, { \n        service: 'azure-blob-storage', \n        action: 'upload-file', \n        userId\n      }, {\n        fileName: fileName.substring(0, 50),\n        containerType\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Generate SAS URL for specific container and blob\n   */\n  private async generateSASUrlForContainer(\n    containerName: string,\n    blobName: string, \n    expiryHours: number = 1\n  ): Promise<SASTokenResult> {\n    if (!this.isReady() || !this.config) {\n      throw new Error('Azure Blob Storage service not initialized');\n    }\n\n    try {\n      const permissions = BlobSASPermissions.parse('r'); // Read-only permission\n      const expiresOn = new Date();\n      expiresOn.setHours(expiresOn.getHours() + expiryHours);\n\n      const sharedKeyCredential = new StorageSharedKeyCredential(\n        this.config.accountName,\n        this.config.accountKey\n      );\n\n      const sasOptions: BlobSASSignatureValues = {\n        containerName,\n        blobName,\n        permissions,\n        expiresOn,\n        protocol: SASProtocol.Https\n      };\n\n      const sasToken = generateBlobSASQueryParameters(sasOptions, sharedKeyCredential);\n      const sasUrl = `https://${this.config.accountName}.blob.core.windows.net/${containerName}/${blobName}?${sasToken}`;\n\n      return {\n        sasUrl,\n        expiresOn\n      };\n    } catch (error) {\n      console.error('Failed to generate SAS URL for container:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete file from specific container\n   */\n  async deleteFile(containerType: keyof typeof this.containers, blobName: string): Promise<void> {\n    if (!this.isReady()) {\n      console.warn('Azure Blob Storage service not initialized, skipping delete');\n      return;\n    }\n\n    try {\n      const containerName = this.containers[containerType];\n      const containerClient = this.blobServiceClient!.getContainerClient(containerName);\n      const blockBlobClient = containerClient.getBlockBlobClient(blobName);\n      \n      await blockBlobClient.deleteIfExists();\n      console.log(`‚úÖ File deleted from Azure Blob Storage: ${blobName} in container ${containerName}`);\n    } catch (error) {\n      console.error(`Failed to delete file from Azure Blob Storage container ${containerType}:`, error);\n      logServerError(error as Error, { \n        service: 'azure-blob-storage', \n        action: 'delete-file'\n      }, {\n        blobName: blobName.substring(0, 50),\n        containerType\n      });\n      // Don't throw - we don't want to block the operation if deletion fails\n    }\n  }\n\n  /**\n   * Delete all files for a user (GDPR compliance)\n   */\n  async deleteAllUserFiles(userId: string): Promise<string[]> {\n    if (!this.isReady()) {\n      console.warn('Azure Blob Storage service not initialized, skipping delete');\n      return [];\n    }\n\n    const deletedContainers: string[] = [];\n\n    try {\n      // Delete from all containers\n      for (const [containerType, containerName] of Object.entries(this.containers)) {\n        try {\n          const containerClient = this.blobServiceClient!.getContainerClient(containerName);\n          const blobsToDelete: string[] = [];\n          \n          // List all blobs for this user in this container\n          for await (const blob of containerClient.listBlobsFlat({ prefix: `${userId}/` })) {\n            blobsToDelete.push(blob.name);\n          }\n\n          // Delete all user blobs in this container\n          if (blobsToDelete.length > 0) {\n            const deletePromises = blobsToDelete.map(async (blobName) => {\n              const blockBlobClient = containerClient.getBlockBlobClient(blobName);\n              await blockBlobClient.deleteIfExists();\n            });\n            \n            await Promise.all(deletePromises);\n            deletedContainers.push(containerType);\n            console.log(`‚úÖ Deleted ${blobsToDelete.length} files for user ${userId} from container ${containerName}`);\n          }\n        } catch (error) {\n          console.error(`Failed to delete files from container ${containerName}:`, error);\n        }\n      }\n\n      return deletedContainers;\n    } catch (error) {\n      console.error('Failed to delete all user files from Azure Blob Storage:', error);\n      logServerError(error as Error, { \n        service: 'azure-blob-storage', \n        action: 'delete-all-user-files',\n        userId\n      });\n      return deletedContainers;\n    }\n  }\n\n  /**\n   * List blobs for a user in specific container\n   */\n  async listUserBlobs(\n    containerType: keyof typeof this.containers, \n    userId: string\n  ): Promise<string[]> {\n    if (!this.isReady()) {\n      throw new Error('Azure Blob Storage service not initialized');\n    }\n\n    try {\n      const containerName = this.containers[containerType];\n      const containerClient = this.blobServiceClient!.getContainerClient(containerName);\n      const blobNames: string[] = [];\n      \n      for await (const blob of containerClient.listBlobsFlat({ prefix: `${userId}/` })) {\n        blobNames.push(blob.name);\n      }\n\n      return blobNames;\n    } catch (error) {\n      console.error(`Failed to list user blobs in container ${containerType}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * List all blobs for a user across all containers\n   */\n  async listAllUserBlobs(userId: string): Promise<Record<string, string[]>> {\n    if (!this.isReady()) {\n      throw new Error('Azure Blob Storage service not initialized');\n    }\n\n    const result: Record<string, string[]> = {};\n\n    try {\n      for (const [containerType, containerName] of Object.entries(this.containers)) {\n        try {\n          const blobs = await this.listUserBlobs(containerType as keyof typeof this.containers, userId);\n          result[containerType] = blobs;\n        } catch (error) {\n          console.error(`Failed to list blobs in container ${containerType}:`, error);\n          result[containerType] = [];\n        }\n      }\n\n      return result;\n    } catch (error) {\n      console.error('Failed to list all user blobs:', error);\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nexport const azureBlobStorage = new AzureBlobStorageService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/services/azure-cosmos-service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DefaultAzureCredential' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1314,1317],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1314,1317],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1379,1382],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1379,1382],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1401,1404],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1401,1404],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":64,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1423,1426],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1423,1426],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1451,1454],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1451,1454],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":121,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2479,2482],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2479,2482],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":133,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2693,2696],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2693,2696],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":141,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2834,2837],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2834,2837],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":163,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3298,3301],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3298,3301],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":176,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":176,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3541,3544],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3541,3544],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":197,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":197,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3946,3949],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3946,3949],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":347,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":347,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8495,8498],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8495,8498],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":393,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":393,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9962,9965],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9962,9965],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":520,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":520,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14314,14317],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14314,14317],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":532,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":532,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14621,14624],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14621,14624],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":546,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":546,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15039,15042],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15039,15042],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":694,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":694,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19870,19873],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19870,19873],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":909,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":909,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27567,27570],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27567,27570],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":945,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":945,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[28608,28611],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[28608,28611],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":970,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":970,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29363,29366],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29363,29366],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":977,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":977,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29694,29697],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29694,29697],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":983,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":983,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29801,29804],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29801,29804],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1004,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1004,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30584,30587],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30584,30587],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":24,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CosmosClient, Database, Container } from '@azure/cosmos';\nimport { DefaultAzureCredential } from '@azure/identity';\nimport { getCosmosDbConfig } from '@/lib/config/environment-loader';\n\n// Data interfaces\nexport interface UserDocument {\n  id: string;\n  userId: string;\n  email: string;\n  displayName?: string;\n  profilePictureUrl?: string;\n  profilePictureBlobName?: string;\n  plan: 'free' | 'premium';\n  createdAt: Date;\n  updatedAt: Date;\n  _partitionKey?: string;\n}\n\nexport interface InterviewDocument {\n  id: string;\n  userId: string;\n  jobTitle: string;\n  company: string;\n  jobDescription?: string;\n  questions: Array<{\n    question: string;\n    answer?: string;\n    category: string;\n    difficulty: 'easy' | 'medium' | 'hard';\n  }>;\n  createdAt: Date;\n  updatedAt: Date;\n  finalized: boolean;\n  feedbackGenerated?: boolean;\n  _partitionKey?: string;\n}\n\nexport interface FeedbackDocument {\n  id: string;\n  userId: string;\n  interviewId: string;\n  overallScore: number;\n  strengths: string[];\n  improvements: string[];\n  detailedFeedback: string;\n  createdAt: Date;\n  _partitionKey?: string;\n}\n\nexport interface ResumeDocument {\n  id: string;\n  userId: string;\n  fileName: string;\n  fileUrl: string;\n  filePath?: string;\n  blobName?: string;\n  sasUrl?: string;\n  extractedData: {\n    personalInfo?: any;\n    summary?: string;\n    skills: string[];\n    experience: any[];\n    education: any[];\n    projects?: any[];\n    certifications?: any[];\n    languages?: string[];\n  };\n  interviewQuestions: string[];\n  metadata: {\n    fileSize: number;\n    uploadDate: Date;\n    lastModified: Date;\n    mimeType: string;\n    storageProvider: 'azure' | 'firebase';\n  };\n  _partitionKey?: string;\n}\n\nexport interface UsageDocument {\n  id: string;\n  userId: string;\n  interviews: {\n    count: number;\n    limit: number;\n    lastReset?: Date;\n  };\n  resumes: {\n    count: number;\n    limit: number;\n    lastReset?: Date;\n  };\n  updatedAt: Date;\n  _partitionKey?: string;\n}\n\nexport interface JobListingDocument {\n  id: string;\n  company: string;\n  position: string;\n  location?: string;\n  requirements?: string[];\n  isActive: boolean;\n  discoveredBy: string[];\n  postedDate: Date;\n  _partitionKey?: string;\n}\n\nexport interface ApplicationDocument {\n  id: string;\n  userId: string;\n  jobId: string;\n  status: string;\n  appliedAt: Date;\n  coverLetter?: string;\n  _partitionKey?: string;\n}\n\nexport interface AutoApplySettingsDocument {\n  id: string;\n  userId: string;\n  preferences: any;\n  isActive: boolean;\n  updatedAt: Date;\n  _partitionKey?: string;\n}\n\nexport interface AutomationLogDocument {\n  id: string;\n  userId: string;\n  action: string;\n  status: string;\n  timestamp: Date;\n  details?: any;\n  _partitionKey?: string;\n}\n\nexport interface SubscriptionEventDocument {\n  id: string;\n  userId?: string;\n  eventType: string;\n  data: any;\n  processed: boolean;\n  timestamp: Date;\n  _partitionKey?: string;\n}\n\nexport interface DataDeletionRequestDocument {\n  id: string;\n  userId: string;\n  requestedBy: string;\n  requestDate: Date;\n  status: 'pending' | 'processing' | 'completed' | 'failed';\n  reason?: string;\n  deletedData?: string[];\n  _partitionKey?: string;\n}\n\nexport interface DataProtectionAuditLogDocument {\n  id: string;\n  userId: string;\n  action: string;\n  timestamp: Date;\n  details?: any;\n  _partitionKey?: string;\n}\n\nexport interface NotificationEventDocument {\n  id: string;\n  userId: string;\n  type: string;\n  channel: string;\n  recipient: string;\n  subject: string;\n  content: string;\n  templateUsed?: string;\n  metadata?: any;\n  status: string;\n  createdAt: Date;\n  sentAt?: Date;\n  updatedAt?: Date;\n  error?: string;\n  messageId?: string;\n  jobId?: string;\n  applicationId?: string;\n  _partitionKey?: string;\n}\n\nexport interface ErrorEventDocument {\n  id: string;\n  featureName: string;\n  errorType: string;\n  errorMessage: string;\n  userId?: string;\n  userAgent?: string;\n  timestamp: Date;\n  severity: string;\n  metadata?: any;\n  _partitionKey?: string;\n}\n\nexport interface ErrorBudgetDocument {\n  id: string;\n  featureName: string;\n  breachedAt: Date;\n  errorCount: number;\n  threshold: number;\n  timeWindow: number;\n  action: string;\n  _partitionKey?: string;\n}\n\nexport interface EmailVerificationDocument {\n  id: string;\n  userId: string;\n  email: string;\n  code: string;\n  type: string;\n  expiresAt: Date;\n  verified: boolean;\n  attempts: number;\n  createdAt: Date;\n  verifiedAt?: Date;\n  _partitionKey?: string;\n}\n\nexport interface ProfileDocument {\n  id: string;\n  userId: string;\n  name?: string;\n  email?: string;\n  about?: string;\n  phone?: string;\n  workplace?: string;\n  skills?: string[];\n  experience?: string;\n  dateOfBirth?: string;\n  image?: string;\n  createdAt?: Date;\n  updatedAt: Date;\n  _partitionKey?: string;\n}\n\nclass AzureCosmosService {\n  private client: CosmosClient | null = null;\n  private database: Database | null = null;\n  private containers: Map<string, Container> = new Map();\n  private initialized = false;\n\n  constructor() {\n    // Client initialization is now deferred to initialize() method\n    // to use the unified environment loader\n  }\n\n  async initialize(): Promise<void> {\n    if (this.initialized) return;\n\n    try {\n      // Load Cosmos DB configuration from unified environment loader\n      const cosmosConfig = await getCosmosDbConfig();\n      \n      if (!cosmosConfig.connectionString) {\n        throw new Error('Cosmos DB connection string not available in configuration');\n      }\n      \n      // Initialize Cosmos client with configuration\n      this.client = new CosmosClient(cosmosConfig.connectionString);\n      \n      // Create or get database\n      const { database } = await this.client.databases.createIfNotExists({\n        id: cosmosConfig.database\n      });\n      \n      this.database = database;\n\n      // Define containers with their partition keys\n      const containerDefinitions = [\n        { id: 'users', partitionKey: '/userId' },\n        { id: 'interviews', partitionKey: '/userId' },\n        { id: 'feedback', partitionKey: '/userId' },\n        { id: 'resumes', partitionKey: '/userId' },\n        { id: 'usage', partitionKey: '/userId' },\n        { id: 'jobListings', partitionKey: '/id' },\n        { id: 'applications', partitionKey: '/userId' },\n        { id: 'autoApplySettings', partitionKey: '/userId' },\n        { id: 'automationLogs', partitionKey: '/userId' },\n        { id: 'subscriptionEvents', partitionKey: '/id' },\n        { id: 'dataDeletionRequests', partitionKey: '/userId' },\n        { id: 'dataProtectionAuditLog', partitionKey: '/userId' },\n        { id: 'notificationEvents', partitionKey: '/userId' },\n        { id: 'featureErrors', partitionKey: '/featureName' },\n        { id: 'errorBudgets', partitionKey: '/featureName' },\n        { id: 'emailVerifications', partitionKey: '/userId' },\n        { id: 'profiles', partitionKey: '/userId' }\n      ];\n\n      // Create containers\n      if (!this.database) {\n        throw new Error('Database initialization failed');\n      }\n      \n      for (const containerDef of containerDefinitions) {\n        const { container } = await this.database.containers.createIfNotExists({\n          id: containerDef.id,\n          partitionKey: containerDef.partitionKey\n        });\n        this.containers.set(containerDef.id, container);\n      }\n\n      this.initialized = true;\n      console.log('‚úÖ Azure Cosmos DB service initialized');\n    } catch (error) {\n      console.error('‚ùå Failed to initialize Azure Cosmos DB:', error);\n      throw error;\n    }\n  }\n\n  private getContainer(containerName: string): Container {\n    const container = this.containers.get(containerName);\n    if (!container) {\n      throw new Error(`Container ${containerName} not found. Make sure initialize() was called.`);\n    }\n    return container;\n  }\n\n  // Users operations\n  async createUser(userData: Omit<UserDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('users');\n    \n    const document: UserDocument = {\n      id: userData.userId,\n      ...userData,\n      _partitionKey: userData.userId\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async getUser(userId: string): Promise<UserDocument | null> {\n    await this.initialize();\n    const container = this.getContainer('users');\n    \n    try {\n      const { resource } = await container.item(userId, userId).read<UserDocument>();\n      return resource || null;\n    } catch (error: any) {\n      if (error.code === 404) return null;\n      throw error;\n    }\n  }\n\n  async updateUser(userId: string, updates: Partial<UserDocument>): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('users');\n    \n    const { resource: existing } = await container.item(userId, userId).read<UserDocument>();\n    if (!existing) throw new Error('User not found');\n    \n    const updated = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n      _partitionKey: userId\n    };\n    \n    await container.item(userId, userId).replace(updated);\n  }\n\n  // Interviews operations\n  async createInterview(interviewData: Omit<InterviewDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('interviews');\n    \n    const id = `interview_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: InterviewDocument = {\n      id,\n      ...interviewData,\n      _partitionKey: interviewData.userId\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async getInterview(interviewId: string, userId: string): Promise<InterviewDocument | null> {\n    await this.initialize();\n    const container = this.getContainer('interviews');\n    \n    try {\n      const { resource } = await container.item(interviewId, userId).read<InterviewDocument>();\n      return resource || null;\n    } catch (error: any) {\n      if (error.code === 404) return null;\n      throw error;\n    }\n  }\n\n  async getUserInterviews(userId: string): Promise<InterviewDocument[]> {\n    await this.initialize();\n    const container = this.getContainer('interviews');\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.userId = @userId ORDER BY c.createdAt DESC',\n      parameters: [{ name: '@userId', value: userId }]\n    };\n    \n    const { resources } = await container.items.query<InterviewDocument>(querySpec).fetchAll();\n    return resources;\n  }\n\n  async getPublicInterviews(userId: string, limit: number = 20): Promise<InterviewDocument[]> {\n    await this.initialize();\n    const container = this.getContainer('interviews');\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.userId = @userId AND c.finalized = true ORDER BY c.createdAt DESC OFFSET 0 LIMIT @limit',\n      parameters: [\n        { name: '@userId', value: userId },\n        { name: '@limit', value: limit }\n      ]\n    };\n    \n    const { resources } = await container.items.query<InterviewDocument>(querySpec).fetchAll();\n    return resources;\n  }\n\n  async getPublicInterviewsExcludingUser(excludeUserId: string, limit: number = 20): Promise<InterviewDocument[]> {\n    await this.initialize();\n    const container = this.getContainer('interviews');\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.finalized = true AND c.userId != @excludeUserId ORDER BY c.createdAt DESC OFFSET 0 LIMIT @limit',\n      parameters: [\n        { name: '@excludeUserId', value: excludeUserId },\n        { name: '@limit', value: limit }\n      ]\n    };\n    \n    const { resources } = await container.items.query<InterviewDocument>(querySpec).fetchAll();\n    return resources;\n  }\n\n  async updateInterview(interviewId: string, userId: string, updates: Partial<InterviewDocument>): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('interviews');\n    \n    const { resource: existing } = await container.item(interviewId, userId).read<InterviewDocument>();\n    if (!existing) throw new Error('Interview not found');\n    \n    const updated = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n      _partitionKey: userId\n    };\n    \n    await container.item(interviewId, userId).replace(updated);\n  }\n\n  async deleteInterview(interviewId: string, userId: string): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('interviews');\n    await container.item(interviewId, userId).delete();\n  }\n\n  // Feedback operations\n  async createFeedback(feedbackData: Omit<FeedbackDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('feedback');\n    \n    const id = `feedback_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: FeedbackDocument = {\n      id,\n      ...feedbackData,\n      _partitionKey: feedbackData.userId\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async getFeedbackByInterview(interviewId: string, userId: string): Promise<FeedbackDocument | null> {\n    await this.initialize();\n    const container = this.getContainer('feedback');\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.interviewId = @interviewId AND c.userId = @userId',\n      parameters: [\n        { name: '@interviewId', value: interviewId },\n        { name: '@userId', value: userId }\n      ]\n    };\n    \n    const { resources } = await container.items.query<FeedbackDocument>(querySpec).fetchAll();\n    return resources[0] || null;\n  }\n\n  // Resume operations\n  async saveResume(resumeData: Omit<ResumeDocument, '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('resumes');\n    \n    const document: ResumeDocument = {\n      ...resumeData,\n      _partitionKey: resumeData.userId\n    };\n    \n    const { resource } = await container.items.upsert(document);\n    return resource!.id;\n  }\n\n  async getUserResume(userId: string): Promise<ResumeDocument | null> {\n    await this.initialize();\n    const container = this.getContainer('resumes');\n    \n    try {\n      const { resource } = await container.item(userId, userId).read<ResumeDocument>();\n      return resource || null;\n    } catch (error: any) {\n      if (error.code === 404) return null;\n      throw error;\n    }\n  }\n\n  async deleteUserResume(userId: string): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('resumes');\n    \n    try {\n      await container.item(userId, userId).delete();\n    } catch (error: any) {\n      if (error.code === 404) return; // Already deleted\n      throw error;\n    }\n  }\n\n  // Usage operations\n  async getUserUsage(userId: string): Promise<UsageDocument | null> {\n    await this.initialize();\n    const container = this.getContainer('usage');\n    \n    try {\n      const { resource } = await container.item(userId, userId).read<UsageDocument>();\n      return resource || null;\n    } catch (error: any) {\n      if (error.code === 404) return null;\n      throw error;\n    }\n  }\n\n  async initializeUserUsage(userId: string): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('usage');\n    \n    const usageData: UsageDocument = {\n      id: userId,\n      userId,\n      interviews: { count: 0, limit: 3 },\n      resumes: { count: 0, limit: 2 },\n      updatedAt: new Date(),\n      _partitionKey: userId\n    };\n    \n    await container.items.upsert(usageData);\n  }\n\n  async incrementUsage(userId: string, type: 'interviews' | 'resumes'): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('usage');\n    \n    const { resource: existing } = await container.item(userId, userId).read<UsageDocument>();\n    if (!existing) {\n      await this.initializeUserUsage(userId);\n      return this.incrementUsage(userId, type);\n    }\n    \n    const updated = {\n      ...existing,\n      [type]: {\n        ...existing[type],\n        count: existing[type].count + 1\n      },\n      updatedAt: new Date(),\n      _partitionKey: userId\n    };\n    \n    await container.item(userId, userId).replace(updated);\n  }\n\n  async checkUsageLimit(userId: string, type: 'interviews' | 'resumes'): Promise<boolean> {\n    const usage = await this.getUserUsage(userId);\n    \n    if (!usage) {\n      await this.initializeUserUsage(userId);\n      return true;\n    }\n    \n    return usage[type].count < usage[type].limit;\n  }\n\n  // Job-related operations\n  async createJobListing(jobData: Omit<JobListingDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('jobListings');\n    \n    const id = `job_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: JobListingDocument = {\n      id,\n      ...jobData,\n      _partitionKey: id\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async getActiveJobListings(userId: string): Promise<JobListingDocument[]> {\n    await this.initialize();\n    const container = this.getContainer('jobListings');\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.isActive = true AND (ARRAY_CONTAINS(c.discoveredBy, @userId) OR ARRAY_LENGTH(c.discoveredBy) = 0) ORDER BY c.postedDate DESC',\n      parameters: [{ name: '@userId', value: userId }]\n    };\n    \n    const { resources } = await container.items.query<JobListingDocument>(querySpec).fetchAll();\n    return resources;\n  }\n\n  // Applications operations\n  async createApplication(applicationData: Omit<ApplicationDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('applications');\n    \n    const id = `app_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: ApplicationDocument = {\n      id,\n      ...applicationData,\n      _partitionKey: applicationData.userId\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async getUserApplications(userId: string): Promise<ApplicationDocument[]> {\n    await this.initialize();\n    const container = this.getContainer('applications');\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.userId = @userId ORDER BY c.appliedAt DESC',\n      parameters: [{ name: '@userId', value: userId }]\n    };\n    \n    const { resources } = await container.items.query<ApplicationDocument>(querySpec).fetchAll();\n    return resources;\n  }\n\n  // GDPR operations\n  async createDataDeletionRequest(requestData: Omit<DataDeletionRequestDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('dataDeletionRequests');\n    \n    const id = `del_req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: DataDeletionRequestDocument = {\n      id,\n      ...requestData,\n      _partitionKey: requestData.userId\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async deleteAllUserData(userId: string): Promise<string[]> {\n    await this.initialize();\n    const deletedCollections: string[] = [];\n    \n    const collections = [\n      'users', 'interviews', 'feedback', 'resumes', 'usage', \n      'applications', 'autoApplySettings', 'automationLogs', 'dataDeletionRequests'\n    ];\n    \n    for (const collectionName of collections) {\n      try {\n        const container = this.getContainer(collectionName);\n        \n        if (collectionName === 'users' || collectionName === 'resumes' || collectionName === 'usage') {\n          // These use userId as document ID\n          try {\n            await container.item(userId, userId).delete();\n            deletedCollections.push(collectionName);\n          } catch (error: any) {\n            if (error.code !== 404) throw error;\n          }\n        } else {\n          // Query and delete all documents for this user\n          const querySpec = {\n            query: 'SELECT c.id FROM c WHERE c.userId = @userId',\n            parameters: [{ name: '@userId', value: userId }]\n          };\n          \n          const { resources } = await container.items.query(querySpec).fetchAll();\n          \n          if (resources.length > 0) {\n            for (const item of resources) {\n              await container.item(item.id, userId).delete();\n            }\n            deletedCollections.push(collectionName);\n          }\n        }\n      } catch (error) {\n        console.error(`Error deleting from ${collectionName}:`, error);\n      }\n    }\n    \n    return deletedCollections;\n  }\n\n  // Notification Events operations\n  async createNotificationEvent(eventData: Omit<NotificationEventDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('notificationEvents');\n    \n    const id = `notify_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: NotificationEventDocument = {\n      id,\n      ...eventData,\n      _partitionKey: eventData.userId\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async updateNotificationEvent(eventId: string, userId: string, updates: Partial<NotificationEventDocument>): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('notificationEvents');\n    \n    const { resource: existing } = await container.item(eventId, userId).read<NotificationEventDocument>();\n    if (!existing) throw new Error('Notification event not found');\n    \n    const updated = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n      _partitionKey: userId\n    };\n    \n    await container.item(eventId, userId).replace(updated);\n  }\n\n  async getUserNotificationEvents(userId: string, limit: number = 50): Promise<NotificationEventDocument[]> {\n    await this.initialize();\n    const container = this.getContainer('notificationEvents');\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.userId = @userId ORDER BY c.createdAt DESC OFFSET 0 LIMIT @limit',\n      parameters: [\n        { name: '@userId', value: userId },\n        { name: '@limit', value: limit }\n      ]\n    };\n    \n    const { resources } = await container.items.query<NotificationEventDocument>(querySpec).fetchAll();\n    return resources;\n  }\n\n  // Error Events operations for monitoring\n  async createErrorEvent(errorData: Omit<ErrorEventDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('featureErrors');\n    \n    const id = `error_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: ErrorEventDocument = {\n      id,\n      ...errorData,\n      _partitionKey: errorData.featureName\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async getErrorEvents(featureName: string, timeWindowMinutes: number, limit: number = 100): Promise<ErrorEventDocument[]> {\n    await this.initialize();\n    const container = this.getContainer('featureErrors');\n    \n    const cutoffTime = new Date(Date.now() - timeWindowMinutes * 60 * 1000);\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.featureName = @featureName AND c.timestamp >= @cutoffTime ORDER BY c.timestamp DESC OFFSET 0 LIMIT @limit',\n      parameters: [\n        { name: '@featureName', value: featureName },\n        { name: '@cutoffTime', value: cutoffTime },\n        { name: '@limit', value: limit }\n      ]\n    };\n    \n    const { resources } = await container.items.query<ErrorEventDocument>(querySpec).fetchAll();\n    return resources;\n  }\n\n  async getErrorEventCount(featureName: string, timeWindowMinutes: number): Promise<number> {\n    await this.initialize();\n    const container = this.getContainer('featureErrors');\n    \n    const cutoffTime = new Date(Date.now() - timeWindowMinutes * 60 * 1000);\n    \n    const querySpec = {\n      query: 'SELECT VALUE COUNT(1) FROM c WHERE c.featureName = @featureName AND c.timestamp >= @cutoffTime',\n      parameters: [\n        { name: '@featureName', value: featureName },\n        { name: '@cutoffTime', value: cutoffTime }\n      ]\n    };\n    \n    const { resources } = await container.items.query<number>(querySpec).fetchAll();\n    return resources[0] || 0;\n  }\n\n  // Error Budget operations\n  async createErrorBudget(budgetData: Omit<ErrorBudgetDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('errorBudgets');\n    \n    const id = `budget_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: ErrorBudgetDocument = {\n      id,\n      ...budgetData,\n      _partitionKey: budgetData.featureName\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  // Email Verification operations\n  async createEmailVerification(verificationData: Omit<EmailVerificationDocument, 'id' | '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('emailVerifications');\n    \n    const id = `verify_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const document: EmailVerificationDocument = {\n      id,\n      ...verificationData,\n      _partitionKey: verificationData.userId\n    };\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async getEmailVerification(userId: string, email: string, type: string): Promise<EmailVerificationDocument | null> {\n    await this.initialize();\n    const container = this.getContainer('emailVerifications');\n    \n    const querySpec = {\n      query: 'SELECT * FROM c WHERE c.userId = @userId AND c.email = @email AND c.type = @type AND c.verified = false ORDER BY c.createdAt DESC',\n      parameters: [\n        { name: '@userId', value: userId },\n        { name: '@email', value: email },\n        { name: '@type', value: type }\n      ]\n    };\n    \n    const { resources } = await container.items.query<EmailVerificationDocument>(querySpec).fetchAll();\n    return resources[0] || null;\n  }\n\n  async updateEmailVerification(verificationId: string, userId: string, updates: Partial<EmailVerificationDocument>): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('emailVerifications');\n    \n    const { resource: existing } = await container.item(verificationId, userId).read<EmailVerificationDocument>();\n    if (!existing) throw new Error('Email verification not found');\n    \n    const updated = {\n      ...existing,\n      ...updates,\n      _partitionKey: userId\n    };\n    \n    await container.item(verificationId, userId).replace(updated);\n  }\n\n  // Profile operations (for Firestore profiles collection)\n  async saveProfile(profileData: Omit<ProfileDocument, '_partitionKey'>): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer('profiles');\n    \n    const document: ProfileDocument = {\n      ...profileData,\n      _partitionKey: profileData.userId\n    };\n    \n    const { resource } = await container.items.upsert(document);\n    return resource!.id;\n  }\n\n  async getProfile(userId: string): Promise<ProfileDocument | null> {\n    await this.initialize();\n    const container = this.getContainer('profiles');\n    \n    try {\n      const { resource } = await container.item(userId, userId).read<ProfileDocument>();\n      return resource || null;\n    } catch (error: any) {\n      if (error.code === 404) return null;\n      throw error;\n    }\n  }\n\n  async updateProfile(userId: string, updates: Partial<ProfileDocument>): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer('profiles');\n    \n    const { resource: existing } = await container.item(userId, userId).read<ProfileDocument>();\n    if (!existing) {\n      // Create new profile if doesn't exist\n      const newProfile: ProfileDocument = {\n        id: userId,\n        userId,\n        ...updates,\n        updatedAt: new Date(),\n        _partitionKey: userId\n      };\n      await container.items.create(newProfile);\n    } else {\n      const updated = {\n        ...existing,\n        ...updates,\n        updatedAt: new Date(),\n        _partitionKey: userId\n      };\n      await container.item(userId, userId).replace(updated);\n    }\n  }\n\n  // Generic query operations for complex Firestore-like queries\n  async queryDocuments<T>(\n    containerName: string,\n    query: string,\n    parameters: Array<{ name: string; value: any }>,\n    partitionKey?: string\n  ): Promise<T[]> {\n    await this.initialize();\n    const container = this.getContainer(containerName);\n    \n    const querySpec = { query, parameters };\n    const queryOptions = partitionKey ? { partitionKey } : {};\n    \n    const { resources } = await container.items\n      .query<T>(querySpec, queryOptions)\n      .fetchAll();\n    \n    return resources;\n  }\n\n  // Generic document operations\n  async createDocument<T extends { _partitionKey?: string }>(containerName: string, document: T): Promise<string> {\n    await this.initialize();\n    const container = this.getContainer(containerName);\n    \n    const { resource } = await container.items.create(document);\n    return resource!.id;\n  }\n\n  async getDocument<T = any>(containerName: string, documentId: string, partitionKey: string): Promise<T | null> {\n    await this.initialize();\n    const container = this.getContainer(containerName);\n    \n    try {\n      const { resource } = await container.item(documentId, partitionKey).read();\n      return (resource as T) || null;\n    } catch (error: any) {\n      if (error.code === 404) return null;\n      throw error;\n    }\n  }\n\n  async updateDocument<T = any>(containerName: string, documentId: string, partitionKey: string, updates: Partial<T>): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer(containerName);\n    \n    const { resource: existing } = await container.item(documentId, partitionKey).read();\n    if (!existing) throw new Error('Document not found');\n    \n    const updated = {\n      ...existing,\n      ...updates\n    };\n    \n    await container.item(documentId, partitionKey).replace(updated);\n  }\n\n  async deleteDocument(containerName: string, documentId: string, partitionKey: string): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer(containerName);\n    \n    try {\n      await container.item(documentId, partitionKey).delete();\n    } catch (error: any) {\n      if (error.code !== 404) throw error;\n      // Document already deleted, ignore 404\n    }\n  }\n\n  // Batch operations for efficiency\n  async batchCreate<T extends { id: string; _partitionKey?: string }>(\n    containerName: string, \n    documents: T[]\n  ): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer(containerName);\n    \n    // Process in smaller batches to avoid limits\n    const batchSize = 25;\n    for (let i = 0; i < documents.length; i += batchSize) {\n      const batch = documents.slice(i, i + batchSize);\n      await Promise.all(batch.map(doc => container.items.create(doc)));\n    }\n  }\n\n  async batchDelete(containerName: string, documentIds: Array<{ id: string; partitionKey: string }>): Promise<void> {\n    await this.initialize();\n    const container = this.getContainer(containerName);\n    \n    // Process in smaller batches\n    const batchSize = 25;\n    for (let i = 0; i < documentIds.length; i += batchSize) {\n      const batch = documentIds.slice(i, i + batchSize);\n      await Promise.all(batch.map(({ id, partitionKey }) => \n        container.item(id, partitionKey).delete().catch(err => {\n          if (err.code !== 404) throw err;\n          // Ignore 404s for already deleted documents\n        })\n      ));\n    }\n  }\n\n  // Health check\n  async healthCheck(): Promise<{ status: 'healthy' | 'unhealthy'; timestamp: Date }> {\n    try {\n      await this.initialize();\n      const container = this.getContainer('users');\n      \n      // Simple read operation to test connectivity\n      const querySpec = { query: 'SELECT VALUE COUNT(1) FROM c', parameters: [] };\n      await container.items.query(querySpec).fetchAll();\n      \n      return { status: 'healthy', timestamp: new Date() };\n    } catch (error) {\n      console.error('Azure Cosmos DB health check failed:', error);\n      return { status: 'unhealthy', timestamp: new Date() };\n    }\n  }\n}\n\n// Export singleton instance\nexport const azureCosmosService = new AzureCosmosService();\nexport default azureCosmosService;\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/services/azure-form-recognizer.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[644,647],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[644,647],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'parseError' is defined but never used.","line":266,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":266,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'lines' is assigned a value but never used.","line":285,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":285,"endColumn":16}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { DocumentAnalysisClient, AzureKeyCredential } from '@azure/ai-form-recognizer';\nimport { fetchAzureSecrets } from '@/azure/lib/azure-config';\nimport { logServerError } from '@/lib/errors';\n\n// Types for extracted resume data\nexport interface ExtractedResumeData {\n  personalInfo: {\n    name?: string;\n    email?: string;\n    phone?: string;\n    address?: string;\n    linkedin?: string;\n    github?: string;\n    website?: string;\n  };\n  summary?: string;\n  skills: string[];\n  experience: WorkExperience[];\n  education: Education[];\n  projects?: Project[];\n  certifications?: Certification[];\n  languages?: Language[];\n  rawExtraction?: any; // Store raw extraction for GDPR export\n}\n\nexport interface WorkExperience {\n  company: string;\n  position: string;\n  startDate?: string;\n  endDate?: string;\n  isCurrent?: boolean;\n  description: string;\n  achievements?: string[];\n  technologies?: string[];\n  location?: string;\n}\n\nexport interface Education {\n  institution: string;\n  degree: string;\n  field: string;\n  startDate?: string;\n  endDate?: string;\n  gpa?: number;\n  description?: string;\n  location?: string;\n}\n\nexport interface Project {\n  name: string;\n  description: string;\n  technologies?: string[];\n  url?: string;\n  github?: string;\n  startDate?: string;\n  endDate?: string;\n}\n\nexport interface Certification {\n  name: string;\n  issuer: string;\n  date?: string;\n  expiryDate?: string;\n  credentialId?: string;\n  url?: string;\n}\n\nexport interface Language {\n  name: string;\n  proficiency: string;\n}\n\nclass AzureFormRecognizerService {\n  private client: DocumentAnalysisClient | null = null;\n  private modelId = 'prebuilt-document'; // Use prebuilt document model\n\n  /**\n   * Initialize the Azure Form Recognizer service\n   */\n  async initialize(): Promise<boolean> {\n    try {\n      const secrets = await fetchAzureSecrets();\n      \n      const endpoint = process.env.AZURE_FORM_RECOGNIZER_ENDPOINT || secrets.azureFormRecognizerEndpoint;\n      const apiKey = process.env.AZURE_FORM_RECOGNIZER_KEY || secrets.azureFormRecognizerKey;\n\n      if (!endpoint || !apiKey) {\n        console.warn('‚ö†Ô∏è Azure Form Recognizer credentials not found, will use OpenAI fallback');\n        return false;\n      }\n\n      this.client = new DocumentAnalysisClient(\n        endpoint,\n        new AzureKeyCredential(apiKey)\n      );\n\n      console.log('‚úÖ Azure Form Recognizer service initialized');\n      return true;\n    } catch (error) {\n      console.error('‚ùå Failed to initialize Azure Form Recognizer:', error);\n      logServerError(error as Error, { service: 'azure-form-recognizer', action: 'initialize' });\n      return false;\n    }\n  }\n\n  /**\n   * Check if service is ready\n   */\n  isReady(): boolean {\n    return this.client !== null;\n  }\n\n  /**\n   * Extract resume data from buffer using Azure Form Recognizer\n   */\n  async extractResumeData(fileBuffer: Buffer, mimeType: string): Promise<ExtractedResumeData> {\n    if (!this.isReady()) {\n      throw new Error('Azure Form Recognizer service not initialized');\n    }\n\n    try {\n      console.log('üîç Extracting resume data with Azure Form Recognizer...');\n\n      // Analyze the document\n      const poller = await this.client!.beginAnalyzeDocument(this.modelId, fileBuffer);\n      const result = await poller.pollUntilDone();\n\n      // Extract text content from the document\n      const fullText = result.content || '';\n      \n      // Store raw extraction for GDPR export\n      const rawExtraction = {\n        content: result.content,\n        pages: result.pages,\n        tables: result.tables,\n        keyValuePairs: result.keyValuePairs,\n        styles: result.styles\n      };\n\n      // Parse the extracted text to structure data\n      const extractedData = await this.parseResumeContent(fullText);\n      \n      // Include raw extraction\n      extractedData.rawExtraction = rawExtraction;\n\n      console.log('‚úÖ Resume data extracted successfully with Azure Form Recognizer');\n      return extractedData;\n\n    } catch (error) {\n      console.error('Failed to extract resume data with Azure Form Recognizer:', error);\n      logServerError(error as Error, { \n        service: 'azure-form-recognizer', \n        action: 'extract'\n      }, {\n        mimeType\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Parse resume content using AI to extract structured data\n   * This method uses OpenAI as a processing layer on top of Form Recognizer\n   */\n  private async parseResumeContent(text: string): Promise<ExtractedResumeData> {\n    // We'll use tailorResume function as it's the main AI processing function available\n    \n    // Use OpenAI function calling to structure the extracted text\n    const prompt = `\n    Extract the following information from this resume text and return as JSON:\n    \n    {\n      \"personalInfo\": {\n        \"name\": \"Full name\",\n        \"email\": \"Email address\",\n        \"phone\": \"Phone number\",\n        \"address\": \"Address\",\n        \"linkedin\": \"LinkedIn URL\",\n        \"github\": \"GitHub URL\",\n        \"website\": \"Personal website URL\"\n      },\n      \"summary\": \"Professional summary or objective\",\n      \"skills\": [\"skill1\", \"skill2\", ...],\n      \"experience\": [\n        {\n          \"company\": \"Company name\",\n          \"position\": \"Job title\",\n          \"startDate\": \"Start date\",\n          \"endDate\": \"End date or 'Present'\",\n          \"isCurrent\": true/false,\n          \"description\": \"Job description\",\n          \"achievements\": [\"achievement1\", ...],\n          \"technologies\": [\"tech1\", \"tech2\", ...],\n          \"location\": \"Location\"\n        }\n      ],\n      \"education\": [\n        {\n          \"institution\": \"School name\",\n          \"degree\": \"Degree type\",\n          \"field\": \"Field of study\",\n          \"startDate\": \"Start date\",\n          \"endDate\": \"End date\",\n          \"gpa\": 3.5,\n          \"description\": \"Additional details\",\n          \"location\": \"Location\"\n        }\n      ],\n      \"projects\": [\n        {\n          \"name\": \"Project name\",\n          \"description\": \"Project description\",\n          \"technologies\": [\"tech1\", \"tech2\", ...],\n          \"url\": \"Project URL\",\n          \"github\": \"GitHub URL\",\n          \"startDate\": \"Start date\",\n          \"endDate\": \"End date\"\n        }\n      ],\n      \"certifications\": [\n        {\n          \"name\": \"Certification name\",\n          \"issuer\": \"Issuing organization\",\n          \"date\": \"Issue date\",\n          \"expiryDate\": \"Expiry date\",\n          \"credentialId\": \"Credential ID\",\n          \"url\": \"Verification URL\"\n        }\n      ],\n      \"languages\": [\n        {\n          \"name\": \"Language name\",\n          \"proficiency\": \"Proficiency level\"\n        }\n      ]\n    }\n    \n    Resume text:\n    ${text}\n    `;\n\n    try {\n      // Use the AI service to process the text\n      const { tailorResume } = await import('@/lib/ai');\n      \n      // Create a structured extraction prompt\n      const extractionResult = await tailorResume(text, prompt);\n      \n      if (extractionResult.success && extractionResult.data) {\n        try {\n          // Parse the JSON response\n          const parsedData = typeof extractionResult.data === 'string' \n            ? JSON.parse(extractionResult.data) \n            : extractionResult.data;\n            \n          return {\n            personalInfo: parsedData.personalInfo || {},\n            summary: parsedData.summary,\n            skills: parsedData.skills || [],\n            experience: parsedData.experience || [],\n            education: parsedData.education || [],\n            projects: parsedData.projects || [],\n            certifications: parsedData.certifications || [],\n            languages: parsedData.languages || []\n          };\n        } catch (parseError) {\n          console.warn('Failed to parse AI extraction result, using fallback parsing');\n          return this.fallbackTextParsing(text);\n        }\n      }\n      \n      // Fallback to simple text parsing if AI fails\n      return this.fallbackTextParsing(text);\n      \n    } catch (error) {\n      console.warn('AI parsing failed, using fallback text parsing:', error);\n      return this.fallbackTextParsing(text);\n    }\n  }\n\n  /**\n   * Fallback text parsing method\n   */\n  private fallbackTextParsing(text: string): ExtractedResumeData {\n    const lines = text.split('\\n').map(line => line.trim()).filter(line => line);\n    \n    // Simple regex patterns for basic extraction\n    const emailRegex = /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/g;\n    const phoneRegex = /(\\+?1?[-.\\s]?)?\\(?[0-9]{3}\\)?[-.\\s]?[0-9]{3}[-.\\s]?[0-9]{4}/g;\n    const linkedinRegex = /linkedin\\.com\\/in\\/[\\w-]+/gi;\n    const githubRegex = /github\\.com\\/[\\w-]+/gi;\n\n    const emails = text.match(emailRegex) || [];\n    const phones = text.match(phoneRegex) || [];\n    const linkedinUrls = text.match(linkedinRegex) || [];\n    const githubUrls = text.match(githubRegex) || [];\n\n    // Extract skills (simple keyword matching)\n    const skillKeywords = [\n      'javascript', 'typescript', 'python', 'java', 'react', 'node', 'express',\n      'mongodb', 'sql', 'postgresql', 'mysql', 'docker', 'kubernetes', 'aws',\n      'azure', 'gcp', 'git', 'html', 'css', 'angular', 'vue', 'spring',\n      'django', 'flask', 'ruby', 'php', 'go', 'rust', 'c++', 'c#', 'swift',\n      'kotlin', 'flutter', 'dart', 'tensorflow', 'pytorch', 'machine learning',\n      'data science', 'artificial intelligence', 'blockchain', 'devops'\n    ];\n\n    const detectedSkills = skillKeywords.filter(skill => \n      text.toLowerCase().includes(skill.toLowerCase())\n    );\n\n    return {\n      personalInfo: {\n        email: emails[0],\n        phone: phones[0],\n        linkedin: linkedinUrls[0] ? `https://${linkedinUrls[0]}` : undefined,\n        github: githubUrls[0] ? `https://${githubUrls[0]}` : undefined\n      },\n      skills: detectedSkills,\n      experience: [],\n      education: [],\n      projects: [],\n      certifications: [],\n      languages: []\n    };\n  }\n}\n\n// Export singleton instance\nexport const azureFormRecognizer = new AzureFormRecognizerService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/services/azure-functions-client.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TokenVerificationRequest' is defined but never used.","line":11,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[428,431],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[428,431],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SessionCookieRequest' is defined but never used.","line":24,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'GDPRDeletionRequest' is defined but never used.","line":34,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":57,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1143,1146],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1143,1146],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":79,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1672,1675],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1672,1675],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":200,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5219,5222],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5219,5222],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'limit' is assigned a value but never used.","line":269,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":269,"endColumn":48}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Azure Functions Client\n * \n * This service provides a client interface for interacting with Azure Functions\n * including job automation, Firebase replacements (auth, GDPR), and other services.\n */\n\n// import { QueueServiceClient } from '@azure/storage-queue';\n\n// Firebase-replacement interfaces\ninterface TokenVerificationRequest {\n  token: string;\n}\n\ninterface TokenVerificationResponse {\n  valid: boolean;\n  decoded?: any;\n  uid?: string;\n  email?: string;\n  error?: string;\n  endpoint?: string;\n}\n\ninterface SessionCookieRequest {\n  idToken: string;\n  expiresIn?: number;\n}\n\ninterface SessionCookieResponse {\n  sessionCookie: string;\n  error?: string;\n}\n\ninterface GDPRDeletionRequest {\n  userId: string;\n  userEmail: string;\n  reason: string;\n}\n\ninterface GDPRDeletionResponse {\n  requestId: string;\n  status: 'pending' | 'processing' | 'completed' | 'failed';\n  message: string;\n}\n\n// Job automation interfaces\ninterface SearchRequest {\n  userId: string;\n  filters: JobSearchFilters;\n  immediate?: boolean;\n  priority?: 'high' | 'normal' | 'low';\n}\n\ninterface ApplicationRequest {\n  userId: string;\n  jobId: string;\n  jobListing: any;\n  autoApply?: boolean;\n}\n\ninterface FollowUpRequest {\n  userId: string;\n  applicationId: string;\n  type: 'initial_follow_up' | 'second_follow_up' | 'thank_you' | 'status_check';\n  scheduledDate: string;\n}\n\ninterface JobSearchFilters {\n  keywords: string[];\n  locations: string[];\n  jobTypes: string[];\n  workArrangements: string[];\n  portals: string[];\n  minimumRelevancyScore: number;\n  datePosted?: 'past-24-hours' | 'past-week' | 'past-month' | 'any';\n}\n\nexport class AzureFunctionsClient {\n  private queueServiceClient: any; // QueueServiceClient;\n  private functionAppUrl: string;\n  private functionKey: string;\n\n  constructor() {\n    this.functionAppUrl = process.env.AZURE_FUNCTIONS_URL || '';\n    this.functionKey = process.env.AZURE_FUNCTIONS_KEY || '';\n    \n    // Initialize queue client for direct queue operations\n    const storageConnectionString = process.env.AZURE_STORAGE_CONNECTION_STRING;\n    if (storageConnectionString) {\n      // this.queueServiceClient = QueueServiceClient.fromConnectionString(storageConnectionString);\n    }\n  }\n\n  /**\n   * Trigger a manual job search for a user\n   */\n  async triggerJobSearch(request: SearchRequest) {\n    try {\n      const response = await fetch(`${this.functionAppUrl}/api/searchSchedulerHttp`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-functions-key': this.functionKey\n        },\n        body: JSON.stringify(request)\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const result = await response.json();\n      console.log('Job search triggered:', result);\n      return result;\n\n    } catch (error) {\n      console.error('Error triggering job search:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Queue a job application for processing\n   */\n  async queueJobApplication(request: ApplicationRequest) {\n    try {\n      if (!this.queueServiceClient) {\n        throw new Error('Queue service not initialized');\n      }\n\n      const queueClient = this.queueServiceClient.getQueueClient('process-applications');\n      \n      const applicationMessage = {\n        ...request,\n        requestId: this.generateRequestId(),\n        queuedAt: new Date().toISOString()\n      };\n\n      const messageText = Buffer.from(JSON.stringify(applicationMessage)).toString('base64');\n      \n      const result = await queueClient.sendMessage(messageText, {\n        visibilityTimeoutInSeconds: request.autoApply ? 30 : 0\n      });\n\n      console.log('Application queued:', result);\n      return result;\n\n    } catch (error) {\n      console.error('Error queuing job application:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Schedule a follow-up reminder\n   */\n  async scheduleFollowUp(request: FollowUpRequest) {\n    try {\n      if (!this.queueServiceClient) {\n        throw new Error('Queue service not initialized');\n      }\n\n      const queueClient = this.queueServiceClient.getQueueClient('follow-up-reminders');\n      \n      const followUpMessage = {\n        ...request,\n        createdAt: new Date().toISOString()\n      };\n\n      // Calculate delay until scheduled date\n      const scheduledTime = new Date(request.scheduledDate);\n      const now = new Date();\n      const delaySeconds = Math.max(0, Math.floor((scheduledTime.getTime() - now.getTime()) / 1000));\n\n      const messageText = Buffer.from(JSON.stringify(followUpMessage)).toString('base64');\n      \n      const result = await queueClient.sendMessage(messageText, {\n        visibilityTimeoutInSeconds: delaySeconds\n      });\n\n      console.log('Follow-up scheduled:', result);\n      return result;\n\n    } catch (error) {\n      console.error('Error scheduling follow-up:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get queue statistics for monitoring\n   */\n  async getQueueStats() {\n    try {\n      if (!this.queueServiceClient) {\n        throw new Error('Queue service not initialized');\n      }\n\n      const queues = ['search-jobs', 'process-applications', 'follow-up-reminders'];\n      const stats: Record<string, any> = {};\n\n      for (const queueName of queues) {\n        const queueClient = this.queueServiceClient.getQueueClient(queueName);\n        const properties = await queueClient.getProperties();\n        \n        stats[queueName] = {\n          messageCount: properties.approximateMessagesCount,\n          metadata: properties.metadata\n        };\n      }\n\n      return stats;\n\n    } catch (error) {\n      console.error('Error getting queue stats:', error);\n      return {};\n    }\n  }\n\n  /**\n   * Enable auto-apply for a user by updating their settings\n   */\n  async enableAutoApply(userId: string, settings: {\n    filters: JobSearchFilters;\n    autoApplyThreshold: number;\n    dailyApplicationLimit: number;\n    followUpEnabled: boolean;\n  }) {\n    try {\n      // This would typically update the user's settings in the database\n      // and then trigger an immediate job search\n      \n      console.log(`Enabling auto-apply for user ${userId}:`, settings);\n      \n      // Trigger initial job search with auto-apply enabled\n      return await this.triggerJobSearch({\n        userId,\n        filters: settings.filters,\n        immediate: true,\n        priority: 'high'\n      });\n\n    } catch (error) {\n      console.error('Error enabling auto-apply:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Disable auto-apply for a user\n   */\n  async disableAutoApply(userId: string) {\n    try {\n      // This would update the user's settings in the database\n      // The timer function will automatically stop scheduling searches\n      \n      console.log(`Auto-apply disabled for user ${userId}`);\n      return { success: true, message: 'Auto-apply disabled successfully' };\n\n    } catch (error) {\n      console.error('Error disabling auto-apply:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get automation logs for a user\n   */\n  async getAutomationLogs(userId: string, limit: number = 50) {\n    try {\n      // This would query the automation logs from storage or Application Insights\n      // For now, return empty array as logs are processed in real-time\n      \n      console.log(`Fetching automation logs for user ${userId}`);\n      return [];\n\n    } catch (error) {\n      console.error('Error fetching automation logs:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Health check for Azure Functions\n   */\n  async healthCheck() {\n    try {\n      const response = await fetch(`${this.functionAppUrl}/api/health`, {\n        method: 'GET',\n        headers: {\n          'x-functions-key': this.functionKey\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`Health check failed with status: ${response.status}`);\n      }\n\n      return await response.json();\n\n    } catch (error) {\n      console.error('Health check failed:', error);\n      return { \n        status: 'unhealthy', \n        error: error instanceof Error ? error.message : 'Unknown error' \n      };\n    }\n  }\n\n  /**\n   * Verify Firebase ID token using Azure Function (Unified Auth Endpoint)\n   */\n  async verifyToken(token: string): Promise<TokenVerificationResponse> {\n    try {\n      // Check feature flag for unified auth endpoint\n      const useUnifiedAuth = process.env.AUTH_ENDPOINT === 'v2' || process.env.NEXT_PUBLIC_AUTH_ENDPOINT === 'v2';\n      \n      const endpoint = useUnifiedAuth \n        ? `${this.functionAppUrl}/api/auth?action=verify`\n        : `${this.functionAppUrl}/api/verifyToken`;\n      \n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-functions-key': this.functionKey,\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify(useUnifiedAuth ? {} : { token })\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const result = await response.json();\n      \n      // Normalize response format between legacy and unified endpoints\n      if (useUnifiedAuth && result.success) {\n        return {\n          valid: result.verified,\n          decoded: result.claims,\n          uid: result.uid,\n          email: result.email,\n          endpoint: 'unified-v2'\n        };\n      }\n      \n      return {\n        valid: result.success || false,\n        decoded: result.claims,\n        error: result.error,\n        endpoint: useUnifiedAuth ? 'unified-v2' : 'legacy-v1'\n      };\n\n    } catch (error) {\n      console.error('Error verifying token:', error);\n      return {\n        valid: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Create session cookie using Azure Function\n   */\n  async createSessionCookie(idToken: string, expiresIn?: number): Promise<SessionCookieResponse> {\n    try {\n      const response = await fetch(`${this.functionAppUrl}/api/createSessionCookie`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-functions-key': this.functionKey\n        },\n        body: JSON.stringify({ \n          idToken,\n          expiresIn: expiresIn || 24 * 60 * 60 * 1000 // 24 hours default\n        })\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);\n      }\n\n      const result = await response.json();\n      return result;\n\n    } catch (error) {\n      console.error('Error creating session cookie:', error);\n      return {\n        sessionCookie: '',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Request GDPR data deletion using Azure Function\n   */\n  async requestGDPRDeletion(userId: string, userEmail: string, reason: string): Promise<GDPRDeletionResponse> {\n    try {\n      const response = await fetch(`${this.functionAppUrl}/api/deleteUserData`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-functions-key': this.functionKey\n        },\n        body: JSON.stringify({\n          userId,\n          userEmail,\n          reason\n        })\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);\n      }\n\n      const result = await response.json();\n      return result;\n\n    } catch (error) {\n      console.error('Error requesting GDPR deletion:', error);\n      return {\n        requestId: '',\n        status: 'failed',\n        message: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Check GDPR deletion status\n   */\n  async checkGDPRDeletionStatus(requestId: string) {\n    try {\n      const response = await fetch(`${this.functionAppUrl}/api/deleteUserData?requestId=${requestId}`, {\n        method: 'GET',\n        headers: {\n          'x-functions-key': this.functionKey\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n\n    } catch (error) {\n      console.error('Error checking GDPR deletion status:', error);\n      return {\n        status: 'unknown',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Trigger scheduled deletions manually (admin function)\n   */\n  async triggerScheduledDeletions() {\n    try {\n      const response = await fetch(`${this.functionAppUrl}/api/processScheduledDeletions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-functions-key': this.functionKey\n        },\n        body: JSON.stringify({ manual: true })\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n\n    } catch (error) {\n      console.error('Error triggering scheduled deletions:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Generate a unique request ID\n   */\n  private generateRequestId(): string {\n    return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n}\n\n// Export a singleton instance\nexport const azureFunctionsClient = new AzureFunctionsClient();\n\n// Example usage:\n/*\nimport { azureFunctionsClient } from '@/lib/services/azure-functions-client';\n\n// Firebase replacements\n// Verify token\nconst tokenResult = await azureFunctionsClient.verifyToken(idToken);\nif (tokenResult.valid) {\n  console.log('User:', tokenResult.decoded);\n}\n\n// Create session cookie\nconst sessionResult = await azureFunctionsClient.createSessionCookie(idToken, 24 * 60 * 60 * 1000);\nif (sessionResult.sessionCookie) {\n  // Set cookie in response\n  response.setHeader('Set-Cookie', `session=${sessionResult.sessionCookie}; HttpOnly; Secure`);\n}\n\n// Request GDPR deletion\nconst deletionResult = await azureFunctionsClient.requestGDPRDeletion(\n  'user123',\n  'user@example.com',\n  'User requested account deletion'\n);\n\n// Job automation\n// Trigger manual job search\nawait azureFunctionsClient.triggerJobSearch({\n  userId: 'user123',\n  filters: {\n    keywords: ['React', 'Frontend'],\n    locations: ['San Francisco', 'Remote'],\n    jobTypes: ['full-time'],\n    workArrangements: ['remote', 'hybrid'],\n    portals: ['LinkedIn', 'Indeed'],\n    minimumRelevancyScore: 75\n  },\n  immediate: true\n});\n\n// Enable auto-apply\nawait azureFunctionsClient.enableAutoApply('user123', {\n  filters: userFilters,\n  autoApplyThreshold: 80,\n  dailyApplicationLimit: 5,\n  followUpEnabled: true\n});\n\n// Queue specific job application\nawait azureFunctionsClient.queueJobApplication({\n  userId: 'user123',\n  jobId: 'job456',\n  jobListing: jobData,\n  autoApply: false\n});\n*/\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/services/azure-gdpr-service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Container' is defined but never used.","line":1,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ContainerClient' is defined but never used.","line":2,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1602,1605],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1602,1605],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":66,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2014,2017],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2014,2017],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'containerName' is assigned a value but never used.","line":189,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":189,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":503,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":503,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16301,16304],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16301,16304],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":515,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":515,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16604,16607],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16604,16607],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":519,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":519,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16695,16698],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16695,16698],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":709,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":709,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22629,22632],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22629,22632],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":750,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":750,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24001,24004],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24001,24004],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":750,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":750,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24023,24026],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24023,24026],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CosmosClient, Container, Database } from '@azure/cosmos';\nimport { BlobServiceClient, ContainerClient } from '@azure/storage-blob';\nimport { DefaultAzureCredential } from '@azure/identity';\nimport { SecretClient } from '@azure/keyvault-secrets';\n\n/**\n * Azure-based GDPR Compliance Service\n * \n * Implements GDPR features using Azure Cosmos DB for data deletion requests\n * and audit logging, plus Azure Blob Storage for file deletion.\n */\n\nexport interface UserConsent {\n  id: string;\n  userId: string;\n  analytics: boolean;\n  marketing: boolean;\n  functional: boolean;\n  consentDate: string;\n  ipAddress?: string;\n  userAgent?: string;\n  version: string; // Privacy policy version\n  lastUpdated: string;\n  partitionKey: string; // For Cosmos DB partitioning\n}\n\nexport interface DataDeletionRequest {\n  id: string;\n  userId: string;\n  requestDate: string;\n  requestedBy: string; // email of person making request\n  reason?: string;\n  status: 'pending' | 'processing' | 'completed' | 'failed' | 'cancelled';\n  scheduledDate?: string; // When deletion will be processed (30 days after request)\n  completedDate?: string;\n  deletedData: string[]; // list of containers/collections deleted\n  errors?: string[]; // any errors encountered during deletion\n  auditTrail: AuditLogEntry[];\n  partitionKey: string; // For Cosmos DB partitioning\n}\n\nexport interface AuditLogEntry {\n  id: string;\n  userId: string;\n  action: 'consent_recorded' | 'consent_updated' | 'data_deletion_requested' | 'data_deletion_processed' | 'data_exported' | 'data_anonymized';\n  timestamp: string;\n  details: Record<string, any>;\n  ipAddress?: string;\n  userAgent?: string;\n  complianceOfficer?: string;\n  partitionKey: string;\n}\n\nexport interface AnonymizedAnalytics {\n  id: string;\n  timestamp: string;\n  event: string;\n  page: string;\n  userId: string; // hashed/pseudonymized\n  sessionId: string; // hashed\n  userAgent?: string; // anonymized\n  location?: {\n    country: string;\n    region?: string;\n  };\n  metadata: Record<string, any>;\n  partitionKey: string;\n}\n\nexport class AzureGDPRService {\n  private cosmosClient: CosmosClient | null = null;\n  private database: Database | null = null;\n  private blobServiceClient: BlobServiceClient | null = null;\n  private keyVaultClient: SecretClient | null = null;\n  private static instance: AzureGDPRService;\n  \n  private readonly COSMOS_DATABASE_ID = 'PrepBettrDB';\n  private readonly CONTAINERS = {\n    DELETION_REQUESTS: 'gdprRequests',\n    AUDIT_LOG: 'dataProtectionAuditLog',\n    CONSENTS: 'userConsents',\n    ANONYMIZED_ANALYTICS: 'anonymizedAnalytics'\n  } as const;\n\n  public static getInstance(): AzureGDPRService {\n    if (!AzureGDPRService.instance) {\n      AzureGDPRService.instance = new AzureGDPRService();\n    }\n    return AzureGDPRService.instance;\n  }\n\n  /**\n   * Initialize Azure services (Cosmos DB, Blob Storage, Key Vault)\n   */\n  async initialize(): Promise<void> {\n    try {\n      // Initialize Azure Key Vault for secrets\n      if (process.env.AZURE_KEY_VAULT_URL) {\n        this.keyVaultClient = new SecretClient(\n          process.env.AZURE_KEY_VAULT_URL,\n          new DefaultAzureCredential()\n        );\n      }\n\n      // Initialize Cosmos DB\n      await this.initializeCosmosDB();\n      \n      // Initialize Blob Storage\n      await this.initializeBlobStorage();\n\n      console.log('‚úÖ Azure GDPR Service initialized successfully');\n    } catch (error) {\n      console.error('‚ùå Failed to initialize Azure GDPR Service:', error);\n      throw error;\n    }\n  }\n\n  private async initializeCosmosDB(): Promise<void> {\n    try {\n      let connectionString = process.env.AZURE_COSMOS_CONNECTION_STRING;\n      \n      // Try to get connection string from Key Vault if not in env\n      if (!connectionString && this.keyVaultClient) {\n        try {\n          const secret = await this.keyVaultClient.getSecret('cosmos-db-connection-string');\n          connectionString = secret.value;\n        } catch (keyVaultError) {\n          console.warn('Could not retrieve Cosmos DB connection from Key Vault:', keyVaultError);\n        }\n      }\n\n      // Fallback to endpoint and key\n      if (!connectionString) {\n        const endpoint = process.env.AZURE_COSMOS_ENDPOINT;\n        const key = process.env.AZURE_COSMOS_KEY;\n        \n        if (!endpoint || !key) {\n          throw new Error('Cosmos DB configuration missing. Provide either AZURE_COSMOS_CONNECTION_STRING or both AZURE_COSMOS_ENDPOINT and AZURE_COSMOS_KEY');\n        }\n        \n        this.cosmosClient = new CosmosClient({ endpoint, key });\n      } else {\n        this.cosmosClient = new CosmosClient(connectionString);\n      }\n\n      // Get database reference\n      this.database = this.cosmosClient.database(this.COSMOS_DATABASE_ID);\n      \n      // Ensure containers exist\n      await this.ensureContainers();\n      \n      console.log('‚úÖ Cosmos DB initialized for GDPR service');\n    } catch (error) {\n      console.error('‚ùå Failed to initialize Cosmos DB:', error);\n      throw error;\n    }\n  }\n\n  private async initializeBlobStorage(): Promise<void> {\n    try {\n      let connectionString = process.env.AZURE_STORAGE_CONNECTION_STRING;\n      \n      // Try to get connection string from Key Vault\n      if (!connectionString && this.keyVaultClient) {\n        try {\n          const secret = await this.keyVaultClient.getSecret('storage-connection-string');\n          connectionString = secret.value;\n        } catch (keyVaultError) {\n          console.warn('Could not retrieve Storage connection from Key Vault:', keyVaultError);\n        }\n      }\n\n      if (!connectionString) {\n        throw new Error('Azure Storage connection string not found in environment or Key Vault');\n      }\n\n      this.blobServiceClient = BlobServiceClient.fromConnectionString(connectionString);\n      \n      console.log('‚úÖ Azure Blob Storage initialized for GDPR service');\n    } catch (error) {\n      console.error('‚ùå Failed to initialize Blob Storage:', error);\n      throw error;\n    }\n  }\n\n  private async ensureContainers(): Promise<void> {\n    if (!this.database) throw new Error('Database not initialized');\n\n    for (const [containerName, containerId] of Object.entries(this.CONTAINERS)) {\n      try {\n        await this.database.containers.createIfNotExists({\n          id: containerId,\n          partitionKey: { paths: ['/partitionKey'] }\n        });\n        console.log(`‚úÖ Container ${containerId} ready`);\n      } catch (error) {\n        console.error(`‚ùå Failed to create container ${containerId}:`, error);\n      }\n    }\n  }\n\n  /**\n   * Record user consent with audit trail\n   */\n  async recordConsent(consent: Omit<UserConsent, 'id' | 'partitionKey' | 'lastUpdated'>): Promise<string> {\n    if (!this.database) await this.initialize();\n\n    try {\n      const consentId = `consent_${consent.userId}_${Date.now()}`;\n      const consentRecord: UserConsent = {\n        id: consentId,\n        ...consent,\n        lastUpdated: new Date().toISOString(),\n        partitionKey: consent.userId\n      };\n\n      const container = this.database!.container(this.CONTAINERS.CONSENTS);\n      await container.items.create(consentRecord);\n\n      // Create audit log entry\n      await this.createAuditLogEntry({\n        userId: consent.userId,\n        action: 'consent_recorded',\n        details: {\n          analytics: consent.analytics,\n          marketing: consent.marketing,\n          functional: consent.functional,\n          version: consent.version\n        },\n        ipAddress: consent.ipAddress,\n        userAgent: consent.userAgent\n      });\n\n      console.log(`‚úÖ Consent recorded for user ${consent.userId}`);\n      return consentId;\n    } catch (error) {\n      console.error('‚ùå Failed to record consent:', error);\n      throw new Error('Failed to record user consent');\n    }\n  }\n\n  /**\n   * Get latest user consent\n   */\n  async getConsent(userId: string): Promise<UserConsent | null> {\n    if (!this.database) await this.initialize();\n\n    try {\n      const container = this.database!.container(this.CONTAINERS.CONSENTS);\n      const query = {\n        query: 'SELECT * FROM c WHERE c.userId = @userId ORDER BY c.lastUpdated DESC',\n        parameters: [{ name: '@userId', value: userId }]\n      };\n\n      const { resources } = await container.items.query<UserConsent>(query, {\n        maxItemCount: 1,\n        partitionKey: userId\n      }).fetchNext();\n\n      return resources.length > 0 ? resources[0] : null;\n    } catch (error) {\n      console.error('‚ùå Failed to get consent:', error);\n      throw new Error('Failed to retrieve user consent');\n    }\n  }\n\n  /**\n   * Update user consent\n   */\n  async updateConsent(userId: string, updates: Partial<UserConsent>): Promise<void> {\n    if (!this.database) await this.initialize();\n\n    try {\n      const currentConsent = await this.getConsent(userId);\n      if (!currentConsent) {\n        throw new Error('No existing consent found for user');\n      }\n\n      const updatedConsent: UserConsent = {\n        ...currentConsent,\n        ...updates,\n        lastUpdated: new Date().toISOString()\n      };\n\n      const container = this.database!.container(this.CONTAINERS.CONSENTS);\n      await container.item(currentConsent.id, userId).replace(updatedConsent);\n\n      // Create audit log entry\n      await this.createAuditLogEntry({\n        userId,\n        action: 'consent_updated',\n        details: { updates }\n      });\n\n      console.log(`‚úÖ Consent updated for user ${userId}`);\n    } catch (error) {\n      console.error('‚ùå Failed to update consent:', error);\n      throw new Error('Failed to update user consent');\n    }\n  }\n\n  /**\n   * Request data deletion (GDPR Right to Erasure)\n   */\n  async requestDataDeletion(\n    userId: string,\n    requestedBy: string,\n    reason?: string,\n    ipAddress?: string,\n    userAgent?: string\n  ): Promise<string> {\n    if (!this.database) await this.initialize();\n\n    try {\n      const requestId = `del_${Date.now()}_${Math.random().toString(36).substring(2)}`;\n      const requestDate = new Date();\n      const scheduledDate = new Date(requestDate.getTime() + (30 * 24 * 60 * 60 * 1000)); // 30 days from now\n\n      const deletionRequest: DataDeletionRequest = {\n        id: requestId,\n        userId,\n        requestDate: requestDate.toISOString(),\n        requestedBy,\n        reason,\n        status: 'pending',\n        scheduledDate: scheduledDate.toISOString(),\n        deletedData: [],\n        auditTrail: [],\n        partitionKey: userId\n      };\n\n      const container = this.database!.container(this.CONTAINERS.DELETION_REQUESTS);\n      await container.items.create(deletionRequest);\n\n      // Create audit log entry\n      await this.createAuditLogEntry({\n        userId,\n        action: 'data_deletion_requested',\n        details: {\n          requestId,\n          requestedBy,\n          reason,\n          scheduledDate: scheduledDate.toISOString()\n        },\n        ipAddress,\n        userAgent\n      });\n\n      console.log(`‚úÖ Data deletion requested for user ${userId}, scheduled for ${scheduledDate.toDateString()}`);\n      return requestId;\n    } catch (error) {\n      console.error('‚ùå Failed to request data deletion:', error);\n      throw new Error('Failed to request data deletion');\n    }\n  }\n\n  /**\n   * Process data deletion (called by scheduled Azure Function)\n   */\n  async processDataDeletion(requestId: string): Promise<{ success: boolean; deletedData: string[]; errors: string[] }> {\n    if (!this.database) await this.initialize();\n\n    try {\n      const container = this.database!.container(this.CONTAINERS.DELETION_REQUESTS);\n      const { resource: request } = await container.item(requestId, requestId).read<DataDeletionRequest>();\n\n      if (!request) {\n        throw new Error('Deletion request not found');\n      }\n\n      if (request.status !== 'pending') {\n        throw new Error(`Cannot process request with status: ${request.status}`);\n      }\n\n      // Update status to processing\n      await container.item(requestId, request.partitionKey).patch([\n        { op: 'replace', path: '/status', value: 'processing' }\n      ]);\n\n      const deletedData: string[] = [];\n      const errors: string[] = [];\n\n      // Delete from Cosmos DB containers\n      const containersToDelete = [\n        'users',\n        'profiles', \n        'resumes',\n        'interviews',\n        'feedback',\n        'usage',\n        'notifications',\n        'emailVerifications'\n      ];\n\n      for (const containerName of containersToDelete) {\n        try {\n          const deleted = await this.deleteFromContainer(containerName, request.userId);\n          if (deleted > 0) {\n            deletedData.push(`${containerName} (${deleted} items)`);\n          }\n        } catch (error) {\n          const errorMsg = `Failed to delete from ${containerName}: ${error}`;\n          errors.push(errorMsg);\n          console.error(`‚ùå ${errorMsg}`);\n        }\n      }\n\n      // Delete from Azure Blob Storage\n      try {\n        const deletedBlobContainers = await this.deleteFromBlobStorage(request.userId);\n        if (deletedBlobContainers.length > 0) {\n          deletedData.push(`blob-storage (${deletedBlobContainers.join(', ')})`);\n        }\n      } catch (error) {\n        const errorMsg = `Failed to delete from blob storage: ${error}`;\n        errors.push(errorMsg);\n        console.error(`‚ùå ${errorMsg}`);\n      }\n\n      // Update request with results\n      const finalStatus = errors.length > 0 ? 'completed' : 'completed'; // Still completed even with some errors\n      await container.item(requestId, request.partitionKey).patch([\n        { op: 'replace', path: '/status', value: finalStatus },\n        { op: 'replace', path: '/completedDate', value: new Date().toISOString() },\n        { op: 'replace', path: '/deletedData', value: deletedData },\n        { op: 'replace', path: '/errors', value: errors }\n      ]);\n\n      // Create audit log entry\n      await this.createAuditLogEntry({\n        userId: request.userId,\n        action: 'data_deletion_processed',\n        details: {\n          requestId,\n          deletedData,\n          errors,\n          status: finalStatus\n        },\n        complianceOfficer: 'system'\n      });\n\n      console.log(`‚úÖ Data deletion processed for user ${request.userId}`);\n      console.log(`   Deleted: ${deletedData.join(', ')}`);\n      if (errors.length > 0) {\n        console.log(`   Errors: ${errors.join(', ')}`);\n      }\n\n      return { success: errors.length === 0, deletedData, errors };\n    } catch (error) {\n      console.error('‚ùå Failed to process data deletion:', error);\n      \n      // Update request status to failed\n      try {\n        const container = this.database!.container(this.CONTAINERS.DELETION_REQUESTS);\n        await container.item(requestId, requestId).patch([\n          { op: 'replace', path: '/status', value: 'failed' },\n          { op: 'replace', path: '/errors', value: [error instanceof Error ? error.message : 'Unknown error'] }\n        ]);\n      } catch (updateError) {\n        console.error('‚ùå Failed to update request status to failed:', updateError);\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Get pending deletion requests that are ready for processing\n   */\n  async getPendingDeletions(): Promise<DataDeletionRequest[]> {\n    if (!this.database) await this.initialize();\n\n    try {\n      const container = this.database!.container(this.CONTAINERS.DELETION_REQUESTS);\n      const now = new Date().toISOString();\n      \n      const query = {\n        query: 'SELECT * FROM c WHERE c.status = @status AND c.scheduledDate <= @now',\n        parameters: [\n          { name: '@status', value: 'pending' },\n          { name: '@now', value: now }\n        ]\n      };\n\n      const { resources } = await container.items.query<DataDeletionRequest>(query).fetchAll();\n      return resources;\n    } catch (error) {\n      console.error('‚ùå Failed to get pending deletions:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get deletion request status\n   */\n  async getDeletionRequestStatus(requestId: string): Promise<DataDeletionRequest | null> {\n    if (!this.database) await this.initialize();\n\n    try {\n      const container = this.database!.container(this.CONTAINERS.DELETION_REQUESTS);\n      const { resource } = await container.item(requestId, requestId).read<DataDeletionRequest>();\n      return resource || null;\n    } catch (error: any) {\n      if (error.code === 404) {\n        return null; // Request not found\n      }\n      console.error('‚ùå Failed to get deletion request status:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Export user data (GDPR Subject Access Request)\n   */\n  async exportUserData(userId: string): Promise<any> {\n    if (!this.database) await this.initialize();\n\n    try {\n      const exportData: any = {\n        userId,\n        exportDate: new Date().toISOString(),\n        data: {}\n      };\n\n      // Export from Cosmos DB containers\n      const containersToExport = ['users', 'profiles', 'resumes', 'interviews', 'usage'];\n      \n      for (const containerName of containersToExport) {\n        try {\n          const containerClient = this.database!.container(containerName);\n          const query = {\n            query: 'SELECT * FROM c WHERE c.userId = @userId',\n            parameters: [{ name: '@userId', value: userId }]\n          };\n\n          const { resources } = await containerClient.items.query(query, {\n            partitionKey: userId\n          }).fetchAll();\n\n          if (resources.length > 0) {\n            exportData.data[containerName] = resources;\n          }\n        } catch (error) {\n          console.warn(`Failed to export from ${containerName}:`, error);\n        }\n      }\n\n      // Export consent data\n      const consent = await this.getConsent(userId);\n      if (consent) {\n        exportData.data.consents = consent;\n      }\n\n      // Export audit logs related to this user\n      const auditLogs = await this.getAuditLogs(userId);\n      if (auditLogs.length > 0) {\n        exportData.data.auditLogs = auditLogs;\n      }\n\n      // Create audit log entry for data export\n      await this.createAuditLogEntry({\n        userId,\n        action: 'data_exported',\n        details: {\n          exportedContainers: Object.keys(exportData.data),\n          totalRecords: Object.values(exportData.data).flat().length\n        }\n      });\n\n      console.log(`‚úÖ User data exported for ${userId}`);\n      return exportData;\n    } catch (error) {\n      console.error('‚ùå Failed to export user data:', error);\n      throw new Error('Failed to export user data');\n    }\n  }\n\n  /**\n   * Create audit log entry\n   */\n  private async createAuditLogEntry(entry: Omit<AuditLogEntry, 'id' | 'timestamp' | 'partitionKey'>): Promise<void> {\n    if (!this.database) return;\n\n    try {\n      const auditEntry: AuditLogEntry = {\n        id: `audit_${Date.now()}_${Math.random().toString(36).substring(2)}`,\n        timestamp: new Date().toISOString(),\n        partitionKey: entry.userId,\n        ...entry\n      };\n\n      const container = this.database.container(this.CONTAINERS.AUDIT_LOG);\n      await container.items.create(auditEntry);\n    } catch (error) {\n      console.error('‚ùå Failed to create audit log entry:', error);\n      // Don't throw - audit logging failure shouldn't stop the main operation\n    }\n  }\n\n  /**\n   * Get audit logs for a user\n   */\n  async getAuditLogs(userId: string, limit: number = 100): Promise<AuditLogEntry[]> {\n    if (!this.database) await this.initialize();\n\n    try {\n      const container = this.database!.container(this.CONTAINERS.AUDIT_LOG);\n      const query = {\n        query: 'SELECT * FROM c WHERE c.userId = @userId ORDER BY c.timestamp DESC',\n        parameters: [{ name: '@userId', value: userId }]\n      };\n\n      const { resources } = await container.items.query<AuditLogEntry>(query, {\n        maxItemCount: limit,\n        partitionKey: userId\n      }).fetchNext();\n\n      return resources;\n    } catch (error) {\n      console.error('‚ùå Failed to get audit logs:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete user data from a specific Cosmos DB container\n   */\n  private async deleteFromContainer(containerName: string, userId: string): Promise<number> {\n    if (!this.database) return 0;\n\n    try {\n      const container = this.database.container(containerName);\n      const query = {\n        query: 'SELECT c.id FROM c WHERE c.userId = @userId',\n        parameters: [{ name: '@userId', value: userId }]\n      };\n\n      const { resources: items } = await container.items.query(query, {\n        partitionKey: userId\n      }).fetchAll();\n\n      let deletedCount = 0;\n      \n      // Delete in batches to avoid overwhelming the database\n      const batchSize = 25;\n      for (let i = 0; i < items.length; i += batchSize) {\n        const batch = items.slice(i, i + batchSize);\n        const deletePromises = batch.map(item => \n          container.item(item.id, userId).delete().catch(error => {\n            console.warn(`Failed to delete item ${item.id} from ${containerName}:`, error);\n            return null;\n          })\n        );\n        \n        const results = await Promise.all(deletePromises);\n        deletedCount += results.filter(result => result !== null).length;\n      }\n\n      return deletedCount;\n    } catch (error) {\n      console.error(`‚ùå Error deleting from container ${containerName}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete user files from Azure Blob Storage\n   */\n  private async deleteFromBlobStorage(userId: string): Promise<string[]> {\n    if (!this.blobServiceClient) return [];\n\n    const deletedContainers: string[] = [];\n    const userContainers = ['user-files', 'resumes', 'profile-pics', 'documents'];\n\n    for (const containerName of userContainers) {\n      try {\n        const containerClient = this.blobServiceClient.getContainerClient(containerName);\n        const prefix = `users/${userId}/`;\n        \n        let deletedBlobs = 0;\n        for await (const blob of containerClient.listBlobsFlat({ prefix })) {\n          try {\n            await containerClient.deleteBlob(blob.name);\n            deletedBlobs++;\n          } catch (error) {\n            console.warn(`Failed to delete blob ${blob.name}:`, error);\n          }\n        }\n\n        if (deletedBlobs > 0) {\n          deletedContainers.push(`${containerName} (${deletedBlobs} files)`);\n        }\n      } catch (error) {\n        console.warn(`Failed to access blob container ${containerName}:`, error);\n      }\n    }\n\n    return deletedContainers;\n  }\n\n  /**\n   * Anonymize analytics data for GDPR compliance\n   */\n  anonymizeAnalyticsData(data: {\n    userId: string;\n    sessionId: string;\n    event: string;\n    page: string;\n    metadata?: Record<string, any>;\n  }): AnonymizedAnalytics {\n    return {\n      id: `anon_${Date.now()}_${Math.random().toString(36).substring(2)}`,\n      timestamp: new Date().toISOString(),\n      event: data.event,\n      page: data.page,\n      userId: this.hashUserId(data.userId),\n      sessionId: this.hashSessionId(data.sessionId),\n      metadata: this.sanitizeMetadata(data.metadata || {}),\n      partitionKey: 'anonymized'\n    };\n  }\n\n  /**\n   * Privacy utility methods\n   */\n  maskEmail(email: string): string {\n    const [username, domain] = email.split('@');\n    const maskedUsername = username.length > 2 \n      ? username.charAt(0) + '*'.repeat(username.length - 2) + username.charAt(username.length - 1)\n      : '*'.repeat(username.length);\n    return `${maskedUsername}@${domain}`;\n  }\n\n  maskPhoneNumber(phone: string): string {\n    const cleaned = phone.replace(/\\D/g, '');\n    if (cleaned.length > 4) {\n      return cleaned.substring(0, 3) + '*'.repeat(cleaned.length - 6) + cleaned.substring(cleaned.length - 3);\n    }\n    return '*'.repeat(cleaned.length);\n  }\n\n  private hashUserId(userId: string): string {\n    return Buffer.from(userId + 'salt').toString('base64').substring(0, 12);\n  }\n\n  private hashSessionId(sessionId: string): string {\n    return Buffer.from(sessionId + 'salt').toString('base64').substring(0, 8);\n  }\n\n  private sanitizeMetadata(metadata: Record<string, any>): Record<string, any> {\n    const sanitized = { ...metadata };\n    \n    // Remove potential PII from metadata\n    const piiKeys = ['email', 'phone', 'name', 'address', 'ssn', 'creditCard', 'userId'];\n    piiKeys.forEach(key => {\n      if (sanitized[key]) {\n        delete sanitized[key];\n      }\n    });\n    \n    return sanitized;\n  }\n}\n\nexport const azureGDPRService = AzureGDPRService.getInstance();\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/services/azure-openai-enhanced.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[877,880],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[877,880],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":307,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":307,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10317,10320],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10317,10320],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Enhanced Azure OpenAI Service with Multi-Deployment Support\n * \n * This service provides intelligent model selection based on task type:\n * - gpt-35-turbo: Fast, cost-effective for simple tasks (relevancy scoring, basic Q&A)\n * - gpt-4o: Advanced reasoning for complex tasks (cover letters, resume tailoring)\n */\n\nimport { MigrationOpenAIClient as OpenAI } from '@/lib/azure-ai-foundry/clients/migration-wrapper';\nimport { fetchAzureSecrets } from '@/lib/azure-config-browser';\n\ninterface ModelConfiguration {\n  deployment: string;\n  temperature: number;\n  maxTokens: number;\n  topP?: number;\n  frequencyPenalty?: number;\n  presencePenalty?: number;\n}\n\ninterface TaskConfigurations {\n  [key: string]: ModelConfiguration;\n}\n\nexport class EnhancedAzureOpenAIService {\n  private clients: Map<string, OpenAI> = new Map();\n  private isInitialized = false;\n  private secrets: any = null;\n\n  // Task-specific configurations optimized for different models\n  private taskConfigurations: TaskConfigurations = {\n    // Fast tasks - use gpt-35-turbo for efficiency\n    'relevancy': {\n      deployment: 'gpt-4o',\n      temperature: 0.1,      // Low temperature for consistent scoring\n      maxTokens: 50,         // Short numeric response\n      topP: 0.9,\n      frequencyPenalty: 0.0,\n      presencePenalty: 0.0\n    },\n    \n    'questions': {\n      deployment: 'gpt-4o',\n      temperature: 0.5,      // Moderate creativity for question variety\n      maxTokens: 300,        // Multiple questions\n      topP: 0.9,\n      frequencyPenalty: 0.1,\n      presencePenalty: 0.1\n    },\n\n    // Complex tasks - use gpt-4o for quality\n    'cover-letter': {\n      deployment: 'gpt-4o',\n      temperature: 0.7,      // Balanced creativity for quality output\n      maxTokens: 1500,       // Full cover letter\n      topP: 0.9,\n      frequencyPenalty: 0.1,\n      presencePenalty: 0.1\n    },\n\n    'resume-tailor': {\n      deployment: 'gpt-4o',\n      temperature: 0.3,      // Lower temperature for precision\n      maxTokens: 2000,       // Full resume content\n      topP: 0.9,\n      frequencyPenalty: 0.1,\n      presencePenalty: 0.1\n    },\n\n    // Interview tasks - use gpt-4o for nuanced conversation\n    'interview': {\n      deployment: 'gpt-4o',\n      temperature: 0.7,      // Natural conversation\n      maxTokens: 200,        // Concise responses\n      topP: 0.9,\n      frequencyPenalty: 0.1,\n      presencePenalty: 0.1\n    }\n  };\n\n  /**\n   * Initialize the service with multiple deployment clients\n   */\n  async initialize(): Promise<boolean> {\n    try {\n      this.secrets = await fetchAzureSecrets();\n      \n      if (!this.secrets.azureOpenAIKey || !this.secrets.azureOpenAIEndpoint) {\n        console.warn('‚ö†Ô∏è Azure OpenAI credentials not available');\n        return false;\n      }\n\n      // Initialize clients for different deployments\n      const deployments = [\n        { name: 'gpt-4o', deployment: this.secrets.azureOpenAIGpt35Deployment || 'gpt-4o' },\n        { name: 'gpt-4o', deployment: this.secrets.azureOpenAIGpt4oDeployment || 'gpt-4o' },\n        { name: 'default', deployment: this.secrets.azureOpenAIDeployment }\n      ];\n\n      for (const { name, deployment } of deployments) {\n        if (deployment) {\n          const client = new OpenAI();\n          await client.init(); // Initialize the migration client\n          \n          this.clients.set(name, client);\n          console.log(`‚úÖ Azure OpenAI client initialized for ${name} (${deployment})`);\n        }\n      }\n\n      this.isInitialized = this.clients.size > 0;\n      \n      if (this.isInitialized) {\n        console.log(`‚úÖ Enhanced Azure OpenAI Service initialized with ${this.clients.size} clients`);\n      }\n      \n      return this.isInitialized;\n    } catch (error) {\n      console.error('‚ùå Failed to initialize Enhanced Azure OpenAI Service:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Generate content using the optimal model for the task\n   */\n  async generateContent(\n    prompt: string,\n    taskType: keyof TaskConfigurations,\n    customOptions?: Partial<ModelConfiguration>\n  ): Promise<string> {\n    if (!this.isInitialized) {\n      throw new Error('Enhanced Azure OpenAI Service not initialized');\n    }\n\n    const config = { ...this.taskConfigurations[taskType], ...customOptions };\n    const client = this.clients.get(config.deployment) || this.clients.get('default');\n    \n    if (!client) {\n      throw new Error(`No client available for deployment: ${config.deployment}`);\n    }\n\n    console.log(`üéØ Using ${config.deployment} for ${taskType} task`);\n\n    const messages = [{ role: 'user' as const, content: prompt }];\n\n    try {\n      const completion = await this.retryWithBackoff(async () => {\n        return await client.chat.completions.create({\n          model: config.deployment,\n          messages,\n          temperature: config.temperature,\n          max_tokens: config.maxTokens,\n          top_p: config.topP || 0.9,\n          frequency_penalty: config.frequencyPenalty || 0.1,\n          presence_penalty: config.presencePenalty || 0.1,\n        });\n      });\n\n      const content = completion.choices[0]?.message?.content;\n      if (!content) {\n        throw new Error(`Empty response from Azure OpenAI (${config.deployment})`);\n      }\n\n      return content;\n    } catch (error) {\n      console.error(`‚ùå Error generating content with ${config.deployment}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Generate cover letter using gpt-4o for high quality\n   */\n  async generateCoverLetter(resumeText: string, jobDescription: string): Promise<string> {\n    const prompt = `You are an expert career coach and professional writer. Please generate a compelling cover letter based on the provided resume and job description.\n\nJOB DESCRIPTION:\n${jobDescription}\n\nRESUME:\n${resumeText}\n\nPlease generate a cover letter that:\n1. Is tailored to the specific job description\n2. Highlights the most relevant skills and experiences from the resume\n3. Has a professional and engaging tone\n4. Is well-structured and easy to read\n5. Is approximately 3-4 paragraphs long\n\nReturn ONLY the cover letter content with no additional commentary or explanations.`;\n\n    return await this.generateContent(prompt, 'cover-letter');\n  }\n\n  /**\n   * Calculate relevancy score using gpt-35-turbo for efficiency\n   */\n  async calculateRelevancy(resumeText: string, jobDescription: string): Promise<number> {\n    const prompt = `You are an expert ATS (Applicant Tracking System) analyzer. Please analyze the relevancy between this resume and job description.\n\nJOB DESCRIPTION:\n${jobDescription}\n\nRESUME:\n${resumeText}\n\nAnalyze the match between the resume and job description considering:\n1. Skills alignment (technical and soft skills)\n2. Experience relevance (years and type of experience)\n3. Education and certifications match\n4. Industry experience\n5. Role responsibilities alignment\n6. Keywords and terminology match\n\nReturn ONLY a single number between 0 and 100 representing the percentage match/relevancy score. No explanations or additional text.`;\n\n    const response = await this.generateContent(prompt, 'relevancy');\n    \n    // Extract number from response\n    const scoreMatch = response.trim().match(/\\d+/);\n    if (!scoreMatch) {\n      throw new Error('Could not extract relevancy score from response');\n    }\n    \n    const score = parseInt(scoreMatch[0], 10);\n    return Math.max(0, Math.min(100, score)); // Ensure score is between 0-100\n  }\n\n  /**\n   * Tailor resume using gpt-4o for quality\n   */\n  async tailorResume(resumeText: string, jobDescription: string): Promise<string> {\n    const prompt = `You are an expert resume writer and ATS optimization specialist. Please tailor this resume to better match the following job description for maximum ATS compatibility and relevance.\n\nJOB DESCRIPTION:\n${jobDescription}\n\nCURRENT RESUME:\n${resumeText}\n\nPlease provide a tailored version of the resume that:\n1. Uses keywords and phrases directly from the job description\n2. Highlights relevant skills and experiences that match the job requirements\n3. Maintains professional formatting and ATS-friendly structure\n4. Uses strong action verbs and quantifiable achievements\n5. Keeps the same overall length and format structure\n6. Optimizes for Applicant Tracking Systems (ATS)\n7. Ensures keyword density without keyword stuffing\n\nReturn ONLY the tailored resume content with no additional commentary or explanations.`;\n\n    return await this.generateContent(prompt, 'resume-tailor');\n  }\n\n  /**\n   * Generate interview questions using gpt-35-turbo for efficiency\n   */\n  async generateQuestions(resumeInfo: {name: string, experience: string, education: string, skills: string}): Promise<string[]> {\n    const prompt = `You are an experienced interviewer. Based on the following resume information, generate 5 relevant interview questions that would help assess this candidate's qualifications and fit for their field.\n\nRESUME INFORMATION:\nName: ${resumeInfo.name}\nExperience: ${resumeInfo.experience}\nEducation: ${resumeInfo.education}\nSkills: ${resumeInfo.skills}\n\nGenerate questions that:\n1. Are specific to their experience level and field\n2. Assess both technical and behavioral competencies\n3. Are professional and engaging\n4. Would help determine cultural fit\n5. Allow the candidate to showcase their strengths\n\nFormat: Return exactly 5 questions, each on a new line, numbered 1-5. No additional text or explanations.`;\n\n    const response = await this.generateContent(prompt, 'questions');\n    \n    // Parse questions from response\n    const questions = response\n      .split('\\n')\n      .map(line => line.trim())\n      .filter(line => line.length > 0)\n      .map(line => line.replace(/^\\d+\\.\\s*/, '')) // Remove numbering\n      .filter(line => line.length > 0)\n      .slice(0, 5); // Ensure max 5 questions\n\n    if (questions.length === 0) {\n      throw new Error('No questions could be parsed from response');\n    }\n\n    return questions;\n  }\n\n  /**\n   * Retry mechanism with exponential backoff for rate limiting\n   */\n  private async retryWithBackoff<T>(\n    operation: () => Promise<T>,\n    maxRetries: number = 3,\n    baseDelay: number = 1000\n  ): Promise<T> {\n    let lastError: Error;\n    \n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\n      try {\n        return await operation();\n      } catch (error: any) {\n        lastError = error;\n        \n        // Don't retry on non-retryable errors\n        if (error.status && ![429, 500, 502, 503, 504].includes(error.status)) {\n          throw error;\n        }\n        \n        if (attempt === maxRetries) {\n          throw error;\n        }\n        \n        // Calculate delay with exponential backoff\n        const delay = error.status === 429 \n          ? parseInt(error.headers?.['retry-after'] || '10') * 1000\n          : baseDelay * Math.pow(2, attempt);\n        \n        console.log(`‚è≥ Retrying in ${delay}ms (attempt ${attempt + 1}/${maxRetries + 1})`);\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n    \n    throw lastError!;\n  }\n\n  /**\n   * Check if service is ready\n   */\n  isReady(): boolean {\n    return this.isInitialized && this.clients.size > 0;\n  }\n\n  /**\n   * Get available deployments\n   */\n  getAvailableDeployments(): string[] {\n    return Array.from(this.clients.keys());\n  }\n\n  /**\n   * Dispose of resources\n   */\n  dispose(): void {\n    this.clients.clear();\n    this.isInitialized = false;\n    console.log('üßπ Enhanced Azure OpenAI Service disposed');\n  }\n}\n\n// Export singleton instance\nexport const enhancedAzureOpenAIService = new EnhancedAzureOpenAIService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/services/azure-openai-service.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'OpenAI' is defined but never used.","line":2,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":14}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AzureOpenAIService } from './azure-openai-service';\nimport OpenAI from 'openai';\n\n// Mock OpenAI client\nconst mockCreateCompletion = jest.fn();\njest.mock('openai', () => {\n  return {\n    __esModule: true,\n    default: jest.fn().mockImplementation(() => ({\n      chat: {\n        completions: {\n          create: mockCreateCompletion\n        }\n      }\n    }))\n  };\n});\n\n// Mock the fetchAzureSecrets function\njest.mock('@/lib/azure-config', () => ({\n  fetchAzureSecrets: jest.fn().mockResolvedValue({\n    azureOpenAIKey: 'mock-key',\n    azureOpenAIEndpoint: 'mock-endpoint',\n    azureOpenAIDeployment: 'mock-deployment'\n  })\n}));\n\ndescribe('AzureOpenAIService - Unit Tests', () => {\n  let service: AzureOpenAIService;\n\n  beforeEach(async () => {\n    // Reset mock before each test\n    mockCreateCompletion.mockReset();\n    mockCreateCompletion.mockResolvedValue({\n      choices: [{\n        message: {\n          content: 'This is a mock interview question response.'\n        }\n      }]\n    });\n    \n    service = new AzureOpenAIService();\n    await service.initialize();\n  });\n\n  afterEach(() => {\n    service.dispose();\n    jest.clearAllMocks();\n  });\n\n  describe('Opening Message Behavior', () => {\n    it('should include preliminary question when preliminaryCollected is false', async () => {\n      // By default, preliminaryCollected is false\n      const response = await service.startInterviewConversation();\n      \n      expect(response.content).toContain(\"Hello! I'm excited to interview you today\");\n      expect(response.content).toContain(\"tell me about your current role, your years of experience, and the main technologies or skills you work with\");\n      expect(response.questionNumber).toBe(1);\n      expect(response.isComplete).toBe(false);\n    });\n\n    it('should skip preliminary and ask domain-specific question when preliminaryCollected is true', async () => {\n      // Set preliminaryCollected to true before starting\n      service.setInterviewContext({ \n        type: 'technical',\n        preliminaryCollected: true \n      });\n      \n      const response = await service.startInterviewConversation();\n      \n      expect(response.content).toContain(\"Hello! I'm excited to interview you today\");\n      // Should NOT contain preliminary question\n      expect(response.content).not.toContain(\"tell me about your current role\");\n      // Should contain a technical question instead\n      expect(response.content).toMatch(/technical challenge|array and a linked list|system design/i);\n      expect(response.questionNumber).toBe(1);\n      expect(response.isComplete).toBe(false);\n    });\n\n    it('should generate behavioral question when type is behavioral and preliminaryCollected is true', async () => {\n      service.setInterviewContext({ \n        type: 'behavioral',\n        preliminaryCollected: true \n      });\n      \n      const response = await service.startInterviewConversation();\n      \n      expect(response.content).toContain(\"Hello! I'm excited to interview you today\");\n      expect(response.content).not.toContain(\"tell me about your current role\");\n      // Should contain a behavioral question\n      expect(response.content).toMatch(/team member|lead a project|initiative/i);\n      expect(response.questionNumber).toBe(1);\n    });\n\n    it('should generate general question when type is general and preliminaryCollected is true', async () => {\n      service.setInterviewContext({ \n        type: 'general',\n        preliminaryCollected: true,\n        position: 'Software Engineer'\n      });\n      \n      const response = await service.startInterviewConversation();\n      \n      expect(response.content).toContain(\"Hello! I'm excited to interview you today\");\n      expect(response.content).toContain(\"Software Engineer position\");\n      expect(response.content).not.toContain(\"tell me about your current role\");\n      // Should contain a general interview question\n      expect(response.content).toMatch(/interests you about|career goals|motivated/i);\n      expect(response.questionNumber).toBe(1);\n    });\n  });\n\n  describe('processUserResponse - Preliminary Flag Transition', () => {\n    it('should transition from preliminary to interview phase correctly', async () => {\n      // Start the interview with preliminaryCollected = false (default)\n      await service.startInterviewConversation();\n      \n      // Answer the single preliminary question\n      const response = await service.processUserResponse('I am a Senior Software Engineer with 5 years of experience working primarily with React, Node.js, and AWS');\n      \n      // Should thank for info and provide first real question\n      expect(response.content).toContain(\"Thank you for that information! Now let's begin the interview\");\n      expect(response.questionNumber).toBe(1); // First real question\n      expect(response.isComplete).toBe(false);\n      \n      // Should contain a real interview question based on type\n      expect(response.content).toMatch(/technical challenge|difference between|motivated/i);\n      expect(response.followUpSuggestions).toBeDefined();\n      expect(response.followUpSuggestions?.length).toBeGreaterThan(0);\n    });\n\n    it('should set preliminaryCollected flag to true after processing first response', async () => {\n      service.setInterviewContext({ type: 'technical' });\n      \n      // Start the interview - preliminaryCollected should be false\n      const startResponse = await service.startInterviewConversation();\n      expect(startResponse.content).toContain(\"tell me about your current role\");\n      \n      // Process the preliminary response\n      const response = await service.processUserResponse('Frontend Developer with 3 years of experience in React and TypeScript');\n      \n      // Verify the flag was set and we transitioned to real questions\n      expect(response.questionNumber).toBe(1); // First real question\n      expect(response.content).toContain(\"Thank you for that information\");\n      expect(response.content).toContain(\"Now let's begin the interview\");\n      \n      // The response should include a technical question\n      expect(response.content).toMatch(/array and a linked list|technical challenge|system/i);\n      \n      // Subsequent responses should increment question count normally\n      mockCreateCompletion.mockResolvedValueOnce({\n        choices: [{\n          message: {\n            content: 'Great answer! Can you elaborate on the performance implications?'\n          }\n        }]\n      });\n      \n      const response2 = await service.processUserResponse('I would consider time complexity...');\n      expect(response2.questionNumber).toBe(2); // Second real question\n      expect(response2.content).toContain('Great answer');\n    });\n\n    it('should return first question immediately after preliminary response', async () => {\n      service.setInterviewContext({ \n        type: 'behavioral',\n        company: 'Tech Corp'\n      });\n      \n      // Start the interview\n      const start = await service.startInterviewConversation();\n      expect(start.content).toContain(\"tell me about your current role\");\n      expect(start.questionNumber).toBe(1);\n      \n      // Process preliminary response - should immediately get first real question\n      const response = await service.processUserResponse('Engineering Manager with 10 years of experience');\n      \n      // Should get acknowledgment + first behavioral question\n      expect(response.content).toContain(\"Thank you for that information\");\n      expect(response.content).toContain(\"Now let's begin the interview\");\n      expect(response.content).toMatch(/difficult team member|lead a project/i);\n      expect(response.questionNumber).toBe(1);\n      expect(response.followUpSuggestions).toEqual([\n        \"What was the outcome?\",\n        \"What did you learn?\",\n        \"How would you handle it now?\"\n      ]);\n    });\n\n    it('should generate appropriate first question based on difficulty level', async () => {\n      // Test easy difficulty\n      service.setInterviewContext({ \n        type: 'technical',\n        difficulty: 'easy',\n        preliminaryCollected: true\n      });\n      \n      let response = await service.startInterviewConversation();\n      expect(response.content).toContain(\"difference between an array and a linked list\");\n      \n      // Test hard difficulty\n      service.clearConversation();\n      service.setInterviewContext({ \n        type: 'technical',\n        difficulty: 'hard',\n        preliminaryCollected: true\n      });\n      \n      response = await service.startInterviewConversation();\n      expect(response.content).toContain(\"distributed caching system\");\n      \n      // Test medium/default difficulty - the service uses undefined difficulty which defaults to medium\n      service.clearConversation();\n      service.setInterviewContext({ \n        type: 'technical',\n        preliminaryCollected: true,\n        difficulty: undefined // explicitly set to undefined to test default behavior\n      });\n      \n      response = await service.startInterviewConversation();\n      expect(response.content).toContain(\"recent technical challenge\");\n    });\n  });\n\n  describe('Question Count and Completion', () => {\n    it('should track question count correctly and mark as complete when reaching max', async () => {\n      // Set a low max for testing\n      service.setInterviewContext({ \n        type: 'technical',\n        preliminaryCollected: true,\n        maxQuestions: 3,\n        currentQuestionCount: 1 // Starting at question 1 after startInterviewConversation\n      });\n      \n      // Mock responses for each question\n      mockCreateCompletion.mockResolvedValueOnce({\n        choices: [{\n          message: { content: 'Good answer! Next question: How do you handle errors?' }\n        }]\n      });\n      \n      // Question 1 -> 2\n      const response1 = await service.processUserResponse('I would use try-catch blocks...');\n      expect(response1.questionNumber).toBe(2);\n      expect(response1.isComplete).toBe(false);\n      \n      mockCreateCompletion.mockResolvedValueOnce({\n        choices: [{\n          message: { content: 'Excellent! Final question: What is your testing strategy?' }\n        }]\n      });\n      \n      // Question 2 -> 3 (should be marked as complete)\n      const response2 = await service.processUserResponse('I follow TDD principles...');\n      expect(response2.questionNumber).toBe(3);\n      expect(response2.isComplete).toBe(true); // Reached max questions\n    });\n\n    it('should handle rate limiting with fallback response', async () => {\n      service.setInterviewContext({ \n        type: 'behavioral',\n        preliminaryCollected: true,\n        currentQuestionCount: 1 // Starting at question 1\n      });\n      \n      // Mock all retry attempts to fail with 429\n      mockCreateCompletion.mockRejectedValue({\n        status: 429,\n        headers: { 'retry-after': '1' }\n      });\n      \n      const response = await service.processUserResponse('I handled the situation by...');\n      \n      // Should get a fallback response\n      expect(response.content).toMatch(/Thank you for sharing|sounds challenging|Interesting/i);\n      expect(response.questionNumber).toBe(2);\n      expect(response.isComplete).toBe(false);\n      expect(response.followUpSuggestions).toBeDefined();\n    });\n  });\n\n  describe('State Management', () => {\n    it('should reset state correctly with clearConversation', async () => {\n      // Set up some state\n      service.setInterviewContext({ \n        type: 'technical',\n        preliminaryCollected: false,\n        currentQuestionCount: 0\n      });\n      \n      await service.startInterviewConversation();\n      await service.processUserResponse('Data Scientist with ML expertise');\n      \n      // Verify state has changed\n      const history = service.getConversationHistory();\n      expect(history.length).toBeGreaterThan(0);\n      \n      // Clear conversation\n      service.clearConversation();\n      \n      // Verify state is reset\n      const newHistory = service.getConversationHistory();\n      expect(newHistory.length).toBe(0);\n      \n      // Should start fresh with preliminary question\n      const response = await service.startInterviewConversation();\n      expect(response.content).toContain(\"tell me about your current role\");\n      expect(response.questionNumber).toBe(1);\n    });\n\n    it('should preserve interview context settings when clearing conversation', async () => {\n      service.setInterviewContext({ \n        type: 'behavioral',\n        company: 'Google',\n        position: 'Senior Engineer',\n        maxQuestions: 15\n      });\n      \n      await service.startInterviewConversation();\n      service.clearConversation();\n      \n      // Context type should be preserved, but state should be reset\n      const response = await service.startInterviewConversation();\n      expect(response.content).toContain(\"Senior Engineer position\");\n      expect(response.content).toContain(\"tell me about your current role\");\n    });\n  });\n\n  describe('Interview Context and Follow-up Suggestions', () => {\n    it('should generate context-appropriate follow-up suggestions', async () => {\n      // Technical interview\n      service.setInterviewContext({ \n        type: 'technical',\n        preliminaryCollected: true\n      });\n      \n      await service.startInterviewConversation();\n      const techResponse = await service.processUserResponse('I would use a microservices architecture...');\n      \n      expect(techResponse.followUpSuggestions).toContain(\"Can you explain your thought process?\");\n      expect(techResponse.followUpSuggestions).toContain(\"What would you do differently?\");\n      expect(techResponse.followUpSuggestions).toContain(\"How would this scale?\");\n      \n      // Behavioral interview\n      service.clearConversation();\n      service.setInterviewContext({ \n        type: 'behavioral',\n        preliminaryCollected: true\n      });\n      \n      await service.startInterviewConversation();\n      const behavioralResponse = await service.processUserResponse('I led a team of 5 engineers...');\n      \n      expect(behavioralResponse.followUpSuggestions).toContain(\"What was the outcome?\");\n      expect(behavioralResponse.followUpSuggestions).toContain(\"What did you learn?\");\n      expect(behavioralResponse.followUpSuggestions).toContain(\"How would you handle it now?\");\n    });\n\n    it('should handle edge cases with maxQuestions', async () => {\n      // Test with exactly maxQuestions\n      service.setInterviewContext({ \n        type: 'general',\n        preliminaryCollected: true,\n        currentQuestionCount: 9,\n        maxQuestions: 10\n      });\n      \n      mockCreateCompletion.mockResolvedValueOnce({\n        choices: [{\n          message: { content: 'Thank you for your answer. That concludes our interview!' }\n        }]\n      });\n      \n      const response = await service.processUserResponse('My greatest achievement was...');\n      expect(response.questionNumber).toBe(10);\n      expect(response.isComplete).toBe(true);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/services/azure-openai-service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[318,321],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[318,321],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":11,"column":23,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":11,"endColumn":52},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2200,2203],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2200,2203],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":434,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":434,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17346,17349],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17346,17349],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":470,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":470,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18531,18534],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18531,18534],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'userResponse' is defined but never used.","line":498,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":498,"endColumn":43}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MigrationOpenAIClient as OpenAI } from '@/lib/azure-ai-foundry/clients/migration-wrapper';\nimport { InterviewContext } from '@/lib/types/voice';\n\n// Client-side safety check\nconst isClient = typeof window !== 'undefined';\n\n// Only import server-side dependencies when running on server\nlet fetchAzureSecrets: any = null;\n\nif (!isClient) {\n  const azureConfig = require('@/lib/azure-config');\n  fetchAzureSecrets = azureConfig.fetchAzureSecrets;\n}\n\nexport interface ConversationMessage {\n  role: 'system' | 'user' | 'assistant';\n  content: string;\n}\n\nexport interface GenerationResponse {\n  content: string;\n  questionNumber?: number;\n  isComplete?: boolean;\n  followUpSuggestions?: string[];\n}\n\nexport class AzureOpenAIService {\n  private client: OpenAI | null = null;\n  private isInitialized = false;\n  private deployment: string = '';\n  private conversationHistory: ConversationMessage[] = [];\n  private interviewContext: InterviewContext = { \n    type: 'general',\n    preliminaryCollected: false,\n    currentQuestionCount: 0,\n    maxQuestions: 10\n  };\n\n  /**\n   * Initialize the Azure OpenAI service\n   */\n  async initialize(): Promise<boolean> {\n    if (isClient) {\n      console.warn('[Azure OpenAI Service] Running on client side - service disabled');\n      return false;\n    }\n    \n    try {\n      const secrets = await fetchAzureSecrets();\n      \n      if (!secrets.azureOpenAIKey || !secrets.azureOpenAIEndpoint) {\n        console.warn('‚ö†Ô∏è Azure OpenAI credentials not available');\n        return false;\n      }\n\n      this.deployment = secrets.azureOpenAIDeployment;\n      this.client = new OpenAI();\n      await this.client.init(); // Initialize the migration client\n\n      // Test the connection with a simple request\n      try {\n        console.log(`üîÑ Testing Azure OpenAI connection with deployment: ${this.deployment}`);\n        await this.client.chat.completions.create({\n          model: this.deployment,\n          messages: [{ role: 'user', content: 'Test' }],\n          max_tokens: 5,\n        });\n        \n        this.isInitialized = true;\n        console.log('‚úÖ Azure OpenAI Service initialized and tested successfully');\n        return true;\n      } catch (testError: any) {\n        console.error('‚ùå Azure OpenAI connection test failed:', testError.message);\n        console.error('üìã Configuration details:', {\n          endpoint: secrets.azureOpenAIEndpoint,\n          deployment: this.deployment,\n          hasApiKey: !!secrets.azureOpenAIKey\n        });\n        \n        if (testError.status === 401) {\n          console.error('üîê Authentication Error (401):');\n          console.error('   ‚Ä¢ Your API key might be invalid or expired');\n          console.error('   ‚Ä¢ Check your Azure OpenAI resource for the correct key');\n        } else if (testError.status === 404) {\n          console.error('üìç Resource Not Found (404):');\n          console.error('   ‚Ä¢ The deployment \"' + this.deployment + '\" does not exist');\n          console.error('   ‚Ä¢ Your endpoint URL might be incorrect');\n          console.error('   ‚Ä¢ No deployments might exist in your Azure OpenAI resource');\n          console.error('üí° To fix this:');\n          console.error('   1. Log into portal.azure.com');\n          console.error('   2. Navigate to your Azure OpenAI resource');\n          console.error('   3. Check the \"Model deployments\" or \"Deployments\" section');\n          console.error('   4. Create a deployment (e.g., gpt-35-turbo, gpt-4)');\n          console.error('   5. Update AZURE_OPENAI_DEPLOYMENT in your .env.local file');\n        } else if (testError.status === 403) {\n          console.error('üö´ Access Forbidden (403):');\n          console.error('   ‚Ä¢ Your API key might not have the right permissions');\n          console.error('   ‚Ä¢ Your Azure OpenAI resource might not be properly configured');\n        } else {\n          console.error(`‚ùì Unexpected error (${testError.status || 'Unknown'}):`);\n          console.error('   ‚Ä¢ Check your Azure OpenAI resource configuration');\n          console.error('   ‚Ä¢ Verify your subscription and resource status');\n        }\n        return false;\n      }\n    } catch (error) {\n      console.error('‚ùå Failed to initialize Azure OpenAI Service:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Set interview context for conversation management\n   */\n  setInterviewContext(context: Partial<InterviewContext>): void {\n    const previousState = { ...this.interviewContext };\n    \n    // Merge context while preserving defaults\n    this.interviewContext = { \n      ...this.interviewContext, \n      ...context,\n      // Ensure defaults are set if not provided\n      preliminaryCollected: context.preliminaryCollected ?? this.interviewContext.preliminaryCollected ?? false,\n      currentQuestionCount: context.currentQuestionCount ?? this.interviewContext.currentQuestionCount ?? 0,\n      maxQuestions: context.maxQuestions ?? this.interviewContext.maxQuestions ?? 10\n    };\n    \n    // Log state transition\n    console.log('üìã Interview context updated:', this.interviewContext);\n    console.debug('üîÑ [STATE_TRANSITION] Interview context changed', {\n      from: previousState,\n      to: this.interviewContext,\n      changes: {\n        preliminaryCollected: previousState.preliminaryCollected !== this.interviewContext.preliminaryCollected,\n        currentQuestionCount: previousState.currentQuestionCount !== this.interviewContext.currentQuestionCount,\n        maxQuestions: previousState.maxQuestions !== this.interviewContext.maxQuestions\n      },\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  /**\n   * Get system prompt based on interview context\n   */\n  private getSystemPrompt(): string {\n    const { type, position, company, difficulty } = this.interviewContext;\n    \n    let basePrompt = `You are an experienced AI interviewer conducting a ${type} interview. Your goal is to create an engaging, realistic interview experience that helps candidates prepare effectively.\n\nCore Interview Principles:\n1. Ask relevant, progressively challenging questions\n2. Provide thoughtful follow-ups based on candidate responses\n3. Maintain a professional yet conversational tone\n4. Show genuine interest in the candidate's experiences\n5. Adapt question difficulty based on their expertise level\n6. Give brief encouraging feedback when appropriate\n7. Keep responses concise (50-80 words) and ask one question at a time\n\n`;\n\n    if (position) {\n      basePrompt += `Target Position: ${position}\\n`;\n    }\n    if (company) {\n      basePrompt += `Company Context: ${company}\\n`;\n    }\n    if (difficulty) {\n      basePrompt += `Difficulty Level: ${difficulty}\\n`;\n    }\n\n    switch (type) {\n      case 'technical':\n        basePrompt += `\\nTechnical Interview Focus:\n- Start with foundational concepts, then progress to complex scenarios\n- Ask about specific technologies, algorithms, and system design\n- Explore problem-solving approaches and trade-offs\n- Include practical coding scenarios and architecture discussions\n- Ask \"How would you optimize this?\" or \"What challenges might arise?\"\n- Focus on real-world application of technical knowledge`;\n        break;\n      case 'behavioral':\n        basePrompt += `\\nBehavioral Interview Focus:\n- Use STAR method (Situation, Task, Action, Result) evaluation\n- Ask about leadership, teamwork, conflict resolution, and growth\n- Explore past experiences with specific examples\n- Ask follow-ups like \"What would you do differently?\" or \"What did you learn?\"\n- Focus on cultural fit, communication skills, and problem-solving approach\n- Include questions about handling failures and difficult situations`;\n        break;\n      default:\n        basePrompt += `\\nGeneral Interview Focus:\n- Balance background, experience, motivation, and role fit\n- Ask about career goals, interests, and what excites them about the opportunity\n- Explore their understanding of the role and company\n- Include questions about learning style and professional development\n- Ask about their greatest achievements and challenges`;\n    }\n\n    basePrompt += `\\n\\nInterview Style:\n- Be conversational and show active listening\n- Acknowledge good points: \"That's a great approach\" or \"Interesting perspective\"\n- Ask natural follow-ups that build on their responses\n- Create a comfortable environment that encourages detailed answers`;\n    \n    return basePrompt;\n  }\n\n  /**\n   * Start a new interview conversation\n   */\n  async startInterviewConversation(): Promise<GenerationResponse> {\n    console.log('üöÄ [TRACE] startInterviewConversation called', {\n      timestamp: new Date().toISOString(),\n      interviewContext: this.interviewContext,\n      isInitialized: this.isInitialized,\n      callStack: new Error().stack?.split('\\n').slice(0, 5).join('\\n')\n    });\n    \n    if (!this.isInitialized || !this.client) {\n      throw new Error('Azure OpenAI Service not initialized');\n    }\n\n    // Reset conversation history\n    this.conversationHistory = [\n      { role: 'system', content: this.getSystemPrompt() }\n    ];\n\n    const openingMessage = this.getOpeningMessage();\n    \n    console.log('üì¢ [TRACE] Opening message generated', {\n      message: openingMessage,\n      interviewType: this.interviewContext.type,\n      isPreliminaryQuestion: openingMessage.includes('tell me about your current role'),\n      timestamp: new Date().toISOString()\n    });\n    \n    this.conversationHistory.push({ role: 'assistant', content: openingMessage });\n\n    return {\n      content: openingMessage,\n      questionNumber: 1,\n      isComplete: false\n    };\n  }\n\n  /**\n   * Get opening message based on interview type\n   */\n  private getOpeningMessage(): string {\n    const { type, position, preliminaryCollected } = this.interviewContext;\n    \n    console.log('üéØ [TRACE] getOpeningMessage called', {\n      type,\n      position,\n      preliminaryCollected,\n      timestamp: new Date().toISOString(),\n      callStack: new Error().stack?.split('\\n').slice(0, 5).join('\\n')\n    });\n    \n    // Always greet user\n    let greeting = \"Hello! I'm excited to interview you today. \";\n    \n    if (position) {\n      greeting += `We'll be discussing the ${position} position. `;\n    }\n    \n    // Build opening message dynamically based on preliminaryCollected flag\n    if (!preliminaryCollected) {\n      // Append the single preliminary request\n      return greeting + \"Before we dive into the main interview, I'd like to get to know you better. Could you please tell me about your current role, your years of experience, and the main technologies or skills you work with?\";\n    } else {\n      // Immediately ask first domain-specific question\n      return greeting + this.generateFirstInterviewQuestion();\n    }\n  }\n\n  /**\n   * Generate the first interview question based on interview type\n   */\n  private generateFirstInterviewQuestion(): string {\n    const { type, position, company, difficulty } = this.interviewContext;\n    \n    switch (type) {\n      case 'technical':\n        if (difficulty === 'easy') {\n          return \"Let's start with some fundamentals. Can you explain the difference between an array and a linked list, and when you would choose one over the other?\";\n        } else if (difficulty === 'hard') {\n          return \"Let's dive into system design. How would you design a distributed caching system that can handle millions of requests per second with sub-millisecond latency?\";\n        } else {\n          return \"To get started, can you walk me through a recent technical challenge you faced and how you approached solving it?\";\n        }\n        \n      case 'behavioral':\n        if (company) {\n          return `Tell me about a time when you had to work with a difficult team member. How did you handle the situation and what was the outcome?`;\n        } else {\n          return \"Can you describe a situation where you had to lead a project or initiative? What was your approach and what did you learn from the experience?\";\n        }\n        \n      default:\n        if (position) {\n          return `What specifically interests you about this ${position} role, and how does it align with your career goals?`;\n        } else {\n          return \"What motivated you to pursue this opportunity, and what unique value do you think you can bring to our team?\";\n        }\n    }\n  }\n\n  /**\n   * Process user response and generate next question or comment\n   */\n  async processUserResponse(userResponse: string): Promise<GenerationResponse> {\n    console.log('üí¨ [TRACE] processUserResponse called', {\n      userResponse: userResponse.substring(0, 100) + '...',\n      historyLength: this.conversationHistory.length,\n      preliminaryCollected: this.interviewContext.preliminaryCollected,\n      currentQuestionCount: this.interviewContext.currentQuestionCount,\n      maxQuestions: this.interviewContext.maxQuestions,\n      timestamp: new Date().toISOString(),\n      callStack: new Error().stack?.split('\\n').slice(0, 5).join('\\n')\n    });\n    \n    if (!this.isInitialized || !this.client) {\n      throw new Error('Azure OpenAI Service not initialized');\n    }\n\n    // Check if we're still collecting preliminary information\n    if (!this.interviewContext.preliminaryCollected) {\n      console.debug('üéØ [PRELIMINARY] Processing preliminary response', {\n        userResponseLength: userResponse.length,\n        timestamp: new Date().toISOString()\n      });\n      \n      // Process the preliminary response and set flag\n      const previousPreliminaryState = this.interviewContext.preliminaryCollected;\n      this.interviewContext.preliminaryCollected = true;\n      \n      console.debug('üîÑ [STATE_TRANSITION] preliminaryCollected: false ‚Üí true', {\n        previousState: previousPreliminaryState,\n        newState: true,\n        timestamp: new Date().toISOString()\n      });\n      \n      // Keep currentQuestionCount at 0 since we haven't asked real questions yet\n      this.interviewContext.currentQuestionCount = 0;\n      \n      // Generate first real interview question\n      const firstQuestion = this.generateFirstInterviewQuestion();\n      this.conversationHistory.push({ role: 'assistant', content: firstQuestion });\n      \n      // Increment to 1 for the first real question\n      const previousQuestionCount = this.interviewContext.currentQuestionCount;\n      this.interviewContext.currentQuestionCount = 1;\n      \n      console.debug('üîÑ [STATE_TRANSITION] questionNumber: 0 ‚Üí 1', {\n        previousCount: previousQuestionCount,\n        newCount: 1,\n        isFirstRealQuestion: true,\n        timestamp: new Date().toISOString()\n      });\n      \n      return {\n        content: `Thank you for that information! Now let's begin the interview.\\n\\n${firstQuestion}`,\n        questionNumber: 1,\n        isComplete: false,\n        followUpSuggestions: this.generateFollowUpSuggestions()\n      };\n    }\n\n    // Normal interview flow - add user response to conversation history\n    this.conversationHistory.push({ role: 'user', content: userResponse });\n    \n    console.log('üìù [TRACE] User response added to history', {\n      historyLength: this.conversationHistory.length,\n      timestamp: new Date().toISOString()\n    });\n\n    try {\n      const completion = await this.retryWithBackoff(async () => {\n        return await this.client!.chat.completions.create({\n          model: this.deployment,\n          messages: this.conversationHistory,\n          temperature: 0.7, // Standard temperature for balanced creativity\n          max_tokens: 200,\n          top_p: 0.9,\n          frequency_penalty: 0.1,\n          presence_penalty: 0.1,\n        });\n      });\n\n      const assistantResponse = completion.choices[0]?.message?.content || 'I\\'m sorry, I didn\\'t catch that. Could you repeat your answer?';\n      \n      console.log('ü§ñ [TRACE] OpenAI response received', {\n        response: assistantResponse.substring(0, 100) + '...',\n        questionCount: this.interviewContext.currentQuestionCount,\n        timestamp: new Date().toISOString()\n      });\n      \n      // Add assistant response to conversation history\n      this.conversationHistory.push({ role: 'assistant', content: assistantResponse });\n\n      const previousQuestionCount = this.interviewContext.currentQuestionCount || 0;\n      const currentQuestionCount = previousQuestionCount + 1;\n      const maxQuestions = this.interviewContext.maxQuestions || 10;\n      \n      console.log('üìä [TRACE] Question progression', {\n        currentQuestionCount,\n        maxQuestions,\n        isComplete: currentQuestionCount >= maxQuestions,\n        willContinue: currentQuestionCount < maxQuestions,\n        timestamp: new Date().toISOString()\n      });\n      \n      console.debug('üîÑ [STATE_TRANSITION] questionNumber: %d ‚Üí %d', \n        previousQuestionCount, \n        currentQuestionCount, \n        {\n          maxQuestions,\n          progressPercentage: Math.round((currentQuestionCount / maxQuestions) * 100),\n          remainingQuestions: Math.max(0, maxQuestions - currentQuestionCount),\n          timestamp: new Date().toISOString()\n        }\n      );\n      \n      // Update question count\n      this.interviewContext.currentQuestionCount = currentQuestionCount;\n\n      return {\n        content: assistantResponse,\n        questionNumber: currentQuestionCount,\n        isComplete: currentQuestionCount >= maxQuestions,\n        followUpSuggestions: this.generateFollowUpSuggestions()\n      };\n    } catch (error: any) {\n      console.error('‚ùå Error generating OpenAI response:', error);\n      \n      // Provide fallback response for common errors\n      if (error.status === 429) {\n        const fallbackResponse = this.getFallbackResponse(userResponse);\n        this.conversationHistory.push({ role: 'assistant', content: fallbackResponse });\n        \n        const currentQuestionCount = (this.interviewContext.currentQuestionCount || 0) + 1;\n        this.interviewContext.currentQuestionCount = currentQuestionCount;\n        \n        return {\n          content: fallbackResponse,\n          questionNumber: currentQuestionCount,\n          isComplete: false,\n          followUpSuggestions: this.generateFollowUpSuggestions()\n        };\n      }\n      \n      throw new Error('Failed to generate response');\n    }\n  }\n\n  /**\n   * Retry mechanism with exponential backoff for rate limiting\n   */\n  private async retryWithBackoff<T>(\n    operation: () => Promise<T>,\n    maxRetries: number = 3,\n    baseDelay: number = 1000\n  ): Promise<T> {\n    let lastError: Error;\n    \n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\n      try {\n        return await operation();\n      } catch (error: any) {\n        lastError = error;\n        \n        // Don't retry on non-retryable errors\n        if (error.status && ![429, 500, 502, 503, 504].includes(error.status)) {\n          throw error;\n        }\n        \n        if (attempt === maxRetries) {\n          throw error;\n        }\n        \n        // Calculate delay with exponential backoff\n        const delay = error.status === 429 \n          ? parseInt(error.headers?.['retry-after'] || '10') * 1000\n          : baseDelay * Math.pow(2, attempt);\n        \n        console.log(`‚è≥ Retrying in ${delay}ms (attempt ${attempt + 1}/${maxRetries + 1})`);\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n    \n    throw lastError!;\n  }\n\n  /**\n   * Generate fallback response when AI service is unavailable\n   */\n  private getFallbackResponse(userResponse: string): string {\n    const { type } = this.interviewContext;\n    \n    const fallbackResponses = {\n      technical: [\n        \"That's an interesting approach. Can you tell me more about the challenges you faced?\",\n        \"I see. How would you optimize this solution for better performance?\",\n        \"Good point. What alternative approaches did you consider?\"\n      ],\n      behavioral: [\n        \"Thank you for sharing that experience. What was the outcome?\",\n        \"That sounds challenging. What did you learn from that situation?\",\n        \"Interesting. How would you handle a similar situation now?\"\n      ],\n      general: [\n        \"That's great to hear. Can you elaborate on that?\",\n        \"Interesting background. What motivates you in your work?\",\n        \"I appreciate you sharing that. What are you most proud of?\"\n      ]\n    };\n    \n    const responses = fallbackResponses[type] || fallbackResponses.general;\n    return responses[Math.floor(Math.random() * responses.length)];\n  }\n\n  /**\n   * Generate follow-up suggestions based on conversation\n   */\n  private generateFollowUpSuggestions(): string[] {\n    const { type } = this.interviewContext;\n    \n    switch (type) {\n      case 'technical':\n        return [\n          \"Can you explain your thought process?\",\n          \"What would you do differently?\",\n          \"How would this scale?\"\n        ];\n      case 'behavioral':\n        return [\n          \"What was the outcome?\",\n          \"What did you learn?\",\n          \"How would you handle it now?\"\n        ];\n      default:\n        return [\n          \"Can you elaborate on that?\",\n          \"What was your biggest challenge?\",\n          \"What motivates you?\"\n        ];\n    }\n  }\n\n  /**\n   * Generate interview summary and feedback\n   */\n  async generateInterviewSummary(): Promise<string> {\n    if (!this.isInitialized || !this.client) {\n      throw new Error('Azure OpenAI Service not initialized');\n    }\n\n    const summaryPrompt = {\n      role: 'system' as const,\n      content: `Based on the interview conversation, provide a brief summary of the candidate's performance, highlighting:\\n1. Key strengths demonstrated\\n2. Areas for improvement\\n3. Overall assessment\\n4. Recommendation\\n\\nKeep it concise and constructive (under 200 words).`\n    };\n\n    try {\n      const completion = await this.client.chat.completions.create({\n        model: this.deployment,\n        messages: [...this.conversationHistory, summaryPrompt],\n        temperature: 0.3,\n        max_tokens: 300,\n      });\n\n      return completion.choices[0]?.message?.content || 'Unable to generate summary.';\n    } catch (error) {\n      console.error('‚ùå Error generating interview summary:', error);\n      throw new Error('Failed to generate summary');\n    }\n  }\n\n  /**\n   * Get conversation history\n   */\n  getConversationHistory(): ConversationMessage[] {\n    return this.conversationHistory.filter(msg => msg.role !== 'system');\n  }\n\n  /**\n   * Clear conversation history\n   */\n  clearConversation(): void {\n    const previousState = {\n      historyLength: this.conversationHistory.length,\n      questionCount: this.interviewContext.currentQuestionCount,\n      preliminaryCollected: this.interviewContext.preliminaryCollected\n    };\n    \n    this.conversationHistory = [];\n    this.interviewContext.currentQuestionCount = 0;\n    this.interviewContext.preliminaryCollected = false;\n    \n    console.log('üßπ Conversation history cleared');\n    console.debug('üîÑ [STATE_RESET] Conversation state reset', {\n      previousState,\n      newState: {\n        historyLength: 0,\n        questionCount: 0,\n        preliminaryCollected: false\n      },\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  /**\n   * Generate questions based on resume information\n   */\n  async generateQuestions(resumeInfo: {name: string, experience: string, education: string, skills: string}): Promise<string[]> {\n    if (!this.isInitialized || !this.client) {\n      throw new Error('Azure OpenAI Service not initialized');\n    }\n\n    const prompt = `Given the following resume information, generate 5 relevant interview questions. Format each question on a new line. Only return the questions, no additional text.\n\nName: ${resumeInfo.name}\nExperience: ${resumeInfo.experience}\nEducation: ${resumeInfo.education}\nSkills: ${resumeInfo.skills}`;\n\n    try {\n      const completion = await this.client.chat.completions.create({\n        model: this.deployment,\n        messages: [{role: 'system', content: prompt}],\n        temperature: 0.5,\n        max_tokens: 150\n      });\n\n      const response = completion.choices[0]?.message?.content || '';\n      return response\n        .split('\\n')\n        .map(q => q.trim())\n        .filter(q => q.length > 0)\n        .slice(0, 5);\n    } catch (error) {\n      console.error('‚ùå Error generating questions:', error);\n      throw new Error('Failed to generate questions');\n    }\n  }\n\n  /**\n   * Tailor resume based on job description using Azure OpenAI\n   */\n  async tailorResume(resumeText: string, jobDescription: string): Promise<string> {\n    if (!this.isInitialized || !this.client) {\n      throw new Error('Azure OpenAI Service not initialized');\n    }\n\n    const prompt = `You are an expert resume writer and ATS optimization specialist. Please tailor this resume to better match the following job description for maximum ATS compatibility and relevance.\n\nJOB DESCRIPTION:\n${jobDescription}\n\nCURRENT RESUME:\n${resumeText}\n\nPlease provide a tailored version of the resume that:\n1. Uses keywords and phrases directly from the job description\n2. Highlights relevant skills and experiences that match the job requirements\n3. Maintains professional formatting and ATS-friendly structure\n4. Uses strong action verbs and quantifiable achievements\n5. Keeps the same overall length and format structure\n6. Optimizes for Applicant Tracking Systems (ATS)\n7. Ensures keyword density without keyword stuffing\n\nReturn ONLY the tailored resume content with no additional commentary or explanations.`;\n\n    try {\n      const completion = await this.retryWithBackoff(async () => {\n        return await this.client!.chat.completions.create({\n          model: this.deployment,\n          messages: [{ role: 'user', content: prompt }],\n          temperature: 0.3,\n          max_tokens: 2000,\n          top_p: 0.9,\n          frequency_penalty: 0.1,\n          presence_penalty: 0.1,\n        });\n      });\n\n      const tailoredResume = completion.choices[0]?.message?.content;\n      if (!tailoredResume) {\n        throw new Error('No response generated');\n      }\n\n      return tailoredResume;\n    } catch (error) {\n      console.error('‚ùå Error tailoring resume:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Check if service is ready\n   */\n  isReady(): boolean {\n    return this.isInitialized && this.client !== null;\n  }\n\n  /**\n   * Generate a completion for a given prompt\n   */\n  async generateCompletion(prompt: string): Promise<string> {\n    if (!this.isInitialized || !this.client) {\n      throw new Error('Azure OpenAI Service not initialized');\n    }\n\n    try {\n      const completion = await this.createCompletion([\n        {\n          role: 'user',\n          content: prompt\n        }\n      ], {\n        temperature: 0.7,\n        maxTokens: 1000\n      });\n\n      return completion.choices[0]?.message?.content || 'Unable to generate completion.';\n    } catch (error) {\n      console.error('‚ùå Error generating completion:', error);\n      throw new Error('Failed to generate completion');\n    }\n  }\n\n  /**\n   * Create a chat completion with custom parameters\n   * Public method for use by adapters\n   */\n  async createCompletion(\n    messages: Array<{ role: 'user' | 'system' | 'assistant'; content: string }>,\n    options: {\n      temperature?: number;\n      maxTokens?: number;\n      topP?: number;\n      frequencyPenalty?: number;\n      presencePenalty?: number;\n    } = {}\n  ) {\n    if (!this.isInitialized || !this.client) {\n      throw new Error('Azure OpenAI Service not initialized');\n    }\n\n    const {\n      temperature = 0.7,     // Default temperature for balanced responses\n      maxTokens = 1500,      // Default max tokens for comprehensive responses\n      topP = 0.9,            // Maintain creativity balance\n      frequencyPenalty = 0.1, // Reduce repetition\n      presencePenalty = 0.1   // Encourage diverse content\n    } = options;\n\n    return await this.retryWithBackoff(async () => {\n      return await this.client!.chat.completions.create({\n        model: this.deployment,\n        messages,\n        temperature,\n        max_tokens: maxTokens,\n        top_p: topP,\n        frequency_penalty: frequencyPenalty,\n        presence_penalty: presencePenalty,\n      });\n    });\n  }\n\n  /**\n   * Dispose of resources\n   */\n  dispose(): void {\n    this.client = null;\n    this.isInitialized = false;\n    this.conversationHistory = [];\n    console.log('üßπ Azure OpenAI Service disposed');\n  }\n}\n\n// Export singleton instance\nexport const azureOpenAIService = new AzureOpenAIService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/services/azure-openai.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2292,2295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2292,2295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2570,2573],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2570,2573],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MigrationOpenAIClient as OpenAI } from '@/lib/azure-ai-foundry/clients/migration-wrapper';\n\n// Environment variables for Azure OpenAI configuration\nconst AZURE_OPENAI_KEY = process.env.AZURE_OPENAI_KEY;\nconst AZURE_OPENAI_ENDPOINT = process.env.AZURE_OPENAI_ENDPOINT;\nconst AZURE_OPENAI_DEPLOYMENT = process.env.AZURE_OPENAI_DEPLOYMENT;\n\n// Cached OpenAI client instance for reuse\nlet openAIClient: OpenAI | null = null;\n\n/**\n * Initialize and cache the Azure OpenAI client\n */\nasync function getOpenAIClient(): Promise<OpenAI> {\n  if (openAIClient) {\n    return openAIClient;\n  }\n\n  // Validate required environment variables\n  if (!AZURE_OPENAI_KEY) {\n    throw new Error('AZURE_OPENAI_KEY environment variable is required');\n  }\n  if (!AZURE_OPENAI_ENDPOINT) {\n    throw new Error('AZURE_OPENAI_ENDPOINT environment variable is required');\n  }\n  if (!AZURE_OPENAI_DEPLOYMENT) {\n    throw new Error('AZURE_OPENAI_DEPLOYMENT environment variable is required');\n  }\n\n  // Create and cache the OpenAI client configured for Azure\n  openAIClient = new OpenAI();\n  await openAIClient.init(); // Initialize the migration client\n\n  return openAIClient;\n}\n\n/**\n * Generate content using Azure OpenAI with centralized error handling\n * \n * @param prompt - The prompt to send to the AI model\n * @param temperature - Controls randomness (0.0 = deterministic, 1.0 = creative). Default: 0.7\n * @returns Promise resolving to the generated text content\n * \n * @throws Error with translated user-friendly messages for common issues:\n * - Authentication errors (401, 403)\n * - Rate limiting (429) with retry suggestions\n * - Service unavailable (500, 502, 503, 504)\n * - Content policy violations (400 with content_filter)\n */\nexport async function generateContent(prompt: string, temperature: number = 0.7): Promise<string> {\n  try {\n    const client = await getOpenAIClient();\n    \n    const completion = await client.chat.completions.create({\n      model: AZURE_OPENAI_DEPLOYMENT!,\n      messages: [{ role: 'user', content: prompt }],\n      temperature,\n      max_tokens: 1000,\n      top_p: 0.9,\n    });\n\n    const content = completion.choices[0]?.message?.content;\n    if (!content) {\n      throw new Error('No content generated from Azure OpenAI');\n    }\n\n    return content;\n  } catch (error: any) {\n    // Centralized error translation for better user experience\n    const translatedError = translateAzureOpenAIError(error);\n    throw translatedError;\n  }\n}\n\n/**\n * Translate Azure OpenAI errors into user-friendly messages\n */\nfunction translateAzureOpenAIError(error: any): Error {\n  // Network or connection errors\n  if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {\n    return new Error('Unable to connect to Azure OpenAI service. Please check your network connection.');\n  }\n\n  // Azure OpenAI API errors\n  if (error.status) {\n    switch (error.status) {\n      case 401:\n        return new Error('Azure OpenAI authentication failed. Please check your API key.');\n      \n      case 403:\n        return new Error('Access forbidden. Your Azure OpenAI subscription may not have access to this resource.');\n      \n      case 429:\n        const retryAfter = error.headers?.['retry-after'];\n        const retryMessage = retryAfter \n          ? ` Please retry after ${retryAfter} seconds.`\n          : ' Please try again in a few moments.';\n        return new Error(`Azure OpenAI rate limit exceeded.${retryMessage}`);\n      \n      case 400:\n        // Check for content filtering\n        if (error.message && error.message.includes('content_filter')) {\n          return new Error('Content was filtered by Azure OpenAI content policy. Please modify your request.');\n        }\n        return new Error(`Bad request: ${error.message || 'Invalid request parameters'}`);\n      \n      case 404:\n        return new Error('Azure OpenAI deployment not found. Please check your deployment name and endpoint.');\n      \n      case 500:\n      case 502:\n      case 503:\n      case 504:\n        return new Error('Azure OpenAI service is temporarily unavailable. Please try again later.');\n      \n      default:\n        return new Error(`Azure OpenAI error (${error.status}): ${error.message || 'Unknown error'}`);\n    }\n  }\n\n  // Configuration errors\n  if (error.message && error.message.includes('environment variable')) {\n    return new Error(`Configuration error: ${error.message}`);\n  }\n\n  // Generic fallback\n  return new Error(`Azure OpenAI error: ${error.message || 'An unexpected error occurred'}`);\n}\n\n/**\n * Reset the cached client (useful for testing or credential updates)\n */\nexport function resetClient(): void {\n  openAIClient = null;\n}\n\n/**\n * Check if Azure OpenAI is properly configured\n */\nexport function isConfigured(): boolean {\n  return !!(AZURE_OPENAI_KEY && AZURE_OPENAI_ENDPOINT && AZURE_OPENAI_DEPLOYMENT);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/services/azure-speech-service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'s' is defined but never used.","line":95,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":95,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":95,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":95,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":103,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4059,4062],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4059,4062],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":224,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":224,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8269,8272],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8269,8272],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'sender' is defined but never used.","line":263,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":263,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'event' is defined but never used.","line":263,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":263,"endColumn":51}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as SpeechSDK from 'microsoft-cognitiveservices-speech-sdk';\nimport { fetchAzureSecrets } from '@/lib/azure-config';\n\nexport interface SpeechRecognitionResult {\n  text: string;\n  confidence: number;\n  reason: string;\n}\n\nexport interface SpeechSynthesisOptions {\n  voiceName?: string;\n  rate?: string;\n  pitch?: string;\n}\n\nexport class AzureSpeechService {\n  private speechConfig: SpeechSDK.SpeechConfig | null = null;\n  private recognizer: SpeechSDK.SpeechRecognizer | null = null;\n  private synthesizer: SpeechSDK.SpeechSynthesizer | null = null;\n  private isInitialized = false;\n\n  /**\n   * Initialize the Azure Speech Service\n   */\n  async initialize(): Promise<boolean> {\n    try {\n      const secrets = await fetchAzureSecrets();\n      \n      if (!secrets.speechKey || !secrets.speechEndpoint) {\n        console.warn('‚ö†Ô∏è Azure Speech credentials not available');\n        return false;\n      }\n\n      // Extract region from endpoint (e.g., https://westus.api.cognitive.microsoft.com -> westus)\n      const region = secrets.speechEndpoint.match(/https:\\/\\/([^.]+)/)?.[1] || 'westus';\n\n      this.speechConfig = SpeechSDK.SpeechConfig.fromSubscription(secrets.speechKey, region);\n      \n      // Enhanced Speech Recognition Configuration\n      this.speechConfig.speechRecognitionLanguage = 'en-US';\n      this.speechConfig.setProperty(SpeechSDK.PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs, '15000'); // Extended to 15s\n      this.speechConfig.setProperty(SpeechSDK.PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs, '2000');\n      this.speechConfig.setProperty(SpeechSDK.PropertyId.Speech_SegmentationSilenceTimeoutMs, '2000');\n      this.speechConfig.setProperty(SpeechSDK.PropertyId.SpeechServiceResponse_DiarizeIntermediateResults, 'true');\n      this.speechConfig.setProperty(SpeechSDK.PropertyId.SpeechServiceResponse_RequestDetailedResultTrueFalse, 'true');\n      this.speechConfig.setProperty(SpeechSDK.PropertyId.SpeechServiceConnection_RecoMode, 'CONVERSATION');\n      \n      // Enhanced Speech Synthesis Configuration\n      this.speechConfig.speechSynthesisVoiceName = 'en-US-AriaNeural'; // More natural sounding\n      this.speechConfig.speechSynthesisOutputFormat = SpeechSDK.SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3;\n\n      this.isInitialized = true;\n      console.log('‚úÖ Azure Speech Service initialized');\n      return true;\n    } catch (error) {\n      console.error('‚ùå Failed to initialize Azure Speech Service:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Start continuous speech recognition\n   */\n  async startContinuousRecognition(\n    onRecognized: (result: SpeechRecognitionResult) => void,\n    onError?: (error: string) => void\n  ): Promise<boolean> {\n    if (!this.isInitialized || !this.speechConfig) {\n      console.error('‚ùå Azure Speech Service not initialized');\n      return false;\n    }\n\n    try {\n      const audioConfig = SpeechSDK.AudioConfig.fromDefaultMicrophoneInput();\n      this.recognizer = new SpeechSDK.SpeechRecognizer(this.speechConfig, audioConfig);\n\n      this.recognizer.recognized = (s, e) => {\n        if (e.result.reason === SpeechSDK.ResultReason.RecognizedSpeech && e.result.text) {\n          onRecognized({\n            text: e.result.text,\n            confidence: e.result.properties?.getProperty(SpeechSDK.PropertyId.SpeechServiceResponse_JsonResult) ? 1.0 : 0.8,\n            reason: 'RecognizedSpeech'\n          });\n        }\n      };\n\n      this.recognizer.canceled = (s, e) => {\n        console.log(`‚ùå Recognition canceled: ${e.reason}`);\n        if (e.reason === SpeechSDK.CancellationReason.Error && onError) {\n          onError(e.errorDetails || 'Unknown error');\n        }\n        this.stopContinuousRecognition();\n      };\n\n      this.recognizer.sessionStopped = (s, e) => {\n        console.log('üõë Recognition session stopped');\n        this.stopContinuousRecognition();\n      };\n\n      await this.recognizer.startContinuousRecognitionAsync();\n      console.log('üé§ Started continuous speech recognition');\n      return true;\n    } catch (error: any) {\n      console.error('‚ùå Failed to start speech recognition:', error);\n      if (onError) {\n        onError(error.message || 'Failed to start speech recognition');\n      }\n      return false;\n    }\n  }\n\n  /**\n   * Stop continuous speech recognition\n   */\n  async stopContinuousRecognition(): Promise<void> {\n    if (this.recognizer) {\n      try {\n        await this.recognizer.stopContinuousRecognitionAsync();\n        this.recognizer.close();\n        this.recognizer = null;\n        console.log('üõë Stopped speech recognition');\n      } catch (error) {\n        console.error('‚ùå Error stopping speech recognition:', error);\n      }\n    }\n  }\n\n  /**\n   * Synthesize speech from text\n   */\n  async synthesizeSpeech(\n    text: string,\n    options: SpeechSynthesisOptions = {}\n  ): Promise<ArrayBuffer | null> {\n    if (!this.isInitialized || !this.speechConfig) {\n      console.error('‚ùå Azure Speech Service not initialized');\n      return null;\n    }\n\n    try {\n      const audioConfig = SpeechSDK.AudioConfig.fromDefaultSpeakerOutput();\n      this.synthesizer = new SpeechSDK.SpeechSynthesizer(this.speechConfig, audioConfig);\n\n      const voiceName = options.voiceName || 'en-US-SaraNeural';\n      const rate = options.rate || '1.0';\n      const pitch = options.pitch || '0Hz';\n\n      // Sanitize text for SSML\n      const sanitizedText = this.sanitizeTextForSSML(text);\n\n      const ssml = `\n        <speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\" xml:lang=\"en-US\">\n          <voice name=\"${voiceName}\">\n            <prosody rate=\"${rate}\" pitch=\"${pitch}\">\n              ${sanitizedText}\n            </prosody>\n          </voice>\n        </speak>\n      `;\n\n      return new Promise((resolve, reject) => {\n        this.synthesizer!.speakSsmlAsync(\n          ssml,\n          (result) => {\n            if (result.reason === SpeechSDK.ResultReason.SynthesizingAudioCompleted) {\n              console.log('‚úÖ Speech synthesis completed');\n              resolve(result.audioData);\n            } else {\n              console.error('‚ùå Speech synthesis failed:', result.errorDetails);\n              reject(new Error(result.errorDetails || 'Speech synthesis failed'));\n            }\n            this.synthesizer?.close();\n            this.synthesizer = null;\n          },\n          (error) => {\n            console.error('‚ùå Speech synthesis error:', error);\n            reject(error);\n            this.synthesizer?.close();\n            this.synthesizer = null;\n          }\n        );\n      });\n    } catch (error) {\n      console.error('‚ùå Failed to synthesize speech:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Sanitize text for SSML to handle special characters and emojis\n   */\n  private sanitizeTextForSSML(text: string): string {\n    return text\n      // Remove or replace emojis and special unicode characters\n      .replace(/[\\u{1F600}-\\u{1F64F}]|[\\u{1F300}-\\u{1F5FF}]|[\\u{1F680}-\\u{1F6FF}]|[\\u{1F1E0}-\\u{1F1FF}]|[\\u{2600}-\\u{26FF}]|[\\u{2700}-\\u{27BF}]/gu, '')\n      // Escape XML special characters (but NOT apostrophes - they cause TTS to say \"apos\")\n      .replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/\"/g, '&quot;')\n      // NOTE: We intentionally do NOT escape apostrophes with &apos; as TTS reads it as \"apos\"\n      // Single quotes/apostrophes are safe in SSML content and will be pronounced correctly\n      // .replace(/'/g, '&apos;')  // REMOVED - causes \"apos\" pronunciation\n      // Remove problematic symbols that might cause parsing issues\n      .replace(/[@#$%^&*()]/g, ' ')\n      // Clean up multiple spaces\n      .replace(/\\s+/g, ' ')\n      .trim();\n  }\n\n  /**\n   * Process audio with Azure Speech using continuous recognition for better silence handling\n   */\n  async processAudioWithAzureSpeech(audioBuffer: ArrayBuffer): Promise<SpeechRecognitionResult | null> {\n    if (!this.isInitialized || !this.speechConfig) {\n      console.error('‚ùå Azure Speech Service not initialized');\n      return null;\n    }\n\n    try {\n      // Create push stream for the audio\n      const pushStream = SpeechSDK.AudioInputStream.createPushStream();\n      const buffer = new Uint8Array(audioBuffer);\n      pushStream.write(buffer as any); // Azure SDK expects ArrayBuffer but Uint8Array is compatible\n      pushStream.close();\n      \n      const audioConfig = SpeechSDK.AudioConfig.fromStreamInput(pushStream);\n      const recognizer = new SpeechSDK.SpeechRecognizer(this.speechConfig, audioConfig);\n\n      // Use continuous recognition instead of recognizeOnceAsync\n      return new Promise((resolve, reject) => {\n        let hasRecognizedSpeech = false;\n        let finalResult: SpeechRecognitionResult | null = null;\n        \n        // Set maximum duration (65 seconds) to prevent hanging\n        const maxDurationTimer = setTimeout(() => {\n          console.log('‚è±Ô∏è Maximum recognition duration reached, stopping...');\n          recognizer.stopContinuousRecognitionAsync();\n          if (!hasRecognizedSpeech) {\n            resolve(null);\n          }\n        }, 65000);\n\n        // Handle final recognized results\n        recognizer.recognized = (sender, event) => {\n          if (event.result.reason === SpeechSDK.ResultReason.RecognizedSpeech && event.result.text) {\n            console.log(`‚úÖ Speech recognized: ${event.result.text}`);\n            hasRecognizedSpeech = true;\n            \n            finalResult = {\n              text: event.result.text,\n              confidence: event.result.properties?.getProperty(SpeechSDK.PropertyId.SpeechServiceResponse_JsonResult) ? 1.0 : 0.8,\n              reason: 'RecognizedSpeech'\n            };\n            \n            // Stop recognition after first meaningful result\n            clearTimeout(maxDurationTimer);\n            recognizer.stopContinuousRecognitionAsync();\n          }\n        };\n\n        // Handle session stopped\n        recognizer.sessionStopped = (sender, event) => {\n          console.log('üõë Recognition session stopped');\n          clearTimeout(maxDurationTimer);\n          recognizer.close();\n          resolve(finalResult);\n        };\n\n        // Handle cancellation/errors\n        recognizer.canceled = (sender, event) => {\n          console.log(`‚ùå Recognition canceled: ${event.reason}`);\n          clearTimeout(maxDurationTimer);\n          recognizer.stopContinuousRecognitionAsync();\n          \n          if (event.reason === SpeechSDK.CancellationReason.Error) {\n            console.error('Recognition error:', event.errorDetails);\n            reject(new Error(event.errorDetails || 'Unknown recognition error'));\n          } else {\n            resolve(finalResult);\n          }\n        };\n\n        // Start continuous recognition\n        recognizer.startContinuousRecognitionAsync(\n          () => {\n            console.log('üé§ Started continuous recognition for audio processing');\n          },\n          (error) => {\n            console.error('‚ùå Failed to start continuous recognition:', error);\n            clearTimeout(maxDurationTimer);\n            recognizer.close();\n            reject(new Error(error));\n          }\n        );\n      });\n    } catch (error) {\n      console.error('‚ùå Failed to process audio with Azure Speech:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Check if the service is initialized and ready\n   */\n  isReady(): boolean {\n    return this.isInitialized && this.speechConfig !== null;\n  }\n\n  /**\n   * Clean up resources\n   */\n  dispose(): void {\n    this.stopContinuousRecognition();\n    if (this.synthesizer) {\n      this.synthesizer.close();\n      this.synthesizer = null;\n    }\n    this.speechConfig = null;\n    this.isInitialized = false;\n    console.log('üßπ Azure Speech Service disposed');\n  }\n}\n\n// Export singleton instance\nexport const azureSpeechService = new AzureSpeechService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/services/cloud-functions-verification.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":123,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3857,3860],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3857,3860],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use server\";\n\nimport { azureFunctionsClient } from '@/lib/services/azure-functions-client';\n\n/**\n * Cloud Functions verification service\n * Uses Azure Functions as primary, Firebase Cloud Functions as fallback\n */\nclass CloudFunctionsVerificationService {\n  private readonly CLOUD_FUNCTIONS_URL = process.env.FIREBASE_FUNCTIONS_URL || \n    `https://us-central1-${process.env.FIREBASE_PROJECT_ID}.cloudfunctions.net`;\n  private readonly AZURE_FUNCTIONS_URL = process.env.AZURE_FUNCTIONS_URL;\n\n  /**\n   * Verify token using Azure Functions (primary) or Firebase Cloud Functions (fallback)\n   */\n  async verifyTokenWithCloudFunction(idToken: string, functionName: string = 'verifyToken'): Promise<CloudFunctionResult> {\n    // Try Azure Functions first\n    if (this.AZURE_FUNCTIONS_URL) {\n      try {\n        console.log('Attempting token verification via Azure Function');\n        const azureResult = await azureFunctionsClient.verifyToken(idToken);\n        \n        if (azureResult.valid && azureResult.decoded) {\n          return {\n            success: true,\n            data: {\n              valid: true,\n              decoded: azureResult.decoded,\n              method: 'azure-function'\n            },\n            error: null\n          };\n        } else {\n          throw new Error(azureResult.error || 'Azure Function verification failed');\n        }\n      } catch (azureError) {\n        console.warn('Azure Function verification failed, falling back to Firebase:', azureError);\n        // Continue to Firebase fallback\n      }\n    }\n    \n    // Fallback to Firebase Cloud Functions\n    try {\n      console.log('Attempting token verification via Firebase Cloud Function');\n      const response = await fetch(`${this.CLOUD_FUNCTIONS_URL}/${functionName}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${idToken}`, // Send token in header\n        },\n        body: JSON.stringify({\n          idToken,\n          timestamp: Date.now()\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ error: 'Network error' }));\n        throw new Error(errorData.error || `HTTP ${response.status}`);\n      }\n\n      const result = await response.json();\n      return {\n        success: true,\n        data: { ...result, method: 'firebase-cloud-function' },\n        error: null\n      };\n    } catch (error) {\n      console.error('Both Azure and Firebase Cloud Function verification failed:', error);\n      return {\n        success: false,\n        data: null,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Verify user permissions using Cloud Function\n   */\n  async verifyUserPermissions(idToken: string, requiredPermissions: string[]): Promise<PermissionResult> {\n    try {\n      const response = await fetch(`${this.CLOUD_FUNCTIONS_URL}/verifyPermissions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${idToken}`,\n        },\n        body: JSON.stringify({\n          requiredPermissions,\n          timestamp: Date.now()\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Permission check failed: HTTP ${response.status}`);\n      }\n\n      const result = await response.json();\n      return {\n        success: true,\n        hasPermissions: result.hasPermissions,\n        permissions: result.permissions,\n        error: null\n      };\n    } catch (error) {\n      console.error('Permission verification failed:', error);\n      return {\n        success: false,\n        hasPermissions: false,\n        permissions: [],\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n}\n\n\n// Types\ninterface CloudFunctionResult {\n  success: boolean;\n  data: any | null;\n  error: string | null;\n}\n\ninterface PermissionResult {\n  success: boolean;\n  hasPermissions: boolean;\n  permissions: string[];\n  error: string | null;\n}\n\n// Export singleton instance\nexport const cloudFunctionsVerification = new CloudFunctionsVerificationService();\n\n// Helper functions\nexport async function verifyTokenWithCloudFunction(idToken: string): Promise<CloudFunctionResult> {\n  return await cloudFunctionsVerification.verifyTokenWithCloudFunction(idToken);\n}\n\nexport async function verifyUserPermissions(idToken: string, permissions: string[]): Promise<PermissionResult> {\n  return await cloudFunctionsVerification.verifyUserPermissions(idToken, permissions);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/services/config-monitoring-service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[807,810],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[807,810],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1080,1083],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1080,1083],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":80,"column":29,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":80,"endColumn":59},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":266,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":266,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7288,7291],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7288,7291],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":266,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":266,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7303,7306],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7303,7306],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":290,"column":133,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":290,"endColumn":136,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8001,8004],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8001,8004],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Configuration Monitoring Service\n * \n * Provides comprehensive monitoring, metrics, and alerting for the\n * unified configuration system with Application Insights integration.\n */\n\nimport { TelemetryClient } from 'applicationinsights';\nimport { logServerError } from '@/lib/errors';\nimport { azureCosmosService } from './azure-cosmos-service';\n\n// ===== INTERFACES =====\n\nexport interface ConfigMetrics {\n  requestCount: number;\n  cacheHits: number;\n  cacheMisses: number;\n  avgLatency: number;\n  errorCount: number;\n  driftDetected: number;\n  syncFailures: number;\n}\n\nexport interface ConfigAlert {\n  id: string;\n  type: 'drift' | 'sync_failure' | 'high_latency' | 'error_rate' | 'cache_performance';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  message: string;\n  metadata: Record<string, any>;\n  timestamp: Date;\n  resolved: boolean;\n  environment: string;\n}\n\nexport interface HealthCheckResult {\n  service: string;\n  status: 'healthy' | 'degraded' | 'unhealthy';\n  timestamp: Date;\n  metrics: ConfigMetrics;\n  alerts: ConfigAlert[];\n  details?: Record<string, any>;\n}\n\n// ===== MONITORING SERVICE =====\n\nclass ConfigMonitoringService {\n  private telemetryClient: TelemetryClient | null = null;\n  private metrics: ConfigMetrics = {\n    requestCount: 0,\n    cacheHits: 0,\n    cacheMisses: 0,\n    avgLatency: 0,\n    errorCount: 0,\n    driftDetected: 0,\n    syncFailures: 0\n  };\n  \n  private latencyBuffer: number[] = [];\n  private readonly LATENCY_BUFFER_SIZE = 100;\n  private readonly ALERT_THRESHOLDS = {\n    HIGH_LATENCY_MS: 1000,\n    ERROR_RATE_THRESHOLD: 0.05, // 5%\n    CACHE_HIT_RATIO_MIN: 0.8,   // 80%\n    MAX_DRIFT_COUNT: 5\n  };\n\n  constructor() {\n    this.initializeTelemetry();\n  }\n\n  // ===== INITIALIZATION =====\n\n  private initializeTelemetry(): void {\n    try {\n      const appInsightsKey = process.env.APPLICATIONINSIGHTS_CONNECTION_STRING;\n      \n      if (appInsightsKey) {\n        // Application Insights is typically initialized globally\n        // This service uses the global instance if available\n        const appInsights = require('applicationinsights');\n        \n        if (appInsights.defaultClient) {\n          this.telemetryClient = appInsights.defaultClient;\n          console.log('‚úÖ Config monitoring connected to Application Insights');\n        } else {\n          appInsights.setup(appInsightsKey)\n            .setAutoCollectRequests(true)\n            .setAutoCollectPerformance(true)\n            .setAutoCollectExceptions(true)\n            .setAutoCollectDependencies(true)\n            .setAutoCollectConsole(true, true)\n            .setUseDiskRetryCaching(true)\n            .start();\n            \n          this.telemetryClient = appInsights.defaultClient;\n          console.log('‚úÖ Config monitoring initialized Application Insights');\n        }\n      } else {\n        console.warn('‚ö†Ô∏è Application Insights connection string not found - monitoring disabled');\n      }\n    } catch (error) {\n      console.error('‚ùå Failed to initialize Application Insights:', error);\n      logServerError(error as Error, { service: 'config-monitoring', action: 'initialize' });\n    }\n  }\n\n  // ===== METRICS TRACKING =====\n\n  /**\n   * Track configuration request with timing\n   */\n  trackConfigRequest(key: string, operation: 'get' | 'set' | 'getAll', latency: number, success: boolean): void {\n    this.metrics.requestCount++;\n    \n    // Update latency metrics\n    this.latencyBuffer.push(latency);\n    if (this.latencyBuffer.length > this.LATENCY_BUFFER_SIZE) {\n      this.latencyBuffer.shift();\n    }\n    this.metrics.avgLatency = this.latencyBuffer.reduce((a, b) => a + b, 0) / this.latencyBuffer.length;\n    \n    // Track errors\n    if (!success) {\n      this.metrics.errorCount++;\n    }\n    \n    // Send to Application Insights\n    if (this.telemetryClient) {\n      this.telemetryClient.trackRequest({\n        name: `Config-${operation}`,\n        url: `config://${key}`,\n        duration: latency,\n        resultCode: success ? '200' : '500',\n        success,\n        properties: {\n          configKey: key,\n          operation,\n          service: 'unified-config'\n        },\n        measurements: {\n          latency,\n          cacheHitRatio: this.getCacheHitRatio(),\n          requestCount: this.metrics.requestCount\n        }\n      });\n      \n      // Track custom metric\n      this.telemetryClient.trackMetric({\n        name: 'Config.Request.Latency',\n        value: latency,\n        properties: {\n          operation,\n          key: key.split('.')[0] // Track by namespace\n        }\n      });\n    }\n    \n    // Check for alerts\n    this.checkLatencyAlert(latency);\n    this.checkErrorRateAlert();\n  }\n\n  /**\n   * Track cache hit/miss\n   */\n  trackCacheHit(hit: boolean, key: string): void {\n    if (hit) {\n      this.metrics.cacheHits++;\n    } else {\n      this.metrics.cacheMisses++;\n    }\n    \n    if (this.telemetryClient) {\n      this.telemetryClient.trackEvent({\n        name: 'Config.Cache.Access',\n        properties: {\n          hit: hit.toString(),\n          key: key.split('.')[0],\n          service: 'unified-config'\n        },\n        measurements: {\n          hitRatio: this.getCacheHitRatio(),\n          totalCacheAccess: this.metrics.cacheHits + this.metrics.cacheMisses\n        }\n      });\n    }\n    \n    // Check cache performance alert\n    this.checkCachePerformanceAlert();\n  }\n\n  /**\n   * Track configuration drift detection\n   */\n  trackDriftDetection(driftedKeys: string[], totalChecked: number): void {\n    this.metrics.driftDetected = driftedKeys.length;\n    \n    if (this.telemetryClient) {\n      this.telemetryClient.trackEvent({\n        name: 'Config.Drift.Detection',\n        properties: {\n          driftedKeys: driftedKeys.join(','),\n          service: 'unified-config'\n        },\n        measurements: {\n          driftCount: driftedKeys.length,\n          totalChecked,\n          driftRatio: driftedKeys.length / totalChecked\n        }\n      });\n    }\n    \n    // Alert if drift detected\n    if (driftedKeys.length > 0) {\n      this.createAlert('drift', 'high', `Configuration drift detected in ${driftedKeys.length} keys: ${driftedKeys.join(', ')}`, {\n        driftedKeys,\n        totalChecked\n      });\n    }\n  }\n\n  /**\n   * Track Firebase sync operations\n   */\n  trackSyncOperation(success: boolean, keysSync: number, duration: number, error?: string): void {\n    if (!success) {\n      this.metrics.syncFailures++;\n    }\n    \n    if (this.telemetryClient) {\n      this.telemetryClient.trackDependency({\n        dependencyTypeName: 'Firebase',\n        name: 'Config.Sync',\n        data: `Sync ${keysSync} keys`,\n        duration,\n        success,\n        properties: {\n          keysSync: keysSync.toString(),\n          service: 'config-sync',\n          error: error || ''\n        }\n      });\n      \n      this.telemetryClient.trackMetric({\n        name: 'Config.Sync.KeyCount',\n        value: keysSync,\n        properties: {\n          success: success.toString()\n        }\n      });\n    }\n    \n    // Alert on sync failures\n    if (!success) {\n      this.createAlert('sync_failure', 'medium', `Firebase sync failed: ${error || 'Unknown error'}`, {\n        keysSync,\n        duration,\n        error\n      });\n    }\n  }\n\n  /**\n   * Track configuration changes\n   */\n  trackConfigChange(key: string, oldValue: any, newValue: any, changedBy: string, environment: string): void {\n    if (this.telemetryClient) {\n      this.telemetryClient.trackEvent({\n        name: 'Config.Change',\n        properties: {\n          key,\n          changedBy,\n          environment,\n          service: 'unified-config',\n          hasOldValue: (oldValue !== null && oldValue !== undefined).toString(),\n          valueType: typeof newValue\n        },\n        measurements: {\n          changeTimestamp: Date.now()\n        }\n      });\n    }\n  }\n\n  // ===== ALERTING =====\n\n  /**\n   * Create and process alerts\n   */\n  private async createAlert(type: ConfigAlert['type'], severity: ConfigAlert['severity'], message: string, metadata: Record<string, any>): Promise<void> {\n    const alert: ConfigAlert = {\n      id: `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      type,\n      severity,\n      message,\n      metadata,\n      timestamp: new Date(),\n      resolved: false,\n      environment: process.env.NODE_ENV || 'development'\n    };\n    \n    // Store alert in Cosmos DB\n    try {\n      await azureCosmosService.createDocument('configAlerts', {\n        ...alert,\n        _partitionKey: alert.type\n      });\n    } catch (error) {\n      console.error('Failed to store alert:', error);\n    }\n    \n    // Send to Application Insights as exception for high/critical severity\n    if (this.telemetryClient && (severity === 'high' || severity === 'critical')) {\n      this.telemetryClient.trackException({\n        exception: new Error(`Config Alert [${severity.toUpperCase()}]: ${message}`),\n        properties: {\n          alertId: alert.id,\n          alertType: type,\n          severity,\n          environment: alert.environment,\n          service: 'unified-config'\n        },\n        measurements: metadata\n      });\n    }\n    \n    // Send to notification channels\n    await this.sendAlertNotification(alert);\n    \n    console.warn(`üö® Config Alert [${severity.toUpperCase()}]: ${message}`);\n  }\n\n  /**\n   * Check for latency alerts\n   */\n  private checkLatencyAlert(latency: number): void {\n    if (latency > this.ALERT_THRESHOLDS.HIGH_LATENCY_MS) {\n      this.createAlert('high_latency', 'medium', `High configuration latency detected: ${latency}ms`, {\n        latency,\n        threshold: this.ALERT_THRESHOLDS.HIGH_LATENCY_MS\n      });\n    }\n  }\n\n  /**\n   * Check for error rate alerts\n   */\n  private checkErrorRateAlert(): void {\n    const errorRate = this.metrics.requestCount > 0 ? this.metrics.errorCount / this.metrics.requestCount : 0;\n    \n    if (errorRate > this.ALERT_THRESHOLDS.ERROR_RATE_THRESHOLD && this.metrics.requestCount > 10) {\n      this.createAlert('error_rate', 'high', `High configuration error rate: ${(errorRate * 100).toFixed(2)}%`, {\n        errorRate,\n        errorCount: this.metrics.errorCount,\n        requestCount: this.metrics.requestCount\n      });\n    }\n  }\n\n  /**\n   * Check for cache performance alerts\n   */\n  private checkCachePerformanceAlert(): void {\n    const hitRatio = this.getCacheHitRatio();\n    const totalRequests = this.metrics.cacheHits + this.metrics.cacheMisses;\n    \n    if (hitRatio < this.ALERT_THRESHOLDS.CACHE_HIT_RATIO_MIN && totalRequests > 50) {\n      this.createAlert('cache_performance', 'medium', `Low cache hit ratio: ${(hitRatio * 100).toFixed(2)}%`, {\n        hitRatio,\n        cacheHits: this.metrics.cacheHits,\n        cacheMisses: this.metrics.cacheMisses\n      });\n    }\n  }\n\n  // ===== NOTIFICATIONS =====\n\n  /**\n   * Send alert notifications to configured channels\n   */\n  private async sendAlertNotification(alert: ConfigAlert): Promise<void> {\n    try {\n      // Slack webhook notification\n      const slackWebhook = process.env.SLACK_WEBHOOK_URL;\n      if (slackWebhook && (alert.severity === 'high' || alert.severity === 'critical')) {\n        await this.sendSlackNotification(alert, slackWebhook);\n      }\n      \n      // Email notification (could be implemented)\n      // await this.sendEmailNotification(alert);\n      \n      // Microsoft Teams notification (could be implemented)\n      // await this.sendTeamsNotification(alert);\n      \n    } catch (error) {\n      console.error('Failed to send alert notification:', error);\n    }\n  }\n\n  /**\n   * Send Slack notification\n   */\n  private async sendSlackNotification(alert: ConfigAlert, webhookUrl: string): Promise<void> {\n    const payload = {\n      text: `üö® Configuration Alert: ${alert.message}`,\n      attachments: [\n        {\n          color: this.getAlertColor(alert.severity),\n          fields: [\n            { title: 'Alert Type', value: alert.type, short: true },\n            { title: 'Severity', value: alert.severity.toUpperCase(), short: true },\n            { title: 'Environment', value: alert.environment, short: true },\n            { title: 'Timestamp', value: alert.timestamp.toISOString(), short: true }\n          ],\n          footer: 'PrepBettr Config Monitoring'\n        }\n      ]\n    };\n    \n    const response = await fetch(webhookUrl, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(payload)\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Slack notification failed: ${response.statusText}`);\n    }\n  }\n\n  /**\n   * Get alert color for Slack\n   */\n  private getAlertColor(severity: ConfigAlert['severity']): string {\n    switch (severity) {\n      case 'critical': return 'danger';\n      case 'high': return 'warning';\n      case 'medium': return 'warning';\n      case 'low': return 'good';\n      default: return 'good';\n    }\n  }\n\n  // ===== HEALTH CHECK =====\n\n  /**\n   * Perform comprehensive health check\n   */\n  async healthCheck(): Promise<HealthCheckResult> {\n    const alerts = await this.getActiveAlerts();\n    const status = this.calculateHealthStatus(alerts);\n    \n    return {\n      service: 'unified-config',\n      status,\n      timestamp: new Date(),\n      metrics: { ...this.metrics },\n      alerts,\n      details: {\n        cacheHitRatio: this.getCacheHitRatio(),\n        avgLatency: this.metrics.avgLatency,\n        errorRate: this.metrics.requestCount > 0 ? this.metrics.errorCount / this.metrics.requestCount : 0,\n        uptime: process.uptime()\n      }\n    };\n  }\n\n  /**\n   * Get active alerts\n   */\n  private async getActiveAlerts(): Promise<ConfigAlert[]> {\n    try {\n      const alerts = await azureCosmosService.queryDocuments<ConfigAlert>(\n        'configAlerts',\n        'SELECT * FROM c WHERE c.resolved = false AND c.timestamp >= @cutoff ORDER BY c.timestamp DESC',\n        [{ name: '@cutoff', value: new Date(Date.now() - 24 * 60 * 60 * 1000) }] // Last 24 hours\n      );\n      return alerts.slice(0, 10); // Limit to 10 most recent\n    } catch (error) {\n      console.error('Failed to get active alerts:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Calculate overall health status\n   */\n  private calculateHealthStatus(alerts: ConfigAlert[]): 'healthy' | 'degraded' | 'unhealthy' {\n    const criticalAlerts = alerts.filter(a => a.severity === 'critical');\n    const highAlerts = alerts.filter(a => a.severity === 'high');\n    \n    if (criticalAlerts.length > 0) return 'unhealthy';\n    if (highAlerts.length > 2) return 'unhealthy';\n    if (alerts.length > 5) return 'degraded';\n    \n    // Check metrics\n    const errorRate = this.metrics.requestCount > 0 ? this.metrics.errorCount / this.metrics.requestCount : 0;\n    const cacheHitRatio = this.getCacheHitRatio();\n    \n    if (errorRate > 0.1 || cacheHitRatio < 0.5 || this.metrics.avgLatency > 2000) {\n      return 'degraded';\n    }\n    \n    return 'healthy';\n  }\n\n  // ===== UTILITY METHODS =====\n\n  /**\n   * Get current cache hit ratio\n   */\n  private getCacheHitRatio(): number {\n    const total = this.metrics.cacheHits + this.metrics.cacheMisses;\n    return total > 0 ? this.metrics.cacheHits / total : 0;\n  }\n\n  /**\n   * Get current metrics\n   */\n  getMetrics(): ConfigMetrics {\n    return { ...this.metrics };\n  }\n\n  /**\n   * Reset metrics (for testing or periodic reset)\n   */\n  resetMetrics(): void {\n    this.metrics = {\n      requestCount: 0,\n      cacheHits: 0,\n      cacheMisses: 0,\n      avgLatency: 0,\n      errorCount: 0,\n      driftDetected: 0,\n      syncFailures: 0\n    };\n    this.latencyBuffer = [];\n  }\n\n  /**\n   * Flush telemetry data\n   */\n  flush(): Promise<void> {\n    return new Promise((resolve) => {\n      if (this.telemetryClient) {\n        this.telemetryClient.flush();\n        // Flush is synchronous, so we can resolve immediately\n        resolve();\n      } else {\n        resolve();\n      }\n    });\n  }\n}\n\n// ===== SINGLETON INSTANCE =====\n\nexport const configMonitoringService = new ConfigMonitoringService();\nexport default configMonitoringService;\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/services/email-verification-service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":124,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3655,3658],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3655,3658],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":145,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4277,4280],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4277,4280],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":187,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":187,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5358,5361],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5358,5361],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":214,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":214,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5992,5995],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5992,5995],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":231,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":231,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6488,6491],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6488,6491],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":270,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":270,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7467,7470],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7467,7470],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":319,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":319,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8770,8773],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8770,8773],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// lib/services/email-verification-service.ts\n\nimport { getAdminFirestore } from '@/lib/firebase/admin';\nimport { FieldValue } from 'firebase-admin/firestore';\nimport { EmailVerification } from '@/types/subscription';\nimport { randomBytes } from 'crypto';\nimport { awsSESService } from './aws-ses-service';\n\nexport class EmailVerificationService {\n  private _db: Awaited<ReturnType<typeof getAdminFirestore>> | null = null;\n  \n  private async getDb() {\n    if (!this._db) {\n      this._db = await getAdminFirestore();\n    }\n    return this._db;\n  }\n\n  /**\n   * Generate and send email verification token\n   */\n  async sendVerificationEmail(\n    userId: string, \n    email: string, \n    userName?: string\n  ): Promise<{ success: boolean; token?: string; error?: string }> {\n    try {\n      // Generate secure verification token\n      const token = randomBytes(32).toString('hex');\n      \n      // Set expiry to 24 hours from now\n      const expiresAt = new Date();\n      expiresAt.setHours(expiresAt.getHours() + 24);\n\n      // Create verification record\n      const verificationData: Omit<EmailVerification, 'id'> = {\n        userId,\n        email,\n        token,\n        verified: false,\n        createdAt: new Date(),\n        verifiedAt: null,\n        expiresAt\n      };\n\n      // Store in database\n      const db = await this.getDb();\n      await db.collection('email_verifications').add(verificationData);\n\n      // Create verification URL\n      const baseUrl = process.env.NEXTAUTH_URL || process.env.AZURE_APP_SERVICE_URL || 'http://localhost:3000';\n      const verificationUrl = `${baseUrl}/api/auth/verify-email?token=${token}`;\n\n      // Email content\n      const emailContent = `\n        Dear ${userName || 'User'},\n\n        Please verify your email address to complete your account setup and enable premium features.\n\n        Click the link below to verify your email:\n        ${verificationUrl}\n\n        This link will expire in 24 hours.\n\n        If you didn't create an account with PrepBettr, you can safely ignore this email.\n\n        Best regards,\n        The PrepBettr Team\n      `;\n\n      console.log('Email verification to be sent:', {\n        to: email,\n        subject: 'Verify your PrepBettr account',\n        content: emailContent,\n        verificationUrl\n      });\n\n      const { success, error } = await awsSESService.sendEmail({\n        to: email,\n        subject: 'Verify your PrepBettr account',\n        html: emailContent\n      });\n\n      if (!success) throw new Error(error);\n\n      console.log(`Email verification sent to ${email} for user ${userId}`);\n\n      return { \n        success: true, \n        token \n      };\n\n    } catch (error) {\n      console.error('Error sending verification email:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to send verification email'\n      };\n    }\n  }\n\n  /**\n   * Verify email using token\n   */\n  async verifyEmail(token: string): Promise<{ success: boolean; userId?: string; error?: string }> {\n    try {\n      // Find verification record\n      const db = await this.getDb();\n      const verificationSnapshot = await db\n        .collection('email_verifications')\n        .where('token', '==', token)\n        .where('verified', '==', false)\n        .limit(1)\n        .get();\n\n      if (verificationSnapshot.empty || !verificationSnapshot.docs || verificationSnapshot.docs.length === 0) {\n        return {\n          success: false,\n          error: 'Invalid or expired verification token'\n        };\n      }\n\n      const verificationDoc = verificationSnapshot.docs[0];\n      const verificationData = (verificationDoc as any)?.data?.() as EmailVerification || {};\n      \n      // Handle mock case where data might be empty\n      if (!verificationData || !verificationData.userId) {\n        return {\n          success: false,\n          error: 'Invalid verification data - this may be expected in development mode'\n        };\n      }\n\n      // Check if token has expired\n      if (verificationData.expiresAt < new Date()) {\n        return {\n          success: false,\n          error: 'Verification token has expired'\n        };\n      }\n\n      // Update verification record\n      const batch = db.batch();\n\n      batch.update((verificationDoc as any).ref, {\n        verified: true,\n        verifiedAt: FieldValue.serverTimestamp()\n      });\n\n      // Update user's email verification status\n      const userDoc = db.collection('users').doc(verificationData.userId);\n      batch.update(userDoc, {\n        emailVerified: true,\n        updatedAt: FieldValue.serverTimestamp()\n      });\n\n      await batch.commit();\n\n      console.log(`Email verified for user ${verificationData.userId}`);\n\n      return {\n        success: true,\n        userId: verificationData.userId\n      };\n\n    } catch (error) {\n      console.error('Error verifying email:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to verify email'\n      };\n    }\n  }\n\n  /**\n   * Check if user's email is verified\n   */\n  async isEmailVerified(userId: string): Promise<boolean> {\n    try {\n      const db = await this.getDb();\n      const userDoc = await db.collection('users').doc(userId).get();\n      \n      if (!userDoc.exists) {\n        return false;\n      }\n\n      const userData = userDoc.data() as any;\n      return userData?.emailVerified === true;\n\n    } catch (error) {\n      console.error('Error checking email verification:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Resend verification email\n   */\n  async resendVerificationEmail(\n    userId: string\n  ): Promise<{ success: boolean; error?: string }> {\n    try {\n      // Get user data\n      const db = await this.getDb();\n      const userDoc = await db.collection('users').doc(userId).get();\n      \n      if (!userDoc.exists) {\n        return {\n          success: false,\n          error: 'User not found'\n        };\n      }\n\n      const userData = userDoc.data() as any;\n      \n      if (userData?.emailVerified === true) {\n        return {\n          success: false,\n          error: 'Email is already verified'\n        };\n      }\n\n      // Invalidate any existing unverified tokens for this user\n      const existingTokensSnapshot = await db\n        .collection('email_verifications')\n        .where('userId', '==', userId)\n        .where('verified', '==', false)\n        .get();\n\n      const batch = db.batch();\n      existingTokensSnapshot.docs.forEach((doc: any) => {\n        batch.delete(doc.ref);\n      });\n\n      await batch.commit();\n\n      // Send new verification email\n      return await this.sendVerificationEmail(\n        userId, \n        userData?.email, \n        userData?.name\n      );\n\n    } catch (error) {\n      console.error('Error resending verification email:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to resend verification email'\n      };\n    }\n  }\n\n  /**\n   * Get verification status for user\n   */\n  async getVerificationStatus(userId: string): Promise<{\n    verified: boolean;\n    pendingVerification: boolean;\n    email?: string;\n  }> {\n    try {\n      // Check user's verified status\n      const db = await this.getDb();\n      const userDoc = await db.collection('users').doc(userId).get();\n      \n      if (!userDoc.exists) {\n        return { verified: false, pendingVerification: false };\n      }\n\n      const userData = userDoc.data() as any;\n      const verified = userData?.emailVerified === true;\n\n      if (verified) {\n        return { \n          verified: true, \n          pendingVerification: false,\n          email: userData?.email\n        };\n      }\n\n      // Check if there are pending verifications\n      const pendingSnapshot = await db\n        .collection('email_verifications')\n        .where('userId', '==', userId)\n        .where('verified', '==', false)\n        .where('expiresAt', '>', new Date())\n        .limit(1)\n        .get();\n\n      return {\n        verified: false,\n        pendingVerification: !pendingSnapshot.empty,\n        email: userData?.email\n      };\n\n    } catch (error) {\n      console.error('Error getting verification status:', error);\n      return { verified: false, pendingVerification: false };\n    }\n  }\n\n  /**\n   * Clean up expired verification tokens\n   */\n  async cleanupExpiredTokens(): Promise<{ deleted: number }> {\n    try {\n      const db = await this.getDb();\n      const expiredSnapshot = await db\n        .collection('email_verifications')\n        .where('expiresAt', '<', new Date())\n        .where('verified', '==', false)\n        .get();\n\n      if (expiredSnapshot.empty) {\n        return { deleted: 0 };\n      }\n\n      const batch = db.batch();\n      expiredSnapshot.docs.forEach((doc: any) => {\n        batch.delete(doc.ref);\n      });\n\n      await batch.commit();\n\n      console.log(`Cleaned up ${expiredSnapshot.docs.length} expired verification tokens`);\n\n      return { deleted: expiredSnapshot.docs.length };\n\n    } catch (error) {\n      console.error('Error cleaning up expired tokens:', error);\n      return { deleted: 0 };\n    }\n  }\n}\n\n// Export singleton instance\nexport const emailVerificationService = new EmailVerificationService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/services/enhanced-resume-processing-service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'retryWithExponentialBackoff' is defined but never used.","line":20,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'path' is defined but never used.","line":23,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2083,2086],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2083,2086],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":375,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":375,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12775,12778],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12775,12778],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":421,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":421,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14374,14377],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14374,14377],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'parseError' is defined but never used.","line":480,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":480,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":499,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":499,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17136,17139],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17136,17139],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":657,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":657,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22251,22254],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22251,22254],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":663,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":663,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22456,22459],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22456,22459],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Enhanced Resume Processing Service\n * \n * Integrates Azure AI Foundry Document Intelligence with the existing resume processing pipeline.\n * Provides advanced document analysis, ATS optimization, and job matching capabilities.\n * Features backward compatibility and graceful fallback to existing services.\n */\n\nimport { FieldValue } from 'firebase-admin/firestore';\nimport { getAdminFirestore } from '@/lib/firebase/admin';\nimport { resumeStorageService } from '@/lib/storage';\nimport { StorageProvider } from '@/lib/storage/IStorageService';\nimport { \n  foundryDocumentIntelligenceService, \n  FoundryResumeExtraction, \n  JobMatchAnalysis \n} from '@/lib/azure-ai-foundry/documents/document-client';\nimport { azureFormRecognizer, ExtractedResumeData } from './azure-form-recognizer';\nimport { logServerError } from '@/lib/errors';\nimport { retryWithExponentialBackoff } from '@/lib/utils/retry-with-backoff';\nimport { unifiedConfigService } from './unified-config-service';\nimport { templateEngine } from '@/lib/utils/template-engine';\nimport path from 'path';\n\nexport interface EnhancedProcessedResumeResult {\n  success: boolean;\n  data?: {\n    resumeId: string;\n    fileUrl: string;\n    sasUrl?: string;\n    extractedData: FoundryResumeExtraction | ExtractedResumeData;\n    interviewQuestions: string[];\n    storageProvider: StorageProvider;\n    // Enhanced fields\n    atsScore?: number;\n    jobMatchScore?: number;\n    missingKeywords?: string[];\n    processingMethod: 'foundry-document-intelligence' | 'azure-form-recognizer' | 'openai-fallback';\n    processingTime: number;\n    confidence?: number;\n  };\n  error?: string;\n}\n\nexport interface EnhancedResumeProcessingOptions {\n  generateQuestions?: boolean;\n  maxQuestions?: number;\n  jobDescription?: string;\n  includeAtsAnalysis?: boolean;\n  includeJobMatching?: boolean;\n  forceFoundryProcessing?: boolean;\n}\n\n/**\n * Enhanced Resume Processing Service with Azure AI Foundry integration\n */\nclass EnhancedResumeProcessingService {\n  private initialized = false;\n  private foundryEnabled = false;\n  private legacyService: any; // Reference to original service for fallback\n\n  /**\n   * Initialize the enhanced resume processing service\n   */\n  async initialize(): Promise<void> {\n    if (this.initialized) {\n      return;\n    }\n\n    const startTime = Date.now();\n    console.log('üîß Initializing Enhanced Resume Processing Service...');\n\n    try {\n      // Check if Foundry Document Intelligence is enabled via feature flag\n      this.foundryEnabled = await this.checkFoundryEnabled();\n\n      if (this.foundryEnabled) {\n        // Initialize Azure AI Foundry Document Intelligence\n        const foundryReady = await foundryDocumentIntelligenceService.initialize();\n        if (foundryReady) {\n          console.log('‚úÖ Azure AI Foundry Document Intelligence initialized');\n        } else {\n          console.warn('‚ö†Ô∏è Foundry Document Intelligence failed to initialize, using fallback');\n          this.foundryEnabled = false;\n        }\n      }\n\n      // Always initialize fallback services\n      await azureFormRecognizer.initialize();\n      \n      this.initialized = true;\n      const initTime = Date.now() - startTime;\n      console.log(`‚úÖ Enhanced Resume Processing Service initialized in ${initTime}ms (Foundry: ${this.foundryEnabled})`);\n\n    } catch (error) {\n      console.error('‚ùå Failed to initialize Enhanced Resume Processing Service:', error);\n      logServerError(error as Error, { \n        service: 'enhanced-resume-processing', \n        action: 'initialize' \n      });\n      // Don't throw - we can still operate with fallbacks\n      this.initialized = true;\n    }\n  }\n\n  /**\n   * Check if Foundry processing is enabled via feature flag\n   */\n  private async checkFoundryEnabled(): Promise<boolean> {\n    try {\n      const enabled = await unifiedConfigService.get('features.foundryResumeProcessing', false);\n      console.log(`üéõÔ∏è Foundry resume processing feature flag: ${enabled}`);\n      return enabled;\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Could not check Foundry feature flag, defaulting to false:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Process resume with enhanced capabilities\n   */\n  async processResume(\n    userId: string,\n    fileBuffer: Buffer,\n    fileName: string,\n    mimeType: string,\n    fileSize: number,\n    options: EnhancedResumeProcessingOptions = {}\n  ): Promise<EnhancedProcessedResumeResult> {\n    const startTime = Date.now();\n    \n    try {\n      await this.initialize();\n      \n      console.log(`üîÑ Processing resume for user ${userId}: ${fileName}`);\n      console.log(`üìã Options:`, {\n        generateQuestions: options.generateQuestions !== false,\n        includeAtsAnalysis: options.includeAtsAnalysis || false,\n        includeJobMatching: options.includeJobMatching && !!options.jobDescription,\n        forceFoundryProcessing: options.forceFoundryProcessing || false\n      });\n\n      // Step 1: Delete existing resume if it exists\n      await this.deleteExistingResume(userId);\n\n      // Step 2: Upload to storage first (for backup and sharing)\n      const storageResult = await resumeStorageService.uploadResume(\n        userId, \n        fileBuffer, \n        fileName, \n        mimeType\n      );\n\n      // Step 3: Extract data using the best available method\n      const extractionResult = await this.extractResumeDataEnhanced(\n        fileBuffer, \n        mimeType, \n        options\n      );\n\n      // Step 4: Generate interview questions if requested\n      let interviewQuestions: string[] = [];\n      if (options.generateQuestions !== false) {\n        interviewQuestions = await this.generateQuestionsEnhanced(\n          extractionResult.extractedData, \n          options.maxQuestions\n        );\n      }\n\n      // Step 5: Perform job matching if job description provided\n      let jobMatchAnalysis: JobMatchAnalysis | undefined;\n      if (options.includeJobMatching && options.jobDescription && this.isFoundryExtraction(extractionResult.extractedData)) {\n        try {\n          jobMatchAnalysis = await foundryDocumentIntelligenceService.compareWithJobDescription(\n            extractionResult.extractedData as FoundryResumeExtraction,\n            options.jobDescription\n          );\n        } catch (error) {\n          console.warn('‚ö†Ô∏è Job matching failed:', error);\n        }\n      }\n\n      // Step 6: Save to Firestore with enhanced data\n      const resumeId = await this.saveToFirestoreEnhanced(userId, {\n        fileName,\n        fileUrl: storageResult.fileUrl,\n        filePath: storageResult.filePath,\n        sasUrl: storageResult.sasUrl,\n        extractedData: extractionResult.extractedData,\n        interviewQuestions,\n        jobDescription: options.jobDescription,\n        jobMatchAnalysis,\n        metadata: {\n          fileSize,\n          uploadDate: new Date(),\n          lastModified: new Date(),\n          mimeType,\n          storageProvider: storageResult.provider,\n          processingMethod: extractionResult.processingMethod,\n          processingTime: extractionResult.processingTime,\n          confidence: extractionResult.confidence\n        }\n      });\n\n      const totalProcessingTime = Date.now() - startTime;\n      console.log(`‚úÖ Enhanced resume processing completed in ${totalProcessingTime}ms`);\n\n      // Extract enhanced scores for response\n      const atsScore = this.isFoundryExtraction(extractionResult.extractedData) \n        ? extractionResult.extractedData.atsAnalysis?.score \n        : undefined;\n      \n      const jobMatchScore = jobMatchAnalysis?.overallScore;\n      const missingKeywords = jobMatchAnalysis?.skillsMatch.missingSkills;\n\n      return {\n        success: true,\n        data: {\n          resumeId,\n          fileUrl: storageResult.fileUrl,\n          sasUrl: storageResult.sasUrl,\n          extractedData: extractionResult.extractedData,\n          interviewQuestions,\n          storageProvider: storageResult.provider,\n          atsScore,\n          jobMatchScore,\n          missingKeywords,\n          processingMethod: extractionResult.processingMethod,\n          processingTime: totalProcessingTime,\n          confidence: extractionResult.confidence\n        }\n      };\n\n    } catch (error) {\n      const processingTime = Date.now() - startTime;\n      console.error(`‚ùå Enhanced resume processing failed for user ${userId}:`, error);\n      \n      logServerError(error as Error, {\n        service: 'enhanced-resume-processing',\n        action: 'process',\n        userId\n      }, {\n        fileName: fileName.substring(0, 50),\n        processingTime,\n        foundryEnabled: this.foundryEnabled\n      });\n\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to process resume'\n      };\n    }\n  }\n\n  /**\n   * Extract resume data using enhanced processing with intelligent fallback\n   */\n  private async extractResumeDataEnhanced(\n    fileBuffer: Buffer, \n    mimeType: string,\n    options: EnhancedResumeProcessingOptions\n  ): Promise<{\n    extractedData: FoundryResumeExtraction | ExtractedResumeData;\n    processingMethod: 'foundry-document-intelligence' | 'azure-form-recognizer' | 'openai-fallback';\n    processingTime: number;\n    confidence?: number;\n  }> {\n    \n    // Try Azure AI Foundry Document Intelligence first (if enabled)\n    if ((this.foundryEnabled || options.forceFoundryProcessing) && foundryDocumentIntelligenceService.isReady()) {\n      try {\n        console.log('üöÄ Using Azure AI Foundry Document Intelligence...');\n        const startTime = Date.now();\n        \n        const extraction = await foundryDocumentIntelligenceService.analyzeResume(\n          fileBuffer, \n          mimeType,\n          {\n            includeAtsAnalysis: options.includeAtsAnalysis,\n            modelType: 'resume-analysis'\n          }\n        );\n        \n        const processingTime = Date.now() - startTime;\n        \n        return {\n          extractedData: extraction,\n          processingMethod: 'foundry-document-intelligence',\n          processingTime,\n          confidence: extraction.metadata.overallConfidence\n        };\n        \n      } catch (error) {\n        console.warn('‚ö†Ô∏è Foundry Document Intelligence failed, falling back:', error);\n        // Continue to fallback\n      }\n    }\n\n    // Fallback to Azure Form Recognizer\n    if (azureFormRecognizer.isReady()) {\n      try {\n        console.log('üîç Using Azure Form Recognizer fallback...');\n        const startTime = Date.now();\n        \n        const extraction = await azureFormRecognizer.extractResumeData(fileBuffer, mimeType);\n        const processingTime = Date.now() - startTime;\n        \n        return {\n          extractedData: extraction,\n          processingMethod: 'azure-form-recognizer',\n          processingTime,\n          confidence: 0.8 // Default confidence for Form Recognizer\n        };\n        \n      } catch (error) {\n        console.warn('‚ö†Ô∏è Azure Form Recognizer failed, falling back to OpenAI:', error);\n        // Continue to final fallback\n      }\n    }\n\n    // Final fallback to OpenAI extraction\n    console.log('ü§ñ Using OpenAI extraction fallback...');\n    const startTime = Date.now();\n    \n    const extraction = await this.extractWithOpenAIFallback(fileBuffer, mimeType);\n    const processingTime = Date.now() - startTime;\n    \n    return {\n      extractedData: extraction,\n      processingMethod: 'openai-fallback',\n      processingTime,\n      confidence: 0.7 // Lower confidence for text-only extraction\n    };\n  }\n\n  /**\n   * Enhanced question generation with intelligent routing\n   */\n  private async generateQuestionsEnhanced(\n    extractedData: FoundryResumeExtraction | ExtractedResumeData,\n    maxQuestions: number = 10\n  ): Promise<string[]> {\n    try {\n      console.log('ü§î Generating interview questions...');\n\n      // Use the unified Azure AI service for question generation\n      const { azureAI } = await import('@/lib/ai');\n      \n      // Convert data to the format expected by azureAI\n      const resumeData = this.convertToResumeInfo(extractedData);\n      const result = await azureAI.generateQuestions(resumeData, {\n        maxQuestions,\n        interviewType: 'mixed'\n      });\n      \n      if (result.success && result.data) {\n        console.log(`‚úÖ Generated ${result.data.length} interview questions via ${result.provider}`);\n        return result.data;\n      }\n\n      // Return default questions if generation fails\n      console.warn('‚ö†Ô∏è Question generation failed, using defaults:', result.error);\n      return result.data || this.getDefaultQuestions();\n\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Question generation failed:', error);\n      return this.getDefaultQuestions();\n    }\n  }\n\n  /**\n   * Save enhanced data to Firestore\n   */\n  private async saveToFirestoreEnhanced(userId: string, resumeData: any): Promise<string> {\n    try {\n      const db = await getAdminFirestore();\n      const docRef = db.collection('profiles').doc(userId);\n\n      // Extract ATS and job matching scores for top-level fields\n      const atsScore = this.isFoundryExtraction(resumeData.extractedData) \n        ? resumeData.extractedData.atsAnalysis?.score \n        : undefined;\n      \n      const jobMatchScore = resumeData.jobMatchAnalysis?.overallScore;\n      const missingKeywords = resumeData.jobMatchAnalysis?.skillsMatch.missingSkills || [];\n\n      await docRef.set({\n        userId,\n        ...resumeData,\n        // Enhanced fields for easy querying\n        atsScore,\n        jobMatchScore, \n        missingKeywords,\n        processorVersion: this.isFoundryExtraction(resumeData.extractedData) ? 'foundry-v1' : 'legacy-v1',\n        metadata: {\n          ...resumeData.metadata,\n          uploadDate: FieldValue.serverTimestamp(),\n          lastModified: FieldValue.serverTimestamp(),\n        },\n      });\n\n      console.log(`‚úÖ Enhanced resume data saved to Firestore for user: ${userId}`);\n      return userId;\n      \n    } catch (error) {\n      console.error('‚ùå Failed to save enhanced resume data to Firestore:', error);\n      throw new Error('Failed to save resume data');\n    }\n  }\n\n  /**\n   * Delete existing resume data\n   */\n  private async deleteExistingResume(userId: string): Promise<void> {\n    try {\n      const db = await getAdminFirestore();\n      const profileDoc = await db.collection('profiles').doc(userId).get();\n\n      if (profileDoc.exists) {\n        const profileData = profileDoc.data() as any;\n        \n        // Delete from storage\n        if (profileData?.filePath) {\n          await resumeStorageService.deleteResume(profileData.filePath);\n        } else if (profileData?.blobName) {\n          await resumeStorageService.deleteResume(profileData.blobName);\n        }\n      }\n      \n      console.log(`üóëÔ∏è Existing resume cleaned up for user: ${userId}`);\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Failed to delete existing resume:', error);\n      // Don't throw - we still want to proceed with new upload\n    }\n  }\n\n  /**\n   * OpenAI fallback extraction (legacy method)\n   */\n  private async extractWithOpenAIFallback(fileBuffer: Buffer, mimeType: string): Promise<ExtractedResumeData> {\n    // For PDFs, extract text first\n    let text = '';\n\n    if (mimeType === 'application/pdf') {\n      const pdfParse = await import('pdf-parse');\n      const pdfData = await pdfParse.default(fileBuffer);\n      text = pdfData.text;\n    } else if (mimeType.includes('text')) {\n      text = fileBuffer.toString('utf-8');\n    } else {\n      throw new Error(`Unsupported file type for OpenAI extraction: ${mimeType}`);\n    }\n\n    // Use unified Azure AI service for structured extraction\n    const prompt = this.getExtractionPrompt(text);\n    const { azureAI } = await import('@/lib/ai');\n    const result = await azureAI.generateCompletion(prompt, {\n      temperature: 0.1,\n      maxTokens: 4000\n    });\n    \n    if (result.success && result.data) {\n      try {\n        const parsedData = typeof result.data === 'string' \n          ? JSON.parse(result.data) \n          : result.data;\n\n        return {\n          personalInfo: parsedData.personalInfo || {},\n          summary: parsedData.summary,\n          skills: parsedData.skills || [],\n          experience: parsedData.experience || [],\n          education: parsedData.education || [],\n          projects: parsedData.projects || [],\n          certifications: parsedData.certifications || [],\n          languages: parsedData.languages || [],\n          rawExtraction: { text, aiResponse: result.data }\n        };\n      } catch (parseError) {\n        console.warn('‚ö†Ô∏è Failed to parse OpenAI extraction result');\n        throw new Error('Failed to parse extracted resume data');\n      }\n    }\n\n    throw new Error('Failed to extract resume data with OpenAI');\n  }\n\n  /**\n   * Type guard to check if extraction is from Foundry\n   */\n  private isFoundryExtraction(data: FoundryResumeExtraction | ExtractedResumeData): data is FoundryResumeExtraction {\n    return 'metadata' in data && data.metadata && 'processingTime' in data.metadata;\n  }\n\n  /**\n   * Convert extracted data to ResumeInfo format for question generation\n   */\n  private convertToResumeInfo(data: FoundryResumeExtraction | ExtractedResumeData): any {\n    if (this.isFoundryExtraction(data)) {\n      // Enhanced Foundry extraction\n      return {\n        name: data.personalInfo?.name?.content || 'Unknown',\n        skills: data.skills.map(s => s.skill).join(', '),\n        experience: data.experience.map(exp => \n          `${exp.position.content} at ${exp.company.content} (${exp.startDate?.content || 'Unknown'} - ${exp.endDate?.content || 'Present'}): ${exp.description.content}`\n        ).join('. '),\n        education: data.education.map(edu => \n          `${edu.degree.content} in ${edu.field.content} from ${edu.institution.content} (${edu.startDate?.content || 'Unknown'} - ${edu.endDate?.content || 'Unknown'})`\n        ).join(', ')\n      };\n    } else {\n      // Legacy extraction\n      return {\n        name: data.personalInfo?.name || 'Unknown',\n        skills: data.skills.join(', '),\n        experience: data.experience.map(exp => \n          `${exp.position} at ${exp.company} (${exp.startDate || 'Unknown'} - ${exp.endDate || 'Present'}): ${exp.description}`\n        ).join('. '),\n        education: data.education.map(edu => \n          `${edu.degree} in ${edu.field} from ${edu.institution} (${edu.startDate || 'Unknown'} - ${edu.endDate || 'Unknown'})`\n        ).join(', ')\n      };\n    }\n  }\n\n  /**\n   * Get extraction prompt using template engine\n   */\n  private getExtractionPrompt(text: string): string {\n    try {\n      // Use inline template for enhanced resume extraction\n      const template = `Extract comprehensive information from this resume text and return as structured JSON.\n\n**Output Format:**\n{{format_specification}}\n\n{{#if extraction_guidelines}}\n**Extraction Guidelines:**\n{{#each extraction_guidelines}}\n- {{@value}}\n{{/each}}\n{{/if}}\n\n**Resume Text:**\n{{resume_text}}`;\n\n      const context = {\n        format_specification: `{\n  \"personalInfo\": {\n    \"name\": \"Full name\",\n    \"email\": \"Email address\", \n    \"phone\": \"Phone number\",\n    \"address\": \"Address\",\n    \"linkedin\": \"LinkedIn URL\",\n    \"github\": \"GitHub URL\",\n    \"website\": \"Personal website URL\"\n  },\n  \"summary\": \"Professional summary\",\n  \"skills\": [\"skill1\", \"skill2\", ...],\n  \"experience\": [...],\n  \"education\": [...],\n  \"projects\": [...],\n  \"certifications\": [...],\n  \"languages\": [...]\n}`,\n        extraction_guidelines: [\n          'Return ONLY valid JSON, no additional text',\n          'Extract all personal information accurately', \n          'Include quantifiable achievements in experience',\n          'Capture all technical skills, tools, and technologies',\n          'Extract project details with technologies used',\n          'Include education details with dates and achievements',\n          'List certifications with issuing organizations',\n          'Identify language proficiency levels if mentioned'\n        ],\n        resume_text: text\n      };\n\n      return templateEngine.render(template, context);\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Template engine failed for extraction prompt, using legacy method:', error);\n      return this.getExtractionPromptLegacy(text);\n    }\n  }\n\n  /**\n   * Legacy extraction prompt (fallback)\n   */\n  private getExtractionPromptLegacy(text: string): string {\n    return `Extract the following information from this resume text and return as JSON:\n\n    {\n      \"personalInfo\": {\n        \"name\": \"Full name\",\n        \"email\": \"Email address\", \n        \"phone\": \"Phone number\",\n        \"address\": \"Address\",\n        \"linkedin\": \"LinkedIn URL\",\n        \"github\": \"GitHub URL\",\n        \"website\": \"Personal website URL\"\n      },\n      \"summary\": \"Professional summary\",\n      \"skills\": [\"skill1\", \"skill2\", ...],\n      \"experience\": [\n        {\n          \"company\": \"Company name\",\n          \"position\": \"Job title\", \n          \"startDate\": \"Start date\",\n          \"endDate\": \"End date or 'Present'\",\n          \"isCurrent\": true/false,\n          \"description\": \"Job description\",\n          \"achievements\": [\"achievement1\", ...],\n          \"technologies\": [\"tech1\", \"tech2\", ...],\n          \"location\": \"Location\"\n        }\n      ],\n      \"education\": [\n        {\n          \"institution\": \"School name\",\n          \"degree\": \"Degree type\",\n          \"field\": \"Field of study\", \n          \"startDate\": \"Start date\",\n          \"endDate\": \"End date\",\n          \"gpa\": 3.5,\n          \"location\": \"Location\"\n        }\n      ],\n      \"projects\": [...],\n      \"certifications\": [...],\n      \"languages\": [...]\n    }\n    \n    Resume text:\n    ${text}`;\n  }\n\n  /**\n   * Get default interview questions\n   */\n  private getDefaultQuestions(): string[] {\n    return [\n      \"Tell me about yourself and your professional background.\",\n      \"What interests you most about this position?\",\n      \"Describe a challenging project you've worked on.\",\n      \"How do you stay updated with industry trends?\",\n      \"Where do you see yourself in 5 years?\",\n      \"What are your greatest strengths?\",\n      \"Describe a time when you had to work under pressure.\",\n      \"How do you handle feedback and criticism?\"\n    ];\n  }\n\n  /**\n   * Get user's resume data from Firestore\n   */\n  async getUserResumeData(userId: string): Promise<any> {\n    try {\n      const db = await getAdminFirestore();\n      const profileDoc = await db.collection('profiles').doc(userId).get();\n\n      if (profileDoc.exists) {\n        return profileDoc.data() as any;\n      }\n\n      return null;\n    } catch (error) {\n      console.error('‚ùå Failed to get user resume data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Generate new secure URL for file access\n   */\n  async generateNewSecureUrl(userId: string, expiryHours: number = 24): Promise<string | null> {\n    try {\n      const resumeData = await this.getUserResumeData(userId);\n      \n      const filePath = resumeData?.filePath || resumeData?.blobName;\n      if (filePath) {\n        return await resumeStorageService.getResumeUrl(filePath, expiryHours);\n      }\n\n      return null;\n    } catch (error) {\n      console.error('‚ùå Failed to generate new secure URL:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Check service status\n   */\n  getServiceStatus(): {\n    initialized: boolean;\n    foundryEnabled: boolean;\n    foundryReady: boolean;\n    formRecognizerReady: boolean;\n  } {\n    return {\n      initialized: this.initialized,\n      foundryEnabled: this.foundryEnabled,\n      foundryReady: foundryDocumentIntelligenceService.isReady(),\n      formRecognizerReady: azureFormRecognizer.isReady()\n    };\n  }\n}\n\n// Export singleton instance\nexport const enhancedResumeProcessingService = new EnhancedResumeProcessingService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/services/error-budget-monitor.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[361,364],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[361,364],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":184,"column":125,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":184,"endColumn":128,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5846,5849],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5846,5849],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":195,"column":128,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":195,"endColumn":131,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6186,6189],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6186,6189],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { azureCosmosService } from './azure-cosmos-service';\n\nexport interface ErrorEvent {\n  featureName: string;\n  errorType: 'client_error' | 'server_error' | 'performance' | 'user_experience';\n  errorMessage: string;\n  userId?: string;\n  userAgent?: string;\n  timestamp: Date;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  metadata?: Record<string, any>;\n}\n\nexport interface ErrorBudget {\n  featureName: string;\n  timeWindow: number; // in minutes\n  errorThreshold: number; // maximum allowed errors in the time window\n  currentErrors: number;\n  budgetExceeded: boolean;\n  lastReset: Date;\n}\n\nclass ErrorBudgetMonitorService {\n  private static instance: ErrorBudgetMonitorService;\n\n  // Default error budgets for our features\n  private readonly DEFAULT_BUDGETS: Record<string, Omit<ErrorBudget, 'currentErrors' | 'budgetExceeded' | 'lastReset'>> = {\n    autoApplyAzure: {\n      featureName: 'autoApplyAzure',\n      timeWindow: 60, // 1 hour\n      errorThreshold: 10, // max 10 errors per hour\n    },\n    portalIntegration: {\n      featureName: 'portalIntegration', \n      timeWindow: 60, // 1 hour\n      errorThreshold: 5, // max 5 errors per hour\n    }\n  };\n\n  static getInstance(): ErrorBudgetMonitorService {\n    if (!ErrorBudgetMonitorService.instance) {\n      ErrorBudgetMonitorService.instance = new ErrorBudgetMonitorService();\n    }\n    return ErrorBudgetMonitorService.instance;\n  }\n\n  /**\n   * Log an error event for monitoring\n   */\n  async logError(errorEvent: ErrorEvent): Promise<void> {\n    try {\n      await azureCosmosService.createErrorEvent({\n        featureName: errorEvent.featureName,\n        errorType: errorEvent.errorType,\n        errorMessage: errorEvent.errorMessage,\n        userId: errorEvent.userId,\n        userAgent: errorEvent.userAgent,\n        timestamp: errorEvent.timestamp,\n        severity: errorEvent.severity,\n        metadata: errorEvent.metadata\n      });\n\n      console.log(`Error logged for feature ${errorEvent.featureName}:`, errorEvent.errorMessage);\n      \n      // Check if error budget is exceeded after logging\n      await this.checkErrorBudget(errorEvent.featureName);\n    } catch (error) {\n      console.error('Error logging feature error:', error);\n      // Don't throw to avoid cascading errors\n    }\n  }\n\n  /**\n   * Get error count for a feature within a time window\n   */\n  async getErrorCount(featureName: string, timeWindowMinutes: number = 60): Promise<number> {\n    try {\n      return await azureCosmosService.getErrorEventCount(featureName, timeWindowMinutes);\n    } catch (error) {\n      console.error('Error getting error count:', error);\n      return 0;\n    }\n  }\n\n  /**\n   * Check if error budget is exceeded for a feature\n   */\n  async checkErrorBudget(featureName: string): Promise<ErrorBudget> {\n    const budgetConfig = this.DEFAULT_BUDGETS[featureName];\n    if (!budgetConfig) {\n      throw new Error(`No error budget configured for feature: ${featureName}`);\n    }\n\n    const currentErrors = await this.getErrorCount(featureName, budgetConfig.timeWindow);\n    const budgetExceeded = currentErrors > budgetConfig.errorThreshold;\n\n    const errorBudget: ErrorBudget = {\n      ...budgetConfig,\n      currentErrors,\n      budgetExceeded,\n      lastReset: new Date(),\n    };\n\n    // Log if budget is exceeded\n    if (budgetExceeded) {\n      console.warn(`üö® Error budget exceeded for ${featureName}!`, {\n        currentErrors,\n        threshold: budgetConfig.errorThreshold,\n        timeWindow: budgetConfig.timeWindow,\n      });\n      \n      // Could trigger alerts, rollback, etc.\n      await this.handleBudgetExceeded(featureName, errorBudget);\n    }\n\n    return errorBudget;\n  }\n\n  /**\n   * Handle when error budget is exceeded\n   */\n  private async handleBudgetExceeded(featureName: string, errorBudget: ErrorBudget): Promise<void> {\n    // Log the budget breach\n    await azureCosmosService.createErrorBudget({\n      featureName,\n      breachedAt: new Date(),\n      errorCount: errorBudget.currentErrors,\n      threshold: errorBudget.errorThreshold,\n      timeWindow: errorBudget.timeWindow,\n      action: 'budget_exceeded_alert',\n    });\n\n    // In a real implementation, you might:\n    // - Send alerts to monitoring systems\n    // - Automatically disable the feature\n    // - Reduce rollout percentage\n    // - Trigger incident response\n    \n    console.log(`Error budget breach logged for ${featureName}`);\n  }\n\n  /**\n   * Get error budget status for all features\n   */\n  async getAllErrorBudgets(): Promise<Record<string, ErrorBudget>> {\n    const results: Record<string, ErrorBudget> = {};\n    \n    for (const featureName of Object.keys(this.DEFAULT_BUDGETS)) {\n      try {\n        results[featureName] = await this.checkErrorBudget(featureName);\n      } catch (error) {\n        console.error(`Error checking budget for ${featureName}:`, error);\n      }\n    }\n    \n    return results;\n  }\n\n  /**\n   * Get recent errors for a feature\n   */\n  async getRecentErrors(featureName: string, limitCount: number = 10): Promise<ErrorEvent[]> {\n    try {\n      const errorEvents = await azureCosmosService.getErrorEvents(featureName, 24 * 60, limitCount); // Last 24 hours\n      return errorEvents.map(event => ({\n        featureName: event.featureName,\n        errorType: event.errorType as ErrorEvent['errorType'],\n        errorMessage: event.errorMessage,\n        userId: event.userId,\n        userAgent: event.userAgent,\n        timestamp: event.timestamp,\n        severity: event.severity as ErrorEvent['severity'],\n        metadata: event.metadata\n      }));\n    } catch (error) {\n      console.error('Error getting recent errors:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Convenience methods for specific feature logging\n   */\n  async logAutoApplyAzureError(errorMessage: string, severity: ErrorEvent['severity'] = 'medium', metadata?: Record<string, any>): Promise<void> {\n    await this.logError({\n      featureName: 'autoApplyAzure',\n      errorType: 'client_error',\n      errorMessage,\n      severity,\n      metadata,\n      timestamp: new Date(),\n    });\n  }\n\n  async logPortalIntegrationError(errorMessage: string, severity: ErrorEvent['severity'] = 'medium', metadata?: Record<string, any>): Promise<void> {\n    await this.logError({\n      featureName: 'portalIntegration',\n      errorType: 'client_error',\n      errorMessage,\n      severity,\n      metadata,\n      timestamp: new Date(),\n    });\n  }\n}\n\n// Export singleton instance\nexport const errorBudgetMonitor = ErrorBudgetMonitorService.getInstance();\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/services/feature-flags.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":147,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5090,5093],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5090,5093],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { unifiedConfigService } from './unified-config-service';\nimport { userTargetingService, UserTargetingService } from './user-targeting';\n\n// Updated interface to match unified config schema\nexport interface FeatureFlags {\n  autoApplyAzure: boolean;\n  portalIntegration: boolean;\n  voiceInterview: boolean;\n  voiceInterviewV2: boolean;\n  premiumFeatures: boolean;\n  newUI: boolean;\n}\n\nexport interface EnhancedFeatureFlags extends FeatureFlags {\n  // Rollout status for each feature\n  rolloutStatus: {\n    autoApplyAzure: boolean;\n    portalIntegration: boolean;\n    voiceInterview: boolean;\n    voiceInterviewV2: boolean;\n    premiumFeatures: boolean;\n    newUI: boolean;\n  };\n}\n\nclass FeatureFlagsService {\n  private static instance: FeatureFlagsService;\n\n  static getInstance(): FeatureFlagsService {\n    if (!FeatureFlagsService.instance) {\n      FeatureFlagsService.instance = new FeatureFlagsService();\n    }\n    return FeatureFlagsService.instance;\n  }\n\n  /**\n   * Get feature flag value considering both remote config and user targeting\n   */\n  async getFeatureFlag(flagName: keyof FeatureFlags): Promise<boolean> {\n    try {\n      // Get feature flag from unified config service\n      const configKey = `features.${flagName}`;\n      const globalValue = await unifiedConfigService.get<boolean>(configKey, false);\n      \n      if (!globalValue) {\n        // If disabled globally, return false\n        return false;\n      }\n\n      // If enabled globally, check if user is in the rollout\n      const rolloutConfig = UserTargetingService.ROLLOUT_CONFIGS[flagName];\n      if (!rolloutConfig) {\n        // If no rollout config, default to global setting\n        return globalValue;\n      }\n\n      return userTargetingService.isCurrentUserInRollout(rolloutConfig);\n    } catch (error) {\n      console.error(`Error getting feature flag ${flagName}:`, error);\n      return false; // Default to disabled on error\n    }\n  }\n\n  /**\n   * Get all feature flags with rollout status\n   */\n  async getAllFeatureFlags(): Promise<EnhancedFeatureFlags> {\n    try {\n      // Get all feature flags from unified config service\n      const allConfigs = await unifiedConfigService.getAll('features.');\n      \n      // Extract flags from config keys\n      const globalFlags: FeatureFlags = {\n        autoApplyAzure: allConfigs['features.autoApplyAzure'] || false,\n        portalIntegration: allConfigs['features.portalIntegration'] || false,\n        voiceInterview: allConfigs['features.voiceInterview'] || false,\n        voiceInterviewV2: allConfigs['features.voiceInterviewV2'] || false,\n        premiumFeatures: allConfigs['features.premiumFeatures'] || false,\n        newUI: allConfigs['features.newUI'] || false\n      };\n      \n      // Get rollout status for current user\n      const rolloutStatus = userTargetingService.getCurrentUserRolloutStatus();\n      \n      // Combine both: feature must be enabled globally AND user must be in rollout\n      const enhancedFlags: EnhancedFeatureFlags = {\n        autoApplyAzure: globalFlags.autoApplyAzure && rolloutStatus.autoApplyAzure,\n        portalIntegration: globalFlags.portalIntegration && rolloutStatus.portalIntegration,\n        voiceInterview: globalFlags.voiceInterview && rolloutStatus.voiceInterview,\n        voiceInterviewV2: globalFlags.voiceInterviewV2 && rolloutStatus.voiceInterviewV2,\n        premiumFeatures: globalFlags.premiumFeatures && rolloutStatus.premiumFeatures,\n        newUI: globalFlags.newUI && rolloutStatus.newUI,\n        rolloutStatus: {\n          autoApplyAzure: rolloutStatus.autoApplyAzure || false,\n          portalIntegration: rolloutStatus.portalIntegration || false,\n          voiceInterview: rolloutStatus.voiceInterview || false,\n          voiceInterviewV2: rolloutStatus.voiceInterviewV2 || false,\n          premiumFeatures: rolloutStatus.premiumFeatures || false,\n          newUI: rolloutStatus.newUI || false\n        },\n      };\n\n      return enhancedFlags;\n    } catch (error) {\n      console.error('Error getting all feature flags:', error);\n      return {\n        autoApplyAzure: false,\n        portalIntegration: false,\n        voiceInterview: false,\n        voiceInterviewV2: false,\n        premiumFeatures: false,\n        newUI: false,\n        rolloutStatus: {\n          autoApplyAzure: false,\n          portalIntegration: false,\n          voiceInterview: false,\n          voiceInterviewV2: false,\n          premiumFeatures: false,\n          newUI: false\n        },\n      };\n    }\n  }\n\n  /**\n   * Check if a specific feature is enabled for the current user\n   */\n  async isFeatureEnabled(featureName: keyof FeatureFlags): Promise<boolean> {\n    return this.getFeatureFlag(featureName);\n  }\n\n  /**\n   * Convenience methods for specific features\n   */\n  async isAutoApplyAzureEnabled(): Promise<boolean> {\n    return this.getFeatureFlag('autoApplyAzure');\n  }\n\n  async isPortalIntegrationEnabled(): Promise<boolean> {\n    return this.getFeatureFlag('portalIntegration');\n  }\n\n  /**\n   * Get debug information about feature flags\n   */\n  async getDebugInfo(): Promise<{\n    unifiedConfig: Record<string, any>;\n    rolloutStatus: Record<string, boolean>;\n    finalFlags: FeatureFlags;\n    userId: string | null;\n    rolloutConfigs: typeof UserTargetingService.ROLLOUT_CONFIGS;\n  }> {\n    const unifiedConfig = await unifiedConfigService.getAll('features.');\n    const rolloutStatus = userTargetingService.getCurrentUserRolloutStatus();\n    const finalFlags = await this.getAllFeatureFlags();\n    const userId = userTargetingService.getCurrentUserId();\n\n    return {\n      unifiedConfig,\n      rolloutStatus,\n      finalFlags: {\n        autoApplyAzure: finalFlags.autoApplyAzure,\n        portalIntegration: finalFlags.portalIntegration,\n        voiceInterview: finalFlags.voiceInterview,\n        voiceInterviewV2: finalFlags.voiceInterviewV2,\n        premiumFeatures: finalFlags.premiumFeatures,\n        newUI: finalFlags.newUI\n      },\n      userId,\n      rolloutConfigs: UserTargetingService.ROLLOUT_CONFIGS,\n    };\n  }\n\n  /**\n   * Force refresh all feature flags\n   */\n  async refreshFeatureFlags(): Promise<EnhancedFeatureFlags> {\n    await unifiedConfigService.refresh();\n    return this.getAllFeatureFlags();\n  }\n}\n\n// Export singleton instance\nexport const featureFlagsService = FeatureFlagsService.getInstance();\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/services/firebase-user-service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":98,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2983,2986],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2983,2986],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is assigned a value but never used.","line":147,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":147,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'password' is defined but never used.","line":233,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":233,"endColumn":59},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":283,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":283,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8673,8676],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8673,8676],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":284,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":284,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8717,8720],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8717,8720],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Firebase User Service - Real Implementation\n * \n * Handles user profile management using Firebase Authentication and Firestore\n * This is the single source of truth for user identity and profiles\n */\n\nimport { getAdminAuth, getAdminFirestore } from '@/lib/firebase/admin';\n\nexport interface UserProfile {\n  uid: string;\n  email: string;\n  displayName?: string;\n  profilePictureUrl?: string;\n  phoneNumber?: string;\n  emailVerified: boolean;\n  plan: 'free' | 'premium';\n  createdAt: Date;\n  updatedAt: Date;\n  // Additional profile data\n  about?: string;\n  workplace?: string;\n  skills?: string[];\n  dateOfBirth?: string;\n}\n\nexport interface CreateUserData {\n  email: string;\n  displayName?: string;\n  phoneNumber?: string;\n  emailVerified?: boolean;\n  plan?: 'free' | 'premium';\n}\n\nclass FirebaseUserService {\n  private static instance: FirebaseUserService;\n  \n  public static getInstance(): FirebaseUserService {\n    if (!FirebaseUserService.instance) {\n      FirebaseUserService.instance = new FirebaseUserService();\n    }\n    return FirebaseUserService.instance;\n  }\n\n  /**\n   * Get user profile from Firestore\n   */\n  async getUserProfile(uid: string): Promise<UserProfile | null> {\n    try {\n      const firestore = await getAdminFirestore();\n      const userDoc = await firestore.collection('users').doc(uid).get();\n      \n      if (!userDoc.exists) {\n        console.log(`User profile not found for uid: ${uid}`);\n        return null;\n      }\n      \n      const data = userDoc.data();\n      if (!data) {\n        console.log(`User profile data is empty for uid: ${uid}`);\n        return null;\n      }\n\n      // Convert Firestore timestamps to Date objects (handle both Firestore Timestamp and regular dates)\n      const profile: UserProfile = {\n        uid,\n        email: data.email,\n        displayName: data.displayName,\n        profilePictureUrl: data.profilePictureUrl,\n        phoneNumber: data.phoneNumber,\n        emailVerified: data.emailVerified || false,\n        plan: data.plan || 'free',\n        createdAt: data.createdAt?.toDate ? data.createdAt.toDate() : (data.createdAt ? new Date(data.createdAt) : new Date()),\n        updatedAt: data.updatedAt?.toDate ? data.updatedAt.toDate() : (data.updatedAt ? new Date(data.updatedAt) : new Date()),\n        about: data.about,\n        workplace: data.workplace,\n        skills: data.skills || [],\n        dateOfBirth: data.dateOfBirth\n      };\n\n      console.log(`‚úÖ Retrieved user profile for uid: ${uid}`);\n      return profile;\n    } catch (error) {\n      console.error(`‚ùå Failed to get user profile for uid: ${uid}`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create user profile in Firestore\n   */\n  async createUserProfile(uid: string, userData: CreateUserData): Promise<UserProfile> {\n    try {\n      const firestore = await getAdminFirestore();\n      const now = new Date();\n      \n      // Create profile data without undefined values (Firestore requirement)\n      const profileData: Record<string, any> = {\n        email: userData.email,\n        displayName: userData.displayName || userData.email.split('@')[0],\n        emailVerified: userData.emailVerified || false,\n        plan: userData.plan || 'free',\n        createdAt: now,\n        updatedAt: now,\n        skills: []\n      };\n      \n      // Only add optional fields if they have values\n      if (userData.phoneNumber) {\n        profileData.phoneNumber = userData.phoneNumber;\n      }\n\n      await firestore.collection('users').doc(uid).set(profileData);\n      \n      console.log(`‚úÖ Created user profile for uid: ${uid}, email: ${userData.email}`);\n      \n      // Return the complete profile with all required fields\n      return {\n        uid,\n        email: profileData.email,\n        displayName: profileData.displayName,\n        profilePictureUrl: undefined, // Will be undefined in interface but not stored in Firestore\n        phoneNumber: profileData.phoneNumber,\n        emailVerified: profileData.emailVerified,\n        plan: profileData.plan,\n        createdAt: profileData.createdAt,\n        updatedAt: profileData.updatedAt,\n        about: undefined,\n        workplace: undefined,\n        skills: profileData.skills,\n        dateOfBirth: undefined\n      };\n    } catch (error) {\n      console.error(`‚ùå Failed to create user profile for uid: ${uid}`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Update user profile in Firestore\n   */\n  async updateUserProfile(uid: string, updates: Partial<UserProfile>): Promise<void> {\n    try {\n      const firestore = await getAdminFirestore();\n      \n      // Remove uid from updates to prevent overwriting document ID\n      const { uid: _, ...updateData } = updates;\n      \n      const updatePayload = {\n        ...updateData,\n        updatedAt: new Date()\n      };\n\n      await firestore.collection('users').doc(uid).update(updatePayload);\n      \n      console.log(`‚úÖ Updated user profile for uid: ${uid}`);\n    } catch (error) {\n      console.error(`‚ùå Failed to update user profile for uid: ${uid}`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Ensure user profile exists - create if not found\n   */\n  async ensureUserProfile(uid: string, userData: CreateUserData): Promise<UserProfile> {\n    try {\n      // First, try to get existing profile\n      const existingProfile = await this.getUserProfile(uid);\n      \n      if (existingProfile) {\n        console.log(`üîÑ User profile already exists for uid: ${uid}`);\n        return existingProfile;\n      }\n\n      // If not found, create new profile\n      console.log(`üÜï Creating new user profile for uid: ${uid}`);\n      return await this.createUserProfile(uid, userData);\n    } catch (error) {\n      console.error(`‚ùå Failed to ensure user profile for uid: ${uid}`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get Firebase Auth user record\n   */\n  async getAuthUser(uid: string) {\n    try {\n      const auth = await getAdminAuth();\n      const userRecord = await auth.getUser(uid);\n      \n      console.log(`‚úÖ Retrieved Firebase Auth user for uid: ${uid}`);\n      return userRecord;\n    } catch (error) {\n      console.error(`‚ùå Failed to get Firebase Auth user for uid: ${uid}`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create Firebase Auth user (for email/password signup)\n   */\n  async createAuthUser(userData: {\n    email: string;\n    password?: string;\n    displayName?: string;\n    phoneNumber?: string;\n    emailVerified?: boolean;\n  }) {\n    try {\n      const auth = await getAdminAuth();\n      \n      const userRecord = await auth.createUser({\n        email: userData.email,\n        password: userData.password,\n        displayName: userData.displayName,\n        phoneNumber: userData.phoneNumber,\n        emailVerified: userData.emailVerified || false\n      });\n      \n      console.log(`‚úÖ Created Firebase Auth user for email: ${userData.email}, uid: ${userRecord.uid}`);\n      return userRecord;\n    } catch (error) {\n      console.error(`‚ùå Failed to create Firebase Auth user for email: ${userData.email}`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Sign in with email and password (create custom token)\n   */\n  async signInWithEmailAndPassword(email: string, password: string) {\n    try {\n      const auth = await getAdminAuth();\n      \n      // In a real implementation, you'd verify the password against Firebase Auth\n      // For now, we'll create a custom token for the user\n      const userRecord = await auth.getUserByEmail(email);\n      const customToken = await auth.createCustomToken(userRecord.uid);\n      \n      console.log(`‚úÖ Created custom token for email: ${email}, uid: ${userRecord.uid}`);\n      \n      return {\n        user: {\n          uid: userRecord.uid,\n          email: userRecord.email,\n          displayName: userRecord.displayName,\n          emailVerified: userRecord.emailVerified\n        },\n        token: customToken\n      };\n    } catch (error) {\n      console.error(`‚ùå Failed to sign in with email: ${email}`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete user profile and auth record\n   */\n  async deleteUser(uid: string): Promise<void> {\n    try {\n      const auth = await getAdminAuth();\n      const firestore = await getAdminFirestore();\n      \n      // Delete Firestore profile\n      await firestore.collection('users').doc(uid).delete();\n      \n      // Delete Firebase Auth user\n      await auth.deleteUser(uid);\n      \n      console.log(`‚úÖ Deleted user completely for uid: ${uid}`);\n    } catch (error) {\n      console.error(`‚ùå Failed to delete user for uid: ${uid}`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Health check - verify Firebase connections\n   */\n  async healthCheck(): Promise<{ healthy: boolean; details: Record<string, any> }> {\n    const details: Record<string, any> = {};\n    let healthy = true;\n\n    try {\n      // Test Firebase Auth connection\n      const auth = await getAdminAuth();\n      await auth.getUser('test-user-id').catch(() => {\n        // Expected to fail, just testing connectivity\n      });\n      details.firebaseAuth = 'connected';\n    } catch (error) {\n      details.firebaseAuth = `error: ${error instanceof Error ? error.message : 'Unknown error'}`;\n      healthy = false;\n    }\n\n    try {\n      // Test Firestore connection\n      const firestore = await getAdminFirestore();\n      await firestore.collection('users').limit(1).get();\n      details.firestore = 'connected';\n    } catch (error) {\n      details.firestore = `error: ${error instanceof Error ? error.message : 'Unknown error'}`;\n      healthy = false;\n    }\n\n    return { healthy, details };\n  }\n}\n\n// Export singleton instance\nexport const firebaseUserService = FirebaseUserService.getInstance();\nexport default firebaseUserService;\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/services/gdpr-compliance-service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getFirestore' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1021,1024],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1021,1024],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":87,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2427,2430],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2427,2430],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":118,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3322,3325],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3322,3325],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":132,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3819,3822],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3819,3822],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":132,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3825,3828],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3825,3828],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":205,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":205,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5859,5862],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5859,5862],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":245,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":245,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7017,7020],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7017,7020],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":263,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":263,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7660,7663],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7660,7663],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":271,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":271,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7954,7957],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7954,7957],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":273,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":273,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7993,7996],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7993,7996],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":288,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":288,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8479,8482],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8479,8482],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":290,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":290,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8540,8543],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8540,8543],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":297,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":297,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8764,8767],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8764,8767],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":303,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":303,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8954,8957],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8954,8957],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ipAddress' is defined but never used.","line":368,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":368,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":376,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":376,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11212,11215],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11212,11215],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":376,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":376,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11234,11237],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11234,11237],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":408,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":408,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12281,12284],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12281,12284],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { getFirestore } from 'firebase-admin/firestore';\nimport { azureBlobStorage } from '@/lib/services/azure-blob-storage';\nimport { getDBService } from '@/lib/firebase/admin';\n\nexport interface UserConsent {\n  userId: string;\n  analytics: boolean;\n  marketing: boolean;\n  functional: boolean;\n  consentDate: Date;\n  ipAddress?: string;\n  userAgent?: string;\n  version: string; // Privacy policy version\n}\n\nexport interface DataDeletionRequest {\n  userId: string;\n  requestDate: Date;\n  requestedBy: string; // email of person making request\n  reason?: string;\n  status: 'pending' | 'processing' | 'completed' | 'failed';\n  completedDate?: Date;\n  deletedData: string[]; // list of data types deleted\n}\n\nexport interface AnonymizedAnalytics {\n  timestamp: Date;\n  event: string;\n  page: string;\n  userId: string; // hashed/pseudonymized\n  sessionId: string; // hashed\n  userAgent?: string; // anonymized\n  location?: {\n    country: string;\n    region?: string; // only if consent given\n  };\n  metadata: Record<string, any>;\n}\n\nexport class GDPRComplianceService {\n  private db: Awaited<ReturnType<typeof getDBService>> | null = null;\n  private static instance: GDPRComplianceService;\n  \n  private async getDB() {\n    if (!this.db) {\n      this.db = await getDBService();\n    }\n    return this.db;\n  }\n\n  public static getInstance(): GDPRComplianceService {\n    if (!GDPRComplianceService.instance) {\n      GDPRComplianceService.instance = new GDPRComplianceService();\n    }\n    return GDPRComplianceService.instance;\n  }\n\n  // Consent Management\n  async recordConsent(consent: UserConsent): Promise<void> {\n    try {\n      const db = await this.getDB();\n      const consentRef = db.collection('userConsents').doc(consent.userId);\n      await consentRef.set({\n        ...consent,\n        consentDate: new Date(),\n        version: this.getCurrentPrivacyPolicyVersion()\n      });\n\n      // Log consent change for audit trail\n      await this.logConsentChange(consent);\n    } catch (error) {\n      console.error('Error recording consent:', error);\n      throw new Error('Failed to record user consent');\n    }\n  }\n\n  async getConsent(userId: string): Promise<UserConsent | null> {\n    try {\n      const db = await this.getDB();\n      const consentRef = db.collection('userConsents').doc(userId);\n      const doc = await consentRef.get();\n      \n      if (!doc.exists) {\n        return null;\n      }\n\n      return (doc.data() as any) as UserConsent;\n    } catch (error) {\n      console.error('Error getting consent:', error);\n      throw new Error('Failed to retrieve user consent');\n    }\n  }\n\n  async updateConsent(userId: string, updates: Partial<UserConsent>): Promise<void> {\n    try {\n      const db = await this.getDB();\n      const consentRef = db.collection('userConsents').doc(userId);\n      await consentRef.update({\n        ...updates,\n        lastUpdated: new Date()\n      });\n\n      await this.logConsentChange({ userId, ...updates } as UserConsent);\n    } catch (error) {\n      console.error('Error updating consent:', error);\n      throw new Error('Failed to update user consent');\n    }\n  }\n\n  // Data Anonymization\n  anonymizeAnalyticsData(data: {\n    userId: string;\n    sessionId: string;\n    ipAddress?: string;\n    userAgent?: string;\n    event: string;\n    page: string;\n    metadata?: Record<string, any>;\n  }): AnonymizedAnalytics {\n    return {\n      timestamp: new Date(),\n      event: data.event,\n      page: data.page,\n      userId: this.hashUserId(data.userId),\n      sessionId: this.hashSessionId(data.sessionId),\n      userAgent: data.userAgent ? this.anonymizeUserAgent(data.userAgent) : undefined,\n      location: data.ipAddress ? this.getLocationFromIP(data.ipAddress) : undefined,\n      metadata: this.sanitizeMetadata(data.metadata || {})\n    };\n  }\n\n  pseudonymizeUserData(userData: any): any {\n    const pseudonymized = { ...userData };\n    \n    // Remove or hash PII fields\n    if (pseudonymized.email) {\n      pseudonymized.emailHash = this.hashEmail(pseudonymized.email);\n      delete pseudonymized.email;\n    }\n    \n    if (pseudonymized.name) {\n      pseudonymized.nameInitials = this.getInitials(pseudonymized.name);\n      delete pseudonymized.name;\n    }\n    \n    if (pseudonymized.phone) {\n      delete pseudonymized.phone;\n    }\n    \n    if (pseudonymized.address) {\n      // Keep only city and country\n      pseudonymized.location = {\n        city: pseudonymized.address.city,\n        country: pseudonymized.address.country\n      };\n      delete pseudonymized.address;\n    }\n\n    // Add anonymization timestamp\n    pseudonymized.anonymizedAt = new Date();\n    \n    return pseudonymized;\n  }\n\n  // Data Deletion\n  async requestDataDeletion(\n    userId: string, \n    requestedBy: string, \n    reason?: string\n  ): Promise<string> {\n    try {\n      const requestId = this.generateRequestId();\n      const deletionRequest: DataDeletionRequest = {\n        userId,\n        requestDate: new Date(),\n        requestedBy,\n        reason,\n        status: 'pending',\n        deletedData: []\n      };\n\n      const db = await this.getDB();\n      await db.collection('dataDeletionRequests').doc(requestId).set(deletionRequest);\n      \n      // Schedule deletion process (30-day compliance window)\n      await this.scheduleDataDeletion(requestId, userId);\n      \n      return requestId;\n    } catch (error) {\n      console.error('Error requesting data deletion:', error);\n      throw new Error('Failed to request data deletion');\n    }\n  }\n\n  async processDataDeletion(requestId: string): Promise<void> {\n    try {\n      const db = await this.getDB();\n      const requestRef = db.collection('dataDeletionRequests').doc(requestId);\n      const requestDoc = await requestRef.get();\n      \n      if (!requestDoc.exists) {\n        throw new Error('Deletion request not found');\n      }\n\n      const request = (requestDoc.data() as any) as DataDeletionRequest;\n      \n      // Update status to processing\n      await requestRef.update({ status: 'processing' });\n\n      const deletedData: string[] = [];\n\n      // Delete from Firestore collections\n      const collectionsToDelete = [\n        'users',\n        'userProfiles',\n        'resumes',\n        'interviews',\n        'analytics',\n        'userConsents',\n        'usage'\n      ];\n\n      for (const collection of collectionsToDelete) {\n        const deleted = await this.deleteFromCollection(collection, request.userId);\n        if (deleted) deletedData.push(collection);\n      }\n\n      // Delete from Firebase Storage\n      const storageDeleted = await this.deleteFromStorage(request.userId);\n      if (storageDeleted) deletedData.push('storage');\n\n      // Delete from external services (if any)\n      await this.deleteFromExternalServices(request.userId);\n\n      // Update request status\n      await requestRef.update({\n        status: 'completed',\n        completedDate: new Date(),\n        deletedData\n      });\n\n      // Log completion for audit\n      await this.logDataDeletion(request.userId, deletedData);\n\n    } catch (error: any) {\n      console.error('Error processing data deletion:', error);\n      \n      // Update request status to failed\n      const failDb = await this.getDB();\n      await failDb.collection('dataDeletionRequests').doc(requestId).update({\n        status: 'failed',\n        error: error.message || 'Unknown error'\n      });\n      \n      throw error;\n    }\n  }\n\n  async getDeletionRequestStatus(requestId: string): Promise<DataDeletionRequest | null> {\n    try {\n      const db = await this.getDB();\n      const requestDoc = await db.collection('dataDeletionRequests').doc(requestId).get();\n      return requestDoc.exists ? ((requestDoc.data() as any) as DataDeletionRequest) : null;\n    } catch (error) {\n      console.error('Error getting deletion request status:', error);\n      throw new Error('Failed to get deletion request status');\n    }\n  }\n\n  // Data Export (Subject Access Request)\n  async exportUserData(userId: string): Promise<any> {\n    try {\n      const userData: any = {\n        userId,\n        exportDate: new Date(),\n        data: {}\n      };\n\n      // Export from all relevant collections\n      const collections = ['users', 'userProfiles', 'resumes', 'interviews'];\n      \n      const db = await this.getDB();\n      for (const collectionName of collections) {\n        const docs = await db.collection(collectionName)\n          .where('userId', '==', userId)\n          .get();\n        \n        userData.data[collectionName] = docs.docs.map((doc: any) => ({\n          id: doc.id,\n          ...(doc.data() as any)\n        }));\n      }\n\n      // Export consent records\n      const consentDoc = await db.collection('userConsents').doc(userId).get();\n      if (consentDoc.exists) {\n        userData.data.consents = consentDoc.data() as any;\n      }\n\n      // Export usage data\n      const usageDoc = await db.collection('usage').doc(userId).get();\n      if (usageDoc.exists) {\n        userData.data.usage = usageDoc.data() as any;\n      }\n\n      return userData;\n    } catch (error) {\n      console.error('Error exporting user data:', error);\n      throw new Error('Failed to export user data');\n    }\n  }\n\n  // Privacy Utilities\n  maskEmail(email: string): string {\n    const [username, domain] = email.split('@');\n    const maskedUsername = username.length > 2 \n      ? username.charAt(0) + '*'.repeat(username.length - 2) + username.charAt(username.length - 1)\n      : '*'.repeat(username.length);\n    return `${maskedUsername}@${domain}`;\n  }\n\n  maskPhoneNumber(phone: string): string {\n    const cleaned = phone.replace(/\\D/g, '');\n    if (cleaned.length > 4) {\n      return cleaned.substring(0, 3) + '*'.repeat(cleaned.length - 6) + cleaned.substring(cleaned.length - 3);\n    }\n    return '*'.repeat(cleaned.length);\n  }\n\n  // Private helper methods\n  private getCurrentPrivacyPolicyVersion(): string {\n    return 'v1.0'; // Update when privacy policy changes\n  }\n\n  private async logConsentChange(consent: UserConsent): Promise<void> {\n    const db = await this.getDB();\n    await db.collection('consentAuditLog').add({\n      userId: consent.userId,\n      timestamp: new Date(),\n      changes: consent,\n      source: 'user-settings'\n    });\n  }\n\n  private hashUserId(userId: string): string {\n    // Use a consistent hashing algorithm\n    return Buffer.from(userId).toString('base64').substring(0, 12);\n  }\n\n  private hashSessionId(sessionId: string): string {\n    return Buffer.from(sessionId).toString('base64').substring(0, 8);\n  }\n\n  private hashEmail(email: string): string {\n    return Buffer.from(email).toString('base64');\n  }\n\n  private getInitials(name: string): string {\n    return name.split(' ').map(n => n.charAt(0).toUpperCase()).join('.');\n  }\n\n  private anonymizeUserAgent(userAgent: string): string {\n    // Remove version numbers and specific identifiers\n    return userAgent.replace(/\\/[\\d\\.]+/g, '/x.x')\n                   .replace(/\\([^)]*\\)/g, '(anonymized)');\n  }\n\n  private getLocationFromIP(ipAddress: string): { country: string; region?: string } | undefined {\n    // In production, use a GeoIP service\n    // For now, return minimal location data\n    return {\n      country: 'Unknown'\n    };\n  }\n\n  private sanitizeMetadata(metadata: Record<string, any>): Record<string, any> {\n    const sanitized = { ...metadata };\n    \n    // Remove potential PII from metadata\n    const piiKeys = ['email', 'phone', 'name', 'address', 'ssn', 'creditCard'];\n    piiKeys.forEach(key => {\n      if (sanitized[key]) {\n        delete sanitized[key];\n      }\n    });\n    \n    return sanitized;\n  }\n\n  private generateRequestId(): string {\n    return `del_${Date.now()}_${Math.random().toString(36).substring(2)}`;\n  }\n\n  private async scheduleDataDeletion(requestId: string, userId: string): Promise<void> {\n    // In production, use Cloud Functions or Cloud Tasks to schedule deletion\n    // For now, just log the scheduling\n    console.log(`Scheduled data deletion for user ${userId} with request ${requestId}`);\n  }\n\n  private async deleteFromCollection(collectionName: string, userId: string): Promise<boolean> {\n    try {\n      const db = await this.getDB();\n      const batch = db.batch();\n      const docs = await db.collection(collectionName)\n        .where('userId', '==', userId)\n        .get();\n\n      docs.docs.forEach((doc: any) => {\n        batch.delete(doc.ref);\n      });\n\n      await batch.commit();\n      return docs.docs.length > 0;\n    } catch (error) {\n      console.error(`Error deleting from ${collectionName}:`, error);\n      return false;\n    }\n  }\n\n  private async deleteFromStorage(userId: string): Promise<boolean> {\n    let filesDeleted = false;\n    \n    try {\n      // Try Azure Blob Storage first\n      await azureBlobStorage.initialize();\n      if (azureBlobStorage.isReady()) {\n        console.log(`üóëÔ∏è Deleting Azure Blob Storage files for user ${userId}`);\n        const deletedContainers = await azureBlobStorage.deleteAllUserFiles(userId);\n        if (deletedContainers.length > 0) {\n          console.log(`‚úÖ Deleted from Azure containers: ${deletedContainers.join(', ')}`);\n          filesDeleted = true;\n        }\n      }\n    } catch (azureError) {\n      console.error('Error deleting from Azure Blob Storage:', azureError);\n    }\n\n    // Also attempt Firebase Storage cleanup for legacy files\n    try {\n      // Dynamic import to avoid circular dependency\n      const { getStorage } = await import('firebase-admin/storage');\n      const storage = getStorage();\n      const bucket = storage.bucket();\n      \n      const [files] = await bucket.getFiles({\n        prefix: `users/${userId}/`\n      });\n      \n      if (files.length > 0) {\n        const deletePromises = files.map(file => file.delete());\n        await Promise.all(deletePromises);\n        console.log(`‚úÖ Deleted ${files.length} legacy Firebase Storage files for user ${userId}`);\n        filesDeleted = true;\n      }\n    } catch (firebaseError) {\n      console.error('Error deleting from Firebase Storage:', firebaseError);\n    }\n\n    return filesDeleted;\n  }\n\n  private async deleteFromExternalServices(userId: string): Promise<void> {\n    // Delete from external services like analytics, email providers, etc.\n    // Implementation depends on which external services are used\n    console.log(`Deleting user ${userId} from external services`);\n  }\n\n  private async logDataDeletion(userId: string, deletedData: string[]): Promise<void> {\n    const db = await this.getDB();\n    await db.collection('dataProtectionAuditLog').add({\n      userId,\n      action: 'data_deletion',\n      timestamp: new Date(),\n      deletedCollections: deletedData,\n      complianceOfficer: 'system'\n    });\n  }\n}\n\nexport const gdprComplianceService = GDPRComplianceService.getInstance();\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/services/job-notification-integration.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":245,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":245,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7428,7431],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7428,7431],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":246,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":246,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7476,7479],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7476,7479],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":262,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":262,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8158,8161],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8158,8161],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":286,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":286,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8816,8819],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8816,8819],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":287,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":287,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8861,8864],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8861,8864],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":380,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":380,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11879,11882],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11879,11882],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":462,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":462,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14699,14702],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14699,14702],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":463,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":463,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14744,14747],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14744,14747],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":525,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":525,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16544,16547],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16544,16547],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":564,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":564,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17644,17647],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17644,17647],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// lib/services/job-notification-integration.ts\n\nimport { notificationService, JobDiscoveredData, ApplicationSubmittedData, FollowUpReminderData, DailySummaryData } from './notification-service';\nimport { getAdminFirestore } from '@/lib/firebase/admin';\n\nexport interface UserProfile {\n  id: string;\n  name: string;\n  email: string;\n  skills?: string[];\n  experience?: Array<{\n    position: string;\n    company: string;\n    technologies?: string[];\n  }>;\n  targetRoles?: string[];\n  summary?: string;\n  emailVerified?: boolean;\n  notificationPreferences?: {\n    jobDiscovered: boolean;\n    applicationSubmitted: boolean;\n    followUpReminder: boolean;\n    dailySummary: boolean;\n    weeklyReport: boolean;\n    emailFrequency: 'immediate' | 'hourly' | 'daily';\n  };\n}\n\nexport interface JobListing {\n  id: string;\n  title: string;\n  company: string;\n  location: string;\n  salary?: {\n    min?: number;\n    max?: number;\n    currency: string;\n    period: string;\n  };\n  jobType: string;\n  workArrangement: string;\n  description: string;\n  requirements?: string[];\n  responsibilities?: string[];\n  postedDate: string;\n  jobPortal: {\n    name: string;\n    logo: string;\n    website: string;\n    supportsAutoApply: boolean;\n  };\n  originalUrl?: string;\n  applicationStatus: string;\n  relevancyScore?: number;\n  matchedSkills?: string[];\n  missingSkills?: string[];\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Application {\n  id: string;\n  userId: string;\n  jobId: string;\n  status: 'applied' | 'in_progress' | 'interview' | 'rejected' | 'accepted';\n  appliedAt: Date;\n  coverLetter?: string;\n  tailoredResume?: string;\n  relevancyScore?: number;\n  portal?: string;\n  jobTitle: string;\n  company: string;\n  autoApplied?: boolean;\n  coverLetterUsed?: boolean;\n  resumeTailored?: boolean;\n}\n\nexport class JobNotificationIntegration {\n  private db: Awaited<ReturnType<typeof getAdminFirestore>> | null = null;\n  \n  private async getDB() {\n    if (!this.db) {\n      this.db = await getAdminFirestore();\n    }\n    return this.db;\n  }\n\n  /**\n   * Send job discovered notification\n   * Called from jobSearchWorker when new relevant jobs are found\n   */\n  async notifyJobsDiscovered(\n    userId: string,\n    jobs: JobListing[]\n  ): Promise<void> {\n    try {\n      // Get user profile and preferences\n      const userProfile = await this.getUserProfile(userId);\n      if (!userProfile || !userProfile.emailVerified) {\n        console.log(`Skipping job discovered notifications for user ${userId}: email not verified`);\n        return;\n      }\n\n      // Check notification preferences\n      if (!userProfile.notificationPreferences?.jobDiscovered) {\n        console.log(`Skipping job discovered notifications for user ${userId}: disabled in preferences`);\n        return;\n      }\n\n      // Process notifications based on email frequency preference\n      const emailFrequency = userProfile.notificationPreferences?.emailFrequency || 'immediate';\n      \n      if (emailFrequency === 'immediate') {\n        // Send individual notifications for high-scoring jobs\n        const highScoringJobs = jobs.filter(job => (job.relevancyScore || 0) >= 80);\n        \n        for (const job of highScoringJobs.slice(0, 3)) { // Limit to top 3 to avoid spam\n          await this.sendJobDiscoveredNotification(userProfile, job);\n        }\n      } else {\n        // Store jobs for batched processing\n        await this.storePendingJobNotifications(userId, jobs);\n      }\n\n      console.log(`Processed job discovered notifications for user ${userId}: ${jobs.length} jobs`);\n\n    } catch (error) {\n      console.error('Error in notifyJobsDiscovered:', error);\n    }\n  }\n\n  /**\n   * Send application submitted notification\n   * Called from applicationWorker when application is successfully submitted\n   */\n  async notifyApplicationSubmitted(\n    userId: string,\n    application: Application\n  ): Promise<void> {\n    try {\n      // Get user profile and preferences\n      const userProfile = await this.getUserProfile(userId);\n      if (!userProfile || !userProfile.emailVerified) {\n        console.log(`Skipping application submitted notification for user ${userId}: email not verified`);\n        return;\n      }\n\n      // Check notification preferences\n      if (!userProfile.notificationPreferences?.applicationSubmitted) {\n        console.log(`Skipping application submitted notification for user ${userId}: disabled in preferences`);\n        return;\n      }\n\n      const applicationData: ApplicationSubmittedData = {\n        applicationId: application.id,\n        jobId: application.jobId,\n        jobTitle: application.jobTitle,\n        company: application.company,\n        submittedAt: application.appliedAt,\n        autoApplied: application.autoApplied || false,\n        coverLetterUsed: application.coverLetterUsed || false,\n        resumeTailored: application.resumeTailored || false,\n        relevancyScore: application.relevancyScore || 0\n      };\n\n      await notificationService.notifyApplicationSubmitted(\n        userId,\n        userProfile.email,\n        userProfile.name,\n        applicationData\n      );\n\n      console.log(`Sent application submitted notification for user ${userId}, job ${application.jobId}`);\n\n    } catch (error) {\n      console.error('Error in notifyApplicationSubmitted:', error);\n    }\n  }\n\n  /**\n   * Send follow-up reminder notification\n   * Called from followUpWorker when it's time for a follow-up\n   */\n  async notifyFollowUpReminder(\n    userId: string,\n    application: Application,\n    followUpType: 'initial' | 'second' | 'thank_you' | 'status_check',\n    suggestedMessage?: string\n  ): Promise<void> {\n    try {\n      // Get user profile and preferences\n      const userProfile = await this.getUserProfile(userId);\n      if (!userProfile || !userProfile.emailVerified) {\n        console.log(`Skipping follow-up reminder for user ${userId}: email not verified`);\n        return;\n      }\n\n      // Check notification preferences\n      if (!userProfile.notificationPreferences?.followUpReminder) {\n        console.log(`Skipping follow-up reminder for user ${userId}: disabled in preferences`);\n        return;\n      }\n\n      const followUpData: FollowUpReminderData = {\n        applicationId: application.id,\n        jobTitle: application.jobTitle,\n        company: application.company,\n        appliedDate: application.appliedAt,\n        followUpType,\n        suggestedMessage\n      };\n\n      await notificationService.notifyFollowUpReminder(\n        userId,\n        userProfile.email,\n        userProfile.name,\n        followUpData\n      );\n\n      console.log(`Sent follow-up reminder for user ${userId}, application ${application.id}, type ${followUpType}`);\n\n    } catch (error) {\n      console.error('Error in notifyFollowUpReminder:', error);\n    }\n  }\n\n  /**\n   * Send daily summary notification\n   * Called by a scheduled job to send daily activity summaries\n   */\n  async sendDailySummaries(): Promise<void> {\n    try {\n      // Get all users with daily summary enabled\n      const db = await this.getDB();\n      const usersSnapshot = await db\n        .collection('users')\n        .where('emailVerified', '==', true)\n        .where('notificationPreferences.dailySummary', '==', true)\n        .get();\n\n      console.log(`Processing daily summaries for ${usersSnapshot.docs.length} users`);\n\n      for (const userDoc of usersSnapshot.docs) {\n        try {\n          const userId = (userDoc as any).id;\n          const userData = (userDoc as any).data() as UserProfile;\n\n          const summaryData = await this.generateDailySummary(userId);\n          \n          // Only send if there's activity to report\n          if (summaryData.jobsFound > 0 || summaryData.applicationsSubmitted > 0 || summaryData.followUpsSent > 0 || summaryData.upcomingFollowUps > 0) {\n            await notificationService.notifyDailySummary(\n              userId,\n              userData.email,\n              userData.name,\n              summaryData\n            );\n\n            console.log(`Sent daily summary to user ${userId}`);\n          }\n        } catch (userError) {\n          console.error(`Error sending daily summary for user ${(userDoc as any).id}:`, userError);\n        }\n      }\n\n    } catch (error) {\n      console.error('Error in sendDailySummaries:', error);\n    }\n  }\n\n  /**\n   * Process batched notifications for users with hourly/daily frequency preferences\n   */\n  async processBatchedNotifications(): Promise<void> {\n    try {\n      // Get users with pending job notifications\n      const db = await this.getDB();\n      const pendingSnapshot = await db\n        .collection('pending_job_notifications')\n        .where('processed', '==', false)\n        .get();\n\n      const batchedByUser: Record<string, JobListing[]> = {};\n\n      // Group by user\n      pendingSnapshot.docs.forEach((doc: any) => {\n        const data = doc.data() as any;\n        const userId = data.userId;\n        \n        if (!batchedByUser[userId]) {\n          batchedByUser[userId] = [];\n        }\n        \n        batchedByUser[userId].push(...data.jobs);\n      });\n\n      // Process each user's batched notifications\n      for (const [userId, jobs] of Object.entries(batchedByUser)) {\n        try {\n          const userProfile = await this.getUserProfile(userId);\n          if (!userProfile) continue;\n\n          const emailFrequency = userProfile.notificationPreferences?.emailFrequency || 'immediate';\n          const now = new Date();\n          const lastSent = await this.getLastBatchNotificationTime(userId);\n\n          let shouldSend = false;\n\n          if (emailFrequency === 'hourly' && (!lastSent || now.getTime() - lastSent.getTime() >= 60 * 60 * 1000)) {\n            shouldSend = true;\n          } else if (emailFrequency === 'daily' && (!lastSent || now.getTime() - lastSent.getTime() >= 24 * 60 * 60 * 1000)) {\n            shouldSend = true;\n          }\n\n          if (shouldSend && jobs.length > 0) {\n            // Send batch notification with top jobs\n            const topJobs = jobs\n              .sort((a, b) => (b.relevancyScore || 0) - (a.relevancyScore || 0))\n              .slice(0, 5);\n\n            for (const job of topJobs.slice(0, 3)) { // Send individual notifications for top 3\n              await this.sendJobDiscoveredNotification(userProfile, job);\n            }\n\n            // Mark as processed and update last sent time\n            await this.markBatchNotificationsProcessed(userId);\n            await this.updateLastBatchNotificationTime(userId, now);\n\n            console.log(`Sent batched notifications to user ${userId}: ${topJobs.length} jobs`);\n          }\n        } catch (userError) {\n          console.error(`Error processing batched notifications for user ${userId}:`, userError);\n        }\n      }\n\n    } catch (error) {\n      console.error('Error in processBatchedNotifications:', error);\n    }\n  }\n\n  /**\n   * Send individual job discovered notification\n   */\n  private async sendJobDiscoveredNotification(\n    userProfile: UserProfile,\n    job: JobListing\n  ): Promise<void> {\n    const jobData: JobDiscoveredData = {\n      jobId: job.id,\n      jobTitle: job.title,\n      company: job.company,\n      location: job.location,\n      salary: job.salary,\n      relevancyScore: job.relevancyScore || 0,\n      matchedSkills: job.matchedSkills || [],\n      jobUrl: job.originalUrl,\n      portal: job.jobPortal.name\n    };\n\n    await notificationService.notifyJobDiscovered(\n      userProfile.id,\n      userProfile.email,\n      userProfile.name,\n      jobData\n    );\n  }\n\n  /**\n   * Get user profile with notification preferences\n   */\n  private async getUserProfile(userId: string): Promise<UserProfile | null> {\n    try {\n      const db = await this.getDB();\n      const userDoc = await db.collection('users').doc(userId).get();\n      \n      if (!userDoc.exists) {\n        return null;\n      }\n\n      const userData = userDoc.data() as any;\n      \n      // Set default notification preferences if not exist\n      const defaultNotificationPreferences = {\n        jobDiscovered: true,\n        applicationSubmitted: true,\n        followUpReminder: true,\n        dailySummary: true,\n        weeklyReport: false,\n        emailFrequency: 'immediate' as const\n      };\n\n      return {\n        id: userId,\n        name: userData?.name || 'User',\n        email: userData?.email || '',\n        skills: userData?.skills || [],\n        experience: userData?.experience || [],\n        targetRoles: userData?.targetRoles || [],\n        summary: userData?.summary || '',\n        emailVerified: userData?.emailVerified || false,\n        notificationPreferences: {\n          ...defaultNotificationPreferences,\n          ...userData?.notificationPreferences\n        }\n      };\n\n    } catch (error) {\n      console.error('Error getting user profile:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Generate daily summary data for a user\n   */\n  private async generateDailySummary(userId: string): Promise<DailySummaryData> {\n    const today = new Date();\n    const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n    const endOfDay = new Date(startOfDay.getTime() + 24 * 60 * 60 * 1000);\n\n    try {\n      const db = await this.getDB();\n      // Get today's discovered jobs\n      const jobsSnapshot = await db\n        .collection('discovered_jobs')\n        .where('userId', '==', userId)\n        .where('createdAt', '>=', startOfDay)\n        .where('createdAt', '<', endOfDay)\n        .orderBy('relevancyScore', 'desc')\n        .limit(10)\n        .get();\n\n      // Get today's applications\n      const applicationsSnapshot = await db\n        .collection('applications')\n        .where('userId', '==', userId)\n        .where('appliedAt', '>=', startOfDay)\n        .where('appliedAt', '<', endOfDay)\n        .get();\n\n      // Get today's follow-ups sent (from notification events)\n      const followUpsSnapshot = await db\n        .collection('notification_events')\n        .where('userId', '==', userId)\n        .where('type', '==', 'follow_up_reminder')\n        .where('status', '==', 'sent')\n        .where('createdAt', '>=', startOfDay)\n        .where('createdAt', '<', endOfDay)\n        .get();\n\n      // Get upcoming follow-ups (next 7 days)\n      const upcomingDate = new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000);\n      const upcomingFollowUpsSnapshot = await db\n        .collection('follow_up_reminders')\n        .where('userId', '==', userId)\n        .where('scheduledDate', '>=', today)\n        .where('scheduledDate', '<', upcomingDate)\n        .where('processed', '==', false)\n        .get();\n\n      // Convert discovered jobs to JobDiscoveredData format\n      const topJobs: JobDiscoveredData[] = jobsSnapshot.docs.map((doc: any) => {\n        const data = doc.data() as any;\n        return {\n          jobId: doc.id,\n          jobTitle: data.title || '',\n          company: data.company || '',\n          location: data.location || '',\n          salary: data.salary,\n          relevancyScore: data.relevancyScore || 0,\n          matchedSkills: data.matchedSkills || [],\n          jobUrl: data.originalUrl,\n          portal: data.jobPortal?.name || 'Unknown'\n        };\n      });\n\n      return {\n        date: today,\n        jobsFound: jobsSnapshot.docs.length,\n        applicationsSubmitted: applicationsSnapshot.docs.length,\n        followUpsSent: followUpsSnapshot.docs.length,\n        upcomingFollowUps: upcomingFollowUpsSnapshot.docs.length,\n        topJobs\n      };\n\n    } catch (error) {\n      console.error('Error generating daily summary:', error);\n      return {\n        date: today,\n        jobsFound: 0,\n        applicationsSubmitted: 0,\n        followUpsSent: 0,\n        upcomingFollowUps: 0,\n        topJobs: []\n      };\n    }\n  }\n\n  /**\n   * Store pending job notifications for batched processing\n   */\n  private async storePendingJobNotifications(userId: string, jobs: JobListing[]): Promise<void> {\n    try {\n      const db = await this.getDB();\n      await db.collection('pending_job_notifications').add({\n        userId,\n        jobs,\n        createdAt: new Date(),\n        processed: false\n      });\n    } catch (error) {\n      console.error('Error storing pending job notifications:', error);\n    }\n  }\n\n  /**\n   * Get last batch notification time for a user\n   */\n  private async getLastBatchNotificationTime(userId: string): Promise<Date | null> {\n    try {\n      const db = await this.getDB();\n      const doc = await db.collection('batch_notification_tracking').doc(userId).get();\n      \n      if (doc.exists) {\n        const data = doc.data() as any;\n        return data?.lastSentAt?.toDate() || null;\n      }\n      \n      return null;\n    } catch (error) {\n      console.error('Error getting last batch notification time:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Update last batch notification time for a user\n   */\n  private async updateLastBatchNotificationTime(userId: string, time: Date): Promise<void> {\n    try {\n      const db = await this.getDB();\n      await db.collection('batch_notification_tracking').doc(userId).set({\n        lastSentAt: time,\n        updatedAt: new Date()\n      });\n    } catch (error) {\n      console.error('Error updating last batch notification time:', error);\n    }\n  }\n\n  /**\n   * Mark batched notifications as processed\n   */\n  private async markBatchNotificationsProcessed(userId: string): Promise<void> {\n    try {\n      const db = await this.getDB();\n      const snapshot = await db\n        .collection('pending_job_notifications')\n        .where('userId', '==', userId)\n        .where('processed', '==', false)\n        .get();\n\n      const batch = db.batch();\n      snapshot.docs.forEach((doc: any) => {\n        batch.update(doc.ref, { processed: true, processedAt: new Date() });\n      });\n\n      await batch.commit();\n    } catch (error) {\n      console.error('Error marking batch notifications as processed:', error);\n    }\n  }\n}\n\n// Export singleton instance\nexport const jobNotificationIntegration = new JobNotificationIntegration();\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/services/keyword-optimizer-service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'migrationOpenAIClient' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'content' is defined but never used.","line":400,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":400,"endColumn":42}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ResumeData } from './resume-export-service';\nimport { migrationOpenAIClient } from '@/lib/azure-ai-foundry/clients/migration-wrapper';\nimport { azureOpenAIService } from './azure-openai-service';\n\nexport interface KeywordAnalysis {\n  currentKeywords: string[];\n  missingKeywords: string[];\n  suggestedImprovements: Array<{\n    section: string;\n    original: string;\n    suggested: string;\n    keywords: string[];\n    impact: 'high' | 'medium' | 'low';\n  }>;\n  score: number;\n  industryAlignment: {\n    score: number;\n    recommendations: string[];\n  };\n}\n\nexport interface JobDescription {\n  title: string;\n  company?: string;\n  requirements: string[];\n  preferredSkills: string[];\n  responsibilities: string[];\n  industry?: string;\n  experienceLevel?: string;\n}\n\nexport class KeywordOptimizerService {\n  private static instance: KeywordOptimizerService;\n\n  private constructor() {\n    // No initialization needed for Azure OpenAI service\n  }\n\n  public static getInstance(): KeywordOptimizerService {\n    if (!KeywordOptimizerService.instance) {\n      KeywordOptimizerService.instance = new KeywordOptimizerService();\n    }\n    return KeywordOptimizerService.instance;\n  }\n\n  async analyzeKeywords(\n    resumeData: ResumeData, \n    jobDescription?: JobDescription,\n    targetRole?: string,\n    targetIndustry?: string\n  ): Promise<KeywordAnalysis> {\n    try {\n      const resumeText = this.extractResumeText(resumeData);\n      const jobText = jobDescription ? this.extractJobText(jobDescription) : '';\n\n      // Ensure Azure OpenAI service is initialized\n      await azureOpenAIService.initialize();\n      \n      const fullPrompt = `You are an expert ATS (Applicant Tracking System) and recruitment specialist. Analyze resumes for keyword optimization and provide actionable recommendations.\n\n${this.buildAnalysisPrompt(resumeText, jobText, targetRole, targetIndustry)}`;\n      \n      const analysisResult = await azureOpenAIService.generateCompletion(fullPrompt);\n      if (!analysisResult) {\n        throw new Error('No analysis result from Azure OpenAI');\n      }\n\n      return this.parseAnalysisResult(analysisResult, resumeData);\n    } catch (error) {\n      console.error('Error analyzing keywords:', error);\n      throw new Error('Failed to analyze keywords');\n    }\n  }\n\n  async optimizeResumeContent(\n    resumeData: ResumeData,\n    jobDescription: JobDescription,\n    sections: string[] = ['summary', 'experience', 'skills']\n  ): Promise<Partial<ResumeData>> {\n    try {\n      const optimizationPrompts = sections.map(section => \n        this.buildOptimizationPrompt(resumeData, jobDescription, section)\n      );\n\n      const optimizedSections: Partial<ResumeData> = {};\n\n      // Ensure Azure OpenAI service is initialized\n      await azureOpenAIService.initialize();\n      \n      for (let i = 0; i < sections.length; i++) {\n        const section = sections[i];\n        const prompt = optimizationPrompts[i];\n\n        const fullPrompt = `You are an expert resume writer specializing in ATS optimization. Rewrite resume sections to include relevant keywords while maintaining authenticity and readability.\n\n${prompt}`;\n\n        const optimizedContent = await azureOpenAIService.generateCompletion(fullPrompt);\n        if (optimizedContent) {\n          this.applyOptimizedContent(optimizedSections, section, optimizedContent, resumeData);\n        }\n      }\n\n      return optimizedSections;\n    } catch (error) {\n      console.error('Error optimizing resume content:', error);\n      throw new Error('Failed to optimize resume content');\n    }\n  }\n\n  async generateKeywordSuggestions(\n    role: string,\n    industry: string,\n    experienceLevel: string = 'mid'\n  ): Promise<{\n    technical: string[];\n    soft: string[];\n    industrySpecific: string[];\n    trending: string[];\n  }> {\n    try {\n      const prompt = `\n        Generate relevant keywords for a ${experienceLevel}-level ${role} position in the ${industry} industry.\n        \n        Provide keywords in these categories:\n        1. Technical skills and tools\n        2. Soft skills and competencies\n        3. Industry-specific terms and knowledge\n        4. Trending skills and technologies\n        \n        Format as JSON with arrays for each category.\n        Focus on keywords that are commonly searched by ATS systems and recruiters.\n      `;\n\n      // Ensure Azure OpenAI service is initialized\n      await azureOpenAIService.initialize();\n      \n      const fullPrompt = `You are a recruitment expert who understands ATS systems and keyword optimization.\n\n${prompt}`;\n\n      const result = await azureOpenAIService.generateCompletion(fullPrompt);\n      if (!result) {\n        throw new Error('No keyword suggestions generated');\n      }\n\n      try {\n        return JSON.parse(result);\n      } catch {\n        // Fallback parsing if JSON format is not perfect\n        return this.parseKeywordSuggestions(result);\n      }\n    } catch (error) {\n      console.error('Error generating keyword suggestions:', error);\n      throw new Error('Failed to generate keyword suggestions');\n    }\n  }\n\n  async scoreAtsCompatibility(resumeData: ResumeData): Promise<{\n    overallScore: number;\n    sectionScores: {\n      formatting: number;\n      keywords: number;\n      structure: number;\n      content: number;\n    };\n    recommendations: string[];\n  }> {\n    const resumeText = this.extractResumeText(resumeData);\n    \n    try {\n      const prompt = `\n        Analyze this resume for ATS (Applicant Tracking System) compatibility and provide a detailed score.\n        \n        Resume Content:\n        ${resumeText}\n        \n        Evaluate:\n        1. Formatting (use of standard sections, clear headings, proper structure)\n        2. Keywords (relevant industry terms, skills, technologies)\n        3. Structure (logical flow, proper organization)\n        4. Content (quantifiable achievements, action verbs, relevance)\n        \n        Provide scores out of 100 for each category and an overall score.\n        Include specific recommendations for improvement.\n        \n        Format as JSON with scores and recommendations array.\n      `;\n\n      // Ensure Azure OpenAI service is initialized\n      await azureOpenAIService.initialize();\n      \n      const fullPrompt = `You are an ATS expert who evaluates resume compatibility with automated screening systems.\n\n${prompt}`;\n\n      const result = await azureOpenAIService.generateCompletion(fullPrompt);\n      if (!result) {\n        throw new Error('No ATS score generated');\n      }\n\n      try {\n        return JSON.parse(result);\n      } catch {\n        // Fallback scoring\n        return this.generateFallbackATSScore(resumeData);\n      }\n    } catch (error) {\n      console.error('Error scoring ATS compatibility:', error);\n      return this.generateFallbackATSScore(resumeData);\n    }\n  }\n\n  private extractResumeText(resumeData: ResumeData): string {\n    const sections = [\n      `Name: ${resumeData.personalInfo.name}`,\n      `Email: ${resumeData.personalInfo.email}`,\n      `Location: ${resumeData.personalInfo.location}`,\n      resumeData.summary ? `Summary: ${resumeData.summary}` : '',\n      'Experience:',\n      ...resumeData.experience.map(exp => \n        `${exp.title} at ${exp.company} (${exp.startDate} - ${exp.endDate}): ${exp.description.join(' ')}`\n      ),\n      'Education:',\n      ...resumeData.education.map(edu => \n        `${edu.degree} from ${edu.institution} (${edu.graduationDate})`\n      ),\n      `Technical Skills: ${resumeData.skills.technical.join(', ')}`,\n      `Soft Skills: ${resumeData.skills.soft.join(', ')}`,\n      'Projects:',\n      ...resumeData.projects.map(project => \n        `${project.name}: ${project.description} (${project.technologies.join(', ')})`\n      ),\n      'Certifications:',\n      ...resumeData.certifications.map(cert => \n        `${cert.name} from ${cert.issuer} (${cert.date})`\n      )\n    ].filter(Boolean);\n\n    return sections.join('\\n');\n  }\n\n  private extractJobText(jobDescription: JobDescription): string {\n    return [\n      `Position: ${jobDescription.title}`,\n      jobDescription.company ? `Company: ${jobDescription.company}` : '',\n      `Requirements: ${jobDescription.requirements.join(', ')}`,\n      `Preferred Skills: ${jobDescription.preferredSkills.join(', ')}`,\n      `Responsibilities: ${jobDescription.responsibilities.join(', ')}`,\n      jobDescription.industry ? `Industry: ${jobDescription.industry}` : '',\n      jobDescription.experienceLevel ? `Experience Level: ${jobDescription.experienceLevel}` : ''\n    ].filter(Boolean).join('\\n');\n  }\n\n  private buildAnalysisPrompt(\n    resumeText: string, \n    jobText: string, \n    targetRole?: string, \n    targetIndustry?: string\n  ): string {\n    return `\n      Analyze this resume for keyword optimization${jobText ? ' against the provided job description' : ''}.\n\n      Resume:\n      ${resumeText}\n\n      ${jobText ? `Job Description:\\n${jobText}` : ''}\n\n      ${targetRole ? `Target Role: ${targetRole}` : ''}\n      ${targetIndustry ? `Target Industry: ${targetIndustry}` : ''}\n\n      Provide analysis in this JSON format:\n      {\n        \"currentKeywords\": [\"keyword1\", \"keyword2\"],\n        \"missingKeywords\": [\"missing1\", \"missing2\"],\n        \"suggestedImprovements\": [\n          {\n            \"section\": \"experience\",\n            \"original\": \"original text\",\n            \"suggested\": \"improved text\",\n            \"keywords\": [\"added keywords\"],\n            \"impact\": \"high\"\n          }\n        ],\n        \"score\": 75,\n        \"industryAlignment\": {\n          \"score\": 80,\n          \"recommendations\": [\"recommendation1\", \"recommendation2\"]\n        }\n      }\n\n      Focus on:\n      1. Identifying missing critical keywords\n      2. Suggesting natural keyword integration\n      3. Maintaining authenticity while optimizing\n      4. Prioritizing high-impact improvements\n    `;\n  }\n\n  private buildOptimizationPrompt(\n    resumeData: ResumeData, \n    jobDescription: JobDescription, \n    section: string\n  ): string {\n    const sectionContent = this.getSectionContent(resumeData, section);\n    const jobText = this.extractJobText(jobDescription);\n\n    return `\n      Optimize this ${section} section for ATS compatibility while maintaining authenticity.\n\n      Current ${section}:\n      ${sectionContent}\n\n      Job Description:\n      ${jobText}\n\n      Requirements:\n      1. Include relevant keywords naturally\n      2. Maintain the original meaning and truthfulness\n      3. Use action verbs and quantifiable achievements\n      4. Ensure ATS-friendly formatting\n      5. Keep the tone professional\n\n      Provide only the optimized text without additional formatting or explanations.\n    `;\n  }\n\n  private getSectionContent(resumeData: ResumeData, section: string): string {\n    switch (section) {\n      case 'summary':\n        return resumeData.summary || '';\n      case 'experience':\n        return resumeData.experience.map(exp => \n          `${exp.title} at ${exp.company}: ${exp.description.join(' ')}`\n        ).join('\\n');\n      case 'skills':\n        return `Technical: ${resumeData.skills.technical.join(', ')}; Soft: ${resumeData.skills.soft.join(', ')}`;\n      default:\n        return '';\n    }\n  }\n\n  private applyOptimizedContent(\n    optimizedSections: Partial<ResumeData>, \n    section: string, \n    content: string, \n    originalData: ResumeData\n  ): void {\n    switch (section) {\n      case 'summary':\n        optimizedSections.summary = content;\n        break;\n      case 'skills':\n        // Parse optimized skills content\n        const skillsMatch = content.match(/Technical:\\s*([^;]+);?\\s*Soft:\\s*([^;]+)/i);\n        if (skillsMatch) {\n          optimizedSections.skills = {\n            technical: skillsMatch[1].split(',').map(s => s.trim()),\n            soft: skillsMatch[2].split(',').map(s => s.trim())\n          };\n        }\n        break;\n      case 'experience':\n        // For experience, we'd need more sophisticated parsing\n        // For now, keep original structure but note optimization was attempted\n        optimizedSections.experience = originalData.experience;\n        break;\n    }\n  }\n\n  private parseAnalysisResult(result: string, resumeData: ResumeData): KeywordAnalysis {\n    try {\n      return JSON.parse(result);\n    } catch {\n      // Fallback analysis if JSON parsing fails\n      return {\n        currentKeywords: this.extractCurrentKeywords(resumeData),\n        missingKeywords: [],\n        suggestedImprovements: [],\n        score: 50,\n        industryAlignment: {\n          score: 50,\n          recommendations: ['Unable to perform detailed analysis. Please try again.']\n        }\n      };\n    }\n  }\n\n  private extractCurrentKeywords(resumeData: ResumeData): string[] {\n    const allText = this.extractResumeText(resumeData).toLowerCase();\n    const commonKeywords = [\n      'javascript', 'python', 'react', 'node.js', 'sql', 'git', 'aws', 'docker',\n      'leadership', 'teamwork', 'communication', 'problem-solving', 'project management',\n      'agile', 'scrum', 'ci/cd', 'api', 'database', 'frontend', 'backend', 'full-stack'\n    ];\n\n    return commonKeywords.filter(keyword => allText.includes(keyword));\n  }\n\n  private parseKeywordSuggestions(content: string) {\n    // Simple parsing fallback\n    return {\n      technical: ['React', 'Node.js', 'TypeScript', 'API Development', 'Database Design'],\n      soft: ['Leadership', 'Communication', 'Problem Solving', 'Team Collaboration', 'Adaptability'],\n      industrySpecific: ['Software Development', 'Web Technologies', 'Cloud Computing', 'DevOps', 'Agile Methodology'],\n      trending: ['AI/ML', 'Microservices', 'Kubernetes', 'GraphQL', 'Serverless Architecture']\n    };\n  }\n\n  private generateFallbackATSScore(resumeData: ResumeData) {\n    let score = 50;\n    \n    // Basic scoring based on presence of sections\n    if (resumeData.summary) score += 10;\n    if (resumeData.experience.length > 0) score += 20;\n    if (resumeData.skills.technical.length > 0) score += 15;\n    if (resumeData.education.length > 0) score += 5;\n\n    return {\n      overallScore: Math.min(score, 100),\n      sectionScores: {\n        formatting: 70,\n        keywords: score > 70 ? 75 : 50,\n        structure: 65,\n        content: score > 80 ? 80 : 60\n      },\n      recommendations: [\n        'Add more specific technical keywords',\n        'Include quantifiable achievements',\n        'Use industry-standard terminology',\n        'Ensure consistent formatting'\n      ]\n    };\n  }\n}\n\nexport const keywordOptimizerService = KeywordOptimizerService.getInstance();\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/services/mock-interview.service.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'resumeInfo' is defined but never used.","line":16,"column":54,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'temperature' is defined but never used.","line":30,"column":68,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":79},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'maxTokens' is defined but never used.","line":30,"column":81,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":90},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":114,"column":27,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":114,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":173,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":173,"endColumn":43},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":343,"column":27,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":343,"endColumn":58}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Unit tests for Mock Interview Service\n * Tests cover:\n * - No duplicate titles in batch of 10 interviews\n * - All required fields are present in generated interviews\n * - Question array length is at least 5\n */\n\nimport { MockInterviewService } from './mock-interview.service';\nimport { Interview } from '@/types/index.d';\n\n// Mock the Azure OpenAI Adapter\njest.mock('@/lib/ai/azureOpenAI', () => ({\n  AzureOpenAIAdapter: jest.fn().mockImplementation(() => ({\n    initialize: jest.fn().mockResolvedValue(true),\n    generateQuestions: jest.fn().mockImplementation((resumeInfo) => {\n      // Generate 5-8 unique questions based on resume info\n      const baseQuestions = [\n        'Tell me about your experience with the technologies mentioned in your resume.',\n        'How do you approach problem-solving in your current role?',\n        'Describe a challenging project you worked on recently.',\n        'What are your thoughts on best practices for code quality?',\n        'How do you stay updated with the latest technology trends?',\n        'Can you explain a complex technical concept to a non-technical person?',\n        'What motivates you in your career?',\n        'How do you handle tight deadlines and pressure?'\n      ];\n      return Promise.resolve(baseQuestions.slice(0, 5 + Math.floor(Math.random() * 4)));\n    }),\n    generateWithAzureOpenAI: jest.fn().mockImplementation((prompt, temperature, maxTokens) => {\n      // Mock responses based on prompt content\n      if (prompt.includes('unique job interview scenario')) {\n        // Generate unique role and company\n        const roles = [\n          { jobTitle: 'Cloud Solutions Architect', seniority: 'Senior', company: 'TechVision Labs', industry: 'Cloud Computing' },\n          { jobTitle: 'DevOps Lead Engineer', seniority: 'Lead', company: 'DataStream Solutions', industry: 'Data Infrastructure' },\n          { jobTitle: 'Full Stack Software Engineer', seniority: 'Mid-level', company: 'InnovateTech Corp', industry: 'Software Development' },\n          { jobTitle: 'Machine Learning Engineer', seniority: 'Senior', company: 'AI Dynamics', industry: 'Artificial Intelligence' },\n          { jobTitle: 'Mobile Development Specialist', seniority: 'Senior', company: 'AppCraft Studios', industry: 'Mobile Technology' },\n          { jobTitle: 'Backend Systems Engineer', seniority: 'Principal', company: 'ScaleUp Systems', industry: 'Enterprise Software' },\n          { jobTitle: 'Frontend UI Developer', seniority: 'Mid-level', company: 'DesignFlow Inc', industry: 'Web Development' },\n          { jobTitle: 'Data Platform Engineer', seniority: 'Senior', company: 'DataBridge Analytics', industry: 'Data Analytics' },\n          { jobTitle: 'Security Software Engineer', seniority: 'Lead', company: 'CyberGuard Tech', industry: 'Cybersecurity' },\n          { jobTitle: 'Platform Reliability Engineer', seniority: 'Senior', company: 'ReliaTech Systems', industry: 'Infrastructure' }\n        ];\n        \n        // Get a random role that hasn't been used (tracked by the service)\n        const randomIndex = Math.floor(Math.random() * roles.length);\n        return Promise.resolve(JSON.stringify(roles[randomIndex]));\n      }\n      \n      if (prompt.includes('generate a relevant technology stack')) {\n        // Generate tech stack\n        const techStacks = {\n          'Cloud Solutions Architect': ['AWS', 'Terraform', 'Kubernetes', 'Python', 'Docker'],\n          'DevOps Lead Engineer': ['Jenkins', 'GitLab CI', 'Docker', 'Ansible', 'Prometheus'],\n          'Full Stack Software Engineer': ['React', 'Node.js', 'PostgreSQL', 'Redis', 'TypeScript'],\n          'Machine Learning Engineer': ['Python', 'TensorFlow', 'PyTorch', 'Scikit-learn', 'Apache Spark'],\n          'Mobile Development Specialist': ['React Native', 'Swift', 'Kotlin', 'Firebase', 'GraphQL'],\n          'Backend Systems Engineer': ['Java', 'Spring Boot', 'Kafka', 'Cassandra', 'Elasticsearch'],\n          'Frontend UI Developer': ['Vue.js', 'TypeScript', 'Tailwind CSS', 'Webpack', 'Jest'],\n          'Data Platform Engineer': ['Apache Spark', 'Airflow', 'Databricks', 'Python', 'SQL'],\n          'Security Software Engineer': ['Go', 'Python', 'OWASP', 'Kubernetes', 'HashiCorp Vault'],\n          'Platform Reliability Engineer': ['Kubernetes', 'Prometheus', 'Grafana', 'Go', 'Terraform']\n        };\n        \n        // Try to match based on role in prompt\n        for (const [role, stack] of Object.entries(techStacks)) {\n          if (prompt.includes(role)) {\n            return Promise.resolve(JSON.stringify({\n              technologies: stack,\n              primaryFocus: `${role} technologies and best practices`\n            }));\n          }\n        }\n        \n        // Default tech stack\n        return Promise.resolve(JSON.stringify({\n          technologies: ['JavaScript', 'Python', 'Docker', 'Git', 'PostgreSQL'],\n          primaryFocus: 'Full-stack development'\n        }));\n      }\n      \n      return Promise.resolve('{}');\n    })\n  }))\n}));\n\n// Mock getCompanyLogoForInterview utility\njest.mock('@/lib/utils', () => ({\n  getCompanyLogoForInterview: jest.fn((interviewId) => ({\n    logo: `/logos/company-${interviewId}.png`,\n    company: 'Mock Company'\n  }))\n}));\n\ndescribe('MockInterviewService', () => {\n  let service: MockInterviewService;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    service = new MockInterviewService();\n    // Clear any caches and used lists\n    service.clearCaches();\n  });\n\n  describe('Initialization', () => {\n    it('should initialize the service successfully', async () => {\n      const result = await service.initialize();\n      expect(result).toBe(true);\n    });\n\n    it('should handle initialization errors gracefully', async () => {\n      const mockAdapter = require('@/lib/ai/azureOpenAI').AzureOpenAIAdapter;\n      mockAdapter.mockImplementationOnce(() => ({\n        initialize: jest.fn().mockRejectedValue(new Error('Initialization failed'))\n      }));\n      \n      const errorService = new MockInterviewService();\n      const result = await errorService.initialize();\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('Interview Generation', () => {\n    beforeEach(async () => {\n      await service.initialize();\n    });\n\n    it('should generate an interview with all required fields', async () => {\n      const interview = await service.createMockInterview('test-user-123');\n\n      // Check all required fields are present\n      expect(interview).toHaveProperty('id');\n      expect(interview).toHaveProperty('userId');\n      expect(interview).toHaveProperty('role');\n      expect(interview).toHaveProperty('level');\n      expect(interview).toHaveProperty('type');\n      expect(interview).toHaveProperty('techstack');\n      expect(interview).toHaveProperty('questions');\n      expect(interview).toHaveProperty('finalized');\n      expect(interview).toHaveProperty('createdAt');\n      expect(interview).toHaveProperty('companyLogo');\n      expect(interview).toHaveProperty('companyName');\n\n      // Validate field types\n      expect(typeof interview.id).toBe('string');\n      expect(interview.userId).toBe('test-user-123');\n      expect(typeof interview.role).toBe('string');\n      expect(typeof interview.level).toBe('string');\n      expect(typeof interview.type).toBe('string');\n      expect(Array.isArray(interview.techstack)).toBe(true);\n      expect(Array.isArray(interview.questions)).toBe(true);\n      expect(interview.finalized).toBe(true);\n      expect(typeof interview.createdAt).toBe('string');\n      expect(typeof interview.companyLogo).toBe('string');\n      expect(typeof interview.companyName).toBe('string');\n\n      // Validate that role includes company name\n      expect(interview.role).toMatch(/at/);\n    });\n\n    it('should generate interviews with at least 5 questions', async () => {\n      const interviews: Interview[] = [];\n      \n      // Generate 10 interviews\n      for (let i = 0; i < 10; i++) {\n        const interview = await service.createMockInterview(`user-${i}`);\n        interviews.push(interview);\n      }\n\n      // Check that all interviews have at least 5 questions\n      interviews.forEach((interview, index) => {\n        expect(interview.questions.length).toBeGreaterThanOrEqual(5);\n        expect(interview.questions.length).toBeLessThanOrEqual(8); // Based on our mock\n        \n        // Verify questions are strings and not empty\n        interview.questions.forEach(question => {\n          expect(typeof question).toBe('string');\n          expect(question.length).toBeGreaterThan(0);\n        });\n      });\n    });\n\n    it('should not generate duplicate job titles in a batch of 10 interviews', async () => {\n      const interviews: Interview[] = [];\n      const jobTitles = new Set<string>();\n\n      // Generate 10 interviews\n      for (let i = 0; i < 10; i++) {\n        const interview = await service.createMockInterview(`user-${i}`);\n        interviews.push(interview);\n        \n        // Extract job title from role (format: \"JobTitle at Company\")\n        const jobTitle = interview.role.split(' at ')[0];\n        jobTitles.add(jobTitle);\n      }\n\n      // Check that we have 10 unique job titles\n      expect(jobTitles.size).toBe(10);\n      \n      // Additional check: no two interviews should have the exact same role\n      const roles = interviews.map(i => i.role);\n      const uniqueRoles = new Set(roles);\n      expect(uniqueRoles.size).toBe(10);\n    });\n\n    it('should generate appropriate tech stacks for each role', async () => {\n      const interview = await service.createMockInterview('test-user');\n      \n      // Tech stack should be an array with 4-6 technologies\n      expect(Array.isArray(interview.techstack)).toBe(true);\n      expect(interview.techstack.length).toBeGreaterThanOrEqual(4);\n      expect(interview.techstack.length).toBeLessThanOrEqual(6);\n      \n      // Each technology should be a non-empty string\n      interview.techstack.forEach(tech => {\n        expect(typeof tech).toBe('string');\n        expect(tech.length).toBeGreaterThan(0);\n      });\n    });\n\n    it('should select interview types with proper distribution', async () => {\n      const typeCounts = { Technical: 0, Behavioral: 0, Mixed: 0 };\n      \n      // Generate 30 interviews to test distribution\n      for (let i = 0; i < 30; i++) {\n        const interview = await service.createMockInterview(`user-${i}`);\n        typeCounts[interview.type as keyof typeof typeCounts]++;\n      }\n      \n      // Each type should appear at least once in 30 interviews\n      expect(typeCounts.Technical).toBeGreaterThan(0);\n      expect(typeCounts.Behavioral).toBeGreaterThan(0);\n      expect(typeCounts.Mixed).toBeGreaterThan(0);\n      \n      // Check that the distribution is roughly balanced (within reasonable variance)\n      // Expected: ~10 each with some variance\n      Object.values(typeCounts).forEach(count => {\n        expect(count).toBeGreaterThanOrEqual(5);\n        expect(count).toBeLessThanOrEqual(15);\n      });\n    });\n\n    it('should handle defaulting to mock user when no userId provided', async () => {\n      const interview = await service.createMockInterview();\n      expect(interview.userId).toBe('mock-user');\n    });\n\n    it('should generate unique interview IDs', async () => {\n      const ids = new Set<string>();\n      \n      for (let i = 0; i < 10; i++) {\n        const interview = await service.createMockInterview();\n        ids.add(interview.id);\n      }\n      \n      // All IDs should be unique\n      expect(ids.size).toBe(10);\n      \n      // IDs should follow the expected format\n      ids.forEach(id => {\n        expect(id).toMatch(/^mock-\\d+-[a-z0-9]+$/);\n      });\n    });\n\n    it('should set correct seniority levels', async () => {\n      const validSeniorities = ['Junior', 'Mid-level', 'Senior', 'Lead', 'Principal'];\n      const interviews: Interview[] = [];\n      \n      for (let i = 0; i < 10; i++) {\n        const interview = await service.createMockInterview(`user-${i}`);\n        interviews.push(interview);\n      }\n      \n      interviews.forEach(interview => {\n        expect(validSeniorities).toContain(interview.level);\n      });\n    });\n\n    it('should properly format createdAt timestamp', async () => {\n      const before = new Date().toISOString();\n      const interview = await service.createMockInterview();\n      const after = new Date().toISOString();\n      \n      // Timestamp should be in ISO format\n      expect(interview.createdAt).toMatch(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);\n      \n      // Timestamp should be between before and after\n      expect(new Date(interview.createdAt).getTime()).toBeGreaterThanOrEqual(new Date(before).getTime());\n      expect(new Date(interview.createdAt).getTime()).toBeLessThanOrEqual(new Date(after).getTime());\n    });\n  });\n\n  describe('Cache Management', () => {\n    beforeEach(async () => {\n      await service.initialize();\n    });\n\n    it('should maintain cache statistics', async () => {\n      // Generate a few interviews\n      await service.createMockInterview('user-1');\n      await service.createMockInterview('user-2');\n      \n      const stats = service.getCacheStats();\n      \n      expect(stats).toHaveProperty('rolesCached');\n      expect(stats).toHaveProperty('techStacksCached');\n      expect(stats).toHaveProperty('questionsCached');\n      expect(stats).toHaveProperty('usedRolesCount');\n      expect(stats).toHaveProperty('usedCompaniesCount');\n      \n      // Should have some cached data\n      expect(stats.usedRolesCount).toBeGreaterThan(0);\n      expect(stats.usedCompaniesCount).toBeGreaterThan(0);\n    });\n\n    it('should clear caches when requested', async () => {\n      // Generate some interviews to populate cache\n      await service.createMockInterview('user-1');\n      await service.createMockInterview('user-2');\n      \n      // Get initial stats\n      const statsBefore = service.getCacheStats();\n      expect(statsBefore.usedRolesCount).toBeGreaterThan(0);\n      \n      // Clear caches\n      service.clearCaches();\n      \n      // Verify caches are cleared\n      const statsAfter = service.getCacheStats();\n      expect(statsAfter.rolesCached).toBe(0);\n      expect(statsAfter.techStacksCached).toBe(0);\n      expect(statsAfter.questionsCached).toBe(0);\n      expect(statsAfter.usedRolesCount).toBe(0);\n      expect(statsAfter.usedCompaniesCount).toBe(0);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle API failures with fallback data', async () => {\n      // Mock a failure in the Azure OpenAI adapter\n      const mockAdapter = require('@/lib/ai/azureOpenAI').AzureOpenAIAdapter;\n      mockAdapter.mockImplementationOnce(() => ({\n        initialize: jest.fn().mockResolvedValue(true),\n        generateQuestions: jest.fn().mockRejectedValue(new Error('API Error')),\n        generateWithAzureOpenAI: jest.fn().mockRejectedValue(new Error('API Error'))\n      }));\n      \n      const errorService = new MockInterviewService();\n      await errorService.initialize();\n      \n      // Should still generate an interview using fallback data\n      const interview = await errorService.createMockInterview('test-user');\n      \n      expect(interview).toHaveProperty('id');\n      expect(interview).toHaveProperty('role');\n      expect(interview).toHaveProperty('questions');\n      expect(interview.questions.length).toBeGreaterThanOrEqual(5);\n    });\n\n    it('should throw error when service is not initialized', async () => {\n      const uninitializedService = new MockInterviewService();\n      \n      await expect(uninitializedService.createMockInterview()).rejects.toThrow();\n    });\n  });\n\n  describe('Unique Role and Company Generation', () => {\n    beforeEach(async () => {\n      await service.initialize();\n    });\n\n    it('should respect exclusion lists when generating roles', async () => {\n      const excludeRoles = ['Software Engineer', 'Product Manager'];\n      const excludeCompanies = ['TechCorp', 'DataInc'];\n      \n      const role = await service.generateUniqueRoleAndCompany(excludeRoles, excludeCompanies);\n      \n      expect(excludeRoles).not.toContain(role.jobTitle);\n      expect(excludeCompanies).not.toContain(role.company);\n    });\n\n    it('should track and avoid previously generated roles', async () => {\n      const roles: string[] = [];\n      const companies: string[] = [];\n      \n      // Generate multiple roles\n      for (let i = 0; i < 5; i++) {\n        const role = await service.generateUniqueRoleAndCompany();\n        roles.push(role.jobTitle);\n        companies.push(role.company);\n      }\n      \n      // Check uniqueness\n      const uniqueRoles = new Set(roles);\n      const uniqueCompanies = new Set(companies);\n      \n      expect(uniqueRoles.size).toBe(5);\n      expect(uniqueCompanies.size).toBe(5);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/services/mock-interview.service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":109,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3448,3451],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3448,3451],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":174,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":174,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5582,5585],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5582,5585],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Mock Interview Generator Service\n * \n * This service generates dynamic mock interviews using Azure OpenAI,\n * creating unique roles, companies, tech stacks, and questions while\n * avoiding duplicates and implementing memoization for efficiency.\n */\n\nimport { AzureOpenAIAdapter } from '@/lib/ai/azureOpenAI';\nimport { getCompanyLogoForInterview } from '@/lib/utils';\n// Interview type is globally available from types/index.d.ts\n\n// Types for generated content\ninterface GeneratedRole {\n  jobTitle: string;\n  seniority: 'Junior' | 'Mid-level' | 'Senior' | 'Lead' | 'Principal';\n  company: string;\n  industry: string;\n}\n\ninterface GeneratedTechStack {\n  technologies: string[];\n  primaryFocus: string;\n}\n\ninterface CachedEntry<T> {\n  data: T;\n  timestamp: number;\n}\n\n// Interview types with weighted distribution\nconst INTERVIEW_TYPES = [\n  { type: 'Technical', weight: 0.33 },\n  { type: 'Behavioral', weight: 0.33 },\n  { type: 'Mixed', weight: 0.34 }\n];\n\n// Cache configuration\nconst CACHE_DURATION = 24 * 60 * 60 * 1000; // 24 hours in milliseconds\n\nexport class MockInterviewService {\n  private azureAdapter: AzureOpenAIAdapter;\n  private isInitialized = false;\n  \n  // Memoization caches\n  private roleCache = new Map<string, CachedEntry<GeneratedRole>>();\n  private techStackCache = new Map<string, CachedEntry<GeneratedTechStack>>();\n  private questionsCache = new Map<string, CachedEntry<string[]>>();\n  \n  // Exclusion lists to avoid duplicates\n  private usedRoles = new Set<string>();\n  private usedCompanies = new Set<string>();\n\n  constructor() {\n    this.azureAdapter = new AzureOpenAIAdapter();\n  }\n\n  /**\n   * Initialize the service\n   */\n  async initialize(): Promise<boolean> {\n    try {\n      this.isInitialized = await this.azureAdapter.initialize();\n      if (this.isInitialized) {\n        console.log('‚úÖ Mock Interview Service initialized');\n      }\n      return this.isInitialized;\n    } catch (error) {\n      console.error('‚ùå Failed to initialize Mock Interview Service:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Generate a unique role and company with Azure OpenAI\n   */\n  async generateUniqueRoleAndCompany(\n    excludeRoles?: string[],\n    excludeCompanies?: string[]\n  ): Promise<GeneratedRole> {\n    if (!this.isInitialized) {\n      throw new Error('Mock Interview Service not initialized');\n    }\n\n    // Combine exclusion lists\n    const allExcludedRoles = [...this.usedRoles, ...(excludeRoles || [])];\n    const allExcludedCompanies = [...this.usedCompanies, ...(excludeCompanies || [])];\n\n    const prompt = `Generate a unique job interview scenario with the following requirements:\n\n1. Create a realistic job title (NOT generic like \"Software Engineer\")\n2. Assign an appropriate seniority level (Junior, Mid-level, Senior, Lead, or Principal)\n3. Create a fictitious but realistic company name (must be creative and unique)\n4. Specify the industry sector\n\nIMPORTANT: Avoid these previously used roles: ${allExcludedRoles.join(', ') || 'none'}\nIMPORTANT: Avoid these previously used companies: ${allExcludedCompanies.join(', ') || 'none'}\n\nReturn ONLY a valid JSON object in this exact format:\n{\n  \"jobTitle\": \"Example: Cloud Architecture Specialist\",\n  \"seniority\": \"Senior\",\n  \"company\": \"Example: TechNova Solutions\",\n  \"industry\": \"Example: Financial Technology\"\n}`;\n\n    try {\n      // Generate using Azure OpenAI (via adapter's internal method)\n      const response = await (this.azureAdapter as any).generateWithAzureOpenAI(\n        prompt,\n        0.8, // Higher temperature for creativity\n        150  // Max tokens for JSON response\n      );\n\n      // Parse the JSON response\n      const cleanedResponse = response.replace(/```json\\n?|\\n?```/g, '').trim();\n      const generatedRole = JSON.parse(cleanedResponse) as GeneratedRole;\n\n      // Add to exclusion lists\n      this.usedRoles.add(generatedRole.jobTitle);\n      this.usedCompanies.add(generatedRole.company);\n\n      // Cache the result\n      const cacheKey = `${generatedRole.jobTitle}-${generatedRole.company}`;\n      this.roleCache.set(cacheKey, {\n        data: generatedRole,\n        timestamp: Date.now()\n      });\n\n      console.log('üìã Generated unique role:', generatedRole);\n      return generatedRole;\n    } catch (error) {\n      console.error('‚ùå Error generating unique role and company:', error);\n      \n      // Fallback to predefined options\n      return this.getFallbackRole();\n    }\n  }\n\n  /**\n   * Generate relevant tech stack for a given role\n   */\n  async generateTechStack(role: GeneratedRole): Promise<string[]> {\n    if (!this.isInitialized) {\n      throw new Error('Mock Interview Service not initialized');\n    }\n\n    // Check cache first\n    const cacheKey = `${role.jobTitle}-${role.seniority}`;\n    const cached = this.techStackCache.get(cacheKey);\n    \n    if (cached && (Date.now() - cached.timestamp) < CACHE_DURATION) {\n      console.log('üì¶ Using cached tech stack for:', cacheKey);\n      return cached.data.technologies;\n    }\n\n    const prompt = `Based on this job role, generate a relevant technology stack:\n\nRole: ${role.jobTitle}\nSeniority: ${role.seniority}\nCompany: ${role.company}\nIndustry: ${role.industry}\n\nGenerate 4-6 specific technologies that would be relevant for this position.\nConsider the seniority level when selecting technologies (e.g., more advanced tools for senior roles).\n\nReturn ONLY a valid JSON object in this exact format:\n{\n  \"technologies\": [\"Tech1\", \"Tech2\", \"Tech3\", \"Tech4\"],\n  \"primaryFocus\": \"Brief description of the tech focus area\"\n}`;\n\n    try {\n      const response = await (this.azureAdapter as any).generateWithAzureOpenAI(\n        prompt,\n        0.5, // Moderate temperature for relevant but varied tech\n        150  // Max tokens for JSON response\n      );\n\n      // Parse the JSON response\n      const cleanedResponse = response.replace(/```json\\n?|\\n?```/g, '').trim();\n      const generatedTech = JSON.parse(cleanedResponse) as GeneratedTechStack;\n\n      // Cache the result\n      this.techStackCache.set(cacheKey, {\n        data: generatedTech,\n        timestamp: Date.now()\n      });\n\n      console.log('üõ†Ô∏è Generated tech stack:', generatedTech.technologies);\n      return generatedTech.technologies;\n    } catch (error) {\n      console.error('‚ùå Error generating tech stack:', error);\n      \n      // Fallback to common tech stacks based on role\n      return this.getFallbackTechStack(role);\n    }\n  }\n\n  /**\n   * Generate interview questions using the existing adapter method\n   */\n  async generateQuestions(\n    role: GeneratedRole,\n    type: string,\n    techStack: string[]\n  ): Promise<string[]> {\n    if (!this.isInitialized) {\n      throw new Error('Mock Interview Service not initialized');\n    }\n\n    // Create cache key\n    const cacheKey = `${role.jobTitle}-${type}-${techStack.join(',')}`;\n    const cached = this.questionsCache.get(cacheKey);\n    \n    if (cached && (Date.now() - cached.timestamp) < CACHE_DURATION) {\n      console.log('üì¶ Using cached questions for:', cacheKey);\n      return cached.data;\n    }\n\n    // Create ResumeInfo object for the adapter's generateQuestions method\n    const resumeInfo = {\n      name: 'Mock Candidate',\n      experience: `${role.seniority} ${role.jobTitle} with expertise in ${techStack.slice(0, 3).join(', ')}`,\n      education: this.getEducationForSeniority(role.seniority),\n      skills: techStack.join(', ')\n    };\n\n    try {\n      // Use the existing adapter method\n      const questions = await this.azureAdapter.generateQuestions(resumeInfo);\n      \n      // Cache the result\n      this.questionsCache.set(cacheKey, {\n        data: questions,\n        timestamp: Date.now()\n      });\n\n      console.log(`‚ùì Generated ${questions.length} questions for ${type} interview`);\n      return questions;\n    } catch (error) {\n      console.error('‚ùå Error generating questions:', error);\n      \n      // Fallback questions based on type\n      return this.getFallbackQuestions(type, role);\n    }\n  }\n\n  /**\n   * Main method to create a complete mock interview\n   */\n  async createMockInterview(userId?: string): Promise<Interview> {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n\n    try {\n      // Step 1: Generate unique role and company\n      const role = await this.generateUniqueRoleAndCompany();\n      \n      // Step 2: Generate relevant tech stack\n      const techStack = await this.generateTechStack(role);\n      \n      // Step 3: Select interview type (weighted random selection)\n      const interviewType = this.selectInterviewType();\n      \n      // Step 4: Generate questions based on role, type, and tech stack\n      const questions = await this.generateQuestions(role, interviewType, techStack);\n      \n      // Step 5: Generate unique interview ID\n      const interviewId = this.generateInterviewId();\n      \n      // Step 6: Get company logo deterministically based on interview ID\n      const { logo, company } = getCompanyLogoForInterview(interviewId);\n      \n      // Step 7: Create Interview object with company branding\n      const interview: Interview = {\n        id: interviewId,\n        userId: userId || 'mock-user',\n        jobTitle: role.jobTitle,\n        company: company,\n        questions: questions,\n        finalized: true, // Mock interviews are pre-finalized\n        createdAt: new Date().toISOString(),\n        // Legacy properties for backward compatibility\n        role: `${role.jobTitle} at ${company}`,\n        level: role.seniority,\n        type: interviewType,\n        techstack: techStack,\n        companyLogo: logo,\n        companyName: company\n      };\n\n      console.log('‚ú® Created mock interview:', {\n        id: interview.id,\n        role: interview.role,\n        type: interview.type,\n        questionCount: interview.questions.length\n      });\n\n      return interview;\n    } catch (error) {\n      console.error('‚ùå Error creating mock interview:', error);\n      throw new Error('Failed to create mock interview');\n    }\n  }\n\n  /**\n   * Select interview type based on weighted distribution\n   */\n  private selectInterviewType(): string {\n    const random = Math.random();\n    let cumulativeWeight = 0;\n    \n    for (const { type, weight } of INTERVIEW_TYPES) {\n      cumulativeWeight += weight;\n      if (random <= cumulativeWeight) {\n        return type;\n      }\n    }\n    \n    return 'Mixed'; // Default fallback\n  }\n\n  /**\n   * Generate unique interview ID\n   */\n  private generateInterviewId(): string {\n    const timestamp = Date.now();\n    const random = Math.random().toString(36).substring(2, 9);\n    return `mock-${timestamp}-${random}`;\n  }\n\n  /**\n   * Get education level based on seniority\n   */\n  private getEducationForSeniority(seniority: string): string {\n    const educationMap: Record<string, string> = {\n      'Junior': \"Bachelor's degree in Computer Science or related field\",\n      'Mid-level': \"Bachelor's degree with 3-5 years experience\",\n      'Senior': \"Bachelor's/Master's degree with 5+ years experience\",\n      'Lead': \"Advanced degree with 7+ years experience\",\n      'Principal': \"Advanced degree with 10+ years experience\"\n    };\n    \n    return educationMap[seniority] || \"Bachelor's degree in relevant field\";\n  }\n\n  /**\n   * Fallback role generation when API fails\n   */\n  private getFallbackRole(): GeneratedRole {\n    const fallbackRoles: GeneratedRole[] = [\n      {\n        jobTitle: 'Full Stack Developer',\n        seniority: 'Senior',\n        company: 'InnovateTech Solutions',\n        industry: 'Software Development'\n      },\n      {\n        jobTitle: 'DevOps Engineer',\n        seniority: 'Mid-level',\n        company: 'CloudScale Systems',\n        industry: 'Cloud Infrastructure'\n      },\n      {\n        jobTitle: 'Data Engineer',\n        seniority: 'Senior',\n        company: 'DataFlow Analytics',\n        industry: 'Data Analytics'\n      },\n      {\n        jobTitle: 'Mobile App Developer',\n        seniority: 'Mid-level',\n        company: 'AppCraft Studios',\n        industry: 'Mobile Development'\n      },\n      {\n        jobTitle: 'Machine Learning Engineer',\n        seniority: 'Senior',\n        company: 'AI Innovations Lab',\n        industry: 'Artificial Intelligence'\n      }\n    ];\n\n    // Select a random fallback role that hasn't been used\n    const availableRoles = fallbackRoles.filter(\n      r => !this.usedRoles.has(r.jobTitle) && !this.usedCompanies.has(r.company)\n    );\n    \n    if (availableRoles.length === 0) {\n      // If all fallbacks are used, return the first one with modified company\n      const role = { ...fallbackRoles[0] };\n      role.company = `${role.company} ${Date.now() % 1000}`;\n      return role;\n    }\n    \n    const selected = availableRoles[Math.floor(Math.random() * availableRoles.length)];\n    this.usedRoles.add(selected.jobTitle);\n    this.usedCompanies.add(selected.company);\n    \n    return selected;\n  }\n\n  /**\n   * Fallback tech stack generation based on role\n   */\n  private getFallbackTechStack(role: GeneratedRole): string[] {\n    const techByRole: Record<string, string[]> = {\n      'Full Stack Developer': ['React', 'Node.js', 'MongoDB', 'TypeScript', 'Docker'],\n      'DevOps Engineer': ['Kubernetes', 'Docker', 'AWS', 'Terraform', 'Jenkins'],\n      'Data Engineer': ['Python', 'Apache Spark', 'SQL', 'Kafka', 'Airflow'],\n      'Mobile App Developer': ['React Native', 'TypeScript', 'Redux', 'Firebase', 'GraphQL'],\n      'Machine Learning Engineer': ['Python', 'TensorFlow', 'PyTorch', 'Scikit-learn', 'Docker'],\n      'Frontend Developer': ['React', 'TypeScript', 'Next.js', 'Tailwind CSS', 'Jest'],\n      'Backend Developer': ['Node.js', 'Express', 'PostgreSQL', 'Redis', 'Docker'],\n      'Cloud Architect': ['AWS', 'Terraform', 'Kubernetes', 'Python', 'Ansible']\n    };\n\n    // Find matching tech stack or return generic one\n    for (const [roleKey, tech] of Object.entries(techByRole)) {\n      if (role.jobTitle.toLowerCase().includes(roleKey.toLowerCase())) {\n        return tech.slice(0, 5); // Return 5 technologies\n      }\n    }\n\n    // Generic fallback\n    return ['JavaScript', 'Python', 'Docker', 'Git', 'SQL'];\n  }\n\n  /**\n   * Fallback questions generation\n   */\n  private getFallbackQuestions(type: string, role: GeneratedRole): string[] {\n    const questionsByType: Record<string, string[]> = {\n      'Technical': [\n        `Can you explain your experience with the technologies listed in the ${role.jobTitle} job description?`,\n        'Describe a complex technical problem you solved recently. What was your approach?',\n        'How do you ensure code quality and maintainability in your projects?',\n        'What is your approach to system design and architecture decisions?',\n        'Can you walk me through your debugging process when facing a difficult issue?'\n      ],\n      'Behavioral': [\n        'Tell me about a time when you had to work with a difficult team member.',\n        'Describe a situation where you had to meet a tight deadline. How did you manage it?',\n        'Give an example of when you had to learn a new technology quickly.',\n        'How do you handle constructive criticism and feedback?',\n        'Tell me about a project you\\'re particularly proud of. What was your role?'\n      ],\n      'Mixed': [\n        `What interests you most about the ${role.jobTitle} position at ${role.company}?`,\n        'How do you stay updated with the latest technology trends in your field?',\n        'Describe your ideal work environment and team structure.',\n        'What are your career goals for the next 3-5 years?',\n        'How do you balance technical excellence with meeting business deadlines?'\n      ]\n    };\n\n    return questionsByType[type] || questionsByType['Mixed'];\n  }\n\n  /**\n   * Clear caches (useful for testing or memory management)\n   */\n  clearCaches(): void {\n    this.roleCache.clear();\n    this.techStackCache.clear();\n    this.questionsCache.clear();\n    this.usedRoles.clear();\n    this.usedCompanies.clear();\n    console.log('üßπ Mock Interview Service caches cleared');\n  }\n\n  /**\n   * Clean expired cache entries\n   */\n  cleanExpiredCache(): void {\n    const now = Date.now();\n    \n    // Clean role cache\n    for (const [key, entry] of this.roleCache.entries()) {\n      if (now - entry.timestamp > CACHE_DURATION) {\n        this.roleCache.delete(key);\n      }\n    }\n    \n    // Clean tech stack cache\n    for (const [key, entry] of this.techStackCache.entries()) {\n      if (now - entry.timestamp > CACHE_DURATION) {\n        this.techStackCache.delete(key);\n      }\n    }\n    \n    // Clean questions cache\n    for (const [key, entry] of this.questionsCache.entries()) {\n      if (now - entry.timestamp > CACHE_DURATION) {\n        this.questionsCache.delete(key);\n      }\n    }\n    \n    console.log('üßπ Expired cache entries cleaned');\n  }\n\n  /**\n   * Get cache statistics (useful for monitoring)\n   */\n  getCacheStats(): {\n    rolesCached: number;\n    techStacksCached: number;\n    questionsCached: number;\n    usedRolesCount: number;\n    usedCompaniesCount: number;\n  } {\n    return {\n      rolesCached: this.roleCache.size,\n      techStacksCached: this.techStackCache.size,\n      questionsCached: this.questionsCache.size,\n      usedRolesCount: this.usedRoles.size,\n      usedCompaniesCount: this.usedCompanies.size\n    };\n  }\n}\n\n// Export singleton instance\nexport const mockInterviewService = new MockInterviewService();\n\n// Export the main creation function for convenience\nexport async function createMockInterview(userId?: string): Promise<Interview> {\n  return mockInterviewService.createMockInterview(userId);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/services/notification-service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[245,248],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[245,248],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":14,"column":17,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":14,"endColumn":32},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":14,"column":44,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":14,"endColumn":59},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":16,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[893,896],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[893,896],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":267,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":267,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7430,7433],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7430,7433],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1159,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1159,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[50316,50319],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[50316,50319],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1175,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1175,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[50731,50734],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[50731,50734],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1210,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1210,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[51693,51696],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[51693,51696],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// lib/services/notification-service.ts\n\nimport { azureCosmosService } from './azure-cosmos-service';\nimport { awsSESService, EmailParams } from './aws-ses-service';\n// MJML import with conditional loading for build compatibility\nlet mjml2html: any;\n\ntry {\n  // Only import MJML in runtime, not during build\n  if (typeof window === 'undefined' && process.env.NODE_ENV !== 'development') {\n    // For production builds, use dynamic import\n    mjml2html = null;\n  } else {\n    mjml2html = require('mjml').default || require('mjml');\n  }\n} catch (error) {\n  console.warn('MJML not available, falling back to simple HTML templates');\n  mjml2html = null;\n}\n\nexport interface NotificationEvent {\n  id?: string;\n  userId: string;\n  type: NotificationType;\n  channel: NotificationChannel;\n  recipient: string;\n  subject: string;\n  content: string;\n  templateUsed?: string;\n  metadata?: Record<string, any>;\n  status: 'pending' | 'sent' | 'failed' | 'bounced' | 'delivered';\n  createdAt: Date;\n  sentAt?: Date;\n  updatedAt?: Date;\n  error?: string;\n  messageId?: string;\n  jobId?: string;\n  applicationId?: string;\n}\n\nexport type NotificationType = \n  | 'job_discovered'\n  | 'application_submitted'\n  | 'follow_up_reminder'\n  | 'interview_scheduled'\n  | 'application_status_update'\n  | 'daily_summary'\n  | 'weekly_report'\n  | 'search_completed'\n  | 'quota_warning'\n  | 'welcome'\n  | 'verification'\n  | 'premium_upgrade';\n\nexport type NotificationChannel = 'email' | 'sms' | 'push' | 'in_app';\n\nexport interface JobDiscoveredData {\n  jobId: string;\n  jobTitle: string;\n  company: string;\n  location: string;\n  salary?: {\n    min?: number;\n    max?: number;\n    currency: string;\n    period: string;\n  };\n  relevancyScore: number;\n  matchedSkills: string[];\n  jobUrl?: string;\n  portal: string;\n}\n\nexport interface ApplicationSubmittedData {\n  applicationId: string;\n  jobId: string;\n  jobTitle: string;\n  company: string;\n  submittedAt: Date;\n  autoApplied: boolean;\n  coverLetterUsed: boolean;\n  resumeTailored: boolean;\n  relevancyScore: number;\n}\n\nexport interface FollowUpReminderData {\n  applicationId: string;\n  jobTitle: string;\n  company: string;\n  appliedDate: Date;\n  followUpType: 'initial' | 'second' | 'thank_you' | 'status_check';\n  suggestedMessage?: string;\n}\n\nexport interface DailySummaryData {\n  date: Date;\n  jobsFound: number;\n  applicationsSubmitted: number;\n  followUpsSent: number;\n  upcomingFollowUps: number;\n  topJobs: JobDiscoveredData[];\n}\n\nexport class NotificationService {\n\n  /**\n   * Send job discovered notification\n   */\n  async notifyJobDiscovered(\n    userId: string,\n    email: string,\n    userName: string,\n    jobData: JobDiscoveredData\n  ): Promise<{ success: boolean; error?: string }> {\n    try {\n      const emailContent = this.generateJobDiscoveredEmail(userName, jobData);\n      \n      const result = await this.sendEmail({\n        userId,\n        type: 'job_discovered',\n        recipient: email,\n        subject: `New Job Match: ${jobData.jobTitle} at ${jobData.company}`,\n        content: emailContent,\n        templateUsed: 'job_discovered',\n        metadata: {\n          jobId: jobData.jobId,\n          relevancyScore: jobData.relevancyScore,\n          company: jobData.company,\n          portal: jobData.portal\n        },\n        jobId: jobData.jobId\n      });\n\n      return result;\n    } catch (error) {\n      console.error('Error sending job discovered notification:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to send notification'\n      };\n    }\n  }\n\n  /**\n   * Send application submitted notification\n   */\n  async notifyApplicationSubmitted(\n    userId: string,\n    email: string,\n    userName: string,\n    applicationData: ApplicationSubmittedData\n  ): Promise<{ success: boolean; error?: string }> {\n    try {\n      const emailContent = this.generateApplicationSubmittedEmail(userName, applicationData);\n      \n      const result = await this.sendEmail({\n        userId,\n        type: 'application_submitted',\n        recipient: email,\n        subject: `Application Submitted: ${applicationData.jobTitle} at ${applicationData.company}`,\n        content: emailContent,\n        templateUsed: 'application_submitted',\n        metadata: {\n          applicationId: applicationData.applicationId,\n          jobId: applicationData.jobId,\n          autoApplied: applicationData.autoApplied,\n          relevancyScore: applicationData.relevancyScore\n        },\n        jobId: applicationData.jobId,\n        applicationId: applicationData.applicationId\n      });\n\n      return result;\n    } catch (error) {\n      console.error('Error sending application submitted notification:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to send notification'\n      };\n    }\n  }\n\n  /**\n   * Send follow-up reminder notification\n   */\n  async notifyFollowUpReminder(\n    userId: string,\n    email: string,\n    userName: string,\n    followUpData: FollowUpReminderData\n  ): Promise<{ success: boolean; error?: string }> {\n    try {\n      const emailContent = this.generateFollowUpReminderEmail(userName, followUpData);\n      \n      const result = await this.sendEmail({\n        userId,\n        type: 'follow_up_reminder',\n        recipient: email,\n        subject: `Follow-up Reminder: ${followUpData.jobTitle} at ${followUpData.company}`,\n        content: emailContent,\n        templateUsed: 'follow_up_reminder',\n        metadata: {\n          applicationId: followUpData.applicationId,\n          followUpType: followUpData.followUpType,\n          daysSinceApplication: Math.floor((new Date().getTime() - followUpData.appliedDate.getTime()) / (1000 * 60 * 60 * 24))\n        },\n        applicationId: followUpData.applicationId\n      });\n\n      return result;\n    } catch (error) {\n      console.error('Error sending follow-up reminder notification:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to send notification'\n      };\n    }\n  }\n\n  /**\n   * Send daily summary notification\n   */\n  async notifyDailySummary(\n    userId: string,\n    email: string,\n    userName: string,\n    summaryData: DailySummaryData\n  ): Promise<{ success: boolean; error?: string }> {\n    try {\n      const emailContent = this.generateDailySummaryEmail(userName, summaryData);\n      \n      const result = await this.sendEmail({\n        userId,\n        type: 'daily_summary',\n        recipient: email,\n        subject: `Daily Job Search Summary - ${summaryData.date.toLocaleDateString()}`,\n        content: emailContent,\n        templateUsed: 'daily_summary',\n        metadata: {\n          date: summaryData.date.toISOString(),\n          jobsFound: summaryData.jobsFound,\n          applicationsSubmitted: summaryData.applicationsSubmitted,\n          followUpsSent: summaryData.followUpsSent\n        }\n      });\n\n      return result;\n    } catch (error) {\n      console.error('Error sending daily summary notification:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to send notification'\n      };\n    }\n  }\n\n  /**\n   * Send generic email notification\n   */\n  private async sendEmail(params: {\n    userId: string;\n    type: NotificationType;\n    recipient: string;\n    subject: string;\n    content: string;\n    templateUsed?: string;\n    metadata?: Record<string, any>;\n    jobId?: string;\n    applicationId?: string;\n  }): Promise<{ success: boolean; error?: string }> {\n    let eventId: string | undefined;\n    \n    try {\n      // Create notification event record\n      eventId = await azureCosmosService.createNotificationEvent({\n        userId: params.userId,\n        type: params.type,\n        channel: 'email',\n        recipient: params.recipient,\n        subject: params.subject,\n        content: params.content,\n        templateUsed: params.templateUsed,\n        metadata: params.metadata,\n        status: 'pending',\n        createdAt: new Date(),\n        jobId: params.jobId,\n        applicationId: params.applicationId\n      });\n\n      // Send email via AWS SES\n      const emailParams: EmailParams = {\n        to: params.recipient,\n        subject: params.subject,\n        html: params.content\n      };\n\n      const emailResult = await awsSESService.sendEmail(emailParams);\n\n      // Update event status\n      await azureCosmosService.updateNotificationEvent(eventId, params.userId, {\n        status: emailResult.success ? 'sent' : 'failed',\n        sentAt: emailResult.success ? new Date() : undefined,\n        messageId: emailResult.messageId,\n        error: emailResult.error,\n        updatedAt: new Date()\n      });\n\n      console.log(`Notification ${params.type} ${emailResult.success ? 'sent' : 'failed'} to ${params.recipient}`);\n\n      return {\n        success: emailResult.success,\n        error: emailResult.error\n      };\n\n    } catch (error) {\n      console.error('Error in sendEmail:', error);\n      \n      // Update event status to failed (only if eventId exists)\n      if (eventId) {\n        try {\n          await azureCosmosService.updateNotificationEvent(eventId, params.userId, {\n            status: 'failed',\n            error: error instanceof Error ? error.message : 'Unknown error',\n            updatedAt: new Date()\n          });\n        } catch (updateError) {\n          console.error('Failed to update notification event status:', updateError);\n        }\n      }\n\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to send email'\n      };\n    }\n  }\n\n  /**\n   * Generate job discovered email using MJML\n   */\n  private generateJobDiscoveredEmail(userName: string, jobData: JobDiscoveredData): string {\n    const mjmlTemplate = `\n      <mjml>\n        <mj-head>\n          <mj-title>New Job Match Found</mj-title>\n          <mj-font name=\"Inter\" href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap\" />\n          <mj-attributes>\n            <mj-all font-family=\"Inter, Arial, sans-serif\" />\n            <mj-text font-size=\"16px\" color=\"#374151\" line-height=\"1.6\" />\n            <mj-button font-size=\"16px\" font-weight=\"600\" />\n          </mj-attributes>\n        </mj-head>\n        <mj-body background-color=\"#f9fafb\">\n          <mj-section background-color=\"#ffffff\" padding=\"40px 20px\">\n            <mj-column>\n              <mj-text font-size=\"24px\" font-weight=\"600\" color=\"#111827\" align=\"center\">\n                üéØ New Job Match Found!\n              </mj-text>\n              <mj-text font-size=\"18px\" color=\"#6b7280\" align=\"center\" padding-bottom=\"30px\">\n                Hi ${userName}, we found a job that matches your profile\n              </mj-text>\n            </mj-column>\n          </mj-section>\n\n          <mj-section background-color=\"#ffffff\" padding=\"0 20px\">\n            <mj-column>\n              <mj-table>\n                <tr style=\"border-bottom: 1px solid #e5e7eb;\">\n                  <td style=\"padding: 15px 0; font-weight: 600; color: #374151; width: 30%;\">Position:</td>\n                  <td style=\"padding: 15px 0; color: #111827; font-weight: 500;\">${jobData.jobTitle}</td>\n                </tr>\n                <tr style=\"border-bottom: 1px solid #e5e7eb;\">\n                  <td style=\"padding: 15px 0; font-weight: 600; color: #374151;\">Company:</td>\n                  <td style=\"padding: 15px 0; color: #111827; font-weight: 500;\">${jobData.company}</td>\n                </tr>\n                <tr style=\"border-bottom: 1px solid #e5e7eb;\">\n                  <td style=\"padding: 15px 0; font-weight: 600; color: #374151;\">Location:</td>\n                  <td style=\"padding: 15px 0; color: #111827;\">${jobData.location}</td>\n                </tr>\n                ${jobData.salary ? `\n                <tr style=\"border-bottom: 1px solid #e5e7eb;\">\n                  <td style=\"padding: 15px 0; font-weight: 600; color: #374151;\">Salary:</td>\n                  <td style=\"padding: 15px 0; color: #111827;\">\n                    ${jobData.salary.min && jobData.salary.max \n                      ? `$${jobData.salary.min?.toLocaleString()} - $${jobData.salary.max?.toLocaleString()} ${jobData.salary.period}`\n                      : `Competitive salary`\n                    }\n                  </td>\n                </tr>` : ''}\n                <tr style=\"border-bottom: 1px solid #e5e7eb;\">\n                  <td style=\"padding: 15px 0; font-weight: 600; color: #374151;\">Match Score:</td>\n                  <td style=\"padding: 15px 0; color: #059669; font-weight: 600;\">${jobData.relevancyScore}%</td>\n                </tr>\n                <tr>\n                  <td style=\"padding: 15px 0; font-weight: 600; color: #374151;\">Portal:</td>\n                  <td style=\"padding: 15px 0; color: #111827;\">${jobData.portal}</td>\n                </tr>\n              </mj-table>\n            </mj-column>\n          </mj-section>\n\n          ${jobData.matchedSkills.length > 0 ? `\n          <mj-section background-color=\"#ffffff\" padding=\"30px 20px\">\n            <mj-column>\n              <mj-text font-size=\"18px\" font-weight=\"600\" color=\"#111827\" padding-bottom=\"15px\">\n                üéØ Matched Skills\n              </mj-text>\n              <mj-text font-size=\"14px\" color=\"#374151\">\n                ${jobData.matchedSkills.map(skill => \n                  `<span style=\"background-color: #ecfccb; color: #365314; padding: 4px 8px; border-radius: 12px; margin-right: 8px; margin-bottom: 4px; display: inline-block;\">${skill}</span>`\n                ).join('')}\n              </mj-text>\n            </mj-column>\n          </mj-section>` : ''}\n\n          <mj-section background-color=\"#ffffff\" padding=\"30px 20px\">\n            <mj-column>\n              ${jobData.jobUrl ? `\n              <mj-button background-color=\"#2563eb\" color=\"#ffffff\" href=\"${jobData.jobUrl}\" target=\"_blank\" padding-bottom=\"15px\">\n                View Job Details\n              </mj-button>` : ''}\n              <mj-button background-color=\"#059669\" color=\"#ffffff\" href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/jobs/${jobData.jobId}\" target=\"_blank\">\n                Manage in PrepBettr\n              </mj-button>\n            </mj-column>\n          </mj-section>\n\n          <mj-section background-color=\"#f9fafb\" padding=\"30px 20px\">\n            <mj-column>\n              <mj-text font-size=\"14px\" color=\"#6b7280\" align=\"center\">\n                This job was automatically discovered by PrepBettr based on your preferences.\n                <br />\n                <a href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/settings/notifications\" style=\"color: #2563eb;\">Manage notification preferences</a>\n              </mj-text>\n            </mj-column>\n          </mj-section>\n        </mj-body>\n      </mjml>\n    `;\n\n    if (mjml2html) {\n      try {\n        const { html } = mjml2html(mjmlTemplate);\n        return html;\n      } catch (error) {\n        console.warn('MJML compilation failed, using fallback HTML:', error);\n      }\n    }\n    \n    // Fallback HTML generation\n    return this.generateFallbackJobDiscoveredEmail(userName, jobData);\n  }\n\n  /**\n   * Generate application submitted email using MJML\n   */\n  private generateApplicationSubmittedEmail(userName: string, appData: ApplicationSubmittedData): string {\n    const mjmlTemplate = `\n      <mjml>\n        <mj-head>\n          <mj-title>Application Submitted Successfully</mj-title>\n          <mj-font name=\"Inter\" href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap\" />\n          <mj-attributes>\n            <mj-all font-family=\"Inter, Arial, sans-serif\" />\n            <mj-text font-size=\"16px\" color=\"#374151\" line-height=\"1.6\" />\n            <mj-button font-size=\"16px\" font-weight=\"600\" />\n          </mj-attributes>\n        </mj-head>\n        <mj-body background-color=\"#f9fafb\">\n          <mj-section background-color=\"#ffffff\" padding=\"40px 20px\">\n            <mj-column>\n              <mj-text font-size=\"24px\" font-weight=\"600\" color=\"#111827\" align=\"center\">\n                ‚úÖ Application Submitted!\n              </mj-text>\n              <mj-text font-size=\"18px\" color=\"#6b7280\" align=\"center\" padding-bottom=\"30px\">\n                Hi ${userName}, your application has been successfully submitted\n              </mj-text>\n            </mj-column>\n          </mj-section>\n\n          <mj-section background-color=\"#ffffff\" padding=\"0 20px\">\n            <mj-column>\n              <mj-table>\n                <tr style=\"border-bottom: 1px solid #e5e7eb;\">\n                  <td style=\"padding: 15px 0; font-weight: 600; color: #374151; width: 30%;\">Position:</td>\n                  <td style=\"padding: 15px 0; color: #111827; font-weight: 500;\">${appData.jobTitle}</td>\n                </tr>\n                <tr style=\"border-bottom: 1px solid #e5e7eb;\">\n                  <td style=\"padding: 15px 0; font-weight: 600; color: #374151;\">Company:</td>\n                  <td style=\"padding: 15px 0; color: #111827; font-weight: 500;\">${appData.company}</td>\n                </tr>\n                <tr style=\"border-bottom: 1px solid #e5e7eb;\">\n                  <td style=\"padding: 15px 0; font-weight: 600; color: #374151;\">Submitted:</td>\n                  <td style=\"padding: 15px 0; color: #111827;\">${appData.submittedAt.toLocaleDateString()} at ${appData.submittedAt.toLocaleTimeString()}</td>\n                </tr>\n                <tr style=\"border-bottom: 1px solid #e5e7eb;\">\n                  <td style=\"padding: 15px 0; font-weight: 600; color: #374151;\">Application Type:</td>\n                  <td style=\"padding: 15px 0; color: #111827;\">\n                    ${appData.autoApplied \n                      ? '<span style=\"background-color: #dbeafe; color: #1e40af; padding: 2px 8px; border-radius: 12px; font-size: 14px;\">Auto-Applied</span>'\n                      : '<span style=\"background-color: #ecfccb; color: #365314; padding: 2px 8px; border-radius: 12px; font-size: 14px;\">Manual</span>'\n                    }\n                  </td>\n                </tr>\n                <tr style=\"border-bottom: 1px solid #e5e7eb;\">\n                  <td style=\"padding: 15px 0; font-weight: 600; color: #374151;\">Match Score:</td>\n                  <td style=\"padding: 15px 0; color: #059669; font-weight: 600;\">${appData.relevancyScore}%</td>\n                </tr>\n              </mj-table>\n            </mj-column>\n          </mj-section>\n\n          <mj-section background-color=\"#f8fafc\" padding=\"30px 20px\">\n            <mj-column>\n              <mj-text font-size=\"18px\" font-weight=\"600\" color=\"#111827\" padding-bottom=\"15px\">\n                üìã Application Details\n              </mj-text>\n              <mj-text font-size=\"14px\" color=\"#374151\">\n                ‚úÖ Cover Letter: ${appData.coverLetterUsed ? 'Included' : 'Not included'}<br/>\n                ‚úÖ Resume: ${appData.resumeTailored ? 'Tailored for this position' : 'Standard version'}<br/>\n                ‚úÖ Application ID: ${appData.applicationId}\n              </mj-text>\n            </mj-column>\n          </mj-section>\n\n          <mj-section background-color=\"#ffffff\" padding=\"30px 20px\">\n            <mj-column>\n              <mj-button background-color=\"#2563eb\" color=\"#ffffff\" href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/applications/${appData.applicationId}\" target=\"_blank\" padding-bottom=\"15px\">\n                Track Application\n              </mj-button>\n              <mj-button background-color=\"#059669\" color=\"#ffffff\" href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/dashboard\" target=\"_blank\">\n                View Dashboard\n              </mj-button>\n            </mj-column>\n          </mj-section>\n\n          <mj-section background-color=\"#f9fafb\" padding=\"30px 20px\">\n            <mj-column>\n              <mj-text font-size=\"14px\" color=\"#6b7280\" align=\"center\">\n                üöÄ Next Steps: We'll monitor your application progress and send follow-up reminders.\n                <br />\n                <a href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/settings/automation\" style=\"color: #2563eb;\">Manage automation settings</a>\n              </mj-text>\n            </mj-column>\n          </mj-section>\n        </mj-body>\n      </mjml>\n    `;\n\n    if (mjml2html) {\n      try {\n        const { html } = mjml2html(mjmlTemplate);\n        return html;\n      } catch (error) {\n        console.warn('MJML compilation failed, using fallback HTML:', error);\n      }\n    }\n    \n    // Fallback HTML generation\n    return this.generateFallbackApplicationSubmittedEmail(userName, appData);\n  }\n\n  /**\n   * Generate follow-up reminder email using MJML\n   */\n  private generateFollowUpReminderEmail(userName: string, followUpData: FollowUpReminderData): string {\n    const daysSinceApplication = Math.floor((new Date().getTime() - followUpData.appliedDate.getTime()) / (1000 * 60 * 60 * 24));\n    \n    const mjmlTemplate = `\n      <mjml>\n        <mj-head>\n          <mj-title>Follow-up Reminder</mj-title>\n          <mj-font name=\"Inter\" href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap\" />\n          <mj-attributes>\n            <mj-all font-family=\"Inter, Arial, sans-serif\" />\n            <mj-text font-size=\"16px\" color=\"#374151\" line-height=\"1.6\" />\n            <mj-button font-size=\"16px\" font-weight=\"600\" />\n          </mj-attributes>\n        </mj-head>\n        <mj-body background-color=\"#f9fafb\">\n          <mj-section background-color=\"#ffffff\" padding=\"40px 20px\">\n            <mj-column>\n              <mj-text font-size=\"24px\" font-weight=\"600\" color=\"#111827\" align=\"center\">\n                üì¨ Follow-up Reminder\n              </mj-text>\n              <mj-text font-size=\"18px\" color=\"#6b7280\" align=\"center\" padding-bottom=\"30px\">\n                Hi ${userName}, it's time to follow up on your application\n              </mj-text>\n            </mj-column>\n          </mj-section>\n\n          <mj-section background-color=\"#ffffff\" padding=\"0 20px\">\n            <mj-column>\n              <mj-table>\n                <tr style=\"border-bottom: 1px solid #e5e7eb;\">\n                  <td style=\"padding: 15px 0; font-weight: 600; color: #374151; width: 30%;\">Position:</td>\n                  <td style=\"padding: 15px 0; color: #111827; font-weight: 500;\">${followUpData.jobTitle}</td>\n                </tr>\n                <tr style=\"border-bottom: 1px solid #e5e7eb;\">\n                  <td style=\"padding: 15px 0; font-weight: 600; color: #374151;\">Company:</td>\n                  <td style=\"padding: 15px 0; color: #111827; font-weight: 500;\">${followUpData.company}</td>\n                </tr>\n                <tr style=\"border-bottom: 1px solid #e5e7eb;\">\n                  <td style=\"padding: 15px 0; font-weight: 600; color: #374151;\">Applied:</td>\n                  <td style=\"padding: 15px 0; color: #111827;\">${followUpData.appliedDate.toLocaleDateString()} (${daysSinceApplication} days ago)</td>\n                </tr>\n                <tr>\n                  <td style=\"padding: 15px 0; font-weight: 600; color: #374151;\">Follow-up Type:</td>\n                  <td style=\"padding: 15px 0; color: #111827; text-transform: capitalize;\">\n                    ${followUpData.followUpType.replace('_', ' ')} Follow-up\n                  </td>\n                </tr>\n              </mj-table>\n            </mj-column>\n          </mj-section>\n\n          ${followUpData.suggestedMessage ? `\n          <mj-section background-color=\"#f8fafc\" padding=\"30px 20px\">\n            <mj-column>\n              <mj-text font-size=\"18px\" font-weight=\"600\" color=\"#111827\" padding-bottom=\"15px\">\n                üí° Suggested Follow-up Message\n              </mj-text>\n              <mj-text font-size=\"14px\" color=\"#374151\" background-color=\"#ffffff\" padding=\"20px\" border-left=\"4px solid #2563eb\">\n                ${followUpData.suggestedMessage.replace(/\\n/g, '<br/>')}\n              </mj-text>\n            </mj-column>\n          </mj-section>` : ''}\n\n          <mj-section background-color=\"#ffffff\" padding=\"30px 20px\">\n            <mj-column>\n              <mj-button background-color=\"#2563eb\" color=\"#ffffff\" href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/applications/${followUpData.applicationId}/follow-up\" target=\"_blank\" padding-bottom=\"15px\">\n                Send Follow-up\n              </mj-button>\n              <mj-button background-color=\"#059669\" color=\"#ffffff\" href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/applications/${followUpData.applicationId}\" target=\"_blank\">\n                View Application\n              </mj-button>\n            </mj-column>\n          </mj-section>\n\n          <mj-section background-color=\"#fef3c7\" padding=\"20px\">\n            <mj-column>\n              <mj-text font-size=\"14px\" color=\"#92400e\" align=\"center\">\n                üí° <strong>Pro Tip:</strong> Following up shows enthusiasm and keeps you top-of-mind with hiring managers.\n                Most candidates don't follow up, so this gives you a competitive advantage!\n              </mj-text>\n            </mj-column>\n          </mj-section>\n\n          <mj-section background-color=\"#f9fafb\" padding=\"30px 20px\">\n            <mj-column>\n              <mj-text font-size=\"14px\" color=\"#6b7280\" align=\"center\">\n                This reminder was automatically generated based on your application timeline.\n                <br />\n                <a href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/settings/follow-up\" style=\"color: #2563eb;\">Manage follow-up settings</a>\n              </mj-text>\n            </mj-column>\n          </mj-section>\n        </mj-body>\n      </mjml>\n    `;\n\n    if (mjml2html) {\n      try {\n        const { html } = mjml2html(mjmlTemplate);\n        return html;\n      } catch (error) {\n        console.warn('MJML compilation failed, using fallback HTML:', error);\n      }\n    }\n    \n    // Fallback HTML generation\n    return this.generateFallbackFollowUpReminderEmail(userName, followUpData);\n  }\n\n  /**\n   * Generate daily summary email using MJML\n   */\n  private generateDailySummaryEmail(userName: string, summaryData: DailySummaryData): string {\n    const mjmlTemplate = `\n      <mjml>\n        <mj-head>\n          <mj-title>Daily Job Search Summary</mj-title>\n          <mj-font name=\"Inter\" href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap\" />\n          <mj-attributes>\n            <mj-all font-family=\"Inter, Arial, sans-serif\" />\n            <mj-text font-size=\"16px\" color=\"#374151\" line-height=\"1.6\" />\n            <mj-button font-size=\"16px\" font-weight=\"600\" />\n          </mj-attributes>\n        </mj-head>\n        <mj-body background-color=\"#f9fafb\">\n          <mj-section background-color=\"#ffffff\" padding=\"40px 20px\">\n            <mj-column>\n              <mj-text font-size=\"24px\" font-weight=\"600\" color=\"#111827\" align=\"center\">\n                üìä Daily Job Search Summary\n              </mj-text>\n              <mj-text font-size=\"18px\" color=\"#6b7280\" align=\"center\" padding-bottom=\"30px\">\n                Hi ${userName}, here's your activity for ${summaryData.date.toLocaleDateString()}\n              </mj-text>\n            </mj-column>\n          </mj-section>\n\n          <mj-section background-color=\"#ffffff\" padding=\"0 20px 30px 20px\">\n            <mj-column width=\"25%\">\n              <mj-text font-size=\"32px\" font-weight=\"700\" color=\"#2563eb\" align=\"center\" padding-bottom=\"5px\">\n                ${summaryData.jobsFound}\n              </mj-text>\n              <mj-text font-size=\"14px\" color=\"#6b7280\" align=\"center\">\n                Jobs Found\n              </mj-text>\n            </mj-column>\n            <mj-column width=\"25%\">\n              <mj-text font-size=\"32px\" font-weight=\"700\" color=\"#059669\" align=\"center\" padding-bottom=\"5px\">\n                ${summaryData.applicationsSubmitted}\n              </mj-text>\n              <mj-text font-size=\"14px\" color=\"#6b7280\" align=\"center\">\n                Applications\n              </mj-text>\n            </mj-column>\n            <mj-column width=\"25%\">\n              <mj-text font-size=\"32px\" font-weight=\"700\" color=\"#dc2626\" align=\"center\" padding-bottom=\"5px\">\n                ${summaryData.followUpsSent}\n              </mj-text>\n              <mj-text font-size=\"14px\" color=\"#6b7280\" align=\"center\">\n                Follow-ups\n              </mj-text>\n            </mj-column>\n            <mj-column width=\"25%\">\n              <mj-text font-size=\"32px\" font-weight=\"700\" color=\"#7c3aed\" align=\"center\" padding-bottom=\"5px\">\n                ${summaryData.upcomingFollowUps}\n              </mj-text>\n              <mj-text font-size=\"14px\" color=\"#6b7280\" align=\"center\">\n                Upcoming\n              </mj-text>\n            </mj-column>\n          </mj-section>\n\n          ${summaryData.topJobs.length > 0 ? `\n          <mj-section background-color=\"#f8fafc\" padding=\"30px 20px\">\n            <mj-column>\n              <mj-text font-size=\"18px\" font-weight=\"600\" color=\"#111827\" padding-bottom=\"20px\">\n                üéØ Top Job Matches\n              </mj-text>\n              \n              ${summaryData.topJobs.slice(0, 3).map(job => `\n              <mj-table>\n                <tr style=\"border-bottom: 1px solid #e5e7eb; margin-bottom: 15px;\">\n                  <td style=\"padding: 15px 0;\">\n                    <div style=\"font-weight: 600; color: #111827; margin-bottom: 5px;\">${job.jobTitle}</div>\n                    <div style=\"color: #6b7280; margin-bottom: 5px;\">${job.company} ‚Ä¢ ${job.location}</div>\n                    <div style=\"display: flex; align-items: center;\">\n                      <span style=\"background-color: #ecfccb; color: #365314; padding: 2px 8px; border-radius: 12px; font-size: 12px; margin-right: 10px;\">\n                        ${job.relevancyScore}% match\n                      </span>\n                      <span style=\"background-color: #dbeafe; color: #1e40af; padding: 2px 8px; border-radius: 12px; font-size: 12px;\">\n                        ${job.portal}\n                      </span>\n                    </div>\n                  </td>\n                </tr>\n              </mj-table>\n              `).join('')}\n            </mj-column>\n          </mj-section>` : ''}\n\n          <mj-section background-color=\"#ffffff\" padding=\"30px 20px\">\n            <mj-column>\n              <mj-button background-color=\"#2563eb\" color=\"#ffffff\" href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/dashboard\" target=\"_blank\" padding-bottom=\"15px\">\n                View Full Dashboard\n              </mj-button>\n              <mj-button background-color=\"#059669\" color=\"#ffffff\" href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/jobs\" target=\"_blank\">\n                Browse All Jobs\n              </mj-button>\n            </mj-column>\n          </mj-section>\n\n          <mj-section background-color=\"#f9fafb\" padding=\"30px 20px\">\n            <mj-column>\n              <mj-text font-size=\"14px\" color=\"#6b7280\" align=\"center\">\n                Keep up the great work! Consistency is key to a successful job search.\n                <br />\n                <a href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/settings/notifications\" style=\"color: #2563eb;\">Manage notification preferences</a>\n              </mj-text>\n            </mj-column>\n          </mj-section>\n        </mj-body>\n      </mjml>\n    `;\n\n    if (mjml2html) {\n      try {\n        const { html } = mjml2html(mjmlTemplate);\n        return html;\n      } catch (error) {\n        console.warn('MJML compilation failed, using fallback HTML:', error);\n      }\n    }\n    \n    // Fallback HTML generation\n    return this.generateFallbackDailySummaryEmail(userName, summaryData);\n  }\n\n  /**\n   * Fallback HTML generation methods\n   */\n  private generateFallbackJobDiscoveredEmail(userName: string, jobData: JobDiscoveredData): string {\n    const salaryText = jobData.salary && jobData.salary.min && jobData.salary.max \n      ? `$${jobData.salary.min.toLocaleString()} - $${jobData.salary.max.toLocaleString()} ${jobData.salary.period}`\n      : 'Competitive salary';\n\n    const skillsHtml = jobData.matchedSkills.length > 0 \n      ? `<div style=\"margin: 20px 0;\">\n           <h3 style=\"color: #111827; margin-bottom: 10px;\">üéØ Matched Skills</h3>\n           <div>${jobData.matchedSkills.map(skill => \n             `<span style=\"background-color: #ecfccb; color: #365314; padding: 4px 8px; border-radius: 12px; margin-right: 8px; margin-bottom: 4px; display: inline-block;\">${skill}</span>`\n           ).join('')}</div>\n         </div>`\n      : '';\n\n    return `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <title>New Job Match Found</title>\n        <style>\n          body { font-family: Inter, Arial, sans-serif; line-height: 1.6; color: #374151; margin: 0; padding: 20px; background-color: #f9fafb; }\n          .container { max-width: 600px; margin: 0 auto; background-color: #ffffff; border-radius: 8px; overflow: hidden; }\n          .header { background-color: #ffffff; padding: 40px 20px; text-align: center; }\n          .content { padding: 20px; }\n          .table { width: 100%; border-collapse: collapse; }\n          .table td { padding: 15px 0; border-bottom: 1px solid #e5e7eb; }\n          .table td:first-child { font-weight: 600; color: #374151; width: 30%; }\n          .button { display: inline-block; background-color: #2563eb; color: #ffffff; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 10px 5px; }\n          .footer { background-color: #f9fafb; padding: 30px 20px; text-align: center; font-size: 14px; color: #6b7280; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <h1 style=\"font-size: 24px; font-weight: 600; color: #111827; margin: 0;\">üéØ New Job Match Found!</h1>\n            <p style=\"font-size: 18px; color: #6b7280; margin: 10px 0 0;\">Hi ${userName}, we found a job that matches your profile</p>\n          </div>\n          \n          <div class=\"content\">\n            <table class=\"table\">\n              <tr><td>Position:</td><td style=\"color: #111827; font-weight: 500;\">${jobData.jobTitle}</td></tr>\n              <tr><td>Company:</td><td style=\"color: #111827; font-weight: 500;\">${jobData.company}</td></tr>\n              <tr><td>Location:</td><td style=\"color: #111827;\">${jobData.location}</td></tr>\n              ${jobData.salary ? `<tr><td>Salary:</td><td style=\"color: #111827;\">${salaryText}</td></tr>` : ''}\n              <tr><td>Match Score:</td><td style=\"color: #059669; font-weight: 600;\">${jobData.relevancyScore}%</td></tr>\n              <tr><td>Portal:</td><td style=\"color: #111827;\">${jobData.portal}</td></tr>\n            </table>\n            \n            ${skillsHtml}\n            \n            <div style=\"text-align: center; margin: 30px 0;\">\n              ${jobData.jobUrl ? `<a href=\"${jobData.jobUrl}\" class=\"button\">View Job Details</a>` : ''}\n              <a href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/jobs/${jobData.jobId}\" class=\"button\" style=\"background-color: #059669;\">Manage in PrepBettr</a>\n            </div>\n          </div>\n          \n          <div class=\"footer\">\n            This job was automatically discovered by PrepBettr based on your preferences.<br>\n            <a href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/settings/notifications\" style=\"color: #2563eb;\">Manage notification preferences</a>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n  }\n\n  private generateFallbackApplicationSubmittedEmail(userName: string, appData: ApplicationSubmittedData): string {\n    const appType = appData.autoApplied ? 'Auto-Applied' : 'Manual';\n    const appTypeColor = appData.autoApplied ? '#1e40af' : '#365314';\n    const appTypeBg = appData.autoApplied ? '#dbeafe' : '#ecfccb';\n\n    return `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <title>Application Submitted Successfully</title>\n        <style>\n          body { font-family: Inter, Arial, sans-serif; line-height: 1.6; color: #374151; margin: 0; padding: 20px; background-color: #f9fafb; }\n          .container { max-width: 600px; margin: 0 auto; background-color: #ffffff; border-radius: 8px; overflow: hidden; }\n          .header { background-color: #ffffff; padding: 40px 20px; text-align: center; }\n          .content { padding: 20px; }\n          .table { width: 100%; border-collapse: collapse; }\n          .table td { padding: 15px 0; border-bottom: 1px solid #e5e7eb; }\n          .table td:first-child { font-weight: 600; color: #374151; width: 30%; }\n          .details { background-color: #f8fafc; padding: 20px; margin: 20px 0; border-radius: 6px; }\n          .button { display: inline-block; background-color: #2563eb; color: #ffffff; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 10px 5px; }\n          .footer { background-color: #f9fafb; padding: 30px 20px; text-align: center; font-size: 14px; color: #6b7280; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <h1 style=\"font-size: 24px; font-weight: 600; color: #111827; margin: 0;\">‚úÖ Application Submitted!</h1>\n            <p style=\"font-size: 18px; color: #6b7280; margin: 10px 0 0;\">Hi ${userName}, your application has been successfully submitted</p>\n          </div>\n          \n          <div class=\"content\">\n            <table class=\"table\">\n              <tr><td>Position:</td><td style=\"color: #111827; font-weight: 500;\">${appData.jobTitle}</td></tr>\n              <tr><td>Company:</td><td style=\"color: #111827; font-weight: 500;\">${appData.company}</td></tr>\n              <tr><td>Submitted:</td><td style=\"color: #111827;\">${appData.submittedAt.toLocaleDateString()} at ${appData.submittedAt.toLocaleTimeString()}</td></tr>\n              <tr><td>Application Type:</td><td><span style=\"background-color: ${appTypeBg}; color: ${appTypeColor}; padding: 2px 8px; border-radius: 12px; font-size: 14px;\">${appType}</span></td></tr>\n              <tr><td>Match Score:</td><td style=\"color: #059669; font-weight: 600;\">${appData.relevancyScore}%</td></tr>\n            </table>\n            \n            <div class=\"details\">\n              <h3 style=\"color: #111827; margin: 0 0 15px;\">üìã Application Details</h3>\n              <div>‚úÖ Cover Letter: ${appData.coverLetterUsed ? 'Included' : 'Not included'}</div>\n              <div>‚úÖ Resume: ${appData.resumeTailored ? 'Tailored for this position' : 'Standard version'}</div>\n              <div>‚úÖ Application ID: ${appData.applicationId}</div>\n            </div>\n            \n            <div style=\"text-align: center; margin: 30px 0;\">\n              <a href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/applications/${appData.applicationId}\" class=\"button\">Track Application</a>\n              <a href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/dashboard\" class=\"button\" style=\"background-color: #059669;\">View Dashboard</a>\n            </div>\n          </div>\n          \n          <div class=\"footer\">\n            üöÄ Next Steps: We'll monitor your application progress and send follow-up reminders.<br>\n            <a href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/settings/automation\" style=\"color: #2563eb;\">Manage automation settings</a>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n  }\n\n  private generateFallbackFollowUpReminderEmail(userName: string, followUpData: FollowUpReminderData): string {\n    const daysSinceApplication = Math.floor((new Date().getTime() - followUpData.appliedDate.getTime()) / (1000 * 60 * 60 * 24));\n    \n    const suggestedMessageHtml = followUpData.suggestedMessage \n      ? `<div style=\"background-color: #f8fafc; padding: 20px; margin: 20px 0; border-radius: 6px; border-left: 4px solid #2563eb;\">\n           <h3 style=\"color: #111827; margin: 0 0 15px;\">üí° Suggested Follow-up Message</h3>\n           <div style=\"background-color: #ffffff; padding: 15px; border-radius: 4px;\">${followUpData.suggestedMessage.replace(/\\n/g, '<br>')}</div>\n         </div>`\n      : '';\n\n    return `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <title>Follow-up Reminder</title>\n        <style>\n          body { font-family: Inter, Arial, sans-serif; line-height: 1.6; color: #374151; margin: 0; padding: 20px; background-color: #f9fafb; }\n          .container { max-width: 600px; margin: 0 auto; background-color: #ffffff; border-radius: 8px; overflow: hidden; }\n          .header { background-color: #ffffff; padding: 40px 20px; text-align: center; }\n          .content { padding: 20px; }\n          .table { width: 100%; border-collapse: collapse; }\n          .table td { padding: 15px 0; border-bottom: 1px solid #e5e7eb; }\n          .table td:first-child { font-weight: 600; color: #374151; width: 30%; }\n          .tip { background-color: #fef3c7; padding: 15px; margin: 20px 0; border-radius: 6px; text-align: center; color: #92400e; }\n          .button { display: inline-block; background-color: #2563eb; color: #ffffff; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 10px 5px; }\n          .footer { background-color: #f9fafb; padding: 30px 20px; text-align: center; font-size: 14px; color: #6b7280; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <h1 style=\"font-size: 24px; font-weight: 600; color: #111827; margin: 0;\">üì¨ Follow-up Reminder</h1>\n            <p style=\"font-size: 18px; color: #6b7280; margin: 10px 0 0;\">Hi ${userName}, it's time to follow up on your application</p>\n          </div>\n          \n          <div class=\"content\">\n            <table class=\"table\">\n              <tr><td>Position:</td><td style=\"color: #111827; font-weight: 500;\">${followUpData.jobTitle}</td></tr>\n              <tr><td>Company:</td><td style=\"color: #111827; font-weight: 500;\">${followUpData.company}</td></tr>\n              <tr><td>Applied:</td><td style=\"color: #111827;\">${followUpData.appliedDate.toLocaleDateString()} (${daysSinceApplication} days ago)</td></tr>\n              <tr><td>Follow-up Type:</td><td style=\"color: #111827; text-transform: capitalize;\">${followUpData.followUpType.replace('_', ' ')} Follow-up</td></tr>\n            </table>\n            \n            ${suggestedMessageHtml}\n            \n            <div style=\"text-align: center; margin: 30px 0;\">\n              <a href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/applications/${followUpData.applicationId}/follow-up\" class=\"button\">Send Follow-up</a>\n              <a href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/applications/${followUpData.applicationId}\" class=\"button\" style=\"background-color: #059669;\">View Application</a>\n            </div>\n            \n            <div class=\"tip\">\n              üí° <strong>Pro Tip:</strong> Following up shows enthusiasm and keeps you top-of-mind with hiring managers.\n              Most candidates don't follow up, so this gives you a competitive advantage!\n            </div>\n          </div>\n          \n          <div class=\"footer\">\n            This reminder was automatically generated based on your application timeline.<br>\n            <a href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/settings/follow-up\" style=\"color: #2563eb;\">Manage follow-up settings</a>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n  }\n\n  private generateFallbackDailySummaryEmail(userName: string, summaryData: DailySummaryData): string {\n    const topJobsHtml = summaryData.topJobs.length > 0 \n      ? `<div style=\"background-color: #f8fafc; padding: 20px; margin: 20px 0; border-radius: 6px;\">\n           <h3 style=\"color: #111827; margin: 0 0 20px;\">üéØ Top Job Matches</h3>\n           ${summaryData.topJobs.slice(0, 3).map(job => `\n             <div style=\"border-bottom: 1px solid #e5e7eb; padding: 15px 0; margin-bottom: 15px;\">\n               <div style=\"font-weight: 600; color: #111827; margin-bottom: 5px;\">${job.jobTitle}</div>\n               <div style=\"color: #6b7280; margin-bottom: 5px;\">${job.company} ‚Ä¢ ${job.location}</div>\n               <div>\n                 <span style=\"background-color: #ecfccb; color: #365314; padding: 2px 8px; border-radius: 12px; font-size: 12px; margin-right: 10px;\">${job.relevancyScore}% match</span>\n                 <span style=\"background-color: #dbeafe; color: #1e40af; padding: 2px 8px; border-radius: 12px; font-size: 12px;\">${job.portal}</span>\n               </div>\n             </div>\n           `).join('')}\n         </div>`\n      : '';\n\n    return `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <title>Daily Job Search Summary</title>\n        <style>\n          body { font-family: Inter, Arial, sans-serif; line-height: 1.6; color: #374151; margin: 0; padding: 20px; background-color: #f9fafb; }\n          .container { max-width: 600px; margin: 0 auto; background-color: #ffffff; border-radius: 8px; overflow: hidden; }\n          .header { background-color: #ffffff; padding: 40px 20px; text-align: center; }\n          .content { padding: 20px; }\n          .stats { display: flex; justify-content: space-around; margin: 30px 0; }\n          .stat { text-align: center; flex: 1; }\n          .stat-number { font-size: 32px; font-weight: 700; margin-bottom: 5px; }\n          .stat-label { font-size: 14px; color: #6b7280; }\n          .button { display: inline-block; background-color: #2563eb; color: #ffffff; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 10px 5px; }\n          .footer { background-color: #f9fafb; padding: 30px 20px; text-align: center; font-size: 14px; color: #6b7280; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <h1 style=\"font-size: 24px; font-weight: 600; color: #111827; margin: 0;\">üìä Daily Job Search Summary</h1>\n            <p style=\"font-size: 18px; color: #6b7280; margin: 10px 0 0;\">Hi ${userName}, here's your activity for ${summaryData.date.toLocaleDateString()}</p>\n          </div>\n          \n          <div class=\"content\">\n            <div class=\"stats\">\n              <div class=\"stat\">\n                <div class=\"stat-number\" style=\"color: #2563eb;\">${summaryData.jobsFound}</div>\n                <div class=\"stat-label\">Jobs Found</div>\n              </div>\n              <div class=\"stat\">\n                <div class=\"stat-number\" style=\"color: #059669;\">${summaryData.applicationsSubmitted}</div>\n                <div class=\"stat-label\">Applications</div>\n              </div>\n              <div class=\"stat\">\n                <div class=\"stat-number\" style=\"color: #dc2626;\">${summaryData.followUpsSent}</div>\n                <div class=\"stat-label\">Follow-ups</div>\n              </div>\n              <div class=\"stat\">\n                <div class=\"stat-number\" style=\"color: #7c3aed;\">${summaryData.upcomingFollowUps}</div>\n                <div class=\"stat-label\">Upcoming</div>\n              </div>\n            </div>\n            \n            ${topJobsHtml}\n            \n            <div style=\"text-align: center; margin: 30px 0;\">\n              <a href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/dashboard\" class=\"button\">View Full Dashboard</a>\n              <a href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/jobs\" class=\"button\" style=\"background-color: #059669;\">Browse All Jobs</a>\n            </div>\n          </div>\n          \n          <div class=\"footer\">\n            Keep up the great work! Consistency is key to a successful job search.<br>\n            <a href=\"${process.env.NEXTAUTH_URL || 'https://prepbettr.com'}/settings/notifications\" style=\"color: #2563eb;\">Manage notification preferences</a>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n  }\n\n  /**\n   * Get notification events for a user\n   */\n  async getNotificationHistory(\n    userId: string,\n    options?: {\n      limit?: number;\n      type?: NotificationType;\n      status?: NotificationEvent['status'];\n      startDate?: Date;\n      endDate?: Date;\n    }\n  ): Promise<NotificationEvent[]> {\n    try {\n      const limit = options?.limit || 50;\n      const events = await azureCosmosService.getUserNotificationEvents(userId, limit);\n      \n      // Apply additional filters\n      let filteredEvents = events;\n      \n      if (options?.type) {\n        filteredEvents = filteredEvents.filter(event => event.type === options.type);\n      }\n      \n      if (options?.status) {\n        filteredEvents = filteredEvents.filter(event => event.status === options.status);\n      }\n      \n      if (options?.startDate) {\n        filteredEvents = filteredEvents.filter(event => event.createdAt >= options.startDate!);\n      }\n      \n      if (options?.endDate) {\n        filteredEvents = filteredEvents.filter(event => event.createdAt <= options.endDate!);\n      }\n      \n      return filteredEvents.map(event => ({\n        id: event.id,\n        userId: event.userId,\n        type: event.type as NotificationType,\n        channel: event.channel as NotificationChannel,\n        recipient: event.recipient,\n        subject: event.subject,\n        content: event.content,\n        templateUsed: event.templateUsed,\n        metadata: event.metadata,\n        status: event.status as NotificationEvent['status'],\n        createdAt: event.createdAt,\n        sentAt: event.sentAt,\n        updatedAt: event.updatedAt,\n        error: event.error,\n        messageId: event.messageId,\n        jobId: event.jobId,\n        applicationId: event.applicationId\n      }));\n\n    } catch (error) {\n      console.error('Error getting notification history:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Get notification statistics\n   */\n  async getNotificationStats(userId: string, days: number = 30): Promise<{\n    total: number;\n    sent: number;\n    failed: number;\n    byType: Record<NotificationType, number>;\n  }> {\n    try {\n      const startDate = new Date();\n      startDate.setDate(startDate.getDate() - days);\n\n      // Get recent notifications using Azure Cosmos DB query\n      const events = await azureCosmosService.queryDocuments<any>(\n        'notificationEvents',\n        'SELECT * FROM c WHERE c.userId = @userId AND c.createdAt >= @startDate',\n        [\n          { name: '@userId', value: userId },\n          { name: '@startDate', value: startDate }\n        ]\n      );\n\n      const stats = {\n        total: 0,\n        sent: 0,\n        failed: 0,\n        byType: {} as Record<NotificationType, number>\n      };\n\n      events.forEach((event: any) => {\n        stats.total++;\n\n        if (event.status === 'sent' || event.status === 'delivered') {\n          stats.sent++;\n        } else if (event.status === 'failed') {\n          stats.failed++;\n        }\n\n        const eventType = event.type as NotificationType;\n        stats.byType[eventType] = (stats.byType[eventType] || 0) + 1;\n      });\n\n      return stats;\n\n    } catch (error) {\n      console.error('Error getting notification stats:', error);\n      return {\n        total: 0,\n        sent: 0,\n        failed: 0,\n        byType: {} as Record<NotificationType, number>\n      };\n    }\n  }\n\n  /**\n   * Clean up old notification events\n   */\n  async cleanupOldEvents(daysToKeep: number = 90): Promise<{ deleted: number }> {\n    try {\n      const cutoffDate = new Date();\n      cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);\n\n      // Get old events using Azure Cosmos DB query\n      const oldEvents = await azureCosmosService.queryDocuments<any>(\n        'notificationEvents',\n        'SELECT c.id, c.userId FROM c WHERE c.createdAt < @cutoffDate',\n        [{ name: '@cutoffDate', value: cutoffDate }]\n      );\n\n      if (oldEvents.length === 0) {\n        return { deleted: 0 };\n      }\n\n      // Process in smaller batches to avoid limits\n      const batchSize = 25;\n      let totalDeleted = 0;\n      \n      for (let i = 0; i < oldEvents.length; i += batchSize) {\n        const batch = oldEvents.slice(i, i + batchSize);\n        const deletePromises = batch.map(event => \n          azureCosmosService.deleteDocument('notificationEvents', event.id, event.userId)\n        );\n        \n        await Promise.all(deletePromises);\n        totalDeleted += batch.length;\n      }\n\n      console.log(`Cleaned up ${totalDeleted} old notification events`);\n\n      return { deleted: totalDeleted };\n\n    } catch (error) {\n      console.error('Error cleaning up old notification events:', error);\n      return { deleted: 0 };\n    }\n  }\n}\n\n// Export singleton instance\nexport const notificationService = new NotificationService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/services/question-bank-service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":234,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":234,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7482,7485],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7482,7485],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":249,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":249,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7856,7859],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7856,7859],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":268,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":268,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8310,8313],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8310,8313],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'prompt' is assigned a value but never used.","line":395,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":395,"endColumn":19}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Question Bank Service\n * \n * Centralized service for managing interview questions with caching support.\n * Consolidates mock question data and provides APIs for dynamic question generation.\n */\n\nimport { logServerError } from '@/lib/errors';\nimport { azureAI } from '@/lib/ai';\nimport type { AzureAIResponse } from '@/lib/ai';\n\n// ===== INTERFACES =====\n\nexport interface QuestionBankQuestion {\n  id: string;\n  content: string;\n  type: 'technical' | 'behavioral' | 'mixed';\n  difficulty: 'easy' | 'medium' | 'hard';\n  techStack: string[];\n  category: string;\n  estimatedTime?: number; // minutes\n  metadata?: {\n    tags: string[];\n    source: 'generated' | 'curated' | 'community';\n    version: string;\n    lastUpdated: Date;\n  };\n}\n\nexport interface InterviewTemplate {\n  id: string;\n  role: string;\n  type: 'technical' | 'behavioral' | 'mixed';\n  techStack: string[];\n  questions: string[]; // Question IDs or content\n  difficulty: 'easy' | 'medium' | 'hard';\n  estimatedDuration: number; // minutes\n  description?: string;\n  metadata?: {\n    popularity: number;\n    successRate: number;\n    lastUsed: Date;\n  };\n}\n\nexport interface QuestionBankOptions {\n  role?: string;\n  type?: 'technical' | 'behavioral' | 'mixed';\n  difficulty?: 'easy' | 'medium' | 'hard';\n  techStack?: string[];\n  maxQuestions?: number;\n  excludeIds?: string[];\n  includeGenerated?: boolean;\n}\n\nexport interface CacheConfig {\n  enabled: boolean;\n  ttl: number; // seconds\n  maxSize: number;\n  redisUrl?: string; // Optional Redis for distributed caching\n}\n\n// ===== MOCK DATA =====\n\nconst MOCK_INTERVIEW_TEMPLATES: InterviewTemplate[] = [\n  {\n    id: 'frontend-dev-1',\n    role: 'Frontend Developer',\n    type: 'technical',\n    techStack: ['React', 'TypeScript', 'Next.js', 'Tailwind CSS'],\n    questions: [\n      'Explain the concept of React hooks and provide examples',\n      'What is the virtual DOM and how does it work?',\n      'How do you handle state management in React applications?',\n      'Describe the differences between TypeScript and JavaScript',\n      'How do you implement responsive design with Tailwind CSS?'\n    ],\n    difficulty: 'medium',\n    estimatedDuration: 45,\n    description: 'Frontend development interview focusing on React ecosystem'\n  },\n  {\n    id: 'backend-dev-1',\n    role: 'Backend Developer',\n    type: 'technical',\n    techStack: ['Node.js', 'Express', 'MongoDB', 'JavaScript'],\n    questions: [\n      'Explain RESTful API design principles',\n      'How do you handle database relationships in MongoDB?',\n      'What are middleware functions in Express.js?',\n      'How do you implement authentication and authorization?',\n      'Describe your approach to error handling in APIs'\n    ],\n    difficulty: 'medium',\n    estimatedDuration: 50,\n    description: 'Backend development interview focusing on Node.js stack'\n  },\n  {\n    id: 'fullstack-dev-1',\n    role: 'Full Stack Developer',\n    type: 'mixed',\n    techStack: ['Python', 'Django', 'PostgreSQL', 'Redis'],\n    questions: [\n      'Describe your experience with full-stack development',\n      'How do you optimize database queries?',\n      'What is your approach to handling user authentication?',\n      'How do you implement caching strategies?',\n      'Describe a challenging full-stack project you built'\n    ],\n    difficulty: 'medium',\n    estimatedDuration: 60,\n    description: 'Full-stack development interview with Python/Django focus'\n  },\n  {\n    id: 'software-eng-behavioral',\n    role: 'Software Engineer',\n    type: 'behavioral',\n    techStack: ['Vue.js', 'Nuxt.js', 'Vuex', 'SCSS'],\n    questions: [\n      'Tell me about a challenging project you worked on',\n      'How do you handle conflicts in a team environment?',\n      'Describe a time when you had to learn a new technology quickly',\n      'How do you prioritize tasks when everything seems urgent?',\n      'Tell me about a mistake you made and how you handled it'\n    ],\n    difficulty: 'medium',\n    estimatedDuration: 40,\n    description: 'Behavioral interview for software engineering roles'\n  },\n  {\n    id: 'devops-eng-1',\n    role: 'DevOps Engineer',\n    type: 'technical',\n    techStack: ['Docker', 'Kubernetes', 'AWS', 'Jenkins'],\n    questions: [\n      'Explain containerization and its benefits',\n      'How do you implement CI/CD pipelines?',\n      'What is Infrastructure as Code?',\n      'How do you monitor and troubleshoot production systems?',\n      'Describe your experience with cloud platforms'\n    ],\n    difficulty: 'hard',\n    estimatedDuration: 55,\n    description: 'DevOps engineering interview focusing on containerization and CI/CD'\n  },\n  {\n    id: 'data-scientist-1',\n    role: 'Data Scientist',\n    type: 'technical',\n    techStack: ['Python', 'TensorFlow', 'Pandas', 'SQL'],\n    questions: [\n      'Explain the difference between supervised and unsupervised learning',\n      'How do you handle missing data in datasets?',\n      'What is feature engineering and why is it important?',\n      'Describe your experience with neural networks',\n      'How do you validate and test machine learning models?'\n    ],\n    difficulty: 'hard',\n    estimatedDuration: 60,\n    description: 'Data science interview covering machine learning fundamentals'\n  },\n  {\n    id: 'mobile-dev-1',\n    role: 'Mobile Developer',\n    type: 'mixed',\n    techStack: ['React Native', 'JavaScript', 'Firebase', 'Redux'],\n    questions: [\n      'What are the advantages of React Native over native development?',\n      'How do you handle offline functionality in mobile apps?',\n      'Describe your experience with mobile app deployment',\n      'How do you optimize mobile app performance?',\n      'What are your strategies for handling different screen sizes?'\n    ],\n    difficulty: 'medium',\n    estimatedDuration: 45,\n    description: 'Mobile development interview with React Native focus'\n  },\n  {\n    id: 'qa-engineer-1',\n    role: 'QA Engineer',\n    type: 'technical',\n    techStack: ['Selenium', 'Jest', 'Cypress', 'JavaScript'],\n    questions: [\n      'What is the difference between unit testing and integration testing?',\n      'How do you design test cases for a new feature?',\n      'Explain automation testing strategies you have used',\n      'How do you handle flaky tests in your test suite?',\n      'Describe your approach to performance testing'\n    ],\n    difficulty: 'medium',\n    estimatedDuration: 40,\n    description: 'Quality assurance interview focusing on testing strategies'\n  }\n];\n\nconst CURATED_QUESTIONS: QuestionBankQuestion[] = [\n  // Technical Questions\n  {\n    id: 'tech-react-hooks',\n    content: 'Explain the concept of React hooks and provide examples',\n    type: 'technical',\n    difficulty: 'medium',\n    techStack: ['React', 'JavaScript'],\n    category: 'frontend',\n    estimatedTime: 5,\n    metadata: {\n      tags: ['hooks', 'state-management', 'functional-components'],\n      source: 'curated',\n      version: '1.0',\n      lastUpdated: new Date()\n    }\n  },\n  {\n    id: 'tech-virtual-dom',\n    content: 'What is the virtual DOM and how does it work?',\n    type: 'technical',\n    difficulty: 'medium',\n    techStack: ['React', 'JavaScript'],\n    category: 'frontend',\n    estimatedTime: 4,\n    metadata: {\n      tags: ['virtual-dom', 'performance', 'react-internals'],\n      source: 'curated',\n      version: '1.0',\n      lastUpdated: new Date()\n    }\n  },\n  // Add more curated questions...\n];\n\n// ===== SERVICE CLASS =====\n\nclass QuestionBankService {\n  private cache: Map<string, { data: any; timestamp: number; ttl: number }> = new Map();\n  private cacheConfig: CacheConfig = {\n    enabled: true,\n    ttl: 3600, // 1 hour\n    maxSize: 1000\n  };\n\n  constructor(config?: Partial<CacheConfig>) {\n    if (config) {\n      this.cacheConfig = { ...this.cacheConfig, ...config };\n    }\n  }\n\n  // ===== CACHE METHODS =====\n\n  private getCacheKey(method: string, params: any): string {\n    return `qb:${method}:${JSON.stringify(params)}`;\n  }\n\n  private getFromCache<T>(key: string): T | null {\n    if (!this.cacheConfig.enabled) return null;\n\n    const cached = this.cache.get(key);\n    if (!cached) return null;\n\n    const now = Date.now();\n    if (now - cached.timestamp > cached.ttl * 1000) {\n      this.cache.delete(key);\n      return null;\n    }\n\n    return cached.data as T;\n  }\n\n  private setCache(key: string, data: any, ttl?: number): void {\n    if (!this.cacheConfig.enabled) return;\n\n    // Clean up if cache is too large\n    if (this.cache.size >= this.cacheConfig.maxSize) {\n      const oldestKey = this.cache.keys().next().value;\n      if (oldestKey) {\n        this.cache.delete(oldestKey);\n      }\n    }\n\n    this.cache.set(key, {\n      data,\n      timestamp: Date.now(),\n      ttl: ttl || this.cacheConfig.ttl\n    });\n  }\n\n  public invalidateCache(pattern?: string): void {\n    if (pattern) {\n      const keys = Array.from(this.cache.keys()).filter(key => key.includes(pattern));\n      keys.forEach(key => this.cache.delete(key));\n      console.log(`üóëÔ∏è Invalidated ${keys.length} cache entries matching pattern: ${pattern}`);\n    } else {\n      this.cache.clear();\n      console.log('üóëÔ∏è Invalidated entire question bank cache');\n    }\n  }\n\n  // ===== CORE METHODS =====\n\n  /**\n   * Get interview template by ID or generate one based on criteria\n   */\n  async getInterviewTemplate(\n    templateId: string,\n    options?: QuestionBankOptions\n  ): Promise<InterviewTemplate | null> {\n    const cacheKey = this.getCacheKey('getInterviewTemplate', { templateId, options });\n    const cached = this.getFromCache<InterviewTemplate>(cacheKey);\n    if (cached) return cached;\n\n    try {\n      // First try to find existing template\n      const template = MOCK_INTERVIEW_TEMPLATES.find(t => t.id === templateId);\n      \n      if (template) {\n        this.setCache(cacheKey, template);\n        return template;\n      }\n\n      // If not found and we have enough context, generate one\n      if (options?.role) {\n        const generatedTemplate = await this.generateInterviewTemplate(options);\n        this.setCache(cacheKey, generatedTemplate);\n        return generatedTemplate;\n      }\n\n      return null;\n    } catch (error) {\n      console.error('‚ùå Error getting interview template:', error);\n      logServerError(error as Error, {\n        service: 'question-bank',\n        action: 'getInterviewTemplate'\n      });\n      return null;\n    }\n  }\n\n  /**\n   * Get questions based on criteria\n   */\n  async getQuestions(options: QuestionBankOptions = {}): Promise<QuestionBankQuestion[]> {\n    const cacheKey = this.getCacheKey('getQuestions', options);\n    const cached = this.getFromCache<QuestionBankQuestion[]>(cacheKey);\n    if (cached) return cached;\n\n    try {\n      let questions = [...CURATED_QUESTIONS];\n\n      // Filter by criteria\n      if (options.type) {\n        questions = questions.filter(q => q.type === options.type);\n      }\n      if (options.difficulty) {\n        questions = questions.filter(q => q.difficulty === options.difficulty);\n      }\n      if (options.techStack) {\n        questions = questions.filter(q => \n          q.techStack.some(tech => options.techStack!.includes(tech))\n        );\n      }\n      if (options.excludeIds) {\n        questions = questions.filter(q => !options.excludeIds!.includes(q.id));\n      }\n\n      // Generate additional questions if needed and enabled\n      if (options.includeGenerated && questions.length < (options.maxQuestions || 10)) {\n        const additionalQuestions = await this.generateQuestions({\n          ...options,\n          maxQuestions: (options.maxQuestions || 10) - questions.length\n        });\n        questions.push(...additionalQuestions);\n      }\n\n      // Apply max limit\n      if (options.maxQuestions) {\n        questions = questions.slice(0, options.maxQuestions);\n      }\n\n      this.setCache(cacheKey, questions);\n      return questions;\n    } catch (error) {\n      console.error('‚ùå Error getting questions:', error);\n      logServerError(error as Error, {\n        service: 'question-bank',\n        action: 'getQuestions'\n      });\n      return CURATED_QUESTIONS.slice(0, options.maxQuestions || 10);\n    }\n  }\n\n  /**\n   * Generate new questions using AI\n   */\n  private async generateQuestions(options: QuestionBankOptions): Promise<QuestionBankQuestion[]> {\n    try {\n      const prompt = this.buildQuestionGenerationPrompt(options);\n      const response: AzureAIResponse<string[]> = await azureAI.generateQuestions(\n        { \n          name: 'Candidate',\n          experience: options.role || 'Software Developer',\n          education: 'Computer Science',\n          skills: (options.techStack || []).join(', ')\n        },\n        {\n          maxQuestions: options.maxQuestions || 5,\n          difficulty: options.difficulty,\n          interviewType: options.type\n        }\n      );\n\n      if (!response.success || !response.data) {\n        throw new Error(response.error || 'Failed to generate questions');\n      }\n\n      return response.data.map((content: string, index: number) => ({\n        id: `generated-${Date.now()}-${index}`,\n        content,\n        type: options.type || 'mixed',\n        difficulty: options.difficulty || 'medium',\n        techStack: options.techStack || [],\n        category: options.role?.toLowerCase().replace(' ', '-') || 'general',\n        estimatedTime: 5,\n        metadata: {\n          tags: ['generated', 'ai'],\n          source: 'generated' as const,\n          version: '1.0',\n          lastUpdated: new Date()\n        }\n      }));\n    } catch (error) {\n      console.error('‚ùå Error generating questions:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Generate interview template using AI\n   */\n  private async generateInterviewTemplate(options: QuestionBankOptions): Promise<InterviewTemplate> {\n    const questions = await this.generateQuestions({\n      ...options,\n      maxQuestions: 5,\n      includeGenerated: true\n    });\n\n    return {\n      id: `generated-${Date.now()}`,\n      role: options.role || 'Software Developer',\n      type: options.type || 'mixed',\n      techStack: options.techStack || [],\n      questions: questions.map(q => q.content),\n      difficulty: options.difficulty || 'medium',\n      estimatedDuration: questions.length * 8, // 8 minutes per question\n      description: `Generated interview template for ${options.role || 'Software Developer'}`,\n      metadata: {\n        popularity: 0,\n        successRate: 0,\n        lastUsed: new Date()\n      }\n    };\n  }\n\n  /**\n   * Get all available interview templates\n   */\n  getAllTemplates(): InterviewTemplate[] {\n    return [...MOCK_INTERVIEW_TEMPLATES];\n  }\n\n  /**\n   * Get templates by role\n   */\n  getTemplatesByRole(role: string): InterviewTemplate[] {\n    return MOCK_INTERVIEW_TEMPLATES.filter(t => \n      t.role.toLowerCase().includes(role.toLowerCase())\n    );\n  }\n\n  /**\n   * Build prompt for question generation\n   */\n  private buildQuestionGenerationPrompt(options: QuestionBankOptions): string {\n    const parts = [\n      `Generate ${options.maxQuestions || 5} interview questions for a ${options.role || 'Software Developer'} position.`\n    ];\n\n    if (options.type) {\n      parts.push(`Focus on ${options.type} questions.`);\n    }\n\n    if (options.difficulty) {\n      parts.push(`Questions should be ${options.difficulty} difficulty level.`);\n    }\n\n    if (options.techStack && options.techStack.length > 0) {\n      parts.push(`Include questions about: ${options.techStack.join(', ')}.`);\n    }\n\n    parts.push('Make questions practical and relevant to real-world scenarios.');\n\n    return parts.join(' ');\n  }\n\n  /**\n   * Get cache statistics\n   */\n  getCacheStats() {\n    return {\n      size: this.cache.size,\n      maxSize: this.cacheConfig.maxSize,\n      enabled: this.cacheConfig.enabled,\n      ttl: this.cacheConfig.ttl\n    };\n  }\n}\n\n// ===== EXPORTS =====\n\n// Singleton instance\nexport const questionBankService = new QuestionBankService({\n  enabled: true,\n  ttl: 3600, // 1 hour cache\n  maxSize: 500 // Reasonable size for questions cache\n});\n\n// Export templates for backward compatibility\nexport { MOCK_INTERVIEW_TEMPLATES };\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/services/resume-export-service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'mammoth' is defined but never used.","line":2,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'templateConfig' is assigned a value but never used.","line":94,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":94,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'templateConfig' is assigned a value but never used.","line":252,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":252,"endColumn":25}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import jsPDF from 'jspdf';\nimport mammoth from 'mammoth';\n\nexport interface ResumeData {\n  personalInfo: {\n    name: string;\n    email: string;\n    phone: string;\n    location: string;\n    website?: string;\n    linkedin?: string;\n    github?: string;\n  };\n  summary: string;\n  experience: Array<{\n    title: string;\n    company: string;\n    location: string;\n    startDate: string;\n    endDate: string;\n    description: string[];\n  }>;\n  education: Array<{\n    degree: string;\n    institution: string;\n    location: string;\n    graduationDate: string;\n    gpa?: string;\n  }>;\n  skills: {\n    technical: string[];\n    soft: string[];\n  };\n  projects: Array<{\n    name: string;\n    description: string;\n    technologies: string[];\n    link?: string;\n  }>;\n  certifications: Array<{\n    name: string;\n    issuer: string;\n    date: string;\n    link?: string;\n  }>;\n}\n\nexport interface ATSTemplate {\n  name: string;\n  description: string;\n  keywords: string[];\n  format: 'pdf' | 'docx';\n}\n\nexport const ATS_TEMPLATES: Record<string, ATSTemplate> = {\n  classic: {\n    name: 'Classic ATS',\n    description: 'Clean, professional format optimized for ATS parsing',\n    keywords: ['professional', 'clean', 'ats-friendly', 'traditional'],\n    format: 'pdf'\n  },\n  modern: {\n    name: 'Modern ATS',\n    description: 'Contemporary design with ATS compatibility',\n    keywords: ['modern', 'contemporary', 'professional', 'clean'],\n    format: 'pdf'\n  },\n  technical: {\n    name: 'Technical ATS',\n    description: 'Optimized for technical roles with emphasis on skills',\n    keywords: ['technical', 'engineering', 'developer', 'skills-focused'],\n    format: 'pdf'\n  },\n  minimal: {\n    name: 'Minimal ATS',\n    description: 'Simple, distraction-free format for maximum ATS compatibility',\n    keywords: ['minimal', 'simple', 'clean', 'ats-optimized'],\n    format: 'pdf'\n  }\n};\n\nexport class ResumeExportService {\n  private static instance: ResumeExportService;\n\n  public static getInstance(): ResumeExportService {\n    if (!ResumeExportService.instance) {\n      ResumeExportService.instance = new ResumeExportService();\n    }\n    return ResumeExportService.instance;\n  }\n\n  async generatePDF(resumeData: ResumeData, template: string = 'classic'): Promise<Blob> {\n    const pdf = new jsPDF();\n    const templateConfig = ATS_TEMPLATES[template] || ATS_TEMPLATES.classic;\n\n    // Set font for better ATS compatibility\n    pdf.setFont('helvetica');\n    \n    let yPosition = 20;\n    const lineHeight = 6;\n    const pageHeight = pdf.internal.pageSize.height;\n    const margin = 20;\n\n    // Helper function to add text with automatic page breaks\n    const addText = (text: string, fontSize: number = 10, isBold: boolean = false) => {\n      if (yPosition > pageHeight - 30) {\n        pdf.addPage();\n        yPosition = 20;\n      }\n\n      pdf.setFontSize(fontSize);\n      pdf.setFont('helvetica', isBold ? 'bold' : 'normal');\n      \n      const lines = pdf.splitTextToSize(text, pdf.internal.pageSize.width - (margin * 2));\n      \n      for (const line of lines) {\n        if (yPosition > pageHeight - 30) {\n          pdf.addPage();\n          yPosition = 20;\n        }\n        pdf.text(line, margin, yPosition);\n        yPosition += lineHeight;\n      }\n    };\n\n    const addSection = (title: string, content: string) => {\n      yPosition += 5; // Extra space before section\n      addText(title.toUpperCase(), 12, true);\n      yPosition += 2;\n      \n      // Add underline for section headers\n      pdf.setDrawColor(0);\n      pdf.line(margin, yPosition, pdf.internal.pageSize.width - margin, yPosition);\n      yPosition += 5;\n      \n      addText(content, 10, false);\n      yPosition += 5;\n    };\n\n    try {\n      // Header - Personal Information\n      addText(resumeData.personalInfo.name.toUpperCase(), 16, true);\n      yPosition += 2;\n\n      const contactInfo = [\n        resumeData.personalInfo.email,\n        resumeData.personalInfo.phone,\n        resumeData.personalInfo.location,\n        resumeData.personalInfo.website,\n        resumeData.personalInfo.linkedin,\n        resumeData.personalInfo.github\n      ].filter(Boolean).join(' | ');\n\n      addText(contactInfo, 10, false);\n\n      // Professional Summary\n      if (resumeData.summary) {\n        addSection('Professional Summary', resumeData.summary);\n      }\n\n      // Experience\n      if (resumeData.experience.length > 0) {\n        yPosition += 5;\n        addText('PROFESSIONAL EXPERIENCE', 12, true);\n        yPosition += 2;\n        pdf.line(margin, yPosition, pdf.internal.pageSize.width - margin, yPosition);\n        yPosition += 5;\n\n        resumeData.experience.forEach((exp) => {\n          addText(`${exp.title} | ${exp.company}`, 11, true);\n          addText(`${exp.location} | ${exp.startDate} - ${exp.endDate}`, 9, false);\n          \n          exp.description.forEach((desc) => {\n            addText(`‚Ä¢ ${desc}`, 10, false);\n          });\n          yPosition += 3;\n        });\n      }\n\n      // Education\n      if (resumeData.education.length > 0) {\n        addSection('Education', '');\n        resumeData.education.forEach((edu) => {\n          const eduText = `${edu.degree} | ${edu.institution} | ${edu.location} | ${edu.graduationDate}${edu.gpa ? ` | GPA: ${edu.gpa}` : ''}`;\n          addText(eduText, 10, false);\n        });\n      }\n\n      // Technical Skills\n      if (resumeData.skills.technical.length > 0) {\n        addSection('Technical Skills', resumeData.skills.technical.join(' ‚Ä¢ '));\n      }\n\n      // Soft Skills\n      if (resumeData.skills.soft.length > 0) {\n        addSection('Core Competencies', resumeData.skills.soft.join(' ‚Ä¢ '));\n      }\n\n      // Projects\n      if (resumeData.projects.length > 0) {\n        yPosition += 5;\n        addText('PROJECTS', 12, true);\n        yPosition += 2;\n        pdf.line(margin, yPosition, pdf.internal.pageSize.width - margin, yPosition);\n        yPosition += 5;\n\n        resumeData.projects.forEach((project) => {\n          addText(project.name, 11, true);\n          addText(project.description, 10, false);\n          addText(`Technologies: ${project.technologies.join(', ')}`, 9, false);\n          if (project.link) {\n            addText(`Link: ${project.link}`, 9, false);\n          }\n          yPosition += 3;\n        });\n      }\n\n      // Certifications\n      if (resumeData.certifications.length > 0) {\n        addSection('Certifications', '');\n        resumeData.certifications.forEach((cert) => {\n          const certText = `${cert.name} | ${cert.issuer} | ${cert.date}${cert.link ? ` | ${cert.link}` : ''}`;\n          addText(certText, 10, false);\n        });\n      }\n\n      return new Blob([pdf.output('blob')], { type: 'application/pdf' });\n    } catch (error) {\n      console.error('Error generating PDF:', error);\n      throw new Error('Failed to generate PDF resume');\n    }\n  }\n\n  async generateDOCX(resumeData: ResumeData, template: string = 'classic'): Promise<Blob> {\n    // Create HTML content for DOCX conversion\n    const htmlContent = this.generateHTMLContent(resumeData, template);\n    \n    try {\n      // Convert HTML to DOCX using mammoth (reverse process)\n      // Note: For production, consider using a dedicated library like docx or officegen\n      const docxBuffer = await this.htmlToDocx(htmlContent);\n      return new Blob([docxBuffer], { \n        type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' \n      });\n    } catch (error) {\n      console.error('Error generating DOCX:', error);\n      throw new Error('Failed to generate DOCX resume');\n    }\n  }\n\n  private generateHTMLContent(resumeData: ResumeData, template: string): string {\n    const templateConfig = ATS_TEMPLATES[template] || ATS_TEMPLATES.classic;\n    \n    return `\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <meta charset=\"utf-8\">\n          <style>\n            body { \n              font-family: 'Times New Roman', serif; \n              font-size: 12pt; \n              line-height: 1.4; \n              margin: 1in; \n              color: #000;\n            }\n            .header { text-align: center; margin-bottom: 20pt; }\n            .name { font-size: 16pt; font-weight: bold; text-transform: uppercase; }\n            .contact { font-size: 10pt; margin-top: 5pt; }\n            .section-title { \n              font-size: 12pt; \n              font-weight: bold; \n              text-transform: uppercase; \n              border-bottom: 1pt solid #000; \n              margin-top: 15pt; \n              margin-bottom: 10pt; \n            }\n            .job-title { font-weight: bold; }\n            .job-details { font-size: 10pt; font-style: italic; }\n            ul { margin: 5pt 0; padding-left: 15pt; }\n            li { margin-bottom: 3pt; }\n            .project-name { font-weight: bold; }\n          </style>\n        </head>\n        <body>\n          <div class=\"header\">\n            <div class=\"name\">${resumeData.personalInfo.name}</div>\n            <div class=\"contact\">\n              ${[\n                resumeData.personalInfo.email,\n                resumeData.personalInfo.phone,\n                resumeData.personalInfo.location,\n                resumeData.personalInfo.website,\n                resumeData.personalInfo.linkedin,\n                resumeData.personalInfo.github\n              ].filter(Boolean).join(' | ')}\n            </div>\n          </div>\n\n          ${resumeData.summary ? `\n            <div class=\"section-title\">Professional Summary</div>\n            <p>${resumeData.summary}</p>\n          ` : ''}\n\n          ${resumeData.experience.length > 0 ? `\n            <div class=\"section-title\">Professional Experience</div>\n            ${resumeData.experience.map(exp => `\n              <div style=\"margin-bottom: 15pt;\">\n                <div class=\"job-title\">${exp.title} | ${exp.company}</div>\n                <div class=\"job-details\">${exp.location} | ${exp.startDate} - ${exp.endDate}</div>\n                <ul>\n                  ${exp.description.map(desc => `<li>${desc}</li>`).join('')}\n                </ul>\n              </div>\n            `).join('')}\n          ` : ''}\n\n          ${resumeData.education.length > 0 ? `\n            <div class=\"section-title\">Education</div>\n            ${resumeData.education.map(edu => `\n              <p>${edu.degree} | ${edu.institution} | ${edu.location} | ${edu.graduationDate}${edu.gpa ? ` | GPA: ${edu.gpa}` : ''}</p>\n            `).join('')}\n          ` : ''}\n\n          ${resumeData.skills.technical.length > 0 ? `\n            <div class=\"section-title\">Technical Skills</div>\n            <p>${resumeData.skills.technical.join(' ‚Ä¢ ')}</p>\n          ` : ''}\n\n          ${resumeData.skills.soft.length > 0 ? `\n            <div class=\"section-title\">Core Competencies</div>\n            <p>${resumeData.skills.soft.join(' ‚Ä¢ ')}</p>\n          ` : ''}\n\n          ${resumeData.projects.length > 0 ? `\n            <div class=\"section-title\">Projects</div>\n            ${resumeData.projects.map(project => `\n              <div style=\"margin-bottom: 10pt;\">\n                <div class=\"project-name\">${project.name}</div>\n                <p>${project.description}</p>\n                <p><strong>Technologies:</strong> ${project.technologies.join(', ')}</p>\n                ${project.link ? `<p><strong>Link:</strong> ${project.link}</p>` : ''}\n              </div>\n            `).join('')}\n          ` : ''}\n\n          ${resumeData.certifications.length > 0 ? `\n            <div class=\"section-title\">Certifications</div>\n            ${resumeData.certifications.map(cert => `\n              <p>${cert.name} | ${cert.issuer} | ${cert.date}${cert.link ? ` | ${cert.link}` : ''}</p>\n            `).join('')}\n          ` : ''}\n        </body>\n      </html>\n    `;\n  }\n\n  private async htmlToDocx(html: string): Promise<ArrayBuffer> {\n    // This is a simplified implementation\n    // In production, use a proper HTML to DOCX converter like html-docx-js\n    const encoder = new TextEncoder();\n    const htmlBytes = encoder.encode(html);\n    \n    // Return HTML as bytes for now - in production, convert to proper DOCX format\n    return htmlBytes.buffer as ArrayBuffer;\n  }\n\n  getAvailableTemplates(): Record<string, ATSTemplate> {\n    return ATS_TEMPLATES;\n  }\n\n  validateResumeData(data: Partial<ResumeData>): { isValid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    if (!data.personalInfo?.name) {\n      errors.push('Name is required');\n    }\n\n    if (!data.personalInfo?.email) {\n      errors.push('Email is required');\n    }\n\n    if (!data.personalInfo?.phone) {\n      errors.push('Phone number is required');\n    }\n\n    if (!data.experience || data.experience.length === 0) {\n      errors.push('At least one work experience entry is required');\n    }\n\n    if (!data.education || data.education.length === 0) {\n      errors.push('At least one education entry is required');\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n}\n\nexport const resumeExportService = ResumeExportService.getInstance();\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/services/resume-processing-service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getStorageService' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'userId' is defined but never used.","line":136,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":136,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fileBuffer' is defined but never used.","line":137,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":137,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fileName' is defined but never used.","line":138,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":138,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'mimeType' is defined but never used.","line":139,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":139,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'parseError' is defined but never used.","line":257,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":257,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'profileSummary' is assigned a value but never used.","line":277,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":277,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":323,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":323,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10664,10667],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10664,10667],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":356,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":356,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11765,11768],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11765,11768],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":378,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":378,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12491,12494],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12491,12494],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":384,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":384,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12696,12699],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12696,12699],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FieldValue } from 'firebase-admin/firestore';\nimport { getAdminFirestore } from '@/lib/firebase/admin';\nimport { getStorageService, resumeStorageService } from '@/lib/storage';\nimport { StorageProvider } from '@/lib/storage/IStorageService';\nimport { azureFormRecognizer, ExtractedResumeData } from './azure-form-recognizer';\n// Firebase resume service replaced with Azure services\n// Import will be done dynamically when needed\nimport { logServerError } from '@/lib/errors';\n\nexport interface ProcessedResumeResult {\n  success: boolean;\n  data?: {\n    resumeId: string;\n    fileUrl: string;\n    sasUrl?: string;\n    extractedData: ExtractedResumeData;\n    interviewQuestions: string[];\n    storageProvider: StorageProvider;\n  };\n  error?: string;\n}\n\nexport interface ResumeProcessingOptions {\n  generateQuestions?: boolean;\n  maxQuestions?: number;\n}\n\nclass ResumeProcessingService {\n  private initialized = false;\n\n  /**\n   * Initialize the resume processing service\n   */\n  async initialize(): Promise<void> {\n    if (this.initialized) {\n      return;\n    }\n\n    try {\n      // Initialize Azure Form Recognizer (storage is initialized via the abstraction layer)\n      await azureFormRecognizer.initialize();\n\n      this.initialized = true;\n      console.log('‚úÖ Resume processing service initialized');\n    } catch (error) {\n      console.error('‚ùå Failed to initialize resume processing service:', error);\n      logServerError(error as Error, { service: 'resume-processing', action: 'initialize' });\n      // Don't throw - we can still operate with fallbacks\n      this.initialized = true;\n    }\n  }\n\n  /**\n   * Process uploaded resume: storage, extraction, and data persistence\n   */\n  async processResume(\n    userId: string,\n    fileBuffer: Buffer,\n    fileName: string,\n    mimeType: string,\n    fileSize: number,\n    options: ResumeProcessingOptions = {}\n  ): Promise<ProcessedResumeResult> {\n    try {\n      await this.initialize();\n\n      console.log(`üîÑ Processing resume for user ${userId}: ${fileName}`);\n\n      // Step 1: Delete existing resume if it exists\n      await this.deleteExistingResume(userId);\n\n      // Step 2: Upload to storage using the new abstraction layer\n      const storageResult = await resumeStorageService.uploadResume(userId, fileBuffer, fileName, mimeType);\n\n      // Step 3: Extract data from resume\n      const extractedData = await this.extractResumeData(fileBuffer, mimeType);\n\n      // Step 4: Generate interview questions if requested\n      let interviewQuestions: string[] = [];\n      if (options.generateQuestions !== false) {\n        interviewQuestions = await this.generateQuestions(extractedData, options.maxQuestions);\n      }\n\n      // Step 5: Save to Firestore profiles collection\n      const resumeId = await this.saveToFirestore(userId, {\n        fileName,\n        fileUrl: storageResult.fileUrl,\n        filePath: storageResult.filePath,\n        sasUrl: storageResult.sasUrl,\n        extractedData,\n        interviewQuestions,\n        metadata: {\n          fileSize,\n          uploadDate: new Date(),\n          lastModified: new Date(),\n          mimeType,\n          storageProvider: storageResult.provider\n        }\n      });\n\n      console.log(`‚úÖ Resume processed successfully for user ${userId}`);\n\n      return {\n        success: true,\n        data: {\n          resumeId,\n          fileUrl: storageResult.fileUrl,\n          sasUrl: storageResult.sasUrl,\n          extractedData,\n          interviewQuestions,\n          storageProvider: storageResult.provider\n        }\n      };\n\n    } catch (error) {\n      console.error(`‚ùå Failed to process resume for user ${userId}:`, error);\n      logServerError(error as Error, {\n        service: 'resume-processing',\n        action: 'process',\n        userId\n      }, {\n        fileName: fileName.substring(0, 50)\n      });\n\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to process resume'\n      };\n    }\n  }\n\n  /**\n   * This method is deprecated - storage is now handled via the abstraction layer\n   */\n  private async uploadToStorage(\n    userId: string,\n    fileBuffer: Buffer,\n    fileName: string,\n    mimeType: string\n  ): Promise<{\n    fileUrl: string;\n    filePath?: string;\n    blobName?: string;\n    sasUrl?: string;\n    provider: 'azure' | 'firebase';\n  }> {\n    // This method is now replaced by the storage abstraction layer\n    // Use resumeStorageService.uploadResume() instead\n    throw new Error('This method is deprecated. Use resumeStorageService.uploadResume() instead.');\n  }\n\n  /**\n   * Extract data from resume using Azure Form Recognizer or OpenAI\n   */\n  private async extractResumeData(fileBuffer: Buffer, mimeType: string): Promise<ExtractedResumeData> {\n    \n    // Try Azure Form Recognizer first\n    if (azureFormRecognizer.isReady()) {\n      try {\n        console.log('üîç Extracting data with Azure Form Recognizer...');\n        return await azureFormRecognizer.extractResumeData(fileBuffer, mimeType);\n      } catch (error) {\n        console.warn('‚ö†Ô∏è Azure Form Recognizer extraction failed, falling back to OpenAI:', error);\n        // Continue to OpenAI fallback\n      }\n    }\n\n    // Fallback to OpenAI extraction\n    console.log('üîç Extracting data with OpenAI...');\n    return await this.extractWithOpenAI(fileBuffer, mimeType);\n  }\n\n  /**\n   * Extract resume data using OpenAI as fallback\n   */\n  private async extractWithOpenAI(fileBuffer: Buffer, mimeType: string): Promise<ExtractedResumeData> {\n    // For PDFs, we need to extract text first\n    let text = '';\n\n    if (mimeType === 'application/pdf') {\n      const pdfParse = await import('pdf-parse');\n      const pdfData = await pdfParse.default(fileBuffer);\n      text = pdfData.text;\n    } else if (mimeType.includes('text')) {\n      text = fileBuffer.toString('utf-8');\n    } else {\n      throw new Error(`Unsupported file type for OpenAI extraction: ${mimeType}`);\n    }\n\n    // Use OpenAI function calling to extract structured data\n    const prompt = `Extract the following information from this resume and return as JSON:\n\n    {\n      \"personalInfo\": {\n        \"name\": \"Full name\",\n        \"email\": \"Email address\", \n        \"phone\": \"Phone number\",\n        \"address\": \"Address\",\n        \"linkedin\": \"LinkedIn URL\",\n        \"github\": \"GitHub URL\",\n        \"website\": \"Personal website URL\"\n      },\n      \"summary\": \"Professional summary\",\n      \"skills\": [\"skill1\", \"skill2\", ...],\n      \"experience\": [\n        {\n          \"company\": \"Company name\",\n          \"position\": \"Job title\", \n          \"startDate\": \"Start date\",\n          \"endDate\": \"End date or 'Present'\",\n          \"isCurrent\": true/false,\n          \"description\": \"Job description\",\n          \"achievements\": [\"achievement1\", ...],\n          \"technologies\": [\"tech1\", \"tech2\", ...],\n          \"location\": \"Location\"\n        }\n      ],\n      \"education\": [\n        {\n          \"institution\": \"School name\",\n          \"degree\": \"Degree type\",\n          \"field\": \"Field of study\", \n          \"startDate\": \"Start date\",\n          \"endDate\": \"End date\",\n          \"gpa\": 3.5,\n          \"location\": \"Location\"\n        }\n      ],\n      \"projects\": [...],\n      \"certifications\": [...],\n      \"languages\": [...]\n    }\n\n    Resume text:\n    ${text}`;\n\n    const { tailorResume } = await import('@/lib/ai');\n    const result = await tailorResume(text, prompt);\n\n    if (result.success && result.data) {\n      try {\n        const parsedData = typeof result.data === 'string' \n          ? JSON.parse(result.data) \n          : result.data;\n\n        return {\n          personalInfo: parsedData.personalInfo || {},\n          summary: parsedData.summary,\n          skills: parsedData.skills || [],\n          experience: parsedData.experience || [],\n          education: parsedData.education || [],\n          projects: parsedData.projects || [],\n          certifications: parsedData.certifications || [],\n          languages: parsedData.languages || [],\n          rawExtraction: { text, aiResponse: result.data }\n        };\n      } catch (parseError) {\n        console.warn('Failed to parse OpenAI extraction result');\n        throw new Error('Failed to parse extracted resume data');\n      }\n    }\n\n    throw new Error('Failed to extract resume data with OpenAI');\n  }\n\n  /**\n   * Generate interview questions based on extracted data\n   */\n  private async generateQuestions(\n    extractedData: ExtractedResumeData, \n    maxQuestions: number = 10\n  ): Promise<string[]> {\n    try {\n      console.log('ü§î Generating interview questions...');\n\n      // Create a summary of the candidate's profile for question generation\n      const profileSummary = `\n        Name: ${extractedData.personalInfo.name || 'N/A'}\n        Summary: ${extractedData.summary || 'N/A'}\n        Skills: ${extractedData.skills.join(', ')}\n        Experience: ${extractedData.experience.map(exp => `${exp.position} at ${exp.company}`).join(', ')}\n        Education: ${extractedData.education.map(edu => `${edu.degree} in ${edu.field} from ${edu.institution}`).join(', ')}\n      `;\n\n      // Dynamic import to avoid circular dependencies\n      const { generateQuestions } = await import('@/lib/ai');\n      \n      // Convert ExtractedResumeData to ResumeInfo format expected by generateQuestions\n      const resumeInfo = {\n        name: extractedData.personalInfo?.name || 'Unknown',\n        skills: extractedData.skills.join(', '),\n        experience: extractedData.experience.map(exp => `${exp.position} at ${exp.company} (${exp.startDate} - ${exp.endDate || 'Present'}): ${exp.description}`).join('. '),\n        education: extractedData.education.map(edu => `${edu.degree} in ${edu.field} from ${edu.institution} (${edu.startDate} - ${edu.endDate})`).join(', ')\n      };\n      \n      const questions = await generateQuestions(resumeInfo);\n      \n      if (questions.success && questions.data) {\n        // Limit to maxQuestions\n        return Array.isArray(questions.data) \n          ? questions.data.slice(0, maxQuestions)\n          : [questions.data];\n      }\n\n      // Return default questions if generation fails\n      return [\n        \"Tell me about yourself and your professional background.\",\n        \"What interests you most about this position?\",\n        \"Describe a challenging project you've worked on.\",\n        \"How do you stay updated with industry trends?\",\n        \"Where do you see yourself in 5 years?\"\n      ];\n\n    } catch (error) {\n      console.warn('Failed to generate interview questions:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Save resume data to Firestore profiles collection\n   */\n  private async saveToFirestore(userId: string, resumeData: any): Promise<string> {\n    try {\n      const db = await getAdminFirestore();\n      const docRef = db.collection('profiles').doc(userId);\n\n      await docRef.set({\n        userId,\n        ...resumeData,\n        metadata: {\n          ...resumeData.metadata,\n          uploadDate: FieldValue.serverTimestamp(),\n          lastModified: FieldValue.serverTimestamp(),\n        },\n      }); // Use merge to update existing profile\n\n      console.log(`‚úÖ Resume data saved to Firestore for user: ${userId}`);\n      return userId; // Use userId as the document ID since that's what we set\n    } catch (error) {\n      console.error('Failed to save resume data to Firestore:', error);\n      throw new Error('Failed to save resume data');\n    }\n  }\n\n  /**\n   * Delete existing resume for user\n   */\n  private async deleteExistingResume(userId: string): Promise<void> {\n    try {\n      // Get existing resume data\n      const db = await getAdminFirestore();\n      const profileDoc = await db.collection('profiles').doc(userId).get();\n\n      if (profileDoc.exists) {\n        const profileData = profileDoc.data() as any;\n        \n        // Delete from storage using the abstraction layer\n        if (profileData?.filePath) {\n          await resumeStorageService.deleteResume(profileData.filePath);\n        } else if (profileData?.blobName) {\n          await resumeStorageService.deleteResume(profileData.blobName);\n        }\n      }\n\n      // Legacy resume cleanup (Firebase functions removed)\n      \n      console.log(`üóëÔ∏è Existing resume cleaned up for user: ${userId}`);\n    } catch (error) {\n      console.warn('Failed to delete existing resume:', error);\n      // Don't throw - we still want to proceed with new upload\n    }\n  }\n\n  /**\n   * Get user's resume data from Firestore\n   */\n  async getUserResumeData(userId: string): Promise<any> {\n    try {\n      const db = await getAdminFirestore();\n      const profileDoc = await db.collection('profiles').doc(userId).get();\n\n      if (profileDoc.exists) {\n        return profileDoc.data() as any;\n      }\n\n      // Legacy resume collection fallback removed\n      return null;\n    } catch (error) {\n      console.error('Failed to get user resume data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Generate new secure URL for file access\n   */\n  async generateNewSecureUrl(userId: string, expiryHours: number = 24): Promise<string | null> {\n    try {\n      const resumeData = await this.getUserResumeData(userId);\n      \n      const filePath = resumeData?.filePath || resumeData?.blobName;\n      if (filePath) {\n        return await resumeStorageService.getResumeUrl(filePath, expiryHours);\n      }\n\n      return null;\n    } catch (error) {\n      console.error('Failed to generate new secure URL:', error);\n      return null;\n    }\n  }\n}\n\n// Export singleton instance\nexport const resumeProcessingService = new ResumeProcessingService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/services/unified-config-service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[871,874],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[871,874],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1246,1249],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1246,1249],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1385,1388],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1385,1388],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1402,1405],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1402,1405],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1563,1566],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1563,1566],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1641,1644],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1641,1644],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1663,1666],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1663,1666],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":203,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":203,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7207,7210],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7207,7210],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'schema' is assigned a value but never used.","line":230,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":230,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'success' is assigned a value but never used.","line":251,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":251,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":264,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":264,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9293,9296],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9293,9296],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'success' is assigned a value but never used.","line":332,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":332,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":344,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":344,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11615,11618],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11615,11618],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":347,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":347,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11686,11689],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11686,11689],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":381,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":381,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12769,12772],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12769,12772],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":404,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":404,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13298,13301],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13298,13301],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":405,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":405,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13345,13348],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13345,13348],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":529,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":529,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16902,16905],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16902,16905],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":542,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":542,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17307,17310],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17307,17310],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":550,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":550,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17465,17468],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17465,17468],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'configValue' is defined but never used.","line":592,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":592,"endColumn":56},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":617,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":617,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19814,19817],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19814,19817],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":645,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":645,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20387,20390],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20387,20390],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":657,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":657,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20650,20653],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20650,20653],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":665,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":665,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20803,20806],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20803,20806],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":673,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":673,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21111,21114],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21111,21114],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":704,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":704,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22207,22210],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22207,22210],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":705,"column":20,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":705,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":783,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":783,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24641,24644],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24641,24644],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":831,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":831,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26145,26148],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26145,26148],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":30,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Unified Configuration Service\n * \n * Eliminates configuration drift by providing a single source of truth\n * with Azure App Configuration as primary and Firebase Remote Config\n * for client-side distribution.\n * \n * Key features:\n * - Single API for all configuration needs\n * - Automatic Azure ‚Üí Firebase synchronization\n * - Two-layer caching with drift detection\n * - Version control and rollback capabilities\n * - Edge-runtime compatible for Next.js middleware\n */\n\nimport { AppConfigurationClient, ConfigurationSetting } from '@azure/app-configuration';\nimport { DefaultAzureCredential } from '@azure/identity';\nimport { logServerError } from '@/lib/errors';\nimport { azureCosmosService } from './azure-cosmos-service';\nimport { configMonitoringService } from './config-monitoring-service';\n\n// ===== INTERFACES =====\n\nexport interface ConfigValue {\n  value: any;\n  type: 'string' | 'number' | 'boolean' | 'object' | 'array';\n  metadata?: {\n    source: 'azure' | 'firebase';\n    version: string;\n    lastModified: Date;\n    hash: string;\n    clientOnly?: boolean;\n    syncToFirebase?: boolean;\n  };\n}\n\nexport interface ConfigValidationRule {\n  required: boolean;\n  type: 'string' | 'number' | 'boolean' | 'object' | 'array';\n  enum?: any[];\n  min?: number;\n  max?: number;\n  pattern?: RegExp;\n}\n\nexport interface ConfigAuditEntry {\n  id: string;\n  key: string;\n  oldValue: any;\n  newValue: any;\n  version: string;\n  source: 'azure' | 'firebase' | 'unified';\n  changedBy: string;\n  timestamp: Date;\n  rollbackable: boolean;\n  metadata?: Record<string, any>;\n}\n\nexport interface ConfigDriftDetection {\n  key: string;\n  azureValue: any;\n  firebaseValue: any;\n  azureHash: string;\n  firebaseHash: string;\n  drifted: boolean;\n  lastChecked: Date;\n}\n\n// ===== CONFIGURATION SCHEMA =====\n\nexport const CONFIG_SCHEMA: Record<string, ConfigValidationRule> = {\n  // Core application settings\n  'core.app.environment': { required: true, type: 'string', enum: ['development', 'staging', 'production'] },\n  'core.app.version': { required: true, type: 'string' },\n  'core.app.debug': { required: false, type: 'boolean' },\n  'core.app.maintenanceMode': { required: false, type: 'boolean' },\n  \n  // Feature flags (synced to Firebase for client access)\n  'features.autoApplyAzure': { required: false, type: 'boolean' },\n  'features.portalIntegration': { required: false, type: 'boolean' },\n  'features.voiceInterview': { required: false, type: 'boolean' },\n  'features.voiceInterviewV2': { required: false, type: 'boolean' },\n  'features.premiumFeatures': { required: false, type: 'boolean' },\n  'features.newUI': { required: false, type: 'boolean' },\n  \n  // Cosmos DB configuration\n  'data.cosmos.maxRUPerSecond': { required: false, type: 'number', min: 400, max: 100000 },\n  'data.cosmos.batchSize': { required: false, type: 'number', min: 10, max: 1000 },\n  'data.cosmos.connectionTimeout': { required: false, type: 'number', min: 1000, max: 30000 },\n  'data.cosmos.retryAttempts': { required: false, type: 'number', min: 1, max: 10 },\n  \n  // Usage limits and quotas\n  'quotas.freeInterviews': { required: false, type: 'number', min: 0, max: 100 },\n  'quotas.freeResumes': { required: false, type: 'number', min: 0, max: 50 },\n  'quotas.premiumInterviews': { required: false, type: 'number', min: 0, max: 10000 },\n  'quotas.premiumResumes': { required: false, type: 'number', min: 0, max: 1000 },\n  \n  // Authentication settings (Firebase client-side)\n  'auth.firebase.sessionTimeout': { required: false, type: 'number', min: 300, max: 86400 },\n  'auth.firebase.maxAttempts': { required: false, type: 'number', min: 3, max: 10 },\n  'auth.firebase.lockoutDuration': { required: false, type: 'number', min: 300, max: 3600 },\n  \n  // Performance and monitoring\n  'perf.cacheTimeout': { required: false, type: 'number', min: 30, max: 3600 },\n  'perf.maxCacheSize': { required: false, type: 'number', min: 100, max: 10000 },\n  'perf.enableMetrics': { required: false, type: 'boolean' }\n};\n\n// Default values with metadata\nexport const CONFIG_DEFAULTS: Record<string, ConfigValue> = {\n  'core.app.environment': {\n    value: 'development',\n    type: 'string',\n    metadata: { source: 'azure', version: '1.0.0', lastModified: new Date(), hash: '' }\n  },\n  'core.app.debug': {\n    value: false,\n    type: 'boolean',\n    metadata: { source: 'azure', version: '1.0.0', lastModified: new Date(), hash: '' }\n  },\n  'features.autoApplyAzure': {\n    value: false,\n    type: 'boolean',\n    metadata: { source: 'azure', version: '1.0.0', lastModified: new Date(), hash: '', syncToFirebase: true }\n  },\n  'features.voiceInterview': {\n    value: true,\n    type: 'boolean',\n    metadata: { source: 'azure', version: '1.0.0', lastModified: new Date(), hash: '', syncToFirebase: true }\n  },\n  'features.voiceInterviewV2': {\n    value: true, // Default to Azure AI Foundry voice system\n    type: 'boolean',\n    metadata: { source: 'azure', version: '1.0.0', lastModified: new Date(), hash: '', syncToFirebase: true }\n  },\n  'quotas.freeInterviews': {\n    value: 3,\n    type: 'number',\n    metadata: { source: 'azure', version: '1.0.0', lastModified: new Date(), hash: '' }\n  },\n  'quotas.freeResumes': {\n    value: 2,\n    type: 'number', \n    metadata: { source: 'azure', version: '1.0.0', lastModified: new Date(), hash: '' }\n  }\n};\n\n// ===== UNIFIED CONFIGURATION SERVICE =====\n\nclass UnifiedConfigService {\n  private azureClient: AppConfigurationClient | null = null;\n  private cache: Map<string, { value: ConfigValue; timestamp: number; etag?: string }> = new Map();\n  private initialized = false;\n  private driftCache: Map<string, ConfigDriftDetection> = new Map();\n  \n  private readonly CACHE_TTL = 5 * 60 * 1000; // 5 minutes\n  private readonly DRIFT_CHECK_INTERVAL = 10 * 60 * 1000; // 10 minutes\n  \n  constructor() {\n    this.setupDriftDetection();\n  }\n\n  // ===== INITIALIZATION =====\n\n  async initialize(): Promise<void> {\n    if (this.initialized) return;\n\n    try {\n      const connectionString = process.env.AZURE_APP_CONFIG_CONNECTION_STRING;\n      const endpoint = process.env.AZURE_APP_CONFIG_ENDPOINT;\n\n      if (connectionString) {\n        this.azureClient = new AppConfigurationClient(connectionString);\n      } else if (endpoint) {\n        const credential = new DefaultAzureCredential();\n        this.azureClient = new AppConfigurationClient(endpoint, credential);\n      } else {\n        console.warn('‚ö†Ô∏è Azure App Configuration not configured - using defaults only');\n        this.initialized = true;\n        return;\n      }\n\n      // Test connection\n      const iterator = this.azureClient.listConfigurationSettings();\n      await iterator.next(); // Just get the first result to test connection\n      \n      this.initialized = true;\n      console.log('‚úÖ Unified Configuration Service initialized');\n    } catch (error) {\n      console.error('‚ùå Failed to initialize Unified Config Service:', error);\n      logServerError(error as Error, { service: 'unified-config', action: 'initialize' });\n      \n      // Continue with defaults only\n      this.initialized = true;\n    }\n  }\n\n  // ===== CORE CONFIGURATION METHODS =====\n\n  /**\n   * Get configuration value with intelligent fallback\n   */\n  async get<T = any>(key: string, defaultValue?: T): Promise<T> {\n    const startTime = Date.now();\n    let success = true;\n    \n    await this.initialize();\n\n    try {\n      // Check cache first\n      const cached = this.getCachedValue(key);\n      if (cached) {\n        configMonitoringService.trackCacheHit(true, key);\n        const latency = Date.now() - startTime;\n        configMonitoringService.trackConfigRequest(key, 'get', latency, true);\n        return cached.value as T;\n      }\n      \n      configMonitoringService.trackCacheHit(false, key);\n\n      // Try Azure App Configuration first\n      const azureValue = await this.getFromAzure(key);\n      if (azureValue !== null) {\n        const latency = Date.now() - startTime;\n        configMonitoringService.trackConfigRequest(key, 'get', latency, true);\n        return azureValue as T;\n      }\n\n      // Check if it's a client-only config that should come from Firebase\n      const schema = CONFIG_SCHEMA[key];\n      const defaultConfig = CONFIG_DEFAULTS[key];\n      \n      if (defaultConfig?.metadata?.clientOnly) {\n        const firebaseValue = await this.getFromFirebase(key);\n        if (firebaseValue !== null) {\n          const latency = Date.now() - startTime;\n          configMonitoringService.trackConfigRequest(key, 'get', latency, true);\n          return firebaseValue as T;\n        }\n      }\n\n      // Return default value or schema default\n      const result = defaultValue !== undefined ? defaultValue : \n                    (defaultConfig ? defaultConfig.value as T : undefined as T);\n      \n      const latency = Date.now() - startTime;\n      configMonitoringService.trackConfigRequest(key, 'get', latency, true);\n      return result;\n      \n    } catch (error) {\n      success = false;\n      console.error(`Error getting config ${key}:`, error);\n      \n      const latency = Date.now() - startTime;\n      configMonitoringService.trackConfigRequest(key, 'get', latency, false);\n      \n      return defaultValue as T;\n    }\n  }\n\n  /**\n   * Set configuration value with validation and audit\n   */\n  async set(key: string, value: any, options?: {\n    environment?: string;\n    syncToFirebase?: boolean;\n    version?: string;\n    changedBy?: string;\n  }): Promise<void> {\n    const startTime = Date.now();\n    let success = true;\n    \n    await this.initialize();\n\n    const { environment = 'default', syncToFirebase = false, version = '1.0.0', changedBy = 'system' } = options || {};\n\n    try {\n      // Validate against schema\n      this.validateConfigValue(key, value);\n\n      // Get previous value for audit\n      const previousValue = await this.get(key);\n\n      // Create config value with metadata\n      const configValue: ConfigValue = {\n        value,\n        type: this.inferType(value),\n        metadata: {\n          source: 'azure',\n          version,\n          lastModified: new Date(),\n          hash: this.calculateHash(value),\n          syncToFirebase\n        }\n      };\n\n      // Store in Azure App Configuration\n      if (this.azureClient) {\n        await this.setInAzure(key, configValue, environment);\n      }\n\n      // Sync to Firebase if requested\n      if (syncToFirebase) {\n        await this.syncToFirebase(key, configValue);\n      }\n\n      // Clear cache\n      this.cache.delete(key);\n\n      // Record audit entry\n      await this.recordAuditEntry({\n        id: `audit_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        key,\n        oldValue: previousValue,\n        newValue: value,\n        version,\n        source: 'unified',\n        changedBy,\n        timestamp: new Date(),\n        rollbackable: true,\n        metadata: { environment, syncToFirebase }\n      });\n      \n      // Track configuration change\n      configMonitoringService.trackConfigChange(key, previousValue, value, changedBy, environment);\n      \n      const latency = Date.now() - startTime;\n      configMonitoringService.trackConfigRequest(key, 'set', latency, true);\n\n      console.log(`‚úÖ Config updated: ${key} = ${JSON.stringify(value)}`);\n    } catch (error) {\n      success = false;\n      const latency = Date.now() - startTime;\n      configMonitoringService.trackConfigRequest(key, 'set', latency, false);\n      \n      console.error(`‚ùå Failed to set config ${key}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get all configuration values with optional prefix filter\n   */\n  async getAll(prefix?: string): Promise<Record<string, any>> {\n    await this.initialize();\n\n    const result: Record<string, any> = {};\n\n    try {\n      // Get from Azure App Configuration\n      if (this.azureClient) {\n        const settings = this.azureClient.listConfigurationSettings({\n          keyFilter: prefix ? `${prefix}*` : undefined\n        });\n\n        for await (const setting of settings) {\n          if (setting.key && setting.value !== undefined) {\n            const parsedValue = this.parseConfigurationSetting(setting);\n            result[setting.key] = parsedValue.value;\n            \n            // Cache the value\n            this.setCachedValue(setting.key, parsedValue, setting.etag);\n          }\n        }\n      }\n\n      // Add defaults for missing keys\n      Object.entries(CONFIG_DEFAULTS).forEach(([key, defaultConfig]) => {\n        if (!prefix || key.startsWith(prefix)) {\n          if (result[key] === undefined) {\n            result[key] = defaultConfig.value;\n          }\n        }\n      });\n\n      return result;\n    } catch (error) {\n      console.error('Error getting all configs:', error);\n      \n      // Return defaults only on error\n      const defaults: Record<string, any> = {};\n      Object.entries(CONFIG_DEFAULTS).forEach(([key, defaultConfig]) => {\n        if (!prefix || key.startsWith(prefix)) {\n          defaults[key] = defaultConfig.value;\n        }\n      });\n      \n      return defaults;\n    }\n  }\n\n  /**\n   * Refresh cache and check for drift\n   */\n  async refresh(): Promise<void> {\n    this.cache.clear();\n    this.driftCache.clear();\n    await this.checkForDrift();\n  }\n\n  /**\n   * Subscribe to configuration changes (polling-based)\n   */\n  subscribe(key: string, callback: (value: any) => void): () => void {\n    let lastValue: any = undefined;\n    let isActive = true;\n\n    const poll = async () => {\n      if (!isActive) return;\n\n      try {\n        const currentValue = await this.get(key);\n        if (JSON.stringify(currentValue) !== JSON.stringify(lastValue)) {\n          lastValue = currentValue;\n          callback(currentValue);\n        }\n      } catch (error) {\n        console.error(`Config subscription error for ${key}:`, error);\n      }\n    };\n\n    // Poll every 30 seconds\n    const interval = setInterval(poll, 30000);\n    \n    // Initial call\n    poll();\n\n    return () => {\n      isActive = false;\n      clearInterval(interval);\n    };\n  }\n\n  // ===== DRIFT DETECTION =====\n\n  async checkForDrift(): Promise<ConfigDriftDetection[]> {\n    const driftResults: ConfigDriftDetection[] = [];\n\n    try {\n      // Get all configs that should sync to Firebase\n      const allConfigs = await this.getAll();\n      const syncableKeys = Object.keys(allConfigs).filter(key => {\n        const defaultConfig = CONFIG_DEFAULTS[key];\n        return defaultConfig?.metadata?.syncToFirebase;\n      });\n      \n      for (const key of syncableKeys) {\n        const drift = await this.checkKeyForDrift(key);\n        if (drift) {\n          driftResults.push(drift);\n          this.driftCache.set(key, drift);\n        }\n      }\n\n      // Track drift detection metrics\n      const driftedKeys = driftResults.filter(d => d.drifted).map(d => d.key);\n      configMonitoringService.trackDriftDetection(driftedKeys, syncableKeys.length);\n\n      if (driftResults.length > 0) {\n        console.warn(`‚ö†Ô∏è Configuration drift detected in ${driftResults.length} keys`);\n        \n        // Record drift event for monitoring\n        await this.recordDriftEvent(driftResults);\n      }\n\n      return driftResults;\n    } catch (error) {\n      console.error('Error checking for drift:', error);\n      return [];\n    }\n  }\n\n  private async checkKeyForDrift(key: string): Promise<ConfigDriftDetection | null> {\n    try {\n      const [azureValue, firebaseValue] = await Promise.all([\n        this.getFromAzure(key),\n        this.getFromFirebase(key)\n      ]);\n\n      if (azureValue === null && firebaseValue === null) {\n        return null; // Both missing, no drift\n      }\n\n      const azureHash = this.calculateHash(azureValue);\n      const firebaseHash = this.calculateHash(firebaseValue);\n      const drifted = azureHash !== firebaseHash;\n\n      return {\n        key,\n        azureValue,\n        firebaseValue,\n        azureHash,\n        firebaseHash,\n        drifted,\n        lastChecked: new Date()\n      };\n    } catch (error) {\n      console.error(`Error checking drift for ${key}:`, error);\n      return null;\n    }\n  }\n\n  // ===== ROLLBACK FUNCTIONALITY =====\n\n  async revert(versionId: string): Promise<void> {\n    try {\n      // Get audit entry\n      const auditEntry = await this.getAuditEntry(versionId);\n      if (!auditEntry || !auditEntry.rollbackable) {\n        throw new Error(`Version ${versionId} not found or not rollbackable`);\n      }\n\n      // Restore previous value\n      await this.set(auditEntry.key, auditEntry.oldValue, {\n        version: `rollback_${versionId}`,\n        changedBy: 'rollback-system',\n        syncToFirebase: auditEntry.metadata?.syncToFirebase\n      });\n\n      console.log(`‚úÖ Successfully reverted ${auditEntry.key} to version ${versionId}`);\n    } catch (error) {\n      console.error(`‚ùå Failed to revert to version ${versionId}:`, error);\n      throw error;\n    }\n  }\n\n  // ===== PRIVATE HELPER METHODS =====\n\n  private async getFromAzure(key: string): Promise<any> {\n    if (!this.azureClient) return null;\n\n    try {\n      const setting = await this.azureClient.getConfigurationSetting({ key });\n      if (!setting || setting.value === undefined) {\n        return null;\n      }\n\n      const parsedValue = this.parseConfigurationSetting(setting);\n      this.setCachedValue(key, parsedValue, setting.etag);\n      \n      return parsedValue.value;\n    } catch (error: any) {\n      if (error.statusCode === 404) {\n        return null;\n      }\n      throw error;\n    }\n  }\n\n  private async getFromFirebase(key: string): Promise<any> {\n    try {\n      // Import Firebase Remote Config dynamically\n      const { getRemoteConfig, getValue } = await import('firebase/remote-config');\n      const { app } = await import('@/firebase/client');\n      \n      if (!app) {\n        console.warn('Firebase app not available');\n        return null;\n      }\n      \n      const remoteConfig = getRemoteConfig(app);\n      const value = getValue(remoteConfig, key);\n      \n      return value.asString();\n    } catch (error) {\n      console.warn(`Failed to get Firebase Remote Config for ${key}:`, error);\n      return null;\n    }\n  }\n\n  private async setInAzure(key: string, configValue: ConfigValue, environment: string): Promise<void> {\n    if (!this.azureClient) return;\n\n    const setting: ConfigurationSetting = {\n      key: environment === 'default' ? key : `${key}__${environment}`,\n      value: this.serializeValue(configValue.value),\n      contentType: this.getContentType(configValue.value),\n      isReadOnly: false,\n      tags: {\n        environment,\n        version: configValue.metadata?.version || '1.0.0',\n        source: 'unified-service',\n        lastModified: new Date().toISOString(),\n        hash: configValue.metadata?.hash || '',\n        syncToFirebase: configValue.metadata?.syncToFirebase ? 'true' : 'false'\n      }\n    };\n\n    await this.azureClient.setConfigurationSetting(setting);\n  }\n\n  private async syncToFirebase(key: string, configValue: ConfigValue): Promise<void> {\n    // This will be implemented by the config-sync Azure Function\n    // For now, we'll queue the sync request\n    console.log(`üîÑ Queuing Firebase sync for ${key}`);\n    \n    // Could implement immediate sync here if needed\n    // For production, better to use the dedicated sync function\n  }\n\n  private parseConfigurationSetting(setting: ConfigurationSetting): ConfigValue {\n    const value = this.parseValue(setting.value || '', setting.contentType);\n    \n    return {\n      value,\n      type: this.inferType(value),\n      metadata: {\n        source: 'azure',\n        version: setting.tags?.version || '1.0.0',\n        lastModified: new Date(setting.tags?.lastModified || new Date()),\n        hash: setting.tags?.hash || this.calculateHash(value),\n        syncToFirebase: setting.tags?.syncToFirebase === 'true'\n      }\n    };\n  }\n\n  private parseValue(value: string, contentType?: string): any {\n    if (!contentType) {\n      // Try to infer type\n      if (value === 'true' || value === 'false') {\n        return value === 'true';\n      }\n      \n      const numberValue = Number(value);\n      if (!isNaN(numberValue)) {\n        return numberValue;\n      }\n      \n      try {\n        return JSON.parse(value);\n      } catch {\n        return value;\n      }\n    }\n    \n    switch (contentType) {\n      case 'application/json':\n        return JSON.parse(value);\n      case 'text/plain':\n      default:\n        return value;\n    }\n  }\n\n  private serializeValue(value: any): string {\n    if (typeof value === 'string') {\n      return value;\n    }\n    \n    if (typeof value === 'number' || typeof value === 'boolean') {\n      return value.toString();\n    }\n    \n    return JSON.stringify(value);\n  }\n\n  private getContentType(value: any): string {\n    if (typeof value === 'object') {\n      return 'application/json';\n    }\n    \n    return 'text/plain';\n  }\n\n  private inferType(value: any): ConfigValue['type'] {\n    if (Array.isArray(value)) return 'array';\n    if (typeof value === 'object') return 'object';\n    if (typeof value === 'boolean') return 'boolean';\n    if (typeof value === 'number') return 'number';\n    return 'string';\n  }\n\n  private validateConfigValue(key: string, value: any): void {\n    const rule = CONFIG_SCHEMA[key];\n    if (!rule) return; // No validation rule, allow any value\n\n    // Type validation\n    const actualType = this.inferType(value);\n    if (rule.type !== actualType) {\n      throw new Error(`Config ${key}: expected type ${rule.type}, got ${actualType}`);\n    }\n\n    // Enum validation\n    if (rule.enum && !rule.enum.includes(value)) {\n      throw new Error(`Config ${key}: value must be one of ${rule.enum.join(', ')}`);\n    }\n\n    // Range validation for numbers\n    if (rule.type === 'number') {\n      if (rule.min !== undefined && value < rule.min) {\n        throw new Error(`Config ${key}: value ${value} is below minimum ${rule.min}`);\n      }\n      if (rule.max !== undefined && value > rule.max) {\n        throw new Error(`Config ${key}: value ${value} is above maximum ${rule.max}`);\n      }\n    }\n\n    // Pattern validation for strings\n    if (rule.type === 'string' && rule.pattern && !rule.pattern.test(value)) {\n      throw new Error(`Config ${key}: value does not match required pattern`);\n    }\n  }\n\n  private calculateHash(value: any): string {\n    const crypto = require('crypto');\n    const normalized = JSON.stringify(value, Object.keys(value || {}).sort());\n    return crypto.createHash('sha256').update(normalized).digest('hex').substring(0, 16);\n  }\n\n  private getCachedValue(key: string): ConfigValue | null {\n    const cached = this.cache.get(key);\n    if (!cached) return null;\n\n    const isExpired = Date.now() - cached.timestamp > this.CACHE_TTL;\n    if (isExpired) {\n      this.cache.delete(key);\n      return null;\n    }\n\n    return cached.value;\n  }\n\n  private setCachedValue(key: string, value: ConfigValue, etag?: string): void {\n    this.cache.set(key, {\n      value,\n      timestamp: Date.now(),\n      etag\n    });\n  }\n\n  private setupDriftDetection(): void {\n    // Check for drift every 10 minutes\n    setInterval(async () => {\n      await this.checkForDrift();\n    }, this.DRIFT_CHECK_INTERVAL);\n  }\n\n  private async recordAuditEntry(entry: ConfigAuditEntry): Promise<void> {\n    try {\n      await azureCosmosService.initialize();\n      await azureCosmosService.createDocument('configAudit', {\n        ...entry,\n        _partitionKey: entry.key\n      });\n    } catch (error) {\n      console.error('Failed to record config audit entry:', error);\n    }\n  }\n\n  private async getAuditEntry(versionId: string): Promise<ConfigAuditEntry | null> {\n    try {\n      await azureCosmosService.initialize();\n      const result = await azureCosmosService.queryDocuments<ConfigAuditEntry>(\n        'configAudit',\n        'SELECT * FROM c WHERE c.version = @versionId',\n        [{ name: '@versionId', value: versionId }]\n      );\n      return result[0] || null;\n    } catch (error) {\n      console.error('Failed to get audit entry:', error);\n      return null;\n    }\n  }\n\n  private async recordDriftEvent(driftResults: ConfigDriftDetection[]): Promise<void> {\n    try {\n      await azureCosmosService.initialize();\n      await azureCosmosService.createDocument('configDrift', {\n        id: `drift_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        timestamp: new Date(),\n        driftCount: driftResults.length,\n        keys: driftResults.map(d => d.key),\n        details: driftResults,\n        _partitionKey: 'drift-detection'\n      });\n    } catch (error) {\n      console.error('Failed to record drift event:', error);\n    }\n  }\n\n  // ===== HEALTH CHECK =====\n\n  async healthCheck(): Promise<{ healthy: boolean; message?: string; details?: any }> {\n    try {\n      await this.initialize();\n\n      if (!this.azureClient) {\n        return { \n          healthy: false, \n          message: 'Azure App Configuration not available - using defaults only' \n        };\n      }\n\n      // Test connectivity\n      const testIterator = this.azureClient.listConfigurationSettings();\n      await testIterator.next(); // Just test the connection\n\n      const driftCount = Array.from(this.driftCache.values()).filter(d => d.drifted).length;\n      \n      // Get comprehensive health check from monitoring service\n      const monitoringHealth = await configMonitoringService.healthCheck();\n\n      return { \n        healthy: monitoringHealth.status === 'healthy',\n        message: monitoringHealth.status !== 'healthy' ? `Service status: ${monitoringHealth.status}` : undefined,\n        details: {\n          cacheSize: this.cache.size,\n          driftDetected: driftCount,\n          lastRefresh: new Date(),\n          monitoring: monitoringHealth\n        }\n      };\n    } catch (error) {\n      return { \n        healthy: false, \n        message: error instanceof Error ? error.message : 'Unknown error' \n      };\n    }\n  }\n}\n\n// ===== SINGLETON INSTANCE =====\n\nexport const unifiedConfigService = new UnifiedConfigService();\n\n// ===== REACT HOOK =====\n\n// Note: This hook should be used in client-side components only\n// The actual implementation will be moved to a separate file to avoid\n// bundling React in server-side code\nexport function useUnifiedConfig<T = any>(key: string, defaultValue?: T): {\n  value: T;\n  loading: boolean;\n  error: string | null;\n} {\n  // This is a placeholder implementation that will be overridden\n  // in client-side usage. See /lib/hooks/useUnifiedConfig.ts\n  console.warn('useUnifiedConfig called from server context. Use the client-side hook instead.');\n  return {\n    value: defaultValue as T,\n    loading: false,\n    error: null\n  };\n}\n\nexport default unifiedConfigService;\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/shared/auth/__tests__/azure-adapter.integration.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[599,602],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[599,602],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":32,"column":30,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":32,"endColumn":61},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used.","line":199,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":199,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'user' is defined but never used.","line":199,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":199,"endColumn":56}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Integration Tests for Azure Functions Unified Auth Middleware\n * \n * Validates the Azure Functions adapter in a simulated environment\n */\n\nimport { \n  azureAuthMiddleware,\n  createAuthenticatedAzureFunction,\n  createAdminAzureFunction\n} from '../adapters/azure-auth';\nimport { getUnifiedAuth } from '../core';\nimport { AzureContext, AzureRequest } from '../types';\n\n// Mock dependencies\njest.mock('@/lib/firebase/admin', () => ({\n  getAdminAuth: jest.fn(() => ({\n    verifyIdToken: jest.fn()\n  }))\n}));\n\ndescribe('Azure Functions Auth Middleware Integration', () => {\n  let mockFirebaseAuth: any;\n  let mockContext: AzureContext;\n  let mockRequest: AzureRequest;\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n    const auth = getUnifiedAuth();\n    await auth.initialize();\n    \n    const { getAdminAuth } = require('@/lib/firebase/admin');\n    mockFirebaseAuth = getAdminAuth();\n\n    // Setup mock Azure context and request\n    mockContext = {\n      log: {\n        info: jest.fn(),\n        warn: jest.fn(),\n        error: jest.fn()\n      },\n      res: undefined\n    };\n\n    mockRequest = {\n      headers: {},\n      body: {},\n      query: {}\n    };\n  });\n\n  describe('azureAuthMiddleware', () => {\n    it('should succeed with valid token', async () => {\n      mockFirebaseAuth.verifyIdToken.mockResolvedValue({\n        uid: 'test-user',\n        email: 'test@example.com'\n      });\n\n      mockRequest.headers.authorization = 'Bearer valid-token';\n\n      const result = await azureAuthMiddleware(mockContext, mockRequest);\n\n      expect(result.success).toBe(true);\n      expect(result.user?.uid).toBe('test-user');\n      expect(result.response).toBeUndefined();\n      expect(mockContext.log.info).toHaveBeenCalledWith(\n        expect.stringContaining('Authenticated user: test-user')\n      );\n    });\n\n    it('should fail with missing token and return 401 response', async () => {\n      const result = await azureAuthMiddleware(mockContext, mockRequest);\n\n      expect(result.success).toBe(false);\n      expect(result.response?.status).toBe(401);\n      expect(JSON.parse(result.response?.body || '{}')).toMatchObject({\n        error: 'Missing or invalid Authorization header'\n      });\n    });\n\n    it('should fail with invalid token and return 401 response', async () => {\n      mockFirebaseAuth.verifyIdToken.mockRejectedValue(new Error('Invalid token'));\n      mockRequest.headers.authorization = 'Bearer invalid-token';\n\n      const result = await azureAuthMiddleware(mockContext, mockRequest);\n\n      expect(result.success).toBe(false);\n      expect(result.response?.status).toBe(401);\n    });\n\n    it('should handle case-insensitive authorization header', async () => {\n      mockFirebaseAuth.verifyIdToken.mockResolvedValue({ uid: 'test-user' });\n      mockRequest.headers.Authorization = 'Bearer valid-token'; // Capital A\n\n      const result = await azureAuthMiddleware(mockContext, mockRequest);\n\n      expect(result.success).toBe(true);\n    });\n\n    it('should handle role-based access control', async () => {\n      mockFirebaseAuth.verifyIdToken.mockResolvedValue({\n        uid: 'admin-user',\n        custom_claims: { roles: ['admin'] }\n      });\n\n      mockRequest.headers.authorization = 'Bearer admin-token';\n\n      // Should succeed with correct role\n      const successResult = await azureAuthMiddleware(mockContext, mockRequest, {\n        requiredRoles: ['admin']\n      });\n      expect(successResult.success).toBe(true);\n\n      // Should fail with missing role\n      const failureResult = await azureAuthMiddleware(mockContext, mockRequest, {\n        requiredRoles: ['superuser']\n      });\n      expect(failureResult.success).toBe(false);\n      expect(failureResult.response?.status).toBe(403);\n    });\n\n    it('should handle custom validation', async () => {\n      mockFirebaseAuth.verifyIdToken.mockResolvedValue({\n        uid: 'test-user',\n        email: 'test@blocked-domain.com'\n      });\n\n      mockRequest.headers.authorization = 'Bearer valid-token';\n\n      const customValidator = jest.fn(async (user) => {\n        return !user.email?.includes('blocked-domain');\n      });\n\n      const result = await azureAuthMiddleware(mockContext, mockRequest, {\n        customValidator\n      });\n\n      expect(result.success).toBe(false);\n      expect(result.response?.status).toBe(403);\n      expect(customValidator).toHaveBeenCalled();\n    });\n  });\n\n  describe('createAuthenticatedAzureFunction', () => {\n    it('should call handler with authenticated user', async () => {\n      mockFirebaseAuth.verifyIdToken.mockResolvedValue({\n        uid: 'test-user',\n        email: 'test@example.com'\n      });\n\n      const handler = jest.fn(async (context, req, user) => {\n        expect(user.uid).toBe('test-user');\n        context.res = { status: 200, body: 'Success' };\n      });\n\n      mockRequest.headers.authorization = 'Bearer valid-token';\n\n      const authenticatedFunction = createAuthenticatedAzureFunction(handler);\n      await authenticatedFunction(mockContext, mockRequest);\n\n      expect(handler).toHaveBeenCalled();\n      expect(mockContext.res?.status).toBe(200);\n    });\n\n    it('should not call handler on authentication failure', async () => {\n      mockFirebaseAuth.verifyIdToken.mockRejectedValue(new Error('Invalid token'));\n\n      const handler = jest.fn();\n      mockRequest.headers.authorization = 'Bearer invalid-token';\n\n      const authenticatedFunction = createAuthenticatedAzureFunction(handler);\n      await authenticatedFunction(mockContext, mockRequest);\n\n      expect(handler).not.toHaveBeenCalled();\n      expect(mockContext.res?.status).toBe(401);\n    });\n\n    it('should skip authentication when specified', async () => {\n      const handler = jest.fn(async (context, req, user) => {\n        expect(user).toBeNull();\n        context.res = { status: 200, body: 'Public endpoint' };\n      });\n\n      const publicFunction = createAuthenticatedAzureFunction(handler, { skipAuth: true });\n      await publicFunction(mockContext, mockRequest);\n\n      expect(handler).toHaveBeenCalled();\n      expect(mockContext.res?.status).toBe(200);\n    });\n  });\n\n  describe('createAdminAzureFunction', () => {\n    it('should grant access to admin users', async () => {\n      mockFirebaseAuth.verifyIdToken.mockResolvedValue({\n        uid: 'admin-user',\n        custom_claims: { roles: ['admin'] }\n      });\n\n      const handler = jest.fn(async (context, req, user) => {\n        context.res = { status: 200, body: 'Admin access granted' };\n      });\n\n      mockRequest.headers.authorization = 'Bearer admin-token';\n\n      const adminFunction = createAdminAzureFunction(handler);\n      await adminFunction(mockContext, mockRequest);\n\n      expect(handler).toHaveBeenCalled();\n      expect(mockContext.res?.status).toBe(200);\n    });\n\n    it('should deny access to non-admin users', async () => {\n      mockFirebaseAuth.verifyIdToken.mockResolvedValue({\n        uid: 'regular-user',\n        custom_claims: { roles: ['user'] }\n      });\n\n      const handler = jest.fn();\n      mockRequest.headers.authorization = 'Bearer user-token';\n\n      const adminFunction = createAdminAzureFunction(handler);\n      await adminFunction(mockContext, mockRequest);\n\n      expect(handler).not.toHaveBeenCalled();\n      expect(mockContext.res?.status).toBe(403);\n    });\n  });\n\n  describe('Error handling', () => {\n    it('should handle Firebase service unavailable', async () => {\n      mockFirebaseAuth.verifyIdToken.mockRejectedValue({\n        code: 'auth/service-unavailable'\n      });\n\n      mockRequest.headers.authorization = 'Bearer token';\n\n      const result = await azureAuthMiddleware(mockContext, mockRequest);\n\n      expect(result.success).toBe(false);\n      expect(result.response?.status).toBe(401);\n      expect(mockContext.log.error).toHaveBeenCalled();\n    });\n\n    it('should handle unexpected errors gracefully', async () => {\n      mockFirebaseAuth.verifyIdToken.mockImplementation(() => {\n        throw new Error('Unexpected error');\n      });\n\n      mockRequest.headers.authorization = 'Bearer token';\n\n      const result = await azureAuthMiddleware(mockContext, mockRequest);\n\n      expect(result.success).toBe(false);\n      expect(result.response?.status).toBe(500);\n      expect(mockContext.log.error).toHaveBeenCalled();\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/shared/auth/__tests__/core.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'verifyToken' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[730,733],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[730,733],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":41,"column":30,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":41,"endColumn":61},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":57,"column":34,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":57,"endColumn":65}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Unit Tests for Unified Authentication Core Library\n * \n * Tests all core authentication functionality including:\n * - Token verification\n * - Error handling\n * - Performance monitoring\n * - Health checks\n */\n\nimport { \n  UnifiedAuth, \n  UnifiedAuthError, \n  TokenUtils, \n  AuthPerformanceMonitor,\n  getUnifiedAuth,\n  verifyToken,\n  verifyAuthHeader,\n  createAuthError\n} from '../core';\nimport { AuthErrorCode } from '../types';\n\n// Mock Firebase Admin\njest.mock('@/lib/firebase/admin', () => ({\n  getAdminAuth: jest.fn(() => ({\n    verifyIdToken: jest.fn(),\n    verifySessionCookie: jest.fn(),\n    getUser: jest.fn()\n  }))\n}));\n\ndescribe('UnifiedAuth Core Library', () => {\n  let auth: UnifiedAuth;\n  let mockFirebaseAuth: any;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    auth = new UnifiedAuth();\n    \n    // Setup mock Firebase auth\n    const { getAdminAuth } = require('@/lib/firebase/admin');\n    mockFirebaseAuth = getAdminAuth();\n  });\n\n  afterEach(() => {\n    auth.resetMetrics();\n  });\n\n  describe('UnifiedAuth Class', () => {\n    describe('initialization', () => {\n      it('should initialize successfully with default config', async () => {\n        await auth.initialize();\n        expect(auth['initialized']).toBe(true);\n      });\n\n      it('should handle initialization errors', async () => {\n        const { getAdminAuth } = require('@/lib/firebase/admin');\n        getAdminAuth.mockImplementation(() => {\n          throw new Error('Firebase init failed');\n        });\n\n        await expect(auth.initialize()).rejects.toThrow('Firebase init failed');\n      });\n\n      it('should not re-initialize if already initialized', async () => {\n        await auth.initialize();\n        const initSpy = jest.spyOn(auth, 'initialize');\n        await auth.initialize();\n        expect(initSpy).toHaveBeenCalledTimes(1);\n      });\n    });\n\n    describe('token extraction', () => {\n      it('should extract Bearer token correctly', () => {\n        const token = auth.extractBearerToken('Bearer abc123');\n        expect(token).toBe('abc123');\n      });\n\n      it('should return null for invalid auth header', () => {\n        expect(auth.extractBearerToken('')).toBe(null);\n        expect(auth.extractBearerToken('Basic abc123')).toBe(null);\n        expect(auth.extractBearerToken('Bearer')).toBe(null);\n        expect(auth.extractBearerToken(null)).toBe(null);\n        expect(auth.extractBearerToken(undefined)).toBe(null);\n      });\n\n      it('should handle malformed Bearer headers', () => {\n        expect(auth.extractBearerToken('Bearer  ')).toBe('');\n        expect(auth.extractBearerToken('Bearer token1 token2')).toBe('token1');\n      });\n    });\n\n    describe('token verification', () => {\n      it('should verify valid Firebase token', async () => {\n        const mockToken = {\n          uid: 'test-user-id',\n          email: 'test@example.com',\n          email_verified: true,\n          exp: Math.floor(Date.now() / 1000) + 3600,\n          firebase: { sign_in_provider: 'password' }\n        };\n\n        mockFirebaseAuth.verifyIdToken.mockResolvedValue(mockToken);\n        await auth.initialize();\n\n        const result = await auth.verifyToken('valid-token');\n\n        expect(result.valid).toBe(true);\n        expect(result.user?.uid).toBe('test-user-id');\n        expect(result.user?.email).toBe('test@example.com');\n        expect(result.user?.provider).toBe('firebase');\n      });\n\n      it('should handle expired tokens', async () => {\n        mockFirebaseAuth.verifyIdToken.mockRejectedValue({ \n          code: 'auth/id-token-expired' \n        });\n        await auth.initialize();\n\n        const result = await auth.verifyToken('expired-token');\n\n        expect(result.valid).toBe(false);\n        expect(result.errorCode).toBe(AuthErrorCode.EXPIRED_TOKEN);\n      });\n\n      it('should handle invalid tokens', async () => {\n        mockFirebaseAuth.verifyIdToken.mockRejectedValue(new Error('Invalid token'));\n        await auth.initialize();\n\n        const result = await auth.verifyToken('invalid-token');\n\n        expect(result.valid).toBe(false);\n        expect(result.errorCode).toBe(AuthErrorCode.FIREBASE_ERROR);\n      });\n\n      it('should update metrics on token verification', async () => {\n        mockFirebaseAuth.verifyIdToken.mockResolvedValue({\n          uid: 'test-user',\n          email: 'test@example.com',\n          email_verified: true,\n          exp: Math.floor(Date.now() / 1000) + 3600\n        });\n        await auth.initialize();\n\n        await auth.verifyToken('valid-token');\n        \n        const metrics = auth.getMetrics();\n        expect(metrics.totalRequests).toBe(1);\n        expect(metrics.successfulAuth).toBe(1);\n        expect(metrics.failedAuth).toBe(0);\n      });\n    });\n\n    describe('role validation', () => {\n      const mockUser = {\n        uid: 'test-user',\n        email: 'test@example.com',\n        email_verified: true,\n        custom_claims: { roles: ['user', 'editor'] },\n        provider: 'firebase' as const\n      };\n\n      it('should validate user roles correctly', () => {\n        expect(auth.hasRequiredRoles(mockUser, ['user'])).toBe(true);\n        expect(auth.hasRequiredRoles(mockUser, ['admin'])).toBe(false);\n        expect(auth.hasRequiredRoles(mockUser, ['user', 'admin'])).toBe(true); // OR logic\n        expect(auth.hasRequiredRoles(mockUser, [])).toBe(true); // No roles required\n      });\n\n      it('should handle users without roles', () => {\n        const userWithoutRoles = { ...mockUser, custom_claims: {} };\n        expect(auth.hasRequiredRoles(userWithoutRoles, ['user'])).toBe(false);\n        expect(auth.hasRequiredRoles(userWithoutRoles, [])).toBe(true);\n      });\n    });\n\n    describe('session cookie verification', () => {\n      it('should verify valid session cookie', async () => {\n        const mockClaims = {\n          uid: 'test-user',\n          email: 'test@example.com',\n          email_verified: true,\n          exp: Math.floor(Date.now() / 1000) + 3600\n        };\n\n        mockFirebaseAuth.verifySessionCookie.mockResolvedValue(mockClaims);\n        await auth.initialize();\n\n        const result = await auth.verifySessionCookie('valid-session');\n\n        expect(result.valid).toBe(true);\n        expect(result.user?.uid).toBe('test-user');\n      });\n\n      it('should handle invalid session cookie', async () => {\n        mockFirebaseAuth.verifySessionCookie.mockRejectedValue(new Error('Invalid session'));\n        await auth.initialize();\n\n        const result = await auth.verifySessionCookie('invalid-session');\n\n        expect(result.valid).toBe(false);\n        expect(result.errorCode).toBe(AuthErrorCode.INVALID_TOKEN);\n      });\n    });\n\n    describe('health check', () => {\n      it('should return healthy status when initialized', async () => {\n        await auth.initialize();\n        const health = await auth.healthCheck();\n\n        expect(health.healthy).toBe(true);\n        expect(health.details.initialized).toBe(true);\n        expect(health.details.firebase).toBe(true);\n      });\n\n      it('should return unhealthy status when not initialized', async () => {\n        const health = await auth.healthCheck();\n\n        expect(health.healthy).toBe(false);\n        expect(health.details.initialized).toBe(false);\n      });\n    });\n\n    describe('metrics', () => {\n      it('should track authentication metrics', async () => {\n        await auth.initialize();\n        mockFirebaseAuth.verifyIdToken.mockResolvedValue({\n          uid: 'test-user',\n          email: 'test@example.com',\n          email_verified: true,\n          exp: Math.floor(Date.now() / 1000) + 3600\n        });\n\n        // Successful auth\n        await auth.verifyToken('valid-token');\n        \n        // Failed auth\n        mockFirebaseAuth.verifyIdToken.mockRejectedValue(new Error('Invalid'));\n        await auth.verifyToken('invalid-token');\n\n        const metrics = auth.getMetrics();\n        expect(metrics.totalRequests).toBe(2);\n        expect(metrics.successfulAuth).toBe(1);\n        expect(metrics.failedAuth).toBe(1);\n        expect(metrics.errorsByCode[AuthErrorCode.FIREBASE_ERROR]).toBe(1);\n      });\n\n      it('should reset metrics', async () => {\n        await auth.initialize();\n        await auth.verifyToken('test-token');\n        \n        auth.resetMetrics();\n        \n        const metrics = auth.getMetrics();\n        expect(metrics.totalRequests).toBe(0);\n        expect(metrics.successfulAuth).toBe(0);\n        expect(metrics.failedAuth).toBe(0);\n      });\n    });\n  });\n\n  describe('UnifiedAuthError', () => {\n    it('should create error with correct properties', () => {\n      const error = new UnifiedAuthError(\n        AuthErrorCode.INVALID_TOKEN,\n        'Test error',\n        { detail: 'test' },\n        401\n      );\n\n      expect(error.code).toBe(AuthErrorCode.INVALID_TOKEN);\n      expect(error.message).toBe('Test error');\n      expect(error.details).toEqual({ detail: 'test' });\n      expect(error.statusCode).toBe(401);\n      expect(error.name).toBe('UnifiedAuthError');\n    });\n\n    it('should create predefined error types', () => {\n      expect(UnifiedAuthError.missingToken().code).toBe(AuthErrorCode.MISSING_TOKEN);\n      expect(UnifiedAuthError.invalidToken().code).toBe(AuthErrorCode.INVALID_TOKEN);\n      expect(UnifiedAuthError.expiredToken().code).toBe(AuthErrorCode.EXPIRED_TOKEN);\n      expect(UnifiedAuthError.insufficientPermissions(['admin']).code).toBe(AuthErrorCode.INSUFFICIENT_PERMISSIONS);\n      expect(UnifiedAuthError.serviceUnavailable('firebase').code).toBe(AuthErrorCode.SERVICE_UNAVAILABLE);\n    });\n  });\n\n  describe('TokenUtils', () => {\n    const mockJWT = 'eyJhbGciOiJSUzI1NiJ9.eyJ1aWQiOiJ0ZXN0LXVzZXIiLCJleHAiOjE3MDAwMDAwMDB9.signature';\n\n    it('should parse JWT token info', () => {\n      const tokenInfo = TokenUtils.parseTokenInfo(mockJWT);\n      \n      expect(tokenInfo).toBeTruthy();\n      expect(tokenInfo?.provider).toBe('firebase');\n      expect(tokenInfo?.userId).toBe('test-user');\n      expect(tokenInfo?.expiresAt).toBeDefined();\n    });\n\n    it('should handle non-JWT tokens', () => {\n      const tokenInfo = TokenUtils.parseTokenInfo('simple-token');\n      \n      expect(tokenInfo).toBeTruthy();\n      expect(tokenInfo?.provider).toBe('custom');\n      expect(tokenInfo?.value).toBe('simple-token');\n    });\n\n    it('should return null for malformed tokens', () => {\n      const tokenInfo = TokenUtils.parseTokenInfo('malformed.jwt');\n      expect(tokenInfo).toBeNull();\n    });\n\n    it('should check token expiry', () => {\n      const expiredJWT = 'eyJhbGciOiJSUzI1NiJ9.eyJ1aWQiOiJ0ZXN0IiwiZXhwIjoxNTAwMDAwMDAwfQ.signature';\n      const futureJWT = `eyJhbGciOiJSUzI1NiJ9.${Buffer.from(JSON.stringify({\n        uid: 'test',\n        exp: Math.floor(Date.now() / 1000) + 3600\n      })).toString('base64url')}.signature`;\n\n      expect(TokenUtils.isTokenExpired(expiredJWT)).toBe(true);\n      expect(TokenUtils.isTokenExpired(futureJWT)).toBe(false);\n      expect(TokenUtils.isTokenExpired('simple-token')).toBe(false);\n    });\n  });\n\n  describe('AuthPerformanceMonitor', () => {\n    let monitor: AuthPerformanceMonitor;\n\n    beforeEach(() => {\n      monitor = AuthPerformanceMonitor.getInstance();\n      monitor.reset();\n    });\n\n    it('should record timing measurements', () => {\n      monitor.recordTiming('test-operation', 100);\n      monitor.recordTiming('test-operation', 200);\n\n      const stats = monitor.getStats('test-operation');\n      expect(stats.count).toBe(2);\n      expect(stats.average).toBe(150);\n      expect(stats.min).toBe(100);\n      expect(stats.max).toBe(200);\n    });\n\n    it('should provide timing function', (done) => {\n      const endTiming = monitor.startTiming('test-timing');\n      \n      setTimeout(() => {\n        const duration = endTiming();\n        expect(duration).toBeGreaterThan(0);\n        \n        const stats = monitor.getStats('test-timing');\n        expect(stats.count).toBe(1);\n        done();\n      }, 10);\n    });\n\n    it('should calculate percentiles correctly', () => {\n      const values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n      values.forEach(val => monitor.recordTiming('percentile-test', val));\n\n      const stats = monitor.getStats('percentile-test');\n      expect(stats.median).toBe(5);\n      expect(stats.p95).toBe(10);\n      expect(stats.p99).toBe(10);\n    });\n\n    it('should limit stored measurements', () => {\n      // Record more than 100 measurements\n      for (let i = 0; i < 150; i++) {\n        monitor.recordTiming('limit-test', i);\n      }\n\n      const stats = monitor.getStats('limit-test');\n      expect(stats.count).toBe(100); // Should cap at 100\n    });\n  });\n\n  describe('Utility Functions', () => {\n    describe('verifyAuthHeader', () => {\n      beforeEach(async () => {\n        const auth = getUnifiedAuth();\n        await auth.initialize();\n      });\n\n      it('should verify valid auth header', async () => {\n        mockFirebaseAuth.verifyIdToken.mockResolvedValue({\n          uid: 'test-user',\n          email: 'test@example.com',\n          email_verified: true,\n          exp: Math.floor(Date.now() / 1000) + 3600\n        });\n\n        const result = await verifyAuthHeader('Bearer valid-token');\n\n        expect(result.success).toBe(true);\n        expect(result.user?.uid).toBe('test-user');\n      });\n\n      it('should handle missing auth header', async () => {\n        const result = await verifyAuthHeader(null);\n\n        expect(result.success).toBe(false);\n        expect(result.errorCode).toBe(AuthErrorCode.MISSING_TOKEN);\n      });\n\n      it('should handle invalid token format', async () => {\n        const result = await verifyAuthHeader('Invalid format');\n\n        expect(result.success).toBe(false);\n        expect(result.errorCode).toBe(AuthErrorCode.MISSING_TOKEN);\n      });\n    });\n\n    describe('createAuthError', () => {\n      it('should create auth error with all properties', () => {\n        const error = createAuthError(\n          AuthErrorCode.INVALID_TOKEN,\n          'Test error',\n          { test: true },\n          401\n        );\n\n        expect(error).toBeInstanceOf(UnifiedAuthError);\n        expect(error.code).toBe(AuthErrorCode.INVALID_TOKEN);\n        expect(error.message).toBe('Test error');\n        expect(error.details).toEqual({ test: true });\n        expect(error.statusCode).toBe(401);\n      });\n    });\n  });\n\n  describe('Singleton Pattern', () => {\n    it('should return same instance', () => {\n      const instance1 = getUnifiedAuth();\n      const instance2 = getUnifiedAuth();\n      expect(instance1).toBe(instance2);\n    });\n\n    it('should maintain state across instances', async () => {\n      const instance1 = getUnifiedAuth();\n      await instance1.initialize();\n\n      const instance2 = getUnifiedAuth();\n      expect(instance2['initialized']).toBe(true);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/shared/auth/__tests__/e2e-auth-flow.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[516,519],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[516,519],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":31,"column":30,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":31,"endColumn":61}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * End-to-End Authentication Flow Tests\n * \n * Tests complete authentication flows across platforms\n */\n\nimport { \n  UnifiedAuth,\n  getUnifiedAuth,\n  verifyAuthHeader,\n  authSystemHealthCheck\n} from '../index';\n\n// Mock Firebase Admin\njest.mock('@/lib/firebase/admin', () => ({\n  getAdminAuth: jest.fn(() => ({\n    verifyIdToken: jest.fn(),\n    verifySessionCookie: jest.fn(),\n    getUser: jest.fn()\n  }))\n}));\n\ndescribe('End-to-End Authentication Flow', () => {\n  let auth: UnifiedAuth;\n  let mockFirebaseAuth: any;\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n    auth = getUnifiedAuth();\n    \n    const { getAdminAuth } = require('@/lib/firebase/admin');\n    mockFirebaseAuth = getAdminAuth();\n  });\n\n  describe('Complete Authentication Flow', () => {\n    it('should handle complete user authentication lifecycle', async () => {\n      // 1. Initialize authentication system\n      await auth.initialize();\n      expect(auth['initialized']).toBe(true);\n\n      // 2. Simulate user login with valid token\n      const mockUser = {\n        uid: 'user123',\n        email: 'user@example.com',\n        email_verified: true,\n        exp: Math.floor(Date.now() / 1000) + 3600,\n        custom_claims: { roles: ['user'] }\n      };\n\n      mockFirebaseAuth.verifyIdToken.mockResolvedValue(mockUser);\n\n      // 3. Verify token through unified system\n      const authResult = await verifyAuthHeader('Bearer valid-jwt-token');\n      expect(authResult.success).toBe(true);\n      expect(authResult.user?.uid).toBe('user123');\n      expect(authResult.user?.email).toBe('user@example.com');\n\n      // 4. Check metrics\n      const metrics = auth.getMetrics();\n      expect(metrics.totalRequests).toBe(1);\n      expect(metrics.successfulAuth).toBe(1);\n\n      // 5. Simulate role-based access\n      const hasUserRole = auth.hasRequiredRoles(authResult.user!, ['user']);\n      const hasAdminRole = auth.hasRequiredRoles(authResult.user!, ['admin']);\n      \n      expect(hasUserRole).toBe(true);\n      expect(hasAdminRole).toBe(false);\n    });\n\n    it('should handle authentication failure and recovery', async () => {\n      await auth.initialize();\n\n      // 1. Simulate invalid token\n      mockFirebaseAuth.verifyIdToken.mockRejectedValue(new Error('Invalid token'));\n      \n      const failedResult = await verifyAuthHeader('Bearer invalid-token');\n      expect(failedResult.success).toBe(false);\n\n      // 2. Check error metrics\n      let metrics = auth.getMetrics();\n      expect(metrics.failedAuth).toBe(1);\n\n      // 3. Simulate token refresh/recovery\n      mockFirebaseAuth.verifyIdToken.mockResolvedValue({\n        uid: 'user123',\n        email: 'user@example.com',\n        email_verified: true,\n        exp: Math.floor(Date.now() / 1000) + 3600\n      });\n\n      const recoveredResult = await verifyAuthHeader('Bearer refreshed-token');\n      expect(recoveredResult.success).toBe(true);\n\n      // 4. Verify recovery metrics\n      metrics = auth.getMetrics();\n      expect(metrics.successfulAuth).toBe(1);\n      expect(metrics.failedAuth).toBe(1);\n      expect(metrics.totalRequests).toBe(2);\n    });\n  });\n\n  describe('Cross-Platform Consistency', () => {\n    it('should provide consistent results across all adapters', async () => {\n      await auth.initialize();\n      \n      const mockUser = {\n        uid: 'consistent-user',\n        email: 'test@example.com',\n        email_verified: true,\n        exp: Math.floor(Date.now() / 1000) + 3600\n      };\n\n      mockFirebaseAuth.verifyIdToken.mockResolvedValue(mockUser);\n\n      // Test core verification\n      const coreResult = await auth.verifyToken('test-token');\n      expect(coreResult.valid).toBe(true);\n      expect(coreResult.user?.uid).toBe('consistent-user');\n\n      // Test utility function\n      const utilResult = await verifyAuthHeader('Bearer test-token');\n      expect(utilResult.success).toBe(true);\n      expect(utilResult.user?.uid).toBe('consistent-user');\n\n      // Results should be consistent\n      expect(coreResult.user?.uid).toBe(utilResult.user?.uid);\n      expect(coreResult.user?.email).toBe(utilResult.user?.email);\n    });\n  });\n\n  describe('Performance and Scalability', () => {\n    it('should handle concurrent authentication requests', async () => {\n      await auth.initialize();\n      \n      mockFirebaseAuth.verifyIdToken.mockResolvedValue({\n        uid: 'concurrent-user',\n        email: 'concurrent@example.com',\n        email_verified: true,\n        exp: Math.floor(Date.now() / 1000) + 3600\n      });\n\n      // Simulate multiple concurrent requests\n      const promises = Array.from({ length: 10 }, (_, i) => \n        verifyAuthHeader(`Bearer token-${i}`)\n      );\n\n      const results = await Promise.all(promises);\n\n      // All should succeed\n      results.forEach(result => {\n        expect(result.success).toBe(true);\n        expect(result.user?.uid).toBe('concurrent-user');\n      });\n\n      // Check metrics\n      const metrics = auth.getMetrics();\n      expect(metrics.totalRequests).toBe(10);\n      expect(metrics.successfulAuth).toBe(10);\n    });\n\n    it('should maintain performance under load', async () => {\n      await auth.initialize();\n      \n      mockFirebaseAuth.verifyIdToken.mockImplementation(async () => {\n        // Simulate some processing time\n        await new Promise(resolve => setTimeout(resolve, 10));\n        return {\n          uid: 'perf-user',\n          email: 'perf@example.com',\n          email_verified: true,\n          exp: Math.floor(Date.now() / 1000) + 3600\n        };\n      });\n\n      const startTime = Date.now();\n      \n      // Run 50 authentication requests\n      const promises = Array.from({ length: 50 }, () => \n        verifyAuthHeader('Bearer perf-token')\n      );\n\n      await Promise.all(promises);\n      \n      const endTime = Date.now();\n      const totalTime = endTime - startTime;\n\n      // Should complete within reasonable time (adjust threshold as needed)\n      expect(totalTime).toBeLessThan(2000); // 2 seconds for 50 requests\n\n      // Check performance metrics\n      const metrics = auth.getMetrics();\n      expect(metrics.averageVerificationTime).toBeGreaterThan(0);\n      expect(metrics.averageVerificationTime).toBeLessThan(100); // 100ms average\n    });\n  });\n\n  describe('Error Resilience', () => {\n    it('should recover from Firebase service outage', async () => {\n      await auth.initialize();\n\n      // 1. Simulate service outage\n      mockFirebaseAuth.verifyIdToken.mockRejectedValue(new Error('Service unavailable'));\n\n      const outageResult = await verifyAuthHeader('Bearer token-during-outage');\n      expect(outageResult.success).toBe(false);\n\n      // 2. Simulate service recovery\n      mockFirebaseAuth.verifyIdToken.mockResolvedValue({\n        uid: 'recovered-user',\n        email: 'recovered@example.com',\n        email_verified: true,\n        exp: Math.floor(Date.now() / 1000) + 3600\n      });\n\n      const recoveryResult = await verifyAuthHeader('Bearer token-after-recovery');\n      expect(recoveryResult.success).toBe(true);\n      expect(recoveryResult.user?.uid).toBe('recovered-user');\n    });\n\n    it('should handle malformed tokens gracefully', async () => {\n      await auth.initialize();\n\n      const malformedTests = [\n        'Bearer', // Missing token\n        'Bearer ', // Empty token\n        'Basic token', // Wrong auth type\n        'Bearer invalid..jwt', // Malformed JWT\n        '', // Empty header\n        'Bearer token-with-special-chars-!@#$%'\n      ];\n\n      for (const header of malformedTests) {\n        const result = await verifyAuthHeader(header);\n        expect(result.success).toBe(false);\n        // Should not throw errors\n      }\n    });\n  });\n\n  describe('Health Monitoring', () => {\n    it('should provide accurate system health status', async () => {\n      // 1. Check health before initialization\n      let health = await authSystemHealthCheck();\n      expect(health.healthy).toBe(false);\n\n      // 2. Initialize and check health\n      await auth.initialize();\n      health = await authSystemHealthCheck();\n      expect(health.healthy).toBe(true);\n      expect(health.core.details.initialized).toBe(true);\n      expect(health.core.details.firebase).toBe(true);\n\n      // 3. Check metrics are included\n      expect(health.metrics.core).toBeDefined();\n      expect(health.metrics.performance).toBeDefined();\n    });\n\n    it('should detect authentication system degradation', async () => {\n      await auth.initialize();\n\n      // Simulate some failures to trigger degradation\n      mockFirebaseAuth.verifyIdToken.mockRejectedValue(new Error('Intermittent failure'));\n\n      // Generate some failures\n      for (let i = 0; i < 5; i++) {\n        await verifyAuthHeader('Bearer failing-token');\n      }\n\n      const metrics = auth.getMetrics();\n      expect(metrics.failedAuth).toBe(5);\n      expect(metrics.totalRequests).toBe(5);\n\n      // Health check should still be healthy (system operational)\n      // but metrics should show the issues\n      const health = await authSystemHealthCheck();\n      expect(health.healthy).toBe(true); // System is up\n      expect(health.metrics.core.failedAuth).toBe(5); // But has failures\n    });\n  });\n\n  describe('Security Features', () => {\n    it('should handle token expiry correctly', async () => {\n      await auth.initialize();\n\n      // Simulate expired token\n      mockFirebaseAuth.verifyIdToken.mockRejectedValue({\n        code: 'auth/id-token-expired'\n      });\n\n      const result = await verifyAuthHeader('Bearer expired-token');\n      \n      expect(result.success).toBe(false);\n      expect(result.errorCode).toBe('EXPIRED_TOKEN');\n    });\n\n    it('should validate required roles strictly', async () => {\n      await auth.initialize();\n\n      const userWithRoles = {\n        uid: 'role-user',\n        email: 'role@example.com',\n        email_verified: true,\n        exp: Math.floor(Date.now() / 1000) + 3600,\n        custom_claims: { roles: ['user', 'editor'] }\n      };\n\n      mockFirebaseAuth.verifyIdToken.mockResolvedValue(userWithRoles);\n      const result = await verifyAuthHeader('Bearer role-token');\n      \n      expect(result.success).toBe(true);\n      \n      // Test various role combinations\n      expect(auth.hasRequiredRoles(result.user!, ['user'])).toBe(true);\n      expect(auth.hasRequiredRoles(result.user!, ['editor'])).toBe(true);\n      expect(auth.hasRequiredRoles(result.user!, ['admin'])).toBe(false);\n      expect(auth.hasRequiredRoles(result.user!, ['user', 'admin'])).toBe(true); // OR logic\n      expect(auth.hasRequiredRoles(result.user!, ['admin', 'superuser'])).toBe(false);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/shared/auth/__tests__/next-adapter.integration.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[534,537],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[534,537],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":30,"column":30,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":30,"endColumn":61}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Integration Tests for Next.js Unified Auth Middleware\n * \n * Validates the Next.js adapter in a simulated environment\n */\n\nimport { NextRequest } from 'next/server';\nimport { \n  nextAuthMiddleware,\n  withNextAuth,\n  withNextAdminAuth\n} from '../adapters/next-auth';\nimport { getUnifiedAuth } from '../core';\n\n// Mock dependencies\njest.mock('@/lib/firebase/admin', () => ({\n  getAdminAuth: jest.fn(() => ({\n    verifyIdToken: jest.fn()\n  }))\n}));\n\ndescribe('Next.js Auth Middleware Integration', () => {\n  let mockFirebaseAuth: any;\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n    const auth = getUnifiedAuth();\n    await auth.initialize();\n    \n    const { getAdminAuth } = require('@/lib/firebase/admin');\n    mockFirebaseAuth = getAdminAuth();\n  });\n\n  describe('nextAuthMiddleware', () => {\n    it('should succeed with valid token', async () => {\n      mockFirebaseAuth.verifyIdToken.mockResolvedValue({ uid: 'test-user' });\n      \n      const request = new NextRequest('https://test.com/api/protected', {\n        headers: { Authorization: 'Bearer valid-token' }\n      });\n\n      const result = await nextAuthMiddleware(request);\n\n      expect(result.success).toBe(true);\n      expect(result.user?.uid).toBe('test-user');\n      expect(result.response).toBeUndefined();\n    });\n\n    it('should fail with missing token and return 401 response', async () => {\n      const request = new NextRequest('https://test.com/api/protected');\n      const result = await nextAuthMiddleware(request);\n\n      expect(result.success).toBe(false);\n      expect(result.response?.status).toBe(401);\n    });\n\n    it('should fail with invalid token and return 401 response', async () => {\n      mockFirebaseAuth.verifyIdToken.mockRejectedValue(new Error('Invalid'));\n      \n      const request = new NextRequest('https://test.com/api/protected', {\n        headers: { Authorization: 'Bearer invalid-token' }\n      });\n\n      const result = await nextAuthMiddleware(request);\n\n      expect(result.success).toBe(false);\n      expect(result.response?.status).toBe(401);\n    });\n\n    it('should handle role-based access control', async () => {\n      mockFirebaseAuth.verifyIdToken.mockResolvedValue({\n        uid: 'admin-user',\n        custom_claims: { roles: ['admin'] }\n      });\n\n      const request = new NextRequest('https://test.com/api/admin', {\n        headers: { Authorization: 'Bearer admin-token' }\n      });\n\n      // Should succeed with correct role\n      const successResult = await nextAuthMiddleware(request, { requiredRoles: ['admin'] });\n      expect(successResult.success).toBe(true);\n\n      // Should fail with missing role\n      const failureResult = await nextAuthMiddleware(request, { requiredRoles: ['superuser'] });\n      expect(failureResult.success).toBe(false);\n      expect(failureResult.response?.status).toBe(403);\n    });\n  });\n\n  describe('withNextAuth HOF', () => {\n    it('should call handler with authenticated user', async () => {\n      mockFirebaseAuth.verifyIdToken.mockResolvedValue({ uid: 'test-user' });\n      \n      const handler = jest.fn((req, user) => {\n        expect(user.uid).toBe('test-user');\n        return new Response('Success');\n      });\n\n      const request = new NextRequest('https://test.com/api/protected', {\n        headers: { Authorization: 'Bearer valid-token' }\n      });\n\n      const protectedHandler = withNextAuth(handler);\n      await protectedHandler(request);\n\n      expect(handler).toHaveBeenCalled();\n    });\n\n    it('should not call handler on authentication failure', async () => {\n      mockFirebaseAuth.verifyIdToken.mockRejectedValue(new Error('Invalid'));\n      \n      const handler = jest.fn();\n\n      const request = new NextRequest('https://test.com/api/protected', {\n        headers: { Authorization: 'Bearer invalid-token' }\n      });\n\n      const protectedHandler = withNextAuth(handler);\n      const response = await protectedHandler(request);\n\n      expect(handler).not.toHaveBeenCalled();\n      expect(response.status).toBe(401);\n    });\n\n    it('should skip authentication when specified', async () => {\n      const handler = jest.fn();\n      const request = new NextRequest('https://test.com/api/public');\n\n      const publicHandler = withNextAuth(handler, { skipAuth: true });\n      await publicHandler(request);\n\n      expect(handler).toHaveBeenCalledWith(request, null, expect.anything());\n    });\n  });\n\n  describe('withNextAdminAuth HOF', () => {\n    it('should grant access to admin users', async () => {\n      mockFirebaseAuth.verifyIdToken.mockResolvedValue({\n        uid: 'admin-user',\n        custom_claims: { roles: ['admin'] }\n      });\n\n      const handler = jest.fn();\n      const request = new NextRequest('https://test.com/api/admin', {\n        headers: { Authorization: 'Bearer admin-token' }\n      });\n\n      const adminHandler = withNextAdminAuth(handler);\n      await adminHandler(request);\n\n      expect(handler).toHaveBeenCalled();\n    });\n\n    it('should deny access to non-admin users', async () => {\n      mockFirebaseAuth.verifyIdToken.mockResolvedValue({ uid: 'non-admin' });\n\n      const handler = jest.fn();\n      const request = new NextRequest('https://test.com/api/admin', {\n        headers: { Authorization: 'Bearer user-token' }\n      });\n\n      const adminHandler = withNextAdminAuth(handler);\n      const response = await adminHandler(request);\n\n      expect(handler).not.toHaveBeenCalled();\n      expect(response.status).toBe(403);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/shared/auth/adapters/azure-auth.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[689,692],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[689,692],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":120,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3242,3245],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3242,3245],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":130,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3490,3493],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3490,3493],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":145,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4035,4038],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4035,4038],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":184,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":184,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5137,5140],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5137,5140],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":201,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5482,5485],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5482,5485],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":252,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":252,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6844,6847],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6844,6847],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":267,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":267,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7170,7173],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7170,7173],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Azure Functions Authentication Middleware Adapter\n * \n * Provides Azure Functions-specific authentication middleware using the unified auth library\n */\n\nimport { \n  getUnifiedAuth, \n  verifyAuthHeader, \n  UnifiedAuthError,\n  AuthPerformanceMonitor \n} from '../core';\nimport { \n  AuthenticatedUser, \n  AuthMiddlewareOptions, \n  AuthMiddlewareResult,\n  AuthErrorCode,\n  AzureContext,\n  AzureRequest \n} from '../types';\n\n// ===== AZURE FUNCTIONS MIDDLEWARE =====\n\n/**\n * Core authentication middleware for Azure Functions\n */\nexport async function azureAuthMiddleware(\n  context: AzureContext,\n  req: AzureRequest,\n  options: AuthMiddlewareOptions = {}\n): Promise<AuthMiddlewareResult<any>> {\n  const monitor = AuthPerformanceMonitor.getInstance();\n  const endTiming = monitor.startTiming('azure-auth-middleware');\n\n  try {\n    const authHeader = req.headers.authorization || req.headers.Authorization;\n    const authResult = await verifyAuthHeader(authHeader);\n\n    if (!authResult.success || !authResult.user) {\n      const error = new UnifiedAuthError(\n        authResult.errorCode || AuthErrorCode.INVALID_TOKEN,\n        authResult.error || 'Authentication failed'\n      );\n\n      return {\n        success: false,\n        user: null,\n        response: createAzureErrorResponse(error),\n        error: error.message,\n        errorCode: error.code\n      };\n    }\n\n    // Check roles if required\n    if (options.requiredRoles?.length) {\n      const auth = getUnifiedAuth();\n      if (!auth.hasRequiredRoles(authResult.user, options.requiredRoles)) {\n        const error = UnifiedAuthError.insufficientPermissions(options.requiredRoles);\n        return {\n          success: false,\n          user: null,\n          response: createAzureErrorResponse(error),\n          error: error.message,\n          errorCode: error.code\n        };\n      }\n    }\n\n    // Custom validation\n    if (options.customValidator) {\n      const isValid = await options.customValidator(authResult.user);\n      if (!isValid) {\n        const error = new UnifiedAuthError(\n          AuthErrorCode.INSUFFICIENT_PERMISSIONS,\n          'Custom validation failed'\n        );\n        return {\n          success: false,\n          user: null,\n          response: createAzureErrorResponse(error),\n          error: error.message,\n          errorCode: error.code\n        };\n      }\n    }\n\n    // Log successful authentication\n    context.log.info(`Authenticated user: ${authResult.user.uid} (${authResult.user.email})`);\n\n    endTiming();\n    return {\n      success: true,\n      user: authResult.user\n    };\n\n  } catch (error) {\n    endTiming();\n    context.log.error(`Azure Functions auth middleware error: ${error}`);\n    \n    const authError = error instanceof UnifiedAuthError ? error : \n      new UnifiedAuthError(AuthErrorCode.UNKNOWN_ERROR, 'Authentication system error');\n\n    return {\n      success: false,\n      user: null,\n      response: createAzureErrorResponse(authError),\n      error: authError.message,\n      errorCode: authError.code\n    };\n  }\n}\n\n/**\n * Role-based authentication middleware for Azure Functions\n */\nexport async function azureRoleMiddleware(\n  context: AzureContext,\n  req: AzureRequest,\n  requiredRoles: string[]\n): Promise<AuthMiddlewareResult<any>> {\n  return azureAuthMiddleware(context, req, { requiredRoles });\n}\n\n/**\n * Admin-only middleware for Azure Functions\n */\nexport async function azureAdminMiddleware(\n  context: AzureContext,\n  req: AzureRequest\n): Promise<AuthMiddlewareResult<any>> {\n  return azureAuthMiddleware(context, req, { requiredRoles: ['admin'] });\n}\n\n// ===== HIGHER-ORDER FUNCTIONS =====\n\n/**\n * Create authenticated Azure Function wrapper\n */\nexport function createAuthenticatedAzureFunction(\n  handlerFunction: (context: AzureContext, req: AzureRequest, user: AuthenticatedUser) => Promise<void>,\n  options: AuthMiddlewareOptions = {}\n) {\n  return async function (context: AzureContext, req: AzureRequest): Promise<void> {\n    if (options.skipAuth) {\n      return await handlerFunction(context, req, null as any);\n    }\n\n    const authResult = await azureAuthMiddleware(context, req, options);\n\n    if (!authResult.success || !authResult.user) {\n      context.res = authResult.response;\n      return;\n    }\n\n    // Call the actual handler with the authenticated user\n    return await handlerFunction(context, req, authResult.user);\n  };\n}\n\n/**\n * Create admin-only Azure Function wrapper\n */\nexport function createAdminAzureFunction(\n  handlerFunction: (context: AzureContext, req: AzureRequest, user: AuthenticatedUser) => Promise<void>\n) {\n  return createAuthenticatedAzureFunction(handlerFunction, { requiredRoles: ['admin'] });\n}\n\n/**\n * Create role-based Azure Function wrapper\n */\nexport function createRoleBasedAzureFunction(\n  handlerFunction: (context: AzureContext, req: AzureRequest, user: AuthenticatedUser) => Promise<void>,\n  requiredRoles: string[]\n) {\n  return createAuthenticatedAzureFunction(handlerFunction, { requiredRoles });\n}\n\n// ===== UTILITY FUNCTIONS =====\n\n/**\n * Create standardized error response for Azure Functions\n */\nfunction createAzureErrorResponse(error: UnifiedAuthError): any {\n  return {\n    status: error.statusCode || 500,\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      error: error.message,\n      code: error.code,\n      details: error.details\n    })\n  };\n}\n\n/**\n * Create health check response for Azure Functions\n */\nexport function createAzureHealthResponse(): any {\n  return {\n    status: 200,\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      service: 'Azure Functions Unified Auth Middleware'\n    })\n  };\n}\n\n/**\n * Extract user from Azure Functions request\n */\nexport async function extractUserFromAzureRequest(\n  context: AzureContext,\n  req: AzureRequest\n): Promise<AuthenticatedUser | null> {\n  try {\n    const authHeader = req.headers.authorization || req.headers.Authorization;\n    const authResult = await verifyAuthHeader(authHeader);\n    \n    return authResult.success ? authResult.user : null;\n  } catch (error) {\n    context.log.error(`Failed to extract user from Azure request: ${error}`);\n    return null;\n  }\n}\n\n// ===== LEGACY COMPATIBILITY =====\n\n/**\n * Legacy Azure Functions middleware format (for backward compatibility)\n */\nexport async function legacyAzureAuthMiddleware(context: AzureContext, req: AzureRequest) {\n  const authResult = await azureAuthMiddleware(context, req);\n  \n  // Return in the old format for backward compatibility\n  return {\n    success: authResult.success,\n    user: authResult.user,\n    response: authResult.response\n  };\n}\n\n/**\n * Initialize Firebase for Azure Functions (backward compatibility)\n */\nexport async function initializeFirebaseForAzure(): Promise<any> {\n  const auth = getUnifiedAuth();\n  await auth.initialize();\n  return auth;\n}\n\n// ===== PERFORMANCE HELPERS =====\n\n/**\n * Benchmark Azure Functions authentication performance\n */\nexport async function benchmarkAzureAuth(\n  context: AzureContext,\n  req: AzureRequest,\n  iterations: number = 100\n): Promise<Record<string, any>> {\n  const monitor = AuthPerformanceMonitor.getInstance();\n  const results: number[] = [];\n\n  for (let i = 0; i < iterations; i++) {\n    const endTiming = monitor.startTiming('benchmark');\n    await azureAuthMiddleware(context, req);\n    const duration = endTiming();\n    results.push(duration);\n  }\n\n  const sorted = results.sort((a, b) => a - b);\n  const sum = results.reduce((a, b) => a + b, 0);\n\n  const stats = {\n    iterations,\n    average: sum / iterations,\n    median: sorted[Math.floor(sorted.length / 2)],\n    p95: sorted[Math.floor(sorted.length * 0.95)],\n    p99: sorted[Math.floor(sorted.length * 0.99)],\n    min: sorted[0],\n    max: sorted[sorted.length - 1]\n  };\n\n  context.log.info(`Azure auth performance benchmark: ${JSON.stringify(stats)}`);\n  return stats;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/shared/auth/adapters/express-auth.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[877,880],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[877,880],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":123,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":123,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":203,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":203,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5520,5523],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5520,5523],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":226,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":226,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6091,6094],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6091,6094],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'mockNext' is assigned a value but never used.","line":239,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":239,"endColumn":19}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Express.js Authentication Middleware Adapter\n * \n * Provides Express.js-specific authentication middleware using the unified auth library\n */\n\nimport { \n  getUnifiedAuth, \n  verifyAuthHeader, \n  UnifiedAuthError,\n  AuthPerformanceMonitor \n} from '../core';\nimport { \n  AuthenticatedUser, \n  AuthMiddlewareOptions, \n  AuthErrorCode,\n  ExpressRequest,\n  ExpressResponse,\n  ExpressNext \n} from '../types';\n\n// ===== EXPRESS.JS MIDDLEWARE =====\n\n/**\n * Core authentication middleware for Express.js\n */\nexport function expressAuthMiddleware(options: AuthMiddlewareOptions = {}) {\n  return async (req: ExpressRequest, res: ExpressResponse, next: ExpressNext): Promise<void> => {\n    const monitor = AuthPerformanceMonitor.getInstance();\n    const endTiming = monitor.startTiming('express-auth-middleware');\n\n    try {\n      if (options.skipAuth) {\n        req.user = null as any;\n        next();\n        return;\n      }\n\n      const authHeader = req.headers.authorization || req.headers.Authorization;\n      const authResult = await verifyAuthHeader(authHeader);\n\n      if (!authResult.success || !authResult.user) {\n        const error = new UnifiedAuthError(\n          authResult.errorCode || AuthErrorCode.INVALID_TOKEN,\n          authResult.error || 'Authentication failed'\n        );\n\n        endTiming();\n        res.status(error.statusCode || 401).json({\n          error: error.message,\n          code: error.code,\n          details: error.details\n        });\n        return;\n      }\n\n      // Check roles if required\n      if (options.requiredRoles?.length) {\n        const auth = getUnifiedAuth();\n        if (!auth.hasRequiredRoles(authResult.user, options.requiredRoles)) {\n          const error = UnifiedAuthError.insufficientPermissions(options.requiredRoles);\n          endTiming();\n          res.status(error.statusCode || 403).json({\n            error: error.message,\n            code: error.code,\n            details: error.details\n          });\n          return;\n        }\n      }\n\n      // Custom validation\n      if (options.customValidator) {\n        const isValid = await options.customValidator(authResult.user);\n        if (!isValid) {\n          const error = new UnifiedAuthError(\n            AuthErrorCode.INSUFFICIENT_PERMISSIONS,\n            'Custom validation failed'\n          );\n          endTiming();\n          res.status(error.statusCode || 403).json({\n            error: error.message,\n            code: error.code,\n            details: error.details\n          });\n          return;\n        }\n      }\n\n      // Attach user to request\n      req.user = authResult.user;\n      \n      endTiming();\n      next();\n\n    } catch (error) {\n      endTiming();\n      console.error('Express auth middleware error:', error);\n      \n      const authError = error instanceof UnifiedAuthError ? error : \n        new UnifiedAuthError(AuthErrorCode.UNKNOWN_ERROR, 'Authentication system error');\n\n      res.status(authError.statusCode || 500).json({\n        error: authError.message,\n        code: authError.code,\n        details: authError.details\n      });\n    }\n  };\n}\n\n/**\n * Optional authentication middleware (allows anonymous users)\n */\nexport function expressOptionalAuth() {\n  return async (req: ExpressRequest, res: ExpressResponse, next: ExpressNext): Promise<void> => {\n    try {\n      const authHeader = req.headers.authorization || req.headers.Authorization;\n      const authResult = await verifyAuthHeader(authHeader);\n\n      req.user = authResult.success ? (authResult.user || undefined) : undefined;\n      next();\n    } catch (error) {\n      req.user = undefined;\n      next();\n    }\n  };\n}\n\n/**\n * Role-based authentication middleware\n */\nexport function expressRoleMiddleware(requiredRoles: string[]) {\n  return expressAuthMiddleware({ requiredRoles });\n}\n\n/**\n * Admin-only middleware\n */\nexport function expressAdminMiddleware() {\n  return expressAuthMiddleware({ requiredRoles: ['admin'] });\n}\n\n// ===== UTILITY FUNCTIONS =====\n\n/**\n * Extract user from Express request\n */\nexport async function extractUserFromExpressRequest(req: ExpressRequest): Promise<AuthenticatedUser | null> {\n  try {\n    // Check if user is already attached (from middleware)\n    if (req.user) {\n      return req.user;\n    }\n\n    // Try to extract from authorization header\n    const authHeader = req.headers.authorization || req.headers.Authorization;\n    const authResult = await verifyAuthHeader(authHeader);\n    \n    return authResult.success ? authResult.user : null;\n  } catch (error) {\n    console.error('Failed to extract user from Express request:', error);\n    return null;\n  }\n}\n\n/**\n * Check if Express request is authenticated\n */\nexport function isExpressRequestAuthenticated(req: ExpressRequest): boolean {\n  return !!req.user;\n}\n\n/**\n * Get user roles from Express request\n */\nexport function getUserRoles(req: ExpressRequest): string[] {\n  return req.user?.custom_claims?.roles || [];\n}\n\n/**\n * Check if Express request user has role\n */\nexport function hasRole(req: ExpressRequest, role: string): boolean {\n  const roles = getUserRoles(req);\n  return roles.includes(role);\n}\n\n/**\n * Check if Express request user has any of the required roles\n */\nexport function hasAnyRole(req: ExpressRequest, requiredRoles: string[]): boolean {\n  const userRoles = getUserRoles(req);\n  return requiredRoles.some(role => userRoles.includes(role));\n}\n\n// ===== ERROR HANDLERS =====\n\n/**\n * Express error handler for authentication errors\n */\nexport function expressAuthErrorHandler() {\n  return (error: any, req: ExpressRequest, res: ExpressResponse, next: ExpressNext): void => {\n    if (error instanceof UnifiedAuthError) {\n      res.status(error.statusCode || 500).json({\n        error: error.message,\n        code: error.code,\n        details: error.details\n      });\n      return;\n    }\n\n    // Pass non-auth errors to next handler\n    next(error);\n  };\n}\n\n// ===== PERFORMANCE HELPERS =====\n\n/**\n * Benchmark Express authentication performance\n */\nexport async function benchmarkExpressAuth(\n  req: ExpressRequest,\n  iterations: number = 100\n): Promise<Record<string, any>> {\n  const monitor = AuthPerformanceMonitor.getInstance();\n  const results: number[] = [];\n\n  for (let i = 0; i < iterations; i++) {\n    const endTiming = monitor.startTiming('benchmark');\n    \n    // Simulate middleware execution\n    const mockRes = {\n      status: () => mockRes,\n      json: () => mockRes\n    } as ExpressResponse;\n    \n    const mockNext = () => {};\n    \n    await new Promise<void>((resolve) => {\n      expressAuthMiddleware()(req, mockRes, () => {\n        const duration = endTiming();\n        results.push(duration);\n        resolve();\n      });\n    });\n  }\n\n  const sorted = results.sort((a, b) => a - b);\n  const sum = results.reduce((a, b) => a + b, 0);\n\n  return {\n    iterations,\n    average: sum / iterations,\n    median: sorted[Math.floor(sorted.length / 2)],\n    p95: sorted[Math.floor(sorted.length * 0.95)],\n    p99: sorted[Math.floor(sorted.length * 0.99)],\n    min: sorted[0],\n    max: sorted[sorted.length - 1]\n  };\n}\n\n// ===== ROUTE PROTECTION HELPERS =====\n\n/**\n * Protect all routes in an Express router with authentication\n */\nexport function protectExpressRouter(options: AuthMiddlewareOptions = {}) {\n  return expressAuthMiddleware(options);\n}\n\n/**\n * Protect specific Express routes with role-based access\n */\nexport function protectExpressRouteWithRoles(requiredRoles: string[]) {\n  return expressRoleMiddleware(requiredRoles);\n}\n\n/**\n * Protect Express routes for admin-only access\n */\nexport function protectExpressAdminRoutes() {\n  return expressAdminMiddleware();\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/shared/auth/adapters/next-auth.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":123,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":123,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":155,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3982,3985],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3982,3985],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":161,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":161,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4279,4282],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4279,4282],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":178,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":178,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4672,4675],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4672,4675],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":187,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":187,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4926,4929],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4926,4929],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":279,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":279,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7229,7232],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7229,7232],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Next.js Authentication Middleware Adapter\n * \n * Provides Next.js-specific authentication middleware using the unified auth library\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { \n  getUnifiedAuth, \n  verifyAuthHeader, \n  UnifiedAuthError,\n  AuthPerformanceMonitor \n} from '../core';\nimport { \n  AuthenticatedUser, \n  AuthMiddlewareOptions, \n  AuthMiddlewareResult,\n  AuthErrorCode \n} from '../types';\n\n// ===== NEXT.JS MIDDLEWARE FUNCTIONS =====\n\n/**\n * Core authentication middleware for Next.js API routes\n */\nexport async function nextAuthMiddleware(\n  request: NextRequest, \n  options: AuthMiddlewareOptions = {}\n): Promise<AuthMiddlewareResult<NextResponse>> {\n  const monitor = AuthPerformanceMonitor.getInstance();\n  const endTiming = monitor.startTiming('next-auth-middleware');\n\n  try {\n    const authHeader = request.headers.get('authorization');\n    const authResult = await verifyAuthHeader(authHeader);\n\n    if (!authResult.success || !authResult.user) {\n      const error = new UnifiedAuthError(\n        authResult.errorCode || AuthErrorCode.INVALID_TOKEN,\n        authResult.error || 'Authentication failed'\n      );\n\n      return {\n        success: false,\n        user: null,\n        response: createErrorResponse(error),\n        error: error.message,\n        errorCode: error.code\n      };\n    }\n\n    // Check roles if required\n    if (options.requiredRoles?.length) {\n      const auth = getUnifiedAuth();\n      if (!auth.hasRequiredRoles(authResult.user, options.requiredRoles)) {\n        const error = UnifiedAuthError.insufficientPermissions(options.requiredRoles);\n        return {\n          success: false,\n          user: null,\n          response: createErrorResponse(error),\n          error: error.message,\n          errorCode: error.code\n        };\n      }\n    }\n\n    // Custom validation\n    if (options.customValidator) {\n      const isValid = await options.customValidator(authResult.user);\n      if (!isValid) {\n        const error = new UnifiedAuthError(\n          AuthErrorCode.INSUFFICIENT_PERMISSIONS,\n          'Custom validation failed'\n        );\n        return {\n          success: false,\n          user: null,\n          response: createErrorResponse(error),\n          error: error.message,\n          errorCode: error.code\n        };\n      }\n    }\n\n    endTiming();\n    return {\n      success: true,\n      user: authResult.user\n    };\n\n  } catch (error) {\n    endTiming();\n    console.error('Next.js auth middleware error:', error);\n    \n    const authError = error instanceof UnifiedAuthError ? error : \n      new UnifiedAuthError(AuthErrorCode.UNKNOWN_ERROR, 'Authentication system error');\n\n    return {\n      success: false,\n      user: null,\n      response: createErrorResponse(authError),\n      error: authError.message,\n      errorCode: authError.code\n    };\n  }\n}\n\n/**\n * Optional authentication middleware (allows anonymous users)\n */\nexport async function nextOptionalAuth(request: NextRequest): Promise<{\n  user: AuthenticatedUser | null;\n  isAuthenticated: boolean;\n}> {\n  try {\n    const authHeader = request.headers.get('authorization');\n    const authResult = await verifyAuthHeader(authHeader);\n\n    return {\n      user: authResult.user,\n      isAuthenticated: authResult.success\n    };\n  } catch (error) {\n    return {\n      user: null,\n      isAuthenticated: false\n    };\n  }\n}\n\n/**\n * Role-based authentication middleware\n */\nexport async function nextRoleMiddleware(\n  request: NextRequest,\n  requiredRoles: string[]\n): Promise<AuthMiddlewareResult<NextResponse>> {\n  return nextAuthMiddleware(request, { requiredRoles });\n}\n\n/**\n * Admin-only middleware\n */\nexport async function nextAdminMiddleware(\n  request: NextRequest\n): Promise<AuthMiddlewareResult<NextResponse>> {\n  return nextAuthMiddleware(request, { requiredRoles: ['admin'] });\n}\n\n// ===== HIGHER-ORDER FUNCTIONS =====\n\n/**\n * Higher-order function to create authenticated API handlers\n */\nexport function withNextAuth<T extends any[]>(\n  handler: (request: NextRequest, user: AuthenticatedUser, ...args: T) => Promise<NextResponse>,\n  options: AuthMiddlewareOptions = {}\n) {\n  return async (request: NextRequest, ...args: T): Promise<NextResponse> => {\n    if (options.skipAuth) {\n      return await handler(request, null as any, ...args);\n    }\n\n    const authResult = await nextAuthMiddleware(request, options);\n\n    if (!authResult.success || !authResult.user) {\n      return authResult.response!;\n    }\n\n    // Call the actual handler with the authenticated user\n    return await handler(request, authResult.user, ...args);\n  };\n}\n\n/**\n * Admin-only handler wrapper\n */\nexport function withNextAdminAuth<T extends any[]>(\n  handler: (request: NextRequest, user: AuthenticatedUser, ...args: T) => Promise<NextResponse>\n) {\n  return withNextAuth(handler, { requiredRoles: ['admin'] });\n}\n\n/**\n * Role-based handler wrapper\n */\nexport function withNextRoleAuth<T extends any[]>(\n  handler: (request: NextRequest, user: AuthenticatedUser, ...args: T) => Promise<NextResponse>,\n  requiredRoles: string[]\n) {\n  return withNextAuth(handler, { requiredRoles });\n}\n\n// ===== UTILITY FUNCTIONS =====\n\n/**\n * Create standardized error response for Next.js\n */\nfunction createErrorResponse(error: UnifiedAuthError): NextResponse {\n  return NextResponse.json(\n    {\n      error: error.message,\n      code: error.code,\n      details: error.details\n    },\n    { \n      status: error.statusCode || 500,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n  );\n}\n\n/**\n * Create health check response\n */\nexport function createNextHealthResponse(): NextResponse {\n  return NextResponse.json(\n    {\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      service: 'Next.js Unified Auth Middleware'\n    },\n    { status: 200 }\n  );\n}\n\n/**\n * Get user from session cookie (for server components)\n */\nexport async function getUserFromSessionCookie(sessionCookie: string): Promise<AuthenticatedUser | null> {\n  try {\n    const auth = getUnifiedAuth();\n    const result = await auth.verifySessionCookie(sessionCookie);\n    \n    return result.valid ? result.user || null : null;\n  } catch (error) {\n    console.error('Session cookie verification failed:', error);\n    return null;\n  }\n}\n\n/**\n * Extract user from Next.js request context\n */\nexport async function extractUserFromRequest(request: NextRequest): Promise<AuthenticatedUser | null> {\n  try {\n    // Try Authorization header first\n    const authHeader = request.headers.get('authorization');\n    if (authHeader) {\n      const authResult = await verifyAuthHeader(authHeader);\n      if (authResult.success && authResult.user) {\n        return authResult.user;\n      }\n    }\n\n    // Try session cookie as fallback\n    const sessionCookie = request.cookies.get('session')?.value;\n    if (sessionCookie) {\n      return await getUserFromSessionCookie(sessionCookie);\n    }\n\n    return null;\n  } catch (error) {\n    console.error('Failed to extract user from request:', error);\n    return null;\n  }\n}\n\n// ===== PERFORMANCE HELPERS =====\n\n/**\n * Benchmark authentication performance\n */\nexport async function benchmarkNextAuth(\n  request: NextRequest,\n  iterations: number = 100\n): Promise<Record<string, any>> {\n  const monitor = AuthPerformanceMonitor.getInstance();\n  const results: number[] = [];\n\n  for (let i = 0; i < iterations; i++) {\n    const endTiming = monitor.startTiming('benchmark');\n    await nextAuthMiddleware(request);\n    const duration = endTiming();\n    results.push(duration);\n  }\n\n  const sorted = results.sort((a, b) => a - b);\n  const sum = results.reduce((a, b) => a + b, 0);\n\n  return {\n    iterations,\n    average: sum / iterations,\n    median: sorted[Math.floor(sorted.length / 2)],\n    p95: sorted[Math.floor(sorted.length * 0.95)],\n    p99: sorted[Math.floor(sorted.length * 0.99)],\n    min: sorted[0],\n    max: sorted[sorted.length - 1]\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/shared/auth/core.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[524,527],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[524,527],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":80,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1807,1810],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1807,1810],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1834,1837],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1834,1837],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":161,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":161,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4078,4081],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4078,4081],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":309,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":309,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8876,8879],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8876,8879],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'token' is defined but never used.","line":422,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":422,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":468,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":468,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13519,13522],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13519,13522],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":524,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":524,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14800,14803],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14800,14803],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":525,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":525,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14844,14847],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14844,14847],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":574,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":574,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16316,16319],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16316,16319],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":670,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":670,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18851,18854],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18851,18854],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":706,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":706,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":776,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":776,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21534,21537],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21534,21537],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":782,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":782,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21712,21715],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21712,21715],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":789,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":789,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21926,21929],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21926,21929],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Unified Authentication Core Library\n * \n * Consolidates all authentication logic into a single, reusable library\n * that eliminates the 87% code duplication across platforms\n */\n\nimport { \n  AuthenticatedUser, \n  AuthResult, \n  TokenVerificationResult, \n  AuthErrorCode, \n  AuthError, \n  AuthConfig,\n  TokenInfo,\n  AuthMetrics\n} from './types';\n\nexport class UnifiedAuthError extends Error implements AuthError {\n  constructor(\n    public code: AuthErrorCode,\n    message: string,\n    public details?: Record<string, any>,\n    public statusCode?: number\n  ) {\n    super(message);\n    this.name = 'UnifiedAuthError';\n  }\n\n  static missingToken(): UnifiedAuthError {\n    return new UnifiedAuthError(\n      AuthErrorCode.MISSING_TOKEN,\n      'Missing or invalid Authorization header',\n      {},\n      401\n    );\n  }\n\n  static invalidToken(details?: string): UnifiedAuthError {\n    return new UnifiedAuthError(\n      AuthErrorCode.INVALID_TOKEN,\n      'Invalid or malformed token',\n      { details },\n      401\n    );\n  }\n\n  static expiredToken(): UnifiedAuthError {\n    return new UnifiedAuthError(\n      AuthErrorCode.EXPIRED_TOKEN,\n      'Token has expired',\n      {},\n      401\n    );\n  }\n\n  static insufficientPermissions(requiredRoles: string[]): UnifiedAuthError {\n    return new UnifiedAuthError(\n      AuthErrorCode.INSUFFICIENT_PERMISSIONS,\n      'Insufficient permissions',\n      { requiredRoles },\n      403\n    );\n  }\n\n  static serviceUnavailable(service: string): UnifiedAuthError {\n    return new UnifiedAuthError(\n      AuthErrorCode.SERVICE_UNAVAILABLE,\n      `Authentication service unavailable: ${service}`,\n      { service },\n      503\n    );\n  }\n}\n\n// ===== CORE AUTHENTICATION CLASS =====\n\nexport class UnifiedAuth {\n  private static instance: UnifiedAuth;\n  private firebaseAuth?: any;\n  private azureAuth?: any;\n  private config: AuthConfig;\n  private metrics: AuthMetrics;\n  private initialized = false;\n\n  constructor(config: AuthConfig = {}) {\n    this.config = {\n      security: {\n        enableTokenRefresh: true,\n        tokenExpiryMinutes: 60,\n        maxRetryAttempts: 3,\n        retryDelayMs: 1000,\n        ...config.security\n      },\n      logging: {\n        enabled: true,\n        level: 'debug', // More verbose logging for debugging\n        includeTokenDetails: false,\n        ...config.logging\n      },\n      ...config\n    };\n\n    this.metrics = {\n      totalRequests: 0,\n      successfulAuth: 0,\n      failedAuth: 0,\n      averageVerificationTime: 0,\n      errorsByCode: {}\n    };\n  }\n\n  static getInstance(config?: AuthConfig): UnifiedAuth {\n    if (!UnifiedAuth.instance) {\n      UnifiedAuth.instance = new UnifiedAuth(config);\n    }\n    return UnifiedAuth.instance;\n  }\n\n  /**\n   * Initialize authentication providers\n   */\n  async initialize(): Promise<void> {\n    if (this.initialized) return;\n\n    try {\n      // Always initialize Firebase Auth (it's the primary provider)\n      console.log('üî• UnifiedAuth: Starting initialization...');\n      await this.initializeFirebase();\n\n      // Initialize Azure Auth (if needed)\n      if (this.config.azure) {\n        await this.initializeAzure();\n      }\n\n      this.initialized = true;\n      console.log('üî• UnifiedAuth: Initialization completed successfully');\n      this.log('info', 'UnifiedAuth initialized successfully');\n    } catch (error) {\n      console.error('üî• UnifiedAuth: Initialization failed:', error);\n      this.log('error', 'Failed to initialize UnifiedAuth', { error });\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize Firebase Auth\n   */\n  private async initializeFirebase(): Promise<void> {\n    try {\n      console.log('üî• UnifiedAuth: Initializing Firebase Admin SDK...');\n      \n      // Use existing Firebase admin initialization\n      const { getAdminAuth } = await import('@/lib/firebase/admin');\n      this.firebaseAuth = await getAdminAuth();\n      \n      // Test the connection\n      try {\n        // Try to get a non-existent user to test connectivity\n        await this.firebaseAuth.getUser('test-connection-' + Date.now());\n      } catch (testError: any) {\n        if (testError.code === 'auth/user-not-found') {\n          console.log('üî• UnifiedAuth: Firebase Admin SDK connection test successful');\n        } else {\n          console.warn('üî• UnifiedAuth: Firebase Admin SDK connection test warning:', testError.message);\n        }\n      }\n      \n      console.log('üî• UnifiedAuth: Firebase Auth initialized successfully');\n      this.log('info', 'Firebase Auth initialized');\n    } catch (error) {\n      console.error('üî• UnifiedAuth: Firebase Auth initialization failed:', error);\n      throw new UnifiedAuthError(\n        AuthErrorCode.FIREBASE_ERROR,\n        'Failed to initialize Firebase Auth',\n        { error: error instanceof Error ? error.message : 'Unknown error' }\n      );\n    }\n  }\n\n  /**\n   * Initialize Azure Auth (placeholder for future Azure AD integration)\n   */\n  private async initializeAzure(): Promise<void> {\n    try {\n      // Placeholder for Azure AD initialization\n      this.log('info', 'Azure Auth initialization skipped (not implemented)');\n    } catch (error) {\n      throw new UnifiedAuthError(\n        AuthErrorCode.AZURE_ERROR,\n        'Failed to initialize Azure Auth',\n        { error: error instanceof Error ? error.message : 'Unknown error' }\n      );\n    }\n  }\n\n  /**\n   * Extract Bearer token from Authorization header\n   */\n  extractBearerToken(authHeader: string | null | undefined): string | null {\n    if (!authHeader) {\n      return null;\n    }\n\n    const parts = authHeader.trim().split(' ');\n    if (parts.length !== 2 || parts[0] !== 'Bearer') {\n      return null;\n    }\n\n    return parts[1];\n  }\n\n  /**\n   * Verify any token (Firebase, Azure, etc.)\n   */\n  async verifyToken(token: string): Promise<TokenVerificationResult> {\n    if (!this.initialized) {\n      await this.initialize();\n    }\n\n    const startTime = Date.now();\n    this.metrics.totalRequests++;\n\n    try {\n      // Try Firebase token verification first\n      if (this.firebaseAuth) {\n        const result = await this.verifyFirebaseToken(token);\n        if (result.valid) {\n          this.updateMetrics(true, Date.now() - startTime);\n          return result;\n        }\n      }\n\n      // Try Azure token verification (if configured)\n      if (this.azureAuth) {\n        const result = await this.verifyAzureToken(token);\n        if (result.valid) {\n          this.updateMetrics(true, Date.now() - startTime);\n          return result;\n        }\n      }\n\n      // No valid token found\n      this.updateMetrics(false, Date.now() - startTime, AuthErrorCode.INVALID_TOKEN);\n      return {\n        valid: false,\n        error: 'Token verification failed across all providers',\n        errorCode: AuthErrorCode.INVALID_TOKEN\n      };\n\n    } catch (error) {\n      this.updateMetrics(false, Date.now() - startTime, AuthErrorCode.UNKNOWN_ERROR);\n      this.log('error', 'Token verification error', { error });\n      \n      return {\n        valid: false,\n        error: error instanceof Error ? error.message : 'Unknown verification error',\n        errorCode: AuthErrorCode.UNKNOWN_ERROR\n      };\n    }\n  }\n\n  /**\n   * Verify Firebase ID token\n   */\n  private async verifyFirebaseToken(idToken: string): Promise<TokenVerificationResult> {\n    try {\n      // Handle mock tokens for development\n      if (idToken.startsWith('mock-token-')) {\n        this.log('debug', 'Verifying mock token');\n        return this.verifyMockToken(idToken);\n      }\n\n      if (!this.firebaseAuth) {\n        console.error('üî• UnifiedAuth: Firebase Auth not initialized in verifyFirebaseToken');\n        throw new UnifiedAuthError(AuthErrorCode.SERVICE_UNAVAILABLE, 'Firebase Auth not initialized');\n      }\n\n      this.log('debug', 'Verifying Firebase ID token', { tokenPrefix: idToken.substring(0, 20) + '...' });\n      console.log('üî• UnifiedAuth: About to call firebaseAuth.verifyIdToken...');\n      \n      // Add additional validation options\n      const decodedToken = await this.firebaseAuth.verifyIdToken(idToken, true);\n      console.log('üî• UnifiedAuth: Firebase verifyIdToken successful');\n      \n      this.log('debug', 'Firebase token verification successful', { \n        uid: decodedToken.uid, \n        email: decodedToken.email,\n        exp: decodedToken.exp\n      });\n      \n      const user: AuthenticatedUser = {\n        uid: decodedToken.uid,\n        email: decodedToken.email,\n        name: decodedToken.name || decodedToken.display_name || decodedToken.email?.split('@')[0],\n        picture: decodedToken.picture,\n        email_verified: decodedToken.email_verified || false,\n        firebase: decodedToken.firebase,\n        custom_claims: decodedToken.custom_claims || {},\n        provider: 'firebase'\n      };\n\n      return {\n        valid: true,\n        user,\n        expiresAt: new Date(decodedToken.exp * 1000)\n      };\n\n    } catch (error: any) {\n      this.log('error', 'Firebase token verification failed', { \n        error: error.message,\n        code: error.code,\n        tokenPrefix: idToken.substring(0, 20) + '...'\n      });\n      \n      // Handle specific Firebase Auth errors\n      if (error.code === 'auth/id-token-expired') {\n        return {\n          valid: false,\n          error: 'Token has expired',\n          errorCode: AuthErrorCode.EXPIRED_TOKEN\n        };\n      }\n      \n      if (error.code === 'auth/id-token-revoked') {\n        return {\n          valid: false,\n          error: 'Token has been revoked',\n          errorCode: AuthErrorCode.INVALID_TOKEN\n        };\n      }\n      \n      if (error.code === 'auth/invalid-id-token') {\n        return {\n          valid: false,\n          error: 'Invalid ID token format',\n          errorCode: AuthErrorCode.INVALID_TOKEN\n        };\n      }\n      \n      if (error.code === 'auth/project-not-found') {\n        return {\n          valid: false,\n          error: 'Firebase project not found',\n          errorCode: AuthErrorCode.SERVICE_UNAVAILABLE\n        };\n      }\n      \n      // Handle the specific \"kid\" claim error (expired token)\n      if (error.code === 'auth/argument-error' && error.message.includes('kid')) {\n        return {\n          valid: false,\n          error: 'Token has expired or is invalid. Please refresh your authentication.',\n          errorCode: AuthErrorCode.EXPIRED_TOKEN\n        };\n      }\n\n      return {\n        valid: false,\n        error: error.message || 'Firebase token verification failed',\n        errorCode: AuthErrorCode.FIREBASE_ERROR\n      };\n    }\n  }\n\n  /**\n   * Verify mock token for development\n   */\n  private verifyMockToken(token: string): TokenVerificationResult {\n    try {\n      // Parse mock token: mock-token-{uid}-{timestamp}\n      const parts = token.split('-');\n      if (parts.length < 4) {\n        return {\n          valid: false,\n          error: 'Invalid mock token format',\n          errorCode: AuthErrorCode.INVALID_TOKEN\n        };\n      }\n\n      const uid = parts[2];\n      const timestamp = parseInt(parts[3]);\n      \n      // Check if token is not too old (24 hours)\n      const tokenAge = Date.now() - timestamp;\n      if (tokenAge > 24 * 60 * 60 * 1000) {\n        return {\n          valid: false,\n          error: 'Mock token has expired',\n          errorCode: AuthErrorCode.EXPIRED_TOKEN\n        };\n      }\n\n      const user: AuthenticatedUser = {\n        uid: uid,\n        email: uid.includes('@') ? uid : `${uid}@mock.com`,\n        name: uid.replace(/[^a-zA-Z0-9]/g, ' ').replace(/\\s+/g, ' ').trim() || 'Mock User',\n        email_verified: true,\n        provider: 'custom'\n      };\n\n      this.log('debug', 'Mock token verified successfully', { uid });\n\n      return {\n        valid: true,\n        user,\n        expiresAt: new Date(timestamp + 24 * 60 * 60 * 1000) // 24 hours from creation\n      };\n\n    } catch (error) {\n      return {\n        valid: false,\n        error: error instanceof Error ? error.message : 'Mock token verification failed',\n        errorCode: AuthErrorCode.INVALID_TOKEN\n      };\n    }\n  }\n\n  /**\n   * Verify Azure AD token (placeholder)\n   */\n  private async verifyAzureToken(token: string): Promise<TokenVerificationResult> {\n    try {\n      // Placeholder for Azure AD token verification\n      this.log('debug', 'Azure token verification not implemented');\n      return {\n        valid: false,\n        error: 'Azure token verification not implemented',\n        errorCode: AuthErrorCode.SERVICE_UNAVAILABLE\n      };\n    } catch (error) {\n      return {\n        valid: false,\n        error: error instanceof Error ? error.message : 'Azure token verification failed',\n        errorCode: AuthErrorCode.AZURE_ERROR\n      };\n    }\n  }\n\n  /**\n   * Verify session cookie (primarily for Firebase)\n   */\n  async verifySessionCookie(sessionCookie: string): Promise<TokenVerificationResult> {\n    try {\n      if (!this.firebaseAuth) {\n        await this.initialize();\n      }\n\n      const decodedClaims = await this.firebaseAuth.verifySessionCookie(sessionCookie, true);\n      \n      const user: AuthenticatedUser = {\n        uid: decodedClaims.uid,\n        email: decodedClaims.email,\n        name: decodedClaims.name || decodedClaims.email?.split('@')[0],\n        picture: decodedClaims.picture,\n        email_verified: decodedClaims.email_verified || false,\n        firebase: decodedClaims.firebase,\n        custom_claims: decodedClaims.custom_claims || {},\n        provider: 'firebase'\n      };\n\n      return {\n        valid: true,\n        user,\n        expiresAt: new Date(decodedClaims.exp * 1000)\n      };\n\n    } catch (error: any) {\n      this.log('debug', 'Session cookie verification failed', { error: error.message });\n      \n      return {\n        valid: false,\n        error: error.message || 'Session cookie verification failed',\n        errorCode: AuthErrorCode.INVALID_TOKEN\n      };\n    }\n  }\n\n  /**\n   * Check if user has required roles\n   */\n  hasRequiredRoles(user: AuthenticatedUser, requiredRoles: string[]): boolean {\n    if (!requiredRoles.length) return true;\n    \n    const userRoles = user.custom_claims?.roles || [];\n    return requiredRoles.some(role => userRoles.includes(role));\n  }\n\n  /**\n   * Create standardized auth result\n   */\n  createAuthResult(user: AuthenticatedUser | null, error?: UnifiedAuthError): AuthResult {\n    return {\n      success: !!user && !error,\n      user,\n      error: error?.message,\n      errorCode: error?.code\n    };\n  }\n\n  /**\n   * Get authentication metrics\n   */\n  getMetrics(): AuthMetrics {\n    return { ...this.metrics };\n  }\n\n  /**\n   * Reset metrics\n   */\n  resetMetrics(): void {\n    this.metrics = {\n      totalRequests: 0,\n      successfulAuth: 0,\n      failedAuth: 0,\n      averageVerificationTime: 0,\n      errorsByCode: {}\n    };\n  }\n\n  /**\n   * Health check\n   */\n  async healthCheck(): Promise<{ healthy: boolean; details: Record<string, any> }> {\n    const details: Record<string, any> = {\n      initialized: this.initialized,\n      firebase: !!this.firebaseAuth,\n      azure: !!this.azureAuth,\n      metrics: this.metrics\n    };\n\n    let healthy = this.initialized;\n\n    // Test Firebase connectivity\n    if (this.firebaseAuth) {\n      try {\n        // Simple connectivity test\n        await this.firebaseAuth.getUser('test-user-id').catch(() => {\n          // Expected to fail, just testing connectivity\n        });\n        details.firebaseConnectivity = 'ok';\n      } catch (error) {\n        details.firebaseConnectivity = 'error';\n        details.firebaseError = error instanceof Error ? error.message : 'Unknown error';\n        healthy = false;\n      }\n    }\n\n    return { healthy, details };\n  }\n\n  /**\n   * Update performance metrics\n   */\n  private updateMetrics(success: boolean, responseTime: number, errorCode?: AuthErrorCode): void {\n    if (success) {\n      this.metrics.successfulAuth++;\n    } else {\n      this.metrics.failedAuth++;\n      if (errorCode) {\n        this.metrics.errorsByCode[errorCode] = (this.metrics.errorsByCode[errorCode] || 0) + 1;\n      }\n    }\n\n    // Update average response time\n    const totalAuth = this.metrics.successfulAuth + this.metrics.failedAuth;\n    this.metrics.averageVerificationTime = \n      (this.metrics.averageVerificationTime * (totalAuth - 1) + responseTime) / totalAuth;\n  }\n\n  /**\n   * Unified logging\n   */\n  private log(level: 'debug' | 'info' | 'warn' | 'error', message: string, details?: any): void {\n    if (!this.config.logging?.enabled) return;\n\n    const logLevel = this.config.logging?.level || 'info';\n    const levels = { debug: 0, info: 1, warn: 2, error: 3 };\n    \n    if (levels[level] >= levels[logLevel]) {\n      const logMessage = `[UnifiedAuth] ${message}`;\n      const logDetails = this.config.logging?.includeTokenDetails ? details : \n        details ? { ...details, token: '[REDACTED]' } : undefined;\n\n      switch (level) {\n        case 'debug':\n          console.debug(logMessage, logDetails);\n          break;\n        case 'info':\n          console.info(logMessage, logDetails);\n          break;\n        case 'warn':\n          console.warn(logMessage, logDetails);\n          break;\n        case 'error':\n          console.error(logMessage, logDetails);\n          break;\n      }\n    }\n  }\n}\n\n// ===== UTILITY FUNCTIONS =====\n\n/**\n * Get the singleton UnifiedAuth instance\n */\nexport function getUnifiedAuth(config?: AuthConfig): UnifiedAuth {\n  return UnifiedAuth.getInstance(config);\n}\n\n/**\n * Quick token verification function\n */\nexport async function verifyToken(token: string): Promise<TokenVerificationResult> {\n  const auth = getUnifiedAuth();\n  return auth.verifyToken(token);\n}\n\n/**\n * Extract and verify token from authorization header\n */\nexport async function verifyAuthHeader(authHeader: string | null | undefined): Promise<AuthResult> {\n  const auth = getUnifiedAuth();\n  \n  try {\n    const token = auth.extractBearerToken(authHeader);\n    \n    if (!token) {\n      throw UnifiedAuthError.missingToken();\n    }\n\n    const result = await auth.verifyToken(token);\n    \n    if (!result.valid) {\n      throw new UnifiedAuthError(\n        result.errorCode || AuthErrorCode.INVALID_TOKEN,\n        result.error || 'Token verification failed'\n      );\n    }\n\n    return auth.createAuthResult(result.user || null);\n\n  } catch (error) {\n    if (error instanceof UnifiedAuthError) {\n      return auth.createAuthResult(null, error);\n    }\n    \n    return auth.createAuthResult(null, new UnifiedAuthError(\n      AuthErrorCode.UNKNOWN_ERROR,\n      error instanceof Error ? error.message : 'Unknown authentication error'\n    ));\n  }\n}\n\n/**\n * Verify user has required roles\n */\nexport function verifyRoles(user: AuthenticatedUser, requiredRoles: string[]): boolean {\n  const auth = getUnifiedAuth();\n  return auth.hasRequiredRoles(user, requiredRoles);\n}\n\n/**\n * Create a custom authentication error\n */\nexport function createAuthError(\n  code: AuthErrorCode,\n  message: string,\n  details?: Record<string, any>,\n  statusCode?: number\n): UnifiedAuthError {\n  return new UnifiedAuthError(code, message, details, statusCode);\n}\n\n// ===== TOKEN UTILITIES =====\n\nexport class TokenUtils {\n  /**\n   * Parse token to extract basic information without verification\n   */\n  static parseTokenInfo(token: string): TokenInfo | null {\n    try {\n      // For JWT tokens, decode the payload (without verification)\n      if (token.includes('.')) {\n        const parts = token.split('.');\n        if (parts.length === 3) {\n          const payload = JSON.parse(\n            Buffer.from(parts[1], 'base64url').toString()\n          );\n          \n          return {\n            provider: 'firebase', // Assume Firebase for now\n            value: token,\n            expiresAt: payload.exp ? new Date(payload.exp * 1000) : undefined,\n            userId: payload.uid || payload.sub,\n            claims: payload\n          };\n        }\n      }\n      \n      return {\n        provider: 'custom',\n        value: token\n      };\n    } catch (error) {\n      return null;\n    }\n  }\n\n  /**\n   * Check if token is expired (without verification)\n   */\n  static isTokenExpired(token: string): boolean {\n    const tokenInfo = TokenUtils.parseTokenInfo(token);\n    if (!tokenInfo?.expiresAt) return false;\n    \n    return tokenInfo.expiresAt < new Date();\n  }\n\n  /**\n   * Get token expiry time\n   */\n  static getTokenExpiry(token: string): Date | null {\n    const tokenInfo = TokenUtils.parseTokenInfo(token);\n    return tokenInfo?.expiresAt || null;\n  }\n}\n\n// ===== PERFORMANCE MONITORING =====\n\nexport class AuthPerformanceMonitor {\n  private static instance: AuthPerformanceMonitor;\n  private timings: Map<string, number[]> = new Map();\n\n  static getInstance(): AuthPerformanceMonitor {\n    if (!AuthPerformanceMonitor.instance) {\n      AuthPerformanceMonitor.instance = new AuthPerformanceMonitor();\n    }\n    return AuthPerformanceMonitor.instance;\n  }\n\n  /**\n   * Start timing an operation\n   */\n  startTiming(operation: string): () => number {\n    const startTime = performance.now();\n    \n    return () => {\n      const duration = performance.now() - startTime;\n      this.recordTiming(operation, duration);\n      return duration;\n    };\n  }\n\n  /**\n   * Record timing for an operation\n   */\n  recordTiming(operation: string, duration: number): void {\n    if (!this.timings.has(operation)) {\n      this.timings.set(operation, []);\n    }\n    \n    const timings = this.timings.get(operation)!;\n    timings.push(duration);\n    \n    // Keep only last 100 measurements\n    if (timings.length > 100) {\n      timings.shift();\n    }\n  }\n\n  /**\n   * Get performance statistics\n   */\n  getStats(operation?: string): Record<string, any> {\n    if (operation) {\n      const timings = this.timings.get(operation) || [];\n      return this.calculateStats(operation, timings);\n    }\n\n    const stats: Record<string, any> = {};\n    for (const [op, timings] of this.timings.entries()) {\n      stats[op] = this.calculateStats(op, timings);\n    }\n    return stats;\n  }\n\n  private calculateStats(operation: string, timings: number[]): any {\n    if (timings.length === 0) {\n      return { operation, count: 0 };\n    }\n\n    const sorted = [...timings].sort((a, b) => a - b);\n    const sum = timings.reduce((a, b) => a + b, 0);\n\n    return {\n      operation,\n      count: timings.length,\n      average: sum / timings.length,\n      median: sorted[Math.floor(sorted.length / 2)],\n      p95: sorted[Math.floor(sorted.length * 0.95)],\n      p99: sorted[Math.floor(sorted.length * 0.99)],\n      min: sorted[0],\n      max: sorted[sorted.length - 1]\n    };\n  }\n\n  /**\n   * Reset all performance data\n   */\n  reset(): void {\n    this.timings.clear();\n  }\n}\n\n// ===== GLOBAL INSTANCES =====\n\nlet globalAuth: UnifiedAuth | null = null;\n\nexport function getGlobalAuth(): UnifiedAuth {\n  if (!globalAuth) {\n    globalAuth = UnifiedAuth.getInstance();\n  }\n  return globalAuth;\n}\n\nexport function resetGlobalAuth(): void {\n  globalAuth = null;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/shared/auth/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":154,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":154,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3286,3289],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3286,3289],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":181,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3907,3910],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3907,3910],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":182,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":182,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3975,3978],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3975,3978],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":202,"column":14,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":202,"endColumn":27},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":203,"column":16,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":203,"endColumn":31}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Unified Authentication Library\n * \n * Single source of truth for all authentication logic across platforms\n * Eliminates 87% code duplication in authentication middleware\n */\n\n// ===== CORE EXPORTS =====\n\nexport {\n  UnifiedAuth,\n  UnifiedAuthError,\n  getUnifiedAuth,\n  getGlobalAuth,\n  resetGlobalAuth,\n  verifyToken,\n  verifyAuthHeader,\n  verifyRoles,\n  createAuthError,\n  TokenUtils,\n  AuthPerformanceMonitor\n} from './core';\n\n// Also import for local use\nimport {\n  UnifiedAuth,\n  getUnifiedAuth,\n  verifyAuthHeader,\n  AuthPerformanceMonitor\n} from './core';\n\n// ===== TYPE EXPORTS =====\n\nexport type {\n  AuthenticatedUser,\n  UserSession,\n  AuthResult,\n  TokenVerificationResult,\n  AuthConfig,\n  AuthMiddlewareOptions,\n  AuthMiddlewareResult,\n  TokenInfo,\n  AuthMetrics,\n  NextAuthRequest,\n  NextAuthResponse,\n  AzureContext,\n  AzureRequest,\n  ExpressRequest,\n  ExpressResponse,\n  ExpressNext,\n  TokenProvider\n} from './types';\n\n// Import types for local use\nimport type { AuthConfig, AuthenticatedUser, AuthMetrics } from './types';\n\nexport { \n  AuthErrorCode,\n  isAuthenticatedUser,\n  isAuthError,\n  isTokenInfo\n} from './types';\n\n// ===== PLATFORM ADAPTER EXPORTS =====\n\n// Next.js adapters\nexport {\n  nextAuthMiddleware,\n  nextOptionalAuth,\n  nextRoleMiddleware,\n  nextAdminMiddleware,\n  withNextAuth,\n  withNextAdminAuth,\n  withNextRoleAuth,\n  createNextHealthResponse,\n  getUserFromSessionCookie,\n  extractUserFromRequest,\n  benchmarkNextAuth\n} from './adapters/next-auth';\n\n// Azure Functions adapters\nexport {\n  azureAuthMiddleware,\n  azureRoleMiddleware,\n  azureAdminMiddleware,\n  createAuthenticatedAzureFunction,\n  createAdminAzureFunction,\n  createRoleBasedAzureFunction,\n  createAzureHealthResponse,\n  extractUserFromAzureRequest,\n  legacyAzureAuthMiddleware,\n  initializeFirebaseForAzure,\n  benchmarkAzureAuth\n} from './adapters/azure-auth';\n\n// Express.js adapters\nexport {\n  expressAuthMiddleware,\n  expressOptionalAuth,\n  expressRoleMiddleware,\n  expressAdminMiddleware,\n  extractUserFromExpressRequest,\n  isExpressRequestAuthenticated,\n  getUserRoles,\n  hasRole,\n  hasAnyRole,\n  expressAuthErrorHandler,\n  benchmarkExpressAuth,\n  protectExpressRouter,\n  protectExpressRouteWithRoles,\n  protectExpressAdminRoutes\n} from './adapters/express-auth';\n\n// ===== CONVENIENCE FUNCTIONS =====\n\n/**\n * Initialize unified authentication with default configuration\n */\nexport async function initializeUnifiedAuth(config?: Partial<AuthConfig>): Promise<UnifiedAuth> {\n  const auth = getUnifiedAuth(config);\n  await auth.initialize();\n  return auth;\n}\n\n/**\n * Quick authentication check for any platform\n */\nexport async function quickAuthCheck(authHeader: string | null | undefined): Promise<{\n  authenticated: boolean;\n  user: AuthenticatedUser | null;\n  error?: string;\n}> {\n  try {\n    const result = await verifyAuthHeader(authHeader);\n    return {\n      authenticated: result.success,\n      user: result.user,\n      error: result.error\n    };\n  } catch (error) {\n    return {\n      authenticated: false,\n      user: null,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    };\n  }\n}\n\n/**\n * Get comprehensive authentication metrics across all platforms\n */\nexport function getAuthMetrics(): {\n  core: AuthMetrics;\n  performance: Record<string, any>;\n} {\n  const auth = getUnifiedAuth();\n  const monitor = AuthPerformanceMonitor.getInstance();\n  \n  return {\n    core: auth.getMetrics(),\n    performance: monitor.getStats()\n  };\n}\n\n/**\n * Reset all authentication metrics and performance data\n */\nexport function resetAuthMetrics(): void {\n  const auth = getUnifiedAuth();\n  const monitor = AuthPerformanceMonitor.getInstance();\n  \n  auth.resetMetrics();\n  monitor.reset();\n}\n\n/**\n * Health check for the entire authentication system\n */\nexport async function authSystemHealthCheck(): Promise<{\n  healthy: boolean;\n  core: { healthy: boolean; details: Record<string, any> };\n  metrics: { core: AuthMetrics; performance: Record<string, any> };\n}> {\n  const auth = getUnifiedAuth();\n  const coreHealth = await auth.healthCheck();\n  const metrics = getAuthMetrics();\n  \n  return {\n    healthy: coreHealth.healthy,\n    core: coreHealth,\n    metrics\n  };\n}\n\n// ===== MIGRATION HELPERS =====\n\n/**\n * Check if current authentication implementation needs migration\n */\nexport function shouldMigrateAuth(): boolean {\n  // Check if old middleware files exist\n  const fs = require('fs');\n  const path = require('path');\n  \n  const oldFiles = [\n    'lib/middleware/authMiddleware.ts',\n    'azure/shared/authMiddleware.js',\n    'lib/auth.ts'\n  ];\n  \n  return oldFiles.some(file => {\n    try {\n      return fs.existsSync(path.resolve(process.cwd(), file));\n    } catch {\n      return false;\n    }\n  });\n}\n\n/**\n * Validate migration readiness\n */\nexport async function validateMigrationReadiness(): Promise<{\n  ready: boolean;\n  issues: string[];\n  suggestions: string[];\n}> {\n  const issues: string[] = [];\n  const suggestions: string[] = [];\n\n  try {\n    // Test unified auth initialization\n    const auth = getUnifiedAuth();\n    await auth.initialize();\n    \n    // Test health check\n    const health = await auth.healthCheck();\n    if (!health.healthy) {\n      issues.push('Authentication system health check failed');\n      suggestions.push('Check Firebase configuration and connectivity');\n    }\n\n    // Check for old middleware usage\n    if (shouldMigrateAuth()) {\n      suggestions.push('Old authentication middleware files detected - consider migration');\n    }\n\n  } catch (error) {\n    issues.push(`Initialization failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    suggestions.push('Check environment variables and Firebase admin configuration');\n  }\n\n  return {\n    ready: issues.length === 0,\n    issues,\n    suggestions\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/shared/auth/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[285,288],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[285,288],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[323,326],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[323,326],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1388,1391],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1388,1391],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":101,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2204,2207],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2204,2207],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":119,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2542,2545],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2542,2545],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":119,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2576,2579],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2576,2579],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":129,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2778,2781],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2778,2781],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":134,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2862,2865],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2862,2865],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":146,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3116,3119],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3116,3119],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":150,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3184,3187],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3184,3187],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":162,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3437,3440],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3437,3440],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":175,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":175,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3713,3716],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3713,3716],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":179,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":179,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3856,3859],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3856,3859],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":183,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":183,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4041,4044],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4041,4044],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Unified Authentication Types\n * \n * Common type definitions for all authentication implementations\n */\n\n// ===== USER TYPES =====\n\nexport interface AuthenticatedUser {\n  uid: string;\n  email?: string;\n  name?: string;\n  picture?: string;\n  email_verified: boolean;\n  firebase?: any;\n  custom_claims?: Record<string, any>;\n  provider?: 'firebase' | 'azure' | 'custom';\n}\n\nexport interface UserSession {\n  userId: string;\n  email?: string;\n  verified: boolean;\n  expiresAt?: Date;\n  refreshToken?: string;\n}\n\n// ===== AUTHENTICATION RESULT TYPES =====\n\nexport interface AuthResult {\n  success: boolean;\n  user: AuthenticatedUser | null;\n  error?: string;\n  errorCode?: AuthErrorCode;\n}\n\nexport interface TokenVerificationResult {\n  valid: boolean;\n  user?: AuthenticatedUser;\n  error?: string;\n  errorCode?: AuthErrorCode;\n  expiresAt?: Date;\n}\n\n// ===== ERROR TYPES =====\n\nexport enum AuthErrorCode {\n  MISSING_TOKEN = 'MISSING_TOKEN',\n  INVALID_TOKEN = 'INVALID_TOKEN',\n  EXPIRED_TOKEN = 'EXPIRED_TOKEN',\n  MALFORMED_TOKEN = 'MALFORMED_TOKEN',\n  INSUFFICIENT_PERMISSIONS = 'INSUFFICIENT_PERMISSIONS',\n  SERVICE_UNAVAILABLE = 'SERVICE_UNAVAILABLE',\n  FIREBASE_ERROR = 'FIREBASE_ERROR',\n  AZURE_ERROR = 'AZURE_ERROR',\n  NETWORK_ERROR = 'NETWORK_ERROR',\n  UNKNOWN_ERROR = 'UNKNOWN_ERROR'\n}\n\nexport interface AuthError extends Error {\n  code: AuthErrorCode;\n  details?: Record<string, any>;\n  statusCode?: number;\n}\n\n// ===== CONFIGURATION TYPES =====\n\nexport interface AuthConfig {\n  firebase?: {\n    projectId: string;\n    clientEmail: string;\n    privateKey: string;\n  };\n  azure?: {\n    tenantId: string;\n    clientId: string;\n    clientSecret: string;\n  };\n  security?: {\n    enableTokenRefresh: boolean;\n    tokenExpiryMinutes: number;\n    maxRetryAttempts: number;\n    retryDelayMs: number;\n  };\n  logging?: {\n    enabled: boolean;\n    level: 'debug' | 'info' | 'warn' | 'error';\n    includeTokenDetails: boolean;\n  };\n}\n\n// ===== MIDDLEWARE TYPES =====\n\nexport interface AuthMiddlewareOptions {\n  requiredRoles?: string[];\n  skipAuth?: boolean;\n  allowAnonymous?: boolean;\n  customValidator?: (user: AuthenticatedUser) => Promise<boolean>;\n}\n\nexport interface AuthMiddlewareResult<TResponse = any> {\n  success: boolean;\n  user: AuthenticatedUser | null;\n  response?: TResponse;\n  error?: string;\n  errorCode?: AuthErrorCode;\n}\n\n// ===== PLATFORM-SPECIFIC TYPES =====\n\n// Next.js specific\nexport interface NextAuthRequest {\n  headers: {\n    get(name: string): string | null;\n  };\n}\n\nexport interface NextAuthResponse {\n  json(data: any, init?: { status?: number }): any;\n}\n\n// Azure Functions specific\nexport interface AzureContext {\n  log: {\n    info: (message: string) => void;\n    warn: (message: string) => void;\n    error: (message: string) => void;\n  };\n  res?: any;\n}\n\nexport interface AzureRequest {\n  headers: Record<string, string>;\n  body?: any;\n  query?: Record<string, string>;\n}\n\n// Express.js specific\nexport interface ExpressRequest {\n  headers: Record<string, string>;\n  user?: AuthenticatedUser;\n}\n\nexport interface ExpressResponse {\n  status(code: number): ExpressResponse;\n  json(data: any): ExpressResponse;\n}\n\nexport interface ExpressNext {\n  (error?: any): void;\n}\n\n// ===== UTILITY TYPES =====\n\nexport type TokenProvider = 'firebase' | 'azure' | 'jwt' | 'custom';\n\nexport interface TokenInfo {\n  provider: TokenProvider;\n  value: string;\n  expiresAt?: Date;\n  userId?: string;\n  claims?: Record<string, any>;\n}\n\nexport interface AuthMetrics {\n  totalRequests: number;\n  successfulAuth: number;\n  failedAuth: number;\n  averageVerificationTime: number;\n  errorsByCode: Partial<Record<AuthErrorCode, number>>;\n}\n\n// ===== TYPE GUARDS =====\n\nexport function isAuthenticatedUser(obj: any): obj is AuthenticatedUser {\n  return obj && typeof obj === 'object' && typeof obj.uid === 'string';\n}\n\nexport function isAuthError(error: any): error is AuthError {\n  return error instanceof Error && 'code' in error && Object.values(AuthErrorCode).includes(error.code as AuthErrorCode);\n}\n\nexport function isTokenInfo(obj: any): obj is TokenInfo {\n  return obj && typeof obj === 'object' && typeof obj.provider === 'string' && typeof obj.value === 'string';\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/storage/IStorageService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":107,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":110,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1068,1071],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1068,1071],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @file Defines the universal interface for storage services.\n * This abstraction allows for a seamless switch between different storage providers (e.g., Azure, Firebase).\n */\n\n/**\n * Enumeration for the storage providers.\n */\nexport enum StorageProvider {\n  Azure = 'azure',\n  Firebase = 'firebase',\n  Dual = 'dual', // For dual-write scenarios during migration\n}\n\n/**\n * Metadata for an uploaded file.\n */\nexport interface FileMeta {\n  provider: StorageProvider;\n  url: string; // The primary public-facing URL\n  path: string; // The internal path or blob name\n  sasUrl?: string; // Optional SAS URL for temporary access\n  size: number;\n  mimeType: string;\n  createdAt: Date;\n}\n\n/**\n * Options for generating a signed or public URL.\n */\nexport interface SignedUrlOptions {\n  expiresIn: number; // Expiration time in seconds\n  accessType: 'read' | 'write';\n}\n\n/**\n * Custom error class for storage operations.\n */\nexport class StorageError extends Error {\n  constructor(message: string, public readonly provider: StorageProvider, public readonly originalError?: any) {\n    super(message);\n    this.name = 'StorageError';\n  }\n}\n\n/**\n * Defines the core contract for a storage service provider.\n */\nexport interface IStorageService {\n  /**\n   * Uploads a file to the storage provider.\n   *\n   * @param file The file content as a Buffer or Blob.\n   * @param path The destination path for the file.\n   * @param mimeType The MIME type of the file.\n   * @returns A promise that resolves with the file metadata.\n   */\n  upload(file: Buffer | Blob, path: string, mimeType?: string): Promise<FileMeta>;\n\n  /**\n   * Downloads a file from the storage provider.\n   *\n   * @param path The path of the file to download.\n   * @returns A promise that resolves with the file content as a Buffer.\n   */\n  download(path: string): Promise<Buffer>;\n\n  /**\n   * Deletes a file from the storage provider.\n   *\n   * @param path The path of the file to delete.\n   * @returns A promise that resolves when the file is deleted.\n   */\n  delete(path: string): Promise<void>;\n\n  /**\n   * Generates a public or signed URL for a file.\n   *\n   * @param path The path of the file.\n   * @param options Options for the generated URL (e.g., expiration).\n   * @returns A promise that resolves with the public URL string.\n   */\n  getPublicUrl(path: string, options?: SignedUrlOptions): Promise<string>;\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/storage/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[312,315],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[312,315],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":11,"column":23,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":11,"endColumn":52}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { IStorageService, StorageProvider } from './IStorageService';\nimport { AzureBlobStorageService } from './providers/AzureBlobStorageService';\n\n// Client-side safety check\nconst isClient = typeof window !== 'undefined';\n\n// Only import server-side dependencies when running on server\nlet getConfiguration: any = null;\n\nif (!isClient) {\n  const azureConfig = require('@/lib/azure-config');\n  getConfiguration = azureConfig.getConfiguration;\n}\n\n// Singleton storage service instance\nlet storageServiceInstance: IStorageService | null = null;\n\n/**\n * Gets the Azure Blob Storage service instance.\n * All storage operations now use Azure exclusively.\n */\nexport async function getStorageService(): Promise<IStorageService> {\n  if (isClient) {\n    throw new Error('Storage service not available on client side');\n  }\n  \n  if (storageServiceInstance) {\n    return storageServiceInstance;\n  }\n\n  storageServiceInstance = await createAzureStorageService();\n  return storageServiceInstance;\n}\n\n/**\n * Creates an Azure Blob Storage service instance with proper configuration.\n */\nasync function createAzureStorageService(): Promise<AzureBlobStorageService> {\n  if (isClient) {\n    throw new Error('Storage service not available on client side');\n  }\n  \n  try {\n    const config = await getConfiguration();\n    const storageAccountName = config['AZURE_STORAGE_ACCOUNT'] || process.env.AZURE_STORAGE_ACCOUNT || 'prepbettrstorage684';\n    const containerName = config['AZURE_STORAGE_CONTAINER'] || process.env.AZURE_STORAGE_CONTAINER || 'resumes';\n    \n    return new AzureBlobStorageService(storageAccountName, containerName);\n  } catch (error) {\n    console.error('Failed to create Azure storage service:', error);\n    throw error;\n  }\n}\n\n\n/**\n * Resets the singleton storage service instance.\n * Useful for testing or configuration changes.\n */\nexport function resetStorageService(): void {\n  storageServiceInstance = null;\n}\n\n/**\n * Resume-specific utilities for backward compatibility\n */\nexport class ResumeStorageService {\n  private storageService: IStorageService | null = null;\n\n  async getService(): Promise<IStorageService> {\n    if (!this.storageService) {\n      this.storageService = await getStorageService();\n    }\n    return this.storageService;\n  }\n\n  /**\n   * Upload a resume file with proper path organization\n   */\n  async uploadResume(\n    userId: string,\n    fileBuffer: Buffer,\n    fileName: string,\n    mimeType: string\n  ): Promise<{ fileUrl: string; filePath: string; sasUrl?: string; provider: StorageProvider }> {\n    const service = await this.getService();\n    const filePath = `resumes/${userId}/${fileName}`;\n    \n    const result = await service.upload(fileBuffer, filePath, mimeType);\n    \n    return {\n      fileUrl: result.url,\n      filePath: result.path,\n      sasUrl: result.sasUrl,\n      provider: StorageProvider.Azure,\n    };\n  }\n\n  /**\n   * Delete a resume file\n   */\n  async deleteResume(filePath: string): Promise<void> {\n    const service = await this.getService();\n    await service.delete(filePath);\n  }\n\n  /**\n   * Generate a secure URL for resume access\n   */\n  async getResumeUrl(filePath: string, expiresInHours: number = 24): Promise<string> {\n    const service = await this.getService();\n    return await service.getPublicUrl(filePath, {\n      expiresIn: expiresInHours * 3600,\n      accessType: 'read',\n    });\n  }\n}\n\n// Export singleton instance for resume operations\nexport const resumeStorageService = new ResumeStorageService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/storage/providers/AzureBlobStorageService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getConfiguration' is defined but never used.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":26}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  BlobServiceClient,\n  ContainerClient,\n  StorageSharedKeyCredential,\n  BlobSASPermissions,\n  generateBlobSASQueryParameters,\n} from '@azure/storage-blob';\nimport { DefaultAzureCredential } from '@azure/identity';\nimport { trace } from '@opentelemetry/api';\n\nimport { IStorageService, FileMeta, SignedUrlOptions, StorageProvider, StorageError } from '../IStorageService';\nimport { getConfiguration } from '@/lib/azure-config';\n\nconst TRACER_NAME = 'AzureBlobStorageService';\n\nexport class AzureBlobStorageService implements IStorageService {\n  private containerClient: ContainerClient;\n  private storageAccountName: string;\n  private isInitialized = false;\n\n  constructor(storageAccountName: string, private containerName: string) {\n    this.storageAccountName = storageAccountName;\n    const blobServiceUrl = `https://${this.storageAccountName}.blob.core.windows.net`;\n\n    // Use DefaultAzureCredential in production, fallback to connection string for local dev\n    const credential = process.env.AZURE_STORAGE_CONNECTION_STRING\n      ? new StorageSharedKeyCredential(this.storageAccountName, process.env.AZURE_STORAGE_ACCOUNT_KEY!)\n      : new DefaultAzureCredential();\n\n    const blobServiceClient = new BlobServiceClient(blobServiceUrl, credential);\n    this.containerClient = blobServiceClient.getContainerClient(this.containerName);\n  }\n\n  async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    const tracer = trace.getTracer(TRACER_NAME);\n    const span = tracer.startSpan('initialize');\n\n    try {\n      await this.containerClient.createIfNotExists(); // Private access by default\n      this.isInitialized = true;\n      span.setStatus({ code: 1 }); // OK\n    } catch (error) {\n      span.recordException(error as Error);\n      span.setStatus({ code: 2, message: (error as Error).message }); // ERROR\n      throw new StorageError('Failed to initialize Azure Blob Storage container', StorageProvider.Azure, error);\n    } finally {\n      span.end();\n    }\n  }\n\n  async upload(file: Buffer, path: string, mimeType?: string): Promise<FileMeta> {\n    await this.initialize();\n    const blockBlobClient = this.containerClient.getBlockBlobClient(path);\n\n    const tracer = trace.getTracer(TRACER_NAME);\n    const span = tracer.startSpan('upload');\n    span.setAttributes({ path, mimeType, size: file.length });\n\n    try {\n      await blockBlobClient.upload(file, file.length, { blobHTTPHeaders: { blobContentType: mimeType } });\n      const fileMeta: FileMeta = {\n        provider: StorageProvider.Azure,\n        url: blockBlobClient.url,\n        path,\n        size: file.length,\n        mimeType: mimeType || 'application/octet-stream',\n        createdAt: new Date(),\n      };\n      span.setStatus({ code: 1 });\n      return fileMeta;\n    } catch (error) {\n      span.recordException(error as Error);\n      span.setStatus({ code: 2, message: (error as Error).message });\n      throw new StorageError(`Failed to upload to Azure Blob Storage: ${path}`, StorageProvider.Azure, error);\n    } finally {\n      span.end();\n    }\n  }\n\n  async download(path: string): Promise<Buffer> {\n    await this.initialize();\n    const blockBlobClient = this.containerClient.getBlockBlobClient(path);\n\n    const tracer = trace.getTracer(TRACER_NAME);\n    const span = tracer.startSpan('download');\n    span.setAttribute('path', path);\n\n    try {\n      const buffer = await blockBlobClient.downloadToBuffer();\n      span.setStatus({ code: 1 });\n      return buffer;\n    } catch (error) {\n      span.recordException(error as Error);\n      span.setStatus({ code: 2, message: (error as Error).message });\n      throw new StorageError(`Failed to download from Azure Blob Storage: ${path}`, StorageProvider.Azure, error);\n    } finally {\n      span.end();\n    }\n  }\n\n  async delete(path: string): Promise<void> {\n    await this.initialize();\n    const blockBlobClient = this.containerClient.getBlockBlobClient(path);\n\n    const tracer = trace.getTracer(TRACER_NAME);\n    const span = tracer.startSpan('delete');\n    span.setAttribute('path', path);\n\n    try {\n      await blockBlobClient.delete();\n      span.setStatus({ code: 1 });\n    } catch (error) {\n      span.recordException(error as Error);\n      span.setStatus({ code: 2, message: (error as Error).message });\n      throw new StorageError(`Failed to delete from Azure Blob Storage: ${path}`, StorageProvider.Azure, error);\n    } finally {\n      span.end();\n    }\n  }\n\n  async getPublicUrl(path: string, options?: SignedUrlOptions): Promise<string> {\n    await this.initialize();\n    const blockBlobClient = this.containerClient.getBlockBlobClient(path);\n\n    const permissions = new BlobSASPermissions();\n    permissions.read = options?.accessType === 'read' || !options?.accessType;\n    permissions.write = options?.accessType === 'write';\n\n    const expiryDate = new Date();\n    expiryDate.setSeconds(expiryDate.getSeconds() + (options?.expiresIn || 3600)); // Default to 1 hour\n\n    const sasQueryParameters = generateBlobSASQueryParameters(\n      {\n        containerName: this.containerName,\n        blobName: path,\n        permissions,\n        startsOn: new Date(),\n        expiresOn: expiryDate,\n      },\n      this.containerClient.credential as StorageSharedKeyCredential\n    );\n\n    return `${blockBlobClient.url}?${sasQueryParameters.toString()}`;\n  }\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/test-helpers/browser-test-shims.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[525,528],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[525,528],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[553,556],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[553,556],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[639,642],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[639,642],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[723,726],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[723,726],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'args' is defined but never used.","line":80,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":85,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2527,2530],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2527,2530],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":97,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2869,2872],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2869,2872],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":98,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2925,2928],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2925,2928],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":99,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2971,2974],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2971,2974],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3253,3256],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3253,3256],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":120,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3478,3481],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3478,3481],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":129,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3713,3716],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3713,3716],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":171,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":171,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5022,5025],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5022,5025],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Browser-side helper functions for E2E testing\n * These functions are injected into the browser context during tests\n * to simulate various scenarios and provide access to internal state\n */\n\ndeclare global {\n  interface Window {\n    // Test helpers\n    simulateVoiceTranscript?: (transcript: string, isFinal?: boolean) => void;\n    simulateAgentFailure?: (agentType: string) => void;\n    simulateNetworkFailure?: () => void;\n    restoreNetwork?: () => void;\n    \n    // State exposure for tests\n    interviewSession?: any;\n    interviewResults?: any;\n    \n    // Test utilities\n    __BROWSER_TEST_HELPERS__?: {\n      voiceSession?: any;\n      networkStatus?: 'online' | 'offline';\n      agentStates?: Record<string, any>;\n    };\n  }\n}\n\n/**\n * Initialize test helpers in the browser context\n * Call this from your app's root component when in test mode\n */\nexport function initializeBrowserTestShims() {\n  if (typeof window === 'undefined' || !isTestEnvironment()) {\n    return;\n  }\n\n  // Initialize test helpers container\n  window.__BROWSER_TEST_HELPERS__ = {\n    networkStatus: 'online',\n    agentStates: {},\n  };\n\n  // Voice transcript simulation\n  window.simulateVoiceTranscript = (transcript: string, isFinal = true) => {\n    const voiceSession = window.__BROWSER_TEST_HELPERS__?.voiceSession;\n    if (voiceSession && typeof voiceSession.onTranscriptReceived === 'function') {\n      voiceSession.onTranscriptReceived({\n        transcript,\n        isFinal,\n        confidence: 0.95,\n        timestamp: Date.now(),\n      });\n    } else {\n      // Fallback: dispatch custom event\n      window.dispatchEvent(new CustomEvent('test:voice-transcript', {\n        detail: { transcript, isFinal }\n      }));\n    }\n  };\n\n  // Agent failure simulation\n  window.simulateAgentFailure = (agentType: string) => {\n    if (window.__BROWSER_TEST_HELPERS__?.agentStates) {\n      window.__BROWSER_TEST_HELPERS__.agentStates[agentType] = 'failed';\n    }\n    \n    window.dispatchEvent(new CustomEvent('test:agent-failure', {\n      detail: { agentType, timestamp: Date.now() }\n    }));\n  };\n\n  // Network failure simulation\n  window.simulateNetworkFailure = () => {\n    if (window.__BROWSER_TEST_HELPERS__) {\n      window.__BROWSER_TEST_HELPERS__.networkStatus = 'offline';\n    }\n    \n    // Mock fetch to return network errors\n    const originalFetch = window.fetch;\n    window.fetch = async (...args) => {\n      throw new Error('Network request failed (simulated)');\n    };\n    \n    // Store original fetch for restoration\n    (window as any).__originalFetch = originalFetch;\n    \n    window.dispatchEvent(new CustomEvent('test:network-offline'));\n  };\n\n  // Network restoration\n  window.restoreNetwork = () => {\n    if (window.__BROWSER_TEST_HELPERS__) {\n      window.__BROWSER_TEST_HELPERS__.networkStatus = 'online';\n    }\n    \n    // Restore original fetch\n    if ((window as any).__originalFetch) {\n      window.fetch = (window as any).__originalFetch;\n      delete (window as any).__originalFetch;\n    }\n    \n    window.dispatchEvent(new CustomEvent('test:network-online'));\n  };\n\n  console.log('[Test Shims] Browser test helpers initialized');\n}\n\n/**\n * Update interview session reference for test access\n */\nexport function exposeInterviewSession(session: any) {\n  if (typeof window !== 'undefined' && isTestEnvironment()) {\n    window.interviewSession = session;\n  }\n}\n\n/**\n * Update interview results reference for test access\n */\nexport function exposeInterviewResults(results: any) {\n  if (typeof window !== 'undefined' && isTestEnvironment()) {\n    window.interviewResults = results;\n  }\n}\n\n/**\n * Set voice session reference for voice transcript simulation\n */\nexport function exposeVoiceSession(voiceSession: any) {\n  if (typeof window !== 'undefined' && isTestEnvironment() && window.__BROWSER_TEST_HELPERS__) {\n    window.__BROWSER_TEST_HELPERS__.voiceSession = voiceSession;\n  }\n}\n\n/**\n * Check if we're in a test environment\n */\nfunction isTestEnvironment(): boolean {\n  return (\n    process.env.NODE_ENV === 'test' ||\n    process.env.NEXT_PUBLIC_TESTING === 'true' ||\n    typeof window !== 'undefined' && window.location.search.includes('test=true')\n  );\n}\n\n/**\n * Wait for interview phase completion\n * Useful for E2E tests to know when a phase is done\n */\nexport function waitForPhaseCompletion(phaseName: string, timeoutMs = 30000): Promise<void> {\n  return new Promise((resolve, reject) => {\n    const timeout = setTimeout(() => {\n      reject(new Error(`Phase ${phaseName} did not complete within ${timeoutMs}ms`));\n    }, timeoutMs);\n\n    const handler = (event: CustomEvent) => {\n      if (event.detail.phase === phaseName) {\n        clearTimeout(timeout);\n        window.removeEventListener('test:phase-complete', handler as EventListener);\n        resolve();\n      }\n    };\n\n    window.addEventListener('test:phase-complete', handler as EventListener);\n  });\n}\n\n/**\n * Emit phase completion event (call from your interview components)\n */\nexport function emitPhaseCompletion(phaseName: string, results?: any) {\n  if (typeof window !== 'undefined' && isTestEnvironment()) {\n    window.dispatchEvent(new CustomEvent('test:phase-complete', {\n      detail: { phase: phaseName, results, timestamp: Date.now() }\n    }));\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/test-helpers/test-integration.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[608,611],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[608,611],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[634,637],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[634,637],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[656,659],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[656,659],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'options' is assigned a value but never used.","line":55,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":10}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect } from 'react';\nimport { \n  initializeBrowserTestShims,\n  exposeInterviewSession,\n  exposeInterviewResults,\n  exposeVoiceSession \n} from './browser-test-shims';\n\n/**\n * Component to initialize test helpers in the browser\n * Add this to your root layout or main app component when in test mode\n */\nexport function TestHelperInitializer() {\n  useEffect(() => {\n    initializeBrowserTestShims();\n  }, []);\n\n  return null; // This component doesn't render anything\n}\n\n/**\n * Hook to expose interview state to tests\n */\nexport function useTestStateExposure(\n  interviewSession?: any,\n  interviewResults?: any,\n  voiceSession?: any\n) {\n  useEffect(() => {\n    if (interviewSession) {\n      exposeInterviewSession(interviewSession);\n    }\n  }, [interviewSession]);\n\n  useEffect(() => {\n    if (interviewResults) {\n      exposeInterviewResults(interviewResults);\n    }\n  }, [interviewResults]);\n\n  useEffect(() => {\n    if (voiceSession) {\n      exposeVoiceSession(voiceSession);\n    }\n  }, [voiceSession]);\n}\n\n/**\n * Higher-order component to automatically expose state for testing\n */\nexport function withTestHelpers<T extends object>(\n  WrappedComponent: React.ComponentType<T>,\n  options: {\n    exposeInterviewSession?: boolean;\n    exposeVoiceSession?: boolean;\n    exposeResults?: boolean;\n  } = {}\n) {\n  const TestEnabledComponent = (props: T) => {\n    // Initialize test helpers\n    useEffect(() => {\n      initializeBrowserTestShims();\n    }, []);\n\n    return <WrappedComponent {...props} />;\n  };\n\n  TestEnabledComponent.displayName = `withTestHelpers(${WrappedComponent.displayName || WrappedComponent.name})`;\n  return TestEnabledComponent;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/utils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'devIconFallbacks' is assigned a value but never used.","line":236,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":236,"endColumn":23}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { companyLogos } from \"@/constants\";\nimport { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * Normalizes techstack data to always return a string array\n * Handles cases where techstack might be null, undefined, string, or already an array\n */\nexport function normalizeTechstack(techstack: string | string[] | null | undefined): string[] {\n  if (!techstack) return [];\n  \n  if (typeof techstack === 'string') {\n    return techstack.split(',').map(tech => tech.trim()).filter(Boolean);\n  }\n  \n  if (Array.isArray(techstack)) {\n    return techstack.filter(tech => typeof tech === 'string' && tech.trim());\n  }\n  \n  return [];\n}\n\n// Tech icon configuration using React Icons (primary) and DevIcons (fallback)\nconst techIconsMap: Record<string, { type: 'react-icon' | 'devicon'; icon: string; fallbackUrl?: string }> = {\n  // Frontend\n  'react': { type: 'react-icon', icon: 'FaReact' },\n  'nextjs': { type: 'react-icon', icon: 'SiNextdotjs' },\n  'next': { type: 'react-icon', icon: 'SiNextdotjs' },\n  'next.js': { type: 'react-icon', icon: 'SiNextdotjs' },\n  'vue': { type: 'react-icon', icon: 'FaVuejs' },\n  'angular': { type: 'react-icon', icon: 'FaAngular' },\n  'svelte': { type: 'react-icon', icon: 'SiSvelte' },\n  'typescript': { type: 'react-icon', icon: 'SiTypescript' },\n  'javascript': { type: 'react-icon', icon: 'SiJavascript' },\n  'html': { type: 'react-icon', icon: 'FaHtml5' },\n  'css': { type: 'react-icon', icon: 'FaCss3Alt' },\n  'sass': { type: 'react-icon', icon: 'FaSass' },\n  'tailwind': { type: 'react-icon', icon: 'SiTailwindcss' },\n  'tailwindcss': { type: 'react-icon', icon: 'SiTailwindcss' },\n  'bootstrap': { type: 'react-icon', icon: 'FaBootstrap' },\n  'materialui': { type: 'react-icon', icon: 'SiMui' },\n  'mui': { type: 'react-icon', icon: 'SiMui' },\n  \n  // Backend\n  'nodejs': { type: 'react-icon', icon: 'FaNodeJs' },\n  'node': { type: 'react-icon', icon: 'FaNodeJs' },\n  'node.js': { type: 'react-icon', icon: 'FaNodeJs' },\n  'express': { type: 'react-icon', icon: 'SiExpress' },\n  'python': { type: 'react-icon', icon: 'FaPython' },\n  'django': { type: 'react-icon', icon: 'SiDjango' },\n  'flask': { type: 'react-icon', icon: 'SiFlask' },\n  'java': { type: 'react-icon', icon: 'FaJava' },\n  'spring': { type: 'react-icon', icon: 'SiSpring' },\n  'php': { type: 'react-icon', icon: 'FaPhp' },\n  'ruby': { type: 'react-icon', icon: 'SiRuby' },\n  'rails': { type: 'react-icon', icon: 'SiRubyonrails' },\n  'go': { type: 'react-icon', icon: 'SiGo' },\n  'golang': { type: 'react-icon', icon: 'SiGo' },\n  'rust': { type: 'react-icon', icon: 'SiRust' },\n  'csharp': { type: 'devicon', icon: '', fallbackUrl: 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/csharp/csharp-original.svg' },\n  'c#': { type: 'devicon', icon: '', fallbackUrl: 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/csharp/csharp-original.svg' },\n  'dotnet': { type: 'react-icon', icon: 'SiDotnet' },\n  '.net': { type: 'react-icon', icon: 'SiDotnet' },\n  \n  // Databases\n  'mongodb': { type: 'react-icon', icon: 'SiMongodb' },\n  'mysql': { type: 'react-icon', icon: 'SiMysql' },\n  'postgresql': { type: 'react-icon', icon: 'SiPostgresql' },\n  'postgres': { type: 'react-icon', icon: 'SiPostgresql' },\n  'redis': { type: 'react-icon', icon: 'SiRedis' },\n  'sqlite': { type: 'react-icon', icon: 'SiSqlite' },\n  'oracle': { type: 'react-icon', icon: 'SiOracle' },\n  'elasticsearch': { type: 'react-icon', icon: 'SiElasticsearch' },\n  \n  // Mobile\n  'reactnative': { type: 'react-icon', icon: 'FaReact' },\n  'flutter': { type: 'react-icon', icon: 'SiFlutter' },\n  'swift': { type: 'react-icon', icon: 'SiSwift' },\n  'kotlin': { type: 'react-icon', icon: 'SiKotlin' },\n  'android': { type: 'react-icon', icon: 'FaAndroid' },\n  'ios': { type: 'react-icon', icon: 'FaApple' },\n  \n  // Cloud & DevOps\n  'docker': { type: 'react-icon', icon: 'FaDocker' },\n  'kubernetes': { type: 'react-icon', icon: 'SiKubernetes' },\n  'aws': { type: 'react-icon', icon: 'FaAws' },\n  'azure': { type: 'devicon', icon: '', fallbackUrl: 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/azure/azure-original.svg' },\n  'gcp': { type: 'react-icon', icon: 'SiGooglecloud' },\n  'googlecloud': { type: 'react-icon', icon: 'SiGooglecloud' },\n  'firebase': { type: 'react-icon', icon: 'SiFirebase' },\n  'netlify': { type: 'react-icon', icon: 'SiNetlify' },\n  \n  // Version Control\n  'git': { type: 'react-icon', icon: 'FaGitAlt' },\n  'github': { type: 'react-icon', icon: 'FaGithub' },\n  'gitlab': { type: 'react-icon', icon: 'FaGitlab' },\n  'bitbucket': { type: 'react-icon', icon: 'FaBitbucket' },\n  \n  // Build Tools & Bundlers\n  'webpack': { type: 'react-icon', icon: 'SiWebpack' },\n  'vite': { type: 'react-icon', icon: 'SiVite' },\n  'rollup': { type: 'react-icon', icon: 'SiRollupdotjs' },\n  'babel': { type: 'react-icon', icon: 'SiBabel' },\n  'eslint': { type: 'react-icon', icon: 'SiEslint' },\n  'prettier': { type: 'react-icon', icon: 'SiPrettier' },\n  \n  // Testing\n  'jest': { type: 'react-icon', icon: 'SiJest' },\n  'cypress': { type: 'react-icon', icon: 'SiCypress' },\n  'mocha': { type: 'devicon', icon: '', fallbackUrl: 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/mocha/mocha-plain.svg' },\n  \n  // State Management\n  'redux': { type: 'react-icon', icon: 'SiRedux' },\n  'mobx': { type: 'react-icon', icon: 'SiMobx' },\n  \n  // API Technologies\n  'graphql': { type: 'react-icon', icon: 'SiGraphql' },\n  'apollo': { type: 'react-icon', icon: 'SiApollographql' },\n  'restapi': { type: 'react-icon', icon: 'SiPostman' },\n  'rest': { type: 'react-icon', icon: 'SiPostman' },\n  \n  // CI/CD\n  'jenkins': { type: 'react-icon', icon: 'SiJenkins' },\n  'githubactions': { type: 'react-icon', icon: 'SiGithubactions' },\n  'circleci': { type: 'react-icon', icon: 'SiCircleci' },\n  'travis': { type: 'react-icon', icon: 'SiTravisci' },\n  \n  // Additional Popular Technologies\n  'laravel': { type: 'react-icon', icon: 'SiLaravel' },\n  'symfony': { type: 'react-icon', icon: 'SiSymfony' },\n  'codeigniter': { type: 'react-icon', icon: 'SiCodeigniter' },\n  'wordpress': { type: 'react-icon', icon: 'FaWordpress' },\n  'drupal': { type: 'react-icon', icon: 'FaDrupal' },\n  'joomla': { type: 'react-icon', icon: 'FaJoomla' },\n  'shopify': { type: 'react-icon', icon: 'SiShopify' },\n  'strapi': { type: 'react-icon', icon: 'SiStrapi' },\n  'contentful': { type: 'react-icon', icon: 'SiContentful' },\n  'sanity': { type: 'react-icon', icon: 'SiSanity' },\n  \n  // Additional Frameworks & Libraries (20+ new entries)\n  'nuxt': { type: 'react-icon', icon: 'SiNuxtdotjs' },\n  'nuxtjs': { type: 'react-icon', icon: 'SiNuxtdotjs' },\n  'gatsby': { type: 'react-icon', icon: 'SiGatsby' },\n  'ember': { type: 'react-icon', icon: 'SiEmber' },\n  'backbone': { type: 'react-icon', icon: 'SiBackbonedotjs' },\n  'polymer': { type: 'react-icon', icon: 'SiPolymer' },\n  'astro': { type: 'react-icon', icon: 'SiAstro' },\n  \n  // Backend Frameworks\n  'fastapi': { type: 'react-icon', icon: 'SiFastapi' },\n  'nestjs': { type: 'react-icon', icon: 'SiNestjs' },\n  'koa': { type: 'react-icon', icon: 'SiKoa' },\n  'hapi': { type: 'react-icon', icon: 'SiHapi' },\n  'deno': { type: 'react-icon', icon: 'SiDeno' },\n  \n  // Cloud & Database\n  'supabase': { type: 'react-icon', icon: 'SiSupabase' },\n  'prisma': { type: 'react-icon', icon: 'SiPrisma' },\n  'sequelize': { type: 'react-icon', icon: 'SiSequelize' },\n  'mariadb': { type: 'react-icon', icon: 'SiMariadb' },\n  'cassandra': { type: 'react-icon', icon: 'SiCassandra' },\n  'couchdb': { type: 'react-icon', icon: 'SiCouchdb' },\n  'neo4j': { type: 'react-icon', icon: 'SiNeo4j' },\n  'influxdb': { type: 'react-icon', icon: 'SiInfluxdb' },\n  \n  // DevOps & Monitoring\n  'grafana': { type: 'react-icon', icon: 'SiGrafana' },\n  'prometheus': { type: 'react-icon', icon: 'SiPrometheus' },\n  'terraform': { type: 'react-icon', icon: 'SiTerraform' },\n  'ansible': { type: 'react-icon', icon: 'SiAnsible' },\n  'puppet': { type: 'react-icon', icon: 'SiPuppet' },\n  'helm': { type: 'react-icon', icon: 'SiHelm' },\n  'argo': { type: 'react-icon', icon: 'SiArgo' },\n  'rancher': { type: 'react-icon', icon: 'SiRancher' },\n  'datadog': { type: 'react-icon', icon: 'SiDatadog' },\n  'newrelic': { type: 'react-icon', icon: 'SiNewrelic' },\n  'sentry': { type: 'react-icon', icon: 'SiSentry' },\n  \n  // Data Processing & Analytics\n  'elastic': { type: 'react-icon', icon: 'SiElastic' },\n  'logstash': { type: 'react-icon', icon: 'SiLogstash' },\n  'kibana': { type: 'react-icon', icon: 'SiKibana' },\n  'kafka': { type: 'react-icon', icon: 'SiApachekafka' },\n  'rabbitmq': { type: 'react-icon', icon: 'SiRabbitmq' },\n  'spark': { type: 'react-icon', icon: 'SiApachespark' },\n  'hadoop': { type: 'react-icon', icon: 'SiHadoop' },\n  'databricks': { type: 'react-icon', icon: 'SiDatabricks' },\n  'snowflake': { type: 'react-icon', icon: 'SiSnowflake' },\n  'tableau': { type: 'react-icon', icon: 'SiTableau' },\n  'powerbi': { type: 'react-icon', icon: 'SiPowerbi' },\n  'qlik': { type: 'react-icon', icon: 'SiQlik' },\n  \n  // Data Visualization\n  'd3': { type: 'react-icon', icon: 'SiD3Dotjs' },\n  'd3js': { type: 'react-icon', icon: 'SiD3Dotjs' },\n  'chartjs': { type: 'react-icon', icon: 'SiChartdotjs' },\n  'plotly': { type: 'react-icon', icon: 'SiPlotly' },\n  'leaflet': { type: 'react-icon', icon: 'SiLeaflet' },\n  'mapbox': { type: 'react-icon', icon: 'SiMapbox' },\n  'threejs': { type: 'react-icon', icon: 'SiThreejs' },\n  \n  // Testing Frameworks\n  'playwright': { type: 'react-icon', icon: 'SiPlaywright' },\n  'selenium': { type: 'react-icon', icon: 'SiSelenium' },\n  'testinglibrary': { type: 'react-icon', icon: 'SiTestinglibrary' },\n  'vitest': { type: 'react-icon', icon: 'SiVitest' },\n  'storybook': { type: 'react-icon', icon: 'SiStorybook' },\n  'chromatic': { type: 'react-icon', icon: 'SiChromatic' },\n  \n  // Validation & Design\n  'zod': { type: 'react-icon', icon: 'SiZod' },\n  'yup': { type: 'react-icon', icon: 'SiYup' },\n  'figma': { type: 'react-icon', icon: 'SiFigma' },\n  'sketch': { type: 'react-icon', icon: 'SiSketch' },\n  'adobexd': { type: 'react-icon', icon: 'SiAdobexd' },\n  'framer': { type: 'react-icon', icon: 'SiFramer' },\n  \n  // Web3 & Blockchain\n  'solidity': { type: 'react-icon', icon: 'SiSolidity' },\n  'ethereum': { type: 'react-icon', icon: 'SiEthereum' },\n  'web3': { type: 'react-icon', icon: 'SiWeb3Dotjs' },\n  'web3js': { type: 'react-icon', icon: 'SiWeb3Dotjs' },\n  'ipfs': { type: 'react-icon', icon: 'SiIpfs' },\n  'chainlink': { type: 'react-icon', icon: 'SiChainlink' },\n  'alchemy': { type: 'react-icon', icon: 'SiAlchemy' },\n  \n  // Payment Processing\n  'stripe': { type: 'react-icon', icon: 'SiStripe' },\n};\n\n// DevIcon fallback URLs for technologies not available in React Icons\nconst devIconFallbacks: Record<string, string> = {\n  'rails': 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/rails/rails-original-wordmark.svg',\n  'mocha': 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/mocha/mocha-plain.svg',\n  'materialui': 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/materialui/materialui-original.svg',\n  'oracle': 'https://cdn.jsdelivr.net/gh/devicons/devicon/icons/oracle/oracle-original.svg',\n};\n\nconst normalizeTechName = (tech: string) => {\n  if (!tech) return '';\n  // First normalize common tech names\n  const normalized = tech.toLowerCase()\n    .replace(/\\.js$/, '')\n    .replace(/\\s+/g, '')\n    .replace(/[^a-z0-9]/g, '');\n  \n  // Special handling for common tech names\n  if (['node', 'nodejs'].includes(normalized)) return 'nodejs';\n  if (['next', 'nextjs'].includes(normalized)) return 'nextjs';\n  \n  return normalized;\n};\n\n/**\n * Get available tech icons configuration for a given array of technologies\n * Only returns technologies that have corresponding icons available\n * @param techArray - Array of technology names\n * @param maxIcons - Maximum number of icons to return (default: 6)\n * @returns Array of tech icon configurations\n */\nexport const getTechIcons = (techArray: string[] = [], maxIcons: number = 6) => {\n  if (!techArray || techArray.length === 0) return [];\n  \n  // Filter and map technologies to their icon configurations\n  const availableIcons = techArray\n    .map(tech => {\n      const normalized = normalizeTechName(tech);\n      const iconConfig = techIconsMap[normalized];\n      \n      // Only include technologies that have icon configurations\n      if (iconConfig) {\n        return {\n          tech: tech.trim(), // Use original tech name for display\n          normalized,\n          ...iconConfig\n        };\n      }\n      return null;\n    })\n    .filter((icon): icon is NonNullable<typeof icon> => icon !== null) // Remove null values with proper typing\n    .slice(0, maxIcons); // Limit number of icons\n    \n  return availableIcons;\n};\n\n\n/**\n * Get company logo deterministically based on interview ID\n * Returns both logo path and company name\n */\nexport const getCompanyLogoForInterview = (id?: string): { logo: string; company: string } => {\n  // Use deterministic selection based on ID to ensure consistency\n  if (id) {\n    const hash = id.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    const index = hash % companyLogos.length;\n    const company = companyLogos[index];\n    const path = `/covers${company.logo}`;\n    console.log('Generated company logo:', path, 'Company:', company.name, 'for ID:', id);\n    return { logo: path, company: company.name };\n  }\n  // Fallback to first company if no ID provided\n  const fallback = companyLogos[0];\n  const path = `/covers${fallback.logo}`;\n  console.log('Fallback company logo:', path, 'Company:', fallback.name);\n  return { logo: path, company: fallback.name };\n};\n\n// Legacy function for backward compatibility\nexport const getRandomInterviewCover = (id?: string) => {\n  return getCompanyLogoForInterview(id).logo;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/utils/__tests__/template-engine.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'path' is defined but never used.","line":10,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":285,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":285,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10621,10624],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10621,10624],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Template Engine Unit Tests\n * \n * Tests for variable interpolation, conditional logic, loops, helper functions,\n * YAML template loading, and error handling.\n */\n\nimport { templateEngine, createTemplateEngine, renderTemplate } from '../template-engine';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n// Mock fs for testing\njest.mock('fs');\nconst mockFs = fs as jest.Mocked<typeof fs>;\n\ndescribe('Template Engine', () => {\n  beforeEach(() => {\n    // Clear cache before each test\n    templateEngine.clearCache();\n    jest.clearAllMocks();\n  });\n\n  describe('Variable Interpolation', () => {\n    test('should interpolate simple variables', () => {\n      const template = 'Hello {{name}}!';\n      const context = { name: 'World' };\n      const result = templateEngine.render(template, context);\n      expect(result).toBe('Hello World!');\n    });\n\n    test('should interpolate nested object properties', () => {\n      const template = 'Welcome {{user.profile.name}}';\n      const context = { user: { profile: { name: 'John Doe' } } };\n      const result = templateEngine.render(template, context);\n      expect(result).toBe('Welcome John Doe');\n    });\n\n    test('should handle missing variables gracefully', () => {\n      const template = 'Hello {{missing}}!';\n      const context = {};\n      const result = templateEngine.render(template, context);\n      expect(result).toBe('Hello !');\n    });\n\n    test('should handle null and undefined values', () => {\n      const template = 'Value: {{value}}';\n      const context = { value: null };\n      const result = templateEngine.render(template, context);\n      expect(result).toBe('Value: ');\n    });\n\n    test('should interpolate numbers and booleans', () => {\n      const template = 'Count: {{count}}, Active: {{active}}';\n      const context = { count: 42, active: true };\n      const result = templateEngine.render(template, context);\n      expect(result).toBe('Count: 42, Active: true');\n    });\n  });\n\n  describe('Conditional Logic', () => {\n    test('should render conditional blocks when condition is true', () => {\n      const template = '{{#if showMessage}}Hello World!{{/if}}';\n      const context = { showMessage: true };\n      const result = templateEngine.render(template, context);\n      expect(result).toBe('Hello World!');\n    });\n\n    test('should not render conditional blocks when condition is false', () => {\n      const template = '{{#if showMessage}}Hello World!{{/if}}';\n      const context = { showMessage: false };\n      const result = templateEngine.render(template, context);\n      expect(result).toBe('');\n    });\n\n    test('should handle nested object conditionals', () => {\n      const template = '{{#if user.isActive}}User is active{{/if}}';\n      const context = { user: { isActive: true } };\n      const result = templateEngine.render(template, context);\n      expect(result).toBe('User is active');\n    });\n\n    test('should handle comparison operators', () => {\n      const template = '{{#if age > 18}}Adult{{/if}}';\n      const context = { age: 25 };\n      const result = templateEngine.render(template, context);\n      expect(result).toBe('Adult');\n    });\n\n    test('should handle equality comparisons', () => {\n      const template = '{{#if status === \"active\"}}Status is active{{/if}}';\n      const context = { status: 'active' };\n      const result = templateEngine.render(template, context);\n      expect(result).toBe('Status is active');\n    });\n\n    test('should handle multiple conditional blocks', () => {\n      const template = '{{#if isAdmin}}Admin{{/if}}{{#if isMember}}Member{{/if}}';\n      const context = { isAdmin: false, isMember: true };\n      const result = templateEngine.render(template, context);\n      expect(result).toBe('Member');\n    });\n  });\n\n  describe('Loop Blocks', () => {\n    test('should iterate over arrays', () => {\n      const template = '{{#each items}}{{@value}} {{/each}}';\n      const context = { items: ['a', 'b', 'c'] };\n      const result = templateEngine.render(template, context);\n      expect(result).toBe('a b c ');\n    });\n\n    test('should iterate over object arrays', () => {\n      const template = '{{#each users}}{{name}} {{/each}}';\n      const context = { \n        users: [\n          { name: 'John' },\n          { name: 'Jane' }\n        ]\n      };\n      const result = templateEngine.render(template, context);\n      expect(result).toBe('John Jane ');\n    });\n\n    test('should provide loop metadata', () => {\n      const template = '{{#each items}}{{@index}}: {{@value}}{{#if @first}} (first){{/if}}{{#if @last}} (last){{/if}} {{/each}}';\n      const context = { items: ['a', 'b'] };\n      const result = templateEngine.render(template, context);\n      expect(result).toBe('0: a (first) 1: b (last) ');\n    });\n\n    test('should handle empty arrays', () => {\n      const template = '{{#each items}}{{@value}}{{/each}}No items';\n      const context = { items: [] };\n      const result = templateEngine.render(template, context);\n      expect(result).toBe('No items');\n    });\n\n    test('should handle nested loops', () => {\n      const template = '{{#each categories}}{{name}}: {{#each items}}{{@value}} {{/each}}{{/each}}';\n      const context = {\n        categories: [\n          { name: 'Fruits', items: ['apple', 'banana'] },\n          { name: 'Colors', items: ['red', 'blue'] }\n        ]\n      };\n      const result = templateEngine.render(template, context);\n      expect(result).toBe('Fruits: apple banana Colors: red blue ');\n    });\n  });\n\n  describe('Helper Functions', () => {\n    test('should use string helper functions', () => {\n      const template = '{{uppercase(name)}} - {{lowercase(name)}} - {{capitalize(name)}}';\n      const context = { name: 'john DOE' };\n      const result = templateEngine.render(template, context);\n      expect(result).toBe('JOHN DOE - john doe - John doe');\n    });\n\n    test('should use array helper functions', () => {\n      const template = 'Length: {{length(items)}}, First: {{first(items)}}, Last: {{last(items)}}';\n      const context = { items: ['a', 'b', 'c'] };\n      const result = templateEngine.render(template, context);\n      expect(result).toBe('Length: 3, First: a, Last: c');\n    });\n\n    test('should use join helper', () => {\n      const template = 'Items: {{join(items, \" | \")}}';\n      const context = { items: ['apple', 'banana', 'cherry'] };\n      const result = templateEngine.render(template, context);\n      expect(result).toBe('Items: apple | banana | cherry');\n    });\n\n    test('should use default helper', () => {\n      const template = 'Name: {{default(name, \"Unknown\")}}';\n      const context = { name: null };\n      const result = templateEngine.render(template, context);\n      expect(result).toBe('Name: Unknown');\n    });\n\n    test('should use comparison helpers', () => {\n      const template = 'Equal: {{eq(a, b)}}, Greater: {{gt(a, b)}}';\n      const context = { a: 5, b: 3 };\n      const result = templateEngine.render(template, context);\n      expect(result).toBe('Equal: false, Greater: true');\n    });\n\n    test('should use pluralize helper', () => {\n      const template = '{{pluralize(count, \"item\", \"items\")}}';\n      expect(templateEngine.render(template, { count: 1 })).toBe('item');\n      expect(templateEngine.render(template, { count: 2 })).toBe('items');\n    });\n\n    test('should use increment helper', () => {\n      const template = 'Question {{increment(@index)}}:';\n      const context = { '@index': 0 };\n      const result = templateEngine.render(template, context);\n      expect(result).toBe('Question 1:');\n    });\n\n    test('should handle helper function errors gracefully', () => {\n      const template = '{{unknown_helper(value)}}';\n      const context = { value: 'test' };\n      const result = templateEngine.render(template, context);\n      expect(result).toBe('{{unknown_helper(value)}}'); // Should return original expression\n    });\n  });\n\n  describe('Custom Helper Registration', () => {\n    test('should register and use custom helpers', () => {\n      const customEngine = createTemplateEngine();\n      customEngine.registerHelper('reverse', (str: string) => str.split('').reverse().join(''));\n      \n      const template = '{{reverse(text)}}';\n      const context = { text: 'hello' };\n      const result = customEngine.render(template, context);\n      expect(result).toBe('olleh');\n    });\n\n    test('should register helpers with multiple parameters', () => {\n      const customEngine = createTemplateEngine();\n      customEngine.registerHelper('multiply', (a: number, b: number) => String(a * b));\n      \n      const template = '{{multiply(x, y)}}';\n      const context = { x: 3, y: 4 };\n      const result = customEngine.render(template, context);\n      expect(result).toBe('12');\n    });\n  });\n\n  describe('YAML Template Loading', () => {\n    test('should load template from YAML file', () => {\n      const yamlContent = `\nname: \"test-template\"\ndescription: \"Test template\"\ntemplate: \"Hello {{name}}!\"\nvariables:\n  name: \"World\"\n`;\n      mockFs.readFileSync.mockReturnValue(yamlContent);\n      \n      const templatePath = '/test/template.yaml';\n      const template = templateEngine.loadTemplate(templatePath);\n      \n      expect(template.name).toBe('test-template');\n      expect(template.description).toBe('Test template');\n      expect(template.template).toBe('Hello {{name}}!');\n      expect(template.variables).toEqual({ name: 'World' });\n    });\n\n    test('should render from loaded template config', () => {\n      const yamlContent = `\nname: \"greeting-template\"\ntemplate: \"Hello {{name}}!\"\nvariables:\n  name: \"World\"\n`;\n      mockFs.readFileSync.mockReturnValue(yamlContent);\n      \n      const templatePath = '/test/greeting.yaml';\n      const config = templateEngine.loadTemplate(templatePath);\n      const result = templateEngine.renderFromConfig(config, { name: 'User' });\n      \n      expect(result).toBe('Hello User!'); // Context overrides template variables\n    });\n\n    test('should cache loaded templates', () => {\n      const yamlContent = `\nname: \"cached-template\"\ntemplate: \"Cached {{value}}\"\n`;\n      mockFs.readFileSync.mockReturnValue(yamlContent);\n      \n      const templatePath = '/test/cached.yaml';\n      \n      // First load\n      templateEngine.loadTemplate(templatePath);\n      // Second load (should use cache)\n      templateEngine.loadTemplate(templatePath);\n      \n      expect(mockFs.readFileSync).toHaveBeenCalledTimes(1);\n    });\n\n    test('should load template set from directory', () => {\n      const files = ['template1.yaml', 'template2.yml', 'readme.txt'];\n      mockFs.readdirSync.mockReturnValue(files as any);\n      \n      mockFs.readFileSync\n        .mockReturnValueOnce('name: \"template1\"\\ntemplate: \"Template 1\"')\n        .mockReturnValueOnce('name: \"template2\"\\ntemplate: \"Template 2\"');\n      \n      const templates = templateEngine.loadTemplateSet('/test/templates');\n      \n      expect(Object.keys(templates)).toEqual(['template1', 'template2']);\n      expect(templates.template1.template).toBe('Template 1');\n      expect(templates.template2.template).toBe('Template 2');\n    });\n\n    test('should handle invalid YAML gracefully', () => {\n      mockFs.readFileSync.mockReturnValue('invalid: yaml: content:');\n      \n      expect(() => {\n        templateEngine.loadTemplate('/test/invalid.yaml');\n      }).toThrow('Failed to load template from /test/invalid.yaml');\n    });\n\n    test('should validate template config', () => {\n      mockFs.readFileSync.mockReturnValue('name: \"no-template\"\\ndescription: \"Missing template field\"');\n      \n      expect(() => {\n        templateEngine.loadTemplate('/test/no-template.yaml');\n      }).toThrow('Template config must have a \"template\" field');\n    });\n  });\n\n  describe('Complex Template Scenarios', () => {\n    test('should handle combined conditionals and loops', () => {\n      const template = `\n{{#if showItems}}\nItems:\n{{#each items}}\n  - {{name}}{{#if isActive}} (active){{/if}}\n{{/each}}\n{{/if}}\n`;\n      const context = {\n        showItems: true,\n        items: [\n          { name: 'Item 1', isActive: true },\n          { name: 'Item 2', isActive: false },\n          { name: 'Item 3', isActive: true }\n        ]\n      };\n      const result = templateEngine.render(template, context);\n      expect(result.trim()).toContain('Item 1 (active)');\n      expect(result.trim()).toContain('Item 2');\n      expect(result.trim()).toContain('Item 3 (active)');\n    });\n\n    test('should handle nested conditionals', () => {\n      const template = '{{#if user}}{{#if user.isAdmin}}Admin: {{user.name}}{{/if}}{{/if}}';\n      const context = { user: { name: 'John', isAdmin: true } };\n      const result = templateEngine.render(template, context);\n      expect(result).toBe('Admin: John');\n    });\n\n    test('should handle helper functions in loops', () => {\n      const template = '{{#each items}}{{increment(@index)}}: {{uppercase(name)}} {{/each}}';\n      const context = { items: [{ name: 'apple' }, { name: 'banana' }] };\n      const result = templateEngine.render(template, context);\n      expect(result).toBe('1: APPLE 2: BANANA ');\n    });\n\n    test('should handle complex nested data structures', () => {\n      const template = `\n{{#each departments}}\nDepartment: {{name}}\n{{#each employees}}\n  - {{profile.firstName}} {{profile.lastName}} ({{role}})\n  {{#if skills}}Skills: {{join(skills, \", \")}}{{/if}}\n{{/each}}\n{{/each}}\n`;\n      const context = {\n        departments: [\n          {\n            name: 'Engineering',\n            employees: [\n              {\n                profile: { firstName: 'John', lastName: 'Doe' },\n                role: 'Developer',\n                skills: ['JavaScript', 'React']\n              }\n            ]\n          }\n        ]\n      };\n      const result = templateEngine.render(template, context);\n      expect(result).toContain('Department: Engineering');\n      expect(result).toContain('John Doe (Developer)');\n      expect(result).toContain('Skills: JavaScript, React');\n    });\n  });\n\n  describe('Error Handling', () => {\n    test('should handle rendering errors gracefully', () => {\n      // Test with a template that would cause an error during processing\n      const invalidTemplate = '{{helper_that_throws()}}';\n      const context = {};\n      \n      // Register a helper that throws an error\n      const customEngine = createTemplateEngine();\n      customEngine.registerHelper('helper_that_throws', () => {\n        throw new Error('Test error');\n      });\n      \n      // The template should render with the original expression when helper fails\n      const result = customEngine.render(invalidTemplate, context);\n      expect(result).toBe('{{helper_that_throws()}}');\n    });\n\n    test('should handle file loading errors', () => {\n      mockFs.readFileSync.mockImplementation(() => {\n        throw new Error('File not found');\n      });\n      \n      expect(() => {\n        templateEngine.loadTemplate('/nonexistent/template.yaml');\n      }).toThrow('Failed to load template from /nonexistent/template.yaml: File not found');\n    });\n\n    test('should handle directory loading errors', () => {\n      mockFs.readdirSync.mockImplementation(() => {\n        throw new Error('Directory not found');\n      });\n      \n      expect(() => {\n        templateEngine.loadTemplateSet('/nonexistent/directory');\n      }).toThrow('Failed to load templates from /nonexistent/directory: Directory not found');\n    });\n\n    test('should return original expression on interpolation errors', () => {\n      const template = '{{very.deeply.nested.property.that.does.not.exist}}';\n      const context = {};\n      const result = templateEngine.render(template, context);\n      expect(result).toBe('');\n    });\n  });\n\n  describe('Cache Management', () => {\n    test('should track cache statistics', () => {\n      const yamlContent = 'name: \"test\"\\ntemplate: \"Hello\"';\n      mockFs.readFileSync.mockReturnValue(yamlContent);\n      \n      // Load a template\n      templateEngine.loadTemplate('/test/template1.yaml');\n      templateEngine.loadTemplate('/test/template2.yaml');\n      \n      const stats = templateEngine.getCacheStats();\n      expect(stats.size).toBe(2);\n      expect(stats.keys.length).toBe(2);\n    });\n\n    test('should clear cache', () => {\n      const yamlContent = 'name: \"test\"\\ntemplate: \"Hello\"';\n      mockFs.readFileSync.mockReturnValue(yamlContent);\n      \n      // Load template\n      templateEngine.loadTemplate('/test/template.yaml');\n      expect(templateEngine.getCacheStats().size).toBe(1);\n      \n      // Clear cache\n      templateEngine.clearCache();\n      expect(templateEngine.getCacheStats().size).toBe(0);\n    });\n  });\n\n  describe('Utility Functions', () => {\n    test('should provide renderTemplate utility function', () => {\n      const result = renderTemplate('Hello {{name}}!', { name: 'World' });\n      expect(result).toBe('Hello World!');\n    });\n\n    test('should create independent template engines', () => {\n      const engine1 = createTemplateEngine();\n      const engine2 = createTemplateEngine();\n      \n      engine1.registerHelper('custom1', () => 'Engine 1');\n      engine2.registerHelper('custom2', () => 'Engine 2');\n      \n      const result1 = engine1.render('{{custom1()}}', {});\n      const result2 = engine2.render('{{custom2()}}', {});\n      \n      expect(result1).toBe('Engine 1');\n      expect(result2).toBe('Engine 2');\n    });\n  });\n\n  describe('Performance Considerations', () => {\n    test('should handle large templates efficiently', () => {\n      const largeArray = Array.from({ length: 1000 }, (_, i) => ({ id: i, name: `Item ${i}` }));\n      const template = '{{#each items}}{{id}}: {{name}} {{/each}}';\n      const context = { items: largeArray };\n      \n      const startTime = Date.now();\n      const result = templateEngine.render(template, context);\n      const endTime = Date.now();\n      \n      expect(result).toContain('0: Item 0');\n      expect(result).toContain('999: Item 999');\n      expect(endTime - startTime).toBeLessThan(1000); // Should complete within 1 second\n    });\n\n    test('should handle deeply nested objects', () => {\n      const deepObject = {\n        level1: {\n          level2: {\n            level3: {\n              level4: {\n                level5: {\n                  value: 'Deep Value'\n                }\n              }\n            }\n          }\n        }\n      };\n      \n      const template = '{{level1.level2.level3.level4.level5.value}}';\n      const result = templateEngine.render(template, deepObject);\n      expect(result).toBe('Deep Value');\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/utils/audio-helpers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":198,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":198,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6535,6538],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6535,6538],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":208,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":208,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6784,6787],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6784,6787],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":209,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":209,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6816,6819],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6816,6819],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":210,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":210,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6855,6858],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6855,6858],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Audio utility helper functions for voice conversation system\n */\n\n/**\n * Play audio from byte array data\n * @param bytes - Audio data as number array or Uint8Array\n * @param mimeType - MIME type of the audio (default: 'audio/wav')\n * @returns Promise that resolves when audio finishes playing\n */\nexport async function playAudioBuffer(\n  bytes: number[] | Uint8Array,\n  mimeType: string = 'audio/wav'\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    try {\n      // Convert to Uint8Array if needed\n      const audioArray = bytes instanceof Uint8Array ? bytes : new Uint8Array(bytes);\n      \n      // Create blob from audio data with proper ArrayBuffer\n      const arrayBuffer = new ArrayBuffer(audioArray.length);\n      const view = new Uint8Array(arrayBuffer);\n      view.set(audioArray);\n      const audioBlob = new Blob([arrayBuffer], { type: mimeType });\n      const audioUrl = URL.createObjectURL(audioBlob);\n      \n      // Create and configure audio element\n      const audio = new Audio(audioUrl);\n      \n      // Set up event listeners\n      audio.onended = () => {\n        console.log('üîä Audio playback completed');\n        URL.revokeObjectURL(audioUrl);\n        resolve();\n      };\n      \n      audio.onerror = (error) => {\n        console.error('‚ùå Audio playback error:', error);\n        URL.revokeObjectURL(audioUrl);\n        reject(new Error('Audio playback failed'));\n      };\n      \n      // Start playback\n      audio.play().catch((error) => {\n        console.error('‚ùå Failed to start audio playback:', error);\n        URL.revokeObjectURL(audioUrl);\n        reject(error);\n      });\n    } catch (error) {\n      console.error('‚ùå Error creating audio from buffer:', error);\n      reject(error);\n    }\n  });\n}\n\n/**\n * Create an audio blob from byte array\n * @param bytes - Audio data as number array or Uint8Array\n * @param mimeType - MIME type of the audio (default: 'audio/wav')\n * @returns Audio blob\n */\nexport function createAudioBlob(\n  bytes: number[] | Uint8Array,\n  mimeType: string = 'audio/wav'\n): Blob {\n  const audioArray = bytes instanceof Uint8Array ? bytes : new Uint8Array(bytes);\n  const arrayBuffer = new ArrayBuffer(audioArray.length);\n  const view = new Uint8Array(arrayBuffer);\n  view.set(audioArray);\n  return new Blob([arrayBuffer], { type: mimeType });\n}\n\n/**\n * Play audio from blob with promise support\n * @param audioBlob - Audio blob to play\n * @returns Promise that resolves when audio finishes playing\n */\nexport async function playAudioBlob(audioBlob: Blob): Promise<void> {\n  return new Promise((resolve, reject) => {\n    try {\n      const audioUrl = URL.createObjectURL(audioBlob);\n      const audio = new Audio(audioUrl);\n      \n      audio.onended = () => {\n        console.log('üîä Audio blob playback completed');\n        URL.revokeObjectURL(audioUrl);\n        resolve();\n      };\n      \n      audio.onerror = (error) => {\n        console.error('‚ùå Audio blob playback error:', error);\n        URL.revokeObjectURL(audioUrl);\n        reject(new Error('Audio blob playback failed'));\n      };\n      \n      audio.play().catch((error) => {\n        console.error('‚ùå Failed to start audio blob playback:', error);\n        URL.revokeObjectURL(audioUrl);\n        reject(error);\n      });\n    } catch (error) {\n      console.error('‚ùå Error playing audio blob:', error);\n      reject(error);\n    }\n  });\n}\n\n/**\n * Validate audio buffer data\n * @param bytes - Audio data to validate\n * @returns Whether the audio data is valid\n */\nexport function validateAudioBuffer(bytes: number[] | Uint8Array | null | undefined): boolean {\n  if (!bytes) return false;\n  if (Array.isArray(bytes)) return bytes.length > 0;\n  if (bytes instanceof Uint8Array) return bytes.length > 0;\n  return false;\n}\n\n/**\n * Convert audio buffer to different formats\n * @param bytes - Source audio data\n * @param fromMimeType - Source MIME type\n * @param toMimeType - Target MIME type\n * @returns Promise that resolves with converted audio buffer\n */\nexport async function convertAudioBuffer(\n  bytes: number[] | Uint8Array,\n  fromMimeType: string,\n  toMimeType: string\n): Promise<Uint8Array> {\n  // For now, return as-is since conversion would require audio processing libraries\n  // This is a placeholder for future audio format conversion functionality\n  console.warn(`Audio conversion from ${fromMimeType} to ${toMimeType} not implemented yet`);\n  return bytes instanceof Uint8Array ? bytes : new Uint8Array(bytes);\n}\n\n/**\n * Get audio buffer duration (if possible to determine from header)\n * @param bytes - Audio data\n * @param mimeType - MIME type of the audio\n * @returns Duration in seconds, or null if cannot be determined\n */\nexport function getAudioBufferDuration(\n  bytes: number[] | Uint8Array,\n  mimeType: string = 'audio/wav'\n): number | null {\n  try {\n    const audioArray = bytes instanceof Uint8Array ? bytes : new Uint8Array(bytes);\n    \n    if (mimeType === 'audio/wav' && audioArray.length >= 44) {\n      // Parse WAV header for duration\n      const view = new DataView(audioArray.buffer);\n      \n      // Check for RIFF header\n      const riffHeader = String.fromCharCode(...audioArray.slice(0, 4));\n      if (riffHeader !== 'RIFF') return null;\n      \n      // Get sample rate (offset 24, 4 bytes, little endian)\n      const sampleRate = view.getUint32(24, true);\n      \n      // Get data chunk size (we need to find the data chunk)\n      // This is a simplified version - real WAV parsing is more complex\n      const dataSize = audioArray.length - 44; // Assume standard 44-byte header\n      const duration = dataSize / (sampleRate * 2); // Assume 16-bit mono\n      \n      return duration;\n    }\n    \n    return null;\n  } catch (error) {\n    console.error('‚ùå Error getting audio buffer duration:', error);\n    return null;\n  }\n}\n\n/**\n * Preload audio buffer for faster playback\n * @param bytes - Audio data\n * @param mimeType - MIME type of the audio\n * @returns Audio element ready for playback\n */\nexport function preloadAudioBuffer(\n  bytes: number[] | Uint8Array,\n  mimeType: string = 'audio/wav'\n): HTMLAudioElement {\n  const audioArray = bytes instanceof Uint8Array ? bytes : new Uint8Array(bytes);\n  const arrayBuffer = new ArrayBuffer(audioArray.length);\n  const view = new Uint8Array(arrayBuffer);\n  view.set(audioArray);\n  const audioBlob = new Blob([arrayBuffer], { type: mimeType });\n  const audioUrl = URL.createObjectURL(audioBlob);\n  \n  const audio = new Audio(audioUrl);\n  audio.preload = 'auto';\n  \n  // Store cleanup function on the audio element\n  (audio as any).__cleanup = () => URL.revokeObjectURL(audioUrl);\n  \n  return audio;\n}\n\n/**\n * Cleanup preloaded audio element\n * @param audio - Audio element to cleanup\n */\nexport function cleanupPreloadedAudio(audio: HTMLAudioElement): void {\n  if ((audio as any).__cleanup) {\n    (audio as any).__cleanup();\n    delete (audio as any).__cleanup;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/utils/communityInterviewStorage.ts","messages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":95,"column":9,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":95,"endColumn":22,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[2930,2943],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":97,"column":9,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":97,"endColumn":22,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[3029,3042],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Utility functions for managing community interview localStorage data\n\nexport interface CommunityInterviewData {\n    id: string;\n    role: string;\n    type: string;\n    techstack: string[];\n    level?: string;\n    createdAt?: string;\n    companyLogo?: string;\n    timestamp: number;\n}\n\nexport const COMMUNITY_INTERVIEW_STORAGE_KEY = 'communityMockInterviewSelection';\n\n/**\n * Safely get community interview data from localStorage\n */\nexport const getCommunityInterviewFromStorage = (): CommunityInterviewData | null => {\n    if (typeof window === 'undefined') return null;\n    \n    try {\n        const stored = localStorage.getItem(COMMUNITY_INTERVIEW_STORAGE_KEY);\n        if (!stored) return null;\n        \n        const data = JSON.parse(stored) as CommunityInterviewData;\n        \n        // Check if data is less than 24 hours old to prevent stale data\n        const isStale = Date.now() - data.timestamp > 24 * 60 * 60 * 1000;\n        if (isStale) {\n            localStorage.removeItem(COMMUNITY_INTERVIEW_STORAGE_KEY);\n            return null;\n        }\n        \n        return data;\n    } catch (error) {\n        console.error('Error parsing stored community interview data:', error);\n        localStorage.removeItem(COMMUNITY_INTERVIEW_STORAGE_KEY);\n        return null;\n    }\n};\n\n/**\n * Store community interview data in localStorage\n */\nexport const setCommunityInterviewInStorage = (data: Omit<CommunityInterviewData, 'timestamp'>): void => {\n    if (typeof window === 'undefined') return;\n    \n    try {\n        const dataWithTimestamp: CommunityInterviewData = {\n            ...data,\n            timestamp: Date.now()\n        };\n        localStorage.setItem(COMMUNITY_INTERVIEW_STORAGE_KEY, JSON.stringify(dataWithTimestamp));\n    } catch (error) {\n        console.error('Error storing community interview data:', error);\n    }\n};\n\n/**\n * Clear community interview data from localStorage\n */\nexport const clearCommunityInterviewFromStorage = (): void => {\n    if (typeof window === 'undefined') return;\n    \n    try {\n        localStorage.removeItem(COMMUNITY_INTERVIEW_STORAGE_KEY);\n        console.log('Community interview data cleared from storage');\n    } catch (error) {\n        console.error('Error clearing community interview data:', error);\n    }\n};\n\n/**\n * Check if stored data matches given interview ID\n */\nexport const isStoredInterviewId = (interviewId: string): boolean => {\n    const stored = getCommunityInterviewFromStorage();\n    return stored?.id === interviewId;\n};\n\n/**\n * Parse techstack from URL parameter string\n */\nexport const parseTechstack = (techstackParam: string | null): string[] => {\n    if (!techstackParam) return [];\n    return techstackParam.split(',').filter(Boolean);\n};\n\n/**\n * Helper to add global debug functions for development\n */\nexport const addDebugFunctions = (): void => {\n    if (typeof window !== 'undefined' && process.env.NODE_ENV === 'development') {\n        // @ts-ignore\n        window.clearCommunityInterview = clearCommunityInterviewFromStorage;\n        // @ts-ignore\n        window.getCommunityInterview = getCommunityInterviewFromStorage;\n        console.log('Debug functions added: window.clearCommunityInterview(), window.getCommunityInterview()');\n    }\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/utils/error-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[223,226],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[223,226],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":129,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3421,3424],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3421,3424],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":130,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3475,3478],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3475,3478],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":167,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":167,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4460,4463],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4460,4463],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Error handling utilities to centralize try-catch patterns\n * Reduces duplicate error handling code throughout the application\n */\n\nimport { logger } from './logger';\n\nexport interface ErrorContext {\n  [key: string]: any;\n}\n\n/**\n * Standardized error reporting with context\n */\nexport const reportError = (\n  error: Error | unknown,\n  context: string,\n  additionalContext?: ErrorContext\n): Error => {\n  const err = error instanceof Error ? error : new Error(String(error));\n  logger.error(`${context}: ${err.message}`, err, additionalContext);\n  return err;\n};\n\n/**\n * Wrap async functions with standardized error handling\n */\nexport const handleAsyncError = async <T>(\n  fn: () => Promise<T>,\n  context: string,\n  fallback?: T,\n  additionalContext?: ErrorContext\n): Promise<T | undefined> => {\n  try {\n    return await fn();\n  } catch (error) {\n    reportError(error, context, additionalContext);\n    return fallback;\n  }\n};\n\n/**\n * Retry wrapper with exponential backoff\n */\nexport const withRetry = async <T>(\n  fn: () => Promise<T>,\n  maxAttempts: number = 3,\n  context: string = 'Operation',\n  baseDelay: number = 1000\n): Promise<T> => {\n  let attempt = 0;\n  \n  while (attempt < maxAttempts) {\n    try {\n      return await fn();\n    } catch (error) {\n      attempt++;\n      \n      if (attempt >= maxAttempts) {\n        throw reportError(error, `${context} failed after ${maxAttempts} attempts`);\n      }\n      \n      const delay = Math.pow(2, attempt) * baseDelay;\n      logger.warn(`${context} attempt ${attempt} failed, retrying in ${delay}ms`, { error });\n      \n      await new Promise(resolve => setTimeout(resolve, delay));\n    }\n  }\n  \n  throw new Error(`${context}: Exhausted all retry attempts`);\n};\n\n/**\n * Timeout wrapper for promises\n */\nexport const withTimeout = <T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n  context: string = 'Operation'\n): Promise<T> => {\n  return Promise.race([\n    promise,\n    new Promise<T>((_, reject) => {\n      setTimeout(() => {\n        reject(new Error(`${context} timed out after ${timeoutMs}ms`));\n      }, timeoutMs);\n    })\n  ]);\n};\n\n/**\n * Safe JSON parsing with error handling\n */\nexport const safeJsonParse = <T>(\n  jsonString: string,\n  fallback: T,\n  context: string = 'JSON parse'\n): T => {\n  try {\n    return JSON.parse(jsonString);\n  } catch (error) {\n    reportError(error, `${context} failed`, { jsonString: jsonString.slice(0, 100) });\n    return fallback;\n  }\n};\n\n/**\n * Network request error handler with user-friendly messages\n */\nexport const handleApiError = (\n  response: Response,\n  context: string = 'API request'\n): Error => {\n  const friendlyMessages: Record<number, string> = {\n    400: 'Invalid request. Please check your input and try again.',\n    401: 'Authentication failed. Please sign in again.',\n    403: 'Access denied. You may not have permission for this action.',\n    404: 'The requested resource was not found.',\n    429: 'Too many requests. Please wait a moment before trying again.',\n    500: 'Server error. Please try again later.',\n    502: 'Service temporarily unavailable. Please try again later.',\n    503: 'Service temporarily unavailable. Please try again later.'\n  };\n  \n  const friendlyMessage = friendlyMessages[response.status] || 'An unexpected error occurred.';\n  const technicalMessage = `${context}: HTTP ${response.status} ${response.statusText}`;\n  \n  const error = new Error(friendlyMessage);\n  (error as any).technicalMessage = technicalMessage;\n  (error as any).status = response.status;\n  \n  return error;\n};\n\n/**\n * Show user-friendly error notification (replace alert() calls)\n * This will hook into the app's existing toast system\n */\nexport const showErrorNotification = (\n  error: Error | string,\n  context?: string\n): void => {\n  const message = typeof error === 'string' ? error : error.message;\n  const fullMessage = context ? `${context}: ${message}` : message;\n  \n  // Use console.warn for user notifications to reduce error noise\n  logger.warn('User notification: ' + fullMessage);\n  \n  // TODO: Replace with actual toast notification system\n  // toast.error(fullMessage);\n};\n\n/**\n * Validation error for form/input validation\n */\nexport class ValidationError extends Error {\n  constructor(message: string, public field?: string) {\n    super(message);\n    this.name = 'ValidationError';\n  }\n}\n\n/**\n * Audio processing specific error\n */\nexport class AudioError extends Error {\n  constructor(message: string, public audioContext?: any) {\n    super(message);\n    this.name = 'AudioError';\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/utils/firebase-auth-debug.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[228,231],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[228,231],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[396,399],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[396,399],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign object to a variable before exporting as module default","line":22,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":26,"endColumn":3}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Firebase Auth Debug Utility (Stub)\n * \n * Provides mock debugging functionality for Firebase authentication\n * This is a compatibility layer since Firebase is being phased out\n */\n\nexport function debugFirebaseAuth(auth: any): void {\n  console.log('Firebase Auth Debug (stub) - Firebase services are deprecated');\n  console.log('Auth object:', auth);\n}\n\nexport function logAuthState(user: any): void {\n  console.log('Auth State Debug (stub):', user);\n}\n\nexport function validateAuthToken(token: string): boolean {\n  console.warn('Firebase auth token validation is deprecated - use unified auth system');\n  return !!token; // Basic validation\n}\n\nexport default {\n  debugFirebaseAuth,\n  logAuthState,\n  validateAuthToken\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/utils/jwt-decoder.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[352,355],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[352,355],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Simple JWT decoder for Firebase ID tokens\n * This bypasses Firebase Admin SDK to avoid SSL/gRPC issues\n */\n\ninterface DecodedToken {\n  uid?: string;\n  user_id?: string;\n  sub?: string;\n  email?: string;\n  email_verified?: boolean;\n  name?: string;\n  picture?: string;\n  exp: number;\n  iat: number;\n  aud: string;\n  iss: string;\n  [key: string]: any; // Allow additional properties\n}\n\nexport function decodeFirebaseToken(token: string): DecodedToken | null {\n  try {\n    // Split the token into parts\n    const parts = token.split('.');\n    if (parts.length !== 3) {\n      console.error('Invalid token format');\n      return null;\n    }\n\n    // Decode the payload (middle part)\n    const payload = parts[1];\n    // Add padding if needed\n    const paddedPayload = payload + '='.repeat((4 - payload.length % 4) % 4);\n    \n    // Decode from base64\n    const decoded = Buffer.from(paddedPayload, 'base64url').toString('utf8');\n    const tokenData = JSON.parse(decoded) as DecodedToken;\n\n    // Basic validation - check for user_id field (Firebase uses this)\n    if (!tokenData.uid && !tokenData.user_id && !tokenData.sub) {\n      console.error('Invalid token data - missing user ID');\n      return null;\n    }\n    \n    if (!tokenData.exp) {\n      console.error('Invalid token data - missing expiration');\n      return null;\n    }\n    \n    if (!tokenData.aud) {\n      console.error('Invalid token data - missing audience');\n      return null;\n    }\n    \n    // Normalize user ID field\n    if (!tokenData.uid && tokenData.user_id) {\n      tokenData.uid = tokenData.user_id;\n    } else if (!tokenData.uid && tokenData.sub) {\n      tokenData.uid = tokenData.sub;\n    }\n\n    // Check if token is expired\n    const now = Math.floor(Date.now() / 1000);\n    if (tokenData.exp < now) {\n      console.error('Token has expired');\n      return null;\n    }\n\n    // Check if it's a Firebase token\n    if (!tokenData.iss?.includes('securetoken.google.com')) {\n      console.error('Not a valid Firebase token');\n      return null;\n    }\n\n    return tokenData;\n  } catch (error) {\n    console.error('Error decoding token:', error);\n    return null;\n  }\n}\n\nexport function initializeUser(decodedToken: DecodedToken): User {\n  const userId = decodedToken.uid || decodedToken.user_id || decodedToken.sub || '';\n\n  return {\n    id: userId,\n    uid: userId, // Set both for compatibility\n    email: decodedToken.email || '',\n    name: decodedToken.name || decodedToken.email?.split('@')[0] || 'User',\n    image: decodedToken.picture || '/default-avatar.svg',\n    emailVerified: decodedToken.email_verified || false,\n    metadata: {\n      creationTime: new Date().toISOString(),\n      lastSignInTime: new Date().toISOString()\n    }\n  };\n}\n\n// Keep the old function for backward compatibility (deprecate later)\nexport function getUserFromDecodedToken(decodedToken: DecodedToken): User {\n  return initializeUser(decodedToken);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/utils/logger.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[303,306],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[303,306],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":19,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":21,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":26,"column":5,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":28,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":32,"column":5,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":34,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":38,"column":5,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":40,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":48,"column":5,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":50,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":57,"column":9,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":59,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":65,"column":9,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":67,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":73,"column":9,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":75,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":84,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":86,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":94,"column":9,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":96,"endColumn":59},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":103,"column":9,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":105,"endColumn":73}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Centralized logging utility with debug flag support\n * Helps reduce verbose console.debug statements throughout the codebase\n */\n\n// Environment-based debug flag\nconst DEBUG = process.env.NODE_ENV === 'development' || process.env.DEBUG === 'true';\n\nexport interface LogContext {\n  [key: string]: any;\n}\n\n/**\n * Core logger with emoji prefixes for visual recognition\n */\nexport const logger = {\n  debug: (message: string, context?: LogContext) => {\n    if (DEBUG) {\n      context \n        ? console.debug(`üîç ${message}`, context)\n        : console.debug(`üîç ${message}`);\n    }\n  },\n\n  info: (message: string, context?: LogContext) => {\n    context \n      ? console.info(`‚ÑπÔ∏è ${message}`, context)\n      : console.info(`‚ÑπÔ∏è ${message}`);\n  },\n\n  success: (message: string, context?: LogContext) => {\n    context \n      ? console.log(`‚úÖ ${message}`, context)\n      : console.log(`‚úÖ ${message}`);\n  },\n\n  warn: (message: string, context?: LogContext) => {\n    context \n      ? console.warn(`‚ö†Ô∏è ${message}`, context)\n      : console.warn(`‚ö†Ô∏è ${message}`);\n  },\n\n  error: (message: string, error?: Error | unknown, context?: LogContext) => {\n    const errorInfo = error instanceof Error \n      ? { message: error.message, stack: error.stack }\n      : error;\n      \n    context \n      ? console.error(`‚ùå ${message}`, { error: errorInfo, ...context })\n      : console.error(`‚ùå ${message}`, errorInfo);\n  },\n\n  // Audio-specific logging shortcuts\n  audio: {\n    process: (message: string, context?: LogContext) => {\n      if (DEBUG) {\n        context \n          ? console.debug(`üéµ ${message}`, context)\n          : console.debug(`üéµ ${message}`);\n      }\n    },\n    \n    record: (message: string, context?: LogContext) => {\n      if (DEBUG) {\n        context \n          ? console.debug(`üé§ ${message}`, context)\n          : console.debug(`üé§ ${message}`);\n      }\n    },\n\n    speak: (message: string, context?: LogContext) => {\n      if (DEBUG) {\n        context \n          ? console.debug(`üîä ${message}`, context)\n          : console.debug(`üîä ${message}`);\n      }\n    }\n  },\n\n  // State management logging\n  state: (action: string, from: string, to: string, context?: LogContext) => {\n    if (DEBUG) {\n      const message = `State transition: ${from} ‚Üí ${to}`;\n      context \n        ? console.debug(`üîÑ [${action}] ${message}`, context)\n        : console.debug(`üîÑ [${action}] ${message}`);\n    }\n  },\n\n  // API request logging\n  api: {\n    request: (endpoint: string, method: string, context?: LogContext) => {\n      if (DEBUG) {\n        context \n          ? console.debug(`üì§ API ${method} ${endpoint}`, context)\n          : console.debug(`üì§ API ${method} ${endpoint}`);\n      }\n    },\n    \n    response: (endpoint: string, status: number, context?: LogContext) => {\n      const icon = status >= 200 && status < 300 ? 'üì•' : '‚ùå';\n      if (DEBUG) {\n        context \n          ? console.debug(`${icon} API Response ${status} ${endpoint}`, context)\n          : console.debug(`${icon} API Response ${status} ${endpoint}`);\n      }\n    }\n  }\n};\n\n// Convenience exports\nexport const { debug, info, success, warn, error } = logger;\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/utils/network-logger.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":195,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":195,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5468,5471],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5468,5471],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\n/**\n * Network Call Tracer\n * \n * Monkey-patches window.fetch to log all network requests with stack traces\n * Only enabled in development environment\n */\n\ninterface NetworkCall {\n  url: string;\n  method: string;\n  timestamp: number;\n  stack: string;\n  caller?: string;\n}\n\nconst networkCalls: NetworkCall[] = [];\nconst originalFetch = typeof window !== 'undefined' ? window.fetch : null;\n\n/**\n * Initialize network logging\n */\nexport function initNetworkLogger() {\n  if (process.env.NODE_ENV !== 'development' || typeof window === 'undefined' || !originalFetch) {\n    return;\n  }\n\n  console.log('üîç Network logger initialized - tracing all fetch calls');\n\n  // Monkey patch window.fetch\n  window.fetch = function(...args) {\n    const [input, init] = args;\n    const url = typeof input === 'string' ? input : \n               input instanceof URL ? input.toString() : \n               (input as Request).url;\n    const method = init?.method || 'GET';\n    \n    // Create error to capture stack trace\n    const error = new Error();\n    const stack = error.stack || '';\n    \n    // Extract caller information from stack trace\n    const stackLines = stack.split('\\n');\n    const caller = stackLines[2]?.trim() || 'unknown';\n    \n    const networkCall: NetworkCall = {\n      url,\n      method,\n      timestamp: Date.now(),\n      stack,\n      caller\n    };\n    \n    networkCalls.push(networkCall);\n    \n    // Log auth-related calls immediately\n    if (url.includes('/api/auth/')) {\n      console.group(`üîç AUTH API CALL: ${method} ${url}`);\n      console.log('Timestamp:', new Date(networkCall.timestamp).toISOString());\n      console.log('Caller:', caller);\n      console.log('Full stack:', stack);\n      console.groupEnd();\n    }\n    \n    // Log dashboard-related calls immediately\n    if (url.includes('/api/dashboard/') || url.includes('/dashboard')) {\n      console.group(`üìä DASHBOARD API CALL: ${method} ${url}`);\n      console.log('Timestamp:', new Date(networkCall.timestamp).toISOString());\n      console.log('Caller:', caller);\n      console.log('Full stack:', stack);\n      console.groupEnd();\n    }\n    \n    // Log sync-firebase calls (potential polling source)\n    if (url.includes('/api/auth/sync-firebase')) {\n      console.group(`üîÑ SYNC-FIREBASE CALL: ${method} ${url}`);\n      console.log('Timestamp:', new Date(networkCall.timestamp).toISOString());\n      console.log('Caller:', caller);\n      console.warn('‚ö†Ô∏è  This may be part of a polling loop!');\n      console.log('Full stack:', stack);\n      console.groupEnd();\n    }\n    \n    // Call original fetch\n    return originalFetch.apply(this, args);\n  };\n}\n\n/**\n * Get all network calls\n */\nexport function getNetworkCalls(): NetworkCall[] {\n  return [...networkCalls];\n}\n\n/**\n * Get auth-related network calls\n */\nexport function getAuthCalls(): NetworkCall[] {\n  return networkCalls.filter(call => call.url.includes('/api/auth/'));\n}\n\n/**\n * Get calls to specific endpoint\n */\nexport function getCallsToEndpoint(endpoint: string): NetworkCall[] {\n  return networkCalls.filter(call => call.url.includes(endpoint));\n}\n\n/**\n * Analyze call frequency for potential loops\n */\nexport function analyzeLoops(windowMs: number = 5000): {\n  endpoint: string;\n  count: number;\n  frequency: number;\n  isLoop: boolean;\n}[] {\n  const now = Date.now();\n  const recentCalls = networkCalls.filter(call => (now - call.timestamp) <= windowMs);\n  \n  const endpointCounts = recentCalls.reduce((acc, call) => {\n    acc[call.url] = (acc[call.url] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n  \n  return Object.entries(endpointCounts).map(([endpoint, count]) => ({\n    endpoint,\n    count,\n    frequency: count / (windowMs / 1000), // calls per second\n    isLoop: count > 3 // More than 3 calls in window indicates a potential loop\n  }));\n}\n\n/**\n * Clear network call history\n */\nexport function clearNetworkHistory(): void {\n  networkCalls.length = 0;\n  console.log('üóëÔ∏è Network call history cleared');\n}\n\n/**\n * Display current network statistics\n */\nexport function displayNetworkStats(): void {\n  if (process.env.NODE_ENV !== 'development') return;\n  \n  const authCalls = getAuthCalls();\n  const loops = analyzeLoops();\n  \n  console.group('üìä Network Statistics');\n  console.log(`Total calls: ${networkCalls.length}`);\n  console.log(`Auth calls: ${authCalls.length}`);\n  \n  if (loops.length > 0) {\n    console.group('üîÑ Potential loops detected:');\n    loops.filter(l => l.isLoop).forEach(loop => {\n      console.warn(`${loop.endpoint}: ${loop.count} calls (${loop.frequency.toFixed(1)}/s)`);\n    });\n    console.groupEnd();\n  }\n  \n  if (authCalls.length > 0) {\n    console.group('üîê Recent auth calls:');\n    authCalls.slice(-5).forEach(call => {\n      console.log(`${call.method} ${call.url} - ${call.caller}`);\n    });\n    console.groupEnd();\n  }\n  \n  console.groupEnd();\n}\n\n/**\n * Export network statistics for testing\n */\nexport function getNetworkStats() {\n  return {\n    totalCalls: networkCalls.length,\n    authCalls: getAuthCalls().length,\n    loops: analyzeLoops(),\n    recentAuthCalls: getAuthCalls().slice(-10)\n  };\n}\n\n// Auto-display stats every 10 seconds in development (DISABLED to prevent polling)\n// if (typeof window !== 'undefined' && process.env.NODE_ENV === 'development') {\n//   setInterval(displayNetworkStats, 10000);\n// }\n\n// Instead, provide manual trigger for debugging:\nif (typeof window !== 'undefined' && process.env.NODE_ENV === 'development') {\n  (window as any).showNetworkStats = displayNetworkStats;\n  console.log('üîç Network logger active. Call showNetworkStats() to display current stats.');\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/utils/resume-parser.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'migrationOpenAIClient' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'path' is defined but never used.","line":5,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":163,"column":103,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":106,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5202,5205],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5202,5205],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":173,"column":99,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":173,"endColumn":102,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5753,5756],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5753,5756],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":182,"column":98,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":182,"endColumn":101,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6210,6213],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6210,6213],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { WorkExperience, Education, Project } from '../services/azure-ai-service';\nimport { migrationOpenAIClient } from '@/lib/azure-ai-foundry/clients/migration-wrapper';\nimport { azureOpenAIService } from '../services/azure-openai-service';\nimport { templateEngine } from '@/lib/utils/template-engine';\nimport path from 'path';\n\nexport interface ParsedResumeData {\n  name?: string;\n  email?: string;\n  phone?: string;\n  skills: string[];\n  experience: WorkExperience[];\n  education: Education[];\n  projects?: Project[];\n  summary?: string;\n}\n\n/**\n * Enhanced resume parsing using both regex and AI\n */\nexport async function parseResumeText(text: string): Promise<ParsedResumeData> {\n  try {\n    // First, try basic regex extraction\n    const basicData = extractBasicInfo(text);\n    \n    // Then, enhance with AI-powered extraction\n    const aiEnhancedData = await extractWithAI(text);\n    \n    // Merge the results, preferring AI data when available\n    return mergeResumeData(basicData, aiEnhancedData);\n  } catch (error) {\n    console.error('Error parsing resume:', error);\n    // Fallback to basic regex parsing\n    return extractBasicInfo(text);\n  }\n}\n\n/**\n * Basic regex-based extraction (fallback)\n */\nfunction extractBasicInfo(text: string): ParsedResumeData {\n  // Extract name (improved patterns)\n  const namePatterns = [\n    /(?:Name[:\\s]+)([A-Z][a-zA-Z]+(?:\\s[A-Z][a-zA-Z]+)*)/i,\n    /^([A-Z][a-zA-Z]+(?:\\s[A-Z][a-zA-Z]+)+)/m, // First line name pattern\n    /([A-Z][a-zA-Z]+\\s+[A-Z][a-zA-Z]+)(?:\\s*\\n|\\s*$)/m, // Two-word name pattern\n  ];\n  \n  let name = '';\n  for (const pattern of namePatterns) {\n    const match = text.match(pattern);\n    if (match) {\n      name = match[1].trim();\n      break;\n    }\n  }\n\n  // Extract email\n  const emailMatch = text.match(/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/);\n  const email = emailMatch ? emailMatch[1] : '';\n\n  // Extract phone\n  const phonePatterns = [\n    /(?:Phone|Tel|Mobile)[:\\s]*([+]?[\\d\\s\\-\\(\\)]{10,})/i,\n    /([+]?[\\d\\s\\-\\(\\)]{10,})(?=\\s|$)/,\n  ];\n  \n  let phone = '';\n  for (const pattern of phonePatterns) {\n    const match = text.match(pattern);\n    if (match) {\n      phone = match[1].trim();\n      break;\n    }\n  }\n\n  // Extract skills with improved patterns\n  const skillsMatch = text.match(/(?:Skills?|Technical Skills?|Core Competencies)[:\\s]*([^]*?)(?=\\n\\s*[A-Z][^:]*:|$)/i);\n  let skills: string[] = [];\n  \n  if (skillsMatch) {\n    skills = skillsMatch[1]\n      .replace(/[‚Ä¢\\-\\*]/g, ',') // Replace bullets with commas\n      .split(/[,\\n]/)\n      .map(skill => skill.trim())\n      .filter(skill => skill.length > 0 && skill.length < 50)\n      .slice(0, 20); // Limit to 20 skills\n  }\n\n  // Extract experience (basic)\n  const experienceMatch = text.match(/(?:Experience|Work Experience|Employment)[:\\s]*([^]*?)(?=\\n\\s*(?:Education|Skills?|Projects?)[:\\s]|$)/i);\n  let experience: WorkExperience[] = [];\n  \n  if (experienceMatch) {\n    const expText = experienceMatch[1];\n    // Try to extract company names and positions (basic pattern)\n    const jobMatches = expText.match(/([A-Z][^,\\n]+(?:Inc\\.|Corp\\.|LLC|Ltd\\.|Company))[,\\s]*([^,\\n]+)/g);\n    \n    if (jobMatches) {\n      experience = jobMatches.slice(0, 5).map(match => {\n        const [company, position = ''] = match.split(/[,\\n]/).map(s => s.trim());\n        return {\n          company: company || 'Unknown Company',\n          position: position || 'Unknown Position',\n          description: expText.substring(0, 200), // First 200 chars as description\n        };\n      });\n    }\n  }\n\n  // Extract education (basic)\n  const educationMatch = text.match(/(?:Education|Academic Background)[:\\s]*([^]*?)(?=\\n\\s*(?:Experience|Skills?|Projects?)[:\\s]|$)/i);\n  let education: Education[] = [];\n  \n  if (educationMatch) {\n    const eduText = educationMatch[1];\n    const universityMatch = eduText.match(/([^,\\n]*(?:University|College|Institute|School))[,\\s]*([^,\\n]*)/i);\n    \n    if (universityMatch) {\n      education = [{\n        institution: universityMatch[1].trim(),\n        degree: universityMatch[2]?.trim() || 'Degree',\n        field: 'Field of Study',\n      }];\n    }\n  }\n\n  return {\n    name,\n    email,\n    phone,\n    skills,\n    experience,\n    education,\n    projects: [], // Will be enhanced by AI\n  };\n}\n\n/**\n * AI-powered extraction using Azure OpenAI\n */\nasync function extractWithAI(text: string): Promise<ParsedResumeData> {\n  try {\n    // Ensure Azure OpenAI service is initialized\n    await azureOpenAIService.initialize();\n    \n    // Try to use template engine for resume extraction prompt\n    const prompt = buildExtractionPromptWithTemplate(text);\n\n    const response = await azureOpenAIService.generateCompletion(prompt);\n    const jsonText = response.trim();\n    \n    // Try to parse the JSON response\n    const parsedData = JSON.parse(jsonText);\n    \n    // Validate and clean the data\n    return {\n      name: parsedData.name || '',\n      email: parsedData.email || '',\n      phone: parsedData.phone || '',\n      summary: parsedData.summary || '',\n      skills: Array.isArray(parsedData.skills) ? parsedData.skills.slice(0, 30) : [],\n      experience: Array.isArray(parsedData.experience) ? parsedData.experience.slice(0, 10).map((exp: any) => ({\n        company: exp.company || 'Unknown Company',\n        position: exp.position || 'Unknown Position',\n        startDate: exp.startDate || '',\n        endDate: exp.endDate || '',\n        isCurrent: Boolean(exp.isCurrent),\n        description: exp.description || '',\n        achievements: Array.isArray(exp.achievements) ? exp.achievements : [],\n        technologies: Array.isArray(exp.technologies) ? exp.technologies : [],\n      })) : [],\n      education: Array.isArray(parsedData.education) ? parsedData.education.slice(0, 5).map((edu: any) => ({\n        institution: edu.institution || 'Unknown Institution',\n        degree: edu.degree || 'Degree',\n        field: edu.field || 'Field of Study',\n        startDate: edu.startDate || '',\n        endDate: edu.endDate || '',\n        gpa: typeof edu.gpa === 'number' ? edu.gpa : undefined,\n        description: edu.description || '',\n      })) : [],\n      projects: Array.isArray(parsedData.projects) ? parsedData.projects.slice(0, 10).map((proj: any) => ({\n        name: proj.name || 'Project',\n        description: proj.description || '',\n        technologies: Array.isArray(proj.technologies) ? proj.technologies : [],\n        url: proj.url || '',\n        github: proj.github || '',\n        startDate: proj.startDate || '',\n        endDate: proj.endDate || '',\n      })) : [],\n    };\n    \n  } catch (error) {\n    console.error('AI extraction failed:', error);\n    throw error;\n  }\n}\n\n/**\n * Merge basic regex data with AI-enhanced data\n */\nfunction mergeResumeData(basicData: ParsedResumeData, aiData: ParsedResumeData): ParsedResumeData {\n  return {\n    name: aiData.name || basicData.name || '',\n    email: aiData.email || basicData.email || '',\n    phone: aiData.phone || basicData.phone || '',\n    summary: aiData.summary || '',\n    skills: [...new Set([...basicData.skills, ...aiData.skills])].slice(0, 30), // Merge and dedupe\n    experience: aiData.experience.length > 0 ? aiData.experience : basicData.experience,\n    education: aiData.education.length > 0 ? aiData.education : basicData.education,\n    projects: aiData.projects || [],\n  };\n}\n\n/**\n * Build extraction prompt using template engine\n */\nfunction buildExtractionPromptWithTemplate(text: string): string {\n  try {\n    // Use simple inline template for resume extraction\n    const template = `Extract structured information from this resume text and return it in valid JSON format.\n\n{{#if format_instructions}}\n**Format Instructions:**\n{{format_instructions}}\n{{/if}}\n\n{{#if extraction_rules}}\n**Rules:**\n{{#each extraction_rules}}\n- {{@value}}\n{{/each}}\n{{/if}}\n\n**Resume Text:**\n{{resume_text}}`;\n\n    const context = {\n      format_instructions: `Follow this exact JSON structure:\\n{\n  \"name\": \"Full Name\",\n  \"email\": \"email@example.com\",\n  \"phone\": \"phone number\",\n  \"summary\": \"Professional summary or objective\",\n  \"skills\": [\"skill1\", \"skill2\", \"skill3\"],\n  \"experience\": [...],\n  \"education\": [...],\n  \"projects\": [...]\n}`,\n      extraction_rules: [\n        'Return ONLY valid JSON, no other text',\n        'If information is not available, use null or empty array',\n        'Extract actual data, don\\'t make up information',\n        'For dates, use the format found in resume or standardize to MM/YYYY',\n        'For current positions, set isCurrent to true and endDate to null',\n        'Extract all skills mentioned (technical, soft skills, tools, technologies)',\n        'Include quantifiable achievements where mentioned'\n      ],\n      resume_text: text\n    };\n\n    return templateEngine.render(template, context);\n  } catch (error) {\n    console.warn('‚ö†Ô∏è Template engine failed for resume extraction, using legacy prompt:', error);\n    return buildExtractionPromptLegacy(text);\n  }\n}\n\n/**\n * Legacy extraction prompt (fallback)\n */\nfunction buildExtractionPromptLegacy(text: string): string {\n  return `\nExtract structured information from this resume text and return it in valid JSON format. Follow this exact structure:\n\n{\n  \"name\": \"Full Name\",\n  \"email\": \"email@example.com\",\n  \"phone\": \"phone number\",\n  \"summary\": \"Professional summary or objective\",\n  \"skills\": [\"skill1\", \"skill2\", \"skill3\"],\n  \"experience\": [\n    {\n      \"company\": \"Company Name\",\n      \"position\": \"Job Title\",\n      \"startDate\": \"MM/YYYY or YYYY\",\n      \"endDate\": \"MM/YYYY or YYYY or Present\",\n      \"isCurrent\": false,\n      \"description\": \"Job description\",\n      \"achievements\": [\"achievement1\", \"achievement2\"],\n      \"technologies\": [\"tech1\", \"tech2\"]\n    }\n  ],\n  \"education\": [\n    {\n      \"institution\": \"School Name\",\n      \"degree\": \"Degree Type\",\n      \"field\": \"Field of Study\",\n      \"startDate\": \"YYYY\",\n      \"endDate\": \"YYYY\",\n      \"gpa\": 3.5\n    }\n  ],\n  \"projects\": [\n    {\n      \"name\": \"Project Name\",\n      \"description\": \"Project description\",\n      \"technologies\": [\"tech1\", \"tech2\"],\n      \"url\": \"project-url\",\n      \"github\": \"github-url\"\n    }\n  ]\n}\n\nRules:\n- Return ONLY valid JSON, no other text\n- If information is not available, use null or empty array\n- Extract actual data, don't make up information\n- For dates, use the format found in resume or standardize to MM/YYYY\n- For current positions, set isCurrent to true and endDate to null\n- Extract all skills mentioned (technical, soft skills, tools, technologies)\n- Include quantifiable achievements where mentioned\n\nResume text:\n${text}\n`;\n}\n\n/**\n * Generate interview questions using template engine\n */\nexport async function generateInterviewQuestions(resumeData: ParsedResumeData): Promise<string[]> {\n  try {\n    // Ensure Azure OpenAI service is initialized\n    await azureOpenAIService.initialize();\n    \n    const prompt = buildQuestionGenerationPrompt(resumeData);\n    const questionsText = await azureOpenAIService.generateCompletion(prompt);\n    \n    const questions = questionsText\n      .split('\\n')\n      .map(q => q.trim())\n      .filter(q => q.length > 0)\n      .map(q => q.replace(/^\\d+\\.?\\s*/, '')) // Remove numbering\n      .filter(q => q.length > 10) // Filter out very short responses\n      .slice(0, 10); // Limit to 10 questions\n\n    return questions;\n  } catch (error) {\n    console.error('Error generating interview questions:', error);\n    // Return default questions as fallback\n    return [\n      'Tell me about yourself and your background.',\n      'What interests you most about this position?',\n      'Describe your experience with the technologies mentioned in your resume.',\n      'Tell me about a challenging project you worked on.',\n      'How do you stay updated with new technologies in your field?',\n      'Describe a time when you had to work under pressure.',\n      'What are your career goals for the next few years?',\n      'How do you approach problem-solving in your work?'\n    ];\n  }\n}\n\n/**\n * Build question generation prompt using template engine\n */\nfunction buildQuestionGenerationPrompt(resumeData: ParsedResumeData): string {\n  try {\n    const template = `Based on the resume information below, generate 8-10 relevant interview questions.\n\n**Focus Areas:**\n{{#each focus_areas}}\n- {{@value}}\n{{/each}}\n\n**Candidate Information:**\n- Name: {{candidate.name}}\n- Skills: {{candidate.skills}}\n- Experience: {{candidate.experience}}\n- Education: {{candidate.education}}\n{{#if candidate.projects}}\n- Projects: {{candidate.projects}}\n{{/if}}\n\n**Instructions:**\nReturn only the questions, one per line, numbered 1-10. No additional text or explanations.`;\n\n    const context = {\n      focus_areas: [\n        'Technical skills mentioned',\n        'Work experience and achievements',\n        'Projects and technologies used',\n        'Career progression and goals',\n        'Behavioral questions based on their background'\n      ],\n      candidate: {\n        name: resumeData.name,\n        skills: resumeData.skills.join(', '),\n        experience: resumeData.experience.map(exp => `${exp.position} at ${exp.company}`).join('; '),\n        education: resumeData.education.map(edu => `${edu.degree} in ${edu.field} from ${edu.institution}`).join('; '),\n        projects: resumeData.projects?.map(proj => proj.name).join(', ') || null\n      }\n    };\n\n    return templateEngine.render(template, context);\n  } catch (error) {\n    console.warn('‚ö†Ô∏è Template engine failed for question generation, using legacy prompt:', error);\n    return buildQuestionGenerationPromptLegacy(resumeData);\n  }\n}\n\n/**\n * Legacy question generation prompt (fallback)\n */\nfunction buildQuestionGenerationPromptLegacy(resumeData: ParsedResumeData): string {\n  return `\nBased on the following resume information, generate 8-10 relevant interview questions that would be appropriate for this candidate. \n\nFocus on:\n- Technical skills mentioned\n- Work experience and achievements\n- Projects and technologies used\n- Career progression and goals\n- Behavioral questions based on their background\n\nResume Information:\nName: ${resumeData.name}\nSkills: ${resumeData.skills.join(', ')}\nExperience: ${resumeData.experience.map(exp => `${exp.position} at ${exp.company}`).join('; ')}\nEducation: ${resumeData.education.map(edu => `${edu.degree} in ${edu.field} from ${edu.institution}`).join('; ')}\nProjects: ${resumeData.projects?.map(proj => proj.name).join(', ') || 'None mentioned'}\n\nReturn only the questions, one per line, numbered 1-10. No additional text or explanations.\n`;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/utils/retry-middleware.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'totalDelayTime' is assigned a value but never used.","line":230,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":230,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Retry Middleware with Exponential Backoff\n * \n * Provides configurable retry logic with multiple backoff strategies\n * for handling transient failures in API calls and service interactions.\n * \n * Features:\n * - Multiple retry strategies (linear, exponential, jitter)\n * - Configurable retry conditions and circuit breaking\n * - Promise-based API with TypeScript support\n * - Integration with structured error system\n * - Abort signal support for cancellation\n * - Detailed retry logging and metrics\n * \n * @version 1.0.0\n */\n\nimport { \n  StructuredError, \n  RetryStrategy, \n  isRetryableError, \n  getRetryDelay, \n  toStructuredError,\n  ErrorCode \n} from './structured-errors';\n\n// ===== CONFIGURATION TYPES =====\n\nexport interface RetryConfig {\n  /** Maximum number of retry attempts (excluding initial attempt) */\n  maxRetries: number;\n  \n  /** Base delay in milliseconds for calculating backoff */\n  baseDelay: number;\n  \n  /** Retry strategy to use */\n  strategy: RetryStrategy;\n  \n  /** Maximum delay in milliseconds (prevents excessive backoff) */\n  maxDelay?: number;\n  \n  /** Custom function to determine if error should trigger retry */\n  shouldRetry?: (error: StructuredError, attempt: number) => boolean;\n  \n  /** AbortSignal to cancel ongoing retries */\n  abortSignal?: AbortSignal;\n  \n  /** Called before each retry attempt */\n  onRetry?: (error: StructuredError, attempt: number, delay: number) => void;\n  \n  /** Called when all retry attempts are exhausted */\n  onMaxRetriesReached?: (error: StructuredError, totalAttempts: number) => void;\n}\n\nexport interface RetryResult<T> {\n  /** The successful result, if any */\n  data?: T;\n  \n  /** The final error, if operation failed */\n  error?: StructuredError;\n  \n  /** Total number of attempts made (including initial) */\n  totalAttempts: number;\n  \n  /** Total time spent on operation in milliseconds */\n  totalDuration: number;\n  \n  /** Whether operation succeeded */\n  success: boolean;\n}\n\nexport interface RetryMetrics {\n  /** Total retry attempts across all operations */\n  totalRetries: number;\n  \n  /** Successful retries (operations that succeeded after retry) */\n  successfulRetries: number;\n  \n  /** Failed retries (operations that failed after all retries) */\n  failedRetries: number;\n  \n  /** Average retry delay in milliseconds */\n  averageRetryDelay: number;\n  \n  /** Most common retry reasons */\n  retryReasons: Partial<Record<ErrorCode, number>>;\n}\n\n// ===== DEFAULT CONFIGURATIONS =====\n\nexport const DEFAULT_RETRY_CONFIG: RetryConfig = {\n  maxRetries: 3,\n  baseDelay: 1000, // 1 second\n  strategy: RetryStrategy.EXPONENTIAL,\n  maxDelay: 30000, // 30 seconds\n};\n\nexport const QUICK_RETRY_CONFIG: RetryConfig = {\n  maxRetries: 2,\n  baseDelay: 500, // 500ms\n  strategy: RetryStrategy.LINEAR,\n  maxDelay: 2000, // 2 seconds\n};\n\nexport const AGGRESSIVE_RETRY_CONFIG: RetryConfig = {\n  maxRetries: 5,\n  baseDelay: 1000, // 1 second\n  strategy: RetryStrategy.EXPONENTIAL_JITTER,\n  maxDelay: 60000, // 60 seconds\n};\n\nexport const VOICE_SERVICE_RETRY_CONFIG: RetryConfig = {\n  maxRetries: 2,\n  baseDelay: 2000, // 2 seconds\n  strategy: RetryStrategy.LINEAR,\n  maxDelay: 10000, // 10 seconds\n};\n\nexport const FILE_UPLOAD_RETRY_CONFIG: RetryConfig = {\n  maxRetries: 3,\n  baseDelay: 5000, // 5 seconds\n  strategy: RetryStrategy.EXPONENTIAL,\n  maxDelay: 45000, // 45 seconds\n};\n\n// ===== RETRY METRICS TRACKING =====\n\nlet retryMetrics: RetryMetrics = {\n  totalRetries: 0,\n  successfulRetries: 0,\n  failedRetries: 0,\n  averageRetryDelay: 0,\n  retryReasons: {}\n};\n\nexport function getRetryMetrics(): RetryMetrics {\n  return { ...retryMetrics };\n}\n\nexport function resetRetryMetrics(): void {\n  retryMetrics = {\n    totalRetries: 0,\n    successfulRetries: 0,\n    failedRetries: 0,\n    averageRetryDelay: 0,\n    retryReasons: {}\n  };\n}\n\n// ===== CORE RETRY FUNCTION =====\n\n/**\n * Execute a function with automatic retry logic based on structured errors\n */\nexport async function withRetry<T>(\n  operation: () => Promise<T>,\n  config: Partial<RetryConfig> = {}\n): Promise<RetryResult<T>> {\n  const finalConfig: RetryConfig = { ...DEFAULT_RETRY_CONFIG, ...config };\n  const startTime = Date.now();\n  \n  let lastError: StructuredError | undefined;\n  let totalDelayTime = 0;\n  \n  for (let attempt = 1; attempt <= finalConfig.maxRetries + 1; attempt++) {\n    const isLastAttempt = attempt === finalConfig.maxRetries + 1;\n    \n    try {\n      // Check for abort signal\n      if (finalConfig.abortSignal?.aborted) {\n        throw new Error('Operation aborted');\n      }\n      \n      // Execute the operation\n      const result = await operation();\n      \n      // Success - update metrics if this was a retry\n      if (attempt > 1) {\n        retryMetrics.successfulRetries++;\n        console.log(`‚úÖ Operation succeeded after ${attempt - 1} retries`);\n      }\n      \n      return {\n        data: result,\n        totalAttempts: attempt,\n        totalDuration: Date.now() - startTime,\n        success: true\n      };\n      \n    } catch (error) {\n      // Convert to structured error\n      lastError = toStructuredError(error);\n      \n      // Track retry reason\n      retryMetrics.retryReasons[lastError.code] = \n        (retryMetrics.retryReasons[lastError.code] || 0) + 1;\n      \n      // If this is the last attempt, don't retry\n      if (isLastAttempt) {\n        retryMetrics.failedRetries++;\n        finalConfig.onMaxRetriesReached?.(lastError, attempt);\n        console.warn(`‚ùå Operation failed after ${attempt} attempts:`, lastError.message);\n        break;\n      }\n      \n      // Check if error should trigger retry\n      const shouldRetryError = finalConfig.shouldRetry \n        ? finalConfig.shouldRetry(lastError, attempt)\n        : isRetryableError(lastError);\n      \n      if (!shouldRetryError) {\n        console.log(`üö´ Error not retryable: ${lastError.code}`);\n        break;\n      }\n      \n      // Calculate retry delay\n      const baseDelay = lastError.retryAfter \n        ? lastError.retryAfter * 1000 \n        : finalConfig.baseDelay;\n      \n      let delay = getRetryDelay(lastError, attempt, baseDelay);\n      \n      // Apply max delay cap\n      if (finalConfig.maxDelay && delay > finalConfig.maxDelay) {\n        delay = finalConfig.maxDelay;\n      }\n      \n      // Track metrics\n      retryMetrics.totalRetries++;\n      totalDelayTime += delay;\n      retryMetrics.averageRetryDelay = \n        (retryMetrics.averageRetryDelay * (retryMetrics.totalRetries - 1) + delay) / \n        retryMetrics.totalRetries;\n      \n      // Call retry callback\n      finalConfig.onRetry?.(lastError, attempt, delay);\n      \n      console.log(`üîÑ Retrying in ${delay}ms (attempt ${attempt}/${finalConfig.maxRetries + 1}): ${lastError.message}`);\n      \n      // Wait for retry delay\n      await new Promise(resolve => setTimeout(resolve, delay));\n      \n      // Check for abort signal again after delay\n      if (finalConfig.abortSignal?.aborted) {\n        throw new Error('Operation aborted during retry delay');\n      }\n    }\n  }\n  \n  // All attempts failed\n  return {\n    error: lastError || toStructuredError(new Error('Operation failed'), ErrorCode.UNHANDLED_ERROR),\n    totalAttempts: finalConfig.maxRetries + 1,\n    totalDuration: Date.now() - startTime,\n    success: false\n  };\n}\n\n// ===== SPECIALIZED RETRY FUNCTIONS =====\n\n/**\n * Retry specifically for HTTP fetch operations\n */\nexport async function retryFetch(\n  input: RequestInfo | URL,\n  init?: RequestInit,\n  config: Partial<RetryConfig> = {}\n): Promise<RetryResult<Response>> {\n  const fetchConfig: RetryConfig = {\n    ...DEFAULT_RETRY_CONFIG,\n    ...config,\n    shouldRetry: (error, attempt) => {\n      // Custom retry logic for HTTP errors\n      if (error.code === ErrorCode.RATE_LIMIT_EXCEEDED) return true;\n      if (error.code === ErrorCode.SERVICE_TIMEOUT) return true;\n      if (error.code === ErrorCode.SERVICE_UNAVAILABLE) return true;\n      if (error.code === ErrorCode.AZURE_OPENAI_ERROR) return attempt <= 2;\n      if (error.code === ErrorCode.AZURE_SPEECH_ERROR) return attempt <= 2;\n      return isRetryableError(error);\n    }\n  };\n  \n  return withRetry(async () => {\n    const response = await fetch(input, init);\n    \n    if (!response.ok) {\n      // Convert HTTP error to structured error\n      const errorCode = getErrorCodeFromHTTPStatus(response.status);\n      throw toStructuredError(\n        new Error(`HTTP ${response.status}: ${response.statusText}`),\n        errorCode\n      );\n    }\n    \n    return response;\n  }, fetchConfig);\n}\n\n/**\n * Retry specifically for Azure service calls\n */\nexport async function retryAzureOperation<T>(\n  operation: () => Promise<T>,\n  serviceType: 'openai' | 'speech' | 'storage' = 'openai',\n  config: Partial<RetryConfig> = {}\n): Promise<RetryResult<T>> {\n  const azureConfig: RetryConfig = {\n    maxRetries: 3,\n    baseDelay: 2000,\n    strategy: RetryStrategy.EXPONENTIAL,\n    maxDelay: 30000,\n    ...config,\n    shouldRetry: (error, attempt) => {\n      // Azure-specific retry logic\n      const azureErrors = [\n        ErrorCode.AZURE_OPENAI_ERROR,\n        ErrorCode.AZURE_SPEECH_ERROR,\n        ErrorCode.SERVICE_TIMEOUT,\n        ErrorCode.SERVICE_OVERLOADED\n      ];\n      \n      if (azureErrors.includes(error.code)) return true;\n      if (error.code === ErrorCode.RATE_LIMIT_EXCEEDED && attempt <= 2) return true;\n      \n      return config.shouldRetry?.(error, attempt) ?? isRetryableError(error);\n    },\n    onRetry: (error, attempt, delay) => {\n      console.log(`üîÑ Retrying Azure ${serviceType} operation (${error.code}): attempt ${attempt}, delay ${delay}ms`);\n      config.onRetry?.(error, attempt, delay);\n    }\n  };\n  \n  return withRetry(operation, azureConfig);\n}\n\n/**\n * Retry specifically for Firebase operations\n */\nexport async function retryFirebaseOperation<T>(\n  operation: () => Promise<T>,\n  config: Partial<RetryConfig> = {}\n): Promise<RetryResult<T>> {\n  const firebaseConfig: RetryConfig = {\n    maxRetries: 2,\n    baseDelay: 3000,\n    strategy: RetryStrategy.LINEAR,\n    maxDelay: 15000,\n    ...config,\n    shouldRetry: (error, attempt) => {\n      // Firebase-specific retry logic\n      if (error.code === ErrorCode.FIREBASE_ERROR) return true;\n      if (error.code === ErrorCode.STORAGE_ERROR && attempt <= 1) return true;\n      if (error.code === ErrorCode.SERVICE_TIMEOUT) return true;\n      \n      return config.shouldRetry?.(error, attempt) ?? isRetryableError(error);\n    },\n    onRetry: (error, attempt, delay) => {\n      console.log(`üîÑ Retrying Firebase operation (${error.code}): attempt ${attempt}, delay ${delay}ms`);\n      config.onRetry?.(error, attempt, delay);\n    }\n  };\n  \n  return withRetry(operation, firebaseConfig);\n}\n\n// ===== UTILITY FUNCTIONS =====\n\n/**\n * Create an AbortController that automatically aborts after timeout\n */\nexport function createTimeoutAbortSignal(timeoutMs: number): AbortSignal {\n  const controller = new AbortController();\n  setTimeout(() => controller.abort(), timeoutMs);\n  return controller.signal;\n}\n\n/**\n * Combine multiple AbortSignals into one\n */\nexport function combineAbortSignals(...signals: AbortSignal[]): AbortSignal {\n  const controller = new AbortController();\n  \n  const abortHandler = () => controller.abort();\n  \n  for (const signal of signals) {\n    if (signal.aborted) {\n      controller.abort();\n      break;\n    }\n    signal.addEventListener('abort', abortHandler);\n  }\n  \n  return controller.signal;\n}\n\n/**\n * Sleep with optional abort signal support\n */\nexport function sleep(ms: number, abortSignal?: AbortSignal): Promise<void> {\n  return new Promise((resolve, reject) => {\n    const timeout = setTimeout(resolve, ms);\n    \n    if (abortSignal) {\n      const abortHandler = () => {\n        clearTimeout(timeout);\n        reject(new Error('Sleep aborted'));\n      };\n      \n      if (abortSignal.aborted) {\n        clearTimeout(timeout);\n        reject(new Error('Sleep aborted'));\n        return;\n      }\n      \n      abortSignal.addEventListener('abort', abortHandler);\n    }\n  });\n}\n\n// Helper function for HTTP status to error code conversion\nfunction getErrorCodeFromHTTPStatus(status: number): ErrorCode {\n  switch (status) {\n    case 400: return ErrorCode.INVALID_REQUEST;\n    case 401: return ErrorCode.AUTH_TOKEN_INVALID;\n    case 403: return ErrorCode.ACCESS_DENIED;\n    case 404: return ErrorCode.NOT_FOUND;\n    case 409: return ErrorCode.RESOURCE_CONFLICT;\n    case 413: return ErrorCode.FILE_TOO_LARGE;\n    case 429: return ErrorCode.RATE_LIMIT_EXCEEDED;\n    case 500: return ErrorCode.INTERNAL_SERVER_ERROR;\n    case 502: return ErrorCode.SERVICE_UNAVAILABLE;\n    case 503: return ErrorCode.SERVICE_OVERLOADED;\n    case 504: return ErrorCode.SERVICE_TIMEOUT;\n    default: return ErrorCode.UNHANDLED_ERROR;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/utils/retry-with-backoff.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[328,331],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[328,331],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[398,401],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[398,401],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[556,559],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[556,559],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":57,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1548,1551],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1548,1551],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":129,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3369,3372],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3369,3372],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ApplicationInsights } from '@microsoft/applicationinsights-web';\n\nexport interface RetryOptions {\n  maxRetries?: number;\n  baseDelay?: number; // Base delay in milliseconds\n  maxDelay?: number; // Maximum delay in milliseconds\n  jitter?: boolean; // Add randomness to prevent thundering herd\n  retryCondition?: (error: any) => boolean; // Custom condition for retrying\n  onRetry?: (error: any, attempt: number) => void; // Callback on retry\n}\n\nexport interface RetryMetrics {\n  attempt: number;\n  totalAttempts: number;\n  delay: number;\n  error?: any;\n  userId?: string;\n  action: string;\n  startTime: number;\n  endTime?: number;\n}\n\nexport class RetryWithBackoff {\n  private static appInsights?: ApplicationInsights;\n\n  static initialize(instrumentationKey?: string) {\n    if (instrumentationKey && typeof window !== 'undefined') {\n      this.appInsights = new ApplicationInsights({\n        config: {\n          instrumentationKey,\n          enableAutoRouteTracking: false,\n        }\n      });\n      this.appInsights.loadAppInsights();\n    }\n  }\n\n  /**\n   * Execute a function with exponential backoff retry logic\n   */\n  static async execute<T>(\n    fn: () => Promise<T>,\n    options: RetryOptions & { userId?: string; action?: string } = {}\n  ): Promise<T> {\n    const {\n      maxRetries = 3,\n      baseDelay = 1000,\n      maxDelay = 30000,\n      jitter = true,\n      retryCondition = this.defaultRetryCondition,\n      onRetry,\n      userId,\n      action = 'unknown'\n    } = options;\n\n    const startTime = Date.now();\n    let lastError: any;\n\n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\n      try {\n        const result = await fn();\n        \n        // Log success metrics\n        if (attempt > 0) {\n          this.logRetrySuccess({\n            attempt: attempt + 1,\n            totalAttempts: attempt + 1,\n            delay: 0,\n            userId,\n            action,\n            startTime,\n            endTime: Date.now()\n          });\n        }\n\n        return result;\n      } catch (error) {\n        lastError = error;\n\n        // Check if we should retry\n        if (attempt === maxRetries || !retryCondition(error)) {\n          // Log final failure\n          this.logRetryFailure({\n            attempt: attempt + 1,\n            totalAttempts: maxRetries + 1,\n            delay: 0,\n            error,\n            userId,\n            action,\n            startTime,\n            endTime: Date.now()\n          });\n          throw error;\n        }\n\n        // Calculate delay for next attempt\n        const exponentialDelay = Math.min(baseDelay * Math.pow(2, attempt), maxDelay);\n        const delay = jitter \n          ? exponentialDelay + Math.random() * exponentialDelay * 0.1 // Add 10% jitter\n          : exponentialDelay;\n\n        // Log retry attempt\n        this.logRetryAttempt({\n          attempt: attempt + 1,\n          totalAttempts: maxRetries + 1,\n          delay,\n          error,\n          userId,\n          action,\n          startTime\n        });\n\n        // Execute retry callback if provided\n        if (onRetry) {\n          onRetry(error, attempt + 1);\n        }\n\n        // Wait before next attempt\n        await this.sleep(delay);\n      }\n    }\n\n    throw lastError;\n  }\n\n  /**\n   * Default retry condition - retry on network errors, rate limits, and server errors\n   */\n  private static defaultRetryCondition(error: any): boolean {\n    // Network errors\n    if (error.code === 'ECONNRESET' || \n        error.code === 'ENOTFOUND' || \n        error.code === 'ECONNREFUSED') {\n      return true;\n    }\n\n    // HTTP status codes that should be retried\n    if (error.response?.status) {\n      const status = error.response.status;\n      return status === 429 || // Rate limit\n             status === 502 || // Bad Gateway\n             status === 503 || // Service Unavailable\n             status === 504;   // Gateway Timeout\n    }\n\n    // Azure OpenAI specific errors\n    if (error.message?.includes('rate limit') || \n        error.message?.includes('throttled') ||\n        error.message?.includes('quota exceeded')) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Sleep for specified milliseconds\n   */\n  private static sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Log retry attempt\n   */\n  private static logRetryAttempt(metrics: RetryMetrics): void {\n    const logData = {\n      level: 'warn',\n      message: `Retry attempt ${metrics.attempt}/${metrics.totalAttempts} for ${metrics.action}`,\n      properties: {\n        userId: metrics.userId,\n        action: metrics.action,\n        attempt: metrics.attempt,\n        totalAttempts: metrics.totalAttempts,\n        delay: metrics.delay,\n        error: {\n          message: metrics.error?.message,\n          code: metrics.error?.code,\n          status: metrics.error?.response?.status,\n          name: metrics.error?.name\n        },\n        timestamp: new Date().toISOString()\n      }\n    };\n\n    console.warn('RETRY_ATTEMPT', JSON.stringify(logData));\n\n    // Send to Application Insights\n    if (this.appInsights) {\n      this.appInsights.trackTrace({\n        message: logData.message,\n        severityLevel: 2, // Warning\n        properties: logData.properties\n      });\n    }\n  }\n\n  /**\n   * Log retry success\n   */\n  private static logRetrySuccess(metrics: RetryMetrics): void {\n    const duration = (metrics.endTime || Date.now()) - metrics.startTime;\n    \n    const logData = {\n      level: 'info',\n      message: `Retry succeeded for ${metrics.action} after ${metrics.attempt} attempts`,\n      properties: {\n        userId: metrics.userId,\n        action: metrics.action,\n        attempt: metrics.attempt,\n        totalAttempts: metrics.totalAttempts,\n        duration,\n        timestamp: new Date().toISOString()\n      }\n    };\n\n    console.log('RETRY_SUCCESS', JSON.stringify(logData));\n\n    // Send to Application Insights\n    if (this.appInsights) {\n      this.appInsights.trackTrace({\n        message: logData.message,\n        severityLevel: 1, // Information\n        properties: logData.properties\n      });\n\n      // Track custom metric for retry success\n      this.appInsights.trackMetric({\n        name: 'RetrySuccess',\n        average: metrics.attempt,\n        sampleCount: 1,\n        properties: {\n          action: metrics.action,\n          userId: metrics.userId || 'unknown'\n        }\n      });\n    }\n  }\n\n  /**\n   * Log retry failure\n   */\n  private static logRetryFailure(metrics: RetryMetrics): void {\n    const duration = (metrics.endTime || Date.now()) - metrics.startTime;\n    \n    const logData = {\n      level: 'error',\n      message: `Retry failed for ${metrics.action} after ${metrics.attempt} attempts`,\n      properties: {\n        userId: metrics.userId,\n        action: metrics.action,\n        attempt: metrics.attempt,\n        totalAttempts: metrics.totalAttempts,\n        duration,\n        error: {\n          message: metrics.error?.message,\n          code: metrics.error?.code,\n          status: metrics.error?.response?.status,\n          name: metrics.error?.name,\n          stack: metrics.error?.stack\n        },\n        timestamp: new Date().toISOString()\n      }\n    };\n\n    console.error('RETRY_FAILURE', JSON.stringify(logData));\n\n    // Send to Application Insights\n    if (this.appInsights) {\n      this.appInsights.trackException({\n        exception: metrics.error,\n        properties: logData.properties,\n        severityLevel: 3 // Error\n      });\n\n      // Track custom metric for retry failure\n      this.appInsights.trackMetric({\n        name: 'RetryFailure',\n        average: metrics.attempt,\n        sampleCount: 1,\n        properties: {\n          action: metrics.action,\n          userId: metrics.userId || 'unknown'\n        }\n      });\n    }\n  }\n}\n\n/**\n * Convenience function for common retry scenarios\n */\nexport async function retryWithExponentialBackoff<T>(\n  fn: () => Promise<T>,\n  action: string,\n  userId?: string,\n  options?: Partial<RetryOptions>\n): Promise<T> {\n  return RetryWithBackoff.execute(fn, {\n    action,\n    userId,\n    ...options\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/utils/structured-errors.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":101,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3027,3030],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3027,3030],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":116,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3328,3331],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3328,3331],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3409,3412],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3409,3412],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":366,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":366,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11175,11178],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11175,11178],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":386,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":386,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11577,11580],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11577,11580],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":545,"column":8,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":545,"endColumn":11,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15627,15630],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15627,15630],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":547,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":547,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15706,15709],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15706,15709],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Structured Error System for PrepBettr\n * \n * Provides consistent error handling with standardized error codes,\n * retry hints, and structured response formats across all API routes.\n * \n * Features:\n * - Standardized error codes with categories\n * - Retry hints and backoff strategies\n * - Structured API response format\n * - Client-friendly error messages\n * - Logging integration\n * \n * @version 1.0.0\n */\n\nimport { logServerError } from '@/lib/errors';\n\n// ===== ERROR CATEGORIES =====\n\nexport enum ErrorCategory {\n  AUTHENTICATION = 'AUTHENTICATION',\n  AUTHORIZATION = 'AUTHORIZATION', \n  VALIDATION = 'VALIDATION',\n  RATE_LIMIT = 'RATE_LIMIT',\n  SERVICE_UNAVAILABLE = 'SERVICE_UNAVAILABLE',\n  EXTERNAL_SERVICE = 'EXTERNAL_SERVICE',\n  CONFIGURATION = 'CONFIGURATION',\n  NOT_FOUND = 'NOT_FOUND',\n  CONFLICT = 'CONFLICT',\n  INTERNAL = 'INTERNAL'\n}\n\n// ===== ERROR CODES =====\n\nexport enum ErrorCode {\n  // Authentication errors (4xx)\n  AUTH_TOKEN_MISSING = 'AUTH_TOKEN_MISSING',\n  AUTH_TOKEN_INVALID = 'AUTH_TOKEN_INVALID',\n  AUTH_TOKEN_EXPIRED = 'AUTH_TOKEN_EXPIRED',\n  AUTH_SESSION_EXPIRED = 'AUTH_SESSION_EXPIRED',\n  \n  // Authorization errors (4xx)\n  ACCESS_DENIED = 'ACCESS_DENIED',\n  INSUFFICIENT_PERMISSIONS = 'INSUFFICIENT_PERMISSIONS',\n  QUOTA_EXCEEDED = 'QUOTA_EXCEEDED',\n  LICENSE_REQUIRED = 'LICENSE_REQUIRED',\n  \n  // Validation errors (4xx)\n  INVALID_REQUEST = 'INVALID_REQUEST',\n  MISSING_REQUIRED_FIELD = 'MISSING_REQUIRED_FIELD',\n  INVALID_FILE_TYPE = 'INVALID_FILE_TYPE',\n  FILE_TOO_LARGE = 'FILE_TOO_LARGE',\n  INVALID_PARAMETER = 'INVALID_PARAMETER',\n  \n  // Rate limiting (4xx)\n  RATE_LIMIT_EXCEEDED = 'RATE_LIMIT_EXCEEDED',\n  CONCURRENT_REQUEST_LIMIT = 'CONCURRENT_REQUEST_LIMIT',\n  \n  // Resource errors (4xx)\n  NOT_FOUND = 'NOT_FOUND',\n  RESOURCE_CONFLICT = 'RESOURCE_CONFLICT',\n  RESOURCE_LOCKED = 'RESOURCE_LOCKED',\n  \n  // Service errors (5xx)\n  SERVICE_UNAVAILABLE = 'SERVICE_UNAVAILABLE',\n  SERVICE_TIMEOUT = 'SERVICE_TIMEOUT',\n  SERVICE_OVERLOADED = 'SERVICE_OVERLOADED',\n  \n  // External service errors (5xx)\n  AZURE_OPENAI_ERROR = 'AZURE_OPENAI_ERROR',\n  AZURE_SPEECH_ERROR = 'AZURE_SPEECH_ERROR',\n  FIREBASE_ERROR = 'FIREBASE_ERROR',\n  STORAGE_ERROR = 'STORAGE_ERROR',\n  \n  // Configuration errors (5xx)\n  CONFIGURATION_ERROR = 'CONFIGURATION_ERROR',\n  SERVICE_NOT_CONFIGURED = 'SERVICE_NOT_CONFIGURED',\n  \n  // Internal errors (5xx)\n  INTERNAL_SERVER_ERROR = 'INTERNAL_SERVER_ERROR',\n  UNHANDLED_ERROR = 'UNHANDLED_ERROR'\n}\n\n// ===== RETRY STRATEGIES =====\n\nexport enum RetryStrategy {\n  NONE = 'NONE',                    // Don't retry\n  IMMEDIATE = 'IMMEDIATE',          // Retry immediately\n  LINEAR = 'LINEAR',                // Linear backoff (1s, 2s, 3s...)\n  EXPONENTIAL = 'EXPONENTIAL',      // Exponential backoff (1s, 2s, 4s, 8s...)\n  EXPONENTIAL_JITTER = 'EXPONENTIAL_JITTER'  // Exponential with random jitter\n}\n\n// ===== TYPE DEFINITIONS =====\n\nexport interface StructuredError {\n  code: ErrorCode;\n  category: ErrorCategory;\n  message: string;\n  details?: Record<string, any>;\n  timestamp: string;\n  requestId?: string;\n  retryable: boolean;\n  retryStrategy?: RetryStrategy;\n  retryAfter?: number; // Seconds\n  maxRetries?: number;\n}\n\nexport interface APIErrorResponse {\n  error: StructuredError;\n  success: false;\n  data: null;\n}\n\nexport interface APISuccessResponse<T = any> {\n  error: null;\n  success: true;\n  data: T;\n}\n\nexport type APIResponse<T = any> = APISuccessResponse<T> | APIErrorResponse;\n\n// ===== ERROR DEFINITIONS =====\n\nconst ERROR_DEFINITIONS: Record<ErrorCode, Omit<StructuredError, 'timestamp' | 'requestId'>> = {\n  // Authentication errors\n  [ErrorCode.AUTH_TOKEN_MISSING]: {\n    code: ErrorCode.AUTH_TOKEN_MISSING,\n    category: ErrorCategory.AUTHENTICATION,\n    message: 'Authentication token is required but was not provided.',\n    retryable: false\n  },\n  [ErrorCode.AUTH_TOKEN_INVALID]: {\n    code: ErrorCode.AUTH_TOKEN_INVALID,\n    category: ErrorCategory.AUTHENTICATION,\n    message: 'The provided authentication token is invalid.',\n    retryable: false\n  },\n  [ErrorCode.AUTH_TOKEN_EXPIRED]: {\n    code: ErrorCode.AUTH_TOKEN_EXPIRED,\n    category: ErrorCategory.AUTHENTICATION,\n    message: 'Authentication token has expired. Please sign in again.',\n    retryable: false\n  },\n  [ErrorCode.AUTH_SESSION_EXPIRED]: {\n    code: ErrorCode.AUTH_SESSION_EXPIRED,\n    category: ErrorCategory.AUTHENTICATION,\n    message: 'Your session has expired. Please sign in again.',\n    retryable: false\n  },\n  \n  // Authorization errors\n  [ErrorCode.ACCESS_DENIED]: {\n    code: ErrorCode.ACCESS_DENIED,\n    category: ErrorCategory.AUTHORIZATION,\n    message: 'Access denied. You do not have permission to perform this action.',\n    retryable: false\n  },\n  [ErrorCode.INSUFFICIENT_PERMISSIONS]: {\n    code: ErrorCode.INSUFFICIENT_PERMISSIONS,\n    category: ErrorCategory.AUTHORIZATION,\n    message: 'Insufficient permissions to access this resource.',\n    retryable: false\n  },\n  [ErrorCode.QUOTA_EXCEEDED]: {\n    code: ErrorCode.QUOTA_EXCEEDED,\n    category: ErrorCategory.AUTHORIZATION,\n    message: 'Usage quota exceeded. Please upgrade your plan or wait for quota reset.',\n    retryable: false\n  },\n  [ErrorCode.LICENSE_REQUIRED]: {\n    code: ErrorCode.LICENSE_REQUIRED,\n    category: ErrorCategory.AUTHORIZATION,\n    message: 'A valid license is required to access this feature.',\n    retryable: false\n  },\n  \n  // Validation errors\n  [ErrorCode.INVALID_REQUEST]: {\n    code: ErrorCode.INVALID_REQUEST,\n    category: ErrorCategory.VALIDATION,\n    message: 'The request is invalid or malformed.',\n    retryable: false\n  },\n  [ErrorCode.MISSING_REQUIRED_FIELD]: {\n    code: ErrorCode.MISSING_REQUIRED_FIELD,\n    category: ErrorCategory.VALIDATION,\n    message: 'Required field is missing from the request.',\n    retryable: false\n  },\n  [ErrorCode.INVALID_FILE_TYPE]: {\n    code: ErrorCode.INVALID_FILE_TYPE,\n    category: ErrorCategory.VALIDATION,\n    message: 'Invalid file type. Please upload a supported file format.',\n    retryable: false\n  },\n  [ErrorCode.FILE_TOO_LARGE]: {\n    code: ErrorCode.FILE_TOO_LARGE,\n    category: ErrorCategory.VALIDATION,\n    message: 'File size exceeds the maximum allowed limit.',\n    retryable: false\n  },\n  [ErrorCode.INVALID_PARAMETER]: {\n    code: ErrorCode.INVALID_PARAMETER,\n    category: ErrorCategory.VALIDATION,\n    message: 'One or more parameters are invalid.',\n    retryable: false\n  },\n  \n  // Rate limiting\n  [ErrorCode.RATE_LIMIT_EXCEEDED]: {\n    code: ErrorCode.RATE_LIMIT_EXCEEDED,\n    category: ErrorCategory.RATE_LIMIT,\n    message: 'Rate limit exceeded. Please try again later.',\n    retryable: true,\n    retryStrategy: RetryStrategy.EXPONENTIAL,\n    retryAfter: 60,\n    maxRetries: 3\n  },\n  [ErrorCode.CONCURRENT_REQUEST_LIMIT]: {\n    code: ErrorCode.CONCURRENT_REQUEST_LIMIT,\n    category: ErrorCategory.RATE_LIMIT,\n    message: 'Too many concurrent requests. Please wait and try again.',\n    retryable: true,\n    retryStrategy: RetryStrategy.LINEAR,\n    retryAfter: 5,\n    maxRetries: 5\n  },\n  \n  // Resource errors\n  [ErrorCode.NOT_FOUND]: {\n    code: ErrorCode.NOT_FOUND,\n    category: ErrorCategory.NOT_FOUND,\n    message: 'The requested resource was not found.',\n    retryable: false\n  },\n  [ErrorCode.RESOURCE_CONFLICT]: {\n    code: ErrorCode.RESOURCE_CONFLICT,\n    category: ErrorCategory.CONFLICT,\n    message: 'Resource conflict. The resource is in an inconsistent state.',\n    retryable: true,\n    retryStrategy: RetryStrategy.LINEAR,\n    retryAfter: 2,\n    maxRetries: 3\n  },\n  [ErrorCode.RESOURCE_LOCKED]: {\n    code: ErrorCode.RESOURCE_LOCKED,\n    category: ErrorCategory.CONFLICT,\n    message: 'Resource is currently locked by another process.',\n    retryable: true,\n    retryStrategy: RetryStrategy.EXPONENTIAL,\n    retryAfter: 5,\n    maxRetries: 3\n  },\n  \n  // Service errors\n  [ErrorCode.SERVICE_UNAVAILABLE]: {\n    code: ErrorCode.SERVICE_UNAVAILABLE,\n    category: ErrorCategory.SERVICE_UNAVAILABLE,\n    message: 'Service is temporarily unavailable. Please try again later.',\n    retryable: true,\n    retryStrategy: RetryStrategy.EXPONENTIAL,\n    retryAfter: 30,\n    maxRetries: 3\n  },\n  [ErrorCode.SERVICE_TIMEOUT]: {\n    code: ErrorCode.SERVICE_TIMEOUT,\n    category: ErrorCategory.SERVICE_UNAVAILABLE,\n    message: 'Service request timed out. Please try again.',\n    retryable: true,\n    retryStrategy: RetryStrategy.LINEAR,\n    retryAfter: 10,\n    maxRetries: 2\n  },\n  [ErrorCode.SERVICE_OVERLOADED]: {\n    code: ErrorCode.SERVICE_OVERLOADED,\n    category: ErrorCategory.SERVICE_UNAVAILABLE,\n    message: 'Service is currently overloaded. Please try again later.',\n    retryable: true,\n    retryStrategy: RetryStrategy.EXPONENTIAL_JITTER,\n    retryAfter: 60,\n    maxRetries: 3\n  },\n  \n  // External service errors\n  [ErrorCode.AZURE_OPENAI_ERROR]: {\n    code: ErrorCode.AZURE_OPENAI_ERROR,\n    category: ErrorCategory.EXTERNAL_SERVICE,\n    message: 'Azure OpenAI service error. Please try again.',\n    retryable: true,\n    retryStrategy: RetryStrategy.EXPONENTIAL,\n    retryAfter: 5,\n    maxRetries: 3\n  },\n  [ErrorCode.AZURE_SPEECH_ERROR]: {\n    code: ErrorCode.AZURE_SPEECH_ERROR,\n    category: ErrorCategory.EXTERNAL_SERVICE,\n    message: 'Azure Speech service error. Please try again.',\n    retryable: true,\n    retryStrategy: RetryStrategy.EXPONENTIAL,\n    retryAfter: 5,\n    maxRetries: 3\n  },\n  [ErrorCode.FIREBASE_ERROR]: {\n    code: ErrorCode.FIREBASE_ERROR,\n    category: ErrorCategory.EXTERNAL_SERVICE,\n    message: 'Firebase service error. Please try again.',\n    retryable: true,\n    retryStrategy: RetryStrategy.LINEAR,\n    retryAfter: 10,\n    maxRetries: 2\n  },\n  [ErrorCode.STORAGE_ERROR]: {\n    code: ErrorCode.STORAGE_ERROR,\n    category: ErrorCategory.EXTERNAL_SERVICE,\n    message: 'File storage error. Please try again.',\n    retryable: true,\n    retryStrategy: RetryStrategy.EXPONENTIAL,\n    retryAfter: 15,\n    maxRetries: 3\n  },\n  \n  // Configuration errors\n  [ErrorCode.CONFIGURATION_ERROR]: {\n    code: ErrorCode.CONFIGURATION_ERROR,\n    category: ErrorCategory.CONFIGURATION,\n    message: 'Service configuration error. Please contact support.',\n    retryable: false\n  },\n  [ErrorCode.SERVICE_NOT_CONFIGURED]: {\n    code: ErrorCode.SERVICE_NOT_CONFIGURED,\n    category: ErrorCategory.CONFIGURATION,\n    message: 'Service is not properly configured. Please contact support.',\n    retryable: false\n  },\n  \n  // Internal errors\n  [ErrorCode.INTERNAL_SERVER_ERROR]: {\n    code: ErrorCode.INTERNAL_SERVER_ERROR,\n    category: ErrorCategory.INTERNAL,\n    message: 'An internal server error occurred. Please try again later.',\n    retryable: true,\n    retryStrategy: RetryStrategy.EXPONENTIAL,\n    retryAfter: 30,\n    maxRetries: 2\n  },\n  [ErrorCode.UNHANDLED_ERROR]: {\n    code: ErrorCode.UNHANDLED_ERROR,\n    category: ErrorCategory.INTERNAL,\n    message: 'An unexpected error occurred. Please try again later.',\n    retryable: true,\n    retryStrategy: RetryStrategy.LINEAR,\n    retryAfter: 10,\n    maxRetries: 1\n  }\n};\n\n// ===== ERROR FACTORY FUNCTIONS =====\n\n/**\n * Create a structured error with optional details\n */\nexport function createStructuredError(\n  code: ErrorCode,\n  details?: Record<string, any>,\n  customMessage?: string,\n  requestId?: string\n): StructuredError {\n  const definition = ERROR_DEFINITIONS[code];\n  \n  return {\n    ...definition,\n    message: customMessage || definition.message,\n    details,\n    timestamp: new Date().toISOString(),\n    requestId\n  };\n}\n\n/**\n * Create an API error response\n */\nexport function createErrorResponse(\n  code: ErrorCode,\n  details?: Record<string, any>,\n  customMessage?: string,\n  requestId?: string\n): APIErrorResponse {\n  const error = createStructuredError(code, details, customMessage, requestId);\n  \n  // Log server errors for monitoring\n  if (error.category === ErrorCategory.INTERNAL || \n      error.category === ErrorCategory.EXTERNAL_SERVICE ||\n      error.category === ErrorCategory.CONFIGURATION) {\n    logServerError(new Error(error.message), {\n      errorCode: error.code,\n      category: error.category,\n      details: error.details,\n      requestId: error.requestId\n    });\n  }\n  \n  return {\n    error,\n    success: false,\n    data: null\n  };\n}\n\n/**\n * Create a success API response\n */\nexport function createSuccessResponse<T>(data: T): APISuccessResponse<T> {\n  return {\n    error: null,\n    success: true,\n    data\n  };\n}\n\n/**\n * Convert HTTP status to appropriate error code\n */\nexport function getErrorCodeFromHTTPStatus(status: number): ErrorCode {\n  switch (status) {\n    case 400: return ErrorCode.INVALID_REQUEST;\n    case 401: return ErrorCode.AUTH_TOKEN_INVALID;\n    case 403: return ErrorCode.ACCESS_DENIED;\n    case 404: return ErrorCode.NOT_FOUND;\n    case 409: return ErrorCode.RESOURCE_CONFLICT;\n    case 413: return ErrorCode.FILE_TOO_LARGE;\n    case 429: return ErrorCode.RATE_LIMIT_EXCEEDED;\n    case 500: return ErrorCode.INTERNAL_SERVER_ERROR;\n    case 502: return ErrorCode.SERVICE_UNAVAILABLE;\n    case 503: return ErrorCode.SERVICE_OVERLOADED;\n    case 504: return ErrorCode.SERVICE_TIMEOUT;\n    default: return ErrorCode.UNHANDLED_ERROR;\n  }\n}\n\n/**\n * Get HTTP status from error code\n */\nexport function getHTTPStatusFromErrorCode(code: ErrorCode): number {\n  const error = ERROR_DEFINITIONS[code];\n  \n  switch (error.category) {\n    case ErrorCategory.AUTHENTICATION:\n      return 401;\n    case ErrorCategory.AUTHORIZATION:\n      return 403;\n    case ErrorCategory.VALIDATION:\n      return 400;\n    case ErrorCategory.RATE_LIMIT:\n      return 429;\n    case ErrorCategory.NOT_FOUND:\n      return 404;\n    case ErrorCategory.CONFLICT:\n      return 409;\n    case ErrorCategory.SERVICE_UNAVAILABLE:\n    case ErrorCategory.EXTERNAL_SERVICE:\n      return 503;\n    case ErrorCategory.CONFIGURATION:\n    case ErrorCategory.INTERNAL:\n    default:\n      return 500;\n  }\n}\n\n/**\n * Check if an error is retryable\n */\nexport function isRetryableError(error: StructuredError): boolean {\n  return error.retryable === true;\n}\n\n/**\n * Get retry delay in milliseconds based on attempt number\n */\nexport function getRetryDelay(\n  error: StructuredError, \n  attemptNumber: number,\n  baseDelay?: number\n): number {\n  const base = baseDelay || (error.retryAfter || 1) * 1000; // Convert to milliseconds\n  \n  switch (error.retryStrategy) {\n    case RetryStrategy.IMMEDIATE:\n      return 0;\n    \n    case RetryStrategy.LINEAR:\n      return base * attemptNumber;\n    \n    case RetryStrategy.EXPONENTIAL:\n      return base * Math.pow(2, attemptNumber - 1);\n    \n    case RetryStrategy.EXPONENTIAL_JITTER:\n      const exponentialDelay = base * Math.pow(2, attemptNumber - 1);\n      const jitter = Math.random() * 0.1 * exponentialDelay; // ¬±10% jitter\n      return exponentialDelay + jitter;\n    \n    case RetryStrategy.NONE:\n    default:\n      return base;\n  }\n}\n\n/**\n * Convert unknown error to structured error\n */\nexport function toStructuredError(\n  error: unknown,\n  defaultCode: ErrorCode = ErrorCode.UNHANDLED_ERROR,\n  requestId?: string\n): StructuredError {\n  if (error && typeof error === 'object' && 'code' in error) {\n    // Already a structured error\n    return error as StructuredError;\n  }\n  \n  if (error instanceof Error) {\n    return createStructuredError(\n      defaultCode,\n      { originalMessage: error.message, stack: error.stack },\n      error.message,\n      requestId\n    );\n  }\n  \n  return createStructuredError(\n    defaultCode,\n    { originalError: String(error) },\n    String(error),\n    requestId\n  );\n}\n\n// ===== NEXT.JS RESPONSE HELPERS =====\n\n/**\n * Send a structured error response in Next.js API routes\n */\nexport function sendErrorResponse(\n  res: any, // NextResponse or Response\n  code: ErrorCode,\n  details?: Record<string, any>,\n  customMessage?: string,\n  requestId?: string\n) {\n  const errorResponse = createErrorResponse(code, details, customMessage, requestId);\n  const status = getHTTPStatusFromErrorCode(code);\n  \n  // Set retry headers if applicable\n  if (errorResponse.error.retryable && errorResponse.error.retryAfter) {\n    res.headers.set('X-Retry-After', String(errorResponse.error.retryAfter));\n    res.headers.set('Retry-After', String(errorResponse.error.retryAfter));\n  }\n  \n  return new Response(JSON.stringify(errorResponse), {\n    status,\n    headers: {\n      'Content-Type': 'application/json',\n      ...Object.fromEntries(res.headers || [])\n    }\n  });\n}\n\n/**\n * Send a structured success response in Next.js API routes\n */\nexport function sendSuccessResponse<T>(data: T, status: number = 200) {\n  const successResponse = createSuccessResponse(data);\n  \n  return new Response(JSON.stringify(successResponse), {\n    status,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/utils/telemetry-stub.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":118,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4291,4294],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4291,4294],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4339,4342],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4339,4342],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// lib/utils/telemetry-stub.ts\n// Temporary telemetry stub to allow testing without server-only dependencies\n\nexport interface TelemetryPageView {\n  name: string;\n  uri?: string;\n  isLoggedIn?: boolean;\n  userId?: string;\n  properties?: { [key: string]: string };\n  measurements?: { [key: string]: number };\n}\n\nexport interface TelemetryEvent {\n  name: string;\n  properties?: { [key: string]: string };\n  measurements?: { [key: string]: number };\n}\n\nexport interface TelemetryUserAction {\n  action: string;\n  feature: string;\n  location?: string;\n  userId?: string;\n  properties?: { [key: string]: string };\n}\n\nexport interface TelemetryCustomMetric {\n  name: string;\n  value: number;\n  properties?: { [key: string]: string };\n}\n\nexport interface TelemetryError {\n  error: Error;\n  userId?: string;\n  context?: { [key: string]: string };\n}\n\nclass TelemetryStubService {\n  private isInitialized = false;\n  private isClient = typeof window !== 'undefined';\n\n  async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n    \n    console.log('üìä Telemetry stub initialized (no actual telemetry)');\n    this.isInitialized = true;\n  }\n\n  async trackPageView(pageView: TelemetryPageView): Promise<void> {\n    console.log(`üìä [STUB] Page view: ${pageView.name}`, pageView);\n  }\n\n  async trackEvent(event: TelemetryEvent): Promise<void> {\n    console.log(`üìä [STUB] Event: ${event.name}`, event);\n  }\n\n  async trackUserAction(action: TelemetryUserAction): Promise<void> {\n    console.log(`üìä [STUB] User action: ${action.action} on ${action.feature}`, action);\n  }\n\n  async trackFeatureUsage(featureName: string, userId?: string, properties?: { [key: string]: string }): Promise<void> {\n    console.log(`üìä [STUB] Feature usage: ${featureName}`, { userId, properties });\n  }\n\n  async trackMetric(metric: TelemetryCustomMetric): Promise<void> {\n    console.log(`üìà [STUB] Metric: ${metric.name} = ${metric.value}`, metric);\n  }\n\n  async trackBusinessMetric(metricName: string, value: number, userId?: string, properties?: { [key: string]: string }): Promise<void> {\n    console.log(`üíº [STUB] Business metric: ${metricName} = ${value}`, { userId, properties });\n  }\n\n  async trackInterviewCompletion(userId: string, interviewId: string, questionCount: number, duration: number, score?: number): Promise<void> {\n    console.log(`üéØ [STUB] Interview completed:`, { userId, interviewId, questionCount, duration, score });\n  }\n\n  async trackResumeUpload(userId: string, fileSize: number, mimeType: string, processingTime: number): Promise<void> {\n    console.log(`üìÑ [STUB] Resume uploaded:`, { userId, fileSize, mimeType, processingTime });\n  }\n\n  async trackFormSubmission(formName: string, userId?: string, success?: boolean, properties?: { [key: string]: string }): Promise<void> {\n    console.log(`üìù [STUB] Form submitted: ${formName}`, { userId, success, properties });\n  }\n\n  async trackButtonClick(buttonName: string, location: string, userId?: string, properties?: { [key: string]: string }): Promise<void> {\n    console.log(`üîò [STUB] Button clicked: ${buttonName} at ${location}`, { userId, properties });\n  }\n\n  async trackSubscription(userId: string, action: 'upgrade' | 'downgrade' | 'cancel', plan: string, revenue?: number): Promise<void> {\n    console.log(`üí≥ [STUB] Subscription ${action}: ${plan}`, { userId, revenue });\n  }\n\n  async trackError(errorInfo: TelemetryError): Promise<void> {\n    console.log(`üö® [STUB] Error tracked: ${errorInfo.error.message}`, errorInfo);\n  }\n\n  async setUser(userId: string, email?: string, properties?: { [key: string]: string }): Promise<void> {\n    console.log(`üë§ [STUB] User context set: ${userId}`, { email, properties });\n  }\n\n  async clearUser(): Promise<void> {\n    console.log('üë§ [STUB] User context cleared');\n  }\n\n  async trackABTest(testName: string, variant: string, userId?: string): Promise<void> {\n    console.log(`üß™ [STUB] A/B test: ${testName} = ${variant}`, { userId });\n  }\n\n  async trackConversion(conversionType: string, value?: number, userId?: string, properties?: { [key: string]: string }): Promise<void> {\n    console.log(`üéØ [STUB] Conversion: ${conversionType}`, { value, userId, properties });\n  }\n\n  async flush(): Promise<void> {\n    console.log('üöø [STUB] Telemetry flushed');\n  }\n\n  getReactPlugin(): any {\n    return null;\n  }\n\n  getAppInsights(): any {\n    return null;\n  }\n}\n\n// Export singleton instance\nexport const telemetry = new TelemetryStubService();\nexport default telemetry;\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/utils/telemetry.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[148,151],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[148,151],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[203,206],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[203,206],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[232,235],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[232,235],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":126,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3927,3930],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3927,3930],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":442,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":442,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13123,13126],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13123,13126],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":522,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":522,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15199,15202],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15199,15202],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":529,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":529,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15324,15327],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15324,15327],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// lib/utils/telemetry.ts\n// Dynamic imports to prevent client-side bundling issues\n\n// Server-side telemetry (when available)\nlet serverTelemetry: any = null;\n\n// Client-side telemetry\nlet appInsights: any = null;\nlet reactPlugin: any = null;\n\n// Types for telemetry events\nexport interface TelemetryPageView {\n  name: string;\n  uri?: string;\n  isLoggedIn?: boolean;\n  userId?: string;\n  properties?: { [key: string]: string };\n  measurements?: { [key: string]: number };\n}\n\nexport interface TelemetryEvent {\n  name: string;\n  properties?: { [key: string]: string };\n  measurements?: { [key: string]: number };\n}\n\nexport interface TelemetryUserAction {\n  action: string;\n  feature: string;\n  location?: string;\n  userId?: string;\n  properties?: { [key: string]: string };\n}\n\nexport interface TelemetryCustomMetric {\n  name: string;\n  value: number;\n  properties?: { [key: string]: string };\n}\n\nexport interface TelemetryError {\n  error: Error;\n  userId?: string;\n  context?: { [key: string]: string };\n}\n\nclass TelemetryService {\n  private isInitialized = false;\n  private isClient = typeof window !== 'undefined';\n\n  async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    try {\n      if (this.isClient) {\n        await this.initializeClient();\n      } else {\n        await this.initializeServer();\n      }\n      this.isInitialized = true;\n      console.log('‚úÖ Telemetry service initialized');\n    } catch (error) {\n      console.error('‚ùå Failed to initialize telemetry:', error);\n    }\n  }\n\n  private async initializeClient(): Promise<void> {\n    const connectionString = process.env.NEXT_PUBLIC_AZURE_APPLICATION_INSIGHTS_CONNECTION_STRING;\n    const instrumentationKey = process.env.NEXT_PUBLIC_AZURE_APPLICATION_INSIGHTS_INSTRUMENTATION_KEY;\n\n    if (!connectionString && !instrumentationKey) {\n      console.warn('‚ö†Ô∏è Azure Application Insights not configured for client');\n      return;\n    }\n\n    try {\n      // Dynamic imports to avoid client-side bundling issues\n      const { ApplicationInsights } = await import('@microsoft/applicationinsights-web');\n      const { ClickAnalyticsPlugin } = await import('@microsoft/applicationinsights-clickanalytics-js');\n      const { ReactPlugin } = await import('@microsoft/applicationinsights-react-js');\n      const { createBrowserHistory } = await import('history');\n      \n      // Create browser history for React Plugin\n      const browserHistory = createBrowserHistory();\n      \n      // Initialize React Plugin\n      reactPlugin = new ReactPlugin();\n      \n      // Initialize Click Analytics Plugin\n      const clickPluginInstance = new ClickAnalyticsPlugin();\n      const clickPluginConfig = {\n        autoCapture: true,\n        callback: {\n          pageName: () => document.title,\n          // Add custom click tracking\n          contentName: (element: HTMLElement) => {\n            return element.getAttribute('data-telemetry-name') || \n                   element.innerText ||\n                   element.tagName.toLowerCase();\n          }\n        }\n      };\n\n      // Configure Application Insights\n      appInsights = new ApplicationInsights({\n        config: {\n          connectionString: connectionString || undefined,\n          instrumentationKey: instrumentationKey || undefined,\n          enableAutoRouteTracking: true,\n          enableRequestHeaderTracking: true,\n          enableResponseHeaderTracking: true,\n          enableAjaxErrorStatusText: true,\n          enableCorsCorrelation: true,\n          enableUnhandledPromiseRejectionTracking: true,\n          extensions: [reactPlugin, clickPluginInstance],\n          extensionConfig: {\n            [reactPlugin.identifier]: {\n              history: browserHistory\n            },\n            [clickPluginInstance.identifier]: clickPluginConfig\n          }\n        }\n      });\n      \n      // Add telemetry initializer after initialization\n      appInsights.addTelemetryInitializer((item: any) => {\n        item.tags = item.tags || {};\n        item.tags['ai.cloud.role'] = 'PrepBettr-Web';\n        item.tags['ai.cloud.roleInstance'] = window.location.hostname;\n        \n        // Add environment info\n        if (item.data) {\n          item.data.environment = process.env.NODE_ENV || 'development';\n          item.data.version = process.env.npm_package_version || '1.0.0';\n        }\n      });\n\n      // Load Application Insights\n      appInsights.loadAppInsights();\n\n      // Track initial page view\n      appInsights.trackPageView({\n        name: document.title,\n        uri: window.location.pathname + window.location.search\n      });\n\n      console.log('‚úÖ Client telemetry initialized');\n    } catch (error) {\n      console.error('‚ùå Failed to initialize client telemetry:', error);\n    }\n  }\n\n  private async initializeServer(): Promise<void> {\n    // Only import server-side modules on server\n    if (this.isClient) return;\n\n    try {\n      // Dynamic import to avoid client-side bundling\n      const { azureApplicationInsights } = await import('../services/azure-application-insights-service');\n      serverTelemetry = azureApplicationInsights;\n      await serverTelemetry.initialize();\n    } catch (error) {\n      console.error('‚ùå Failed to initialize server telemetry:', error);\n    }\n  }\n\n  /**\n   * Track page view\n   */\n  async trackPageView(pageView: TelemetryPageView): Promise<void> {\n    await this.initialize();\n\n    if (this.isClient && appInsights) {\n      appInsights.trackPageView({\n        name: pageView.name,\n        uri: pageView.uri,\n        properties: {\n          isLoggedIn: pageView.isLoggedIn?.toString(),\n          userId: pageView.userId || 'anonymous',\n          ...pageView.properties\n        },\n        measurements: pageView.measurements\n      });\n    } else if (!this.isClient && serverTelemetry) {\n      await serverTelemetry.trackPageView({\n        name: pageView.name,\n        url: pageView.uri,\n        properties: {\n          isLoggedIn: pageView.isLoggedIn?.toString(),\n          userId: pageView.userId || 'anonymous',\n          ...pageView.properties\n        },\n        measurements: pageView.measurements\n      });\n    }\n\n    console.log(`üìä Tracked page view: ${pageView.name}`);\n  }\n\n  /**\n   * Track custom event\n   */\n  async trackEvent(event: TelemetryEvent): Promise<void> {\n    await this.initialize();\n\n    if (this.isClient && appInsights) {\n      appInsights.trackEvent({\n        name: event.name,\n        properties: event.properties,\n        measurements: event.measurements\n      });\n    } else if (!this.isClient && serverTelemetry) {\n      await serverTelemetry.trackEvent({\n        name: event.name,\n        properties: event.properties,\n        metrics: event.measurements\n      });\n    }\n\n    console.log(`üìä Tracked event: ${event.name}`);\n  }\n\n  /**\n   * Track user action (clicks, submissions, etc.)\n   */\n  async trackUserAction(action: TelemetryUserAction): Promise<void> {\n    await this.trackEvent({\n      name: 'UserAction',\n      properties: {\n        action: action.action,\n        feature: action.feature,\n        location: action.location || window.location.pathname,\n        userId: action.userId || 'anonymous',\n        timestamp: new Date().toISOString(),\n        ...action.properties\n      },\n      measurements: {\n        actionCount: 1\n      }\n    });\n  }\n\n  /**\n   * Track feature usage\n   */\n  async trackFeatureUsage(featureName: string, userId?: string, properties?: { [key: string]: string }): Promise<void> {\n    await this.trackEvent({\n      name: 'FeatureUsage',\n      properties: {\n        feature: featureName,\n        userId: userId || 'anonymous',\n        page: this.isClient ? window.location.pathname : 'server',\n        timestamp: new Date().toISOString(),\n        ...properties\n      },\n      measurements: {\n        usageCount: 1\n      }\n    });\n  }\n\n  /**\n   * Track custom metric\n   */\n  async trackMetric(metric: TelemetryCustomMetric): Promise<void> {\n    await this.initialize();\n\n    if (this.isClient && appInsights) {\n      appInsights.trackMetric({\n        name: metric.name,\n        average: metric.value,\n        properties: metric.properties\n      });\n    } else if (!this.isClient && serverTelemetry) {\n      await serverTelemetry.trackMetric({\n        name: metric.name,\n        value: metric.value\n      });\n    }\n\n    console.log(`üìà Tracked metric: ${metric.name} = ${metric.value}`);\n  }\n\n  /**\n   * Track business metrics (interview completion rate, resume uploads, etc.)\n   */\n  async trackBusinessMetric(metricName: string, value: number, userId?: string, properties?: { [key: string]: string }): Promise<void> {\n    // Track as both an event and a metric\n    await Promise.all([\n      this.trackEvent({\n        name: 'BusinessMetric',\n        properties: {\n          metric: metricName,\n          userId: userId || 'anonymous',\n          timestamp: new Date().toISOString(),\n          ...properties\n        },\n        measurements: {\n          value\n        }\n      }),\n      this.trackMetric({\n        name: metricName,\n        value,\n        properties: {\n          userId: userId || 'anonymous',\n          ...properties\n        }\n      })\n    ]);\n  }\n\n  /**\n   * Track interview completion\n   */\n  async trackInterviewCompletion(userId: string, interviewId: string, questionCount: number, duration: number, score?: number): Promise<void> {\n    const properties: { [key: string]: string } = {\n      interviewId,\n      questionCount: questionCount.toString(),\n      durationMinutes: Math.round(duration / 60000).toString()\n    };\n    \n    if (score !== undefined) {\n      properties.score = score.toString();\n    }\n    \n    await this.trackBusinessMetric('InterviewCompletionRate', 1, userId, properties);\n\n    // Also track specific metrics\n    await Promise.all([\n      this.trackMetric({ name: 'InterviewDuration', value: Math.round(duration / 60000) }),\n      this.trackMetric({ name: 'InterviewQuestions', value: questionCount }),\n      score !== undefined && this.trackMetric({ name: 'InterviewScore', value: score })\n    ].filter(Boolean));\n  }\n\n  /**\n   * Track resume upload\n   */\n  async trackResumeUpload(userId: string, fileSize: number, mimeType: string, processingTime: number): Promise<void> {\n    await Promise.all([\n      this.trackBusinessMetric('ResumeUploadCount', 1, userId, {\n        mimeType,\n        fileSizeKB: Math.round(fileSize / 1024).toString(),\n        processingTimeSeconds: Math.round(processingTime / 1000).toString()\n      }),\n      this.trackMetric({ name: 'ResumeFileSize', value: Math.round(fileSize / 1024) }),\n      this.trackMetric({ name: 'ResumeProcessingTime', value: Math.round(processingTime / 1000) })\n    ]);\n  }\n\n  /**\n   * Track form submissions\n   */\n  async trackFormSubmission(formName: string, userId?: string, success?: boolean, properties?: { [key: string]: string }): Promise<void> {\n    const actionProperties: { [key: string]: string } = {\n      ...properties\n    };\n    \n    if (success !== undefined) {\n      actionProperties.success = success.toString();\n    }\n    \n    await this.trackUserAction({\n      action: 'form_submit',\n      feature: formName,\n      userId,\n      properties: actionProperties\n    });\n  }\n\n  /**\n   * Track button clicks\n   */\n  async trackButtonClick(buttonName: string, location: string, userId?: string, properties?: { [key: string]: string }): Promise<void> {\n    await this.trackUserAction({\n      action: 'button_click',\n      feature: buttonName,\n      location,\n      userId,\n      properties\n    });\n  }\n\n  /**\n   * Track subscription events\n   */\n  async trackSubscription(userId: string, action: 'upgrade' | 'downgrade' | 'cancel', plan: string, revenue?: number): Promise<void> {\n    await this.trackEvent({\n      name: 'SubscriptionEvent',\n      properties: {\n        userId,\n        action,\n        plan,\n        timestamp: new Date().toISOString()\n      },\n      measurements: revenue ? { revenue } : undefined\n    });\n\n    // Track as business metric\n    if (action === 'upgrade') {\n      await this.trackBusinessMetric('SubscriptionUpgrade', revenue || 1, userId, { plan });\n    }\n  }\n\n  /**\n   * Track errors\n   */\n  async trackError(errorInfo: TelemetryError): Promise<void> {\n    await this.initialize();\n\n    if (this.isClient && appInsights) {\n      appInsights.trackException({\n        error: errorInfo.error,\n        properties: {\n          userId: errorInfo.userId || 'anonymous',\n          page: window.location.pathname,\n          timestamp: new Date().toISOString(),\n          ...errorInfo.context\n        }\n      });\n    } else if (!this.isClient && serverTelemetry) {\n      await serverTelemetry.trackError(errorInfo.error, errorInfo.userId, {\n        ...errorInfo.context\n      });\n    }\n\n    console.log(`üö® Tracked error: ${errorInfo.error.message}`);\n  }\n\n  /**\n   * Set user context\n   */\n  async setUser(userId: string, email?: string, properties?: { [key: string]: string }): Promise<void> {\n    await this.initialize();\n\n    if (this.isClient && appInsights) {\n      appInsights.setAuthenticatedUserContext(userId, email);\n      \n      // Add user properties\n      if (properties) {\n        appInsights.addTelemetryInitializer((envelope: any) => {\n          envelope.tags = envelope.tags || {};\n          envelope.data = envelope.data || {};\n          Object.assign(envelope.data, {\n            userId,\n            userEmail: email,\n            ...properties\n          });\n        });\n      }\n    } else if (!this.isClient && serverTelemetry) {\n      await serverTelemetry.setUserContext(userId, email, properties);\n    }\n\n    console.log(`üë§ Set user context: ${userId}`);\n  }\n\n  /**\n   * Clear user context (on logout)\n   */\n  async clearUser(): Promise<void> {\n    await this.initialize();\n\n    if (this.isClient && appInsights) {\n      appInsights.clearAuthenticatedUserContext();\n    } else if (!this.isClient && serverTelemetry) {\n      await serverTelemetry.clearUserContext();\n    }\n\n    console.log('üë§ Cleared user context');\n  }\n\n  /**\n   * Track A/B test participation\n   */\n  async trackABTest(testName: string, variant: string, userId?: string): Promise<void> {\n    await this.trackEvent({\n      name: 'ABTestParticipation',\n      properties: {\n        testName,\n        variant,\n        userId: userId || 'anonymous',\n        timestamp: new Date().toISOString()\n      }\n    });\n  }\n\n  /**\n   * Track conversion events\n   */\n  async trackConversion(conversionType: string, value?: number, userId?: string, properties?: { [key: string]: string }): Promise<void> {\n    await this.trackEvent({\n      name: 'Conversion',\n      properties: {\n        conversionType,\n        userId: userId || 'anonymous',\n        timestamp: new Date().toISOString(),\n        ...properties\n      },\n      measurements: value ? { value } : undefined\n    });\n\n    // Also track as business metric\n    await this.trackBusinessMetric('ConversionRate', value || 1, userId, { conversionType, ...properties });\n  }\n\n  /**\n   * Flush telemetry data\n   */\n  async flush(): Promise<void> {\n    if (this.isClient && appInsights) {\n      appInsights.flush();\n    } else if (!this.isClient && serverTelemetry) {\n      await serverTelemetry.flush();\n    }\n  }\n\n  /**\n   * Get React plugin for React integration\n   */\n  getReactPlugin(): any {\n    return reactPlugin;\n  }\n\n  /**\n   * Get Application Insights instance for advanced usage\n   */\n  getAppInsights(): any {\n    return appInsights;\n  }\n}\n\n// Export singleton instance\nexport const telemetry = new TelemetryService();\nexport default telemetry;\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/utils/template-engine.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[671,674],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[671,674],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[822,825],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[822,825],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[856,859],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[856,859],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1210,1213],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1210,1213],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1224,1227],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1224,1227],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2124,2127],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2124,2127],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2224,2227],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2224,2227],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":76,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2368,2371],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2368,2371],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2468,2471],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2468,2471],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":80,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2612,2615],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2612,2615],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":80,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2631,2634],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2631,2634],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2705,2708],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2705,2708],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2713,2716],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2713,2716],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":82,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2774,2777],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2774,2777],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":82,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2782,2785],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2782,2785],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'format' is assigned a value but never used.","line":87,"column":62,"nodeType":null,"messageId":"unusedVar","endLine":87,"endColumn":68},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":339,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":339,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11347,11350],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11347,11350],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":350,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":350,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11636,11639],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11636,11639],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":374,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":374,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12247,12250],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12247,12250],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Dynamic Template Engine for PrepBettr\n * \n * Provides advanced template processing with variable interpolation, \n * conditional rendering, loops, and structured YAML template support.\n * \n * Features:\n * - Variable interpolation: {{variable}}\n * - Conditional blocks: {{#if condition}}...{{/if}}\n * - Loop blocks: {{#each items}}...{{/each}}\n * - Nested object access: {{user.profile.name}}\n * - Helper functions: {{uppercase(text)}}\n * - YAML template loading and caching\n * \n * @version 1.0.0\n */\n\nimport * as yaml from 'js-yaml';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n// ===== TYPES =====\n\nexport interface TemplateContext {\n  [key: string]: any;\n}\n\nexport interface TemplateConfig {\n  name: string;\n  description?: string;\n  version?: string;\n  template: string;\n  variables?: Record<string, any>;\n  metadata?: Record<string, any>;\n}\n\nexport interface TemplateEngine {\n  render(template: string, context: TemplateContext): string;\n  renderFromConfig(config: TemplateConfig, context: TemplateContext): string;\n  loadTemplate(filePath: string): TemplateConfig;\n  loadTemplateSet(directoryPath: string): Record<string, TemplateConfig>;\n}\n\nexport interface HelperFunction {\n  (value: any, ...args: any[]): string;\n}\n\n// ===== TEMPLATE ENGINE IMPLEMENTATION =====\n\nclass PrepBettrTemplateEngine implements TemplateEngine {\n  private templateCache = new Map<string, TemplateConfig>();\n  private helpers = new Map<string, HelperFunction>();\n\n  constructor() {\n    this.registerDefaultHelpers();\n  }\n\n  /**\n   * Register default helper functions\n   */\n  private registerDefaultHelpers(): void {\n    // String helpers\n    this.registerHelper('uppercase', (value: string) => String(value).toUpperCase());\n    this.registerHelper('lowercase', (value: string) => String(value).toLowerCase());\n    this.registerHelper('capitalize', (value: string) => {\n      const str = String(value);\n      return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n    });\n    this.registerHelper('trim', (value: string) => String(value).trim());\n    \n    // Array helpers\n    this.registerHelper('length', (value: any[]) => String(Array.isArray(value) ? value.length : 0));\n    this.registerHelper('join', (value: any[], separator = ', ') => \n      Array.isArray(value) ? value.join(separator) : String(value)\n    );\n    this.registerHelper('first', (value: any[]) => String(Array.isArray(value) ? value[0] : value));\n    this.registerHelper('last', (value: any[]) => String(Array.isArray(value) ? value[value.length - 1] : value));\n    \n    // Logic helpers\n    this.registerHelper('default', (value: any, defaultValue: any) => String(value || defaultValue));\n    this.registerHelper('eq', (a: any, b: any) => String(a === b));\n    this.registerHelper('neq', (a: any, b: any) => String(a !== b));\n    this.registerHelper('gt', (a: number, b: number) => String(a > b));\n    this.registerHelper('lt', (a: number, b: number) => String(a < b));\n    \n    // Formatting helpers\n    this.registerHelper('dateFormat', (value: string | Date, format = 'YYYY-MM-DD') => {\n      const date = new Date(value);\n      return date.toISOString().split('T')[0]; // Basic formatting\n    });\n    this.registerHelper('pluralize', (count: number, singular: string, plural?: string) => {\n      return count === 1 ? singular : (plural || `${singular}s`);\n    });\n    this.registerHelper('increment', (value: number) => String(value + 1));\n  }\n\n  /**\n   * Register a custom helper function\n   */\n  public registerHelper(name: string, fn: HelperFunction): void {\n    this.helpers.set(name, fn);\n  }\n\n  /**\n   * Render a template string with context\n   */\n  public render(template: string, context: TemplateContext = {}): string {\n    if (!template) {\n      return '';\n    }\n\n    try {\n      let result = template;\n      let previousResult = '';\n      let iterations = 0;\n      const maxIterations = 10; // Prevent infinite loops in nested processing\n\n      // Keep processing until no more changes occur or max iterations reached\n      while (result !== previousResult && iterations < maxIterations) {\n        previousResult = result;\n        \n        // Process conditional blocks first\n        result = this.processConditionals(result, context);\n        \n        // Process loop blocks\n        result = this.processLoops(result, context);\n        \n        // Process variable interpolations and helper functions\n        result = this.processInterpolations(result, context);\n        \n        iterations++;\n      }\n\n      return result;\n    } catch (error) {\n      console.error('Template rendering error:', error);\n      throw new Error(`Template rendering failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Render template from config with merged context\n   */\n  public renderFromConfig(config: TemplateConfig, context: TemplateContext = {}): string {\n    const mergedContext = { ...config.variables, ...context };\n    return this.render(config.template, mergedContext);\n  }\n\n  /**\n   * Load template from YAML file\n   */\n  public loadTemplate(filePath: string): TemplateConfig {\n    const cacheKey = path.resolve(filePath);\n    \n    if (this.templateCache.has(cacheKey)) {\n      return this.templateCache.get(cacheKey)!;\n    }\n\n    try {\n      const content = fs.readFileSync(filePath, 'utf8');\n      const config = yaml.load(content) as TemplateConfig;\n      \n      if (!config.template) {\n        throw new Error('Template config must have a \"template\" field');\n      }\n\n      this.templateCache.set(cacheKey, config);\n      return config;\n    } catch (error) {\n      throw new Error(`Failed to load template from ${filePath}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Load all templates from a directory\n   */\n  public loadTemplateSet(directoryPath: string): Record<string, TemplateConfig> {\n    const templates: Record<string, TemplateConfig> = {};\n\n    try {\n      const files = fs.readdirSync(directoryPath);\n      \n      for (const file of files) {\n        if (file.endsWith('.yaml') || file.endsWith('.yml')) {\n          const filePath = path.join(directoryPath, file);\n          const templateName = path.basename(file, path.extname(file));\n          templates[templateName] = this.loadTemplate(filePath);\n        }\n      }\n\n      return templates;\n    } catch (error) {\n      throw new Error(`Failed to load templates from ${directoryPath}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Process conditional blocks: {{#if condition}}...{{/if}}\n   */\n  private processConditionals(template: string, context: TemplateContext): string {\n    const conditionalRegex = /\\{\\{#if\\s+([^}]+)\\}\\}([\\s\\S]*?)\\{\\{\\/if\\}\\}/g;\n    \n    return template.replace(conditionalRegex, (match, condition, content) => {\n      try {\n        const isTrue = this.evaluateCondition(condition.trim(), context);\n        return isTrue ? content : '';\n      } catch (error) {\n        console.warn(`Conditional evaluation error: ${error}`);\n        return '';\n      }\n    });\n  }\n\n  /**\n   * Process loop blocks: {{#each items}}...{{/each}}\n   */\n  private processLoops(template: string, context: TemplateContext): string {\n    const loopRegex = /\\{\\{#each\\s+([^}]+)\\}\\}([\\s\\S]*?)\\{\\{\\/each\\}\\}/g;\n    \n    return template.replace(loopRegex, (match, arrayPath, content) => {\n      try {\n        const array = this.getNestedValue(context, arrayPath.trim());\n        \n        if (!Array.isArray(array)) {\n          return '';\n        }\n\n        return array.map((item, index) => {\n          const loopContext = {\n            ...context,\n            '@item': item,\n            '@index': index,\n            '@first': index === 0,\n            '@last': index === array.length - 1,\n            ...(typeof item === 'object' && item !== null ? item : { '@value': item })\n          };\n          \n          // Only process interpolations here - nested processing will be handled in main render loop\n          return this.processInterpolations(content, loopContext);\n        }).join('');\n      } catch (error) {\n        console.warn(`Loop processing error: ${error}`);\n        return '';\n      }\n    });\n  }\n\n  /**\n   * Process variable interpolations and helper functions\n   */\n  private processInterpolations(template: string, context: TemplateContext): string {\n    const interpolationRegex = /\\{\\{([^}]+)\\}\\}/g;\n    \n    return template.replace(interpolationRegex, (match, expression) => {\n      try {\n        return this.evaluateExpression(expression.trim(), context);\n      } catch (error) {\n        console.warn(`Interpolation error for \"${expression}\": ${error}`);\n        return match; // Return original expression on error\n      }\n    });\n  }\n\n  /**\n   * Evaluate a condition expression\n   */\n  private evaluateCondition(condition: string, context: TemplateContext): boolean {\n    // Handle simple variable existence\n    if (!condition.includes(' ')) {\n      const value = this.getNestedValue(context, condition);\n      return Boolean(value);\n    }\n\n    // Handle comparison operations\n    const comparisonMatch = condition.match(/^([^<>=!]+)\\s*([<>=!]+)\\s*(.+)$/);\n    if (comparisonMatch) {\n      const [, left, operator, right] = comparisonMatch;\n      const leftValue = this.getNestedValue(context, left.trim());\n      const rightValue = this.parseValue(right.trim(), context);\n\n      switch (operator.trim()) {\n        case '===':\n        case '==':\n          return leftValue === rightValue;\n        case '!==':\n        case '!=':\n          return leftValue !== rightValue;\n        case '>':\n          return Number(leftValue) > Number(rightValue);\n        case '<':\n          return Number(leftValue) < Number(rightValue);\n        case '>=':\n          return Number(leftValue) >= Number(rightValue);\n        case '<=':\n          return Number(leftValue) <= Number(rightValue);\n        default:\n          return Boolean(leftValue);\n      }\n    }\n\n    // Fallback: evaluate as variable\n    return Boolean(this.getNestedValue(context, condition));\n  }\n\n  /**\n   * Evaluate an expression (variable or helper function)\n   */\n  private evaluateExpression(expression: string, context: TemplateContext): string {\n    // Check if it's a helper function call\n    const helperMatch = expression.match(/^([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(([^)]*)\\)$/);\n    if (helperMatch) {\n      const [, helperName, argsString] = helperMatch;\n      \n      if (this.helpers.has(helperName)) {\n        try {\n          const helper = this.helpers.get(helperName)!;\n          const args = this.parseArguments(argsString, context);\n          const firstArg = args.length > 0 ? args[0] : undefined;\n          const restArgs = args.slice(1);\n          return String(helper(firstArg, ...restArgs));\n        } catch (error) {\n          console.warn(`Helper function '${helperName}' error:`, error);\n          return `{{${expression}}}`; // Return original expression on helper error\n        }\n      } else {\n        // Unknown helper function - return original expression\n        return `{{${expression}}}`;\n      }\n    }\n\n    // Regular variable interpolation\n    const value = this.getNestedValue(context, expression);\n    return value != null ? String(value) : '';\n  }\n\n  /**\n   * Parse helper function arguments\n   */\n  private parseArguments(argsString: string, context: TemplateContext): any[] {\n    if (!argsString.trim()) {\n      return [];\n    }\n\n    return argsString.split(',').map(arg => this.parseValue(arg.trim(), context));\n  }\n\n  /**\n   * Parse a value (string literal, number, variable reference)\n   */\n  private parseValue(value: string, context: TemplateContext): any {\n    // String literal\n    if ((value.startsWith('\"') && value.endsWith('\"')) || \n        (value.startsWith(\"'\") && value.endsWith(\"'\"))) {\n      return value.slice(1, -1);\n    }\n\n    // Number literal\n    if (/^-?\\d*\\.?\\d+$/.test(value)) {\n      return Number(value);\n    }\n\n    // Boolean literal\n    if (value === 'true' || value === 'false') {\n      return value === 'true';\n    }\n\n    // Variable reference\n    return this.getNestedValue(context, value);\n  }\n\n  /**\n   * Get nested value from context (e.g., \"user.profile.name\")\n   */\n  private getNestedValue(context: TemplateContext, path: string): any {\n    if (!path) {\n      return undefined;\n    }\n\n    const keys = path.split('.');\n    let current = context;\n\n    for (const key of keys) {\n      if (current == null || typeof current !== 'object') {\n        return undefined;\n      }\n      current = current[key];\n    }\n\n    return current;\n  }\n\n  /**\n   * Clear template cache\n   */\n  public clearCache(): void {\n    this.templateCache.clear();\n  }\n\n  /**\n   * Get cache statistics\n   */\n  public getCacheStats(): { size: number; keys: string[] } {\n    return {\n      size: this.templateCache.size,\n      keys: Array.from(this.templateCache.keys())\n    };\n  }\n}\n\n// ===== EXPORTS =====\n\n// Singleton instance\nexport const templateEngine = new PrepBettrTemplateEngine();\n\n// Factory function for custom instances\nexport const createTemplateEngine = (): PrepBettrTemplateEngine => {\n  return new PrepBettrTemplateEngine();\n};\n\n\n// Utility functions\nexport const renderTemplate = (template: string, context: TemplateContext = {}): string => {\n  return templateEngine.render(template, context);\n};\n\nexport const loadAndRenderTemplate = (filePath: string, context: TemplateContext = {}): string => {\n  const config = templateEngine.loadTemplate(filePath);\n  return templateEngine.renderFromConfig(config, context);\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/voice/agent-state.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectIsInterviewActive' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":26},{"ruleId":"prefer-const","severity":2,"message":"'state' is never reassigned. Use 'const' instead.","line":100,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":100,"endColumn":14,"fix":{"range":[3229,3400],"text":"const state = { \n      ...initialAgentState, \n      interviewState: InterviewState.ACTIVE,\n      audioState: AudioState.SPEAKING,\n      audioStream: {} as MediaStream\n    };"}},{"ruleId":"prefer-const","severity":2,"message":"'state' is never reassigned. Use 'const' instead.","line":117,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":117,"endColumn":26,"fix":{"range":[3827,4099],"text":"const state: AgentState = { \n      ...initialAgentState, \n      interviewState: InterviewState.ACTIVE,\n      audioState: AudioState.SPEAKING,\n      messages: [{ role: 'user' as const, content: 'Hello' }],\n      hasUserSpoken: true,\n      userImage: 'user-profile.jpg'\n    };"}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"/**\n * Unit tests for Agent state reducer\n * Validates state transitions and selectors\n */\n\nimport {\n  InterviewState,\n  AudioState,\n  AgentState,\n  agentReducer,\n  initialAgentState,\n  selectIsRecording,\n  selectIsProcessing,\n  selectIsSpeaking,\n  selectIsWaiting,\n  selectIsInterviewActive,\n  selectIsInterviewFinished,\n  selectCanStartRecording,\n  selectShouldShowFeedback,\n  createStartInterviewAction,\n  createEndInterviewAction,\n  createAddUserMessageAction,\n  createAddAIMessageAction,\n  createUserSpokeAction,\n  createProcessingCompleteAction\n} from './agent-state';\nimport { SavedMessage } from '@/lib/types/voice';\n\ndescribe('Agent State Reducer', () => {\n  // Test initial state\n  test('should initialize with correct default state', () => {\n    expect(initialAgentState).toEqual({\n      interviewState: InterviewState.READY,\n      audioState: AudioState.IDLE,\n      messages: [],\n      questionNumber: 0,\n      hasUserSpoken: false,\n      isInterviewComplete: false,\n      userImage: \"\",\n      feedbackGenerated: false,\n      generatedFeedbackId: null,\n      audioStream: null,\n    });\n  });\n\n  // Test individual actions\n  test('SET_INTERVIEW_STATE should update interview state', () => {\n    const action = { type: 'SET_INTERVIEW_STATE' as const, payload: InterviewState.ACTIVE };\n    const nextState = agentReducer(initialAgentState, action);\n    \n    expect(nextState.interviewState).toBe(InterviewState.ACTIVE);\n  });\n\n  test('SET_AUDIO_STATE should update audio state', () => {\n    const action = { type: 'SET_AUDIO_STATE' as const, payload: AudioState.RECORDING };\n    const nextState = agentReducer(initialAgentState, action);\n    \n    expect(nextState.audioState).toBe(AudioState.RECORDING);\n  });\n\n  test('ADD_MESSAGE should append a message', () => {\n    const message: SavedMessage = { role: 'user' as const, content: 'Hello' };\n    const action = { type: 'ADD_MESSAGE' as const, payload: message };\n    const nextState = agentReducer(initialAgentState, action);\n    \n    expect(nextState.messages).toEqual([message]);\n  });\n\n  test('ADD_MESSAGES should append multiple messages', () => {\n    const messages: SavedMessage[] = [\n      { role: 'user' as const, content: 'Hello' },\n      { role: 'assistant' as const, content: 'Hi there' }\n    ];\n    const action = { type: 'ADD_MESSAGES' as const, payload: messages };\n    const nextState = agentReducer(initialAgentState, action);\n    \n    expect(nextState.messages).toEqual(messages);\n  });\n\n  test('SET_USER_SPOKEN should update hasUserSpoken flag', () => {\n    const action = { type: 'SET_USER_SPOKEN' as const, payload: true };\n    const nextState = agentReducer(initialAgentState, action);\n    \n    expect(nextState.hasUserSpoken).toBe(true);\n  });\n\n  test('SET_FEEDBACK_GENERATED should update feedback state', () => {\n    const action = { \n      type: 'SET_FEEDBACK_GENERATED' as const, \n      payload: { generated: true, id: 'feedback-123' } \n    };\n    const nextState = agentReducer(initialAgentState, action);\n    \n    expect(nextState.feedbackGenerated).toBe(true);\n    expect(nextState.generatedFeedbackId).toBe('feedback-123');\n  });\n\n  test('END_INTERVIEW should reset to finished state', () => {\n    // Set up an active interview first\n    let state = { \n      ...initialAgentState, \n      interviewState: InterviewState.ACTIVE,\n      audioState: AudioState.SPEAKING,\n      audioStream: {} as MediaStream\n    };\n    \n    const action = { type: 'END_INTERVIEW' as const };\n    const nextState = agentReducer(state, action);\n    \n    expect(nextState.interviewState).toBe(InterviewState.FINISHED);\n    expect(nextState.audioState).toBe(AudioState.IDLE);\n    expect(nextState.audioStream).toBeNull();\n  });\n\n  test('RESET_INTERVIEW should reset state but preserve user image', () => {\n    // Set up an active state with multiple changes\n    let state: AgentState = { \n      ...initialAgentState, \n      interviewState: InterviewState.ACTIVE,\n      audioState: AudioState.SPEAKING,\n      messages: [{ role: 'user' as const, content: 'Hello' }],\n      hasUserSpoken: true,\n      userImage: 'user-profile.jpg'\n    };\n    \n    const action = { type: 'RESET_INTERVIEW' as const };\n    const nextState = agentReducer(state, action);\n    \n    // Should reset everything except userImage\n    expect(nextState.interviewState).toBe(InterviewState.READY);\n    expect(nextState.audioState).toBe(AudioState.IDLE);\n    expect(nextState.messages).toEqual([]);\n    expect(nextState.hasUserSpoken).toBe(false);\n    expect(nextState.userImage).toBe('user-profile.jpg'); // Preserved\n  });\n\n  // Test action creators\n  test('createStartInterviewAction should create the correct action', () => {\n    const action = createStartInterviewAction();\n    expect(action).toEqual({\n      type: 'SET_INTERVIEW_STATE',\n      payload: InterviewState.ACTIVE\n    });\n  });\n\n  test('createEndInterviewAction should create the correct action', () => {\n    const action = createEndInterviewAction();\n    expect(action).toEqual({\n      type: 'END_INTERVIEW'\n    });\n  });\n\n  test('createAddUserMessageAction should create the correct action', () => {\n    const action = createAddUserMessageAction('Hello there');\n    expect(action).toEqual({\n      type: 'ADD_MESSAGE',\n      payload: { role: 'user', content: 'Hello there' }\n    });\n  });\n\n  test('createAddAIMessageAction should create the correct action', () => {\n    const action = createAddAIMessageAction('I am the AI assistant');\n    expect(action).toEqual({\n      type: 'ADD_MESSAGE',\n      payload: { role: 'assistant', content: 'I am the AI assistant' }\n    });\n  });\n\n  test('createUserSpokeAction should create the correct action', () => {\n    const action = createUserSpokeAction();\n    expect(action).toEqual({\n      type: 'SET_USER_SPOKEN',\n      payload: true\n    });\n  });\n\n  test('createProcessingCompleteAction should create multiple actions', () => {\n    const actions = createProcessingCompleteAction(\n      'AI response', \n      2, // question number\n      false // not complete\n    );\n    \n    expect(actions).toEqual([\n      { \n        type: 'ADD_MESSAGE', \n        payload: { role: 'assistant', content: 'AI response' } \n      },\n      { type: 'RESET_TO_WAITING' },\n      { type: 'SET_QUESTION_NUMBER', payload: 2 },\n      { type: 'SET_INTERVIEW_COMPLETE', payload: false }\n    ]);\n  });\n\n  // Test selectors\n  test('selectIsRecording should return correct boolean', () => {\n    const recordingState: AgentState = {\n      ...initialAgentState,\n      audioState: AudioState.RECORDING\n    };\n    \n    expect(selectIsRecording(recordingState)).toBe(true);\n    expect(selectIsRecording(initialAgentState)).toBe(false);\n  });\n\n  test('selectIsProcessing should return correct boolean', () => {\n    const processingState: AgentState = {\n      ...initialAgentState,\n      audioState: AudioState.PROCESSING\n    };\n    \n    expect(selectIsProcessing(processingState)).toBe(true);\n    expect(selectIsProcessing(initialAgentState)).toBe(false);\n  });\n\n  test('selectIsSpeaking should return correct boolean', () => {\n    const speakingState: AgentState = {\n      ...initialAgentState,\n      audioState: AudioState.SPEAKING\n    };\n    \n    expect(selectIsSpeaking(speakingState)).toBe(true);\n    expect(selectIsSpeaking(initialAgentState)).toBe(false);\n  });\n\n  test('selectIsWaiting should return correct boolean', () => {\n    const waitingState: AgentState = {\n      ...initialAgentState,\n      audioState: AudioState.WAITING\n    };\n    \n    expect(selectIsWaiting(waitingState)).toBe(true);\n    expect(selectIsWaiting(initialAgentState)).toBe(false);\n  });\n\n  test('selectCanStartRecording should return true only when active and waiting', () => {\n    const readyState: AgentState = {\n      ...initialAgentState,\n      interviewState: InterviewState.READY\n    };\n    \n    const activeWaitingState: AgentState = {\n      ...initialAgentState,\n      interviewState: InterviewState.ACTIVE,\n      audioState: AudioState.WAITING\n    };\n    \n    const activeRecordingState: AgentState = {\n      ...initialAgentState,\n      interviewState: InterviewState.ACTIVE,\n      audioState: AudioState.RECORDING\n    };\n    \n    expect(selectCanStartRecording(readyState)).toBe(false);\n    expect(selectCanStartRecording(activeWaitingState)).toBe(true);\n    expect(selectCanStartRecording(activeRecordingState)).toBe(false);\n  });\n\n  test('selectShouldShowFeedback should return true when feedback is ready', () => {\n    const noFeedbackState: AgentState = {\n      ...initialAgentState,\n      interviewState: InterviewState.FINISHED,\n      feedbackGenerated: false\n    };\n    \n    const pendingFeedbackState: AgentState = {\n      ...initialAgentState,\n      interviewState: InterviewState.FINISHED,\n      feedbackGenerated: true,\n      generatedFeedbackId: null\n    };\n    \n    const completeFeedbackState: AgentState = {\n      ...initialAgentState,\n      interviewState: InterviewState.FINISHED,\n      feedbackGenerated: true,\n      generatedFeedbackId: 'feedback-123'\n    };\n    \n    expect(selectShouldShowFeedback(noFeedbackState)).toBe(false);\n    expect(selectShouldShowFeedback(pendingFeedbackState)).toBe(false);\n    expect(selectShouldShowFeedback(completeFeedbackState)).toBe(true);\n  });\n\n  // Test full interview lifecycle transitions\n  test('should handle complete interview lifecycle', () => {\n    // Start with initial state\n    let state = initialAgentState;\n    \n    // 1. Start interview\n    state = agentReducer(state, createStartInterviewAction());\n    expect(state.interviewState).toBe(InterviewState.ACTIVE);\n    \n    // 2. Set audio state to waiting for user\n    state = agentReducer(state, { type: 'RESET_TO_WAITING' });\n    expect(state.audioState).toBe(AudioState.WAITING);\n    \n    // 3. Start recording\n    state = agentReducer(state, { type: 'START_RECORDING' });\n    expect(state.audioState).toBe(AudioState.RECORDING);\n    \n    // 4. Stop recording\n    state = agentReducer(state, { type: 'STOP_RECORDING' });\n    expect(state.audioState).toBe(AudioState.PROCESSING);\n    \n    // 5. Start speaking\n    state = agentReducer(state, { type: 'START_SPEAKING' });\n    expect(state.audioState).toBe(AudioState.SPEAKING);\n    \n    // 6. Add user and AI messages\n    state = agentReducer(state, createAddUserMessageAction('Hello, I am applying for a job'));\n    state = agentReducer(state, createAddAIMessageAction('Tell me about your experience'));\n    expect(state.messages.length).toBe(2);\n    \n    // 7. Reset to waiting state\n    state = agentReducer(state, { type: 'RESET_TO_WAITING' });\n    expect(state.audioState).toBe(AudioState.WAITING);\n    \n    // 8. Mark interview as complete\n    state = agentReducer(state, { type: 'SET_INTERVIEW_COMPLETE', payload: true });\n    expect(state.isInterviewComplete).toBe(true);\n    \n    // 9. End interview\n    state = agentReducer(state, createEndInterviewAction());\n    expect(state.interviewState).toBe(InterviewState.FINISHED);\n    expect(state.audioState).toBe(AudioState.IDLE);\n    \n    // 10. Generate feedback\n    state = agentReducer(state, { \n      type: 'SET_FEEDBACK_GENERATED', \n      payload: { generated: true, id: 'feedback-123' } \n    });\n    expect(state.feedbackGenerated).toBe(true);\n    expect(state.generatedFeedbackId).toBe('feedback-123');\n    \n    // Verify selectors\n    expect(selectIsInterviewFinished(state)).toBe(true);\n    expect(selectShouldShowFeedback(state)).toBe(true);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/voice/audio-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":220,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":220,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7000,7003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7000,7003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Audio processing utilities for voice interview system\n * Extracted from Agent.tsx to reduce redundancy and improve maintainability\n */\n\nimport { logger } from '../utils/logger';\nimport { AudioError, reportError } from '../utils/error-utils';\n\n// Audio configuration constants\nexport const AUDIO_CONFIG = {\n  SAMPLE_RATE: 16000,\n  CHANNEL_COUNT: 1,\n  RING_BUFFER_SIZE: 32,\n  SILENCE_THRESHOLD_RMS: 0.01, // -40 dB ‚âà 0.01 linear\n  SILENCE_WINDOW_MS: 200,\n  CHUNK_SIZE: 4096,\n  RECORDING_TIMEOUT_MS: 8000\n} as const;\n\n/**\n * Get the best supported MIME type for MediaRecorder\n */\nexport const getSupportedMimeType = (): string | null => {\n  const preferredTypes = [\n    'audio/webm;codecs=pcm',     // Best: PCM in WebM container\n    'audio/wav',                 // Good: WAV format\n    'audio/webm;codecs=opus',    // Fallback: Opus in WebM (needs transcoding)\n    'audio/webm',                // Fallback: Default WebM\n    'audio/ogg;codecs=opus',     // Fallback: Opus in OGG (needs transcoding)\n    'audio/ogg',                 // Fallback: Default OGG\n  ];\n  \n  for (const mimeType of preferredTypes) {\n    if (MediaRecorder.isTypeSupported(mimeType)) {\n      logger.success(`Selected MIME type: ${mimeType}`);\n      return mimeType;\n    }\n  }\n  \n  logger.warn('No preferred MIME types supported, using default');\n  return null;\n};\n\n/**\n * Trim initial silence from audio chunks\n */\nexport const trimInitialSilence = (\n  audioChunks: Float32Array[], \n  sampleRate: number\n): { \n  trimmedChunks: Float32Array[]; \n  hasNonSilence: boolean; \n} => {\n  const windowSamples = Math.floor(sampleRate * AUDIO_CONFIG.SILENCE_WINDOW_MS / 1000);\n  \n  // Concatenate all chunks for analysis\n  const totalLength = audioChunks.reduce((acc, chunk) => acc + chunk.length, 0);\n  const combinedAudio = new Float32Array(totalLength);\n  let offset = 0;\n  \n  for (const chunk of audioChunks) {\n    combinedAudio.set(chunk, offset);\n    offset += chunk.length;\n  }\n  \n  let startIndex = 0;\n  let hasNonSilence = false;\n  \n  // Find first non-silent window\n  for (let i = 0; i <= combinedAudio.length - windowSamples; i += windowSamples / 4) {\n    let windowRMS = 0;\n    const actualWindowSize = Math.min(windowSamples, combinedAudio.length - i);\n    \n    for (let j = 0; j < actualWindowSize; j++) {\n      windowRMS += combinedAudio[i + j] * combinedAudio[i + j];\n    }\n    windowRMS = Math.sqrt(windowRMS / actualWindowSize);\n\n    if (windowRMS > AUDIO_CONFIG.SILENCE_THRESHOLD_RMS) {\n      startIndex = i;\n      hasNonSilence = true;\n      logger.audio.process(`Non-silence detected at sample ${startIndex}, RMS: ${windowRMS.toFixed(4)}`);\n      break;\n    }\n  }\n  \n  if (!hasNonSilence) {\n    logger.warn('No speech detected in audio');\n    return { trimmedChunks: [], hasNonSilence: false };\n  }\n  \n  const trimmedAudio = combinedAudio.slice(startIndex);\n  \n  // Split back into chunks for consistent processing\n  const trimmedChunks: Float32Array[] = [];\n  for (let i = 0; i < trimmedAudio.length; i += AUDIO_CONFIG.CHUNK_SIZE) {\n    const chunk = trimmedAudio.slice(i, i + AUDIO_CONFIG.CHUNK_SIZE);\n    trimmedChunks.push(chunk);\n  }\n  \n  logger.audio.process(`Silence trimmed - processed ${trimmedChunks.length} chunks`);\n  return { trimmedChunks, hasNonSilence };\n};\n\n/**\n * Convert Float32Array chunks to WAV blob\n */\nexport const convertToWav = (audioChunks: Float32Array[], sampleRate: number): Blob => {\n  try {\n    const totalLength = audioChunks.reduce((acc, chunk) => acc + chunk.length, 0);\n    const combinedAudio = new Float32Array(totalLength);\n    let offset = 0;\n    \n    for (const chunk of audioChunks) {\n      combinedAudio.set(chunk, offset);\n      offset += chunk.length;\n    }\n\n    // Convert float samples to 16-bit PCM\n    const pcmData = new Int16Array(combinedAudio.length);\n    for (let i = 0; i < combinedAudio.length; i++) {\n      const sample = Math.max(-1, Math.min(1, combinedAudio[i]));\n      pcmData[i] = sample * 32767;\n    }\n\n    // Create WAV header\n    const wavHeader = createWavHeader(pcmData.length, sampleRate);\n    const wavBlob = new Blob([wavHeader, pcmData], { type: 'audio/wav' });\n    \n    logger.audio.process(`WAV conversion complete - ${wavBlob.size} bytes`);\n    return wavBlob;\n  } catch (error) {\n    throw new AudioError('WAV conversion failed', { error, chunksLength: audioChunks.length });\n  }\n};\n\n/**\n * Create WAV file header\n */\nconst createWavHeader = (dataLength: number, sampleRate: number): ArrayBuffer => {\n  const wavHeader = new ArrayBuffer(44);\n  const view = new DataView(wavHeader);\n\n  const writeString = (offset: number, string: string) => {\n    for (let i = 0; i < string.length; i++) {\n      view.setUint8(offset + i, string.charCodeAt(i));\n    }\n  };\n\n  writeString(0, 'RIFF');\n  view.setUint32(4, 36 + dataLength * 2, true);\n  writeString(8, 'WAVE');\n  writeString(12, 'fmt ');\n  view.setUint32(16, 16, true);\n  view.setUint16(20, 1, true);                    // PCM format\n  view.setUint16(22, 1, true);                    // mono\n  view.setUint32(24, sampleRate, true);           // sample rate\n  view.setUint32(28, sampleRate * 2, true);       // byte rate\n  view.setUint16(32, 2, true);                    // block align\n  view.setUint16(34, 16, true);                   // bits per sample\n  writeString(36, 'data');\n  view.setUint32(40, dataLength * 2, true);\n\n  return wavHeader;\n};\n\n/**\n * Prepare audio for upload - combines trimming and WAV conversion\n */\nexport const prepareAudioForUpload = (\n  audioChunks: Float32Array[], \n  sampleRate: number\n): { blob: Blob; hasValidAudio: boolean } => {\n  if (!audioChunks || audioChunks.length === 0) {\n    logger.warn('No audio chunks provided for processing');\n    return { blob: new Blob(), hasValidAudio: false };\n  }\n\n  try {\n    const { trimmedChunks, hasNonSilence } = trimInitialSilence(audioChunks, sampleRate);\n    \n    if (!hasNonSilence || trimmedChunks.length === 0) {\n      logger.warn('No valid speech detected in audio');\n      return { blob: new Blob(), hasValidAudio: false };\n    }\n\n    const wavBlob = convertToWav(trimmedChunks, sampleRate);\n    return { blob: wavBlob, hasValidAudio: true };\n  } catch (error) {\n    reportError(error, 'Audio preparation failed', { \n      chunksProvided: audioChunks.length,\n      sampleRate \n    });\n    return { blob: new Blob(), hasValidAudio: false };\n  }\n};\n\n/**\n * Setup audio context with optimal settings\n */\nexport const createOptimizedAudioContext = async (): Promise<{\n  context: AudioContext;\n  source: MediaStreamAudioSourceNode;\n  workletNode: AudioWorkletNode;\n  cleanup: () => Promise<void>;\n}> => {\n  try {\n    // Get microphone stream\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: {\n        echoCancellation: true,\n        noiseSuppression: true,\n        autoGainControl: false,\n        sampleRate: AUDIO_CONFIG.SAMPLE_RATE,\n        channelCount: AUDIO_CONFIG.CHANNEL_COUNT,\n      }\n    });\n\n    // Create audio context\n    const context = new (window.AudioContext || (window as any).webkitAudioContext)({\n      sampleRate: AUDIO_CONFIG.SAMPLE_RATE\n    });\n\n    // Load audio worklet\n    await context.audioWorklet.addModule('/audio-processor.js');\n\n    const source = context.createMediaStreamSource(stream);\n    const workletNode = new AudioWorkletNode(context, 'audio-processor');\n    \n    source.connect(workletNode);\n\n    const cleanup = async () => {\n      logger.audio.process('Cleaning up audio resources');\n      \n      source.disconnect();\n      workletNode.port.onmessage = null;\n      \n      if (context.state !== 'closed') {\n        await context.close();\n      }\n      \n      stream.getTracks().forEach(track => track.stop());\n    };\n\n    logger.success('Audio context setup complete');\n    return { context, source, workletNode, cleanup };\n  } catch (error) {\n    throw new AudioError('Failed to setup audio context', { error });\n  }\n};\n\n/**\n * Resume suspended audio context (for tab visibility changes)\n */\nexport const resumeAudioContext = async (context: AudioContext): Promise<void> => {\n  if (context.state === 'suspended') {\n    try {\n      await context.resume();\n      logger.success('AudioContext resumed');\n    } catch (error) {\n      throw new AudioError('Failed to resume AudioContext', { error });\n    }\n  }\n};\n\n/**\n * Dispose of audio resources safely\n */\nexport const disposeAudioResources = async (\n  resources: {\n    context?: AudioContext | null;\n    stream?: MediaStream | null;\n    workletNode?: AudioWorkletNode | null;\n    source?: MediaStreamAudioSourceNode | null;\n  }\n): Promise<void> => {\n  const { context, stream, workletNode, source } = resources;\n  \n  try {\n    if (source) {\n      source.disconnect();\n    }\n    \n    if (workletNode) {\n      workletNode.port.onmessage = null;\n    }\n    \n    if (context && context.state !== 'closed') {\n      await context.close();\n    }\n    \n    if (stream) {\n      stream.getTracks().forEach(track => track.stop());\n    }\n    \n    logger.success('Audio resources disposed');\n  } catch (error) {\n    reportError(error, 'Failed to dispose audio resources', resources);\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/voice/azure-adapters.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showErrorNotification' is defined but never used.","line":7,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ConversationProcessResponse' is defined but never used.","line":10,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onError' is defined but never used.","line":303,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":303,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'audioError' is assigned a value but never used.","line":347,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":347,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fallbackError' is defined but never used.","line":372,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":372,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'audioError' is defined but never used.","line":507,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":507,"endColumn":24}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Azure API adapters for speech and conversation services\n * Isolates API calls while maintaining existing signatures\n */\n\nimport { logger } from '../utils/logger';\nimport { withRetry, handleApiError, showErrorNotification } from '../utils/error-utils';\nimport { validateAudioBuffer, playAudioBuffer } from '../utils/audio-helpers';\nimport { sanitizeInterviewText } from '../utils/markdown-sanitizer';\nimport { SavedMessage, ConversationProcessResponse } from '@/lib/types/voice';\n\nexport interface InterviewContext {\n  userName: string;\n  questions?: string[];\n  type: string;\n  userId: string;\n  interviewId?: string;\n  feedbackId?: string;\n  resumeInfo?: {\n    hasResume: boolean;\n    candidateName?: string;\n    summary?: string;\n    skills?: string;\n    experience?: string;\n    education?: string;\n    yearsOfExperience?: number;\n  };\n}\n\nexport interface ConversationResponse {\n  message: string;\n  questionNumber?: number;\n  isComplete?: boolean;\n  hasAudio?: boolean;\n  audioData?: number[] | Uint8Array;\n}\n\n/**\n * Speech-to-Text adapter with retry logic\n */\nexport const speechToText = async (audioBlob: Blob): Promise<string> => {\n  return withRetry(async () => {\n    const formData = new FormData();\n    formData.append('audio', audioBlob, 'recording.wav');\n\n    logger.api.request('/api/voice/stream', 'POST', { \n      size: audioBlob.size,\n      type: audioBlob.type \n    });\n    \n    const response = await fetch('/api/voice/stream', {\n      method: 'POST',\n      body: formData,\n    });\n\n    if (!response.ok) {\n      throw handleApiError(response, 'Speech-to-text');\n    }\n\n    const result = await response.json();\n    logger.api.response('/api/voice/stream', response.status, { \n      textLength: result.text?.length \n    });\n\n    if (result.text === undefined) {\n      throw new Error('Speech-to-text response missing text field');\n    }\n\n    return result.text;\n  }, 3, 'Speech-to-text');\n};\n\n/**\n * Start conversation adapter\n */\nexport const startConversation = async (\n  interviewContext: InterviewContext\n): Promise<ConversationResponse> => {\n  logger.api.request('/api/voice/conversation', 'POST', { action: 'start' });\n\n  const response = await fetch('/api/voice/conversation', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      action: \"start\",\n      interviewContext\n    }),\n  });\n\n  if (!response.ok) {\n    throw handleApiError(response, 'Start conversation');\n  }\n\n  const data = await response.json();\n  logger.api.response('/api/voice/conversation', response.status, { \n    hasAudio: !!data.hasAudio,\n    messageLength: data.message?.length \n  });\n\n  return data;\n};\n\n/**\n * Process conversation turn adapter  \n */\nexport const processConversation = async (\n  userTranscript: string\n): Promise<ConversationResponse> => {\n  console.log('üß™ [PROCESS CONVERSATION] Starting with transcript:', {\n    length: userTranscript.length,\n    preview: userTranscript.substring(0, 100) + '...'\n  });\n  \n  logger.api.request('/api/voice/conversation', 'POST', { \n    action: 'process',\n    transcriptLength: userTranscript.length \n  });\n\n  try {\n    console.log('üåç [PROCESS CONVERSATION] Making fetch request to /api/voice/conversation');\n    \n    const response = await fetch('/api/voice/conversation', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        action: \"process\",\n        userTranscript,\n      }),\n    });\n\n    console.log('üåç [PROCESS CONVERSATION] Got response:', {\n      status: response.status,\n      statusText: response.statusText,\n      ok: response.ok\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('‚ùå [PROCESS CONVERSATION] API error response:', {\n        status: response.status,\n        statusText: response.statusText,\n        errorBody: errorText.substring(0, 500) + '...'\n      });\n      throw handleApiError(response, 'Process conversation');\n    }\n\n    const data = await response.json();\n    console.log('‚úÖ [PROCESS CONVERSATION] Successfully parsed JSON response:', {\n      hasMessage: !!data.message,\n      messageLength: data.message?.length,\n      questionNumber: data.questionNumber,\n      isComplete: data.isComplete,\n      hasAudio: data.hasAudio\n    });\n    \n    logger.api.response('/api/voice/conversation', response.status, {\n      hasAudio: !!data.hasAudio,\n      messageLength: data.message?.length,\n      questionNumber: data.questionNumber,\n      isComplete: data.isComplete\n    });\n\n    return data;\n  } catch (error) {\n    console.error('‚ùå [PROCESS CONVERSATION] Network or parsing error:', {\n      errorType: error instanceof Error ? error.constructor.name : typeof error,\n      errorMessage: error instanceof Error ? error.message : String(error),\n      stack: error instanceof Error ? error.stack : undefined\n    });\n    throw error;\n  }\n};\n\n/**\n * End conversation adapter\n */\nexport const endConversation = async (): Promise<{ summary?: string }> => {\n  try {\n    logger.api.request('/api/voice/conversation', 'POST', { action: 'summary' });\n\n    const response = await fetch('/api/voice/conversation', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        action: \"summary\",\n      }),\n    });\n\n    if (response.ok) {\n      const data = await response.json();\n      logger.api.response('/api/voice/conversation', response.status, {\n        hasSummary: !!data.summary\n      });\n      return data;\n    } else {\n      logger.warn('Failed to generate interview summary', { status: response.status });\n      return {};\n    }\n  } catch (error) {\n    logger.warn('Error generating interview summary', { error: error instanceof Error ? error.message : String(error) });\n    return {};\n  }\n};\n\n/**\n * Text-to-Speech adapter with streaming support\n */\nexport const textToSpeech = async (\n  text: string, \n  options?: { streaming?: boolean; onChunk?: (chunk: ArrayBuffer) => void }\n): Promise<Blob> => {\n  return withRetry(async () => {\n    // Sanitize text to remove Markdown formatting before TTS\n    const sanitizedText = sanitizeInterviewText(text);\n    \n    logger.api.request('/api/voice/tts', 'POST', { \n      originalLength: text.length,\n      sanitizedLength: sanitizedText.length,\n      hadMarkdown: text !== sanitizedText,\n      streaming: options?.streaming || false\n    });\n\n    const response = await fetch('/api/voice/tts', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ \n        text: sanitizedText,\n        streaming: options?.streaming || false \n      }),\n    });\n\n    if (!response.ok) {\n      throw handleApiError(response, 'Text-to-speech');\n    }\n\n    // Handle streaming response if requested\n    if (options?.streaming && options.onChunk && response.body) {\n      const reader = response.body.getReader();\n      const chunks: Uint8Array[] = [];\n      \n      try {\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) break;\n          \n          chunks.push(value);\n          \n          // Convert chunk to ArrayBuffer and send to callback\n          if (options.onChunk) {\n            options.onChunk(value.buffer.slice(value.byteOffset, value.byteOffset + value.byteLength));\n          }\n        }\n        \n        // Combine all chunks into final blob\n        const totalLength = chunks.reduce((sum, chunk) => sum + chunk.length, 0);\n        const combined = new Uint8Array(totalLength);\n        let offset = 0;\n        chunks.forEach(chunk => {\n          combined.set(chunk, offset);\n          offset += chunk.length;\n        });\n        \n        const audioBlob = new Blob([combined], { type: 'audio/wav' });\n        logger.api.response('/api/voice/tts', response.status, { \n          blobSize: audioBlob.size,\n          chunksReceived: chunks.length,\n          streaming: true\n        });\n        \n        return audioBlob;\n        \n      } finally {\n        reader.releaseLock();\n      }\n    } else {\n      // Standard non-streaming response\n      const audioBlob = await response.blob();\n      logger.api.response('/api/voice/tts', response.status, { \n        blobSize: audioBlob.size,\n        streaming: false \n      });\n      \n      return audioBlob;\n    }\n  }, 2, 'Text-to-speech');\n};\n\n/**\n * Play AI response using real Azure TTS with fallback handling\n */\nexport const playAIResponse = async (\n  text: string,\n  onStart?: () => void,\n  onComplete?: () => void,\n  onError?: (error: Error) => void\n): Promise<void> => {\n  console.log('üéØ [AZURE TTS] playAIResponse called', { \n    textLength: text.length, \n    hasOnStart: !!onStart,\n    hasOnComplete: !!onComplete \n  });\n  \n  try {\n    // Call onStart callback\n    if (onStart) {\n      console.log('üéØ [AZURE TTS] Calling onStart callback');\n      onStart();\n    }\n    \n    logger.audio.speak('Playing AI response via Azure TTS', { textLength: text.length });\n    \n    // Get audio from Azure TTS\n    const audioBlob = await textToSpeech(text);\n    \n    if (!audioBlob || audioBlob.size === 0) {\n      throw new Error('Empty audio response from TTS service');\n    }\n    \n    console.log('üîä [AZURE TTS] Playing audio', { \n      text: text.substring(0, 150) + (text.length > 150 ? '...' : ''),\n      audioSize: audioBlob.size\n    });\n    \n    // Play the audio using Web Audio API\n    await playAudioFromBlob(audioBlob);\n    \n    console.log('üîä [AZURE TTS] Audio playback completed');\n    logger.audio.speak('Azure TTS playback completed');\n    \n    // Call onComplete callback\n    if (onComplete) {\n      console.log('üéØ [AZURE TTS] Calling onComplete callback');\n      onComplete();\n    }\n    \n    console.log('üéØ [AZURE TTS] playAIResponse finished successfully');\n  } catch (error) {\n    console.warn('üîä [AZURE TTS] TTS service unavailable, using mock audio');\n    const audioError = error instanceof Error ? error : new Error('TTS failed');\n    logger.warn('Azure TTS not available, using fallback audio simulation');\n    \n    // Fallback to mock TTS timing simulation\n    try {\n      // Call onStart if not already called\n      if (onStart) {\n        onStart();\n      }\n      \n      const wordsCount = text.split(' ').length;\n      const readingDuration = Math.max(2500, wordsCount * 120); // 120ms per word, minimum 2.5 seconds\n      \n      console.log('üîä [FALLBACK] Using audio simulation', { \n        wordsCount,\n        duration: readingDuration + 'ms'\n      });\n      \n      await new Promise(resolve => setTimeout(resolve, readingDuration));\n      \n      if (onComplete) {\n        onComplete();\n      }\n      \n      console.log('üîä [FALLBACK] Audio simulation completed');\n    } catch (fallbackError) {\n      logger.warn('Fallback audio simulation failed, continuing anyway');\n      // Always call onComplete to prevent conversation from hanging\n      if (onComplete) {\n        onComplete();\n      }\n    }\n  }\n};\n\n/**\n * Play audio from blob using Web Audio API\n */\nconst playAudioFromBlob = async (audioBlob: Blob): Promise<void> => {\n  return new Promise((resolve, reject) => {\n    try {\n      // Create audio element for playback\n      const audio = new Audio();\n      const audioUrl = URL.createObjectURL(audioBlob);\n      \n      audio.src = audioUrl;\n      audio.preload = 'auto';\n      \n      // Set up event listeners\n      audio.addEventListener('ended', () => {\n        URL.revokeObjectURL(audioUrl);\n        resolve();\n      });\n      \n      audio.addEventListener('error', (error) => {\n        URL.revokeObjectURL(audioUrl);\n        reject(new Error(`Audio playback failed: ${error.message || 'Unknown error'}`));\n      });\n      \n      // Start playback\n      audio.play().catch((error) => {\n        URL.revokeObjectURL(audioUrl);\n        reject(new Error(`Audio play failed: ${error.message || 'Unknown error'}`));\n      });\n      \n    } catch (error) {\n      reject(new Error(`Audio setup failed: ${error instanceof Error ? error.message : String(error)}`));\n    }\n  });\n};\n\n/**\n * Play direct audio buffer with TTS fallback\n */\nexport const playDirectAudioWithFallback = async (\n  audioData: number[] | Uint8Array,\n  fallbackText: string,\n  onStart?: () => void,\n  onComplete?: () => void,\n  onError?: (error: Error) => void\n): Promise<void> => {\n  if (validateAudioBuffer(audioData)) {\n    try {\n      onStart?.();\n      await playAudioBuffer(audioData);\n      logger.audio.speak('Direct audio playback completed');\n      onComplete?.();\n      return;\n    } catch (error) {\n      logger.warn('Direct audio failed, falling back to TTS', { error: error instanceof Error ? error.message : String(error) });\n      // Fall through to TTS fallback\n    }\n  }\n\n  // TTS fallback\n  await playAIResponse(fallbackText, onStart, onComplete, onError);\n};\n\n/**\n * Combined conversation processing with audio playback\n */\nexport const processAndPlayResponse = async (\n  userTranscript: string,\n  onStart?: () => void,\n  onComplete?: () => void,\n  onError?: (error: Error) => void\n): Promise<{\n  userMessage: SavedMessage;\n  aiMessage: SavedMessage;\n  questionNumber?: number;\n  isComplete?: boolean;\n}> => {\n  try {\n    // Process conversation\n    const data = await processConversation(userTranscript);\n    \n    // Create message objects\n    const userMessage: SavedMessage = { role: \"user\", content: userTranscript };\n    const aiMessage: SavedMessage = { role: \"assistant\", content: data.message };\n\n    // Play response audio\n    if (data.hasAudio && validateAudioBuffer(data.audioData)) {\n      await playDirectAudioWithFallback(\n        data.audioData!,\n        data.message,\n        onStart,\n        onComplete,\n        onError\n      );\n    } else {\n      await playAIResponse(data.message, onStart, onComplete, onError);\n    }\n\n    return {\n      userMessage,\n      aiMessage,\n      questionNumber: data.questionNumber,\n      isComplete: data.isComplete\n    };\n  } catch (error) {\n    const processError = error instanceof Error ? error : new Error('Processing failed');\n    logger.error('Conversation processing failed', processError, {\n      userTranscript: userTranscript.substring(0, 100),\n      errorType: processError.name,\n      errorMessage: processError.message\n    });\n    \n    // Don't throw the error, instead provide fallback behavior\n    console.warn('üîÑ Conversation processing failed, attempting graceful recovery');\n    \n    // Create fallback response to prevent conversation from breaking\n    const fallbackUserMessage: SavedMessage = { role: \"user\", content: userTranscript };\n    const fallbackAIMessage: SavedMessage = { \n      role: \"assistant\", \n      content: \"I apologize, I'm having some technical difficulties. Could you please repeat that or try rephrasing your response?\" \n    };\n    \n    // Try to play the fallback response\n    try {\n      await playAIResponse(fallbackAIMessage.content, onStart, onComplete, onError);\n    } catch (audioError) {\n      console.warn('üîä Fallback audio also failed, calling completion anyway');\n      if (onComplete) onComplete();\n    }\n    \n    return {\n      userMessage: fallbackUserMessage,\n      aiMessage: fallbackAIMessage,\n      questionNumber: undefined,\n      isComplete: false\n    };\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/lib/voice/error-recovery.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":142,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4470,4473],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4470,4473],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Advanced error recovery and network resilience for voice interviews\n */\n\nimport { logger } from '../utils/logger';\n\nexport interface ErrorRecoveryOptions {\n  maxRetries?: number;\n  retryDelay?: number;\n  fallbackEnabled?: boolean;\n  offlineMode?: boolean;\n}\n\nexport interface ServiceHealth {\n  speechToText: 'online' | 'degraded' | 'offline';\n  textToSpeech: 'online' | 'degraded' | 'offline';\n  openAI: 'online' | 'degraded' | 'offline';\n  network: 'online' | 'offline';\n}\n\nexport class VoiceInterviewErrorRecovery {\n  private retryAttempts: Map<string, number> = new Map();\n  private serviceHealth: ServiceHealth = {\n    speechToText: 'online',\n    textToSpeech: 'online',\n    openAI: 'online',\n    network: 'online'\n  };\n  private offlineModeEnabled = false;\n\n  constructor(private options: ErrorRecoveryOptions = {}) {\n    this.options = {\n      maxRetries: 3,\n      retryDelay: 1000,\n      fallbackEnabled: true,\n      offlineMode: false,\n      ...options\n    };\n\n    // Monitor network status\n    this.initNetworkMonitoring();\n  }\n\n  /**\n   * Initialize network connectivity monitoring\n   */\n  private initNetworkMonitoring(): void {\n    if (typeof window !== 'undefined') {\n      // Monitor online/offline events\n      window.addEventListener('online', () => {\n        logger.info('Network connection restored');\n        this.serviceHealth.network = 'online';\n        this.checkServicesHealth();\n      });\n\n      window.addEventListener('offline', () => {\n        logger.warn('Network connection lost - entering offline mode');\n        this.serviceHealth.network = 'offline';\n        this.enableOfflineMode();\n      });\n\n      // Initial network status\n      this.serviceHealth.network = navigator.onLine ? 'online' : 'offline';\n    }\n  }\n\n  /**\n   * Handle API errors with intelligent retry and fallback\n   */\n  async handleApiError<T>(\n    operation: () => Promise<T>,\n    operationType: keyof ServiceHealth,\n    fallback?: () => Promise<T>\n  ): Promise<T> {\n    const operationKey = `${operationType}-${Date.now()}`;\n    let lastError: Error | null = null;\n\n    for (let attempt = 1; attempt <= (this.options.maxRetries || 3); attempt++) {\n      try {\n        // Check if we should attempt the operation\n        if (this.serviceHealth.network === 'offline' && this.offlineModeEnabled) {\n          throw new Error('Service unavailable in offline mode');\n        }\n\n        const result = await operation();\n        \n        // Success - reset retry count and update service health\n        this.retryAttempts.delete(operationKey);\n        this.updateServiceHealth(operationType, 'online');\n        \n        return result;\n\n      } catch (error) {\n        lastError = error instanceof Error ? error : new Error(String(error));\n        \n        logger.error(`${operationType} attempt ${attempt} failed`, {\n          error: lastError.message,\n          attempt,\n          maxRetries: this.options.maxRetries\n        });\n\n        // Update service health based on error type\n        this.updateServiceHealthFromError(operationType, lastError);\n\n        // If this was the last attempt, break out of loop\n        if (attempt === this.options.maxRetries) {\n          break;\n        }\n\n        // Calculate exponential backoff delay\n        const delay = (this.options.retryDelay || 1000) * Math.pow(2, attempt - 1);\n        await this.sleep(delay);\n      }\n    }\n\n    // All retries failed - attempt fallback if available\n    if (fallback && this.options.fallbackEnabled) {\n      try {\n        logger.info(`Attempting fallback for ${operationType}`);\n        return await fallback();\n      } catch (fallbackError) {\n        logger.error(`Fallback also failed for ${operationType}`, fallbackError instanceof Error ? fallbackError : new Error(String(fallbackError)));\n      }\n    }\n\n    // Final failure\n    this.updateServiceHealth(operationType, 'offline');\n    throw lastError || new Error(`${operationType} failed after ${this.options.maxRetries} attempts`);\n  }\n\n  /**\n   * Update service health status\n   */\n  private updateServiceHealth(service: keyof ServiceHealth, status: ServiceHealth[keyof ServiceHealth]): void {\n    // Validate status for network service (only accepts online/offline)\n    let validatedStatus = status;\n    if (service === 'network' && status === 'degraded') {\n      validatedStatus = 'offline'; // Degrade network service to offline\n    }\n    \n    if (this.serviceHealth[service] !== validatedStatus) {\n      (this.serviceHealth as any)[service] = validatedStatus;\n      logger.info(`Service health updated`, { service, status: validatedStatus });\n      \n      // Emit custom event for UI updates\n      if (typeof window !== 'undefined') {\n        window.dispatchEvent(new CustomEvent('serviceHealthChanged', {\n          detail: { service, status: validatedStatus, allServices: this.serviceHealth }\n        }));\n      }\n    }\n  }\n\n  /**\n   * Update service health based on error characteristics\n   */\n  private updateServiceHealthFromError(service: keyof ServiceHealth, error: Error): void {\n    const errorMessage = error.message.toLowerCase();\n    \n    // Network-related errors\n    if (errorMessage.includes('network') || errorMessage.includes('fetch')) {\n      this.updateServiceHealth(service, 'offline');\n    }\n    // Rate limiting or quota errors\n    else if (errorMessage.includes('quota') || errorMessage.includes('rate limit')) {\n      this.updateServiceHealth(service, 'degraded');\n    }\n    // Authentication errors\n    else if (errorMessage.includes('auth') || errorMessage.includes('unauthorized')) {\n      this.updateServiceHealth(service, 'offline');\n    }\n    // Timeout errors\n    else if (errorMessage.includes('timeout')) {\n      this.updateServiceHealth(service, 'degraded');\n    }\n    // Generic service unavailable\n    else if (errorMessage.includes('503') || errorMessage.includes('502') || errorMessage.includes('504')) {\n      this.updateServiceHealth(service, 'degraded');\n    }\n  }\n\n  /**\n   * Enable offline mode with graceful degradation\n   */\n  private enableOfflineMode(): void {\n    this.offlineModeEnabled = true;\n    \n    // Update all service statuses\n    Object.keys(this.serviceHealth).forEach(service => {\n      if (service !== 'network') {\n        this.updateServiceHealth(service as keyof ServiceHealth, 'offline');\n      }\n    });\n\n    logger.info('Offline mode enabled - voice interviews will use fallback mechanisms');\n  }\n\n  /**\n   * Check health of all services after network restoration\n   */\n  private async checkServicesHealth(): Promise<void> {\n    if (this.serviceHealth.network === 'offline') return;\n\n    const healthChecks = [\n      this.checkServiceHealth('speechToText', '/api/voice/stream'),\n      this.checkServiceHealth('textToSpeech', '/api/voice/tts'),\n      this.checkServiceHealth('openAI', '/api/voice/conversation')\n    ];\n\n    await Promise.allSettled(healthChecks);\n  }\n\n  /**\n   * Check individual service health\n   */\n  private async checkServiceHealth(service: keyof ServiceHealth, endpoint: string): Promise<void> {\n    try {\n      const response = await fetch(endpoint, { method: 'GET' });\n      this.updateServiceHealth(service, response.ok ? 'online' : 'degraded');\n    } catch {\n      this.updateServiceHealth(service, 'offline');\n    }\n  }\n\n  /**\n   * Get current service health status\n   */\n  getServiceHealth(): ServiceHealth {\n    return { ...this.serviceHealth };\n  }\n\n  /**\n   * Check if a service is available\n   */\n  isServiceAvailable(service: keyof ServiceHealth): boolean {\n    return this.serviceHealth[service] === 'online' || this.serviceHealth[service] === 'degraded';\n  }\n\n  /**\n   * Get user-friendly error message\n   */\n  getUserFriendlyErrorMessage(service: keyof ServiceHealth, error?: Error): string {\n    if (this.serviceHealth.network === 'offline') {\n      return 'You appear to be offline. Please check your internet connection and try again.';\n    }\n\n    const serviceHealth = this.serviceHealth[service];\n    \n    switch (serviceHealth) {\n      case 'offline':\n        switch (service) {\n          case 'speechToText':\n            return 'Speech recognition is currently unavailable. You can type your responses instead.';\n          case 'textToSpeech':\n            return 'Audio playback is unavailable. You can read the AI responses as text.';\n          case 'openAI':\n            return 'The AI interviewer is temporarily unavailable. Please try again later.';\n          default:\n            return 'This service is currently unavailable. Please try again later.';\n        }\n      \n      case 'degraded':\n        return 'Service is experiencing high demand. Response times may be slower than usual.';\n        \n      default:\n        return error?.message || 'An unexpected error occurred. Please try again.';\n    }\n  }\n\n  /**\n   * Sleep utility for retry delays\n   */\n  private sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Reset all error counters and health status\n   */\n  reset(): void {\n    this.retryAttempts.clear();\n    this.serviceHealth = {\n      speechToText: 'online',\n      textToSpeech: 'online',\n      openAI: 'online',\n      network: navigator?.onLine ? 'online' : 'offline'\n    };\n    this.offlineModeEnabled = false;\n    \n    logger.info('Error recovery system reset');\n  }\n}\n\n// Export singleton instance\nexport const voiceErrorRecovery = new VoiceInterviewErrorRecovery();\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/pages/api/auth/user.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'verifyAuthHeader' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":26}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextApiRequest, NextApiResponse } from 'next';\nimport { verifyAuthHeader } from '@/lib/shared/auth';\n\n/**\n * API endpoint to get current user information\n * Provides client-safe access to user data without bundling server-only modules\n */\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  if (req.method !== 'GET') {\n    return res.status(405).json({ error: 'Method not allowed' });\n  }\n\n  try {\n    // Check for session cookie (same logic as middleware)\n    const sessionCookie = req.cookies.session;\n    \n    if (!sessionCookie) {\n      return res.status(401).json({ error: 'No session cookie found' });\n    }\n\n    const sessionValue = sessionCookie.trim();\n    \n    // Handle mock tokens for development\n    if (sessionValue.startsWith('mock-token-')) {\n      return res.status(200).json({\n        success: true,\n        user: {\n          uid: 'mock-user',\n          id: 'mock-user',\n          name: 'Mock User',\n          displayName: 'Mock User',\n          email: 'mock@example.com',\n          picture: null,\n          email_verified: true,\n          provider: 'mock'\n        }\n      });\n    }\n    \n    // For Firebase JWT tokens, decode payload (same as middleware)\n    if (sessionValue.includes('.')) {\n      const parts = sessionValue.split('.');\n      if (parts.length >= 3) {\n        try {\n          // Decode the payload without full verification (lightweight)\n          const payload = JSON.parse(atob(parts[1].replace(/-/g, '+').replace(/_/g, '/')));\n          \n          // Check if token is expired\n          const now = Math.floor(Date.now() / 1000);\n          if (payload.exp && payload.exp < now) {\n            return res.status(401).json({ error: 'Session token expired' });\n          }\n          \n          // Return user information from JWT payload\n          return res.status(200).json({\n            success: true,\n            user: {\n              uid: payload.uid || payload.sub,\n              id: payload.uid || payload.sub,\n              name: payload.name || payload.displayName || payload.email?.split('@')[0] || 'User',\n              displayName: payload.name || payload.displayName || payload.email?.split('@')[0] || 'User',\n              email: payload.email,\n              picture: payload.picture || payload.avatar_url,\n              email_verified: payload.email_verified || false,\n              provider: payload.firebase?.identities ? Object.keys(payload.firebase.identities)[0] : 'unknown'\n            }\n          });\n        } catch (decodeError) {\n          console.error('Failed to decode JWT payload:', decodeError);\n          return res.status(401).json({ error: 'Invalid token format' });\n        }\n      }\n    }\n    \n    return res.status(401).json({ error: 'Invalid session format' });\n    \n  } catch (error) {\n    console.error('Error getting current user:', error);\n    return res.status(500).json({ \n      success: false,\n      error: 'Internal server error' \n    });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/pages/api/feature-flags.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'verifyAuthHeader' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":26}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextApiRequest, NextApiResponse } from 'next';\nimport { featureFlagsService } from '@/lib/services/feature-flags';\nimport { verifyAuthHeader } from '@/lib/shared/auth';\n\n/**\n * API endpoint for feature flags - provides client-safe access to feature flags\n * without bundling server-only modules for the client\n */\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  if (req.method !== 'GET') {\n    return res.status(405).json({ error: 'Method not allowed' });\n  }\n\n  try {\n    // Optional: Verify authentication if needed\n    // const authResult = await verifyAuthHeader(req.headers.authorization);\n    // if (!authResult.success) {\n    //   return res.status(401).json({ error: 'Unauthorized' });\n    // }\n\n    const refreshFlags = req.query.refresh === 'true';\n\n    // Get feature flags from the service\n    const flags = refreshFlags \n      ? await featureFlagsService.refreshFeatureFlags()\n      : await featureFlagsService.getAllFeatureFlags();\n\n    return res.status(200).json(flags);\n  } catch (error) {\n    console.error('Error fetching feature flags:', error);\n    \n    // Return default flags on error\n    return res.status(200).json({\n      autoApplyAzure: false,\n      portalIntegration: false,\n      voiceInterview: false,\n      premiumFeatures: false,\n      newUI: false,\n      rolloutStatus: {\n        autoApplyAzure: false,\n        portalIntegration: false,\n        voiceInterview: false,\n        premiumFeatures: false,\n        newUI: false,\n      },\n    });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/pages/api/upload-pdf.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'migrationOpenAIClient' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'writeFile' is defined but never used.","line":4,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'unlink' is defined but never used.","line":4,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'join' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2223,2226],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2223,2226],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { NextApiRequest, NextApiResponse } from 'next';\nimport { migrationOpenAIClient } from '@/lib/azure-ai-foundry/clients/migration-wrapper';\nimport { IncomingForm, File } from 'formidable';\nimport { readFile, writeFile, unlink } from 'fs/promises';\nimport { join } from 'path';\nimport { azureOpenAIService } from '@/lib/services/azure-openai-service';\nimport { resumeProcessingService } from '@/lib/services/resume-processing-service';\nimport { verifyIdToken } from '@/lib/firebase/admin';\nimport {\n  ErrorCode,\n  APIResponse,\n  createErrorResponse,\n  createSuccessResponse,\n  getHTTPStatusFromErrorCode\n} from '@/lib/utils/structured-errors';\n\nexport const config = {\n  api: {\n    bodyParser: false,\n  },\n};\n\n// Azure OpenAI Service will be initialized in the handler\n\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse<APIResponse>\n) {\n  // Set CORS headers\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n\n  if (req.method === 'OPTIONS') {\n    return res.status(200).end();\n  }\n\n  if (req.method !== 'POST') {\n    const err = createErrorResponse(\n      ErrorCode.INVALID_REQUEST,\n      { method: req.method },\n      'Method not allowed'\n    );\n    return res.status(getHTTPStatusFromErrorCode(err.error.code)).json(err);\n  }\n\n  try {\n    // Initialize Azure OpenAI Service\n    const isAzureInitialized = await azureOpenAIService.initialize();\n    if (!isAzureInitialized) {\n      console.error('Azure OpenAI service initialization failed');\n      const err = createErrorResponse(\n        ErrorCode.SERVICE_NOT_CONFIGURED,\n        { service: 'azure-openai' },\n        'Server configuration error'\n      );\n      const status = getHTTPStatusFromErrorCode(err.error.code);\n      if (err.error.retryable && err.error.retryAfter) {\n        res.setHeader('Retry-After', String(err.error.retryAfter));\n        res.setHeader('X-Retry-After', String(err.error.retryAfter));\n      }\n      return res.status(status).json(err);\n    }\n\n    // Handle authentication\n    const authHeader = req.headers.authorization;\n    let decodedToken: any = null;\n    \n    if (authHeader && authHeader.startsWith('Bearer ')) {\n      const idToken = authHeader.split(' ')[1];\n      decodedToken = await verifyIdToken(idToken);\n      if (!decodedToken) {\n        const err = createErrorResponse(ErrorCode.AUTH_TOKEN_INVALID);\n        return res.status(getHTTPStatusFromErrorCode(err.error.code)).json(err);\n      }\n    } else if (process.env.NODE_ENV === 'production') {\n      // In production, always require auth\n      const err = createErrorResponse(ErrorCode.AUTH_TOKEN_MISSING);\n      return res.status(getHTTPStatusFromErrorCode(err.error.code)).json(err);\n    } else {\n      console.warn('Development mode: Using mock user ID for PDF upload');\n      decodedToken = { uid: 'dev-user-001' }; // Mock token for development\n    }\n\n    // Parse the form data\n    const form = new IncomingForm();\n    const { files } = await new Promise<{ files: { file?: File[] } }>((resolve, reject) => {\n      form.parse(req, (err, _, files) => {\n        if (err) return reject(err);\n        resolve({ files } as { files: { file?: File[] } });\n      });\n    });\n\n    const file = files?.file?.[0];\n    if (!file) {\n      const err = createErrorResponse(\n        ErrorCode.MISSING_REQUIRED_FIELD,\n        { field: 'file' },\n        'No file uploaded'\n      );\n      return res.status(getHTTPStatusFromErrorCode(err.error.code)).json(err);\n    }\n\n    // Validate file size and type\n    if (file.size > 10 * 1024 * 1024) { // 10MB limit\n      const err = createErrorResponse(\n        ErrorCode.FILE_TOO_LARGE,\n        { size: file.size, maxSize: 10485760 },\n        'File size exceeds 10MB limit'\n      );\n      return res.status(getHTTPStatusFromErrorCode(err.error.code)).json(err);\n    }\n\n    const allowedTypes = ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];\n    if (file.mimetype && !allowedTypes.includes(file.mimetype)) {\n      const err = createErrorResponse(\n        ErrorCode.INVALID_FILE_TYPE,\n        { type: file.mimetype, allowedTypes },\n        'Invalid file type. Please upload a PDF or Word document'\n      );\n      return res.status(getHTTPStatusFromErrorCode(err.error.code)).json(err);\n    }\n\n    const fileBuffer = await readFile(file.filepath);\n    \n    // Use the resume processing service to handle the upload\n    const result = await resumeProcessingService.processResume(\n      decodedToken.uid, \n      fileBuffer, \n      file.originalFilename || 'resume.pdf', \n      file.mimetype || 'application/pdf',\n      file.size\n    );\n\n    if (result.success) {\n      const successResponse = createSuccessResponse(result.data);\n      return res.status(200).json(successResponse);\n    } else {\n      // Map service error to structured error\n      let code: ErrorCode = ErrorCode.INTERNAL_SERVER_ERROR;\n      if (result.error?.includes('quota') || result.error?.includes('rate limit')) {\n        code = ErrorCode.RATE_LIMIT_EXCEEDED;\n      } else if (result.error?.includes('storage')) {\n        code = ErrorCode.STORAGE_ERROR;\n      } else if (result.error?.includes('processing') || result.error?.includes('gemini')) {\n        code = ErrorCode.INTERNAL_SERVER_ERROR;\n      }\n      \n      const err = createErrorResponse(code, { service: 'resume-processing' }, result.error);\n      const status = getHTTPStatusFromErrorCode(err.error.code);\n      if (err.error.retryable && err.error.retryAfter) {\n        res.setHeader('Retry-After', String(err.error.retryAfter));\n        res.setHeader('X-Retry-After', String(err.error.retryAfter));\n      }\n      return res.status(status).json(err);\n    }\n  } catch (error: unknown) {\n    console.error('Error processing PDF:', error);\n    \n    // Determine appropriate error code\n    let code: ErrorCode = ErrorCode.INTERNAL_SERVER_ERROR;\n    const message = error instanceof Error ? error.message.toLowerCase() : '';\n    \n    if (message.includes('quota') || message.includes('rate limit')) {\n      code = ErrorCode.RATE_LIMIT_EXCEEDED;\n    } else if (message.includes('timeout')) {\n      code = ErrorCode.SERVICE_TIMEOUT;\n    } else if (message.includes('storage') || message.includes('firebase')) {\n      code = ErrorCode.STORAGE_ERROR;\n    } else if (message.includes('authorization') || message.includes('auth')) {\n      code = ErrorCode.AUTH_TOKEN_INVALID;\n    } else if (message.includes('file')) {\n      code = ErrorCode.INVALID_FILE_TYPE;\n    }\n    \n    const err = createErrorResponse(\n      code,\n      { context: 'pdf-upload' },\n      'Failed to process PDF'\n    );\n    \n    const status = getHTTPStatusFromErrorCode(err.error.code);\n    if (err.error.retryable && err.error.retryAfter) {\n      res.setHeader('Retry-After', String(err.error.retryAfter));\n      res.setHeader('X-Retry-After', String(err.error.retryAfter));\n    }\n    \n    return res.status(status).json(err);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/dikshantvashistha/PrepBettr/pages/api/upload-profile-pic.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'resumeStorageService' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[853,856],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[853,856],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2811,2814],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2811,2814],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { NextApiRequest, NextApiResponse } from 'next';\nimport { IncomingForm, File } from 'formidable';\nimport { readFile } from 'fs/promises';\nimport { resumeStorageService } from '@/lib/storage';\nimport { verifyIdToken } from '@/lib/firebase/admin';\n\nexport const config = {\n  api: {\n    bodyParser: false,\n  },\n};\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n\n  if (req.method === 'OPTIONS') return res.status(200).end();\n  if (req.method !== 'POST') return res.status(405).json({ error: 'Method not allowed' });\n\n  try {\n    // Auth\n    const authHeader = req.headers.authorization;\n    let decodedToken: any = null;\n\n    if (authHeader && authHeader.startsWith('Bearer ')) {\n      const idToken = authHeader.split(' ')[1];\n      decodedToken = await verifyIdToken(idToken);\n      if (!decodedToken) return res.status(401).json({ error: 'Unauthorized - Invalid token' });\n    } else if (process.env.NODE_ENV === 'production') {\n      return res.status(401).json({ error: 'Unauthorized - No token provided' });\n    } else {\n      decodedToken = { uid: 'dev-user-001' };\n    }\n\n    // Parse multipart form\n    const form = new IncomingForm();\n    const { files } = await new Promise<{ files: { file?: File[] } }>((resolve, reject) => {\n      form.parse(req, (err, _fields, files) => {\n        if (err) return reject(err);\n        resolve({ files } as { files: { file?: File[] } });\n      });\n    });\n\n    const file = files?.file?.[0];\n    if (!file) return res.status(400).json({ error: 'No file uploaded' });\n\n    // Validate type and size (max 5MB)\n    const allowed = ['image/jpeg', 'image/png', 'image/webp'];\n    const mime = file.mimetype || 'application/octet-stream';\n    if (!allowed.includes(mime)) return res.status(400).json({ error: 'Only JPEG, PNG, WebP allowed' });\n    if (file.size > 5 * 1024 * 1024) return res.status(400).json({ error: 'File too large (max 5MB)' });\n\n    const buffer = await readFile(file.filepath);\n    const safeName = (file.originalFilename || 'avatar').replace(/[^a-zA-Z0-9._-]/g, '_');\n    const path = `avatars/${decodedToken.uid}/${Date.now()}-${safeName}`;\n\n    // Use storage abstraction directly\n    const service = await (await import('@/lib/storage')).getStorageService();\n    const meta = await service.upload(buffer, path, mime);\n\n    // Prefer a time-bound URL\n    let url: string = meta.url;\n    try {\n      url = await service.getPublicUrl(path, { accessType: 'read', expiresIn: 24 * 3600 });\n    } catch {\n      // fallback to meta.url\n    }\n\n    return res.status(200).json({ url, path });\n  } catch (error: any) {\n    console.error('Avatar upload failed:', error);\n    return res.status(500).json({ error: 'Failed to upload profile picture' });\n  }\n}\n\n","usedDeprecatedRules":[]}]