{"version":3,"file":"logsIngestionClient.js","sourceRoot":"","sources":["../../src/logsIngestionClient.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAGlC,6CAAqD;AAErD,uDAA6C;AAI7C,kDAA8D;AAC9D,gDAA2C;AAC3C,2DAAqD;AACrD,6EAAgE;AAChE,mFAAuE;AAGvE,MAAM,uBAAuB,GAAG,CAAC,CAAC;AAElC;;GAEG;AACH,MAAa,mBAAmB;IAK9B;;;;;OAKG;IACH,YACE,QAAgB,EAChB,eAAgC,EAChC,OAAoC;;QAEpC,MAAM,iBAAiB,GAAG,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,gBAAgB,0CAAE,eAAe,CAAC;QACrE,MAAM,eAAe,GAAG,iBAAiB;YACvC,CAAC,CAAC,GAAG,iBAAiB,kBAAkB;YACxC,CAAC,CAAC,iBAAiB,CAAC;QACtB,IAAI,CAAC,OAAO,GAAG,IAAA,8BAAmB,EAAC,QAAQ,EAAE,eAAe,kCACvD,OAAO,KACV,gBAAgB,EAAE,EAAE,eAAe,EAAE,IACrC,CAAC;QACH,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;QACtC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,kCAAc,CAAC,CAAC;IAC1C,CAAC;IAED;;;;;;;OAOG;IACH,KAAK,CAAC,MAAM,CACV,MAAc,EACd,UAAkB,EAClB,IAA+B,EAC/B,OAA2B;QAE3B,6GAA6G;;QAE7G,mCAAmC;QACnC,MAAM,UAAU,GAAG,IAAA,8CAAiB,EAAC,IAAI,CAAC,CAAC;QAC3C,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,cAAc,mCAAI,uBAAuB,EAAE,CAAC,CAAC,CAAC;QAEpF,MAAM,kBAAkB,GAA6B,EAAE,CAAC;QACxD,MAAM,IAAA,uCAAa,EACjB,WAAW,EACX,UAAU,EACV,KAAK,EAAE,SAAoC,EAAiB,EAAE;YAC5D,IAAI,CAAC;gBACH,MAAM,IAAA,sBAAM,EAAC,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,SAAS,EAAE;oBACxD,eAAe,EAAE,MAAM;oBACvB,WAAW,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,WAAW;iBAClC,CAAC,CAAC;YACL,CAAC;YAAC,OAAO,CAAU,EAAE,CAAC;gBACpB,IAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,EAAE,CAAC;oBACrB,OAAO,CAAC,OAAO,CAAC;wBACd,UAAU,EAAE,SAAS;wBACrB,KAAK,EAAE,IAAA,mBAAO,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAW,CAAC;qBAC/C,CAAC,CAAC;gBACL,CAAC;gBACD,kBAAkB,CAAC,IAAI,CAAC;oBACtB,KAAK,EAAE,IAAA,mBAAO,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAW,CAAC;oBAC9C,UAAU,EAAE,SAAS;iBACtB,CAAC,CAAC;YACL,CAAC;QACH,CAAC,EACD,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,WAAW,CACrB,CAAC;QACF,IAAI,kBAAkB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAClC,MAAM,IAAI,oCAAwB,CAAC,kBAAkB,CAAC,CAAC;QACzD,CAAC;QACD,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;CACF;AA9ED,kDA8EC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { LogsIngestionContext, LogsIngestionClientOptions } from \"./api/index.js\";\nimport { createLogsIngestion } from \"./api/index.js\";\nimport type { LogsUploadOptions } from \"./api/options.js\";\nimport { upload } from \"./api/operations.js\";\nimport type { Pipeline } from \"@azure/core-rest-pipeline\";\nimport type { TokenCredential } from \"@azure/core-auth\";\nimport type { LogsUploadFailure } from \"./models/models.js\";\nimport { AggregateLogsUploadError } from \"./models/models.js\";\nimport { isError } from \"@azure/core-util\";\nimport { GZippingPolicy } from \"./gZippingPolicy.js\";\nimport { concurrentRun } from \"./utils/concurrentPoolHelper.js\";\nimport { splitDataToChunks } from \"./utils/splitDataToChunksHelper.js\";\nexport { LogsIngestionClientOptions } from \"./api/logsIngestionContext.js\";\n\nconst DEFAULT_MAX_CONCURRENCY = 5;\n\n/**\n * Client for Monitor Logs Ingestion\n */\nexport class LogsIngestionClient {\n  private _client: LogsIngestionContext;\n  /** The pipeline used by this client to make requests */\n  public readonly pipeline: Pipeline;\n\n  /**\n   * Construct a MonitorIngestionClient that can be used to query logs using the Log Analytics Query language.\n   *\n   * @param tokenCredential - A token credential.\n   * @param options - Options for the MonitorIngestionClient.\n   */\n  constructor(\n    endpoint: string,\n    tokenCredential: TokenCredential,\n    options?: LogsIngestionClientOptions,\n  ) {\n    const prefixFromOptions = options?.userAgentOptions?.userAgentPrefix;\n    const userAgentPrefix = prefixFromOptions\n      ? `${prefixFromOptions} azsdk-js-client`\n      : `azsdk-js-client`;\n    this._client = createLogsIngestion(endpoint, tokenCredential, {\n      ...options,\n      userAgentOptions: { userAgentPrefix },\n    });\n    this.pipeline = this._client.pipeline;\n    this.pipeline.addPolicy(GZippingPolicy);\n  }\n\n  /**\n   * Uploads logs to Monitor Resource\n   * @param ruleId - The immutable Id of the Data Collection Rule resource.\n   * @param streamName - The streamDeclaration name as defined in the Data Collection Rule.\n   * @param logs - An array of objects matching the schema defined by the provided stream.\n   * @param options - The options parameters.\n   * See error response code and error response message for more detail.\n   */\n  async upload(\n    ruleId: string,\n    streamName: string,\n    logs: Record<string, unknown>[],\n    options?: LogsUploadOptions,\n  ): Promise<void> {\n    // TODO: Do we need to worry about memory issues when loading data for 100GB ?? JS max allocation is 1 or 2GB\n\n    // This splits logs into 1MB chunks\n    const chunkArray = splitDataToChunks(logs);\n    const concurrency = Math.max(options?.maxConcurrency ?? DEFAULT_MAX_CONCURRENCY, 1);\n\n    const uploadResultErrors: Array<LogsUploadFailure> = [];\n    await concurrentRun(\n      concurrency,\n      chunkArray,\n      async (eachChunk: Record<string, unknown>[]): Promise<void> => {\n        try {\n          await upload(this._client, ruleId, streamName, eachChunk, {\n            contentEncoding: \"gzip\",\n            abortSignal: options?.abortSignal,\n          });\n        } catch (e: unknown) {\n          if (options?.onError) {\n            options.onError({\n              failedLogs: eachChunk,\n              cause: isError(e) ? e : new Error(e as string),\n            });\n          }\n          uploadResultErrors.push({\n            cause: isError(e) ? e : new Error(e as string),\n            failedLogs: eachChunk,\n          });\n        }\n      },\n      options?.abortSignal,\n    );\n    if (uploadResultErrors.length > 0) {\n      throw new AggregateLogsUploadError(uploadResultErrors);\n    }\n    return Promise.resolve();\n  }\n}\n"]}