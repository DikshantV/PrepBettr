"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.concurrentRun = concurrentRun;
async function concurrentRun(maxConcurrency, inputData, callback, abortSignal) {
    const dataQueue = [...inputData].reverse();
    const promises = [];
    function removePromise(p) {
        void promises.splice(promises.indexOf(p), 1);
    }
    while (dataQueue.length) {
        while (dataQueue.length && promises.length < maxConcurrency) {
            const worker = dataQueue.pop();
            const promise = callback(worker);
            void promise.finally(() => removePromise(promise));
            promises.push(promise);
        }
        if (promises.length === maxConcurrency) {
            await Promise.race(promises);
        }
        if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            await Promise.all(promises);
            return;
        }
    }
    await Promise.all(promises);
}
//# sourceMappingURL=concurrentPoolHelper.js.map