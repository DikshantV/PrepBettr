{"version":3,"file":"operations.js","sourceRoot":"","sources":["../../../src/api/operations.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AAQlC,kCAmCC;AAED,gDAOC;AAGD,wBASC;AA5DD,qEAAqE;AAErE,yDAA+F;AAE/F,SAAgB,WAAW,CACzB,OAAe,EACf,MAAc,EACd,UAAkB,EAClB,IAA2B,EAC3B,UAA6B,EAAE,cAAc,EAAE,EAAE,EAAE;;IAEnD,MAAM,IAAI,GAAG,IAAA,kCAAiB,EAC5B,gEAAgE,EAChE;QACE,MAAM,EAAE,MAAM;QACd,MAAM,EAAE,UAAU;QAClB,eAAe,EAAE,OAAO,CAAC,UAAU;KACpC,EACD;QACE,aAAa,EAAE,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,cAAc,0CAAE,eAAe;KACxD,CACF,CAAC;IACF,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,iCACzB,IAAA,iDAAmC,EAAC,OAAO,CAAC,KAC/C,WAAW,EAAE,kBAAkB,EAC/B,OAAO,8DACF,CAAC,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,eAAe,MAAK,SAAS;YACxC,CAAC,CAAC,EAAE,kBAAkB,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,eAAe,EAAE;YAClD,CAAC,CAAC,EAAE,CAAC,GACJ,CAAC,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,eAAe,MAAK,SAAS;YACxC,CAAC,CAAC,EAAE,wBAAwB,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,eAAe,EAAE;YACxD,CAAC,CAAC,EAAE,CAAC,KACP,MAAM,EAAE,kBAAkB,KACvB,MAAA,OAAO,CAAC,cAAc,0CAAE,OAAO,GAEpC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE;YACxB,OAAO,CAAC,CAAC;QACX,CAAC,CAAC,IACF,CAAC;AACL,CAAC;AAEM,KAAK,UAAU,kBAAkB,CAAC,MAA6B;IACpE,MAAM,gBAAgB,GAAG,CAAC,KAAK,CAAC,CAAC;IACjC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;QAC9C,MAAM,IAAA,6BAAe,EAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAED,OAAO;AACT,CAAC;AAED,8EAA8E;AACvE,KAAK,UAAU,MAAM,CAC1B,OAAe,EACf,MAAc,EACd,UAAkB,EAClB,IAA2B,EAC3B,UAA6B,EAAE,cAAc,EAAE,EAAE,EAAE;IAEnD,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IAC7E,OAAO,kBAAkB,CAAC,MAAM,CAAC,CAAC;AACpC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { LogsIngestionContext as Client } from \"./index.js\";\nimport type { LogsUploadOptions } from \"./options.js\";\nimport { expandUrlTemplate } from \"../static-helpers/urlTemplate.js\";\nimport type { StreamableMethod, PathUncheckedResponse } from \"@azure-rest/core-client\";\nimport { createRestError, operationOptionsToRequestParameters } from \"@azure-rest/core-client\";\n\nexport function _uploadSend(\n  context: Client,\n  ruleId: string,\n  streamName: string,\n  body: Record<string, any>[],\n  options: LogsUploadOptions = { requestOptions: {} },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/dataCollectionRules/{ruleId}/streams/{stream}{?api%2Dversion}\",\n    {\n      ruleId: ruleId,\n      stream: streamName,\n      \"api%2Dversion\": context.apiVersion,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).post({\n    ...operationOptionsToRequestParameters(options),\n    contentType: \"application/json\",\n    headers: {\n      ...(options?.contentEncoding !== undefined\n        ? { \"Content-Encoding\": options?.contentEncoding }\n        : {}),\n      ...(options?.clientRequestId !== undefined\n        ? { \"x-ms-client-request-id\": options?.clientRequestId }\n        : {}),\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n    body: body.map((p: any) => {\n      return p;\n    }),\n  });\n}\n\nexport async function _uploadDeserialize(result: PathUncheckedResponse): Promise<void> {\n  const expectedStatuses = [\"204\"];\n  if (!expectedStatuses.includes(result.status)) {\n    throw createRestError(result);\n  }\n\n  return;\n}\n\n/** Ingestion API used to directly ingest data using Data Collection Rules. */\nexport async function upload(\n  context: Client,\n  ruleId: string,\n  streamName: string,\n  body: Record<string, any>[],\n  options: LogsUploadOptions = { requestOptions: {} },\n): Promise<void> {\n  const result = await _uploadSend(context, ruleId, streamName, body, options);\n  return _uploadDeserialize(result);\n}\n"]}