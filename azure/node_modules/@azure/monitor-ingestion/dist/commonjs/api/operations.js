"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports._uploadSend = _uploadSend;
exports._uploadDeserialize = _uploadDeserialize;
exports.upload = upload;
const urlTemplate_js_1 = require("../static-helpers/urlTemplate.js");
const core_client_1 = require("@azure-rest/core-client");
function _uploadSend(context, ruleId, streamName, body, options = { requestOptions: {} }) {
    var _a, _b;
    const path = (0, urlTemplate_js_1.expandUrlTemplate)("/dataCollectionRules/{ruleId}/streams/{stream}{?api%2Dversion}", {
        ruleId: ruleId,
        stream: streamName,
        "api%2Dversion": context.apiVersion,
    }, {
        allowReserved: (_a = options === null || options === void 0 ? void 0 : options.requestOptions) === null || _a === void 0 ? void 0 : _a.skipUrlEncoding,
    });
    return context.path(path).post(Object.assign(Object.assign({}, (0, core_client_1.operationOptionsToRequestParameters)(options)), { contentType: "application/json", headers: Object.assign(Object.assign(Object.assign(Object.assign({}, ((options === null || options === void 0 ? void 0 : options.contentEncoding) !== undefined
            ? { "Content-Encoding": options === null || options === void 0 ? void 0 : options.contentEncoding }
            : {})), ((options === null || options === void 0 ? void 0 : options.clientRequestId) !== undefined
            ? { "x-ms-client-request-id": options === null || options === void 0 ? void 0 : options.clientRequestId }
            : {})), { accept: "application/json" }), (_b = options.requestOptions) === null || _b === void 0 ? void 0 : _b.headers), body: body.map((p) => {
            return p;
        }) }));
}
async function _uploadDeserialize(result) {
    const expectedStatuses = ["204"];
    if (!expectedStatuses.includes(result.status)) {
        throw (0, core_client_1.createRestError)(result);
    }
    return;
}
/** Ingestion API used to directly ingest data using Data Collection Rules. */
async function upload(context, ruleId, streamName, body, options = { requestOptions: {} }) {
    const result = await _uploadSend(context, ruleId, streamName, body, options);
    return _uploadDeserialize(result);
}
//# sourceMappingURL=operations.js.map