{"version":3,"file":"models.js","sourceRoot":"","sources":["../../../src/models/models.ts"],"names":[],"mappings":";;;AAyEA,gEAKC;AA9ED,uCAAuC;AACvC,kCAAkC;AAClC,gDAA2C;AAE3C,2BAA2B;AAC3B,IAAY,aAGX;AAHD,WAAY,aAAa;IACvB,kCAAkC;IAClC,yCAAwB,CAAA;AAC1B,CAAC,EAHW,aAAa,6BAAb,aAAa,QAGxB;AAED;;GAEG;AACH,IAAY,oBAaX;AAbD,WAAY,oBAAoB;IAC9B;;OAEG;IACH,+DAAuC,CAAA;IACvC;;OAEG;IACH,oEAA4C,CAAA;IAC5C;;OAEG;IACH,sEAA8C,CAAA;AAChD,CAAC,EAbW,oBAAoB,oCAApB,oBAAoB,QAa/B;AAgBD;;GAEG;AACU,QAAA,4BAA4B,GAAG,0BAA0B,CAAC;AAEvE;;GAEG;AACH,MAAa,wBAAyB,SAAQ,KAAK;IAOjD;;;;OAIG;IACH,YAAY,MAA2B,EAAE,YAAqB;QAC5D,KAAK,CAAC,GAAG,YAAY,KAAK,CAAC,CAAC;QAC5B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,IAAI,GAAG,oCAA4B,CAAC;IAC3C,CAAC;CACF;AAjBD,4DAiBC;AAED;;;GAGG;AACH,SAAgB,0BAA0B,CAAC,CAAU;IACnD,IAAI,CAAC,YAAY,wBAAwB,EAAE,CAAC;QAC1C,OAAO,IAAI,CAAC;IACd,CAAC;IACD,OAAO,IAAA,mBAAO,EAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,oCAA4B,CAAC;AAC/D,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { isError } from \"@azure/core-util\";\n\n/** Service API versions */\nexport enum KnownVersions {\n  /** The 2023-01-01 API version. */\n  V20230101 = \"2023-01-01\",\n}\n\n/**\n * Known values for Monitor Audience\n */\nexport enum KnownMonitorAudience {\n  /**\n   * Audience for Azure China\n   */\n  AzureChina = \"https://monitor.azure.cn\",\n  /**\n   * Audience for Azure Government\n   */\n  AzureGovernment = \"https://monitor.azure.us\",\n  /**\n   * Audience for Azure Public\n   */\n  AzurePublicCloud = \"https://monitor.azure.com\",\n}\n\n/**\n * Error for each log upload request to service\n */\nexport interface LogsUploadFailure {\n  /**\n   * List of failed logs\n   */\n  failedLogs: Record<string, unknown>[];\n  /**\n   * Error for failed logs\n   */\n  cause: Error;\n}\n\n/**\n * Aggregate Upload Logs Error Name\n */\nexport const AggregateLogsUploadErrorName = \"AggregateLogsUploadError\";\n\n/**\n * Aggregate Error type for upload function\n */\nexport class AggregateLogsUploadError extends Error {\n  /**\n   * List of {@link LogsUploadFailure} returned from\n   * individual upload requests to service\n   */\n  errors: LogsUploadFailure[];\n\n  /**\n   *\n   * @param errors - list of {@link LogsUploadFailure}\n   * @param errorMessage - error message\n   */\n  constructor(errors: LogsUploadFailure[], errorMessage?: string) {\n    super(`${errorMessage}\\n}`);\n    this.errors = errors;\n    this.name = AggregateLogsUploadErrorName;\n  }\n}\n\n/**\n * Typeguard for AggregateUploadLogsError\n * @param e - Something caught by a catch clause.\n */\nexport function isAggregateLogsUploadError(e: unknown): e is AggregateLogsUploadError {\n  if (e instanceof AggregateLogsUploadError) {\n    return true;\n  }\n  return isError(e) && e.name === AggregateLogsUploadErrorName;\n}\n"]}