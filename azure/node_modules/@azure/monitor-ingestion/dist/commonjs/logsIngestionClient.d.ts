import type { LogsIngestionClientOptions } from "./api/index.js";
import type { LogsUploadOptions } from "./api/options.js";
import type { Pipeline } from "@azure/core-rest-pipeline";
import type { TokenCredential } from "@azure/core-auth";
export { LogsIngestionClientOptions } from "./api/logsIngestionContext.js";
/**
 * Client for Monitor Logs Ingestion
 */
export declare class LogsIngestionClient {
    private _client;
    /** The pipeline used by this client to make requests */
    readonly pipeline: Pipeline;
    /**
     * Construct a MonitorIngestionClient that can be used to query logs using the Log Analytics Query language.
     *
     * @param tokenCredential - A token credential.
     * @param options - Options for the MonitorIngestionClient.
     */
    constructor(endpoint: string, tokenCredential: TokenCredential, options?: LogsIngestionClientOptions);
    /**
     * Uploads logs to Monitor Resource
     * @param ruleId - The immutable Id of the Data Collection Rule resource.
     * @param streamName - The streamDeclaration name as defined in the Data Collection Rule.
     * @param logs - An array of objects matching the schema defined by the provided stream.
     * @param options - The options parameters.
     * See error response code and error response message for more detail.
     */
    upload(ruleId: string, streamName: string, logs: Record<string, unknown>[], options?: LogsUploadOptions): Promise<void>;
}
//# sourceMappingURL=logsIngestionClient.d.ts.map