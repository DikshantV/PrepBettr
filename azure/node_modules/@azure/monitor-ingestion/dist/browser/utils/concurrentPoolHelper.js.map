{"version":3,"file":"concurrentPoolHelper.js","sourceRoot":"","sources":["../../../src/utils/concurrentPoolHelper.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAIlC,MAAM,CAAC,KAAK,UAAU,aAAa,CACjC,cAAsB,EACtB,SAAmB,EACnB,QAAoC,EACpC,WAA6B;IAE7B,MAAM,SAAS,GAAG,CAAC,GAAG,SAAS,CAAC,CAAC,OAAO,EAAE,CAAC;IAC3C,MAAM,QAAQ,GAAyB,EAAE,CAAC;IAE1C,SAAS,aAAa,CAAC,CAAgB;QACrC,KAAK,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/C,CAAC;IACD,OAAO,SAAS,CAAC,MAAM,EAAE,CAAC;QACxB,OAAO,SAAS,CAAC,MAAM,IAAI,QAAQ,CAAC,MAAM,GAAG,cAAc,EAAE,CAAC;YAC5D,MAAM,MAAM,GAAG,SAAS,CAAC,GAAG,EAAE,CAAC;YAC/B,MAAM,OAAO,GAAG,QAAQ,CAAC,MAAO,CAAC,CAAC;YAClC,KAAK,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC;YACnD,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACzB,CAAC;QACD,IAAI,QAAQ,CAAC,MAAM,KAAK,cAAc,EAAE,CAAC;YACvC,MAAM,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC/B,CAAC;QACD,IAAI,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,OAAO,EAAE,CAAC;YACzB,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAC5B,OAAO;QACT,CAAC;IACH,CAAC;IACD,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AAC9B,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { AbortSignalLike } from \"@azure/abort-controller\";\n\nexport async function concurrentRun<T>(\n  maxConcurrency: number,\n  inputData: Array<T>,\n  callback: (args: T) => Promise<void>,\n  abortSignal?: AbortSignalLike,\n): Promise<void> {\n  const dataQueue = [...inputData].reverse();\n  const promises: Array<Promise<void>> = [];\n\n  function removePromise(p: Promise<void>): void {\n    void promises.splice(promises.indexOf(p), 1);\n  }\n  while (dataQueue.length) {\n    while (dataQueue.length && promises.length < maxConcurrency) {\n      const worker = dataQueue.pop();\n      const promise = callback(worker!);\n      void promise.finally(() => removePromise(promise));\n      promises.push(promise);\n    }\n    if (promises.length === maxConcurrency) {\n      await Promise.race(promises);\n    }\n    if (abortSignal?.aborted) {\n      await Promise.all(promises);\n      return;\n    }\n  }\n  await Promise.all(promises);\n}\n"]}